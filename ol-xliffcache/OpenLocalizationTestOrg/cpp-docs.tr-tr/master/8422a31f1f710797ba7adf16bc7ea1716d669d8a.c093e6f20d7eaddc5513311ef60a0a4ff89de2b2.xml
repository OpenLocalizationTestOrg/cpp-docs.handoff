{"nodes":[{"pos":[12,42],"content":"CObList Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CObList Class | Microsoft Docs","pos":[0,30]}]},{"content":"CObList Class","pos":[645,658]},{"pos":[659,759],"content":"fSupports ordered lists of nonunique <ph id=\"ph1\">`CObject`</ph> pointers accessible sequentially or by pointer value.","source":"fSupports ordered lists of nonunique `CObject` pointers accessible sequentially or by pointer value."},{"content":"Syntax","pos":[768,774]},{"content":"Members","pos":[831,838]},{"content":"Public Constructors","pos":[848,867]},{"content":"Name","pos":[874,878]},{"content":"Description","pos":[879,890]},{"content":"CObList::CObList","pos":[929,945]},{"pos":[966,1014],"content":"Constructs an empty list for <ph id=\"ph1\">`CObject`</ph> pointers.","source":"Constructs an empty list for `CObject` pointers."},{"content":"Public Methods","pos":[1025,1039]},{"content":"Name","pos":[1046,1050]},{"content":"Description","pos":[1051,1062]},{"content":"CObList::AddHead","pos":[1101,1117]},{"content":"Adds an element (or all the elements in another list) to the head of the list (makes a new head).","pos":[1138,1235]},{"content":"CObList::AddTail","pos":[1241,1257]},{"content":"Adds an element (or all the elements in another list) to the tail of the list (makes a new tail).","pos":[1278,1375]},{"content":"CObList::Find","pos":[1381,1394]},{"content":"Gets the position of an element specified by pointer value.","pos":[1412,1471]},{"content":"CObList::FindIndex","pos":[1477,1495]},{"content":"Gets the position of an element specified by a zero-based index.","pos":[1518,1582]},{"content":"CObList::GetAt","pos":[1588,1602]},{"content":"Gets the element at a given position.","pos":[1621,1658]},{"content":"CObList::GetCount","pos":[1664,1681]},{"content":"Returns the number of elements in this list.","pos":[1703,1747]},{"content":"CObList::GetHead","pos":[1753,1769]},{"content":"Returns the head element of the list (cannot be empty).","pos":[1790,1845]},{"content":"CObList::GetHeadPosition","pos":[1851,1875]},{"content":"Returns the position of the head element of the list.","pos":[1904,1957]},{"content":"CObList::GetNext","pos":[1963,1979]},{"content":"Gets the next element for iterating.","pos":[2000,2036]},{"content":"CObList::GetPrev","pos":[2042,2058]},{"content":"Gets the previous element for iterating.","pos":[2079,2119]},{"content":"CObList::GetSize","pos":[2125,2141]},{"content":"Returns the number of elements in this list.","pos":[2162,2206]},{"content":"CObList::GetTail","pos":[2212,2228]},{"content":"Returns the tail element of the list (cannot be empty).","pos":[2249,2304]},{"content":"CObList::GetTailPosition","pos":[2310,2334]},{"content":"Returns the position of the tail element of the list.","pos":[2363,2416]},{"content":"CObList::InsertAfter","pos":[2422,2442]},{"content":"Inserts a new element after a given position.","pos":[2467,2512]},{"content":"CObList::InsertBefore","pos":[2518,2539]},{"content":"Inserts a new element before a given position.","pos":[2565,2611]},{"content":"CObList::IsEmpty","pos":[2617,2633]},{"content":"Tests for the empty list condition (no elements).","pos":[2654,2703]},{"content":"CObList::RemoveAll","pos":[2709,2727]},{"content":"Removes all the elements from this list.","pos":[2750,2790]},{"content":"CObList::RemoveAt","pos":[2796,2813]},{"content":"Removes an element from this list, specified by position.","pos":[2835,2892]},{"content":"CObList::RemoveHead","pos":[2898,2917]},{"content":"Removes the element from the head of the list.","pos":[2941,2987]},{"content":"CObList::RemoveTail","pos":[2993,3012]},{"content":"Removes the element from the tail of the list.","pos":[3036,3082]},{"content":"CObList::SetAt","pos":[3088,3102]},{"content":"Sets the element at a given position.","pos":[3121,3158]},{"content":"Remarks","pos":[3168,3175]},{"pos":[3189,3227],"content":"lists behave like doubly-linked lists."},{"content":"A variable of type <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> is a key for the list.","pos":[3234,3288],"source":"A variable of type **POSITION** is a key for the list."},{"content":"You can use a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> variable both as an iterator to traverse a list sequentially and as a bookmark to hold a place.","pos":[3289,3411],"source":" You can use a **POSITION** variable both as an iterator to traverse a list sequentially and as a bookmark to hold a place."},{"content":"A position is not the same as an index, however.","pos":[3412,3460]},{"content":"Element insertion is very fast at the list head, at the tail, and at a known <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept>.","pos":[3467,3557],"source":"Element insertion is very fast at the list head, at the tail, and at a known **POSITION**."},{"content":"A sequential search is necessary to look up an element by value or index.","pos":[3558,3631]},{"content":"This search can be slow if the list is long.","pos":[3632,3676]},{"content":"incorporates the <ph id=\"ph1\">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.","pos":[3693,3788],"source":" incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements."},{"content":"If a list of <ph id=\"ph1\">`CObject`</ph> pointers is stored to an archive, either with an overloaded insertion operator or with the <ph id=\"ph2\">`Serialize`</ph> member function, each <ph id=\"ph3\">`CObject`</ph> element is serialized in turn.","pos":[3789,3977],"source":" If a list of `CObject` pointers is stored to an archive, either with an overloaded insertion operator or with the `Serialize` member function, each `CObject` element is serialized in turn."},{"pos":[3984,4108],"content":"If you need a dump of individual <ph id=\"ph1\">`CObject`</ph> elements in the list, you must set the depth of the dump context to 1 or greater.","source":"If you need a dump of individual `CObject` elements in the list, you must set the depth of the dump context to 1 or greater."},{"pos":[4115,4257],"content":"When a <ph id=\"ph1\">`CObList`</ph> object is deleted, or when its elements are removed, only the <ph id=\"ph2\">`CObject`</ph> pointers are removed, not the objects they reference.","source":"When a `CObList` object is deleted, or when its elements are removed, only the `CObject` pointers are removed, not the objects they reference."},{"content":"You can derive your own classes from <ph id=\"ph1\">`CObList`</ph>.","pos":[4264,4311],"source":"You can derive your own classes from `CObList`."},{"content":"Your new list class, designed to hold pointers to objects derived from <ph id=\"ph1\">`CObject`</ph>, adds new data members and new member functions.","pos":[4312,4441],"source":" Your new list class, designed to hold pointers to objects derived from `CObject`, adds new data members and new member functions."},{"content":"Note that the resulting list is not strictly type safe, because it allows insertion of any <ph id=\"ph1\">`CObject`</ph> pointer.","pos":[4442,4551],"source":" Note that the resulting list is not strictly type safe, because it allows insertion of any `CObject` pointer."},{"pos":[4559,4744],"content":"[!NOTE]\n You must use the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro in the implementation of your derived class if you intend to serialize the list.","leadings":["","> "],"nodes":[{"content":"You must use the <bpt id=\"p1\">[</bpt>IMPLEMENT_SERIAL<ept id=\"p1\">](run-time-object-model-services.md#implement_serial)</ept> macro in the implementation of your derived class if you intend to serialize the list.","pos":[9,183],"source":" You must use the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro in the implementation of your derived class if you intend to serialize the list."}]},{"pos":[4751,4848],"content":"For more information on using <ph id=\"ph1\">`CObList`</ph>, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","source":"For more information on using `CObList`, see the article [Collections](../../mfc/collections.md)."},{"content":"Inheritance Hierarchy","pos":[4857,4878]},{"content":"CObject","pos":[4883,4890]},{"content":"Requirements","pos":[4954,4966]},{"pos":[4970,4991],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"pos":[5034,5050],"content":"CObList::AddHead"},{"content":"Adds a new element or list of elements to the head of this list.","pos":[5054,5118]},{"content":"Parameters","pos":[5218,5228]},{"content":"The <ph id=\"ph1\">`CObject`</ph> pointer to be added to this list.","pos":[5248,5295],"source":" The `CObject` pointer to be added to this list."},{"content":"A pointer to another <ph id=\"ph1\">`CObList`</ph> list.","pos":[5316,5352],"source":" A pointer to another `CObList` list."},{"content":"The elements in <ph id=\"ph1\">`pNewList`</ph> will be added to this list.","pos":[5353,5407],"source":" The elements in `pNewList` will be added to this list."},{"content":"Return Value","pos":[5417,5429]},{"pos":[5433,5512],"content":"The first version returns the <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value of the newly inserted element.","source":"The first version returns the **POSITION** value of the newly inserted element."},{"pos":[5519,5607],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::AddHead`</ph>.","source":"The following table shows other member functions that are similar to `CObList::AddHead`."},{"content":"Class","pos":[5614,5619]},{"content":"Member Function","pos":[5620,5635]},{"content":"CPtrList","pos":[5679,5687]},{"content":"<bpt id=\"p1\">**</bpt>POSITION AddHead( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[5728,5776],"source":"**POSITION AddHead( void\\*** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>void AddHead( CPtrList<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`pNewList`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[5789,5835],"source":"**void AddHead( CPtrList\\*** `pNewList` **);**"},{"content":"CStringList","pos":[5841,5852]},{"content":"<bpt id=\"p1\">**</bpt>POSITION AddHead(const CString&amp;<ept id=\"p1\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[5896,5951],"source":"**POSITION AddHead(const CString&** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>POSITION AddHead(LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[5964,6012],"source":"**POSITION AddHead(LPCTSTR** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>void AddHead(CStringList<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`pNewList`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[6025,6073],"source":"**void AddHead(CStringList\\*** `pNewList` **);**"},{"content":"Remarks","pos":[6084,6091]},{"content":"The list can be empty before the operation.","pos":[6095,6138]},{"content":"Example","pos":[6148,6155]},{"pos":[6160,6236],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[6254,6275],"content":"NVC_MFCCollections#89"},{"content":"The results from this program are as follows:","pos":[6331,6376]},{"pos":[6524,6540],"content":"CObList::AddTail"},{"content":"Adds a new element or list of elements to the tail of this list.","pos":[6544,6608]},{"content":"Parameters","pos":[6708,6718]},{"content":"The <ph id=\"ph1\">`CObject`</ph> pointer to be added to this list.","pos":[6738,6785],"source":" The `CObject` pointer to be added to this list."},{"content":"A pointer to another <ph id=\"ph1\">`CObList`</ph> list.","pos":[6806,6842],"source":" A pointer to another `CObList` list."},{"content":"The elements in <ph id=\"ph1\">`pNewList`</ph> will be added to this list.","pos":[6843,6897],"source":" The elements in `pNewList` will be added to this list."},{"content":"Return Value","pos":[6907,6919]},{"pos":[6923,7002],"content":"The first version returns the <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value of the newly inserted element.","source":"The first version returns the **POSITION** value of the newly inserted element."},{"content":"Remarks","pos":[7012,7019]},{"content":"The list can be empty before the operation.","pos":[7023,7066]},{"pos":[7073,7161],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::AddTail`</ph>.","source":"The following table shows other member functions that are similar to `CObList::AddTail`."},{"content":"Class","pos":[7168,7173]},{"content":"Member Function","pos":[7174,7189]},{"content":"CPtrList","pos":[7233,7241]},{"content":"<bpt id=\"p1\">**</bpt>POSITION AddTail( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[7282,7330],"source":"**POSITION AddTail( void\\*** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>void AddTail( CPtrList<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`pNewList`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[7343,7389],"source":"**void AddTail( CPtrList\\*** `pNewList` **);**"},{"content":"CStringList","pos":[7395,7406]},{"content":"<bpt id=\"p1\">**</bpt>POSITION AddTail( const CString&amp;<ept id=\"p1\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[7450,7506],"source":"**POSITION AddTail( const CString&** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>POSITION AddTail( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[7519,7568],"source":"**POSITION AddTail( LPCTSTR** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>void AddTail( CStringList<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`pNewList`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[7581,7630],"source":"**void AddTail( CStringList\\*** `pNewList` **);**"},{"content":"Example","pos":[7641,7648]},{"pos":[7653,7729],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[7747,7768],"content":"NVC_MFCCollections#90"},{"content":"The results from this program are as follows:","pos":[7824,7869]},{"pos":[8017,8033],"content":"CObList::CObList"},{"pos":[8037,8080],"content":"Constructs an empty <ph id=\"ph1\">`CObject`</ph> pointer list.","source":"Constructs an empty `CObject` pointer list."},{"content":"Parameters","pos":[8139,8149]},{"content":"The memory-allocation granularity for extending the list.","pos":[8169,8226]},{"content":"Remarks","pos":[8236,8243]},{"content":"As the list grows, memory is allocated in units of <ph id=\"ph1\">`nBlockSize`</ph> entries.","pos":[8247,8319],"source":"As the list grows, memory is allocated in units of `nBlockSize` entries."},{"content":"If a memory allocation fails, a <ph id=\"ph1\">`CMemoryException`</ph> is thrown.","pos":[8320,8381],"source":" If a memory allocation fails, a `CMemoryException` is thrown."},{"pos":[8388,8476],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::CObList`</ph>.","source":"The following table shows other member functions that are similar to `CObList::CObList`."},{"content":"Class","pos":[8483,8488]},{"content":"Member Function","pos":[8489,8504]},{"content":"CPtrList","pos":[8548,8556]},{"pos":[8597,8643],"content":"<bpt id=\"p1\">**</bpt>CPtrList( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nBlockSize`</ph> <bpt id=\"p2\">**</bpt>= 10 );<ept id=\"p2\">**</ept>","source":"**CPtrList( INT_PTR** `nBlockSize` **= 10 );**"},{"content":"CStringList","pos":[8649,8660]},{"pos":[8704,8753],"content":"<bpt id=\"p1\">**</bpt>CStringList( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nBlockSize`</ph> <bpt id=\"p2\">**</bpt>= 10 );<ept id=\"p2\">**</ept>","source":"**CStringList( INT_PTR** `nBlockSize` **= 10 );**"},{"content":"Example","pos":[8764,8771]},{"pos":[8776,8869],"content":"Below is a listing of the <ph id=\"ph1\">`CObject`</ph>-derived class <ph id=\"ph2\">`CAge`</ph> used in all the collection examples:","source":"Below is a listing of the `CObject`-derived class `CAge` used in all the collection examples:"},{"pos":[8887,8908],"content":"NVC_MFCCollections#91"},{"pos":[8962,9013],"content":"Below is an example of <ph id=\"ph1\">`CObList`</ph> constructor usage:","source":"Below is an example of `CObList` constructor usage:"},{"pos":[9031,9052],"content":"NVC_MFCCollections#92"},{"pos":[9141,9154],"content":"CObList::Find"},{"pos":[9158,9266],"content":"Searches the list sequentially to find the first <ph id=\"ph1\">`CObject`</ph> pointer matching the specified <ph id=\"ph2\">`CObject`</ph> pointer.","source":"Searches the list sequentially to find the first `CObject` pointer matching the specified `CObject` pointer."},{"content":"Parameters","pos":[9376,9386]},{"content":"The object pointer to be found in this list.","pos":[9407,9451]},{"content":"The start position for the search.","pos":[9474,9508]},{"content":"Return Value","pos":[9518,9530]},{"pos":[9534,9651],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the object is not found.","source":"A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the object is not found."},{"content":"Remarks","pos":[9661,9668]},{"content":"Note that the pointer values are compared, not the contents of the objects.","pos":[9672,9747]},{"pos":[9754,9839],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::Find`</ph>.","source":"The following table shows other member functions that are similar to `CObList::Find`."},{"content":"Class","pos":[9846,9851]},{"content":"Member Function","pos":[9852,9867]},{"content":"CPtrList","pos":[9911,9919]},{"pos":[9960,10047],"content":"<bpt id=\"p1\">**</bpt>POSITION Find( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`searchValue`</ph> <bpt id=\"p2\">**</bpt>, POSITION<ept id=\"p2\">**</ept> <ph id=\"ph3\">`startAfter`</ph> <bpt id=\"p3\">**</bpt>= NULL ) const;<ept id=\"p3\">**</ept>","source":"**POSITION Find( void\\*** `searchValue` **, POSITION** `startAfter` **= NULL ) const;**"},{"content":"CStringList","pos":[10053,10064]},{"pos":[10108,10196],"content":"<bpt id=\"p1\">**</bpt>POSITION Find( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`searchValue`</ph> <bpt id=\"p2\">**</bpt>, POSITION<ept id=\"p2\">**</ept> <ph id=\"ph2\">`startAfter`</ph> <bpt id=\"p3\">**</bpt>= NULL ) const;<ept id=\"p3\">**</ept>","source":"**POSITION Find( LPCTSTR** `searchValue` **, POSITION** `startAfter` **= NULL ) const;**"},{"content":"Example","pos":[10207,10214]},{"pos":[10218,10294],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[10312,10333],"content":"NVC_MFCCollections#93"},{"pos":[10427,10445],"content":"CObList::FindIndex"},{"pos":[10449,10502],"content":"Uses the value of <ph id=\"ph1\">`nIndex`</ph> as an index into the list.","source":"Uses the value of `nIndex` as an index into the list."},{"content":"Parameters","pos":[10572,10582]},{"content":"The zero-based index of the list element to be found.","pos":[10598,10651]},{"content":"Return Value","pos":[10661,10673]},{"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if <ph id=\"ph1\">`nIndex`</ph> is too large.","pos":[10677,10792],"source":"A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if `nIndex` is too large."},{"content":"(The framework generates an assertion if <ph id=\"ph1\">`nIndex`</ph> is negative.)","pos":[10793,10856],"source":" (The framework generates an assertion if `nIndex` is negative.)"},{"content":"Remarks","pos":[10866,10873]},{"pos":[10877,10962],"content":"It starts a sequential scan from the head of the list, stopping on the <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>th element.","source":"It starts a sequential scan from the head of the list, stopping on the *n*th element."},{"pos":[10969,11059],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::FindIndex`</ph>.","source":"The following table shows other member functions that are similar to `CObList::FindIndex`."},{"content":"Class","pos":[11066,11071]},{"content":"Member Function","pos":[11072,11087]},{"content":"CPtrList","pos":[11131,11139]},{"pos":[11180,11233],"content":"<bpt id=\"p1\">**</bpt>POSITION FindIndex( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**POSITION FindIndex( INT_PTR** `nIndex` **) const;**"},{"content":"CStringList","pos":[11239,11250]},{"pos":[11294,11347],"content":"<bpt id=\"p1\">**</bpt>POSITION FindIndex( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**POSITION FindIndex( INT_PTR** `nIndex` **) const;**"},{"content":"Example","pos":[11358,11365]},{"pos":[11369,11445],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[11463,11484],"content":"NVC_MFCCollections#94"},{"pos":[11574,11588],"content":"CObList::GetAt"},{"pos":[11592,11646],"content":"A variable of type <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> is a key for the list.","source":"A variable of type **POSITION** is a key for the list."},{"content":"Parameters","pos":[11761,11771]},{"content":"position","pos":[11776,11784]},{"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous <ph id=\"ph1\">`GetHeadPosition`</ph> or <bpt id=\"p2\">**</bpt>Find<ept id=\"p2\">**</ept> member function call.","pos":[11789,11884],"source":" A **POSITION** value returned by a previous `GetHeadPosition` or **Find** member function call."},{"content":"Return Value","pos":[11894,11906]},{"pos":[11910,11976],"content":"See the return value description for <bpt id=\"p1\">[</bpt>GetHead<ept id=\"p1\">](#coblist__gethead)</ept>.","source":"See the return value description for [GetHead](#coblist__gethead)."},{"content":"Remarks","pos":[11986,11993]},{"content":"It is not the same as an index, and you cannot operate on a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value yourself.","pos":[11997,12085],"source":"It is not the same as an index, and you cannot operate on a **POSITION** value yourself."},{"content":"retrieves the <ph id=\"ph1\">`CObject`</ph> pointer associated with a given position.","pos":[12094,12159],"source":" retrieves the `CObject` pointer associated with a given position."},{"content":"You must ensure that your <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value represents a valid position in the list.","pos":[12166,12251],"source":"You must ensure that your **POSITION** value represents a valid position in the list."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[12252,12343]},{"pos":[12350,12436],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::GetAt`</ph>.","source":"The following table shows other member functions that are similar to `CObList::GetAt`."},{"content":"Class","pos":[12443,12448]},{"content":"Member Function","pos":[12449,12464]},{"content":"CPtrList","pos":[12508,12516]},{"content":"<bpt id=\"p1\">**</bpt>const void<ph id=\"ph1\">\\*</ph>&amp; GetAt( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>) const;<ept id=\"p3\">**</ept>","pos":[12557,12614],"source":"**const void\\*& GetAt( POSITION** *position* **) const;**"},{"content":"<bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph>&amp; GetAt( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[12627,12672],"source":"**void\\*& GetAt( POSITION** *position* **);**"},{"content":"CStringList","pos":[12678,12689]},{"content":"<bpt id=\"p1\">**</bpt>const CString&amp; GetAt( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>) const;<ept id=\"p3\">**</ept>","pos":[12733,12791],"source":"**const CString& GetAt( POSITION** *position* **) const;**"},{"content":"<bpt id=\"p1\">**</bpt>CString&amp; GetAt( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[12804,12850],"source":"**CString& GetAt( POSITION** *position* **);**"},{"content":"Example","pos":[12861,12868]},{"pos":[12873,12926],"content":"See the example for <bpt id=\"p1\">[</bpt>FindIndex<ept id=\"p1\">](#coblist__findindex)</ept>.","source":"See the example for [FindIndex](#coblist__findindex)."},{"pos":[12970,12987],"content":"CObList::GetCount"},{"content":"Gets the number of elements in this list.","pos":[12991,13032]},{"content":"Return Value","pos":[13086,13098]},{"content":"An integer value containing the element count.","pos":[13102,13148]},{"pos":[13155,13244],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::GetCount`</ph>.","source":"The following table shows other member functions that are similar to `CObList::GetCount`."},{"content":"Class","pos":[13251,13256]},{"content":"Member Function","pos":[13257,13272]},{"content":"CPtrList","pos":[13316,13324]},{"content":"INT_PTR GetCount( ) const;","pos":[13367,13393]},{"content":"CStringList","pos":[13401,13412]},{"content":"INT_PTR GetCount( ) const;","pos":[13458,13484]},{"content":"Example","pos":[13497,13504]},{"pos":[13508,13584],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[13602,13623],"content":"NVC_MFCCollections#95"},{"pos":[13715,13731],"content":"CObList::GetHead"},{"pos":[13735,13808],"content":"Gets the <ph id=\"ph1\">`CObject`</ph> pointer that represents the head element of this list.","source":"Gets the `CObject` pointer that represents the head element of this list."},{"content":"Return Value","pos":[13893,13905]},{"content":"If the list is accessed through a pointer to a <bpt id=\"p1\">**</bpt>const CObList<ept id=\"p1\">**</ept>, then <ph id=\"ph1\">`GetHead`</ph> returns a <ph id=\"ph2\">`CObject`</ph> pointer.","pos":[13909,14018],"source":"If the list is accessed through a pointer to a **const CObList**, then `GetHead` returns a `CObject` pointer."},{"content":"This allows the function to be used only on the right side of an assignment statement and thus protects the list from modification.","pos":[14019,14150]},{"content":"If the list is accessed directly or through a pointer to a <ph id=\"ph1\">`CObList`</ph>, then <ph id=\"ph2\">`GetHead`</ph> returns a reference to a <ph id=\"ph3\">`CObject`</ph> pointer.","pos":[14157,14285],"source":"If the list is accessed directly or through a pointer to a `CObList`, then `GetHead` returns a reference to a `CObject` pointer."},{"content":"This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.","pos":[14286,14412]},{"content":"Remarks","pos":[14422,14429]},{"content":"You must ensure that the list is not empty before calling <ph id=\"ph1\">`GetHead`</ph>.","pos":[14433,14501],"source":"You must ensure that the list is not empty before calling `GetHead`."},{"content":"If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[14502,14597]},{"content":"Use <bpt id=\"p1\">[</bpt>IsEmpty<ept id=\"p1\">](#coblist__isempty)</ept> to verify that the list contains elements.","pos":[14598,14673],"source":" Use [IsEmpty](#coblist__isempty) to verify that the list contains elements."},{"pos":[14680,14768],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::GetHead`</ph>.","source":"The following table shows other member functions that are similar to `CObList::GetHead`."},{"content":"Class","pos":[14775,14780]},{"content":"Member Function","pos":[14781,14796]},{"content":"CPtrList","pos":[14840,14848]},{"content":"const void<ph id=\"ph1\">\\*</ph>&amp; GetHead( ) const; void<ph id=\"ph2\">\\*</ph>&amp; GetHead( );","pos":[14891,14942],"source":"const void\\*& GetHead( ) const; void\\*& GetHead( );"},{"content":"CStringList","pos":[14950,14961]},{"content":"const CString&amp; GetHead( ) const; CString&amp; GetHead( );","pos":[15007,15060],"source":"const CString& GetHead( ) const; CString& GetHead( );"},{"content":"Example","pos":[15073,15080]},{"pos":[15084,15160],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[15167,15266],"content":"The following example illustrates the use of <ph id=\"ph1\">`GetHead`</ph> on the left side of an assignment statement.","source":"The following example illustrates the use of `GetHead` on the left side of an assignment statement."},{"pos":[15284,15305],"content":"NVC_MFCCollections#96"},{"pos":[15405,15429],"content":"CObList::GetHeadPosition"},{"content":"Gets the position of the head element of this list.","pos":[15433,15484]},{"content":"Return Value","pos":[15546,15558]},{"pos":[15562,15673],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the list is empty.","source":"A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty."},{"pos":[15680,15776],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::GetHeadPosition`</ph>.","source":"The following table shows other member functions that are similar to `CObList::GetHeadPosition`."},{"content":"Class","pos":[15783,15788]},{"content":"Member Function","pos":[15789,15804]},{"content":"CPtrList","pos":[15848,15856]},{"content":"POSITION GetHeadPosition( ) const;","pos":[15899,15933]},{"content":"CStringList","pos":[15941,15952]},{"content":"POSITION GetHeadPosition( ) const;","pos":[15998,16032]},{"content":"Example","pos":[16045,16052]},{"pos":[16056,16132],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[16150,16171],"content":"NVC_MFCCollections#97"},{"pos":[16263,16279],"content":"CObList::GetNext"},{"pos":[16283,16408],"content":"Gets the list element identified by <ph id=\"ph1\">`rPosition`</ph>, then sets <ph id=\"ph2\">`rPosition`</ph> to the <ph id=\"ph3\">`POSITION`</ph> value of the next entry in the list.","source":"Gets the list element identified by `rPosition`, then sets `rPosition` to the `POSITION` value of the next entry in the list."},{"content":"Parameters","pos":[16530,16540]},{"content":"A reference to a <ph id=\"ph1\">`POSITION`</ph> value returned by a previous <ph id=\"ph2\">`GetNext`</ph>, <ph id=\"ph3\">`GetHeadPosition`</ph>, or other member function call.","pos":[16559,16676],"source":" A reference to a `POSITION` value returned by a previous `GetNext`, `GetHeadPosition`, or other member function call."},{"content":"Return Value","pos":[16686,16698]},{"pos":[16702,16768],"content":"See the return value description for <bpt id=\"p1\">[</bpt>GetHead<ept id=\"p1\">](#coblist__gethead)</ept>.","source":"See the return value description for [GetHead](#coblist__gethead)."},{"content":"Remarks","pos":[16778,16785]},{"pos":[16789,16920],"content":"You can use <ph id=\"ph1\">`GetNext`</ph> in a forward iteration loop if you establish the initial position with a call to <ph id=\"ph2\">`GetHeadPosition`</ph> or <ph id=\"ph3\">`Find`</ph>.","source":"You can use `GetNext` in a forward iteration loop if you establish the initial position with a call to `GetHeadPosition` or `Find`."},{"content":"You must ensure that your <ph id=\"ph1\">`POSITION`</ph> value represents a valid position in the list.","pos":[16927,17010],"source":"You must ensure that your `POSITION` value represents a valid position in the list."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[17011,17102]},{"pos":[17109,17210],"content":"If the retrieved element is the last in the list, then the new value of <ph id=\"ph1\">`rPosition`</ph> is set to <ph id=\"ph2\">`NULL`</ph>.","source":"If the retrieved element is the last in the list, then the new value of `rPosition` is set to `NULL`."},{"content":"It is possible to remove an element during an iteration.","pos":[17217,17273]},{"content":"See the example for <bpt id=\"p1\">[</bpt>RemoveAt<ept id=\"p1\">](#coblist__removeat)</ept>.","pos":[17274,17325],"source":" See the example for [RemoveAt](#coblist__removeat)."},{"pos":[17333,17543],"content":"[!NOTE]\n As of MFC 8.0 the const version of this method has changed to return `const CObject*` instead of `const CObject*&`.  This change was made to bring the compiler into conformance with the C++ standard.","leadings":["","> "],"nodes":[{"content":" As of MFC 8.0 the const version of this method has changed to return `const CObject*` instead of `const CObject*&`.  This change was made to bring the compiler into conformance with the C++ standard.","pos":[8,208],"nodes":[{"content":"As of MFC 8.0 the const version of this method has changed to return <ph id=\"ph1\">`const CObject*`</ph> instead of <ph id=\"ph2\">`const CObject*&amp;`</ph>.","pos":[1,116],"source":" As of MFC 8.0 the const version of this method has changed to return `const CObject*` instead of `const CObject*&`."},{"content":"This change was made to bring the compiler into conformance with the C++ standard.","pos":[118,200]}]}]},{"pos":[17550,17638],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::GetNext`</ph>.","source":"The following table shows other member functions that are similar to `CObList::GetNext`."},{"content":"Class","pos":[17645,17650]},{"content":"Member Function","pos":[17651,17666]},{"content":"CPtrList","pos":[17710,17718]},{"content":"CStringList","pos":[17877,17888]},{"content":"Example","pos":[18060,18067]},{"pos":[18072,18148],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[18166,18187],"content":"NVC_MFCCollections#98"},{"content":"The results from this program are as follows:","pos":[18244,18289]},{"pos":[18386,18402],"content":"CObList::GetPrev"},{"pos":[18406,18535],"content":"Gets the list element identified by <ph id=\"ph1\">`rPosition`</ph>, then sets <ph id=\"ph2\">`rPosition`</ph> to the <ph id=\"ph3\">`POSITION`</ph> value of the previous entry in the list.","source":"Gets the list element identified by `rPosition`, then sets `rPosition` to the `POSITION` value of the previous entry in the list."},{"content":"Parameters","pos":[18657,18667]},{"content":"A reference to a <ph id=\"ph1\">`POSITION`</ph> value returned by a previous <ph id=\"ph2\">`GetPrev`</ph> or other member function call.","pos":[18686,18783],"source":" A reference to a `POSITION` value returned by a previous `GetPrev` or other member function call."},{"content":"Return Value","pos":[18793,18805]},{"pos":[18809,18875],"content":"See the return value description for <bpt id=\"p1\">[</bpt>GetHead<ept id=\"p1\">](#coblist__gethead)</ept>.","source":"See the return value description for [GetHead](#coblist__gethead)."},{"content":"Remarks","pos":[18885,18892]},{"pos":[18896,19027],"content":"You can use <ph id=\"ph1\">`GetPrev`</ph> in a reverse iteration loop if you establish the initial position with a call to <ph id=\"ph2\">`GetTailPosition`</ph> or <ph id=\"ph3\">`Find`</ph>.","source":"You can use `GetPrev` in a reverse iteration loop if you establish the initial position with a call to `GetTailPosition` or `Find`."},{"content":"You must ensure that your <ph id=\"ph1\">`POSITION`</ph> value represents a valid position in the list.","pos":[19034,19117],"source":"You must ensure that your `POSITION` value represents a valid position in the list."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[19118,19209]},{"pos":[19216,19318],"content":"If the retrieved element is the first in the list, then the new value of <ph id=\"ph1\">`rPosition`</ph> is set to <ph id=\"ph2\">`NULL`</ph>.","source":"If the retrieved element is the first in the list, then the new value of `rPosition` is set to `NULL`."},{"pos":[19326,19536],"content":"[!NOTE]\n As of MFC 8.0 the const version of this method has changed to return `const CObject*` instead of `const CObject*&`.  This change was made to bring the compiler into conformance with the C++ standard.","leadings":["","> "],"nodes":[{"content":" As of MFC 8.0 the const version of this method has changed to return `const CObject*` instead of `const CObject*&`.  This change was made to bring the compiler into conformance with the C++ standard.","pos":[8,208],"nodes":[{"content":"As of MFC 8.0 the const version of this method has changed to return <ph id=\"ph1\">`const CObject*`</ph> instead of <ph id=\"ph2\">`const CObject*&amp;`</ph>.","pos":[1,116],"source":" As of MFC 8.0 the const version of this method has changed to return `const CObject*` instead of `const CObject*&`."},{"content":"This change was made to bring the compiler into conformance with the C++ standard.","pos":[118,200]}]}]},{"pos":[19543,19631],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::GetPrev`</ph>.","source":"The following table shows other member functions that are similar to `CObList::GetPrev`."},{"content":"Class","pos":[19638,19643]},{"content":"Member Function","pos":[19644,19659]},{"content":"CPtrList","pos":[19703,19711]},{"content":"CStringList","pos":[19870,19881]},{"content":"Example","pos":[20053,20060]},{"pos":[20065,20141],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[20159,20180],"content":"NVC_MFCCollections#99"},{"content":"The results from this program are as follows:","pos":[20237,20282]},{"pos":[20379,20395],"content":"CObList::GetSize"},{"content":"Returns the number of list elements.","pos":[20399,20435]},{"content":"Return Value","pos":[20488,20500]},{"content":"The number of items in the list.","pos":[20504,20536]},{"content":"Remarks","pos":[20546,20553]},{"content":"Call this method to retrieve the number of elements in the list.","pos":[20557,20621]},{"pos":[20628,20716],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::GetSize`</ph>.","source":"The following table shows other member functions that are similar to `CObList::GetSize`."},{"content":"Class","pos":[20723,20728]},{"content":"Member Function","pos":[20729,20744]},{"content":"CPtrList","pos":[20788,20796]},{"content":"INT_PTR GetSize( ) const;","pos":[20839,20864]},{"content":"CStringList","pos":[20872,20883]},{"content":"INT_PTR GetSize( ) const;","pos":[20929,20954]},{"content":"Example","pos":[20967,20974]},{"pos":[20978,21054],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[21072,21094],"content":"NVC_MFCCollections#100"},{"pos":[21187,21203],"content":"CObList::GetTail"},{"pos":[21207,21280],"content":"Gets the <ph id=\"ph1\">`CObject`</ph> pointer that represents the tail element of this list.","source":"Gets the `CObject` pointer that represents the tail element of this list."},{"content":"Return Value","pos":[21365,21377]},{"pos":[21381,21447],"content":"See the return value description for <bpt id=\"p1\">[</bpt>GetHead<ept id=\"p1\">](#coblist__gethead)</ept>.","source":"See the return value description for [GetHead](#coblist__gethead)."},{"content":"Remarks","pos":[21457,21464]},{"content":"You must ensure that the list is not empty before calling <ph id=\"ph1\">`GetTail`</ph>.","pos":[21468,21536],"source":"You must ensure that the list is not empty before calling `GetTail`."},{"content":"If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[21537,21632]},{"content":"Use <bpt id=\"p1\">[</bpt>IsEmpty<ept id=\"p1\">](#coblist__isempty)</ept> to verify that the list contains elements.","pos":[21633,21708],"source":" Use [IsEmpty](#coblist__isempty) to verify that the list contains elements."},{"pos":[21715,21803],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::GetTail`</ph>.","source":"The following table shows other member functions that are similar to `CObList::GetTail`."},{"content":"Class","pos":[21810,21815]},{"content":"Member Function","pos":[21816,21831]},{"content":"CPtrList","pos":[21875,21883]},{"content":"const void<ph id=\"ph1\">\\*</ph>&amp; GetTail( ) const; void<ph id=\"ph2\">\\*</ph>&amp; GetTail( );","pos":[21926,21977],"source":"const void\\*& GetTail( ) const; void\\*& GetTail( );"},{"content":"CStringList","pos":[21985,21996]},{"content":"const CString&amp; GetTail( ) const; CString&amp; GetTail( );","pos":[22042,22095],"source":"const CString& GetTail( ) const; CString& GetTail( );"},{"content":"Example","pos":[22108,22115]},{"pos":[22119,22195],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[22213,22235],"content":"NVC_MFCCollections#101"},{"pos":[22336,22360],"content":"CObList::GetTailPosition"},{"pos":[22364,22446],"content":"Gets the position of the tail element of this list; <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the list is empty.","source":"Gets the position of the tail element of this list; **NULL** if the list is empty."},{"content":"Return Value","pos":[22508,22520]},{"pos":[22524,22635],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the list is empty.","source":"A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty."},{"pos":[22642,22738],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::GetTailPosition`</ph>.","source":"The following table shows other member functions that are similar to `CObList::GetTailPosition`."},{"content":"Class","pos":[22745,22750]},{"content":"Member Function","pos":[22751,22766]},{"content":"CPtrList","pos":[22810,22818]},{"content":"POSITION GetTailPosition( ) const;","pos":[22861,22895]},{"content":"CStringList","pos":[22903,22914]},{"content":"POSITION GetTailPosition( ) const;","pos":[22960,22994]},{"content":"Example","pos":[23007,23014]},{"pos":[23018,23094],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[23112,23134],"content":"NVC_MFCCollections#102"},{"pos":[23231,23251],"content":"CObList::InsertAfter"},{"content":"Adds an element to this list after the element at the specified position.","pos":[23255,23328]},{"content":"Parameters","pos":[23426,23436]},{"content":"position","pos":[23441,23449]},{"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous <ph id=\"ph1\">`GetNext`</ph>, <ph id=\"ph2\">`GetPrev`</ph>, or <bpt id=\"p2\">**</bpt>Find<ept id=\"p2\">**</ept> member function call.","pos":[23454,23553],"source":" A **POSITION** value returned by a previous `GetNext`, `GetPrev`, or **Find** member function call."},{"content":"The object pointer to be added to this list.","pos":[23576,23620]},{"pos":[23627,23719],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::InsertAfter`</ph>.","source":"The following table shows other member functions that are similar to `CObList::InsertAfter`."},{"content":"Class","pos":[23726,23731]},{"content":"Member Function","pos":[23732,23747]},{"content":"CPtrList","pos":[23791,23799]},{"pos":[23840,23918],"content":"<bpt id=\"p1\">**</bpt>POSITION InsertAfter( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, void<ph id=\"ph1\">\\*</ph><ept id=\"p3\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p4\">**</bpt>);<ept id=\"p4\">**</ept>","source":"**POSITION InsertAfter( POSITION** *position* **, void\\*** `newElement` **);**"},{"content":"CStringList","pos":[23924,23935]},{"content":"<bpt id=\"p1\">**</bpt>POSITION InsertAfter( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, const CString&amp;<ept id=\"p3\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p4\">**</bpt>);<ept id=\"p4\">**</ept>","pos":[23979,24065],"source":"**POSITION InsertAfter( POSITION** *position* **, const CString&** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>POSITION InsertAfter( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, LPCTSTR<ept id=\"p3\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p4\">**</bpt>);<ept id=\"p4\">**</ept>","pos":[24078,24157],"source":"**POSITION InsertAfter( POSITION** *position* **, LPCTSTR** `newElement` **);**"},{"content":"Return Value","pos":[24168,24180]},{"pos":[24184,24251],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value which is the same as the <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> parameter.","source":"A **POSITION** value which is the same as the *position* parameter."},{"content":"Example","pos":[24261,24268]},{"pos":[24273,24349],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[24367,24389],"content":"NVC_MFCCollections#103"},{"content":"The results from this program are as follows:","pos":[24446,24491]},{"pos":[24675,24696],"content":"CObList::InsertBefore"},{"content":"Adds an element to this list before the element at the specified position.","pos":[24700,24774]},{"content":"Parameters","pos":[24873,24883]},{"content":"position","pos":[24888,24896]},{"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous <ph id=\"ph1\">`GetNext`</ph>, <ph id=\"ph2\">`GetPrev`</ph>, or <bpt id=\"p2\">**</bpt>Find<ept id=\"p2\">**</ept> member function call.","pos":[24901,25000],"source":" A **POSITION** value returned by a previous `GetNext`, `GetPrev`, or **Find** member function call."},{"content":"The object pointer to be added to this list.","pos":[25023,25067]},{"content":"Return Value","pos":[25077,25089]},{"pos":[25093,25204],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the list is empty.","source":"A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty."},{"pos":[25211,25304],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::InsertBefore`</ph>.","source":"The following table shows other member functions that are similar to `CObList::InsertBefore`."},{"content":"Class","pos":[25311,25316]},{"content":"Member Function","pos":[25317,25332]},{"content":"CPtrList","pos":[25376,25384]},{"pos":[25425,25504],"content":"<bpt id=\"p1\">**</bpt>POSITION InsertBefore( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, void<ph id=\"ph1\">\\*</ph><ept id=\"p3\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p4\">**</bpt>);<ept id=\"p4\">**</ept>","source":"**POSITION InsertBefore( POSITION** *position* **, void\\*** `newElement` **);**"},{"content":"CStringList","pos":[25510,25521]},{"content":"<bpt id=\"p1\">**</bpt>POSITION InsertBefore( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, const CString&amp;<ept id=\"p3\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p4\">**</bpt>);<ept id=\"p4\">**</ept>","pos":[25565,25652],"source":"**POSITION InsertBefore( POSITION** *position* **, const CString&** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>POSITION InsertBefore( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, LPCTSTR<ept id=\"p3\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p4\">**</bpt>);<ept id=\"p4\">**</ept>","pos":[25665,25745],"source":"**POSITION InsertBefore( POSITION** *position* **, LPCTSTR** `newElement` **);**"},{"content":"Example","pos":[25756,25763]},{"pos":[25768,25844],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[25862,25884],"content":"NVC_MFCCollections#104"},{"content":"The results from this program are as follows:","pos":[25941,25986]},{"pos":[26166,26182],"content":"CObList::IsEmpty"},{"content":"Indicates whether this list contains no elements.","pos":[26186,26235]},{"content":"Return Value","pos":[26285,26297]},{"content":"Nonzero if this list is empty; otherwise 0.","pos":[26301,26344]},{"pos":[26351,26439],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::IsEmpty`</ph>.","source":"The following table shows other member functions that are similar to `CObList::IsEmpty`."},{"content":"Class","pos":[26446,26451]},{"content":"Member Function","pos":[26452,26467]},{"content":"CPtrList","pos":[26511,26519]},{"content":"BOOL IsEmpty( ) const;","pos":[26562,26584]},{"content":"CStringList","pos":[26592,26603]},{"content":"BOOL IsEmpty( ) const;","pos":[26649,26671]},{"content":"Example","pos":[26684,26691]},{"pos":[26696,26749],"content":"See the example for <bpt id=\"p1\">[</bpt>RemoveAll<ept id=\"p1\">](#coblist__removeall)</ept>.","source":"See the example for [RemoveAll](#coblist__removeall)."},{"pos":[26794,26812],"content":"CObList::RemoveAll"},{"pos":[26816,26898],"content":"Removes all the elements from this list and frees the associated <ph id=\"ph1\">`CObList`</ph> memory.","source":"Removes all the elements from this list and frees the associated `CObList` memory."},{"content":"Remarks","pos":[26941,26948]},{"content":"No error is generated if the list is already empty.","pos":[26952,27003]},{"content":"When you remove elements from a <ph id=\"ph1\">`CObList`</ph>, you remove the object pointers from the list.","pos":[27010,27098],"source":"When you remove elements from a `CObList`, you remove the object pointers from the list."},{"content":"It is your responsibility to delete the objects themselves.","pos":[27099,27158]},{"pos":[27165,27255],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::RemoveAll`</ph>.","source":"The following table shows other member functions that are similar to `CObList::RemoveAll`."},{"content":"Class","pos":[27262,27267]},{"content":"Member Function","pos":[27268,27283]},{"content":"CPtrList","pos":[27327,27335]},{"content":"void RemoveAll( );","pos":[27378,27396]},{"content":"CStringList","pos":[27404,27415]},{"content":"void RemoveAll( );","pos":[27461,27479]},{"content":"Example","pos":[27492,27499]},{"pos":[27503,27579],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[27597,27619],"content":"NVC_MFCCollections#105"},{"pos":[27713,27730],"content":"CObList::RemoveAt"},{"content":"Removes the specified element from this list.","pos":[27734,27779]},{"content":"Parameters","pos":[27838,27848]},{"content":"position","pos":[27853,27861]},{"content":"The position of the element to be removed from the list.","pos":[27866,27922]},{"content":"Remarks","pos":[27932,27939]},{"content":"When you remove an element from a <ph id=\"ph1\">`CObList`</ph>, you remove the object pointer from the list.","pos":[27943,28032],"source":"When you remove an element from a `CObList`, you remove the object pointer from the list."},{"content":"It is your responsibility to delete the objects themselves.","pos":[28033,28092]},{"content":"You must ensure that your <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value represents a valid position in the list.","pos":[28099,28184],"source":"You must ensure that your **POSITION** value represents a valid position in the list."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[28185,28276]},{"pos":[28283,28372],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::RemoveAt`</ph>.","source":"The following table shows other member functions that are similar to `CObList::RemoveAt`."},{"content":"Class","pos":[28379,28384]},{"content":"Member Function","pos":[28385,28400]},{"content":"CPtrList","pos":[28444,28452]},{"pos":[28493,28538],"content":"<bpt id=\"p1\">**</bpt>void RemoveAt( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void RemoveAt( POSITION** *position* **);**"},{"content":"CStringList","pos":[28544,28555]},{"pos":[28599,28644],"content":"<bpt id=\"p1\">**</bpt>void RemoveAt( POSITION<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>position<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void RemoveAt( POSITION** *position* **);**"},{"content":"Example","pos":[28655,28662]},{"content":"Be careful when removing an element during a list iteration.","pos":[28667,28727]},{"content":"The following example shows a removal technique that guarantees a valid <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value for <bpt id=\"p2\">[</bpt>GetNext<ept id=\"p2\">](#coblist__getnext)</ept>.","pos":[28728,28852],"source":" The following example shows a removal technique that guarantees a valid **POSITION** value for [GetNext](#coblist__getnext)."},{"pos":[28859,28935],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[28953,28975],"content":"NVC_MFCCollections#106"},{"content":"The results from this program are as follows:","pos":[29032,29077]},{"pos":[29229,29248],"content":"CObList::RemoveHead"},{"content":"Removes the element from the head of the list and returns a pointer to it.","pos":[29252,29326]},{"content":"Return Value","pos":[29374,29386]},{"pos":[29390,29447],"content":"The <ph id=\"ph1\">`CObject`</ph> pointer previously at the head of the list.","source":"The `CObject` pointer previously at the head of the list."},{"content":"Remarks","pos":[29457,29464]},{"content":"You must ensure that the list is not empty before calling <ph id=\"ph1\">`RemoveHead`</ph>.","pos":[29468,29539],"source":"You must ensure that the list is not empty before calling `RemoveHead`."},{"content":"If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[29540,29635]},{"content":"Use <bpt id=\"p1\">[</bpt>IsEmpty<ept id=\"p1\">](#coblist__isempty)</ept> to verify that the list contains elements.","pos":[29636,29711],"source":" Use [IsEmpty](#coblist__isempty) to verify that the list contains elements."},{"pos":[29718,29809],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::RemoveHead`</ph>.","source":"The following table shows other member functions that are similar to `CObList::RemoveHead`."},{"content":"Class","pos":[29816,29821]},{"content":"Member Function","pos":[29822,29837]},{"content":"CPtrList","pos":[29881,29889]},{"content":"void<ph id=\"ph1\">\\*</ph> RemoveHead( );","pos":[29932,29953],"source":"void\\* RemoveHead( );"},{"content":"CStringList","pos":[29961,29972]},{"content":"CString RemoveHead( );","pos":[30018,30040]},{"content":"Example","pos":[30053,30060]},{"pos":[30064,30140],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[30158,30180],"content":"NVC_MFCCollections#107"},{"pos":[30276,30295],"content":"CObList::RemoveTail"},{"content":"Removes the element from the tail of the list and returns a pointer to it.","pos":[30299,30373]},{"content":"Return Value","pos":[30421,30433]},{"content":"A pointer to the object that was at the tail of the list.","pos":[30437,30494]},{"content":"Remarks","pos":[30504,30511]},{"content":"You must ensure that the list is not empty before calling <ph id=\"ph1\">`RemoveTail`</ph>.","pos":[30515,30586],"source":"You must ensure that the list is not empty before calling `RemoveTail`."},{"content":"If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[30587,30682]},{"content":"Use <bpt id=\"p1\">[</bpt>IsEmpty<ept id=\"p1\">](#coblist__isempty)</ept> to verify that the list contains elements.","pos":[30683,30758],"source":" Use [IsEmpty](#coblist__isempty) to verify that the list contains elements."},{"pos":[30765,30856],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::RemoveTail`</ph>.","source":"The following table shows other member functions that are similar to `CObList::RemoveTail`."},{"content":"Class","pos":[30863,30868]},{"content":"Member Function","pos":[30869,30884]},{"content":"CPtrList","pos":[30928,30936]},{"content":"void<ph id=\"ph1\">\\*</ph> RemoveTail( );","pos":[30979,31000],"source":"void\\* RemoveTail( );"},{"content":"CStringList","pos":[31008,31019]},{"content":"CString RemoveTail( );","pos":[31065,31087]},{"content":"Example","pos":[31100,31107]},{"pos":[31111,31187],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[31205,31227],"content":"NVC_MFCCollections#108"},{"pos":[31318,31332],"content":"CObList::SetAt"},{"content":"Sets the element at a given position.","pos":[31336,31373]},{"content":"Parameters","pos":[31456,31466]},{"content":"The <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> of the element to be set.","pos":[31479,31521],"source":" The **POSITION** of the element to be set."},{"content":"The <ph id=\"ph1\">`CObject`</ph> pointer to be written to the list.","pos":[31544,31592],"source":" The `CObject` pointer to be written to the list."},{"content":"Remarks","pos":[31602,31609]},{"content":"A variable of type <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> is a key for the list.","pos":[31613,31667],"source":"A variable of type **POSITION** is a key for the list."},{"content":"It is not the same as an index, and you cannot operate on a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value yourself.","pos":[31668,31756],"source":" It is not the same as an index, and you cannot operate on a **POSITION** value yourself."},{"content":"writes the <ph id=\"ph1\">`CObject`</ph> pointer to the specified position in the list.","pos":[31765,31832],"source":" writes the `CObject` pointer to the specified position in the list."},{"content":"You must ensure that your <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value represents a valid position in the list.","pos":[31839,31924],"source":"You must ensure that your **POSITION** value represents a valid position in the list."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[31925,32016]},{"pos":[32023,32109],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObList::SetAt`</ph>.","source":"The following table shows other member functions that are similar to `CObList::SetAt`."},{"content":"Class","pos":[32116,32121]},{"content":"Member Function","pos":[32122,32137]},{"content":"CPtrList","pos":[32181,32189]},{"pos":[32230,32301],"content":"<bpt id=\"p1\">**</bpt>void SetAt( POSITION<ept id=\"p1\">**</ept> <ph id=\"ph1\">`pos`</ph> <bpt id=\"p2\">**</bpt>, const CString&amp;<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( POSITION** `pos` **, const CString&** `newElement` **);**"},{"content":"CStringList","pos":[32307,32318]},{"pos":[32362,32426],"content":"<bpt id=\"p1\">**</bpt>void SetAt( POSITION<ept id=\"p1\">**</ept> <ph id=\"ph1\">`pos`</ph> <bpt id=\"p2\">**</bpt>, LPCTSTR<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( POSITION** `pos` **, LPCTSTR** `newElement` **);**"},{"content":"Example","pos":[32437,32444]},{"pos":[32449,32525],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class.","source":"See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class."},{"pos":[32543,32565],"content":"NVC_MFCCollections#109"},{"content":"The results from this program are as follows:","pos":[32622,32667]},{"content":"See Also","pos":[32779,32787]},{"content":"CObject Class","pos":[32792,32805]},{"content":"Hierarchy Chart","pos":[32850,32865]},{"content":"CStringList Class","pos":[32902,32919]},{"content":"CPtrList Class","pos":[32968,32982]}],"content":"---\ntitle: \"CObList Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CObList\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"objects [C++], lists of\"\n  - \"CObList class\"\n  - \"lists, object\"\nms.assetid: 80699c93-33d8-4f8b-b8cf-7b58aeab64ca\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CObList Class\nfSupports ordered lists of nonunique `CObject` pointers accessible sequentially or by pointer value.  \n  \n## Syntax  \n  \n```  \nclass CObList : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObList::CObList](#coblist__coblist)|Constructs an empty list for `CObject` pointers.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObList::AddHead](#coblist__addhead)|Adds an element (or all the elements in another list) to the head of the list (makes a new head).|  \n|[CObList::AddTail](#coblist__addtail)|Adds an element (or all the elements in another list) to the tail of the list (makes a new tail).|  \n|[CObList::Find](#coblist__find)|Gets the position of an element specified by pointer value.|  \n|[CObList::FindIndex](#coblist__findindex)|Gets the position of an element specified by a zero-based index.|  \n|[CObList::GetAt](#coblist__getat)|Gets the element at a given position.|  \n|[CObList::GetCount](#coblist__getcount)|Returns the number of elements in this list.|  \n|[CObList::GetHead](#coblist__gethead)|Returns the head element of the list (cannot be empty).|  \n|[CObList::GetHeadPosition](#coblist__getheadposition)|Returns the position of the head element of the list.|  \n|[CObList::GetNext](#coblist__getnext)|Gets the next element for iterating.|  \n|[CObList::GetPrev](#coblist__getprev)|Gets the previous element for iterating.|  \n|[CObList::GetSize](#coblist__getsize)|Returns the number of elements in this list.|  \n|[CObList::GetTail](#coblist__gettail)|Returns the tail element of the list (cannot be empty).|  \n|[CObList::GetTailPosition](#coblist__gettailposition)|Returns the position of the tail element of the list.|  \n|[CObList::InsertAfter](#coblist__insertafter)|Inserts a new element after a given position.|  \n|[CObList::InsertBefore](#coblist__insertbefore)|Inserts a new element before a given position.|  \n|[CObList::IsEmpty](#coblist__isempty)|Tests for the empty list condition (no elements).|  \n|[CObList::RemoveAll](#coblist__removeall)|Removes all the elements from this list.|  \n|[CObList::RemoveAt](#coblist__removeat)|Removes an element from this list, specified by position.|  \n|[CObList::RemoveHead](#coblist__removehead)|Removes the element from the head of the list.|  \n|[CObList::RemoveTail](#coblist__removetail)|Removes the element from the tail of the list.|  \n|[CObList::SetAt](#coblist__setat)|Sets the element at a given position.|  \n  \n## Remarks  \n `CObList` lists behave like doubly-linked lists.  \n  \n A variable of type **POSITION** is a key for the list. You can use a **POSITION** variable both as an iterator to traverse a list sequentially and as a bookmark to hold a place. A position is not the same as an index, however.  \n  \n Element insertion is very fast at the list head, at the tail, and at a known **POSITION**. A sequential search is necessary to look up an element by value or index. This search can be slow if the list is long.  \n  \n `CObList` incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements. If a list of `CObject` pointers is stored to an archive, either with an overloaded insertion operator or with the `Serialize` member function, each `CObject` element is serialized in turn.  \n  \n If you need a dump of individual `CObject` elements in the list, you must set the depth of the dump context to 1 or greater.  \n  \n When a `CObList` object is deleted, or when its elements are removed, only the `CObject` pointers are removed, not the objects they reference.  \n  \n You can derive your own classes from `CObList`. Your new list class, designed to hold pointers to objects derived from `CObject`, adds new data members and new member functions. Note that the resulting list is not strictly type safe, because it allows insertion of any `CObject` pointer.  \n  \n> [!NOTE]\n>  You must use the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro in the implementation of your derived class if you intend to serialize the list.  \n  \n For more information on using `CObList`, see the article [Collections](../../mfc/collections.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CObList`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n##  <a name=\"coblist__addhead\"></a>  CObList::AddHead  \n Adds a new element or list of elements to the head of this list.  \n  \n```  \nPOSITION AddHead(CObject* newElement);\n\n \nvoid AddHead(CObList* pNewList);\n```  \n  \n### Parameters  \n `newElement`  \n The `CObject` pointer to be added to this list.  \n  \n `pNewList`  \n A pointer to another `CObList` list. The elements in `pNewList` will be added to this list.  \n  \n### Return Value  \n The first version returns the **POSITION** value of the newly inserted element.  \n  \n The following table shows other member functions that are similar to `CObList::AddHead`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**POSITION AddHead( void\\*** `newElement` **);**<br /><br /> **void AddHead( CPtrList\\*** `pNewList` **);**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**POSITION AddHead(const CString&** `newElement` **);**<br /><br /> **POSITION AddHead(LPCTSTR** `newElement` **);**<br /><br /> **void AddHead(CStringList\\*** `pNewList` **);**|  \n  \n### Remarks  \n The list can be empty before the operation.  \n  \n### Example  \n  See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#89](../../mfc/codesnippet/cpp/coblist-class_1.cpp)]  \n  \n The results from this program are as follows:  \n  \n `AddHead example: A CObList with 2 elements`  \n  \n `a CAge at $44A8 40`  \n  \n `a CAge at $442A 21`  \n  \n##  <a name=\"coblist__addtail\"></a>  CObList::AddTail  \n Adds a new element or list of elements to the tail of this list.  \n  \n```  \nPOSITION AddTail(CObject* newElement);\n\n \nvoid AddTail(CObList* pNewList);\n```  \n  \n### Parameters  \n `newElement`  \n The `CObject` pointer to be added to this list.  \n  \n `pNewList`  \n A pointer to another `CObList` list. The elements in `pNewList` will be added to this list.  \n  \n### Return Value  \n The first version returns the **POSITION** value of the newly inserted element.  \n  \n### Remarks  \n The list can be empty before the operation.  \n  \n The following table shows other member functions that are similar to `CObList::AddTail`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**POSITION AddTail( void\\*** `newElement` **);**<br /><br /> **void AddTail( CPtrList\\*** `pNewList` **);**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**POSITION AddTail( const CString&** `newElement` **);**<br /><br /> **POSITION AddTail( LPCTSTR** `newElement` **);**<br /><br /> **void AddTail( CStringList\\*** `pNewList` **);**|  \n  \n### Example  \n  See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#90](../../mfc/codesnippet/cpp/coblist-class_2.cpp)]  \n  \n The results from this program are as follows:  \n  \n `AddTail example: A CObList with 2 elements`  \n  \n `a CAge at $444A 21`  \n  \n `a CAge at $4526 40`  \n  \n##  <a name=\"coblist__coblist\"></a>  CObList::CObList  \n Constructs an empty `CObject` pointer list.  \n  \n```  \nCObList(INT_PTR nBlockSize = 10);\n```  \n  \n### Parameters  \n `nBlockSize`  \n The memory-allocation granularity for extending the list.  \n  \n### Remarks  \n As the list grows, memory is allocated in units of `nBlockSize` entries. If a memory allocation fails, a `CMemoryException` is thrown.  \n  \n The following table shows other member functions that are similar to `CObList::CObList`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**CPtrList( INT_PTR** `nBlockSize` **= 10 );**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**CStringList( INT_PTR** `nBlockSize` **= 10 );**|  \n  \n### Example  \n  Below is a listing of the `CObject`-derived class `CAge` used in all the collection examples:  \n  \n [!code-cpp[NVC_MFCCollections#91](../../mfc/codesnippet/cpp/coblist-class_3.h)]  \n  \n Below is an example of `CObList` constructor usage:  \n  \n [!code-cpp[NVC_MFCCollections#92](../../mfc/codesnippet/cpp/coblist-class_4.cpp)]  \n  \n##  <a name=\"coblist__find\"></a>  CObList::Find  \n Searches the list sequentially to find the first `CObject` pointer matching the specified `CObject` pointer.  \n  \n```  \nPOSITION Find(\n    CObject* searchValue,  \n    POSITION startAfter = NULL) const;\n\n \n```  \n  \n### Parameters  \n `searchValue`  \n The object pointer to be found in this list.  \n  \n `startAfter`  \n The start position for the search.  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the object is not found.  \n  \n### Remarks  \n Note that the pointer values are compared, not the contents of the objects.  \n  \n The following table shows other member functions that are similar to `CObList::Find`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**POSITION Find( void\\*** `searchValue` **, POSITION** `startAfter` **= NULL ) const;**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**POSITION Find( LPCTSTR** `searchValue` **, POSITION** `startAfter` **= NULL ) const;**|  \n  \n### Example  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#93](../../mfc/codesnippet/cpp/coblist-class_5.cpp)]  \n  \n##  <a name=\"coblist__findindex\"></a>  CObList::FindIndex  \n Uses the value of `nIndex` as an index into the list.  \n  \n```  \nPOSITION FindIndex(INT_PTR nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n The zero-based index of the list element to be found.  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if `nIndex` is too large. (The framework generates an assertion if `nIndex` is negative.)  \n  \n### Remarks  \n It starts a sequential scan from the head of the list, stopping on the *n*th element.  \n  \n The following table shows other member functions that are similar to `CObList::FindIndex`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**POSITION FindIndex( INT_PTR** `nIndex` **) const;**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**POSITION FindIndex( INT_PTR** `nIndex` **) const;**|  \n  \n### Example  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#94](../../mfc/codesnippet/cpp/coblist-class_6.cpp)]  \n  \n##  <a name=\"coblist__getat\"></a>  CObList::GetAt  \n A variable of type **POSITION** is a key for the list.  \n  \n```  \nCObject*& GetAt(POSITION position);\n\n \nconst CObject*& GetAt(POSITION position) const;\n\n \n```  \n  \n### Parameters  \n *position*  \n A **POSITION** value returned by a previous `GetHeadPosition` or **Find** member function call.  \n  \n### Return Value  \n See the return value description for [GetHead](#coblist__gethead).  \n  \n### Remarks  \n It is not the same as an index, and you cannot operate on a **POSITION** value yourself. `GetAt` retrieves the `CObject` pointer associated with a given position.  \n  \n You must ensure that your **POSITION** value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n The following table shows other member functions that are similar to `CObList::GetAt`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**const void\\*& GetAt( POSITION** *position* **) const;**<br /><br /> **void\\*& GetAt( POSITION** *position* **);**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**const CString& GetAt( POSITION** *position* **) const;**<br /><br /> **CString& GetAt( POSITION** *position* **);**|  \n  \n### Example  \n  See the example for [FindIndex](#coblist__findindex).  \n  \n##  <a name=\"coblist__getcount\"></a>  CObList::GetCount  \n Gets the number of elements in this list.  \n  \n```  \nINT_PTR GetCount() const;\n\n \n```  \n  \n### Return Value  \n An integer value containing the element count.  \n  \n The following table shows other member functions that are similar to `CObList::GetCount`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**INT_PTR GetCount( ) const;**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**INT_PTR GetCount( ) const;**|  \n  \n### Example  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#95](../../mfc/codesnippet/cpp/coblist-class_7.cpp)]  \n  \n##  <a name=\"coblist__gethead\"></a>  CObList::GetHead  \n Gets the `CObject` pointer that represents the head element of this list.  \n  \n```  \nCObject*& GetHead();\n\n \nconst CObject*& GetHead() const;\n\n \n```  \n  \n### Return Value  \n If the list is accessed through a pointer to a **const CObList**, then `GetHead` returns a `CObject` pointer. This allows the function to be used only on the right side of an assignment statement and thus protects the list from modification.  \n  \n If the list is accessed directly or through a pointer to a `CObList`, then `GetHead` returns a reference to a `CObject` pointer. This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.  \n  \n### Remarks  \n You must ensure that the list is not empty before calling `GetHead`. If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts. Use [IsEmpty](#coblist__isempty) to verify that the list contains elements.  \n  \n The following table shows other member functions that are similar to `CObList::GetHead`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**const void\\*& GetHead( ) const; void\\*& GetHead( );**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**const CString& GetHead( ) const; CString& GetHead( );**|  \n  \n### Example  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n The following example illustrates the use of `GetHead` on the left side of an assignment statement.  \n  \n [!code-cpp[NVC_MFCCollections#96](../../mfc/codesnippet/cpp/coblist-class_8.cpp)]  \n  \n##  <a name=\"coblist__getheadposition\"></a>  CObList::GetHeadPosition  \n Gets the position of the head element of this list.  \n  \n```  \nPOSITION GetHeadPosition() const;\n\n \n```  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty.  \n  \n The following table shows other member functions that are similar to `CObList::GetHeadPosition`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**POSITION GetHeadPosition( ) const;**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**POSITION GetHeadPosition( ) const;**|  \n  \n### Example  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#97](../../mfc/codesnippet/cpp/coblist-class_9.cpp)]  \n  \n##  <a name=\"coblist__getnext\"></a>  CObList::GetNext  \n Gets the list element identified by `rPosition`, then sets `rPosition` to the `POSITION` value of the next entry in the list.  \n  \n```  \nCObject*& GetNext(POSITION& rPosition);\n\n \nconst CObject* GetNext(POSITION& rPosition) const;\n\n \n```  \n  \n### Parameters  \n `rPosition`  \n A reference to a `POSITION` value returned by a previous `GetNext`, `GetHeadPosition`, or other member function call.  \n  \n### Return Value  \n See the return value description for [GetHead](#coblist__gethead).  \n  \n### Remarks  \n You can use `GetNext` in a forward iteration loop if you establish the initial position with a call to `GetHeadPosition` or `Find`.  \n  \n You must ensure that your `POSITION` value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n If the retrieved element is the last in the list, then the new value of `rPosition` is set to `NULL`.  \n  \n It is possible to remove an element during an iteration. See the example for [RemoveAt](#coblist__removeat).  \n  \n> [!NOTE]\n>  As of MFC 8.0 the const version of this method has changed to return `const CObject*` instead of `const CObject*&`.  This change was made to bring the compiler into conformance with the C++ standard.  \n  \n The following table shows other member functions that are similar to `CObList::GetNext`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|`void*& GetNext( POSITION&` `rPosition` `);`<br /><br /> `const void* GetNext( POSITION&` `rPosition` `) const;`|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|`CString& GetNext( POSITION&` `rPosition` `);`<br /><br /> `const CString& GetNext( POSITION&` `rPosition` `) const;`|  \n  \n### Example  \n  See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#98](../../mfc/codesnippet/cpp/coblist-class_10.cpp)]  \n  \n The results from this program are as follows:  \n  \n `a CAge at $479C 40`  \n  \n `a CAge at $46C0 21`  \n  \n##  <a name=\"coblist__getprev\"></a>  CObList::GetPrev  \n Gets the list element identified by `rPosition`, then sets `rPosition` to the `POSITION` value of the previous entry in the list.  \n  \n```  \nCObject*& GetPrev(POSITION& rPosition);\n\n \nconst CObject* GetPrev(POSITION& rPosition) const;\n\n \n```  \n  \n### Parameters  \n `rPosition`  \n A reference to a `POSITION` value returned by a previous `GetPrev` or other member function call.  \n  \n### Return Value  \n See the return value description for [GetHead](#coblist__gethead).  \n  \n### Remarks  \n You can use `GetPrev` in a reverse iteration loop if you establish the initial position with a call to `GetTailPosition` or `Find`.  \n  \n You must ensure that your `POSITION` value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n If the retrieved element is the first in the list, then the new value of `rPosition` is set to `NULL`.  \n  \n> [!NOTE]\n>  As of MFC 8.0 the const version of this method has changed to return `const CObject*` instead of `const CObject*&`.  This change was made to bring the compiler into conformance with the C++ standard.  \n  \n The following table shows other member functions that are similar to `CObList::GetPrev`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|`void*& GetPrev( POSITION&` `rPosition` `);`<br /><br /> `const void* GetPrev( POSITION&` `rPosition` `) const;`|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|`CString& GetPrev( POSITION&` `rPosition` `);`<br /><br /> `const CString& GetPrev( POSITION&` `rPosition` `) const;`|  \n  \n### Example  \n  See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#99](../../mfc/codesnippet/cpp/coblist-class_11.cpp)]  \n  \n The results from this program are as follows:  \n  \n `a CAge at $421C 21`  \n  \n `a CAge at $421C 40`  \n  \n##  <a name=\"coblist__getsize\"></a>  CObList::GetSize  \n Returns the number of list elements.  \n  \n```  \nINT_PTR GetSize() const;\n\n \n```  \n  \n### Return Value  \n The number of items in the list.  \n  \n### Remarks  \n Call this method to retrieve the number of elements in the list.  \n  \n The following table shows other member functions that are similar to `CObList::GetSize`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**INT_PTR GetSize( ) const;**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**INT_PTR GetSize( ) const;**|  \n  \n### Example  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#100](../../mfc/codesnippet/cpp/coblist-class_12.cpp)]  \n  \n##  <a name=\"coblist__gettail\"></a>  CObList::GetTail  \n Gets the `CObject` pointer that represents the tail element of this list.  \n  \n```  \nCObject*& GetTail();\n\n \nconst CObject*& GetTail() const;\n\n \n```  \n  \n### Return Value  \n See the return value description for [GetHead](#coblist__gethead).  \n  \n### Remarks  \n You must ensure that the list is not empty before calling `GetTail`. If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts. Use [IsEmpty](#coblist__isempty) to verify that the list contains elements.  \n  \n The following table shows other member functions that are similar to `CObList::GetTail`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**const void\\*& GetTail( ) const; void\\*& GetTail( );**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**const CString& GetTail( ) const; CString& GetTail( );**|  \n  \n### Example  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#101](../../mfc/codesnippet/cpp/coblist-class_13.cpp)]  \n  \n##  <a name=\"coblist__gettailposition\"></a>  CObList::GetTailPosition  \n Gets the position of the tail element of this list; **NULL** if the list is empty.  \n  \n```  \nPOSITION GetTailPosition() const;\n\n \n```  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty.  \n  \n The following table shows other member functions that are similar to `CObList::GetTailPosition`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**POSITION GetTailPosition( ) const;**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**POSITION GetTailPosition( ) const;**|  \n  \n### Example  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#102](../../mfc/codesnippet/cpp/coblist-class_14.cpp)]  \n  \n##  <a name=\"coblist__insertafter\"></a>  CObList::InsertAfter  \n Adds an element to this list after the element at the specified position.  \n  \n```  \nPOSITION InsertAfter(\n    POSITION position,  \n    CObject* newElement);\n```  \n  \n### Parameters  \n *position*  \n A **POSITION** value returned by a previous `GetNext`, `GetPrev`, or **Find** member function call.  \n  \n `newElement`  \n The object pointer to be added to this list.  \n  \n The following table shows other member functions that are similar to `CObList::InsertAfter`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**POSITION InsertAfter( POSITION** *position* **, void\\*** `newElement` **);**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**POSITION InsertAfter( POSITION** *position* **, const CString&** `newElement` **);**<br /><br /> **POSITION InsertAfter( POSITION** *position* **, LPCTSTR** `newElement` **);**|  \n  \n### Return Value  \n A **POSITION** value which is the same as the *position* parameter.  \n  \n### Example  \n  See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#103](../../mfc/codesnippet/cpp/coblist-class_15.cpp)]  \n  \n The results from this program are as follows:  \n  \n `InsertAfter example: A CObList with 3 elements`  \n  \n `a CAge at $4A44 40`  \n  \n `a CAge at $4A64 65`  \n  \n `a CAge at $4968 21`  \n  \n##  <a name=\"coblist__insertbefore\"></a>  CObList::InsertBefore  \n Adds an element to this list before the element at the specified position.  \n  \n```  \nPOSITION InsertBefore(\n    POSITION position,  \n    CObject* newElement);\n```  \n  \n### Parameters  \n *position*  \n A **POSITION** value returned by a previous `GetNext`, `GetPrev`, or **Find** member function call.  \n  \n `newElement`  \n The object pointer to be added to this list.  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty.  \n  \n The following table shows other member functions that are similar to `CObList::InsertBefore`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**POSITION InsertBefore( POSITION** *position* **, void\\*** `newElement` **);**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**POSITION InsertBefore( POSITION** *position* **, const CString&** `newElement` **);**<br /><br /> **POSITION InsertBefore( POSITION** *position* **, LPCTSTR** `newElement` **);**|  \n  \n### Example  \n  See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#104](../../mfc/codesnippet/cpp/coblist-class_16.cpp)]  \n  \n The results from this program are as follows:  \n  \n `InsertBefore example: A CObList with 3 elements`  \n  \n `a CAge at $4AE2 40`  \n  \n `a CAge at $4B02 65`  \n  \n `a CAge at $49E6 21`  \n  \n##  <a name=\"coblist__isempty\"></a>  CObList::IsEmpty  \n Indicates whether this list contains no elements.  \n  \n```  \nBOOL IsEmpty() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if this list is empty; otherwise 0.  \n  \n The following table shows other member functions that are similar to `CObList::IsEmpty`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**BOOL IsEmpty( ) const;**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**BOOL IsEmpty( ) const;**|  \n  \n### Example  \n  See the example for [RemoveAll](#coblist__removeall).  \n  \n##  <a name=\"coblist__removeall\"></a>  CObList::RemoveAll  \n Removes all the elements from this list and frees the associated `CObList` memory.  \n  \n```  \nvoid RemoveAll();\n```  \n  \n### Remarks  \n No error is generated if the list is already empty.  \n  \n When you remove elements from a `CObList`, you remove the object pointers from the list. It is your responsibility to delete the objects themselves.  \n  \n The following table shows other member functions that are similar to `CObList::RemoveAll`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**void RemoveAll( );**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**void RemoveAll( );**|  \n  \n### Example  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#105](../../mfc/codesnippet/cpp/coblist-class_17.cpp)]  \n  \n##  <a name=\"coblist__removeat\"></a>  CObList::RemoveAt  \n Removes the specified element from this list.  \n  \n```  \nvoid RemoveAt(POSITION position);\n```  \n  \n### Parameters  \n *position*  \n The position of the element to be removed from the list.  \n  \n### Remarks  \n When you remove an element from a `CObList`, you remove the object pointer from the list. It is your responsibility to delete the objects themselves.  \n  \n You must ensure that your **POSITION** value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n The following table shows other member functions that are similar to `CObList::RemoveAt`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**void RemoveAt( POSITION** *position* **);**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**void RemoveAt( POSITION** *position* **);**|  \n  \n### Example  \n  Be careful when removing an element during a list iteration. The following example shows a removal technique that guarantees a valid **POSITION** value for [GetNext](#coblist__getnext).  \n  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#106](../../mfc/codesnippet/cpp/coblist-class_18.cpp)]  \n  \n The results from this program are as follows:  \n  \n `RemoveAt example: A CObList with 2 elements`  \n  \n `a CAge at $4C1E 65`  \n  \n `a CAge at $4B22 21`  \n  \n##  <a name=\"coblist__removehead\"></a>  CObList::RemoveHead  \n Removes the element from the head of the list and returns a pointer to it.  \n  \n```  \nCObject* RemoveHead();\n```  \n  \n### Return Value  \n The `CObject` pointer previously at the head of the list.  \n  \n### Remarks  \n You must ensure that the list is not empty before calling `RemoveHead`. If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts. Use [IsEmpty](#coblist__isempty) to verify that the list contains elements.  \n  \n The following table shows other member functions that are similar to `CObList::RemoveHead`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**void\\* RemoveHead( );**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**CString RemoveHead( );**|  \n  \n### Example  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#107](../../mfc/codesnippet/cpp/coblist-class_19.cpp)]  \n  \n##  <a name=\"coblist__removetail\"></a>  CObList::RemoveTail  \n Removes the element from the tail of the list and returns a pointer to it.  \n  \n```  \nCObject* RemoveTail();\n```  \n  \n### Return Value  \n A pointer to the object that was at the tail of the list.  \n  \n### Remarks  \n You must ensure that the list is not empty before calling `RemoveTail`. If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts. Use [IsEmpty](#coblist__isempty) to verify that the list contains elements.  \n  \n The following table shows other member functions that are similar to `CObList::RemoveTail`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**void\\* RemoveTail( );**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**CString RemoveTail( );**|  \n  \n### Example  \n See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#108](../../mfc/codesnippet/cpp/coblist-class_20.cpp)]  \n  \n##  <a name=\"coblist__setat\"></a>  CObList::SetAt  \n Sets the element at a given position.  \n  \n```  \nvoid SetAt(\n    POSITION pos,  \n    CObject* newElement);\n```  \n  \n### Parameters  \n `pos`  \n The **POSITION** of the element to be set.  \n  \n `newElement`  \n The `CObject` pointer to be written to the list.  \n  \n### Remarks  \n A variable of type **POSITION** is a key for the list. It is not the same as an index, and you cannot operate on a **POSITION** value yourself. `SetAt` writes the `CObject` pointer to the specified position in the list.  \n  \n You must ensure that your **POSITION** value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n The following table shows other member functions that are similar to `CObList::SetAt`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CPtrList](../../mfc/reference/cptrlist-class.md)|**void SetAt( POSITION** `pos` **, const CString&** `newElement` **);**|  \n|[CStringList](../../mfc/reference/cstringlist-class.md)|**void SetAt( POSITION** `pos` **, LPCTSTR** `newElement` **);**|  \n  \n### Example  \n  See [CObList::CObList](#coblist__coblist) for a listing of the `CAge` class.  \n  \n [!code-cpp[NVC_MFCCollections#109](../../mfc/codesnippet/cpp/coblist-class_21.cpp)]  \n  \n The results from this program are as follows:  \n  \n `SetAt example: A CObList with 2 elements`  \n  \n `a CAge at $4D98 40`  \n  \n `a CAge at $4DB8 65`  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CStringList Class](../../mfc/reference/cstringlist-class.md)   \n [CPtrList Class](../../mfc/reference/cptrlist-class.md)\n"}