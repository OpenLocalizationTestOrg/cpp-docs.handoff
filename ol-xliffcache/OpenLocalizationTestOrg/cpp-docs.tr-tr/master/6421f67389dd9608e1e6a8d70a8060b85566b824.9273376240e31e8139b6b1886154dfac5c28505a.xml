{"nodes":[{"pos":[12,65],"content":"Debugging and Error Reporting Macros | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Debugging and Error Reporting Macros | Microsoft Docs","pos":[0,53]}]},{"pos":[600,636],"content":"Debugging and Error Reporting Macros","linkify":"Debugging and Error Reporting Macros","nodes":[{"content":"Debugging and Error Reporting Macros","pos":[0,36]}]},{"content":"These macros provide useful debugging and trace facilities.","pos":[637,696]},{"pos":[717,764],"content":"<bpt id=\"p1\">[</bpt>_ATL_DEBUG_INTERFACES<ept id=\"p1\">](#_atl_debug_interfaces)</ept>","source":"[_ATL_DEBUG_INTERFACES](#_atl_debug_interfaces)"},{"pos":[765,863],"content":"Writes, to the output window, any interface leaks that are detected when <ph id=\"ph1\">`_Module.Term`</ph> is called.","source":"Writes, to the output window, any interface leaks that are detected when `_Module.Term` is called."},{"pos":[868,899],"content":"<bpt id=\"p1\">[</bpt>_ATL_DEBUG_QI<ept id=\"p1\">](#_atl_debug_qi)</ept>","source":"[_ATL_DEBUG_QI](#_atl_debug_qi)"},{"pos":[900,958],"content":"Writes all calls to <ph id=\"ph1\">`QueryInterface`</ph> to the output window.","source":"Writes all calls to `QueryInterface` to the output window."},{"pos":[963,986],"content":"<bpt id=\"p1\">[</bpt>ATLASSERT<ept id=\"p1\">](#atlassert)</ept>","source":"[ATLASSERT](#atlassert)"},{"pos":[987,1147],"content":"Performs the same functionality as the <bpt id=\"p1\">[</bpt>_ASSERTE<ept id=\"p1\">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> macro found in the C run-time library.","source":"Performs the same functionality as the [_ASSERTE](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) macro found in the C run-time library."},{"pos":[1152,1175],"content":"<bpt id=\"p1\">[</bpt>ATLENSURE<ept id=\"p1\">](#atlensure)</ept>","source":"[ATLENSURE](#atlensure)"},{"content":"Performs parameters validation.","pos":[1176,1207]},{"content":"Call <ph id=\"ph1\">`AtlThrow`</ph> if needed","pos":[1208,1233],"source":" Call `AtlThrow` if needed"},{"pos":[1238,1273],"content":"<bpt id=\"p1\">[</bpt>ATLTRACENOTIMPL<ept id=\"p1\">](#atltracenotimpl)</ept>","source":"[ATLTRACENOTIMPL](#atltracenotimpl)"},{"content":"Sends a message to the dump device that the specified function is not implemented.","pos":[1274,1356]},{"pos":[1361,1443],"content":"<bpt id=\"p1\">[</bpt>ATLTRACE<ept id=\"p1\">](http://msdn.microsoft.com/library/c796baa5-e2b9-4814-a27d-d800590b102e)</ept>","source":"[ATLTRACE](http://msdn.microsoft.com/library/c796baa5-e2b9-4814-a27d-d800590b102e)"},{"content":"Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels.","pos":[1444,1555]},{"content":"Included for backward compatibility.","pos":[1556,1592]},{"pos":[1597,1620],"content":"<bpt id=\"p1\">[</bpt>ATLTRACE2<ept id=\"p1\">](#atltrace2)</ept>","source":"[ATLTRACE2](#atltrace2)"},{"content":"Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels.","pos":[1621,1732]},{"pos":[1743,1802],"content":"<bpt id=\"p1\">&lt;a name=\"_atl_debug_interfaces\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  _ATL_DEBUG_INTERFACES","linkify":"<a name=\"_atl_debug_interfaces\"></a>  _ATL_DEBUG_INTERFACES","source":"<a name=\"_atl_debug_interfaces\"></a>  _ATL_DEBUG_INTERFACES"},{"pos":[1806,1958],"content":"Define this macro before including any ATL header files to trace all <ph id=\"ph1\">`AddRef`</ph> and <bpt id=\"p1\">**</bpt>Release<ept id=\"p1\">**</ept> calls on your components' interfaces to the output window.","source":"Define this macro before including any ATL header files to trace all `AddRef` and **Release** calls on your components' interfaces to the output window."},{"pos":[2011,2018],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The trace output will appear as shown below:","pos":[2022,2066]},{"content":"The first part of each trace will always be <ph id=\"ph1\">`ATL: QIThunk`</ph>.","pos":[2170,2229],"source":"The first part of each trace will always be `ATL: QIThunk`."},{"content":"Next is a value identifying the particular <bpt id=\"p1\">*</bpt>interface thunk<ept id=\"p1\">*</ept> being used.","pos":[2230,2302],"source":" Next is a value identifying the particular *interface thunk* being used."},{"content":"An interface thunk is an object used to maintain a reference count and provide the tracing capability used here.","pos":[2303,2415]},{"content":"A new interface thunk is created on every call to <ph id=\"ph1\">`QueryInterface`</ph> except for requests for the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> interface (in this case, the same thunk is returned every time to comply with COM's identity rules).","pos":[2416,2624],"source":" A new interface thunk is created on every call to `QueryInterface` except for requests for the **IUnknown** interface (in this case, the same thunk is returned every time to comply with COM's identity rules)."},{"content":"Next you'll see <ph id=\"ph1\">`AddRef`</ph> or <bpt id=\"p1\">**</bpt>Release<ept id=\"p1\">**</ept> indicating which method was called.","pos":[2631,2706],"source":"Next you'll see `AddRef` or **Release** indicating which method was called."},{"content":"Following that, you'll see a value identifying the object whose interface reference count was changed.","pos":[2707,2809]},{"content":"The value traced is the <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer of the object.","pos":[2810,2865],"source":" The value traced is the **this** pointer of the object."},{"content":"The reference count that is traced is the reference count on that thunk after <ph id=\"ph1\">`AddRef`</ph> or <bpt id=\"p1\">**</bpt>Release<ept id=\"p1\">**</ept> was called.","pos":[2872,2985],"source":"The reference count that is traced is the reference count on that thunk after `AddRef` or **Release** was called."},{"content":"Note that this reference count may not match the reference count for the object.","pos":[2986,3066]},{"content":"Each thunk maintains its own reference count to help you fully comply with COM's reference-counting rules.","pos":[3067,3173]},{"pos":[3180,3313],"content":"The final piece of information traced is the name of the object and the interface being affected by the <ph id=\"ph1\">`AddRef`</ph> or <bpt id=\"p1\">**</bpt>Release<ept id=\"p1\">**</ept> call.","source":"The final piece of information traced is the name of the object and the interface being affected by the `AddRef` or **Release** call."},{"pos":[3320,3439],"content":"Any interface leaks that are detected when the server shuts down and <ph id=\"ph1\">`_Module.Term`</ph> is called will be logged like this:","source":"Any interface leaks that are detected when the server shuts down and `_Module.Term` is called will be logged like this:"},{"content":"The information provided here maps directly to the information provided in the previous trace statements, so you can examine the reference counts throughout the whole lifetime of an interface thunk.","pos":[3561,3759]},{"content":"In addition, you get an indication of the maximum reference count on that interface thunk.","pos":[3760,3850]},{"pos":[3858,3921],"content":"[!NOTE]\n`_ATL_DEBUG_INTERFACES` can be used in retail builds.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\">`_ATL_DEBUG_INTERFACES`</ph> can be used in retail builds.","pos":[8,61],"source":"`_ATL_DEBUG_INTERFACES` can be used in retail builds."}]},{"pos":[3931,3974],"content":"<bpt id=\"p1\">&lt;a name=\"_atl_debug_qi\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  _ATL_DEBUG_QI","linkify":"<a name=\"_atl_debug_qi\"></a>  _ATL_DEBUG_QI","source":"<a name=\"_atl_debug_qi\"></a>  _ATL_DEBUG_QI"},{"pos":[3978,4036],"content":"Writes all calls to <ph id=\"ph1\">`QueryInterface`</ph> to the output window.","source":"Writes all calls to `QueryInterface` to the output window."},{"pos":[4081,4088],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4092,4161],"content":"If a call to <ph id=\"ph1\">`QueryInterface`</ph> failed, the output window will display:","source":"If a call to `QueryInterface` failed, the output window will display:"},{"pos":[4168,4195],"content":"<bpt id=\"p1\">*</bpt>interface name<ept id=\"p1\">*</ept><ph id=\"ph1\"> - </ph><ph id=\"ph2\">`failed`</ph>","source":"*interface name* - `failed`"},{"pos":[4205,4240],"content":"<bpt id=\"p1\">&lt;a name=\"atlassert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ATLASSERT","linkify":"<a name=\"atlassert\"></a>  ATLASSERT","source":"<a name=\"atlassert\"></a>  ATLASSERT"},{"pos":[4244,4426],"content":"The <ph id=\"ph1\">`ATLASSERT`</ph> macro performs the same functionality as the <bpt id=\"p1\">[</bpt>_ASSERTE<ept id=\"p1\">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> macro found in the C run-time library.","source":"The `ATLASSERT` macro performs the same functionality as the [_ASSERTE](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) macro found in the C run-time library."},{"pos":[4479,4489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Expression (including pointers) that evaluates to nonzero or 0.","pos":[4516,4579]},{"pos":[4589,4596],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4600,4713],"content":"In debug builds, <ph id=\"ph1\">`ATLASSERT`</ph> evaluates <ph id=\"ph2\">`booleanExpression`</ph> and generates a debug report when the result is false.","source":"In debug builds, `ATLASSERT` evaluates `booleanExpression` and generates a debug report when the result is false."},{"pos":[4723,4758],"content":"<bpt id=\"p1\">&lt;a name=\"atlensure\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ATLENSURE","linkify":"<a name=\"atlensure\"></a>  ATLENSURE","source":"<a name=\"atlensure\"></a>  ATLENSURE"},{"content":"This macro is used to validate parameters passed to a function.","pos":[4762,4825]},{"pos":[4918,4928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a boolean expression to be tested.","pos":[4955,4999]},{"content":"Specifies an error code to return.","pos":[5014,5048]},{"pos":[5058,5065],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"These macros provide a mechanism to detect and notify the user of incorrect parameter usage.","pos":[5069,5161]},{"pos":[5168,5240],"content":"The macro calls <ph id=\"ph1\">`ATLASSERT`</ph> and if the condition fails calls <ph id=\"ph2\">`AtlThrow`</ph>.","source":"The macro calls `ATLASSERT` and if the condition fails calls `AtlThrow`."},{"pos":[5247,5307],"content":"In the <bpt id=\"p1\">**</bpt>ATLENSURE<ept id=\"p1\">**</ept> case, <ph id=\"ph1\">`AtlThrow`</ph> is called with E_FAIL.","source":"In the **ATLENSURE** case, `AtlThrow` is called with E_FAIL."},{"pos":[5314,5395],"content":"In the <bpt id=\"p1\">**</bpt>ATLENSURE_THROW<ept id=\"p1\">**</ept> case, <ph id=\"ph1\">`AtlThrow`</ph> is called with the specified HRESULT.","source":"In the **ATLENSURE_THROW** case, `AtlThrow` is called with the specified HRESULT."},{"pos":[5402,5542],"content":"The difference between <bpt id=\"p1\">**</bpt>ATLENSURE<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`ATLASSERT`</ph> is that <bpt id=\"p2\">**</bpt>ATLENSURE<ept id=\"p2\">**</ept> throws an exception in Release builds as well as in Debug builds.","source":"The difference between **ATLENSURE** and `ATLASSERT` is that **ATLENSURE** throws an exception in Release builds as well as in Debug builds."},{"pos":[5552,5559],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5563,5667],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#108<ept id=\"p2\">](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#108](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_1.cpp)]"},{"pos":[5677,5724],"content":"<bpt id=\"p1\">&lt;a name=\"atltracenotimpl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ATLTRACENOTIMPL","linkify":"<a name=\"atltracenotimpl\"></a>  ATLTRACENOTIMPL","source":"<a name=\"atltracenotimpl\"></a>  ATLTRACENOTIMPL"},{"pos":[5728,5847],"content":"In debug builds of ATL, sends the string \" <ph id=\"ph1\">`funcname`</ph> is not implemented\" to the dump device and returns <bpt id=\"p1\">**</bpt>E_NOTIMPL<ept id=\"p1\">**</ept>.","source":"In debug builds of ATL, sends the string \" `funcname` is not implemented\" to the dump device and returns **E_NOTIMPL**."},{"pos":[5897,5907],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A string containing the name of the function that is not implemented.","pos":[5925,5999]},{"pos":[6009,6016],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6020,6068],"content":"In release builds, simply returns <bpt id=\"p1\">**</bpt>E_NOTIMPL<ept id=\"p1\">**</ept>.","source":"In release builds, simply returns **E_NOTIMPL**."},{"pos":[6078,6085],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6089,6193],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#127<ept id=\"p2\">](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#127](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_2.cpp)]"},{"pos":[6203,6248],"content":"<bpt id=\"p1\">&lt;a name=\"atltrace__atl_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ATLTRACE (ATL)","linkify":"<a name=\"atltrace__atl_\"></a>  ATLTRACE (ATL)","source":"<a name=\"atltrace__atl_\"></a>  ATLTRACE (ATL)"},{"content":"Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels.","pos":[6252,6363]},{"content":"Included for backward compatibility.","pos":[6364,6400]},{"pos":[6509,6519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The string and variables to send to the Visual C++ output window or any application that traps these messages.","pos":[6532,6647]},{"content":"[in] Type of event or method on which to report.","pos":[6668,6716]},{"content":"See the Remarks for a list of categories.","pos":[6717,6758]},{"content":"[in] The level of tracing to report.","pos":[6776,6812]},{"content":"See the Remarks for details.","pos":[6813,6841]},{"content":"[in] The formatted string to send to the dump device.","pos":[6864,6917]},{"pos":[6927,6934],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"See <bpt id=\"p1\">[</bpt>ATLTRACE2<ept id=\"p1\">](#atltrace2)</ept> for a description of <bpt id=\"p2\">**</bpt>ATLTRACE<ept id=\"p2\">**</ept>.","pos":[6938,7000],"source":"See [ATLTRACE2](#atltrace2) for a description of **ATLTRACE**."},{"content":"<bpt id=\"p1\">**</bpt>ATLTRACE<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`ATLTRACE2`</ph> have the same behavior, <bpt id=\"p2\">**</bpt>ATLTRACE<ept id=\"p2\">**</ept> is included for backward compatibility.","pos":[7001,7106],"source":"**ATLTRACE** and `ATLTRACE2` have the same behavior, **ATLTRACE** is included for backward compatibility."},{"pos":[7116,7151],"content":"<bpt id=\"p1\">&lt;a name=\"atltrace2\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ATLTRACE2","linkify":"<a name=\"atltrace2\"></a>  ATLTRACE2","source":"<a name=\"atltrace2\"></a>  ATLTRACE2"},{"content":"Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels.","pos":[7155,7266]},{"pos":[7387,7397],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The string to send to the Visual C++ output window or any application that traps these messages.","pos":[7410,7511]},{"content":"[in] Type of event or method on which to report.","pos":[7532,7580]},{"content":"See the Remarks for a list of categories.","pos":[7581,7622]},{"content":"[in] The level of tracing to report.","pos":[7640,7676]},{"content":"See the Remarks for details.","pos":[7677,7705]},{"content":"[in] The <ph id=\"ph1\">`printf`</ph>-style format string to use to create a string to send to the dump device.","pos":[7728,7819],"source":" [in] The `printf`-style format string to use to create a string to send to the dump device."},{"pos":[7829,7836],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The short form of <ph id=\"ph1\">`ATLTRACE2`</ph> writes a string to the debugger's output window.","pos":[7840,7918],"source":"The short form of `ATLTRACE2` writes a string to the debugger's output window."},{"content":"The second form of <ph id=\"ph1\">`ATLTRACE2`</ph> also writes output to the debugger's output window, but is subject to the settings of the ATL/MFC Trace Tool (see <bpt id=\"p1\">[</bpt>ATLTraceTool Sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>).","pos":[7919,8116],"source":" The second form of `ATLTRACE2` also writes output to the debugger's output window, but is subject to the settings of the ATL/MFC Trace Tool (see [ATLTraceTool Sample](../../visual-cpp-samples.md))."},{"content":"For example, if you set <ph id=\"ph1\">`level`</ph> to 4 and the ATL/MFC Trace Tool to level 0, you will not see the message.","pos":[8117,8222],"source":" For example, if you set `level` to 4 and the ATL/MFC Trace Tool to level 0, you will not see the message."},{"content":"<bpt id=\"p1\">*</bpt>level<ept id=\"p1\">*</ept> can be 0, 1, 2, 3, or 4.","pos":[8223,8255],"source":"*level* can be 0, 1, 2, 3, or 4."},{"content":"The default, 0, reports only the most serious problems.","pos":[8256,8311]},{"content":"The <ph id=\"ph1\">`category`</ph> parameter lists the trace flags to set.","pos":[8318,8372],"source":"The `category` parameter lists the trace flags to set."},{"content":"These flags correspond to the types of methods for which you want to report.","pos":[8373,8449]},{"content":"The tables below list the valid trace flags you can use for the <ph id=\"ph1\">`category`</ph> parameter.","pos":[8450,8535],"source":" The tables below list the valid trace flags you can use for the `category` parameter."},{"pos":[8545,8560],"content":"ATL Trace Flags","linkify":"ATL Trace Flags","nodes":[{"content":"ATL Trace Flags","pos":[0,15]}]},{"content":"ATL Category","pos":[8567,8579]},{"content":"Description","pos":[8580,8591]},{"content":"Reports on all ATL applications.","pos":[8655,8687]},{"content":"The default.","pos":[8688,8700]},{"content":"Reports on COM methods.","pos":[8719,8742]},{"content":"Reports on QueryInterface calls.","pos":[8760,8792]},{"content":"Reports on the registration of objects.","pos":[8817,8856]},{"content":"Reports on changing reference count.","pos":[8880,8916]},{"content":"Reports on windows methods; for example, reports an invalid message map ID.","pos":[8941,9016]},{"content":"Reports on controls; for example, reports when a control or its window is destroyed.","pos":[9040,9124]},{"content":"Reports hosting messages; for example, reports when a client in a container is activated.","pos":[9147,9236]},{"content":"Reports on OLE DB Consumer Template; for example, when a call to GetData fails, the output can contain the HRESULT.","pos":[9260,9375]},{"content":"Reports on OLE DB Provider Template; for example, reports if the creation of a column failed.","pos":[9401,9494]},{"content":"Reports for MMC SnapIn application.","pos":[9516,9551]},{"content":"Reports that the indicated function is not implemented.","pos":[9574,9629]},{"pos":[9634,9656],"content":"<bpt id=\"p1\">**</bpt>atlTraceAllocation<ept id=\"p1\">**</ept>","source":"**atlTraceAllocation**"},{"content":"Reports messages printed by the memory debugging tools in atldbgmem.h.","pos":[9657,9727]},{"pos":[9738,9753],"content":"MFC Trace Flags","linkify":"MFC Trace Flags","nodes":[{"content":"MFC Trace Flags","pos":[0,15]}]},{"content":"MFC Category","pos":[9760,9772]},{"content":"Description","pos":[9773,9784]},{"pos":[9830,9845],"content":"<bpt id=\"p1\">**</bpt>traceAppMsg<ept id=\"p1\">**</ept>","source":"**traceAppMsg**"},{"content":"General purpose, MFC messages.","pos":[9846,9876]},{"content":"Always recommended.","pos":[9877,9896]},{"pos":[9901,9921],"content":"<bpt id=\"p1\">**</bpt>traceDumpContext<ept id=\"p1\">**</ept>","source":"**traceDumpContext**"},{"pos":[9922,9994],"content":"Messages from <bpt id=\"p1\">[</bpt>CDumpContext<ept id=\"p1\">](../../mfc/reference/cdumpcontext-class.md)</ept>.","source":"Messages from [CDumpContext](../../mfc/reference/cdumpcontext-class.md)."},{"pos":[9999,10014],"content":"<bpt id=\"p1\">**</bpt>traceWinMsg<ept id=\"p1\">**</ept>","source":"**traceWinMsg**"},{"content":"Messages from MFC's message handling code.","pos":[10015,10057]},{"pos":[10062,10077],"content":"<bpt id=\"p1\">**</bpt>traceMemory<ept id=\"p1\">**</ept>","source":"**traceMemory**"},{"content":"Messages from MFC's memory management code.","pos":[10078,10121]},{"pos":[10126,10145],"content":"<bpt id=\"p1\">**</bpt>traceCmdRouting<ept id=\"p1\">**</ept>","source":"**traceCmdRouting**"},{"content":"Messages from MFC's Windows command routing code.","pos":[10146,10195]},{"pos":[10200,10213],"content":"<bpt id=\"p1\">**</bpt>traceHtml<ept id=\"p1\">**</ept>","source":"**traceHtml**"},{"content":"Messages from MFC's DHTML dialog support.","pos":[10214,10255]},{"pos":[10260,10275],"content":"<bpt id=\"p1\">**</bpt>traceSocket<ept id=\"p1\">**</ept>","source":"**traceSocket**"},{"content":"Messages from MFC's socket support.","pos":[10276,10311]},{"pos":[10316,10328],"content":"<bpt id=\"p1\">**</bpt>traceOle<ept id=\"p1\">**</ept>","source":"**traceOle**"},{"content":"Messages from MFC's OLE support.","pos":[10329,10361]},{"pos":[10366,10383],"content":"<bpt id=\"p1\">**</bpt>traceDatabase<ept id=\"p1\">**</ept>","source":"**traceDatabase**"},{"content":"Messages from MFC's database support.","pos":[10384,10421]},{"pos":[10426,10443],"content":"<bpt id=\"p1\">**</bpt>traceInternet<ept id=\"p1\">**</ept>","source":"**traceInternet**"},{"content":"Messages from MFC's Internet support.","pos":[10444,10481]},{"pos":[10489,10592],"content":"To declare a custom trace category, declare a global instance of the <ph id=\"ph1\">`CTraceCategory`</ph> class as follows:","source":"To declare a custom trace category, declare a global instance of the `CTraceCategory` class as follows:"},{"pos":[10599,10703],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#109<ept id=\"p2\">](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#109](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_3.cpp)]"},{"content":"The category name, <ph id=\"ph1\">`MY_CATEGORY`</ph> in this example, is the name you specify to the <ph id=\"ph2\">`category`</ph> parameter.","pos":[10710,10812],"source":"The category name, `MY_CATEGORY` in this example, is the name you specify to the `category` parameter."},{"content":"The first parameter is the category name that will appear in the ATL/MFC Trace Tool.","pos":[10813,10897]},{"content":"The second parameter is the default trace level.","pos":[10898,10946]},{"content":"This parameter is optional, and the default trace level is 0.","pos":[10947,11008]},{"content":"To use a user-defined category:","pos":[11015,11046]},{"pos":[11053,11157],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#110<ept id=\"p2\">](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#110](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_4.cpp)]"},{"pos":[11164,11313],"content":"To specify that you want to filter the trace messages, insert definitions for these macros into Stdafx.h before the <ph id=\"ph1\">`#include &lt;atlbase.h&gt;`</ph> statement.","source":"To specify that you want to filter the trace messages, insert definitions for these macros into Stdafx.h before the `#include <atlbase.h>` statement."},{"content":"Alternatively, you can set the filter in the preprocessor directives in the <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","pos":[11320,11426],"source":"Alternatively, you can set the filter in the preprocessor directives in the **Property Pages** dialog box."},{"content":"Click the <bpt id=\"p1\">**</bpt>Preprocessor<ept id=\"p1\">**</ept> tab and then insert the global into the <bpt id=\"p2\">**</bpt>Preprocessor Definitions<ept id=\"p2\">**</ept> edit box.","pos":[11427,11532],"source":" Click the **Preprocessor** tab and then insert the global into the **Preprocessor Definitions** edit box."},{"pos":[11539,11703],"content":"Atlbase.h contains default definitions of the <ph id=\"ph1\">`ATLTRACE2`</ph> macros and these definitions will be used if you don't define these symbols before atlbase.h is processed.","source":"Atlbase.h contains default definitions of the `ATLTRACE2` macros and these definitions will be used if you don't define these symbols before atlbase.h is processed."},{"pos":[11710,11764],"content":"In release builds, <ph id=\"ph1\">`ATLTRACE2`</ph> compiles to <ph id=\"ph2\">`(void) 0`</ph>.","source":"In release builds, `ATLTRACE2` compiles to `(void) 0`."},{"pos":[11771,11897],"content":"<ph id=\"ph1\">`ATLTRACE2`</ph> limits the contents of the string to be sent to the dump device to no more than 1023 characters, after formatting.","source":"`ATLTRACE2` limits the contents of the string to be sent to the dump device to no more than 1023 characters, after formatting."},{"pos":[11904,12009],"content":"<bpt id=\"p1\">**</bpt>ATLTRACE<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`ATLTRACE2`</ph> have the same behavior, <bpt id=\"p2\">**</bpt>ATLTRACE<ept id=\"p2\">**</ept> is included for backward compatibility.","source":"**ATLTRACE** and `ATLTRACE2` have the same behavior, **ATLTRACE** is included for backward compatibility."},{"pos":[12019,12026],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12030,12134],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#111<ept id=\"p2\">](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#111](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_5.cpp)]"},{"pos":[12143,12151],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Macros<ept id=\"p1\">](../../atl/reference/atl-macros.md)</ept><ph id=\"ph1\"> </ph>","pos":[12155,12199],"source":"[Macros](../../atl/reference/atl-macros.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Debugging and Error Reporting Global Functions<ept id=\"p1\">](../../atl/reference/debugging-and-error-reporting-global-functions.md)</ept>","pos":[12202,12322],"source":" [Debugging and Error Reporting Global Functions](../../atl/reference/debugging-and-error-reporting-global-functions.md)"}],"content":"---\ntitle: \"Debugging and Error Reporting Macros | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"macros, error reporting\"\nms.assetid: 4da9b87f-ec5c-4a32-ab93-637780909b9d\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Debugging and Error Reporting Macros\nThese macros provide useful debugging and trace facilities.  \n  \n|||  \n|-|-|  \n|[_ATL_DEBUG_INTERFACES](#_atl_debug_interfaces)|Writes, to the output window, any interface leaks that are detected when `_Module.Term` is called.|  \n|[_ATL_DEBUG_QI](#_atl_debug_qi)|Writes all calls to `QueryInterface` to the output window.|  \n|[ATLASSERT](#atlassert)|Performs the same functionality as the [_ASSERTE](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) macro found in the C run-time library.|  \n|[ATLENSURE](#atlensure)|Performs parameters validation. Call `AtlThrow` if needed|  \n|[ATLTRACENOTIMPL](#atltracenotimpl)|Sends a message to the dump device that the specified function is not implemented.|  \n|[ATLTRACE](http://msdn.microsoft.com/library/c796baa5-e2b9-4814-a27d-d800590b102e)|Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels. Included for backward compatibility.|  \n|[ATLTRACE2](#atltrace2)|Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels.|  \n  \n##  <a name=\"_atl_debug_interfaces\"></a>  _ATL_DEBUG_INTERFACES  \n Define this macro before including any ATL header files to trace all `AddRef` and **Release** calls on your components' interfaces to the output window.  \n  \n```\n#define _ATL_DEBUG_INTERFACES\n```  \n  \n### Remarks  \n The trace output will appear as shown below:  \n  \n `ATL: QIThunk - 2008         AddRef  :   Object = 0x00d81ba0   Refcount = 1   CBug - IBug`  \n  \n The first part of each trace will always be `ATL: QIThunk`. Next is a value identifying the particular *interface thunk* being used. An interface thunk is an object used to maintain a reference count and provide the tracing capability used here. A new interface thunk is created on every call to `QueryInterface` except for requests for the **IUnknown** interface (in this case, the same thunk is returned every time to comply with COM's identity rules).  \n  \n Next you'll see `AddRef` or **Release** indicating which method was called. Following that, you'll see a value identifying the object whose interface reference count was changed. The value traced is the **this** pointer of the object.  \n  \n The reference count that is traced is the reference count on that thunk after `AddRef` or **Release** was called. Note that this reference count may not match the reference count for the object. Each thunk maintains its own reference count to help you fully comply with COM's reference-counting rules.  \n  \n The final piece of information traced is the name of the object and the interface being affected by the `AddRef` or **Release** call.  \n  \n Any interface leaks that are detected when the server shuts down and `_Module.Term` is called will be logged like this:  \n  \n `ATL: QIThunk - 2005         LEAK    :   Object = 0x00d81ca0   Refcount = 1   MaxRefCount = 1   CBug - IBug`  \n  \n The information provided here maps directly to the information provided in the previous trace statements, so you can examine the reference counts throughout the whole lifetime of an interface thunk. In addition, you get an indication of the maximum reference count on that interface thunk.  \n  \n> [!NOTE]\n> `_ATL_DEBUG_INTERFACES` can be used in retail builds.  \n  \n##  <a name=\"_atl_debug_qi\"></a>  _ATL_DEBUG_QI  \n Writes all calls to `QueryInterface` to the output window.  \n  \n```\n#define _ATL_DEBUG_QI\n```  \n  \n### Remarks  \n If a call to `QueryInterface` failed, the output window will display:  \n  \n *interface name* - `failed`  \n  \n##  <a name=\"atlassert\"></a>  ATLASSERT  \n The `ATLASSERT` macro performs the same functionality as the [_ASSERTE](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) macro found in the C run-time library.  \n  \n```\nATLASSERT(booleanExpression);\n```  \n  \n### Parameters  \n `booleanExpression`  \n Expression (including pointers) that evaluates to nonzero or 0.  \n  \n### Remarks  \n In debug builds, `ATLASSERT` evaluates `booleanExpression` and generates a debug report when the result is false.  \n  \n##  <a name=\"atlensure\"></a>  ATLENSURE  \n This macro is used to validate parameters passed to a function.  \n  \n```\nATLENSURE(booleanExpression);\nATLENSURE_THROW(booleanExpression, hr);\n```  \n  \n### Parameters  \n `booleanExpression`  \n Specifies a boolean expression to be tested.  \n  \n `hr`  \n Specifies an error code to return.  \n  \n### Remarks  \n These macros provide a mechanism to detect and notify the user of incorrect parameter usage.  \n  \n The macro calls `ATLASSERT` and if the condition fails calls `AtlThrow`.  \n  \n In the **ATLENSURE** case, `AtlThrow` is called with E_FAIL.  \n  \n In the **ATLENSURE_THROW** case, `AtlThrow` is called with the specified HRESULT.  \n  \n The difference between **ATLENSURE** and `ATLASSERT` is that **ATLENSURE** throws an exception in Release builds as well as in Debug builds.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#108](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_1.cpp)]  \n  \n##  <a name=\"atltracenotimpl\"></a>  ATLTRACENOTIMPL  \n In debug builds of ATL, sends the string \" `funcname` is not implemented\" to the dump device and returns **E_NOTIMPL**.  \n  \n```\nATLTRACENOTIMPL(funcname);\n```  \n  \n### Parameters  \n `funcname`  \n [in] A string containing the name of the function that is not implemented.  \n  \n### Remarks  \n In release builds, simply returns **E_NOTIMPL**.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#127](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_2.cpp)]  \n  \n##  <a name=\"atltrace__atl_\"></a>  ATLTRACE (ATL)  \n Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels. Included for backward compatibility.  \n  \n```\nATLTRACE(exp);\n\nATLTRACE(\n  DWORD category,\n  UINT  level,\n  LPCSTR lpszFormat, ...);\n```  \n  \n### Parameters  \n `exp`  \n [in] The string and variables to send to the Visual C++ output window or any application that traps these messages.  \n  \n `category`  \n [in] Type of event or method on which to report. See the Remarks for a list of categories.  \n  \n `level`  \n [in] The level of tracing to report. See the Remarks for details.  \n  \n `lpszFormat`  \n [in] The formatted string to send to the dump device.  \n  \n### Remarks  \n See [ATLTRACE2](#atltrace2) for a description of **ATLTRACE**. **ATLTRACE** and `ATLTRACE2` have the same behavior, **ATLTRACE** is included for backward compatibility.  \n  \n##  <a name=\"atltrace2\"></a>  ATLTRACE2  \n Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels.  \n  \n```\nATLTRACE2(exp);\n\nATLTRACE2(\n    DWORD category,\n    UINT level,\n    LPCSTRlpszFormat,\n    ...\n );\n```  \n  \n### Parameters  \n `exp`  \n [in] The string to send to the Visual C++ output window or any application that traps these messages.  \n  \n `category`  \n [in] Type of event or method on which to report. See the Remarks for a list of categories.  \n  \n `level`  \n [in] The level of tracing to report. See the Remarks for details.  \n  \n `lpszFormat`  \n [in] The `printf`-style format string to use to create a string to send to the dump device.  \n  \n### Remarks  \n The short form of `ATLTRACE2` writes a string to the debugger's output window. The second form of `ATLTRACE2` also writes output to the debugger's output window, but is subject to the settings of the ATL/MFC Trace Tool (see [ATLTraceTool Sample](../../visual-cpp-samples.md)). For example, if you set `level` to 4 and the ATL/MFC Trace Tool to level 0, you will not see the message. *level* can be 0, 1, 2, 3, or 4. The default, 0, reports only the most serious problems.  \n  \n The `category` parameter lists the trace flags to set. These flags correspond to the types of methods for which you want to report. The tables below list the valid trace flags you can use for the `category` parameter.  \n  \n### ATL Trace Flags  \n  \n|ATL Category|Description|  \n|------------------|-----------------|  \n|`atlTraceGeneral`|Reports on all ATL applications. The default.|  \n|`atlTraceCOM`|Reports on COM methods.|  \n|`atlTraceQI`|Reports on QueryInterface calls.|  \n|`atlTraceRegistrar`|Reports on the registration of objects.|  \n|`atlTraceRefcount`|Reports on changing reference count.|  \n|`atlTraceWindowing`|Reports on windows methods; for example, reports an invalid message map ID.|  \n|`atlTraceControls`|Reports on controls; for example, reports when a control or its window is destroyed.|  \n|`atlTraceHosting`|Reports hosting messages; for example, reports when a client in a container is activated.|  \n|`atlTraceDBClient`|Reports on OLE DB Consumer Template; for example, when a call to GetData fails, the output can contain the HRESULT.|  \n|`atlTraceDBProvider`|Reports on OLE DB Provider Template; for example, reports if the creation of a column failed.|  \n|`atlTraceSnapin`|Reports for MMC SnapIn application.|  \n|`atlTraceNotImpl`|Reports that the indicated function is not implemented.|  \n|**atlTraceAllocation**|Reports messages printed by the memory debugging tools in atldbgmem.h.|  \n  \n### MFC Trace Flags  \n  \n|MFC Category|Description|  \n|------------------|-----------------|  \n|**traceAppMsg**|General purpose, MFC messages. Always recommended.|  \n|**traceDumpContext**|Messages from [CDumpContext](../../mfc/reference/cdumpcontext-class.md).|  \n|**traceWinMsg**|Messages from MFC's message handling code.|  \n|**traceMemory**|Messages from MFC's memory management code.|  \n|**traceCmdRouting**|Messages from MFC's Windows command routing code.|  \n|**traceHtml**|Messages from MFC's DHTML dialog support.|  \n|**traceSocket**|Messages from MFC's socket support.|  \n|**traceOle**|Messages from MFC's OLE support.|  \n|**traceDatabase**|Messages from MFC's database support.|  \n|**traceInternet**|Messages from MFC's Internet support.|  \n  \n To declare a custom trace category, declare a global instance of the `CTraceCategory` class as follows:  \n  \n [!code-cpp[NVC_ATL_Utilities#109](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_3.cpp)]  \n  \n The category name, `MY_CATEGORY` in this example, is the name you specify to the `category` parameter. The first parameter is the category name that will appear in the ATL/MFC Trace Tool. The second parameter is the default trace level. This parameter is optional, and the default trace level is 0.  \n  \n To use a user-defined category:  \n  \n [!code-cpp[NVC_ATL_Utilities#110](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_4.cpp)]  \n  \n To specify that you want to filter the trace messages, insert definitions for these macros into Stdafx.h before the `#include <atlbase.h>` statement.  \n  \n Alternatively, you can set the filter in the preprocessor directives in the **Property Pages** dialog box. Click the **Preprocessor** tab and then insert the global into the **Preprocessor Definitions** edit box.  \n  \n Atlbase.h contains default definitions of the `ATLTRACE2` macros and these definitions will be used if you don't define these symbols before atlbase.h is processed.  \n  \n In release builds, `ATLTRACE2` compiles to `(void) 0`.  \n  \n `ATLTRACE2` limits the contents of the string to be sent to the dump device to no more than 1023 characters, after formatting.  \n  \n **ATLTRACE** and `ATLTRACE2` have the same behavior, **ATLTRACE** is included for backward compatibility.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#111](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_5.cpp)]  \n  \n## See Also  \n [Macros](../../atl/reference/atl-macros.md)   \n [Debugging and Error Reporting Global Functions](../../atl/reference/debugging-and-error-reporting-global-functions.md)\n"}