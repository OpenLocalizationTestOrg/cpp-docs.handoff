{"nodes":[{"pos":[12,44],"content":"_chmod, _wchmod | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_chmod, _wchmod | Microsoft Docs","pos":[0,32]}]},{"pos":[1091,1106],"content":"_chmod, _wchmod","linkify":"_chmod, _wchmod","nodes":[{"content":"_chmod, _wchmod","pos":[0,15]}]},{"content":"Changes the file-permission settings.","pos":[1107,1144]},{"pos":[1153,1159],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1324,1334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name of the existing file.","pos":[1352,1378]},{"content":"Permission setting for the file.","pos":[1396,1428]},{"pos":[1437,1449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"These functions return 0 if the permission setting is successfully changed.","pos":[1453,1528]},{"content":"A return value of â€“1 indicates failure.","pos":[1529,1568]},{"content":"If the specified file could not be found, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`ENOENT`</ph>; if a parameter is invalid, <ph id=\"ph3\">`errno`</ph> is set to <ph id=\"ph4\">`EINVAL`</ph>.","pos":[1569,1693],"source":" If the specified file could not be found, `errno` is set to `ENOENT`; if a parameter is invalid, `errno` is set to `EINVAL`."},{"pos":[1702,1709],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_chmod`</ph> function changes the permission setting of the file specified by <ph id=\"ph2\">`filename`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[1713,1804],"source":"The `_chmod` function changes the permission setting of the file specified by `filename`*.*"},{"content":"The permission setting controls the read and write access to the file.","pos":[1805,1875]},{"content":"The integer expression <ph id=\"ph1\">`pmode`</ph> contains one or both of the following manifest constants, defined in SYS\\Stat.h.","pos":[1876,1987],"source":" The integer expression `pmode` contains one or both of the following manifest constants, defined in SYS\\Stat.h."},{"content":"Writing permitted.","pos":[2009,2027]},{"content":"Reading permitted.","pos":[2048,2066]},{"content":"Reading and writing permitted.","pos":[2099,2129]},{"content":"When both constants are given, they are joined with the bitwise <ph id=\"ph1\">`OR`</ph> operator ( <ph id=\"ph2\">`|`</ph> ).","pos":[2136,2222],"source":"When both constants are given, they are joined with the bitwise `OR` operator ( `|` )."},{"content":"If write permission is not given, the file is read-only.","pos":[2223,2279]},{"content":"Note that all files are always readable; it is not possible to give write-only permission.","pos":[2280,2370]},{"content":"Thus, the modes <ph id=\"ph1\">`_S_IWRITE`</ph> and <ph id=\"ph2\">`_S_IREAD | _S_IWRITE`</ph> are equivalent.","pos":[2371,2441],"source":" Thus, the modes `_S_IWRITE` and `_S_IREAD | _S_IWRITE` are equivalent."},{"content":"<ph id=\"ph1\">`_wchmod`</ph> is a wide-character version of <ph id=\"ph2\">`_chmod`</ph>; the <ph id=\"ph3\">`filename`</ph> argument to <ph id=\"ph4\">`_wchmod`</ph> is a wide-character string.","pos":[2448,2563],"source":"`_wchmod` is a wide-character version of `_chmod`; the `filename` argument to `_wchmod` is a wide-character string."},{"content":"<ph id=\"ph1\">`_wchmod`</ph> and <ph id=\"ph2\">`_chmod`</ph> behave identically otherwise.","pos":[2564,2616],"source":"`_wchmod` and `_chmod` behave identically otherwise."},{"content":"This function validates its parameters.","pos":[2623,2662]},{"content":"If <ph id=\"ph1\">`pmode`</ph> is not a combination of one of the manifest constants or incorporates an alternate set of constants, the function simply ignores those.","pos":[2663,2809],"source":" If `pmode` is not a combination of one of the manifest constants or incorporates an alternate set of constants, the function simply ignores those."},{"content":"If <ph id=\"ph1\">`filename`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2810,2965],"source":" If `filename` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and the function returns -1.","pos":[2966,3058],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns -1."},{"pos":[3068,3097],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[3104,3119]},{"content":"_UNICODE and _MBCS not defined","pos":[3120,3150]},{"content":"_MBCS defined","pos":[3151,3164]},{"content":"_UNICODE defined","pos":[3165,3181]},{"pos":[3343,3355],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3362,3369]},{"content":"Required header","pos":[3370,3385]},{"content":"Optional header","pos":[3386,3401]},{"content":"<ph id=\"ph1\">\\&lt;</ph>io.h&gt;","pos":[3477,3484],"source":"\\<io.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/types.h&gt;, <ph id=\"ph2\">\\&lt;</ph>sys/stat.h&gt;, <ph id=\"ph3\">\\&lt;</ph>errno.h&gt;","pos":[3485,3526],"source":"\\<sys/types.h>, \\<sys/stat.h>, \\<errno.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>io.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[3541,3562],"source":"\\<io.h> or \\<wchar.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/types.h&gt;, <ph id=\"ph2\">\\&lt;</ph>sys/stat.h&gt;, <ph id=\"ph3\">\\&lt;</ph>errno.h&gt;","pos":[3563,3604],"source":"\\<sys/types.h>, \\<sys/stat.h>, \\<errno.h>"},{"pos":[3612,3730],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3739,3746],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5516,5541],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5551,5660],"content":"<bpt id=\"p1\">[</bpt>System::IO::File::SetAttributes<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.file.setattributes.aspx)</ept>","source":"[System::IO::File::SetAttributes](https://msdn.microsoft.com/en-us/library/system.io.file.setattributes.aspx)"},{"pos":[5670,5811],"content":"<bpt id=\"p1\">[</bpt>System::Security::Permissions::FileIOPermission<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.security.permissions.fileiopermission.aspx)</ept>","source":"[System::Security::Permissions::FileIOPermission](https://msdn.microsoft.com/en-us/library/system.security.permissions.fileiopermission.aspx)"},{"pos":[5820,5828],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>File Handling<ept id=\"p1\">](../../c-runtime-library/file-handling.md)</ept><ph id=\"ph1\"> </ph>","pos":[5832,5890],"source":"[File Handling](../../c-runtime-library/file-handling.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_access, _waccess<ept id=\"p1\">](../../c-runtime-library/reference/access-waccess.md)</ept><ph id=\"ph1\"> </ph>","pos":[5893,5967],"source":" [_access, _waccess](../../c-runtime-library/reference/access-waccess.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_creat, _wcreat<ept id=\"p1\">](../../c-runtime-library/reference/creat-wcreat.md)</ept><ph id=\"ph1\"> </ph>","pos":[5970,6040],"source":" [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32<ept id=\"p1\">](../../c-runtime-library/reference/fstat-fstat32-fstat64-fstati64-fstat32i64-fstat64i32.md)</ept><ph id=\"ph1\"> </ph>","pos":[6043,6201],"source":" [_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32](../../c-runtime-library/reference/fstat-fstat32-fstat64-fstati64-fstat32i64-fstat64i32.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_open, _wopen<ept id=\"p1\">](../../c-runtime-library/reference/open-wopen.md)</ept><ph id=\"ph1\"> </ph>","pos":[6204,6270],"source":" [_open, _wopen](../../c-runtime-library/reference/open-wopen.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_stat, _wstat Functions<ept id=\"p1\">](../../c-runtime-library/reference/stat-functions.md)</ept>","pos":[6273,6352],"source":" [_stat, _wstat Functions](../../c-runtime-library/reference/stat-functions.md)"}],"content":"---\ntitle: \"_chmod, _wchmod | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_chmod\"\n  - \"_wchmod\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-filesystem-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_chmod\"\n  - \"_wchmod\"\n  - \"wchmod\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_chmod function\"\n  - \"wchmod function\"\n  - \"file permissions [C++]\"\n  - \"chmod function\"\n  - \"files [C++], changing permissions\"\n  - \"_wchmod function\"\nms.assetid: 92f7cb86-b3b0-4232-a599-b8c04a2f2c19\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _chmod, _wchmod\nChanges the file-permission settings.  \n  \n## Syntax  \n  \n```  \n  \n      int _chmod(   \n   const char *filename,  \n   int pmode   \n);  \nint _wchmod(   \n   const wchar_t *filename,  \n   int pmode   \n);  \n```  \n  \n#### Parameters  \n `filename`  \n Name of the existing file.  \n  \n `pmode`  \n Permission setting for the file.  \n  \n## Return Value  \n These functions return 0 if the permission setting is successfully changed. A return value of â€“1 indicates failure. If the specified file could not be found, `errno` is set to `ENOENT`; if a parameter is invalid, `errno` is set to `EINVAL`.  \n  \n## Remarks  \n The `_chmod` function changes the permission setting of the file specified by `filename`*.* The permission setting controls the read and write access to the file. The integer expression `pmode` contains one or both of the following manifest constants, defined in SYS\\Stat.h.  \n  \n `_S_IWRITE`  \n Writing permitted.  \n  \n `_S_IREAD`  \n Reading permitted.  \n  \n `_S_IREAD | _S_IWRITE`  \n Reading and writing permitted.  \n  \n When both constants are given, they are joined with the bitwise `OR` operator ( `|` ). If write permission is not given, the file is read-only. Note that all files are always readable; it is not possible to give write-only permission. Thus, the modes `_S_IWRITE` and `_S_IREAD | _S_IWRITE` are equivalent.  \n  \n `_wchmod` is a wide-character version of `_chmod`; the `filename` argument to `_wchmod` is a wide-character string. `_wchmod` and `_chmod` behave identically otherwise.  \n  \n This function validates its parameters. If `pmode` is not a combination of one of the manifest constants or incorporates an alternate set of constants, the function simply ignores those. If `filename` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns -1.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tchmod`|`_chmod`|`_chmod`|`_wchmod`|  \n  \n## Requirements  \n  \n|Routine|Required header|Optional header|  \n|-------------|---------------------|---------------------|  \n|`_chmod`|\\<io.h>|\\<sys/types.h>, \\<sys/stat.h>, \\<errno.h>|  \n|`_wchmod`|\\<io.h> or \\<wchar.h>|\\<sys/types.h>, \\<sys/stat.h>, \\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_chmod.c  \n// This program uses _chmod to  \n// change the mode of a file to read-only.  \n// It then attempts to modify the file.  \n//  \n  \n#include <sys/types.h>  \n#include <sys/stat.h>  \n#include <io.h>  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <errno.h>  \n  \n// Change the mode and report error or success   \nvoid set_mode_and_report(char * filename, int mask)  \n{  \n   // Check for failure   \n   if( _chmod( filename, mask ) == -1 )  \n   {  \n      // Determine cause of failure and report.   \n      switch (errno)  \n      {  \n         case EINVAL:  \n            fprintf( stderr, \"Invalid parameter to chmod.\\n\");  \n            break;  \n         case ENOENT:  \n            fprintf( stderr, \"File %s not found\\n\", filename );  \n            break;  \n         default:  \n            // Should never be reached   \n            fprintf( stderr, \"Unexpected error in chmod.\\n\" );  \n       }  \n   }  \n   else  \n   {  \n      if (mask == _S_IREAD)  \n        printf( \"Mode set to read-only\\n\" );  \n      else if (mask & _S_IWRITE)  \n        printf( \"Mode set to read/write\\n\" );  \n   }  \n   fflush(stderr);  \n}  \n  \nint main( void )  \n{   \n  \n   // Create or append to a file.   \n   system( \"echo /* End of file */ >> crt_chmod.c_input\" );  \n  \n   // Set file mode to read-only:   \n   set_mode_and_report(\"crt_chmod.c_input \", _S_IREAD );  \n  \n   system( \"echo /* End of file */ >> crt_chmod.c_input \" );  \n  \n   // Change back to read/write:   \n   set_mode_and_report(\"crt_chmod.c_input \", _S_IWRITE );  \n  \n   system( \"echo /* End of file */ >> crt_chmod.c_input \" );   \n}   \n```  \n  \n```Output  \n  \nA line of text.  \n  \n```  \n  \n```Output  \n  \n      A line of text.Mode set to read-only  \nAccess is denied.  \nMode set to read/write  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::IO::File::SetAttributes](https://msdn.microsoft.com/en-us/library/system.io.file.setattributes.aspx)  \n  \n-   [System::Security::Permissions::FileIOPermission](https://msdn.microsoft.com/en-us/library/system.security.permissions.fileiopermission.aspx)  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [_access, _waccess](../../c-runtime-library/reference/access-waccess.md)   \n [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md)   \n [_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32](../../c-runtime-library/reference/fstat-fstat32-fstat64-fstati64-fstat32i64-fstat64i32.md)   \n [_open, _wopen](../../c-runtime-library/reference/open-wopen.md)   \n [_stat, _wstat Functions](../../c-runtime-library/reference/stat-functions.md)"}