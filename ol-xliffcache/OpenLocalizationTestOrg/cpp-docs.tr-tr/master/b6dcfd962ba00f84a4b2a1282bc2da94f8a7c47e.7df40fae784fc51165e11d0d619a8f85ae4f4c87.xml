{"nodes":[{"pos":[12,49],"content":"CSimpleStringT Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CSimpleStringT Class | Microsoft Docs","pos":[0,37]}]},{"pos":[806,826],"content":"CSimpleStringT Class","linkify":"CSimpleStringT Class","nodes":[{"content":"CSimpleStringT Class","pos":[0,20]}]},{"pos":[827,875],"content":"This class represents a <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"This class represents a `CSimpleStringT` object."},{"pos":[885,891],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[963,973],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The character type of the string class.","pos":[991,1030]},{"content":"Can be one of the following:","pos":[1031,1059]},{"pos":[1067,1103],"content":"<ph id=\"ph1\">`char`</ph> (for ANSI character strings).","source":"`char` (for ANSI character strings)."},{"pos":[1111,1153],"content":"<ph id=\"ph1\">`wchar_t`</ph> (for Unicode character strings).","source":"`wchar_t` (for Unicode character strings)."},{"pos":[1161,1217],"content":"<bpt id=\"p1\">**</bpt>TCHAR<ept id=\"p1\">**</ept> (for both ANSI and Unicode character strings).","source":"**TCHAR** (for both ANSI and Unicode character strings)."},{"pos":[1226,1233],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1243,1258],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1265,1269]},{"content":"Description","pos":[1270,1281]},{"pos":[1319,1368],"content":"<bpt id=\"p1\">[</bpt>CSimpleStringT::PCXSTR<ept id=\"p1\">](#csimplestringt__pcxstr)</ept>","source":"[CSimpleStringT::PCXSTR](#csimplestringt__pcxstr)"},{"content":"A pointer to a constant string.","pos":[1369,1400]},{"pos":[1405,1452],"content":"<bpt id=\"p1\">[</bpt>CSimpleStringT::PXSTR<ept id=\"p1\">](#csimplestringt__pxstr)</ept>","source":"[CSimpleStringT::PXSTR](#csimplestringt__pxstr)"},{"content":"A pointer to a string.","pos":[1453,1475]},{"pos":[1486,1505],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1512,1516]},{"content":"Description","pos":[1517,1528]},{"pos":[1566,1621],"content":"<bpt id=\"p1\">[</bpt>CSimpleStringT::CSimpleStringT<ept id=\"p1\">](#csimplestringt__ctor)</ept>","source":"[CSimpleStringT::CSimpleStringT](#csimplestringt__ctor)"},{"pos":[1622,1674],"content":"Constructs <ph id=\"ph1\">`CSimpleStringT`</ph> objects in various ways.","source":"Constructs `CSimpleStringT` objects in various ways."},{"pos":[1679,1735],"content":"<bpt id=\"p1\">[</bpt>CSimpleStringT::~CSimpleStringT<ept id=\"p1\">](#csimplestringt__dtor)</ept>","source":"[CSimpleStringT::~CSimpleStringT](#csimplestringt__dtor)"},{"content":"Destructor.","pos":[1736,1747]},{"pos":[1759,1773],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1780,1784]},{"content":"Description","pos":[1785,1796]},{"content":"<ph id=\"ph1\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; \n</ph><ph id=\"ph2\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::Append<ept id=\"p1\">](#csimplestringt__append)</ept>|Appends a <ph id=\"ph3\">`CSimpleStringT`</ph> object to an existing <ph id=\"ph4\">`CSimpleStringT`</ph> object.|","pos":[1833,1967],"source":"<<<<<<< \n|[CSimpleStringT::Append](#csimplestringt__append)|Appends a `CSimpleStringT` object to an existing `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::AppendChar<ept id=\"p1\">](#csimplestringt__appendchar)</ept>|Appends a character to an existing <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[1970,2089],"source":"|[CSimpleStringT::AppendChar](#csimplestringt__appendchar)|Appends a character to an existing `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::CopyChars<ept id=\"p1\">](#csimplestringt__copychars)</ept>|Copies a character or characters to another string.|","pos":[2092,2201],"source":"|[CSimpleStringT::CopyChars](#csimplestringt__copychars)|Copies a character or characters to another string.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::CopyCharsOverlapped<ept id=\"p1\">](#csimplestringt__copycharsoverlapped)</ept>|Copies a character or characters to another string in which the buffers overlap.|","pos":[2204,2362],"source":"|[CSimpleStringT::CopyCharsOverlapped](#csimplestringt__copycharsoverlapped)|Copies a character or characters to another string in which the buffers overlap.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::Empty<ept id=\"p1\">](#csimplestringt__empty)</ept>|Forces a string to have a length of zero.|","pos":[2365,2456],"source":"|[CSimpleStringT::Empty](#csimplestringt__empty)|Forces a string to have a length of zero.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::FreeExtra<ept id=\"p1\">](#csimplestringt__freeextra)</ept>|Frees any extra memory previously allocated by the string object.|","pos":[2459,2582],"source":"|[CSimpleStringT::FreeExtra](#csimplestringt__freeextra)|Frees any extra memory previously allocated by the string object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetAllocLength<ept id=\"p1\">](#csimplestringt__getalloclength)</ept>|Retrieves the allocated length of a <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[2585,2713],"source":"|[CSimpleStringT::GetAllocLength](#csimplestringt__getalloclength)|Retrieves the allocated length of a `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetAt<ept id=\"p1\">](#csimplestringt__getat)</ept>|Returns the character at a given position.|","pos":[2716,2808],"source":"|[CSimpleStringT::GetAt](#csimplestringt__getat)|Returns the character at a given position.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetBuffer<ept id=\"p1\">](#csimplestringt__getbuffer)</ept>|Returns a pointer to the characters in a <ph id=\"ph2\">`CSimpleStringT`</ph>.|","pos":[2811,2927],"source":"|[CSimpleStringT::GetBuffer](#csimplestringt__getbuffer)|Returns a pointer to the characters in a `CSimpleStringT`.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetBufferSetLength<ept id=\"p1\">](#csimplestringt__getbuffersetlength)</ept>|Returns a pointer to the characters in a <ph id=\"ph2\">`CSimpleStringT`</ph>, truncating to the specified length.|","pos":[2930,3100],"source":"|[CSimpleStringT::GetBufferSetLength](#csimplestringt__getbuffersetlength)|Returns a pointer to the characters in a `CSimpleStringT`, truncating to the specified length.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetLength<ept id=\"p1\">](#csimplestringt__getlength)</ept>|Returns the number of characters in a <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[3103,3223],"source":"|[CSimpleStringT::GetLength](#csimplestringt__getlength)|Returns the number of characters in a `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetManager<ept id=\"p1\">](#csimplestringt__getmanager)</ept>|Retrieves the memory manager of the <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[3226,3346],"source":"|[CSimpleStringT::GetManager](#csimplestringt__getmanager)|Retrieves the memory manager of the `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetString<ept id=\"p1\">](#csimplestringt__getstring)</ept>|Retrieves the character string|","pos":[3349,3437],"source":"|[CSimpleStringT::GetString](#csimplestringt__getstring)|Retrieves the character string|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::IsEmpty<ept id=\"p1\">](#csimplestringt__isempty)</ept>|Tests whether a <ph id=\"ph2\">`CSimpleStringT`</ph> object contains no characters.|","pos":[3440,3557],"source":"|[CSimpleStringT::IsEmpty](#csimplestringt__isempty)|Tests whether a `CSimpleStringT` object contains no characters.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::LockBuffer<ept id=\"p1\">](#csimplestringt__lockbuffer)</ept>|Disables reference counting and protects the string in the buffer.|","pos":[3560,3686],"source":"|[CSimpleStringT::LockBuffer](#csimplestringt__lockbuffer)|Disables reference counting and protects the string in the buffer.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::Preallocate<ept id=\"p1\">](#csimplestringt__preallocate)</ept>|Allocates a specific amount of memory for the character buffer.|","pos":[3689,3814],"source":"|[CSimpleStringT::Preallocate](#csimplestringt__preallocate)|Allocates a specific amount of memory for the character buffer.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::ReleaseBuffer<ept id=\"p1\">](#csimplestringt__releasebuffer)</ept>|Releases control of the buffer returned by <ph id=\"ph2\">`GetBuffer`</ph>.|","pos":[3817,3938],"source":"|[CSimpleStringT::ReleaseBuffer](#csimplestringt__releasebuffer)|Releases control of the buffer returned by `GetBuffer`.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::ReleaseBufferSetLength<ept id=\"p1\">](#csimplestringt__releasebuffersetlength)</ept>|Releases control of the buffer returned by <ph id=\"ph2\">`GetBuffer`</ph>.|","pos":[3941,4080],"source":"|[CSimpleStringT::ReleaseBufferSetLength](#csimplestringt__releasebuffersetlength)|Releases control of the buffer returned by `GetBuffer`.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::SetAt<ept id=\"p1\">](#csimplestringt__setat)</ept>|Sets a character at a given position.|","pos":[4083,4170],"source":"|[CSimpleStringT::SetAt](#csimplestringt__setat)|Sets a character at a given position.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::SetManager<ept id=\"p1\">](#csimplestringt__setmanager)</ept>|Sets the memory manager of a <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[4173,4286],"source":"|[CSimpleStringT::SetManager](#csimplestringt__setmanager)|Sets the memory manager of a `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::SetString<ept id=\"p1\">](#csimplestringt__setstring)</ept>|Sets the string of a <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[4289,4392],"source":"|[CSimpleStringT::SetString](#csimplestringt__setstring)|Sets the string of a `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::StringLength<ept id=\"p1\">](#csimplestringt__stringlength)</ept>|Returns the number of characters in the specified string.|","pos":[4395,4516],"source":"|[CSimpleStringT::StringLength](#csimplestringt__stringlength)|Returns the number of characters in the specified string.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::Truncate<ept id=\"p1\">](#csimplestringt__truncate)</ept>|Truncates the string to a specified length.|","pos":[4519,4618],"source":"|[CSimpleStringT::Truncate](#csimplestringt__truncate)|Truncates the string to a specified length.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::UnlockBuffer<ept id=\"p1\">](#csimplestringt__unlockbuffer)</ept>|Enables reference counting and releases the string in the buffer.|","pos":[4621,4750],"source":"|[CSimpleStringT::UnlockBuffer](#csimplestringt__unlockbuffer)|Enables reference counting and releases the string in the buffer.|"},{"content":"<ph id=\"ph1\">=======\n</ph><ph id=\"ph2\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::Append<ept id=\"p1\">](#csimplestringt__append)</ept>|Appends a <ph id=\"ph3\">`CSimpleStringT`</ph> object to an existing <ph id=\"ph4\">`CSimpleStringT`</ph> object.|","pos":[4753,4886],"source":"=======\n|[CSimpleStringT::Append](#csimplestringt__append)|Appends a `CSimpleStringT` object to an existing `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::AppendChar<ept id=\"p1\">](#csimplestringt__appendchar)</ept>|Appends a character to an existing <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[4889,5008],"source":"|[CSimpleStringT::AppendChar](#csimplestringt__appendchar)|Appends a character to an existing `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::CopyChars<ept id=\"p1\">](#csimplestringt__copychars)</ept>|Copies a character or characters to another string.|","pos":[5011,5120],"source":"|[CSimpleStringT::CopyChars](#csimplestringt__copychars)|Copies a character or characters to another string.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::CopyCharsOverlapped<ept id=\"p1\">](#csimplestringt__copycharsoverlapped)</ept>|Copies a character or characters to another string in which the buffers overlap.|","pos":[5123,5281],"source":"|[CSimpleStringT::CopyCharsOverlapped](#csimplestringt__copycharsoverlapped)|Copies a character or characters to another string in which the buffers overlap.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::Empty<ept id=\"p1\">](#csimplestringt__empty)</ept>|Forces a string to have a length of zero.|","pos":[5284,5375],"source":"|[CSimpleStringT::Empty](#csimplestringt__empty)|Forces a string to have a length of zero.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::FreeExtra<ept id=\"p1\">](#csimplestringt__freeextra)</ept>|Frees any extra memory previously allocated by the string object.|","pos":[5378,5501],"source":"|[CSimpleStringT::FreeExtra](#csimplestringt__freeextra)|Frees any extra memory previously allocated by the string object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetAllocLength<ept id=\"p1\">](#csimplestringt__getalloclength)</ept>|Retrieves the allocated length of a <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[5504,5632],"source":"|[CSimpleStringT::GetAllocLength](#csimplestringt__getalloclength)|Retrieves the allocated length of a `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetAt<ept id=\"p1\">](#csimplestringt__getat)</ept>|Returns the character at a given position.|","pos":[5635,5727],"source":"|[CSimpleStringT::GetAt](#csimplestringt__getat)|Returns the character at a given position.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetBuffer<ept id=\"p1\">](#csimplestringt__getbuffer)</ept>|Returns a pointer to the characters in a <ph id=\"ph2\">`CSimpleStringT`</ph>.|","pos":[5730,5846],"source":"|[CSimpleStringT::GetBuffer](#csimplestringt__getbuffer)|Returns a pointer to the characters in a `CSimpleStringT`.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetBufferSetLength<ept id=\"p1\">](#csimplestringt__getbuffersetlength)</ept>|Returns a pointer to the characters in a <ph id=\"ph2\">`CSimpleStringT`</ph>, truncating to the specified length.|","pos":[5849,6019],"source":"|[CSimpleStringT::GetBufferSetLength](#csimplestringt__getbuffersetlength)|Returns a pointer to the characters in a `CSimpleStringT`, truncating to the specified length.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetLength<ept id=\"p1\">](#csimplestringt__getlength)</ept>|Returns the number of characters in a <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[6022,6142],"source":"|[CSimpleStringT::GetLength](#csimplestringt__getlength)|Returns the number of characters in a `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetManager<ept id=\"p1\">](#csimplestringt__getmanager)</ept>|Retrieves the memory manager of the <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[6145,6265],"source":"|[CSimpleStringT::GetManager](#csimplestringt__getmanager)|Retrieves the memory manager of the `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::GetString<ept id=\"p1\">](#csimplestringt__getstring)</ept>|Retrieves the character string|","pos":[6268,6356],"source":"|[CSimpleStringT::GetString](#csimplestringt__getstring)|Retrieves the character string|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::IsEmpty<ept id=\"p1\">](#csimplestringt__isempty)</ept>|Tests whether a <ph id=\"ph2\">`CSimpleStringT`</ph> object contains no characters.|","pos":[6359,6476],"source":"|[CSimpleStringT::IsEmpty](#csimplestringt__isempty)|Tests whether a `CSimpleStringT` object contains no characters.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::LockBuffer<ept id=\"p1\">](#csimplestringt__lockbuffer)</ept>|Disables reference counting and protects the string in the buffer.|","pos":[6479,6605],"source":"|[CSimpleStringT::LockBuffer](#csimplestringt__lockbuffer)|Disables reference counting and protects the string in the buffer.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::Preallocate<ept id=\"p1\">](#csimplestringt__preallocate)</ept>|Allocates a specific amount of memory for the character buffer.|","pos":[6608,6733],"source":"|[CSimpleStringT::Preallocate](#csimplestringt__preallocate)|Allocates a specific amount of memory for the character buffer.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::ReleaseBuffer<ept id=\"p1\">](#csimplestringt__releasebuffer)</ept>|Releases control of the buffer returned by <ph id=\"ph2\">`GetBuffer`</ph>.|","pos":[6736,6857],"source":"|[CSimpleStringT::ReleaseBuffer](#csimplestringt__releasebuffer)|Releases control of the buffer returned by `GetBuffer`.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::ReleaseBufferSetLength<ept id=\"p1\">](#csimplestringt__releasebuffersetlength)</ept>|Releases control of the buffer returned by <ph id=\"ph2\">`GetBuffer`</ph>.|","pos":[6860,6999],"source":"|[CSimpleStringT::ReleaseBufferSetLength](#csimplestringt__releasebuffersetlength)|Releases control of the buffer returned by `GetBuffer`.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::SetAt<ept id=\"p1\">](#csimplestringt__setat)</ept>|Sets a character at a given position.|","pos":[7002,7089],"source":"|[CSimpleStringT::SetAt](#csimplestringt__setat)|Sets a character at a given position.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::SetManager<ept id=\"p1\">](#csimplestringt__setmanager)</ept>|Sets the memory manager of a <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[7092,7205],"source":"|[CSimpleStringT::SetManager](#csimplestringt__setmanager)|Sets the memory manager of a `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::SetString<ept id=\"p1\">](#csimplestringt__setstring)</ept>|Sets the string of a <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[7208,7311],"source":"|[CSimpleStringT::SetString](#csimplestringt__setstring)|Sets the string of a `CSimpleStringT` object.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::StringLength<ept id=\"p1\">](#csimplestringt__stringlength)</ept>|Returns the number of characters in the specified string.|","pos":[7314,7435],"source":"|[CSimpleStringT::StringLength](#csimplestringt__stringlength)|Returns the number of characters in the specified string.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::Truncate<ept id=\"p1\">](#csimplestringt__truncate)</ept>|Truncates the string to a specified length.|","pos":[7438,7537],"source":"|[CSimpleStringT::Truncate](#csimplestringt__truncate)|Truncates the string to a specified length.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::UnlockBuffer<ept id=\"p1\">](#csimplestringt__unlockbuffer)</ept>|Enables reference counting and releases the string in the buffer.|","pos":[7540,7669],"source":"|[CSimpleStringT::UnlockBuffer](#csimplestringt__unlockbuffer)|Enables reference counting and releases the string in the buffer.|"},{"content":"master","pos":[7680,7686]},{"pos":[7694,7710],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[7717,7721]},{"content":"Description","pos":[7722,7733]},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::operator PCXSTR<ept id=\"p1\">](#csimplestringt__operator_pcxstr)</ept>|Directly accesses characters stored in a <ph id=\"ph2\">`CSimpleStringT`</ph> object as a C-style string.|","pos":[7771,7926],"source":"|[CSimpleStringT::operator PCXSTR](#csimplestringt__operator_pcxstr)|Directly accesses characters stored in a `CSimpleStringT` object as a C-style string.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::operator<ph id=\"ph2\">\\[</ph><ph id=\"ph3\">\\]</ph><ept id=\"p1\">](#csimplestringt__operator_at)</ept>|Returns the character at a given position — operator substitution for <ph id=\"ph4\">`GetAt`</ph>.|","pos":[7929,8070],"source":"|[CSimpleStringT::operator\\[\\]](#csimplestringt__operator_at)|Returns the character at a given position — operator substitution for `GetAt`.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::operator +=<ept id=\"p1\">](#csimplestringt__operator_add_eq)</ept>|Concatenates a new string to the end of an existing string.|","pos":[8073,8198],"source":"|[CSimpleStringT::operator +=](#csimplestringt__operator_add_eq)|Concatenates a new string to the end of an existing string.|"},{"content":"<ph id=\"ph1\">|</ph><bpt id=\"p1\">[</bpt>CSimpleStringT::operator =<ept id=\"p1\">](#csimplestringt__operator_eq)</ept>|Assigns a new value to a <ph id=\"ph2\">`CSimpleStringT`</ph> object.|","pos":[8201,8311],"source":"|[CSimpleStringT::operator =](#csimplestringt__operator_eq)|Assigns a new value to a `CSimpleStringT` object.|"},{"pos":[8321,8328],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CSimpleStringT`</ph> is the base class for the various string classes supported by Visual C++.","pos":[8332,8422],"source":"`CSimpleStringT` is the base class for the various string classes supported by Visual C++."},{"content":"It provides minimal support for memory management of the string object and basic buffer manipulation.","pos":[8423,8524]},{"content":"For more advanced string objects, see <bpt id=\"p1\">[</bpt>CStringT Class<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>.","pos":[8525,8630],"source":" For more advanced string objects, see [CStringT Class](../../atl-mfc-shared/reference/cstringt-class.md)."},{"pos":[8640,8652],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[8656,8680],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[8688,8748],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__append\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> CSimpleStringT::Append","linkify":"<a name=\"csimplestringt__append\"></a> CSimpleStringT::Append","source":"<a name=\"csimplestringt__append\"></a> CSimpleStringT::Append"},{"pos":[8749,8822],"content":"Appends a <ph id=\"ph1\">`CSimpleStringT`</ph> object to an existing <ph id=\"ph2\">`CSimpleStringT`</ph> object.","source":"Appends a `CSimpleStringT` object to an existing `CSimpleStringT` object."},{"pos":[8832,8838],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[8979,8989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`CSimpleStringT`</ph> object to be appended.","pos":[9005,9048],"source":" The `CSimpleStringT` object to be appended."},{"content":"A pointer to a string containing the characters to be appended.","pos":[9067,9130]},{"content":"The number of characters to append.","pos":[9150,9185]},{"pos":[9195,9202],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9206,9304],"content":"Call this method to append an existing <ph id=\"ph1\">`CSimpleStringT`</ph> object to another <ph id=\"ph2\">`CSimpleStringT`</ph> object.","source":"Call this method to append an existing `CSimpleStringT` object to another `CSimpleStringT` object."},{"pos":[9313,9320],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9324,9395],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::Append`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::Append`."},{"pos":[9612,9624],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[9628,9652],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[9662,9730],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__appendchar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> CSimpleStringT::AppendChar","linkify":"<a name=\"csimplestringt__appendchar\"></a> CSimpleStringT::AppendChar","source":"<a name=\"csimplestringt__appendchar\"></a> CSimpleStringT::AppendChar"},{"pos":[9731,9790],"content":"Appends a character to an existing <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Appends a character to an existing `CSimpleStringT` object."},{"pos":[9800,9806],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[9858,9868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>ch<ept id=\"p1\">*</ept>","pos":[9872,9876],"source":"*ch*"},{"content":"The character to be appended","pos":[9880,9908]},{"pos":[9918,9925],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9929,10032],"content":"Call this function to append the specified character to the end of an existing <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Call this function to append the specified character to the end of an existing `CSimpleStringT` object."},{"pos":[10042,10054],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[10058,10082],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[10090,10156],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__copychars\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> CSimpleStringT::CopyChars","linkify":"<a name=\"csimplestringt__copychars\"></a> CSimpleStringT::CopyChars","source":"<a name=\"csimplestringt__copychars\"></a> CSimpleStringT::CopyChars"},{"pos":[10160,10222],"content":"Copies a character or characters to a <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Copies a character or characters to a `CSimpleStringT` object."},{"pos":[10232,10238],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[10346,10356],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a character string.","pos":[10373,10405]},{"content":"A pointer to a string containing the characters to be copied.","pos":[10424,10485]},{"content":"The number of <ph id=\"ph1\">`pchSrc`</ph> characters to be copied.","pos":[10504,10551],"source":" The number of `pchSrc` characters to be copied."},{"pos":[10561,10568],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10572,10646],"content":"Call this method to copy characters from <ph id=\"ph1\">`pchSrc`</ph> to the <ph id=\"ph2\">`pchDest`</ph> string.","source":"Call this method to copy characters from `pchSrc` to the `pchDest` string."},{"pos":[10655,10662],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10666,10740],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::CopyChars`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::CopyChars`."},{"pos":[10962,10974],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[10978,11002],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[11012,11099],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__copycharsoverlapped\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::CopyCharsOverlapped","linkify":"<a name=\"csimplestringt__copycharsoverlapped\"></a>  CSimpleStringT::CopyCharsOverlapped","source":"<a name=\"csimplestringt__copycharsoverlapped\"></a>  CSimpleStringT::CopyCharsOverlapped"},{"pos":[11100,11162],"content":"Copies a character or characters to a <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Copies a character or characters to a `CSimpleStringT` object."},{"pos":[11172,11178],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[11297,11307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a character string.","pos":[11324,11356]},{"content":"A pointer to a string containing the characters to be copied.","pos":[11375,11436]},{"content":"The number of <ph id=\"ph1\">`pchSrc`</ph> characters to be copied.","pos":[11455,11502],"source":" The number of `pchSrc` characters to be copied."},{"pos":[11512,11519],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to copy characters from <ph id=\"ph1\">`pchSrc`</ph> to the <ph id=\"ph2\">`pchDest`</ph> string.","pos":[11523,11597],"source":"Call this method to copy characters from `pchSrc` to the `pchDest` string."},{"content":"Unlike <ph id=\"ph1\">`CopyChars`</ph>, <ph id=\"ph2\">`CopyCharsOverlapped`</ph> provides a safe method for copying from character buffers that might be overlapped.","pos":[11598,11723],"source":" Unlike `CopyChars`, `CopyCharsOverlapped` provides a safe method for copying from character buffers that might be overlapped."},{"pos":[11732,11739],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11743,11897],"content":"See the example for <bpt id=\"p1\">[</bpt>CSimpleStringT::CopyChars<ept id=\"p1\">](#csimplestringt__copychars)</ept>, or the source code for <ph id=\"ph1\">`CSimpleStringT::SetString`</ph> (located in atlsimpstr.h).","source":"See the example for [CSimpleStringT::CopyChars](#csimplestringt__copychars), or the source code for `CSimpleStringT::SetString` (located in atlsimpstr.h)."},{"pos":[11907,11919],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[11923,11947],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[11955,12022],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::CSimpleStringT","linkify":"<a name=\"csimplestringt__ctor\"></a>  CSimpleStringT::CSimpleStringT","source":"<a name=\"csimplestringt__ctor\"></a>  CSimpleStringT::CSimpleStringT"},{"pos":[12026,12063],"content":"Constructs a <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Constructs a `CSimpleStringT` object."},{"pos":[12073,12079],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[12354,12364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An existing <ph id=\"ph1\">`CSimpleStringT`</ph> object to be copied into this <ph id=\"ph2\">`CSimpleStringT`</ph> object.","pos":[12380,12463],"source":" An existing `CSimpleStringT` object to be copied into this `CSimpleStringT` object."},{"content":"A pointer to an array of characters of length <ph id=\"ph1\">`nLength`</ph>, not null terminated.","pos":[12482,12559],"source":" A pointer to an array of characters of length `nLength`, not null terminated."},{"content":"A null-terminated string to be copied into this <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[12578,12650],"source":" A null-terminated string to be copied into this `CSimpleStringT` object."},{"content":"A count of the number of characters in <ph id=\"ph1\">`pch`</ph>.","pos":[12670,12715],"source":" A count of the number of characters in `pch`."},{"content":"A pointer to the memory manager of the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[12738,12801],"source":" A pointer to the memory manager of the `CSimpleStringT` object."},{"content":"For more information about <ph id=\"ph1\">`IAtlStringMgr`</ph> and memory management for <ph id=\"ph2\">`CSimpleStringT`</ph>, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../memory-management-with-cstringt.md)</ept>.","pos":[12802,12965],"source":" For more information about `IAtlStringMgr` and memory management for `CSimpleStringT`, see [Memory Management and CStringT](../memory-management-with-cstringt.md)."},{"pos":[12975,12982],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Construct a new <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[12986,13026],"source":"Construct a new `CSimpleStringT` object."},{"content":"Because the constructors copy the input data into new allocated storage, memory exceptions may result.","pos":[13027,13129]},{"pos":[13138,13145],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::CSimpleStringT`</ph> by using the ATL <ph id=\"ph2\">`typedef``CSimpleString`</ph>.","pos":[13149,13270],"source":"The following example demonstrates the use of `CSimpleStringT::CSimpleStringT` by using the ATL `typedef``CSimpleString`."},{"content":"<ph id=\"ph1\">`CSimpleString`</ph> is a commonly used specialization of the class template <ph id=\"ph2\">`CSimpleStringT`</ph>.","pos":[13271,13360],"source":"`CSimpleString` is a commonly used specialization of the class template `CSimpleStringT`."},{"pos":[13708,13720],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[13724,13748],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[13757,13816],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__empty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::Empty","linkify":"<a name=\"csimplestringt__empty\"></a>  CSimpleStringT::Empty","source":"<a name=\"csimplestringt__empty\"></a>  CSimpleStringT::Empty"},{"pos":[13817,13900],"content":"Makes this <ph id=\"ph1\">`CSimpleStringT`</ph> object an empty string and frees memory as appropriate.","source":"Makes this `CSimpleStringT` object an empty string and frees memory as appropriate."},{"pos":[13910,13916],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[13965,13972],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13976,14072],"content":"For more information, see <bpt id=\"p1\">[</bpt>Strings: CString Exception Cleanup<ept id=\"p1\">](../cstring-exception-cleanup.md)</ept>.","source":"For more information, see [Strings: CString Exception Cleanup](../cstring-exception-cleanup.md)."},{"pos":[14081,14088],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14092,14162],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::Empty`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::Empty`."},{"pos":[14238,14250],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[14254,14278],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[14290,14357],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__freeextra\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::FreeExtra","linkify":"<a name=\"csimplestringt__freeextra\"></a>  CSimpleStringT::FreeExtra","source":"<a name=\"csimplestringt__freeextra\"></a>  CSimpleStringT::FreeExtra"},{"content":"Frees any extra memory previously allocated by the string but no longer needed.","pos":[14358,14437]},{"pos":[14447,14453],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[14495,14502],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This should reduce the memory overhead consumed by the string object.","pos":[14506,14575]},{"content":"The method reallocates the buffer to the exact length returned by <bpt id=\"p1\">[</bpt>GetLength<ept id=\"p1\">](#csimplestringt__getlength)</ept>.","pos":[14576,14682],"source":" The method reallocates the buffer to the exact length returned by [GetLength](#csimplestringt__getlength)."},{"pos":[14691,14698],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15498,15505],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The output from this example is as follows:","pos":[15509,15552]},{"pos":[15712,15724],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[15728,15752],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[15760,15837],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__getalloclength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::GetAllocLength","linkify":"<a name=\"csimplestringt__getalloclength\"></a>  CSimpleStringT::GetAllocLength","source":"<a name=\"csimplestringt__getalloclength\"></a>  CSimpleStringT::GetAllocLength"},{"pos":[15840,15900],"content":"Retrieves the allocated length of a <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Retrieves the allocated length of a `CSimpleStringT` object."},{"pos":[15910,15916],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[15979,15991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of characters allocated for this object.","pos":[15995,16046]},{"pos":[16056,16063],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to determine the number of characters allocated for this <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[16067,16165],"source":"Call this method to determine the number of characters allocated for this `CSimpleStringT` object."},{"content":"See <bpt id=\"p1\">[</bpt>FreeExtra<ept id=\"p1\">](#csimplestringt__freeextra)</ept> for an example of calling this function.","pos":[16166,16250],"source":" See [FreeExtra](#csimplestringt__freeextra) for an example of calling this function."},{"pos":[16260,16272],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[16276,16300],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[16311,16370],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__getat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::GetAt","linkify":"<a name=\"csimplestringt__getat\"></a>  CSimpleStringT::GetAt","source":"<a name=\"csimplestringt__getat\"></a>  CSimpleStringT::GetAt"},{"pos":[16373,16426],"content":"Returns one character from a <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Returns one character from a `CSimpleStringT` object."},{"pos":[16436,16442],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[16500,16510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Zero-based index of the character in the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[16525,16590],"source":" Zero-based index of the character in the `CSimpleStringT` object."},{"content":"The <ph id=\"ph1\">`iChar`</ph> parameter must be greater than or equal to 0 and less than the value returned by <bpt id=\"p1\">[</bpt>GetLength<ept id=\"p1\">](#csimplestringt__getlength)</ept>.","pos":[16591,16724],"source":" The `iChar` parameter must be greater than or equal to 0 and less than the value returned by [GetLength](#csimplestringt__getlength)."},{"content":"Otherwise, <ph id=\"ph1\">`GetAt`</ph> will generate an exception.","pos":[16725,16771],"source":" Otherwise, `GetAt` will generate an exception."},{"pos":[16781,16793],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16797,16876],"content":"An <ph id=\"ph1\">`XCHAR`</ph> that contains the character at the specified position in the string.","source":"An `XCHAR` that contains the character at the specified position in the string."},{"pos":[16886,16893],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to return the one character specified by <ph id=\"ph1\">`iChar`</ph>.","pos":[16897,16963],"source":"Call this method to return the one character specified by `iChar`."},{"content":"The overloaded subscript (<ph id=\"ph1\">`[]`</ph>) operator is a convenient alias for <ph id=\"ph2\">`GetAt`</ph>.","pos":[16964,17039],"source":" The overloaded subscript (`[]`) operator is a convenient alias for `GetAt`."},{"content":"The null terminator is addressable without generating an exception by using <ph id=\"ph1\">`GetAt`</ph>.","pos":[17040,17124],"source":" The null terminator is addressable without generating an exception by using `GetAt`."},{"content":"However, it is not counted by <ph id=\"ph1\">`GetLength`</ph>, and the value returned is 0.","pos":[17125,17196],"source":" However, it is not counted by `GetLength`, and the value returned is 0."},{"pos":[17205,17212],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17216,17286],"content":"The following example demonstrates how to use <ph id=\"ph1\">`CSimpleStringT::GetAt`</ph>.","source":"The following example demonstrates how to use `CSimpleStringT::GetAt`."},{"pos":[17383,17395],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[17399,17423],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[17433,17500],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__getbuffer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::GetBuffer","linkify":"<a name=\"csimplestringt__getbuffer\"></a>  CSimpleStringT::GetBuffer","source":"<a name=\"csimplestringt__getbuffer\"></a>  CSimpleStringT::GetBuffer"},{"pos":[17503,17586],"content":"Returns a pointer to the internal character buffer for the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Returns a pointer to the internal character buffer for the `CSimpleStringT` object."},{"pos":[17596,17602],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[17687,17697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The minimum number of characters that the character buffer can hold.","pos":[17723,17791]},{"content":"This value does not include space for a null terminator.","pos":[17792,17848]},{"content":"If <ph id=\"ph1\">`nMinBufferLength`</ph> is larger than the length of the current buffer, <ph id=\"ph2\">`GetBuffer`</ph> destroys the current buffer, replaces it with a buffer of the requested size, and resets the object reference count to zero.","pos":[17855,18062],"source":"If `nMinBufferLength` is larger than the length of the current buffer, `GetBuffer` destroys the current buffer, replaces it with a buffer of the requested size, and resets the object reference count to zero."},{"content":"If you have previously called <bpt id=\"p1\">[</bpt>LockBuffer<ept id=\"p1\">](#csimplestringt__lockbuffer)</ept> on this buffer, you lose the buffer lock.","pos":[18063,18176],"source":" If you have previously called [LockBuffer](#csimplestringt__lockbuffer) on this buffer, you lose the buffer lock."},{"pos":[18186,18198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18202,18272],"content":"An <ph id=\"ph1\">`PXSTR`</ph> pointer to the object's (null-terminated) character buffer.","source":"An `PXSTR` pointer to the object's (null-terminated) character buffer."},{"pos":[18282,18289],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to return the buffer contents of the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[18293,18371],"source":"Call this method to return the buffer contents of the `CSimpleStringT` object."},{"content":"The returned <ph id=\"ph1\">`PXSTR`</ph> is not a constant and therefore allows direct modification of <ph id=\"ph2\">`CSimpleStringT`</ph> contents.","pos":[18372,18481],"source":" The returned `PXSTR` is not a constant and therefore allows direct modification of `CSimpleStringT` contents."},{"pos":[18488,18685],"content":"If you use the pointer returned by <ph id=\"ph1\">`GetBuffer`</ph> to change the string contents, you must call <bpt id=\"p1\">[</bpt>ReleaseBuffer<ept id=\"p1\">](#csimplestringt__releasebuffer)</ept> before you use any other <ph id=\"ph2\">`CSimpleStringT`</ph> member methods.","source":"If you use the pointer returned by `GetBuffer` to change the string contents, you must call [ReleaseBuffer](#csimplestringt__releasebuffer) before you use any other `CSimpleStringT` member methods."},{"content":"The address returned by <ph id=\"ph1\">`GetBuffer`</ph> may not be valid after the call to <ph id=\"ph2\">`ReleaseBuffer`</ph> because additional <ph id=\"ph3\">`CSimpleStringT`</ph> operations can cause the <ph id=\"ph4\">`CSimpleStringT`</ph> buffer to be reallocated.","pos":[18692,18882],"source":"The address returned by `GetBuffer` may not be valid after the call to `ReleaseBuffer` because additional `CSimpleStringT` operations can cause the `CSimpleStringT` buffer to be reallocated."},{"content":"The buffer is not reallocated if you do not change the length of the <ph id=\"ph1\">`CSimpleStringT`</ph>.","pos":[18883,18969],"source":" The buffer is not reallocated if you do not change the length of the `CSimpleStringT`."},{"pos":[18976,19063],"content":"The buffer memory is automatically freed when the <ph id=\"ph1\">`CSimpleStringT`</ph> object is destroyed.","source":"The buffer memory is automatically freed when the `CSimpleStringT` object is destroyed."},{"content":"If you keep track of the string length yourself, you should not append the terminating null character.","pos":[19070,19172]},{"content":"However, you must specify the final string length when you release the buffer with <ph id=\"ph1\">`ReleaseBuffer`</ph>.","pos":[19173,19272],"source":" However, you must specify the final string length when you release the buffer with `ReleaseBuffer`."},{"content":"If you do append a terminating null character, you should pass –1 (the default) for the length.","pos":[19273,19368]},{"content":"<ph id=\"ph1\">`ReleaseBuffer`</ph> then determines the buffer length.","pos":[19369,19419],"source":"`ReleaseBuffer` then determines the buffer length."},{"pos":[19426,19533],"content":"If there is insufficient memory to satisfy the <ph id=\"ph1\">`GetBuffer`</ph> request, this method throws a CMemoryException*.","source":"If there is insufficient memory to satisfy the `GetBuffer` request, this method throws a CMemoryException*."},{"pos":[19542,19549],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19834,19846],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[19850,19874],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[19884,19969],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__getbuffersetlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::GetBufferSetLength","linkify":"<a name=\"csimplestringt__getbuffersetlength\"></a>  CSimpleStringT::GetBufferSetLength","source":"<a name=\"csimplestringt__getbuffersetlength\"></a>  CSimpleStringT::GetBufferSetLength"},{"pos":[19972,20153],"content":"Returns a pointer to the internal character buffer for the <ph id=\"ph1\">`CSimpleStringT`</ph> object, truncating or growing its length if necessary to exactly match the length specified in <ph id=\"ph2\">`nLength`</ph>.","source":"Returns a pointer to the internal character buffer for the `CSimpleStringT` object, truncating or growing its length if necessary to exactly match the length specified in `nLength`."},{"pos":[20163,20169],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[20233,20243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The exact size of the <ph id=\"ph1\">`CSimpleStringT`</ph> character buffer in characters.","pos":[20260,20330],"source":" The exact size of the `CSimpleStringT` character buffer in characters."},{"pos":[20340,20352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20356,20425],"content":"A <ph id=\"ph1\">`PXSTR`</ph> pointer to the object's (null-terminated) character buffer.","source":"A `PXSTR` pointer to the object's (null-terminated) character buffer."},{"pos":[20435,20442],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to retrieve a specified length of the internal buffer of the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[20446,20548],"source":"Call this method to retrieve a specified length of the internal buffer of the `CSimpleStringT` object."},{"content":"The returned <ph id=\"ph1\">`PXSTR`</ph> pointer is not <ph id=\"ph2\">`const`</ph> and thus allows direct modification of <ph id=\"ph3\">`CSimpleStringT`</ph> contents.","pos":[20549,20658],"source":" The returned `PXSTR` pointer is not `const` and thus allows direct modification of `CSimpleStringT` contents."},{"pos":[20665,20909],"content":"If you use the pointer returned by <bpt id=\"p1\">[</bpt>GetBufferSetLength<ept id=\"p1\">](#csimplestringt__getbuffersetlength)</ept> to change the string contents, call <ph id=\"ph1\">`ReleaseBuffer`</ph> to update the internal state of <ph id=\"ph2\">`CsimpleStringT`</ph> before you use any other <ph id=\"ph3\">`CSimpleStringT`</ph> methods.","source":"If you use the pointer returned by [GetBufferSetLength](#csimplestringt__getbuffersetlength) to change the string contents, call `ReleaseBuffer` to update the internal state of `CsimpleStringT` before you use any other `CSimpleStringT` methods."},{"content":"The address returned by <ph id=\"ph1\">`GetBufferSetLength`</ph> may not be valid after the call to <ph id=\"ph2\">`ReleaseBuffer`</ph> because additional <ph id=\"ph3\">`CSimpleStringT`</ph> operations can cause the <ph id=\"ph4\">`CSimpleStringT`</ph> buffer to be reallocated.","pos":[20916,21115],"source":"The address returned by `GetBufferSetLength` may not be valid after the call to `ReleaseBuffer` because additional `CSimpleStringT` operations can cause the `CSimpleStringT` buffer to be reallocated."},{"content":"The buffer is not reassigned if you do not change the length of the <ph id=\"ph1\">`CSimpleStringT`</ph>.","pos":[21116,21201],"source":" The buffer is not reassigned if you do not change the length of the `CSimpleStringT`."},{"pos":[21208,21295],"content":"The buffer memory is automatically freed when the <ph id=\"ph1\">`CSimpleStringT`</ph> object is destroyed.","source":"The buffer memory is automatically freed when the `CSimpleStringT` object is destroyed."},{"content":"If you keep track of the string length yourself, do not not append the terminating null character.","pos":[21302,21400]},{"content":"You must specify the final string length when you release the buffer by using <ph id=\"ph1\">`ReleaseBuffer`</ph>.","pos":[21401,21495],"source":" You must specify the final string length when you release the buffer by using `ReleaseBuffer`."},{"content":"If you do append a terminating null character when you call <ph id=\"ph1\">`ReleaseBuffer`</ph>, pass –1 (the default) for the length to <ph id=\"ph2\">`ReleaseBuffer`</ph>, and <ph id=\"ph3\">`ReleaseBuffer`</ph> will perform a <ph id=\"ph4\">`strlen`</ph> on the buffer to determine its length.","pos":[21496,21712],"source":" If you do append a terminating null character when you call `ReleaseBuffer`, pass –1 (the default) for the length to `ReleaseBuffer`, and `ReleaseBuffer` will perform a `strlen` on the buffer to determine its length."},{"content":"For more information about reference counting, see the following articles:","pos":[21719,21793]},{"pos":[21803,21937],"content":"<bpt id=\"p1\">[</bpt>Managing Object Lifetimes through Reference Counting<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms687260)</ept> in the Windows SDK.","source":"[Managing Object Lifetimes through Reference Counting](http://msdn.microsoft.com/library/windows/desktop/ms687260) in the Windows SDK."},{"pos":[21946,22059],"content":"<bpt id=\"p1\">[</bpt>Implementing Reference Counting<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms693431)</ept> in the Windows SDK.","source":"[Implementing Reference Counting](http://msdn.microsoft.com/library/windows/desktop/ms693431) in the Windows SDK."},{"pos":[22067,22184],"content":"<bpt id=\"p1\">[</bpt>Rules for Managing Reference Counts<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692481)</ept> in the Windows SDK.","source":"[Rules for Managing Reference Counts](http://msdn.microsoft.com/library/windows/desktop/ms692481) in the Windows SDK."},{"pos":[22193,22200],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22204,22287],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::GetBufferSetLength`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::GetBufferSetLength`."},{"pos":[22630,22642],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[22646,22670],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[22681,22748],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__getlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::GetLength","linkify":"<a name=\"csimplestringt__getlength\"></a>  CSimpleStringT::GetLength","source":"<a name=\"csimplestringt__getlength\"></a>  CSimpleStringT::GetLength"},{"pos":[22751,22815],"content":"Returns the number of characters in the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Returns the number of characters in the `CSimpleStringT` object."},{"pos":[22825,22831],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[22889,22901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A count of the characters in the string.","pos":[22905,22945]},{"pos":[22955,22962],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to return the number of characters in the object.","pos":[22966,23032]},{"content":"The count does not include a null terminator.","pos":[23033,23078]},{"content":"For multibyte character sets (MBCS), <ph id=\"ph1\">`GetLength`</ph> counts each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two bytes.","pos":[23085,23246],"source":"For multibyte character sets (MBCS), `GetLength` counts each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two bytes."},{"content":"See <bpt id=\"p1\">[</bpt>FreeExtra<ept id=\"p1\">](#csimplestringt__freeextra)</ept> for an example of calling this function.","pos":[23247,23331],"source":" See [FreeExtra](#csimplestringt__freeextra) for an example of calling this function."},{"pos":[23341,23353],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[23357,23381],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[23392,23461],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__getmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::GetManager","linkify":"<a name=\"csimplestringt__getmanager\"></a>  CSimpleStringT::GetManager","source":"<a name=\"csimplestringt__getmanager\"></a>  CSimpleStringT::GetManager"},{"pos":[23464,23524],"content":"Retrieves the memory manager of the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Retrieves the memory manager of the `CSimpleStringT` object."},{"pos":[23534,23540],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[23610,23622],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23626,23690],"content":"A pointer to the memory manager for the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"A pointer to the memory manager for the `CSimpleStringT` object."},{"pos":[23700,23707],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to retrieve the memory manager used by the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[23711,23795],"source":"Call this method to retrieve the memory manager used by the `CSimpleStringT` object."},{"content":"For more information on memory managers and string objects, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../memory-management-with-cstringt.md)</ept>.","pos":[23796,23932],"source":" For more information on memory managers and string objects, see [Memory Management and CStringT](../memory-management-with-cstringt.md)."},{"pos":[23942,23954],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[23958,23982],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[23991,24058],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__getstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::GetString","linkify":"<a name=\"csimplestringt__getstring\"></a>  CSimpleStringT::GetString","source":"<a name=\"csimplestringt__getstring\"></a>  CSimpleStringT::GetString"},{"content":"Retrieves the character string.","pos":[24059,24090]},{"pos":[24100,24106],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[24164,24176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to a null-terminated character string.","pos":[24180,24228]},{"pos":[24238,24245],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24249,24343],"content":"Call this method to retrieve the character string associated with the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Call this method to retrieve the character string associated with the `CSimpleStringT` object."},{"pos":[24351,24471],"content":"[!NOTE]\n The returned `PCXSTR` pointer is `const` and does not allow direct modification of `CSimpleStringT` contents.","leadings":["","> "],"nodes":[{"content":"The returned <ph id=\"ph1\">`PCXSTR`</ph> pointer is <ph id=\"ph2\">`const`</ph> and does not allow direct modification of <ph id=\"ph3\">`CSimpleStringT`</ph> contents.","pos":[9,118],"source":" The returned `PCXSTR` pointer is `const` and does not allow direct modification of `CSimpleStringT` contents."}]},{"pos":[24480,24487],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24491,24565],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::GetString`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::GetString`."},{"pos":[24690,24702],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[24706,24730],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[24739,24802],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__isempty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::IsEmpty","linkify":"<a name=\"csimplestringt__isempty\"></a>  CSimpleStringT::IsEmpty","source":"<a name=\"csimplestringt__isempty\"></a>  CSimpleStringT::IsEmpty"},{"pos":[24805,24861],"content":"Tests a <ph id=\"ph1\">`CSimpleStringT`</ph> object for the empty condition.","source":"Tests a `CSimpleStringT` object for the empty condition."},{"pos":[24871,24877],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[24934,24946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24950,25032],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">`CSimpleStringT`</ph> object has 0 length; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"Returns **true** if the `CSimpleStringT` object has 0 length; otherwise **false**."},{"pos":[25042,25049],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to determine if the object contains an empty string.","pos":[25053,25122]},{"pos":[25131,25138],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25142,25214],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::IsEmpty`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::IsEmpty`."},{"pos":[25287,25299],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[25303,25327],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[25337,25406],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__lockbuffer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::LockBuffer","linkify":"<a name=\"csimplestringt__lockbuffer\"></a>  CSimpleStringT::LockBuffer","source":"<a name=\"csimplestringt__lockbuffer\"></a>  CSimpleStringT::LockBuffer"},{"content":"Disables reference counting and protects the string in the buffer.","pos":[25409,25475]},{"pos":[25485,25491],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[25535,25547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25551,25618],"content":"A pointer to a <ph id=\"ph1\">`CSimpleStringT`</ph> object or a null-terminated string.","source":"A pointer to a `CSimpleStringT` object or a null-terminated string."},{"pos":[25628,25635],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to lock the buffer of the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[25639,25706],"source":"Call this method to lock the buffer of the `CSimpleStringT` object."},{"content":"By calling <ph id=\"ph1\">`LockBuffer`</ph>, you create a copy of the string, with a –1 for the reference count.","pos":[25707,25799],"source":" By calling `LockBuffer`, you create a copy of the string, with a –1 for the reference count."},{"content":"When the reference count value is -1, the string in the buffer is considered to be in a \"locked\" state.","pos":[25800,25903]},{"content":"While in a locked state, the string is protected in two ways:","pos":[25904,25965]},{"content":"No other string can get a reference to the data in the locked string, even if that string is assigned to the locked string.","pos":[25975,26098]},{"content":"The locked string will never reference another string, even if that other string is copied to the locked string.","pos":[26108,26220]},{"content":"By locking the string in the buffer, you ensure that the string's exclusive hold on the buffer will remain intact.","pos":[26227,26341]},{"pos":[26348,26476],"content":"After you have finished with <ph id=\"ph1\">`LockBuffer`</ph>, call <bpt id=\"p1\">[</bpt>UnlockBuffer<ept id=\"p1\">](#csimplestringt__unlockbuffer)</ept> to reset the reference count to 1.","source":"After you have finished with `LockBuffer`, call [UnlockBuffer](#csimplestringt__unlockbuffer) to reset the reference count to 1."},{"pos":[26484,26848],"content":"[!NOTE]\n If you call [GetBuffer](#csimplestringt__getbuffer) on a locked buffer and you set the `GetBuffer` parameter `nMinBufferLength` to greater than the length of the current buffer, you will lose the buffer lock. Such a call to `GetBuffer` destroys the current buffer, replaces it with a buffer of the requested size, and resets the reference count to zero.","leadings":["","> "],"nodes":[{"content":" If you call [GetBuffer](#csimplestringt__getbuffer) on a locked buffer and you set the `GetBuffer` parameter `nMinBufferLength` to greater than the length of the current buffer, you will lose the buffer lock. Such a call to `GetBuffer` destroys the current buffer, replaces it with a buffer of the requested size, and resets the reference count to zero.","pos":[8,362],"nodes":[{"content":"If you call <bpt id=\"p1\">[</bpt>GetBuffer<ept id=\"p1\">](#csimplestringt__getbuffer)</ept> on a locked buffer and you set the <ph id=\"ph1\">`GetBuffer`</ph> parameter <ph id=\"ph2\">`nMinBufferLength`</ph> to greater than the length of the current buffer, you will lose the buffer lock.","pos":[1,209],"source":" If you call [GetBuffer](#csimplestringt__getbuffer) on a locked buffer and you set the `GetBuffer` parameter `nMinBufferLength` to greater than the length of the current buffer, you will lose the buffer lock."},{"content":"Such a call to <ph id=\"ph1\">`GetBuffer`</ph> destroys the current buffer, replaces it with a buffer of the requested size, and resets the reference count to zero.","pos":[210,354],"source":" Such a call to `GetBuffer` destroys the current buffer, replaces it with a buffer of the requested size, and resets the reference count to zero."}]}]},{"content":"For more information about reference counting, see the following articles:","pos":[26855,26929]},{"pos":[26939,27072],"content":"<bpt id=\"p1\">[</bpt>Managing Object Lifetimes through Reference Counting<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms687260)</ept> in the Windows SDK","source":"[Managing Object Lifetimes through Reference Counting](http://msdn.microsoft.com/library/windows/desktop/ms687260) in the Windows SDK"},{"pos":[27082,27194],"content":"<bpt id=\"p1\">[</bpt>Implementing Reference Counting<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms693431)</ept> in the Windows SDK","source":"[Implementing Reference Counting](http://msdn.microsoft.com/library/windows/desktop/ms693431) in the Windows SDK"},{"pos":[27204,27320],"content":"<bpt id=\"p1\">[</bpt>Rules for Managing Reference Counts<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692481)</ept> in the Windows SDK","source":"[Rules for Managing Reference Counts](http://msdn.microsoft.com/library/windows/desktop/ms692481) in the Windows SDK"},{"pos":[27329,27336],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27340,27415],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::LockBuffer`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::LockBuffer`."},{"pos":[27573,27585],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[27589,27613],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[27623,27694],"content":"<bpt id=\"p1\">&lt;a name=\"simplestringt__operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::operator<ph id=\"ph1\">\\[</ph><ph id=\"ph2\">\\]</ph>","linkify":"<a name=\"simplestringt__operator_at\"></a>  CSimpleStringT::operator\\[\\]","source":"<a name=\"simplestringt__operator_at\"></a>  CSimpleStringT::operator\\[\\]"},{"content":"Call this function to access a single character of the character array.","pos":[27697,27768]},{"pos":[27778,27784],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[27847,27857],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Zero-based index of a character in the string.","pos":[27872,27918]},{"pos":[27928,27935],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The overloaded subscript (<ph id=\"ph1\">`[]`</ph>) operator returns a single character specified by the zero-based index in <ph id=\"ph2\">`iChar`</ph>.","pos":[27939,28052],"source":"The overloaded subscript (`[]`) operator returns a single character specified by the zero-based index in `iChar`."},{"content":"This operator is a convenient substitute for the <bpt id=\"p1\">[</bpt>GetAt<ept id=\"p1\">](#csimplestringt__getat)</ept> member function.","pos":[28053,28150],"source":" This operator is a convenient substitute for the [GetAt](#csimplestringt__getat) member function."},{"pos":[28158,28345],"content":"[!NOTE]\n You can use the subscript (`[]`) operator to get the value of a character in a `CSimpleStringT`, but you cannot use it to change the value of a character in a `CSimpleStringT`.","leadings":["","> "],"nodes":[{"content":"You can use the subscript (<ph id=\"ph1\">`[]`</ph>) operator to get the value of a character in a <ph id=\"ph2\">`CSimpleStringT`</ph>, but you cannot use it to change the value of a character in a <ph id=\"ph3\">`CSimpleStringT`</ph>.","pos":[9,185],"source":" You can use the subscript (`[]`) operator to get the value of a character in a `CSimpleStringT`, but you cannot use it to change the value of a character in a `CSimpleStringT`."}]},{"pos":[28354,28361],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28365,28443],"content":"The following example demonstrates the use of <bpt id=\"p1\">**</bpt>CSimpleStringT::operator []<ept id=\"p1\">**</ept>.","source":"The following example demonstrates the use of **CSimpleStringT::operator []**."},{"pos":[28529,28541],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[28545,28569],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[28576,28649],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::operator <ph id=\"ph1\">\\[</ph><ph id=\"ph2\">\\]</ph>","linkify":"<a name=\"csimplestringt__operator_at\"></a>  CSimpleStringT::operator \\[\\]","source":"<a name=\"csimplestringt__operator_at\"></a>  CSimpleStringT::operator \\[\\]"},{"content":"Call this function to access a single character of the character array.","pos":[28650,28721]},{"pos":[28731,28737],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[28804,28814],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Zero-based index of a character in the string.","pos":[28829,28875]},{"pos":[28885,28892],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The overloaded subscript (<ph id=\"ph1\">`[]`</ph>) operator returns a single character specified by the zero-based index in <ph id=\"ph2\">`iChar`</ph>.","pos":[28896,29009],"source":"The overloaded subscript (`[]`) operator returns a single character specified by the zero-based index in `iChar`."},{"content":"This operator is a convenient substitute for the <bpt id=\"p1\">[</bpt>GetAt<ept id=\"p1\">](#csimplestringt__getat)</ept> member function.","pos":[29010,29107],"source":" This operator is a convenient substitute for the [GetAt](#csimplestringt__getat) member function."},{"pos":[29115,29302],"content":"[!NOTE]\n You can use the subscript (`[]`) operator to get the value of a character in a `CSimpleStringT`, but you cannot use it to change the value of a character in a `CSimpleStringT`.","leadings":["","> "],"nodes":[{"content":"You can use the subscript (<ph id=\"ph1\">`[]`</ph>) operator to get the value of a character in a <ph id=\"ph2\">`CSimpleStringT`</ph>, but you cannot use it to change the value of a character in a <ph id=\"ph3\">`CSimpleStringT`</ph>.","pos":[9,185],"source":" You can use the subscript (`[]`) operator to get the value of a character in a `CSimpleStringT`, but you cannot use it to change the value of a character in a `CSimpleStringT`."}]},{"pos":[29315,29390],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__operator_add_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::operator +=","linkify":"<a name=\"csimplestringt__operator_add_eq\"></a>  CSimpleStringT::operator +=","source":"<a name=\"csimplestringt__operator_add_eq\"></a>  CSimpleStringT::operator +="},{"content":"Joins a new string or character to the end of an existing string.","pos":[29393,29458]},{"pos":[29468,29474],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[29839,29849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a null-terminated string.","pos":[29865,29903]},{"content":"A pointer to an existing <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[29922,29971],"source":" A pointer to an existing `CSimpleStringT` object."},{"content":"<bpt id=\"p1\">*</bpt>ch<ept id=\"p1\">*</ept>","pos":[29978,29982],"source":"*ch*"},{"content":"The character to be appended.","pos":[29986,30015]},{"pos":[30025,30032],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The operator accepts another <ph id=\"ph1\">`CSimpleStringT`</ph> object or a character.","pos":[30036,30104],"source":"The operator accepts another `CSimpleStringT` object or a character."},{"content":"Note that memory exceptions may occur whenever you use this concatenation operator because new storage may be allocated for characters added to this <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[30105,30278],"source":" Note that memory exceptions may occur whenever you use this concatenation operator because new storage may be allocated for characters added to this `CSimpleStringT` object."},{"pos":[30287,30294],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30298,30376],"content":"The following example demonstrates the use of <bpt id=\"p1\">**</bpt>CSimpleStringT::operator +=<ept id=\"p1\">**</ept>.","source":"The following example demonstrates the use of **CSimpleStringT::operator +=**."},{"pos":[30496,30508],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[30512,30536],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[30546,30616],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::operator =","linkify":"<a name=\"csimplestringt__operator_eq\"></a>  CSimpleStringT::operator =","source":"<a name=\"csimplestringt__operator_eq\"></a>  CSimpleStringT::operator ="},{"pos":[30619,30668],"content":"Assigns a new value to a <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Assigns a new value to a `CSimpleStringT` object."},{"pos":[30678,30684],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[30812,30822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a null-terminated string.","pos":[30838,30876]},{"content":"A pointer to an existing <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[30895,30944],"source":" A pointer to an existing `CSimpleStringT` object."},{"pos":[30954,30961],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the destination string (the left side) is already large enough to store the new data, no new memory allocation is performed.","pos":[30965,31092]},{"content":"Note that memory exceptions may occur whenever you use the assignment operator because new storage is often allocated to hold the resulting <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[31093,31257],"source":" Note that memory exceptions may occur whenever you use the assignment operator because new storage is often allocated to hold the resulting `CSimpleStringT` object."},{"pos":[31266,31273],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31277,31354],"content":"The following example demonstrates the use of <bpt id=\"p1\">**</bpt>CSimpleStringT::operator =<ept id=\"p1\">**</ept>.","source":"The following example demonstrates the use of **CSimpleStringT::operator =**."},{"pos":[31797,31809],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[31813,31837],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[31847,31926],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__operator_pcxstr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::operator PCXSTR","linkify":"<a name=\"csimplestringt__operator_pcxstr\"></a>  CSimpleStringT::operator PCXSTR","source":"<a name=\"csimplestringt__operator_pcxstr\"></a>  CSimpleStringT::operator PCXSTR"},{"pos":[31931,32016],"content":"Directly accesses characters stored in a <ph id=\"ph1\">`CSimpleStringT`</ph> object as a C-style string.","source":"Directly accesses characters stored in a `CSimpleStringT` object as a C-style string."},{"pos":[32026,32032],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[32091,32103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A character pointer to the string's data.","pos":[32107,32148]},{"pos":[32158,32165],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"No characters are copied; only a pointer is returned.","pos":[32169,32222]},{"content":"Be careful with this operator.","pos":[32223,32253]},{"content":"If you change a <ph id=\"ph1\">`CString`</ph> object after you have obtained the character pointer, you may cause a reallocation of memory that invalidates the pointer.","pos":[32254,32402],"source":" If you change a `CString` object after you have obtained the character pointer, you may cause a reallocation of memory that invalidates the pointer."},{"pos":[32411,32418],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[32422,32504],"content":"The following example demonstrates the use of <bpt id=\"p1\">**</bpt>CSimpleStringT::operator PCXSTR<ept id=\"p1\">**</ept>.","source":"The following example demonstrates the use of **CSimpleStringT::operator PCXSTR**."},{"pos":[33349,33361],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[33365,33389],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[33400,33461],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__pcxstr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::PCXSTR","linkify":"<a name=\"csimplestringt__pcxstr\"></a>  CSimpleStringT::PCXSTR","source":"<a name=\"csimplestringt__pcxstr\"></a>  CSimpleStringT::PCXSTR"},{"content":"A pointer to a constant string.","pos":[33462,33493]},{"pos":[33503,33509],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[33584,33596],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[33600,33624],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[33636,33707],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__preallocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::Preallocate","linkify":"<a name=\"csimplestringt__preallocate\"></a>  CSimpleStringT::Preallocate","source":"<a name=\"csimplestringt__preallocate\"></a>  CSimpleStringT::Preallocate"},{"pos":[33710,33779],"content":"Allocates a specific amount of bytes for the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Allocates a specific amount of bytes for the `CSimpleStringT` object."},{"pos":[33789,33795],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[33852,33862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The exact size of the <ph id=\"ph1\">`CSimpleStringT`</ph> character buffer in characters.","pos":[33879,33949],"source":" The exact size of the `CSimpleStringT` character buffer in characters."},{"pos":[33959,33966],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33970,34054],"content":"Call this method to allocate a specific buffer size for the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Call this method to allocate a specific buffer size for the `CSimpleStringT` object."},{"content":"<ph id=\"ph1\">`CSimpleStringT`</ph> generates a <ph id=\"ph2\">`STATUS_NO_MEMORY`</ph> exception if it is unable to allocate space for the character buffer.","pos":[34061,34178],"source":"`CSimpleStringT` generates a `STATUS_NO_MEMORY` exception if it is unable to allocate space for the character buffer."},{"content":"By default, memory allocation is performed by WIN32 API functions <ph id=\"ph1\">`HeapAlloc`</ph> or <ph id=\"ph2\">`HeapReAlloc`</ph>.","pos":[34179,34274],"source":" By default, memory allocation is performed by WIN32 API functions `HeapAlloc` or `HeapReAlloc`."},{"pos":[34283,34290],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34294,34370],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::Preallocate`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::Preallocate`."},{"pos":[34572,34584],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[34588,34612],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[34624,34683],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__pxstr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::PXSTR","linkify":"<a name=\"csimplestringt__pxstr\"></a>  CSimpleStringT::PXSTR","source":"<a name=\"csimplestringt__pxstr\"></a>  CSimpleStringT::PXSTR"},{"content":"A pointer to a string.","pos":[34686,34708]},{"pos":[34718,34724],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[34798,34810],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[34814,34838],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[34850,34925],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__releasebuffer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::ReleaseBuffer","linkify":"<a name=\"csimplestringt__releasebuffer\"></a>  CSimpleStringT::ReleaseBuffer","source":"<a name=\"csimplestringt__releasebuffer\"></a>  CSimpleStringT::ReleaseBuffer"},{"pos":[34928,35012],"content":"Releases control of the buffer allocated by <bpt id=\"p1\">[</bpt>GetBuffer<ept id=\"p1\">](#csimplestringt__getbuffer)</ept>.","source":"Releases control of the buffer allocated by [GetBuffer](#csimplestringt__getbuffer)."},{"pos":[35022,35028],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[35094,35104],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new length of the string in characters, not counting a null terminator.","pos":[35124,35199]},{"content":"If the string is null terminated, the -1 default value sets the <ph id=\"ph1\">`CSimpleStringT`</ph> size to the current length of the string.","pos":[35200,35322],"source":" If the string is null terminated, the -1 default value sets the `CSimpleStringT` size to the current length of the string."},{"pos":[35332,35339],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to reallocate or free up the buffer of the string object.","pos":[35343,35417]},{"content":"If you know that the string in the buffer is null terminated, you can omit the <ph id=\"ph1\">`nNewLength`</ph> argument.","pos":[35418,35519],"source":" If you know that the string in the buffer is null terminated, you can omit the `nNewLength` argument."},{"content":"If your string is not null terminated, use <ph id=\"ph1\">`nNewLength`</ph> to specify its length.","pos":[35520,35598],"source":" If your string is not null terminated, use `nNewLength` to specify its length."},{"content":"The address returned by <bpt id=\"p1\">[</bpt>GetBuffer<ept id=\"p1\">](#csimplestringt__getbuffer)</ept> is invalid after the call to <ph id=\"ph1\">`ReleaseBuffer`</ph> or any other <ph id=\"ph2\">`CSimpleStringT`</ph> operation.","pos":[35599,35748],"source":" The address returned by [GetBuffer](#csimplestringt__getbuffer) is invalid after the call to `ReleaseBuffer` or any other `CSimpleStringT` operation."},{"pos":[35757,35764],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[35768,35846],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::ReleaseBuffer`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::ReleaseBuffer`."},{"pos":[36200,36212],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[36216,36240],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[36251,36344],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__releasebuffersetlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::ReleaseBufferSetLength","linkify":"<a name=\"csimplestringt__releasebuffersetlength\"></a>  CSimpleStringT::ReleaseBufferSetLength","source":"<a name=\"csimplestringt__releasebuffersetlength\"></a>  CSimpleStringT::ReleaseBufferSetLength"},{"pos":[36346,36430],"content":"Releases control of the buffer allocated by <bpt id=\"p1\">[</bpt>GetBuffer<ept id=\"p1\">](#csimplestringt__getbuffer)</ept>.","source":"Releases control of the buffer allocated by [GetBuffer](#csimplestringt__getbuffer)."},{"pos":[36440,36446],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[36516,36526],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The length of the string being released","pos":[36546,36585]},{"pos":[36595,36602],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36606,36759],"content":"This function is functionally similar to <bpt id=\"p1\">[</bpt>ReleaseBuffer<ept id=\"p1\">](#csimplestringt__releasebuffer)</ept> except that a valid length for the string object must be passed.","source":"This function is functionally similar to [ReleaseBuffer](#csimplestringt__releasebuffer) except that a valid length for the string object must be passed."},{"pos":[36769,36781],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[36785,36809],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[36821,36880],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__setat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::SetAt","linkify":"<a name=\"csimplestringt__setat\"></a>  CSimpleStringT::SetAt","source":"<a name=\"csimplestringt__setat\"></a>  CSimpleStringT::SetAt"},{"pos":[36883,36938],"content":"Sets a single character from a <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Sets a single character from a `CSimpleStringT` object."},{"pos":[36948,36954],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[37012,37022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Zero-based index of the character in the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[37037,37102],"source":" Zero-based index of the character in the `CSimpleStringT` object."},{"content":"The <ph id=\"ph1\">`iChar`</ph> parameter must be greater than or equal to 0 and less than the value returned by <bpt id=\"p1\">[</bpt>GetLength<ept id=\"p1\">](#csimplestringt__getlength)</ept>.","pos":[37103,37236],"source":" The `iChar` parameter must be greater than or equal to 0 and less than the value returned by [GetLength](#csimplestringt__getlength)."},{"content":"<bpt id=\"p1\">*</bpt>ch<ept id=\"p1\">*</ept>","pos":[37243,37247],"source":"*ch*"},{"content":"The new character.","pos":[37251,37269]},{"pos":[37279,37286],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to overwrite the character located at <ph id=\"ph1\">`iChar`</ph>.","pos":[37290,37353],"source":"Call this method to overwrite the character located at `iChar`."},{"content":"This method will not enlarge the string if <ph id=\"ph1\">`iChar`</ph> exceeds the bounds of the existing string.","pos":[37354,37447],"source":" This method will not enlarge the string if `iChar` exceeds the bounds of the existing string."},{"pos":[37456,37463],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[37467,37537],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::SetAt`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::SetAt`."},{"pos":[37665,37677],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[37681,37705],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[37717,37786],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__setmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::SetManager","linkify":"<a name=\"csimplestringt__setmanager\"></a>  CSimpleStringT::SetManager","source":"<a name=\"csimplestringt__setmanager\"></a>  CSimpleStringT::SetManager"},{"pos":[37789,37849],"content":"Specifies the memory manager of the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Specifies the memory manager of the `CSimpleStringT` object."},{"pos":[37859,37865],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[37934,37944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the new memory manager.","pos":[37964,38000]},{"pos":[38010,38017],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to specify a new memory manager used by the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[38021,38106],"source":"Call this method to specify a new memory manager used by the `CSimpleStringT` object."},{"content":"For more information on memory managers and string objects, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../memory-management-with-cstringt.md)</ept>.","pos":[38107,38243],"source":" For more information on memory managers and string objects, see [Memory Management and CStringT](../memory-management-with-cstringt.md)."},{"pos":[38252,38259],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38263,38338],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::SetManager`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::SetManager`."},{"pos":[38414,38426],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[38430,38454],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[38466,38533],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__setstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::SetString","linkify":"<a name=\"csimplestringt__setstring\"></a>  CSimpleStringT::SetString","source":"<a name=\"csimplestringt__setstring\"></a>  CSimpleStringT::SetString"},{"pos":[38536,38581],"content":"Sets the string of a <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Sets the string of a `CSimpleStringT` object."},{"pos":[38591,38597],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[38699,38709],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a null-terminated string.","pos":[38725,38763]},{"content":"A count of the number of characters in <ph id=\"ph1\">`pszSrc`</ph>.","pos":[38783,38831],"source":" A count of the number of characters in `pszSrc`."},{"pos":[38841,38848],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Copy a string into the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","pos":[38852,38899],"source":"Copy a string into the `CSimpleStringT` object."},{"content":"<ph id=\"ph1\">`SetString`</ph> overwrites the older string data in the buffer.","pos":[38900,38959],"source":"`SetString` overwrites the older string data in the buffer."},{"pos":[38966,39083],"content":"Both versions of <ph id=\"ph1\">`SetString`</ph> check whether <ph id=\"ph2\">`pszSrc`</ph> is a null pointer, and if it is, throw an <bpt id=\"p1\">**</bpt>E_INVALIDARG<ept id=\"p1\">**</ept> error.","source":"Both versions of `SetString` check whether `pszSrc` is a null pointer, and if it is, throw an **E_INVALIDARG** error."},{"pos":[39090,39185],"content":"The one-parameter version of <ph id=\"ph1\">`SetString`</ph> expects <ph id=\"ph2\">`pszSrc`</ph> to point to a null-terminated string.","source":"The one-parameter version of `SetString` expects `pszSrc` to point to a null-terminated string."},{"content":"The two-parameter version of <ph id=\"ph1\">`SetString`</ph> also expects <ph id=\"ph2\">`pszSrc`</ph> to be a null-terminated string.","pos":[39192,39286],"source":"The two-parameter version of `SetString` also expects `pszSrc` to be a null-terminated string."},{"content":"It uses <ph id=\"ph1\">`nLength`</ph> as the string length unless it encounters a null terminator first.","pos":[39287,39371],"source":" It uses `nLength` as the string length unless it encounters a null terminator first."},{"content":"The two-parameter version of <ph id=\"ph1\">`SetString`</ph> also checks whether <ph id=\"ph2\">`pszSrc`</ph> points to a location in the current buffer in <ph id=\"ph3\">`CSimpleStringT`</ph>.","pos":[39378,39511],"source":"The two-parameter version of `SetString` also checks whether `pszSrc` points to a location in the current buffer in `CSimpleStringT`."},{"content":"In this special case, <ph id=\"ph1\">`SetString`</ph> uses a memory copy function that does not overwrite the string data as it copies the string data back to its buffer.","pos":[39512,39662],"source":" In this special case, `SetString` uses a memory copy function that does not overwrite the string data as it copies the string data back to its buffer."},{"pos":[39671,39678],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[39682,39756],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::SetString`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::SetString`."},{"pos":[39930,39942],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[39946,39970],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[39980,40053],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__stringlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::StringLength","linkify":"<a name=\"csimplestringt__stringlength\"></a>  CSimpleStringT::StringLength","source":"<a name=\"csimplestringt__stringlength\"></a>  CSimpleStringT::StringLength"},{"content":"Returns the number of characters in the specified string.","pos":[40056,40113]},{"pos":[40123,40129],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[40212,40222],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a null-terminated string.","pos":[40235,40273]},{"pos":[40283,40295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40299,40365],"content":"The number of characters in <ph id=\"ph1\">`psz`</ph>; not counting a null terminator.","source":"The number of characters in `psz`; not counting a null terminator."},{"pos":[40375,40382],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40386,40474],"content":"Call this method to retrieve the number of characters in the string pointed to by <ph id=\"ph1\">`psz`</ph>.","source":"Call this method to retrieve the number of characters in the string pointed to by `psz`."},{"pos":[40483,40490],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[40494,40571],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::StringLength`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::StringLength`."},{"pos":[40654,40666],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[40670,40694],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[40705,40770],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__truncate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::Truncate","linkify":"<a name=\"csimplestringt__truncate\"></a>  CSimpleStringT::Truncate","source":"<a name=\"csimplestringt__truncate\"></a>  CSimpleStringT::Truncate"},{"content":"Truncates the string to the new length.","pos":[40771,40810]},{"pos":[40820,40826],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[40882,40892],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new length of the string.","pos":[40912,40941]},{"pos":[40951,40958],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to truncate the contents of the string to the new length.","pos":[40962,41036]},{"pos":[41044,41248],"content":"[!NOTE]\n This does not affect the allocated length of the buffer. To decrease or increase the current buffer, see [FreeExtra](#csimplestringt__freeextra) and [Preallocate](#csimplestringt__preallocate).","leadings":["","> "],"nodes":[{"content":" This does not affect the allocated length of the buffer. To decrease or increase the current buffer, see [FreeExtra](#csimplestringt__freeextra) and [Preallocate](#csimplestringt__preallocate).","pos":[8,202],"nodes":[{"content":"This does not affect the allocated length of the buffer.","pos":[1,57]},{"content":"To decrease or increase the current buffer, see <bpt id=\"p1\">[</bpt>FreeExtra<ept id=\"p1\">](#csimplestringt__freeextra)</ept> and <bpt id=\"p2\">[</bpt>Preallocate<ept id=\"p2\">](#csimplestringt__preallocate)</ept>.","pos":[58,194],"source":" To decrease or increase the current buffer, see [FreeExtra](#csimplestringt__freeextra) and [Preallocate](#csimplestringt__preallocate)."}]}]},{"pos":[41257,41264],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[41268,41341],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CSimpleStringT::Truncate`</ph>.","source":"The following example demonstrates the use of `CSimpleStringT::Truncate`."},{"pos":[41625,41637],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[41641,41665],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[41675,41748],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__unlockbuffer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::UnlockBuffer","linkify":"<a name=\"csimplestringt__unlockbuffer\"></a>  CSimpleStringT::UnlockBuffer","source":"<a name=\"csimplestringt__unlockbuffer\"></a>  CSimpleStringT::UnlockBuffer"},{"pos":[41750,41800],"content":"Unlocks the buffer of the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Unlocks the buffer of the `CSimpleStringT` object."},{"pos":[41810,41816],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[41871,41878],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to reset the reference count of the string to 1.","pos":[41882,41947]},{"content":"The <ph id=\"ph1\">`CSimpleStringT`</ph> destructor automatically calls <ph id=\"ph2\">`UnlockBuffer`</ph> to ensure that the buffer is not locked when the destructor is called.","pos":[41954,42091],"source":"The `CSimpleStringT` destructor automatically calls `UnlockBuffer` to ensure that the buffer is not locked when the destructor is called."},{"content":"For an example of this method, see <bpt id=\"p1\">[</bpt>LockBuffer<ept id=\"p1\">](#csimplestringt__lockbuffer)</ept>.","pos":[42092,42169],"source":" For an example of this method, see [LockBuffer](#csimplestringt__lockbuffer)."},{"pos":[42179,42191],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[42195,42219],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[42231,42299],"content":"<bpt id=\"p1\">&lt;a name=\"csimplestringt__dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSimpleStringT::~CSimpleStringT","linkify":"<a name=\"csimplestringt__dtor\"></a>  CSimpleStringT::~CSimpleStringT","source":"<a name=\"csimplestringt__dtor\"></a>  CSimpleStringT::~CSimpleStringT"},{"pos":[42300,42335],"content":"Destroys a <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Destroys a `CSimpleStringT` object."},{"pos":[42345,42351],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[42404,42411],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[42415,42471],"content":"Call this method to destroy the <ph id=\"ph1\">`CSimpleStringT`</ph> object.","source":"Call this method to destroy the `CSimpleStringT` object."},{"pos":[42481,42493],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[42497,42521],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[42531,42539],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[42543,42591],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ATL/MFC Shared Classes<ept id=\"p1\">](../../atl-mfc-shared/atl-mfc-shared-classes.md)</ept>","pos":[42594,42667],"source":" [ATL/MFC Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md)"}],"content":"---\ntitle: \"CSimpleStringT Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CSimpleStringT\"\n  - \"ATL::CSimpleStringT\"\n  - \"ATL::CSimpleStringT<BaseType>\"\n  - \"ATL.CSimpleStringT<BaseType>\"\n  - \"CSimpleStringT\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"shared classes, CSimpleStringT\"\n  - \"strings [C++], ATL class\"\n  - \"CSimpleStringT class\"\nms.assetid: 15814fcb-5b8f-4425-a97e-3b61fc9b48d8\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CSimpleStringT Class\nThis class represents a `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```\ntemplate <typename BaseType>\nclass CSimpleStringT\n\n```  \n#### Parameters  \n `BaseType`  \n The character type of the string class. Can be one of the following:  \n  \n- `char` (for ANSI character strings).  \n  \n- `wchar_t` (for Unicode character strings).  \n  \n- **TCHAR** (for both ANSI and Unicode character strings).  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSimpleStringT::PCXSTR](#csimplestringt__pcxstr)|A pointer to a constant string.|  \n|[CSimpleStringT::PXSTR](#csimplestringt__pxstr)|A pointer to a string.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSimpleStringT::CSimpleStringT](#csimplestringt__ctor)|Constructs `CSimpleStringT` objects in various ways.|  \n|[CSimpleStringT::~CSimpleStringT](#csimplestringt__dtor)|Destructor.|  \n\n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n<<<<<<< \n|[CSimpleStringT::Append](#csimplestringt__append)|Appends a `CSimpleStringT` object to an existing `CSimpleStringT` object.|  \n|[CSimpleStringT::AppendChar](#csimplestringt__appendchar)|Appends a character to an existing `CSimpleStringT` object.|  \n|[CSimpleStringT::CopyChars](#csimplestringt__copychars)|Copies a character or characters to another string.|  \n|[CSimpleStringT::CopyCharsOverlapped](#csimplestringt__copycharsoverlapped)|Copies a character or characters to another string in which the buffers overlap.|  \n|[CSimpleStringT::Empty](#csimplestringt__empty)|Forces a string to have a length of zero.|  \n|[CSimpleStringT::FreeExtra](#csimplestringt__freeextra)|Frees any extra memory previously allocated by the string object.|  \n|[CSimpleStringT::GetAllocLength](#csimplestringt__getalloclength)|Retrieves the allocated length of a `CSimpleStringT` object.|  \n|[CSimpleStringT::GetAt](#csimplestringt__getat)|Returns the character at a given position.|  \n|[CSimpleStringT::GetBuffer](#csimplestringt__getbuffer)|Returns a pointer to the characters in a `CSimpleStringT`.|  \n|[CSimpleStringT::GetBufferSetLength](#csimplestringt__getbuffersetlength)|Returns a pointer to the characters in a `CSimpleStringT`, truncating to the specified length.|  \n|[CSimpleStringT::GetLength](#csimplestringt__getlength)|Returns the number of characters in a `CSimpleStringT` object.|  \n|[CSimpleStringT::GetManager](#csimplestringt__getmanager)|Retrieves the memory manager of the `CSimpleStringT` object.|  \n|[CSimpleStringT::GetString](#csimplestringt__getstring)|Retrieves the character string|  \n|[CSimpleStringT::IsEmpty](#csimplestringt__isempty)|Tests whether a `CSimpleStringT` object contains no characters.|  \n|[CSimpleStringT::LockBuffer](#csimplestringt__lockbuffer)|Disables reference counting and protects the string in the buffer.|  \n|[CSimpleStringT::Preallocate](#csimplestringt__preallocate)|Allocates a specific amount of memory for the character buffer.|  \n|[CSimpleStringT::ReleaseBuffer](#csimplestringt__releasebuffer)|Releases control of the buffer returned by `GetBuffer`.|  \n|[CSimpleStringT::ReleaseBufferSetLength](#csimplestringt__releasebuffersetlength)|Releases control of the buffer returned by `GetBuffer`.|  \n|[CSimpleStringT::SetAt](#csimplestringt__setat)|Sets a character at a given position.|  \n|[CSimpleStringT::SetManager](#csimplestringt__setmanager)|Sets the memory manager of a `CSimpleStringT` object.|  \n|[CSimpleStringT::SetString](#csimplestringt__setstring)|Sets the string of a `CSimpleStringT` object.|  \n|[CSimpleStringT::StringLength](#csimplestringt__stringlength)|Returns the number of characters in the specified string.|  \n|[CSimpleStringT::Truncate](#csimplestringt__truncate)|Truncates the string to a specified length.|  \n|[CSimpleStringT::UnlockBuffer](#csimplestringt__unlockbuffer)|Enables reference counting and releases the string in the buffer.|  \n=======\n|[CSimpleStringT::Append](#csimplestringt__append)|Appends a `CSimpleStringT` object to an existing `CSimpleStringT` object.|  \n|[CSimpleStringT::AppendChar](#csimplestringt__appendchar)|Appends a character to an existing `CSimpleStringT` object.|  \n|[CSimpleStringT::CopyChars](#csimplestringt__copychars)|Copies a character or characters to another string.|  \n|[CSimpleStringT::CopyCharsOverlapped](#csimplestringt__copycharsoverlapped)|Copies a character or characters to another string in which the buffers overlap.|  \n|[CSimpleStringT::Empty](#csimplestringt__empty)|Forces a string to have a length of zero.|  \n|[CSimpleStringT::FreeExtra](#csimplestringt__freeextra)|Frees any extra memory previously allocated by the string object.|  \n|[CSimpleStringT::GetAllocLength](#csimplestringt__getalloclength)|Retrieves the allocated length of a `CSimpleStringT` object.|  \n|[CSimpleStringT::GetAt](#csimplestringt__getat)|Returns the character at a given position.|  \n|[CSimpleStringT::GetBuffer](#csimplestringt__getbuffer)|Returns a pointer to the characters in a `CSimpleStringT`.|  \n|[CSimpleStringT::GetBufferSetLength](#csimplestringt__getbuffersetlength)|Returns a pointer to the characters in a `CSimpleStringT`, truncating to the specified length.|  \n|[CSimpleStringT::GetLength](#csimplestringt__getlength)|Returns the number of characters in a `CSimpleStringT` object.|  \n|[CSimpleStringT::GetManager](#csimplestringt__getmanager)|Retrieves the memory manager of the `CSimpleStringT` object.|  \n|[CSimpleStringT::GetString](#csimplestringt__getstring)|Retrieves the character string|  \n|[CSimpleStringT::IsEmpty](#csimplestringt__isempty)|Tests whether a `CSimpleStringT` object contains no characters.|  \n|[CSimpleStringT::LockBuffer](#csimplestringt__lockbuffer)|Disables reference counting and protects the string in the buffer.|  \n|[CSimpleStringT::Preallocate](#csimplestringt__preallocate)|Allocates a specific amount of memory for the character buffer.|  \n|[CSimpleStringT::ReleaseBuffer](#csimplestringt__releasebuffer)|Releases control of the buffer returned by `GetBuffer`.|  \n|[CSimpleStringT::ReleaseBufferSetLength](#csimplestringt__releasebuffersetlength)|Releases control of the buffer returned by `GetBuffer`.|  \n|[CSimpleStringT::SetAt](#csimplestringt__setat)|Sets a character at a given position.|  \n|[CSimpleStringT::SetManager](#csimplestringt__setmanager)|Sets the memory manager of a `CSimpleStringT` object.|  \n|[CSimpleStringT::SetString](#csimplestringt__setstring)|Sets the string of a `CSimpleStringT` object.|  \n|[CSimpleStringT::StringLength](#csimplestringt__stringlength)|Returns the number of characters in the specified string.|  \n|[CSimpleStringT::Truncate](#csimplestringt__truncate)|Truncates the string to a specified length.|  \n|[CSimpleStringT::UnlockBuffer](#csimplestringt__unlockbuffer)|Enables reference counting and releases the string in the buffer.|  \n>>>>>>> master\n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n\n|[CSimpleStringT::operator PCXSTR](#csimplestringt__operator_pcxstr)|Directly accesses characters stored in a `CSimpleStringT` object as a C-style string.|  \n|[CSimpleStringT::operator\\[\\]](#csimplestringt__operator_at)|Returns the character at a given position — operator substitution for `GetAt`.|  \n|[CSimpleStringT::operator +=](#csimplestringt__operator_add_eq)|Concatenates a new string to the end of an existing string.|  \n|[CSimpleStringT::operator =](#csimplestringt__operator_eq)|Assigns a new value to a `CSimpleStringT` object.|  \n  \n### Remarks  \n `CSimpleStringT` is the base class for the various string classes supported by Visual C++. It provides minimal support for memory management of the string object and basic buffer manipulation. For more advanced string objects, see [CStringT Class](../../atl-mfc-shared/reference/cstringt-class.md).  \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n\n\n## <a name=\"csimplestringt__append\"></a> CSimpleStringT::Append\nAppends a `CSimpleStringT` object to an existing `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nvoid Append(const CSimpleStringT& strSrc);  \nvoid Append(PCXSTR pszSrc, int nLength);  \nvoid Append(PCXSTR pszSrc);  \n```  \n#### Parameters  \n `strSrc`  \n The `CSimpleStringT` object to be appended.  \n  \n `pszSrc`  \n A pointer to a string containing the characters to be appended.  \n  \n `nLength`  \n The number of characters to append.  \n  \n### Remarks  \n Call this method to append an existing `CSimpleStringT` object to another `CSimpleStringT` object.  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::Append`.  \n  \n```cpp\nCSimpleString str1(pMgr), str2(pMgr);\n\nstr1.SetString(_T(\"Soccer is\"));\nstr2.SetString(_T(\" an elegant game\"));\n\nstr1.Append(str2);\nASSERT(_tcscmp(str1, _T(\"Soccer is an elegant game\")) == 0);\n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"csimplestringt__appendchar\"></a> CSimpleStringT::AppendChar\nAppends a character to an existing `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nvoid AppendChar(XCHAR ch);  \n```  \n#### Parameters  \n *ch*  \n The character to be appended  \n  \n### Remarks  \n Call this function to append the specified character to the end of an existing `CSimpleStringT` object.  \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n\n##  <a name=\"csimplestringt__copychars\"></a> CSimpleStringT::CopyChars  \n Copies a character or characters to a `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nstatic void CopyChars(XCHAR* pchDest, const XCHAR* pchSrc, int nChars  \n) throw();  \n```  \n#### Parameters  \n `pchDest`  \n A pointer to a character string.  \n  \n `pchSrc`  \n A pointer to a string containing the characters to be copied.  \n  \n `nChars`  \n The number of `pchSrc` characters to be copied.  \n  \n### Remarks  \n Call this method to copy characters from `pchSrc` to the `pchDest` string.  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::CopyChars`.  \n  \n ```cpp\n CSimpleString str(_T(\"xxxxxxxxxxxxxxxxxxx\"), 20, pMgr);\nTCHAR* pszSrc = _T(\"Hello world!\");\n\n_tprintf_s(_T(\"%s\\n\"), str);\n\nstr.CopyChars(str.GetBuffer(), pszSrc, 12);\n_tprintf_s(_T(\"%s\\n\"), str);\n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"csimplestringt__copycharsoverlapped\"></a>  CSimpleStringT::CopyCharsOverlapped\nCopies a character or characters to a `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nstatic void CopyCharsOverlapped(XCHAR* pchDest, const XCHAR* pchSrc, int nChars   \n) throw();  \n```  \n#### Parameters  \n `pchDest`  \n A pointer to a character string.  \n  \n `pchSrc`  \n A pointer to a string containing the characters to be copied.  \n  \n `nChars`  \n The number of `pchSrc` characters to be copied.  \n  \n### Remarks  \n Call this method to copy characters from `pchSrc` to the `pchDest` string. Unlike `CopyChars`, `CopyCharsOverlapped` provides a safe method for copying from character buffers that might be overlapped.  \n  \n## Example  \n See the example for [CSimpleStringT::CopyChars](#csimplestringt__copychars), or the source code for `CSimpleStringT::SetString` (located in atlsimpstr.h).  \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n\n##  <a name=\"csimplestringt__ctor\"></a>  CSimpleStringT::CSimpleStringT  \n Constructs a `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nCSimpleStringT(const XCHAR* pchSrc, int nLength, IAtlStringMgr* pStringMgr);  \nCSimpleStringT(PCXSTR pszSrc, IAtlStringMgr* pStringMgr);  \nCSimpleStringT(const CSimpleStringT& strSrc);  \nexplicit CSimpleStringT(IAtlStringMgr* pStringMgr  \n) throw();  \n```  \n#### Parameters  \n `strSrc`  \n An existing `CSimpleStringT` object to be copied into this `CSimpleStringT` object.  \n  \n `pchSrc`  \n A pointer to an array of characters of length `nLength`, not null terminated.  \n  \n `pszSrc`  \n A null-terminated string to be copied into this `CSimpleStringT` object.  \n  \n `nLength`  \n A count of the number of characters in `pch`.  \n  \n `pStringMgr`  \n A pointer to the memory manager of the `CSimpleStringT` object. For more information about `IAtlStringMgr` and memory management for `CSimpleStringT`, see [Memory Management and CStringT](../memory-management-with-cstringt.md).  \n  \n### Remarks  \n Construct a new `CSimpleStringT` object. Because the constructors copy the input data into new allocated storage, memory exceptions may result.  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::CSimpleStringT` by using the ATL `typedef``CSimpleString`. `CSimpleString` is a commonly used specialization of the class template `CSimpleStringT`.  \n  \n```cpp\nCSimpleString s1(pMgr);                   // Empty string\nCSimpleString s2(_T(\"cat\"), pMgr);        // From a C string literal\n\nCSimpleString s3(s2);                     // Copy constructor\nCSimpleString s4(s2 + _T(\" \") + s3);      // From a string expression\n\nCSimpleString s5(_T(\"xxxxxx\"), 6, pMgr);  // s5 = \"xxxxxx\"   \n```\n\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n\n\n##  <a name=\"csimplestringt__empty\"></a>  CSimpleStringT::Empty\nMakes this `CSimpleStringT` object an empty string and frees memory as appropriate.  \n  \n### Syntax  \n  \n```  \nvoid Empty() throw();  \n  \n```  \n### Remarks  \n For more information, see [Strings: CString Exception Cleanup](../cstring-exception-cleanup.md).  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::Empty`.  \n  \n ```cpp  \nCSimpleString s(pMgr);\nASSERT(s.IsEmpty());   \n```  \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n\n##  <a name=\"csimplestringt__freeextra\"></a>  CSimpleStringT::FreeExtra\nFrees any extra memory previously allocated by the string but no longer needed.  \n  \n### Syntax  \n  \n```  \nvoid FreeExtra();  \n```  \n### Remarks  \n This should reduce the memory overhead consumed by the string object. The method reallocates the buffer to the exact length returned by [GetLength](#csimplestringt__getlength).  \n  \n## Example  \n```cpp  \nCAtlString basestr;\nIAtlStringMgr* pMgr;\n\npMgr= basestr.GetManager();\nASSERT(pMgr != NULL);\n\n// Create a CSimpleString with 28 characters\nCSimpleString str(_T(\"Many sports are fun to play.\"), 28, pMgr);\n_tprintf_s(_T(\"Alloc length is %d, String length is %d\\n\"),\n   str.GetAllocLength(), str.GetLength());\n\n// Assigning a smaller string won't cause CSimpleString to free its \n// memory, because it assumes the string will grow again anyway.\nstr = _T(\"Soccer is best!\");\n_tprintf_s(_T(\"Alloc length is %d, String length is %d\\n\"),\n   str.GetAllocLength(), str.GetLength());\n\n// This call forces CSimpleString to release the extra \n// memory it doesn't need.\nstr.FreeExtra();\n_tprintf_s(_T(\"Alloc length is %d, String length is %d\\n\"),\n   str.GetAllocLength(), str.GetLength());\n```\n  \n### Remarks  \n The output from this example is as follows:  \n  \n `Alloc length is 1031, String length is 1024`  \n  \n `Alloc length is 1031, String length is 15`  \n  \n `Alloc length is 15, String length is 15`  \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n\n##  <a name=\"csimplestringt__getalloclength\"></a>  CSimpleStringT::GetAllocLength  \nRetrieves the allocated length of a `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nint GetAllocLength() const throw();  \n  \n```  \n### Return Value  \n The number of characters allocated for this object.  \n  \n### Remarks  \n Call this method to determine the number of characters allocated for this `CSimpleStringT` object. See [FreeExtra](#csimplestringt__freeextra) for an example of calling this function.  \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n##  <a name=\"csimplestringt__getat\"></a>  CSimpleStringT::GetAt  \nReturns one character from a `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nXCHAR GetAt(int iChar  \n) const;  \n```  \n#### Parameters  \n `iChar`  \n Zero-based index of the character in the `CSimpleStringT` object. The `iChar` parameter must be greater than or equal to 0 and less than the value returned by [GetLength](#csimplestringt__getlength). Otherwise, `GetAt` will generate an exception.  \n  \n### Return Value  \n An `XCHAR` that contains the character at the specified position in the string.  \n  \n### Remarks  \n Call this method to return the one character specified by `iChar`. The overloaded subscript (`[]`) operator is a convenient alias for `GetAt`. The null terminator is addressable without generating an exception by using `GetAt`. However, it is not counted by `GetLength`, and the value returned is 0.  \n  \n## Example  \n The following example demonstrates how to use `CSimpleStringT::GetAt`.  \n  \n```cpp  \nCSimpleString s(_T(\"abcdef\"), pMgr);\nASSERT(s.GetAt(2) == _T('c'));   \n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"csimplestringt__getbuffer\"></a>  CSimpleStringT::GetBuffer  \nReturns a pointer to the internal character buffer for the `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nPXSTR GetBuffer(int nMinBufferLength);  \nPXSTR GetBuffer();  \n```  \n#### Parameters  \n `nMinBufferLength`  \n The minimum number of characters that the character buffer can hold. This value does not include space for a null terminator.  \n  \n If `nMinBufferLength` is larger than the length of the current buffer, `GetBuffer` destroys the current buffer, replaces it with a buffer of the requested size, and resets the object reference count to zero. If you have previously called [LockBuffer](#csimplestringt__lockbuffer) on this buffer, you lose the buffer lock.  \n  \n### Return Value  \n An `PXSTR` pointer to the object's (null-terminated) character buffer.  \n  \n### Remarks  \n Call this method to return the buffer contents of the `CSimpleStringT` object. The returned `PXSTR` is not a constant and therefore allows direct modification of `CSimpleStringT` contents.  \n  \n If you use the pointer returned by `GetBuffer` to change the string contents, you must call [ReleaseBuffer](#csimplestringt__releasebuffer) before you use any other `CSimpleStringT` member methods.  \n  \n The address returned by `GetBuffer` may not be valid after the call to `ReleaseBuffer` because additional `CSimpleStringT` operations can cause the `CSimpleStringT` buffer to be reallocated. The buffer is not reallocated if you do not change the length of the `CSimpleStringT`.  \n  \n The buffer memory is automatically freed when the `CSimpleStringT` object is destroyed.  \n  \n If you keep track of the string length yourself, you should not append the terminating null character. However, you must specify the final string length when you release the buffer with `ReleaseBuffer`. If you do append a terminating null character, you should pass –1 (the default) for the length. `ReleaseBuffer` then determines the buffer length.  \n  \n If there is insufficient memory to satisfy the `GetBuffer` request, this method throws a CMemoryException*.  \n  \n## Example  \n```cpp  \nCSimpleString s(_T(\"abcd\"), pMgr);\n\nLPTSTR pBuffer = s.GetBuffer(10);\nint    sizeOfBuffer = s.GetAllocLength();\n\n// Directly access CSimpleString buffer\n_tcscpy_s(pBuffer, sizeOfBuffer, _T(\"Hello\")); \nASSERT(_tcscmp(s, _T(\"Hello\")) == 0);\n\ns.ReleaseBuffer();   \n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"csimplestringt__getbuffersetlength\"></a>  CSimpleStringT::GetBufferSetLength  \nReturns a pointer to the internal character buffer for the `CSimpleStringT` object, truncating or growing its length if necessary to exactly match the length specified in `nLength`.  \n  \n### Syntax  \n  \n```  \nPXSTR GetBufferSetLength(int nLength);  \n```  \n#### Parameters  \n `nLength`  \n The exact size of the `CSimpleStringT` character buffer in characters.  \n  \n### Return Value  \n A `PXSTR` pointer to the object's (null-terminated) character buffer.  \n  \n### Remarks  \n Call this method to retrieve a specified length of the internal buffer of the `CSimpleStringT` object. The returned `PXSTR` pointer is not `const` and thus allows direct modification of `CSimpleStringT` contents.  \n  \n If you use the pointer returned by [GetBufferSetLength](#csimplestringt__getbuffersetlength) to change the string contents, call `ReleaseBuffer` to update the internal state of `CsimpleStringT` before you use any other `CSimpleStringT` methods.  \n  \n The address returned by `GetBufferSetLength` may not be valid after the call to `ReleaseBuffer` because additional `CSimpleStringT` operations can cause the `CSimpleStringT` buffer to be reallocated. The buffer is not reassigned if you do not change the length of the `CSimpleStringT`.  \n  \n The buffer memory is automatically freed when the `CSimpleStringT` object is destroyed.  \n  \n If you keep track of the string length yourself, do not not append the terminating null character. You must specify the final string length when you release the buffer by using `ReleaseBuffer`. If you do append a terminating null character when you call `ReleaseBuffer`, pass –1 (the default) for the length to `ReleaseBuffer`, and `ReleaseBuffer` will perform a `strlen` on the buffer to determine its length.  \n  \n For more information about reference counting, see the following articles:  \n  \n-   [Managing Object Lifetimes through Reference Counting](http://msdn.microsoft.com/library/windows/desktop/ms687260) in the Windows SDK. \n  \n-   [Implementing Reference Counting](http://msdn.microsoft.com/library/windows/desktop/ms693431) in the Windows SDK.\n  \n-   [Rules for Managing Reference Counts](http://msdn.microsoft.com/library/windows/desktop/ms692481) in the Windows SDK.  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::GetBufferSetLength`.  \n  \n```cpp  \nCSimpleString str(pMgr);\nLPTSTR pstr = str.GetBufferSetLength(3);\npstr[0] = _T('C');\npstr[1] = _T('u');\npstr[2] = _T('p');\n\n// No need for trailing zero or call to ReleaseBuffer() \n// because GetBufferSetLength() set it for us.\n\nstr += _T(\" soccer is best!\");\nASSERT(_tcscmp(str, _T(\"Cup soccer is best!\")) == 0);   \n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n##  <a name=\"csimplestringt__getlength\"></a>  CSimpleStringT::GetLength  \nReturns the number of characters in the `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nint GetLength() const throw();  \n  \n```  \n### Return Value  \n A count of the characters in the string.  \n  \n### Remarks  \n Call this method to return the number of characters in the object. The count does not include a null terminator.  \n  \n For multibyte character sets (MBCS), `GetLength` counts each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two bytes. See [FreeExtra](#csimplestringt__freeextra) for an example of calling this function.  \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n##  <a name=\"csimplestringt__getmanager\"></a>  CSimpleStringT::GetManager  \nRetrieves the memory manager of the `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nIAtlStringMgr* GetManager() const throw();  \n  \n```  \n### Return Value  \n A pointer to the memory manager for the `CSimpleStringT` object.  \n  \n### Remarks  \n Call this method to retrieve the memory manager used by the `CSimpleStringT` object. For more information on memory managers and string objects, see [Memory Management and CStringT](../memory-management-with-cstringt.md).  \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n\n\n##  <a name=\"csimplestringt__getstring\"></a>  CSimpleStringT::GetString\nRetrieves the character string.  \n  \n### Syntax  \n  \n```  \nPCXSTR GetString() const throw();  \n```  \n### Return Value  \n A pointer to a null-terminated character string.  \n  \n### Remarks  \n Call this method to retrieve the character string associated with the `CSimpleStringT` object.  \n  \n> [!NOTE]\n>  The returned `PCXSTR` pointer is `const` and does not allow direct modification of `CSimpleStringT` contents.  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::GetString`.  \n  \n```cpp  \nCSimpleString str(pMgr);\n\nstr += _T(\"Cup soccer is best!\");\n_tprintf_s(_T(\"%s\"), str.GetString());\n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n\n\n##  <a name=\"csimplestringt__isempty\"></a>  CSimpleStringT::IsEmpty  \nTests a `CSimpleStringT` object for the empty condition.  \n  \n### Syntax  \n  \n```  \nbool IsEmpty() const throw();  \n  \n```  \n### Return Value  \n Returns **true** if the `CSimpleStringT` object has 0 length; otherwise **false**.  \n  \n### Remarks  \n Call this method to determine if the object contains an empty string.  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::IsEmpty`.  \n  \n```cpp  \nCSimpleString s(pMgr);\nASSERT(s.IsEmpty());   \n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"csimplestringt__lockbuffer\"></a>  CSimpleStringT::LockBuffer  \nDisables reference counting and protects the string in the buffer.  \n  \n### Syntax  \n  \n```  \nPXSTR LockBuffer();  \n```  \n### Return Value  \n A pointer to a `CSimpleStringT` object or a null-terminated string.  \n  \n### Remarks  \n Call this method to lock the buffer of the `CSimpleStringT` object. By calling `LockBuffer`, you create a copy of the string, with a –1 for the reference count. When the reference count value is -1, the string in the buffer is considered to be in a \"locked\" state. While in a locked state, the string is protected in two ways:  \n  \n-   No other string can get a reference to the data in the locked string, even if that string is assigned to the locked string.  \n  \n-   The locked string will never reference another string, even if that other string is copied to the locked string.  \n  \n By locking the string in the buffer, you ensure that the string's exclusive hold on the buffer will remain intact.  \n  \n After you have finished with `LockBuffer`, call [UnlockBuffer](#csimplestringt__unlockbuffer) to reset the reference count to 1.  \n  \n> [!NOTE]\n>  If you call [GetBuffer](#csimplestringt__getbuffer) on a locked buffer and you set the `GetBuffer` parameter `nMinBufferLength` to greater than the length of the current buffer, you will lose the buffer lock. Such a call to `GetBuffer` destroys the current buffer, replaces it with a buffer of the requested size, and resets the reference count to zero.  \n  \n For more information about reference counting, see the following articles:  \n  \n-   [Managing Object Lifetimes through Reference Counting](http://msdn.microsoft.com/library/windows/desktop/ms687260) in the Windows SDK  \n  \n-   [Implementing Reference Counting](http://msdn.microsoft.com/library/windows/desktop/ms693431) in the Windows SDK  \n  \n-   [Rules for Managing Reference Counts](http://msdn.microsoft.com/library/windows/desktop/ms692481) in the Windows SDK  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::LockBuffer`.  \n  \n```cpp  \nCSimpleString str(_T(\"Hello\"), pMgr);\nTCHAR ch;\n\nstr.LockBuffer();\nch = str.GetAt(2);\n_tprintf_s(_T(\"%c\"), ch);\nstr.UnlockBuffer();\n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"simplestringt__operator_at\"></a>  CSimpleStringT::operator\\[\\]  \nCall this function to access a single character of the character array.  \n  \n### Syntax  \n  \n```  \nXCHAR operator[](int iChar  \n) const;  \n```  \n#### Parameters  \n `iChar`  \n Zero-based index of a character in the string.  \n  \n### Remarks  \n The overloaded subscript (`[]`) operator returns a single character specified by the zero-based index in `iChar`. This operator is a convenient substitute for the [GetAt](#csimplestringt__getat) member function.  \n  \n> [!NOTE]\n>  You can use the subscript (`[]`) operator to get the value of a character in a `CSimpleStringT`, but you cannot use it to change the value of a character in a `CSimpleStringT`.  \n  \n## Example  \n The following example demonstrates the use of **CSimpleStringT::operator []**.  \n  \n```cpp  \nCSimpleString s(_T(\"abc\"), pMgr);\nASSERT(s[1] == _T('b')); \n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n\n## <a name=\"csimplestringt__operator_at\"></a>  CSimpleStringT::operator \\[\\]\nCall this function to access a single character of the character array.  \n  \n### Syntax  \n  \n```  \n  \nXCHAR operator[]( int iChar ) const;  \n```  \n  \n### Parameters  \n `iChar`  \n Zero-based index of a character in the string.  \n  \n### Remarks  \n The overloaded subscript (`[]`) operator returns a single character specified by the zero-based index in `iChar`. This operator is a convenient substitute for the [GetAt](#csimplestringt__getat) member function.  \n  \n> [!NOTE]\n>  You can use the subscript (`[]`) operator to get the value of a character in a `CSimpleStringT`, but you cannot use it to change the value of a character in a `CSimpleStringT`.  \n  \n  \n##  <a name=\"csimplestringt__operator_add_eq\"></a>  CSimpleStringT::operator +=  \nJoins a new string or character to the end of an existing string.  \n  \n### Syntax  \n  \n```  \nCSimpleStringT& operator +=(PCXSTR pszSrc);  \nCSimpleStringT& operator +=(const CSimpleStringT& strSrc);  \ntemplate< int t_nSize >  \nCSimpleStringT& operator+=(const CStaticString< XCHAR, t_nSize >& strSrc);  \nCSimpleStringT& operator +=(char ch);  \nCSimpleStringT& operator +=(unsigned char ch);  \nCSimpleStringT& operator +=(wchar_t ch);  \n```  \n#### Parameters  \n `pszSrc`  \n A pointer to a null-terminated string.  \n  \n `strSrc`  \n A pointer to an existing `CSimpleStringT` object.  \n  \n *ch*  \n The character to be appended.  \n  \n### Remarks  \n The operator accepts another `CSimpleStringT` object or a character. Note that memory exceptions may occur whenever you use this concatenation operator because new storage may be allocated for characters added to this `CSimpleStringT` object.  \n  \n## Example  \n The following example demonstrates the use of **CSimpleStringT::operator +=**.  \n  \n```cpp  \nCSimpleString str(_T(\"abc\"), pMgr);\nASSERT(_tcscmp((str += _T(\"def\")), _T(\"abcdef\")) == 0);  \n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"csimplestringt__operator_eq\"></a>  CSimpleStringT::operator =  \nAssigns a new value to a `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nCSimpleStringT& operator =(PCXSTR pszSrc);  \nCSimpleStringT& operator =(const CSimpleStringT& strSrc);  \n```  \n#### Parameters  \n `pszSrc`  \n A pointer to a null-terminated string.  \n  \n `strSrc`  \n A pointer to an existing `CSimpleStringT` object.  \n  \n### Remarks  \n If the destination string (the left side) is already large enough to store the new data, no new memory allocation is performed. Note that memory exceptions may occur whenever you use the assignment operator because new storage is often allocated to hold the resulting `CSimpleStringT` object.  \n  \n## Example  \n The following example demonstrates the use of **CSimpleStringT::operator =**.  \n  \n```cpp  \nCSimpleString s1(pMgr), s2(pMgr);  // Empty CSimpleStringT objects\n\ns1 = _T(\"cat\");            // s1 = \"cat\"\nASSERT(_tcscmp(s1, _T(\"cat\")) == 0);\n\ns2 = s1;               // s1 and s2 each = \"cat\"\nASSERT(_tcscmp(s2, _T(\"cat\")) == 0);\n\ns1 = _T(\"the \") + s1;      // Or expressions\nASSERT(_tcscmp(s1, _T(\"the cat\")) == 0);\n\ns1 = _T(\"x\");              // Or just individual characters\nASSERT(_tcscmp(s1, _T(\"x\")) == 0); \n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"csimplestringt__operator_pcxstr\"></a>  CSimpleStringT::operator PCXSTR  \n\n Directly accesses characters stored in a `CSimpleStringT` object as a C-style string.  \n  \n### Syntax  \n  \n```  \noperator PCXSTR() const throw();    \n```  \n### Return Value  \n A character pointer to the string's data.  \n  \n### Remarks  \n No characters are copied; only a pointer is returned. Be careful with this operator. If you change a `CString` object after you have obtained the character pointer, you may cause a reallocation of memory that invalidates the pointer.  \n  \n## Example  \n The following example demonstrates the use of **CSimpleStringT::operator PCXSTR**.  \n  \n```cpp  \n// If the prototype of a function is known to the compiler, \n// the PCXSTR cast operator may be invoked implicitly.\n\nCSimpleString strSports(L\"Soccer is Best!\", pMgr);\nWCHAR sz[1024];\n\nwcscpy_s(sz, strSports);\n\n// If the prototype isn't known or is a va_arg prototype, \n// you must invoke the cast operator explicitly. For example, \n// the va_arg part of a call to swprintf_s() needs the cast:\n\nswprintf_s(sz, 1024, L\"I think that %s!\\n\", (PCWSTR)strSports);\n\n// While the format parameter is known to be an PCXSTR and \n// therefore doesn't need the cast:\n\nswprintf_s(sz, 1024, strSports);\n\n// Note that some situations are ambiguous. This line will \n// put the address of the strSports object to stdout:\n\nwcout << strSports;\n\n// while this line will put the content of the string out:\n\nwcout << (PCWSTR)strSports;   \n``` \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n##  <a name=\"csimplestringt__pcxstr\"></a>  CSimpleStringT::PCXSTR\nA pointer to a constant string.  \n  \n### Syntax  \n  \n```  \ntypedef ChTraitsBase< BaseType >::PCXSTR PCXSTR;    \n```  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n\n##  <a name=\"csimplestringt__preallocate\"></a>  CSimpleStringT::Preallocate  \nAllocates a specific amount of bytes for the `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nvoid Preallocate( int nLength);  \n```  \n#### Parameters  \n `nLength`  \n The exact size of the `CSimpleStringT` character buffer in characters.  \n  \n### Remarks  \n Call this method to allocate a specific buffer size for the `CSimpleStringT` object.  \n  \n `CSimpleStringT` generates a `STATUS_NO_MEMORY` exception if it is unable to allocate space for the character buffer. By default, memory allocation is performed by WIN32 API functions `HeapAlloc` or `HeapReAlloc`.  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::Preallocate`.  \n  \n```cpp  \nCSimpleString str(pMgr);\n\n_tprintf_s(_T(\"Allocated length: %d\\n\"), str.GetAllocLength());\nstr.Preallocate(100);\n_tprintf_s(_T(\"Allocated length: %d\\n\"), str.GetAllocLength());\n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n\n##  <a name=\"csimplestringt__pxstr\"></a>  CSimpleStringT::PXSTR  \nA pointer to a string.  \n  \n### Syntax  \n  \n```  \ntypedef ChTraitsBase< BaseType >::PXSTR PXSTR;  \n  \n```  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n\n##  <a name=\"csimplestringt__releasebuffer\"></a>  CSimpleStringT::ReleaseBuffer  \nReleases control of the buffer allocated by [GetBuffer](#csimplestringt__getbuffer).  \n  \n### Syntax  \n  \n```  \nvoid ReleaseBuffer(int nNewLength = -1);  \n```  \n#### Parameters  \n `nNewLength`  \n The new length of the string in characters, not counting a null terminator. If the string is null terminated, the -1 default value sets the `CSimpleStringT` size to the current length of the string.  \n  \n### Remarks  \n Call this method to reallocate or free up the buffer of the string object. If you know that the string in the buffer is null terminated, you can omit the `nNewLength` argument. If your string is not null terminated, use `nNewLength` to specify its length. The address returned by [GetBuffer](#csimplestringt__getbuffer) is invalid after the call to `ReleaseBuffer` or any other `CSimpleStringT` operation.  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::ReleaseBuffer`.  \n  \n```cpp  \nconst int bufferSize = 1024;\nCSimpleString s(_T(\"abc\"), pMgr);\n\nLPTSTR p = s.GetBuffer(bufferSize);\n_tcscpy_s(p, bufferSize , _T(\"abc\"));   // use the buffer directly\nASSERT(s.GetLength() == 3); // String length = 3\ns.ReleaseBuffer();  // Surplus memory released, p is now invalid.\nASSERT(s.GetLength() == 3); // Length still 3\n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n##  <a name=\"csimplestringt__releasebuffersetlength\"></a>  CSimpleStringT::ReleaseBufferSetLength\n\nReleases control of the buffer allocated by [GetBuffer](#csimplestringt__getbuffer).  \n  \n### Syntax  \n  \n```  \nvoid ReleaseBufferSetLength(int nNewLength);  \n```  \n#### Parameters  \n `nNewLength`  \n The length of the string being released  \n  \n### Remarks  \n This function is functionally similar to [ReleaseBuffer](#csimplestringt__releasebuffer) except that a valid length for the string object must be passed.  \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n\n##  <a name=\"csimplestringt__setat\"></a>  CSimpleStringT::SetAt  \nSets a single character from a `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nvoid SetAt(int iChar, XCHAR ch);  \n```  \n#### Parameters  \n `iChar`  \n Zero-based index of the character in the `CSimpleStringT` object. The `iChar` parameter must be greater than or equal to 0 and less than the value returned by [GetLength](#csimplestringt__getlength).  \n  \n *ch*  \n The new character.  \n  \n### Remarks  \n Call this method to overwrite the character located at `iChar`. This method will not enlarge the string if `iChar` exceeds the bounds of the existing string.  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::SetAt`.  \n  \n```cpp  \nCSimpleString s(_T(\"abcdef\"), pMgr);\n\ns.SetAt(1, _T('a'));\nASSERT(_tcscmp(s, _T(\"aacdef\")) == 0);   \n``` \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n\n##  <a name=\"csimplestringt__setmanager\"></a>  CSimpleStringT::SetManager  \nSpecifies the memory manager of the `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nvoid SetManager(IAtlStringMgr* pStringMgr);  \n```  \n#### Parameters  \n `pStringMgr`  \n A pointer to the new memory manager.  \n  \n### Remarks  \n Call this method to specify a new memory manager used by the `CSimpleStringT` object. For more information on memory managers and string objects, see [Memory Management and CStringT](../memory-management-with-cstringt.md).  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::SetManager`.  \n  \n```cpp  \nCSimpleString s(pMgr);\ns.SetManager(pCustomMgr); \n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n\n##  <a name=\"csimplestringt__setstring\"></a>  CSimpleStringT::SetString  \nSets the string of a `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nvoid SetString(PCXSTR pszSrc, int nLength);  \nvoid SetString(PCXSTR pszSrc);  \n```  \n#### Parameters  \n `pszSrc`  \n A pointer to a null-terminated string.  \n  \n `nLength`  \n A count of the number of characters in `pszSrc`.  \n  \n### Remarks  \n Copy a string into the `CSimpleStringT` object. `SetString` overwrites the older string data in the buffer.  \n  \n Both versions of `SetString` check whether `pszSrc` is a null pointer, and if it is, throw an **E_INVALIDARG** error.  \n  \n The one-parameter version of `SetString` expects `pszSrc` to point to a null-terminated string.  \n  \n The two-parameter version of `SetString` also expects `pszSrc` to be a null-terminated string. It uses `nLength` as the string length unless it encounters a null terminator first.  \n  \n The two-parameter version of `SetString` also checks whether `pszSrc` points to a location in the current buffer in `CSimpleStringT`. In this special case, `SetString` uses a memory copy function that does not overwrite the string data as it copies the string data back to its buffer.  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::SetString`.  \n  \n```cpp  \nCSimpleString s(_T(\"abcdef\"), pMgr);\nASSERT(_tcscmp(s, _T(\"abcdef\")) == 0);\n\ns.SetString(_T(\"Soccer\"), 6);\nASSERT(_tcscmp(s, _T(\"Soccer\")) == 0);  \n```\n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"csimplestringt__stringlength\"></a>  CSimpleStringT::StringLength  \nReturns the number of characters in the specified string.  \n  \n### Syntax  \n  \n```  \nATL_NOINLINE static int StringLength(PCXSTR psz) throw();  \n```  \n#### Parameters  \n `psz`  \n A pointer to a null-terminated string.  \n  \n### Return Value  \n The number of characters in `psz`; not counting a null terminator.  \n  \n### Remarks  \n Call this method to retrieve the number of characters in the string pointed to by `psz`.  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::StringLength`.  \n  \n```cpp  \nASSERT(CSimpleString::StringLength(_T(\"soccer\")) == 6);\n``` \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n##  <a name=\"csimplestringt__truncate\"></a>  CSimpleStringT::Truncate\nTruncates the string to the new length.  \n  \n### Syntax  \n  \n```  \nvoid Truncate(int nNewLength);  \n```  \n#### Parameters  \n `nNewLength`  \n The new length of the string.  \n  \n### Remarks  \n Call this method to truncate the contents of the string to the new length.  \n  \n> [!NOTE]\n>  This does not affect the allocated length of the buffer. To decrease or increase the current buffer, see [FreeExtra](#csimplestringt__freeextra) and [Preallocate](#csimplestringt__preallocate).  \n  \n## Example  \n The following example demonstrates the use of `CSimpleStringT::Truncate`.  \n  \n```cpp  \nCSimpleString str(_T(\"abcdefghi\"), pMgr);\n\n_tprintf_s(_T(\"Allocated length: %d\\n\"), str.GetLength());\n_tprintf_s(_T(\"Contents: %s\\n\"), str);\n\nstr.Truncate(4);\n_tprintf_s(_T(\"Allocated length: %d\\n\"), str.GetLength());\n_tprintf_s(_T(\"Contents: %s\\n\"), str);\n``` \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"csimplestringt__unlockbuffer\"></a>  CSimpleStringT::UnlockBuffer\n Unlocks the buffer of the `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \nvoid UnlockBuffer() throw();    \n```  \n### Remarks  \n Call this method to reset the reference count of the string to 1.  \n  \n The `CSimpleStringT` destructor automatically calls `UnlockBuffer` to ensure that the buffer is not locked when the destructor is called. For an example of this method, see [LockBuffer](#csimplestringt__lockbuffer).  \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n  \n\n\n##  <a name=\"csimplestringt__dtor\"></a>  CSimpleStringT::~CSimpleStringT\nDestroys a `CSimpleStringT` object.  \n  \n### Syntax  \n  \n```  \n~CSimpleStringT() throw();    \n```  \n### Remarks  \n Call this method to destroy the `CSimpleStringT` object.  \n  \n### Requirements  \n **Header:** atlsimpstr.h  \n\n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [ATL/MFC Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md)"}