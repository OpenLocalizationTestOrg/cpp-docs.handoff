{"nodes":[{"pos":[12,51],"content":"CConnectionPoint Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CConnectionPoint Class | Microsoft Docs","pos":[0,39]}]},{"pos":[622,644],"content":"CConnectionPoint Class","linkify":"CConnectionPoint Class","nodes":[{"content":"CConnectionPoint Class","pos":[0,22]}]},{"content":"Defines a special type of interface used to communicate with other OLE objects, called a \"connection point.\"","pos":[645,753]},{"pos":[762,768],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[837,844],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[854,873],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[880,884]},{"content":"Description","pos":[885,896]},{"pos":[934,1007],"content":"<bpt id=\"p1\">[</bpt>CConnectionPoint::CConnectionPoint<ept id=\"p1\">](#cconnectionpoint__cconnectionpoint)</ept>","source":"[CConnectionPoint::CConnectionPoint](#cconnectionpoint__cconnectionpoint)"},{"pos":[1008,1047],"content":"Constructs a <ph id=\"ph1\">`CConnectionPoint`</ph> object.","source":"Constructs a `CConnectionPoint` object."},{"pos":[1058,1072],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1079,1083]},{"content":"Description","pos":[1084,1095]},{"pos":[1133,1202],"content":"<bpt id=\"p1\">[</bpt>CConnectionPoint::GetConnections<ept id=\"p1\">](#cconnectionpoint__getconnections)</ept>","source":"[CConnectionPoint::GetConnections](#cconnectionpoint__getconnections)"},{"content":"Retrieves all connection points in a connection map.","pos":[1203,1255]},{"pos":[1260,1325],"content":"<bpt id=\"p1\">[</bpt>CConnectionPoint::GetContainer<ept id=\"p1\">](#cconnectionpoint__getcontainer)</ept>","source":"[CConnectionPoint::GetContainer](#cconnectionpoint__getcontainer)"},{"content":"Retrieves the container of the control that owns the connection map.","pos":[1326,1394]},{"pos":[1399,1452],"content":"<bpt id=\"p1\">[</bpt>CConnectionPoint::GetIID<ept id=\"p1\">](#cconnectionpoint__getiid)</ept>","source":"[CConnectionPoint::GetIID](#cconnectionpoint__getiid)"},{"content":"Retrieves the interface ID of a connection point.","pos":[1453,1502]},{"pos":[1507,1582],"content":"<bpt id=\"p1\">[</bpt>CConnectionPoint::GetMaxConnections<ept id=\"p1\">](#cconnectionpoint__getmaxconnections)</ept>","source":"[CConnectionPoint::GetMaxConnections](#cconnectionpoint__getmaxconnections)"},{"content":"Retrieves the maximum number of connection points supported by a control.","pos":[1583,1656]},{"pos":[1661,1736],"content":"<bpt id=\"p1\">[</bpt>CConnectionPoint::GetNextConnection<ept id=\"p1\">](#cconnectionpoint__getnextconnection)</ept>","source":"[CConnectionPoint::GetNextConnection](#cconnectionpoint__getnextconnection)"},{"pos":[1737,1792],"content":"Retrieves a pointer to the connection element at <ph id=\"ph1\">`pos`</ph>.","source":"Retrieves a pointer to the connection element at `pos`."},{"pos":[1797,1870],"content":"<bpt id=\"p1\">[</bpt>CConnectionPoint::GetStartPosition<ept id=\"p1\">](#cconnectionpoint__getstartposition)</ept>","source":"[CConnectionPoint::GetStartPosition](#cconnectionpoint__getstartposition)"},{"pos":[1871,1977],"content":"Starts a map iteration by returning a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be passed to a <ph id=\"ph1\">`GetNextConnection`</ph> call.","source":"Starts a map iteration by returning a **POSITION** value that can be passed to a `GetNextConnection` call."},{"pos":[1982,2039],"content":"<bpt id=\"p1\">[</bpt>CConnectionPoint::OnAdvise<ept id=\"p1\">](#cconnectionpoint__onadvise)</ept>","source":"[CConnectionPoint::OnAdvise](#cconnectionpoint__onadvise)"},{"content":"Called by the framework when establishing or breaking connections.","pos":[2040,2106]},{"pos":[2111,2188],"content":"<bpt id=\"p1\">[</bpt>CConnectionPoint::QuerySinkInterface<ept id=\"p1\">](#cconnectionpoint__querysinkinterface)</ept>","source":"[CConnectionPoint::QuerySinkInterface](#cconnectionpoint__querysinkinterface)"},{"content":"Retrieves a pointer to the requested sink interface.","pos":[2189,2241]},{"pos":[2251,2258],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Unlike normal OLE interfaces, which are used to implement and expose the functionality of an OLE control, a connection point implements an outgoing interface that is able to initiate actions on other objects, such as firing events and change notifications.","pos":[2262,2518]},{"content":"A connection consists of two parts: the object calling the interface, called the \"source,\" and the object implementing the interface, called the \"sink.\"","pos":[2525,2677]},{"content":"By exposing a connection point, a source allows sinks to establish connections to itself.","pos":[2678,2767]},{"content":"Through the connection point mechanism, a source object obtains a pointer to the sink's implementation of a set of member functions.","pos":[2768,2900]},{"content":"For example, to fire an event implemented by the sink, the source can call the appropriate method of the sink's implementation.","pos":[2901,3028]},{"content":"By default, a <ph id=\"ph1\">`COleControl`</ph>-derived class implements two connection points: one for events and one for property change notifications.","pos":[3035,3168],"source":"By default, a `COleControl`-derived class implements two connection points: one for events and one for property change notifications."},{"content":"These connections are used, respectively, for event firing and for notifying a sink (for example, the control's container) when a property value has changed.","pos":[3169,3326]},{"content":"Support is also provided for OLE controls to implement additional connection points.","pos":[3327,3411]},{"content":"For each additional connection point implemented in your control class, you must declare a \"connection part\" that implements the connection point.","pos":[3412,3558]},{"content":"If you implement one or more connection points, you also need to declare a single \"connection map\" in your control class.","pos":[3559,3680]},{"content":"The following example demonstrates a simple connection map and one connection point for the <ph id=\"ph1\">`Sample`</ph> OLE control, consisting of two fragments of code: the first portion declares the connection map and point; the second implements this map and point.","pos":[3687,3936],"source":"The following example demonstrates a simple connection map and one connection point for the `Sample` OLE control, consisting of two fragments of code: the first portion declares the connection map and point; the second implements this map and point."},{"content":"The first fragment is inserted into the declaration of the control class, under the <ph id=\"ph1\">`protected`</ph> section:","pos":[3937,4041],"source":" The first fragment is inserted into the declaration of the control class, under the `protected` section:"},{"pos":[4048,4140],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCConnectionPoints#7<ept id=\"p2\">](../../mfc/codesnippet/cpp/cconnectionpoint-class_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCConnectionPoints#7](../../mfc/codesnippet/cpp/cconnectionpoint-class_1.h)]"},{"content":"The <ph id=\"ph1\">`BEGIN_CONNECTION_PART`</ph> and <ph id=\"ph2\">`END_CONNECTION_PART`</ph> macros declare an embedded class, <ph id=\"ph3\">`XSampleConnPt`</ph> (derived from <ph id=\"ph4\">`CConnectionPoint`</ph>) that implements this particular connection point.","pos":[4147,4334],"source":"The `BEGIN_CONNECTION_PART` and `END_CONNECTION_PART` macros declare an embedded class, `XSampleConnPt` (derived from `CConnectionPoint`) that implements this particular connection point."},{"content":"If you want to override any <ph id=\"ph1\">`CConnectionPoint`</ph> member functions, or add member functions of your own, declare them between these two macros.","pos":[4335,4475],"source":" If you want to override any `CConnectionPoint` member functions, or add member functions of your own, declare them between these two macros."},{"content":"For example, the <ph id=\"ph1\">`CONNECTION_IID`</ph> macro overrides the <ph id=\"ph2\">`CConnectionPoint::GetIID`</ph> member function when placed between these two macros.","pos":[4476,4610],"source":" For example, the `CONNECTION_IID` macro overrides the `CConnectionPoint::GetIID` member function when placed between these two macros."},{"content":"The second code fragment is inserted into the implementation file (.CPP) of your control class.","pos":[4617,4712]},{"content":"This code implements the connection map, which includes the additional connection point, <ph id=\"ph1\">`SampleConnPt`</ph>:","pos":[4713,4817],"source":" This code implements the connection map, which includes the additional connection point, `SampleConnPt`:"},{"pos":[4824,4918],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCConnectionPoints#2<ept id=\"p2\">](../../mfc/codesnippet/cpp/cconnectionpoint-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCConnectionPoints#2](../../mfc/codesnippet/cpp/cconnectionpoint-class_2.cpp)]"},{"pos":[4925,5055],"content":"Once these code fragments have been inserted, the Sample OLE control exposes a connection point for the <bpt id=\"p1\">**</bpt>ISampleSink<ept id=\"p1\">**</ept> interface.","source":"Once these code fragments have been inserted, the Sample OLE control exposes a connection point for the **ISampleSink** interface."},{"content":"Typically, connection points support \"multicasting\", which is the ability to broadcast to multiple sinks connected to the same interface.","pos":[5062,5199]},{"content":"The following code fragment demonstrates how to accomplish multicasting by iterating through each sink on a connection point:","pos":[5200,5325]},{"pos":[5332,5426],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCConnectionPoints#4<ept id=\"p2\">](../../mfc/codesnippet/cpp/cconnectionpoint-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCConnectionPoints#4](../../mfc/codesnippet/cpp/cconnectionpoint-class_3.cpp)]"},{"content":"This example retrieves the current set of connections on the <ph id=\"ph1\">`SampleConnPt`</ph> connection point with a call to <ph id=\"ph2\">`CConnectionPoint::GetConnections`</ph>.","pos":[5433,5576],"source":"This example retrieves the current set of connections on the `SampleConnPt` connection point with a call to `CConnectionPoint::GetConnections`."},{"content":"It then iterates through the connections and calls <ph id=\"ph1\">`ISampleSink::SinkFunc`</ph> on every active connection.","pos":[5577,5679],"source":" It then iterates through the connections and calls `ISampleSink::SinkFunc` on every active connection."},{"pos":[5686,5804],"content":"For more information on using <ph id=\"ph1\">`CConnectionPoint`</ph>, see the article <bpt id=\"p1\">[</bpt>Connection Points<ept id=\"p1\">](../../mfc/connection-points.md)</ept>.","source":"For more information on using `CConnectionPoint`, see the article [Connection Points](../../mfc/connection-points.md)."},{"pos":[5813,5834],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[5838,5885],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[5892,5945],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[5979,5991],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5995,6016],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxdisp.h","source":"**Header:** afxdisp.h"},{"pos":[6026,6111],"content":"<bpt id=\"p1\">&lt;a name=\"cconnectionpoint__cconnectionpoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CConnectionPoint::CConnectionPoint","linkify":"<a name=\"cconnectionpoint__cconnectionpoint\"></a>  CConnectionPoint::CConnectionPoint","source":"<a name=\"cconnectionpoint__cconnectionpoint\"></a>  CConnectionPoint::CConnectionPoint"},{"pos":[6115,6154],"content":"Constructs a <ph id=\"ph1\">`CConnectionPoint`</ph> object.","source":"Constructs a `CConnectionPoint` object."},{"pos":[6199,6280],"content":"<bpt id=\"p1\">&lt;a name=\"cconnectionpoint__getconnections\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CConnectionPoint::GetConnections","linkify":"<a name=\"cconnectionpoint__getconnections\"></a>  CConnectionPoint::GetConnections","source":"<a name=\"cconnectionpoint__getconnections\"></a>  CConnectionPoint::GetConnections"},{"content":"Call this function to retrieve all active connections for a connection point.","pos":[6284,6361]},{"pos":[6421,6433],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to an array of active connections (sinks).","pos":[6437,6489]},{"content":"Some of the pointers in the array may be NULL.","pos":[6490,6536]},{"content":"Each non-NULL pointer in this array can be safely converted to a pointer to the sink interface using a cast operator.","pos":[6537,6654]},{"pos":[6664,6741],"content":"<bpt id=\"p1\">&lt;a name=\"cconnectionpoint__getcontainer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CConnectionPoint::GetContainer","linkify":"<a name=\"cconnectionpoint__getcontainer\"></a>  CConnectionPoint::GetContainer","source":"<a name=\"cconnectionpoint__getcontainer\"></a>  CConnectionPoint::GetContainer"},{"pos":[6745,6840],"content":"Called by the framework to retrieve the <bpt id=\"p1\">**</bpt>IConnectionPointContainer<ept id=\"p1\">**</ept> for the connection point.","source":"Called by the framework to retrieve the **IConnectionPointContainer** for the connection point."},{"pos":[6916,6928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6932,6994],"content":"If successful, a pointer to the container; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, a pointer to the container; otherwise **NULL**."},{"pos":[7004,7011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7015,7091],"content":"This function is typically implemented by the <ph id=\"ph1\">`BEGIN_CONNECTION_PART`</ph> macro.","source":"This function is typically implemented by the `BEGIN_CONNECTION_PART` macro."},{"pos":[7101,7166],"content":"<bpt id=\"p1\">&lt;a name=\"cconnectionpoint__getiid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CConnectionPoint::GetIID","linkify":"<a name=\"cconnectionpoint__getiid\"></a>  CConnectionPoint::GetIID","source":"<a name=\"cconnectionpoint__getiid\"></a>  CConnectionPoint::GetIID"},{"content":"Called by the framework to retrieve the interface ID of a connection point.","pos":[7170,7245]},{"pos":[7301,7313],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the connection point's interface ID.","pos":[7317,7368]},{"pos":[7378,7385],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function to return the interface ID for this connection point.","pos":[7389,7465]},{"pos":[7475,7562],"content":"<bpt id=\"p1\">&lt;a name=\"cconnectionpoint__getmaxconnections\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CConnectionPoint::GetMaxConnections","linkify":"<a name=\"cconnectionpoint__getmaxconnections\"></a>  CConnectionPoint::GetMaxConnections","source":"<a name=\"cconnectionpoint__getmaxconnections\"></a>  CConnectionPoint::GetMaxConnections"},{"content":"Called by the framework to retrieve the maximum number of connections supported by the connection point.","pos":[7566,7670]},{"pos":[7728,7740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The maximum number of connections supported by the control, or -1 if no limit.","pos":[7744,7822]},{"pos":[7832,7839],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation returns -1, indicating no limit.","pos":[7843,7902]},{"content":"Override this function if you want to limit the number of sinks that can connect to your control.","pos":[7909,8006]},{"pos":[8016,8103],"content":"<bpt id=\"p1\">&lt;a name=\"cconnectionpoint__getnextconnection\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CConnectionPoint::GetNextConnection","linkify":"<a name=\"cconnectionpoint__getnextconnection\"></a>  CConnectionPoint::GetNextConnection","source":"<a name=\"cconnectionpoint__getnextconnection\"></a>  CConnectionPoint::GetNextConnection"},{"pos":[8107,8162],"content":"Retrieves a pointer to the connection element at <ph id=\"ph1\">`pos`</ph>.","source":"Retrieves a pointer to the connection element at `pos`."},{"pos":[8240,8250],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous <ph id=\"ph1\">`GetNextConnection`</ph> or <bpt id=\"p2\">[</bpt>GetStartPosition<ept id=\"p2\">](#cconnectionpoint__getstartposition)</ept> call.","pos":[8263,8416],"source":" Specifies a reference to a **POSITION** value returned by a previous `GetNextConnection` or [GetStartPosition](#cconnectionpoint__getstartposition) call."},{"pos":[8426,8438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8442,8506],"content":"A pointer to the connection element specified by <ph id=\"ph1\">`pos`</ph>, or NULL.","source":"A pointer to the connection element specified by `pos`, or NULL."},{"pos":[8516,8523],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is most useful for iterating through all the elements in the connection map.","pos":[8527,8617]},{"content":"When iterating, skip any NULLs returned from this function.","pos":[8618,8677]},{"pos":[8687,8694],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8698,8792],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCConnectionPoints#4<ept id=\"p2\">](../../mfc/codesnippet/cpp/cconnectionpoint-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCConnectionPoints#4](../../mfc/codesnippet/cpp/cconnectionpoint-class_3.cpp)]"},{"pos":[8802,8887],"content":"<bpt id=\"p1\">&lt;a name=\"cconnectionpoint__getstartposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CConnectionPoint::GetStartPosition","linkify":"<a name=\"cconnectionpoint__getstartposition\"></a>  CConnectionPoint::GetStartPosition","source":"<a name=\"cconnectionpoint__getstartposition\"></a>  CConnectionPoint::GetStartPosition"},{"pos":[8891,9035],"content":"Starts a map iteration by returning a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be passed to a <bpt id=\"p2\">[</bpt>GetNextConnection<ept id=\"p2\">](#cconnectionpoint__getnextconnection)</ept> call.","source":"Starts a map iteration by returning a **POSITION** value that can be passed to a [GetNextConnection](#cconnectionpoint__getnextconnection) call."},{"pos":[9098,9110],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9114,9225],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that indicates a starting position for iterating the map; or <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the map is empty.","source":"A **POSITION** value that indicates a starting position for iterating the map; or **NULL** if the map is empty."},{"pos":[9235,9242],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The iteration sequence is not predictable; therefore, the \"first element in the map\" has no special significance.","pos":[9246,9359]},{"pos":[9369,9376],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9381,9477],"content":"See the example for <bpt id=\"p1\">[</bpt>CConnectionPoint::GetNextConnection<ept id=\"p1\">](#cconnectionpoint__getnextconnection)</ept>.","source":"See the example for [CConnectionPoint::GetNextConnection](#cconnectionpoint__getnextconnection)."},{"pos":[9487,9556],"content":"<bpt id=\"p1\">&lt;a name=\"cconnectionpoint__onadvise\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CConnectionPoint::OnAdvise","linkify":"<a name=\"cconnectionpoint__onadvise\"></a>  CConnectionPoint::OnAdvise","source":"<a name=\"cconnectionpoint__onadvise\"></a>  CConnectionPoint::OnAdvise"},{"content":"Called by the framework when a connection is being established or broken.","pos":[9560,9633]},{"pos":[9695,9705],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\"> **</bpt>TRUE<ept id=\"p1\">**</ept>, if a connection is being established; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[9721,9790],"source":" **TRUE**, if a connection is being established; otherwise **FALSE**."},{"pos":[9800,9807],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation does nothing.","pos":[9811,9851]},{"content":"Override this function if you want notification when sinks connect to or disconnect from your connection point.","pos":[9858,9969]},{"pos":[9979,10068],"content":"<bpt id=\"p1\">&lt;a name=\"cconnectionpoint__querysinkinterface\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CConnectionPoint::QuerySinkInterface","linkify":"<a name=\"cconnectionpoint__querysinkinterface\"></a>  CConnectionPoint::QuerySinkInterface","source":"<a name=\"cconnectionpoint__querysinkinterface\"></a>  CConnectionPoint::QuerySinkInterface"},{"content":"Retrieves a pointer to the requested sink interface.","pos":[10072,10124]},{"pos":[10236,10246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the sink interface being requested.","pos":[10264,10317]},{"content":"A pointer to the interface pointer identified by <ph id=\"ph1\">`pUnkSink`</ph>.","pos":[10341,10401],"source":" A pointer to the interface pointer identified by `pUnkSink`."},{"content":"If the object does not support this interface, <ph id=\"ph1\">\\*</ph> <ph id=\"ph2\">`ppInterface`</ph> is set to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[10402,10485],"source":" If the object does not support this interface, \\* `ppInterface` is set to **NULL**."},{"pos":[10495,10507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10511,10538],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[10547,10555],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CCmdTarget Class<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[10559,10619],"source":"[CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","pos":[10622,10670],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"CConnectionPoint Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CConnectionPoint\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CConnectionPoint class\"\nms.assetid: f0f23a1e-5e8c-41a9-aa6c-1a4793b28e8f\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CConnectionPoint Class\nDefines a special type of interface used to communicate with other OLE objects, called a \"connection point.\"  \n  \n## Syntax  \n  \n```  \nclass CConnectionPoint : public CCmdTarget  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CConnectionPoint::CConnectionPoint](#cconnectionpoint__cconnectionpoint)|Constructs a `CConnectionPoint` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CConnectionPoint::GetConnections](#cconnectionpoint__getconnections)|Retrieves all connection points in a connection map.|  \n|[CConnectionPoint::GetContainer](#cconnectionpoint__getcontainer)|Retrieves the container of the control that owns the connection map.|  \n|[CConnectionPoint::GetIID](#cconnectionpoint__getiid)|Retrieves the interface ID of a connection point.|  \n|[CConnectionPoint::GetMaxConnections](#cconnectionpoint__getmaxconnections)|Retrieves the maximum number of connection points supported by a control.|  \n|[CConnectionPoint::GetNextConnection](#cconnectionpoint__getnextconnection)|Retrieves a pointer to the connection element at `pos`.|  \n|[CConnectionPoint::GetStartPosition](#cconnectionpoint__getstartposition)|Starts a map iteration by returning a **POSITION** value that can be passed to a `GetNextConnection` call.|  \n|[CConnectionPoint::OnAdvise](#cconnectionpoint__onadvise)|Called by the framework when establishing or breaking connections.|  \n|[CConnectionPoint::QuerySinkInterface](#cconnectionpoint__querysinkinterface)|Retrieves a pointer to the requested sink interface.|  \n  \n## Remarks  \n Unlike normal OLE interfaces, which are used to implement and expose the functionality of an OLE control, a connection point implements an outgoing interface that is able to initiate actions on other objects, such as firing events and change notifications.  \n  \n A connection consists of two parts: the object calling the interface, called the \"source,\" and the object implementing the interface, called the \"sink.\" By exposing a connection point, a source allows sinks to establish connections to itself. Through the connection point mechanism, a source object obtains a pointer to the sink's implementation of a set of member functions. For example, to fire an event implemented by the sink, the source can call the appropriate method of the sink's implementation.  \n  \n By default, a `COleControl`-derived class implements two connection points: one for events and one for property change notifications. These connections are used, respectively, for event firing and for notifying a sink (for example, the control's container) when a property value has changed. Support is also provided for OLE controls to implement additional connection points. For each additional connection point implemented in your control class, you must declare a \"connection part\" that implements the connection point. If you implement one or more connection points, you also need to declare a single \"connection map\" in your control class.  \n  \n The following example demonstrates a simple connection map and one connection point for the `Sample` OLE control, consisting of two fragments of code: the first portion declares the connection map and point; the second implements this map and point. The first fragment is inserted into the declaration of the control class, under the `protected` section:  \n  \n [!code-cpp[NVC_MFCConnectionPoints#7](../../mfc/codesnippet/cpp/cconnectionpoint-class_1.h)]  \n  \n The `BEGIN_CONNECTION_PART` and `END_CONNECTION_PART` macros declare an embedded class, `XSampleConnPt` (derived from `CConnectionPoint`) that implements this particular connection point. If you want to override any `CConnectionPoint` member functions, or add member functions of your own, declare them between these two macros. For example, the `CONNECTION_IID` macro overrides the `CConnectionPoint::GetIID` member function when placed between these two macros.  \n  \n The second code fragment is inserted into the implementation file (.CPP) of your control class. This code implements the connection map, which includes the additional connection point, `SampleConnPt`:  \n  \n [!code-cpp[NVC_MFCConnectionPoints#2](../../mfc/codesnippet/cpp/cconnectionpoint-class_2.cpp)]  \n  \n Once these code fragments have been inserted, the Sample OLE control exposes a connection point for the **ISampleSink** interface.  \n  \n Typically, connection points support \"multicasting\", which is the ability to broadcast to multiple sinks connected to the same interface. The following code fragment demonstrates how to accomplish multicasting by iterating through each sink on a connection point:  \n  \n [!code-cpp[NVC_MFCConnectionPoints#4](../../mfc/codesnippet/cpp/cconnectionpoint-class_3.cpp)]  \n  \n This example retrieves the current set of connections on the `SampleConnPt` connection point with a call to `CConnectionPoint::GetConnections`. It then iterates through the connections and calls `ISampleSink::SinkFunc` on every active connection.  \n  \n For more information on using `CConnectionPoint`, see the article [Connection Points](../../mfc/connection-points.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n `CConnectionPoint`  \n  \n## Requirements  \n **Header:** afxdisp.h  \n  \n##  <a name=\"cconnectionpoint__cconnectionpoint\"></a>  CConnectionPoint::CConnectionPoint  \n Constructs a `CConnectionPoint` object.  \n  \n```  \nCConnectionPoint();\n```  \n  \n##  <a name=\"cconnectionpoint__getconnections\"></a>  CConnectionPoint::GetConnections  \n Call this function to retrieve all active connections for a connection point.  \n  \n```  \nconst CPtrArray* GetConnections();\n```  \n  \n### Return Value  \n A pointer to an array of active connections (sinks). Some of the pointers in the array may be NULL. Each non-NULL pointer in this array can be safely converted to a pointer to the sink interface using a cast operator.  \n  \n##  <a name=\"cconnectionpoint__getcontainer\"></a>  CConnectionPoint::GetContainer  \n Called by the framework to retrieve the **IConnectionPointContainer** for the connection point.  \n  \n```  \nvirtual LPCONNECTIONPOINTCONTAINER GetContainer();\n```  \n  \n### Return Value  \n If successful, a pointer to the container; otherwise **NULL**.  \n  \n### Remarks  \n This function is typically implemented by the `BEGIN_CONNECTION_PART` macro.  \n  \n##  <a name=\"cconnectionpoint__getiid\"></a>  CConnectionPoint::GetIID  \n Called by the framework to retrieve the interface ID of a connection point.  \n  \n```  \nvirtual REFIID GetIID() = 0;  \n```  \n  \n### Return Value  \n A reference to the connection point's interface ID.  \n  \n### Remarks  \n Override this function to return the interface ID for this connection point.  \n  \n##  <a name=\"cconnectionpoint__getmaxconnections\"></a>  CConnectionPoint::GetMaxConnections  \n Called by the framework to retrieve the maximum number of connections supported by the connection point.  \n  \n```  \nvirtual int GetMaxConnections();\n```  \n  \n### Return Value  \n The maximum number of connections supported by the control, or -1 if no limit.  \n  \n### Remarks  \n The default implementation returns -1, indicating no limit.  \n  \n Override this function if you want to limit the number of sinks that can connect to your control.  \n  \n##  <a name=\"cconnectionpoint__getnextconnection\"></a>  CConnectionPoint::GetNextConnection  \n Retrieves a pointer to the connection element at `pos`.  \n  \n```  \nLPUNKNOWN GetNextConnection(POSITION& pos) const;\n\n \n```  \n  \n### Parameters  \n `pos`  \n Specifies a reference to a **POSITION** value returned by a previous `GetNextConnection` or [GetStartPosition](#cconnectionpoint__getstartposition) call.  \n  \n### Return Value  \n A pointer to the connection element specified by `pos`, or NULL.  \n  \n### Remarks  \n This function is most useful for iterating through all the elements in the connection map. When iterating, skip any NULLs returned from this function.  \n  \n### Example  \n [!code-cpp[NVC_MFCConnectionPoints#4](../../mfc/codesnippet/cpp/cconnectionpoint-class_3.cpp)]  \n  \n##  <a name=\"cconnectionpoint__getstartposition\"></a>  CConnectionPoint::GetStartPosition  \n Starts a map iteration by returning a **POSITION** value that can be passed to a [GetNextConnection](#cconnectionpoint__getnextconnection) call.  \n  \n```  \nPOSITION GetStartPosition() const;\n\n \n```  \n  \n### Return Value  \n A **POSITION** value that indicates a starting position for iterating the map; or **NULL** if the map is empty.  \n  \n### Remarks  \n The iteration sequence is not predictable; therefore, the \"first element in the map\" has no special significance.  \n  \n### Example  \n  See the example for [CConnectionPoint::GetNextConnection](#cconnectionpoint__getnextconnection).  \n  \n##  <a name=\"cconnectionpoint__onadvise\"></a>  CConnectionPoint::OnAdvise  \n Called by the framework when a connection is being established or broken.  \n  \n```  \nvirtual void OnAdvise(BOOL bAdvise);\n```  \n  \n### Parameters  \n `bAdvise`  \n **TRUE**, if a connection is being established; otherwise **FALSE**.  \n  \n### Remarks  \n The default implementation does nothing.  \n  \n Override this function if you want notification when sinks connect to or disconnect from your connection point.  \n  \n##  <a name=\"cconnectionpoint__querysinkinterface\"></a>  CConnectionPoint::QuerySinkInterface  \n Retrieves a pointer to the requested sink interface.  \n  \n```  \nvirtual HRESULT QuerySinkInterface(\n    LPUNKNOWN pUnkSink,  \n    void** ppInterface);\n```  \n  \n### Parameters  \n `pUnkSink`  \n The identifier of the sink interface being requested.  \n  \n `ppInterface`  \n A pointer to the interface pointer identified by `pUnkSink`. If the object does not support this interface, \\* `ppInterface` is set to **NULL**.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n## See Also  \n [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n"}