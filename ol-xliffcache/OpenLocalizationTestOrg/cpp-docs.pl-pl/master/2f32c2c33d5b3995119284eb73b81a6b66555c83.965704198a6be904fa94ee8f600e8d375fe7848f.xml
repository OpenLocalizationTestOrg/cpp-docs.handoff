{"nodes":[{"pos":[12,56],"content":"CPaneContainerManager Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CPaneContainerManager Class | Microsoft Docs","pos":[0,44]}]},{"content":"CPaneContainerManager Class","pos":[637,664]},{"pos":[665,761],"content":"The <ph id=\"ph1\">`CPaneContainerManager`</ph> class manages the storage and display of the current docking layout.","source":"The `CPaneContainerManager` class manages the storage and display of the current docking layout."},{"content":"Syntax","pos":[770,776]},{"content":"Members","pos":[847,854]},{"content":"Public Methods","pos":[864,878]},{"content":"Name","pos":[885,889]},{"content":"Description","pos":[890,901]},{"content":"CPaneContainerManager::AddPane","pos":[940,970]},{"content":"CPaneContainerManager::AddPaneContainerManager","pos":[1011,1057]},{"content":"CPaneContainerManager::AddPaneContainerManagerToDockablePane","pos":[1114,1174]},{"content":"CPaneContainerManager::AddPanesToList","pos":[1245,1282]},{"content":"CPaneContainerManager::AddPaneToList","pos":[1330,1366]},{"content":"CPaneContainerManager::AddPaneToRecentPaneContainer","pos":[1413,1464]},{"content":"CPaneContainerManager::CalcRects","pos":[1526,1558]},{"content":"CPaneContainerManager::CanBeAttached","pos":[1601,1637]},{"content":"CPaneContainerManager::CheckAndRemoveNonValidPane","pos":[1684,1733]},{"content":"CPaneContainerManager::CheckForMiniFrameAndCaption","pos":[1793,1843]},{"content":"CPaneContainerManager::Create","pos":[1904,1933]},{"content":"CPaneContainerManager::DoesAllowDynInsertBefore","pos":[1973,2020]},{"content":"CPaneContainerManager::DoesContainFloatingPane","pos":[2078,2124]},{"content":"CPaneContainerManager::EnableGrippers","pos":[2181,2218]},{"content":"CPaneContainerManager::FindPaneContainer","pos":[2266,2306]},{"content":"CPaneContainerManager::FindTabbedPane","pos":[2357,2394]},{"content":"CPaneContainerManager::GetAvailableSpace","pos":[2442,2482]},{"content":"CPaneContainerManager::GetDefaultPaneDivider","pos":[2533,2577]},{"content":"CPaneContainerManager::GetDockSiteFrameWnd","pos":[2632,2674]},{"content":"CPaneContainerManager::GetFirstPane","pos":[2727,2762]},{"content":"CPaneContainerManager::GetFirstVisiblePane","pos":[2808,2850]},{"content":"CPaneContainerManager::GetMinMaxOffset","pos":[2903,2941]},{"content":"CPaneContainerManager::GetMinSize","pos":[2990,3023]},{"content":"CPaneContainerManager::GetNodeCount","pos":[3067,3102]},{"content":"CPaneContainerManager::GetPaneContainerRTC","pos":[3148,3190]},{"content":"CPaneContainerManager::GetPaneCount","pos":[3243,3278]},{"content":"CPaneContainerManager::GetTotalRefCount","pos":[3324,3363]},{"content":"CPaneContainerManager::GetVisiblePaneCount","pos":[3413,3455]},{"content":"CPaneContainerManager::GetWindowRect","pos":[3508,3544]},{"content":"CPaneContainerManager::HideAll","pos":[3591,3621]},{"content":"CPaneContainerManager::InsertPane","pos":[3662,3695]},{"content":"CPaneContainerManager::IsAutoHideMode","pos":[3739,3776]},{"content":"CPaneContainerManager::IsEmpty","pos":[3824,3854]},{"content":"CPaneContainerManager::IsRootPaneContainerVisible","pos":[3895,3944]},{"content":"CPaneContainerManager::NotifyPaneDivider","pos":[4004,4044]},{"content":"CPaneContainerManager::OnPaneDividerMove","pos":[4095,4135]},{"content":"CPaneContainerManager::OnShowPane","pos":[4186,4219]},{"content":"CPaneContainerManager::PaneFromPoint","pos":[4263,4299]},{"content":"CPaneContainerManager::ReleaseEmptyPaneContainers","pos":[4346,4395]},{"content":"CPaneContainerManager::RemoveAllPanesAndPaneDividers","pos":[4455,4507]},{"content":"CPaneContainerManager::RemoveNonValidPanes","pos":[4570,4612]},{"content":"CPaneContainerManager::RemovePaneDivider","pos":[4665,4705]},{"content":"CPaneContainerManager::RemovePaneFromPaneContainer","pos":[4756,4806]},{"content":"CPaneContainerManager::ReplacePane","pos":[4867,4901]},{"content":"CPaneContainerManager::ResizePaneContainers","pos":[4946,4989]},{"content":"CPaneContainerManager::Serialize","pos":[5043,5075]},{"content":"Reads or writes this object from or to an archive.","pos":[5112,5162]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CObject::Serialize<ept id=\"p1\">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept>.)","pos":[5163,5253],"source":" (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)"},{"content":"CPaneContainerManager::SetDefaultPaneDividerForPanes","pos":[5259,5311]},{"content":"CPaneContainerManager::SetPaneContainerRTC","pos":[5374,5416]},{"content":"CPaneContainerManager::SetResizeMode","pos":[5469,5505]},{"content":"CPaneContainerManager::StoreRecentDockSiteInfo","pos":[5552,5598]},{"content":"Remarks","pos":[5660,5667]},{"pos":[5671,5944],"content":"The framework automatically creates instances of <ph id=\"ph1\">`CPaneContainerManager`</ph> objects and embeds them either into <bpt id=\"p1\">[</bpt>CPaneDivider Class<ept id=\"p1\">](../../mfc/reference/cpanedivider-class.md)</ept> objects or into <bpt id=\"p2\">[</bpt>CMultiPaneFrameWnd Class<ept id=\"p2\">](../../mfc/reference/cmultipaneframewnd-class.md)</ept> objects.","source":"The framework automatically creates instances of `CPaneContainerManager` objects and embeds them either into [CPaneDivider Class](../../mfc/reference/cpanedivider-class.md) objects or into [CMultiPaneFrameWnd Class](../../mfc/reference/cmultipaneframewnd-class.md) objects."},{"pos":[5951,6120],"content":"The <ph id=\"ph1\">`CPaneContainerManager`</ph> class stores a pointer to the root of a binary tree that is built from <bpt id=\"p1\">[</bpt>CPaneContainer<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept> objects.","source":"The `CPaneContainerManager` class stores a pointer to the root of a binary tree that is built from [CPaneContainer](../../mfc/reference/cpanecontainer-class.md) objects."},{"content":"Example","pos":[6129,6136]},{"content":"The following example demonstrates how to get a reference to a <ph id=\"ph1\">`CPaneContainerManager`</ph> object.","pos":[6140,6234],"source":"The following example demonstrates how to get a reference to a `CPaneContainerManager` object."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Set Pane Size sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[6235,6320],"source":" This code snippet is part of the [Set Pane Size sample](../../visual-cpp-samples.md)."},{"pos":[6338,6359],"content":"NVC_MFC_SetPaneSize#5"},{"content":"Inheritance Hierarchy","pos":[6441,6462]},{"content":"CObject","pos":[6467,6474]},{"content":"CPaneContainerManager","pos":[6521,6542]},{"content":"Requirements","pos":[6604,6616]},{"pos":[6620,6657],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxpanecontainermanager.h","source":"**Header:** afxpanecontainermanager.h"},{"pos":[6714,6744],"content":"CPaneContainerManager::AddPane"},{"content":"Parameters","pos":[6927,6937]},{"pos":[6941,6945],"content":"[in]"},{"content":"Remarks","pos":[6974,6981]},{"pos":[7054,7100],"content":"CPaneContainerManager::AddPaneContainerManager"},{"content":"Parameters","pos":[7493,7503]},{"content":"[in]","pos":[7507,7511]},{"content":"[in]","pos":[7528,7532]},{"content":"[in]","pos":[7549,7553]},{"content":"[in]","pos":[7577,7581]},{"content":"[in]","pos":[7599,7603]},{"content":"Return Value","pos":[7621,7633]},{"content":"Remarks","pos":[7643,7650]},{"pos":[7737,7797],"content":"CPaneContainerManager::AddPaneContainerManagerToDockablePane"},{"content":"Parameters","pos":[8057,8067]},{"content":"[in]","pos":[8071,8075]},{"content":"[in]","pos":[8099,8103]},{"content":"Return Value","pos":[8126,8138]},{"content":"Remarks","pos":[8148,8155]},{"pos":[8219,8256],"content":"CPaneContainerManager::AddPanesToList"},{"content":"Parameters","pos":[8464,8474]},{"content":"[in]","pos":[8478,8482]},{"content":"[in]","pos":[8504,8508]},{"content":"Remarks","pos":[8532,8539]},{"pos":[8602,8638],"content":"CPaneContainerManager::AddPaneToList"},{"content":"Parameters","pos":[8819,8829]},{"pos":[8833,8837],"content":"[in]"},{"content":"Remarks","pos":[8866,8873]},{"pos":[8951,9002],"content":"CPaneContainerManager::AddPaneToRecentPaneContainer"},{"content":"Parameters","pos":[9254,9264]},{"content":"[in]","pos":[9268,9272]},{"content":"[in]","pos":[9288,9292]},{"content":"Return Value","pos":[9321,9333]},{"content":"Remarks","pos":[9343,9350]},{"pos":[9409,9441],"content":"CPaneContainerManager::CalcRects"},{"content":"Parameters","pos":[9774,9784]},{"content":"[in]","pos":[9788,9792]},{"content":"[in]","pos":[9811,9815]},{"content":"[in]","pos":[9834,9838]},{"content":"[in]","pos":[9855,9859]},{"content":"[in]","pos":[9879,9883]},{"content":"[in]","pos":[9901,9905]},{"content":"[in]","pos":[9927,9931]},{"content":"Remarks","pos":[9959,9966]},{"pos":[10029,10065],"content":"CPaneContainerManager::CanBeAttached"},{"content":"Return Value","pos":[10232,10244]},{"content":"Remarks","pos":[10254,10261]},{"pos":[10337,10386],"content":"CPaneContainerManager::CheckAndRemoveNonValidPane"},{"content":"Parameters","pos":[10559,10569]},{"pos":[10573,10577],"content":"[in]"},{"content":"Return Value","pos":[10594,10606]},{"content":"Remarks","pos":[10616,10623]},{"pos":[10700,10750],"content":"CPaneContainerManager::CheckForMiniFrameAndCaption"},{"content":"Parameters","pos":[10981,10991]},{"content":"[in]","pos":[10995,10999]},{"content":"[in]","pos":[11011,11015]},{"content":"Return Value","pos":[11046,11058]},{"content":"Remarks","pos":[11068,11075]},{"pos":[11131,11160],"content":"CPaneContainerManager::Create"},{"content":"Parameters","pos":[11411,11421]},{"content":"[in]","pos":[11425,11429]},{"content":"[in]","pos":[11446,11450]},{"content":"[in]","pos":[11471,11475]},{"content":"Return Value","pos":[11501,11513]},{"content":"Remarks","pos":[11523,11530]},{"pos":[11604,11651],"content":"CPaneContainerManager::DoesAllowDynInsertBefore"},{"content":"Return Value","pos":[11829,11841]},{"content":"Remarks","pos":[11851,11858]},{"pos":[11931,11977],"content":"CPaneContainerManager::DoesContainFloatingPane"},{"content":"Return Value","pos":[12145,12157]},{"content":"Remarks","pos":[12167,12174]},{"pos":[12238,12275],"content":"CPaneContainerManager::EnableGrippers"},{"content":"Parameters","pos":[12446,12456]},{"pos":[12460,12464],"content":"[in]"},{"content":"Remarks","pos":[12484,12491]},{"pos":[12558,12598],"content":"CPaneContainerManager::FindPaneContainer"},{"content":"Parameters","pos":[12817,12827]},{"content":"[in]","pos":[12831,12835]},{"content":"[in]","pos":[12846,12850]},{"content":"Return Value","pos":[12871,12883]},{"content":"Remarks","pos":[12893,12900]},{"pos":[12964,13001],"content":"CPaneContainerManager::FindTabbedPane"},{"content":"Parameters","pos":[13170,13180]},{"pos":[13184,13188],"content":"[in]"},{"content":"Return Value","pos":[13204,13216]},{"content":"Remarks","pos":[13226,13233]},{"pos":[13300,13340],"content":"CPaneContainerManager::GetAvailableSpace"},{"content":"Parameters","pos":[13522,13532]},{"pos":[13536,13540],"content":"[in]"},{"content":"Remarks","pos":[13557,13564]},{"pos":[13635,13679],"content":"CPaneContainerManager::GetDefaultPaneDivider"},{"content":"Return Value","pos":[13855,13867]},{"content":"Remarks","pos":[13877,13884]},{"pos":[13953,13995],"content":"CPaneContainerManager::GetDockSiteFrameWnd"},{"content":"Return Value","pos":[14160,14172]},{"content":"Remarks","pos":[14182,14189]},{"pos":[14251,14286],"content":"CPaneContainerManager::GetFirstPane"},{"content":"Return Value","pos":[14458,14470]},{"content":"Remarks","pos":[14480,14487]},{"pos":[14556,14598],"content":"CPaneContainerManager::GetFirstVisiblePane"},{"content":"Return Value","pos":[14772,14784]},{"content":"Remarks","pos":[14794,14801]},{"pos":[14866,14904],"content":"CPaneContainerManager::GetMinMaxOffset"},{"content":"Parameters","pos":[15154,15164]},{"content":"[in]","pos":[15168,15172]},{"content":"[in]","pos":[15186,15190]},{"content":"[in]","pos":[15207,15211]},{"content":"[in]","pos":[15228,15232]},{"content":"Remarks","pos":[15250,15257]},{"pos":[15317,15350],"content":"CPaneContainerManager::GetMinSize"},{"content":"Parameters","pos":[15516,15526]},{"pos":[15530,15534],"content":"[in]"},{"content":"Remarks","pos":[15551,15558]},{"pos":[15620,15655],"content":"CPaneContainerManager::GetNodeCount"},{"content":"Return Value","pos":[15812,15824]},{"content":"Remarks","pos":[15834,15841]},{"pos":[15910,15952],"content":"CPaneContainerManager::GetPaneContainerRTC"},{"content":"Return Value","pos":[16127,16139]},{"content":"Remarks","pos":[16149,16156]},{"pos":[16218,16253],"content":"CPaneContainerManager::GetPaneCount"},{"content":"Return Value","pos":[16410,16422]},{"content":"Remarks","pos":[16432,16439]},{"pos":[16505,16544],"content":"CPaneContainerManager::GetTotalRefCount"},{"content":"Return Value","pos":[16705,16717]},{"content":"Remarks","pos":[16727,16734]},{"pos":[16803,16845],"content":"CPaneContainerManager::GetVisiblePaneCount"},{"content":"Return Value","pos":[17017,17029]},{"content":"Remarks","pos":[17039,17046]},{"pos":[17109,17145],"content":"CPaneContainerManager::GetWindowRect"},{"content":"Parameters","pos":[17323,17333]},{"pos":[17337,17341],"content":"[in]"},{"content":"Remarks","pos":[17358,17365]},{"pos":[17422,17452],"content":"CPaneContainerManager::HideAll"},{"content":"Remarks","pos":[17604,17611]},{"pos":[17671,17704],"content":"CPaneContainerManager::InsertPane"},{"content":"Parameters","pos":[18039,18049]},{"content":"[in]","pos":[18053,18057]},{"content":"[in]","pos":[18083,18087]},{"content":"[in]","pos":[18111,18115]},{"content":"[in]","pos":[18133,18137]},{"content":"[in]","pos":[18150,18154]},{"content":"Return Value","pos":[18177,18189]},{"content":"Remarks","pos":[18199,18206]},{"pos":[18270,18307],"content":"CPaneContainerManager::IsAutoHideMode"},{"content":"Return Value","pos":[18467,18479]},{"content":"Remarks","pos":[18489,18496]},{"pos":[18553,18583],"content":"CPaneContainerManager::IsEmpty"},{"content":"Return Value","pos":[18736,18748]},{"content":"Remarks","pos":[18758,18765]},{"pos":[18841,18890],"content":"CPaneContainerManager::IsRootPaneContainerVisible"},{"content":"Return Value","pos":[19070,19082]},{"content":"Remarks","pos":[19092,19099]},{"pos":[19166,19206],"content":"CPaneContainerManager::NotifyPaneDivider"},{"content":"Remarks","pos":[19360,19367]},{"pos":[19434,19474],"content":"CPaneContainerManager::OnPaneDividerMove"},{"content":"Parameters","pos":[19717,19727]},{"content":"[in]","pos":[19731,19735]},{"content":"[in]","pos":[19749,19753]},{"content":"[in]","pos":[19766,19770]},{"content":"[in]","pos":[19784,19788]},{"content":"Return Value","pos":[19805,19817]},{"content":"Remarks","pos":[19827,19834]},{"pos":[19894,19927],"content":"CPaneContainerManager::OnShowPane"},{"content":"Parameters","pos":[20124,20134]},{"content":"[in]","pos":[20138,20142]},{"content":"[in]","pos":[20153,20157]},{"content":"Return Value","pos":[20175,20187]},{"content":"Remarks","pos":[20197,20204]},{"pos":[20267,20303],"content":"CPaneContainerManager::PaneFromPoint"},{"content":"Parameters","pos":[20580,20590]},{"content":"[in]","pos":[20594,20598]},{"content":"[in]","pos":[20610,20614]},{"content":"[in]","pos":[20633,20637]},{"content":"[in]","pos":[20653,20657]},{"content":"[in]","pos":[20674,20678]},{"content":"Return Value","pos":[20699,20711]},{"content":"Remarks","pos":[20721,20728]},{"pos":[20804,20853],"content":"CPaneContainerManager::ReleaseEmptyPaneContainers"},{"content":"Remarks","pos":[21016,21023]},{"pos":[21102,21154],"content":"CPaneContainerManager::RemoveAllPanesAndPaneDividers"},{"content":"Remarks","pos":[21320,21327]},{"pos":[21396,21438],"content":"CPaneContainerManager::RemoveNonValidPanes"},{"content":"Remarks","pos":[21594,21601]},{"pos":[21668,21708],"content":"CPaneContainerManager::RemovePaneDivider"},{"content":"Parameters","pos":[21891,21901]},{"pos":[21905,21909],"content":"[in]"},{"content":"Remarks","pos":[21929,21936]},{"pos":[22013,22063],"content":"CPaneContainerManager::RemovePaneFromPaneContainer"},{"content":"Parameters","pos":[22261,22271]},{"pos":[22275,22279],"content":"[in]"},{"content":"Return Value","pos":[22303,22315]},{"content":"Remarks","pos":[22325,22332]},{"pos":[22393,22427],"content":"CPaneContainerManager::ReplacePane"},{"content":"Parameters","pos":[22640,22650]},{"content":"[in]","pos":[22654,22658]},{"content":"[in]","pos":[22672,22676]},{"content":"Return Value","pos":[22696,22708]},{"content":"Remarks","pos":[22718,22725]},{"pos":[22795,22838],"content":"CPaneContainerManager::ResizePaneContainers"},{"content":"Parameters","pos":[23148,23158]},{"content":"[in]","pos":[23162,23166]},{"content":"[in]","pos":[23178,23182]},{"content":"[in]","pos":[23196,23200]},{"content":"[in]","pos":[23214,23218]},{"content":"[in]","pos":[23229,23233]},{"content":"Remarks","pos":[23250,23257]},{"pos":[23316,23348],"content":"CPaneContainerManager::Serialize"},{"content":"Parameters","pos":[23506,23516]},{"pos":[23520,23524],"content":"[in]"},{"content":"Remarks","pos":[23539,23546]},{"pos":[23625,23677],"content":"CPaneContainerManager::SetDefaultPaneDividerForPanes"},{"content":"Parameters","pos":[23864,23874]},{"pos":[23878,23882],"content":"[in]"},{"content":"Remarks","pos":[23902,23909]},{"pos":[23978,24020],"content":"CPaneContainerManager::SetPaneContainerRTC"},{"content":"Parameters","pos":[24204,24214]},{"pos":[24218,24222],"content":"[in]"},{"content":"Remarks","pos":[24248,24255]},{"pos":[24318,24354],"content":"CPaneContainerManager::SetResizeMode"},{"content":"Parameters","pos":[24524,24534]},{"pos":[24538,24542],"content":"[in]"},{"content":"Remarks","pos":[24562,24569]},{"pos":[24642,24688],"content":"CPaneContainerManager::StoreRecentDockSiteInfo"},{"content":"Parameters","pos":[24875,24885]},{"pos":[24889,24893],"content":"[in]"},{"content":"Remarks","pos":[24910,24917]},{"content":"See Also","pos":[24926,24934]},{"content":"Hierarchy Chart","pos":[24939,24954]},{"content":"Classes","pos":[24991,24998]},{"content":"CObject Class","pos":[25041,25054]},{"content":"CPaneContainer Class","pos":[25099,25119]},{"content":"CPaneDivider Class","pos":[25171,25189]}],"content":"---\ntitle: \"CPaneContainerManager Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CPaneContainerManager\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CPaneContainerManager class\"\nms.assetid: 3d974c15-a62f-4648-bb5b-cc31ab7950af\ncaps.latest.revision: 29\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CPaneContainerManager Class\nThe `CPaneContainerManager` class manages the storage and display of the current docking layout.  \n  \n## Syntax  \n  \n```  \nclass CPaneContainerManager : public CObject  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneContainerManager::AddPane](#cpanecontainermanager__addpane)||  \n|[CPaneContainerManager::AddPaneContainerManager](#cpanecontainermanager__addpanecontainermanager)||  \n|[CPaneContainerManager::AddPaneContainerManagerToDockablePane](#cpanecontainermanager__addpanecontainermanagertodockablepane)||  \n|[CPaneContainerManager::AddPanesToList](#cpanecontainermanager__addpanestolist)||  \n|[CPaneContainerManager::AddPaneToList](#cpanecontainermanager__addpanetolist)||  \n|[CPaneContainerManager::AddPaneToRecentPaneContainer](#cpanecontainermanager__addpanetorecentpanecontainer)||  \n|[CPaneContainerManager::CalcRects](#cpanecontainermanager__calcrects)||  \n|[CPaneContainerManager::CanBeAttached](#cpanecontainermanager__canbeattached)||  \n|[CPaneContainerManager::CheckAndRemoveNonValidPane](#cpanecontainermanager__checkandremovenonvalidpane)||  \n|[CPaneContainerManager::CheckForMiniFrameAndCaption](#cpanecontainermanager__checkforminiframeandcaption)||  \n|[CPaneContainerManager::Create](#cpanecontainermanager__create)||  \n|[CPaneContainerManager::DoesAllowDynInsertBefore](#cpanecontainermanager__doesallowdyninsertbefore)||  \n|[CPaneContainerManager::DoesContainFloatingPane](#cpanecontainermanager__doescontainfloatingpane)||  \n|[CPaneContainerManager::EnableGrippers](#cpanecontainermanager__enablegrippers)||  \n|[CPaneContainerManager::FindPaneContainer](#cpanecontainermanager__findpanecontainer)||  \n|[CPaneContainerManager::FindTabbedPane](#cpanecontainermanager__findtabbedpane)||  \n|[CPaneContainerManager::GetAvailableSpace](#cpanecontainermanager__getavailablespace)||  \n|[CPaneContainerManager::GetDefaultPaneDivider](#cpanecontainermanager__getdefaultpanedivider)||  \n|[CPaneContainerManager::GetDockSiteFrameWnd](#cpanecontainermanager__getdocksiteframewnd)||  \n|[CPaneContainerManager::GetFirstPane](#cpanecontainermanager__getfirstpane)||  \n|[CPaneContainerManager::GetFirstVisiblePane](#cpanecontainermanager__getfirstvisiblepane)||  \n|[CPaneContainerManager::GetMinMaxOffset](#cpanecontainermanager__getminmaxoffset)||  \n|[CPaneContainerManager::GetMinSize](#cpanecontainermanager__getminsize)||  \n|[CPaneContainerManager::GetNodeCount](#cpanecontainermanager__getnodecount)||  \n|[CPaneContainerManager::GetPaneContainerRTC](#cpanecontainermanager__getpanecontainerrtc)||  \n|[CPaneContainerManager::GetPaneCount](#cpanecontainermanager__getpanecount)||  \n|[CPaneContainerManager::GetTotalRefCount](#cpanecontainermanager__gettotalrefcount)||  \n|[CPaneContainerManager::GetVisiblePaneCount](#cpanecontainermanager__getvisiblepanecount)||  \n|[CPaneContainerManager::GetWindowRect](#cpanecontainermanager__getwindowrect)||  \n|[CPaneContainerManager::HideAll](#cpanecontainermanager__hideall)||  \n|[CPaneContainerManager::InsertPane](#cpanecontainermanager__insertpane)||  \n|[CPaneContainerManager::IsAutoHideMode](#cpanecontainermanager__isautohidemode)||  \n|[CPaneContainerManager::IsEmpty](#cpanecontainermanager__isempty)||  \n|[CPaneContainerManager::IsRootPaneContainerVisible](#cpanecontainermanager__isrootpanecontainervisible)||  \n|[CPaneContainerManager::NotifyPaneDivider](#cpanecontainermanager__notifypanedivider)||  \n|[CPaneContainerManager::OnPaneDividerMove](#cpanecontainermanager__onpanedividermove)||  \n|[CPaneContainerManager::OnShowPane](#cpanecontainermanager__onshowpane)||  \n|[CPaneContainerManager::PaneFromPoint](#cpanecontainermanager__panefrompoint)||  \n|[CPaneContainerManager::ReleaseEmptyPaneContainers](#cpanecontainermanager__releaseemptypanecontainers)||  \n|[CPaneContainerManager::RemoveAllPanesAndPaneDividers](#cpanecontainermanager__removeallpanesandpanedividers)||  \n|[CPaneContainerManager::RemoveNonValidPanes](#cpanecontainermanager__removenonvalidpanes)||  \n|[CPaneContainerManager::RemovePaneDivider](#cpanecontainermanager__removepanedivider)||  \n|[CPaneContainerManager::RemovePaneFromPaneContainer](#cpanecontainermanager__removepanefrompanecontainer)||  \n|[CPaneContainerManager::ReplacePane](#cpanecontainermanager__replacepane)||  \n|[CPaneContainerManager::ResizePaneContainers](#cpanecontainermanager__resizepanecontainers)||  \n|[CPaneContainerManager::Serialize](#cpanecontainermanager__serialize)|Reads or writes this object from or to an archive. (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)|  \n|[CPaneContainerManager::SetDefaultPaneDividerForPanes](#cpanecontainermanager__setdefaultpanedividerforpanes)||  \n|[CPaneContainerManager::SetPaneContainerRTC](#cpanecontainermanager__setpanecontainerrtc)||  \n|[CPaneContainerManager::SetResizeMode](#cpanecontainermanager__setresizemode)||  \n|[CPaneContainerManager::StoreRecentDockSiteInfo](#cpanecontainermanager__storerecentdocksiteinfo)||  \n  \n### Remarks  \n The framework automatically creates instances of `CPaneContainerManager` objects and embeds them either into [CPaneDivider Class](../../mfc/reference/cpanedivider-class.md) objects or into [CMultiPaneFrameWnd Class](../../mfc/reference/cmultipaneframewnd-class.md) objects.  \n  \n The `CPaneContainerManager` class stores a pointer to the root of a binary tree that is built from [CPaneContainer](../../mfc/reference/cpanecontainer-class.md) objects.  \n  \n## Example  \n The following example demonstrates how to get a reference to a `CPaneContainerManager` object. This code snippet is part of the [Set Pane Size sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_SetPaneSize#5](../../mfc/reference/codesnippet/cpp/cpanecontainermanager-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CPaneContainerManager](../../mfc/reference/cpanecontainermanager-class.md)  \n  \n## Requirements  \n **Header:** afxpanecontainermanager.h  \n  \n##  <a name=\"cpanecontainermanager__addpane\"></a>  CPaneContainerManager::AddPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void AddPane(CDockablePane* pControlBarToAdd);\n```  \n  \n### Parameters  \n [in] `pControlBarToAdd`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__addpanecontainermanager\"></a>  CPaneContainerManager::AddPaneContainerManager  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL AddPaneContainerManager(\n    CPaneContainerManager& srcManager,  \n    BOOL bOuterEdge);\n\n \nvirtual BOOL AddPaneContainerManager(\n    CDockablePane* pTargetControlBar,  \n    DWORD dwAlignment,  \n    CPaneContainerManager& srcManager,  \n    BOOL bCopy);\n```  \n  \n### Parameters  \n [in] `srcManager`  \n [in] `bOuterEdge`  \n [in] `pTargetControlBar`  \n [in] `dwAlignment`  \n [in] `bCopy`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__addpanecontainermanagertodockablepane\"></a>  CPaneContainerManager::AddPaneContainerManagerToDockablePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL AddPaneContainerManagerToDockablePane(\n    CDockablePane* pTargetControlBar,  \n    CPaneContainerManager& srcManager);\n```  \n  \n### Parameters  \n [in] `pTargetControlBar`  \n [in] `srcManager`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__addpanestolist\"></a>  CPaneContainerManager::AddPanesToList  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid AddPanesToList(\n    CObList* plstControlBars,  \n    CObList* plstSliders);\n```  \n  \n### Parameters  \n [in] `plstControlBars`  \n [in] `plstSliders`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__addpanetolist\"></a>  CPaneContainerManager::AddPaneToList  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid AddPaneToList(CDockablePane* pControlBarToAdd);\n```  \n  \n### Parameters  \n [in] `pControlBarToAdd`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__addpanetorecentpanecontainer\"></a>  CPaneContainerManager::AddPaneToRecentPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CDockablePane* AddPaneToRecentPaneContainer(\n    CDockablePane* pBarToAdd,  \n    CPaneContainer* pRecentContainer);\n```  \n  \n### Parameters  \n [in] `pBarToAdd`  \n [in] `pRecentContainer`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__calcrects\"></a>  CPaneContainerManager::CalcRects  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid CalcRects(\n    CRect& rectOriginal,  \n    CRect& rectInserted,  \n    CRect& rectSlider,  \n    DWORD& dwSliderStyle,  \n    DWORD dwAlignment,  \n    CSize sizeMinOriginal,  \n    CSize sizeMinInserted);\n```  \n  \n### Parameters  \n [in] `rectOriginal`  \n [in] `rectInserted`  \n [in] `rectSlider`  \n [in] `dwSliderStyle`  \n [in] `dwAlignment`  \n [in] `sizeMinOriginal`  \n [in] `sizeMinInserted`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__canbeattached\"></a>  CPaneContainerManager::CanBeAttached  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL CanBeAttached() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__checkandremovenonvalidpane\"></a>  CPaneContainerManager::CheckAndRemoveNonValidPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL CheckAndRemoveNonValidPane(CWnd* pWnd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__checkforminiframeandcaption\"></a>  CPaneContainerManager::CheckForMiniFrameAndCaption  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL CheckForMiniFrameAndCaption(\n    CPoint point,  \n    CDockablePane** ppTargetControlBar);\n```  \n  \n### Parameters  \n [in] `point`  \n [in] `ppTargetControlBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__create\"></a>  CPaneContainerManager::Create  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL Create(\n    CWnd* pParentWnd,  \n    CPaneDivider* pDefaultSlider,  \n    CRuntimeClass* pContainerRTC = NULL);\n```  \n  \n### Parameters  \n [in] `pParentWnd`  \n [in] `pDefaultSlider`  \n [in] `pContainerRTC`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__doesallowdyninsertbefore\"></a>  CPaneContainerManager::DoesAllowDynInsertBefore  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DoesAllowDynInsertBefore() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__doescontainfloatingpane\"></a>  CPaneContainerManager::DoesContainFloatingPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DoesContainFloatingPane();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__enablegrippers\"></a>  CPaneContainerManager::EnableGrippers  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void EnableGrippers(BOOL bEnable);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__findpanecontainer\"></a>  CPaneContainerManager::FindPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CPaneContainer* FindPaneContainer(\n    CDockablePane* pBar,  \n    BOOL& bLeftBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bLeftBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__findtabbedpane\"></a>  CPaneContainerManager::FindTabbedPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCDockablePane* FindTabbedPane(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getavailablespace\"></a>  CPaneContainerManager::GetAvailableSpace  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void GetAvailableSpace(CRect& rect) const;\n\n \n```  \n  \n### Parameters  \n [in] `rect`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getdefaultpanedivider\"></a>  CPaneContainerManager::GetDefaultPaneDivider  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCPaneDivider* GetDefaultPaneDivider() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getdocksiteframewnd\"></a>  CPaneContainerManager::GetDockSiteFrameWnd  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CWnd* GetDockSiteFrameWnd();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getfirstpane\"></a>  CPaneContainerManager::GetFirstPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CBasePane* GetFirstPane() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getfirstvisiblepane\"></a>  CPaneContainerManager::GetFirstVisiblePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CWnd* GetFirstVisiblePane() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getminmaxoffset\"></a>  CPaneContainerManager::GetMinMaxOffset  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void GetMinMaxOffset(\n    CPaneDivider* pSlider,  \n    int& nMinOffset,  \n    int& nMaxOffset,  \n    int& nStep);\n```  \n  \n### Parameters  \n [in] `pSlider`  \n [in] `nMinOffset`  \n [in] `nMaxOffset`  \n [in] `nStep`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getminsize\"></a>  CPaneContainerManager::GetMinSize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void GetMinSize(CSize& size);\n```  \n  \n### Parameters  \n [in] `size`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getnodecount\"></a>  CPaneContainerManager::GetNodeCount  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetNodeCount() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getpanecontainerrtc\"></a>  CPaneContainerManager::GetPaneContainerRTC  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCRuntimeClass* GetPaneContainerRTC() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getpanecount\"></a>  CPaneContainerManager::GetPaneCount  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetPaneCount() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__gettotalrefcount\"></a>  CPaneContainerManager::GetTotalRefCount  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetTotalRefCount() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getvisiblepanecount\"></a>  CPaneContainerManager::GetVisiblePaneCount  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetVisiblePaneCount() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__getwindowrect\"></a>  CPaneContainerManager::GetWindowRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void GetWindowRect(CRect& rect) const;\n\n \n```  \n  \n### Parameters  \n [in] `rect`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__hideall\"></a>  CPaneContainerManager::HideAll  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void HideAll();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__insertpane\"></a>  CPaneContainerManager::InsertPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL InsertPane(\n    CDockablePane* pControlBarToInsert,  \n    CDockablePane* pTargetControlBar,  \n    DWORD dwAlignment,  \n    LPCRECT lpRect = NULL,  \n    AFX_DOCK_METHOD dockMethod = DM_UNKNOWN);\n```  \n  \n### Parameters  \n [in] `pControlBarToInsert`  \n [in] `pTargetControlBar`  \n [in] `dwAlignment`  \n [in] `lpRect`  \n [in] `dockMethod`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__isautohidemode\"></a>  CPaneContainerManager::IsAutoHideMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsAutoHideMode() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__isempty\"></a>  CPaneContainerManager::IsEmpty  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsEmpty() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__isrootpanecontainervisible\"></a>  CPaneContainerManager::IsRootPaneContainerVisible  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsRootPaneContainerVisible() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__notifypanedivider\"></a>  CPaneContainerManager::NotifyPaneDivider  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid NotifyPaneDivider();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__onpanedividermove\"></a>  CPaneContainerManager::OnPaneDividerMove  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int OnPaneDividerMove(\n    CPaneDivider* pSlider,  \n    UINT uFlags,  \n    int nOffset,  \n    HDWP& hdwp);\n```  \n  \n### Parameters  \n [in] `pSlider`  \n [in] `uFlags`  \n [in] `nOffset`  \n [in] `hdwp`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__onshowpane\"></a>  CPaneContainerManager::OnShowPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnShowPane(\n    CDockablePane* pBar,  \n    BOOL bShow);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bShow`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__panefrompoint\"></a>  CPaneContainerManager::PaneFromPoint  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CDockablePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    BOOL bExactBar,  \n    BOOL& bIsTabArea,  \n    BOOL& bCaption);\n```  \n  \n### Parameters  \n [in] `point`  \n [in] `nSensitivity`  \n [in] `bExactBar`  \n [in] `bIsTabArea`  \n [in] `bCaption`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__releaseemptypanecontainers\"></a>  CPaneContainerManager::ReleaseEmptyPaneContainers  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid ReleaseEmptyPaneContainers();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__removeallpanesandpanedividers\"></a>  CPaneContainerManager::RemoveAllPanesAndPaneDividers  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid RemoveAllPanesAndPaneDividers();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__removenonvalidpanes\"></a>  CPaneContainerManager::RemoveNonValidPanes  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid RemoveNonValidPanes();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__removepanedivider\"></a>  CPaneContainerManager::RemovePaneDivider  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void RemovePaneDivider(CPaneDivider* pSlider);\n```  \n  \n### Parameters  \n [in] `pSlider`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__removepanefrompanecontainer\"></a>  CPaneContainerManager::RemovePaneFromPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL RemovePaneFromPaneContainer(CDockablePane* pControlBar);\n```  \n  \n### Parameters  \n [in] `pControlBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__replacepane\"></a>  CPaneContainerManager::ReplacePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL ReplacePane(\n    CDockablePane* pBarOld,  \n    CDockablePane* pBarNew);\n```  \n  \n### Parameters  \n [in] `pBarOld`  \n [in] `pBarNew`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__resizepanecontainers\"></a>  CPaneContainerManager::ResizePaneContainers  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void ResizePaneContainers(\n    UINT nSide,  \n    BOOL bExpand,  \n    int nOffset,  \n    HDWP& hdwp);\n\n \nvirtual void ResizePaneContainers(\n    CRect rect,  \n    HDWP& hdwp);\n```  \n  \n### Parameters  \n [in] `nSide`  \n [in] `bExpand`  \n [in] `nOffset`  \n [in] `hdwp`  \n [in] `rect`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__serialize\"></a>  CPaneContainerManager::Serialize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid Serialize(CArchive& ar);\n```  \n  \n### Parameters  \n [in] `ar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__setdefaultpanedividerforpanes\"></a>  CPaneContainerManager::SetDefaultPaneDividerForPanes  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetDefaultPaneDividerForPanes(CPaneDivider* pSlider);\n```  \n  \n### Parameters  \n [in] `pSlider`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__setpanecontainerrtc\"></a>  CPaneContainerManager::SetPaneContainerRTC  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetPaneContainerRTC(CRuntimeClass* pContainerRTC);\n```  \n  \n### Parameters  \n [in] `pContainerRTC`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__setresizemode\"></a>  CPaneContainerManager::SetResizeMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void SetResizeMode(BOOL bResize);\n```  \n  \n### Parameters  \n [in] `bResize`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainermanager__storerecentdocksiteinfo\"></a>  CPaneContainerManager::StoreRecentDockSiteInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void StoreRecentDockSiteInfo(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)   \n [CPaneDivider Class](../../mfc/reference/cpanedivider-class.md)\n"}