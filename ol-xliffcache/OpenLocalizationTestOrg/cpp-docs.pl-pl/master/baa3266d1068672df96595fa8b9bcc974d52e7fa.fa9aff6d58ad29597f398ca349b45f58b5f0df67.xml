{"nodes":[{"pos":[12,51],"content":"IThreadProxy Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IThreadProxy Structure | Microsoft Docs","pos":[0,39]}]},{"pos":[638,660],"content":"IThreadProxy Structure","linkify":"IThreadProxy Structure","nodes":[{"content":"IThreadProxy Structure","pos":[0,22]}]},{"content":"An abstraction for a thread of execution.","pos":[661,702]},{"content":"Depending on the <ph id=\"ph1\">`SchedulerType`</ph> policy key of the scheduler you create, the Resource Manager will grant you a thread proxy that is backed by either a regular Win32 thread or a user-mode schedulable (UMS) thread.","pos":[703,915],"source":" Depending on the `SchedulerType` policy key of the scheduler you create, the Resource Manager will grant you a thread proxy that is backed by either a regular Win32 thread or a user-mode schedulable (UMS) thread."},{"content":"UMS threads are supported on 64-bit operating systems with version Windows 7 and higher.","pos":[916,1004]},{"pos":[1013,1019],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1062,1069],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1079,1093],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1100,1104]},{"content":"Description","pos":[1105,1116]},{"pos":[1154,1190],"content":"<bpt id=\"p1\">[</bpt>IThreadProxy::GetId Method<ept id=\"p1\">](#getid)</ept>","source":"[IThreadProxy::GetId Method](#getid)"},{"content":"Returns a unique identifier for the thread proxy.","pos":[1191,1240]},{"pos":[1245,1289],"content":"<bpt id=\"p1\">[</bpt>IThreadProxy::SwitchOut Method<ept id=\"p1\">](#switchout)</ept>","source":"[IThreadProxy::SwitchOut Method](#switchout)"},{"content":"Disassociates the context from the underlying virtual processor root.","pos":[1290,1359]},{"pos":[1364,1406],"content":"<bpt id=\"p1\">[</bpt>IThreadProxy::SwitchTo Method<ept id=\"p1\">](#switchto)</ept>","source":"[IThreadProxy::SwitchTo Method](#switchto)"},{"content":"Performs a cooperative context switch from the currently executing context to a different one.","pos":[1407,1501]},{"pos":[1506,1558],"content":"<bpt id=\"p1\">[</bpt>IThreadProxy::YieldToSystem Method<ept id=\"p1\">](#yieldtosystem)</ept>","source":"[IThreadProxy::YieldToSystem Method](#yieldtosystem)"},{"content":"Causes the calling thread to yield execution to another thread that is ready to run on the current processor.","pos":[1559,1668]},{"content":"The operating system selects the next thread to be executed.","pos":[1669,1729]},{"pos":[1739,1746],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1750,1879],"content":"Thread proxies are coupled to execution contexts represented by the interface <ph id=\"ph1\">`IExecutionContext`</ph> as a means of dispatching work.","source":"Thread proxies are coupled to execution contexts represented by the interface `IExecutionContext` as a means of dispatching work."},{"pos":[1888,1909],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[1936,1948],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1952,1974],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrtrm.h","source":"**Header:** concrtrm.h"},{"pos":[1981,2007],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2017,2065],"content":"<bpt id=\"p1\">&lt;a name=\"getid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IThreadProxy::GetId Method","linkify":"<a name=\"getid\"></a>  IThreadProxy::GetId Method","source":"<a name=\"getid\"></a>  IThreadProxy::GetId Method"},{"content":"Returns a unique identifier for the thread proxy.","pos":[2069,2118]},{"pos":[2181,2193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A unique integer identifier.","pos":[2197,2225]},{"pos":[2235,2291],"content":"<bpt id=\"p1\">&lt;a name=\"switchout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IThreadProxy::SwitchOut Method","linkify":"<a name=\"switchout\"></a>  IThreadProxy::SwitchOut Method","source":"<a name=\"switchout\"></a>  IThreadProxy::SwitchOut Method"},{"content":"Disassociates the context from the underlying virtual processor root.","pos":[2295,2364]},{"pos":[2459,2469],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Indicates the state of the thread proxy that is executing the switch.","pos":[2490,2559]},{"content":"The parameter is of type <ph id=\"ph1\">`SwitchingProxyState`</ph>.","pos":[2560,2607],"source":" The parameter is of type `SwitchingProxyState`."},{"pos":[2617,2624],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use <ph id=\"ph1\">`SwitchOut`</ph> if you need to disassociate a context from the virtual processor root it is executing on, for any reason.","pos":[2628,2749],"source":"Use `SwitchOut` if you need to disassociate a context from the virtual processor root it is executing on, for any reason."},{"content":"Depending on the value you pass in to the parameter <ph id=\"ph1\">`switchState`</ph>, and whether or not it is executing on a virtual processor root, the call will either return immediately or block the thread proxy associated with the context.","pos":[2750,2975],"source":" Depending on the value you pass in to the parameter `switchState`, and whether or not it is executing on a virtual processor root, the call will either return immediately or block the thread proxy associated with the context."},{"content":"It is an error to call <ph id=\"ph1\">`SwitchOut`</ph> with the parameter set to <ph id=\"ph2\">`Idle`</ph>.","pos":[2976,3044],"source":" It is an error to call `SwitchOut` with the parameter set to `Idle`."},{"content":"Doing so will result in an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception.","pos":[3045,3154],"source":" Doing so will result in an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception."},{"content":"<ph id=\"ph1\">`SwitchOut`</ph> is useful when you want to reduce the number of virtual processor roots your scheduler has, either because the Resource Manager has instructed you to do so, or because you requested a temporary oversubscribed virtual processor root, and are done with it.","pos":[3161,3427],"source":"`SwitchOut` is useful when you want to reduce the number of virtual processor roots your scheduler has, either because the Resource Manager has instructed you to do so, or because you requested a temporary oversubscribed virtual processor root, and are done with it."},{"content":"In this case you should invoke the method <bpt id=\"p1\">[</bpt>IVirtualProcessorRoot::Remove Method<ept id=\"p1\">](http://msdn.microsoft.com/en-us/ad699b4a-1972-4390-97ee-9c083ba7d9e4)</ept> on the virtual processor root, before making a call to <ph id=\"ph1\">`SwitchOut`</ph> with the parameter <ph id=\"ph2\">`switchState`</ph> set to <ph id=\"ph3\">`Blocking`</ph>.","pos":[3428,3697],"source":" In this case you should invoke the method [IVirtualProcessorRoot::Remove Method](http://msdn.microsoft.com/en-us/ad699b4a-1972-4390-97ee-9c083ba7d9e4) on the virtual processor root, before making a call to `SwitchOut` with the parameter `switchState` set to `Blocking`."},{"content":"This will block the thread proxy and it will resume execution when a different virtual processor root in the scheduler is available to execute it.","pos":[3698,3844]},{"content":"The blocking thread proxy can be resumed by calling the function <ph id=\"ph1\">`SwitchTo`</ph> to switch to this thread proxy's execution context.","pos":[3845,3972],"source":" The blocking thread proxy can be resumed by calling the function `SwitchTo` to switch to this thread proxy's execution context."},{"content":"You can also resume the thread proxy, by using its associated context to activate a virtual processor root.","pos":[3973,4080]},{"content":"For more information on how to do this, see <bpt id=\"p1\">[</bpt>IVirtualProcessorRoot::Activate<ept id=\"p1\">](ivirtualprocessorroot-structure.md#activate)</ept>.","pos":[4081,4204],"source":" For more information on how to do this, see [IVirtualProcessorRoot::Activate](ivirtualprocessorroot-structure.md#activate)."},{"content":"<ph id=\"ph1\">`SwitchOut`</ph> may also be used when you want reinitialize the virtual processor so it may be activated in the future while either blocking the thread proxy or temporarily detaching it from the virtual processor root it is running on, and the scheduler it is dispatching work for.","pos":[4211,4488],"source":"`SwitchOut` may also be used when you want reinitialize the virtual processor so it may be activated in the future while either blocking the thread proxy or temporarily detaching it from the virtual processor root it is running on, and the scheduler it is dispatching work for."},{"content":"Use <ph id=\"ph1\">`SwitchOut`</ph> with the parameter <ph id=\"ph2\">`switchState`</ph> set to <ph id=\"ph3\">`Blocking`</ph> if you wish to block the thread proxy.","pos":[4489,4594],"source":" Use `SwitchOut` with the parameter `switchState` set to `Blocking` if you wish to block the thread proxy."},{"content":"It can later be resumed using either <ph id=\"ph1\">`SwitchTo`</ph> or <ph id=\"ph2\">`IVirtualProcessorRoot::Activate`</ph> as noted above.","pos":[4595,4695],"source":" It can later be resumed using either `SwitchTo` or `IVirtualProcessorRoot::Activate` as noted above."},{"content":"Use <ph id=\"ph1\">`SwitchOut`</ph> with the parameter set to <ph id=\"ph2\">`Nesting`</ph> when you want to temporarily detach this thread proxy from the virtual processor root it is running on, and the scheduler the virtual processor is associated with.","pos":[4696,4911],"source":" Use `SwitchOut` with the parameter set to `Nesting` when you want to temporarily detach this thread proxy from the virtual processor root it is running on, and the scheduler the virtual processor is associated with."},{"content":"Calling <ph id=\"ph1\">`SwitchOut`</ph> with the parameter <ph id=\"ph2\">`switchState`</ph> set to <ph id=\"ph3\">`Nesting`</ph> while it is executing on a virtual processor root will cause the root to be reinitialized and the current thread proxy to continue executing without the need for one.","pos":[4912,5148],"source":" Calling `SwitchOut` with the parameter `switchState` set to `Nesting` while it is executing on a virtual processor root will cause the root to be reinitialized and the current thread proxy to continue executing without the need for one."},{"content":"The thread proxy is considered to have left the scheduler until it calls the <bpt id=\"p1\">[</bpt>IThreadProxy::SwitchOut<ept id=\"p1\">](#switchout)</ept> method with <ph id=\"ph1\">`Blocking`</ph> at a later point in time.","pos":[5149,5312],"source":" The thread proxy is considered to have left the scheduler until it calls the [IThreadProxy::SwitchOut](#switchout) method with `Blocking` at a later point in time."},{"content":"The second call to <ph id=\"ph1\">`SwitchOut`</ph> with the parameter set to <ph id=\"ph2\">`Blocking`</ph> is intended to return the context to a blocked state so that it can be resumed by either <ph id=\"ph3\">`SwitchTo`</ph> or <ph id=\"ph4\">`IVirtualProcessorRoot::Activate`</ph> in the scheduler it detached from.","pos":[5313,5552],"source":" The second call to `SwitchOut` with the parameter set to `Blocking` is intended to return the context to a blocked state so that it can be resumed by either `SwitchTo` or `IVirtualProcessorRoot::Activate` in the scheduler it detached from."},{"content":"Because it was not executing on a virtual processor root, no reinitialization takes place.","pos":[5553,5643]},{"content":"A reinitialized virtual processor root is no different from a brand new virtual processor root your scheduler has been granted by the Resource Manager.","pos":[5650,5801]},{"content":"You can use it for execution by activating it with an execution context using <ph id=\"ph1\">`IVirtualProcessorRoot::Activate`</ph>.","pos":[5802,5914],"source":" You can use it for execution by activating it with an execution context using `IVirtualProcessorRoot::Activate`."},{"pos":[5921,6056],"content":"<ph id=\"ph1\">`SwitchOut`</ph> must be called on the <ph id=\"ph2\">`IThreadProxy`</ph> interface that represents the currently executing thread or the results are undefined.","source":"`SwitchOut` must be called on the `IThreadProxy` interface that represents the currently executing thread or the results are undefined."},{"content":"In the libraries and headers that shipped with Visual Studio 2010, this method did not take a parameter and did not reinitialize the virtual processor root.","pos":[6063,6219]},{"content":"To preserve old behavior, the default parameter value of <ph id=\"ph1\">`Blocking`</ph> is supplied.","pos":[6220,6300],"source":" To preserve old behavior, the default parameter value of `Blocking` is supplied."},{"pos":[6310,6364],"content":"<bpt id=\"p1\">&lt;a name=\"switchto\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IThreadProxy::SwitchTo Method","linkify":"<a name=\"switchto\"></a>  IThreadProxy::SwitchTo Method","source":"<a name=\"switchto\"></a>  IThreadProxy::SwitchTo Method"},{"content":"Performs a cooperative context switch from the currently executing context to a different one.","pos":[6368,6462]},{"pos":[6591,6601],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The execution context to cooperatively switch to.","pos":[6619,6668]},{"content":"Indicates the state of the thread proxy that is executing the switch.","pos":[6692,6761]},{"content":"The parameter is of type <ph id=\"ph1\">`SwitchingProxyState`</ph>.","pos":[6762,6809],"source":" The parameter is of type `SwitchingProxyState`."},{"pos":[6819,6826],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this method to switch from one execution context to another, from the <bpt id=\"p1\">[</bpt>IExecutionContext::Dispatch<ept id=\"p1\">](iexecutioncontext-structure.md#dispatch)</ept> method of the first execution context.","pos":[6830,7013],"source":"Use this method to switch from one execution context to another, from the [IExecutionContext::Dispatch](iexecutioncontext-structure.md#dispatch) method of the first execution context."},{"content":"The method associates the execution context <ph id=\"ph1\">`pContext`</ph> with a thread proxy if it is not already associated with one.","pos":[7014,7130],"source":" The method associates the execution context `pContext` with a thread proxy if it is not already associated with one."},{"content":"The ownership of the current thread proxy is determined by the value you specify for the <ph id=\"ph1\">`switchState`</ph> argument.","pos":[7131,7243],"source":" The ownership of the current thread proxy is determined by the value you specify for the `switchState` argument."},{"content":"Use the value <ph id=\"ph1\">`Idle`</ph> when you want to return the currently executing thread proxy to the Resource Manager.","pos":[7250,7356],"source":"Use the value `Idle` when you want to return the currently executing thread proxy to the Resource Manager."},{"content":"Calling <ph id=\"ph1\">`SwitchTo`</ph> with the parameter <ph id=\"ph2\">`switchState`</ph> set to <ph id=\"ph3\">`Idle`</ph> will cause the execution context <ph id=\"ph4\">`pContext`</ph> to start executing on the underlying execution resource.","pos":[7357,7523],"source":" Calling `SwitchTo` with the parameter `switchState` set to `Idle` will cause the execution context `pContext` to start executing on the underlying execution resource."},{"content":"Ownership of this thread proxy is transferred to the Resource Manager, and you are expected to return from the execution context's <ph id=\"ph1\">`Dispatch`</ph> method soon after <ph id=\"ph2\">`SwitchTo`</ph> returns, in order to complete the transfer.","pos":[7524,7738],"source":" Ownership of this thread proxy is transferred to the Resource Manager, and you are expected to return from the execution context's `Dispatch` method soon after `SwitchTo` returns, in order to complete the transfer."},{"content":"The execution context that the thread proxy was dispatching is disassociated from the thread proxy, and the scheduler is free to reuse it or destroy it as it sees fit.","pos":[7739,7906]},{"content":"Use the value <ph id=\"ph1\">`Blocking`</ph> when you want this thread proxy to enter a blocked state.","pos":[7913,7995],"source":"Use the value `Blocking` when you want this thread proxy to enter a blocked state."},{"content":"Calling <ph id=\"ph1\">`SwitchTo`</ph> with the parameter <ph id=\"ph2\">`switchState`</ph> set to <ph id=\"ph3\">`Blocking`</ph> will cause the execution context <ph id=\"ph4\">`pContext`</ph> to start executing, and block the current thread proxy until it is resumed.","pos":[7996,8185],"source":" Calling `SwitchTo` with the parameter `switchState` set to `Blocking` will cause the execution context `pContext` to start executing, and block the current thread proxy until it is resumed."},{"content":"The scheduler retains ownership of the thread proxy when the thread proxy is in the <ph id=\"ph1\">`Blocking`</ph> state.","pos":[8186,8287],"source":" The scheduler retains ownership of the thread proxy when the thread proxy is in the `Blocking` state."},{"content":"The blocking thread proxy can be resumed by calling the function <ph id=\"ph1\">`SwitchTo`</ph> to switch to this thread proxy's execution context.","pos":[8288,8415],"source":" The blocking thread proxy can be resumed by calling the function `SwitchTo` to switch to this thread proxy's execution context."},{"content":"You can also resume the thread proxy, by using its associated context to activate a virtual processor root.","pos":[8416,8523]},{"content":"For more information on how to do this, see <bpt id=\"p1\">[</bpt>IVirtualProcessorRoot::Activate<ept id=\"p1\">](ivirtualprocessorroot-structure.md#activate)</ept>.","pos":[8524,8647],"source":" For more information on how to do this, see [IVirtualProcessorRoot::Activate](ivirtualprocessorroot-structure.md#activate)."},{"content":"Use the value <ph id=\"ph1\">`Nesting`</ph> when you want to temporarily detach this thread proxy from the virtual processor root it is running on, and the scheduler it is dispatching work for.","pos":[8654,8827],"source":"Use the value `Nesting` when you want to temporarily detach this thread proxy from the virtual processor root it is running on, and the scheduler it is dispatching work for."},{"content":"Calling <ph id=\"ph1\">`SwitchTo`</ph> with the parameter <ph id=\"ph2\">`switchState`</ph> set to <ph id=\"ph3\">`Nesting`</ph> will cause the execution context <ph id=\"ph4\">`pContext`</ph> to start executing and the current thread proxy also continues executing without the need for a virtual processor root.","pos":[8828,9060],"source":" Calling `SwitchTo` with the parameter `switchState` set to `Nesting` will cause the execution context `pContext` to start executing and the current thread proxy also continues executing without the need for a virtual processor root."},{"content":"The thread proxy is considered to have left the scheduler until it calls the <bpt id=\"p1\">[</bpt>IThreadProxy::SwitchOut<ept id=\"p1\">](#switchout)</ept> method at a later point in time.","pos":[9061,9208],"source":" The thread proxy is considered to have left the scheduler until it calls the [IThreadProxy::SwitchOut](#switchout) method at a later point in time."},{"content":"The <ph id=\"ph1\">`IThreadProxy::SwitchOut`</ph> method could block the thread proxy until a virtual processor root is available to reschedule it.","pos":[9209,9336],"source":" The `IThreadProxy::SwitchOut` method could block the thread proxy until a virtual processor root is available to reschedule it."},{"content":"<ph id=\"ph1\">`SwitchTo`</ph> must be called on the <ph id=\"ph2\">`IThreadProxy`</ph> interface that represents the currently executing thread or the results are undefined.","pos":[9343,9477],"source":"`SwitchTo` must be called on the `IThreadProxy` interface that represents the currently executing thread or the results are undefined."},{"content":"The function throws <ph id=\"ph1\">`invalid_argument`</ph> if the parameter <ph id=\"ph2\">`pContext`</ph> is set to <ph id=\"ph3\">`NULL`</ph>.","pos":[9478,9562],"source":" The function throws `invalid_argument` if the parameter `pContext` is set to `NULL`."},{"pos":[9572,9636],"content":"<bpt id=\"p1\">&lt;a name=\"yieldtosystem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IThreadProxy::YieldToSystem Method","linkify":"<a name=\"yieldtosystem\"></a>  IThreadProxy::YieldToSystem Method","source":"<a name=\"yieldtosystem\"></a>  IThreadProxy::YieldToSystem Method"},{"content":"Causes the calling thread to yield execution to another thread that is ready to run on the current processor.","pos":[9640,9749]},{"content":"The operating system selects the next thread to be executed.","pos":[9750,9810]},{"pos":[9867,9874],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When called by a thread proxy backed by a regular Windows thread, <ph id=\"ph1\">`YieldToSystem`</ph> behaves exactly like the Windows function <ph id=\"ph2\">`SwitchToThread`</ph>.","pos":[9878,10019],"source":"When called by a thread proxy backed by a regular Windows thread, `YieldToSystem` behaves exactly like the Windows function `SwitchToThread`."},{"content":"However, when called from user-mode schedulable (UMS) threads, the <ph id=\"ph1\">`SwitchToThread`</ph> function delegates the task of picking the next thread to run to the user mode scheduler, not the operating system.","pos":[10020,10219],"source":" However, when called from user-mode schedulable (UMS) threads, the `SwitchToThread` function delegates the task of picking the next thread to run to the user mode scheduler, not the operating system."},{"content":"To achieve the desired effect of switching to a different ready thread in the system, use <ph id=\"ph1\">`YieldToSystem`</ph>.","pos":[10220,10326],"source":" To achieve the desired effect of switching to a different ready thread in the system, use `YieldToSystem`."},{"pos":[10333,10472],"content":"<ph id=\"ph1\">`YieldToSystem`</ph> must be called on the <ph id=\"ph2\">`IThreadProxy`</ph> interface that represents the currently executing thread or the results are undefined.","source":"`YieldToSystem` must be called on the `IThreadProxy` interface that represents the currently executing thread or the results are undefined."},{"pos":[10481,10489],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[10493,10543],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IExecutionContext Structure<ept id=\"p1\">](iexecutioncontext-structure.md)</ept><ph id=\"ph1\"> </ph>","pos":[10546,10609],"source":" [IExecutionContext Structure](iexecutioncontext-structure.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IScheduler Structure<ept id=\"p1\">](ischeduler-structure.md)</ept><ph id=\"ph1\"> </ph>","pos":[10612,10661],"source":" [IScheduler Structure](ischeduler-structure.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IVirtualProcessorRoot Structure<ept id=\"p1\">](ivirtualprocessorroot-structure.md)</ept>","pos":[10664,10734],"source":" [IVirtualProcessorRoot Structure](ivirtualprocessorroot-structure.md)"}],"content":"---\ntitle: \"IThreadProxy Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrtrm/concurrency::IThreadProxy\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"IThreadProxy structure\"\nms.assetid: feb89241-a555-4e61-ad48-40add54daeca\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IThreadProxy Structure\nAn abstraction for a thread of execution. Depending on the `SchedulerType` policy key of the scheduler you create, the Resource Manager will grant you a thread proxy that is backed by either a regular Win32 thread or a user-mode schedulable (UMS) thread. UMS threads are supported on 64-bit operating systems with version Windows 7 and higher.  \n  \n## Syntax  \n  \n```\nstruct IThreadProxy;\n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IThreadProxy::GetId Method](#getid)|Returns a unique identifier for the thread proxy.|  \n|[IThreadProxy::SwitchOut Method](#switchout)|Disassociates the context from the underlying virtual processor root.|  \n|[IThreadProxy::SwitchTo Method](#switchto)|Performs a cooperative context switch from the currently executing context to a different one.|  \n|[IThreadProxy::YieldToSystem Method](#yieldtosystem)|Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the next thread to be executed.|  \n  \n## Remarks  \n Thread proxies are coupled to execution contexts represented by the interface `IExecutionContext` as a means of dispatching work.  \n  \n## Inheritance Hierarchy  \n `IThreadProxy`  \n  \n## Requirements  \n **Header:** concrtrm.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"getid\"></a>  IThreadProxy::GetId Method  \n Returns a unique identifier for the thread proxy.  \n  \n```\nvirtual unsigned int GetId() const = 0;\n```  \n  \n### Return Value  \n A unique integer identifier.  \n  \n##  <a name=\"switchout\"></a>  IThreadProxy::SwitchOut Method  \n Disassociates the context from the underlying virtual processor root.  \n  \n```\nvirtual void SwitchOut(SwitchingProxyState switchState = Blocking) = 0;\n```  \n  \n### Parameters  \n `switchState`  \n Indicates the state of the thread proxy that is executing the switch. The parameter is of type `SwitchingProxyState`.  \n  \n### Remarks  \n Use `SwitchOut` if you need to disassociate a context from the virtual processor root it is executing on, for any reason. Depending on the value you pass in to the parameter `switchState`, and whether or not it is executing on a virtual processor root, the call will either return immediately or block the thread proxy associated with the context. It is an error to call `SwitchOut` with the parameter set to `Idle`. Doing so will result in an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception.  \n  \n `SwitchOut` is useful when you want to reduce the number of virtual processor roots your scheduler has, either because the Resource Manager has instructed you to do so, or because you requested a temporary oversubscribed virtual processor root, and are done with it. In this case you should invoke the method [IVirtualProcessorRoot::Remove Method](http://msdn.microsoft.com/en-us/ad699b4a-1972-4390-97ee-9c083ba7d9e4) on the virtual processor root, before making a call to `SwitchOut` with the parameter `switchState` set to `Blocking`. This will block the thread proxy and it will resume execution when a different virtual processor root in the scheduler is available to execute it. The blocking thread proxy can be resumed by calling the function `SwitchTo` to switch to this thread proxy's execution context. You can also resume the thread proxy, by using its associated context to activate a virtual processor root. For more information on how to do this, see [IVirtualProcessorRoot::Activate](ivirtualprocessorroot-structure.md#activate).  \n  \n `SwitchOut` may also be used when you want reinitialize the virtual processor so it may be activated in the future while either blocking the thread proxy or temporarily detaching it from the virtual processor root it is running on, and the scheduler it is dispatching work for. Use `SwitchOut` with the parameter `switchState` set to `Blocking` if you wish to block the thread proxy. It can later be resumed using either `SwitchTo` or `IVirtualProcessorRoot::Activate` as noted above. Use `SwitchOut` with the parameter set to `Nesting` when you want to temporarily detach this thread proxy from the virtual processor root it is running on, and the scheduler the virtual processor is associated with. Calling `SwitchOut` with the parameter `switchState` set to `Nesting` while it is executing on a virtual processor root will cause the root to be reinitialized and the current thread proxy to continue executing without the need for one. The thread proxy is considered to have left the scheduler until it calls the [IThreadProxy::SwitchOut](#switchout) method with `Blocking` at a later point in time. The second call to `SwitchOut` with the parameter set to `Blocking` is intended to return the context to a blocked state so that it can be resumed by either `SwitchTo` or `IVirtualProcessorRoot::Activate` in the scheduler it detached from. Because it was not executing on a virtual processor root, no reinitialization takes place.  \n  \n A reinitialized virtual processor root is no different from a brand new virtual processor root your scheduler has been granted by the Resource Manager. You can use it for execution by activating it with an execution context using `IVirtualProcessorRoot::Activate`.  \n  \n `SwitchOut` must be called on the `IThreadProxy` interface that represents the currently executing thread or the results are undefined.  \n  \n In the libraries and headers that shipped with Visual Studio 2010, this method did not take a parameter and did not reinitialize the virtual processor root. To preserve old behavior, the default parameter value of `Blocking` is supplied.  \n  \n##  <a name=\"switchto\"></a>  IThreadProxy::SwitchTo Method  \n Performs a cooperative context switch from the currently executing context to a different one.  \n  \n```\nvirtual void SwitchTo(\n    _Inout_ IExecutionContext* pContext,\n    SwitchingProxyState switchState) = 0;\n```  \n  \n### Parameters  \n `pContext`  \n The execution context to cooperatively switch to.  \n  \n `switchState`  \n Indicates the state of the thread proxy that is executing the switch. The parameter is of type `SwitchingProxyState`.  \n  \n### Remarks  \n Use this method to switch from one execution context to another, from the [IExecutionContext::Dispatch](iexecutioncontext-structure.md#dispatch) method of the first execution context. The method associates the execution context `pContext` with a thread proxy if it is not already associated with one. The ownership of the current thread proxy is determined by the value you specify for the `switchState` argument.  \n  \n Use the value `Idle` when you want to return the currently executing thread proxy to the Resource Manager. Calling `SwitchTo` with the parameter `switchState` set to `Idle` will cause the execution context `pContext` to start executing on the underlying execution resource. Ownership of this thread proxy is transferred to the Resource Manager, and you are expected to return from the execution context's `Dispatch` method soon after `SwitchTo` returns, in order to complete the transfer. The execution context that the thread proxy was dispatching is disassociated from the thread proxy, and the scheduler is free to reuse it or destroy it as it sees fit.  \n  \n Use the value `Blocking` when you want this thread proxy to enter a blocked state. Calling `SwitchTo` with the parameter `switchState` set to `Blocking` will cause the execution context `pContext` to start executing, and block the current thread proxy until it is resumed. The scheduler retains ownership of the thread proxy when the thread proxy is in the `Blocking` state. The blocking thread proxy can be resumed by calling the function `SwitchTo` to switch to this thread proxy's execution context. You can also resume the thread proxy, by using its associated context to activate a virtual processor root. For more information on how to do this, see [IVirtualProcessorRoot::Activate](ivirtualprocessorroot-structure.md#activate).  \n  \n Use the value `Nesting` when you want to temporarily detach this thread proxy from the virtual processor root it is running on, and the scheduler it is dispatching work for. Calling `SwitchTo` with the parameter `switchState` set to `Nesting` will cause the execution context `pContext` to start executing and the current thread proxy also continues executing without the need for a virtual processor root. The thread proxy is considered to have left the scheduler until it calls the [IThreadProxy::SwitchOut](#switchout) method at a later point in time. The `IThreadProxy::SwitchOut` method could block the thread proxy until a virtual processor root is available to reschedule it.  \n  \n `SwitchTo` must be called on the `IThreadProxy` interface that represents the currently executing thread or the results are undefined. The function throws `invalid_argument` if the parameter `pContext` is set to `NULL`.  \n  \n##  <a name=\"yieldtosystem\"></a>  IThreadProxy::YieldToSystem Method  \n Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the next thread to be executed.  \n  \n```\nvirtual void YieldToSystem() = 0;\n```  \n  \n### Remarks  \n When called by a thread proxy backed by a regular Windows thread, `YieldToSystem` behaves exactly like the Windows function `SwitchToThread`. However, when called from user-mode schedulable (UMS) threads, the `SwitchToThread` function delegates the task of picking the next thread to run to the user mode scheduler, not the operating system. To achieve the desired effect of switching to a different ready thread in the system, use `YieldToSystem`.  \n  \n `YieldToSystem` must be called on the `IThreadProxy` interface that represents the currently executing thread or the results are undefined.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [IExecutionContext Structure](iexecutioncontext-structure.md)   \n [IScheduler Structure](ischeduler-structure.md)   \n [IVirtualProcessorRoot Structure](ivirtualprocessorroot-structure.md)\n"}