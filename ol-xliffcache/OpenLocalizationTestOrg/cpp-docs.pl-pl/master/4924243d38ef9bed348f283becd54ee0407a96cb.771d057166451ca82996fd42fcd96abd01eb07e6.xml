{"nodes":[{"pos":[12,59],"content":"CMFCFilterChunkValueImpl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCFilterChunkValueImpl Class | Microsoft Docs","pos":[0,47]}]},{"content":"CMFCFilterChunkValueImpl Class","pos":[684,714]},{"content":"This is a class which simplifies both chunk and property value pair logic.","pos":[715,789]},{"content":"Syntax","pos":[798,804]},{"content":"Members","pos":[894,901]},{"content":"Public Constructors","pos":[911,930]},{"content":"Name","pos":[937,941]},{"content":"Description","pos":[942,953]},{"content":"CMFCFilterChunkValueImpl::~CMFCFilterChunkValueImpl","pos":[992,1043]},{"content":"Destructs the object.","pos":[1103,1124]},{"content":"CMFCFilterChunkValueImpl::CMFCFilterChunkValueImpl","pos":[1130,1180]},{"content":"Constructs the object.","pos":[1235,1257]},{"content":"Public Methods","pos":[1268,1282]},{"content":"Name","pos":[1289,1293]},{"content":"Description","pos":[1294,1305]},{"content":"CMFCFilterChunkValueImpl::Clear","pos":[1344,1375]},{"content":"Clears the ChunkValue.","pos":[1411,1433]},{"content":"CMFCFilterChunkValueImpl::CopyChunk","pos":[1439,1474]},{"content":"Copies this chunk to a structure describing the characteristics of a chunk.","pos":[1514,1589]},{"content":"CMFCFilterChunkValueImpl::CopyFrom","pos":[1595,1629]},{"content":"Initializes this chunk value from the other value.","pos":[1668,1718]},{"content":"CMFCFilterChunkValueImpl::GetChunkGUID","pos":[1724,1762]},{"content":"Retrieves the chunk GUID.","pos":[1805,1830]},{"content":"CMFCFilterChunkValueImpl::GetChunkPID","pos":[1836,1873]},{"content":"Retrieves the chunk PID (property ID).","pos":[1915,1953]},{"content":"CMFCFilterChunkValueImpl::GetChunkType","pos":[1959,1997]},{"content":"Gets chunk type.","pos":[2040,2056]},{"content":"CMFCFilterChunkValueImpl::GetString","pos":[2062,2097]},{"content":"Retrieves the the string value.","pos":[2137,2168]},{"content":"CMFCFilterChunkValueImpl::GetValue","pos":[2174,2208]},{"content":"Retrieves the value as an allocated propvariant.","pos":[2247,2295]},{"content":"CMFCFilterChunkValueImpl::GetValueNoAlloc","pos":[2301,2342]},{"content":"Returns non-allocated (internal value) value.","pos":[2388,2433]},{"content":"CMFCFilterChunkValueImpl::IsValid","pos":[2439,2472]},{"content":"Checks whether this property value is valid or not.","pos":[2510,2561]},{"content":"CMFCFilterChunkValueImpl::SetBoolValue","pos":[2567,2605]},{"content":"Overloaded.","pos":[2648,2659]},{"content":"Sets the property by key to a Boolean.","pos":[2660,2698]},{"content":"CMFCFilterChunkValueImpl::SetDwordValue","pos":[2704,2743]},{"content":"Sets the property by key to a DWORD.","pos":[2787,2823]},{"content":"CMFCFilterChunkValueImpl::SetFileTimeValue","pos":[2829,2871]},{"content":"Sets the property by key to a filetime.","pos":[2918,2957]},{"content":"CMFCFilterChunkValueImpl::SetInt64Value","pos":[2963,3002]},{"content":"Sets the property by key to an int64.","pos":[3046,3083]},{"content":"CMFCFilterChunkValueImpl::SetIntValue","pos":[3089,3126]},{"content":"Sets the property by key to an int.","pos":[3168,3203]},{"content":"CMFCFilterChunkValueImpl::SetLongValue","pos":[3209,3247]},{"content":"Sets the property by key to a LONG.","pos":[3290,3325]},{"content":"CMFCFilterChunkValueImpl::SetSystemTimeValue","pos":[3331,3375]},{"content":"Sets the property by key to a SystemTime.","pos":[3424,3465]},{"content":"CMFCFilterChunkValueImpl::SetTextValue","pos":[3471,3509]},{"content":"Sets the property by key to a Unicode string.","pos":[3552,3597]},{"content":"Protected Methods","pos":[3608,3625]},{"content":"Name","pos":[3632,3636]},{"content":"Description","pos":[3637,3648]},{"content":"CMFCFilterChunkValueImpl::SetChunk","pos":[3687,3721]},{"content":"A helper function that sets the chunk's common properties.","pos":[3760,3818]},{"content":"Remarks","pos":[3828,3835]},{"content":"To use, you simply create a CMFCFilterChunkValueImpl class of the right kind","pos":[3839,3915]},{"content":"Example:","pos":[3922,3930]},{"content":"CMFCFilterChunkValueImpl chunk;","pos":[3937,3968]},{"content":"hr = chunk.SetBoolValue(PKEY_IsAttachment, true);","pos":[3975,4024]},{"content":"or","pos":[4031,4033]},{"content":"hr = chunk.SetFileTimeValue(PKEY_ItemDate, ftLastModified);","pos":[4040,4099]},{"content":"Inheritance Hierarchy","pos":[4108,4129]},{"content":"CMFCFilterChunkValueImpl","pos":[4165,4189]},{"content":"Requirements","pos":[4254,4266]},{"pos":[4270,4290],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[4348,4379],"content":"CMFCFilterChunkValueImpl::Clear"},{"content":"Clears the ChunkValue.","pos":[4383,4405]},{"content":"Remarks","pos":[4444,4451]},{"pos":[4528,4578],"content":"CMFCFilterChunkValueImpl::CMFCFilterChunkValueImpl"},{"content":"Constructs the object.","pos":[4582,4604]},{"content":"Remarks","pos":[4657,4664]},{"pos":[4746,4797],"content":"CMFCFilterChunkValueImpl::~CMFCFilterChunkValueImpl"},{"content":"Destructs the object.","pos":[4801,4822]},{"content":"Remarks","pos":[4884,4891]},{"pos":[4953,4988],"content":"CMFCFilterChunkValueImpl::CopyChunk"},{"content":"Copies this chunk to a structure describing the characteristics of a chunk.","pos":[4992,5067]},{"content":"Parameters","pos":[5135,5145]},{"content":"A pointer to destination value describing the characteristics of the chunk.","pos":[5165,5240]},{"content":"Return Value","pos":[5250,5262]},{"content":"S_OK if successful; otherwise an error code.","pos":[5266,5310]},{"content":"Remarks","pos":[5320,5327]},{"pos":[5388,5422],"content":"CMFCFilterChunkValueImpl::CopyFrom"},{"content":"Initializes this chunk value from the other value.","pos":[5426,5476]},{"content":"Parameters","pos":[5544,5554]},{"content":"Specifies the source value to copy from.","pos":[5570,5610]},{"content":"Remarks","pos":[5620,5627]},{"pos":[5692,5730],"content":"CMFCFilterChunkValueImpl::GetChunkGUID"},{"content":"Retrieves the chunk GUID.","pos":[5734,5759]},{"content":"Return Value","pos":[5817,5829]},{"content":"A reference to a GUID identifying the chunk.","pos":[5833,5877]},{"content":"Remarks","pos":[5887,5894]},{"pos":[5958,5995],"content":"CMFCFilterChunkValueImpl::GetChunkPID"},{"content":"Retrieves the chunk PID (property ID).","pos":[5999,6037]},{"content":"Return Value","pos":[6092,6104]},{"content":"A DWORD value containing the property ID.","pos":[6108,6149]},{"content":"Remarks","pos":[6159,6166]},{"pos":[6231,6269],"content":"CMFCFilterChunkValueImpl::GetChunkType"},{"content":"Retrieves the chunk type.","pos":[6273,6298]},{"content":"Return Value","pos":[6359,6371]},{"content":"A CHUNKSTATE enumerated value, which specifies whether the current chunk is a text-type property or a value-type property.","pos":[6375,6497]},{"content":"Remarks","pos":[6507,6514]},{"pos":[6576,6611],"content":"CMFCFilterChunkValueImpl::GetString"},{"content":"Retrieves the string value.","pos":[6615,6642]},{"content":"Return Value","pos":[6689,6701]},{"content":"A string containing the chunk value.","pos":[6705,6741]},{"content":"Remarks","pos":[6751,6758]},{"pos":[6819,6853],"content":"CMFCFilterChunkValueImpl::GetValue"},{"content":"Retrieves the value as an allocated propvariant.","pos":[6857,6905]},{"content":"Parameters","pos":[6977,6987]},{"content":"When the function returns, this parameter contains the chunk value.","pos":[7010,7077]},{"content":"Return Value","pos":[7087,7099]},{"pos":[7103,7238],"content":"S_OK if PROPVARIANT was allocated successfully and the chunk value was successfully copied to <ph id=\"ph1\">`ppPropVariant`</ph>; otherwise an error code.","source":"S_OK if PROPVARIANT was allocated successfully and the chunk value was successfully copied to `ppPropVariant`; otherwise an error code."},{"content":"Remarks","pos":[7248,7255]},{"pos":[7323,7364],"content":"CMFCFilterChunkValueImpl::GetValueNoAlloc"},{"content":"Returns the non-allocated (internal value) value.","pos":[7368,7417]},{"content":"Return Value","pos":[7474,7486]},{"content":"Returns the current chunk value.","pos":[7490,7522]},{"content":"Remarks","pos":[7532,7539]},{"pos":[7599,7632],"content":"CMFCFilterChunkValueImpl::IsValid"},{"content":"Checks whether this property value is valid or not.","pos":[7636,7687]},{"content":"Return Value","pos":[7737,7749]},{"pos":[7760,7815],"content":"if the current chunk value is valid; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the current chunk value is valid; otherwise `FALSE`."},{"content":"Remarks","pos":[7825,7832]},{"pos":[7897,7935],"content":"CMFCFilterChunkValueImpl::SetBoolValue"},{"content":"Overloaded.","pos":[7939,7950]},{"content":"Sets the property by key to a Boolean.","pos":[7951,7989]},{"content":"Parameters","pos":[8519,8529]},{"content":"Specifies a property key.","pos":[8543,8568]},{"content":"Specifies the chunk value to set.","pos":[8585,8618]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[8640,8720]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[8721,8775]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[8794,8855]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[8856,8938]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[8939,9060]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[9085,9170]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[9171,9277]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[9278,9342]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[9369,9454]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[9481,9556]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[9557,9605]},{"content":"Return Value","pos":[9615,9627]},{"content":"S_OK if successful; otherwise an error code.","pos":[9631,9675]},{"content":"Remarks","pos":[9685,9692]},{"pos":[9753,9787],"content":"CMFCFilterChunkValueImpl::SetChunk"},{"content":"A helper function that sets the chunk's common properties.","pos":[9791,9849]},{"content":"Parameters","pos":[10090,10100]},{"content":"Specifies a property key.","pos":[10114,10139]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[10161,10241]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[10242,10296]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[10315,10376]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[10377,10459]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[10460,10581]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[10606,10691]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[10692,10798]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[10799,10863]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[10890,10975]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[11002,11077]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[11078,11126]},{"content":"Return Value","pos":[11136,11148]},{"content":"S_OK if successful; otherwise error code.","pos":[11152,11193]},{"content":"Remarks","pos":[11203,11210]},{"pos":[11276,11315],"content":"CMFCFilterChunkValueImpl::SetDwordValue"},{"content":"Set the property by key to a DWORD.","pos":[11319,11354]},{"content":"Parameters","pos":[11629,11639]},{"content":"Specifies a property key.","pos":[11653,11678]},{"content":"Specifies the chunk value to set.","pos":[11696,11729]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[11751,11831]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[11832,11886]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[11905,11966]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[11967,12049]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[12050,12171]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[12196,12281]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[12282,12388]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[12389,12453]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[12480,12565]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[12592,12667]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[12668,12716]},{"content":"Return Value","pos":[12726,12738]},{"content":"S_OK if successful; otherwise an error code.","pos":[12742,12786]},{"content":"Remarks","pos":[12796,12803]},{"pos":[12872,12914],"content":"CMFCFilterChunkValueImpl::SetFileTimeValue"},{"content":"Set the property by key to a filetime.","pos":[12918,12956]},{"content":"Parameters","pos":[13237,13247]},{"content":"Specifies a property key.","pos":[13261,13286]},{"content":"Specifies the chunk value to set.","pos":[13304,13337]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[13359,13439]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[13440,13494]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[13513,13574]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[13575,13657]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[13658,13779]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[13804,13889]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[13890,13996]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[13997,14061]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[14088,14173]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[14200,14275]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[14276,14324]},{"content":"Return Value","pos":[14334,14346]},{"content":"S_OK if successful; otherwise an error code.","pos":[14350,14394]},{"content":"Remarks","pos":[14404,14411]},{"pos":[14477,14516],"content":"CMFCFilterChunkValueImpl::SetInt64Value"},{"content":"Set the property by key to an int64.","pos":[14520,14556]},{"content":"Parameters","pos":[14832,14842]},{"content":"Specifies a property key.","pos":[14856,14881]},{"content":"Specifies the chunk value to set.","pos":[14898,14931]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[14953,15033]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[15034,15088]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[15107,15168]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[15169,15251]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[15252,15373]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[15398,15483]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[15484,15590]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[15591,15655]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[15682,15767]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[15794,15869]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[15870,15918]},{"content":"Return Value","pos":[15928,15940]},{"content":"S_OK if successful; otherwise an error code.","pos":[15944,15988]},{"content":"Remarks","pos":[15998,16005]},{"pos":[16069,16106],"content":"CMFCFilterChunkValueImpl::SetIntValue"},{"content":"Set the property by key to an int.","pos":[16110,16144]},{"content":"Parameters","pos":[16414,16424]},{"content":"Specifies a property key.","pos":[16438,16463]},{"content":"Specifies the chunk value to set.","pos":[16480,16513]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[16535,16615]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[16616,16670]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[16689,16750]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[16751,16833]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[16834,16955]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[16980,17065]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[17066,17172]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[17173,17237]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[17264,17349]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[17376,17451]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[17452,17500]},{"content":"Return Value","pos":[17510,17522]},{"content":"S_OK if successful; otherwise an error code.","pos":[17526,17570]},{"content":"Remarks","pos":[17580,17587]},{"pos":[17652,17690],"content":"CMFCFilterChunkValueImpl::SetLongValue"},{"content":"Set the property by key to a LONG.","pos":[17694,17728]},{"content":"Parameters","pos":[18000,18010]},{"content":"Specifies a property key.","pos":[18024,18049]},{"content":"Specifies the chunk value to set.","pos":[18066,18099]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[18121,18201]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[18202,18256]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[18275,18336]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[18337,18419]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[18420,18541]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[18566,18651]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[18652,18758]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[18759,18823]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[18850,18935]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[18962,19037]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[19038,19086]},{"content":"Return Value","pos":[19096,19108]},{"content":"S_OK if successful; otherwise an error code.","pos":[19112,19156]},{"content":"Remarks","pos":[19166,19173]},{"pos":[19244,19288],"content":"CMFCFilterChunkValueImpl::SetSystemTimeValue"},{"content":"Sets the property by key to a SystemTime.","pos":[19292,19333]},{"content":"Parameters","pos":[19622,19632]},{"content":"Specifies a property key.","pos":[19646,19671]},{"content":"Specifies the chunk value to set.","pos":[19694,19727]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[19749,19829]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[19830,19884]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[19903,19964]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[19965,20047]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[20048,20169]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[20194,20279]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[20280,20386]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[20387,20451]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[20478,20563]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[20590,20665]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[20666,20714]},{"content":"Return Value","pos":[20724,20736]},{"content":"S_OK if successful; otherwise an error code.","pos":[20740,20784]},{"content":"Remarks","pos":[20794,20801]},{"pos":[20866,20904],"content":"CMFCFilterChunkValueImpl::SetTextValue"},{"content":"Sets the property by key to a Unicode string.","pos":[20908,20953]},{"content":"Parameters","pos":[21232,21242]},{"content":"Specifies a property key.","pos":[21256,21281]},{"content":"Specifies the chunk value to set.","pos":[21302,21335]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[21357,21437]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[21438,21492]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[21511,21572]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[21573,21655]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[21656,21777]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[21802,21887]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[21888,21994]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[21995,22059]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[22086,22171]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[22198,22273]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[22274,22322]},{"content":"Return Value","pos":[22332,22344]},{"content":"S_OK if successful; otherwise an error code.","pos":[22348,22392]},{"content":"Remarks","pos":[22402,22409]},{"content":"See Also","pos":[22418,22426]},{"content":"Classes","pos":[22431,22438]}],"content":"---\ntitle: \"CMFCFilterChunkValueImpl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCFilterChunkValueImpl\"\n  - \"afxwin/CMFCFilterChunkValueImpl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCFilterChunkValueImpl class\"\nms.assetid: 3c833f23-5b88-4d08-9e09-ca6a8aec88bf\ncaps.latest.revision: 25\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCFilterChunkValueImpl Class\nThis is a class which simplifies both chunk and property value pair logic.  \n  \n## Syntax  \n  \n```  \nclass CMFCFilterChunkValueImpl : public ATL::IFilterChunkValue;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCFilterChunkValueImpl::~CMFCFilterChunkValueImpl](#cmfcfilterchunkvalueimpl___dtorcmfcfilterchunkvalueimpl)|Destructs the object.|  \n|[CMFCFilterChunkValueImpl::CMFCFilterChunkValueImpl](#cmfcfilterchunkvalueimpl__cmfcfilterchunkvalueimpl)|Constructs the object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCFilterChunkValueImpl::Clear](#cmfcfilterchunkvalueimpl__clear)|Clears the ChunkValue.|  \n|[CMFCFilterChunkValueImpl::CopyChunk](#cmfcfilterchunkvalueimpl__copychunk)|Copies this chunk to a structure describing the characteristics of a chunk.|  \n|[CMFCFilterChunkValueImpl::CopyFrom](#cmfcfilterchunkvalueimpl__copyfrom)|Initializes this chunk value from the other value.|  \n|[CMFCFilterChunkValueImpl::GetChunkGUID](#cmfcfilterchunkvalueimpl__getchunkguid)|Retrieves the chunk GUID.|  \n|[CMFCFilterChunkValueImpl::GetChunkPID](#cmfcfilterchunkvalueimpl__getchunkpid)|Retrieves the chunk PID (property ID).|  \n|[CMFCFilterChunkValueImpl::GetChunkType](#cmfcfilterchunkvalueimpl__getchunktype)|Gets chunk type.|  \n|[CMFCFilterChunkValueImpl::GetString](#cmfcfilterchunkvalueimpl__getstring)|Retrieves the the string value.|  \n|[CMFCFilterChunkValueImpl::GetValue](#cmfcfilterchunkvalueimpl__getvalue)|Retrieves the value as an allocated propvariant.|  \n|[CMFCFilterChunkValueImpl::GetValueNoAlloc](#cmfcfilterchunkvalueimpl__getvaluenoalloc)|Returns non-allocated (internal value) value.|  \n|[CMFCFilterChunkValueImpl::IsValid](#cmfcfilterchunkvalueimpl__isvalid)|Checks whether this property value is valid or not.|  \n|[CMFCFilterChunkValueImpl::SetBoolValue](#cmfcfilterchunkvalueimpl__setboolvalue)|Overloaded. Sets the property by key to a Boolean.|  \n|[CMFCFilterChunkValueImpl::SetDwordValue](#cmfcfilterchunkvalueimpl__setdwordvalue)|Sets the property by key to a DWORD.|  \n|[CMFCFilterChunkValueImpl::SetFileTimeValue](#cmfcfilterchunkvalueimpl__setfiletimevalue)|Sets the property by key to a filetime.|  \n|[CMFCFilterChunkValueImpl::SetInt64Value](#cmfcfilterchunkvalueimpl__setint64value)|Sets the property by key to an int64.|  \n|[CMFCFilterChunkValueImpl::SetIntValue](#cmfcfilterchunkvalueimpl__setintvalue)|Sets the property by key to an int.|  \n|[CMFCFilterChunkValueImpl::SetLongValue](#cmfcfilterchunkvalueimpl__setlongvalue)|Sets the property by key to a LONG.|  \n|[CMFCFilterChunkValueImpl::SetSystemTimeValue](#cmfcfilterchunkvalueimpl__setsystemtimevalue)|Sets the property by key to a SystemTime.|  \n|[CMFCFilterChunkValueImpl::SetTextValue](#cmfcfilterchunkvalueimpl__settextvalue)|Sets the property by key to a Unicode string.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCFilterChunkValueImpl::SetChunk](#cmfcfilterchunkvalueimpl__setchunk)|A helper function that sets the chunk's common properties.|  \n  \n## Remarks  \n To use, you simply create a CMFCFilterChunkValueImpl class of the right kind  \n  \n Example:  \n  \n CMFCFilterChunkValueImpl chunk;  \n  \n hr = chunk.SetBoolValue(PKEY_IsAttachment, true);  \n  \n or  \n  \n hr = chunk.SetFileTimeValue(PKEY_ItemDate, ftLastModified);  \n  \n## Inheritance Hierarchy  \n `ATL::IFilterChunkValue`  \n  \n [CMFCFilterChunkValueImpl](../../mfc/reference/cmfcfilterchunkvalueimpl-class.md)  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__clear\"></a>  CMFCFilterChunkValueImpl::Clear  \n Clears the ChunkValue.  \n  \n```  \nvoid Clear();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__cmfcfilterchunkvalueimpl\"></a>  CMFCFilterChunkValueImpl::CMFCFilterChunkValueImpl  \n Constructs the object.  \n  \n```  \nCMFCFilterChunkValueImpl();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl___dtorcmfcfilterchunkvalueimpl\"></a>  CMFCFilterChunkValueImpl::~CMFCFilterChunkValueImpl  \n Destructs the object.  \n  \n```  \nvirtual ~CMFCFilterChunkValueImpl();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__copychunk\"></a>  CMFCFilterChunkValueImpl::CopyChunk  \n Copies this chunk to a structure describing the characteristics of a chunk.  \n  \n```  \nHRESULT CopyChunk(STAT_CHUNK* pStatChunk);\n```  \n  \n### Parameters  \n `pStatChunk`  \n A pointer to destination value describing the characteristics of the chunk.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__copyfrom\"></a>  CMFCFilterChunkValueImpl::CopyFrom  \n Initializes this chunk value from the other value.  \n  \n```  \nvoid CopyFrom (IFilterChunkValue* pValue);\n```  \n  \n### Parameters  \n `pValue`  \n Specifies the source value to copy from.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getchunkguid\"></a>  CMFCFilterChunkValueImpl::GetChunkGUID  \n Retrieves the chunk GUID.  \n  \n```  \nREFGUID GetChunkGUID() const;\n\n \n```  \n  \n### Return Value  \n A reference to a GUID identifying the chunk.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getchunkpid\"></a>  CMFCFilterChunkValueImpl::GetChunkPID  \n Retrieves the chunk PID (property ID).  \n  \n```  \nDWORD GetChunkPID() const;\n\n \n```  \n  \n### Return Value  \n A DWORD value containing the property ID.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getchunktype\"></a>  CMFCFilterChunkValueImpl::GetChunkType  \n Retrieves the chunk type.  \n  \n```  \nCHUNKSTATE GetChunkType() const;\n\n \n```  \n  \n### Return Value  \n A CHUNKSTATE enumerated value, which specifies whether the current chunk is a text-type property or a value-type property.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getstring\"></a>  CMFCFilterChunkValueImpl::GetString  \n Retrieves the string value.  \n  \n```  \nCString &GetString();\n```  \n  \n### Return Value  \n A string containing the chunk value.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getvalue\"></a>  CMFCFilterChunkValueImpl::GetValue  \n Retrieves the value as an allocated propvariant.  \n  \n```  \nHRESULT GetValue(PROPVARIANT** ppPropVariant);\n```  \n  \n### Parameters  \n `ppPropVariant`  \n When the function returns, this parameter contains the chunk value.  \n  \n### Return Value  \n S_OK if PROPVARIANT was allocated successfully and the chunk value was successfully copied to `ppPropVariant`; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getvaluenoalloc\"></a>  CMFCFilterChunkValueImpl::GetValueNoAlloc  \n Returns the non-allocated (internal value) value.  \n  \n```  \nPROPVARIANT GetValueNoAlloc ();\n```  \n  \n### Return Value  \n Returns the current chunk value.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__isvalid\"></a>  CMFCFilterChunkValueImpl::IsValid  \n Checks whether this property value is valid or not.  \n  \n```  \nBOOL IsValid() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the current chunk value is valid; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setboolvalue\"></a>  CMFCFilterChunkValueImpl::SetBoolValue  \n Overloaded. Sets the property by key to a Boolean.  \n  \n```  \nHRESULT SetBoolValue(\n    REFPROPERTYKEY pkey,  \n    BOOL bVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n\n \nHRESULT SetBoolValue(\n    REFPROPERTYKEY pkey,  \n    VARIANT_BOOL bVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `bVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setchunk\"></a>  CMFCFilterChunkValueImpl::SetChunk  \n A helper function that sets the chunk's common properties.  \n  \n```  \nHRESULT SetChunk(\n    REFPROPERTYKEY pkey,  \n    CHUNKSTATE chunkType=CHUNK_VALUE,  \n    LCID locale=0,  \n    DWORD cwcLenSource=0,  \n    DWORD cwcStartSource=0,  \n    CHUNK_BREAKTYPE chunkBreakType=CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setdwordvalue\"></a>  CMFCFilterChunkValueImpl::SetDwordValue  \n Set the property by key to a DWORD.  \n  \n```  \nHRESULT SetDwordValue(\n    REFPROPERTYKEY pkey,  \n    DWORD dwVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `dwVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setfiletimevalue\"></a>  CMFCFilterChunkValueImpl::SetFileTimeValue  \n Set the property by key to a filetime.  \n  \n```  \nHRESULT SetFileTimeValue(\n    REFPROPERTYKEY pkey,  \n    FILETIME dtVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `dtVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setint64value\"></a>  CMFCFilterChunkValueImpl::SetInt64Value  \n Set the property by key to an int64.  \n  \n```  \nHRESULT SetInt64Value(\n    REFPROPERTYKEY pkey,  \n    __int64 nVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `nVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setintvalue\"></a>  CMFCFilterChunkValueImpl::SetIntValue  \n Set the property by key to an int.  \n  \n```  \nHRESULT SetIntValue(\n    REFPROPERTYKEY pkey,  \n    int nVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `nVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setlongvalue\"></a>  CMFCFilterChunkValueImpl::SetLongValue  \n Set the property by key to a LONG.  \n  \n```  \nHRESULT SetLongValue(\n    REFPROPERTYKEY pkey,  \n    long lVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `lVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setsystemtimevalue\"></a>  CMFCFilterChunkValueImpl::SetSystemTimeValue  \n Sets the property by key to a SystemTime.  \n  \n```  \nHRESULT SetSystemTimeValue(\n    REFPROPERTYKEY pkey,  \n    const SYSTEMTIME& systemTime,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale=0,  \n    DWORD cwcLenSource=0,  \n    DWORD cwcStartSource=0,  \n    CHUNK_BREAKTYPE chunkBreakType=CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `systemTime`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__settextvalue\"></a>  CMFCFilterChunkValueImpl::SetTextValue  \n Sets the property by key to a Unicode string.  \n  \n```  \nHRESULT SetTextValue(\n    REFPROPERTYKEY pkey,  \n    LPCTSTR pszValue,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `pszValue`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n## See Also  \n [Classes](../../mfc/reference/mfc-classes.md)\n"}