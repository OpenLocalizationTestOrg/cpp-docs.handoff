{"nodes":[{"pos":[12,56],"content":"is_nothrow_assignable Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_nothrow_assignable Class | Microsoft Docs","pos":[0,44]}]},{"content":"is_nothrow_assignable Class","pos":[770,797]},{"pos":[798,905],"content":"Tests whether a value of <ph id=\"ph1\">`From`</ph> type can be assigned to <ph id=\"ph2\">`To`</ph> type and the assignment is known not to throw.","source":"Tests whether a value of `From` type can be assigned to `To` type and the assignment is known not to throw."},{"content":"Syntax","pos":[914,920]},{"content":"Parameters","pos":[1008,1018]},{"content":"To","pos":[1022,1024]},{"content":"The type of the object that receives the assignment.","pos":[1028,1080]},{"content":"From","pos":[1087,1091]},{"content":"The type of the object that provides the value.","pos":[1095,1142]},{"content":"Remarks","pos":[1151,1158]},{"content":"The expression <ph id=\"ph1\">`declval&lt;To&gt;() = declval&lt;From&gt;()`</ph> must be well-formed and must be known to the compiler not to throw.","pos":[1162,1278],"source":"The expression `declval<To>() = declval<From>()` must be well-formed and must be known to the compiler not to throw."},{"content":"Both <ph id=\"ph1\">`From`</ph> and <ph id=\"ph2\">`To`</ph> must be complete types, <ph id=\"ph3\">`void`</ph>, or arrays of unknown bound.","pos":[1279,1359],"source":" Both `From` and `To` must be complete types, `void`, or arrays of unknown bound."},{"content":"Requirements","pos":[1368,1380]},{"pos":[1384,1409],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[1416,1434],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[1443,1451]},{"content":"&lt;type_traits&gt;","pos":[1456,1469],"source":"<type_traits>"}],"content":"---\ntitle: \"is_nothrow_assignable Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"cpp\"\n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"is_nothrow_assignable\"\n  - \"std.is_nothrow_assignable\"\n  - \"std::is_nothrow_assignable\"\n  - \"type_traits/std::is_nothrow_assignable\"\ndev_langs: \n  - \"C++\"\n  - \"c++\"\nhelpviewer_keywords: \n  - \"is_nothrow_assignable\"\nms.assetid: aa3aca92-308b-4b1d-b3f3-c54216c48fe7\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_nothrow_assignable Class\nTests whether a value of `From` type can be assigned to `To` type and the assignment is known not to throw.  \n  \n## Syntax  \n  \n```\ntemplate <class To, class From>  \nstruct is_nothrow_assignable;\n```  \n  \n#### Parameters  \n To  \n The type of the object that receives the assignment.  \n  \n From  \n The type of the object that provides the value.  \n  \n## Remarks  \n The expression `declval<To>() = declval<From>()` must be well-formed and must be known to the compiler not to throw. Both `From` and `To` must be complete types, `void`, or arrays of unknown bound.  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)\n\n\n\n"}