<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">935ffb299db08583b1c8c42f07d65a5f22289970</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cfile-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05d5d53e9cfb35948317dc9460f6fd4e916559c4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">357b15e3b022f0d8fd3f0be92b8563e10ecf659a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CFile Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CFile Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The base class for Microsoft Foundation Class file classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CFile::CFile</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CFile`</ph> object from a path or file handle.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CFile::Abort</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Closes a file ignoring all warnings and errors.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CFile::Close</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Closes a file and deletes the object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CFile::Duplicate</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Constructs a duplicate object based on this file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CFile::Flush</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Flushes any data yet to be written.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CFile::GetFileName</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieves the filename of the selected file.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CFile::GetFilePath</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Retrieves the full file path of the selected file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CFile::GetFileTitle</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Retrieves the title of the selected file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CFile::GetLength</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Retrieves the length of the file.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CFile::GetPosition</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Retrieves the current file pointer.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CFile::GetStatus</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Retrieves the status of the open file, or in the static version, retrieves the status of the specified file (static, virtual function).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CFile::LockRange</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Locks a range of bytes in a file.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CFile::Open</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Safely opens a file with an error-testing option.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CFile::Read</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Reads (unbuffered) data from a file at the current file position.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CFile::Remove</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Deletes the specified file (static function).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CFile::Rename</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Renames the specified file (static function).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CFile::Seek</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Positions the current file pointer.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CFile::SeekToBegin</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Positions the current file pointer at the beginning of the file.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CFile::SeekToEnd</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Positions the current file pointer at the end of the file.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CFile::SetFilePath</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Sets the full file path of the selected file.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CFile::SetLength</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Changes the length of the file.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CFile::SetStatus</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Sets the status of the specified file (static, virtual function).</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CFile::UnlockRange</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Unlocks a range of bytes in a file.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CFile::Write</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Writes (unbuffered) data in a file to the current file position.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CFile::operator HANDLE</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A handle to a <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CFile::hFileNull</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Determines if the <ph id="ph1">`CFile`</ph> object has a valid handle.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CFile::m_hFile</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Usually contains the operating-system file handle.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Protected Data Members</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CFile::m_pTM</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`CAtlTransactionManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>It directly provides unbuffered, binary disk input/output services, and it indirectly supports text files and memory files through its derived classes.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>works in conjunction with the <ph id="ph1">`CArchive`</ph> class to support serialization of Microsoft Foundation Class objects.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The hierarchical relationship between this class and its derived classes allows your program to operate on all file objects through the polymorphic <ph id="ph1">`CFile`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A memory file, for example, behaves like a disk file.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CFile`</ph> and its derived classes for general-purpose disk I/O.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`ofstream`</ph> or other Microsoft iostream classes for formatted text sent to a disk file.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Normally, a disk file is opened automatically on <ph id="ph1">`CFile`</ph> construction and closed on destruction.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Static member functions permit you to interrogate a file's status without opening the file.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CFile`</ph>, see the articles <bpt id="p1">[</bpt>Files in MFC<ept id="p1">](../../mfc/files-in-mfc.md)</ept> and <bpt id="p2">[</bpt>File Handling<ept id="p2">](../../c-runtime-library/file-handling.md)</ept> in the <bpt id="p3">*</bpt>Run-Time Library Reference<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afx.h</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>CFile::Abort</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Closes the file associated with this object and makes the file unavailable for reading or writing.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If you have not closed the file before destroying the object, the destructor closes it for you.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When handling exceptions, <ph id="ph1">`CFile::Abort`</ph> differs from <ph id="ph2">`CFile::Close`</ph> in two important ways.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>First, the <bpt id="p1">**</bpt>Abort<ept id="p1">**</ept> function will not throw an exception on failures because failures are ignored by <bpt id="p2">**</bpt>Abort<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Second, <bpt id="p1">**</bpt>Abort<ept id="p1">**</ept> will not <bpt id="p2">**</bpt>ASSERT<ept id="p2">**</ept> if the file has not been opened or was closed previously.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If you used <bpt id="p1">**</bpt>new<ept id="p1">**</ept> to allocate the <ph id="ph1">`CFile`</ph> object on the heap, then you must delete it after closing the file.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Abort<ept id="p1">**</ept> sets <ph id="ph1">`m_hFile`</ph> to <ph id="ph2">`CFile::hFileNull`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#5</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CFile::CFile</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Constructs and initializes a <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Handle of a file to attach to the <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Relative or full path of a file to attach to the <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Bitwise combination (OR) of file access options for the specified file.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>See the Remarks section for possible options.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Pointer to CAtlTransactionManager object</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following five tables list the possible options for the <ph id="ph1">`nOpenFlags`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Choose only one of the following file access mode options.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The default file access mode is <ph id="ph1">`CFile::modeRead`</ph>, which is read only.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Requests read access only.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Requests write access only.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Requests read and write access.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Choose one of the following character mode options.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Sets binary mode (used in derived classes only).</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Sets text mode with special processing for carriage return–linefeed pairs (used in derived classes only).</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Sets Unicode mode (used in derived classes only).</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Text is written to the file in Unicode format when the application is built in a Unicode configuration.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>No BOM is written to the file.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Choose only one of the following file share mode options.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The default file share mode is <ph id="ph1">`CFile::shareExclusive`</ph>, which is exclusive.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>No sharing restrictions.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Denies read access to all others.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Denies write access to all others.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Denies read and write access to all others.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Choose the first, or both, of the following file creation mode options.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The default creation mode is <ph id="ph1">`CFile::modeNoTruncate`</ph>, which is open existing.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Creates a new file if no file exists.; If the file already exists, <bpt id="p1">[</bpt>CFileException<ept id="p1">](../../mfc/reference/cfileexception-class.md)</ept> is raised.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Creates a new file if no file exists; otherwise, if the file already exists, it is attached to the <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Choose the following file caching options as described.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>By default, the system uses a general purpose caching scheme that is not available as an option.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The system does not use an intermediate cache for the file.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>This option cancels the following 2 options.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The file cache is optimized for random access.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Do not use this option and the sequential scan option.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The file cache is optimized for sequential access.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Do not use this option and the random access option.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Write operations are performed without delay.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Choose the following security option to prevent the file handle from being inherited.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>By default, any new child processes can use the file handle.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Prevents any child processes from using the file handle.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The default constructor initializes members but does not attach a file to the <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>After using this constructor, use the <bpt id="p1">[</bpt>CFile::Open<ept id="p1">](#cfile__open)</ept> method to open a file and attach it to the <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The constructor with one parameter initializes members and attaches an existing file to the <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The constructor with two parameters initializes members and tries to open the specified file.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>If this constructor successfully opens the specified file, the file is attached to the <ph id="ph1">`CFile`</ph> object; otherwise, this constructor throws a pointer to a <ph id="ph2">`CInvalidArgException`</ph> object.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>For more information about how to handle exceptions, see <bpt id="p1">[</bpt>Exceptions<ept id="p1">](../../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CFile`</ph> object successfully opens a specified file, it will close this file automatically when the <ph id="ph2">`CFile`</ph> object is destroyed; otherwise, you must explicitly close the file after it is no longer attached to the <ph id="ph3">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The following code shows how to use a <ph id="ph1">`CFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#4</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>CFile::Close</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Closes the file associated with this object and makes the file unavailable for reading or writing.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If you have not closed the file before destroying the object, the destructor closes it for you.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If you used <bpt id="p1">**</bpt>new<ept id="p1">**</ept> to allocate the <ph id="ph1">`CFile`</ph> object on the heap, then you must delete it after closing the file.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Close<ept id="p1">**</ept> sets <ph id="ph1">`m_hFile`</ph> to <ph id="ph2">`CFile::hFileNull`</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFile::CFile<ept id="p1">](#cfile__cfile)</ept>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>CFile::Duplicate</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Constructs a duplicate <ph id="ph1">`CFile`</ph> object for a given file.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A pointer to a duplicate <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This is equivalent to the C run-time function <ph id="ph1">`_dup`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>CFile::Flush</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Forces any data remaining in the file buffer to be written to the file.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The use of <ph id="ph1">`Flush`</ph> does not guarantee flushing of <ph id="ph2">`CArchive`</ph> buffers.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If you are using an archive, call <bpt id="p1">[</bpt>CArchive::Flush<ept id="p1">](../../mfc/reference/carchive-class.md#carchive__flush)</ept> first.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFile::SetFilePath<ept id="p1">](#cfile__setfilepath)</ept>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>CFile::GetFileName</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the name of a specified file.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The name of the file.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For example, when you call <ph id="ph1">`GetFileName`</ph> to generate a message to the user about the file <ph id="ph2">`c:\windows\write\myfile.wri`</ph>, the filename, <ph id="ph3">`myfile.wri`</ph>, is returned.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>To return the entire path of the file, including the name, call <bpt id="p1">[</bpt>GetFilePath<ept id="p1">](#cfile__getfilepath)</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>To return the title of the file ( <ph id="ph1">`myfile`</ph>), call <bpt id="p1">[</bpt>GetFileTitle<ept id="p1">](#cfile__getfiletitle)</ept>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This code fragment opens the SYSTEM.INI file in your WINDOWS directory.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>If found, the example will print out the name and path and title, as shown under Output:</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#6</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>CFile::GetFilePath</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the full path of a specified file.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The full path of the specified file.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>For example, when you call <ph id="ph1">`GetFilePath`</ph> to generate a message to the user about the file <ph id="ph2">`c:\windows\write\myfile.wri`</ph>, the file path, <ph id="ph3">`c:\windows\write\myfile.wri`</ph>, is returned.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>To return just the name of the file ( <ph id="ph1">`myfile.wri`</ph>), call <bpt id="p1">[</bpt>GetFileName<ept id="p1">](#cfile__getfilename)</ept>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>To return the title of the file ( <ph id="ph1">`myfile`</ph>), call <bpt id="p1">[</bpt>GetFileTitle<ept id="p1">](#cfile__getfiletitle)</ept>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>GetFileName<ept id="p1">](#cfile__getfilename)</ept>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>CFile::GetFileTitle</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the file title (the display name) for the file.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The title of the underlying file.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>This method calls <bpt id="p1">[</bpt>GetFileTitle<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646924)</ept> to retrieve the title of the file.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>If successful, the method returns the string that the system would use to display the file name to the user.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Otherwise, the method calls <bpt id="p1">[</bpt>PathFindFileName<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773589)</ept> to retrieve the file name (including the file extension) of the underlying file.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Therefore, the file extension will not always be included in the returned file title string.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>GetFileTitle<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646924)</ept> and <bpt id="p2">[</bpt>PathFindFileName<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb773589)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>To return the entire path of the file, including the name, call <bpt id="p1">[</bpt>GetFilePath<ept id="p1">](#cfile__getfilepath)</ept>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>To return just the name of the file, call <bpt id="p1">[</bpt>GetFileName<ept id="p1">](#cfile__getfilename)</ept>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>GetFileName<ept id="p1">](#cfile__getfilename)</ept>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>CFile::GetLength</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Obtains the current logical length of the file in bytes.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The length of the file.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#7</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>CFile::GetPosition</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Obtains the current value of the file pointer, which can be used in subsequent calls to <ph id="ph1">`Seek`</ph>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The file pointer.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#8</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>CFile::GetStatus</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>This method retrieves status information related to a given <ph id="ph1">`CFile`</ph> object instance or a given file path.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A reference to a user-supplied <bpt id="p1">**</bpt>CFileStatus<ept id="p1">**</ept> structure that will receive the status information.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CFileStatus<ept id="p1">**</ept> structure has the following fields:</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTime m_ctime<ept id="p1">**</ept> The date and time the file was created.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTime m_mtime<ept id="p1">**</ept> The date and time the file was last modified.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTime m_atime<ept id="p1">**</ept> The date and time the file was last accessed for reading.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ULONGLONG m_size<ept id="p1">**</ept> The logical size of the file in bytes, as reported by the DIR command.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BYTE m_attribute<ept id="p1">**</ept> The attribute byte of the file.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>char m_szFullName[_MAX_PATH]<ept id="p1">**</ept> The absolute filename in the Windows character set.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A string in the Windows character set that is the path to the desired file.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The path can be relative or absolute, or it can contain a network path name.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Pointer to CAtlTransactionManager object</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the status information for the specified file is successfully obtained; otherwise, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The non-static version of <bpt id="p1">**</bpt>GetStatus<ept id="p1">**</ept> retrieves status information of the open file associated with the given <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The static version of <bpt id="p1">**</bpt>GetStatus<ept id="p1">**</ept> obtains the file status from a given file path without actually opening the file.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>This is useful for testing the existence and access rights of a file.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>m_attribute<ept id="p1">**</ept> member of the <bpt id="p2">**</bpt>CFileStatus<ept id="p2">**</ept> structure refers to the file attribute set.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CFile`</ph> class provides the <bpt id="p1">**</bpt>Attribute<ept id="p1">**</ept> enumeration type so file attributes can be specified symbolically:</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#10</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>CFile::hFileNull</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Determines the presence of a valid file handle for the <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>This constant is used to determine if the <ph id="ph1">`CFile`</ph> object has a valid file handle.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this operation:</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#22</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>CFile::LockRange</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Locks a range of bytes in an open file, throwing an exception if the file is already locked.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The byte offset of the start of the byte range to lock.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The number of bytes in the range to lock.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Locking bytes in a file prevents access to those bytes by other processes.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>You can lock more than one region of a file, but no overlapping regions are allowed.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>When you unlock the region, using the <ph id="ph1">`UnlockRange`</ph> member function, the byte range must correspond exactly to the region that was previously locked.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LockRange`</ph> function does not merge adjacent regions; if two locked regions are adjacent, you must unlock each region separately.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>This function is not available for the <ph id="ph1">`CMemFile`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#12</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>CFile::m_hFile</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Contains the operating-system file handle for an open file.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>is a public variable of type <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>It contains <ph id="ph1">`CFile::hFileNull`</ph> (an operating-system-independent empty file indicator) if the handle has not been assigned.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Use of <ph id="ph1">`m_hFile`</ph> is not recommended because the member's meaning depends on the derived class.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>is made a public member for convenience in supporting nonpolymorphic use of the class.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>CFile::m_pTM</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CAtlTransactionManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>CFile::Open</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open<ept id="p1">**</ept> is designed for use with the default <ph id="ph1">`CFile`</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>A string that is the path to the desired file.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The path can be relative, absolute, or a network name (UNC).</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept> that defines the file's sharing and access mode.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>It specifies the action to take when opening the file.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>You can combine options by using the bitwise-OR ( <bpt id="p1">**</bpt>&amp;#124;<ept id="p1">**</ept> ) operator.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>One access permission and one share option are required; the <bpt id="p1">**</bpt>modeCreate<ept id="p1">**</ept> and <bpt id="p2">**</bpt>modeNoInherit<ept id="p2">**</ept> modes are optional.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>CFile<ept id="p1">](#cfile__cfile)</ept> constructor for a list of mode options.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>A pointer to an existing file-exception object that will receive the status of a failed operation.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Pointer to CAtlTransactionManager object</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Nonzero if the open was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pError`</ph> parameter is meaningful only if 0 is returned.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The two functions form a "safe" method for opening a file where a failure is a normal, expected condition.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>While the <ph id="ph1">`CFile`</ph> constructor will throw an exception in an error condition, <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> will return <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> for error conditions.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open<ept id="p1">**</ept> can still initialize a <bpt id="p2">[</bpt>CFileException<ept id="p2">](../../mfc/reference/cfileexception-class.md)</ept> object to describe the error, however.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>If you don't supply the <ph id="ph1">`pError`</ph> parameter, or if you pass <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> for <ph id="ph2">`pError`</ph>, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept> will return <bpt id="p3">**</bpt>FALSE<ept id="p3">**</ept> and not throw a <ph id="ph3">`CFileException`</ph>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>If you pass a pointer to an existing <ph id="ph1">`CFileException`</ph>, and <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> encounters an error, the function will fill it with information describing that error.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>In neither case will <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> throw an exception.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The following table describes the possible results of <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Error encountered</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>CFileException content</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>NULL</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>TRUE</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>ptr to</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>TRUE</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>unchanged</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>NULL</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>FALSE</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>ptr to</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>FALSE</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>initialized to describe error</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#13</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#14</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>CFile::operator HANDLE</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Use this operator to pass a handle to a <ph id="ph1">`CFile`</ph> object to functions such as <bpt id="p1">[</bpt>ReadFileEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365468)</ept> and <bpt id="p2">[</bpt>GetFileTime<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms724320)</ept> that expect a <ph id="ph2">`HANDLE`</ph>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>CFile::Read</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Reads data into a buffer from the file associated with the <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Pointer to the user-supplied buffer that is to receive the data read from the file.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to be read from the file.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>For text-mode files, carriage return–linefeed pairs are counted as single characters.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The number of bytes transferred to the buffer.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Note that for all <ph id="ph1">`CFile`</ph> classes, the return value may be less than <ph id="ph2">`nCount`</ph> if the end of file was reached.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#15</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>For another example see <bpt id="p1">[</bpt>CFile::Open<ept id="p1">](#cfile__open)</ept>.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>CFile::Remove</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>This static function deletes the file specified by the path.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>A string that is the path to the desired file.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The path can be relative or absolute, and can contain a network name.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Pointer to CAtlTransactionManager object</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>It will not remove a directory.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Remove<ept id="p1">**</ept> member function throws an exception if the connected file is open or if the file cannot be removed.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>This is equivalent to the DEL command.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#17</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>CFile::Rename</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>This static function renames the specified file.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The old path.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The new path.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Pointer to CAtlTransactionManager object</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Directories cannot be renamed.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>This is equivalent to the REN command.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#18</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>CFile::Seek</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Repositions the file pointer in an open file.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Number of bytes to move the file pointer.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Positive values move the file pointer towards the end of the file; negative values move the file pointer towards the start of the file.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Position to seek from.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>See the Remarks section for possible values.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The position of the file pointer if the method was successful; otherwise, the return value is undefined and a pointer to a <ph id="ph1">`CFileException`</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The following table lists possible values for the <ph id="ph1">`nFrom`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Seek from the start of the file.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Seek from the current location of the file pointer.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Seek from the end of the file.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>When a file is opened, the file pointer is positioned at 0, the start of the file.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>You can set the file pointer to a position beyond the end of a file.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>If you do this, the size of the file does not increase until you write to the file.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The exception handler for this method must delete the exception object after the exception is processed.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#9</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>CFile::SeekToBegin</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Sets the value of the file pointer to the beginning of the file.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>is equivalent to <ph id="ph1">`Seek( 0L, CFile::begin )`</ph>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#19</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>CFile::SeekToEnd</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Sets the value of the file pointer to the logical end of the file.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The length of the file in bytes.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>is equivalent to <ph id="ph1">`CFile::Seek( 0L, CFile::end )`</ph>.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#19</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>CFile::SetFilePath</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Call this function to specify the path of the file; for example, if the path of a file is not available when a <bpt id="p1">[</bpt>CFile<ept id="p1">](../../mfc/reference/cfile-class.md)</ept> object is constructed, call <ph id="ph1">`SetFilePath`</ph> to provide it.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Pointer to a string specifying the new path.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>does not open the file or create the file; it simply associates the <ph id="ph1">`CFile`</ph> object with a path name, which can then be used.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#20</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>CFile::SetLength</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Call this function to change the length of the file.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Desired length of the file in bytes.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>This value can be larger or smaller than the current length of the file.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The file will be extended or truncated as appropriate.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`CMemFile`</ph>, this function could throw a <ph id="ph2">`CMemoryException`</ph> object.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#11</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>CFile::SetStatus</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Sets the status of the file associated with this file location.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>A string that is the path to the desired file.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The path can be relative or absolute, and can contain a network name.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>status</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The buffer containing the new status information.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">**</bpt>GetStatus<ept id="p1">**</ept> member function to prefill the <bpt id="p2">**</bpt>CFileStatus<ept id="p2">**</ept> structure with current values, then make changes as required.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>If a value is 0, then the corresponding status item is not updated.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>GetStatus<ept id="p1">](#cfile__getstatus)</ept> member function for a description of the <bpt id="p2">**</bpt>CFileStatus<ept id="p2">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Pointer to CAtlTransactionManager object</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>To set the time, modify the <bpt id="p1">**</bpt>m_mtime<ept id="p1">**</ept> field of <bpt id="p2">*</bpt>status<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Please note that when you make a call to <ph id="ph1">`SetStatus`</ph> in an attempt to change only the attributes of the file, and the <bpt id="p1">**</bpt>m_mtime<ept id="p1">**</ept> member of the file status structure is nonzero, the attributes may also be affected (changing the time stamp may have side effects on the attributes).</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>If you want to only change the attributes of the file, first set the <bpt id="p1">**</bpt>m_mtime<ept id="p1">**</ept> member of the file status structure to zero and then make a call to <ph id="ph1">`SetStatus`</ph>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#21</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>CFile::UnlockRange</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Unlocks a range of bytes in an open file.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The byte offset of the start of the byte range to unlock.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The number of bytes in the range to unlock.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>See the description of the <bpt id="p1">[</bpt>LockRange<ept id="p1">](#cfile__lockrange)</ept> member function for details.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>This function is not available for the <ph id="ph1">`CMemFile`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#12</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>CFile::Write</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Writes data from a buffer to the file associated with the <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>A pointer to the user-supplied buffer that contains the data to be written to the file.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The number of bytes to be transferred from the buffer.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>For text-mode files, carriage return–linefeed pairs are counted as single characters.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Write<ept id="p1">**</ept> throws an exception in response to several conditions, including the disk-full condition.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#16</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>In addition, see the examples for <bpt id="p1">[</bpt>CFile::CFile<ept id="p1">](#cfile__cfile)</ept> and <bpt id="p2">[</bpt>CFile::Open<ept id="p2">](#cfile__open)</ept>.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>MFC Sample DRAWCLI</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>CStdioFile Class</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>CMemFile Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>