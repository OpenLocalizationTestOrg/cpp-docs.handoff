{"nodes":[{"pos":[12,50],"content":"sync_per_thread Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"sync_per_thread Class | Microsoft Docs","pos":[0,38]}]},{"pos":[717,738],"content":"sync_per_thread Class","linkify":"sync_per_thread Class","nodes":[{"content":"sync_per_thread Class","pos":[0,21]}]},{"pos":[739,872],"content":"Describes a <bpt id=\"p1\">[</bpt>synchronization filter<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> that provides a separate cache object for each thread.","source":"Describes a [synchronization filter](../standard-library/allocators-header.md) that provides a separate cache object for each thread."},{"pos":[881,887],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[958,968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[975,984]},{"content":"Description","pos":[985,996]},{"content":"The type of cache associated with the synchronization filter.","pos":[1047,1108]},{"content":"This can be <bpt id=\"p1\">[</bpt>cache_chunklist<ept id=\"p1\">](../standard-library/cache-chunklist-class.md)</ept>, <bpt id=\"p2\">[</bpt>cache_freelist<ept id=\"p2\">](../standard-library/cache-freelist-class.md)</ept>, or <bpt id=\"p3\">[</bpt>cache_suballoc<ept id=\"p3\">](../standard-library/cache-suballoc-class.md)</ept>.","pos":[1109,1314],"source":" This can be [cache_chunklist](../standard-library/cache-chunklist-class.md), [cache_freelist](../standard-library/cache-freelist-class.md), or [cache_suballoc](../standard-library/cache-suballoc-class.md)."},{"pos":[1324,1331],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Allocators that use <ph id=\"ph1\">`sync_per_thread`</ph> can compare equal even though blocks allocated in one thread cannot be deallocated from another thread.","pos":[1335,1476],"source":"Allocators that use `sync_per_thread` can compare equal even though blocks allocated in one thread cannot be deallocated from another thread."},{"content":"When using one of these allocators memory blocks allocated in one thread should not be made visible to other threads.","pos":[1477,1594]},{"content":"In practice this means that a container that uses one of these allocators should only be accessed by a single thread.","pos":[1595,1712]},{"pos":[1722,1738],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[1759,1797],"content":"<bpt id=\"p1\">[</bpt>allocate<ept id=\"p1\">](#sync_per_thread__allocate)</ept>","source":"[allocate](#sync_per_thread__allocate)"},{"content":"Allocates a block of memory.","pos":[1798,1826]},{"pos":[1831,1873],"content":"<bpt id=\"p1\">[</bpt>deallocate<ept id=\"p1\">](#sync_per_thread__deallocate)</ept>","source":"[deallocate](#sync_per_thread__deallocate)"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[1874,1957]},{"pos":[1962,1996],"content":"<bpt id=\"p1\">[</bpt>equals<ept id=\"p1\">](#sync_per_thread__equals)</ept>","source":"[equals](#sync_per_thread__equals)"},{"content":"Compares two caches for equality.","pos":[1997,2030]},{"pos":[2040,2052],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2056,2081],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[2088,2109],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[2119,2186],"content":"<bpt id=\"p1\">&lt;a name=\"sync_per_thread__allocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sync_per_thread::allocate","linkify":"<a name=\"sync_per_thread__allocate\"></a>  sync_per_thread::allocate","source":"<a name=\"sync_per_thread__allocate\"></a>  sync_per_thread::allocate"},{"content":"Allocates a block of memory.","pos":[2190,2218]},{"pos":[2276,2286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2293,2302]},{"content":"Description","pos":[2303,2314]},{"content":"The number of elements in the array to be allocated.","pos":[2365,2417]},{"pos":[2428,2435],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function returns the result of a call to <ph id=\"ph1\">`cache::allocate(count)`</ph> on the cache object belonging to the current thread.","pos":[2439,2568],"source":"The member function returns the result of a call to `cache::allocate(count)` on the cache object belonging to the current thread."},{"content":"If no cache object has been allocated for the current thread, it first allocates one.","pos":[2569,2654]},{"pos":[2664,2735],"content":"<bpt id=\"p1\">&lt;a name=\"sync_per_thread__deallocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sync_per_thread::deallocate","linkify":"<a name=\"sync_per_thread__deallocate\"></a>  sync_per_thread::deallocate","source":"<a name=\"sync_per_thread__deallocate\"></a>  sync_per_thread::deallocate"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[2739,2822]},{"pos":[2892,2902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2909,2918]},{"content":"Description","pos":[2919,2930]},{"content":"A pointer to the first object to be deallocated from storage.","pos":[2979,3040]},{"content":"The number of objects to be deallocated from storage.","pos":[3053,3106]},{"pos":[3117,3124],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function calls <ph id=\"ph1\">`deallocate`</ph> on the cache object belonging to the current thread.","pos":[3128,3219],"source":"The member function calls `deallocate` on the cache object belonging to the current thread."},{"content":"If no cache object has been allocated for the current thread, it first allocates one.","pos":[3220,3305]},{"pos":[3315,3378],"content":"<bpt id=\"p1\">&lt;a name=\"sync_per_thread__equals\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sync_per_thread::equals","linkify":"<a name=\"sync_per_thread__equals\"></a>  sync_per_thread::equals","source":"<a name=\"sync_per_thread__equals\"></a>  sync_per_thread::equals"},{"content":"Compares two caches for equality.","pos":[3382,3415]},{"pos":[3483,3493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[3500,3509]},{"content":"Description","pos":[3510,3521]},{"content":"The cache object of the synchronization filter.","pos":[3572,3619]},{"content":"The cache object to compare for equality.","pos":[3632,3673]},{"pos":[3684,3696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`false`</ph> if no cache object has been allocated for this object or for <ph id=\"ph2\">`Other`</ph> in the current thread.","pos":[3700,3799],"source":"`false` if no cache object has been allocated for this object or for `Other` in the current thread."},{"content":"Otherwise it returns the result of applying <ph id=\"ph1\">`operator==`</ph> to the two cache objects.","pos":[3800,3882],"source":" Otherwise it returns the result of applying `operator==` to the two cache objects."},{"pos":[3892,3899],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3908,3916],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3920,3977],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>allocators&gt;<ept id=\"p1\">](../standard-library/allocators-header.md)</ept>","source":"[\\<allocators>](../standard-library/allocators-header.md)"}],"content":"---\ntitle: \"sync_per_thread Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"stdext::sync_per_thread\"\n  - \"sync_per_thread\"\n  - \"allocators/stdext::sync_per_thread\"\n  - \"stdext.sync_per_thread\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"sync_per_thread class\"\nms.assetid: 47bf75f8-5b02-4760-b1d3-3099d08fe14c\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# sync_per_thread Class\nDescribes a [synchronization filter](../standard-library/allocators-header.md) that provides a separate cache object for each thread.  \n  \n## Syntax  \n  \n```\ntemplate <class Cache>  \nclass sync_per_thread\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Cache`|The type of cache associated with the synchronization filter. This can be [cache_chunklist](../standard-library/cache-chunklist-class.md), [cache_freelist](../standard-library/cache-freelist-class.md), or [cache_suballoc](../standard-library/cache-suballoc-class.md).|  \n  \n## Remarks  \n Allocators that use `sync_per_thread` can compare equal even though blocks allocated in one thread cannot be deallocated from another thread. When using one of these allocators memory blocks allocated in one thread should not be made visible to other threads. In practice this means that a container that uses one of these allocators should only be accessed by a single thread.  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[allocate](#sync_per_thread__allocate)|Allocates a block of memory.|  \n|[deallocate](#sync_per_thread__deallocate)|Frees a specified number of objects from storage beginning at a specified position.|  \n|[equals](#sync_per_thread__equals)|Compares two caches for equality.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"sync_per_thread__allocate\"></a>  sync_per_thread::allocate  \n Allocates a block of memory.  \n  \n```\nvoid *allocate(std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`count`|The number of elements in the array to be allocated.|  \n  \n### Remarks  \n The member function returns the result of a call to `cache::allocate(count)` on the cache object belonging to the current thread. If no cache object has been allocated for the current thread, it first allocates one.  \n  \n##  <a name=\"sync_per_thread__deallocate\"></a>  sync_per_thread::deallocate  \n Frees a specified number of objects from storage beginning at a specified position.  \n  \n```\nvoid deallocate(void* ptr, std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer to the first object to be deallocated from storage.|  \n|`count`|The number of objects to be deallocated from storage.|  \n  \n### Remarks  \n The member function calls `deallocate` on the cache object belonging to the current thread. If no cache object has been allocated for the current thread, it first allocates one.  \n  \n##  <a name=\"sync_per_thread__equals\"></a>  sync_per_thread::equals  \n Compares two caches for equality.  \n  \n```\nbool equals(const sync<Cache>& Other) const;\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Cache`|The cache object of the synchronization filter.|  \n|`Other`|The cache object to compare for equality.|  \n  \n### Return Value  \n `false` if no cache object has been allocated for this object or for `Other` in the current thread. Otherwise it returns the result of applying `operator==` to the two cache objects.  \n  \n### Remarks  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}