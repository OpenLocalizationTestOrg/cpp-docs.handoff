{"nodes":[{"pos":[12,59],"content":"Examples of Lambda Expressions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Examples of Lambda Expressions | Microsoft Docs","pos":[0,47]}]},{"content":"Examples of Lambda Expressions","pos":[614,644]},{"content":"This article shows how to use lambda expressions in your programs.","pos":[645,711]},{"content":"For an overview of lambda expressions, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../cpp/lambda-expressions-in-cpp.md)</ept>.","pos":[712,813],"source":" For an overview of lambda expressions, see [Lambda Expressions](../cpp/lambda-expressions-in-cpp.md)."},{"content":"For more information about the structure of a lambda expression, see <bpt id=\"p1\">[</bpt>Lambda Expression Syntax<ept id=\"p1\">](../cpp/lambda-expression-syntax.md)</ept>.","pos":[814,946],"source":" For more information about the structure of a lambda expression, see [Lambda Expression Syntax](../cpp/lambda-expression-syntax.md)."},{"pos":[998,1026],"content":"Declaring Lambda Expressions"},{"content":"Example 1","pos":[1036,1045]},{"pos":[1049,1207],"content":"Because a lambda expression is typed, you can assign it to an <ph id=\"ph1\">`auto`</ph> variable or to a <bpt id=\"p1\">[</bpt>function<ept id=\"p1\">](../standard-library/function-class.md)</ept> object, as shown here:","source":"Because a lambda expression is typed, you can assign it to an `auto` variable or to a [function](../standard-library/function-class.md) object, as shown here:"},{"content":"Code","pos":[1217,1221]},{"content":"Output","pos":[1762,1768]},{"content":"Remarks","pos":[1807,1814]},{"pos":[1818,1978],"content":"For more information, see <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept>, <bpt id=\"p2\">[</bpt>function Class<ept id=\"p2\">](../standard-library/function-class.md)</ept>, and <bpt id=\"p3\">[</bpt>Function Call<ept id=\"p3\">](../cpp/function-call-cpp.md)</ept>.","source":"For more information, see [auto](../cpp/auto-cpp.md), [function Class](../standard-library/function-class.md), and [Function Call](../cpp/function-call-cpp.md)."},{"content":"Although lambda expressions are most often declared in the body of a function, you can declare them anywhere that you can initialize a variable.","pos":[1985,2129]},{"content":"Example 2","pos":[2139,2148]},{"content":"The Visual C++ compiler binds a lambda expression to its captured variables when the expression is declared instead of when the expression is called.","pos":[2152,2301]},{"content":"The following example shows a lambda expression that captures the local variable <ph id=\"ph1\">`i`</ph> by value and the local variable <ph id=\"ph2\">`j`</ph> by reference.","pos":[2302,2436],"source":" The following example shows a lambda expression that captures the local variable `i` by value and the local variable `j` by reference."},{"content":"Because the lambda expression captures <ph id=\"ph1\">`i`</ph> by value, the reassignment of <ph id=\"ph2\">`i`</ph> later in the program does not affect the result of the expression.","pos":[2437,2580],"source":" Because the lambda expression captures `i` by value, the reassignment of `i` later in the program does not affect the result of the expression."},{"content":"However, because the lambda expression captures <ph id=\"ph1\">`j`</ph> by reference, the reassignment of <ph id=\"ph2\">`j`</ph> does affect the result of the expression.","pos":[2581,2712],"source":" However, because the lambda expression captures `j` by reference, the reassignment of `j` does affect the result of the expression."},{"content":"Code","pos":[2722,2726]},{"content":"Output","pos":[3234,3240]},{"pos":[3273,3298],"content":"[<bpt id=\"p1\">[</bpt>In This Article<ept id=\"p1\">](#top)</ept>]","source":"[[In This Article](#top)]"},{"pos":[3348,3374],"content":"Calling Lambda Expressions"},{"content":"You can call a lambda expression immediately, as shown in the next code snippet.","pos":[3378,3458]},{"content":"The second snippet shows how to pass a lambda as an argument to Standard Template Library (STL) algorithms such as <ph id=\"ph1\">`find_if`</ph>.","pos":[3459,3584],"source":" The second snippet shows how to pass a lambda as an argument to Standard Template Library (STL) algorithms such as `find_if`."},{"content":"Example 1","pos":[3594,3603]},{"pos":[3607,3754],"content":"This example declares a lambda expression that returns the sum of two integers and calls the expression immediately with the arguments <ph id=\"ph1\">`5`</ph> and <ph id=\"ph2\">`4`</ph>:","source":"This example declares a lambda expression that returns the sum of two integers and calls the expression immediately with the arguments `5` and `4`:"},{"content":"Code","pos":[3764,3768]},{"content":"Output","pos":[4010,4016]},{"content":"Example 2","pos":[4051,4060]},{"content":"This example passes a lambda expression as an argument to the <ph id=\"ph1\">`find_if`</ph> function.","pos":[4064,4145],"source":"This example passes a lambda expression as an argument to the `find_if` function."},{"content":"The lambda expression returns <ph id=\"ph1\">`true`</ph> if its parameter is an even number.","pos":[4146,4218],"source":" The lambda expression returns `true` if its parameter is an even number."},{"content":"Code","pos":[4228,4232]},{"content":"Output","pos":[5164,5170]},{"content":"Remarks","pos":[5244,5251]},{"content":"For more information about the <ph id=\"ph1\">`find_if`</ph> function, see <bpt id=\"p1\">[</bpt>find_if<ept id=\"p1\">](http://msdn.microsoft.com/Library/aa8ff698-e47e-4ff8-8c88-cbda4b102a4a)</ept>.","pos":[5255,5392],"source":"For more information about the `find_if` function, see [find_if](http://msdn.microsoft.com/Library/aa8ff698-e47e-4ff8-8c88-cbda4b102a4a)."},{"content":"For more information about the STL functions that perform common algorithms, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>algorithm&gt;<ept id=\"p1\">](../standard-library/algorithm.md)</ept>.","pos":[5393,5523],"source":" For more information about the STL functions that perform common algorithms, see [\\<algorithm>](../standard-library/algorithm.md)."},{"pos":[5530,5555],"content":"[<bpt id=\"p1\">[</bpt>In This Article<ept id=\"p1\">](#top)</ept>]","source":"[[In This Article](#top)]"},{"pos":[5605,5631],"content":"Nesting Lambda Expressions"},{"content":"Example","pos":[5641,5648]},{"content":"You can nest a lambda expression inside another one, as shown in this example.","pos":[5652,5730]},{"content":"The inner lambda expression multiplies its argument by 2 and returns the result.","pos":[5731,5811]},{"content":"The outer lambda expression calls the inner lambda expression with its argument and adds 3 to the result.","pos":[5812,5917]},{"content":"Code","pos":[5927,5931]},{"content":"Output","pos":[6352,6358]},{"content":"Remarks","pos":[6394,6401]},{"pos":[6405,6484],"content":"In this example, <ph id=\"ph1\">`[](int y) { return y * 2; }`</ph> is the nested lambda expression.","source":"In this example, `[](int y) { return y * 2; }` is the nested lambda expression."},{"pos":[6491,6516],"content":"[<bpt id=\"p1\">[</bpt>In This Article<ept id=\"p1\">](#top)</ept>]","source":"[[In This Article](#top)]"},{"pos":[6570,6599],"content":"Higher-Order Lambda Functions"},{"content":"Example","pos":[6609,6616]},{"content":"Many programming languages support the concept of a <bpt id=\"p1\">*</bpt>higher-order function.<ept id=\"p1\">*</ept>","pos":[6620,6696],"source":"Many programming languages support the concept of a *higher-order function.*"},{"content":"A higher-order function is a lambda expression that takes another lambda expression as its argument or returns a lambda expression.","pos":[6697,6828]},{"content":"You can use the <bpt id=\"p1\">[</bpt>function<ept id=\"p1\">](../standard-library/function-class.md)</ept> class to enable a C++ lambda expression to behave like a higher-order function.","pos":[6829,6974],"source":" You can use the [function](../standard-library/function-class.md) class to enable a C++ lambda expression to behave like a higher-order function."},{"content":"The following example shows a lambda expression that returns a <ph id=\"ph1\">`function`</ph> object and a lambda expression that takes a <ph id=\"ph2\">`function`</ph> object as its argument.","pos":[6975,7127],"source":" The following example shows a lambda expression that returns a `function` object and a lambda expression that takes a `function` object as its argument."},{"content":"Code","pos":[7137,7141]},{"content":"Output","pos":[8194,8200]},{"pos":[8233,8258],"content":"[<bpt id=\"p1\">[</bpt>In This Article<ept id=\"p1\">](#top)</ept>]","source":"[[In This Article](#top)]"},{"pos":[8307,8346],"content":"Using a Lambda Expression in a Function"},{"content":"Example","pos":[8356,8363]},{"content":"You can use lambda expressions in the body of a function.","pos":[8367,8424]},{"content":"The lambda expression can access any function or data member that the enclosing function can access.","pos":[8425,8525]},{"content":"You can explicitly or implicitly capture the <ph id=\"ph1\">`this`</ph> pointer to provide access to functions and data members of the enclosing class.","pos":[8526,8657],"source":" You can explicitly or implicitly capture the `this` pointer to provide access to functions and data members of the enclosing class."},{"pos":[8664,8735],"content":"You can use the <ph id=\"ph1\">`this`</ph> pointer explicitly in a function, as shown here:","source":"You can use the `this` pointer explicitly in a function, as shown here:"},{"pos":[8905,8956],"content":"You can also capture the <ph id=\"ph1\">`this`</ph> pointer implicitly:","source":"You can also capture the `this` pointer implicitly:"},{"pos":[9120,9200],"content":"The following example shows the <ph id=\"ph1\">`Scale`</ph> class, which encapsulates a scale value.","source":"The following example shows the `Scale` class, which encapsulates a scale value."},{"content":"Output","pos":[10130,10136]},{"content":"Remarks","pos":[10187,10194]},{"content":"The <ph id=\"ph1\">`ApplyScale`</ph> function uses a lambda expression to print the product of the scale value and each element in a <ph id=\"ph2\">`vector`</ph> object.","pos":[10198,10327],"source":"The `ApplyScale` function uses a lambda expression to print the product of the scale value and each element in a `vector` object."},{"content":"The lambda expression implicitly captures <ph id=\"ph1\">`this`</ph> so that it can access the <ph id=\"ph2\">`_scale`</ph> member.","pos":[10328,10419],"source":" The lambda expression implicitly captures `this` so that it can access the `_scale` member."},{"pos":[10426,10451],"content":"[<bpt id=\"p1\">[</bpt>In This Article<ept id=\"p1\">](#top)</ept>]","source":"[[In This Article](#top)]"},{"pos":[10502,10541],"content":"Using Lambda Expressions with Templates"},{"content":"Example","pos":[10551,10558]},{"content":"Because lambda expressions are typed, you can use them with C++ templates.","pos":[10562,10636]},{"content":"The following example shows the <ph id=\"ph1\">`negate_all`</ph> and <ph id=\"ph2\">`print_all`</ph> functions.","pos":[10637,10708],"source":" The following example shows the `negate_all` and `print_all` functions."},{"content":"The <ph id=\"ph1\">`negate_all`</ph> function applies the unary <ph id=\"ph2\">`operator-`</ph> to each element in the <ph id=\"ph3\">`vector`</ph> object.","pos":[10709,10804],"source":" The `negate_all` function applies the unary `operator-` to each element in the `vector` object."},{"content":"The <ph id=\"ph1\">`print_all`</ph> function prints each element in the <ph id=\"ph2\">`vector`</ph> object to the console.","pos":[10805,10888],"source":" The `print_all` function prints each element in the `vector` object to the console."},{"content":"Code","pos":[10898,10902]},{"content":"Output","pos":[11782,11788]},{"content":"Remarks","pos":[11877,11884]},{"pos":[11888,11971],"content":"For more information about C++ templates, see <bpt id=\"p1\">[</bpt>Templates<ept id=\"p1\">](../cpp/templates-cpp.md)</ept>.","source":"For more information about C++ templates, see [Templates](../cpp/templates-cpp.md)."},{"pos":[11978,12003],"content":"[<bpt id=\"p1\">[</bpt>In This Article<ept id=\"p1\">](#top)</ept>]","source":"[[In This Article](#top)]"},{"pos":[12048,12067],"content":"Handling Exceptions"},{"content":"Example","pos":[12077,12084]},{"content":"The body of a lambda expression follows the rules for both structured exception handling (SEH) and C++ exception handling.","pos":[12088,12210]},{"content":"You can handle a raised exception in the body of a lambda expression or defer exception handling to the enclosing scope.","pos":[12211,12331]},{"content":"The following example uses the <ph id=\"ph1\">`for_each`</ph> function and a lambda expression to fill a <ph id=\"ph2\">`vector`</ph> object with the values of another one.","pos":[12332,12464],"source":" The following example uses the `for_each` function and a lambda expression to fill a `vector` object with the values of another one."},{"content":"It uses a <ph id=\"ph1\">`try`/`catch`</ph> block to handle invalid access to the first vector.","pos":[12465,12540],"source":" It uses a `try`/`catch` block to handle invalid access to the first vector."},{"content":"Code","pos":[12550,12554]},{"content":"Output","pos":[13524,13530]},{"content":"Remarks","pos":[13601,13608]},{"pos":[13612,13728],"content":"For more information about exception handling, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](../cpp/exception-handling-in-visual-cpp.md)</ept>.","source":"For more information about exception handling, see [Exception Handling](../cpp/exception-handling-in-visual-cpp.md)."},{"pos":[13735,13760],"content":"[<bpt id=\"p1\">[</bpt>In This Article<ept id=\"p1\">](#top)</ept>]","source":"[[In This Article](#top)]"},{"pos":[13810,13863],"content":"Using Lambda Expressions with Managed Types (C++/CLI)"},{"content":"Example","pos":[13873,13880]},{"content":"The capture clause of a lambda expression cannot contain a variable that has a managed type.","pos":[13884,13976]},{"content":"However, you can pass an argument that has a managed type to the parameter list of a lambda expression.","pos":[13977,14080]},{"content":"The following example contains a lambda expression that captures the local unmanaged variable <ph id=\"ph1\">`ch`</ph> by value and takes a &lt;xref:System.String?displayProperty=fullName&gt; object as its parameter.","pos":[14081,14271],"source":" The following example contains a lambda expression that captures the local unmanaged variable `ch` by value and takes a <xref:System.String?displayProperty=fullName> object as its parameter."},{"content":"Code","pos":[14281,14285]},{"content":"Output","pos":[14713,14719]},{"content":"Remarks","pos":[14759,14766]},{"content":"You can also use lambda expressions with the STL/CLR library.","pos":[14770,14831]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>STL/CLR Library Reference<ept id=\"p1\">](../dotnet/stl-clr-library-reference.md)</ept>.","pos":[14832,14926],"source":" For more information, see [STL/CLR Library Reference](../dotnet/stl-clr-library-reference.md)."},{"pos":[14934,15094],"content":"[!IMPORTANT]\n Lambdas are not supported in these common language runtime (CLR) managed entities: `ref class`, `ref struct`, `value class`, and `value struct`.","leadings":["","> "],"nodes":[{"content":"Lambdas are not supported in these common language runtime (CLR) managed entities: <ph id=\"ph1\">`ref class`</ph>, <ph id=\"ph2\">`ref struct`</ph>, <ph id=\"ph3\">`value class`</ph>, and <ph id=\"ph4\">`value struct`</ph>.","pos":[14,158],"source":" Lambdas are not supported in these common language runtime (CLR) managed entities: `ref class`, `ref struct`, `value class`, and `value struct`."}]},{"pos":[15101,15126],"content":"[<bpt id=\"p1\">[</bpt>In This Article<ept id=\"p1\">](#top)</ept>]","source":"[[In This Article](#top)]"},{"content":"See Also","pos":[15135,15143]},{"content":"Lambda Expressions","pos":[15148,15166]},{"content":"Lambda Expression Syntax","pos":[15210,15234]},{"content":"auto","pos":[15277,15281]},{"content":"function Class","pos":[15308,15322]},{"content":"find_if","pos":[15368,15375]},{"content":"algorithm&gt;","pos":[15456,15466],"source":"algorithm>"},{"content":"Function Call","pos":[15507,15520]},{"content":"Templates","pos":[15556,15565]},{"content":"Exception Handling","pos":[15597,15615]},{"content":"STL/CLR Library Reference","pos":[15666,15691]}],"content":"---\ntitle: \"Examples of Lambda Expressions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"lambda expressions [C++], examples\"\nms.assetid: 52506b15-0771-4190-a966-2f302049ca86\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Examples of Lambda Expressions\nThis article shows how to use lambda expressions in your programs. For an overview of lambda expressions, see [Lambda Expressions](../cpp/lambda-expressions-in-cpp.md). For more information about the structure of a lambda expression, see [Lambda Expression Syntax](../cpp/lambda-expression-syntax.md).  \n  \n##  <a name=\"declaringLambdaExpressions\"></a> Declaring Lambda Expressions  \n  \n### Example 1  \n Because a lambda expression is typed, you can assign it to an `auto` variable or to a [function](../standard-library/function-class.md) object, as shown here:  \n  \n### Code  \n  \n```cpp  \n// declaring_lambda_expressions1.cpp  \n// compile with: /EHsc /W4  \n#include <functional>  \n#include <iostream>  \n  \nint main()  \n{  \n  \n    using namespace std;  \n  \n    // Assign the lambda expression that adds two numbers to an auto variable.  \n    auto f1 = [](int x, int y) { return x + y; };  \n  \n    cout << f1(2, 3) << endl;  \n  \n    // Assign the same lambda expression to a function object.  \n    function<int(int, int)> f2 = [](int x, int y) { return x + y; };  \n  \n    cout << f2(3, 4) << endl;  \n}  \n```  \n  \n### Output  \n  \n```Output  \n5  \n7  \n```  \n  \n### Remarks  \n For more information, see [auto](../cpp/auto-cpp.md), [function Class](../standard-library/function-class.md), and [Function Call](../cpp/function-call-cpp.md).  \n  \n Although lambda expressions are most often declared in the body of a function, you can declare them anywhere that you can initialize a variable.  \n  \n### Example 2  \n The Visual C++ compiler binds a lambda expression to its captured variables when the expression is declared instead of when the expression is called. The following example shows a lambda expression that captures the local variable `i` by value and the local variable `j` by reference. Because the lambda expression captures `i` by value, the reassignment of `i` later in the program does not affect the result of the expression. However, because the lambda expression captures `j` by reference, the reassignment of `j` does affect the result of the expression.  \n  \n### Code  \n  \n```cpp  \n// declaring_lambda_expressions2.cpp  \n// compile with: /EHsc /W4  \n#include <functional>  \n#include <iostream>  \n  \nint main()  \n{  \n   using namespace std;  \n  \n   int i = 3;  \n   int j = 5;  \n  \n   // The following lambda expression captures i by value and  \n   // j by reference.  \n   function<int (void)> f = [i, &j] { return i + j; };  \n  \n   // Change the values of i and j.  \n   i = 22;  \n   j = 44;  \n  \n   // Call f and print its result.  \n   cout << f() << endl;  \n}  \n```  \n  \n### Output  \n  \n```Output  \n47  \n```  \n  \n [[In This Article](#top)]  \n  \n##  <a name=\"callingLambdaExpressions\"></a> Calling Lambda Expressions  \n You can call a lambda expression immediately, as shown in the next code snippet. The second snippet shows how to pass a lambda as an argument to Standard Template Library (STL) algorithms such as `find_if`.  \n  \n### Example 1  \n This example declares a lambda expression that returns the sum of two integers and calls the expression immediately with the arguments `5` and `4`:  \n  \n### Code  \n  \n```cpp  \n// calling_lambda_expressions1.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main()  \n{  \n   using namespace std;  \n   int n = [] (int x, int y) { return x + y; }(5, 4);  \n   cout << n << endl;  \n}  \n```  \n  \n### Output  \n  \n```Output  \n9  \n```  \n  \n### Example 2  \n This example passes a lambda expression as an argument to the `find_if` function. The lambda expression returns `true` if its parameter is an even number.  \n  \n### Code  \n  \n```cpp  \n// calling_lambda_expressions2.cpp  \n// compile with: /EHsc /W4  \n#include <list>  \n#include <algorithm>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n  \n    // Create a list of integers with a few initial elements.  \n    list<int> numbers;  \n    numbers.push_back(13);  \n    numbers.push_back(17);  \n    numbers.push_back(42);  \n    numbers.push_back(46);  \n    numbers.push_back(99);  \n  \n    // Use the find_if function and a lambda expression to find the   \n    // first even number in the list.  \n    const list<int>::const_iterator result =   \n        find_if(numbers.begin(), numbers.end(),[](int n) { return (n % 2) == 0; });  \n  \n    // Print the result.  \n    if (result != numbers.end()) {  \n        cout << \"The first even number in the list is \" << *result << \".\" << endl;  \n    } else {  \n        cout << \"The list contains no even numbers.\" << endl;  \n    }  \n}  \n```  \n  \n### Output  \n  \n```Output  \nThe first even number in the list is 42.  \n```  \n  \n### Remarks  \n For more information about the `find_if` function, see [find_if](http://msdn.microsoft.com/Library/aa8ff698-e47e-4ff8-8c88-cbda4b102a4a). For more information about the STL functions that perform common algorithms, see [\\<algorithm>](../standard-library/algorithm.md).  \n  \n [[In This Article](#top)]  \n  \n##  <a name=\"nestingLambdaExpressions\"></a> Nesting Lambda Expressions  \n  \n### Example  \n You can nest a lambda expression inside another one, as shown in this example. The inner lambda expression multiplies its argument by 2 and returns the result. The outer lambda expression calls the inner lambda expression with its argument and adds 3 to the result.  \n  \n### Code  \n  \n```cpp  \n// nesting_lambda_expressions.cpp  \n// compile with: /EHsc /W4  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n  \n    // The following lambda expression contains a nested lambda  \n    // expression.  \n    int timestwoplusthree = [](int x) { return [](int y) { return y * 2; }(x) + 3; }(5);  \n  \n    // Print the result.  \n    cout << timestwoplusthree << endl;  \n}  \n  \n```  \n  \n### Output  \n  \n```Output  \n13  \n```  \n  \n### Remarks  \n In this example, `[](int y) { return y * 2; }` is the nested lambda expression.  \n  \n [[In This Article](#top)]  \n  \n##  <a name=\"higherOrderLambdaExpressions\"></a> Higher-Order Lambda Functions  \n  \n### Example  \n Many programming languages support the concept of a *higher-order function.* A higher-order function is a lambda expression that takes another lambda expression as its argument or returns a lambda expression. You can use the [function](../standard-library/function-class.md) class to enable a C++ lambda expression to behave like a higher-order function. The following example shows a lambda expression that returns a `function` object and a lambda expression that takes a `function` object as its argument.  \n  \n### Code  \n  \n```cpp  \n// higher_order_lambda_expression.cpp  \n// compile with: /EHsc /W4  \n#include <iostream>  \n#include <functional>  \n  \nint main()  \n{  \n    using namespace std;  \n  \n    // The following code declares a lambda expression that returns   \n    // another lambda expression that adds two numbers.   \n    // The returned lambda expression captures parameter x by value.  \n    auto addtwointegers = [](int x) -> function<int(int)> {   \n        return [=](int y) { return x + y; };   \n    };  \n  \n    // The following code declares a lambda expression that takes another  \n    // lambda expression as its argument.  \n    // The lambda expression applies the argument z to the function f  \n    // and multiplies by 2.  \n    auto higherorder = [](const function<int(int)>& f, int z) {   \n        return f(z) * 2;   \n    };  \n  \n    // Call the lambda expression that is bound to higherorder.   \n    auto answer = higherorder(addtwointegers(7), 8);  \n  \n    // Print the result, which is (7+8)*2.  \n    cout << answer << endl;  \n}  \n  \n```  \n  \n### Output  \n  \n```Output  \n30  \n```  \n  \n [[In This Article](#top)]  \n  \n##  <a name=\"methodLambdaExpressions\"></a> Using a Lambda Expression in a Function  \n  \n### Example  \n You can use lambda expressions in the body of a function. The lambda expression can access any function or data member that the enclosing function can access. You can explicitly or implicitly capture the `this` pointer to provide access to functions and data members of the enclosing class.  \n  \n You can use the `this` pointer explicitly in a function, as shown here:  \n  \n```cpp  \nvoid ApplyScale(const vector<int>& v) const  \n{  \n   for_each(v.begin(), v.end(),   \n      [this](int n) { cout << n * _scale << endl; });  \n}  \n```  \n  \n You can also capture the `this` pointer implicitly:  \n  \n```  \nvoid ApplyScale(const vector<int>& v) const  \n{  \n   for_each(v.begin(), v.end(),   \n      [=](int n) { cout << n * _scale << endl; });  \n}  \n```  \n  \n The following example shows the `Scale` class, which encapsulates a scale value.  \n  \n```cpp  \n// function_lambda_expression.cpp  \n// compile with: /EHsc /W4  \n#include <algorithm>  \n#include <iostream>  \n#include <vector>  \n  \nusing namespace std;  \n  \nclass Scale  \n{  \npublic:  \n    // The constructor.  \n    explicit Scale(int scale) : _scale(scale) {}  \n  \n    // Prints the product of each element in a vector object   \n    // and the scale value to the console.  \n    void ApplyScale(const vector<int>& v) const  \n    {  \n        for_each(v.begin(), v.end(), [=](int n) { cout << n * _scale << endl; });  \n    }  \n  \nprivate:  \n    int _scale;  \n};  \n  \nint main()  \n{  \n    vector<int> values;  \n    values.push_back(1);  \n    values.push_back(2);  \n    values.push_back(3);  \n    values.push_back(4);  \n  \n    // Create a Scale object that scales elements by 3 and apply  \n    // it to the vector object. Does not modify the vector.  \n    Scale s(3);  \n    s.ApplyScale(values);  \n}  \n  \n```  \n  \n### Output  \n  \n```Output  \n3  \n6  \n9  \n12  \n  \n```  \n  \n### Remarks  \n The `ApplyScale` function uses a lambda expression to print the product of the scale value and each element in a `vector` object. The lambda expression implicitly captures `this` so that it can access the `_scale` member.  \n  \n [[In This Article](#top)]  \n  \n##  <a name=\"templateLambdaExpressions\"></a> Using Lambda Expressions with Templates  \n  \n### Example  \n Because lambda expressions are typed, you can use them with C++ templates. The following example shows the `negate_all` and `print_all` functions. The `negate_all` function applies the unary `operator-` to each element in the `vector` object. The `print_all` function prints each element in the `vector` object to the console.  \n  \n### Code  \n  \n```cpp  \n// template_lambda_expression.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <algorithm>  \n#include <iostream>  \n  \nusing namespace std;  \n  \n// Negates each element in the vector object. Assumes signed data type.  \ntemplate <typename T>  \nvoid negate_all(vector<T>& v)  \n{  \n    for_each(v.begin(), v.end(), [](T& n) { n = -n; });  \n}  \n  \n// Prints to the console each element in the vector object.  \ntemplate <typename T>  \nvoid print_all(const vector<T>& v)  \n{  \n    for_each(v.begin(), v.end(), [](const T& n) { cout << n << endl; });  \n}  \n  \nint main()  \n{  \n    // Create a vector of signed integers with a few elements.  \n    vector<int> v;  \n    v.push_back(34);  \n    v.push_back(-43);  \n    v.push_back(56);  \n  \n    print_all(v);  \n    negate_all(v);  \n    cout << \"After negate_all():\" << endl;  \n    print_all(v);  \n}  \n  \n```  \n  \n### Output  \n  \n```Output  \n34  \n-43  \n56  \nAfter negate_all():  \n-34  \n43  \n-56  \n  \n```  \n  \n### Remarks  \n For more information about C++ templates, see [Templates](../cpp/templates-cpp.md).  \n  \n [[In This Article](#top)]  \n  \n##  <a name=\"ehLambdaExpressions\"></a> Handling Exceptions  \n  \n### Example  \n The body of a lambda expression follows the rules for both structured exception handling (SEH) and C++ exception handling. You can handle a raised exception in the body of a lambda expression or defer exception handling to the enclosing scope. The following example uses the `for_each` function and a lambda expression to fill a `vector` object with the values of another one. It uses a `try`/`catch` block to handle invalid access to the first vector.  \n  \n### Code  \n  \n```cpp  \n// eh_lambda_expression.cpp  \n// compile with: /EHsc /W4  \n#include <vector>  \n#include <algorithm>  \n#include <iostream>  \nusing namespace std;  \n  \nint main()  \n{  \n    // Create a vector that contains 3 elements.  \n    vector<int> elements(3);  \n  \n    // Create another vector that contains index values.  \n    vector<int> indices(3);  \n    indices[0] = 0;  \n    indices[1] = -1; // This is not a valid subscript. It will trigger an exception.  \n    indices[2] = 2;  \n  \n    // Use the values from the vector of index values to   \n    // fill the elements vector. This example uses a   \n    // try/catch block to handle invalid access to the   \n    // elements vector.  \n    try  \n    {  \n        for_each(indices.begin(), indices.end(), [&](int index) {   \n            elements.at(index) = index;   \n        });  \n    }  \n    catch (const out_of_range& e)  \n    {  \n        cerr << \"Caught '\" << e.what() << \"'.\" << endl;  \n    };  \n}  \n```  \n  \n### Output  \n  \n```Output  \nCaught 'invalid vector<T> subscript'.  \n```  \n  \n### Remarks  \n For more information about exception handling, see [Exception Handling](../cpp/exception-handling-in-visual-cpp.md).  \n  \n [[In This Article](#top)]  \n  \n##  <a name=\"managedLambdaExpressions\"></a> Using Lambda Expressions with Managed Types (C++/CLI)  \n  \n### Example  \n The capture clause of a lambda expression cannot contain a variable that has a managed type. However, you can pass an argument that has a managed type to the parameter list of a lambda expression. The following example contains a lambda expression that captures the local unmanaged variable `ch` by value and takes a <xref:System.String?displayProperty=fullName> object as its parameter.  \n  \n### Code  \n  \n```cpp  \n// managed_lambda_expression.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \nint main()  \n{  \n    char ch = '!'; // a local unmanaged variable  \n  \n    // The following lambda expression captures local variables  \n    // by value and takes a managed String object as its parameter.  \n    [=](String ^s) {   \n        Console::WriteLine(s + Convert::ToChar(ch));   \n    }(\"Hello\");  \n}  \n  \n```  \n  \n### Output  \n  \n```Output  \nHello!  \n```  \n  \n### Remarks  \n You can also use lambda expressions with the STL/CLR library. For more information, see [STL/CLR Library Reference](../dotnet/stl-clr-library-reference.md).  \n  \n> [!IMPORTANT]\n>  Lambdas are not supported in these common language runtime (CLR) managed entities: `ref class`, `ref struct`, `value class`, and `value struct`.  \n  \n [[In This Article](#top)]  \n  \n## See Also  \n [Lambda Expressions](../cpp/lambda-expressions-in-cpp.md)   \n [Lambda Expression Syntax](../cpp/lambda-expression-syntax.md)   \n [auto](../cpp/auto-cpp.md)   \n [function Class](../standard-library/function-class.md)   \n [find_if](http://msdn.microsoft.com/Library/aa8ff698-e47e-4ff8-8c88-cbda4b102a4a)   \n [\\<algorithm>](../standard-library/algorithm.md)   \n [Function Call](../cpp/function-call-cpp.md)   \n [Templates](../cpp/templates-cpp.md)   \n [Exception Handling](../cpp/exception-handling-in-visual-cpp.md)   \n [STL/CLR Library Reference](../dotnet/stl-clr-library-reference.md)"}