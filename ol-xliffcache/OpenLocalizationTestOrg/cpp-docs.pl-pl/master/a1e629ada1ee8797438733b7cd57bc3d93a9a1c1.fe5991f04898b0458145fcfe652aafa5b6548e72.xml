{"nodes":[{"content":"OpenMP in Visual C++","pos":[3,23]},{"content":"OpenMP C and C++ Application Program Interface","pos":[53,99]},{"content":"Contents","pos":[156,164]},{"content":"1. Introduction","pos":[183,198]},{"content":"1.1 Scope","pos":[224,233]},{"content":"1.2 Definition of Terms","pos":[254,277]},{"content":"1.3 Execution Model","pos":[312,331]},{"content":"1.4 Compliance","pos":[362,376]},{"content":"1.5 Normative References","pos":[402,426]},{"content":"1.6 Organization","pos":[462,478]},{"content":"2. Directives","pos":[505,518]},{"content":"2.1 Directive Format","pos":[542,562]},{"content":"2.2 Conditional Compilation","pos":[594,621]},{"content":"2.3 parallel Construct","pos":[660,682]},{"content":"2.4 Work-sharing Constructs","pos":[716,743]},{"content":"2.4.1 for Construct","pos":[783,802]},{"content":"2.4.2 sections Construct","pos":[834,858]},{"content":"2.4.3 single Construct","pos":[895,917]},{"content":"2.5 Combined Parallel Work-sharing Constructs","pos":[951,996]},{"content":"2.5.1 parallel for Construct","pos":[1054,1082]},{"content":"2.5.2 parallel sections Construct","pos":[1123,1156]},{"content":"2.6 Master and Synchronization Directives","pos":[1201,1242]},{"content":"2.6.1 master Construct","pos":[1296,1318]},{"content":"2.6.2 critical Construct","pos":[1353,1377]},{"content":"2.6.3 barrier Directive","pos":[1414,1437]},{"content":"2.6.4 atomic Construct","pos":[1473,1495]},{"content":"2.6.5 flush Directive","pos":[1530,1551]},{"content":"2.6.6 ordered Construct","pos":[1585,1608]},{"content":"2.7 Data Environment","pos":[1643,1663]},{"content":"2.7.1 threadprivate Directive","pos":[1696,1725]},{"content":"2.7.2 Data-Sharing Attribute Clauses","pos":[1767,1803]},{"content":"2.7.2.1 private","pos":[1853,1868]},{"content":"2.7.2.2 firstprivate","pos":[1897,1917]},{"content":"2.7.2.3 lastprivate","pos":[1951,1970]},{"content":"2.7.2.4 shared","pos":[2003,2017]},{"content":"2.7.2.5 default","pos":[2045,2060]},{"content":"2.7.2.6 reduction","pos":[2089,2106]},{"content":"2.7.2.7 copyin","pos":[2137,2151]},{"content":"2.7.2.8 copyprivate","pos":[2179,2198]},{"content":"2.8 Directive Binding","pos":[2229,2250]},{"content":"2.9 Directive Nesting","pos":[2283,2304]},{"content":"3. Run-time Library Functions","pos":[2336,2365]},{"content":"3.1 Execution Environment Functions","pos":[2405,2440]},{"content":"3.1.1 omp_set_num_threads Function","pos":[2488,2522]},{"content":"3.1.2 omp_get_num_threads Function","pos":[2569,2603]},{"content":"3.1.3 omp_get_max_threads Function","pos":[2650,2684]},{"content":"3.1.4 omp_get_thread_num Function","pos":[2731,2764]},{"content":"3.1.5 omp_get_num_procs Function","pos":[2810,2842]},{"content":"3.1.6 omp_in_parallel Function","pos":[2887,2917]},{"content":"3.1.7 omp_set_dynamic Function","pos":[2960,2990]},{"content":"3.1.8 omp_get_dynamic Function","pos":[3033,3063]},{"content":"3.1.9 omp_set_nested Function","pos":[3106,3135]},{"content":"3.1.10 omp_get_nested Function","pos":[3177,3207]},{"content":"3.2 Lock Functions","pos":[3249,3267]},{"content":"3.2.1 omp_init_lock and omp_init_nest_lock Functions","pos":[3298,3350]},{"content":"3.2.2 omp_destroy_lock and omp_destroy_nest_lock Functions","pos":[3415,3473]},{"content":"3.2.3 omp_set_lock and omp_set_nest_lock Functions","pos":[3544,3594]},{"content":"3.2.4 omp_unset_lock and omp_unset_nest_lock Functions","pos":[3657,3711]},{"content":"3.2.5 omp_test_lock and omp_test_nest_lock Functions","pos":[3778,3830]},{"content":"3.3 Timing Routines","pos":[3894,3913]},{"content":"3.3.1 omp_get_wtime Function","pos":[3945,3973]},{"content":"3.3.2 omp_get_wtick Function","pos":[4014,4042]},{"content":"4. Environment Variables","pos":[4081,4105]},{"content":"4.1 OMP_SCHEDULE","pos":[4140,4156]},{"content":"4.2 OMP_NUM_THREADS","pos":[4184,4203]},{"content":"4.3 OMP_DYNAMIC","pos":[4234,4249]},{"content":"4.4 OMP_NESTED","pos":[4276,4290]},{"content":"A.","pos":[4315,4317]},{"content":"Examples","pos":[4318,4326]},{"content":"A.1   Executing a Simple Loop in Parallel","pos":[4348,4389]},{"content":"A.2   Specifying Conditional Compilation","pos":[4440,4480]},{"content":"A.3   Using Parallel Regions","pos":[4530,4558]},{"content":"A.4   Using the nowait Clause","pos":[4596,4625]},{"content":"A.5   Using the critical Directive","pos":[4664,4698]},{"content":"A.6   Using the lastprivate Clause","pos":[4742,4776]},{"content":"A.7   Using the reduction Clause","pos":[4820,4852]},{"content":"A.8   Specifying Parallel Sections","pos":[4894,4928]},{"content":"A.9   Using single Directives","pos":[4972,5001]},{"content":"A.10   Specifying Sequential Ordering","pos":[5040,5077]},{"content":"A.11   Specifying a Fixed Number of Threads","pos":[5124,5167]},{"content":"A.12   Using the atomic Directive","pos":[5220,5253]},{"content":"A.13   Using the flush Directive with a List","pos":[5296,5340]},{"content":"A.14   Using the flush Directive without a List","pos":[5394,5441]},{"content":"A.15   Determining the Number of Threads Used","pos":[5498,5543]},{"content":"A.16   Using Locks","pos":[5598,5616]},{"content":"A.17   Using Nestable Locks","pos":[5644,5671]},{"content":"A.18   Nested for Directives","pos":[5708,5736]},{"content":"A.19   Examples Showing Incorrect Nesting of Work-sharing Directives","pos":[5774,5842]},{"content":"A.20   Binding of barrier Directives","pos":[5920,5956]},{"content":"A.21   Scoping Variables with the private Clause","pos":[6002,6050]},{"content":"A.22   Using the default(none) Clause","pos":[6108,6145]},{"content":"A.23   Examples of the ordered Directive","pos":[6191,6231]},{"content":"A.24   Example of the private Clause","pos":[6281,6317]},{"content":"A.25   Examples of the copyprivate Data Attribute Clause","pos":[6363,6419]},{"content":"A.26   Using the threadprivate Directive","pos":[6485,6525]},{"content":"A.27   Use of C99 Variable Length Arrays","pos":[6575,6615]},{"content":"A.28   Use of num_threads Clause","pos":[6665,6697]},{"content":"A.29   Use of Work-Sharing Constructs Inside a critical Construct","pos":[6739,6804]},{"content":"A.30   Use of Reprivatization","pos":[6879,6908]},{"content":"A.31   Thread-Safe Lock Functions","pos":[6947,6980]},{"content":"B.","pos":[7022,7024]},{"content":"Stubs for Run-time Library Functions","pos":[7025,7061]},{"content":"C.","pos":[7110,7112]},{"content":"OpenMP C and C++ Grammar","pos":[7113,7137]},{"content":"C.1 Notation","pos":[7175,7187]},{"content":"C.2 Rules","pos":[7211,7220]},{"content":"D.","pos":[7240,7242]},{"content":"Using the schedule Clause","pos":[7243,7268]},{"content":"E.","pos":[7306,7308]},{"content":"Implementation-Defined Behaviors in OpenMP C-C++","pos":[7309,7357]},{"content":"F.","pos":[7418,7420]},{"content":"New Features and Clarifications in Version 2.0","pos":[7421,7467]},{"content":"Reference","pos":[7525,7534]}],"content":"# [OpenMP in Visual C++](openmp-in-visual-cpp.md)\n# [OpenMP C and C++ Application Program Interface](openmp-c-and-cpp-application-program-interface.md)\n## [Contents](contents.md)\n## [1. Introduction](1-introduction.md)\n### [1.1 Scope](1-1-scope.md)\n### [1.2 Definition of Terms](1-2-definition-of-terms.md)\n### [1.3 Execution Model](1-3-execution-model.md)\n### [1.4 Compliance](1-4-compliance.md)\n### [1.5 Normative References](1-5-normative-references.md)\n### [1.6 Organization](1-6-organization.md)\n## [2. Directives](2-directives.md)\n### [2.1 Directive Format](2-1-directive-format.md)\n### [2.2 Conditional Compilation](2-2-conditional-compilation.md)\n### [2.3 parallel Construct](2-3-parallel-construct.md)\n### [2.4 Work-sharing Constructs](2-4-work-sharing-constructs.md)\n#### [2.4.1 for Construct](2-4-1-for-construct.md)\n#### [2.4.2 sections Construct](2-4-2-sections-construct.md)\n#### [2.4.3 single Construct](2-4-3-single-construct.md)\n### [2.5 Combined Parallel Work-sharing Constructs](2-5-combined-parallel-work-sharing-constructs.md)\n#### [2.5.1 parallel for Construct](2-5-1-parallel-for-construct.md)\n#### [2.5.2 parallel sections Construct](2-5-2-parallel-sections-construct.md)\n### [2.6 Master and Synchronization Directives](2-6-master-and-synchronization-directives.md)\n#### [2.6.1 master Construct](2-6-1-master-construct.md)\n#### [2.6.2 critical Construct](2-6-2-critical-construct.md)\n#### [2.6.3 barrier Directive](2-6-3-barrier-directive.md)\n#### [2.6.4 atomic Construct](2-6-4-atomic-construct.md)\n#### [2.6.5 flush Directive](2-6-5-flush-directive.md)\n#### [2.6.6 ordered Construct](2-6-6-ordered-construct.md)\n### [2.7 Data Environment](2-7-data-environment.md)\n#### [2.7.1 threadprivate Directive](2-7-1-threadprivate-directive.md)\n#### [2.7.2 Data-Sharing Attribute Clauses](2-7-2-data-sharing-attribute-clauses.md)\n##### [2.7.2.1 private](2-7-2-1-private.md)\n##### [2.7.2.2 firstprivate](2-7-2-2-firstprivate.md)\n##### [2.7.2.3 lastprivate](2-7-2-3-lastprivate.md)\n##### [2.7.2.4 shared](2-7-2-4-shared.md)\n##### [2.7.2.5 default](2-7-2-5-default.md)\n##### [2.7.2.6 reduction](2-7-2-6-reduction.md)\n##### [2.7.2.7 copyin](2-7-2-7-copyin.md)\n##### [2.7.2.8 copyprivate](2-7-2-8-copyprivate.md)\n### [2.8 Directive Binding](2-8-directive-binding.md)\n### [2.9 Directive Nesting](2-9-directive-nesting.md)\n## [3. Run-time Library Functions](3-run-time-library-functions.md)\n### [3.1 Execution Environment Functions](3-1-execution-environment-functions.md)\n#### [3.1.1 omp_set_num_threads Function](3-1-1-omp-set-num-threads-function.md)\n#### [3.1.2 omp_get_num_threads Function](3-1-2-omp-get-num-threads-function.md)\n#### [3.1.3 omp_get_max_threads Function](3-1-3-omp-get-max-threads-function.md)\n#### [3.1.4 omp_get_thread_num Function](3-1-4-omp-get-thread-num-function.md)\n#### [3.1.5 omp_get_num_procs Function](3-1-5-omp-get-num-procs-function.md)\n#### [3.1.6 omp_in_parallel Function](3-1-6-omp-in-parallel-function.md)\n#### [3.1.7 omp_set_dynamic Function](3-1-7-omp-set-dynamic-function.md)\n#### [3.1.8 omp_get_dynamic Function](3-1-8-omp-get-dynamic-function.md)\n#### [3.1.9 omp_set_nested Function](3-1-9-omp-set-nested-function.md)\n#### [3.1.10 omp_get_nested Function](3-1-10-omp-get-nested-function.md)\n### [3.2 Lock Functions](3-2-lock-functions.md)\n#### [3.2.1 omp_init_lock and omp_init_nest_lock Functions](3-2-1-omp-init-lock-and-omp-init-nest-lock-functions.md)\n#### [3.2.2 omp_destroy_lock and omp_destroy_nest_lock Functions](3-2-2-omp-destroy-lock-and-omp-destroy-nest-lock-functions.md)\n#### [3.2.3 omp_set_lock and omp_set_nest_lock Functions](3-2-3-omp-set-lock-and-omp-set-nest-lock-functions.md)\n#### [3.2.4 omp_unset_lock and omp_unset_nest_lock Functions](3-2-4-omp-unset-lock-and-omp-unset-nest-lock-functions.md)\n#### [3.2.5 omp_test_lock and omp_test_nest_lock Functions](3-2-5-omp-test-lock-and-omp-test-nest-lock-functions.md)\n### [3.3 Timing Routines](3-3-timing-routines.md)\n#### [3.3.1 omp_get_wtime Function](3-3-1-omp-get-wtime-function.md)\n#### [3.3.2 omp_get_wtick Function](3-3-2-omp-get-wtick-function.md)\n## [4. Environment Variables](4-environment-variables.md)\n### [4.1 OMP_SCHEDULE](4-1-omp-schedule.md)\n### [4.2 OMP_NUM_THREADS](4-2-omp-num-threads.md)\n### [4.3 OMP_DYNAMIC](4-3-omp-dynamic.md)\n### [4.4 OMP_NESTED](4-4-omp-nested.md)\n## [A. Examples](a-examples.md)\n### [A.1   Executing a Simple Loop in Parallel](a-1-executing-a-simple-loop-in-parallel.md)\n### [A.2   Specifying Conditional Compilation](a-2-specifying-conditional-compilation.md)\n### [A.3   Using Parallel Regions](a-3-using-parallel-regions.md)\n### [A.4   Using the nowait Clause](a-4-using-the-nowait-clause.md)\n### [A.5   Using the critical Directive](a-5-using-the-critical-directive.md)\n### [A.6   Using the lastprivate Clause](a-6-using-the-lastprivate-clause.md)\n### [A.7   Using the reduction Clause](a-7-using-the-reduction-clause.md)\n### [A.8   Specifying Parallel Sections](a-8-specifying-parallel-sections.md)\n### [A.9   Using single Directives](a-9-using-single-directives.md)\n### [A.10   Specifying Sequential Ordering](a-10-specifying-sequential-ordering.md)\n### [A.11   Specifying a Fixed Number of Threads](a-11-specifying-a-fixed-number-of-threads.md)\n### [A.12   Using the atomic Directive](a-12-using-the-atomic-directive.md)\n### [A.13   Using the flush Directive with a List](a-13-using-the-flush-directive-with-a-list.md)\n### [A.14   Using the flush Directive without a List](a-14-using-the-flush-directive-without-a-list.md)\n### [A.15   Determining the Number of Threads Used](a-15-determining-the-number-of-threads-used.md)\n### [A.16   Using Locks](a-16-using-locks.md)\n### [A.17   Using Nestable Locks](a-17-using-nestable-locks.md)\n### [A.18   Nested for Directives](a-18-nested-for-directives.md)\n### [A.19   Examples Showing Incorrect Nesting of Work-sharing Directives](a-19-examples-showing-incorrect-nesting-of-work-sharing-directives.md)\n### [A.20   Binding of barrier Directives](a-20-binding-of-barrier-directives.md)\n### [A.21   Scoping Variables with the private Clause](a-21-scoping-variables-with-the-private-clause.md)\n### [A.22   Using the default(none) Clause](a-22-using-the-default-none-clause.md)\n### [A.23   Examples of the ordered Directive](a-23-examples-of-the-ordered-directive.md)\n### [A.24   Example of the private Clause](a-24-example-of-the-private-clause.md)\n### [A.25   Examples of the copyprivate Data Attribute Clause](a-25-examples-of-the-copyprivate-data-attribute-clause.md)\n### [A.26   Using the threadprivate Directive](a-26-using-the-threadprivate-directive.md)\n### [A.27   Use of C99 Variable Length Arrays](a-27-use-of-c99-variable-length-arrays.md)\n### [A.28   Use of num_threads Clause](a-28-use-of-num-threads-clause.md)\n### [A.29   Use of Work-Sharing Constructs Inside a critical Construct](a-29-use-of-work-sharing-constructs-inside-a-critical-construct.md)\n### [A.30   Use of Reprivatization](a-30-use-of-reprivatization.md)\n### [A.31   Thread-Safe Lock Functions](a-31-thread-safe-lock-functions.md)\n## [B. Stubs for Run-time Library Functions](b-stubs-for-run-time-library-functions.md)\n## [C. OpenMP C and C++ Grammar](c-openmp-c-and-cpp-grammar.md)\n### [C.1 Notation](c-1-notation.md)\n### [C.2 Rules](c-2-rules.md)\n## [D. Using the schedule Clause](d-using-the-schedule-clause.md)\n## [E. Implementation-Defined Behaviors in OpenMP C-C++](e-implementation-defined-behaviors-in-openmp-c-cpp.md)\n## [F. New Features and Clarifications in Version 2.0](f-new-features-and-clarifications-in-version-2-0.md)\n# [Reference](reference/toc.md)"}