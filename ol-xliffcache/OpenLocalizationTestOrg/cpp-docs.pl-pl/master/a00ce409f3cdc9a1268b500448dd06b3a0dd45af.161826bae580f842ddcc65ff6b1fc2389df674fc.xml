{"nodes":[{"pos":[12,72],"content":"How to: Instantiate WRL Components Directly | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Instantiate WRL Components Directly | Microsoft Docs","pos":[0,60]}]},{"content":"How to: Instantiate WRL Components Directly","pos":[580,623]},{"pos":[624,977],"content":"Learn how to use the <ph id=\"ph1\">[!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)]</ph> (<ph id=\"ph2\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph>) <bpt id=\"p1\">[</bpt>Microsoft::WRL::Make<ept id=\"p1\">](../windows/make-function.md)</ept> and <bpt id=\"p2\">[</bpt>Microsoft::WRL::Details::MakeAndInitialize<ept id=\"p2\">](../windows/makeandinitialize-function.md)</ept> functions to instantiate a component from the module that defines it.","source":"Learn how to use the [!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)] ([!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]) [Microsoft::WRL::Make](../windows/make-function.md) and [Microsoft::WRL::Details::MakeAndInitialize](../windows/makeandinitialize-function.md) functions to instantiate a component from the module that defines it."},{"content":"By instantiating components directly, you can reduce overhead when you don't need class factories or other mechanisms.","pos":[984,1102]},{"content":"You can instantiate a component directly in both <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> apps and in desktop apps.","pos":[1103,1250],"source":" You can instantiate a component directly in both [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] apps and in desktop apps."},{"content":"To learn how to use <ph id=\"ph1\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to create a basic <ph id=\"ph2\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> component and instantiate it from an external <ph id=\"ph3\">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> app, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating a Basic Windows Runtime Component<ept id=\"p1\">](../windows/walkthrough-creating-a-basic-windows-runtime-component-using-wrl.md)</ept>.","pos":[1257,1679],"source":"To learn how to use [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to create a basic [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] component and instantiate it from an external [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app, see [Walkthrough: Creating a Basic Windows Runtime Component](../windows/walkthrough-creating-a-basic-windows-runtime-component-using-wrl.md)."},{"content":"To learn how to use <ph id=\"ph1\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to create a classic COM component and instantiate it from an external desktop app, see <bpt id=\"p1\">[</bpt>How to: Create a Classic COM Component<ept id=\"p1\">](../windows/how-to-create-a-classic-com-component-using-wrl.md)</ept>.","pos":[1680,1956],"source":" To learn how to use [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to create a classic COM component and instantiate it from an external desktop app, see [How to: Create a Classic COM Component](../windows/how-to-create-a-classic-com-component-using-wrl.md)."},{"content":"This document shows two examples.","pos":[1963,1996]},{"content":"The first example uses the <ph id=\"ph1\">`Make`</ph> function to instantiate a component.","pos":[1997,2067],"source":" The first example uses the `Make` function to instantiate a component."},{"content":"The second example uses the <ph id=\"ph1\">`MakeAndInitialize`</ph> function to instantiate a component that can fail during construction.","pos":[2068,2186],"source":" The second example uses the `MakeAndInitialize` function to instantiate a component that can fail during construction."},{"content":"(Because COM typically uses <ph id=\"ph1\">`HRESULT`</ph> values, instead of exceptions, to indicate errors, a COM type typically does not throw from its constructor.","pos":[2187,2333],"source":" (Because COM typically uses `HRESULT` values, instead of exceptions, to indicate errors, a COM type typically does not throw from its constructor."},{"content":"enables a component to validate its construction arguments through the <ph id=\"ph1\">`RuntimeClassInitialize`</ph> method.) Both examples define a basic logger interface and implement that interface by defining a class that writes messages to the console.","pos":[2354,2590],"source":" enables a component to validate its construction arguments through the `RuntimeClassInitialize` method.) Both examples define a basic logger interface and implement that interface by defining a class that writes messages to the console."},{"pos":[2598,2849],"content":"[!IMPORTANT]\n You can’t use the `new` operator to instantiate [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] components. Therefore, we recommend that you always use `Make` or `MakeAndInitialize` to instantiate a component directly.","leadings":["","> "],"nodes":[{"content":" You can’t use the `new` operator to instantiate [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] components. Therefore, we recommend that you always use `Make` or `MakeAndInitialize` to instantiate a component directly.","pos":[13,249],"nodes":[{"content":"You can’t use the <ph id=\"ph1\">`new`</ph> operator to instantiate <ph id=\"ph2\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> components.","pos":[1,125],"source":" You can’t use the `new` operator to instantiate [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] components."},{"content":"Therefore, we recommend that you always use <ph id=\"ph1\">`Make`</ph> or <ph id=\"ph2\">`MakeAndInitialize`</ph> to instantiate a component directly.","pos":[126,236],"source":" Therefore, we recommend that you always use `Make` or `MakeAndInitialize` to instantiate a component directly."}]}]},{"content":"To create and instantiate a basic logger component","pos":[2859,2909]},{"content":"In Visual Studio, create a <bpt id=\"p1\">**</bpt>Win32 Console Application<ept id=\"p1\">**</ept> project.","pos":[2919,2984],"source":"In Visual Studio, create a **Win32 Console Application** project."},{"content":"Name the project, for example, <ph id=\"ph1\">`WRLLogger`</ph>.","pos":[2985,3028],"source":" Name the project, for example, `WRLLogger`."},{"pos":[3038,3138],"content":"Add a <bpt id=\"p1\">**</bpt>Midl File (.idl)<ept id=\"p1\">**</ept> file to the project, name the file <ph id=\"ph1\">`ILogger.idl`</ph>, and then add this code:","source":"Add a **Midl File (.idl)** file to the project, name the file `ILogger.idl`, and then add this code:"},{"pos":[3160,3177],"content":"wrl-logger-make#1"},{"content":"Use the following code to replace the contents of WRLLogger.cpp.","pos":[3266,3330]},{"pos":[3352,3369],"content":"wrl-logger-make#2"},{"content":"To handle construction failure for the basic logger component","pos":[3458,3519]},{"content":"Use the following code to replace the definition of the <ph id=\"ph1\">`CConsoleWriter`</ph> class.","pos":[3529,3608],"source":"Use the following code to replace the definition of the `CConsoleWriter` class."},{"content":"This version holds a private string member variable and overrides the <ph id=\"ph1\">`RuntimeClass::RuntimeClassInitialize`</ph> method.","pos":[3609,3725],"source":" This version holds a private string member variable and overrides the `RuntimeClass::RuntimeClassInitialize` method."},{"content":"fails if the call to <ph id=\"ph1\">`SHStrDup`</ph> fails.","pos":[3751,3789],"source":" fails if the call to `SHStrDup` fails."},{"pos":[3811,3841],"content":"wrl-logger-makeandinitialize#1"},{"content":"Use the following code to replace the definition of <ph id=\"ph1\">`wmain`</ph>.","pos":[3930,3990],"source":"Use the following code to replace the definition of `wmain`."},{"content":"This version uses <ph id=\"ph1\">`MakeAndInitialize`</ph> to instantiate the <ph id=\"ph2\">`CConsoleWriter`</ph> object and checks the <ph id=\"ph3\">`HRESULT`</ph> result.","pos":[3991,4104],"source":" This version uses `MakeAndInitialize` to instantiate the `CConsoleWriter` object and checks the `HRESULT` result."},{"pos":[4126,4156],"content":"wrl-logger-makeandinitialize#2"},{"content":"See Also","pos":[4244,4252]},{"content":"Windows Runtime C++ Template Library (WRL)","pos":[4257,4299]},{"content":"Microsoft::WRL::Make","pos":[4362,4382]},{"content":"Microsoft::WRL::Details::MakeAndInitialize","pos":[4418,4460]}],"content":"---\ntitle: \"How to: Instantiate WRL Components Directly | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nms.assetid: 1a9fa011-0cee-4abf-bf83-49adf53ff906\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Instantiate WRL Components Directly\nLearn how to use the [!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)] ([!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]) [Microsoft::WRL::Make](../windows/make-function.md) and [Microsoft::WRL::Details::MakeAndInitialize](../windows/makeandinitialize-function.md) functions to instantiate a component from the module that defines it.  \n  \n By instantiating components directly, you can reduce overhead when you don't need class factories or other mechanisms. You can instantiate a component directly in both [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] apps and in desktop apps.  \n  \n To learn how to use [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to create a basic [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] component and instantiate it from an external [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app, see [Walkthrough: Creating a Basic Windows Runtime Component](../windows/walkthrough-creating-a-basic-windows-runtime-component-using-wrl.md). To learn how to use [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to create a classic COM component and instantiate it from an external desktop app, see [How to: Create a Classic COM Component](../windows/how-to-create-a-classic-com-component-using-wrl.md).  \n  \n This document shows two examples. The first example uses the `Make` function to instantiate a component. The second example uses the `MakeAndInitialize` function to instantiate a component that can fail during construction. (Because COM typically uses `HRESULT` values, instead of exceptions, to indicate errors, a COM type typically does not throw from its constructor. `MakeAndInitialize` enables a component to validate its construction arguments through the `RuntimeClassInitialize` method.) Both examples define a basic logger interface and implement that interface by defining a class that writes messages to the console.  \n  \n> [!IMPORTANT]\n>  You can’t use the `new` operator to instantiate [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] components. Therefore, we recommend that you always use `Make` or `MakeAndInitialize` to instantiate a component directly.  \n  \n### To create and instantiate a basic logger component  \n  \n1.  In Visual Studio, create a **Win32 Console Application** project. Name the project, for example, `WRLLogger`.  \n  \n2.  Add a **Midl File (.idl)** file to the project, name the file `ILogger.idl`, and then add this code:  \n  \n     [!code-cpp[wrl-logger-make#1](../windows/codesnippet/CPP/how-to-instantiate-wrl-components-directly_1.idl)]  \n  \n3.  Use the following code to replace the contents of WRLLogger.cpp.  \n  \n     [!code-cpp[wrl-logger-make#2](../windows/codesnippet/CPP/how-to-instantiate-wrl-components-directly_2.cpp)]  \n  \n### To handle construction failure for the basic logger component  \n  \n1.  Use the following code to replace the definition of the `CConsoleWriter` class. This version holds a private string member variable and overrides the `RuntimeClass::RuntimeClassInitialize` method. `RuntimeClassInitialize` fails if the call to `SHStrDup` fails.  \n  \n     [!code-cpp[wrl-logger-makeandinitialize#1](../windows/codesnippet/CPP/how-to-instantiate-wrl-components-directly_3.cpp)]  \n  \n2.  Use the following code to replace the definition of `wmain`. This version uses `MakeAndInitialize` to instantiate the `CConsoleWriter` object and checks the `HRESULT` result.  \n  \n     [!code-cpp[wrl-logger-makeandinitialize#2](../windows/codesnippet/CPP/how-to-instantiate-wrl-components-directly_4.cpp)]  \n  \n## See Also  \n [Windows Runtime C++ Template Library (WRL)](../windows/windows-runtime-cpp-template-library-wrl.md)   \n [Microsoft::WRL::Make](../windows/make-function.md)   \n [Microsoft::WRL::Details::MakeAndInitialize](../windows/makeandinitialize-function.md)"}