{"nodes":[{"pos":[12,63],"content":"&lt;scoped_allocator&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>scoped_allocator<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,51],"source":"&lt;scoped_allocator&gt; operators | Microsoft Docs"}]},{"pos":[266,300],"content":"&lt;scoped_allocator&gt; operators","linkify":"&lt;scoped_allocator&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>scoped_allocator<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,34],"source":"&lt;scoped_allocator&gt; operators"}]},{"pos":[316,343],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[344,373],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[384,423],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"pos":[427,487],"content":"Tests two <ph id=\"ph1\">`scoped_allocator_adaptor`</ph> objects for inequality.","source":"Tests two `scoped_allocator_adaptor` objects for inequality."},{"pos":[706,716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`scoped_allocator_adaptor`</ph> object.","pos":[730,773],"source":" The left `scoped_allocator_adaptor` object."},{"content":"The right <ph id=\"ph1\">`scoped_allocator_adaptor`</ph> object.","pos":[791,835],"source":" The right `scoped_allocator_adaptor` object."},{"pos":[845,857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[889,930],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"pos":[934,992],"content":"Tests two <ph id=\"ph1\">`scoped_allocator_adaptor`</ph> objects for equality.","source":"Tests two `scoped_allocator_adaptor` objects for equality."},{"pos":[1211,1221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`scoped_allocator_adaptor`</ph> object.","pos":[1235,1278],"source":" The left `scoped_allocator_adaptor` object."},{"content":"The right <ph id=\"ph1\">`scoped_allocator_adaptor`</ph> object.","pos":[1296,1340],"source":" The right `scoped_allocator_adaptor` object."},{"pos":[1350,1362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1479,1487],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1491,1552],"content":"<bpt id=\"p1\">[</bpt>&lt;scoped_allocator&gt;<ept id=\"p1\">](../standard-library/scoped-allocator.md)</ept>","source":"[<scoped_allocator>](../standard-library/scoped-allocator.md)"}],"content":"---\ntitle: \"&lt;scoped_allocator&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 4dfe0805-cc6e-479f-887f-a1c164f73837\ncaps.latest.revision: 10\nmanager: \"ghogen\"\n---\n# &lt;scoped_allocator&gt; operators\n|||  \n|-|-|  \n|[operator!=](#operator_neq)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests two `scoped_allocator_adaptor` objects for inequality.  \n  \n```cpp  \ntemplate <class Outer, class... Inner>  \nbool operator!=(\n    const scoped_allocator_adaptor<Outer, Inner...>& left,  \n    const scoped_allocator_adaptor<Outer, Inner...>& right) noexcept;  \n```  \n  \n### Parameters  \n `left`  \n The left `scoped_allocator_adaptor` object.  \n  \n `right`  \n The right `scoped_allocator_adaptor` object.  \n  \n### Return Value  \n `!(left == right)`  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests two `scoped_allocator_adaptor` objects for equality.  \n  \n```cpp  \ntemplate <class Outer, class... Inner>  \nbool operator==(\n    const scoped_allocator_adaptor<Outer, Inner...>& left,  \n    const scoped_allocator_adaptor<Outer, Inner...>& right) noexcept;  \n```  \n  \n### Parameters  \n `left`  \n The left `scoped_allocator_adaptor` object.  \n  \n `right`  \n The right `scoped_allocator_adaptor` object.  \n  \n### Return Value  \n `left.outer_allocator() == right.outer_allocator() && left.inner_allocator() == right.inner_allocator()`  \n  \n## See Also  \n [<scoped_allocator>](../standard-library/scoped-allocator.md)\n\n"}