<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4381ee682a3f917ded81bfac33b3bbb1bc4a3335</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\cwin32heap-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f9bda28dcbfa97a1a70b702a4dbfafe5436b7ef</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7afae4b57c26072d7a02c8c34939630f87607427</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CWin32Heap Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CWin32Heap Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class implements <bpt id="p1">[</bpt>IAtlMemMgr<ept id="p1">](../../atl/reference/iatlmemmgr-class.md)</ept> using the Win32 heap allocation functions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>CWin32Heap::CWin32Heap</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>CWin32Heap::~CWin32Heap</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CWin32Heap::Allocate</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Allocates a block of memory from the heap object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CWin32Heap::Attach</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Attaches the heap object to an existing heap.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CWin32Heap::Detach</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Detaches the heap object from an existing heap.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CWin32Heap::Free</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Frees memory previously allocated from the heap.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CWin32Heap::GetSize</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns the size of a memory block allocated from the heap object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CWin32Heap::Reallocate</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Reallocates a block of memory from the heap object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CWin32Heap::m_bOwnHeap</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A flag used to determine current ownership of the heap handle.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CWin32Heap::m_hHeap</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Handle to the heap object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>implements memory allocation methods using the Win32 heap allocation functions, including <bpt id="p1">[</bpt>HeapAlloc<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa366597)</ept> and <bpt id="p2">[</bpt>HeapFree<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/aa366701)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unlike other Heap classes, <ph id="ph1">`CWin32Heap`</ph> requires a valid heap handle to be provided before memory is allocated: the other classes default to using the process heap.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The handle can be supplied to the constructor or to the <bpt id="p1">[</bpt>CWin32Heap::Attach<ept id="p1">](#cwin32heap__attach)</ept> method.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>CWin32Heap::CWin32Heap<ept id="p1">](#cwin32heap__cwin32heap)</ept> method for more details.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>IAtlMemMgr<ept id="p1">](../../atl/reference/iatlmemmgr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlmem.h</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CWin32Heap::Allocate</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Allocates a block of memory from the heap object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The requested number of bytes in the new memory block.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the newly allocated memory block.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CWin32Heap::Free<ept id="p1">](#cwin32heap__free)</ept> or <bpt id="p2">[</bpt>CWin32Heap::Reallocate<ept id="p2">](#cwin32heap__reallocate)</ept> to free the memory allocated by this method.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Implemented using <bpt id="p1">[</bpt>HeapAlloc<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa366597)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CWin32Heap::Attach</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Attaches the heap object to an existing heap.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An existing heap handle.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A flag indicating if the <ph id="ph1">`CWin32Heap`</ph> object is to take ownership over the resources of the heap.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bTakeOwnership`</ph> is TRUE, the <ph id="ph2">`CWin32Heap`</ph> object is responsible for deleting the heap handle.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CWin32Heap::CWin32Heap</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An existing heap object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Flags used in creating the heap.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>nInitialSize</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The initial size of the heap.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The maximum size of the heap.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Before allocating memory, it is necessary to provide the <ph id="ph1">`CWin32Heap`</ph> object with a valid heap handle.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The simplest way to achieve this is to use the process heap:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#92</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It is also possible to supply an existing heap handle to the constructor, in which case the new object does not take over ownership of the heap.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The original heap handle will still be valid when the <ph id="ph1">`CWin32Heap`</ph> object is deleted.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An existing heap can also be attached to the new object, using <bpt id="p1">[</bpt>CWin32Heap::Attach<ept id="p1">](#cwin32heap__attach)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If a heap is required where operations are all performed from a single thread, the best way is to create the object as follows:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#93</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The parameter <bpt id="p1">**</bpt>HEAP_NO_SERIALIZE<ept id="p1">**</ept> specifies that mutual exclusion will not be used when the heap functions allocate and free memory, with an according increase in performance.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The third parameter defaults to 0, which allows the heap to grow as required.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>HeapCreate<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa366599\(v=vs.85\).aspx)</ept> for an explanation of the memory sizes and flags.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CWin32Heap::~CWin32Heap</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Destroys the heap handle if the <ph id="ph1">`CWin32Heap`</ph> object has ownership of the heap.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CWin32Heap::Detach</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Detaches the heap object from an existing heap.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Returns the handle to the heap to which the object was previously attached.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CWin32Heap::Free</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Frees memory previously allocated from the heap by <bpt id="p1">[</bpt>CWin32Heap::Allocate<ept id="p1">](#cwin32heap__allocate)</ept> or <bpt id="p2">[</bpt>CWin32Heap::Reallocate<ept id="p2">](#cwin32heap__reallocate)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Pointer to the block of memory to free.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>NULL is a valid value and does nothing.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>CWin32Heap::GetSize</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Returns the size of a memory block allocated from the heap object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Pointer to the memory block whose size the method will obtain.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This is a pointer returned by <bpt id="p1">[</bpt>CWin32Heap::Allocate<ept id="p1">](#cwin32heap__allocate)</ept> or <bpt id="p2">[</bpt>CWin32Heap::Reallocate<ept id="p2">](#cwin32heap__reallocate)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Returns the size, in bytes, of the allocated memory block.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CWin32Heap::m_bOwnHeap</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A flag used to determine current ownership of the heap handle stored in <bpt id="p1">[</bpt>m_hHeap<ept id="p1">](#cwin32heap__m_hheap)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CWin32Heap::m_hHeap</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Handle to the heap object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A variable used to store a handle to the heap object.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CWin32Heap::Reallocate</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Reallocates a block of memory from the heap object.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Pointer to the block of memory to reallocate.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The new size in bytes of the allocated block.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The block can be made larger or smaller.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the newly allocated memory block.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`p`</ph> is NULL, it's assumed that the memory block has not yet been allocated and <bpt id="p1">[</bpt>CWin32Heap::Allocate<ept id="p1">](#cwin32heap__allocate)</ept> is called, with an argument of <ph id="ph2">`nBytes`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>IAtlMemMgr Class</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CLocalHeap Class</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CGlobalHeap Class</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CCRTHeap Class</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CComHeap Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>