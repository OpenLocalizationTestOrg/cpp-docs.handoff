{"nodes":[{"pos":[12,37],"content":"_lsearch | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_lsearch | Microsoft Docs","pos":[0,25]}]},{"pos":[1082,1090],"content":"_lsearch","linkify":"_lsearch","nodes":[{"content":"_lsearch","pos":[0,8]}]},{"content":"Performs a linear search for a value; adds to end of list if not found.","pos":[1091,1162]},{"content":"A more secure version of this function is available; see <bpt id=\"p1\">[</bpt>_lsearch_s<ept id=\"p1\">](../../c-runtime-library/reference/lsearch-s.md)</ept>.","pos":[1163,1281],"source":" A more secure version of this function is available; see [_lsearch_s](../../c-runtime-library/reference/lsearch-s.md)."},{"pos":[1290,1296],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1490,1500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Object to search for.","pos":[1513,1534]},{"content":"Pointer to the base of array to be searched.","pos":[1551,1595]},{"content":"Number of elements.","pos":[1611,1630]},{"content":"Width of each array element.","pos":[1648,1676]},{"content":"Pointer to the comparison routine.","pos":[1696,1730]},{"content":"The first parameter is a pointer to the key for search.","pos":[1731,1786]},{"content":"The second parameter is a pointer to an array element to be compared with the key.","pos":[1787,1869]},{"pos":[1878,1890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the key is found, <ph id=\"ph1\">`_lsearch`</ph> returns a pointer to the element of the array at <ph id=\"ph2\">`base`</ph> that matches <ph id=\"ph3\">`key`</ph>.","pos":[1894,2001],"source":"If the key is found, `_lsearch` returns a pointer to the element of the array at `base` that matches `key`."},{"content":"If the key is not found, <ph id=\"ph1\">`_lsearch`</ph> returns a pointer to the newly added item at the end of the array.","pos":[2002,2104],"source":" If the key is not found, `_lsearch` returns a pointer to the newly added item at the end of the array."},{"pos":[2113,2120],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_lsearch`</ph> function performs a linear search for the value <ph id=\"ph2\">`key`</ph> in an array of <ph id=\"ph3\">`num`</ph> elements, each of <ph id=\"ph4\">`width`</ph> bytes.","pos":[2124,2246],"source":"The `_lsearch` function performs a linear search for the value `key` in an array of `num` elements, each of `width` bytes."},{"content":"Unlike <ph id=\"ph1\">`bsearch`</ph>, <ph id=\"ph2\">`_lsearch`</ph> does not require the array to be sorted.","pos":[2247,2316],"source":" Unlike `bsearch`, `_lsearch` does not require the array to be sorted."},{"content":"If <ph id=\"ph1\">`key`</ph> is not found, <ph id=\"ph2\">`_lsearch`</ph> adds it to the end of the array and increments <ph id=\"ph3\">`num`</ph>.","pos":[2317,2404],"source":" If `key` is not found, `_lsearch` adds it to the end of the array and increments `num`."},{"content":"The <ph id=\"ph1\">`compare`</ph> argument is a pointer to a user-supplied routine that compares two array elements and returns a value specifying their relationship.","pos":[2411,2557],"source":"The `compare` argument is a pointer to a user-supplied routine that compares two array elements and returns a value specifying their relationship."},{"content":"<ph id=\"ph1\">`_lsearch`</ph> calls the <ph id=\"ph2\">`compare`</ph> routine one or more times during the search, passing pointers to two array elements on each call.","pos":[2558,2686],"source":"`_lsearch` calls the `compare` routine one or more times during the search, passing pointers to two array elements on each call."},{"content":"<ph id=\"ph1\">`compare`</ph> must compare the elements and return either nonzero (meaning the elements are different) or 0 (meaning the elements are identical).","pos":[2687,2828],"source":"`compare` must compare the elements and return either nonzero (meaning the elements are different) or 0 (meaning the elements are identical)."},{"content":"This function validates its parameters.","pos":[2835,2874]},{"content":"If <ph id=\"ph1\">`compare`</ph>, <ph id=\"ph2\">`key`</ph> or <ph id=\"ph3\">`num`</ph> is <ph id=\"ph4\">`NULL`</ph>, or if <ph id=\"ph5\">`base`</ph> is NULL and *<ph id=\"ph6\">`num`</ph> is nonzero, or if <ph id=\"ph7\">`width`</ph> is less than zero, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2875,3122],"source":" If `compare`, `key` or `num` is `NULL`, or if `base` is NULL and *`num` is nonzero, or if `width` is less than zero, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and the function returns <ph id=\"ph3\">`NULL`</ph>.","pos":[3123,3219],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `NULL`."},{"pos":[3228,3240],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3247,3254]},{"content":"Required header","pos":[3255,3270]},{"content":"<ph id=\"ph1\">\\&lt;</ph>search.h&gt;","pos":[3326,3337],"source":"\\<search.h>"},{"pos":[3345,3463],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3472,3479],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4448,4473],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[4477,4492]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4493,4540],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4541,4666],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[4675,4683],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Searching and Sorting<ept id=\"p1\">](../../c-runtime-library/searching-and-sorting.md)</ept><ph id=\"ph1\"> </ph>","pos":[4687,4761],"source":"[Searching and Sorting](../../c-runtime-library/searching-and-sorting.md) "},{"content":"<bpt id=\"p1\"> [</bpt>bsearch<ept id=\"p1\">](../../c-runtime-library/reference/bsearch.md)</ept><ph id=\"ph1\"> </ph>","pos":[4764,4821],"source":" [bsearch](../../c-runtime-library/reference/bsearch.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_lfind<ept id=\"p1\">](../../c-runtime-library/reference/lfind.md)</ept><ph id=\"ph1\"> </ph>","pos":[4824,4878],"source":" [_lfind](../../c-runtime-library/reference/lfind.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_lsearch_s<ept id=\"p1\">](../../c-runtime-library/reference/lsearch-s.md)</ept>","pos":[4881,4942],"source":" [_lsearch_s](../../c-runtime-library/reference/lsearch-s.md)"}],"content":"---\ntitle: \"_lsearch | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_lsearch\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-utility-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_lsearch\"\n  - \"lsearch\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_lsearch function\"\n  - \"values, searching for\"\n  - \"keys, finding in arrays\"\n  - \"arrays [CRT], searching\"\n  - \"linear searches\"\n  - \"searching, linear\"\n  - \"lsearch function\"\nms.assetid: 8200f608-159a-46f0-923b-1a37ee1af7e0\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _lsearch\nPerforms a linear search for a value; adds to end of list if not found. A more secure version of this function is available; see [_lsearch_s](../../c-runtime-library/reference/lsearch-s.md).  \n  \n## Syntax  \n  \n```  \nvoid *_lsearch(  \n   const void *key,  \n   void *base,  \n   unsigned int *num,  \n   unsigned int width,  \n   int (__cdecl *compare)(const void *, const void *)   \n);  \n```  \n  \n#### Parameters  \n `key`  \n Object to search for.  \n  \n `base`  \n Pointer to the base of array to be searched.  \n  \n `num`  \n Number of elements.  \n  \n `width`  \n Width of each array element.  \n  \n `compare`  \n Pointer to the comparison routine. The first parameter is a pointer to the key for search. The second parameter is a pointer to an array element to be compared with the key.  \n  \n## Return Value  \n If the key is found, `_lsearch` returns a pointer to the element of the array at `base` that matches `key`. If the key is not found, `_lsearch` returns a pointer to the newly added item at the end of the array.  \n  \n## Remarks  \n The `_lsearch` function performs a linear search for the value `key` in an array of `num` elements, each of `width` bytes. Unlike `bsearch`, `_lsearch` does not require the array to be sorted. If `key` is not found, `_lsearch` adds it to the end of the array and increments `num`.  \n  \n The `compare` argument is a pointer to a user-supplied routine that compares two array elements and returns a value specifying their relationship. `_lsearch` calls the `compare` routine one or more times during the search, passing pointers to two array elements on each call. `compare` must compare the elements and return either nonzero (meaning the elements are different) or 0 (meaning the elements are identical).  \n  \n This function validates its parameters. If `compare`, `key` or `num` is `NULL`, or if `base` is NULL and *`num` is nonzero, or if `width` is less than zero, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `NULL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_lsearch`|\\<search.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_lsearch.c  \n#include <search.h>  \n#include <string.h>  \n#include <stdio.h>  \n  \nint compare( const void *arg1, const void *arg2 );  \n  \nint main(void)  \n{  \n   char * wordlist[4] = { \"hello\", \"thanks\", \"bye\" };  \n                            // leave room to grow...  \n   int n = 3;  \n   char **result;  \n   char *key = \"extra\";  \n   int i;  \n  \n   printf( \"wordlist before _lsearch:\" );  \n   for( i=0; i<n; ++i ) printf( \" %s\", wordlist[i] );  \n   printf( \"\\n\" );  \n  \n   result = (char **)_lsearch( &key, wordlist,   \n                      &n, sizeof(char *), compare );  \n  \n   printf( \"wordlist after _lsearch:\" );  \n   for( i=0; i<n; ++i ) printf( \" %s\", wordlist[i] );  \n   printf( \"\\n\" );  \n}  \n  \nint compare(const void *arg1, const void *arg2 )  \n{  \n   return( _stricmp( * (char**)arg1, * (char**)arg2 ) );  \n}  \n```  \n  \n```Output  \nwordlist before _lsearch: hello thanks bye  \nwordlist after _lsearch: hello thanks bye extra  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Searching and Sorting](../../c-runtime-library/searching-and-sorting.md)   \n [bsearch](../../c-runtime-library/reference/bsearch.md)   \n [_lfind](../../c-runtime-library/reference/lfind.md)   \n [_lsearch_s](../../c-runtime-library/reference/lsearch-s.md)"}