{"nodes":[{"pos":[12,54],"content":"ostreambuf_iterator Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ostreambuf_iterator Class | Microsoft Docs","pos":[0,42]}]},{"pos":[731,756],"content":"ostreambuf_iterator Class","linkify":"ostreambuf_iterator Class","nodes":[{"content":"ostreambuf_iterator Class","pos":[0,25]}]},{"content":"The template class ostreambuf_iterator describes an output iterator object that writes successive character elements onto the output stream with the extraction <bpt id=\"p1\">**</bpt>operator&gt;&gt;<ept id=\"p1\">**</ept>.","pos":[757,932],"source":"The template class ostreambuf_iterator describes an output iterator object that writes successive character elements onto the output stream with the extraction **operator>>**."},{"content":"The <ph id=\"ph1\">`ostreambuf_iterator`</ph>s differ from those of the <bpt id=\"p1\">[</bpt>ostream_iterator Class<ept id=\"p1\">](../standard-library/ostream-iterator-class.md)</ept> in having characters instead of a generic type at the type of object being inserted into the output stream.","pos":[933,1164],"source":" The `ostreambuf_iterator`s differ from those of the [ostream_iterator Class](../standard-library/ostream-iterator-class.md) in having characters instead of a generic type at the type of object being inserted into the output stream."},{"pos":[1173,1179],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1274,1284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type that represents the character type for the ostreambuf_iterator.","pos":[1302,1374]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`char`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[1375,1435],"source":" This argument is optional and the default value is `char`*.*"},{"content":"The type that represents the character type for the ostreambuf_iterator.","pos":[1454,1526]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`char_traits`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p1\">*</bpt>CharType&gt;.<ept id=\"p1\">*</ept>","pos":[1527,1606],"source":" This argument is optional and the default value is `char_traits`\\< *CharType>.*"},{"pos":[1615,1622],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The ostreambuf_iterator class must satisfy the requirements for an output iterator.","pos":[1626,1709]},{"content":"Algorithms can be written directly to output streams using an <ph id=\"ph1\">`ostreambuf_iterator`</ph>.","pos":[1710,1794],"source":" Algorithms can be written directly to output streams using an `ostreambuf_iterator`."},{"content":"The class provides a low-level stream iterator that allows access to the raw (unformatted) I/O stream in the form of characters and the ability to bypass the buffering and character translations associated with the high-level stream iterators.","pos":[1795,2038]},{"pos":[2048,2060],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[2081,2144],"content":"<bpt id=\"p1\">[</bpt>ostreambuf_iterator<ept id=\"p1\">](#ostreambuf_iterator_ostreambuf_iterator)</ept>","source":"[ostreambuf_iterator](#ostreambuf_iterator_ostreambuf_iterator)"},{"pos":[2145,2242],"content":"Constructs an <ph id=\"ph1\">`ostreambuf_iterator`</ph> that is initialized to write characters to the output stream.","source":"Constructs an `ostreambuf_iterator` that is initialized to write characters to the output stream."},{"pos":[2253,2261],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[2282,2326],"content":"<bpt id=\"p1\">[</bpt>char_type<ept id=\"p1\">](#ostreambuf_iterator__char_type)</ept>","source":"[char_type](#ostreambuf_iterator__char_type)"},{"pos":[2327,2400],"content":"A type that provides for the character type of the <ph id=\"ph1\">`ostreambuf_iterator`</ph>.","source":"A type that provides for the character type of the `ostreambuf_iterator`."},{"pos":[2405,2454],"content":"<bpt id=\"p1\">[</bpt>ostream_type<ept id=\"p1\">](#ostreambuf_iterator_ostream_type)</ept>","source":"[ostream_type](#ostreambuf_iterator_ostream_type)"},{"pos":[2455,2522],"content":"A type that provides for the stream type of the <ph id=\"ph1\">`ostream_iterator`</ph>.","source":"A type that provides for the stream type of the `ostream_iterator`."},{"pos":[2527,2581],"content":"<bpt id=\"p1\">[</bpt>streambuf_type<ept id=\"p1\">](#ostreambuf_iterator__streambuf_type)</ept>","source":"[streambuf_type](#ostreambuf_iterator__streambuf_type)"},{"pos":[2582,2652],"content":"A type that provides for the stream type of the <ph id=\"ph1\">`ostreambuf_iterator`</ph>.","source":"A type that provides for the stream type of the `ostreambuf_iterator`."},{"pos":[2657,2705],"content":"<bpt id=\"p1\">[</bpt>traits_type<ept id=\"p1\">](#ostreambuf_iterator__traits_type)</ept>","source":"[traits_type](#ostreambuf_iterator__traits_type)"},{"pos":[2706,2783],"content":"A type that provides for the character traits type of the <ph id=\"ph1\">`ostream_iterator`</ph>.","source":"A type that provides for the character traits type of the `ostream_iterator`."},{"pos":[2794,2810],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[2831,2869],"content":"<bpt id=\"p1\">[</bpt>failed<ept id=\"p1\">](#ostreambuf_iterator__failed)</ept>","source":"[failed](#ostreambuf_iterator__failed)"},{"content":"Tests for failure of an insertion into the output stream buffer.","pos":[2870,2934]},{"pos":[2945,2954],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[2975,3023],"content":"<bpt id=\"p1\">[</bpt>operator*<ept id=\"p1\">](#ostreambuf_iterator__operator_star)</ept>","source":"[operator*](#ostreambuf_iterator__operator_star)"},{"pos":[3024,3108],"content":"Dereferencing operator used to implement the output iterator expression * <ph id=\"ph1\">`i`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`x`</ph>.","source":"Dereferencing operator used to implement the output iterator expression * `i` = `x`."},{"pos":[3113,3165],"content":"<bpt id=\"p1\">[</bpt>operator++<ept id=\"p1\">](#ostreambuf_iterator__operator_add_add)</ept>","source":"[operator++](#ostreambuf_iterator__operator_add_add)"},{"pos":[3166,3303],"content":"A nonfunctional increment operator that returns an <ph id=\"ph1\">`ostreambuf_iterator`</ph> to the same object it addressed before the operation was called.","source":"A nonfunctional increment operator that returns an `ostreambuf_iterator` to the same object it addressed before the operation was called."},{"pos":[3308,3354],"content":"<bpt id=\"p1\">[</bpt>operator=<ept id=\"p1\">](#ostreambuf_iterator__operator_eq)</ept>","source":"[operator=](#ostreambuf_iterator__operator_eq)"},{"content":"The operator inserts a character into the associated stream buffer.","pos":[3355,3422]},{"pos":[3432,3444],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3448,3471],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[3478,3496],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3506,3583],"content":"<bpt id=\"p1\">&lt;a name=\"ostreambuf_iterator__char_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ostreambuf_iterator::char_type","linkify":"<a name=\"ostreambuf_iterator__char_type\"></a>  ostreambuf_iterator::char_type","source":"<a name=\"ostreambuf_iterator__char_type\"></a>  ostreambuf_iterator::char_type"},{"pos":[3587,3660],"content":"A type that provides for the character type of the <ph id=\"ph1\">`ostreambuf_iterator`</ph>.","source":"A type that provides for the character type of the `ostreambuf_iterator`."},{"pos":[3711,3718],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3722,3784],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **CharType**."},{"pos":[3794,3801],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4699,4770],"content":"<bpt id=\"p1\">&lt;a name=\"ostreambuf_iterator__failed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ostreambuf_iterator::failed","linkify":"<a name=\"ostreambuf_iterator__failed\"></a>  ostreambuf_iterator::failed","source":"<a name=\"ostreambuf_iterator__failed\"></a>  ostreambuf_iterator::failed"},{"content":"Tests for failure of an insertion into the output stream buffer.","pos":[4774,4838]},{"pos":[4890,4902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4906,5001],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if no insertion into the output stream buffer has failed earlier; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if no insertion into the output stream buffer has failed earlier; otherwise **false**."},{"pos":[5011,5018],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5022,5152],"content":"The member function returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if, in any prior use of member <ph id=\"ph1\">`operator=`</ph>, the call to <bpt id=\"p2\">**</bpt>subf<ept id=\"p2\">**</ept>_-&gt; <ph id=\"ph2\">`sputc`</ph> returned <bpt id=\"p3\">**</bpt>eof<ept id=\"p3\">**</ept>.","source":"The member function returns **true** if, in any prior use of member `operator=`, the call to **subf**_-> `sputc` returned **eof**."},{"pos":[5162,5169],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5884,5965],"content":"<bpt id=\"p1\">&lt;a name=\"ostreambuf_iterator__operator_star\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ostreambuf_iterator::operator*","linkify":"<a name=\"ostreambuf_iterator__operator_star\"></a>  ostreambuf_iterator::operator*","source":"<a name=\"ostreambuf_iterator__operator_star\"></a>  ostreambuf_iterator::operator*"},{"pos":[5969,6070],"content":"A nonfunctional dereferencing operator used to implement the output iterator expression <ph id=\"ph1\">\\*</ph> <bpt id=\"p1\">*</bpt>i<ept id=\"p1\">*</ept><ph id=\"ph2\"> = </ph><bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept>.","source":"A nonfunctional dereferencing operator used to implement the output iterator expression \\* *i* = *x*."},{"pos":[6145,6157],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ostreambuf iterator object.","pos":[6161,6192]},{"pos":[6202,6209],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This operator functions only in the output iterator expression <ph id=\"ph1\">\\*</ph> <bpt id=\"p1\">*</bpt>i<ept id=\"p1\">*</ept><ph id=\"ph2\"> = </ph><bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept> to output characters to stream buffer.","pos":[6213,6327],"source":"This operator functions only in the output iterator expression \\* *i* = *x* to output characters to stream buffer."},{"content":"Applied to an ostreambuf iterator, it returns the iterator; <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>iter<ept id=\"p1\">**</ept> returns <bpt id=\"p2\">**</bpt>iter<ept id=\"p2\">**</ept>,","pos":[6328,6416],"source":" Applied to an ostreambuf iterator, it returns the iterator; **\\*iter** returns **iter**,"},{"pos":[6426,6433],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7101,7186],"content":"<bpt id=\"p1\">&lt;a name=\"ostreambuf_iterator__operator_add_add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ostreambuf_iterator::operator++","linkify":"<a name=\"ostreambuf_iterator__operator_add_add\"></a>  ostreambuf_iterator::operator++","source":"<a name=\"ostreambuf_iterator__operator_add_add\"></a>  ostreambuf_iterator::operator++"},{"content":"A nonfunctional increment operator that returns an ostream iterator to the same character it addressed before the operation was called.","pos":[7190,7325]},{"pos":[7457,7469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7473,7635],"content":"A reference to the character originally addressed or to an implementation-defined object that is convertible to <ph id=\"ph1\">`ostreambuf_iterator`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Traits<ept id=\"p2\">**</ept>&gt;.","source":"A reference to the character originally addressed or to an implementation-defined object that is convertible to `ostreambuf_iterator`\\< **CharType**, **Traits**>."},{"pos":[7645,7652],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7656,7734],"content":"The operator is used to implement the output iterator expression <ph id=\"ph1\">\\*</ph> <bpt id=\"p1\">*</bpt>i<ept id=\"p1\">*</ept><ph id=\"ph2\"> = </ph><bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept>.","source":"The operator is used to implement the output iterator expression \\* *i* = *x*."},{"pos":[7744,7751],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8424,8503],"content":"<bpt id=\"p1\">&lt;a name=\"ostreambuf_iterator__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ostreambuf_iterator::operator=","linkify":"<a name=\"ostreambuf_iterator__operator_eq\"></a>  ostreambuf_iterator::operator=","source":"<a name=\"ostreambuf_iterator__operator_eq\"></a>  ostreambuf_iterator::operator="},{"content":"The operator inserts a character into the associated stream buffer.","pos":[8507,8574]},{"pos":[8663,8673],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The character to be inserted into the stream buffer.","pos":[8688,8740]},{"pos":[8750,8762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the character inserted into the stream buffer.","pos":[8766,8827]},{"pos":[8837,8844],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8848,8962],"content":"Assignment operator used to implement the output iterator expression <ph id=\"ph1\">\\*</ph> <bpt id=\"p1\">*</bpt>i<ept id=\"p1\">*</ept><ph id=\"ph2\"> = </ph><bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept> for writing to an output stream.","source":"Assignment operator used to implement the output iterator expression \\* *i* = *x* for writing to an output stream."},{"pos":[8972,8979],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9654,9750],"content":"<bpt id=\"p1\">&lt;a name=\"ostreambuf_iterator_ostreambuf_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ostreambuf_iterator::ostreambuf_iterator","linkify":"<a name=\"ostreambuf_iterator_ostreambuf_iterator\"></a>  ostreambuf_iterator::ostreambuf_iterator","source":"<a name=\"ostreambuf_iterator_ostreambuf_iterator\"></a>  ostreambuf_iterator::ostreambuf_iterator"},{"pos":[9754,9851],"content":"Constructs an <ph id=\"ph1\">`ostreambuf_iterator`</ph> that is initialized to write characters to the output stream.","source":"Constructs an `ostreambuf_iterator` that is initialized to write characters to the output stream."},{"pos":[9976,9986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The output streambuf object used to initialize the output stream-buffer pointer.","pos":[10002,10082]},{"content":"The output stream object used to initialize the output stream-buffer pointer.","pos":[10099,10176]},{"pos":[10186,10193],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10197,10278],"content":"The first constructor initializes the output stream-buffer pointer with <ph id=\"ph1\">`strbuf`</ph>.","source":"The first constructor initializes the output stream-buffer pointer with `strbuf`."},{"content":"The second constructor initializes the output stream-buffer pointer with <ph id=\"ph1\">`Ostr`</ph>.","pos":[10285,10365],"source":"The second constructor initializes the output stream-buffer pointer with `Ostr`."},{"content":"<ph id=\"ph1\">`rdbuf`</ph>.","pos":[10366,10374],"source":"`rdbuf`."},{"content":"The stored pointer must not be a null pointer.","pos":[10375,10421]},{"pos":[10431,10438],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11212,11294],"content":"<bpt id=\"p1\">&lt;a name=\"ostreambuf_iterator_ostream_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ostreambuf_iterator::ostream_type","linkify":"<a name=\"ostreambuf_iterator_ostream_type\"></a>  ostreambuf_iterator::ostream_type","source":"<a name=\"ostreambuf_iterator_ostream_type\"></a>  ostreambuf_iterator::ostream_type"},{"pos":[11298,11365],"content":"A type that provides for the stream type of the <ph id=\"ph1\">`ostream_iterator`</ph>.","source":"A type that provides for the stream type of the `ostream_iterator`."},{"pos":[11441,11448],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11452,11520],"content":"The type is a synonym for <ph id=\"ph1\">`basicOstream`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Traits<ept id=\"p2\">**</ept><ph id=\"ph3\">&gt;</ph>","source":"The type is a synonym for `basicOstream`\\< **CharType**, **Traits**>"},{"pos":[11530,11537],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11542,11666],"content":"See <bpt id=\"p1\">[</bpt>ostreambuf_iterator<ept id=\"p1\">](#ostreambuf_iterator_ostreambuf_iterator)</ept> for an example of how to declare and use <ph id=\"ph1\">`ostream_type`</ph>.","source":"See [ostreambuf_iterator](#ostreambuf_iterator_ostreambuf_iterator) for an example of how to declare and use `ostream_type`."},{"pos":[11676,11763],"content":"<bpt id=\"p1\">&lt;a name=\"ostreambuf_iterator__streambuf_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ostreambuf_iterator::streambuf_type","linkify":"<a name=\"ostreambuf_iterator__streambuf_type\"></a>  ostreambuf_iterator::streambuf_type","source":"<a name=\"ostreambuf_iterator__streambuf_type\"></a>  ostreambuf_iterator::streambuf_type"},{"pos":[11767,11837],"content":"A type that provides for the stream type of the <ph id=\"ph1\">`ostreambuf_iterator`</ph>.","source":"A type that provides for the stream type of the `ostreambuf_iterator`."},{"pos":[11918,11925],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11929,12100],"content":"The type is a synonym for <ph id=\"ph1\">`basic_streambuf`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Traits<ept id=\"p2\">**</ept>&gt;, a stream class for I/O buffers that becomes <ph id=\"ph3\">`streambuf`</ph> when specialized to character type <ph id=\"ph4\">`char`</ph>.","source":"The type is a synonym for `basic_streambuf`\\< **CharType**, **Traits**>, a stream class for I/O buffers that becomes `streambuf` when specialized to character type `char`."},{"pos":[12110,12117],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12122,12248],"content":"See <bpt id=\"p1\">[</bpt>ostreambuf_iterator<ept id=\"p1\">](#ostreambuf_iterator_ostreambuf_iterator)</ept> for an example of how to declare and use <ph id=\"ph1\">`streambuf_type`</ph>.","source":"See [ostreambuf_iterator](#ostreambuf_iterator_ostreambuf_iterator) for an example of how to declare and use `streambuf_type`."},{"pos":[12258,12339],"content":"<bpt id=\"p1\">&lt;a name=\"ostreambuf_iterator__traits_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ostreambuf_iterator::traits_type","linkify":"<a name=\"ostreambuf_iterator__traits_type\"></a>  ostreambuf_iterator::traits_type","source":"<a name=\"ostreambuf_iterator__traits_type\"></a>  ostreambuf_iterator::traits_type"},{"pos":[12343,12420],"content":"A type that provides for the character traits type of the <ph id=\"ph1\">`ostream_iterator`</ph>.","source":"A type that provides for the character traits type of the `ostream_iterator`."},{"pos":[12471,12478],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12482,12542],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **Traits**."},{"pos":[12552,12559],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13458,13466],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>iterator&gt;<ept id=\"p1\">](../standard-library/iterator.md)</ept><ph id=\"ph2\"> </ph>","pos":[13470,13517],"source":"[\\<iterator>](../standard-library/iterator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[13520,13631],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[13634,13722],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"ostreambuf_iterator Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.ostreambuf_iterator\"\n  - \"streambuf/std::ostreambuf_iterator\"\n  - \"ostreambuf_iterator\"\n  - \"std::ostreambuf_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ostreambuf_iterator class\"\nms.assetid: dad1e624-2f45-4e94-8887-a885e95f9071\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ostreambuf_iterator Class\nThe template class ostreambuf_iterator describes an output iterator object that writes successive character elements onto the output stream with the extraction **operator>>**. The `ostreambuf_iterator`s differ from those of the [ostream_iterator Class](../standard-library/ostream-iterator-class.md) in having characters instead of a generic type at the type of object being inserted into the output stream.  \n  \n## Syntax  \n  \n```\ntemplate <class CharType = char class Traits = char_traits <CharType>>\n```  \n  \n#### Parameters  \n `CharType`  \n The type that represents the character type for the ostreambuf_iterator. This argument is optional and the default value is `char`*.*  \n  \n `Traits`  \n The type that represents the character type for the ostreambuf_iterator. This argument is optional and the default value is `char_traits`\\< *CharType>.*  \n  \n## Remarks  \n The ostreambuf_iterator class must satisfy the requirements for an output iterator. Algorithms can be written directly to output streams using an `ostreambuf_iterator`. The class provides a low-level stream iterator that allows access to the raw (unformatted) I/O stream in the form of characters and the ability to bypass the buffering and character translations associated with the high-level stream iterators.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[ostreambuf_iterator](#ostreambuf_iterator_ostreambuf_iterator)|Constructs an `ostreambuf_iterator` that is initialized to write characters to the output stream.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#ostreambuf_iterator__char_type)|A type that provides for the character type of the `ostreambuf_iterator`.|  \n|[ostream_type](#ostreambuf_iterator_ostream_type)|A type that provides for the stream type of the `ostream_iterator`.|  \n|[streambuf_type](#ostreambuf_iterator__streambuf_type)|A type that provides for the stream type of the `ostreambuf_iterator`.|  \n|[traits_type](#ostreambuf_iterator__traits_type)|A type that provides for the character traits type of the `ostream_iterator`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[failed](#ostreambuf_iterator__failed)|Tests for failure of an insertion into the output stream buffer.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator*](#ostreambuf_iterator__operator_star)|Dereferencing operator used to implement the output iterator expression * `i` = `x`.|  \n|[operator++](#ostreambuf_iterator__operator_add_add)|A nonfunctional increment operator that returns an `ostreambuf_iterator` to the same object it addressed before the operation was called.|  \n|[operator=](#ostreambuf_iterator__operator_eq)|The operator inserts a character into the associated stream buffer.|  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n##  <a name=\"ostreambuf_iterator__char_type\"></a>  ostreambuf_iterator::char_type  \n A type that provides for the character type of the `ostreambuf_iterator`.  \n  \n```\ntypedef CharType char_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **CharType**.  \n  \n### Example  \n  \n```cpp  \n// ostreambuf_iterator_char_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   typedef ostreambuf_iterator<char>::char_type CHT1;  \n   typedef ostreambuf_iterator<char>::traits_type CHTR1;  \n  \n   // ostreambuf_iterator for stream cout  \n   // with new line delimiter:  \n    ostreambuf_iterator< CHT1, CHTR1> charOutBuf ( cout );  \n  \n   // Standard iterator interface for writing  \n   // elements to the output streambuf:  \n   cout << \"The characters written to the output stream\\n\"  \n        << \" by charOutBuf are: \";  \n *charOutBuf = 'O';  \n   charOutBuf++;  \n *charOutBuf = 'U';  \n   charOutBuf++;  \n *charOutBuf = 'T';  \n   charOutBuf++;  \n   cout << \".\" << endl;  \n}  \n\\* Output:   \nThe characters written to the output stream  \n by charOutBuf are: OUT.  \n*\\  \n```  \n  \n##  <a name=\"ostreambuf_iterator__failed\"></a>  ostreambuf_iterator::failed  \n Tests for failure of an insertion into the output stream buffer.  \n  \n```\nbool failed() const throw();\n```  \n  \n### Return Value  \n **true** if no insertion into the output stream buffer has failed earlier; otherwise **false**.  \n  \n### Remarks  \n The member function returns **true** if, in any prior use of member `operator=`, the call to **subf**_-> `sputc` returned **eof**.  \n  \n### Example  \n  \n```cpp  \n// ostreambuf_iterator_failed.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // ostreambuf_iterator for stream cout  \n   ostreambuf_iterator<char> charOut ( cout );  \n  \n *charOut = 'a';  \n   charOut ++;  \n *charOut  = 'b';  \n   charOut ++;     \n *charOut = 'c';  \n   cout << \" are characters output individually.\" << endl;  \n  \n   bool b1 = charOut.failed ( );  \n   if (b1)   \n       cout << \"At least one insertion failed.\" << endl;  \n   else  \n       cout << \"No insertions failed.\" << endl;  \n}  \n\\* Output:   \nabc are characters output individually.  \nNo insertions failed.  \n*\\  \n```  \n  \n##  <a name=\"ostreambuf_iterator__operator_star\"></a>  ostreambuf_iterator::operator*  \n A nonfunctional dereferencing operator used to implement the output iterator expression \\* *i* = *x*.  \n  \n```\nostreambuf_iterator<CharType, Traits>& operator*();\n```  \n  \n### Return Value  \n The ostreambuf iterator object.  \n  \n### Remarks  \n This operator functions only in the output iterator expression \\* *i* = *x* to output characters to stream buffer. Applied to an ostreambuf iterator, it returns the iterator; **\\*iter** returns **iter**,  \n  \n### Example  \n  \n```cpp  \n// ostreambuf_iterator_op_deref.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // ostreambuf_iterator for stream cout  \n   // with new line delimiter  \n   ostreambuf_iterator<char> charOutBuf ( cout );  \n  \n   // Standard iterator interface for writing  \n   // elements to the output stream  \n   cout << \"Elements written to output stream:\" << endl;  \n *charOutBuf = 'O';  \n   charOutBuf++;   // no effect on iterator position  \n *charOutBuf = 'U';  \n *charOutBuf = 'T';  \n}  \n\\* Output:   \nElements written to output stream:  \nOUT  \n*\\  \n```  \n  \n##  <a name=\"ostreambuf_iterator__operator_add_add\"></a>  ostreambuf_iterator::operator++  \n A nonfunctional increment operator that returns an ostream iterator to the same character it addressed before the operation was called.  \n  \n```\nostreambuf_iterator<CharType, Traits>& operator++();\nostreambuf_iterator<CharType, Traits>& operator++(int);\n```  \n  \n### Return Value  \n A reference to the character originally addressed or to an implementation-defined object that is convertible to `ostreambuf_iterator`\\< **CharType**, **Traits**>.  \n  \n### Remarks  \n The operator is used to implement the output iterator expression \\* *i* = *x*.  \n  \n### Example  \n  \n```cpp  \n// ostreambuf_iterator_op_incr.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // ostreambuf_iterator for stream cout  \n   // with new line delimiter  \n   ostreambuf_iterator<char> charOutBuf ( cout );  \n  \n   // Standard iterator interface for writing  \n   // elements to the output stream  \n   cout << \"Elements written to output stream:\" << endl;  \n *charOutBuf = 'O';  \n   charOutBuf++;      // No effect on iterator position  \n *charOutBuf = 'U';  \n *charOutBuf = 'T';     \n}  \n\\* Output:   \nElements written to output stream:  \nOUT  \n*\\  \n```  \n  \n##  <a name=\"ostreambuf_iterator__operator_eq\"></a>  ostreambuf_iterator::operator=  \n The operator inserts a character into the associated stream buffer.  \n  \n```\nostreambuf_iterator<CharType, Traits>& operator=(CharType _Char);\n```  \n  \n### Parameters  \n `_Char`  \n The character to be inserted into the stream buffer.  \n  \n### Return Value  \n A reference to the character inserted into the stream buffer.  \n  \n### Remarks  \n Assignment operator used to implement the output iterator expression \\* *i* = *x* for writing to an output stream.  \n  \n### Example  \n  \n```cpp  \n// ostreambuf_iterator_op_assign.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // ostreambuf_iterator for stream cout  \n   // with new line delimiter  \n   ostreambuf_iterator<char> charOutBuf ( cout );  \n  \n   // Standard iterator interface for writing  \n   // elements to the output stream  \n   cout << \"Elements written to output stream:\" << endl;  \n *charOutBuf = 'O';  \n   charOutBuf++;      // No effect on iterator position  \n *charOutBuf = 'U';  \n *charOutBuf = 'T';     \n}  \n\\* Output:   \nElements written to output stream:  \nOUT  \n*\\  \n```  \n  \n##  <a name=\"ostreambuf_iterator_ostreambuf_iterator\"></a>  ostreambuf_iterator::ostreambuf_iterator  \n Constructs an `ostreambuf_iterator` that is initialized to write characters to the output stream.  \n  \n```\nostreambuf_iterator(streambuf_type* strbuf) throw();\nostreambuf_iterator(ostream_type& Ostr) throw();\n```  \n  \n### Parameters  \n `strbuf`  \n The output streambuf object used to initialize the output stream-buffer pointer.  \n  \n `Ostr`  \n The output stream object used to initialize the output stream-buffer pointer.  \n  \n### Remarks  \n The first constructor initializes the output stream-buffer pointer with `strbuf`.  \n  \n The second constructor initializes the output stream-buffer pointer with `Ostr`. `rdbuf`. The stored pointer must not be a null pointer.  \n  \n### Example  \n  \n```cpp  \n// ostreambuf_iteratorOstreambuf_iterator.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // ostreambuf_iterator for stream cout  \n   ostreambuf_iterator<char> charOut ( cout );  \n  \n *charOut = 'O';  \n   charOut ++;  \n *charOut  = 'U';  \n   charOut ++;     \n *charOut = 'T';  \n   cout << \" are characters output individually.\" << endl;  \n  \n   ostreambuf_iterator<char> strOut ( cout );  \n   string str = \"These characters are being written to the output stream.\\n \";  \n   copy ( str.begin ( ), str. end ( ), strOut );  \n}  \n\\* Output:   \nOUT are characters output individually.  \nThese characters are being written to the output stream.  \n*\\  \n```  \n  \n##  <a name=\"ostreambuf_iterator_ostream_type\"></a>  ostreambuf_iterator::ostream_type  \n A type that provides for the stream type of the `ostream_iterator`.  \n  \n```\ntypedef basicOstream<CharType, Traits> ostream_type;\n```  \n  \n### Remarks  \n The type is a synonym for `basicOstream`\\< **CharType**, **Traits**>  \n  \n### Example  \n  See [ostreambuf_iterator](#ostreambuf_iterator_ostreambuf_iterator) for an example of how to declare and use `ostream_type`.  \n  \n##  <a name=\"ostreambuf_iterator__streambuf_type\"></a>  ostreambuf_iterator::streambuf_type  \n A type that provides for the stream type of the `ostreambuf_iterator`.  \n  \n```\ntypedef basic_streambuf<CharType, Traits> streambuf_type;\n```  \n  \n### Remarks  \n The type is a synonym for `basic_streambuf`\\< **CharType**, **Traits**>, a stream class for I/O buffers that becomes `streambuf` when specialized to character type `char`.  \n  \n### Example  \n  See [ostreambuf_iterator](#ostreambuf_iterator_ostreambuf_iterator) for an example of how to declare and use `streambuf_type`.  \n  \n##  <a name=\"ostreambuf_iterator__traits_type\"></a>  ostreambuf_iterator::traits_type  \n A type that provides for the character traits type of the `ostream_iterator`.  \n  \n```\ntypedef Traits traits_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **Traits**.  \n  \n### Example  \n  \n```cpp  \n// ostreambuf_iterator_traits_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   typedef ostreambuf_iterator<char>::char_type CHT1;  \n   typedef ostreambuf_iterator<char>::traits_type CHTR1;  \n  \n   // ostreambuf_iterator for stream cout  \n   // with new line delimiter:  \n    ostreambuf_iterator< CHT1, CHTR1> charOutBuf ( cout );  \n  \n   // Standard iterator interface for writing  \n   // elements to the output streambuf:  \n   cout << \"The characters written to the output stream\\n\"  \n        << \" by charOutBuf are: \";  \n *charOutBuf = 'O';  \n   charOutBuf++;  \n *charOutBuf = 'U';  \n   charOutBuf++;  \n *charOutBuf = 'T';  \n   charOutBuf++;  \n   cout << \".\" << endl;  \n}  \n\\* Output:   \nThe characters written to the output stream  \n by charOutBuf are: OUT.  \n*\\  \n```  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}