{"nodes":[{"pos":[12,73],"content":"How to: Convert Between Various String Types | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Convert Between Various String Types | Microsoft Docs","pos":[0,61]}]},{"content":"How to: Convert Between Various String Types","pos":[677,721]},{"content":"This topic demonstrates how to convert various Visual C++ string types into other strings.","pos":[722,812]},{"content":"The strings types that are covered include <ph id=\"ph1\">`char *`</ph>, <ph id=\"ph2\">`wchar_t*`</ph>, <bpt id=\"p1\">[</bpt>_bstr_t<ept id=\"p1\">](../cpp/bstr-t-class.md)</ept>, <bpt id=\"p2\">[</bpt>CComBSTR<ept id=\"p2\">](../atl/reference/ccombstr-class.md)</ept>, <bpt id=\"p3\">[</bpt>CString<ept id=\"p3\">](../atl-mfc-shared/using-cstring.md)</ept>, <bpt id=\"p4\">[</bpt>basic_string<ept id=\"p4\">](../standard-library/basic-string-class.md)</ept>, and &lt;xref:System.String?displayProperty=fullName&gt;.","pos":[813,1117],"source":" The strings types that are covered include `char *`, `wchar_t*`, [_bstr_t](../cpp/bstr-t-class.md), [CComBSTR](../atl/reference/ccombstr-class.md), [CString](../atl-mfc-shared/using-cstring.md), [basic_string](../standard-library/basic-string-class.md), and <xref:System.String?displayProperty=fullName>."},{"content":"In all cases, a copy of the string is made when converted to the new type.","pos":[1118,1192]},{"content":"Any changes made to the new string will not affect the original string, and vice versa.","pos":[1193,1280]},{"content":"Converting from char *","pos":[1289,1311]},{"content":"Example","pos":[1320,1327]},{"content":"Description","pos":[1337,1348]},{"content":"This example demonstrates how to convert from a <ph id=\"ph1\">`char *`</ph> to the other string types listed above.","pos":[1352,1448],"source":"This example demonstrates how to convert from a `char *` to the other string types listed above."},{"content":"A <ph id=\"ph1\">`char *`</ph> string (also known as a C style string) uses a null character to indicate the end of the string.","pos":[1449,1556],"source":" A `char *` string (also known as a C style string) uses a null character to indicate the end of the string."},{"content":"C style strings usually require one byte per character, but can also use two bytes.","pos":[1557,1640]},{"content":"In the examples below, <ph id=\"ph1\">`char *`</ph> strings are sometimes referred to as multibyte character strings because of the string data that results from converting from Unicode strings.","pos":[1641,1815],"source":" In the examples below, `char *` strings are sometimes referred to as multibyte character strings because of the string data that results from converting from Unicode strings."},{"content":"Single byte and multibyte character (<ph id=\"ph1\">`MBCS`</ph>) functions can operate on <ph id=\"ph2\">`char *`</ph> strings.","pos":[1816,1903],"source":" Single byte and multibyte character (`MBCS`) functions can operate on `char *` strings."},{"content":"Code","pos":[1913,1917]},{"content":"Output","pos":[4581,4587]},{"content":"Converting from wchar_t *","pos":[4835,4860]},{"content":"Example","pos":[4869,4876]},{"content":"Description","pos":[4886,4897]},{"content":"This example demonstrates how to convert from a <ph id=\"ph1\">`wchar_t *`</ph> to the other string types listed above.","pos":[4901,5000],"source":"This example demonstrates how to convert from a `wchar_t *` to the other string types listed above."},{"content":"Several string types, including <ph id=\"ph1\">`wchar_t *`</ph>, implement wide character formats.","pos":[5001,5079],"source":" Several string types, including `wchar_t *`, implement wide character formats."},{"content":"To convert a string between a multibyte and a wide character format, you can use a single function call like <ph id=\"ph1\">`mbstowcs_s`</ph> or a constructor invocation for a class like <ph id=\"ph2\">`CStringA`</ph>.","pos":[5080,5258],"source":" To convert a string between a multibyte and a wide character format, you can use a single function call like `mbstowcs_s` or a constructor invocation for a class like `CStringA`."},{"content":"Code","pos":[5268,5272]},{"content":"Output","pos":[9164,9170]},{"content":"Converting from _bstr_t","pos":[9418,9441]},{"content":"Example","pos":[9450,9457]},{"content":"Description","pos":[9467,9478]},{"content":"This example demonstrates how to convert from a <ph id=\"ph1\">`_bstr_t`</ph> to the other string types listed above.","pos":[9482,9579],"source":"This example demonstrates how to convert from a `_bstr_t` to the other string types listed above."},{"content":"The <ph id=\"ph1\">`_bstr_t`</ph> object is a way to encapsulate wide character <ph id=\"ph2\">`BSTR`</ph> strings.","pos":[9580,9655],"source":" The `_bstr_t` object is a way to encapsulate wide character `BSTR` strings."},{"content":"A BSTR string has a length value and does not use a null character to terminate the string, but the string type you convert to may require a terminating null.","pos":[9656,9814]},{"content":"Code","pos":[9824,9828]},{"content":"Output","pos":[12386,12392]},{"content":"Converting from CComBSTR","pos":[12640,12664]},{"content":"Example","pos":[12673,12680]},{"content":"Description","pos":[12690,12701]},{"content":"This example demonstrates how to convert from a <ph id=\"ph1\">`CComBSTR`</ph> to the other string types listed above.","pos":[12705,12803],"source":"This example demonstrates how to convert from a `CComBSTR` to the other string types listed above."},{"content":"Like _bstr_t, a <ph id=\"ph1\">`CComBSTR`</ph> object is a way to encapsulate wide character BSTR strings.","pos":[12804,12890],"source":" Like _bstr_t, a `CComBSTR` object is a way to encapsulate wide character BSTR strings."},{"content":"A BSTR string has a length value and does not use a null character to terminate the string, but the string type you convert to may require a terminating null.","pos":[12891,13049]},{"content":"Code","pos":[13059,13063]},{"content":"Output","pos":[16245,16251]},{"content":"Converting from CString","pos":[16499,16522]},{"content":"Example","pos":[16531,16538]},{"content":"Description","pos":[16548,16559]},{"content":"This example demonstrates how to convert from a <ph id=\"ph1\">`CString`</ph> to the other string types listed above.","pos":[16563,16660],"source":"This example demonstrates how to convert from a `CString` to the other string types listed above."},{"content":"is based on the TCHAR data type, which in turn depends on whether the symbol <ph id=\"ph1\">`_UNICODE`</ph> is defined.","pos":[16671,16770],"source":" is based on the TCHAR data type, which in turn depends on whether the symbol `_UNICODE` is defined."},{"content":"If <ph id=\"ph1\">`_UNICODE`</ph> is not defined, <ph id=\"ph2\">`TCHAR`</ph> is defined to be char and <ph id=\"ph3\">`CString`</ph> contains a multibyte character string; if <ph id=\"ph4\">`_UNICODE`</ph> is defined, <ph id=\"ph5\">`TCHAR`</ph> is defined to be <ph id=\"ph6\">`wchar_t`</ph> and <ph id=\"ph7\">`CString`</ph> contains a wide character string.","pos":[16771,16992],"source":" If `_UNICODE` is not defined, `TCHAR` is defined to be char and `CString` contains a multibyte character string; if `_UNICODE` is defined, `TCHAR` is defined to be `wchar_t` and `CString` contains a wide character string."},{"content":"is the multibyte string always version of <ph id=\"ph1\">`CString`</ph>, <ph id=\"ph2\">`CStringW`</ph> is the wide character string only version.","pos":[17010,17116],"source":" is the multibyte string always version of `CString`, `CStringW` is the wide character string only version."},{"content":"Neither <ph id=\"ph1\">`CStringA`</ph> nor <ph id=\"ph2\">`CStringW`</ph> use <ph id=\"ph3\">`_UNICODE`</ph> to determine how they should compile.","pos":[17117,17203],"source":" Neither `CStringA` nor `CStringW` use `_UNICODE` to determine how they should compile."},{"content":"and <ph id=\"ph1\">`CStringW`</ph> are used in this example to clarify minor differences in buffer size allocation and output handling.","pos":[17215,17330],"source":" and `CStringW` are used in this example to clarify minor differences in buffer size allocation and output handling."},{"content":"Code","pos":[17340,17344]},{"content":"Output","pos":[20992,20998]},{"content":"Converting from basic_string","pos":[21352,21380]},{"content":"Example","pos":[21389,21396]},{"content":"Description","pos":[21406,21417]},{"pos":[21421,21523],"content":"This example demonstrates how to convert from a <ph id=\"ph1\">`basic_string`</ph> to the other string types listed above.","source":"This example demonstrates how to convert from a `basic_string` to the other string types listed above."},{"content":"Code","pos":[21533,21537]},{"content":"Output","pos":[23990,23996]},{"content":"Converting from System::String","pos":[24244,24274]},{"content":"Example","pos":[24283,24290]},{"content":"Description","pos":[24300,24311]},{"pos":[24315,24505],"content":"This example demonstrates how to convert from a wide character (Unicode) <bpt id=\"p1\">[</bpt>System::String<ept id=\"p1\">](assetId:///System::String?qualifyHint=True&amp;autoUpgrade=True)</ept> to the other string types listed above.","source":"This example demonstrates how to convert from a wide character (Unicode) [System::String](assetId:///System::String?qualifyHint=True&autoUpgrade=True) to the other string types listed above."},{"content":"Code","pos":[24515,24519]},{"content":"Output","pos":[27298,27304]},{"content":"See Also","pos":[27552,27560]},{"content":"Visual C++ Guided Tour","pos":[27565,27587]},{"content":"ATL and MFC String Conversion Macros","pos":[27664,27700]},{"content":"CString Operations Relating to C-Style Strings","pos":[27779,27825]},{"content":"How to: Convert Standard String to System::String","pos":[27901,27950]},{"content":"How to: Convert System::String to Standard String","pos":[28019,28068]},{"content":"How to: Convert System::String to wchar_t* or char","pos":[28137,28187]},{"content":"Programming with CComBSTR","pos":[28268,28293]},{"content":"mbstowcs_s, _mbstowcs_s_l","pos":[28341,28366]},{"content":"wcstombs_s, _wcstombs_s_l","pos":[28432,28457]},{"content":"strcpy_s, wcscpy_s, _mbscpy_s","pos":[28523,28552]},{"content":"strcat_s, wcscat_s, _mbscat_s","pos":[28621,28650]},{"content":"pin_ptr (C++/CLI)","pos":[28719,28736]}],"content":"---\ntitle: \"How to: Convert Between Various String Types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"get-started-article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"converting string types\"\n  - \"string conversion [C++]\"\n  - \"strings [C++], converting\"\nms.assetid: e7e4f741-3c82-45f0-b8c0-1e1e343b0e77\ncaps.latest.revision: 13\nauthor: \"ghogen\"\nms.author: \"ghogen\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Convert Between Various String Types\nThis topic demonstrates how to convert various Visual C++ string types into other strings. The strings types that are covered include `char *`, `wchar_t*`, [_bstr_t](../cpp/bstr-t-class.md), [CComBSTR](../atl/reference/ccombstr-class.md), [CString](../atl-mfc-shared/using-cstring.md), [basic_string](../standard-library/basic-string-class.md), and <xref:System.String?displayProperty=fullName>. In all cases, a copy of the string is made when converted to the new type. Any changes made to the new string will not affect the original string, and vice versa.  \n  \n## Converting from char *  \n  \n## Example  \n  \n### Description  \n This example demonstrates how to convert from a `char *` to the other string types listed above. A `char *` string (also known as a C style string) uses a null character to indicate the end of the string. C style strings usually require one byte per character, but can also use two bytes. In the examples below, `char *` strings are sometimes referred to as multibyte character strings because of the string data that results from converting from Unicode strings. Single byte and multibyte character (`MBCS`) functions can operate on `char *` strings.  \n  \n### Code  \n  \n```  \n// convert_from_char.cpp  \n// compile with: /clr /link comsuppw.lib  \n  \n#include <iostream>  \n#include <stdlib.h>  \n#include <string>  \n  \n#include \"atlbase.h\"  \n#include \"atlstr.h\"  \n#include \"comutil.h\"  \n  \nusing namespace std;  \nusing namespace System;  \n  \nint main()  \n{  \n    // Create and display a C style string, and then use it   \n    // to create different kinds of strings.  \n    char *orig = \"Hello, World!\";  \n    cout << orig << \" (char *)\" << endl;  \n  \n    // newsize describes the length of the   \n    // wchar_t string called wcstring in terms of the number   \n    // of wide characters, not the number of bytes.  \n    size_t newsize = strlen(orig) + 1;  \n  \n    // The following creates a buffer large enough to contain   \n    // the exact number of characters in the original string  \n    // in the new format. If you want to add more characters  \n    // to the end of the string, increase the value of newsize  \n    // to increase the size of the buffer.  \n    wchar_t * wcstring = new wchar_t[newsize];  \n  \n    // Convert char* string to a wchar_t* string.  \n    size_t convertedChars = 0;  \n    mbstowcs_s(&convertedChars, wcstring, newsize, orig, _TRUNCATE);  \n    // Display the result and indicate the type of string that it is.  \n    wcout << wcstring << _T(\" (wchar_t *)\") << endl;  \n  \n    // Convert the C style string to a _bstr_t string.  \n    _bstr_t bstrt(orig);  \n    // Append the type of string to the new string  \n    // and then display the result.  \n    bstrt += \" (_bstr_t)\";  \n    cout << bstrt << endl;  \n  \n    // Convert the C style string to a CComBSTR string.  \n    CComBSTR ccombstr(orig);  \n    if (ccombstr.Append(_T(\" (CComBSTR)\")) == S_OK)  \n    {  \n        CW2A printstr(ccombstr);  \n        cout << printstr << endl;  \n    }  \n  \n    // Convert the C style string to a CstringA and display it.  \n    CStringA cstringa(orig);  \n    cstringa += \" (CStringA)\";  \n    cout << cstringa << endl;  \n  \n    // Convert the C style string to a CStringW and display it.  \n    CStringW cstring(orig);  \n    cstring += \" (CStringW)\";  \n    // To display a CStringW correctly, use wcout and cast cstring  \n    // to (LPCTSTR).  \n    wcout << (LPCTSTR)cstring << endl;  \n  \n    // Convert the C style string to a basic_string and display it.  \n    string basicstring(orig);  \n    basicstring += \" (basic_string)\";  \n    cout << basicstring << endl;  \n  \n    // Convert the C style string to a System::String and display it.  \n    String ^systemstring = gcnew String(orig);  \n    systemstring += \" (System::String)\";  \n    Console::WriteLine(\"{0}\", systemstring);  \n    delete systemstring;  \n}  \n```  \n  \n### Output  \n  \n```  \nHello, World! (char *)  \nHello, World! (wchar_t *)  \nHello, World! (_bstr_t)  \nHello, World! (CComBSTR)  \nHello, World! (CStringA)  \nHello, World! (CStringW)  \nHello, World! (basic_string)  \nHello, World! (System::String)  \n```  \n  \n## Converting from wchar_t *  \n  \n## Example  \n  \n### Description  \n This example demonstrates how to convert from a `wchar_t *` to the other string types listed above. Several string types, including `wchar_t *`, implement wide character formats. To convert a string between a multibyte and a wide character format, you can use a single function call like `mbstowcs_s` or a constructor invocation for a class like `CStringA`.  \n  \n### Code  \n  \n```  \n// convert_from_wchar_t.cpp  \n// compile with: /clr /link comsuppw.lib  \n  \n#include <iostream>  \n#include <stdlib.h>  \n#include <string>  \n  \n#include \"atlbase.h\"  \n#include \"atlstr.h\"  \n#include \"comutil.h\"  \n  \nusing namespace std;  \nusing namespace System;  \n  \nint main()  \n{  \n    // Create a string of wide characters, display it, and then  \n    // use this string to create other types of strings.  \n    wchar_t *orig = _T(\"Hello, World!\");  \n    wcout << orig << _T(\" (wchar_t *)\") << endl;  \n  \n    // Convert the wchar_t string to a char* string. Record   \n    //.the length of the original string and add 1 to it to  \n    //.account for the terminating null character.  \n    size_t origsize = wcslen(orig) + 1;  \n    size_t convertedChars = 0;  \n  \n    // Use a multibyte string to append the type of string  \n    // to the new string before displaying the result.  \n    char strConcat[] = \" (char *)\";  \n    size_t strConcatsize = (strlen( strConcat ) + 1)*2;  \n  \n    // Allocate two bytes in the multibyte output string for every wide  \n    // character in the input string (including a wide character  \n    // null). Because a multibyte character can be one or two bytes,  \n    // you should allot two bytes for each character. Having extra  \n    // space for the new string is not an error, but having  \n    // insufficient space is a potential security problem.  \n    const size_t newsize = origsize*2;  \n    // The new string will contain a converted copy of the original  \n    // string plus the type of string appended to it.  \n    char *nstring = new char[newsize+strConcatsize];  \n  \n    // Put a copy of the converted string into nstring  \n    wcstombs_s(&convertedChars, nstring, newsize, orig, _TRUNCATE);  \n    // append the type of string to the new string.  \n    _mbscat_s((unsigned char*)nstring, newsize+strConcatsize, (unsigned char*)strConcat);  \n    // Display the result.  \n    cout << nstring << endl;  \n  \n    // Convert a wchar_t to a _bstr_t string and display it.  \n    _bstr_t bstrt(orig);  \n    bstrt += \" (_bstr_t)\";  \n    cout << bstrt << endl;  \n  \n    // Convert the wchar_t string to a BSTR wide character string   \n    // by using the ATL CComBSTR wrapper class for BSTR strings.  \n    // Then display the result.  \n  \n    CComBSTR ccombstr(orig);  \n    if (ccombstr.Append(_T(\" (CComBSTR)\")) == S_OK)  \n    {  \n        // CW2A converts the string in ccombstr to a multibyte   \n        // string in printstr, used here for display output.  \n        CW2A printstr(ccombstr);  \n        cout << printstr << endl;  \n        // The following line of code is an easier way to  \n        // display wide character strings:  \n        // wcout << (LPCTSTR) ccombstr << endl;  \n    }  \n  \n    // Convert a wide wchar_t string to a multibyte CStringA,  \n    // append the type of string to it, and display the result.  \n    CStringA cstringa(orig);  \n    cstringa += \" (CStringA)\";  \n    cout << cstringa << endl;  \n  \n    // Convert a wide character wchar_t string to a wide  \n    // character CStringW string and append the type of string to it  \n    CStringW cstring(orig);  \n    cstring += \" (CStringW)\";  \n    // To display a CStringW correctly, use wcout and cast cstring  \n    // to (LPCTSTR).  \n    wcout << (LPCTSTR)cstring << endl;  \n  \n    // Convert the wide character wchar_t string to a  \n    // basic_string, append the type of string to it, and  \n    // display the result.  \n    wstring basicstring(orig);  \n    basicstring += _T(\" (basic_string)\");  \n    wcout << basicstring << endl;  \n  \n    // Convert a wide character wchar_t string to a   \n    // System::String string, append the type of string to it,  \n    // and display the result.  \n    String ^systemstring = gcnew String(orig);  \n    systemstring += \" (System::String)\";  \n    Console::WriteLine(\"{0}\", systemstring);  \n    delete systemstring;  \n}  \n```  \n  \n### Output  \n  \n```  \nHello, World! (wchar_t *)  \nHello, World! (char *)  \nHello, World! (_bstr_t)  \nHello, World! (CComBSTR)  \nHello, World! (CStringA)  \nHello, World! (CStringW)  \nHello, World! (basic_string)  \nHello, World! (System::String)  \n```  \n  \n## Converting from _bstr_t  \n  \n## Example  \n  \n### Description  \n This example demonstrates how to convert from a `_bstr_t` to the other string types listed above. The `_bstr_t` object is a way to encapsulate wide character `BSTR` strings. A BSTR string has a length value and does not use a null character to terminate the string, but the string type you convert to may require a terminating null.  \n  \n### Code  \n  \n```  \n// convert_from_bstr_t.cpp  \n// compile with: /clr /link comsuppw.lib  \n  \n#include <iostream>  \n#include <stdlib.h>  \n#include <string>  \n  \n#include \"atlbase.h\"  \n#include \"atlstr.h\"  \n#include \"comutil.h\"  \n  \nusing namespace std;  \nusing namespace System;  \n  \nint main()  \n{  \n    // Create a _bstr_t string, display the result, and indicate the  \n    // type of string that it is.  \n    _bstr_t orig(\"Hello, World!\");  \n    wcout << orig << \" (_bstr_t)\" << endl;  \n  \n    // Convert the wide character _bstr_t string to a C style  \n    // string. To be safe, allocate two bytes for each character  \n    // in the char* string, including the terminating null.  \n    const size_t newsize = (orig.length()+1)*2;  \n    char *nstring = new char[newsize];  \n  \n    // Uses the _bstr_t operator (char *) to obtain a null   \n    // terminated string from the _bstr_t object for  \n    // nstring.  \n    strcpy_s(nstring, newsize, (char *)orig);  \n    strcat_s(nstring, newsize, \" (char *)\");  \n    cout << nstring << endl;  \n  \n    // Prepare the type of string to append to the result.  \n    wchar_t strConcat[] = _T(\" (wchar_t *)\");  \n    size_t strConcatLen = wcslen(strConcat) + 1;  \n  \n    // Convert a _bstr_t to a wchar_t* string.  \n    const size_t widesize = orig.length()+ strConcatLen;  \n    wchar_t *wcstring = new wchar_t[newsize];  \n    wcscpy_s(wcstring, widesize, (wchar_t *)orig);  \n    wcscat_s(wcstring, widesize, strConcat);  \n    wcout << wcstring << endl;  \n  \n    // Convert a _bstr_t string to a CComBSTR string.  \n    CComBSTR ccombstr((char *)orig);  \n    if (ccombstr.Append(_T(\" (CComBSTR)\")) == S_OK)  \n    {  \n        CW2A printstr(ccombstr);  \n        cout << printstr << endl;  \n    }  \n  \n    // Convert a _bstr_t to a CStringA string.  \n    CStringA cstringa(orig.GetBSTR());  \n    cstringa += \" (CStringA)\";  \n    cout << cstringa << endl;  \n  \n    // Convert a _bstr_t to a CStringW string.  \n    CStringW cstring(orig.GetBSTR());  \n    cstring += \" (CStringW)\";  \n    // To display a cstring correctly, use wcout and  \n    // \"cast\" the cstring to (LPCTSTR).  \n    wcout << (LPCTSTR)cstring << endl;  \n  \n    // Convert the _bstr_t to a basic_string.  \n    string basicstring((char *)orig);  \n    basicstring += \" (basic_string)\";  \n    cout << basicstring << endl;  \n  \n    // Convert the _bstr_t to a System::String.  \n    String ^systemstring = gcnew String((char *)orig);  \n    systemstring += \" (System::String)\";  \n    Console::WriteLine(\"{0}\", systemstring);  \n    delete systemstring;  \n}  \n```  \n  \n### Output  \n  \n```  \nHello, World! (_bstr_t)  \nHello, World! (char *)  \nHello, World! (wchar_t *)  \nHello, World! (CComBSTR)  \nHello, World! (CStringA)  \nHello, World! (CStringW)  \nHello, World! (basic_string)  \nHello, World! (System::String)  \n```  \n  \n## Converting from CComBSTR  \n  \n## Example  \n  \n### Description  \n This example demonstrates how to convert from a `CComBSTR` to the other string types listed above. Like _bstr_t, a `CComBSTR` object is a way to encapsulate wide character BSTR strings. A BSTR string has a length value and does not use a null character to terminate the string, but the string type you convert to may require a terminating null.  \n  \n### Code  \n  \n```  \n// convert_from_ccombstr.cpp  \n// compile with: /clr /link comsuppw.lib  \n  \n#include <iostream>  \n#include <stdlib.h>  \n#include <string>  \n  \n#include \"atlbase.h\"  \n#include \"atlstr.h\"  \n#include \"comutil.h\"  \n#include \"vcclr.h\"  \n  \nusing namespace std;  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \n  \nint main()  \n{  \n    // Create and initialize a BSTR string by using a CComBSTR object.  \n    CComBSTR orig(\"Hello, World!\");  \n    // Convert the BSTR into a multibyte string, display the result,  \n    // and indicate the type of string that it is.  \n    CW2A printstr(orig);  \n    cout << printstr << \" (CComBSTR)\" << endl;  \n  \n    // Convert a wide character CComBSTR string to a  \n    // regular multibyte char* string. Allocate enough space  \n    // in the new string for the largest possible result,  \n    // including space for a terminating null.  \n    const size_t newsize = (orig.Length()+1)*2;  \n    char *nstring = new char[newsize];  \n  \n    // Create a string conversion object, copy the result to  \n    // the new char* string, and display the result.  \n    CW2A tmpstr1(orig);  \n    strcpy_s(nstring, newsize, tmpstr1);  \n    cout << nstring << \" (char *)\" << endl;  \n  \n    // Prepare the type of string to append to the result.  \n    wchar_t strConcat[] = _T(\" (wchar_t *)\");  \n    size_t strConcatLen = wcslen(strConcat) + 1;  \n  \n    // Convert a wide character CComBSTR string to a wchar_t*.  \n    // The code first determines the length of the converted string  \n    // plus the length of the appended type of string, then  \n    // prepares the final wchar_t string for display.  \n    const size_t widesize = orig.Length()+ strConcatLen;  \n    wchar_t *wcstring = new wchar_t[widesize];  \n    wcscpy_s(wcstring, widesize, orig);  \n    wcscat_s(wcstring, widesize, strConcat);  \n  \n    // Display the result. Unlike CStringW, a wchar_t does not need  \n    // a cast to (LPCTSTR) with wcout.  \n    wcout << wcstring << endl;  \n  \n    // Convert a wide character CComBSTR to a wide character _bstr_t,  \n    // append the type of string to it, and display the result.  \n    _bstr_t bstrt(orig);  \n    bstrt += \" (_bstr_t)\";  \n    cout << bstrt << endl;  \n  \n    // Convert a wide character CComBSTR to a multibyte CStringA,  \n    // append the type of string to it, and display the result.  \n    CStringA cstringa(orig);  \n    cstringa += \" (CStringA)\";  \n    cout << cstringa << endl;  \n  \n    // Convert a wide character CComBSTR to a wide character CStringW.  \n    CStringW cstring(orig);  \n    cstring += \" (CStringW)\";  \n    // To display a cstring correctly, use wcout and cast cstring  \n    // to (LPCTSTR).  \n    wcout << (LPCTSTR)cstring << endl;  \n  \n    // Convert a wide character CComBSTR to a wide character   \n    // basic_string.  \n    wstring basicstring(orig);  \n    basicstring += _T(\" (basic_string)\");  \n    wcout << basicstring << endl;  \n  \n    // Convert a wide character CComBSTR to a System::String.  \n    String ^systemstring = gcnew String(orig);  \n    systemstring += \" (System::String)\";  \n    Console::WriteLine(\"{0}\", systemstring);  \n    delete systemstring;  \n}  \n```  \n  \n### Output  \n  \n```  \nHello, World! (CComBSTR)  \nHello, World! (char *)  \nHello, World! (wchar_t *)  \nHello, World! (_bstr_t)  \nHello, World! (CStringA)  \nHello, World! (CStringW)  \nHello, World! (basic_string)  \nHello, World! (System::String)  \n```  \n  \n## Converting from CString  \n  \n## Example  \n  \n### Description  \n This example demonstrates how to convert from a `CString` to the other string types listed above. `CString` is based on the TCHAR data type, which in turn depends on whether the symbol `_UNICODE` is defined. If `_UNICODE` is not defined, `TCHAR` is defined to be char and `CString` contains a multibyte character string; if `_UNICODE` is defined, `TCHAR` is defined to be `wchar_t` and `CString` contains a wide character string.  \n  \n `CStringA` is the multibyte string always version of `CString`, `CStringW` is the wide character string only version. Neither `CStringA` nor `CStringW` use `_UNICODE` to determine how they should compile. `CStringA` and `CStringW` are used in this example to clarify minor differences in buffer size allocation and output handling.  \n  \n### Code  \n  \n```  \n// convert_from_cstring.cpp  \n// compile with: /clr /link comsuppw.lib  \n  \n#include <iostream>  \n#include <stdlib.h>  \n#include <string>  \n  \n#include \"atlbase.h\"  \n#include \"atlstr.h\"  \n#include \"comutil.h\"  \n  \nusing namespace std;  \nusing namespace System;  \n  \nint main()  \n{  \n    // Set up a multibyte CStringA string.  \n    CStringA origa(\"Hello, World!\");  \n    cout << origa << \" (CStringA)\" << endl;  \n```  \n  \n```  \n// Set up a wide character CStringW string.  \nCStringW origw(\"Hello, World!\");  \nwcout << (LPCTSTR)origw << _T(\" (CStringW)\") << endl;  \n  \n// Convert to a char* string from CStringA string   \n// and display the result.  \nconst size_t newsizea = (origa.GetLength() + 1);  \nchar *nstringa = new char[newsizea];  \nstrcpy_s(nstringa, newsizea, origa);  \ncout << nstringa << \" (char *)\" << endl;  \n  \n// Convert to a char* string from a wide character   \n// CStringW string. To be safe, we allocate two bytes for each  \n// character in the original string, including the terminating  \n// null.  \nconst size_t newsizew = (origw.GetLength() + 1)*2;  \nchar *nstringw = new char[newsizew];  \nsize_t convertedCharsw = 0;  \nwcstombs_s(&convertedCharsw, nstringw, newsizew, origw, _TRUNCATE );  \ncout << nstringw << \" (char *)\" << endl;  \n  \n// Convert to a wchar_t* from CStringA  \nsize_t convertedCharsa = 0;  \nwchar_t *wcstring = new wchar_t[newsizea];  \nmbstowcs_s(&convertedCharsa, wcstring, newsizea, origa, _TRUNCATE);  \nwcout << wcstring << _T(\" (wchar_t *)\") << endl;  \n  \n// Convert to a wide character wchar_t* string from   \n// a wide character CStringW string.   \nwchar_t *n2stringw = new wchar_t[newsizew];  \nwcscpy_s( n2stringw, newsizew, origw );  \nwcout << n2stringw << _T(\" (wchar_t *)\") << endl;  \n  \n// Convert to a wide character _bstr_t string from   \n// a multibyte CStringA string.  \n_bstr_t bstrt(origa);  \nbstrt += _T(\" (_bstr_t)\");  \nwcout << bstrt << endl;  \n  \n// Convert to a wide character_bstr_t string from   \n// a wide character CStringW string.  \nbstr_t bstrtw(origw);  \nbstrtw += \" (_bstr_t)\";  \nwcout << bstrtw << endl;  \n  \n// Convert to a wide character CComBSTR string from   \n// a multibyte character CStringA string.  \nCComBSTR ccombstr(origa);  \nif (ccombstr.Append(_T(\" (CComBSTR)\")) == S_OK)  \n{  \n    // Convert the wide character string to multibyte  \n    // for printing.  \n    CW2A printstr(ccombstr);  \n    cout << printstr << endl;  \n}  \n  \n// Convert to a wide character CComBSTR string from   \n// a wide character CStringW string.  \nCComBSTR ccombstrw(origw);  \n// Append the type of string to it, and display the result.  \n  \nif (ccombstrw.Append(_T(\" (CComBSTR)\")) == S_OK)  \n{  \n    CW2A printstrw(ccombstrw);  \n    wcout << printstrw << endl;  \n}  \n  \n// Convert a multibyte character CStringA to a   \n// multibyte version of a basic_string string.  \nstring basicstring(origa);  \nbasicstring += \" (basic_string)\";  \ncout << basicstring << endl;  \n  \n// Convert a wide character CStringW to a   \n// wide character version of a basic_string   \n// string.  \nwstring basicstringw(origw);  \nbasicstringw += _T(\" (basic_string)\");  \nwcout << basicstringw << endl;  \n  \n// Convert a multibyte character CStringA to a   \n// System::String.  \nString ^systemstring = gcnew String(origa);  \nsystemstring += \" (System::String)\";  \nConsole::WriteLine(\"{0}\", systemstring);  \ndelete systemstring;  \n```  \n  \n```  \n    // Convert a wide character CStringW to a   \n    // System::String.  \n    String ^systemstringw = gcnew String(origw);  \n    systemstringw += \" (System::String)\";  \n    Console::WriteLine(\"{0}\", systemstringw);  \n    delete systemstringw;  \n}  \n```  \n  \n### Output  \n  \n```  \nHello, World! (CStringA)  \nHello, World! (CStringW)  \nHello, World! (char *)  \nHello, World! (char *)  \nHello, World! (wchar_t *)  \nHello, World! (wchar_t *)  \nHello, World! (_bstr_t)  \nHello, World! (_bstr_t)  \nHello, World! (CComBSTR)  \nHello, World! (CComBSTR)  \nHello, World! (basic_string)  \nHello, World! (System::String)  \n```  \n  \n## Converting from basic_string  \n  \n## Example  \n  \n### Description  \n This example demonstrates how to convert from a `basic_string` to the other string types listed above.  \n  \n### Code  \n  \n```  \n// convert_from_basic_string.cpp  \n// compile with: /clr /link comsuppw.lib  \n  \n#include <iostream>  \n#include <stdlib.h>  \n#include <string>  \n  \n#include \"atlbase.h\"  \n#include \"atlstr.h\"  \n#include \"comutil.h\"  \n  \nusing namespace std;  \nusing namespace System;  \n  \nint main()  \n{  \n    // Set up a basic_string string.  \n    string orig(\"Hello, World!\");  \n    cout << orig << \" (basic_string)\" << endl;  \n  \n    // Convert a wide char basic_string string to a multibyte char*  \n    // string. To be safe, we allocate two bytes for each character  \n    // in the original string, including the terminating null.  \n    const size_t newsize = (strlen(orig.c_str()) + 1)*2;  \n    char *nstring = new char[newsize];  \n    strcpy_s(nstring, newsize, orig.c_str());  \n    cout << nstring << \" (char *)\" << endl;  \n  \n    // Convert a basic_string string to a wide character   \n    // wchar_t* string. You must first convert to a char*   \n    // for this to work.  \n    const size_t newsizew = strlen(orig.c_str()) + 1;  \n    size_t convertedChars = 0;  \n    wchar_t *wcstring = new wchar_t[newsizew];  \n    mbstowcs_s(&convertedChars, wcstring, newsizew, orig.c_str(), _TRUNCATE);  \n    wcout << wcstring << _T(\" (wchar_t *)\") << endl;  \n  \n    // Convert a basic_string string to a wide character   \n    // _bstr_t string.   \n    _bstr_t bstrt(orig.c_str());  \n    bstrt += _T(\" (_bstr_t)\");  \n    wcout << bstrt << endl;  \n  \n    // Convert a basic_string string to a wide character   \n    // CComBSTR string.  \n    CComBSTR ccombstr(orig.c_str());  \n    if (ccombstr.Append(_T(\" (CComBSTR)\")) == S_OK)  \n    {  \n        // Make a multibyte version of the CComBSTR string  \n        // and display the result.  \n        CW2A printstr(ccombstr);  \n        cout << printstr << endl;  \n    }  \n  \n    // Convert a basic_string string into a multibyte   \n    // CStringA string.  \n    CStringA cstring(orig.c_str());  \n    cstring += \" (CStringA)\";  \n    cout << cstring << endl;  \n  \n    // Convert a basic_string string into a wide   \n    // character CStringW string.  \n    CStringW cstringw(orig.c_str());  \n    cstringw += _T(\" (CStringW)\");  \n    wcout << (LPCTSTR)cstringw << endl;  \n  \n    // Convert a basic_string string to a System::String  \n    String ^systemstring = gcnew String(orig.c_str());  \n    systemstring += \" (System::String)\";  \n    Console::WriteLine(\"{0}\", systemstring);  \n    delete systemstring;  \n}  \n```  \n  \n### Output  \n  \n```  \nHello, World! (basic_string)  \nHello, World! (char *)  \nHello, World! (wchar_t *)  \nHello, World! (_bstr_t)  \nHello, World! (CComBSTR)  \nHello, World! (CStringA)  \nHello, World! (CStringW)  \nHello, World! (System::String)  \n```  \n  \n## Converting from System::String  \n  \n## Example  \n  \n### Description  \n This example demonstrates how to convert from a wide character (Unicode) [System::String](assetId:///System::String?qualifyHint=True&autoUpgrade=True) to the other string types listed above.  \n  \n### Code  \n  \n```  \n// convert_from_system_string.cpp  \n// compile with: /clr /link comsuppw.lib  \n  \n#include <iostream>  \n#include <stdlib.h>  \n#include <string>  \n  \n#include \"atlbase.h\"  \n#include \"atlstr.h\"  \n#include \"comutil.h\"  \n#include \"vcclr.h\"  \n  \nusing namespace std;  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \n  \nint main()  \n{  \n    // Set up a System::String and display the result.  \n    String ^orig = gcnew String(\"Hello, World!\");  \n    Console::WriteLine(\"{0} (System::String)\", orig);  \n  \n    // Obtain a pointer to the System::String in order to  \n    // first lock memory into place, so that the  \n    // Garbage Collector (GC) cannot move that object  \n    // while we call native functions.  \n    pin_ptr<const wchar_t> wch = PtrToStringChars(orig);  \n  \n    // Make a copy of the system string as a multibyte  \n    // char* string. Allocate two bytes in the multibyte  \n    // output string for every wide character in the input  \n    // string, including space for a terminating null.  \n    size_t origsize = wcslen(wch) + 1;  \n    const size_t newsize = origsize*2;  \n    size_t convertedChars = 0;  \n    char *nstring = new char[newsize];  \n    wcstombs_s(&convertedChars, nstring, newsize, wch, _TRUNCATE);  \n    cout << nstring << \" (char *)\" << endl;  \n  \n    // Convert a wide character system string to a   \n    // wide character wchar_t* string.  \n    const size_t newsizew = origsize;  \n    wchar_t *wcstring = new wchar_t[newsizew];  \n    wcscpy_s(wcstring, newsizew, wch);  \n    wcout << wcstring << _T(\" (wchar_t *)\") << endl;  \n  \n    // Convert a wide character system string to a  \n    // wide character _bstr_t string.  \n    _bstr_t bstrt(wch);  \n    bstrt += \" (_bstr_t)\";  \n    cout << bstrt << endl;  \n  \n    // Convert a wide character system string   \n    // to a wide character CComBSTR string.  \n    CComBSTR ccombstr(wch);  \n    if (ccombstr.Append(_T(\" (CComBSTR)\")) == S_OK)  \n    {  \n        // Make a multibyte copy of the CComBSTR string  \n        // and display the result.  \n        CW2A printstr(ccombstr);  \n        cout << printstr << endl;  \n    }  \n  \n    // Convert a wide character System::String to  \n    // a multibyte CStringA string.  \n    CStringA cstring(wch);  \n    cstring += \" (CStringA)\";  \n    cout << cstring << endl;  \n  \n    // Convert a wide character System::String to  \n    // a wide character CStringW string.  \n    CStringW cstringw(wch);  \n    cstringw += \" (CStringW)\";  \n    wcout << (LPCTSTR)cstringw << endl;  \n  \n    // Convert a wide character System::String to   \n    // a wide character basic_string.  \n    wstring basicstring(wch);  \n    basicstring += _T(\" (basic_string)\");  \n    wcout << basicstring << endl;  \n  \n    delete orig;  \n}  \n```  \n  \n### Output  \n  \n```  \nHello, World! (System::String)  \nHello, World! (char *)  \nHello, World! (wchar_t *)  \nHello, World! (_bstr_t)  \nHello, World! (CComBSTR)  \nHello, World! (CStringA)  \nHello, World! (CStringW)  \nHello, World! (basic_string)  \n```  \n  \n## See Also  \n [Visual C++ Guided Tour](http://msdn.microsoft.com/en-us/499cb66f-7df1-45d6-8b6b-33d94fd1f17c)   \n [ATL and MFC String Conversion Macros](http://msdn.microsoft.com/Library/8f53659e-0464-4424-97db-6b8453c49863)   \n [CString Operations Relating to C-Style Strings](../atl-mfc-shared/cstring-operations-relating-to-c-style-strings.md)   \n [How to: Convert Standard String to System::String](../dotnet/how-to-convert-standard-string-to-system-string.md)   \n [How to: Convert System::String to Standard String](../dotnet/how-to-convert-system-string-to-standard-string.md)   \n [How to: Convert System::String to wchar_t* or char\\*](../dotnet/how-to-convert-system-string-to-wchar-t-star-or-char-star.md)   \n [Programming with CComBSTR](../atl/programming-with-ccombstr-atl.md)   \n [mbstowcs_s, _mbstowcs_s_l](../c-runtime-library/reference/mbstowcs-s-mbstowcs-s-l.md)   \n [wcstombs_s, _wcstombs_s_l](../c-runtime-library/reference/wcstombs-s-wcstombs-s-l.md)   \n [strcpy_s, wcscpy_s, _mbscpy_s](../c-runtime-library/reference/strcpy-s-wcscpy-s-mbscpy-s.md)   \n [strcat_s, wcscat_s, _mbscat_s](../c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s.md)   \n [pin_ptr (C++/CLI)](../windows/pin-ptr-cpp-cli.md)"}