{"nodes":[{"pos":[12,56],"content":"concurrency namespace enums | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"concurrency namespace enums | Microsoft Docs","pos":[0,44]}]},{"content":"concurrency namespace enums","pos":[298,325]},{"content":"Agents_EventType Enumeration","pos":[345,373]},{"content":"ConcRT_EventType Enumeration","pos":[395,423]},{"content":"Concrt_TraceFlags Enumeration","pos":[445,474]},{"content":"CriticalRegionType Enumeration","pos":[501,531]},{"content":"DynamicProgressFeedbackType Enumeration","pos":[555,594]},{"content":"PolicyElementKey Enumeration","pos":[627,655]},{"content":"SchedulerType Enumeration","pos":[681,706]},{"content":"SchedulingProtocolType Enumeration","pos":[725,759]},{"content":"SwitchingProxyState Enumeration","pos":[787,818]},{"content":"WinRTInitializationType Enumeration","pos":[847,882]},{"content":"agent_status Enumeration","pos":[911,935]},{"content":"join_type Enumeration","pos":[953,974]},{"content":"message_status Enumeration","pos":[993,1019]},{"content":"task_group_status Enumeration","pos":[1039,1068]},{"pos":[1129,1153],"content":"agent_status Enumeration"},{"pos":[1157,1189],"content":"The valid states for an <ph id=\"ph1\">`agent`</ph>.","source":"The valid states for an `agent`."},{"content":"Remarks","pos":[1231,1238]},{"pos":[1242,1339],"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Agents<ept id=\"p1\">](../../../parallel/concrt/asynchronous-agents.md)</ept>.","source":"For more information, see [Asynchronous Agents](../../../parallel/concrt/asynchronous-agents.md)."},{"pos":[1382,1410],"content":"Agents_EventType Enumeration"},{"content":"The types of events that can be traced using the tracing functionality offered by the Agents Library","pos":[1414,1514]},{"pos":[1593,1621],"content":"ConcRT_EventType Enumeration"},{"content":"The types of events that can be traced using the tracing functionality offered by the Concurrency Runtime.","pos":[1625,1731]},{"pos":[1811,1840],"content":"Concrt_TraceFlags Enumeration"},{"content":"Trace flags for the event types","pos":[1844,1875]},{"pos":[1957,1987],"content":"CriticalRegionType Enumeration"},{"content":"The type of critical region a context is inside.","pos":[1991,2039]},{"pos":[2131,2170],"content":"DynamicProgressFeedbackType Enumeration"},{"content":"Used by the <ph id=\"ph1\">`DynamicProgressFeedback`</ph> policy to describe whether resources for the scheduler will be rebalanced according to statistical information gathered from the scheduler or only based on virtual processors going in and out of the idle state through calls to the <ph id=\"ph2\">`Activate`</ph> and <ph id=\"ph3\">`Deactivate`</ph> methods on the <ph id=\"ph4\">`IVirtualProcessorRoot`</ph> interface.","pos":[2174,2520],"source":"Used by the `DynamicProgressFeedback` policy to describe whether resources for the scheduler will be rebalanced according to statistical information gathered from the scheduler or only based on virtual processors going in and out of the idle state through calls to the `Activate` and `Deactivate` methods on the `IVirtualProcessorRoot` interface."},{"content":"For more information on available scheduler policies, see <bpt id=\"p1\">[</bpt>PolicyElementKey Enumeration<ept id=\"p1\">](concurrency-namespace-enums.md)</ept>.","pos":[2521,2642],"source":" For more information on available scheduler policies, see [PolicyElementKey Enumeration](concurrency-namespace-enums.md)."},{"pos":[2725,2746],"content":"join_type Enumeration"},{"pos":[2750,2787],"content":"The type of a <ph id=\"ph1\">`join`</ph> messaging block.","source":"The type of a `join` messaging block."},{"pos":[2857,2883],"content":"message_status Enumeration"},{"pos":[2887,2953],"content":"The valid responses for an offer of a <ph id=\"ph1\">`message`</ph> object to a block.","source":"The valid responses for an offer of a `message` object to a block."},{"pos":[3030,3058],"content":"PolicyElementKey Enumeration"},{"content":"Policy keys describing aspects of scheduler behavior.","pos":[3062,3115]},{"content":"Each policy element is described by a key-value pair.","pos":[3116,3169]},{"content":"For more information about scheduler policies and their impact on schedulers, see <bpt id=\"p1\">[</bpt>Task Scheduler<ept id=\"p1\">](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept>.","pos":[3170,3333],"source":" For more information about scheduler policies and their impact on schedulers, see [Task Scheduler](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)."},{"pos":[3409,3434],"content":"SchedulerType Enumeration"},{"content":"Used by the <ph id=\"ph1\">`SchedulerKind`</ph> policy to describe the type of threads that the scheduler should utilize for underlying execution contexts.","pos":[3438,3573],"source":"Used by the `SchedulerKind` policy to describe the type of threads that the scheduler should utilize for underlying execution contexts."},{"content":"For more information on available scheduler policies, see <bpt id=\"p1\">[</bpt>PolicyElementKey Enumeration<ept id=\"p1\">](concurrency-namespace-enums.md)</ept>.","pos":[3574,3695],"source":" For more information on available scheduler policies, see [PolicyElementKey Enumeration](concurrency-namespace-enums.md)."},{"pos":[3777,3811],"content":"SchedulingProtocolType Enumeration"},{"content":"Used by the <ph id=\"ph1\">`SchedulingProtocol`</ph> policy to describe which scheduling algorithm will be utilized for the scheduler.","pos":[3815,3929],"source":"Used by the `SchedulingProtocol` policy to describe which scheduling algorithm will be utilized for the scheduler."},{"content":"For more information on available scheduler policies, see <bpt id=\"p1\">[</bpt>PolicyElementKey Enumeration<ept id=\"p1\">](concurrency-namespace-enums.md)</ept>.","pos":[3930,4051],"source":" For more information on available scheduler policies, see [PolicyElementKey Enumeration](concurrency-namespace-enums.md)."},{"pos":[4139,4170],"content":"SwitchingProxyState Enumeration"},{"content":"Used to denote the state a thread proxy is in, when it is executing a cooperative context switch to a different thread proxy.","pos":[4174,4299]},{"content":"Remarks","pos":[4348,4355]},{"pos":[4359,4540],"content":"A parameter of type <ph id=\"ph1\">`SwitchingProxyState`</ph> is passed in to the method <ph id=\"ph2\">`IThreadProxy::SwitchTo`</ph> to instruct the Resource Manager how to treat the thread proxy that is making the call.","source":"A parameter of type `SwitchingProxyState` is passed in to the method `IThreadProxy::SwitchTo` to instruct the Resource Manager how to treat the thread proxy that is making the call."},{"pos":[4547,4659],"content":"For more information on how this type is used, see <bpt id=\"p1\">[</bpt>IThreadProxy::SwitchTo<ept id=\"p1\">](ithreadproxy-structure.md#switchto)</ept>.","source":"For more information on how this type is used, see [IThreadProxy::SwitchTo](ithreadproxy-structure.md#switchto)."},{"pos":[4703,4732],"content":"task_group_status Enumeration"},{"content":"Describes the execution status of a <ph id=\"ph1\">`task_group`</ph> or <ph id=\"ph2\">`structured_task_group`</ph> object.","pos":[4736,4819],"source":"Describes the execution status of a `task_group` or `structured_task_group` object."},{"content":"A value of this type is returned by numerous methods that wait on tasks scheduled to a task group to complete.","pos":[4820,4930]},{"pos":[5017,5052],"content":"WinRTInitializationType Enumeration"},{"content":"Used by the <ph id=\"ph1\">`WinRTInitialization`</ph> policy to describe whether and how the Windows Runtime will be initialized on scheduler threads for an application which runs on operating systems with version Windows 8 or higher.","pos":[5056,5270],"source":"Used by the `WinRTInitialization` policy to describe whether and how the Windows Runtime will be initialized on scheduler threads for an application which runs on operating systems with version Windows 8 or higher."},{"content":"For more information on available scheduler policies, see <bpt id=\"p1\">[</bpt>PolicyElementKey Enumeration<ept id=\"p1\">](concurrency-namespace-enums.md)</ept>.","pos":[5271,5392],"source":" For more information on available scheduler policies, see [PolicyElementKey Enumeration](concurrency-namespace-enums.md)."},{"content":"See Also","pos":[5444,5452]},{"content":"concurrency Namespace","pos":[5457,5478]}],"content":"---\ntitle: \"concurrency namespace enums | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: a40e3b2d-ad21-4229-9880-2cfa84f7ab8f\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\n---\n# concurrency namespace enums\n||||  \n|-|-|-|  \n|[Agents_EventType Enumeration](#agents_eventtype)|[ConcRT_EventType Enumeration](#concrt_eventtype)|[Concrt_TraceFlags Enumeration](#concrt_traceflags)|  \n|[CriticalRegionType Enumeration](#criticalregiontype)|[DynamicProgressFeedbackType Enumeration](#dynamicprogressfeedbacktype)|[PolicyElementKey Enumeration](#policyelementkey)|  \n|[SchedulerType Enumeration](#schedulertype)|[SchedulingProtocolType Enumeration](#schedulingprotocoltype)|[SwitchingProxyState Enumeration](#switchingproxystate)|  \n|[WinRTInitializationType Enumeration](#winrtinitializationtype)|[agent_status Enumeration](#agent_status)|[join_type Enumeration](#join_type)|  \n|[message_status Enumeration](#message_status)|[task_group_status Enumeration](#task_group_status)|  \n  \n##  <a name=\"agent_status\"></a>  agent_status Enumeration  \n The valid states for an `agent`.  \n  \n```\nenum agent_status;\n```  \n  \n### Remarks  \n For more information, see [Asynchronous Agents](../../../parallel/concrt/asynchronous-agents.md).  \n  \n##  <a name=\"agents_eventtype\"></a>  Agents_EventType Enumeration  \n The types of events that can be traced using the tracing functionality offered by the Agents Library  \n  \n```\nenum Agents_EventType;\n```  \n  \n##  <a name=\"concrt_eventtype\"></a>  ConcRT_EventType Enumeration  \n The types of events that can be traced using the tracing functionality offered by the Concurrency Runtime.  \n  \n```\nenum ConcRT_EventType;\n```  \n  \n##  <a name=\"concrt_traceflags\"></a>  Concrt_TraceFlags Enumeration  \n Trace flags for the event types  \n  \n```\nenum Concrt_TraceFlags;\n```  \n  \n##  <a name=\"criticalregiontype\"></a>  CriticalRegionType Enumeration  \n The type of critical region a context is inside.  \n  \n```\nenum CriticalRegionType;\n```  \n  \n##  <a name=\"dynamicprogressfeedbacktype\"></a>  DynamicProgressFeedbackType Enumeration  \n Used by the `DynamicProgressFeedback` policy to describe whether resources for the scheduler will be rebalanced according to statistical information gathered from the scheduler or only based on virtual processors going in and out of the idle state through calls to the `Activate` and `Deactivate` methods on the `IVirtualProcessorRoot` interface. For more information on available scheduler policies, see [PolicyElementKey Enumeration](concurrency-namespace-enums.md).  \n  \n```\nenum DynamicProgressFeedbackType;\n```  \n  \n##  <a name=\"join_type\"></a>  join_type Enumeration  \n The type of a `join` messaging block.  \n  \n```\nenum join_type;\n```  \n  \n##  <a name=\"message_status\"></a>  message_status Enumeration  \n The valid responses for an offer of a `message` object to a block.  \n  \n```\nenum message_status;\n```  \n  \n##  <a name=\"policyelementkey\"></a>  PolicyElementKey Enumeration  \n Policy keys describing aspects of scheduler behavior. Each policy element is described by a key-value pair. For more information about scheduler policies and their impact on schedulers, see [Task Scheduler](../../../parallel/concrt/task-scheduler-concurrency-runtime.md).  \n  \n```\nenum PolicyElementKey;\n```  \n  \n##  <a name=\"schedulertype\"></a>  SchedulerType Enumeration  \n Used by the `SchedulerKind` policy to describe the type of threads that the scheduler should utilize for underlying execution contexts. For more information on available scheduler policies, see [PolicyElementKey Enumeration](concurrency-namespace-enums.md).  \n  \n```\nenum SchedulerType;\n```  \n  \n##  <a name=\"schedulingprotocoltype\"></a>  SchedulingProtocolType Enumeration  \n Used by the `SchedulingProtocol` policy to describe which scheduling algorithm will be utilized for the scheduler. For more information on available scheduler policies, see [PolicyElementKey Enumeration](concurrency-namespace-enums.md).  \n  \n```\nenum SchedulingProtocolType;\n```  \n  \n##  <a name=\"switchingproxystate\"></a>  SwitchingProxyState Enumeration  \n Used to denote the state a thread proxy is in, when it is executing a cooperative context switch to a different thread proxy.  \n  \n```\nenum SwitchingProxyState;\n```  \n  \n### Remarks  \n A parameter of type `SwitchingProxyState` is passed in to the method `IThreadProxy::SwitchTo` to instruct the Resource Manager how to treat the thread proxy that is making the call.  \n  \n For more information on how this type is used, see [IThreadProxy::SwitchTo](ithreadproxy-structure.md#switchto).  \n  \n##  <a name=\"task_group_status\"></a>  task_group_status Enumeration  \n Describes the execution status of a `task_group` or `structured_task_group` object. A value of this type is returned by numerous methods that wait on tasks scheduled to a task group to complete.  \n  \n```\nenum task_group_status;\n```  \n  \n##  <a name=\"winrtinitializationtype\"></a>  WinRTInitializationType Enumeration  \n Used by the `WinRTInitialization` policy to describe whether and how the Windows Runtime will be initialized on scheduler threads for an application which runs on operating systems with version Windows 8 or higher. For more information on available scheduler policies, see [PolicyElementKey Enumeration](concurrency-namespace-enums.md).  \n  \n```\nenum WinRTInitializationType;\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}