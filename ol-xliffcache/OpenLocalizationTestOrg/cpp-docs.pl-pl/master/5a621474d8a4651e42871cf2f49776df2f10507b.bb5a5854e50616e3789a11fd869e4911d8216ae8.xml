{"nodes":[{"pos":[12,46],"content":"CControlBar Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CControlBar Class | Microsoft Docs","pos":[0,34]}]},{"content":"CControlBar Class","pos":[793,810]},{"pos":[811,1126],"content":"The base class for the control-bar classes <bpt id=\"p1\">[</bpt>CStatusBar<ept id=\"p1\">](../../mfc/reference/cstatusbar-class.md)</ept>, <bpt id=\"p2\">[</bpt>CToolBar<ept id=\"p2\">](../../mfc/reference/ctoolbar-class.md)</ept>, <bpt id=\"p3\">[</bpt>CDialogBar<ept id=\"p3\">](../../mfc/reference/cdialogbar-class.md)</ept>, <bpt id=\"p4\">[</bpt>CReBar<ept id=\"p4\">](../../mfc/reference/crebar-class.md)</ept>, and <bpt id=\"p5\">[</bpt>COleResizeBar<ept id=\"p5\">](../../mfc/reference/coleresizebar-class.md)</ept>.","source":"The base class for the control-bar classes [CStatusBar](../../mfc/reference/cstatusbar-class.md), [CToolBar](../../mfc/reference/ctoolbar-class.md), [CDialogBar](../../mfc/reference/cdialogbar-class.md), [CReBar](../../mfc/reference/crebar-class.md), and [COleResizeBar](../../mfc/reference/coleresizebar-class.md)."},{"content":"Syntax","pos":[1135,1141]},{"content":"Members","pos":[1199,1206]},{"content":"Protected Constructors","pos":[1216,1238]},{"content":"Name","pos":[1245,1249]},{"content":"Description","pos":[1250,1261]},{"content":"CControlBar::CControlBar","pos":[1300,1324]},{"pos":[1353,1387],"content":"Constructs a <ph id=\"ph1\">`CControlBar`</ph> object.","source":"Constructs a `CControlBar` object."},{"content":"Public Methods","pos":[1398,1412]},{"content":"Name","pos":[1419,1423]},{"content":"Description","pos":[1424,1435]},{"content":"CControlBar::CalcDynamicLayout","pos":[1474,1504]},{"pos":[1539,1648],"content":"Returns the size of a dynamic control bar as a <bpt id=\"p1\">[</bpt>CSize<ept id=\"p1\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.","source":"Returns the size of a dynamic control bar as a [CSize](../../atl-mfc-shared/reference/csize-class.md) object."},{"content":"CControlBar::CalcFixedLayout","pos":[1654,1682]},{"pos":[1715,1818],"content":"Returns the size of the control bar as a <bpt id=\"p1\">[</bpt>CSize<ept id=\"p1\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.","source":"Returns the size of the control bar as a [CSize](../../atl-mfc-shared/reference/csize-class.md) object."},{"content":"CControlBar::CalcInsideRect","pos":[1824,1851]},{"content":"Returns the current dimensions of the control bar area; including the borders.","pos":[1883,1961]},{"content":"CControlBar::DoPaint","pos":[1967,1987]},{"content":"Renders the borders and gripper of the control bar.","pos":[2012,2063]},{"content":"CControlBar::DrawBorders","pos":[2069,2093]},{"content":"Renders the borders of the control bar.","pos":[2122,2161]},{"content":"CControlBar::DrawGripper","pos":[2167,2191]},{"content":"Renders the gripper of the control bar.","pos":[2220,2259]},{"content":"CControlBar::EnableDocking","pos":[2265,2291]},{"content":"Allows a control bar to be docked or floating.","pos":[2322,2368]},{"content":"CControlBar::GetBarStyle","pos":[2374,2398]},{"content":"Retrieves the control bar style settings.","pos":[2427,2468]},{"content":"CControlBar::GetBorders","pos":[2474,2497]},{"content":"Retrieves the border values of the control bar.","pos":[2525,2572]},{"content":"CControlBar::GetCount","pos":[2578,2599]},{"pos":[2625,2687],"content":"Returns the number of non- <ph id=\"ph1\">`HWND`</ph> elements in the control bar.","source":"Returns the number of non- `HWND` elements in the control bar."},{"content":"CControlBar::GetDockingFrame","pos":[2693,2721]},{"content":"Returns a pointer to the frame to which a control bar is docked.","pos":[2754,2818]},{"content":"CControlBar::IsFloating","pos":[2824,2847]},{"content":"Returns a nonzero value if the control bar in question is a floating control bar.","pos":[2875,2956]},{"content":"CControlBar::OnUpdateCmdUI","pos":[2962,2988]},{"content":"Calls the Command UI handlers.","pos":[3019,3049]},{"content":"CControlBar::SetBarStyle","pos":[3055,3079]},{"content":"Modifies the control bar style settings.","pos":[3108,3148]},{"content":"CControlBar::SetBorders","pos":[3154,3177]},{"content":"Sets the border values of the control bar.","pos":[3205,3247]},{"content":"CControlBar::SetInPlaceOwner","pos":[3253,3281]},{"content":"Changes the in-place owner of a control bar.","pos":[3314,3358]},{"content":"Public Data Members","pos":[3369,3388]},{"content":"Name","pos":[3395,3399]},{"content":"Description","pos":[3400,3411]},{"content":"CControlBar::m_bAutoDelete","pos":[3450,3476]},{"pos":[3507,3597],"content":"If nonzero, the <ph id=\"ph1\">`CControlBar`</ph> object is deleted when the Windows control bar is destroyed.","source":"If nonzero, the `CControlBar` object is deleted when the Windows control bar is destroyed."},{"content":"CControlBar::m_pInPlaceOwner","pos":[3603,3631]},{"content":"The in-place owner of the control bar.","pos":[3664,3702]},{"content":"Remarks","pos":[3712,3719]},{"content":"A control bar is a window that is usually aligned to the left or right of a frame window.","pos":[3723,3812]},{"content":"It may contain child items that are either <ph id=\"ph1\">`HWND`</ph>-based controls, which are windows that generate and respond to Windows messages, or non- <ph id=\"ph2\">`HWND`</ph>-based items, which are not windows and are managed by application code or framework code.","pos":[3813,4048],"source":" It may contain child items that are either `HWND`-based controls, which are windows that generate and respond to Windows messages, or non- `HWND`-based items, which are not windows and are managed by application code or framework code."},{"content":"List boxes and edit controls are examples of <ph id=\"ph1\">`HWND`</ph>-based controls; status-bar panes and bitmap buttons are examples of non- <ph id=\"ph2\">`HWND`</ph>-based controls.","pos":[4049,4196],"source":" List boxes and edit controls are examples of `HWND`-based controls; status-bar panes and bitmap buttons are examples of non- `HWND`-based controls."},{"content":"Control-bar windows are usually child windows of a parent frame window and are usually siblings to the client view or MDI client of the frame window.","pos":[4203,4352]},{"content":"A <ph id=\"ph1\">`CControlBar`</ph> object uses information about the parent window's client rectangle to position itself.","pos":[4353,4455],"source":" A `CControlBar` object uses information about the parent window's client rectangle to position itself."},{"content":"It then informs the parent window as to how much space remains unallocated in the parent window's client area.","pos":[4456,4566]},{"pos":[4573,4616],"content":"For more information on <ph id=\"ph1\">`CControlBar`</ph>, see:","source":"For more information on `CControlBar`, see:"},{"content":"Control Bars","pos":[4625,4637]},{"pos":[4673,4740],"content":"<bpt id=\"p1\">[</bpt>Technical Note 31: Control Bars<ept id=\"p1\">](../../mfc/tn031-control-bars.md)</ept>.","source":"[Technical Note 31: Control Bars](../../mfc/tn031-control-bars.md)."},{"content":"Knowledge Base article Q242577 : PRB: Update Command UI Handlers Do Not Work for Menu Attached to a Dialog Box","pos":[4750,4860]},{"content":"Inheritance Hierarchy","pos":[4869,4890]},{"content":"CObject","pos":[4895,4902]},{"content":"CCmdTarget","pos":[4949,4959]},{"content":"CWnd","pos":[5009,5013]},{"content":"Requirements","pos":[5078,5090]},{"pos":[5094,5114],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxext.h","source":"**Header:** afxext.h"},{"pos":[5171,5201],"content":"CControlBar::CalcDynamicLayout"},{"content":"The framework calls this member function to calculate the dimensions of a dynamic toolbar.","pos":[5205,5295]},{"content":"Parameters","pos":[5390,5400]},{"content":"The requested dimension of the control bar, either horizontal or vertical, depending on <ph id=\"ph1\">`dwMode`</ph>.","pos":[5417,5514],"source":" The requested dimension of the control bar, either horizontal or vertical, depending on `dwMode`."},{"content":"The following predefined flags are used to determine the height and width of the dynamic control bar.","pos":[5532,5633]},{"content":"Use the bitwise-OR (&amp;#124;) operator to combine the flags.","pos":[5634,5692],"source":" Use the bitwise-OR (&#124;) operator to combine the flags."},{"content":"Layout mode flags","pos":[5699,5716]},{"content":"What it means","pos":[5717,5730]},{"content":"Indicates whether the control bar should be stretched to the size of the frame.","pos":[5796,5875]},{"content":"Set if the bar is not a docking bar (not available for docking).","pos":[5876,5940]},{"content":"Not set when the bar is docked or floating (available for docking).","pos":[5941,6008]},{"content":"If set, <ph id=\"ph1\">`LM_STRETCH`</ph> ignores <ph id=\"ph2\">`nLength`</ph> and returns dimensions based on the <ph id=\"ph3\">`LM_HORZ`</ph> state.","pos":[6009,6100],"source":" If set, `LM_STRETCH` ignores `nLength` and returns dimensions based on the `LM_HORZ` state."},{"content":"works similarly to the <ph id=\"ph1\">`bStretch`</ph> parameter used in <bpt id=\"p1\">[</bpt>CalcFixedLayout<ept id=\"p1\">](#ccontrolbar__calcfixedlayout)</ept>; see that member function for more information about the relationship between stretching and orientation.","pos":[6114,6320],"source":" works similarly to the `bStretch` parameter used in [CalcFixedLayout](#ccontrolbar__calcfixedlayout); see that member function for more information about the relationship between stretching and orientation."},{"content":"Indicates that the bar is horizontally or vertically oriented.","pos":[6335,6397]},{"content":"Set if the bar is horizontally oriented, and if it is vertically oriented, it is not set.","pos":[6398,6487]},{"content":"works similarly to the <ph id=\"ph1\">`bHorz`</ph> parameter used in <bpt id=\"p1\">[</bpt>CalcFixedLayout<ept id=\"p1\">](#ccontrolbar__calcfixedlayout)</ept>; see that member function for more information about the relationship between stretching and orientation.","pos":[6498,6701],"source":" works similarly to the `bHorz` parameter used in [CalcFixedLayout](#ccontrolbar__calcfixedlayout); see that member function for more information about the relationship between stretching and orientation."},{"content":"LM_MRUWIDTH","pos":[6708,6719]},{"content":"Most Recently Used Dynamic Width.","pos":[6722,6755]},{"content":"Ignores <ph id=\"ph1\">`nLength`</ph> parameter and uses the remembered most recently used width.","pos":[6756,6833],"source":" Ignores `nLength` parameter and uses the remembered most recently used width."},{"content":"Horizontal Docked Dimensions.","pos":[6852,6881]},{"content":"Ignores <ph id=\"ph1\">`nLength`</ph> parameter and returns the dynamic size with the largest width.","pos":[6882,6962],"source":" Ignores `nLength` parameter and returns the dynamic size with the largest width."},{"content":"Vertical Docked Dimensions.","pos":[6981,7008]},{"content":"Ignores <ph id=\"ph1\">`nLength`</ph> parameter and returns the dynamic size with the largest height.","pos":[7009,7090],"source":" Ignores `nLength` parameter and returns the dynamic size with the largest height."},{"pos":[7108,7173],"content":"Set if <ph id=\"ph1\">`nLength`</ph> indicates height (Y-direction) instead of width.","source":"Set if `nLength` indicates height (Y-direction) instead of width."},{"pos":[7190,7254],"content":"Resets <bpt id=\"p1\">**</bpt>LM_MRUWIDTH<ept id=\"p1\">**</ept> to current width of floating control bar.","source":"Resets **LM_MRUWIDTH** to current width of floating control bar."},{"content":"Return Value","pos":[7265,7277]},{"pos":[7281,7381],"content":"The control bar size, in pixels, of a <bpt id=\"p1\">[</bpt>CSize<ept id=\"p1\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.","source":"The control bar size, in pixels, of a [CSize](../../atl-mfc-shared/reference/csize-class.md) object."},{"content":"Remarks","pos":[7391,7398]},{"content":"Override this member function to provide your own dynamic layout in classes you derive from <ph id=\"ph1\">`CControlBar`</ph>.","pos":[7402,7508],"source":"Override this member function to provide your own dynamic layout in classes you derive from `CControlBar`."},{"content":"MFC classes derived from <ph id=\"ph1\">`CControlBar`</ph>, such as <bpt id=\"p1\">[</bpt>CToolbar<ept id=\"p1\">](../../mfc/reference/ctoolbar-class.md)</ept>, override this member function and provide their own implementation.","pos":[7509,7675],"source":" MFC classes derived from `CControlBar`, such as [CToolbar](../../mfc/reference/ctoolbar-class.md), override this member function and provide their own implementation."},{"pos":[7730,7758],"content":"CControlBar::CalcFixedLayout"},{"content":"Call this member function to calculate the horizontal size of a control bar.","pos":[7762,7838]},{"content":"Parameters","pos":[7932,7942]},{"content":"Indicates whether the bar should be stretched to the size of the frame.","pos":[7960,8031]},{"content":"The <ph id=\"ph1\">`bStretch`</ph> parameter is nonzero when the bar is not a docking bar (not available for docking) and is 0 when it is docked or floating (available for docking).","pos":[8032,8193],"source":" The `bStretch` parameter is nonzero when the bar is not a docking bar (not available for docking) and is 0 when it is docked or floating (available for docking)."},{"content":"Indicates that the bar is horizontally or vertically oriented.","pos":[8211,8273]},{"content":"The <ph id=\"ph1\">`bHorz`</ph> parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented.","pos":[8274,8381],"source":" The `bHorz` parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented."},{"content":"Return Value","pos":[8391,8403]},{"pos":[8407,8460],"content":"The control bar size, in pixels, of a <ph id=\"ph1\">`CSize`</ph> object.","source":"The control bar size, in pixels, of a `CSize` object."},{"content":"Remarks","pos":[8470,8477]},{"content":"Control bars such as toolbars can stretch horizontally or vertically to accommodate the buttons contained in the control bar.","pos":[8481,8606]},{"content":"If <ph id=\"ph1\">`bStretch`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, stretch the dimension along the orientation provided by <ph id=\"ph2\">`bHorz`</ph>.","pos":[8613,8704],"source":"If `bStretch` is **TRUE**, stretch the dimension along the orientation provided by `bHorz`."},{"content":"In other words, if <ph id=\"ph1\">`bHorz`</ph> is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, the control bar is stretched vertically.","pos":[8705,8786],"source":" In other words, if `bHorz` is **FALSE**, the control bar is stretched vertically."},{"content":"If <ph id=\"ph1\">`bStretch`</ph> is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, no stretch occurs.","pos":[8787,8833],"source":" If `bStretch` is **FALSE**, no stretch occurs."},{"content":"The following table shows the possible permutations, and resulting control-bar styles, of <ph id=\"ph1\">`bStretch`</ph> and <ph id=\"ph2\">`bHorz`</ph>.","pos":[8834,8947],"source":" The following table shows the possible permutations, and resulting control-bar styles, of `bStretch` and `bHorz`."},{"content":"bStretch","pos":[8954,8962]},{"content":"bHorz","pos":[8963,8968]},{"content":"Stretching","pos":[8969,8979]},{"content":"Orientation","pos":[8980,8991]},{"content":"Docking/Not docking","pos":[8992,9011]},{"content":"TRUE","pos":[9111,9115]},{"content":"TRUE","pos":[9120,9124]},{"content":"Horizontal stretching","pos":[9127,9148]},{"content":"Horizontally oriented","pos":[9149,9170]},{"content":"Not docking","pos":[9171,9182]},{"content":"TRUE","pos":[9189,9193]},{"content":"FALSE","pos":[9198,9203]},{"content":"Vertical stretching","pos":[9206,9225]},{"content":"Vertically oriented","pos":[9226,9245]},{"content":"Not docking","pos":[9246,9257]},{"content":"FALSE","pos":[9264,9269]},{"content":"TRUE","pos":[9274,9278]},{"content":"No stretching available","pos":[9281,9304]},{"content":"Horizontally oriented","pos":[9305,9326]},{"content":"Docking","pos":[9327,9334]},{"content":"FALSE","pos":[9341,9346]},{"content":"FALSE","pos":[9351,9356]},{"content":"No stretching available","pos":[9359,9382]},{"content":"Vertically oriented","pos":[9383,9402]},{"content":"Docking","pos":[9403,9410]},{"pos":[9465,9492],"content":"CControlBar::CalcInsideRect"},{"content":"The framework calls this function to calculate the client area of the control bar.","pos":[9496,9578]},{"content":"Parameters","pos":[9677,9687]},{"content":"Contains the current dimensions of the control bar; including the borders.","pos":[9701,9775]},{"content":"Indicates that the bar is horizontally or vertically oriented.","pos":[9793,9855]},{"content":"The <ph id=\"ph1\">`bHorz`</ph> parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented.","pos":[9856,9963],"source":" The `bHorz` parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented."},{"content":"Remarks","pos":[9973,9980]},{"content":"This function is called before the control bar is painted.","pos":[9984,10042]},{"content":"Override this function to customize the rendering of the borders and gripper bar of the control bar.","pos":[10049,10149]},{"pos":[10200,10224],"content":"CControlBar::CControlBar"},{"pos":[10228,10262],"content":"Constructs a <ph id=\"ph1\">`CControlBar`</ph> object.","source":"Constructs a `CControlBar` object."},{"pos":[10339,10359],"content":"CControlBar::DoPaint"},{"content":"Called by the framework to render the borders and gripper bar of the control bar.","pos":[10363,10444]},{"content":"Parameters","pos":[10501,10511]},{"content":"Points to the device context to be used for rendering the borders and gripper of the control bar.","pos":[10524,10621]},{"content":"Remarks","pos":[10631,10638]},{"content":"Override this function to customize the drawing behavior of the control bar.","pos":[10642,10718]},{"content":"Another customization method is to override the <ph id=\"ph1\">`DrawBorders`</ph> and <ph id=\"ph2\">`DrawGripper`</ph> functions and add custom drawing code for the borders and gripper.","pos":[10725,10871],"source":"Another customization method is to override the `DrawBorders` and `DrawGripper` functions and add custom drawing code for the borders and gripper."},{"content":"Because these methods are called by the default <ph id=\"ph1\">`DoPaint`</ph> method, an override of <ph id=\"ph2\">`DoPaint`</ph> is not needed.","pos":[10872,10977],"source":" Because these methods are called by the default `DoPaint` method, an override of `DoPaint` is not needed."},{"pos":[11028,11052],"content":"CControlBar::DrawBorders"},{"content":"Called by the framework to render the borders of the control bar.","pos":[11056,11121]},{"content":"Parameters","pos":[11206,11216]},{"content":"Points to the device context to be used for rendering the borders of the control bar.","pos":[11229,11314]},{"content":"A <ph id=\"ph1\">`CRect`</ph> object containing the dimensions of the control bar.","pos":[11331,11393],"source":" A `CRect` object containing the dimensions of the control bar."},{"content":"Remarks","pos":[11403,11410]},{"content":"Override this function to customize the appearance of the control bar borders.","pos":[11414,11492]},{"pos":[11543,11567],"content":"CControlBar::DrawGripper"},{"content":"Called by the framework to render the gripper of the control bar.","pos":[11571,11636]},{"content":"Parameters","pos":[11727,11737]},{"content":"Points to the device context to be used for rendering the control bar gripper.","pos":[11750,11828]},{"content":"A <ph id=\"ph1\">`CRect`</ph> object containing the dimensions of the control bar gripper.","pos":[11845,11915],"source":" A `CRect` object containing the dimensions of the control bar gripper."},{"content":"Remarks","pos":[11925,11932]},{"content":"Override this function to customize the appearance of the control bar gripper.","pos":[11936,12014]},{"pos":[12067,12093],"content":"CControlBar::EnableDocking"},{"content":"Call this function to enable a control bar to be docked.","pos":[12097,12153]},{"content":"Parameters","pos":[12217,12227]},{"content":"Specifies whether the control bar supports docking and the sides of its parent window to which the control bar can be docked, if supported.","pos":[12248,12387]},{"content":"Can be one or more of the following:","pos":[12388,12424]},{"pos":[12449,12494],"content":"Allows docking at the top of the client area."},{"pos":[12522,12570],"content":"Allows docking at the bottom of the client area."},{"pos":[12596,12647],"content":"Allows docking on the left side of the client area."},{"pos":[12674,12726],"content":"Allows docking on the right side of the client area."},{"pos":[12751,12797],"content":"Allows docking on any side of the client area."},{"pos":[12824,12897],"content":"Allows multiple control bars to be floated in a single mini-frame window."},{"content":"If 0 (that is, indicating no flags), the control bar will not dock.","pos":[12904,12971]},{"content":"Remarks","pos":[12981,12988]},{"content":"The sides specified must match one of the sides enabled for docking in the destination frame window, or the control bar cannot be docked to that frame window.","pos":[12992,13150]},{"pos":[13201,13225],"content":"CControlBar::GetBarStyle"},{"pos":[13229,13345],"content":"Call this function to determine which <bpt id=\"p1\">**</bpt>CBRS_<ept id=\"p1\">**</ept> (control bar styles) settings are currently set for the control bar.","source":"Call this function to determine which **CBRS_** (control bar styles) settings are currently set for the control bar."},{"content":"Return Value","pos":[13391,13403]},{"content":"The current <bpt id=\"p1\">**</bpt>CBRS_<ept id=\"p1\">**</ept> (control bar styles) settings for the control bar.","pos":[13407,13479],"source":"The current **CBRS_** (control bar styles) settings for the control bar."},{"content":"See <bpt id=\"p1\">[</bpt>CControlBar::SetBarStyle<ept id=\"p1\">](#ccontrolbar__setbarstyle)</ept> for the complete list of available styles.","pos":[13480,13580],"source":" See [CControlBar::SetBarStyle](#ccontrolbar__setbarstyle) for the complete list of available styles."},{"content":"Remarks","pos":[13590,13597]},{"pos":[13601,13647],"content":"Does not handle <bpt id=\"p1\">**</bpt>WS_<ept id=\"p1\">**</ept> (window style) styles.","source":"Does not handle **WS_** (window style) styles."},{"pos":[13697,13720],"content":"CControlBar::GetBorders"},{"content":"Returns the current border values for the control bar.","pos":[13724,13778]},{"content":"Return Value","pos":[13832,13844]},{"content":"A <ph id=\"ph1\">`CRect`</ph> object that contains the current width (in pixels) of each side of the control bar object.","pos":[13848,13948],"source":"A `CRect` object that contains the current width (in pixels) of each side of the control bar object."},{"content":"For example, the value of the <ph id=\"ph1\">`left`</ph> member, of <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object, is the width of the left hand border.","pos":[13949,14097],"source":" For example, the value of the `left` member, of [CRect](../../atl-mfc-shared/reference/crect-class.md) object, is the width of the left hand border."},{"pos":[14145,14166],"content":"CControlBar::GetCount"},{"pos":[14170,14238],"content":"Returns the number of non- <ph id=\"ph1\">`HWND`</ph> items on the <ph id=\"ph2\">`CControlBar`</ph> object.","source":"Returns the number of non- `HWND` items on the `CControlBar` object."},{"content":"Return Value","pos":[14288,14300]},{"content":"The number of non- <ph id=\"ph1\">`HWND`</ph> items on the <ph id=\"ph2\">`CControlBar`</ph> object.","pos":[14304,14364],"source":"The number of non- `HWND` items on the `CControlBar` object."},{"content":"This function returns 0 for a <bpt id=\"p1\">[</bpt>CDialogBar<ept id=\"p1\">](../../mfc/reference/cdialogbar-class.md)</ept> object.","pos":[14365,14456],"source":" This function returns 0 for a [CDialogBar](../../mfc/reference/cdialogbar-class.md) object."},{"content":"Remarks","pos":[14466,14473]},{"pos":[14477,14691],"content":"The type of the item depends on the derived object: panes for <bpt id=\"p1\">[</bpt>CStatusBar<ept id=\"p1\">](../../mfc/reference/cstatusbar-class.md)</ept> objects, and buttons and separators for <bpt id=\"p2\">[</bpt>CToolBar<ept id=\"p2\">](../../mfc/reference/ctoolbar-class.md)</ept> objects.","source":"The type of the item depends on the derived object: panes for [CStatusBar](../../mfc/reference/cstatusbar-class.md) objects, and buttons and separators for [CToolBar](../../mfc/reference/ctoolbar-class.md) objects."},{"pos":[14746,14774],"content":"CControlBar::GetDockingFrame"},{"content":"Call this member function to obtain a pointer to the current frame window to which your control bar is docked.","pos":[14778,14888]},{"content":"Return Value","pos":[14952,14964]},{"pos":[14968,15030],"content":"A pointer to a frame window if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A pointer to a frame window if successful; otherwise **NULL**."},{"pos":[15037,15241],"content":"If the control bar is not docked to a frame window (that is, if the control bar is floating), this function will return a pointer to its parent <bpt id=\"p1\">[</bpt>CMiniFrameWnd<ept id=\"p1\">](../../mfc/reference/cminiframewnd-class.md)</ept>.","source":"If the control bar is not docked to a frame window (that is, if the control bar is floating), this function will return a pointer to its parent [CMiniFrameWnd](../../mfc/reference/cminiframewnd-class.md)."},{"content":"Remarks","pos":[15251,15258]},{"pos":[15262,15472],"content":"For more information about dockable control bars, see <bpt id=\"p1\">[</bpt>CControlBar::EnableDocking<ept id=\"p1\">](#ccontrolbar__enabledocking)</ept> and <bpt id=\"p2\">[</bpt>CFrameWnd::DockControlBar<ept id=\"p2\">](../../mfc/reference/cframewnd-class.md#cframewnd__dockcontrolbar)</ept>.","source":"For more information about dockable control bars, see [CControlBar::EnableDocking](#ccontrolbar__enabledocking) and [CFrameWnd::DockControlBar](../../mfc/reference/cframewnd-class.md#cframewnd__dockcontrolbar)."},{"pos":[15522,15545],"content":"CControlBar::IsFloating"},{"content":"Call this member function to determine whether the control bar is floating or docked.","pos":[15549,15634]},{"content":"Return Value","pos":[15687,15699]},{"content":"Nonzero if the control bar is floating; otherwise 0.","pos":[15703,15755]},{"content":"Remarks","pos":[15765,15772]},{"pos":[15776,15939],"content":"To change the state of a control bar from docked to floating, call <bpt id=\"p1\">[</bpt>CFrameWnd::FloatControlBar<ept id=\"p1\">](../../mfc/reference/cframewnd-class.md#cframewnd__floatcontrolbar)</ept>.","source":"To change the state of a control bar from docked to floating, call [CFrameWnd::FloatControlBar](../../mfc/reference/cframewnd-class.md#cframewnd__floatcontrolbar)."},{"pos":[15992,16018],"content":"CControlBar::m_bAutoDelete"},{"pos":[16022,16112],"content":"If nonzero, the <ph id=\"ph1\">`CControlBar`</ph> object is deleted when the Windows control bar is destroyed.","source":"If nonzero, the `CControlBar` object is deleted when the Windows control bar is destroyed."},{"content":"Remarks","pos":[16159,16166]},{"pos":[16186,16224],"content":"is a public variable of type <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>.","source":" is a public variable of type **BOOL**."},{"content":"A control-bar object is usually embedded in a frame-window object.","pos":[16231,16297]},{"content":"In this case, <ph id=\"ph1\">`m_bAutoDelete`</ph> is 0 because the embedded control-bar object is destroyed when the frame window is destroyed.","pos":[16298,16421],"source":" In this case, `m_bAutoDelete` is 0 because the embedded control-bar object is destroyed when the frame window is destroyed."},{"pos":[16428,16555],"content":"Set this variable to a nonzero value if you allocate a <ph id=\"ph1\">`CControlBar`</ph> object on the heap and you do not plan to call <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept>.","source":"Set this variable to a nonzero value if you allocate a `CControlBar` object on the heap and you do not plan to call **delete**."},{"pos":[16610,16638],"content":"CControlBar::m_pInPlaceOwner"},{"content":"The in-place owner of the control bar.","pos":[16642,16680]},{"pos":[16773,16799],"content":"CControlBar::OnUpdateCmdUI"},{"content":"This member function is called by the framework to update the status of the toolbar or status bar.","pos":[16803,16901]},{"content":"Parameters","pos":[17016,17026]},{"content":"Points to the main frame window of the application.","pos":[17043,17094]},{"content":"This pointer is used for routing update messages.","pos":[17095,17144]},{"content":"Flag that indicates whether a control that has no update handler should be automatically displayed as disabled.","pos":[17175,17286]},{"content":"Remarks","pos":[17296,17303]},{"content":"To update an individual button or pane, use the <ph id=\"ph1\">`ON_UPDATE_COMMAND_UI`</ph> macro in your message map to set an update handler appropriately.","pos":[17307,17443],"source":"To update an individual button or pane, use the `ON_UPDATE_COMMAND_UI` macro in your message map to set an update handler appropriately."},{"content":"See <bpt id=\"p1\">[</bpt>ON_UPDATE_COMMAND_UI<ept id=\"p1\">](http://msdn.microsoft.com/library/c4de3c21-2d2e-4b89-a4ce-d0c0e2d9edc4)</ept> for more information about using this macro.","pos":[17444,17587],"source":" See [ON_UPDATE_COMMAND_UI](http://msdn.microsoft.com/library/c4de3c21-2d2e-4b89-a4ce-d0c0e2d9edc4) for more information about using this macro."},{"content":"is called by the framework when the application is idle.","pos":[17610,17666]},{"content":"The frame window to be updated must be a child window, at least indirectly, of a visible frame window.","pos":[17667,17769]},{"content":"is an advanced overridable.","pos":[17786,17813]},{"pos":[17864,17888],"content":"CControlBar::SetBarStyle"},{"pos":[17892,17967],"content":"Call this function to set the desired <bpt id=\"p1\">**</bpt>CBRS_<ept id=\"p1\">**</ept> styles for the control bar.","source":"Call this function to set the desired **CBRS_** styles for the control bar."},{"content":"Parameters","pos":[18025,18035]},{"content":"The desired styles for the control bar.","pos":[18052,18091]},{"content":"Can be one or more of the following:","pos":[18092,18128]},{"pos":[18153,18237],"content":"Allows the control bar to be docked to the top of the client area of a frame window."},{"pos":[18265,18352],"content":"Allows the control bar to be docked to the bottom of the client area of a frame window."},{"pos":[18378,18468],"content":"Allows the control bar to be docked to the left side of the client area of a frame window."},{"pos":[18495,18586],"content":"Allows the control bar to be docked to the right side of the client area of a frame window."},{"pos":[18611,18696],"content":"Allows the control bar to be docked to any side of the client area of a frame window."},{"pos":[18722,18810],"content":"Causes a border to be drawn on the top edge of the control bar when it would be visible."},{"pos":[18839,18930],"content":"Causes a border to be drawn on the bottom edge of the control bar when it would be visible."},{"pos":[18957,19046],"content":"Causes a border to be drawn on the left edge of the control bar when it would be visible."},{"pos":[19074,19164],"content":"Causes a border to be drawn on the right edge of the control bar when it would be visible."},{"pos":[19191,19264],"content":"Allows multiple control bars to be floated in a single mini-frame window."},{"pos":[19288,19341],"content":"Causes tool tips to be displayed for the control bar."},{"pos":[19362,19426],"content":"Causes message text to be updated at the same time as tool tips."},{"pos":[19434,19571],"content":"<bpt id=\"p1\">**</bpt>CBRS_GRIPPER<ept id=\"p1\">**</ept> Causes a gripper, similar to that used on bands in a <bpt id=\"p2\">**</bpt>CReBar<ept id=\"p2\">**</ept> object, to be drawn for any <ph id=\"ph1\">`CControlBar`</ph>-derived class.","source":"**CBRS_GRIPPER** Causes a gripper, similar to that used on bands in a **CReBar** object, to be drawn for any `CControlBar`-derived class."},{"content":"Remarks","pos":[19581,19588]},{"pos":[19592,19644],"content":"Does not affect the <bpt id=\"p1\">**</bpt>WS_<ept id=\"p1\">**</ept> (window style) settings.","source":"Does not affect the **WS_** (window style) settings."},{"pos":[19694,19717],"content":"CControlBar::SetBorders"},{"content":"Call this function to set the size of the control bar's borders.","pos":[19721,19785]},{"content":"Parameters","pos":[19957,19967]},{"content":"cxLeft","pos":[19972,19978]},{"content":"The width (in pixels) of the control bar's left border.","pos":[19983,20038]},{"content":"cyTop","pos":[20046,20051]},{"content":"The height (in pixels) of the control bar's top border.","pos":[20056,20111]},{"content":"cxRight","pos":[20119,20126]},{"content":"The width (in pixels) of the control bar's right border.","pos":[20131,20187]},{"content":"cyBottom","pos":[20195,20203]},{"content":"The height (in pixels) of the control bar's bottom border.","pos":[20208,20266]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that contains the current width (in pixels)of each border of the control bar object.","pos":[20285,20446],"source":" A pointer to a [CRect](../../atl-mfc-shared/reference/crect-class.md) object that contains the current width (in pixels)of each border of the control bar object."},{"content":"Example","pos":[20456,20463]},{"content":"The following code example sets the top and bottom borders of the control bar to 5 pixels, and the left and right borders to 2 pixels:","pos":[20467,20601]},{"pos":[20619,20647],"content":"NVC_MFCControlLadenDialog#61"},{"pos":[20755,20783],"content":"CControlBar::SetInPlaceOwner"},{"content":"Changes the in-place owner of a control bar.","pos":[20787,20831]},{"content":"Parameters","pos":[20890,20900]},{"content":"A pointer to a <ph id=\"ph1\">`CWnd`</ph> object.","pos":[20914,20943],"source":" A pointer to a `CWnd` object."},{"content":"Remarks","pos":[20953,20960]},{"content":"See Also","pos":[20969,20977]},{"content":"MFC Sample CTRLBARS","pos":[20982,21001]},{"content":"CWnd Class","pos":[21037,21047]},{"content":"Hierarchy Chart","pos":[21089,21104]},{"content":"CToolBar Class","pos":[21141,21155]},{"content":"CDialogBar Class","pos":[21201,21217]},{"content":"CStatusBar Class","pos":[21265,21281]},{"content":"CReBar Class","pos":[21329,21341]}],"content":"---\ntitle: \"CControlBar Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CControlBar\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CControlBar class\"\n  - \"OLE resize bars\"\n  - \"OLE resize bars, base class\"\n  - \"dialog bars, base class\"\n  - \"toolbars [C++], base class\"\n  - \"control bars [C++], base class\"\n  - \"status bars, base class\"\nms.assetid: 4d668c55-9b42-4838-97ac-cf2b3000b82c\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CControlBar Class\nThe base class for the control-bar classes [CStatusBar](../../mfc/reference/cstatusbar-class.md), [CToolBar](../../mfc/reference/ctoolbar-class.md), [CDialogBar](../../mfc/reference/cdialogbar-class.md), [CReBar](../../mfc/reference/crebar-class.md), and [COleResizeBar](../../mfc/reference/coleresizebar-class.md).  \n  \n## Syntax  \n  \n```  \nclass CControlBar : public CWnd  \n```  \n  \n## Members  \n  \n### Protected Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CControlBar::CControlBar](#ccontrolbar__ccontrolbar)|Constructs a `CControlBar` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CControlBar::CalcDynamicLayout](#ccontrolbar__calcdynamiclayout)|Returns the size of a dynamic control bar as a [CSize](../../atl-mfc-shared/reference/csize-class.md) object.|  \n|[CControlBar::CalcFixedLayout](#ccontrolbar__calcfixedlayout)|Returns the size of the control bar as a [CSize](../../atl-mfc-shared/reference/csize-class.md) object.|  \n|[CControlBar::CalcInsideRect](#ccontrolbar__calcinsiderect)|Returns the current dimensions of the control bar area; including the borders.|  \n|[CControlBar::DoPaint](#ccontrolbar__dopaint)|Renders the borders and gripper of the control bar.|  \n|[CControlBar::DrawBorders](#ccontrolbar__drawborders)|Renders the borders of the control bar.|  \n|[CControlBar::DrawGripper](#ccontrolbar__drawgripper)|Renders the gripper of the control bar.|  \n|[CControlBar::EnableDocking](#ccontrolbar__enabledocking)|Allows a control bar to be docked or floating.|  \n|[CControlBar::GetBarStyle](#ccontrolbar__getbarstyle)|Retrieves the control bar style settings.|  \n|[CControlBar::GetBorders](#ccontrolbar__getborders)|Retrieves the border values of the control bar.|  \n|[CControlBar::GetCount](#ccontrolbar__getcount)|Returns the number of non- `HWND` elements in the control bar.|  \n|[CControlBar::GetDockingFrame](#ccontrolbar__getdockingframe)|Returns a pointer to the frame to which a control bar is docked.|  \n|[CControlBar::IsFloating](#ccontrolbar__isfloating)|Returns a nonzero value if the control bar in question is a floating control bar.|  \n|[CControlBar::OnUpdateCmdUI](#ccontrolbar__onupdatecmdui)|Calls the Command UI handlers.|  \n|[CControlBar::SetBarStyle](#ccontrolbar__setbarstyle)|Modifies the control bar style settings.|  \n|[CControlBar::SetBorders](#ccontrolbar__setborders)|Sets the border values of the control bar.|  \n|[CControlBar::SetInPlaceOwner](#ccontrolbar__setinplaceowner)|Changes the in-place owner of a control bar.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CControlBar::m_bAutoDelete](#ccontrolbar__m_bautodelete)|If nonzero, the `CControlBar` object is deleted when the Windows control bar is destroyed.|  \n|[CControlBar::m_pInPlaceOwner](#ccontrolbar__m_pinplaceowner)|The in-place owner of the control bar.|  \n  \n## Remarks  \n A control bar is a window that is usually aligned to the left or right of a frame window. It may contain child items that are either `HWND`-based controls, which are windows that generate and respond to Windows messages, or non- `HWND`-based items, which are not windows and are managed by application code or framework code. List boxes and edit controls are examples of `HWND`-based controls; status-bar panes and bitmap buttons are examples of non- `HWND`-based controls.  \n  \n Control-bar windows are usually child windows of a parent frame window and are usually siblings to the client view or MDI client of the frame window. A `CControlBar` object uses information about the parent window's client rectangle to position itself. It then informs the parent window as to how much space remains unallocated in the parent window's client area.  \n  \n For more information on `CControlBar`, see:  \n  \n- [Control Bars](../../mfc/control-bars.md)  \n  \n- [Technical Note 31: Control Bars](../../mfc/tn031-control-bars.md).  \n  \n-   Knowledge Base article Q242577 : PRB: Update Command UI Handlers Do Not Work for Menu Attached to a Dialog Box  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CControlBar`  \n  \n## Requirements  \n **Header:** afxext.h  \n  \n##  <a name=\"ccontrolbar__calcdynamiclayout\"></a>  CControlBar::CalcDynamicLayout  \n The framework calls this member function to calculate the dimensions of a dynamic toolbar.  \n  \n```  \nvirtual CSize CalcDynamicLayout(\n    int nLength,  \n    DWORD nMode);\n```  \n  \n### Parameters  \n `nLength`  \n The requested dimension of the control bar, either horizontal or vertical, depending on `dwMode`.  \n  \n `nMode`  \n The following predefined flags are used to determine the height and width of the dynamic control bar. Use the bitwise-OR (&#124;) operator to combine the flags.  \n  \n|Layout mode flags|What it means|  \n|-----------------------|-------------------|  \n|`LM_STRETCH`|Indicates whether the control bar should be stretched to the size of the frame. Set if the bar is not a docking bar (not available for docking). Not set when the bar is docked or floating (available for docking). If set, `LM_STRETCH` ignores `nLength` and returns dimensions based on the `LM_HORZ` state. `LM_STRETCH` works similarly to the `bStretch` parameter used in [CalcFixedLayout](#ccontrolbar__calcfixedlayout); see that member function for more information about the relationship between stretching and orientation.|  \n|`LM_HORZ`|Indicates that the bar is horizontally or vertically oriented. Set if the bar is horizontally oriented, and if it is vertically oriented, it is not set. `LM_HORZ` works similarly to the `bHorz` parameter used in [CalcFixedLayout](#ccontrolbar__calcfixedlayout); see that member function for more information about the relationship between stretching and orientation.|  \n|**LM_MRUWIDTH**|Most Recently Used Dynamic Width. Ignores `nLength` parameter and uses the remembered most recently used width.|  \n|`LM_HORZDOCK`|Horizontal Docked Dimensions. Ignores `nLength` parameter and returns the dynamic size with the largest width.|  \n|`LM_VERTDOCK`|Vertical Docked Dimensions. Ignores `nLength` parameter and returns the dynamic size with the largest height.|  \n|`LM_LENGTHY`|Set if `nLength` indicates height (Y-direction) instead of width.|  \n|`LM_COMMIT`|Resets **LM_MRUWIDTH** to current width of floating control bar.|  \n  \n### Return Value  \n The control bar size, in pixels, of a [CSize](../../atl-mfc-shared/reference/csize-class.md) object.  \n  \n### Remarks  \n Override this member function to provide your own dynamic layout in classes you derive from `CControlBar`. MFC classes derived from `CControlBar`, such as [CToolbar](../../mfc/reference/ctoolbar-class.md), override this member function and provide their own implementation.  \n  \n##  <a name=\"ccontrolbar__calcfixedlayout\"></a>  CControlBar::CalcFixedLayout  \n Call this member function to calculate the horizontal size of a control bar.  \n  \n```  \nvirtual CSize CalcFixedLayout(\n    BOOL bStretch,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n `bStretch`  \n Indicates whether the bar should be stretched to the size of the frame. The `bStretch` parameter is nonzero when the bar is not a docking bar (not available for docking) and is 0 when it is docked or floating (available for docking).  \n  \n `bHorz`  \n Indicates that the bar is horizontally or vertically oriented. The `bHorz` parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented.  \n  \n### Return Value  \n The control bar size, in pixels, of a `CSize` object.  \n  \n### Remarks  \n Control bars such as toolbars can stretch horizontally or vertically to accommodate the buttons contained in the control bar.  \n  \n If `bStretch` is **TRUE**, stretch the dimension along the orientation provided by `bHorz`. In other words, if `bHorz` is **FALSE**, the control bar is stretched vertically. If `bStretch` is **FALSE**, no stretch occurs. The following table shows the possible permutations, and resulting control-bar styles, of `bStretch` and `bHorz`.  \n  \n|bStretch|bHorz|Stretching|Orientation|Docking/Not docking|  \n|--------------|-----------|----------------|-----------------|--------------------------|  \n|**TRUE**|**TRUE**|Horizontal stretching|Horizontally oriented|Not docking|  \n|**TRUE**|**FALSE**|Vertical stretching|Vertically oriented|Not docking|  \n|**FALSE**|**TRUE**|No stretching available|Horizontally oriented|Docking|  \n|**FALSE**|**FALSE**|No stretching available|Vertically oriented|Docking|  \n  \n##  <a name=\"ccontrolbar__calcinsiderect\"></a>  CControlBar::CalcInsideRect  \n The framework calls this function to calculate the client area of the control bar.  \n  \n```  \nvirtual void CalcInsideRect(\n    CRect& rect,  \n    BOOL bHorz) const;\n\n \n```  \n  \n### Parameters  \n `rect`  \n Contains the current dimensions of the control bar; including the borders.  \n  \n `bHorz`  \n Indicates that the bar is horizontally or vertically oriented. The `bHorz` parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented.  \n  \n### Remarks  \n This function is called before the control bar is painted.  \n  \n Override this function to customize the rendering of the borders and gripper bar of the control bar.  \n  \n##  <a name=\"ccontrolbar__ccontrolbar\"></a>  CControlBar::CControlBar  \n Constructs a `CControlBar` object.  \n  \n```  \nCControlBar();\n```  \n  \n##  <a name=\"ccontrolbar__dopaint\"></a>  CControlBar::DoPaint  \n Called by the framework to render the borders and gripper bar of the control bar.  \n  \n```  \nvirtual void DoPaint(CDC* pDC);\n```  \n  \n### Parameters  \n `pDC`  \n Points to the device context to be used for rendering the borders and gripper of the control bar.  \n  \n### Remarks  \n Override this function to customize the drawing behavior of the control bar.  \n  \n Another customization method is to override the `DrawBorders` and `DrawGripper` functions and add custom drawing code for the borders and gripper. Because these methods are called by the default `DoPaint` method, an override of `DoPaint` is not needed.  \n  \n##  <a name=\"ccontrolbar__drawborders\"></a>  CControlBar::DrawBorders  \n Called by the framework to render the borders of the control bar.  \n  \n```  \nvirtual void DrawBorders(\n    CDC* pDC,  \n    CRect& rect);\n```  \n  \n### Parameters  \n `pDC`  \n Points to the device context to be used for rendering the borders of the control bar.  \n  \n `rect`  \n A `CRect` object containing the dimensions of the control bar.  \n  \n### Remarks  \n Override this function to customize the appearance of the control bar borders.  \n  \n##  <a name=\"ccontrolbar__drawgripper\"></a>  CControlBar::DrawGripper  \n Called by the framework to render the gripper of the control bar.  \n  \n```  \nvirtual void DrawGripper(\n    CDC* pDC,  \n    const CRect& rect);\n```  \n  \n### Parameters  \n `pDC`  \n Points to the device context to be used for rendering the control bar gripper.  \n  \n `rect`  \n A `CRect` object containing the dimensions of the control bar gripper.  \n  \n### Remarks  \n Override this function to customize the appearance of the control bar gripper.  \n  \n##  <a name=\"ccontrolbar__enabledocking\"></a>  CControlBar::EnableDocking  \n Call this function to enable a control bar to be docked.  \n  \n```  \nvoid EnableDocking(DWORD dwDockStyle);\n```  \n  \n### Parameters  \n `dwDockStyle`  \n Specifies whether the control bar supports docking and the sides of its parent window to which the control bar can be docked, if supported. Can be one or more of the following:  \n  \n- `CBRS_ALIGN_TOP` Allows docking at the top of the client area.  \n  \n- `CBRS_ALIGN_BOTTOM` Allows docking at the bottom of the client area.  \n  \n- `CBRS_ALIGN_LEFT` Allows docking on the left side of the client area.  \n  \n- `CBRS_ALIGN_RIGHT` Allows docking on the right side of the client area.  \n  \n- `CBRS_ALIGN_ANY` Allows docking on any side of the client area.  \n  \n- `CBRS_FLOAT_MULTI` Allows multiple control bars to be floated in a single mini-frame window.  \n  \n If 0 (that is, indicating no flags), the control bar will not dock.  \n  \n### Remarks  \n The sides specified must match one of the sides enabled for docking in the destination frame window, or the control bar cannot be docked to that frame window.  \n  \n##  <a name=\"ccontrolbar__getbarstyle\"></a>  CControlBar::GetBarStyle  \n Call this function to determine which **CBRS_** (control bar styles) settings are currently set for the control bar.  \n  \n```  \nDWORD GetBarStyle();\n```  \n  \n### Return Value  \n The current **CBRS_** (control bar styles) settings for the control bar. See [CControlBar::SetBarStyle](#ccontrolbar__setbarstyle) for the complete list of available styles.  \n  \n### Remarks  \n Does not handle **WS_** (window style) styles.  \n  \n##  <a name=\"ccontrolbar__getborders\"></a>  CControlBar::GetBorders  \n Returns the current border values for the control bar.  \n  \n```  \nCRect GetBorders() const;\n\n \n```  \n  \n### Return Value  \n A `CRect` object that contains the current width (in pixels) of each side of the control bar object. For example, the value of the `left` member, of [CRect](../../atl-mfc-shared/reference/crect-class.md) object, is the width of the left hand border.  \n  \n##  <a name=\"ccontrolbar__getcount\"></a>  CControlBar::GetCount  \n Returns the number of non- `HWND` items on the `CControlBar` object.  \n  \n```  \nint GetCount() const;\n\n \n```  \n  \n### Return Value  \n The number of non- `HWND` items on the `CControlBar` object. This function returns 0 for a [CDialogBar](../../mfc/reference/cdialogbar-class.md) object.  \n  \n### Remarks  \n The type of the item depends on the derived object: panes for [CStatusBar](../../mfc/reference/cstatusbar-class.md) objects, and buttons and separators for [CToolBar](../../mfc/reference/ctoolbar-class.md) objects.  \n  \n##  <a name=\"ccontrolbar__getdockingframe\"></a>  CControlBar::GetDockingFrame  \n Call this member function to obtain a pointer to the current frame window to which your control bar is docked.  \n  \n```  \nCFrameWnd* GetDockingFrame() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a frame window if successful; otherwise **NULL**.  \n  \n If the control bar is not docked to a frame window (that is, if the control bar is floating), this function will return a pointer to its parent [CMiniFrameWnd](../../mfc/reference/cminiframewnd-class.md).  \n  \n### Remarks  \n For more information about dockable control bars, see [CControlBar::EnableDocking](#ccontrolbar__enabledocking) and [CFrameWnd::DockControlBar](../../mfc/reference/cframewnd-class.md#cframewnd__dockcontrolbar).  \n  \n##  <a name=\"ccontrolbar__isfloating\"></a>  CControlBar::IsFloating  \n Call this member function to determine whether the control bar is floating or docked.  \n  \n```  \nBOOL IsFloating() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the control bar is floating; otherwise 0.  \n  \n### Remarks  \n To change the state of a control bar from docked to floating, call [CFrameWnd::FloatControlBar](../../mfc/reference/cframewnd-class.md#cframewnd__floatcontrolbar).  \n  \n##  <a name=\"ccontrolbar__m_bautodelete\"></a>  CControlBar::m_bAutoDelete  \n If nonzero, the `CControlBar` object is deleted when the Windows control bar is destroyed.  \n  \n```  \nBOOL m_bAutoDelete;  \n```  \n  \n### Remarks  \n `m_bAutoDelete` is a public variable of type **BOOL**.  \n  \n A control-bar object is usually embedded in a frame-window object. In this case, `m_bAutoDelete` is 0 because the embedded control-bar object is destroyed when the frame window is destroyed.  \n  \n Set this variable to a nonzero value if you allocate a `CControlBar` object on the heap and you do not plan to call **delete**.  \n  \n##  <a name=\"ccontrolbar__m_pinplaceowner\"></a>  CControlBar::m_pInPlaceOwner  \n The in-place owner of the control bar.  \n  \n```  \nCWnd* m_pInPlaceOwner;  \n```  \n  \n##  <a name=\"ccontrolbar__onupdatecmdui\"></a>  CControlBar::OnUpdateCmdUI  \n This member function is called by the framework to update the status of the toolbar or status bar.  \n  \n```  \nvirtual void OnUpdateCmdUI(\n    CFrameWnd* pTarget,  \n    BOOL bDisableIfNoHndler) = 0;  \n```  \n  \n### Parameters  \n `pTarget`  \n Points to the main frame window of the application. This pointer is used for routing update messages.  \n  \n `bDisableIfNoHndler`  \n Flag that indicates whether a control that has no update handler should be automatically displayed as disabled.  \n  \n### Remarks  \n To update an individual button or pane, use the `ON_UPDATE_COMMAND_UI` macro in your message map to set an update handler appropriately. See [ON_UPDATE_COMMAND_UI](http://msdn.microsoft.com/library/c4de3c21-2d2e-4b89-a4ce-d0c0e2d9edc4) for more information about using this macro.  \n  \n `OnUpdateCmdUI` is called by the framework when the application is idle. The frame window to be updated must be a child window, at least indirectly, of a visible frame window. `OnUpdateCmdUI` is an advanced overridable.  \n  \n##  <a name=\"ccontrolbar__setbarstyle\"></a>  CControlBar::SetBarStyle  \n Call this function to set the desired **CBRS_** styles for the control bar.  \n  \n```  \nvoid SetBarStyle(DWORD dwStyle);\n```  \n  \n### Parameters  \n `dwStyle`  \n The desired styles for the control bar. Can be one or more of the following:  \n  \n- `CBRS_ALIGN_TOP` Allows the control bar to be docked to the top of the client area of a frame window.  \n  \n- `CBRS_ALIGN_BOTTOM` Allows the control bar to be docked to the bottom of the client area of a frame window.  \n  \n- `CBRS_ALIGN_LEFT` Allows the control bar to be docked to the left side of the client area of a frame window.  \n  \n- `CBRS_ALIGN_RIGHT` Allows the control bar to be docked to the right side of the client area of a frame window.  \n  \n- `CBRS_ALIGN_ANY` Allows the control bar to be docked to any side of the client area of a frame window.  \n  \n- `CBRS_BORDER_TOP` Causes a border to be drawn on the top edge of the control bar when it would be visible.  \n  \n- `CBRS_BORDER_BOTTOM` Causes a border to be drawn on the bottom edge of the control bar when it would be visible.  \n  \n- `CBRS_BORDER_LEFT` Causes a border to be drawn on the left edge of the control bar when it would be visible.  \n  \n- `CBRS_BORDER_RIGHT` Causes a border to be drawn on the right edge of the control bar when it would be visible.  \n  \n- `CBRS_FLOAT_MULTI` Allows multiple control bars to be floated in a single mini-frame window.  \n  \n- `CBRS_TOOLTIPS` Causes tool tips to be displayed for the control bar.  \n  \n- `CBRS_FLYBY` Causes message text to be updated at the same time as tool tips.  \n  \n- **CBRS_GRIPPER** Causes a gripper, similar to that used on bands in a **CReBar** object, to be drawn for any `CControlBar`-derived class.  \n  \n### Remarks  \n Does not affect the **WS_** (window style) settings.  \n  \n##  <a name=\"ccontrolbar__setborders\"></a>  CControlBar::SetBorders  \n Call this function to set the size of the control bar's borders.  \n  \n```  \nvoid SetBorders(\n    int cxLeft = 0,  \n    int cyTop = 0,  \n    int cxRight = 0,  \n    int cyBottom = 0);\n\n \nvoid SetBorders(\n    LPCRECT lpRect);\n```  \n  \n### Parameters  \n *cxLeft*  \n The width (in pixels) of the control bar's left border.  \n  \n *cyTop*  \n The height (in pixels) of the control bar's top border.  \n  \n *cxRight*  \n The width (in pixels) of the control bar's right border.  \n  \n *cyBottom*  \n The height (in pixels) of the control bar's bottom border.  \n  \n `lpRect`  \n A pointer to a [CRect](../../atl-mfc-shared/reference/crect-class.md) object that contains the current width (in pixels)of each border of the control bar object.  \n  \n### Example  \n The following code example sets the top and bottom borders of the control bar to 5 pixels, and the left and right borders to 2 pixels:  \n  \n [!code-cpp[NVC_MFCControlLadenDialog#61](../../mfc/codesnippet/cpp/ccontrolbar-class_1.cpp)]  \n  \n##  <a name=\"ccontrolbar__setinplaceowner\"></a>  CControlBar::SetInPlaceOwner  \n Changes the in-place owner of a control bar.  \n  \n```  \nvoid SetInPlaceOwner(CWnd* pWnd);\n```  \n  \n### Parameters  \n `pWnd`  \n A pointer to a `CWnd` object.  \n  \n### Remarks  \n  \n## See Also  \n [MFC Sample CTRLBARS](../../visual-cpp-samples.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CToolBar Class](../../mfc/reference/ctoolbar-class.md)   \n [CDialogBar Class](../../mfc/reference/cdialogbar-class.md)   \n [CStatusBar Class](../../mfc/reference/cstatusbar-class.md)   \n [CReBar Class](../../mfc/reference/crebar-class.md)\n"}