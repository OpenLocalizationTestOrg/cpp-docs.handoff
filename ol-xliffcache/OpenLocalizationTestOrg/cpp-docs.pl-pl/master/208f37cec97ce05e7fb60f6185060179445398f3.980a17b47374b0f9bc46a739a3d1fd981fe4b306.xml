{"nodes":[{"pos":[12,51],"content":"accelerator_view Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"accelerator_view Class | Microsoft Docs","pos":[0,39]}]},{"content":"accelerator_view Class","pos":[639,661]},{"content":"Represents a virtual device abstraction on a C++ AMP data-parallel accelerator.","pos":[662,741]},{"content":"Syntax","pos":[751,757]},{"content":"Members","pos":[807,814]},{"content":"Public Constructors","pos":[824,843]},{"content":"Name","pos":[850,854]},{"content":"Description","pos":[855,866]},{"content":"accelerator_view::accelerator_view Constructor","pos":[905,951]},{"pos":[960,1019],"content":"Initializes a new instance of the <ph id=\"ph1\">`accelerator_view`</ph> class.","source":"Initializes a new instance of the `accelerator_view` class."},{"content":"accelerator_view::~accelerator_view Destructor","pos":[1025,1071]},{"pos":[1080,1119],"content":"Destroys the <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"Destroys the `accelerator_view` object."},{"content":"Public Methods","pos":[1130,1144]},{"content":"Name","pos":[1151,1155]},{"content":"Description","pos":[1156,1167]},{"content":"accelerator_view::create_marker Method","pos":[1206,1244]},{"pos":[1262,1370],"content":"Returns a future to track the completion of all commands submitted so far to this <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"Returns a future to track the completion of all commands submitted so far to this `accelerator_view` object."},{"content":"accelerator_view::flush Method","pos":[1376,1406]},{"pos":[1416,1518],"content":"Submits all pending commands queued to the <ph id=\"ph1\">`accelerator_view`</ph> object to the accelerator for execution.","source":"Submits all pending commands queued to the `accelerator_view` object to the accelerator for execution."},{"content":"accelerator_view::get_accelerator Method","pos":[1524,1564]},{"pos":[1584,1651],"content":"Returns the <ph id=\"ph1\">`accelerator`</ph> object for the <ph id=\"ph2\">`accelerator_view`</ph> object.","source":"Returns the `accelerator` object for the `accelerator_view` object."},{"content":"accelerator_view::get_is_auto_selection Method","pos":[1657,1703]},{"pos":[1729,1969],"content":"Returns a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the <ph id=\"ph1\">`accelerator_view`</ph> object is passed to a <bpt id=\"p1\">[</bpt>parallel_for_each<ept id=\"p1\">](concurrency-namespace-functions-amp.md#parallel_for_each)</ept>.","source":"Returns a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the `accelerator_view` object is passed to a [parallel_for_each](concurrency-namespace-functions-amp.md#parallel_for_each)."},{"content":"accelerator_view::get_is_debug Method","pos":[1975,2012]},{"pos":[2029,2164],"content":"Returns a Boolean value that indicates whether the <ph id=\"ph1\">`accelerator_view`</ph> object has the DEBUG layer enabled for extensive error reporting.","source":"Returns a Boolean value that indicates whether the `accelerator_view` object has the DEBUG layer enabled for extensive error reporting."},{"content":"accelerator_view::get_queuing_mode Method","pos":[2170,2211]},{"pos":[2232,2291],"content":"Returns the queuing mode for the <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"Returns the queuing mode for the `accelerator_view` object."},{"content":"accelerator_view::get_version Method","pos":[2297,2333]},{"pos":[2349,2395],"content":"Returns the version of the <ph id=\"ph1\">`accelerator_view`</ph>.","source":"Returns the version of the `accelerator_view`."},{"content":"accelerator_view::wait Method","pos":[2401,2430]},{"pos":[2439,2515],"content":"Waits for all commands submitted to the <ph id=\"ph1\">`accelerator_view`</ph> object to finish.","source":"Waits for all commands submitted to the `accelerator_view` object to finish."},{"content":"Public Operators","pos":[2526,2542]},{"content":"Name","pos":[2549,2553]},{"content":"Description","pos":[2554,2565]},{"content":"accelerator_view::operator!= Operator","pos":[2604,2641]},{"pos":[2658,2779],"content":"Compares this <ph id=\"ph1\">`accelerator_view`</ph> object with another and returns <ph id=\"ph2\">`false`</ph> if they are the same; otherwise, returns <ph id=\"ph3\">`true`</ph>.","source":"Compares this `accelerator_view` object with another and returns `false` if they are the same; otherwise, returns `true`."},{"content":"accelerator_view::operator= Operator","pos":[2785,2821]},{"pos":[2837,2914],"content":"Copies the contents of the specified <ph id=\"ph1\">`accelerator_view`</ph> object into this one.","source":"Copies the contents of the specified `accelerator_view` object into this one."},{"content":"accelerator_view::operator== Operator","pos":[2920,2957]},{"pos":[2976,3097],"content":"Compares this <ph id=\"ph1\">`accelerator_view`</ph> object with another and returns <ph id=\"ph2\">`true`</ph> if they are the same; otherwise, returns <ph id=\"ph3\">`false`</ph>.","source":"Compares this `accelerator_view` object with another and returns `true` if they are the same; otherwise, returns `false`."},{"content":"Public Data Members","pos":[3108,3127]},{"content":"Name","pos":[3134,3138]},{"content":"Description","pos":[3139,3150]},{"content":"accelerator_view::accelerator Data Member","pos":[3189,3230]},{"pos":[3246,3310],"content":"Gets the <ph id=\"ph1\">`accelerator`</ph> object for the <ph id=\"ph2\">`accelerator_view`</ph> object.","source":"Gets the `accelerator` object for the `accelerator_view` object."},{"content":"accelerator_view::is_auto_selection Data Member","pos":[3316,3363]},{"pos":[3385,3622],"content":"Gets a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the <ph id=\"ph1\">`accelerator_view`</ph> object is passed to a <bpt id=\"p1\">[</bpt>parallel_for_each<ept id=\"p1\">](concurrency-namespace-functions-amp.md#parallel_for_each)</ept>.","source":"Gets a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the `accelerator_view` object is passed to a [parallel_for_each](concurrency-namespace-functions-amp.md#parallel_for_each)."},{"content":"accelerator_view::is_debug Data Member","pos":[3628,3666]},{"pos":[3679,3811],"content":"Gets a Boolean value that indicates whether the <ph id=\"ph1\">`accelerator_view`</ph> object has the DEBUG layer enabled for extensive error reporting.","source":"Gets a Boolean value that indicates whether the `accelerator_view` object has the DEBUG layer enabled for extensive error reporting."},{"content":"accelerator_view::queuing_mode Data Member","pos":[3817,3859]},{"pos":[3876,3932],"content":"Gets the queuing mode for the <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"Gets the queuing mode for the `accelerator_view` object."},{"content":"accelerator_view::version Data Member","pos":[3938,3975]},{"content":"Gets the version of the accelerator.","pos":[3987,4023]},{"content":"Inheritance Hierarchy","pos":[4033,4054]},{"content":"Remarks","pos":[4086,4093]},{"content":"An <ph id=\"ph1\">`accelerator_view`</ph> object represents a logical, isolated view of an accelerator.","pos":[4097,4180],"source":"An `accelerator_view` object represents a logical, isolated view of an accelerator."},{"content":"A single physical compute device can have many logical, isolated <ph id=\"ph1\">`accelerator_view`</ph> objects.","pos":[4181,4273],"source":" A single physical compute device can have many logical, isolated `accelerator_view` objects."},{"content":"Each accelerator has a default <ph id=\"ph1\">`accelerator_view`</ph> object.","pos":[4274,4331],"source":" Each accelerator has a default `accelerator_view` object."},{"content":"Additional <ph id=\"ph1\">`accelerator_view`</ph> objects can be created.","pos":[4332,4385],"source":" Additional `accelerator_view` objects can be created."},{"content":"Physical devices can be shared among many client threads.","pos":[4392,4449]},{"content":"Client threads can cooperatively use the same <ph id=\"ph1\">`accelerator_view`</ph> object of an accelerator, or each client can communicate with a compute device via an independent <ph id=\"ph2\">`accelerator_view`</ph> object for isolation from other client threads.","pos":[4450,4679],"source":" Client threads can cooperatively use the same `accelerator_view` object of an accelerator, or each client can communicate with a compute device via an independent `accelerator_view` object for isolation from other client threads."},{"content":"An <ph id=\"ph1\">`accelerator_view`</ph> object can have one of two <bpt id=\"p1\">[</bpt>queuing_mode Enumeration<ept id=\"p1\">](concurrency-namespace-enums-amp.md#queuing_mode)</ept> states.","pos":[4686,4818],"source":"An `accelerator_view` object can have one of two [queuing_mode Enumeration](concurrency-namespace-enums-amp.md#queuing_mode) states."},{"content":"If the queuing mode is <ph id=\"ph1\">`immediate`</ph>, commands like <ph id=\"ph2\">`copy`</ph> and <ph id=\"ph3\">`parallel_for_each`</ph> are sent to the corresponding accelerator device as soon as they return to the caller.","pos":[4819,4986],"source":" If the queuing mode is `immediate`, commands like `copy` and `parallel_for_each` are sent to the corresponding accelerator device as soon as they return to the caller."},{"content":"If the queuing mode is <ph id=\"ph1\">`deferred`</ph>, such commands are queued up on a command queue that corresponds to the <ph id=\"ph2\">`accelerator_view`</ph> object.","pos":[4987,5119],"source":" If the queuing mode is `deferred`, such commands are queued up on a command queue that corresponds to the `accelerator_view` object."},{"content":"Commands are not actually sent to the device until <ph id=\"ph1\">`flush()`</ph> is called.","pos":[5120,5191],"source":" Commands are not actually sent to the device until `flush()` is called."},{"content":"Requirements","pos":[5200,5212]},{"pos":[5216,5235],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> amprt.h","source":"**Header:** amprt.h"},{"pos":[5242,5268],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Concurrency","source":"**Namespace:** Concurrency"},{"pos":[5302,5343],"content":"accelerator_view::accelerator Data Member"},{"content":"Gets the accelerator object for the accelerator_view object.","pos":[5345,5405]},{"content":"Syntax","pos":[5415,5421]},{"pos":[5548,5594],"content":"accelerator_view::accelerator_view Constructor"},{"pos":[5595,5701],"content":"Initializes a new instance of the accelerator_view class by copying an existing <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"Initializes a new instance of the accelerator_view class by copying an existing `accelerator_view` object."},{"content":"Syntax","pos":[5711,5717]},{"content":"Parameters","pos":[5797,5807]},{"content":"The <ph id=\"ph1\">`accelerator_view`</ph> object to copy.","pos":[5823,5861],"source":" The `accelerator_view` object to copy."},{"pos":[5917,5955],"content":"accelerator_view::create_marker Method"},{"pos":[5956,6064],"content":"Returns a future to track the completion of all commands submitted so far to this <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"Returns a future to track the completion of all commands submitted so far to this `accelerator_view` object."},{"content":"Syntax","pos":[6074,6080]},{"content":"Return Value","pos":[6155,6167]},{"pos":[6171,6271],"content":"A future to track the completion of all commands submitted so far to this <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"A future to track the completion of all commands submitted so far to this `accelerator_view` object."},{"pos":[6319,6349],"content":"accelerator_view::flush Method"},{"content":"Submits all pending commands queued to the accelerator_view object to the accelerator for execution.","pos":[6350,6450]},{"content":"Syntax","pos":[6460,6466]},{"content":"Return Value","pos":[6507,6519]},{"pos":[6523,6538],"content":"Returns <ph id=\"ph1\">`void`</ph>.","source":"Returns `void`."},{"pos":[6594,6634],"content":"accelerator_view::get_accelerator Method"},{"content":"Returns the accelerator object for the accelerator_view object.","pos":[6637,6700]},{"content":"Syntax","pos":[6705,6711]},{"content":"Return Value","pos":[6761,6773]},{"content":"The accelerator object for the accelerator_view object.","pos":[6774,6829]},{"pos":[6889,6935],"content":"accelerator_view::get_is_auto_selection Method"},{"pos":[6938,7169],"content":"Returns a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a <bpt id=\"p1\">[</bpt>parallel_for_each<ept id=\"p1\">](concurrency-namespace-functions-amp.md#parallel_for_each)</ept>.","source":"Returns a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a [parallel_for_each](concurrency-namespace-functions-amp.md#parallel_for_each)."},{"content":"Syntax","pos":[7179,7185]},{"content":"Return Value","pos":[7248,7260]},{"pos":[7271,7359],"content":"if the runtime will automatically select an appropriate accelerator; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if the runtime will automatically select an appropriate accelerator; otherwise, `false`."},{"pos":[7414,7451],"content":"accelerator_view::get_is_debug Method"},{"content":"Returns a Boolean value that indicates whether the accelerator_view object has the DEBUG layer enabled for extensive error reporting.","pos":[7452,7585]},{"content":"Syntax","pos":[7595,7601]},{"content":"Return Value","pos":[7655,7667]},{"pos":[7671,7798],"content":"A Boolean value that indicates whether the <ph id=\"ph1\">`accelerator_view`</ph> object has the DEBUG layer enabled for extensive error reporting.","source":"A Boolean value that indicates whether the `accelerator_view` object has the DEBUG layer enabled for extensive error reporting."},{"pos":[7855,7896],"content":"accelerator_view::get_queuing_mode Method"},{"content":"Returns the queuing mode for the accelerator_view object.","pos":[7897,7954]},{"content":"Syntax","pos":[7964,7970]},{"content":"Return Value","pos":[8036,8048]},{"pos":[8052,8103],"content":"The queuing mode for the <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"The queuing mode for the `accelerator_view` object."},{"pos":[8157,8193],"content":"accelerator_view::get_version Method"},{"content":"Returns the version of the accelerator_view.","pos":[8196,8240]},{"content":"Syntax","pos":[8250,8256]},{"content":"Return Value","pos":[8317,8329]},{"pos":[8333,8371],"content":"The version of the <ph id=\"ph1\">`accelerator_view`</ph>.","source":"The version of the `accelerator_view`."},{"pos":[8431,8478],"content":"accelerator_view::is_auto_selection Data Member"},{"pos":[8481,8709],"content":"Gets a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a <bpt id=\"p1\">[</bpt>parallel_for_each<ept id=\"p1\">](concurrency-namespace-functions-amp.md#parallel_for_each)</ept>.","source":"Gets a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a [parallel_for_each](concurrency-namespace-functions-amp.md#parallel_for_each)."},{"content":"Syntax","pos":[8719,8725]},{"pos":[8866,8904],"content":"accelerator_view::is_debug Data Member"},{"content":"Gets a Boolean value that indicates whether the accelerator_view object has the  DEBUG layer enabled for extensive error reporting.","pos":[8907,9038]},{"content":"Syntax","pos":[9048,9054]},{"pos":[9181,9218],"content":"accelerator_view::operator!= Operator"},{"pos":[9221,9340],"content":"Compares this accelerator_view object with another and returns <ph id=\"ph1\">`false`</ph> if they are the same; otherwise, returns <ph id=\"ph2\">`true`</ph>.","source":"Compares this accelerator_view object with another and returns `false` if they are the same; otherwise, returns `true`."},{"content":"Syntax","pos":[9350,9356]},{"content":"Parameters","pos":[9445,9455]},{"content":"The <ph id=\"ph1\">`accelerator_view`</ph> object to compare with this one.","pos":[9471,9526],"source":" The `accelerator_view` object to compare with this one."},{"content":"Return Value","pos":[9536,9548]},{"pos":[9560,9611],"content":"if the two objects are the same; otherwise, <ph id=\"ph1\">`true`</ph>.","source":" if the two objects are the same; otherwise, `true`."},{"pos":[9665,9701],"content":"accelerator_view::operator= Operator"},{"content":"Copies the contents of the specified accelerator_view object into this one.","pos":[9704,9779]},{"content":"Syntax","pos":[9789,9795]},{"content":"Parameters","pos":[9891,9901]},{"content":"The <ph id=\"ph1\">`accelerator_view`</ph> object to copy from.","pos":[9917,9960],"source":" The `accelerator_view` object to copy from."},{"content":"Return Value","pos":[9970,9982]},{"pos":[9986,10040],"content":"A reference to the modified <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"A reference to the modified `accelerator_view` object."},{"pos":[10097,10134],"content":"accelerator_view::operator== Operator"},{"pos":[10137,10256],"content":"Compares this accelerator_view object with another and returns <ph id=\"ph1\">`true`</ph> if they are the same; otherwise, returns <ph id=\"ph2\">`false`</ph>.","source":"Compares this accelerator_view object with another and returns `true` if they are the same; otherwise, returns `false`."},{"content":"Syntax","pos":[10266,10272]},{"content":"Parameters","pos":[10362,10372]},{"content":"The <ph id=\"ph1\">`accelerator_view`</ph> object to compare with this one.","pos":[10388,10443],"source":" The `accelerator_view` object to compare with this one."},{"content":"Return Value","pos":[10453,10465]},{"pos":[10476,10528],"content":"if the two objects are the same; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if the two objects are the same; otherwise, `false`."},{"pos":[10583,10625],"content":"accelerator_view::queuing_mode Data Member"},{"content":"Gets the queuing mode for the accelerator_view object.","pos":[10628,10682]},{"content":"Syntax","pos":[10692,10698]},{"pos":[10849,10886],"content":"accelerator_view::version Data Member"},{"content":"Gets the version of the accelerator_view.","pos":[10889,10930]},{"content":"Syntax","pos":[10940,10946]},{"pos":[11071,11100],"content":"accelerator_view::wait Method"},{"content":"Waits for all commands submitted to the accelerator_view object to finish.","pos":[11103,11177]},{"content":"Syntax","pos":[11187,11193]},{"content":"Return Value","pos":[11234,11246]},{"pos":[11250,11265],"content":"Returns <ph id=\"ph1\">`void`</ph>.","source":"Returns `void`."},{"content":"Remarks","pos":[11276,11283]},{"pos":[11287,11423],"content":"If the <bpt id=\"p1\">[</bpt>queuing_mode<ept id=\"p1\">](concurrency-namespace-enums-amp.md#queuing_mode)</ept> is <ph id=\"ph1\">`immediate`</ph>, this method returns immediately without blocking.","source":"If the [queuing_mode](concurrency-namespace-enums-amp.md#queuing_mode) is `immediate`, this method returns immediately without blocking."},{"pos":[11453,11499],"content":"accelerator_view::~accelerator_view Destructor"},{"content":"Destroys the accelerator_view object.","pos":[11501,11538]},{"content":"Syntax","pos":[11549,11555]},{"content":"Return Value","pos":[11603,11615]},{"content":"See Also","pos":[11626,11634]},{"content":"Concurrency Namespace (C++ AMP)","pos":[11639,11670]}],"content":"---\ntitle: \"accelerator_view Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"amprt/Concurrency::accelerator_view\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"accelerator_view class\"\nms.assetid: 9f298c21-bf62-46e0-88b8-01c5c78ef144\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# accelerator_view Class\nRepresents a virtual device abstraction on a C++ AMP data-parallel accelerator.  \n  \n### Syntax  \n  \n```  \nclass accelerator_view;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[accelerator_view::accelerator_view Constructor](#ctor)|Initializes a new instance of the `accelerator_view` class.|  \n|[accelerator_view::~accelerator_view Destructor](#dtor)|Destroys the `accelerator_view` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[accelerator_view::create_marker Method](#create_marker)|Returns a future to track the completion of all commands submitted so far to this `accelerator_view` object.|  \n|[accelerator_view::flush Method](#flush)|Submits all pending commands queued to the `accelerator_view` object to the accelerator for execution.|  \n|[accelerator_view::get_accelerator Method](#get_accelerator)|Returns the `accelerator` object for the `accelerator_view` object.|  \n|[accelerator_view::get_is_auto_selection Method](#get_is_auto_selection)|Returns a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the `accelerator_view` object is passed to a [parallel_for_each](concurrency-namespace-functions-amp.md#parallel_for_each).|  \n|[accelerator_view::get_is_debug Method](#get_is_debug)|Returns a Boolean value that indicates whether the `accelerator_view` object has the DEBUG layer enabled for extensive error reporting.|  \n|[accelerator_view::get_queuing_mode Method](#get_queuing_mode)|Returns the queuing mode for the `accelerator_view` object.|  \n|[accelerator_view::get_version Method](#get_version)|Returns the version of the `accelerator_view`.|  \n|[accelerator_view::wait Method](#wait)|Waits for all commands submitted to the `accelerator_view` object to finish.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[accelerator_view::operator!= Operator](#operator_neq)|Compares this `accelerator_view` object with another and returns `false` if they are the same; otherwise, returns `true`.|  \n|[accelerator_view::operator= Operator](#operator_eq)|Copies the contents of the specified `accelerator_view` object into this one.|  \n|[accelerator_view::operator== Operator](#operator_eq_eq)|Compares this `accelerator_view` object with another and returns `true` if they are the same; otherwise, returns `false`.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[accelerator_view::accelerator Data Member](#accelerator)|Gets the `accelerator` object for the `accelerator_view` object.|  \n|[accelerator_view::is_auto_selection Data Member](#is_auto_selection)|Gets a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the `accelerator_view` object is passed to a [parallel_for_each](concurrency-namespace-functions-amp.md#parallel_for_each).|  \n|[accelerator_view::is_debug Data Member](#is_debug)|Gets a Boolean value that indicates whether the `accelerator_view` object has the DEBUG layer enabled for extensive error reporting.|  \n|[accelerator_view::queuing_mode Data Member](#queuing_mode)|Gets the queuing mode for the `accelerator_view` object.|  \n|[accelerator_view::version Data Member](#version)|Gets the version of the accelerator.|  \n  \n## Inheritance Hierarchy  \n `accelerator_view`  \n  \n### Remarks  \n An `accelerator_view` object represents a logical, isolated view of an accelerator. A single physical compute device can have many logical, isolated `accelerator_view` objects. Each accelerator has a default `accelerator_view` object. Additional `accelerator_view` objects can be created.  \n  \n Physical devices can be shared among many client threads. Client threads can cooperatively use the same `accelerator_view` object of an accelerator, or each client can communicate with a compute device via an independent `accelerator_view` object for isolation from other client threads.  \n  \n An `accelerator_view` object can have one of two [queuing_mode Enumeration](concurrency-namespace-enums-amp.md#queuing_mode) states. If the queuing mode is `immediate`, commands like `copy` and `parallel_for_each` are sent to the corresponding accelerator device as soon as they return to the caller. If the queuing mode is `deferred`, such commands are queued up on a command queue that corresponds to the `accelerator_view` object. Commands are not actually sent to the device until `flush()` is called.  \n  \n## Requirements  \n **Header:** amprt.h  \n  \n **Namespace:** Concurrency  \n\n## <a name=\"accelerator\"></a> accelerator_view::accelerator Data Member\n\nGets the accelerator object for the accelerator_view object.  \n  \n### Syntax  \n  \n```  \n__declspec(property(get= get_accelerator)) Concurrency::accelerator accelerator;  \n```  \n  \n## <a name=\"ctor\"></a> accelerator_view::accelerator_view Constructor\nInitializes a new instance of the accelerator_view class by copying an existing `accelerator_view` object.  \n  \n### Syntax  \n  \n```  \naccelerator_view( const accelerator_view & _Other );  \n```  \n  \n### Parameters  \n `_Other`  \n The `accelerator_view` object to copy.  \n  \n## <a name=\"accelerator_view__create_marker\"></a> accelerator_view::create_marker Method\nReturns a future to track the completion of all commands submitted so far to this `accelerator_view` object.  \n  \n### Syntax  \n  \n```  \nconcurrency::completion_future create_marker();  \n```  \n  \n### Return Value  \n A future to track the completion of all commands submitted so far to this `accelerator_view` object.  \n  \n## <a name=\"accelerator_view__flush\"></a> accelerator_view::flush Method\nSubmits all pending commands queued to the accelerator_view object to the accelerator for execution.  \n  \n### Syntax  \n  \n```  \nvoid flush();  \n```  \n  \n### Return Value  \n Returns `void`.  \n\n## <a name=\"accelerator_view__get_accelerator\"></a> accelerator_view::get_accelerator Method  \nReturns the accelerator object for the accelerator_view object.\n### Syntax\n```\naccelerator get_accelerator() const;\n```\n### Return Value\nThe accelerator object for the accelerator_view object.\n\n## <a name=\"accelerator_view__get_is_auto_selection\"></a> accelerator_view::get_is_auto_selection Method  \nReturns a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a [parallel_for_each](concurrency-namespace-functions-amp.md#parallel_for_each).  \n  \n### Syntax  \n  \n```  \nbool get_is_auto_selection() const;  \n```  \n  \n### Return Value  \n `true` if the runtime will automatically select an appropriate accelerator; otherwise, `false`.  \n  \n## <a name=\"accelerator_view__get_is_debug\"></a> accelerator_view::get_is_debug Method\nReturns a Boolean value that indicates whether the accelerator_view object has the DEBUG layer enabled for extensive error reporting.  \n  \n### Syntax  \n  \n```  \nbool get_is_debug() const;  \n```  \n  \n### Return Value  \n A Boolean value that indicates whether the `accelerator_view` object has the DEBUG layer enabled for extensive error reporting.  \n\n## <a name=\"accelerator_view__get_queuing_mode\"></a> accelerator_view::get_queuing_mode Method\nReturns the queuing mode for the accelerator_view object.  \n  \n### Syntax  \n  \n```  \nqueuing_mode get_queuing_mode() const;  \n```  \n  \n### Return Value  \n The queuing mode for the `accelerator_view` object.  \n  \n## <a name=\"accelerator_view__get_version\"></a> accelerator_view::get_version Method  \nReturns the version of the accelerator_view.  \n  \n### Syntax  \n  \n```  \nunsigned int get_version() const;  \n```  \n  \n### Return Value  \n The version of the `accelerator_view`.  \n  \n## <a name=\"accelerator_view__is_auto_selection\"></a> accelerator_view::is_auto_selection Data Member  \nGets a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a [parallel_for_each](concurrency-namespace-functions-amp.md#parallel_for_each).  \n  \n### Syntax  \n  \n```  \n__declspec(property(get= get_is_auto_selection)) bool is_auto_selection;  \n```  \n  \n## <a name=\"accelerator_view__is_debug\"></a> accelerator_view::is_debug Data Member  \nGets a Boolean value that indicates whether the accelerator_view object has the  DEBUG layer enabled for extensive error reporting.  \n  \n### Syntax  \n  \n```  \n__declspec(property(get= get_is_debug)) bool is_debug;  \n```  \n  \n## <a name=\"accelerator_view__operator_neq\"></a> accelerator_view::operator!= Operator  \nCompares this accelerator_view object with another and returns `false` if they are the same; otherwise, returns `true`.  \n  \n### Syntax  \n  \n```  \nbool operator!= (    const accelerator_view & _Other ) const;  \n```  \n  \n### Parameters  \n `_Other`  \n The `accelerator_view` object to compare with this one.  \n  \n### Return Value  \n `false` if the two objects are the same; otherwise, `true`.  \n  \n## <a name=\"accelerator_view__operator_eq\"></a> accelerator_view::operator= Operator  \nCopies the contents of the specified accelerator_view object into this one.  \n  \n### Syntax  \n  \n```  \naccelerator_view & operator= (    const accelerator_view & _Other );  \n```  \n  \n### Parameters  \n `_Other`  \n The `accelerator_view` object to copy from.  \n  \n### Return Value  \n A reference to the modified `accelerator_view` object.  \n  \n## <a name=\"accelerator_view__operator_eq_eq\"></a> accelerator_view::operator== Operator  \nCompares this accelerator_view object with another and returns `true` if they are the same; otherwise, returns `false`.  \n  \n### Syntax  \n  \n```  \nbool operator= = (    const accelerator_view & _Other ) const;  \n```  \n  \n### Parameters  \n `_Other`  \n The `accelerator_view` object to compare with this one.  \n  \n### Return Value  \n `true` if the two objects are the same; otherwise, `false`.  \n  \n## <a name=\"accelerator_view__queuing_mode\"></a> accelerator_view::queuing_mode Data Member  \nGets the queuing mode for the accelerator_view object.  \n  \n### Syntax  \n  \n```  \n__declspec(property(get= get_queuing_mode)) Concurrency::queuing_mode queuing_mode;  \n```  \n  \n## <a name=\"accelerator_view__version\"></a> accelerator_view::version Data Member  \nGets the version of the accelerator_view.  \n  \n### Syntax  \n  \n```  \n__declspec(property(get= get_version)) unsigned int version;  \n```  \n  \n## <a name=\"accelerator_view__wait\"></a> accelerator_view::wait Method  \nWaits for all commands submitted to the accelerator_view object to finish.  \n  \n### Syntax  \n  \n```  \nvoid wait();  \n```  \n  \n#### Return Value  \n Returns `void`.  \n  \n#### Remarks  \n If the [queuing_mode](concurrency-namespace-enums-amp.md#queuing_mode) is `immediate`, this method returns immediately without blocking.  \n  \n##  <a name=\"dtor\"></a> accelerator_view::~accelerator_view Destructor\n Destroys the accelerator_view object.  \n  \n#### Syntax  \n  \n```  \n~accelerator_view();  \n```  \n  \n### Return Value  \n  \n \n## See Also  \n [Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)\n"}