{"nodes":[{"pos":[12,85],"content":"Walkthrough: Creating Windows Desktop Applications (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Walkthrough: Creating Windows Desktop Applications (C++) | Microsoft Docs","pos":[0,73]}]},{"content":"Walkthrough: Creating Windows Desktop Applications (C++)","pos":[735,791]},{"content":"This walkthrough shows how to create a traditional Windows desktop application using the C language API that has been in existence since the 1990s.","pos":[792,939]},{"content":"This is not the modern way to create Windows programs but it is still supported and there are many applications today that still use this API.","pos":[940,1082]},{"content":"This example displays \"Hello, World!\"","pos":[1083,1120]},{"content":"in a window.","pos":[1121,1133]},{"content":"You can use the code that you develop in this walkthrough as a pattern to create other Windows desktop applications.","pos":[1134,1250]},{"content":"The Win32 API (also known as the Windows API) is a C-based framework for creating Windows applications.","pos":[1257,1360]},{"content":"For more information about the Win32 API, see <bpt id=\"p1\">[</bpt>Windows API<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/cc433218.aspx)</ept>.","pos":[1361,1477],"source":" For more information about the Win32 API, see [Windows API](https://msdn.microsoft.com/en-us/library/cc433218.aspx)."},{"pos":[1485,1648],"content":"[!IMPORTANT]\n For the sake of brevity, some code statements are omitted in the text. The **Example** section at the end of this document shows the complete code.","leadings":["","> "],"nodes":[{"content":" For the sake of brevity, some code statements are omitted in the text. The **Example** section at the end of this document shows the complete code.","pos":[13,161],"nodes":[{"content":"For the sake of brevity, some code statements are omitted in the text.","pos":[1,71]},{"content":"The <bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept> section at the end of this document shows the complete code.","pos":[72,148],"source":" The **Example** section at the end of this document shows the complete code."}]}]},{"content":"Prerequisites","pos":[1657,1670]},{"content":"To complete this walkthrough, you must understand the fundamentals of the C++ language.","pos":[1674,1761]},{"content":"To create a Win32-based project","pos":[1771,1802]},{"pos":[1812,1875],"content":"On the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept> and then click <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","source":"On the **File** menu, click **New** and then click **Project**."},{"content":"In the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog box, in the left pane, click <bpt id=\"p2\">**</bpt>Installed Templates<ept id=\"p2\">**</ept>, click <bpt id=\"p3\">**</bpt>Visual C++<ept id=\"p3\">**</ept>, and then select <bpt id=\"p4\">**</bpt>Win32<ept id=\"p4\">**</ept>.","pos":[1885,2017],"source":"In the **New Project** dialog box, in the left pane, click **Installed Templates**, click **Visual C++**, and then select **Win32**."},{"content":"In the middle pane, select <bpt id=\"p1\">**</bpt>Win32 Project<ept id=\"p1\">**</ept>.","pos":[2018,2063],"source":" In the middle pane, select **Win32 Project**."},{"content":"In the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> box, type a name for the project, for example, <ph id=\"ph1\">`win32app`</ph>.","pos":[2074,2148],"source":"In the **Name** box, type a name for the project, for example, `win32app`."},{"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","pos":[2149,2162],"source":" Click **OK**."},{"pos":[2172,2244],"content":"On the Welcome page of the <bpt id=\"p1\">**</bpt>Win32 Application Wizard<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Next<ept id=\"p2\">**</ept>.","source":"On the Welcome page of the **Win32 Application Wizard**, click **Next**."},{"content":"On the Application Settings page, under <bpt id=\"p1\">**</bpt>Application type<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Windows application<ept id=\"p2\">**</ept>.","pos":[2254,2347],"source":"On the Application Settings page, under **Application type**, select **Windows application**."},{"content":"Under <bpt id=\"p1\">**</bpt>Additional options<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Empty project<ept id=\"p2\">**</ept>.","pos":[2348,2403],"source":" Under **Additional options**, select **Empty project**."},{"content":"Click <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept> to create the project.","pos":[2404,2443],"source":" Click **Finish** to create the project."},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the Win32app project, click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>New Item<ept id=\"p3\">**</ept>.","pos":[2453,2556],"source":"In **Solution Explorer**, right-click the Win32app project, click **Add**, and then click **New Item**."},{"content":"In the <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialog box, select <bpt id=\"p2\">**</bpt>C++ File (.cpp)<ept id=\"p2\">**</ept>.","pos":[2557,2620],"source":" In the **Add New Item** dialog box, select **C++ File (.cpp)**."},{"content":"In the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> box, type a name for the file, for example, <ph id=\"ph1\">`GT_HelloWorldWin32.cpp`</ph>.","pos":[2621,2706],"source":" In the **Name** box, type a name for the file, for example, `GT_HelloWorldWin32.cpp`."},{"content":"Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>.","pos":[2707,2721],"source":" Click **Add**."},{"content":"To start a Windows desktop application","pos":[2731,2769]},{"content":"Just as every C application and C++ application must have a <ph id=\"ph1\">`main`</ph> function as its starting point, every Win32-based application must have a <ph id=\"ph2\">`WinMain`</ph> function.","pos":[2779,2939],"source":"Just as every C application and C++ application must have a `main` function as its starting point, every Win32-based application must have a `WinMain` function."},{"content":"has the following syntax.","pos":[2950,2975]},{"pos":[3187,3342],"content":"For information about the parameters and return value of this function, see <bpt id=\"p1\">[</bpt>WinMain Function<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633559)</ept>.","source":"For information about the parameters and return value of this function, see [WinMain Function](http://msdn.microsoft.com/library/windows/desktop/ms633559)."},{"content":"Win32 programs require <ph id=\"ph1\">\\&lt;</ph>windows.h&gt;.","pos":[3352,3388],"source":"Win32 programs require \\<windows.h>."},{"content":"tchar.h&gt; defines the TCHAR macro, which resolves ultimately to <ph id=\"ph1\">`wchar_t`</ph> if the UNICODE symbol is defined in your project, otherwise it resolves to <ph id=\"ph2\">`char`</ph>.","pos":[3391,3546],"source":"tchar.h> defines the TCHAR macro, which resolves ultimately to `wchar_t` if the UNICODE symbol is defined in your project, otherwise it resolves to `char`."},{"content":"If you always build with UNICODE enabled, you don't need TCHAR and can just use wchar_t directly.","pos":[3548,3645]},{"content":"In addition to the <ph id=\"ph1\">`WinMain`</ph> function, every Windows desktop application must also have a window-procedure function.","pos":[3730,3846],"source":"In addition to the `WinMain` function, every Windows desktop application must also have a window-procedure function."},{"content":"This function is typically named <ph id=\"ph1\">`WndProc`</ph> but you can name it whatever you like.","pos":[3847,3928],"source":" This function is typically named `WndProc` but you can name it whatever you like."},{"content":"has the following syntax.","pos":[3939,3964]},{"content":"In this function you write code to handle <bpt id=\"p1\">*</bpt>messages<ept id=\"p1\">*</ept> that the application receives from Windows when <bpt id=\"p2\">*</bpt>events<ept id=\"p2\">*</ept> occur.","pos":[4149,4265],"source":"In this function you write code to handle *messages* that the application receives from Windows when *events* occur."},{"content":"For example, if a user clicks an OK button in your application, Windows will send a message to you and you can write code inside your <ph id=\"ph1\">`WndProc`</ph> function that does whatever work is appropriate.","pos":[4266,4458],"source":" For example, if a user clicks an OK button in your application, Windows will send a message to you and you can write code inside your `WndProc` function that does whatever work is appropriate."},{"content":"This is called <bpt id=\"p1\">*</bpt>handling<ept id=\"p1\">*</ept> an event.","pos":[4459,4494],"source":" This is called *handling* an event."},{"content":"You only handle the events that are relevant for your application.","pos":[4495,4561]},{"pos":[4572,4678],"content":"For more information, see <bpt id=\"p1\">[</bpt>Window Procedures<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632593)</ept>.","source":"For more information, see [Window Procedures](http://msdn.microsoft.com/library/windows/desktop/ms632593)."},{"content":"To add functionality to the WinMain function","pos":[4688,4732]},{"content":"In the <ph id=\"ph1\">`WinMain`</ph> function, you populate a structure of type <bpt id=\"p1\">[</bpt>WNDCLASSEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633577)</ept>.","pos":[4742,4875],"source":"In the `WinMain` function, you populate a structure of type [WNDCLASSEX](http://msdn.microsoft.com/library/windows/desktop/ms633577)."},{"content":"This structure contains information about the window, for example, the application icon, the background color of the window, the name to display in the title bar--and very importantly, a function pointer to your window procedure.","pos":[4876,5105]},{"content":"The following example shows a typical <ph id=\"ph1\">`WNDCLASSEX`</ph> structure.","pos":[5106,5167],"source":" The following example shows a typical `WNDCLASSEX` structure."},{"pos":[5817,5946],"content":"For information about the fields of this structure, see <bpt id=\"p1\">[</bpt>WNDCLASSEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633577)</ept>.","source":"For information about the fields of this structure, see [WNDCLASSEX](http://msdn.microsoft.com/library/windows/desktop/ms633577)."},{"content":"You must register the WNDCLASSEX with Windows so that it knows about your window and how to send messages to it.","pos":[5956,6068]},{"content":"Use the <bpt id=\"p1\">[</bpt>RegisterClassEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633587)</ept> function and pass the window class structure as an argument.","pos":[6069,6215],"source":" Use the [RegisterClassEx](http://msdn.microsoft.com/library/windows/desktop/ms633587) function and pass the window class structure as an argument."},{"content":"The _T macro is used because we use the TCHAR type.","pos":[6216,6267]},{"content":"Now you can create a window.","pos":[6514,6542]},{"content":"Use the <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> function.","pos":[6543,6635],"source":" Use the [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) function."},{"content":"This function returns an HWND, which is a handle to a window.","pos":[7755,7816]},{"content":"A handle is somewhat like a pointer that Windows uses to keep track of open windows.","pos":[7817,7901]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Windows Data Types<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa383751)</ept>.","pos":[7902,8009],"source":" For more information, see [Windows Data Types](http://msdn.microsoft.com/library/windows/desktop/aa383751)."},{"content":"At this point the window has been created, but we still need to tell Windows to make it visible.","pos":[8019,8115]},{"content":"That's what this code does:","pos":[8116,8143]},{"content":"At this point, the displayed window will not have much content because you have not yet implemented the <ph id=\"ph1\">`WndProc`</ph> function.","pos":[8401,8524],"source":"At this point, the displayed window will not have much content because you have not yet implemented the `WndProc` function."},{"content":"In other words, the application is not yet handling the messages that Windows is now sending to it.","pos":[8525,8624]},{"content":"To handle the messages we first add a message loop to listen for the messages that Windows sends.","pos":[8634,8731]},{"content":"When the application receives a message, this loop dispatches it to your <ph id=\"ph1\">`WndProc`</ph> function to be handled.","pos":[8732,8838],"source":" When the application receives a message, this loop dispatches it to your `WndProc` function to be handled."},{"content":"The message loop resembles the following code.","pos":[8839,8885]},{"pos":[9094,9478],"content":"For more information about the structures and functions in the message loop, see <bpt id=\"p1\">[</bpt>MSG<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms644958)</ept>, <bpt id=\"p2\">[</bpt>GetMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms644936)</ept>, <bpt id=\"p3\">[</bpt>TranslateMessage<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept>, and <bpt id=\"p4\">[</bpt>DispatchMessage<ept id=\"p4\">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept>.","source":"For more information about the structures and functions in the message loop, see [MSG](http://msdn.microsoft.com/library/windows/desktop/ms644958), [GetMessage](http://msdn.microsoft.com/library/windows/desktop/ms644936), [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955), and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934)."},{"pos":[9489,9562],"content":"At this point, the <ph id=\"ph1\">`WinMain`</ph> function should resemble the following code.","source":"At this point, the `WinMain` function should resemble the following code."},{"content":"To add functionality to the WndProc function","pos":[12358,12402]},{"pos":[12412,12528],"content":"To enable the <ph id=\"ph1\">`WndProc`</ph> function to handle the messages that the application receives, implement a switch statement.","source":"To enable the `WndProc` function to handle the messages that the application receives, implement a switch statement."},{"content":"One important message to handle is the <bpt id=\"p1\">[</bpt>WM_PAINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message.","pos":[12539,12657],"source":"One important message to handle is the [WM_PAINT](http://msdn.microsoft.com/library/windows/desktop/dd145213) message."},{"content":"The application receives this message when part of its displayed window must be updated.","pos":[12658,12746]},{"content":"This event can occur when a user moves a window in front of your window, then moves it away again.","pos":[12747,12845]},{"content":"Your application doesn't know when events like this occur; only Windows knows, so it notifies you with WM_PAINT.","pos":[12846,12958]},{"content":"When the window is first displayed, all of it must be updated.","pos":[12959,13021]},{"content":"To handle a <ph id=\"ph1\">`WM_PAINT`</ph> message, first call <bpt id=\"p1\">[</bpt>BeginPaint<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183362)</ept>, then handle all the logic to lay out the text, buttons, and other controls in the window, and then call <bpt id=\"p2\">[</bpt>EndPaint<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd162598)</ept>.","pos":[13032,13324],"source":"To handle a `WM_PAINT` message, first call [BeginPaint](http://msdn.microsoft.com/library/windows/desktop/dd183362), then handle all the logic to lay out the text, buttons, and other controls in the window, and then call [EndPaint](http://msdn.microsoft.com/library/windows/desktop/dd162598)."},{"content":"For this application, the logic between the beginning call and the ending call is to display the string \"Hello, World!\"","pos":[13325,13444]},{"content":"in the window.","pos":[13445,13459]},{"content":"In the following code, notice that the <bpt id=\"p1\">[</bpt>TextOut<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145133)</ept> function is used to display the string.","pos":[13460,13608],"source":" In the following code, notice that the [TextOut](http://msdn.microsoft.com/library/windows/desktop/dd145133) function is used to display the string."},{"content":"HDC in the previous code is a handle to a device context, which is a data structure that Windows uses to enable your application to communicate with the graphics subsystem.","pos":[14177,14349]},{"content":"The BeginPaint and EndPaint functions ensure that your application behaves like a good citizen and doesn't use the device context for longer than it needs to.","pos":[14350,14508]},{"content":"This helps ensure the graphics subsystem is available for use by other applications.","pos":[14509,14593]},{"content":"An application typically handles many other messages, for example, <bpt id=\"p1\">[</bpt>WM_CREATE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632619)</ept> when a window is first created, and <bpt id=\"p2\">[</bpt>WM_DESTROY<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms632620)</ept> when the window is closed.","pos":[14603,14877],"source":"An application typically handles many other messages, for example, [WM_CREATE](http://msdn.microsoft.com/library/windows/desktop/ms632619) when a window is first created, and [WM_DESTROY](http://msdn.microsoft.com/library/windows/desktop/ms632620) when the window is closed."},{"content":"The following code shows a basic but complete <ph id=\"ph1\">`WndProc`</ph> function.","pos":[14878,14943],"source":" The following code shows a basic but complete `WndProc` function."},{"pos":[15916,15923],"content":"Example"},{"content":"To build this example","pos":[15934,15955]},{"content":"Create a Win32-based project as shown in \"To create a Win32-based project\" earlier in this walkthrough.","pos":[15965,16068]},{"content":"Copy the code that follows these steps and then paste it in the GT_HelloWorldWin32.cpp source file.","pos":[16078,16177]},{"pos":[16187,16235],"content":"On the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept>.","source":"On the **Build** menu, click **Build Solution**."},{"content":"To run the application, press F5.","pos":[16245,16278]},{"content":"A window that contains the text \"Hello World!\"","pos":[16279,16325]},{"content":"should appear in the upper-left corner of the display.","pos":[16326,16380]},{"content":"Code","pos":[16390,16394]},{"content":"See Also","pos":[20504,20512]},{"content":"Windows Desktop Applications","pos":[20517,20545]}],"content":"---\ntitle: \"Walkthrough: Creating Windows Desktop Applications (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"get-started-article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Windows applications [C++], Win32\"\n  - \"WinMain\"\n  - \"Win32 applications [C++]\"\n  - \"Windows API [C++]\"\nms.assetid: a247a9af-aff1-4899-9577-5f8104a0afbb\ncaps.latest.revision: 27\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Walkthrough: Creating Windows Desktop Applications (C++)\nThis walkthrough shows how to create a traditional Windows desktop application using the C language API that has been in existence since the 1990s. This is not the modern way to create Windows programs but it is still supported and there are many applications today that still use this API. This example displays \"Hello, World!\" in a window. You can use the code that you develop in this walkthrough as a pattern to create other Windows desktop applications.  \n  \n The Win32 API (also known as the Windows API) is a C-based framework for creating Windows applications. For more information about the Win32 API, see [Windows API](https://msdn.microsoft.com/en-us/library/cc433218.aspx).  \n  \n> [!IMPORTANT]\n>  For the sake of brevity, some code statements are omitted in the text. The **Example** section at the end of this document shows the complete code.  \n  \n## Prerequisites  \n To complete this walkthrough, you must understand the fundamentals of the C++ language.  \n  \n### To create a Win32-based project  \n  \n1.  On the **File** menu, click **New** and then click **Project**.  \n  \n2.  In the **New Project** dialog box, in the left pane, click **Installed Templates**, click **Visual C++**, and then select **Win32**. In the middle pane, select **Win32 Project**.  \n  \n     In the **Name** box, type a name for the project, for example, `win32app`. Click **OK**.  \n  \n3.  On the Welcome page of the **Win32 Application Wizard**, click **Next**.  \n  \n4.  On the Application Settings page, under **Application type**, select **Windows application**. Under **Additional options**, select **Empty project**. Click **Finish** to create the project.  \n  \n5.  In **Solution Explorer**, right-click the Win32app project, click **Add**, and then click **New Item**. In the **Add New Item** dialog box, select **C++ File (.cpp)**. In the **Name** box, type a name for the file, for example, `GT_HelloWorldWin32.cpp`. Click **Add**.  \n  \n### To start a Windows desktop application  \n  \n1.  Just as every C application and C++ application must have a `main` function as its starting point, every Win32-based application must have a `WinMain` function. `WinMain` has the following syntax.  \n  \n    ```  \n    int CALLBACK WinMain(  \n      _In_ HINSTANCE hInstance,  \n      _In_ HINSTANCE hPrevInstance,  \n      _In_ LPSTR     lpCmdLine,  \n      _In_ int       nCmdShow  \n    );  \n  \n    ```  \n  \n     For information about the parameters and return value of this function, see [WinMain Function](http://msdn.microsoft.com/library/windows/desktop/ms633559).  \n  \n2.  Win32 programs require \\<windows.h>. \\<tchar.h> defines the TCHAR macro, which resolves ultimately to `wchar_t` if the UNICODE symbol is defined in your project, otherwise it resolves to `char`.  If you always build with UNICODE enabled, you don't need TCHAR and can just use wchar_t directly.  \n  \n    ```  \n    #include <windows.h>  \n    #include <tchar.h>  \n    ```  \n  \n3.  In addition to the `WinMain` function, every Windows desktop application must also have a window-procedure function. This function is typically named `WndProc` but you can name it whatever you like. `WndProc` has the following syntax.  \n  \n    ```  \n    LRESULT CALLBACK WndProc(  \n      _In_ HWND   hwnd,  \n      _In_ UINT   uMsg,  \n      _In_ WPARAM wParam,  \n      _In_ LPARAM lParam  \n    );  \n  \n    ```  \n  \n     In this function you write code to handle *messages* that the application receives from Windows when *events* occur. For example, if a user clicks an OK button in your application, Windows will send a message to you and you can write code inside your `WndProc` function that does whatever work is appropriate. This is called *handling* an event. You only handle the events that are relevant for your application.  \n  \n     For more information, see [Window Procedures](http://msdn.microsoft.com/library/windows/desktop/ms632593).  \n  \n### To add functionality to the WinMain function  \n  \n1.  In the `WinMain` function, you populate a structure of type [WNDCLASSEX](http://msdn.microsoft.com/library/windows/desktop/ms633577). This structure contains information about the window, for example, the application icon, the background color of the window, the name to display in the title bar--and very importantly, a function pointer to your window procedure. The following example shows a typical `WNDCLASSEX` structure.  \n  \n    ```  \n    WNDCLASSEX wcex;  \n  \n    wcex.cbSize = sizeof(WNDCLASSEX);  \n    wcex.style          = CS_HREDRAW | CS_VREDRAW;  \n    wcex.lpfnWndProc    = WndProc;  \n    wcex.cbClsExtra     = 0;  \n    wcex.cbWndExtra     = 0;  \n    wcex.hInstance      = hInstance;  \n    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_APPLICATION));  \n    wcex.hCursor        = LoadCursor(NULL, IDC_ARROW);  \n    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);  \n    wcex.lpszMenuName   = NULL;  \n    wcex.lpszClassName  = szWindowClass;  \n    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_APPLICATION));  \n    ```  \n  \n     For information about the fields of this structure, see [WNDCLASSEX](http://msdn.microsoft.com/library/windows/desktop/ms633577).  \n  \n2.  You must register the WNDCLASSEX with Windows so that it knows about your window and how to send messages to it. Use the [RegisterClassEx](http://msdn.microsoft.com/library/windows/desktop/ms633587) function and pass the window class structure as an argument. The _T macro is used because we use the TCHAR type.  \n  \n    ```  \n    if (!RegisterClassEx(&wcex))  \n    {  \n        MessageBox(NULL,  \n            _T(\"Call to RegisterClassEx failed!\"),  \n            _T(\"Win32 Guided Tour\"),  \n            NULL);  \n  \n        return 1;  \n    }  \n    ```  \n  \n3.  Now you can create a window. Use the [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) function.  \n  \n    ```  \n    static TCHAR szWindowClass[] = _T(\"win32app\");  \n    static TCHAR szTitle[] = _T(\"Win32 Guided Tour Application\");  \n  \n    // The parameters to CreateWindow explained:  \n    // szWindowClass: the name of the application  \n    // szTitle: the text that appears in the title bar  \n    // WS_OVERLAPPEDWINDOW: the type of window to create  \n    // CW_USEDEFAULT, CW_USEDEFAULT: initial position (x, y)  \n    // 500, 100: initial size (width, length)  \n    // NULL: the parent of this window  \n    // NULL: this application does not have a menu bar  \n    // hInstance: the first parameter from WinMain  \n    // NULL: not used in this application  \n    HWND hWnd = CreateWindow(  \n        szWindowClass,  \n        szTitle,  \n        WS_OVERLAPPEDWINDOW,  \n        CW_USEDEFAULT, CW_USEDEFAULT,  \n        500, 100,  \n        NULL,  \n        NULL,  \n        hInstance,  \n        NULL  \n    );  \n    if (!hWnd)  \n    {  \n        MessageBox(NULL,  \n            _T(\"Call to CreateWindow failed!\"),  \n            _T(\"Win32 Guided Tour\"),  \n            NULL);  \n  \n        return 1;  \n    }  \n    ```  \n  \n     This function returns an HWND, which is a handle to a window. A handle is somewhat like a pointer that Windows uses to keep track of open windows. For more information, see [Windows Data Types](http://msdn.microsoft.com/library/windows/desktop/aa383751).  \n  \n4.  At this point the window has been created, but we still need to tell Windows to make it visible. That's what this code does:  \n  \n    ```  \n    // The parameters to ShowWindow explained:  \n    // hWnd: the value returned from CreateWindow  \n    // nCmdShow: the fourth parameter from WinMain  \n    ShowWindow(hWnd,  \n        nCmdShow);  \n    UpdateWindow(hWnd);  \n    ```  \n  \n     At this point, the displayed window will not have much content because you have not yet implemented the `WndProc` function. In other words, the application is not yet handling the messages that Windows is now sending to it.  \n  \n5.  To handle the messages we first add a message loop to listen for the messages that Windows sends. When the application receives a message, this loop dispatches it to your `WndProc` function to be handled. The message loop resembles the following code.  \n  \n    ```  \n    MSG msg;  \n    while (GetMessage(&msg, NULL, 0, 0))  \n    {  \n        TranslateMessage(&msg);  \n        DispatchMessage(&msg);  \n    }  \n  \n    return (int) msg.wParam;  \n    ```  \n  \n     For more information about the structures and functions in the message loop, see [MSG](http://msdn.microsoft.com/library/windows/desktop/ms644958), [GetMessage](http://msdn.microsoft.com/library/windows/desktop/ms644936), [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955), and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934).  \n  \n     At this point, the `WinMain` function should resemble the following code.  \n  \n    ```  \n    int WINAPI WinMain(HINSTANCE hInstance,  \n                       HINSTANCE hPrevInstance,  \n                       LPSTR lpCmdLine,  \n                       int nCmdShow)  \n    {  \n        WNDCLASSEX wcex;  \n  \n        wcex.cbSize = sizeof(WNDCLASSEX);  \n        wcex.style          = CS_HREDRAW | CS_VREDRAW;  \n        wcex.lpfnWndProc    = WndProc;  \n        wcex.cbClsExtra     = 0;  \n        wcex.cbWndExtra     = 0;  \n        wcex.hInstance      = hInstance;  \n        wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_APPLICATION));  \n        wcex.hCursor        = LoadCursor(NULL, IDC_ARROW);  \n        wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);  \n        wcex.lpszMenuName   = NULL;  \n        wcex.lpszClassName  = szWindowClass;  \n        wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_APPLICATION));  \n  \n        if (!RegisterClassEx(&wcex))  \n        {  \n            MessageBox(NULL,  \n                _T(\"Call to RegisterClassEx failed!\"),  \n                _T(\"Win32 Guided Tour\"),  \n                NULL);  \n  \n            return 1;  \n        }  \n  \n        hInst = hInstance; // Store instance handle in our global variable  \n  \n        // The parameters to CreateWindow explained:  \n        // szWindowClass: the name of the application  \n        // szTitle: the text that appears in the title bar  \n        // WS_OVERLAPPEDWINDOW: the type of window to create  \n        // CW_USEDEFAULT, CW_USEDEFAULT: initial position (x, y)  \n        // 500, 100: initial size (width, length)  \n        // NULL: the parent of this window  \n        // NULL: this application dows not have a menu bar  \n        // hInstance: the first parameter from WinMain  \n        // NULL: not used in this application  \n        HWND hWnd = CreateWindow(  \n            szWindowClass,  \n            szTitle,  \n            WS_OVERLAPPEDWINDOW,  \n            CW_USEDEFAULT, CW_USEDEFAULT,  \n            500, 100,  \n            NULL,  \n            NULL,  \n            hInstance,  \n            NULL  \n        );  \n  \n        if (!hWnd)  \n        {  \n            MessageBox(NULL,  \n                _T(\"Call to CreateWindow failed!\"),  \n                _T(\"Win32 Guided Tour\"),  \n                NULL);  \n  \n            return 1;  \n        }  \n  \n        // The parameters to ShowWindow explained:  \n        // hWnd: the value returned from CreateWindow  \n        // nCmdShow: the fourth parameter from WinMain  \n        ShowWindow(hWnd,  \n            nCmdShow);  \n        UpdateWindow(hWnd);  \n  \n        // Main message loop:  \n        MSG msg;  \n        while (GetMessage(&msg, NULL, 0, 0))  \n        {  \n            TranslateMessage(&msg);  \n            DispatchMessage(&msg);  \n        }  \n  \n        return (int) msg.wParam;  \n    }  \n    ```  \n  \n### To add functionality to the WndProc function  \n  \n1.  To enable the `WndProc` function to handle the messages that the application receives, implement a switch statement.  \n  \n     One important message to handle is the [WM_PAINT](http://msdn.microsoft.com/library/windows/desktop/dd145213) message. The application receives this message when part of its displayed window must be updated. This event can occur when a user moves a window in front of your window, then moves it away again. Your application doesn't know when events like this occur; only Windows knows, so it notifies you with WM_PAINT. When the window is first displayed, all of it must be updated.  \n  \n     To handle a `WM_PAINT` message, first call [BeginPaint](http://msdn.microsoft.com/library/windows/desktop/dd183362), then handle all the logic to lay out the text, buttons, and other controls in the window, and then call [EndPaint](http://msdn.microsoft.com/library/windows/desktop/dd162598). For this application, the logic between the beginning call and the ending call is to display the string \"Hello, World!\" in the window. In the following code, notice that the [TextOut](http://msdn.microsoft.com/library/windows/desktop/dd145133) function is used to display the string.  \n  \n    ```  \n    PAINTSTRUCT ps;  \n    HDC hdc;  \n    TCHAR greeting[] = _T(\"Hello, World!\");  \n  \n    switch (message)  \n    {  \n    case WM_PAINT:  \n        hdc = BeginPaint(hWnd, &ps);  \n  \n        // Here your application is laid out.  \n        // For this introduction, we just print out \"Hello, World!\"  \n        // in the top left corner.  \n        TextOut(hdc,  \n            5, 5,  \n            greeting, _tcslen(greeting));  \n        // End application-specific layout section.  \n  \n        EndPaint(hWnd, &ps);  \n        break;  \n    }  \n    ```  \n  \n     HDC in the previous code is a handle to a device context, which is a data structure that Windows uses to enable your application to communicate with the graphics subsystem. The BeginPaint and EndPaint functions ensure that your application behaves like a good citizen and doesn't use the device context for longer than it needs to. This helps ensure the graphics subsystem is available for use by other applications.  \n  \n2.  An application typically handles many other messages, for example, [WM_CREATE](http://msdn.microsoft.com/library/windows/desktop/ms632619) when a window is first created, and [WM_DESTROY](http://msdn.microsoft.com/library/windows/desktop/ms632620) when the window is closed. The following code shows a basic but complete `WndProc` function.  \n  \n    ```  \n    LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)  \n    {  \n        PAINTSTRUCT ps;  \n        HDC hdc;  \n        TCHAR greeting[] = _T(\"Hello, World!\");  \n  \n        switch (message)  \n        {  \n        case WM_PAINT:  \n            hdc = BeginPaint(hWnd, &ps);  \n  \n            // Here your application is laid out.  \n            // For this introduction, we just print out \"Hello, World!\"  \n            // in the top left corner.  \n            TextOut(hdc,  \n                5, 5,  \n                greeting, _tcslen(greeting));  \n            // End application specific layout section.  \n  \n            EndPaint(hWnd, &ps);  \n            break;  \n        case WM_DESTROY:  \n            PostQuitMessage(0);  \n            break;  \n        default:  \n            return DefWindowProc(hWnd, message, wParam, lParam);  \n            break;  \n        }  \n  \n        return 0;  \n    }  \n    ```  \n  \n##  <a name=\"example\"></a> Example  \n  \n#### To build this example  \n  \n1.  Create a Win32-based project as shown in \"To create a Win32-based project\" earlier in this walkthrough.  \n  \n2.  Copy the code that follows these steps and then paste it in the GT_HelloWorldWin32.cpp source file.  \n  \n3.  On the **Build** menu, click **Build Solution**.  \n  \n4.  To run the application, press F5. A window that contains the text \"Hello World!\" should appear in the upper-left corner of the display.  \n  \n### Code  \n  \n```  \n// GT_HelloWorldWin32.cpp  \n// compile with: /D_UNICODE /DUNICODE /DWIN32 /D_WINDOWS /c  \n  \n#include <windows.h>  \n#include <stdlib.h>  \n#include <string.h>  \n#include <tchar.h>  \n  \n// Global variables  \n  \n// The main window class name.  \nstatic TCHAR szWindowClass[] = _T(\"win32app\");  \n  \n// The string that appears in the application's title bar.  \nstatic TCHAR szTitle[] = _T(\"Win32 Guided Tour Application\");  \n  \nHINSTANCE hInst;  \n  \n// Forward declarations of functions included in this code module:  \nLRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);  \n  \nint CALLBACK WinMain(  \n    _In_ HINSTANCE hInstance,  \n    _In_ HINSTANCE hPrevInstance,  \n    _In_ LPSTR     lpCmdLine,  \n    _In_ int       nCmdShow  \n)  \n{  \n    WNDCLASSEX wcex;  \n  \n    wcex.cbSize = sizeof(WNDCLASSEX);  \n    wcex.style          = CS_HREDRAW | CS_VREDRAW;  \n    wcex.lpfnWndProc    = WndProc;  \n    wcex.cbClsExtra     = 0;  \n    wcex.cbWndExtra     = 0;  \n    wcex.hInstance      = hInstance;  \n    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_APPLICATION));  \n    wcex.hCursor        = LoadCursor(NULL, IDC_ARROW);  \n    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);  \n    wcex.lpszMenuName   = NULL;  \n    wcex.lpszClassName  = szWindowClass;  \n    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_APPLICATION));  \n  \n    if (!RegisterClassEx(&wcex))  \n    {  \n        MessageBox(NULL,  \n            _T(\"Call to RegisterClassEx failed!\"),  \n            _T(\"Win32 Guided Tour\"),  \n            NULL);  \n  \n        return 1;  \n    }  \n  \n    hInst = hInstance; // Store instance handle in our global variable  \n  \n    // The parameters to CreateWindow explained:  \n    // szWindowClass: the name of the application  \n    // szTitle: the text that appears in the title bar  \n    // WS_OVERLAPPEDWINDOW: the type of window to create  \n    // CW_USEDEFAULT, CW_USEDEFAULT: initial position (x, y)  \n    // 500, 100: initial size (width, length)  \n    // NULL: the parent of this window  \n    // NULL: this application does not have a menu bar  \n    // hInstance: the first parameter from WinMain  \n    // NULL: not used in this application  \n    HWND hWnd = CreateWindow(  \n        szWindowClass,  \n        szTitle,  \n        WS_OVERLAPPEDWINDOW,  \n        CW_USEDEFAULT, CW_USEDEFAULT,  \n        500, 100,  \n        NULL,  \n        NULL,  \n        hInstance,  \n        NULL  \n    );  \n  \n    if (!hWnd)  \n    {  \n        MessageBox(NULL,  \n            _T(\"Call to CreateWindow failed!\"),  \n            _T(\"Win32 Guided Tour\"),  \n            NULL);  \n  \n        return 1;  \n    }  \n  \n    // The parameters to ShowWindow explained:  \n    // hWnd: the value returned from CreateWindow  \n    // nCmdShow: the fourth parameter from WinMain  \n    ShowWindow(hWnd,  \n        nCmdShow);  \n    UpdateWindow(hWnd);  \n  \n    // Main message loop:  \n    MSG msg;  \n    while (GetMessage(&msg, NULL, 0, 0))  \n    {  \n        TranslateMessage(&msg);  \n        DispatchMessage(&msg);  \n    }  \n  \n    return (int) msg.wParam;  \n}  \n  \n//  \n//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)  \n//  \n//  PURPOSE:  Processes messages for the main window.  \n//  \n//  WM_PAINT    - Paint the main window  \n//  WM_DESTROY  - post a quit message and return  \n//  \n//  \nLRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)  \n{  \n    PAINTSTRUCT ps;  \n    HDC hdc;  \n    TCHAR greeting[] = _T(\"Hello, World!\");  \n  \n    switch (message)  \n    {  \n    case WM_PAINT:  \n        hdc = BeginPaint(hWnd, &ps);  \n  \n        // Here your application is laid out.  \n        // For this introduction, we just print out \"Hello, World!\"  \n        // in the top left corner.  \n        TextOut(hdc,  \n            5, 5,  \n            greeting, _tcslen(greeting));  \n        // End application-specific layout section.  \n  \n        EndPaint(hWnd, &ps);  \n        break;  \n    case WM_DESTROY:  \n        PostQuitMessage(0);  \n        break;  \n    default:  \n        return DefWindowProc(hWnd, message, wParam, lParam);  \n        break;  \n    }  \n  \n    return 0;  \n}  \n```  \n  \n## See Also  \n [Windows Desktop Applications](../windows/windows-desktop-applications-cpp.md)"}