{"nodes":[{"pos":[12,46],"content":"CAtlModuleT Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAtlModuleT Class | Microsoft Docs","pos":[0,34]}]},{"content":"CAtlModuleT Class","pos":[703,720]},{"content":"This class implements an ATL module.","pos":[721,757]},{"content":"Syntax","pos":[766,772]},{"content":"Parameters","pos":[875,885]},{"content":"Your class derived from <ph id=\"ph1\">`CAtlModuleT`</ph>.","pos":[896,934],"source":" Your class derived from `CAtlModuleT`."},{"content":"Members","pos":[943,950]},{"content":"Public Constructors","pos":[960,979]},{"content":"Name","pos":[986,990]},{"content":"Description","pos":[991,1002]},{"content":"CAtlModuleT::CAtlModuleT","pos":[1041,1065]},{"content":"The constructor.","pos":[1094,1110]},{"content":"Public Methods","pos":[1121,1135]},{"content":"Name","pos":[1142,1146]},{"content":"Description","pos":[1147,1158]},{"content":"CAtlModuleT::InitLibId","pos":[1197,1219]},{"content":"Initializes the data member containing the GUID of the current module.","pos":[1246,1316]},{"content":"CAtlModuleT::RegisterAppId","pos":[1322,1348]},{"content":"Adds the EXE to the registry.","pos":[1379,1408]},{"content":"CAtlModuleT::RegisterServer","pos":[1414,1441]},{"content":"Adds the service to the registry.","pos":[1473,1506]},{"content":"CAtlModuleT::UnregisterAppId","pos":[1512,1540]},{"content":"Removes the EXE from the registry.","pos":[1573,1607]},{"content":"CAtlModuleT::UnregisterServer","pos":[1613,1642]},{"content":"Removes the service from the registry.","pos":[1676,1714]},{"content":"CAtlModuleT::UpdateRegistryAppId","pos":[1720,1752]},{"content":"Updates the EXE information in the registry.","pos":[1789,1833]},{"content":"Remarks","pos":[1843,1850]},{"content":", derived from <bpt id=\"p1\">[</bpt>CAtlModule<ept id=\"p1\">](../../atl/reference/catlmodule-class.md)</ept>, implements an Executable (EXE) or a Service (EXE) ATL module.","pos":[1867,1998],"source":", derived from [CAtlModule](../../atl/reference/catlmodule-class.md), implements an Executable (EXE) or a Service (EXE) ATL module."},{"content":"An Executable module is a local, out-of-process server, whereas a Service module is a Windows application that runs in the background when Windows starts.","pos":[1999,2153]},{"pos":[2174,2254],"content":"provides support for initializing, registering, and unregistering of the module."},{"content":"Inheritance Hierarchy","pos":[2263,2284]},{"content":"_ATL_MODULE","pos":[2289,2300]},{"content":"CAtlModule","pos":[2339,2349]},{"content":"Requirements","pos":[2420,2432]},{"pos":[2436,2457],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlbase.h","source":"**Header:** atlbase.h"},{"pos":[2508,2532],"content":"CAtlModuleT::CAtlModuleT"},{"content":"The constructor.","pos":[2536,2552]},{"content":"Remarks","pos":[2598,2605]},{"pos":[2609,2665],"content":"Calls <bpt id=\"p1\">[</bpt>CAtlModuleT::InitLibId<ept id=\"p1\">](#catlmodulet__initlibid)</ept>.","source":"Calls [CAtlModuleT::InitLibId](#catlmodulet__initlibid)."},{"pos":[2714,2736],"content":"CAtlModuleT::InitLibId"},{"content":"Initializes the data member containing the GUID of the current module.","pos":[2740,2810]},{"content":"Remarks","pos":[2866,2873]},{"pos":[2877,2957],"content":"Called by the constructor <bpt id=\"p1\">[</bpt>CAtlModuleT::CAtlModuleT<ept id=\"p1\">](#catlmodulet__catlmodulet)</ept>.","source":"Called by the constructor [CAtlModuleT::CAtlModuleT](#catlmodulet__catlmodulet)."},{"pos":[3010,3036],"content":"CAtlModuleT::RegisterAppId"},{"content":"Adds the EXE to the registry.","pos":[3040,3069]},{"content":"Return Value","pos":[3125,3137]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[3141,3197]},{"pos":[3251,3278],"content":"CAtlModuleT::RegisterServer"},{"content":"Adds the service to the registry.","pos":[3282,3315]},{"content":"Parameters","pos":[3433,3443]},{"content":"TRUE if the type library is to be registered.","pos":[3464,3509]},{"content":"The default value is FALSE.","pos":[3510,3537]},{"content":"Points to the CLSID of the object to be registered.","pos":[3556,3607]},{"content":"If NULL (the default value), all objects in the object map will be registered.","pos":[3608,3686]},{"content":"Return Value","pos":[3696,3708]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[3712,3768]},{"pos":[3823,3851],"content":"CAtlModuleT::UnregisterAppId"},{"content":"Removes the EXE from the registry.","pos":[3855,3889]},{"content":"Return Value","pos":[3947,3959]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[3963,4019]},{"pos":[4075,4104],"content":"CAtlModuleT::UnregisterServer"},{"content":"Removes the service from the registry.","pos":[4108,4146]},{"content":"Parameters","pos":[4260,4270]},{"content":"TRUE if the type library is also to be unregistered.","pos":[4293,4345]},{"content":"Points to the CLSID of the object to be unregistered.","pos":[4364,4417]},{"content":"If NULL (the default value), all objects in the object map will be unregistered.","pos":[4418,4498]},{"content":"Return Value","pos":[4508,4520]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[4524,4580]},{"pos":[4639,4671],"content":"CAtlModuleT::UpdateRegistryAppId"},{"content":"Updates the EXE information in the registry.","pos":[4675,4719]},{"content":"Parameters","pos":[4815,4825]},{"content":"Reserved.","pos":[4844,4853]},{"content":"Return Value","pos":[4863,4875]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[4879,4935]},{"content":"See Also","pos":[4944,4952]},{"content":"CAtlModule Class","pos":[4957,4973]},{"content":"Class Overview","pos":[5021,5035]},{"content":"Module Classes","pos":[5075,5089]}],"content":"---\ntitle: \"CAtlModuleT Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CAtlModuleT<T>\"\n  - \"ATL.CAtlModuleT\"\n  - \"ATL.CAtlModuleT<T>\"\n  - \"ATL::CAtlModuleT\"\n  - \"CAtlModuleT\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAtlModuleT class\"\nms.assetid: 9b74d02f-9117-47b1-a05e-c5945f83dd2b\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAtlModuleT Class\nThis class implements an ATL module.  \n  \n## Syntax  \n  \n```\ntemplate <class T>\n    class ATL_NO_VTABLE CAtlModuleT :\n    public CAtlModule\n```  \n  \n#### Parameters  \n `T`  \n Your class derived from `CAtlModuleT`.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlModuleT::CAtlModuleT](#catlmodulet__catlmodulet)|The constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlModuleT::InitLibId](#catlmodulet__initlibid)|Initializes the data member containing the GUID of the current module.|  \n|[CAtlModuleT::RegisterAppId](#catlmodulet__registerappid)|Adds the EXE to the registry.|  \n|[CAtlModuleT::RegisterServer](#catlmodulet__registerserver)|Adds the service to the registry.|  \n|[CAtlModuleT::UnregisterAppId](#catlmodulet__unregisterappid)|Removes the EXE from the registry.|  \n|[CAtlModuleT::UnregisterServer](#catlmodulet__unregisterserver)|Removes the service from the registry.|  \n|[CAtlModuleT::UpdateRegistryAppId](#catlmodulet__updateregistryappid)|Updates the EXE information in the registry.|  \n  \n## Remarks  \n `CAtlModuleT`, derived from [CAtlModule](../../atl/reference/catlmodule-class.md), implements an Executable (EXE) or a Service (EXE) ATL module. An Executable module is a local, out-of-process server, whereas a Service module is a Windows application that runs in the background when Windows starts.  \n  \n `CAtlModuleT` provides support for initializing, registering, and unregistering of the module.  \n  \n## Inheritance Hierarchy  \n [_ATL_MODULE](atl-typedefs.md#_atl_module)  \n\n  \n [CAtlModule](../../atl/reference/catlmodule-class.md)  \n  \n `CAtlModuleT`  \n  \n## Requirements  \n **Header:** atlbase.h  \n  \n##  <a name=\"catlmodulet__catlmodulet\"></a>  CAtlModuleT::CAtlModuleT  \n The constructor.  \n  \n```\nCAtlModuleT() throw();\n```  \n  \n### Remarks  \n Calls [CAtlModuleT::InitLibId](#catlmodulet__initlibid).  \n  \n##  <a name=\"catlmodulet__initlibid\"></a>  CAtlModuleT::InitLibId  \n Initializes the data member containing the GUID of the current module.  \n  \n```\nstatic void InitLibId() throw();\n```  \n  \n### Remarks  \n Called by the constructor [CAtlModuleT::CAtlModuleT](#catlmodulet__catlmodulet).  \n  \n##  <a name=\"catlmodulet__registerappid\"></a>  CAtlModuleT::RegisterAppId  \n Adds the EXE to the registry.  \n  \n```\nHRESULT RegisterAppId() throw();\n```  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"catlmodulet__registerserver\"></a>  CAtlModuleT::RegisterServer  \n Adds the service to the registry.  \n  \n```\nHRESULT RegisterServer(\n    BOOL bRegTypeLib = FALSE,\n    const CLSID* pCLSID = NULL) throw();\n```  \n  \n### Parameters  \n `bRegTypeLib`  \n TRUE if the type library is to be registered. The default value is FALSE.  \n  \n `pCLSID`  \n Points to the CLSID of the object to be registered. If NULL (the default value), all objects in the object map will be registered.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"catlmodulet__unregisterappid\"></a>  CAtlModuleT::UnregisterAppId  \n Removes the EXE from the registry.  \n  \n```\nHRESULT UnregisterAppId() throw();\n```  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"catlmodulet__unregisterserver\"></a>  CAtlModuleT::UnregisterServer  \n Removes the service from the registry.  \n  \n```\nHRESULT UnregisterServer(\n    BOOL bUnRegTypeLib,\n    const CLSID* pCLSID = NULL) throw();\n```  \n  \n### Parameters  \n `bUnRegTypeLib`  \n TRUE if the type library is also to be unregistered.  \n  \n `pCLSID`  \n Points to the CLSID of the object to be unregistered. If NULL (the default value), all objects in the object map will be unregistered.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"catlmodulet__updateregistryappid\"></a>  CAtlModuleT::UpdateRegistryAppId  \n Updates the EXE information in the registry.  \n  \n```\nstatic HRESULT WINAPI UpdateRegistryAppId(BOOL  /* bRegister*/) throw();\n```  \n  \n### Parameters  \n `bRegister`  \n Reserved.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n## See Also  \n [CAtlModule Class](../../atl/reference/catlmodule-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)   \n [Module Classes](../../atl/atl-module-classes.md)\n"}