<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f22f3258427e5bfe167ab93df1dd7979d75684c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\importing-using-def-files.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e279d193740e078872dd3dee7b4efe549e4a873</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50c5e5ecdc4c9c111503b6df5bb40c6fd7bd654f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Importing Using DEF Files | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Importing Using DEF Files</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If you choose to use <bpt id="p1">**</bpt>__declspec(dllimport)<ept id="p1">**</ept> along with a .def file, you should change the .def file to use DATA in place of CONSTANT to reduce the likelihood that incorrect coding will cause a problem:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following table shows why.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Keyword</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Emits in the import library</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Exports</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>__declspec(dllimport)<ept id="p1">**</ept> and CONSTANT lists both the <ph id="ph1">`imp`</ph> version and the undecorated name in the .lib DLL import library that is created to allow explicit linking.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>__declspec(dllimport)<ept id="p1">**</ept> and DATA lists just the <ph id="ph1">`imp`</ph> version of the name.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you use CONSTANT, either of the following code constructs can be used to access <ph id="ph1">`ulDataInDll`</ph>:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, if you use DATA in your .def file, only code compiled with the following definition can access the variable <ph id="ph1">`ulDataInDll`</ph>:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using CONSTANT is more risky because if you forget to use the extra level of indirection, you could potentially access the import address table's pointer to the variable â€” not the variable itself.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This type of problem can often manifest as an access violation because the import address table is currently made read-only by the compiler and linker.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The current Visual C++ linker issues a warning if it sees CONSTANT in the .def file to account for this case.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The only real reason to use CONSTANT is if you cannot recompile some object file where the header file did not list <bpt id="p1">**</bpt>__declspec(dllimport)<ept id="p1">**</ept> on the prototype.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Importing into an Application</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>