{"nodes":[{"pos":[12,56],"content":"Multidimensional Arrays (C) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Multidimensional Arrays (C) | Microsoft Docs","pos":[0,44]}]},{"content":"Multidimensional Arrays (C)","pos":[659,686]},{"content":"A subscript expression can also have multiple subscripts, as follows:","pos":[687,756]},{"content":"Subscript expressions associate from left to right.","pos":[840,891]},{"content":"The leftmost subscript expression, <bpt id=\"p1\">*</bpt>expression1<ept id=\"p1\">*</ept><bpt id=\"p2\">**</bpt>[<ept id=\"p2\">**</ept><bpt id=\"p3\">*</bpt>expression2<ept id=\"p3\">*</ept><bpt id=\"p4\">**</bpt>]<ept id=\"p4\">**</ept>, is evaluated first.","pos":[892,984],"source":" The leftmost subscript expression, *expression1***[***expression2***]**, is evaluated first."},{"content":"The address that results from adding <bpt id=\"p1\">*</bpt>expression1<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>expression2<ept id=\"p2\">*</ept> forms a pointer expression; then <bpt id=\"p3\">*</bpt>expression3<ept id=\"p3\">*</ept> is added to this pointer expression to form a new pointer expression, and so on until the last subscript expression has been added.","pos":[985,1232],"source":" The address that results from adding *expression1* and *expression2* forms a pointer expression; then *expression3* is added to this pointer expression to form a new pointer expression, and so on until the last subscript expression has been added."},{"content":"The indirection operator (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>) is applied after the last subscripted expression is evaluated, unless the final pointer value addresses an array type (see examples below).","pos":[1233,1406],"source":" The indirection operator (**\\***) is applied after the last subscripted expression is evaluated, unless the final pointer value addresses an array type (see examples below)."},{"content":"Expressions with multiple subscripts refer to elements of \"multidimensional arrays.\"","pos":[1413,1497]},{"content":"A multidimensional array is an array whose elements are arrays.","pos":[1498,1561]},{"content":"For example, the first element of a three-dimensional array is an array with two dimensions.","pos":[1562,1654]},{"content":"Examples","pos":[1663,1671]},{"pos":[1675,1806],"content":"For the following examples, an array named <ph id=\"ph1\">`prop`</ph> is declared with three elements, each of which is a 4-by-6 array of <ph id=\"ph2\">`int`</ph> values.","source":"For the following examples, an array named `prop` is declared with three elements, each of which is a 4-by-6 array of `int` values."},{"pos":[1874,1922],"content":"A reference to the <ph id=\"ph1\">`prop`</ph> array looks like this:","source":"A reference to the `prop` array looks like this:"},{"content":"The example above shows how to refer to the second individual <ph id=\"ph1\">`int`</ph> element of <ph id=\"ph2\">`prop`</ph>.","pos":[1965,2051],"source":"The example above shows how to refer to the second individual `int` element of `prop`."},{"content":"Arrays are stored by row, so the last subscript varies most quickly; the expression <ph id=\"ph1\">`prop[0][0][2]`</ph> refers to the next (third) element of the array, and so on.","pos":[2052,2211],"source":" Arrays are stored by row, so the last subscript varies most quickly; the expression `prop[0][0][2]` refers to the next (third) element of the array, and so on."},{"content":"This statement is a more complex reference to an individual element of <ph id=\"ph1\">`prop`</ph>.","pos":[2254,2332],"source":"This statement is a more complex reference to an individual element of `prop`."},{"content":"The expression is evaluated as follows:","pos":[2333,2372]},{"content":"The first subscript, <ph id=\"ph1\">`2`</ph>, is multiplied by the size of a 4-by-6 <ph id=\"ph2\">`int`</ph> array and added to the pointer value <ph id=\"ph3\">`prop`</ph>.","pos":[2382,2496],"source":"The first subscript, `2`, is multiplied by the size of a 4-by-6 `int` array and added to the pointer value `prop`."},{"content":"The result points to the third 4-by-6 array of <ph id=\"ph1\">`prop`</ph>.","pos":[2497,2551],"source":" The result points to the third 4-by-6 array of `prop`."},{"pos":[2561,2693],"content":"The second subscript, <ph id=\"ph1\">`1`</ph>, is multiplied by the size of the 6-element <ph id=\"ph2\">`int`</ph> array and added to the address represented by <ph id=\"ph3\">`prop[2]`</ph>.","source":"The second subscript, `1`, is multiplied by the size of the 6-element `int` array and added to the address represented by `prop[2]`."},{"content":"Each element of the 6-element array is an <ph id=\"ph1\">`int`</ph> value, so the final subscript, <ph id=\"ph2\">`3`</ph>, is multiplied by the size of an <ph id=\"ph3\">`int`</ph> before it is added to <ph id=\"ph4\">`prop[2][1]`</ph>.","pos":[2703,2860],"source":"Each element of the 6-element array is an `int` value, so the final subscript, `3`, is multiplied by the size of an `int` before it is added to `prop[2][1]`."},{"content":"The resulting pointer addresses the fourth element of the 6-element array.","pos":[2861,2935]},{"content":"The indirection operator is applied to the pointer value.","pos":[2945,3002]},{"content":"The result is the <ph id=\"ph1\">`int`</ph> element at that address.","pos":[3003,3051],"source":" The result is the `int` element at that address."},{"content":"These next two examples show cases where the indirection operator is not applied.","pos":[3058,3139]},{"content":"In the first of these statements, the expression <ph id=\"ph1\">`prop[2][1]`</ph> is a valid reference to the three-dimensional array <ph id=\"ph2\">`prop`</ph>; it refers to a 6-element array (declared above).","pos":[3200,3370],"source":"In the first of these statements, the expression `prop[2][1]` is a valid reference to the three-dimensional array `prop`; it refers to a 6-element array (declared above)."},{"content":"Since the pointer value addresses an array, the indirection operator is not applied.","pos":[3371,3455]},{"pos":[3462,3607],"content":"Similarly, the result of the expression <ph id=\"ph1\">`prop[2]`</ph> in the second statement <ph id=\"ph2\">`ipp = prop[2];`</ph> is a pointer value addressing a two-dimensional array.","source":"Similarly, the result of the expression `prop[2]` in the second statement `ipp = prop[2];` is a pointer value addressing a two-dimensional array."},{"content":"See Also","pos":[3616,3624]},{"content":"Subscript Operator:","pos":[3629,3648]}],"content":"---\ntitle: \"Multidimensional Arrays (C) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"arrays [C], multidimensional\"\n  - \"multidimensional arrays\"\n  - \"subscript expressions\"\nms.assetid: 4ba5c360-1f17-4575-b370-45f62e1f2bc2\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Multidimensional Arrays (C)\nA subscript expression can also have multiple subscripts, as follows:  \n  \n```  \n  \nexpression1  \n[  \nexpression2  \n] [  \nexpression3  \n]...  \n```  \n  \n Subscript expressions associate from left to right. The leftmost subscript expression, *expression1***[***expression2***]**, is evaluated first. The address that results from adding *expression1* and *expression2* forms a pointer expression; then *expression3* is added to this pointer expression to form a new pointer expression, and so on until the last subscript expression has been added. The indirection operator (**\\***) is applied after the last subscripted expression is evaluated, unless the final pointer value addresses an array type (see examples below).  \n  \n Expressions with multiple subscripts refer to elements of \"multidimensional arrays.\" A multidimensional array is an array whose elements are arrays. For example, the first element of a three-dimensional array is an array with two dimensions.  \n  \n## Examples  \n For the following examples, an array named `prop` is declared with three elements, each of which is a 4-by-6 array of `int` values.  \n  \n```  \nint prop[3][4][6];  \nint i, *ip, (*ipp)[6];  \n```  \n  \n A reference to the `prop` array looks like this:  \n  \n```  \ni = prop[0][0][1];  \n```  \n  \n The example above shows how to refer to the second individual `int` element of `prop`. Arrays are stored by row, so the last subscript varies most quickly; the expression `prop[0][0][2]` refers to the next (third) element of the array, and so on.  \n  \n```  \ni = prop[2][1][3];  \n```  \n  \n This statement is a more complex reference to an individual element of `prop`. The expression is evaluated as follows:  \n  \n1.  The first subscript, `2`, is multiplied by the size of a 4-by-6 `int` array and added to the pointer value `prop`. The result points to the third 4-by-6 array of `prop`.  \n  \n2.  The second subscript, `1`, is multiplied by the size of the 6-element `int` array and added to the address represented by `prop[2]`.  \n  \n3.  Each element of the 6-element array is an `int` value, so the final subscript, `3`, is multiplied by the size of an `int` before it is added to `prop[2][1]`. The resulting pointer addresses the fourth element of the 6-element array.  \n  \n4.  The indirection operator is applied to the pointer value. The result is the `int` element at that address.  \n  \n These next two examples show cases where the indirection operator is not applied.  \n  \n```  \nip = prop[2][1];  \n  \nipp = prop[2];  \n```  \n  \n In the first of these statements, the expression `prop[2][1]` is a valid reference to the three-dimensional array `prop`; it refers to a 6-element array (declared above). Since the pointer value addresses an array, the indirection operator is not applied.  \n  \n Similarly, the result of the expression `prop[2]` in the second statement `ipp = prop[2];` is a pointer value addressing a two-dimensional array.  \n  \n## See Also  \n [Subscript Operator:](../cpp/subscript-operator.md)"}