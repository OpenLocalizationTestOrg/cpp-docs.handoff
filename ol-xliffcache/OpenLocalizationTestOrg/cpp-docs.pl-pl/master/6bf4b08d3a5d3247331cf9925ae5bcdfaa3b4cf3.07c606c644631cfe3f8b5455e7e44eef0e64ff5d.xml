{"nodes":[{"pos":[12,57],"content":"auto Storage-Class Specifier | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"auto Storage-Class Specifier | Microsoft Docs","pos":[0,45]}]},{"content":"auto Storage-Class Specifier","pos":[545,573]},{"content":"The <bpt id=\"p1\">**</bpt>auto<ept id=\"p1\">**</ept> storage-class specifier declares an automatic variable, a variable with a local lifetime.","pos":[574,676],"source":"The **auto** storage-class specifier declares an automatic variable, a variable with a local lifetime."},{"content":"An <bpt id=\"p1\">**</bpt>auto<ept id=\"p1\">**</ept> variable is visible only in the block in which it is declared.","pos":[677,751],"source":" An **auto** variable is visible only in the block in which it is declared."},{"content":"Declarations of <bpt id=\"p1\">**</bpt>auto<ept id=\"p1\">**</ept> variables can include initializers, as discussed in <bpt id=\"p2\">[</bpt>Initialization<ept id=\"p2\">](../c-language/initialization.md)</ept>.","pos":[752,879],"source":" Declarations of **auto** variables can include initializers, as discussed in [Initialization](../c-language/initialization.md)."},{"content":"Since variables with <bpt id=\"p1\">**</bpt>auto<ept id=\"p1\">**</ept> storage class are not initialized automatically, you should either explicitly initialize them when you declare them, or assign them initial values in statements within the block.","pos":[880,1088],"source":" Since variables with **auto** storage class are not initialized automatically, you should either explicitly initialize them when you declare them, or assign them initial values in statements within the block."},{"content":"The values of uninitialized <bpt id=\"p1\">**</bpt>auto<ept id=\"p1\">**</ept> variables are undefined.","pos":[1089,1150],"source":" The values of uninitialized **auto** variables are undefined."},{"content":"(A local variable of <bpt id=\"p1\">**</bpt>auto<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>register<ept id=\"p2\">**</ept> storage class is initialized each time it comes in scope if an initializer is given.)","pos":[1151,1282],"source":" (A local variable of **auto** or **register** storage class is initialized each time it comes in scope if an initializer is given.)"},{"pos":[1289,1548],"content":"An internal <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> variable (a static variable with local or block scope) can be initialized with the address of any external or <bpt id=\"p2\">**</bpt>static<ept id=\"p2\">**</ept> item, but not with the address of another <bpt id=\"p3\">**</bpt>auto<ept id=\"p3\">**</ept> item, because the address of an <bpt id=\"p4\">**</bpt>auto<ept id=\"p4\">**</ept> item is not a constant.","source":"An internal **static** variable (a static variable with local or block scope) can be initialized with the address of any external or **static** item, but not with the address of another **auto** item, because the address of an **auto** item is not a constant."},{"content":"See Also","pos":[1557,1565]},{"content":"auto Keyword","pos":[1570,1582]}],"content":"---\ntitle: \"auto Storage-Class Specifier | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nms.assetid: 8e73f57e-aa92-4e41-91ea-5c8ad2a2b332\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# auto Storage-Class Specifier\nThe **auto** storage-class specifier declares an automatic variable, a variable with a local lifetime. An **auto** variable is visible only in the block in which it is declared. Declarations of **auto** variables can include initializers, as discussed in [Initialization](../c-language/initialization.md). Since variables with **auto** storage class are not initialized automatically, you should either explicitly initialize them when you declare them, or assign them initial values in statements within the block. The values of uninitialized **auto** variables are undefined. (A local variable of **auto** or **register** storage class is initialized each time it comes in scope if an initializer is given.)  \n  \n An internal **static** variable (a static variable with local or block scope) can be initialized with the address of any external or **static** item, but not with the address of another **auto** item, because the address of an **auto** item is not a constant.  \n  \n## See Also  \n [auto Keyword](../cpp/auto-keyword.md)"}