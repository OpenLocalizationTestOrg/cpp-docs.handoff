{"nodes":[{"pos":[12,42],"content":"WeakRef Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"WeakRef Class | Microsoft Docs","pos":[0,30]}]},{"content":"WeakRef Class","pos":[644,657]},{"content":"Represents a <bpt id=\"p1\">*</bpt>weak reference<ept id=\"p1\">*</ept> that can be used by only the Windows Runtime, not classic COM.","pos":[658,750],"source":"Represents a *weak reference* that can be used by only the Windows Runtime, not classic COM."},{"content":"A weak reference represents an object that might or might not be accessible.","pos":[751,827]},{"content":"Syntax","pos":[836,842]},{"content":"Remarks","pos":[914,921]},{"content":"A WeakRef object maintains a <bpt id=\"p1\">*</bpt>strong reference<ept id=\"p1\">*</ept>, which is associated with an object, and can be valid or invalid.","pos":[925,1038],"source":"A WeakRef object maintains a *strong reference*, which is associated with an object, and can be valid or invalid."},{"content":"Call the As() or AsIID() method to obtain a strong reference.","pos":[1039,1100]},{"content":"When the strong reference is valid, it can access the associated object.","pos":[1101,1173]},{"content":"When the strong reference is invalid (<ph id=\"ph1\">`nullptr`</ph>), the associated object is inaccessible.","pos":[1174,1262],"source":" When the strong reference is invalid (`nullptr`), the associated object is inaccessible."},{"content":"A WeakRef object is typically used to represent an object whose existence is controlled by an external thread or application.","pos":[1269,1394]},{"content":"For example, construct a WeakRef object from a reference to a file object.","pos":[1395,1469]},{"content":"While the file is open, the strong reference is valid.","pos":[1470,1524]},{"content":"But if the file is closed, the strong reference becomes invalid.","pos":[1525,1589]},{"content":"Note that there is a behavior change in the <bpt id=\"p1\">[</bpt>As<ept id=\"p1\">](../windows/weakref-as-method.md)</ept>, <bpt id=\"p2\">[</bpt>AsIID<ept id=\"p2\">](../windows/weakref-asiid-method.md)</ept> and <bpt id=\"p3\">[</bpt>CopyTo<ept id=\"p3\">](../windows/weakref-copyto-method.md)</ept> methods in the Windows 10 SDK.","pos":[1596,1803],"source":"Note that there is a behavior change in the [As](../windows/weakref-as-method.md), [AsIID](../windows/weakref-asiid-method.md) and [CopyTo](../windows/weakref-copyto-method.md) methods in the Windows 10 SDK."},{"content":"Previously, after calling any of these methods, you could check the WeakRef for <ph id=\"ph1\">`nullptr`</ph> to determine if a strong reference was successfully obtained, as in the following code:","pos":[1804,1981],"source":" Previously, after calling any of these methods, you could check the WeakRef for `nullptr` to determine if a strong reference was successfully obtained, as in the following code:"},{"content":"The above code does not work when using the Windows 10 SDK (or later).","pos":[2464,2534]},{"content":"Instead, check the pointer that was passed in for <ph id=\"ph1\">`nullptr`</ph>.","pos":[2535,2595],"source":" Instead, check the pointer that was passed in for `nullptr`."},{"content":"Members","pos":[2706,2713]},{"content":"Public Constructors","pos":[2723,2742]},{"content":"Name","pos":[2749,2753]},{"content":"Description","pos":[2754,2765]},{"content":"WeakRef::WeakRef Constructor","pos":[2804,2832]},{"content":"Initializes a new instance of the WeakRef class.","pos":[2877,2925]},{"content":"WeakRef::~WeakRef Destructor","pos":[2931,2959]},{"content":"Deinitializes the current instance of the WeakRef class.","pos":[3009,3065]},{"content":"Public Methods","pos":[3076,3090]},{"content":"Name","pos":[3097,3101]},{"content":"Description","pos":[3102,3113]},{"content":"WeakRef::As Method","pos":[3152,3170]},{"content":"Sets the specified ComPtr pointer parameter to represent the specified interface.","pos":[3205,3286]},{"content":"WeakRef::AsIID Method","pos":[3292,3313]},{"content":"Sets the specified ComPtr pointer parameter to represent the specified interface ID.","pos":[3351,3435]},{"content":"WeakRef::CopyTo Method","pos":[3441,3463]},{"content":"Assigns a pointer to an interface, if available, to the specified pointer variable.","pos":[3502,3585]},{"content":"Public Operators","pos":[3596,3612]},{"content":"Name","pos":[3619,3623]},{"content":"Description","pos":[3624,3635]},{"content":"WeakRef::operator&amp; Operator","pos":[3674,3701],"source":"WeakRef::operator& Operator"},{"content":"Returns a ComPtrRef object that represents the current WeakRef object.","pos":[3754,3824]},{"content":"Inheritance Hierarchy","pos":[3834,3855]},{"content":"Requirements","pos":[3892,3904]},{"pos":[3908,3928],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> client.h","source":"**Header:** client.h"},{"pos":[3935,3964],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL","source":"**Namespace:** Microsoft::WRL"},{"content":"See Also","pos":[3973,3981]},{"content":"Microsoft::WRL Namespace","pos":[3986,4010]}],"content":"---\ntitle: \"WeakRef Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"client/Microsoft::WRL::WeakRef\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"WeakRef class\"\nms.assetid: 572be703-c641-496c-8af5-ad6164670ba1\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# WeakRef Class\nRepresents a *weak reference* that can be used by only the Windows Runtime, not classic COM. A weak reference represents an object that might or might not be accessible.  \n  \n## Syntax  \n  \n```  \nclass WeakRef : public ComPtr<IWeakReference>  \n```  \n  \n## Remarks  \n A WeakRef object maintains a *strong reference*, which is associated with an object, and can be valid or invalid. Call the As() or AsIID() method to obtain a strong reference. When the strong reference is valid, it can access the associated object. When the strong reference is invalid (`nullptr`), the associated object is inaccessible.  \n  \n A WeakRef object is typically used to represent an object whose existence is controlled by an external thread or application. For example, construct a WeakRef object from a reference to a file object. While the file is open, the strong reference is valid. But if the file is closed, the strong reference becomes invalid.  \n  \n Note that there is a behavior change in the [As](../windows/weakref-as-method.md), [AsIID](../windows/weakref-asiid-method.md) and [CopyTo](../windows/weakref-copyto-method.md) methods in the Windows 10 SDK. Previously, after calling any of these methods, you could check the WeakRef for `nullptr` to determine if a strong reference was successfully obtained, as in the following code:  \n  \n```cpp  \nWeakRef wr;  \nstrongComptrRef.AsWeak(&wr);  \n  \n// Now suppose that the object strongComPtrRef points to no longer exists  \n// and the following code tries to get a strong ref from the weak ref:  \nComPtr<ISomeInterface> strongRef;  \nHRESULT hr = wr.As(&strongRef);  \n  \n// This check won't work with the Windows 10 SDK version of the library.  \n// Check the input pointer instead.  \nif(wr == nullptr)  \n{  \n    wprintf(L\"Couldnâ€™t get strong ref!\");  \n}  \n  \n```  \n  \n The above code does not work when using the Windows 10 SDK (or later). Instead, check the pointer that was passed in for `nullptr`.  \n  \n```cpp  \nif (strongRef == nullptr)  \n{  \n    wprintf(L\"Couldn't get strong ref!\");  \n }  \n  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[WeakRef::WeakRef Constructor](../windows/weakref-weakref-constructor.md)|Initializes a new instance of the WeakRef class.|  \n|[WeakRef::~WeakRef Destructor](../windows/weakref-tilde-weakref-destructor.md)|Deinitializes the current instance of the WeakRef class.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[WeakRef::As Method](../windows/weakref-as-method.md)|Sets the specified ComPtr pointer parameter to represent the specified interface.|  \n|[WeakRef::AsIID Method](../windows/weakref-asiid-method.md)|Sets the specified ComPtr pointer parameter to represent the specified interface ID.|  \n|[WeakRef::CopyTo Method](../windows/weakref-copyto-method.md)|Assigns a pointer to an interface, if available, to the specified pointer variable.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[WeakRef::operator& Operator](../windows/weakref-operator-ampersand-operator.md)|Returns a ComPtrRef object that represents the current WeakRef object.|  \n  \n## Inheritance Hierarchy  \n `ComPtr`  \n  \n `WeakRef`  \n  \n## Requirements  \n **Header:** client.h  \n  \n **Namespace:** Microsoft::WRL  \n  \n## See Also  \n [Microsoft::WRL Namespace](../windows/microsoft-wrl-namespace.md)"}