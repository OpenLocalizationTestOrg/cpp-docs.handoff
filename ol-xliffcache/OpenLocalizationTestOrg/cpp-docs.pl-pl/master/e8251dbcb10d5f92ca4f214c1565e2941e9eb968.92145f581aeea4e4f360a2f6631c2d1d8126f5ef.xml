{"nodes":[{"pos":[12,56],"content":"CMFCBaseVisualManager Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCBaseVisualManager Class | Microsoft Docs","pos":[0,44]}]},{"pos":[855,882],"content":"CMFCBaseVisualManager Class","linkify":"CMFCBaseVisualManager Class","nodes":[{"content":"CMFCBaseVisualManager Class","pos":[0,27]}]},{"content":"A layer between derived visual managers and the Windows Theme API.","pos":[883,949]},{"pos":[956,1061],"content":"<ph id=\"ph1\">`CMFCBaseVisualManager`</ph> loads UxTheme.dll, if available, and manages access to Windows Theme API methods.","source":"`CMFCBaseVisualManager` loads UxTheme.dll, if available, and manages access to Windows Theme API methods."},{"content":"This class is for internal use only.","pos":[1068,1104]},{"pos":[1113,1119],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1189,1196],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1206,1225],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1246,1250]},{"content":"Description","pos":[1251,1262]},{"pos":[1267,1360],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager::CMFCBaseVisualManager<ept id=\"p1\">](#cmfcbasevisualmanager__cmfcbasevisualmanager)</ept>","source":"[CMFCBaseVisualManager::CMFCBaseVisualManager](#cmfcbasevisualmanager__cmfcbasevisualmanager)"},{"pos":[1361,1421],"content":"Constructs and initializes a <ph id=\"ph1\">`CMFCBaseVisualManager`</ph> object.","source":"Constructs and initializes a `CMFCBaseVisualManager` object."},{"content":"Destructor.","pos":[1474,1485]},{"pos":[1496,1510],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1531,1535]},{"content":"Description","pos":[1536,1547]},{"pos":[1552,1627],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager::DrawCheckBox<ept id=\"p1\">](#cmfcbasevisualmanager__drawcheckbox)</ept>","source":"[CMFCBaseVisualManager::DrawCheckBox](#cmfcbasevisualmanager__drawcheckbox)"},{"content":"Draws a check box control by using the current Windows theme.","pos":[1628,1689]},{"pos":[1694,1775],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager::DrawComboBorder<ept id=\"p1\">](#cmfcbasevisualmanager__drawcomboborder)</ept>","source":"[CMFCBaseVisualManager::DrawComboBorder](#cmfcbasevisualmanager__drawcomboborder)"},{"content":"Draws a combo box border using the current Windows theme.","pos":[1776,1833]},{"pos":[1838,1927],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager::DrawComboDropButton<ept id=\"p1\">](#cmfcbasevisualmanager__drawcombodropbutton)</ept>","source":"[CMFCBaseVisualManager::DrawComboDropButton](#cmfcbasevisualmanager__drawcombodropbutton)"},{"content":"Draws a combo box drop-down button using the current Windows theme.","pos":[1928,1995]},{"pos":[2000,2079],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager::DrawPushButton<ept id=\"p1\">](#cmfcbasevisualmanager__drawpushbutton)</ept>","source":"[CMFCBaseVisualManager::DrawPushButton](#cmfcbasevisualmanager__drawpushbutton)"},{"content":"Draws a push button using the current Windows theme.","pos":[2080,2132]},{"pos":[2137,2218],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager::DrawRadioButton<ept id=\"p1\">](#cmfcbasevisualmanager__drawradiobutton)</ept>","source":"[CMFCBaseVisualManager::DrawRadioButton](#cmfcbasevisualmanager__drawradiobutton)"},{"content":"Draws a radio button control by using the current Windows theme.","pos":[2219,2283]},{"pos":[2288,2381],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager::DrawStatusBarProgress<ept id=\"p1\">](#cmfcbasevisualmanager__drawstatusbarprogress)</ept>","source":"[CMFCBaseVisualManager::DrawStatusBarProgress](#cmfcbasevisualmanager__drawstatusbarprogress)"},{"pos":[2382,2528],"content":"Draws a progress bar on a status bar control ( <bpt id=\"p1\">[</bpt>CMFCStatusBar Class<ept id=\"p1\">](../../mfc/reference/cmfcstatusbar-class.md)</ept>) using the current Windows theme.","source":"Draws a progress bar on a status bar control ( [CMFCStatusBar Class](../../mfc/reference/cmfcstatusbar-class.md)) using the current Windows theme."},{"pos":[2533,2610],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager::FillReBarPane<ept id=\"p1\">](#cmfcbasevisualmanager__fillrebarpane)</ept>","source":"[CMFCBaseVisualManager::FillReBarPane](#cmfcbasevisualmanager__fillrebarpane)"},{"content":"Fills the background of the rebar control by using the current Windows theme.","pos":[2611,2688]},{"pos":[2693,2790],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager::GetStandardWindowsTheme<ept id=\"p1\">](#cmfcbasevisualmanager__getstandardwindowstheme)</ept>","source":"[CMFCBaseVisualManager::GetStandardWindowsTheme](#cmfcbasevisualmanager__getstandardwindowstheme)"},{"content":"Gets the current Windows theme.","pos":[2791,2822]},{"pos":[2833,2850],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[2871,2875]},{"content":"Description","pos":[2876,2887]},{"pos":[2892,2969],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager::CleanUpThemes<ept id=\"p1\">](#cmfcbasevisualmanager__cleanupthemes)</ept>","source":"[CMFCBaseVisualManager::CleanUpThemes](#cmfcbasevisualmanager__cleanupthemes)"},{"pos":[2970,3042],"content":"Calls <ph id=\"ph1\">`CloseThemeData`</ph> for all handles obtained in <ph id=\"ph2\">`UpdateSystemColors`</ph>.","source":"Calls `CloseThemeData` for all handles obtained in `UpdateSystemColors`."},{"pos":[3047,3134],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager::UpdateSystemColors<ept id=\"p1\">](#cmfcbasevisualmanager__updatesystemcolors)</ept>","source":"[CMFCBaseVisualManager::UpdateSystemColors](#cmfcbasevisualmanager__updatesystemcolors)"},{"pos":[3135,3243],"content":"Calls <ph id=\"ph1\">`OpenThemeData`</ph> to obtain handles for drawing various controls: windows, toolbars, buttons, and so on.","source":"Calls `OpenThemeData` to obtain handles for drawing various controls: windows, toolbars, buttons, and so on."},{"pos":[3253,3260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You do not have to instantiate objects of this class directly.","pos":[3264,3326]},{"content":"Because it is a base class for all visual managers, you can just call <bpt id=\"p1\">[</bpt>CMFCVisualManager::GetInstance<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__getinstance)</ept>, obtain a pointer to the current Visual Manager, and access the methods for <ph id=\"ph1\">`CMFCBaseVisualManager`</ph> using that pointer.","pos":[3333,3634],"source":"Because it is a base class for all visual managers, you can just call [CMFCVisualManager::GetInstance](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__getinstance), obtain a pointer to the current Visual Manager, and access the methods for `CMFCBaseVisualManager` using that pointer."},{"content":"However, if you have to display a control by using the current Windows theme, it is better to use the <ph id=\"ph1\">`CMFCVisualManagerWindows`</ph> interface.","pos":[3635,3774],"source":" However, if you have to display a control by using the current Windows theme, it is better to use the `CMFCVisualManagerWindows` interface."},{"pos":[3783,3804],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3808,3855],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3862,3937],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager<ept id=\"p1\">](../../mfc/reference/cmfcbasevisualmanager-class.md)</ept>","source":"[CMFCBaseVisualManager](../../mfc/reference/cmfcbasevisualmanager-class.md)"},{"pos":[3946,3958],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3962,3992],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxvisualmanager.h","source":"**Header:** afxvisualmanager.h"},{"pos":[4002,4091],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasevisualmanager__cleanupthemes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseVisualManager::CleanUpThemes","linkify":"<a name=\"cmfcbasevisualmanager__cleanupthemes\"></a>  CMFCBaseVisualManager::CleanUpThemes","source":"<a name=\"cmfcbasevisualmanager__cleanupthemes\"></a>  CMFCBaseVisualManager::CleanUpThemes"},{"pos":[4095,4167],"content":"Calls <ph id=\"ph1\">`CloseThemeData`</ph> for all handles obtained in <ph id=\"ph2\">`UpdateSystemColors`</ph>.","source":"Calls `CloseThemeData` for all handles obtained in `UpdateSystemColors`."},{"pos":[4214,4221],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For internal use only.","pos":[4225,4247]},{"pos":[4257,4362],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasevisualmanager__cmfcbasevisualmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseVisualManager::CMFCBaseVisualManager","linkify":"<a name=\"cmfcbasevisualmanager__cmfcbasevisualmanager\"></a>  CMFCBaseVisualManager::CMFCBaseVisualManager","source":"<a name=\"cmfcbasevisualmanager__cmfcbasevisualmanager\"></a>  CMFCBaseVisualManager::CMFCBaseVisualManager"},{"pos":[4366,4426],"content":"Constructs and initializes a <ph id=\"ph1\">`CMFCBaseVisualManager`</ph> object.","source":"Constructs and initializes a `CMFCBaseVisualManager` object."},{"pos":[4476,4563],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasevisualmanager__drawcheckbox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseVisualManager::DrawCheckBox","linkify":"<a name=\"cmfcbasevisualmanager__drawcheckbox\"></a>  CMFCBaseVisualManager::DrawCheckBox","source":"<a name=\"cmfcbasevisualmanager__drawcheckbox\"></a>  CMFCBaseVisualManager::DrawCheckBox"},{"content":"Draws a check box control by using the current Windows theme.","pos":[4567,4628]},{"pos":[4807,4817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[4821,4831],"source":"[in] `pDC`"},{"content":"A pointer to a device context","pos":[4835,4864]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[4871,4882],"source":"[in] `rect`"},{"content":"The bounding rectangle of the check box.","pos":[4886,4926]},{"content":"[in] <ph id=\"ph1\">`bHighlighted`</ph>","pos":[4933,4952],"source":"[in] `bHighlighted`"},{"content":"Specifies whether the check box is highlighted.","pos":[4956,5003]},{"content":"[in] <ph id=\"ph1\">`nState`</ph>","pos":[5010,5023],"source":"[in] `nState`"},{"content":"0 for unchecked, 1 for checked normal,","pos":[5027,5065]},{"content":"2 for mixed normal.","pos":[5072,5091]},{"content":"[in] <ph id=\"ph1\">`bEnabled`</ph>","pos":[5098,5113],"source":"[in] `bEnabled`"},{"content":"Specifies whether the check box is enabled.","pos":[5117,5160]},{"content":"[in] <ph id=\"ph1\">`bPressed`</ph>","pos":[5167,5182],"source":"[in] `bPressed`"},{"content":"Specifies whether the check box is pressed.","pos":[5186,5229]},{"pos":[5239,5251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5255,5305],"content":"<ph id=\"ph1\">`TRUE`</ph> if Theme API is enabled; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if Theme API is enabled; otherwise `FALSE`."},{"pos":[5315,5322],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5326,5394],"content":"The values of <ph id=\"ph1\">`nState`</ph> correspond to the following check box styles.","source":"The values of `nState` correspond to the following check box styles."},{"content":"nState","pos":[5401,5407]},{"content":"Check box style","pos":[5408,5423]},{"content":"0","pos":[5467,5468]},{"content":"CBS_UNCHECKEDNORMAL","pos":[5469,5488]},{"content":"1","pos":[5493,5494]},{"content":"CBS_CHECKEDNORMAL","pos":[5495,5512]},{"content":"2","pos":[5517,5518]},{"content":"CBS_MIXEDNORMAL","pos":[5519,5534]},{"pos":[5545,5638],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasevisualmanager__drawcomboborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseVisualManager::DrawComboBorder","linkify":"<a name=\"cmfcbasevisualmanager__drawcomboborder\"></a>  CMFCBaseVisualManager::DrawComboBorder","source":"<a name=\"cmfcbasevisualmanager__drawcomboborder\"></a>  CMFCBaseVisualManager::DrawComboBorder"},{"content":"Draws the combo box border using the current Windows theme.","pos":[5642,5701]},{"pos":[5865,5875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[5879,5889],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[5893,5923]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[5930,5941],"source":"[in] `rect`"},{"content":"Bounding rectangle of the combo box border.","pos":[5945,5988]},{"content":"[in] <ph id=\"ph1\">`bDisabled`</ph>","pos":[5995,6011],"source":"[in] `bDisabled`"},{"content":"Specifies whether the combo box border is disabled.","pos":[6015,6066]},{"content":"[in] <ph id=\"ph1\">`bIsDropped`</ph>","pos":[6073,6090],"source":"[in] `bIsDropped`"},{"content":"Specifies whether the combo box border is dropped down.","pos":[6094,6149]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[6156,6177],"source":"[in] `bIsHighlighted`"},{"content":"Specifies whether the combo box border is highlighted.","pos":[6181,6235]},{"pos":[6245,6257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6261,6311],"content":"<ph id=\"ph1\">`TRUE`</ph> if Theme API is enabled; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if Theme API is enabled; otherwise `FALSE`."},{"pos":[6321,6422],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasevisualmanager__drawcombodropbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseVisualManager::DrawComboDropButton","linkify":"<a name=\"cmfcbasevisualmanager__drawcombodropbutton\"></a>  CMFCBaseVisualManager::DrawComboDropButton","source":"<a name=\"cmfcbasevisualmanager__drawcombodropbutton\"></a>  CMFCBaseVisualManager::DrawComboDropButton"},{"content":"Draws a combo box drop-down button using the current Windows theme.","pos":[6426,6493]},{"pos":[6661,6671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6678,6687]},{"content":"Description","pos":[6688,6699]},{"pos":[6742,6752],"content":"[in] <ph id=\"ph1\">`pDC`</ph>","source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[6753,6783]},{"pos":[6788,6799],"content":"[in] <ph id=\"ph1\">`rect`</ph>","source":"[in] `rect`"},{"content":"The bounding rectangle of the combo box drop-down button.","pos":[6800,6857]},{"pos":[6862,6878],"content":"[in] <ph id=\"ph1\">`bDisabled`</ph>","source":"[in] `bDisabled`"},{"content":"Specifies whether the combo box drop-down button is disabled.","pos":[6879,6940]},{"pos":[6945,6962],"content":"[in] <ph id=\"ph1\">`bIsDropped`</ph>","source":"[in] `bIsDropped`"},{"content":"Specifies whether the combo box drop-down button is dropped down.","pos":[6963,7028]},{"pos":[7033,7054],"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","source":"[in] `bIsHighlighted`"},{"content":"Specifies whether the combo box drop-down button is highlighted.","pos":[7055,7119]},{"pos":[7130,7142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7146,7196],"content":"<ph id=\"ph1\">`TRUE`</ph> if Theme API is enabled; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if Theme API is enabled; otherwise `FALSE`."},{"pos":[7206,7297],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasevisualmanager__drawpushbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseVisualManager::DrawPushButton","linkify":"<a name=\"cmfcbasevisualmanager__drawpushbutton\"></a>  CMFCBaseVisualManager::DrawPushButton","source":"<a name=\"cmfcbasevisualmanager__drawpushbutton\"></a>  CMFCBaseVisualManager::DrawPushButton"},{"content":"Draws a push button using the current Windows theme.","pos":[7301,7353]},{"pos":[7490,7500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[7504,7514],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[7518,7548]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[7555,7566],"source":"[in] `rect`"},{"content":"The bounding rectangle of the push button.","pos":[7570,7612]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[7619,7633],"source":"[in] `pButton`"},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>CMFCButton Class<ept id=\"p1\">](../../mfc/reference/cmfcbutton-class.md)</ept> object to draw.","pos":[7637,7729],"source":" A pointer to the [CMFCButton Class](../../mfc/reference/cmfcbutton-class.md) object to draw."},{"content":"[in] <ph id=\"ph1\">`uiState`</ph>","pos":[7736,7750],"source":"[in] `uiState`"},{"content":"Ignored.","pos":[7754,7762]},{"content":"The state is taken from <ph id=\"ph1\">`pButton`</ph>.","pos":[7763,7797],"source":" The state is taken from `pButton`."},{"pos":[7807,7819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7823,7873],"content":"<ph id=\"ph1\">`TRUE`</ph> if Theme API is enabled; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if Theme API is enabled; otherwise `FALSE`."},{"pos":[7883,7976],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasevisualmanager__drawradiobutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseVisualManager::DrawRadioButton","linkify":"<a name=\"cmfcbasevisualmanager__drawradiobutton\"></a>  CMFCBaseVisualManager::DrawRadioButton","source":"<a name=\"cmfcbasevisualmanager__drawradiobutton\"></a>  CMFCBaseVisualManager::DrawRadioButton"},{"content":"Draws a radio button control by using the current Windows theme.","pos":[7980,8044]},{"pos":[8225,8235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[8239,8249],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[8253,8283]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[8290,8301],"source":"[in] `rect`"},{"content":"The bounding rectangle of the radio button.","pos":[8305,8348]},{"content":"[in] <ph id=\"ph1\">`bHighlighted`</ph>","pos":[8355,8374],"source":"[in] `bHighlighted`"},{"content":"Specifies whether the radio button is highlighted.","pos":[8378,8428]},{"content":"[in] <ph id=\"ph1\">`bChecked`</ph>","pos":[8435,8450],"source":"[in] `bChecked`"},{"content":"Specifies whether the radio button is checked.","pos":[8454,8500]},{"content":"[in] <ph id=\"ph1\">`bEnabled`</ph>","pos":[8507,8522],"source":"[in] `bEnabled`"},{"content":"Specifies whether the radio button is enabled.","pos":[8526,8572]},{"content":"[in] <ph id=\"ph1\">`bPressed`</ph>","pos":[8579,8594],"source":"[in] `bPressed`"},{"content":"Specifies whether the radio button is pressed.","pos":[8598,8644]},{"pos":[8654,8666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8670,8720],"content":"<ph id=\"ph1\">`TRUE`</ph> if Theme API is enabled; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if Theme API is enabled; otherwise `FALSE`."},{"pos":[8730,8835],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasevisualmanager__drawstatusbarprogress\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseVisualManager::DrawStatusBarProgress","linkify":"<a name=\"cmfcbasevisualmanager__drawstatusbarprogress\"></a>  CMFCBaseVisualManager::DrawStatusBarProgress","source":"<a name=\"cmfcbasevisualmanager__drawstatusbarprogress\"></a>  CMFCBaseVisualManager::DrawStatusBarProgress"},{"pos":[8839,8981],"content":"Draws progress bar on status bar control ( <bpt id=\"p1\">[</bpt>CMFCStatusBar Class<ept id=\"p1\">](../../mfc/reference/cmfcstatusbar-class.md)</ept>) using the current Windows theme.","source":"Draws progress bar on status bar control ( [CMFCStatusBar Class](../../mfc/reference/cmfcstatusbar-class.md)) using the current Windows theme."},{"pos":[9290,9300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[9304,9314],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[9318,9348]},{"content":"[in] <ph id=\"ph1\">`pStatusBar`</ph>","pos":[9355,9372],"source":"[in] `pStatusBar`"},{"content":"A pointer to status bar.","pos":[9376,9400]},{"content":"This value is ignored.","pos":[9401,9423]},{"content":"[in] <ph id=\"ph1\">`rectProgress`</ph>","pos":[9430,9449],"source":"[in] `rectProgress`"},{"content":"The bounding rectangle of the progress bar in <ph id=\"ph1\">`pDC`</ph> coordinates.","pos":[9453,9517],"source":" The bounding rectangle of the progress bar in `pDC` coordinates."},{"content":"[in] <ph id=\"ph1\">`nProgressTotal`</ph>","pos":[9524,9545],"source":"[in] `nProgressTotal`"},{"content":"The total progress value.","pos":[9549,9574]},{"content":"[in] <ph id=\"ph1\">`nProgressCurr`</ph>","pos":[9581,9601],"source":"[in] `nProgressCurr`"},{"content":"The current progress value.","pos":[9605,9632]},{"content":"[in] <ph id=\"ph1\">`clrBar`</ph>","pos":[9639,9652],"source":"[in] `clrBar`"},{"content":"The start color.","pos":[9656,9672]},{"content":"<ph id=\"ph1\">`CMFCBaseVisualManager`</ph> ignores this.","pos":[9673,9710],"source":"`CMFCBaseVisualManager` ignores this."},{"content":"Derived classes can use it for color gradients.","pos":[9711,9758]},{"content":"[in] <ph id=\"ph1\">`clrProgressBarDest`</ph>","pos":[9765,9790],"source":"[in] `clrProgressBarDest`"},{"content":"The end color.","pos":[9794,9808]},{"content":"<ph id=\"ph1\">`CMFCBaseVisualManager`</ph> ignores this.","pos":[9809,9846],"source":"`CMFCBaseVisualManager` ignores this."},{"content":"Derived classes can use it for color gradients.","pos":[9847,9894]},{"content":"[in] <ph id=\"ph1\">`clrProgressText`</ph>","pos":[9901,9923],"source":"[in] `clrProgressText`"},{"content":"Progress text color.","pos":[9927,9947]},{"content":"<ph id=\"ph1\">`CMFCBaseVisualManager`</ph> ignores this.","pos":[9948,9985],"source":"`CMFCBaseVisualManager` ignores this."},{"content":"The text color is defined by <ph id=\"ph1\">`afxGlobalData.clrBtnText`</ph>.","pos":[9986,10042],"source":" The text color is defined by `afxGlobalData.clrBtnText`."},{"content":"[in] <ph id=\"ph1\">`bProgressText`</ph>","pos":[10049,10069],"source":"[in] `bProgressText`"},{"content":"Specifies whether to display progress text.","pos":[10073,10116]},{"pos":[10126,10138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10142,10192],"content":"<ph id=\"ph1\">`TRUE`</ph> if Theme API is enabled; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if Theme API is enabled; otherwise `FALSE`."},{"pos":[10202,10291],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasevisualmanager__fillrebarpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseVisualManager::FillReBarPane","linkify":"<a name=\"cmfcbasevisualmanager__fillrebarpane\"></a>  CMFCBaseVisualManager::FillReBarPane","source":"<a name=\"cmfcbasevisualmanager__fillrebarpane\"></a>  CMFCBaseVisualManager::FillReBarPane"},{"content":"Fills the background of the rebar control by using the current Windows theme.","pos":[10295,10372]},{"pos":[10489,10499],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[10503,10513],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[10517,10547]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[10554,10565],"source":"[in] `pBar`"},{"content":"A pointer to a pane whose background should be drawn.","pos":[10569,10622]},{"content":"[in] <ph id=\"ph1\">`rectClient`</ph>","pos":[10629,10646],"source":"[in] `rectClient`"},{"content":"The bounding rectangle of the area to be filled.","pos":[10650,10698]},{"pos":[10708,10720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10724,10774],"content":"<ph id=\"ph1\">`TRUE`</ph> if Theme API is enabled; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if Theme API is enabled; otherwise `FALSE`."},{"pos":[10784,10893],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasevisualmanager__getstandardwindowstheme\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseVisualManager::GetStandardWindowsTheme","linkify":"<a name=\"cmfcbasevisualmanager__getstandardwindowstheme\"></a>  CMFCBaseVisualManager::GetStandardWindowsTheme","source":"<a name=\"cmfcbasevisualmanager__getstandardwindowstheme\"></a>  CMFCBaseVisualManager::GetStandardWindowsTheme"},{"content":"Gets the current Windows theme.","pos":[10897,10928]},{"pos":[10999,11011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The currently selected Windows Theme color.","pos":[11015,11058]},{"content":"Can be one of the following enumerated values:","pos":[11059,11105]},{"pos":[11113,11159],"content":"<ph id=\"ph1\">`WinXpTheme_None`</ph> - there is no theme enabled.","source":"`WinXpTheme_None` - there is no theme enabled."},{"pos":[11167,11285],"content":"<ph id=\"ph1\">`WinXpTheme_NonStandard`</ph> - non standard theme is selected (meaning a theme is selected, but none from the list below).","source":"`WinXpTheme_NonStandard` - non standard theme is selected (meaning a theme is selected, but none from the list below)."},{"pos":[11293,11331],"content":"<ph id=\"ph1\">`WinXpTheme_Blue`</ph> - blue theme (Luna).","source":"`WinXpTheme_Blue` - blue theme (Luna)."},{"pos":[11339,11372],"content":"<ph id=\"ph1\">`WinXpTheme_Olive`</ph> - olive theme.","source":"`WinXpTheme_Olive` - olive theme."},{"pos":[11380,11415],"content":"<ph id=\"ph1\">`WinXpTheme_Silver`</ph> - silver theme.","source":"`WinXpTheme_Silver` - silver theme."},{"pos":[11425,11524],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasevisualmanager__updatesystemcolors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseVisualManager::UpdateSystemColors","linkify":"<a name=\"cmfcbasevisualmanager__updatesystemcolors\"></a>  CMFCBaseVisualManager::UpdateSystemColors","source":"<a name=\"cmfcbasevisualmanager__updatesystemcolors\"></a>  CMFCBaseVisualManager::UpdateSystemColors"},{"pos":[11528,11636],"content":"Calls <ph id=\"ph1\">`OpenThemeData`</ph> to obtain handles for drawing various controls: windows, toolbars, buttons, and so on.","source":"Calls `OpenThemeData` to obtain handles for drawing various controls: windows, toolbars, buttons, and so on."},{"pos":[11688,11695],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For internal use only.","pos":[11699,11721]},{"pos":[11730,11738],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[11742,11790],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept>","pos":[11793,11839],"source":" [Classes](../../mfc/reference/mfc-classes.md)"}],"content":"---\ntitle: \"CMFCBaseVisualManager Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCBaseVisualManager\"\n  - \"CMFCBaseVisualManager.~CMFCBaseVisualManager\"\n  - \"~CMFCBaseVisualManager\"\n  - \"CMFCBaseVisualManager::~CMFCBaseVisualManager\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"~CMFCBaseVisualManager destructor\"\n  - \"CMFCBaseVisualManager class, destructor\"\n  - \"CMFCBaseVisualManager class\"\nms.assetid: d56f3afc-cdea-4de1-825a-a08999c571e0\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCBaseVisualManager Class\nA layer between derived visual managers and the Windows Theme API.  \n  \n `CMFCBaseVisualManager` loads UxTheme.dll, if available, and manages access to Windows Theme API methods.  \n  \n This class is for internal use only.  \n  \n## Syntax  \n  \n```  \nclass CMFCBaseVisualManager: public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|||  \n|-|-|  \n|Name|Description|  \n|[CMFCBaseVisualManager::CMFCBaseVisualManager](#cmfcbasevisualmanager__cmfcbasevisualmanager)|Constructs and initializes a `CMFCBaseVisualManager` object.|  \n|`CMFCBaseVisualManager::~CMFCBaseVisualManager`|Destructor.|  \n  \n### Public Methods  \n  \n|||  \n|-|-|  \n|Name|Description|  \n|[CMFCBaseVisualManager::DrawCheckBox](#cmfcbasevisualmanager__drawcheckbox)|Draws a check box control by using the current Windows theme.|  \n|[CMFCBaseVisualManager::DrawComboBorder](#cmfcbasevisualmanager__drawcomboborder)|Draws a combo box border using the current Windows theme.|  \n|[CMFCBaseVisualManager::DrawComboDropButton](#cmfcbasevisualmanager__drawcombodropbutton)|Draws a combo box drop-down button using the current Windows theme.|  \n|[CMFCBaseVisualManager::DrawPushButton](#cmfcbasevisualmanager__drawpushbutton)|Draws a push button using the current Windows theme.|  \n|[CMFCBaseVisualManager::DrawRadioButton](#cmfcbasevisualmanager__drawradiobutton)|Draws a radio button control by using the current Windows theme.|  \n|[CMFCBaseVisualManager::DrawStatusBarProgress](#cmfcbasevisualmanager__drawstatusbarprogress)|Draws a progress bar on a status bar control ( [CMFCStatusBar Class](../../mfc/reference/cmfcstatusbar-class.md)) using the current Windows theme.|  \n|[CMFCBaseVisualManager::FillReBarPane](#cmfcbasevisualmanager__fillrebarpane)|Fills the background of the rebar control by using the current Windows theme.|  \n|[CMFCBaseVisualManager::GetStandardWindowsTheme](#cmfcbasevisualmanager__getstandardwindowstheme)|Gets the current Windows theme.|  \n  \n### Protected Methods  \n  \n|||  \n|-|-|  \n|Name|Description|  \n|[CMFCBaseVisualManager::CleanUpThemes](#cmfcbasevisualmanager__cleanupthemes)|Calls `CloseThemeData` for all handles obtained in `UpdateSystemColors`.|  \n|[CMFCBaseVisualManager::UpdateSystemColors](#cmfcbasevisualmanager__updatesystemcolors)|Calls `OpenThemeData` to obtain handles for drawing various controls: windows, toolbars, buttons, and so on.|  \n  \n## Remarks  \n You do not have to instantiate objects of this class directly.  \n  \n Because it is a base class for all visual managers, you can just call [CMFCVisualManager::GetInstance](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__getinstance), obtain a pointer to the current Visual Manager, and access the methods for `CMFCBaseVisualManager` using that pointer. However, if you have to display a control by using the current Windows theme, it is better to use the `CMFCVisualManagerWindows` interface.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMFCBaseVisualManager](../../mfc/reference/cmfcbasevisualmanager-class.md)  \n  \n## Requirements  \n **Header:** afxvisualmanager.h  \n  \n##  <a name=\"cmfcbasevisualmanager__cleanupthemes\"></a>  CMFCBaseVisualManager::CleanUpThemes  \n Calls `CloseThemeData` for all handles obtained in `UpdateSystemColors`.  \n  \n```  \nvoid CleanUpThemes();\n```  \n  \n### Remarks  \n For internal use only.  \n  \n##  <a name=\"cmfcbasevisualmanager__cmfcbasevisualmanager\"></a>  CMFCBaseVisualManager::CMFCBaseVisualManager  \n Constructs and initializes a `CMFCBaseVisualManager` object.  \n  \n```  \nCMFCBaseVisualManager();\n```  \n  \n##  <a name=\"cmfcbasevisualmanager__drawcheckbox\"></a>  CMFCBaseVisualManager::DrawCheckBox  \n Draws a check box control by using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawCheckBox(\n    CDC* pDC,   \n    CRect rect,   \n    BOOL bHighlighted,   \n    int nState,   \n    BOOL bEnabled,   \n    BOOL bPressed);\n\n);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context  \n  \n [in] `rect`  \n The bounding rectangle of the check box.  \n  \n [in] `bHighlighted`  \n Specifies whether the check box is highlighted.  \n  \n [in] `nState`  \n 0 for unchecked, 1 for checked normal,  \n  \n 2 for mixed normal.  \n  \n [in] `bEnabled`  \n Specifies whether the check box is enabled.  \n  \n [in] `bPressed`  \n Specifies whether the check box is pressed.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n### Remarks  \n The values of `nState` correspond to the following check box styles.  \n  \n|nState|Check box style|  \n|------------|---------------------|  \n|0|CBS_UNCHECKEDNORMAL|  \n|1|CBS_CHECKEDNORMAL|  \n|2|CBS_MIXEDNORMAL|  \n  \n##  <a name=\"cmfcbasevisualmanager__drawcomboborder\"></a>  CMFCBaseVisualManager::DrawComboBorder  \n Draws the combo box border using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawComboBorder(\n    CDC* pDC,   \n    CRect rect,   \n    BOOL bDisabled,   \n    BOOL bIsDropped,   \n    BOOL bIsHighlighted);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n Bounding rectangle of the combo box border.  \n  \n [in] `bDisabled`  \n Specifies whether the combo box border is disabled.  \n  \n [in] `bIsDropped`  \n Specifies whether the combo box border is dropped down.  \n  \n [in] `bIsHighlighted`  \n Specifies whether the combo box border is highlighted.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__drawcombodropbutton\"></a>  CMFCBaseVisualManager::DrawComboDropButton  \n Draws a combo box drop-down button using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawComboDropButton(\n    CDC* pDC,   \n    CRect rect,   \n    BOOL bDisabled,   \n    BOOL bIsDropped,   \n    BOOL bIsHighlighted);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `pDC`|A pointer to a device context.|  \n|[in] `rect`|The bounding rectangle of the combo box drop-down button.|  \n|[in] `bDisabled`|Specifies whether the combo box drop-down button is disabled.|  \n|[in] `bIsDropped`|Specifies whether the combo box drop-down button is dropped down.|  \n|[in] `bIsHighlighted`|Specifies whether the combo box drop-down button is highlighted.|  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__drawpushbutton\"></a>  CMFCBaseVisualManager::DrawPushButton  \n Draws a push button using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawPushButton(\n    CDC* pDC,   \n    CRect rect,   \n    CMFCButton* pButton,   \n    UINT uiState);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n The bounding rectangle of the push button.  \n  \n [in] `pButton`  \n A pointer to the [CMFCButton Class](../../mfc/reference/cmfcbutton-class.md) object to draw.  \n  \n [in] `uiState`  \n Ignored. The state is taken from `pButton`.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__drawradiobutton\"></a>  CMFCBaseVisualManager::DrawRadioButton  \n Draws a radio button control by using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawRadioButton(\n    CDC* pDC,   \n    CRect rect,   \n    BOOL bHighlighted,   \n    BOOL bChecked,   \n    BOOL bEnabled,   \n    BOOL bPressed);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n The bounding rectangle of the radio button.  \n  \n [in] `bHighlighted`  \n Specifies whether the radio button is highlighted.  \n  \n [in] `bChecked`  \n Specifies whether the radio button is checked.  \n  \n [in] `bEnabled`  \n Specifies whether the radio button is enabled.  \n  \n [in] `bPressed`  \n Specifies whether the radio button is pressed.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__drawstatusbarprogress\"></a>  CMFCBaseVisualManager::DrawStatusBarProgress  \n Draws progress bar on status bar control ( [CMFCStatusBar Class](../../mfc/reference/cmfcstatusbar-class.md)) using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawStatusBarProgress(\n    CDC* pDC,   \n    CMFCStatusBar* pStatusBar,   \n    CRect rectProgress,   \n    int nProgressTotal,   \n    int nProgressCurr,  \n    COLORREF clrBar,   \n    COLORREF clrProgressBarDest,   \n    COLORREF clrProgressText,   \n    BOOL bProgressText);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pStatusBar`  \n A pointer to status bar. This value is ignored.  \n  \n [in] `rectProgress`  \n The bounding rectangle of the progress bar in `pDC` coordinates.  \n  \n [in] `nProgressTotal`  \n The total progress value.  \n  \n [in] `nProgressCurr`  \n The current progress value.  \n  \n [in] `clrBar`  \n The start color. `CMFCBaseVisualManager` ignores this. Derived classes can use it for color gradients.  \n  \n [in] `clrProgressBarDest`  \n The end color. `CMFCBaseVisualManager` ignores this. Derived classes can use it for color gradients.  \n  \n [in] `clrProgressText`  \n Progress text color. `CMFCBaseVisualManager` ignores this. The text color is defined by `afxGlobalData.clrBtnText`.  \n  \n [in] `bProgressText`  \n Specifies whether to display progress text.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__fillrebarpane\"></a>  CMFCBaseVisualManager::FillReBarPane  \n Fills the background of the rebar control by using the current Windows theme.  \n  \n```  \nvirtual void FillReBarPane(\n    CDC* pDC,   \n    CBasePane* pBar,   \n    CRect rectClient);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pBar`  \n A pointer to a pane whose background should be drawn.  \n  \n [in] `rectClient`  \n The bounding rectangle of the area to be filled.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__getstandardwindowstheme\"></a>  CMFCBaseVisualManager::GetStandardWindowsTheme  \n Gets the current Windows theme.  \n  \n```  \nvirtual WinXpTheme GetStandardWindowsTheme();\n```  \n  \n### Return Value  \n The currently selected Windows Theme color. Can be one of the following enumerated values:  \n  \n- `WinXpTheme_None` - there is no theme enabled.  \n  \n- `WinXpTheme_NonStandard` - non standard theme is selected (meaning a theme is selected, but none from the list below).  \n  \n- `WinXpTheme_Blue` - blue theme (Luna).  \n  \n- `WinXpTheme_Olive` - olive theme.  \n  \n- `WinXpTheme_Silver` - silver theme.  \n  \n##  <a name=\"cmfcbasevisualmanager__updatesystemcolors\"></a>  CMFCBaseVisualManager::UpdateSystemColors  \n Calls `OpenThemeData` to obtain handles for drawing various controls: windows, toolbars, buttons, and so on.  \n  \n```  \nvoid UpdateSystemColors();\n```  \n  \n### Remarks  \n For internal use only.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)\n"}