{"nodes":[{"pos":[12,48],"content":"_CrtReportBlockType | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CrtReportBlockType | Microsoft Docs","pos":[0,36]}]},{"content":"_CrtReportBlockType","pos":[1100,1119]},{"content":"Returns the block type/subtype associated with a given debug heap block pointer.","pos":[1120,1200]},{"content":"Syntax","pos":[1209,1215]},{"content":"Parameters","pos":[1307,1317]},{"content":"pBlock","pos":[1322,1328]},{"content":"Pointer to a valid debug heap block.","pos":[1333,1369]},{"content":"Return Value","pos":[1378,1390]},{"content":"When passed a valid debug heap pointer, the <ph id=\"ph1\">`_CrtReportBlockType`</ph> function returns the block type and subtype in the form of an <ph id=\"ph2\">`int`</ph>.","pos":[1394,1528],"source":"When passed a valid debug heap pointer, the `_CrtReportBlockType` function returns the block type and subtype in the form of an `int`."},{"content":"When passed an invalid pointer, the function returns -1.","pos":[1529,1585]},{"content":"Remarks","pos":[1594,1601]},{"pos":[1605,1773],"content":"To extract the type and subtype returned by <ph id=\"ph1\">`_CrtReportBlockType`</ph>, use the macros <bpt id=\"p1\">**</bpt>_BLOCK_TYPE<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>_BLOCK_SUBTYPE<ept id=\"p2\">**</ept> (both defined in Crtdbg.h) on the return value.","source":"To extract the type and subtype returned by `_CrtReportBlockType`, use the macros **_BLOCK_TYPE** and **_BLOCK_SUBTYPE** (both defined in Crtdbg.h) on the return value."},{"pos":[1780,1939],"content":"For information about the allocation block types and how they are used, see <bpt id=\"p1\">[</bpt>Types of Blocks on the Debug Heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","source":"For information about the allocation block types and how they are used, see [Types of Blocks on the Debug Heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"Requirements","pos":[1948,1960]},{"content":"Routine","pos":[1967,1974]},{"content":"Required header","pos":[1975,1990]},{"content":"crtdbg.h&gt;","pos":[2059,2068],"source":"crtdbg.h>"},{"pos":[2076,2194],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[2203,2212]},{"pos":[2216,2311],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"content":"Example","pos":[2320,2327]},{"content":"Sample Output","pos":[3574,3587]},{"content":"See Also","pos":[4458,4466]},{"content":"_CrtDoForAllClientObjects","pos":[4471,4496]},{"content":"_CrtSetDumpClient","pos":[4566,4583]},{"content":"_CrtMemDumpAllObjectsSince","pos":[4645,4671]},{"content":"_CrtDumpMemoryLeaks","pos":[4742,4761]}],"content":"---\ntitle: \"_CrtReportBlockType | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CrtReportBlockType\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_CrtReportBlockType\"\n  - \"CrtReportBlockType\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"CrtReportBlockType function\"\n  - \"BLOCK_SUBTYPE macro\"\n  - \"_CrtReportBlockType function\"\n  - \"_BLOCK_TYPE macro\"\n  - \"_BLOCK_SUBTYPE macro\"\n  - \"BLOCK_TYPE macro\"\nms.assetid: 0f4b9da7-bebb-4956-9541-b2581640ec6b\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _CrtReportBlockType\nReturns the block type/subtype associated with a given debug heap block pointer.  \n  \n## Syntax  \n  \n```  \n  \n      int _CrtReportBlockType(  \n   const void * pBlock  \n};  \n```  \n  \n#### Parameters  \n *pBlock*  \n Pointer to a valid debug heap block.  \n  \n## Return Value  \n When passed a valid debug heap pointer, the `_CrtReportBlockType` function returns the block type and subtype in the form of an `int`. When passed an invalid pointer, the function returns -1.  \n  \n## Remarks  \n To extract the type and subtype returned by `_CrtReportBlockType`, use the macros **_BLOCK_TYPE** and **_BLOCK_SUBTYPE** (both defined in Crtdbg.h) on the return value.  \n  \n For information about the allocation block types and how they are used, see [Types of Blocks on the Debug Heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_CrtReportBlockType`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## Example  \n  \n```  \n// crt_crtreportblocktype.cpp  \n// compile with: /MDd  \n  \n#include <malloc.h>  \n#include <stdio.h>  \n#include <crtdbg.h>  \n  \nvoid __cdecl Dumper(void *ptr, void *)  \n{  \n    int block = _CrtReportBlockType(ptr);  \n    _RPT3(_CRT_WARN, \"Dumper found block at %p: type %d, subtype %d\\n\", ptr,  \n          _BLOCK_TYPE(block), _BLOCK_SUBTYPE(block));  \n}  \n  \nvoid __cdecl LeakDumper(void *ptr, size_t sz)  \n{  \n    int block = _CrtReportBlockType(ptr);  \n    _RPT4(_CRT_WARN, \"LeakDumper found block at %p:\"  \n                     \" type %d, subtype %d, size %d\\n\", ptr,  \n          _BLOCK_TYPE(block), _BLOCK_SUBTYPE(block), sz);  \n}  \n  \nint main(void)  \n{  \n    _CrtSetDbgFlag(_CrtSetDbgFlag(_CRTDBG_REPORT_FLAG) |   \n    _CRTDBG_LEAK_CHECK_DF);  \n    _CrtSetReportMode( _CRT_WARN, _CRTDBG_MODE_FILE );  \n    _CrtSetReportFile( _CRT_WARN, _CRTDBG_FILE_STDOUT );  \n    _malloc_dbg(10, _NORMAL_BLOCK , __FILE__, __LINE__);  \n    _malloc_dbg(10, _CLIENT_BLOCK | (1 << 16), __FILE__, __LINE__);  \n    _malloc_dbg(20, _CLIENT_BLOCK | (2 << 16), __FILE__, __LINE__);  \n    _malloc_dbg(30, _CLIENT_BLOCK | (3 << 16), __FILE__, __LINE__);  \n    _CrtDoForAllClientObjects(Dumper, NULL);  \n    _CrtSetDumpClient(LeakDumper);  \n}  \n```  \n  \n## Sample Output  \n  \n```  \nDumper found block at 00314F78: type 4, subtype 3  \nDumper found block at 00314F38: type 4, subtype 2  \nDumper found block at 00314F00: type 4, subtype 1  \nDetected memory leaks!  \nDumping objects ->  \ncrt_crtreportblocktype.cpp(30) : {55} client block at 0x00314F78, subtype 3, 30 bytes long.  \n Data: <                > CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD  \ncrt_crtreportblocktype.cpp(29) : {54} client block at 0x00314F38, subtype 2, 20 bytes long.  \n Data: <                > CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD  \ncrt_crtreportblocktype.cpp(28) : {53} client block at 0x00314F00, subtype 1, 10 bytes long.  \n Data: <          > CD CD CD CD CD CD CD CD CD CD  \ncrt_crtreportblocktype.cpp(27) : {52} normal block at 0x00314EC8, 10 bytes long.  \n Data: <          > CD CD CD CD CD CD CD CD CD CD  \nObject dump complete.  \n```  \n  \n## See Also  \n [_CrtDoForAllClientObjects](../../c-runtime-library/reference/crtdoforallclientobjects.md)   \n [_CrtSetDumpClient](../../c-runtime-library/reference/crtsetdumpclient.md)   \n [_CrtMemDumpAllObjectsSince](../../c-runtime-library/reference/crtmemdumpallobjectssince.md)   \n [_CrtDumpMemoryLeaks](../../c-runtime-library/reference/crtdumpmemoryleaks.md)"}