{"nodes":[{"pos":[12,46],"content":"unique_lock Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"unique_lock Class | Microsoft Docs","pos":[0,34]}]},{"pos":[570,587],"content":"unique_lock Class","linkify":"unique_lock Class","nodes":[{"content":"unique_lock Class","pos":[0,17]}]},{"pos":[588,704],"content":"Represents a template that can be instantiated to create objects that manage the locking and unlocking of a <ph id=\"ph1\">`mutex`</ph>.","source":"Represents a template that can be instantiated to create objects that manage the locking and unlocking of a `mutex`."},{"pos":[713,719],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[783,790],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[794,849],"content":"The template argument <ph id=\"ph1\">`Mutex`</ph> must name a <bpt id=\"p1\">*</bpt>mutex type<ept id=\"p1\">*</ept>.","source":"The template argument `Mutex` must name a *mutex type*."},{"pos":[856,1005],"content":"Internally, a <ph id=\"ph1\">`unique_lock`</ph> stores a pointer to an associated <ph id=\"ph2\">`mutex`</ph> object and a <ph id=\"ph3\">`bool`</ph> that indicates whether the current thread owns the <ph id=\"ph4\">`mutex`</ph>.","source":"Internally, a `unique_lock` stores a pointer to an associated `mutex` object and a `bool` that indicates whether the current thread owns the `mutex`."},{"pos":[1014,1021],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1031,1046],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1053,1057]},{"content":"Description","pos":[1058,1069]},{"pos":[1120,1162],"content":"Synonym for the template argument <ph id=\"ph1\">`Mutex`</ph>.","source":"Synonym for the template argument `Mutex`."},{"pos":[1173,1192],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1199,1203]},{"content":"Description","pos":[1204,1215]},{"pos":[1253,1317],"content":"<bpt id=\"p1\">[</bpt>unique_lock Constructor<ept id=\"p1\">](#unique_lock__unique_lock_constructor)</ept>","source":"[unique_lock Constructor](#unique_lock__unique_lock_constructor)"},{"pos":[1318,1352],"content":"Constructs a <ph id=\"ph1\">`unique_lock`</ph> object.","source":"Constructs a `unique_lock` object."},{"pos":[1357,1425],"content":"<bpt id=\"p1\">[</bpt>~unique_lock Destructor<ept id=\"p1\">](#unique_lock___dtorunique_lock_destructor)</ept>","source":"[~unique_lock Destructor](#unique_lock___dtorunique_lock_destructor)"},{"pos":[1426,1499],"content":"Releases any resources that are associated with the <ph id=\"ph1\">`unique_lock`</ph> object.","source":"Releases any resources that are associated with the `unique_lock` object."},{"pos":[1510,1524],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1531,1535]},{"content":"Description","pos":[1536,1547]},{"pos":[1585,1618],"content":"<bpt id=\"p1\">[</bpt>lock<ept id=\"p1\">](#unique_lock__lock_method)</ept>","source":"[lock](#unique_lock__lock_method)"},{"pos":[1619,1706],"content":"Blocks the calling thread until the thread obtains ownership of the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Blocks the calling thread until the thread obtains ownership of the associated `mutex`."},{"pos":[1711,1746],"content":"<bpt id=\"p1\">[</bpt>mutex<ept id=\"p1\">](#unique_lock__mutex_method)</ept>","source":"[mutex](#unique_lock__mutex_method)"},{"pos":[1747,1802],"content":"Retrieves the stored pointer to the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Retrieves the stored pointer to the associated `mutex`."},{"pos":[1807,1850],"content":"<bpt id=\"p1\">[</bpt>owns_lock<ept id=\"p1\">](#unique_lock__owns_lock_method)</ept>","source":"[owns_lock](#unique_lock__owns_lock_method)"},{"pos":[1851,1916],"content":"Specifies whether the calling thread owns the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Specifies whether the calling thread owns the associated `mutex`."},{"pos":[1921,1960],"content":"<bpt id=\"p1\">[</bpt>release<ept id=\"p1\">](#unique_lock__release_method)</ept>","source":"[release](#unique_lock__release_method)"},{"pos":[1961,2035],"content":"Disassociates the <ph id=\"ph1\">`unique_lock`</ph> object from the associated <ph id=\"ph2\">`mutex`</ph> object.","source":"Disassociates the `unique_lock` object from the associated `mutex` object."},{"pos":[2040,2073],"content":"<bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](#unique_lock__swap_method)</ept>","source":"[swap](#unique_lock__swap_method)"},{"pos":[2074,2156],"content":"Swaps the associated <ph id=\"ph1\">`mutex`</ph> and ownership status with that of a specified object.","source":"Swaps the associated `mutex` and ownership status with that of a specified object."},{"pos":[2161,2202],"content":"<bpt id=\"p1\">[</bpt>try_lock<ept id=\"p1\">](#unique_lock__try_lock_method)</ept>","source":"[try_lock](#unique_lock__try_lock_method)"},{"pos":[2203,2275],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"pos":[2280,2329],"content":"<bpt id=\"p1\">[</bpt>try_lock_for<ept id=\"p1\">](#unique_lock__try_lock_for_method)</ept>","source":"[try_lock_for](#unique_lock__try_lock_for_method)"},{"pos":[2330,2402],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"pos":[2407,2460],"content":"<bpt id=\"p1\">[</bpt>try_lock_until<ept id=\"p1\">](#unique_lock__try_lock_until_method)</ept>","source":"[try_lock_until](#unique_lock__try_lock_until_method)"},{"pos":[2461,2533],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"pos":[2538,2575],"content":"<bpt id=\"p1\">[</bpt>unlock<ept id=\"p1\">](#unique_lock__unlock_method)</ept>","source":"[unlock](#unique_lock__unlock_method)"},{"pos":[2576,2621],"content":"Releases ownership of the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Releases ownership of the associated `mutex`."},{"pos":[2632,2648],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[2655,2659]},{"content":"Description","pos":[2660,2671]},{"pos":[2709,2753],"content":"<bpt id=\"p1\">[</bpt>operator bool<ept id=\"p1\">](#unique_lock__operator_bool)</ept>","source":"[operator bool](#unique_lock__operator_bool)"},{"pos":[2754,2831],"content":"Specifies whether the calling thread has ownership of the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Specifies whether the calling thread has ownership of the associated `mutex`."},{"pos":[2836,2874],"content":"<bpt id=\"p1\">[</bpt>operator=<ept id=\"p1\">](#unique_lock__operator_eq)</ept>","source":"[operator=](#unique_lock__operator_eq)"},{"pos":[2875,2965],"content":"Copies the stored <ph id=\"ph1\">`mutex`</ph> pointer and associated ownership status from a specified object.","source":"Copies the stored `mutex` pointer and associated ownership status from a specified object."},{"pos":[2975,2996],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3022,3034],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3038,3055],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> mutex","source":"**Header:** mutex"},{"pos":[3062,3080],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3090,3135],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__lock_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  lock","linkify":"<a name=\"unique_lock__lock_method\"></a>  lock","source":"<a name=\"unique_lock__lock_method\"></a>  lock"},{"pos":[3139,3226],"content":"Blocks the calling thread until the thread obtains ownership of the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Blocks the calling thread until the thread obtains ownership of the associated `mutex`."},{"pos":[3265,3272],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3276,3448],"content":"If the stored <ph id=\"ph1\">`mutex`</ph> pointer is <ph id=\"ph2\">`null`</ph>, this method throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph3\">`operation_not_permitted`</ph>.","source":"If the stored `mutex` pointer is `null`, this method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`."},{"pos":[3455,3608],"content":"If the calling thread already owns the associated <ph id=\"ph1\">`mutex`</ph>, this method throws a <ph id=\"ph2\">`system_error`</ph> that has an error code of <ph id=\"ph3\">`resource_deadlock_would_occur`</ph>.","source":"If the calling thread already owns the associated `mutex`, this method throws a `system_error` that has an error code of `resource_deadlock_would_occur`."},{"pos":[3615,3731],"content":"Otherwise, this method calls <ph id=\"ph1\">`lock`</ph> on the associated <ph id=\"ph2\">`mutex`</ph> and sets the internal thread ownership flag to <ph id=\"ph3\">`true`</ph>.","source":"Otherwise, this method calls `lock` on the associated `mutex` and sets the internal thread ownership flag to `true`."},{"pos":[3741,3788],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__mutex_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  mutex","linkify":"<a name=\"unique_lock__mutex_method\"></a>  mutex","source":"<a name=\"unique_lock__mutex_method\"></a>  mutex"},{"pos":[3792,3847],"content":"Retrieves the stored pointer to the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Retrieves the stored pointer to the associated `mutex`."},{"pos":[3909,3965],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__operator_bool\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator bool","linkify":"<a name=\"unique_lock__operator_bool\"></a>  operator bool","source":"<a name=\"unique_lock__operator_bool\"></a>  operator bool"},{"content":"Specifies whether the calling thread has ownership of the associated mutex.","pos":[3969,4044]},{"pos":[4104,4116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4120,4175],"content":"<ph id=\"ph1\">`true`</ph> if the thread owns the mutex; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the thread owns the mutex; otherwise `false`."},{"pos":[4185,4235],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator=","linkify":"<a name=\"unique_lock__operator_eq\"></a>  operator=","source":"<a name=\"unique_lock__operator_eq\"></a>  operator="},{"pos":[4239,4329],"content":"Copies the stored <ph id=\"ph1\">`mutex`</ph> pointer and associated ownership status from a specified object.","source":"Copies the stored `mutex` pointer and associated ownership status from a specified object."},{"pos":[4409,4419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`unique_lock`</ph> object.","pos":[4434,4457],"source":" A `unique_lock` object."},{"pos":[4467,4479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4500,4507],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4511,4649],"content":"If the calling thread owns the previously associated <ph id=\"ph1\">`mutex`</ph>, before this method calls <ph id=\"ph2\">`unlock`</ph> on the <ph id=\"ph3\">`mutex`</ph>, it assigns the new values.","source":"If the calling thread owns the previously associated `mutex`, before this method calls `unlock` on the `mutex`, it assigns the new values."},{"pos":[4656,4728],"content":"After the copy, this method sets <ph id=\"ph1\">`Other`</ph> to a default-constructed state.","source":"After the copy, this method sets `Other` to a default-constructed state."},{"pos":[4738,4793],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__owns_lock_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  owns_lock","linkify":"<a name=\"unique_lock__owns_lock_method\"></a>  owns_lock","source":"<a name=\"unique_lock__owns_lock_method\"></a>  owns_lock"},{"pos":[4797,4862],"content":"Specifies whether the calling thread owns the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Specifies whether the calling thread owns the associated `mutex`."},{"pos":[4921,4933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4937,4995],"content":"<ph id=\"ph1\">`true`</ph> if the thread owns the <ph id=\"ph2\">`mutex`</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the thread owns the `mutex`; otherwise, `false`."},{"pos":[5005,5056],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__release_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  release","linkify":"<a name=\"unique_lock__release_method\"></a>  release","source":"<a name=\"unique_lock__release_method\"></a>  release"},{"pos":[5060,5134],"content":"Disassociates the <ph id=\"ph1\">`unique_lock`</ph> object from the associated <ph id=\"ph2\">`mutex`</ph> object.","source":"Disassociates the `unique_lock` object from the associated `mutex` object."},{"pos":[5192,5204],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5208,5257],"content":"The previous value of the stored <ph id=\"ph1\">`mutex`</ph> pointer.","source":"The previous value of the stored `mutex` pointer."},{"pos":[5267,5274],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5278,5396],"content":"This method sets the value of the stored <ph id=\"ph1\">`mutex`</ph> pointer to 0 and sets the internal <ph id=\"ph2\">`mutex`</ph> ownership flag to <ph id=\"ph3\">`false`</ph>.","source":"This method sets the value of the stored `mutex` pointer to 0 and sets the internal `mutex` ownership flag to `false`."},{"pos":[5406,5451],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__swap_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  swap","linkify":"<a name=\"unique_lock__swap_method\"></a>  swap","source":"<a name=\"unique_lock__swap_method\"></a>  swap"},{"pos":[5455,5537],"content":"Swaps the associated <ph id=\"ph1\">`mutex`</ph> and ownership status with that of a specified object.","source":"Swaps the associated `mutex` and ownership status with that of a specified object."},{"pos":[5600,5610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`unique_lock`</ph> object.","pos":[5625,5648],"source":" A `unique_lock` object."},{"pos":[5658,5711],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__try_lock_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  try_lock","linkify":"<a name=\"unique_lock__try_lock_method\"></a>  try_lock","source":"<a name=\"unique_lock__try_lock_method\"></a>  try_lock"},{"pos":[5715,5787],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"pos":[5839,5851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5855,5942],"content":"<ph id=\"ph1\">`true`</ph> if the method successfully obtains ownership of the <ph id=\"ph2\">`mutex`</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`."},{"pos":[5952,5959],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5963,6134],"content":"If the stored <ph id=\"ph1\">`mutex`</ph> pointer is <ph id=\"ph2\">`null`</ph>, the method throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph3\">`operation_not_permitted`</ph>.","source":"If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`."},{"pos":[6141,6282],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the method throws a <ph id=\"ph2\">`system_error`</ph> that has an error code of <ph id=\"ph3\">`resource_deadlock_would_occur`</ph>.","source":"If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`."},{"pos":[6292,6353],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__try_lock_for_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  try_lock_for","linkify":"<a name=\"unique_lock__try_lock_for_method\"></a>  try_lock_for","source":"<a name=\"unique_lock__try_lock_for_method\"></a>  try_lock_for"},{"pos":[6357,6429],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"pos":[6558,6568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>chrono::duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> object that specifies the maximum amount of time that the method attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph>.","pos":[6586,6755],"source":" A [chrono::duration](../standard-library/duration-class.md) object that specifies the maximum amount of time that the method attempts to obtain ownership of the `mutex`."},{"pos":[6765,6777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6781,6868],"content":"<ph id=\"ph1\">`true`</ph> if the method successfully obtains ownership of the <ph id=\"ph2\">`mutex`</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`."},{"pos":[6878,6885],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6889,7060],"content":"If the stored <ph id=\"ph1\">`mutex`</ph> pointer is <ph id=\"ph2\">`null`</ph>, the method throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph3\">`operation_not_permitted`</ph>.","source":"If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`."},{"pos":[7067,7208],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the method throws a <ph id=\"ph2\">`system_error`</ph> that has an error code of <ph id=\"ph3\">`resource_deadlock_would_occur`</ph>.","source":"If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`."},{"pos":[7218,7283],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__try_lock_until_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  try_lock_until","linkify":"<a name=\"unique_lock__try_lock_until_method\"></a>  try_lock_until","source":"<a name=\"unique_lock__try_lock_until_method\"></a>  try_lock_until"},{"pos":[7287,7359],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"pos":[7543,7553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph>.","pos":[7571,7693],"source":" A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the `mutex`."},{"pos":[7703,7715],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7719,7806],"content":"<ph id=\"ph1\">`true`</ph> if the method successfully obtains ownership of the <ph id=\"ph2\">`mutex`</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`."},{"pos":[7816,7823],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7827,7998],"content":"If the stored <ph id=\"ph1\">`mutex`</ph> pointer is <ph id=\"ph2\">`null`</ph>, the method throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph3\">`operation_not_permitted`</ph>.","source":"If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`."},{"pos":[8005,8146],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the method throws a <ph id=\"ph2\">`system_error`</ph> that has an error code of <ph id=\"ph3\">`resource_deadlock_would_occur`</ph>.","source":"If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`."},{"pos":[8156,8232],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__unique_lock_constructor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  unique_lock Constructor","linkify":"<a name=\"unique_lock__unique_lock_constructor\"></a>  unique_lock Constructor","source":"<a name=\"unique_lock__unique_lock_constructor\"></a>  unique_lock Constructor"},{"pos":[8236,8270],"content":"Constructs a <ph id=\"ph1\">`unique_lock`</ph> object.","source":"Constructs a `unique_lock` object."},{"pos":[8875,8885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A mutex type object.","pos":[8898,8918]},{"content":"A <bpt id=\"p1\">[</bpt>chrono::duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> object that specifies the maximum amount of time that the method attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph>.","pos":[8939,9108],"source":" A [chrono::duration](../standard-library/duration-class.md) object that specifies the maximum amount of time that the method attempts to obtain ownership of the `mutex`."},{"content":"A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph>.","pos":[9129,9251],"source":" A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the `mutex`."},{"content":"A <ph id=\"ph1\">`unique_lock`</ph> object.","pos":[9269,9292],"source":" A `unique_lock` object."},{"pos":[9302,9309],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first constructor constructs an object that has an associated mutex pointer value of 0.","pos":[9313,9404]},{"content":"The second constructor moves the associated mutex status from <ph id=\"ph1\">`Other`</ph>.","pos":[9411,9481],"source":"The second constructor moves the associated mutex status from `Other`."},{"content":"After the move, <ph id=\"ph1\">`Other`</ph> is no longer associated with a mutex.","pos":[9482,9543],"source":" After the move, `Other` is no longer associated with a mutex."},{"content":"The remaining constructors store &amp; <ph id=\"ph1\">`Mtx`</ph> as the stored <ph id=\"ph2\">`mutex`</ph> pointer.","pos":[9550,9621],"source":"The remaining constructors store & `Mtx` as the stored `mutex` pointer."},{"content":"Ownership of the <ph id=\"ph1\">`mutex`</ph> is determined by the second argument, if it exists.","pos":[9622,9698],"source":" Ownership of the `mutex` is determined by the second argument, if it exists."},{"pos":[9733,9817],"content":"Ownership is obtained by calling the <ph id=\"ph1\">`lock`</ph> method on the associated <ph id=\"ph2\">`mutex`</ph> object.","source":"Ownership is obtained by calling the `lock` method on the associated `mutex` object."},{"content":"Ownership is assumed.","pos":[9830,9851]},{"content":"<ph id=\"ph1\">`Mtx`</ph> must be locked when the constructor is called.","pos":[9852,9904],"source":"`Mtx` must be locked when the constructor is called."},{"content":"The calling thread is assumed not to own the <ph id=\"ph1\">`mutex`</ph> object.","pos":[9917,9977],"source":"The calling thread is assumed not to own the `mutex` object."},{"content":"<ph id=\"ph1\">`Mtx`</ph> must not be locked when the constructor is called.","pos":[9978,10034],"source":"`Mtx` must not be locked when the constructor is called."},{"content":"Ownership is determined by calling <ph id=\"ph1\">`try_lock`</ph> on the associated <ph id=\"ph2\">`mutex`</ph> object.","pos":[10045,10124],"source":"Ownership is determined by calling `try_lock` on the associated `mutex` object."},{"content":"The constructor throws nothing.","pos":[10125,10156]},{"pos":[10172,10232],"content":"Ownership is determined by calling <ph id=\"ph1\">`try_lock_for(Rel_time)`</ph>.","source":"Ownership is determined by calling `try_lock_for(Rel_time)`."},{"pos":[10248,10310],"content":"Ownership is determined by calling <ph id=\"ph1\">`try_lock_until(Abs_time)`</ph>.","source":"Ownership is determined by calling `try_lock_until(Abs_time)`."},{"pos":[10321,10401],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock___dtorunique_lock_destructor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ~unique_lock Destructor","linkify":"<a name=\"unique_lock___dtorunique_lock_destructor\"></a>  ~unique_lock Destructor","source":"<a name=\"unique_lock___dtorunique_lock_destructor\"></a>  ~unique_lock Destructor"},{"pos":[10405,10478],"content":"Releases any resources that are associated with the <ph id=\"ph1\">`unique_lock`</ph> object.","source":"Releases any resources that are associated with the `unique_lock` object."},{"pos":[10529,10536],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10540,10665],"content":"If the calling thread owns the associated <ph id=\"ph1\">`mutex`</ph>, the destructor releases ownership by calling unlock on the <ph id=\"ph2\">`mutex`</ph> object.","source":"If the calling thread owns the associated `mutex`, the destructor releases ownership by calling unlock on the `mutex` object."},{"pos":[10675,10724],"content":"<bpt id=\"p1\">&lt;a name=\"unique_lock__unlock_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  unlock","linkify":"<a name=\"unique_lock__unlock_method\"></a>  unlock","source":"<a name=\"unique_lock__unlock_method\"></a>  unlock"},{"pos":[10728,10773],"content":"Releases ownership of the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Releases ownership of the associated `mutex`."},{"pos":[10814,10821],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10825,11014],"content":"If the calling thread doesn't own the associated <ph id=\"ph1\">`mutex`</ph>, this method throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph2\">`operation_not_permitted`</ph>.","source":"If the calling thread doesn't own the associated `mutex`, this method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`."},{"pos":[11021,11140],"content":"Otherwise, this method calls <ph id=\"ph1\">`unlock`</ph> on the associated <ph id=\"ph2\">`mutex`</ph> and sets the internal thread ownership flag to <ph id=\"ph3\">`false`</ph>.","source":"Otherwise, this method calls `unlock` on the associated `mutex` and sets the internal thread ownership flag to `false`."},{"pos":[11149,11157],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Header Files Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id=\"ph1\"> </ph>","pos":[11161,11244],"source":"[Header Files Reference](../standard-library/cpp-standard-library-header-files.md) "},{"content":"<bpt id=\"p1\"> [</bpt><ph id=\"ph1\">\\&lt;</ph>mutex&gt;<ept id=\"p1\">](../standard-library/mutex.md)</ept>","pos":[11247,11288],"source":" [\\<mutex>](../standard-library/mutex.md)"}],"content":"---\ntitle: \"unique_lock Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"mutex/std::unique_lock\"\ndev_langs: \n  - \"C++\"\nms.assetid: f4ed8ba9-c8af-446f-8ef0-0b356bad14bd\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# unique_lock Class\nRepresents a template that can be instantiated to create objects that manage the locking and unlocking of a `mutex`.  \n  \n## Syntax  \n  \n```\ntemplate <class Mutex>\nclass unique_lock;\n```  \n  \n## Remarks  \n The template argument `Mutex` must name a *mutex type*.  \n  \n Internally, a `unique_lock` stores a pointer to an associated `mutex` object and a `bool` that indicates whether the current thread owns the `mutex`.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`mutex_type`|Synonym for the template argument `Mutex`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[unique_lock Constructor](#unique_lock__unique_lock_constructor)|Constructs a `unique_lock` object.|  \n|[~unique_lock Destructor](#unique_lock___dtorunique_lock_destructor)|Releases any resources that are associated with the `unique_lock` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[lock](#unique_lock__lock_method)|Blocks the calling thread until the thread obtains ownership of the associated `mutex`.|  \n|[mutex](#unique_lock__mutex_method)|Retrieves the stored pointer to the associated `mutex`.|  \n|[owns_lock](#unique_lock__owns_lock_method)|Specifies whether the calling thread owns the associated `mutex`.|  \n|[release](#unique_lock__release_method)|Disassociates the `unique_lock` object from the associated `mutex` object.|  \n|[swap](#unique_lock__swap_method)|Swaps the associated `mutex` and ownership status with that of a specified object.|  \n|[try_lock](#unique_lock__try_lock_method)|Attempts to obtain ownership of the associated `mutex` without blocking.|  \n|[try_lock_for](#unique_lock__try_lock_for_method)|Attempts to obtain ownership of the associated `mutex` without blocking.|  \n|[try_lock_until](#unique_lock__try_lock_until_method)|Attempts to obtain ownership of the associated `mutex` without blocking.|  \n|[unlock](#unique_lock__unlock_method)|Releases ownership of the associated `mutex`.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[operator bool](#unique_lock__operator_bool)|Specifies whether the calling thread has ownership of the associated `mutex`.|  \n|[operator=](#unique_lock__operator_eq)|Copies the stored `mutex` pointer and associated ownership status from a specified object.|  \n  \n## Inheritance Hierarchy  \n `unique_lock`  \n  \n## Requirements  \n **Header:** mutex  \n  \n **Namespace:** std  \n  \n##  <a name=\"unique_lock__lock_method\"></a>  lock  \n Blocks the calling thread until the thread obtains ownership of the associated `mutex`.  \n  \n```cpp\nvoid lock();\n```  \n  \n### Remarks  \n If the stored `mutex` pointer is `null`, this method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`.  \n  \n If the calling thread already owns the associated `mutex`, this method throws a `system_error` that has an error code of `resource_deadlock_would_occur`.  \n  \n Otherwise, this method calls `lock` on the associated `mutex` and sets the internal thread ownership flag to `true`.  \n  \n##  <a name=\"unique_lock__mutex_method\"></a>  mutex  \n Retrieves the stored pointer to the associated `mutex`.  \n  \n```cpp\nmutex_type *mutex() const noexcept;\n```  \n  \n##  <a name=\"unique_lock__operator_bool\"></a>  operator bool  \n Specifies whether the calling thread has ownership of the associated mutex.  \n  \n```cpp\nexplicit operator bool() noexcept\n```  \n  \n### Return Value  \n `true` if the thread owns the mutex; otherwise `false`.  \n  \n##  <a name=\"unique_lock__operator_eq\"></a>  operator=  \n Copies the stored `mutex` pointer and associated ownership status from a specified object.  \n  \n```cpp\nunique_lock& operator=(unique_lock&& Other) noexcept;\n```  \n  \n### Parameters  \n `Other`  \n A `unique_lock` object.  \n  \n### Return Value  \n `*this`  \n  \n### Remarks  \n If the calling thread owns the previously associated `mutex`, before this method calls `unlock` on the `mutex`, it assigns the new values.  \n  \n After the copy, this method sets `Other` to a default-constructed state.  \n  \n##  <a name=\"unique_lock__owns_lock_method\"></a>  owns_lock  \n Specifies whether the calling thread owns the associated `mutex`.  \n  \n```cpp\nbool owns_lock() const noexcept;\n```  \n  \n### Return Value  \n `true` if the thread owns the `mutex`; otherwise, `false`.  \n  \n##  <a name=\"unique_lock__release_method\"></a>  release  \n Disassociates the `unique_lock` object from the associated `mutex` object.  \n  \n```cpp\nmutex_type *release() noexcept;\n```  \n  \n### Return Value  \n The previous value of the stored `mutex` pointer.  \n  \n### Remarks  \n This method sets the value of the stored `mutex` pointer to 0 and sets the internal `mutex` ownership flag to `false`.  \n  \n##  <a name=\"unique_lock__swap_method\"></a>  swap  \n Swaps the associated `mutex` and ownership status with that of a specified object.  \n  \n```\nvoid swap(unique_lock& Other) noexcept;\n```  \n  \n### Parameters  \n `Other`  \n A `unique_lock` object.  \n  \n##  <a name=\"unique_lock__try_lock_method\"></a>  try_lock  \n Attempts to obtain ownership of the associated `mutex` without blocking.  \n  \n```cpp\nbool try_lock() noexcept;\n```  \n  \n### Return Value  \n `true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`.  \n  \n### Remarks  \n If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`.  \n  \n If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`.  \n  \n##  <a name=\"unique_lock__try_lock_for_method\"></a>  try_lock_for  \n Attempts to obtain ownership of the associated `mutex` without blocking.  \n  \n```\ntemplate <class Rep, class Period>\nbool try_lock_for(\n    const chrono::duration<Rep, Period>& Rel_time);\n```  \n  \n### Parameters  \n `Rel_time`  \n A [chrono::duration](../standard-library/duration-class.md) object that specifies the maximum amount of time that the method attempts to obtain ownership of the `mutex`.  \n  \n### Return Value  \n `true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`.  \n  \n### Remarks  \n If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`.  \n  \n If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`.  \n  \n##  <a name=\"unique_lock__try_lock_until_method\"></a>  try_lock_until  \n Attempts to obtain ownership of the associated `mutex` without blocking.  \n  \n```cpp\ntemplate <class Clock, class Duration>\nbool try_lock_until(const chrono::time_point<Clock, Duration>& Abs_time);\n\nbool try_lock_until(const xtime* Abs_time);\n```  \n  \n### Parameters  \n `Abs_time`  \n A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the `mutex`.  \n  \n### Return Value  \n `true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`.  \n  \n### Remarks  \n If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`.  \n  \n If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`.  \n  \n##  <a name=\"unique_lock__unique_lock_constructor\"></a>  unique_lock Constructor  \n Constructs a `unique_lock` object.  \n  \n```cpp\nunique_lock() noexcept;\nunique_lock(unique_lock&& Other) noexcept;\nexplicit unique_lock(mutex_type& Mtx);\n\nunique_lock(mutex_type& Mtx, adopt_lock_t Adopt);\n\nunique_lock(mutex_type& Mtx, defer_lock_t Defer) noexcept;\nunique_lock(mutex_type& Mtx, try_to_lock_t Try);\n\ntemplate <class Rep, class Period>\nunique_lock(mutex_type& Mtx,\n    const chrono::duration<Rep, Period>  \nRel_time);\n\ntemplate <class Clock, class Duration>\nunique_lock(mutex_type& Mtx,\n    const chrono::time_point<Clock, Duration>  \nAbs_time);\n\nunique_lock(mutex_type& Mtx,\n    const xtime* Abs_time) noexcept;\n```  \n  \n### Parameters  \n `Mtx`  \n A mutex type object.  \n  \n `Rel_time`  \n A [chrono::duration](../standard-library/duration-class.md) object that specifies the maximum amount of time that the method attempts to obtain ownership of the `mutex`.  \n  \n `Abs_time`  \n A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the `mutex`.  \n  \n `Other`  \n A `unique_lock` object.  \n  \n### Remarks  \n The first constructor constructs an object that has an associated mutex pointer value of 0.  \n  \n The second constructor moves the associated mutex status from `Other`. After the move, `Other` is no longer associated with a mutex.  \n  \n The remaining constructors store & `Mtx` as the stored `mutex` pointer. Ownership of the `mutex` is determined by the second argument, if it exists.  \n  \n|||  \n|-|-|  \n|`No argument`|Ownership is obtained by calling the `lock` method on the associated `mutex` object.|  \n|`Adopt`|Ownership is assumed. `Mtx` must be locked when the constructor is called.|  \n|`Defer`|The calling thread is assumed not to own the `mutex` object. `Mtx` must not be locked when the constructor is called.|  \n|`Try`|Ownership is determined by calling `try_lock` on the associated `mutex` object. The constructor throws nothing.|  \n|`Rel_time`|Ownership is determined by calling `try_lock_for(Rel_time)`.|  \n|`Abs_time`|Ownership is determined by calling `try_lock_until(Abs_time)`.|  \n  \n##  <a name=\"unique_lock___dtorunique_lock_destructor\"></a>  ~unique_lock Destructor  \n Releases any resources that are associated with the `unique_lock` object.  \n  \n```cpp\n~unique_lock() noexcept;\n```  \n  \n### Remarks  \n If the calling thread owns the associated `mutex`, the destructor releases ownership by calling unlock on the `mutex` object.  \n  \n##  <a name=\"unique_lock__unlock_method\"></a>  unlock  \n Releases ownership of the associated `mutex`.  \n  \n```cpp\nvoid unlock();\n```  \n  \n### Remarks  \n If the calling thread doesn't own the associated `mutex`, this method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`.  \n  \n Otherwise, this method calls `unlock` on the associated `mutex` and sets the internal thread ownership flag to `false`.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<mutex>](../standard-library/mutex.md)\n\n\n\n"}