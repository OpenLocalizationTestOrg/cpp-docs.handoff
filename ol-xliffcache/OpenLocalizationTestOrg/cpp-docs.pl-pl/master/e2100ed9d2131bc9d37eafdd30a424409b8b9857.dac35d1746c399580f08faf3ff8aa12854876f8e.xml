{"nodes":[{"pos":[12,48],"content":"map::swap (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"map::swap (STL-CLR) | Microsoft Docs","pos":[0,36]}]},{"content":"map::swap (STL/CLR)","pos":[619,638]},{"content":"Swaps the contents of two containers.","pos":[639,676]},{"content":"Syntax","pos":[685,691]},{"content":"Parameters","pos":[755,765]},{"content":"right","pos":[769,774]},{"content":"Container to swap contents with.","pos":[778,810]},{"content":"Remarks","pos":[819,826]},{"content":"The member function swaps the controlled sequences between <ph id=\"ph1\">`this`</ph> and <ph id=\"ph2\">`right`</ph>.","pos":[830,908],"source":"The member function swaps the controlled sequences between `this` and `right`."},{"content":"It does so in constant time and it throws no exceptions.","pos":[909,965]},{"content":"You use it as a quick way to exchange the contents of two containers.","pos":[966,1035]},{"content":"Example","pos":[1044,1051]},{"content":"Requirements","pos":[2463,2475]},{"pos":[2479,2504],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/map&gt;","source":"**Header:** \\<cliext/map>"},{"pos":[2511,2532],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2541,2549]},{"content":"map (STL/CLR)","pos":[2554,2567]},{"content":"map::operator= (STL/CLR)","pos":[2600,2624]}],"content":"---\ntitle: \"map::swap (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::map::swap\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"swap member [STL/CLR]\"\nms.assetid: b36ed982-21ce-40e5-9636-ecdbaf1b7eec\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# map::swap (STL/CLR)\nSwaps the contents of two containers.  \n  \n## Syntax  \n  \n```  \nvoid swap(map<Key, Mapped>% right);  \n```  \n  \n#### Parameters  \n right  \n Container to swap contents with.  \n  \n## Remarks  \n The member function swaps the controlled sequences between `this` and `right`. It does so in constant time and it throws no exceptions. You use it as a quick way to exchange the contents of two containers.  \n  \n## Example  \n  \n```  \n// cliext_map_swap.cpp   \n// compile with: /clr   \n#include <cliext/map>   \n  \ntypedef cliext::map<wchar_t, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n    c1.insert(Mymap::make_value(L'a', 1));   \n    c1.insert(Mymap::make_value(L'b', 2));   \n    c1.insert(Mymap::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Mymap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// construct another container with repetition of values   \n    Mymap c2;   \n    c2.insert(Mymap::make_value(L'd', 4));   \n    c2.insert(Mymap::make_value(L'e', 5));   \n    c2.insert(Mymap::make_value(L'f', 6));   \n    for each (Mymap::value_type elem in c2)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// swap and redisplay   \n    c1.swap(c2);   \n    for each (Mymap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n    for each (Mymap::value_type elem in c2)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[a 1] [b 2] [c 3]  \n[d 4] [e 5] [f 6]  \n[d 4] [e 5] [f 6]  \n[a 1] [b 2] [c 3]  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [map (STL/CLR)](../dotnet/map-stl-clr.md)   \n [map::operator= (STL/CLR)](../dotnet/map-operator-assign-stl-clr.md)"}