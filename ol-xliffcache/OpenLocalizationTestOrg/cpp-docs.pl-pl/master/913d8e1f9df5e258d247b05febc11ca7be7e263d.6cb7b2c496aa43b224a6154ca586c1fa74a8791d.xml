{"nodes":[{"pos":[12,63],"content":"Composite Control Global Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Composite Control Global Functions | Microsoft Docs","pos":[0,51]}]},{"pos":[611,645],"content":"Composite Control Global Functions","linkify":"Composite Control Global Functions","nodes":[{"content":"Composite Control Global Functions","pos":[0,34]}]},{"content":"These functions provide support for creating dialog boxes, and for creating, hosting and licensing ActiveX controls.","pos":[646,762]},{"pos":[770,937],"content":"[!IMPORTANT]\n The functions listed in the following table cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].","leadings":["","> "],"nodes":[{"content":"The functions listed in the following table cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[14,165],"source":" The functions listed in the following table cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."}]},{"pos":[958,991],"content":"<bpt id=\"p1\">[</bpt>AtlAxDialogBox<ept id=\"p1\">](#atlaxdialogbox)</ept>","source":"[AtlAxDialogBox](#atlaxdialogbox)"},{"content":"Creates a modal dialog box from a dialog template provided by the user.","pos":[992,1063]},{"content":"The resulting dialog box can contain ActiveX controls.","pos":[1064,1118]},{"pos":[1123,1162],"content":"<bpt id=\"p1\">[</bpt>AtlAxCreateDialog<ept id=\"p1\">](#atlaxcreatedialog)</ept>","source":"[AtlAxCreateDialog](#atlaxcreatedialog)"},{"content":"Creates a modeless dialog box from a dialog template provided by the user.","pos":[1163,1237]},{"content":"The resulting dialog box can contain ActiveX controls.","pos":[1238,1292]},{"pos":[1297,1338],"content":"<bpt id=\"p1\">[</bpt>AtlAxCreateControl<ept id=\"p1\">](#atlaxcreatecontrol)</ept>","source":"[AtlAxCreateControl](#atlaxcreatecontrol)"},{"content":"Creates an ActiveX control, initializes it, and hosts it in the specified window.","pos":[1339,1420]},{"pos":[1425,1470],"content":"<bpt id=\"p1\">[</bpt>AtlAxCreateControlEx<ept id=\"p1\">](#atlaxcreatecontrolex)</ept>","source":"[AtlAxCreateControlEx](#atlaxcreatecontrolex)"},{"content":"Creates an ActiveX control, initializes it, hosts it in the specified window, and retrieves an interface pointer (or pointers) from the control.","pos":[1471,1615]},{"pos":[1620,1667],"content":"<bpt id=\"p1\">[</bpt>AtlAxCreateControlLic<ept id=\"p1\">](#atlaxcreatecontrollic)</ept>","source":"[AtlAxCreateControlLic](#atlaxcreatecontrollic)"},{"content":"Creates a licensed ActiveX control, initializes it, and hosts it in the specified window.","pos":[1668,1757]},{"pos":[1762,1813],"content":"<bpt id=\"p1\">[</bpt>AtlAxCreateControlLicEx<ept id=\"p1\">](#atlaxcreatecontrollicex)</ept>","source":"[AtlAxCreateControlLicEx](#atlaxcreatecontrollicex)"},{"content":"Creates a licensed ActiveX control, initializes it, hosts it in the specified window, and retrieves an interface pointer (or pointers) from the control.","pos":[1814,1966]},{"pos":[1971,2012],"content":"<bpt id=\"p1\">[</bpt>AtlAxAttachControl<ept id=\"p1\">](#atlaxattachcontrol)</ept>","source":"[AtlAxAttachControl](#atlaxattachcontrol)"},{"content":"Attaches a previously created control to the specified window.","pos":[2013,2075]},{"pos":[2080,2109],"content":"<bpt id=\"p1\">[</bpt>AtlAxGetHost<ept id=\"p1\">](#atlaxgethost)</ept>","source":"[AtlAxGetHost](#atlaxgethost)"},{"content":"Used to obtain a direct interface pointer to the container for a specified window (if any), given its handle.","pos":[2110,2219]},{"pos":[2224,2259],"content":"<bpt id=\"p1\">[</bpt>AtlAxGetControl<ept id=\"p1\">](#atlaxgetcontrol)</ept>","source":"[AtlAxGetControl](#atlaxgetcontrol)"},{"content":"Used to obtain a direct interface pointer to the control contained inside a specified window (if any), given its handle.","pos":[2260,2380]},{"pos":[2385,2420],"content":"<bpt id=\"p1\">[</bpt>AtlSetChildSite<ept id=\"p1\">](#atlsetchildsite)</ept>","source":"[AtlSetChildSite](#atlsetchildsite)"},{"pos":[2421,2468],"content":"Initializes the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the child site.","source":"Initializes the **IUnknown** of the child site."},{"pos":[2473,2502],"content":"<bpt id=\"p1\">[</bpt>AtlAxWinInit<ept id=\"p1\">](#atlaxwininit)</ept>","source":"[AtlAxWinInit](#atlaxwininit)"},{"content":"Initializes the hosting code for AxWin objects.","pos":[2503,2550]},{"pos":[2555,2584],"content":"<bpt id=\"p1\">[</bpt>AtlAxWinTerm<ept id=\"p1\">](#atlaxwinterm)</ept>","source":"[AtlAxWinTerm](#atlaxwinterm)"},{"content":"Uninitializes the hosting code for AxWin objects.","pos":[2585,2634]},{"pos":[2639,2698],"content":"<bpt id=\"p1\">[</bpt>AtlGetObjectSourceInterface<ept id=\"p1\">](#atlgetobjectsourceinterface)</ept>","source":"[AtlGetObjectSourceInterface](#atlgetobjectsourceinterface)"},{"content":"Returns information about the default source interface of an object.","pos":[2699,2767]},{"pos":[2778,2823],"content":"<bpt id=\"p1\">&lt;a name=\"atlaxdialogbox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlAxDialogBox","linkify":"<a name=\"atlaxdialogbox\"></a>  AtlAxDialogBox","source":"<a name=\"atlaxdialogbox\"></a>  AtlAxDialogBox"},{"content":"Creates a modal dialog box from a dialog template provided by the user.","pos":[2827,2898]},{"pos":[3081,3091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Identifies an instance of the module whose executable file contains the dialog box template.","pos":[3110,3207]},{"content":"[in] Identifies the dialog box template.","pos":[3234,3274]},{"content":"This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template.","pos":[3275,3487]},{"content":"If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier.","pos":[3488,3622]},{"content":"You can use the <bpt id=\"p1\">[</bpt>MAKEINTRESOURCE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648029)</ept> macro to create this value.","pos":[3623,3744],"source":" You can use the [MAKEINTRESOURCE](http://msdn.microsoft.com/library/windows/desktop/ms648029) macro to create this value."},{"content":"[in] Identifies the window that owns the dialog box.","pos":[3767,3819]},{"content":"[in] Points to the dialog box procedure.","pos":[3844,3884]},{"content":"For more information about the dialog box procedure, see <bpt id=\"p1\">[</bpt>DialogProc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645469)</ept>.","pos":[3885,4015],"source":" For more information about the dialog box procedure, see [DialogProc](http://msdn.microsoft.com/library/windows/desktop/ms645469)."},{"content":"[in] Specifies the value to pass to the dialog box in the <bpt id=\"p1\">**</bpt>lParam<ept id=\"p1\">**</ept> parameter of the <bpt id=\"p2\">**</bpt>WM_INITDIALOG<ept id=\"p2\">**</ept> message.","pos":[4039,4151],"source":" [in] Specifies the value to pass to the dialog box in the **lParam** parameter of the **WM_INITDIALOG** message."},{"pos":[4161,4173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the standard HRESULT values.","pos":[4177,4212]},{"pos":[4222,4229],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To use <bpt id=\"p1\">**</bpt>AtlAxDialogBox<ept id=\"p1\">**</ept> with a dialog template that contains an ActiveX control, specify a valid <bpt id=\"p2\">**</bpt>CLSID<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>APPID<ept id=\"p3\">**</ept> or URL string as the <bpt id=\"p4\">*</bpt>text<ept id=\"p4\">*</ept> field of the <bpt id=\"p5\">**</bpt>CONTROL<ept id=\"p5\">**</ept> section of the dialog resource, along with \"AtlAxWin80\" as the <bpt id=\"p6\">*</bpt>class name<ept id=\"p6\">*</ept> field under the same section.","pos":[4233,4511],"source":"To use **AtlAxDialogBox** with a dialog template that contains an ActiveX control, specify a valid **CLSID**, **APPID** or URL string as the *text* field of the **CONTROL** section of the dialog resource, along with \"AtlAxWin80\" as the *class name* field under the same section."},{"content":"The following demonstrates what a valid <bpt id=\"p1\">**</bpt>CONTROL<ept id=\"p1\">**</ept> section might look like:","pos":[4512,4588],"source":" The following demonstrates what a valid **CONTROL** section might look like:"},{"content":"For more information on editing resource scripts, see <bpt id=\"p1\">[</bpt>How to: Open a Resource Script File in Text Format<ept id=\"p1\">](../../windows/how-to-open-a-resource-script-file-in-text-format.md)</ept>.","pos":[4726,4901],"source":"For more information on editing resource scripts, see [How to: Open a Resource Script File in Text Format](../../windows/how-to-open-a-resource-script-file-in-text-format.md)."},{"content":"For more information on control resource-definition statements, see <bpt id=\"p1\">[</bpt>Common Control Parameters<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa380902)</ept> under <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph><bpt id=\"p2\">*</bpt>: SDK Tools<ept id=\"p2\">*</ept>.","pos":[4902,5129],"source":" For more information on control resource-definition statements, see [Common Control Parameters](http://msdn.microsoft.com/library/windows/desktop/aa380902) under [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]*: SDK Tools*."},{"pos":[5136,5409],"content":"For more information on dialog boxes in general, refer to <bpt id=\"p1\">[</bpt>DialogBox<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645452)</ept> and <bpt id=\"p2\">[</bpt>CreateDialogParam<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms645445)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information on dialog boxes in general, refer to [DialogBox](http://msdn.microsoft.com/library/windows/desktop/ms645452) and [CreateDialogParam](http://msdn.microsoft.com/library/windows/desktop/ms645445) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[5419,5470],"content":"<bpt id=\"p1\">&lt;a name=\"atlaxcreatedialog\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlAxCreateDialog","linkify":"<a name=\"atlaxcreatedialog\"></a>  AtlAxCreateDialog","source":"<a name=\"atlaxcreatedialog\"></a>  AtlAxCreateDialog"},{"content":"Creates a modeless dialog box from a dialog template provided by the user.","pos":[5474,5548]},{"pos":[5735,5745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Identifies an instance of the module whose executable file contains the dialog box template.","pos":[5764,5861]},{"content":"[in] Identifies the dialog box template.","pos":[5888,5928]},{"content":"This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template.","pos":[5929,6141]},{"content":"If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier.","pos":[6142,6276]},{"content":"You can use the <bpt id=\"p1\">[</bpt>MAKEINTRESOURCE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648029)</ept> macro to create this value.","pos":[6277,6398],"source":" You can use the [MAKEINTRESOURCE](http://msdn.microsoft.com/library/windows/desktop/ms648029) macro to create this value."},{"content":"[in] Identifies the window that owns the dialog box.","pos":[6421,6473]},{"content":"[in] Points to the dialog box procedure.","pos":[6498,6538]},{"content":"For more information about the dialog box procedure, see <bpt id=\"p1\">[</bpt>DialogProc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645469)</ept>.","pos":[6539,6669],"source":" For more information about the dialog box procedure, see [DialogProc](http://msdn.microsoft.com/library/windows/desktop/ms645469)."},{"content":"[in] Specifies the value to pass to the dialog box in the <bpt id=\"p1\">**</bpt>lParam<ept id=\"p1\">**</ept> parameter of the <bpt id=\"p2\">**</bpt>WM_INITDIALOG<ept id=\"p2\">**</ept> message.","pos":[6693,6805],"source":" [in] Specifies the value to pass to the dialog box in the **lParam** parameter of the **WM_INITDIALOG** message."},{"pos":[6815,6827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the standard HRESULT values.","pos":[6831,6866]},{"pos":[6876,6883],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The resulting dialog box can contain ActiveX controls.","pos":[6887,6941]},{"pos":[6948,7170],"content":"See <bpt id=\"p1\">[</bpt>CreateDialog<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645434)</ept> and <bpt id=\"p2\">[</bpt>CreateDialogParam<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms645445)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [CreateDialog](http://msdn.microsoft.com/library/windows/desktop/ms645434) and [CreateDialogParam](http://msdn.microsoft.com/library/windows/desktop/ms645445) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[7180,7233],"content":"<bpt id=\"p1\">&lt;a name=\"atlaxcreatecontrol\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlAxCreateControl","linkify":"<a name=\"atlaxcreatecontrol\"></a>  AtlAxCreateControl","source":"<a name=\"atlaxcreatecontrol\"></a>  AtlAxCreateControl"},{"content":"Creates an ActiveX control, initializes it, and hosts it in the specified window.","pos":[7237,7318]},{"pos":[7467,7477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a string to be passed to the control.","pos":[7495,7545]},{"content":"Must be formatted in one of the following ways:","pos":[7546,7593]},{"content":"A ProgID such as \"MSCAL.Calendar.7\"","pos":[7603,7638]},{"content":"A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"","pos":[7648,7704]},{"content":"A URL such as \"http://www.microsoft.com\"","pos":[7714,7754]},{"content":"A reference to an Active document such as \"file://<ph id=\"ph1\">\\\\</ph>\\Documents\\MyDoc.doc\"","pos":[7764,7837],"source":"A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\""},{"content":"A fragment of HTML such as \"MSHTML:<ph id=\"ph1\">\\&lt;</ph>HTML&gt;<ph id=\"ph2\">\\&lt;</ph>BODY&gt;This is a line of text<ph id=\"ph3\">\\&lt;</ph>/BODY&gt;<ph id=\"ph4\">\\&lt;</ph>/HTML&gt;\"","pos":[7847,7935],"source":"A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\""},{"pos":[7947,8054],"content":"[!NOTE]\n\"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.","leadings":["","    >  "],"nodes":[{"content":"\"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.","pos":[8,100]}]},{"pos":[8061,8134],"content":"`hWnd`  \n[in] Handle to the window that the control will be attached to.","leadings":[""," "],"nodes":[{"content":"[in] Handle to the window that the control will be attached to.","pos":[9,72]}]},{"pos":[8141,8255],"content":"`pStream`  \n[in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"[in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","pos":[12,113],"nodes":[{"content":"[in] A pointer to a stream that is used to initialize the properties of the control.","pos":[0,84]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[85,101],"source":" Can be **NULL**."}]}]},{"pos":[8262,8382],"content":"`ppUnkContainer`  \n[out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"[out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","pos":[19,119],"nodes":[{"content":"[out] The address of a pointer that will receive the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the container.","pos":[0,83],"source":"[out] The address of a pointer that will receive the **IUnknown** of the container."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[84,100],"source":" Can be **NULL**."}]}]},{"pos":[8392,8404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the standard HRESULT values.","pos":[8408,8443]},{"pos":[8453,8460],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8464,8638],"content":"This global function gives you the same result as calling <bpt id=\"p1\">[</bpt>AtlAxCreateControlEx<ept id=\"p1\">](#atlaxcreatecontrolex)</ept>( <ph id=\"ph1\">`lpszName`</ph><bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept> <ph id=\"ph2\">`hWnd`</ph><bpt id=\"p3\">**</bpt>,<ept id=\"p3\">**</ept> <ph id=\"ph3\">`pStream`</ph><bpt id=\"p4\">**</bpt>, NULL, NULL, NULL, NULL<ept id=\"p4\">**</ept> );.","source":"This global function gives you the same result as calling [AtlAxCreateControlEx](#atlaxcreatecontrolex)( `lpszName`**,** `hWnd`**,** `pStream`**, NULL, NULL, NULL, NULL** );."},{"pos":[8645,8735],"content":"To create a licensed ActiveX control, see <bpt id=\"p1\">[</bpt>AtlAxCreateControlLic<ept id=\"p1\">](#atlaxcreatecontrollic)</ept>.","source":"To create a licensed ActiveX control, see [AtlAxCreateControlLic](#atlaxcreatecontrollic)."},{"pos":[8745,8802],"content":"<bpt id=\"p1\">&lt;a name=\"atlaxcreatecontrolex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlAxCreateControlEx","linkify":"<a name=\"atlaxcreatecontrolex\"></a>  AtlAxCreateControlEx","source":"<a name=\"atlaxcreatecontrolex\"></a>  AtlAxCreateControlEx"},{"content":"Creates an ActiveX control, initializes it, and hosts it in the specified window.","pos":[8806,8887]},{"content":"An interface pointer and event sink for the new control can also be created.","pos":[8888,8964]},{"pos":[9206,9216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a string to be passed to the control.","pos":[9234,9284]},{"content":"Must be formatted in one of the following ways:","pos":[9285,9332]},{"content":"A ProgID such as \"MSCAL.Calendar.7\"","pos":[9342,9377]},{"content":"A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"","pos":[9387,9443]},{"content":"A URL such as \"http://www.microsoft.com\"","pos":[9453,9493]},{"content":"A reference to an Active document such as \"file://<ph id=\"ph1\">\\\\</ph>\\Documents\\MyDoc.doc\"","pos":[9503,9576],"source":"A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\""},{"content":"A fragment of HTML such as \"MSHTML:<ph id=\"ph1\">\\&lt;</ph>HTML&gt;<ph id=\"ph2\">\\&lt;</ph>BODY&gt;This is a line of text<ph id=\"ph3\">\\&lt;</ph>/BODY&gt;<ph id=\"ph4\">\\&lt;</ph>/HTML&gt;\"","pos":[9586,9674],"source":"A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\""},{"pos":[9686,9793],"content":"[!NOTE]\n\"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.","leadings":["","    >  "],"nodes":[{"content":"\"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.","pos":[8,100]}]},{"pos":[9800,9873],"content":"`hWnd`  \n[in] Handle to the window that the control will be attached to.","leadings":[""," "],"nodes":[{"content":"[in] Handle to the window that the control will be attached to.","pos":[9,72]}]},{"pos":[9880,9994],"content":"`pStream`  \n[in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"[in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","pos":[12,113],"nodes":[{"content":"[in] A pointer to a stream that is used to initialize the properties of the control.","pos":[0,84]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[85,101],"source":" Can be **NULL**."}]}]},{"pos":[10001,10121],"content":"`ppUnkContainer`  \n[out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"[out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","pos":[19,119],"nodes":[{"content":"[out] The address of a pointer that will receive the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the container.","pos":[0,83],"source":"[out] The address of a pointer that will receive the **IUnknown** of the container."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[84,100],"source":" Can be **NULL**."}]}]},{"pos":[10128,10252],"content":"`ppUnkControl`  \n[out] The address of a pointer that will receive the **IUnknown** of the created control. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"[out] The address of a pointer that will receive the **IUnknown** of the created control. Can be **NULL**.","pos":[17,123],"nodes":[{"content":"[out] The address of a pointer that will receive the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the created control.","pos":[0,89],"source":"[out] The address of a pointer that will receive the **IUnknown** of the created control."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[90,106],"source":" Can be **NULL**."}]}]},{"pos":[10259,10346],"content":"`iidSink`  \nThe interface identifier of an outgoing interface on the contained object.","leadings":[""," "],"nodes":[{"content":"The interface identifier of an outgoing interface on the contained object.","pos":[12,86]}]},{"pos":[10353,10570],"content":"*punkSink*  \nA pointer to the **IUnknown** interface of the sink object to be connected to the connection point specified by `iidSink` on the contained object after the contained object has been successfully created.","leadings":[""," "],"nodes":[{"content":"<bpt id=\"p1\">*</bpt>punkSink<ept id=\"p1\">*</ept>","pos":[0,10],"source":"*punkSink*"},{"content":"A pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> interface of the sink object to be connected to the connection point specified by <ph id=\"ph1\">`iidSink`</ph> on the contained object after the contained object has been successfully created.","pos":[13,216],"source":"A pointer to the **IUnknown** interface of the sink object to be connected to the connection point specified by `iidSink` on the contained object after the contained object has been successfully created."}]},{"pos":[10580,10592],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the standard HRESULT values.","pos":[10596,10631]},{"pos":[10641,10648],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10652,10876],"content":"<ph id=\"ph1\">`AtlAxCreateControlEx`</ph> is similar to <bpt id=\"p1\">[</bpt>AtlAxCreateControl<ept id=\"p1\">](#atlaxcreatecontrol)</ept> but also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control.","source":"`AtlAxCreateControlEx` is similar to [AtlAxCreateControl](#atlaxcreatecontrol) but also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control."},{"pos":[10883,10977],"content":"To create a licensed ActiveX control, see <bpt id=\"p1\">[</bpt>AtlAxCreateControlLicEx<ept id=\"p1\">](#atlaxcreatecontrollicex)</ept>.","source":"To create a licensed ActiveX control, see [AtlAxCreateControlLicEx](#atlaxcreatecontrollicex)."},{"pos":[10987,11046],"content":"<bpt id=\"p1\">&lt;a name=\"atlaxcreatecontrollic\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlAxCreateControlLic","linkify":"<a name=\"atlaxcreatecontrollic\"></a>  AtlAxCreateControlLic","source":"<a name=\"atlaxcreatecontrollic\"></a>  AtlAxCreateControlLic"},{"content":"Creates a licensed ActiveX control, initializes it, and hosts it in the specified window.","pos":[11050,11139]},{"pos":[11316,11326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a string to be passed to the control.","pos":[11344,11394]},{"content":"Must be formatted in one of the following ways:","pos":[11395,11442]},{"content":"A ProgID such as \"MSCAL.Calendar.7\"","pos":[11452,11487]},{"content":"A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"","pos":[11497,11553]},{"content":"A URL such as \"http://www.microsoft.com\"","pos":[11563,11603]},{"content":"A reference to an Active document such as \"file://<ph id=\"ph1\">\\\\</ph>\\Documents\\MyDoc.doc\"","pos":[11613,11686],"source":"A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\""},{"content":"A fragment of HTML such as \"MSHTML:<ph id=\"ph1\">\\&lt;</ph>HTML&gt;<ph id=\"ph2\">\\&lt;</ph>BODY&gt;This is a line of text<ph id=\"ph3\">\\&lt;</ph>/BODY&gt;<ph id=\"ph4\">\\&lt;</ph>/HTML&gt;\"","pos":[11696,11784],"source":"A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\""},{"pos":[11796,11903],"content":"[!NOTE]\n\"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.","leadings":["","    >  "],"nodes":[{"content":"\"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.","pos":[8,100]}]},{"pos":[11910,11978],"content":"`hWnd`  \nHandle to the window that the control will be attached to.","leadings":[""," "],"nodes":[{"content":"Handle to the window that the control will be attached to.","pos":[9,67]}]},{"pos":[11985,12094],"content":"`pStream`  \nA pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","pos":[12,108],"nodes":[{"content":"A pointer to a stream that is used to initialize the properties of the control.","pos":[0,79]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[80,96],"source":" Can be **NULL**."}]}]},{"pos":[12101,12215],"content":"`ppUnkContainer`  \nThe address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","pos":[19,113],"nodes":[{"content":"The address of a pointer that will receive the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the container.","pos":[0,77],"source":"The address of a pointer that will receive the **IUnknown** of the container."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[78,94],"source":" Can be **NULL**."}]}]},{"pos":[12222,12283],"content":"`bstrLic`  \nThe BSTR containing the license for the control.","leadings":[""," "],"nodes":[{"content":"The BSTR containing the license for the control.","pos":[12,60]}]},{"pos":[12293,12305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the standard HRESULT values.","pos":[12309,12344]},{"pos":[12354,12361],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12365,12520],"content":"See <bpt id=\"p1\">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id=\"p1\">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample of how to use <ph id=\"ph1\">`AtlAxCreateControlLic`</ph>.","source":"See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample of how to use `AtlAxCreateControlLic`."},{"pos":[12530,12593],"content":"<bpt id=\"p1\">&lt;a name=\"atlaxcreatecontrollicex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlAxCreateControlLicEx","linkify":"<a name=\"atlaxcreatecontrollicex\"></a>  AtlAxCreateControlLicEx","source":"<a name=\"atlaxcreatecontrollicex\"></a>  AtlAxCreateControlLicEx"},{"content":"Creates a licensed ActiveX control, initializes it, and hosts it in the specified window.","pos":[12597,12686]},{"content":"An interface pointer and event sink for the new control can also be created.","pos":[12687,12763]},{"pos":[13033,13043],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a string to be passed to the control.","pos":[13061,13111]},{"content":"Must be formatted in one of the following ways:","pos":[13112,13159]},{"content":"A ProgID such as \"MSCAL.Calendar.7\"","pos":[13169,13204]},{"content":"A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"","pos":[13214,13270]},{"content":"A URL such as \"http://www.microsoft.com\"","pos":[13280,13320]},{"content":"A reference to an Active document such as \"file://<ph id=\"ph1\">\\\\</ph>\\Documents\\MyDoc.doc\"","pos":[13330,13403],"source":"A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\""},{"content":"A fragment of HTML such as \"MSHTML:<ph id=\"ph1\">\\&lt;</ph>HTML&gt;<ph id=\"ph2\">\\&lt;</ph>BODY&gt;This is a line of text<ph id=\"ph3\">\\&lt;</ph>/BODY&gt;<ph id=\"ph4\">\\&lt;</ph>/HTML&gt;\"","pos":[13413,13501],"source":"A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\""},{"pos":[13513,13620],"content":"[!NOTE]\n\"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.","leadings":["","    >  "],"nodes":[{"content":"\"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.","pos":[8,100]}]},{"pos":[13627,13695],"content":"`hWnd`  \nHandle to the window that the control will be attached to.","leadings":[""," "],"nodes":[{"content":"Handle to the window that the control will be attached to.","pos":[9,67]}]},{"pos":[13702,13811],"content":"`pStream`  \nA pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","pos":[12,108],"nodes":[{"content":"A pointer to a stream that is used to initialize the properties of the control.","pos":[0,79]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[80,96],"source":" Can be **NULL**."}]}]},{"pos":[13818,13932],"content":"`ppUnkContainer`  \nThe address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","pos":[19,113],"nodes":[{"content":"The address of a pointer that will receive the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the container.","pos":[0,77],"source":"The address of a pointer that will receive the **IUnknown** of the container."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[78,94],"source":" Can be **NULL**."}]}]},{"pos":[13939,14063],"content":"`ppUnkControl`  \n[out] The address of a pointer that will receive the **IUnknown** of the created control. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"[out] The address of a pointer that will receive the **IUnknown** of the created control. Can be **NULL**.","pos":[17,123],"nodes":[{"content":"[out] The address of a pointer that will receive the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the created control.","pos":[0,89],"source":"[out] The address of a pointer that will receive the **IUnknown** of the created control."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[90,106],"source":" Can be **NULL**."}]}]},{"pos":[14070,14157],"content":"`iidSink`  \nThe interface identifier of an outgoing interface on the contained object.","leadings":[""," "],"nodes":[{"content":"The interface identifier of an outgoing interface on the contained object.","pos":[12,86]}]},{"pos":[14164,14381],"content":"*punkSink*  \nA pointer to the **IUnknown** interface of the sink object to be connected to the connection point specified by `iidSink` on the contained object after the contained object has been successfully created.","leadings":[""," "],"nodes":[{"content":"<bpt id=\"p1\">*</bpt>punkSink<ept id=\"p1\">*</ept>","pos":[0,10],"source":"*punkSink*"},{"content":"A pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> interface of the sink object to be connected to the connection point specified by <ph id=\"ph1\">`iidSink`</ph> on the contained object after the contained object has been successfully created.","pos":[13,216],"source":"A pointer to the **IUnknown** interface of the sink object to be connected to the connection point specified by `iidSink` on the contained object after the contained object has been successfully created."}]},{"pos":[14388,14449],"content":"`bstrLic`  \nThe BSTR containing the license for the control.","leadings":[""," "],"nodes":[{"content":"The BSTR containing the license for the control.","pos":[12,60]}]},{"pos":[14459,14471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the standard HRESULT values.","pos":[14475,14510]},{"pos":[14520,14527],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14531,14764],"content":"<ph id=\"ph1\">`AtlAxCreateControlLicEx`</ph> is similar to <bpt id=\"p1\">[</bpt>AtlAxCreateControlLic<ept id=\"p1\">](#atlaxcreatecontrollic)</ept> but also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control.","source":"`AtlAxCreateControlLicEx` is similar to [AtlAxCreateControlLic](#atlaxcreatecontrollic) but also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control."},{"pos":[14774,14781],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14785,14942],"content":"See <bpt id=\"p1\">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id=\"p1\">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample of how to use <ph id=\"ph1\">`AtlAxCreateControlLicEx`</ph>.","source":"See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample of how to use `AtlAxCreateControlLicEx`."},{"pos":[14952,15005],"content":"<bpt id=\"p1\">&lt;a name=\"atlaxattachcontrol\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlAxAttachControl","linkify":"<a name=\"atlaxattachcontrol\"></a>  AtlAxAttachControl","source":"<a name=\"atlaxattachcontrol\"></a>  AtlAxAttachControl"},{"content":"Attaches a previously created control to the specified window.","pos":[15009,15071]},{"pos":[15198,15208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the control.","pos":[15226,15276],"source":" [in] A pointer to the **IUnknown** of the control."},{"content":"[in] Handle to the window that will host the control.","pos":[15293,15346]},{"content":"[out] A pointer to a pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the container object.","pos":[15373,15446],"source":" [out] A pointer to a pointer to the **IUnknown** of the container object."},{"pos":[15456,15468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the standard HRESULT values.","pos":[15472,15507]},{"pos":[15517,15524],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15528,15670],"content":"Use <bpt id=\"p1\">[</bpt>AtlAxCreateControlEx<ept id=\"p1\">](#atlaxcreatecontrolex)</ept> and <bpt id=\"p2\">[</bpt>AtlAxCreateControl<ept id=\"p2\">](#atlaxcreatecontrol)</ept> to simultaneously create and attach a control.","source":"Use [AtlAxCreateControlEx](#atlaxcreatecontrolex) and [AtlAxCreateControl](#atlaxcreatecontrol) to simultaneously create and attach a control."},{"pos":[15678,15789],"content":"[!NOTE]\n The control object being attached must be correctly initialized before calling `AtlAxAttachControl`.","leadings":["","> "],"nodes":[{"content":"The control object being attached must be correctly initialized before calling <ph id=\"ph1\">`AtlAxAttachControl`</ph>.","pos":[9,109],"source":" The control object being attached must be correctly initialized before calling `AtlAxAttachControl`."}]},{"pos":[15799,15840],"content":"<bpt id=\"p1\">&lt;a name=\"atlaxgethost\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlAxGetHost","linkify":"<a name=\"atlaxgethost\"></a>  AtlAxGetHost","source":"<a name=\"atlaxgethost\"></a>  AtlAxGetHost"},{"content":"Obtains a direct interface pointer to the container for a specified window (if any), given its handle.","pos":[15844,15946]},{"pos":[16028,16038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A handle to the window that is hosting the control.","pos":[16049,16105]},{"content":"[out] The <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the container of the control.","pos":[16120,16175],"source":" [out] The **IUnknown** of the container of the control."},{"pos":[16185,16197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the standard HRESULT values.","pos":[16201,16236]},{"pos":[16246,16293],"content":"<bpt id=\"p1\">&lt;a name=\"atlaxgetcontrol\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlAxGetControl","linkify":"<a name=\"atlaxgetcontrol\"></a>  AtlAxGetControl","source":"<a name=\"atlaxgetcontrol\"></a>  AtlAxGetControl"},{"content":"Obtains a direct interface pointer to the control contained inside a specified window given its handle.","pos":[16297,16400]},{"pos":[16485,16495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A handle to the window that is hosting the control.","pos":[16506,16562]},{"content":"[out] The <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the control being hosted.","pos":[16577,16628],"source":" [out] The **IUnknown** of the control being hosted."},{"pos":[16638,16650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the standard HRESULT values.","pos":[16654,16689]},{"pos":[16699,16746],"content":"<bpt id=\"p1\">&lt;a name=\"atlsetchildsite\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlSetChildSite","linkify":"<a name=\"atlsetchildsite\"></a>  AtlSetChildSite","source":"<a name=\"atlsetchildsite\"></a>  AtlSetChildSite"},{"pos":[16750,16846],"content":"Call this function to set the site of the child object to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the parent object.","source":"Call this function to set the site of the child object to the **IUnknown** of the parent object."},{"pos":[16952,16962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>punkChild<ept id=\"p1\">*</ept>","pos":[16966,16977],"source":"*punkChild*"},{"content":"[in] A pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> interface of the child.","pos":[16981,17039],"source":" [in] A pointer to the **IUnknown** interface of the child."},{"content":"[in] A pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> interface of the parent.","pos":[17062,17121],"source":" [in] A pointer to the **IUnknown** interface of the parent."},{"pos":[17131,17143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A standard HRESULT value.","pos":[17147,17172]},{"pos":[17182,17223],"content":"<bpt id=\"p1\">&lt;a name=\"atlaxwininit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlAxWinInit","linkify":"<a name=\"atlaxwininit\"></a>  AtlAxWinInit","source":"<a name=\"atlaxwininit\"></a>  AtlAxWinInit"},{"pos":[17227,17395],"content":"This function initializes ATL's control hosting code by registering the <bpt id=\"p1\">**</bpt>\"AtlAxWin80\"<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>\"AtlAxWinLic80\"<ept id=\"p2\">**</ept> window classes plus a couple of custom window messages.","source":"This function initializes ATL's control hosting code by registering the **\"AtlAxWin80\"** and **\"AtlAxWinLic80\"** window classes plus a couple of custom window messages."},{"pos":[17454,17466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17470,17564],"content":"Nonzero if the initialization of the control hosting code was successful; otherwise <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","source":"Nonzero if the initialization of the control hosting code was successful; otherwise **FALSE**."},{"pos":[17574,17581],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function must be called before using the ATL control hosting API.","pos":[17585,17655]},{"content":"Following a call to this function, the <bpt id=\"p1\">**</bpt>\"AtlAxWin\"<ept id=\"p1\">**</ept> window class can be used in calls to <bpt id=\"p2\">[</bpt>CreateWindow<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> or <bpt id=\"p3\">[</bpt>CreateWindowEx<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[17656,17975],"source":" Following a call to this function, the **\"AtlAxWin\"** window class can be used in calls to [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) or [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[17983,18024],"content":"<bpt id=\"p1\">&lt;a name=\"atlaxwinterm\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlAxWinTerm","linkify":"<a name=\"atlaxwinterm\"></a>  AtlAxWinTerm","source":"<a name=\"atlaxwinterm\"></a>  AtlAxWinTerm"},{"pos":[18028,18160],"content":"This function uninitializes ATL's control hosting code by unregistering the <bpt id=\"p1\">**</bpt>\"AtlAxWin80\"<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>\"AtlAxWinLic80\"<ept id=\"p2\">**</ept> window classes.","source":"This function uninitializes ATL's control hosting code by unregistering the **\"AtlAxWin80\"** and **\"AtlAxWinLic80\"** window classes."},{"pos":[18217,18229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18233,18257],"content":"Always returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","source":"Always returns **TRUE**."},{"pos":[18267,18274],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18278,18455],"content":"This function simply calls <bpt id=\"p1\">[</bpt>UnregisterClass<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms644899)</ept> as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This function simply calls [UnregisterClass](http://msdn.microsoft.com/library/windows/desktop/ms644899) as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Call this function to clean up after all existing host windows have been destroyed if you called <bpt id=\"p1\">[</bpt>AtlAxWinInit<ept id=\"p1\">](#atlaxwininit)</ept> and you no longer need to create host windows.","pos":[18462,18635],"source":"Call this function to clean up after all existing host windows have been destroyed if you called [AtlAxWinInit](#atlaxwininit) and you no longer need to create host windows."},{"content":"If you don't call this function, the window class will be unregistered automatically when the process terminates.","pos":[18636,18749]},{"pos":[18759,18830],"content":"<bpt id=\"p1\">&lt;a name=\"atlgetobjectsourceinterface\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AtlGetObjectSourceInterface","linkify":"<a name=\"atlgetobjectsourceinterface\"></a>  AtlGetObjectSourceInterface","source":"<a name=\"atlgetobjectsourceinterface\"></a>  AtlGetObjectSourceInterface"},{"content":"Call this function to retrieve information about the default source interface of an object.","pos":[18834,18925]},{"pos":[19107,19117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A pointer to the object for which information is to be returned.","pos":[19134,19203]},{"content":"[out] A pointer to the LIBID of the type library containing the definition of the source interface.","pos":[19222,19321]},{"content":"[out] A pointer to the interface ID of the object's default source interface.","pos":[19338,19415]},{"content":"<bpt id=\"p1\">*</bpt>pdwMajor<ept id=\"p1\">*</ept>","pos":[19422,19432],"source":"*pdwMajor*"},{"content":"[out] A pointer to the major version number of the type library containing the definition of the source interface.","pos":[19436,19550]},{"content":"<bpt id=\"p1\">*</bpt>pdwMinor<ept id=\"p1\">*</ept>","pos":[19557,19567],"source":"*pdwMinor*"},{"content":"[out] A pointer to the minor version number of the type library containing the definition of the source interface.","pos":[19571,19685]},{"pos":[19695,19707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A standard HRESULT value.","pos":[19711,19736]},{"pos":[19746,19753],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19757,19961],"content":"<ph id=\"ph1\">`AtlGetObjectSourceInterface`</ph> can provide you with the interface ID of the default source interface, along with the LIBID and major and minor version numbers of the type library describing that interface.","source":"`AtlGetObjectSourceInterface` can provide you with the interface ID of the default source interface, along with the LIBID and major and minor version numbers of the type library describing that interface."},{"pos":[19969,20368],"content":"[!NOTE]\n For this function to successfully retrieve the requested information, the object represented by `punkObj` must implement `IDispatch` (and return type information through **IDispatch::GetTypeInfo**) plus it must also implement either `IProvideClassInfo2` or `IPersist`. The type information for the source interface must be in the same type library as the type information for `IDispatch`.","leadings":["","> "],"nodes":[{"content":" For this function to successfully retrieve the requested information, the object represented by `punkObj` must implement `IDispatch` (and return type information through **IDispatch::GetTypeInfo**) plus it must also implement either `IProvideClassInfo2` or `IPersist`. The type information for the source interface must be in the same type library as the type information for `IDispatch`.","pos":[8,397],"nodes":[{"content":"For this function to successfully retrieve the requested information, the object represented by <ph id=\"ph1\">`punkObj`</ph> must implement <ph id=\"ph2\">`IDispatch`</ph> (and return type information through <bpt id=\"p1\">**</bpt>IDispatch::GetTypeInfo<ept id=\"p1\">**</ept>) plus it must also implement either <ph id=\"ph3\">`IProvideClassInfo2`</ph> or <ph id=\"ph4\">`IPersist`</ph>.","pos":[1,269],"source":" For this function to successfully retrieve the requested information, the object represented by `punkObj` must implement `IDispatch` (and return type information through **IDispatch::GetTypeInfo**) plus it must also implement either `IProvideClassInfo2` or `IPersist`."},{"content":"The type information for the source interface must be in the same type library as the type information for <ph id=\"ph1\">`IDispatch`</ph>.","pos":[270,389],"source":" The type information for the source interface must be in the same type library as the type information for `IDispatch`."}]}]},{"pos":[20378,20385],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The example below shows how you might define an event sink class, <ph id=\"ph1\">`CEasySink`</ph>, that reduces the number of template arguments that you can pass to <ph id=\"ph2\">`IDispEventImpl`</ph> to the bare essentials.","pos":[20389,20575],"source":"The example below shows how you might define an event sink class, `CEasySink`, that reduces the number of template arguments that you can pass to `IDispEventImpl` to the bare essentials."},{"content":"<ph id=\"ph1\">`EasyAdvise`</ph> and <ph id=\"ph2\">`EasyUnadvise`</ph> use <ph id=\"ph3\">`AtlGetObjectSourceInterface`</ph> to initialize the <bpt id=\"p1\">[</bpt>IDispEventImpl<ept id=\"p1\">](../../atl/reference/idispeventimpl-class.md)</ept> members before calling <bpt id=\"p2\">[</bpt>DispEventAdvise<ept id=\"p2\">](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise)</ept> or <bpt id=\"p3\">[</bpt>DispEventUnadvise<ept id=\"p3\">](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise)</ept>.","pos":[20576,20926],"source":"`EasyAdvise` and `EasyUnadvise` use `AtlGetObjectSourceInterface` to initialize the [IDispEventImpl](../../atl/reference/idispeventimpl-class.md) members before calling [DispEventAdvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise) or [DispEventUnadvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise)."},{"pos":[20933,21032],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#93<ept id=\"p2\">](../../atl/codesnippet/cpp/composite-control-global-functions_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#93](../../atl/codesnippet/cpp/composite-control-global-functions_1.h)]"},{"pos":[21041,21049],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Functions<ept id=\"p1\">](../../atl/reference/atl-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[21053,21103],"source":"[Functions](../../atl/reference/atl-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Composite Control Macros<ept id=\"p1\">](../../atl/reference/composite-control-macros.md)</ept>","pos":[21106,21182],"source":" [Composite Control Macros](../../atl/reference/composite-control-macros.md)"}],"content":"---\ntitle: \"Composite Control Global Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"composite controls, global functions\"\nms.assetid: 536884cd-e863-4c7a-ab0a-604dc60a0bbe\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Composite Control Global Functions\nThese functions provide support for creating dialog boxes, and for creating, hosting and licensing ActiveX controls.  \n  \n> [!IMPORTANT]\n>  The functions listed in the following table cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].  \n  \n|||  \n|-|-|  \n|[AtlAxDialogBox](#atlaxdialogbox)|Creates a modal dialog box from a dialog template provided by the user. The resulting dialog box can contain ActiveX controls.|  \n|[AtlAxCreateDialog](#atlaxcreatedialog)|Creates a modeless dialog box from a dialog template provided by the user. The resulting dialog box can contain ActiveX controls.|  \n|[AtlAxCreateControl](#atlaxcreatecontrol)|Creates an ActiveX control, initializes it, and hosts it in the specified window.|  \n|[AtlAxCreateControlEx](#atlaxcreatecontrolex)|Creates an ActiveX control, initializes it, hosts it in the specified window, and retrieves an interface pointer (or pointers) from the control.|  \n|[AtlAxCreateControlLic](#atlaxcreatecontrollic)|Creates a licensed ActiveX control, initializes it, and hosts it in the specified window.|  \n|[AtlAxCreateControlLicEx](#atlaxcreatecontrollicex)|Creates a licensed ActiveX control, initializes it, hosts it in the specified window, and retrieves an interface pointer (or pointers) from the control.|  \n|[AtlAxAttachControl](#atlaxattachcontrol)|Attaches a previously created control to the specified window.|  \n|[AtlAxGetHost](#atlaxgethost)|Used to obtain a direct interface pointer to the container for a specified window (if any), given its handle.|  \n|[AtlAxGetControl](#atlaxgetcontrol)|Used to obtain a direct interface pointer to the control contained inside a specified window (if any), given its handle.|  \n|[AtlSetChildSite](#atlsetchildsite)|Initializes the **IUnknown** of the child site.|  \n|[AtlAxWinInit](#atlaxwininit)|Initializes the hosting code for AxWin objects.|  \n|[AtlAxWinTerm](#atlaxwinterm)|Uninitializes the hosting code for AxWin objects.|  \n|[AtlGetObjectSourceInterface](#atlgetobjectsourceinterface)|Returns information about the default source interface of an object.|  \n  \n##  <a name=\"atlaxdialogbox\"></a>  AtlAxDialogBox  \n Creates a modal dialog box from a dialog template provided by the user.  \n  \n\n \n  \n```\nATLAPI_(int) AtlAxDialogBox(\n    HINSTANCE hInstance,\n    LPCWSTR lpTemplateName,\n    HWND hWndParent,\n    DLGPROC lpDialogProc,\n    LPARAM dwInitParam);\n```  \n  \n### Parameters  \n `hInstance`  \n [in] Identifies an instance of the module whose executable file contains the dialog box template.  \n  \n `lpTemplateName`  \n [in] Identifies the dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the [MAKEINTRESOURCE](http://msdn.microsoft.com/library/windows/desktop/ms648029) macro to create this value.  \n  \n `hWndParent`  \n [in] Identifies the window that owns the dialog box.  \n  \n `lpDialogProc`  \n [in] Points to the dialog box procedure. For more information about the dialog box procedure, see [DialogProc](http://msdn.microsoft.com/library/windows/desktop/ms645469).  \n  \n `dwInitParam`  \n [in] Specifies the value to pass to the dialog box in the **lParam** parameter of the **WM_INITDIALOG** message.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n To use **AtlAxDialogBox** with a dialog template that contains an ActiveX control, specify a valid **CLSID**, **APPID** or URL string as the *text* field of the **CONTROL** section of the dialog resource, along with \"AtlAxWin80\" as the *class name* field under the same section. The following demonstrates what a valid **CONTROL** section might look like:  \n  \n `CONTROL    \"{04FE35E9-ADBC-4f1d-83FE-8FA4D1F71C7F}\", IDC_TEST,`  \n  \n `\"AtlAxWin80\", WS_GROUP | WS_TABSTOP, 0, 0, 100, 100`  \n  \n For more information on editing resource scripts, see [How to: Open a Resource Script File in Text Format](../../windows/how-to-open-a-resource-script-file-in-text-format.md). For more information on control resource-definition statements, see [Common Control Parameters](http://msdn.microsoft.com/library/windows/desktop/aa380902) under [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]*: SDK Tools*.  \n  \n For more information on dialog boxes in general, refer to [DialogBox](http://msdn.microsoft.com/library/windows/desktop/ms645452) and [CreateDialogParam](http://msdn.microsoft.com/library/windows/desktop/ms645445) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"atlaxcreatedialog\"></a>  AtlAxCreateDialog  \n Creates a modeless dialog box from a dialog template provided by the user.  \n  \n\n \n  \n```\nATLAPI_(HWND) AtlAxCreateDialog(\n    HINSTANCE hInstance,\n    LPCWSTR lpTemplateName,\n    HWND hWndParent,\n    DLGPROC lpDialogProc,\n    LPARAM dwInitParam);\n```  \n  \n### Parameters  \n `hInstance`  \n [in] Identifies an instance of the module whose executable file contains the dialog box template.  \n  \n `lpTemplateName`  \n [in] Identifies the dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the [MAKEINTRESOURCE](http://msdn.microsoft.com/library/windows/desktop/ms648029) macro to create this value.  \n  \n `hWndParent`  \n [in] Identifies the window that owns the dialog box.  \n  \n `lpDialogProc`  \n [in] Points to the dialog box procedure. For more information about the dialog box procedure, see [DialogProc](http://msdn.microsoft.com/library/windows/desktop/ms645469).  \n  \n `dwInitParam`  \n [in] Specifies the value to pass to the dialog box in the **lParam** parameter of the **WM_INITDIALOG** message.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n The resulting dialog box can contain ActiveX controls.  \n  \n See [CreateDialog](http://msdn.microsoft.com/library/windows/desktop/ms645434) and [CreateDialogParam](http://msdn.microsoft.com/library/windows/desktop/ms645445) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"atlaxcreatecontrol\"></a>  AtlAxCreateControl  \n Creates an ActiveX control, initializes it, and hosts it in the specified window.  \n  \n\n \n  \n```\nATLAPI AtlAxCreateControl(\n    LPCOLESTR lpszName,\n    HWND hWnd,\n    IStream* pStream,\n    IUnknown** ppUnkContainer);\n```  \n  \n### Parameters  \n `lpszName`  \n A pointer to a string to be passed to the control. Must be formatted in one of the following ways:  \n  \n-   A ProgID such as \"MSCAL.Calendar.7\"  \n  \n-   A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"  \n  \n-   A URL such as \"http://www.microsoft.com\"  \n  \n-   A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\"  \n  \n-   A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\"  \n  \n    > [!NOTE]\n    >  \"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.  \n  \n `hWnd`  \n [in] Handle to the window that the control will be attached to.  \n  \n `pStream`  \n [in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.  \n  \n `ppUnkContainer`  \n [out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n This global function gives you the same result as calling [AtlAxCreateControlEx](#atlaxcreatecontrolex)( `lpszName`**,** `hWnd`**,** `pStream`**, NULL, NULL, NULL, NULL** );.  \n  \n To create a licensed ActiveX control, see [AtlAxCreateControlLic](#atlaxcreatecontrollic).  \n  \n##  <a name=\"atlaxcreatecontrolex\"></a>  AtlAxCreateControlEx  \n Creates an ActiveX control, initializes it, and hosts it in the specified window. An interface pointer and event sink for the new control can also be created.  \n  \n\n \n  \n```\nATLAPI AtlAxCreateControlEx(\n    LPCOLESTR lpszName,\n    HWND hWnd,\n    IStream* pStream,\n    IUnknown** ppUnkContainer,\n    IUnknown** ppUnkControl,\n    REFIID iidSink = IID_NULL,\n    IUnknown* punkSink = NULL);\n```  \n  \n### Parameters  \n `lpszName`  \n A pointer to a string to be passed to the control. Must be formatted in one of the following ways:  \n  \n-   A ProgID such as \"MSCAL.Calendar.7\"  \n  \n-   A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"  \n  \n-   A URL such as \"http://www.microsoft.com\"  \n  \n-   A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\"  \n  \n-   A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\"  \n  \n    > [!NOTE]\n    >  \"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.  \n  \n `hWnd`  \n [in] Handle to the window that the control will be attached to.  \n  \n `pStream`  \n [in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.  \n  \n `ppUnkContainer`  \n [out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.  \n  \n `ppUnkControl`  \n [out] The address of a pointer that will receive the **IUnknown** of the created control. Can be **NULL**.  \n  \n `iidSink`  \n The interface identifier of an outgoing interface on the contained object.  \n  \n *punkSink*  \n A pointer to the **IUnknown** interface of the sink object to be connected to the connection point specified by `iidSink` on the contained object after the contained object has been successfully created.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n `AtlAxCreateControlEx` is similar to [AtlAxCreateControl](#atlaxcreatecontrol) but also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control.  \n  \n To create a licensed ActiveX control, see [AtlAxCreateControlLicEx](#atlaxcreatecontrollicex).  \n  \n##  <a name=\"atlaxcreatecontrollic\"></a>  AtlAxCreateControlLic  \n Creates a licensed ActiveX control, initializes it, and hosts it in the specified window.  \n  \n\n \n  \n```\nATLAPI AtlAxCreateControlLic(\n    LPCOLESTR lpszName,\n    HWND hWnd,\n    IStream* pStream,\n    IUnknown** ppUnkContainer,\n    BSTR bstrLic = NULL);\n```  \n  \n### Parameters  \n `lpszName`  \n A pointer to a string to be passed to the control. Must be formatted in one of the following ways:  \n  \n-   A ProgID such as \"MSCAL.Calendar.7\"  \n  \n-   A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"  \n  \n-   A URL such as \"http://www.microsoft.com\"  \n  \n-   A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\"  \n  \n-   A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\"  \n  \n    > [!NOTE]\n    >  \"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.  \n  \n `hWnd`  \n Handle to the window that the control will be attached to.  \n  \n `pStream`  \n A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.  \n  \n `ppUnkContainer`  \n The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.  \n  \n `bstrLic`  \n The BSTR containing the license for the control.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Example  \n See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample of how to use `AtlAxCreateControlLic`.  \n  \n##  <a name=\"atlaxcreatecontrollicex\"></a>  AtlAxCreateControlLicEx  \n Creates a licensed ActiveX control, initializes it, and hosts it in the specified window. An interface pointer and event sink for the new control can also be created.  \n  \n\n \n  \n```\nATLAPI AtlAxCreateControlLicEx(\n    LPCOLESTR lpszName,\n    HWND hWnd,\n    IStream* pStream,\n    IUnknown** ppUnkContainer,\n    IUnknown** ppUnkControl,\n    REFIID iidSink = IID_NULL,\n    IUnknown* punkSink = NULL,\n    BSTR bstrLic = NULL);\n```  \n  \n### Parameters  \n `lpszName`  \n A pointer to a string to be passed to the control. Must be formatted in one of the following ways:  \n  \n-   A ProgID such as \"MSCAL.Calendar.7\"  \n  \n-   A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"  \n  \n-   A URL such as \"http://www.microsoft.com\"  \n  \n-   A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\"  \n  \n-   A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\"  \n  \n    > [!NOTE]\n    >  \"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.  \n  \n `hWnd`  \n Handle to the window that the control will be attached to.  \n  \n `pStream`  \n A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.  \n  \n `ppUnkContainer`  \n The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.  \n  \n `ppUnkControl`  \n [out] The address of a pointer that will receive the **IUnknown** of the created control. Can be **NULL**.  \n  \n `iidSink`  \n The interface identifier of an outgoing interface on the contained object.  \n  \n *punkSink*  \n A pointer to the **IUnknown** interface of the sink object to be connected to the connection point specified by `iidSink` on the contained object after the contained object has been successfully created.  \n  \n `bstrLic`  \n The BSTR containing the license for the control.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n `AtlAxCreateControlLicEx` is similar to [AtlAxCreateControlLic](#atlaxcreatecontrollic) but also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control.  \n  \n### Example  \n See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample of how to use `AtlAxCreateControlLicEx`.  \n  \n##  <a name=\"atlaxattachcontrol\"></a>  AtlAxAttachControl  \n Attaches a previously created control to the specified window.  \n  \n\n \n  \n```\nATLAPI AtlAxAttachControl(\n    IUnknown* pControl,\n    HWND hWnd,\n    IUnknown** ppUnkContainer);\n```  \n  \n### Parameters  \n `pControl`  \n [in] A pointer to the **IUnknown** of the control.  \n  \n `hWnd`  \n [in] Handle to the window that will host the control.  \n  \n `ppUnkContainer`  \n [out] A pointer to a pointer to the **IUnknown** of the container object.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n Use [AtlAxCreateControlEx](#atlaxcreatecontrolex) and [AtlAxCreateControl](#atlaxcreatecontrol) to simultaneously create and attach a control.  \n  \n> [!NOTE]\n>  The control object being attached must be correctly initialized before calling `AtlAxAttachControl`.  \n  \n##  <a name=\"atlaxgethost\"></a>  AtlAxGetHost  \n Obtains a direct interface pointer to the container for a specified window (if any), given its handle.  \n  \n\n \n  \n```\nATLAPI AtlAxGetHost(\n    HWND h,\n    IUnknown** pp);\n```  \n  \n### Parameters  \n `h`  \n [in] A handle to the window that is hosting the control.  \n  \n `pp`  \n [out] The **IUnknown** of the container of the control.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"atlaxgetcontrol\"></a>  AtlAxGetControl  \n Obtains a direct interface pointer to the control contained inside a specified window given its handle.  \n  \n\n \n  \n```\nATLAPI AtlAxGetControl(\n    HWND h,\n    IUnknown** pp);\n```  \n  \n### Parameters  \n `h`  \n [in] A handle to the window that is hosting the control.  \n  \n `pp`  \n [out] The **IUnknown** of the control being hosted.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"atlsetchildsite\"></a>  AtlSetChildSite  \n Call this function to set the site of the child object to the **IUnknown** of the parent object.  \n  \n\n \n  \n```\nHRESULT AtlSetChildSite(\n    IUnknown* punkChild,\n    IUnknown* punkParent);\n```  \n  \n### Parameters  \n *punkChild*  \n [in] A pointer to the **IUnknown** interface of the child.  \n  \n `punkParent`  \n [in] A pointer to the **IUnknown** interface of the parent.  \n  \n### Return Value  \n A standard HRESULT value.  \n  \n##  <a name=\"atlaxwininit\"></a>  AtlAxWinInit  \n This function initializes ATL's control hosting code by registering the **\"AtlAxWin80\"** and **\"AtlAxWinLic80\"** window classes plus a couple of custom window messages.  \n  \n\n \n  \n```\nATLAPI_(BOOL) AtlAxWinInit();\n```  \n  \n### Return Value  \n Nonzero if the initialization of the control hosting code was successful; otherwise **FALSE**.  \n  \n### Remarks  \n This function must be called before using the ATL control hosting API. Following a call to this function, the **\"AtlAxWin\"** window class can be used in calls to [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) or [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n\n##  <a name=\"atlaxwinterm\"></a>  AtlAxWinTerm  \n This function uninitializes ATL's control hosting code by unregistering the **\"AtlAxWin80\"** and **\"AtlAxWinLic80\"** window classes.  \n  \n\n \n  \n```\ninline BOOL AtlAxWinTerm();\n```  \n  \n### Return Value  \n Always returns **TRUE**.  \n  \n### Remarks  \n This function simply calls [UnregisterClass](http://msdn.microsoft.com/library/windows/desktop/ms644899) as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n Call this function to clean up after all existing host windows have been destroyed if you called [AtlAxWinInit](#atlaxwininit) and you no longer need to create host windows. If you don't call this function, the window class will be unregistered automatically when the process terminates.  \n  \n##  <a name=\"atlgetobjectsourceinterface\"></a>  AtlGetObjectSourceInterface  \n Call this function to retrieve information about the default source interface of an object.  \n  \n\n \n  \n```\nATLAPI AtlGetObjectSourceInterface(\n    IUnknown* punkObj,\n    GUID* plibid,\n    IID* piid,\n    unsigned short* pdwMajor,\n    unsigned short* pdwMinor);\n```  \n  \n### Parameters  \n `punkObj`  \n [in] A pointer to the object for which information is to be returned.  \n  \n `plibid`  \n [out] A pointer to the LIBID of the type library containing the definition of the source interface.  \n  \n `piid`  \n [out] A pointer to the interface ID of the object's default source interface.  \n  \n *pdwMajor*  \n [out] A pointer to the major version number of the type library containing the definition of the source interface.  \n  \n *pdwMinor*  \n [out] A pointer to the minor version number of the type library containing the definition of the source interface.  \n  \n### Return Value  \n A standard HRESULT value.  \n  \n### Remarks  \n `AtlGetObjectSourceInterface` can provide you with the interface ID of the default source interface, along with the LIBID and major and minor version numbers of the type library describing that interface.  \n  \n> [!NOTE]\n>  For this function to successfully retrieve the requested information, the object represented by `punkObj` must implement `IDispatch` (and return type information through **IDispatch::GetTypeInfo**) plus it must also implement either `IProvideClassInfo2` or `IPersist`. The type information for the source interface must be in the same type library as the type information for `IDispatch`.  \n  \n### Example  \n The example below shows how you might define an event sink class, `CEasySink`, that reduces the number of template arguments that you can pass to `IDispEventImpl` to the bare essentials. `EasyAdvise` and `EasyUnadvise` use `AtlGetObjectSourceInterface` to initialize the [IDispEventImpl](../../atl/reference/idispeventimpl-class.md) members before calling [DispEventAdvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise) or [DispEventUnadvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise).  \n  \n [!code-cpp[NVC_ATL_Windowing#93](../../atl/codesnippet/cpp/composite-control-global-functions_1.h)]  \n  \n## See Also  \n [Functions](../../atl/reference/atl-functions.md)   \n [Composite Control Macros](../../atl/reference/composite-control-macros.md)\n"}