{"nodes":[{"pos":[12,39],"content":"call Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"call Class | Microsoft Docs","pos":[0,27]}]},{"content":"call Class","pos":[604,614]},{"pos":[615,741],"content":"A <ph id=\"ph1\">`call`</ph> messaging block is a multi-source, ordered <ph id=\"ph2\">`target_block`</ph> that invokes a specified function when receiving a message.","source":"A `call` messaging block is a multi-source, ordered `target_block` that invokes a specified function when receiving a message."},{"content":"Syntax","pos":[750,756]},{"content":"Parameters","pos":[922,932]},{"content":"The payload type of the messages propagated to this block.","pos":[943,1001]},{"content":"The signature of functions that this block can accept.","pos":[1026,1080]},{"content":"Members","pos":[1089,1096]},{"content":"Public Constructors","pos":[1106,1125]},{"content":"Name","pos":[1132,1136]},{"content":"Description","pos":[1137,1148]},{"content":"call::call Constructor","pos":[1187,1209]},{"content":"Overloaded.","pos":[1218,1229]},{"content":"Constructs a <ph id=\"ph1\">`call`</ph> messaging block.","pos":[1230,1266],"source":" Constructs a `call` messaging block."},{"content":"call::~call Destructor","pos":[1272,1294]},{"pos":[1303,1339],"content":"Destroys the <ph id=\"ph1\">`call`</ph> messaging block.","source":"Destroys the `call` messaging block."},{"content":"Protected Methods","pos":[1350,1367]},{"content":"Name","pos":[1374,1378]},{"content":"Description","pos":[1379,1390]},{"content":"call::process_input_messages Method","pos":[1429,1464]},{"content":"Executes the call function on the input messages.","pos":[1491,1540]},{"content":"call::process_message Method","pos":[1546,1574]},{"pos":[1594,1663],"content":"Processes a message that was accepted by this <ph id=\"ph1\">`call`</ph> messaging block.","source":"Processes a message that was accepted by this `call` messaging block."},{"content":"call::propagate_message Method","pos":[1669,1699]},{"content":"Asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`call`</ph> messaging block.","pos":[1721,1808],"source":"Asynchronously passes a message from an `ISource` block to this `call` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[1809,1880],"source":" It is invoked by the `propagate` method, when called by a source block."},{"content":"call::send_message Method","pos":[1886,1911]},{"content":"Synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`call`</ph> messaging block.","pos":[1928,2014],"source":"Synchronously passes a message from an `ISource` block to this `call` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[2015,2081],"source":" It is invoked by the `send` method, when called by a source block."},{"content":"call::supports_anonymous_source Method","pos":[2087,2125]},{"content":"Overrides the <ph id=\"ph1\">`supports_anonymous_source`</ph> method to indicate that this block can accept messages offered to it by a source that is not linked.","pos":[2155,2297],"source":"Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>ITarget::supports_anonymous_source<ept id=\"p1\">](itarget-class.md#supports_anonymous_source)</ept>.)","pos":[2298,2391],"source":" (Overrides [ITarget::supports_anonymous_source](itarget-class.md#supports_anonymous_source).)"},{"content":"Remarks","pos":[2401,2408]},{"pos":[2412,2525],"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Message Blocks<ept id=\"p1\">](../../../parallel/concrt/asynchronous-message-blocks.md)</ept>.","source":"For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md)."},{"content":"Inheritance Hierarchy","pos":[2534,2555]},{"content":"ITarget","pos":[2560,2567]},{"content":"target_block","pos":[2594,2606]},{"content":"Requirements","pos":[2652,2664]},{"pos":[2668,2688],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[2695,2721],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2752,2774],"content":"call::call Constructor"},{"pos":[2778,2814],"content":"Constructs a <ph id=\"ph1\">`call`</ph> messaging block.","source":"Constructs a `call` messaging block."},{"content":"Parameters","pos":[3300,3310]},{"content":"A function that will be invoked for each accepted message.","pos":[3325,3383]},{"content":"A filter function which determines whether offered messages should be accepted.","pos":[3403,3482]},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object within which the propagation task for the <ph id=\"ph2\">`call`</ph> messaging block is scheduled.","pos":[3506,3607],"source":" The `Scheduler` object within which the propagation task for the `call` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`ScheduleGroup`</ph> object within which the propagation task for the <ph id=\"ph2\">`call`</ph> messaging block is scheduled.","pos":[3635,3740],"source":" The `ScheduleGroup` object within which the propagation task for the `call` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object used is implied by the schedule group.","pos":[3741,3802],"source":" The `Scheduler` object used is implied by the schedule group."},{"content":"Remarks","pos":[3812,3819]},{"pos":[3823,3934],"content":"The runtime uses the default scheduler if you do not specify the <ph id=\"ph1\">`_PScheduler`</ph> or <ph id=\"ph2\">`_PScheduleGroup`</ph> parameters.","source":"The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters."},{"pos":[3941,4081],"content":"The type <ph id=\"ph1\">`_Call_method`</ph> is a functor with signature <ph id=\"ph2\">`void (T const &amp;)`</ph> which is invoked by this <ph id=\"ph3\">`call`</ph> messaging block to process a message.","source":"The type `_Call_method` is a functor with signature `void (T const &)` which is invoked by this `call` messaging block to process a message."},{"pos":[4088,4272],"content":"The type <ph id=\"ph1\">`filter_method`</ph> is a functor with signature <ph id=\"ph2\">`bool (T const &amp;)`</ph> which is invoked by this <ph id=\"ph3\">`call`</ph> messaging block to determine whether or not it should accept an offered message.","source":"The type `filter_method` is a functor with signature `bool (T const &)` which is invoked by this `call` messaging block to determine whether or not it should accept an offered message."},{"pos":[4303,4325],"content":"call::~call Destructor"},{"pos":[4329,4365],"content":"Destroys the <ph id=\"ph1\">`call`</ph> messaging block.","source":"Destroys the `call` messaging block."},{"pos":[4436,4471],"content":"call::process_input_messages Method"},{"content":"Executes the call function on the input messages.","pos":[4475,4524]},{"content":"Parameters","pos":[4615,4625]},{"pos":[4682,4710],"content":"call::process_message Method"},{"pos":[4714,4783],"content":"Processes a message that was accepted by this <ph id=\"ph1\">`call`</ph> messaging block.","source":"Processes a message that was accepted by this `call` messaging block."},{"content":"Parameters","pos":[4867,4877]},{"content":"A pointer to the message that is to be handled.","pos":[4896,4943]},{"pos":[4987,5017],"content":"call::propagate_message Method"},{"content":"Asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`call`</ph> messaging block.","pos":[5021,5108],"source":"Asynchronously passes a message from an `ISource` block to this `call` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[5109,5180],"source":" It is invoked by the `propagate` method, when called by a source block."},{"content":"Parameters","pos":[5315,5325]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[5344,5378],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[5399,5450]},{"content":"Return Value","pos":[5460,5472]},{"pos":[5476,5588],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"pos":[5627,5652],"content":"call::send_message Method"},{"content":"Synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`call`</ph> messaging block.","pos":[5656,5742],"source":"Synchronously passes a message from an `ISource` block to this `call` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[5743,5809],"source":" It is invoked by the `send` method, when called by a source block."},{"content":"Parameters","pos":[5939,5949]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[5968,6002],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[6023,6074]},{"content":"Return Value","pos":[6084,6096]},{"pos":[6100,6212],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"pos":[6264,6302],"content":"call::supports_anonymous_source Method"},{"pos":[6306,6448],"content":"Overrides the <ph id=\"ph1\">`supports_anonymous_source`</ph> method to indicate that this block can accept messages offered to it by a source that is not linked.","source":"Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked."},{"content":"Return Value","pos":[6513,6525]},{"pos":[6536,6589],"content":"because the block does not postpone offered messages."},{"content":"See Also","pos":[6598,6606]},{"content":"concurrency Namespace","pos":[6611,6632]},{"content":"transformer Class","pos":[6665,6682]}],"content":"---\ntitle: \"call Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::call\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"call class\"\nms.assetid: 1521970a-1e9c-4b0c-a681-d18e40976f49\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# call Class\nA `call` messaging block is a multi-source, ordered `target_block` that invokes a specified function when receiving a message.  \n  \n## Syntax  \n  \n```\ntemplate<class T, class _FunctorType = std::tr1::function<void(T const&)>>\nclass call : public target_block<multi_link_registry<ISource<T>>>;\n```  \n  \n#### Parameters  \n `T`  \n The payload type of the messages propagated to this block.  \n  \n `_FunctorType`  \n The signature of functions that this block can accept.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[call::call Constructor](#ctor)|Overloaded. Constructs a `call` messaging block.|  \n|[call::~call Destructor](#dtor)|Destroys the `call` messaging block.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[call::process_input_messages Method](#process_input_messages)|Executes the call function on the input messages.|  \n|[call::process_message Method](#process_message)|Processes a message that was accepted by this `call` messaging block.|  \n|[call::propagate_message Method](#propagate_message)|Asynchronously passes a message from an `ISource` block to this `call` messaging block. It is invoked by the `propagate` method, when called by a source block.|  \n|[call::send_message Method](#send_message)|Synchronously passes a message from an `ISource` block to this `call` messaging block. It is invoked by the `send` method, when called by a source block.|  \n|[call::supports_anonymous_source Method](#supports_anonymous_source)|Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked. (Overrides [ITarget::supports_anonymous_source](itarget-class.md#supports_anonymous_source).)|  \n  \n## Remarks  \n For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md).  \n  \n## Inheritance Hierarchy  \n [ITarget](itarget-class.md)  \n  \n [target_block](target-block-class.md)  \n  \n `call`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"ctor\"></a>  call::call Constructor  \n Constructs a `call` messaging block.  \n  \n```\ncall(\n    _Call_method const& _Func);\n\ncall(\n    _Call_method const& _Func,\n    filter_method const& _Filter);\n\ncall(\n    Scheduler& _PScheduler,\n    _Call_method const& _Func);\n\ncall(\n    Scheduler& _PScheduler,\n    _Call_method const& _Func,\n    filter_method const& _Filter);\n\ncall(\n    ScheduleGroup& _PScheduleGroup,\n    _Call_method const& _Func);\n\ncall(\n    ScheduleGroup& _PScheduleGroup,\n    _Call_method const& _Func,\n    filter_method const& _Filter);\n```  \n  \n### Parameters  \n `_Func`  \n A function that will be invoked for each accepted message.  \n  \n `_Filter`  \n A filter function which determines whether offered messages should be accepted.  \n  \n `_PScheduler`  \n The `Scheduler` object within which the propagation task for the `call` messaging block is scheduled.  \n  \n `_PScheduleGroup`  \n The `ScheduleGroup` object within which the propagation task for the `call` messaging block is scheduled. The `Scheduler` object used is implied by the schedule group.  \n  \n### Remarks  \n The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters.  \n  \n The type `_Call_method` is a functor with signature `void (T const &)` which is invoked by this `call` messaging block to process a message.  \n  \n The type `filter_method` is a functor with signature `bool (T const &)` which is invoked by this `call` messaging block to determine whether or not it should accept an offered message.  \n  \n##  <a name=\"dtor\"></a>  call::~call Destructor  \n Destroys the `call` messaging block.  \n  \n```\n~call();\n```  \n  \n##  <a name=\"process_input_messages\"></a>  call::process_input_messages Method  \n Executes the call function on the input messages.  \n  \n```\nvirtual void process_input_messages(_Inout_ message<T>* _PMessage);\n```  \n  \n### Parameters  \n `_PMessage`  \n  \n##  <a name=\"process_message\"></a>  call::process_message Method  \n Processes a message that was accepted by this `call` messaging block.  \n  \n```\nvirtual void process_message(_Inout_ message<T>* _PMessage);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the message that is to be handled.  \n  \n##  <a name=\"propagate_message\"></a>  call::propagate_message Method  \n Asynchronously passes a message from an `ISource` block to this `call` messaging block. It is invoked by the `propagate` method, when called by a source block.  \n  \n```\nvirtual message_status propagate_message(\n    _Inout_ message<T>* _PMessage,\n    _Inout_ ISource<T>* _PSource);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n##  <a name=\"send_message\"></a>  call::send_message Method  \n Synchronously passes a message from an `ISource` block to this `call` messaging block. It is invoked by the `send` method, when called by a source block.  \n  \n```\nvirtual message_status send_message(\n    _Inout_ message<T>* _PMessage,\n    _Inout_ ISource<T>* _PSource);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n##  <a name=\"supports_anonymous_source\"></a>  call::supports_anonymous_source Method  \n Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked.  \n  \n```\nvirtual bool supports_anonymous_source();\n```  \n  \n### Return Value  \n `true` because the block does not postpone offered messages.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [transformer Class](transformer-class.md)\n"}