{"nodes":[{"pos":[12,42],"content":"&lt;ratio&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>ratio<ph id=\"ph2\">&amp;gt;</ph> | Microsoft Docs","pos":[0,30],"source":"&lt;ratio&gt; | Microsoft Docs"}]},{"pos":[1243,1256],"content":"&lt;ratio&gt;","linkify":"&lt;ratio&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>ratio<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,13],"source":"&lt;ratio&gt;"}]},{"content":"Include the standard header <ph id=\"ph1\">\\&lt;</ph>ratio&gt; to define constants and templates that are used to store and manipulate rational numbers at compile time.","pos":[1257,1399],"source":"Include the standard header \\<ratio> to define constants and templates that are used to store and manipulate rational numbers at compile time."},{"pos":[1408,1414],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1461,1476],"content":"ratio Structure","linkify":"ratio Structure","nodes":[{"content":"ratio Structure","pos":[0,15]}]},{"content":"The <bpt id=\"p1\">[</bpt>ratio Structure<ept id=\"p1\">](http://msdn.microsoft.com/en-us/3f7961f4-802b-4251-b3c3-090ef91c0dba)</ept> defines the static constants <ph id=\"ph1\">`num`</ph> and <ph id=\"ph2\">`den`</ph> such that <ph id=\"ph3\">`num`</ph><ph id=\"ph4\"> / </ph><ph id=\"ph5\">`den`</ph> == N / D and <ph id=\"ph6\">`num`</ph> and <ph id=\"ph7\">`den`</ph> have no common factors.","pos":[1614,1827],"source":"The [ratio Structure](http://msdn.microsoft.com/en-us/3f7961f4-802b-4251-b3c3-090ef91c0dba) defines the static constants `num` and `den` such that `num` / `den` == N / D and `num` and `den` have no common factors."},{"content":"<ph id=\"ph1\">`num`</ph><ph id=\"ph2\"> / </ph><ph id=\"ph3\">`den`</ph> is the <ph id=\"ph4\">`value`</ph> that is represented by the template class.","pos":[1828,1899],"source":"`num` / `den` is the `value` that is represented by the template class."},{"content":"Therefore, <ph id=\"ph1\">`type`</ph> designates the instantiation <ph id=\"ph2\">`ratio&lt;N0, D0&gt;`</ph> for which <ph id=\"ph3\">`num`</ph> == N0 and <ph id=\"ph4\">`den`</ph> == D0.","pos":[1900,2001],"source":" Therefore, `type` designates the instantiation `ratio<N0, D0>` for which `num` == N0 and `den` == D0."},{"pos":[2011,2026],"content":"Specializations","linkify":"Specializations","nodes":[{"content":"Specializations","pos":[0,15]}]},{"pos":[2030,2108],"content":"<ph id=\"ph1\">\\&lt;</ph>ratio&gt; also defines specializations of <ph id=\"ph2\">`ratio`</ph> that have the following form.","source":"\\<ratio> also defines specializations of `ratio` that have the following form."},{"content":"Each specialization takes two template parameters that must also be specializations of <ph id=\"ph1\">`ratio`</ph>.","pos":[2181,2276],"source":"Each specialization takes two template parameters that must also be specializations of `ratio`."},{"content":"The value of <ph id=\"ph1\">`type`</ph> is determined by an associated logical operation.","pos":[2277,2346],"source":" The value of `type` is determined by an associated logical operation."},{"content":"Name","pos":[2353,2357]},{"pos":[2358,2370],"content":"<ph id=\"ph1\">`type`</ph> Value","source":"`type` Value"},{"pos":[2725,2733],"content":"typedefs","linkify":"typedefs","nodes":[{"content":"typedefs","pos":[0,8]}]},{"pos":[3322,3330],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3334,3416],"content":"<bpt id=\"p1\">[</bpt>Header Files Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-header-files.md)</ept>","source":"[Header Files Reference](../standard-library/cpp-standard-library-header-files.md)"}],"content":"---\ntitle: \"&lt;ratio&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ratio/std::mega\"\n  - \"ratio/std::peta\"\n  - \"ratio/std::ratio_greater\"\n  - \"ratio/std::micro\"\n  - \"ratio/std::ratio_add\"\n  - \"ratio/std::ratio_not_equal\"\n  - \"ratio/std::hecto\"\n  - \"ratio/std::nano\"\n  - \"ratio/std::ratio_less_equal\"\n  - \"ratio/std::ratio_less\"\n  - \"ratio/std::centi\"\n  - \"ratio/std::ratio_greater_equal\"\n  - \"ratio/std::ratio_subtract\"\n  - \"<ratio>\"\n  - \"ratio/std::atto\"\n  - \"ratio/std::tera\"\n  - \"ratio/std::milli\"\n  - \"ratio/std::ratio_multiply\"\n  - \"ratio/std::kilo\"\n  - \"ratio/std::ratio_divide\"\n  - \"ratio/std::giga\"\n  - \"ratio/std::pico\"\n  - \"ratio/std::femto\"\n  - \"ratio/std::ratio_equal\"\n  - \"ratio/std::ratio\"\n  - \"ratio/std::exa\"\n  - \"ratio/std::deci\"\n  - \"ratio/std::deca\"\ndev_langs: \n  - \"C++\"\nms.assetid: 8543e912-2d84-45ea-b3c0-bd7bfacee405\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;ratio&gt;\nInclude the standard header \\<ratio> to define constants and templates that are used to store and manipulate rational numbers at compile time.  \n  \n## Syntax  \n  \n```cpp  \n#include <ratio>  \n```  \n  \n### ratio Structure  \n\n```\nstruct ratio\n{\n    static constexpr intmax_t num;\n    static constexpr intmax_t den;\n    typedef ratio<num, den>  type;\n};\n```  \n The [ratio Structure](http://msdn.microsoft.com/en-us/3f7961f4-802b-4251-b3c3-090ef91c0dba) defines the static constants `num` and `den` such that `num` / `den` == N / D and `num` and `den` have no common factors. `num` / `den` is the `value` that is represented by the template class. Therefore, `type` designates the instantiation `ratio<N0, D0>` for which `num` == N0 and `den` == D0.  \n  \n### Specializations  \n \\<ratio> also defines specializations of `ratio` that have the following form.  \n  \n `template <class R1, class R2> struct ratio_specialization`  \n  \n Each specialization takes two template parameters that must also be specializations of `ratio`. The value of `type` is determined by an associated logical operation.  \n  \n|Name|`type` Value|  \n|----------|------------------|  \n|`ratio_add`|`R1 + R2`|  \n|`ratio_divide`|`R1 / R2`|  \n|`ratio_equal`|`R1 == R2`|  \n|`ratio_greater`|`R1 > R2`|  \n|`ratio_greater_equal`|`R1 >= R2`|  \n|`ratio_less`|`R1 < R2`|  \n|`ratio_less_equal`|`R1 <= R2`|  \n|`ratio_multiply`|`R1 * R2`|  \n|`ratio_not_equal`|`!(R1 == R2)`|  \n|`ratio_subtract`|`R1 - R2`|  \n  \n### typedefs  \n  \n```\ntypedef ratio<1,  1000000000000000000> atto;\ntypedef ratio<1,     1000000000000000> femto;\ntypedef ratio<1,        1000000000000> pico;\ntypedef ratio<1, 1000000000> nano;\ntypedef ratio<1, 1000000> micro;\ntypedef ratio<1, 1000> milli;\ntypedef ratio<1,  100> centi;\ntypedef ratio<1,   10> deci;\ntypedef ratio<10, 1> deca;\ntypedef ratio<100, 1> hecto;\ntypedef ratio<1000, 1> kilo;\ntypedef ratio<1000000, 1> mega;\ntypedef ratio<1000000000, 1> giga;\ntypedef ratio<1000000000000, 1> tera;\ntypedef ratio<1000000000000000, 1> peta;\ntypedef ratio<1000000000000000000, 1> exa;\n```  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)\n\n\n\n"}