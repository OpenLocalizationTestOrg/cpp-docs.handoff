<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cab70ed9b33a482a22e949cab12c1fa1ad71fb77</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\ctype-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6c456f86a301276bc0b86fd20cce8920936830e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">481adb553be0b223b9321a659d1a7153ca6050a9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ctype Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ctype Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A class that provides a facet that is used to classify characters, convert from upper and lower cases, and convert between the native character set and that set used by the locale.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The type used within a program to encode characters.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>As with any locale facet, the static object ID has an initial stored value of zero.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first attempt to access its stored value stores a unique positive value in <bpt id="p1">**</bpt>id.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Classification criteria are provided a nested bitmask type in the base class ctype_base.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The Standard C++ Library defines two explicit specializations of this template class:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ctype<ept id="p1">](../standard-library/ctype-char-class.md)</ept><ph id="ph1">&lt; `char`</ph>&gt;, an explicit specialization whose differences are described separately.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ctype<ept id="p1">**</ept><ph id="ph1">&lt; `wchar_t`</ph>&gt;, which treats elements as wide characters.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Other specializations of template class <bpt id="p1">**</bpt>ctype<ept id="p1">**</ept><ph id="ph1">\&lt;</ph> <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept>&gt;:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Convert a value <bpt id="p1">***</bpt>ch<ept id="p1">***</ept> of type <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept> to a value of type <ph id="ph1">`char`</ph> with the expression ( <ph id="ph2">`char`</ph>) <bpt id="p3">**</bpt>ch<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Convert a value <bpt id="p1">***</bpt>byte<ept id="p1">***</ept> of type <ph id="ph1">`char`</ph> to a value of type <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept> with the expression <bpt id="p3">**</bpt>CharType<ept id="p3">**</ept> ( <bpt id="p4">**</bpt>byte<ept id="p4">**</ept>).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>All other operations are performed on <ph id="ph1">`char`</ph> values in the same way as for the explicit specialization <bpt id="p1">**</bpt>ctype<ept id="p1">**</ept><ph id="ph2">&lt; `char`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>ctype</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Constructor for objects of class <ph id="ph1">`ctype`</ph> that serve as locale facets for characters.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>char_type</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A type that describes a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>do_is</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A virtual function called to test whether a single character has a particular attribute, or classify the attributes of each character in a range and stores them in an array.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>do_narrow</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert a character of type <ph id="ph1">`CharType`</ph> used by a locale to the corresponding character of type <ph id="ph2">`char`</ph> in the native character set.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>do_scan_is</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A virtual function called to locate the first character in a range that matches a specified mask.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>do_scan_not</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A virtual function called to locate the first character in a range that does not match a specified mask.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>do_tolower</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert a character or a range of characters to their lower case.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>do_toupper</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert a character or a range of characters to upper case.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>do_widen</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A virtual function called to converts a character of type <ph id="ph1">`char`</ph> in the native character set to the corresponding character of type <ph id="ph2">`CharType`</ph> used by a locale.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>is</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Tests whether a single character has a particular attribute, or classifies the attributes of each character in a range and stores them in an array.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>narrow</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Converts a character of type <ph id="ph1">`CharType`</ph> used by a locale to the corresponding character of type char in the native character set.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>scan_is</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Locates the first character in a range that matches a specified mask.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>scan_not</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Locates the first character in a range that does not match a specified mask.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>tolower</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Converts a character or a range of characters to lower case.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>toupper</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Converts a character or a range of characters to upper case.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>widen</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Converts a character of type <ph id="ph1">`char`</ph> in the native character set to the corresponding character of type <ph id="ph2">`CharType`</ph> used by a locale.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>locale&gt;</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>ctype::char_type</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A type that describes a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See the member function <bpt id="p1">[</bpt>widen<ept id="p1">](#ctype__widen)</ept> for an example that uses <ph id="ph1">`char_type`</ph> as a return value.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>ctype::ctype</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Constructor for objects of class ctype that serve as locale facets for characters.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Integer value used to specify the type of memory management for the object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The possible values for the <ph id="ph1">`_Refs`</ph> parameter and their significance are:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>0: The lifetime of the object is managed by the locales that contain it.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>1: The lifetime of the object must be manually managed.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>0: These values are not defined.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>No direct examples are possible, because the destructor is protected.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The constructor initializes its <ph id="ph1">`locale::facet`</ph> base object with <bpt id="p1">**</bpt>locale::<ept id="p1">**</ept><bpt id="p2">[</bpt>facet<ept id="p2">](../standard-library/locale-class.md#facet_class)</ept>( <ph id="ph2">`_Refs`</ph>).</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>ctype::do_is</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A virtual function called to test whether a single character has a particular attribute, or classify the attributes of each character in a range and stores them in an array.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The mask value for which the character is to be tested.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The character whose attributes are to be tested.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range whose attributes are to be classified.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range whose attributes are to be classified.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A pointer to the beginning of the array where the mask values characterizing the attributes of each of the characters are to be stored.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The first member function returns a Boolean value that is <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the character tested has the attribute described by the mask value; <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if it fails to have the attribute.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The second member function returns an array containing the mask values characterizing the attributes of each of the characters in the range.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The mask values classifying the attributes of the characters are provided by the class <bpt id="p1">[</bpt>ctype_base<ept id="p1">](../standard-library/ctype-base-class.md)</ept>, from which ctype derives.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The first member function can accept expressions for its first parameter referred to as bitmasks and formed from the combination of mask values by the logical bitwise operators (&amp;#124; , &amp; , ^ , ~).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>is<ept id="p1">](#ctype__is)</ept>, which calls <ph id="ph1">`do_is`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>ctype::do_narrow</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert a character of type <ph id="ph1">`CharType`</ph> used by a locale to the corresponding character of type <ph id="ph2">`char`</ph> in the native character set.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The character of type <ph id="ph1">`Chartype`</ph> used by the locale to be converted.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The default value to be assigned by the member function to characters of type <ph id="ph1">`CharType`</ph> that do not have counterpart characters of type <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range of characters to be converted.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range of characters to be converted.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A const pointer to the first character of type <ph id="ph1">`char`</ph> in the destination range that stores the converted range of characters.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The first protected member function returns the native character of type char that corresponds to the parameter character of type <ph id="ph1">`CharType`</ph> or <ph id="ph2">`default`</ph> if no counterpart is defined.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The second protected member function returns a pointer to the destination range of native characters converted from characters of type <ph id="ph1">`CharType`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The second protected member template function stores in <ph id="ph1">`dest`</ph>[ <ph id="ph2">`I`</ph>] the value <ph id="ph3">`do_narrow`</ph>( <ph id="ph4">`first`</ph> [ <ph id="ph5">`I`</ph>], <ph id="ph6">`default`</ph>), for <ph id="ph7">`I`</ph> in the interval [0, <ph id="ph8">`last`</ph> – <ph id="ph9">`first`</ph>).</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>narrow<ept id="p1">](#ctype__narrow)</ept>, which calls <ph id="ph1">`do_narrow`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>ctype::do_scan_is</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A virtual function called to locate the first character in a range that matches a specified mask.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The mask value to be matched by a character.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range to be scanned.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range to be scanned.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in a range that does match a specified mask.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If no such value exists, the function returns</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The protected member function returns the smallest pointer <ph id="ph1">`ptr`</ph> in the range [ <ph id="ph2">`first`</ph>, <ph id="ph3">`last`</ph>) for which <bpt id="p1">[</bpt>do_is<ept id="p1">](#ctype__do_is)</ept>( <ph id="ph4">`maskVal`</ph>, * <ph id="ph5">`ptr`</ph>) is true.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>scan_is<ept id="p1">](#ctype__scan_is)</ept>, which calls <ph id="ph1">`do_scan_is`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>ctype::do_scan_not</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A virtual function called to locate the first character in a range that does not match a specified mask.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The mask value not to be matched by a character.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range to be scanned.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range to be scanned.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in a range that doesn't match a specified mask.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If no such value exists, the function returns <ph id="ph1">`last`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The protected member function returns the smallest pointer <ph id="ph1">`ptr`</ph> in the range [ <ph id="ph2">`first`</ph>, <ph id="ph3">`last`</ph>) for which <bpt id="p1">[</bpt>do_is<ept id="p1">](#ctype__do_is)</ept>( <ph id="ph4">`maskVal`</ph>, * <ph id="ph5">`ptr`</ph>) is false.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>scan_not<ept id="p1">](#ctype__scan_not)</ept>, which calls <ph id="ph1">`do_scan_not`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>ctype::do_tolower</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert a character or a range of characters to lower case.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The character to be converted to lower case.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range of characters whose cases are to be converted.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range of characters whose cases are to be converted.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The first protected member function returns the lowercase form of the parameter <ph id="ph1">`ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If no lowercase form exists, it returns <ph id="ph1">`ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The second protected member function returns <ph id="ph1">`last`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The second protected member template function replaces each element <ph id="ph1">`first`</ph> [ <ph id="ph2">`I`</ph>], for <ph id="ph3">`I`</ph> in the interval [0, <ph id="ph4">`last`</ph> – <ph id="ph5">`first`</ph>), with <ph id="ph6">`do_tolower`</ph>( <ph id="ph7">`first`</ph> [ <ph id="ph8">`I`</ph>]).</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>tolower<ept id="p1">](#ctype__tolower)</ept>, which calls <ph id="ph1">`do_tolower`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>ctype::do_toupper</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert a character or a range of characters to upper case.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The character to be converted to upper case.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range of characters whose cases are to be converted.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A pointer to character immediately following the last character in the range of characters whose cases are to be converted.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The first protected member function returns the uppercase form of the parameter <ph id="ph1">`ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>If no uppercase form exists, it returns <ph id="ph1">`ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The second protected member function returns <ph id="ph1">`last`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The second protected member template function replaces each element <ph id="ph1">`first`</ph> [ <ph id="ph2">`I`</ph>], for <ph id="ph3">`I`</ph> in the interval [0, <ph id="ph4">`last`</ph> – <ph id="ph5">`first`</ph>), with <ph id="ph6">`do_toupper`</ph>( <ph id="ph7">`first`</ph> [ <ph id="ph8">`I`</ph>]).</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>toupper<ept id="p1">](#ctype__toupper)</ept>, which calls <ph id="ph1">`do_toupper`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>ctype::do_widen</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A virtual function called to converts a character of type <ph id="ph1">`char`</ph> in the native character set to the corresponding character of type <ph id="ph2">`CharType`</ph> used by a locale.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The character of type <ph id="ph1">`char`</ph> in the native character set to be converted.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range of characters to be converted.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range of characters to be converted.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A pointer to the first character of type <ph id="ph1">`CharType`</ph> in the destination range that stores the converted range of characters.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The first protected member function returns the character of type <ph id="ph1">`CharType`</ph> that corresponds to the parameter character of native type <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The second protected member function returns a pointer to the destination range of characters of type <ph id="ph1">`CharType`</ph> used by a locale converted from native characters of type <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The second protected member template function stores in <ph id="ph1">`dest`</ph>[ <ph id="ph2">`I`</ph>] the value <ph id="ph3">`do_widen`</ph>( <ph id="ph4">`first`</ph>[ <ph id="ph5">`I`</ph>]), for <ph id="ph6">`I`</ph> in the interval [0, <ph id="ph7">`last` - `first`</ph>).</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>widen<ept id="p1">](#ctype__widen)</ept>, which calls <ph id="ph1">`do_widen`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>ctype::is</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Tests whether a single character has a particular attribute or classifies the attributes of each character in a range and stores them in an array.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The mask value for which the character is to be tested.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The character whose attributes are to be tested.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range whose attributes are to be classified.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range whose attributes are to be classified.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>A pointer to the beginning of the array where the mask values characterizing the attributes of each of the characters are to be stored.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The first member function returns <ph id="ph1">`true`</ph> if the character tested has the attribute described by the mask value; <ph id="ph2">`false`</ph> if it fails to have the attribute.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The second member function returns a pointer to the last character in the range whose attributes are to be classified.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The mask values classifying the attributes of the characters are provided by the class <bpt id="p1">[</bpt>ctype_base Class<ept id="p1">](../standard-library/ctype-base-class.md)</ept>, from which ctype derives.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The first member function can accept expressions for its first parameter referred to as bitmasks and formed from the combination of mask values by the logical bitwise operators (&amp;#124; , &amp; , ^ , ~).</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>ctype::narrow</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Converts characters of type <ph id="ph1">`CharType`</ph> used by a locale to the corresponding characters of type <ph id="ph2">`char`</ph> in the native character set.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The character of type <ph id="ph1">`Chartype`</ph> used by the locale to be converted.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The default value to be assigned by the member function to characters of type <ph id="ph1">`CharType`</ph> that do not have counterpart characters of type <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range of characters to be converted.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range of characters to be converted.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A const pointer to the first character of type <ph id="ph1">`char`</ph> in the destination range that stores the converted range of characters.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The first member function returns the native character of type <ph id="ph1">`char`</ph> that corresponds to the parameter character of type <ph id="ph2">`CharType``default`</ph> if not counterpart is defined.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The second member function returns a pointer to the destination range of native characters converted from characters of type <ph id="ph1">`CharType`</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The first member function returns <bpt id="p1">[</bpt>do_narrow<ept id="p1">](#ctype__do_narrow)</ept>( <ph id="ph1">`ch`</ph>, <ph id="ph2">`default`</ph>).</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The second member function returns <bpt id="p1">[</bpt>do_narrow<ept id="p1">](#ctype__do_narrow)</ept> ( <ph id="ph1">`first`</ph>, <ph id="ph2">`last`</ph>, <ph id="ph3">`default`</ph>, <ph id="ph4">`dest`</ph>).</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Only the basic source characters are guaranteed to have a unique inverse image <ph id="ph1">`CharType`</ph> under <ph id="ph2">`narrow`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>For these basic source characters, the following invariant holds: <ph id="ph1">`narrow`</ph> ( <bpt id="p1">[</bpt>widen<ept id="p1">](#ctype__widen)</ept> ( <bpt id="p2">**</bpt>c<ept id="p2">**</ept> ), 0 ) == <bpt id="p3">**</bpt>c<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>ctype::scan_is</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Locates the first character in a range that matches a specified mask.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The mask value to be matched by a character.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range to be scanned.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range to be scanned.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in a range that does match a specified mask.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>If no such value exists, the function returns</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_scan_is<ept id="p1">](#ctype__do_scan_is)</ept>( <ph id="ph1">`maskVal`</ph>, <ph id="ph2">`first`</ph>, <ph id="ph3">`last`</ph>).</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>ctype::scan_not</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Locates the first character in a range that does not match a specified mask.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The mask value not to be matched by a character.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range to be scanned.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range to be scanned.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in a range that does not match a specified mask.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>If no such value exists, the function returns <ph id="ph1">`last`</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_scan_not<ept id="p1">](#ctype__do_scan_not)</ept>( <ph id="ph1">`maskVal`</ph>, <ph id="ph2">`first`</ph>, <ph id="ph3">`last`</ph>).</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>ctype::tolower</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Converts a character or a range of characters to lower case.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The character to be converted to lower case.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range of characters whose cases are to be converted.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range of characters whose cases are to be converted.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The first member function returns the lowercase form of the parameter <ph id="ph1">`ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>If no lowercase form exists, it returns <ph id="ph1">`ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The second member function returns <ph id="ph1">`last`</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The first member function returns <bpt id="p1">[</bpt>do_tolower<ept id="p1">](#ctype__do_tolower)</ept>( <ph id="ph1">`ch`</ph>).</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The second member function returns <bpt id="p1">[</bpt>do_tolower<ept id="p1">](#ctype__do_tolower)</ept>( <ph id="ph1">`first`</ph>, <ph id="ph2">`last`</ph>).</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>ctype::toupper</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Converts a character or a range of characters to upper case.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The character to be converted to uppercase.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range of characters whose cases are to be converted.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range of characters whose cases are to be converted.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The first member function returns the uppercase form of the parameter <ph id="ph1">`ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>If no uppercase form exists, it returns <ph id="ph1">`ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The second member function returns <ph id="ph1">`last`</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The first member function returns <bpt id="p1">[</bpt>do_toupper<ept id="p1">](#ctype__do_toupper)</ept>( <ph id="ph1">`ch`</ph>).</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The second member function returns <bpt id="p1">[</bpt>do_toupper<ept id="p1">](#ctype__do_toupper)</ept>( <ph id="ph1">`first`</ph>, <ph id="ph2">`last`</ph>).</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>ctype::widen</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Converts a character of type <ph id="ph1">`char`</ph> in the native character set to the corresponding character of type <ph id="ph2">`CharType`</ph> used by a locale.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The character of type char in the native character set to be converted.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>A pointer to the first character in the range of characters to be converted.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>A pointer to the character immediately following the last character in the range of characters to be converted.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>A pointer to the first character of type <ph id="ph1">`CharType`</ph> in the destination range that stores the converted range of characters.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The first member function returns the character of type <ph id="ph1">`CharType`</ph> that corresponds to the parameter character of native type <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The second member function returns a pointer to the destination range of characters of type <ph id="ph1">`CharType`</ph> used by a locale converted from native characters of type <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The first member function returns <bpt id="p1">[</bpt>do_widen<ept id="p1">](#ctype__do_widen)</ept>( <ph id="ph1">`byte`</ph>).</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The second member function returns <bpt id="p1">[</bpt>do_widen<ept id="p1">](#ctype__do_widen)</ept>( <ph id="ph1">`first`</ph>, <ph id="ph2">`last`</ph>, <ph id="ph3">`dest`</ph>).</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>locale&gt;</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>