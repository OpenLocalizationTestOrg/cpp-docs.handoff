<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40b3d1b6fcc15a7f63705251bf7134c5790e8aeb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn045-mfc-database-support-for-long-varchar-varbinary.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab7d590fd1926f408ad464b1956ad5949229d3ca</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0c4dd3e036a9b51afc25ac60e080ab77462b50b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN045: MFC-Database Support for Long Varchar-Varbinary | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN045: MFC/Database Support for Long Varchar/Varbinary</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following technical note has not been updated since it was first included in the online documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, some procedures and topics might be out of date or incorrect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the latest information, it is recommended that you search for the topic of interest in the online documentation index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This note describes how to retrieve and send the ODBC <bpt id="p1">**</bpt>SQL_LONGVARCHAR<ept id="p1">**</ept> and <bpt id="p2">**</bpt>SQL_LONGVARBINARY<ept id="p2">**</ept> data types using the MFC database classes.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Overview of Long Varchar/Varbinary Support</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The ODBC <bpt id="p1">**</bpt>SQL_LONG_VARCHAR<ept id="p1">**</ept> and <bpt id="p2">**</bpt>SQL_LONGBINARY<ept id="p2">**</ept> data types (referred to here as long data columns) can hold huge amounts of data.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There are 3 ways you can handle this data:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Bind it to a <ph id="ph1">`CString`/`CByteArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Bind it to a <ph id="ph1">`CLongBinary`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Do not bind it at all and retrieve and send the long data value manually, independent of the database classes.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Each of the three methods has advantages and disadvantages.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Long data columns are not supported for parameters to a query.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>They are only supported for outputColumns.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Binding a Long Data Column to a CString/CByteArray</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Advantages:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This approach is simple to understand, and you work with familiar classes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The framework provides <ph id="ph1">`CFormView`</ph> support for <ph id="ph2">`CString`</ph> with <ph id="ph3">`DDX_Text`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You have lots of general string or collection functionality with the <ph id="ph1">`CString`</ph> and <ph id="ph2">`CByteArray`</ph> classes, and you can control the amount of memory allocated locally to hold the data value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The framework maintains an old copy of field data during <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> or <ph id="ph1">`AddNew`</ph> function calls, and the framework can automatically detect changes to the data for you.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">`CString`</ph> is designed for working on character data, and <ph id="ph2">`CByteArray`</ph> for working on binary data, it is recommended that you put the character data (<bpt id="p1">**</bpt>SQL_LONGVARCHAR<ept id="p1">**</ept>) into <ph id="ph3">`CString`</ph>, and the binary data (<bpt id="p2">**</bpt>SQL_LONGVARBINARY<ept id="p2">**</ept>) into <ph id="ph4">`CByteArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The RFX functions for <ph id="ph1">`CString`</ph> and <ph id="ph2">`CByteArray`</ph> have an additional argument which lets you override the default size of allocated memory to hold the retrieved value for the data column.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note the nMaxLength argument in the following function declarations:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you retrieve a long data column into a <ph id="ph1">`CString`</ph> or <ph id="ph2">`CByteArray`</ph>, the maximum returned amount of data is, by default, 255 bytes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Anything beyond this is ignored.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this case, the framework will throw the exception <bpt id="p1">**</bpt>AFX_SQL_ERROR_DATA_TRUNCATED<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Fortunately, you can explicitly increase nMaxLength to greater values, up to <bpt id="p1">**</bpt>MAXINT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The value of nMaxLength is used by MFC to set the local buffer of the <bpt id="p1">**</bpt>SQLBindColumn<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is the local buffer for storage of the data and does not actually affect the amount of data returned by the ODBC driver.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`RFX_Binary`</ph> only make one call using <bpt id="p1">**</bpt>SQLFetch<ept id="p1">**</ept> to retrieve the data from the back-end database.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Each ODBC driver has a different limitation on the amount of data they can return in a single fetch.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This limit may be much smaller than the value set in nMaxLength, in which case the exception <bpt id="p1">**</bpt>AFX_SQL_ERROR_DATA_TRUNCATED<ept id="p1">**</ept> will be thrown.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Under these circumstances, switch to using <ph id="ph1">`RFX_LongBinary`</ph> instead of <ph id="ph2">`RFX_Text`</ph> or <ph id="ph3">`RFX_Binary`</ph> so that all the data can be retrieved.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>ClassWizard will bind a <bpt id="p1">**</bpt>SQL_LONGVARCHAR<ept id="p1">**</ept> to a <ph id="ph1">`CString`</ph>, or a <bpt id="p2">**</bpt>SQL_LONGVARBINARY<ept id="p2">**</ept> to a <ph id="ph2">`CByteArray`</ph> for you.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you want to allocate more than 255 bytes into which you retrieve your long data column, you can then supply an explicit value for nMaxLength.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When a long data column is bound to a <ph id="ph1">`CString`</ph> or <ph id="ph2">`CByteArray`</ph>, updating the field works just the same as when it is bound to a SQL_<bpt id="p1">**</bpt>VARCHAR<ept id="p1">**</ept> or SQL_<bpt id="p2">**</bpt>VARBINARY<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>During <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, the data value is cached away and later compared when <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> is called to detect changes to the data value and set the Dirty and Null values for the column appropriately.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Binding a Long Data Column to a CLongBinary</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If your long data column may contain more <bpt id="p1">**</bpt>MAXINT<ept id="p1">**</ept> bytes of data, you should probably consider retrieving it into a <ph id="ph1">`CLongBinary`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Advantages:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This retrieves an entire long data column, up to available memory.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Disadvantages:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The data is held in memory.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This approach is also prohibitively expensive for very large amounts of data.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You must call <ph id="ph1">`SetFieldDirty`</ph> for the bound data member to ensure the field is included in an <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> operation.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you retrieve long data columns into a <ph id="ph1">`CLongBinary`</ph>, the database classes will check the total size of the long data column, then allocate an <ph id="ph2">`HGLOBAL`</ph> memory segment large enough to hold it the entire data value.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The database classes then retrieve the entire data value into the allocated <ph id="ph1">`HGLOBAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the data source cannot return the expected size of the long data column, the framework will throw the exception <bpt id="p1">**</bpt>AFX_SQL_ERROR_SQL_NO_TOTAL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the attempt to allocate the <ph id="ph1">`HGLOBAL`</ph> fails, a standard memory exception is thrown.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>ClassWizard will bind an <bpt id="p1">**</bpt>SQL_LONGVARCHAR<ept id="p1">**</ept> or <bpt id="p2">**</bpt>SQL_LONGVARBINARY<ept id="p2">**</ept> to a <ph id="ph1">`CLongBinary`</ph> for you.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Select <ph id="ph1">`CLongBinary`</ph> as the Variable Type in the Add Member Variable dialog.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>ClassWizard will then add an <ph id="ph1">`RFX_LongBinary`</ph> call to your <ph id="ph2">`DoFieldExchange`</ph> call and increment the total number of bound fields.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To update long data column values, first make sure the allocated <ph id="ph1">`HGLOBAL`</ph> is large enough to hold your new data by calling <bpt id="p1">**</bpt>::GlobalSize<ept id="p1">**</ept> on the <ph id="ph2">`m_hData`</ph> member of the <ph id="ph3">`CLongBinary`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If it is too small, release the <ph id="ph1">`HGLOBAL`</ph> and allocate one the appropriate size.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Then set <ph id="ph1">`m_dwDataLength`</ph> to reflect the new size.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">`m_dwDataLength`</ph> is larger than the size of the data you're replacing, you can either free and reallocate the <ph id="ph2">`HGLOBAL`</ph>, or leave it allocated.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Make sure to indicate the number of bytes actually used in <ph id="ph1">`m_dwDataLength`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>How Updating a CLongBinary Works</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It is not necessary to understand how updating a <ph id="ph1">`CLongBinary`</ph> works, but it may be useful as an example on how to send long data values to a data source, if you choose this third method, described below.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In order for a <ph id="ph1">`CLongBinary`</ph> field to be included in an update, you must explicitly call <ph id="ph2">`SetFieldDirty`</ph> for the field.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you make any change to a field, including setting it Null, you must call <ph id="ph1">`SetFieldDirty`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You must also call <ph id="ph1">`SetFieldNull`</ph>, with the second parameter being <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, to mark the field as having a value.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When updating a <ph id="ph1">`CLongBinary`</ph> field, the database classes use ODBC's <bpt id="p1">**</bpt>DATA_AT_EXEC<ept id="p1">**</ept> mechanism (see ODBC documentation on <bpt id="p2">**</bpt>SQLSetPos<ept id="p2">**</ept>'s rgbValue argument).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When the framework prepares the insert or update statement, instead of pointing to the <ph id="ph1">`HGLOBAL`</ph> containing the data, the <bpt id="p1">*</bpt>address<ept id="p1">*</ept> of the <ph id="ph2">`CLongBinary`</ph> is set as the <bpt id="p2">*</bpt>value<ept id="p2">*</ept> of the column instead, and the length indicator set to <bpt id="p3">**</bpt>SQL_DATA_AT_EXEC<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Later, when the update statement is sent to the data source, <bpt id="p1">**</bpt>SQLExecDirect<ept id="p1">**</ept> will return <bpt id="p2">**</bpt>SQL_NEED_DATA<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This alerts the framework that the value of the param for this column is actually the address of a <ph id="ph1">`CLongBinary`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The framework calls <bpt id="p1">**</bpt>SQLGetData<ept id="p1">**</ept> once with a small buffer, expecting the driver to return the actual length of the data.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If the driver returns the actual length of the binary large object (the BLOB), MFC reallocates as much space as necessary to fetch the BLOB.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If the data source returns <bpt id="p1">**</bpt>SQL_NO_TOTAL<ept id="p1">**</ept>, indicating that it can't determine the size of the BLOB, MFC will create smaller blocks.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The default initial size is 64K, and subsequent blocks will be double the size; for example, the second will be 128K, the third is 256K, and so on.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The initial size is configurable.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Not Binding: Retrieving/Sending Data Directly from ODBC with SQLGetData</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>With this method you completely bypass the database classes, and deal with the long data column yourself.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Advantages:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can cache data to disk if necessary, or decide dynamically how much data to retrieve.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Disadvantages:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You don't get the framework's <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> or <ph id="ph1">`AddNew`</ph> support, and you must write code yourself to perform basic functionality (<bpt id="p2">**</bpt>Delete<ept id="p2">**</ept> does work though, since it is not a column level operation).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In this case, the long data column must be in the select list of the recordset, but should not be bound to by the framework.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>One way to do this is to supply your own SQL statement via <ph id="ph1">`GetDefaultSQL`</ph> or as the lpszSQL argument to <ph id="ph2">`CRecordset`</ph>'s <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> function, and not bind the extra column with an RFX_ function call.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>ODBC requires that unbound fields appear to the right of bound fields, so add your unbound column or columns to the end of the select list.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Because your long data column is not bound by the framework, changes to it will not be handled with <ph id="ph1">`CRecordset::Update`</ph> calls.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You must create and send the required SQL <bpt id="p1">**</bpt>INSERT<ept id="p1">**</ept> and <bpt id="p2">**</bpt>UPDATE<ept id="p2">**</ept> statements yourself.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>