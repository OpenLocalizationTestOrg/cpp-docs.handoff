<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46b3b474cd582bdd4909ef20c3ce6fa358d19596</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\lvalue-reference-declarator-amp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2586d41ef77825514dbec0b0223a473e13cbd53f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">923e4c67cd4d3cacabd2244874c6c09bd79256e3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Lvalue Reference Declarator: <ph id="ph1">&amp;amp;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Lvalue Reference Declarator:</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Holds the address of an object but behaves syntactically like an object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can think of an lvalue reference as another name for an object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An lvalue reference declaration consists of an optional list of specifiers followed by a reference declarator.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A reference must be initialized and cannot be changed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any object whose address can be converted to a given pointer type can also be converted to the similar reference type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, any object whose address can be converted to type <ph id="ph1">`char *`</ph> can also be converted to type <ph id="ph2">`char &amp;`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Do not confuse reference declarations with use of the <bpt id="p1">[</bpt>address-of operator<ept id="p1">](../cpp/address-of-operator-amp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`&amp;`</ph><bpt id="p1">*</bpt>identifier<ept id="p1">*</ept> is preceded by a type, such as <ph id="ph2">`int`</ph> or <ph id="ph3">`char`</ph>, <bpt id="p2">*</bpt>identifier<ept id="p2">*</ept> is declared as a reference to the type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`&amp;`</ph><bpt id="p1">*</bpt>identifier<ept id="p1">*</ept> is not preceded by a type, the usage is that of the address-of operator.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the reference declarator by declaring a <ph id="ph1">`Person`</ph> object and a reference to that object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`rFriend`</ph> is a reference to <ph id="ph2">`myFriend`</ph>, updating either variable changes the same object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>References</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Reference-Type Function Arguments</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Reference-Type Function Returns</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>References to Pointers</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>