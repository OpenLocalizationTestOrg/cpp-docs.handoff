{"nodes":[{"pos":[12,52],"content":"Using Contained Windows | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Contained Windows | Microsoft Docs","pos":[0,40]}]},{"content":"Using Contained Windows","pos":[630,653]},{"content":"ATL implements contained windows with <bpt id=\"p1\">[</bpt>CContainedWindowT<ept id=\"p1\">](../atl/reference/ccontainedwindowt-class.md)</ept>.","pos":[654,757],"source":"ATL implements contained windows with [CContainedWindowT](../atl/reference/ccontainedwindowt-class.md)."},{"content":"A contained window represents a window that delegates its messages to a container object instead of handling them in its own class.","pos":[758,889]},{"pos":[897,1001],"content":"[!NOTE]\n You do not need to derive a class from `CContainedWindowT` in order to use contained windows.","leadings":["","> "],"nodes":[{"content":"You do not need to derive a class from <ph id=\"ph1\">`CContainedWindowT`</ph> in order to use contained windows.","pos":[9,102],"source":" You do not need to derive a class from `CContainedWindowT` in order to use contained windows."}]},{"content":"With contained windows, you can either superclass an existing Windows class or subclass an existing window.","pos":[1008,1115]},{"content":"To create a window that superclasses an existing Windows class, first specify the existing class name in the constructor for the <ph id=\"ph1\">`CContainedWindowT`</ph> object.","pos":[1116,1272],"source":" To create a window that superclasses an existing Windows class, first specify the existing class name in the constructor for the `CContainedWindowT` object."},{"content":"Then call <ph id=\"ph1\">`CContainedWindowT::Create`</ph>.","pos":[1273,1311],"source":" Then call `CContainedWindowT::Create`."},{"content":"To subclass an existing window, you don't need to specify a Windows class name (pass <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> to the constructor).","pos":[1312,1426],"source":" To subclass an existing window, you don't need to specify a Windows class name (pass **NULL** to the constructor)."},{"content":"Simply call the <ph id=\"ph1\">`CContainedWindowT::SubclassWindow`</ph> method with the handle to the window being subclassed.","pos":[1427,1533],"source":" Simply call the `CContainedWindowT::SubclassWindow` method with the handle to the window being subclassed."},{"content":"You typically use contained windows as data members of a container class.","pos":[1540,1613]},{"content":"The container does not need to be a window; however, it must derive from <bpt id=\"p1\">[</bpt>CMessageMap<ept id=\"p1\">](../atl/reference/cmessagemap-class.md)</ept>.","pos":[1614,1740],"source":" The container does not need to be a window; however, it must derive from [CMessageMap](../atl/reference/cmessagemap-class.md)."},{"content":"A contained window can use alternate message maps to handle its messages.","pos":[1747,1820]},{"content":"If you have more than one contained window, you should declare several alternate message maps, each corresponding to a separate contained window.","pos":[1821,1966]},{"content":"Example","pos":[1975,1982]},{"content":"Following is an example of a container class with two contained windows:","pos":[1986,2058]},{"pos":[2076,2096],"content":"NVC_ATL_Windowing#67"},{"pos":[2157,2254],"content":"For more information about contained windows, see the <bpt id=\"p1\">[</bpt>SUBEDIT<ept id=\"p1\">](../visual-cpp-samples.md)</ept> sample.","source":"For more information about contained windows, see the [SUBEDIT](../visual-cpp-samples.md) sample."},{"content":"See Also","pos":[2263,2271]},{"content":"Window Classes","pos":[2276,2290]}],"content":"---\ntitle: \"Using Contained Windows | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ATL, windows\"\n  - \"windows [C++], ATL\"\n  - \"contained windows in ATL\"\nms.assetid: 7b3d79e5-b569-413f-9b98-df4f14efbe2b\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using Contained Windows\nATL implements contained windows with [CContainedWindowT](../atl/reference/ccontainedwindowt-class.md). A contained window represents a window that delegates its messages to a container object instead of handling them in its own class.  \n  \n> [!NOTE]\n>  You do not need to derive a class from `CContainedWindowT` in order to use contained windows.  \n  \n With contained windows, you can either superclass an existing Windows class or subclass an existing window. To create a window that superclasses an existing Windows class, first specify the existing class name in the constructor for the `CContainedWindowT` object. Then call `CContainedWindowT::Create`. To subclass an existing window, you don't need to specify a Windows class name (pass **NULL** to the constructor). Simply call the `CContainedWindowT::SubclassWindow` method with the handle to the window being subclassed.  \n  \n You typically use contained windows as data members of a container class. The container does not need to be a window; however, it must derive from [CMessageMap](../atl/reference/cmessagemap-class.md).  \n  \n A contained window can use alternate message maps to handle its messages. If you have more than one contained window, you should declare several alternate message maps, each corresponding to a separate contained window.  \n  \n## Example  \n Following is an example of a container class with two contained windows:  \n  \n [!code-cpp[NVC_ATL_Windowing#67](../atl/codesnippet/cpp/using-contained-windows_1.h)]  \n  \n For more information about contained windows, see the [SUBEDIT](../visual-cpp-samples.md) sample.  \n  \n## See Also  \n [Window Classes](../atl/atl-window-classes.md)\n\n"}