{"nodes":[{"pos":[12,80],"content":"Walkthrough: Adding a CTaskDialog to an Application | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Walkthrough: Adding a CTaskDialog to an Application | Microsoft Docs","pos":[0,68]}]},{"content":"Walkthrough: Adding a CTaskDialog to an Application","pos":[668,719]},{"pos":[720,860],"content":"This walkthrough introduces the <bpt id=\"p1\">[</bpt>CTaskDialog Class<ept id=\"p1\">](../mfc/reference/ctaskdialog-class.md)</ept> and shows you how to add one to your application.","source":"This walkthrough introduces the [CTaskDialog Class](../mfc/reference/ctaskdialog-class.md) and shows you how to add one to your application."},{"content":"The <ph id=\"ph1\">`CTaskDialog`</ph> is a task dialog box that replaces the Windows message box in <ph id=\"ph2\">[!INCLUDE[wiprlhext](../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.","pos":[867,1026],"source":"The `CTaskDialog` is a task dialog box that replaces the Windows message box in [!INCLUDE[wiprlhext](../c-runtime-library/reference/includes/wiprlhext_md.md)]."},{"content":"The <ph id=\"ph1\">`CTaskDialog`</ph> improves the original message box and adds functionality.","pos":[1027,1102],"source":" The `CTaskDialog` improves the original message box and adds functionality."},{"content":"The Windows message box is still supported in <ph id=\"ph1\">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph>.","pos":[1103,1209],"source":" The Windows message box is still supported in [!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]."},{"pos":[1217,1830],"content":"[!NOTE]\n Versions of Windows earlier than [!INCLUDE[wiprlhext](../c-runtime-library/reference/includes/wiprlhext_md.md)] do not support the `CTaskDialog`. You must program an alternative dialog box option if you want to show a message to a user who runs your application on an earlier version of Windows. You can use the static method [CTaskDialog::IsSupported](../mfc/reference/ctaskdialog-class.md#ctaskdialog__issupported) to determine at run time whether a user's computer can display a `CTaskDialog`. In addition, the `CTaskDialog` is only available when your application is built with the Unicode library.","leadings":["","> "],"nodes":[{"content":" Versions of Windows earlier than [!INCLUDE[wiprlhext](../c-runtime-library/reference/includes/wiprlhext_md.md)] do not support the `CTaskDialog`. You must program an alternative dialog box option if you want to show a message to a user who runs your application on an earlier version of Windows. You can use the static method [CTaskDialog::IsSupported](../mfc/reference/ctaskdialog-class.md#ctaskdialog__issupported) to determine at run time whether a user's computer can display a `CTaskDialog`. In addition, the `CTaskDialog` is only available when your application is built with the Unicode library.","pos":[8,611],"nodes":[{"content":"Versions of Windows earlier than <ph id=\"ph1\">[!INCLUDE[wiprlhext](../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> do not support the <ph id=\"ph2\">`CTaskDialog`</ph>.","pos":[1,146],"source":" Versions of Windows earlier than [!INCLUDE[wiprlhext](../c-runtime-library/reference/includes/wiprlhext_md.md)] do not support the `CTaskDialog`."},{"content":"You must program an alternative dialog box option if you want to show a message to a user who runs your application on an earlier version of Windows.","pos":[147,296]},{"content":"You can use the static method <bpt id=\"p1\">[</bpt>CTaskDialog::IsSupported<ept id=\"p1\">](../mfc/reference/ctaskdialog-class.md#ctaskdialog__issupported)</ept> to determine at run time whether a user's computer can display a <ph id=\"ph1\">`CTaskDialog`</ph>.","pos":[297,497],"source":" You can use the static method [CTaskDialog::IsSupported](../mfc/reference/ctaskdialog-class.md#ctaskdialog__issupported) to determine at run time whether a user's computer can display a `CTaskDialog`."},{"content":"In addition, the <ph id=\"ph1\">`CTaskDialog`</ph> is only available when your application is built with the Unicode library.","pos":[498,603],"source":" In addition, the `CTaskDialog` is only available when your application is built with the Unicode library."}]}]},{"content":"The <ph id=\"ph1\">`CTaskDialog`</ph> supports several optional elements to gather and display information.","pos":[1837,1924],"source":"The `CTaskDialog` supports several optional elements to gather and display information."},{"content":"For example, a <ph id=\"ph1\">`CTaskDialog`</ph> can display command links, customized buttons, customized icons, and a footer.","pos":[1925,2032],"source":" For example, a `CTaskDialog` can display command links, customized buttons, customized icons, and a footer."},{"content":"The <ph id=\"ph1\">`CTaskDialog`</ph> also has several methods that enable you to query the state of the task dialog box to determine what optional elements the user selected.","pos":[2033,2188],"source":" The `CTaskDialog` also has several methods that enable you to query the state of the task dialog box to determine what optional elements the user selected."},{"content":"Prerequisites","pos":[2197,2210]},{"content":"You need the following components to complete this walkthrough:","pos":[2214,2277]},{"content":"Replacing a Windows Message Box with a CTaskDialog","pos":[2444,2494]},{"content":"The following procedure demonstrates the most basic use of the <ph id=\"ph1\">`CTaskDialog`</ph>, which is to replace the Windows message box.","pos":[2498,2620],"source":"The following procedure demonstrates the most basic use of the `CTaskDialog`, which is to replace the Windows message box."},{"content":"This example also changes the icon associated with the task dialog box.","pos":[2621,2692]},{"content":"Changing the icon makes the <ph id=\"ph1\">`CTaskDialog`</ph> appear identical to the Windows message box.","pos":[2693,2779],"source":" Changing the icon makes the `CTaskDialog` appear identical to the Windows message box."},{"content":"To Replace a Windows Message Box with a CTaskDialog","pos":[2790,2841]},{"content":"Create a new MFC Application project with the default settings.","pos":[2851,2914]},{"content":"Call it <ph id=\"ph1\">`MyProject`</ph>.","pos":[2915,2935],"source":" Call it `MyProject`."},{"pos":[2945,3006],"content":"Use the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> to open the file MyProject.cpp.","source":"Use the **Solution Explorer** to open the file MyProject.cpp."},{"pos":[3016,3076],"content":"Add <ph id=\"ph1\">`#include \"afxtaskdialog.h\"`</ph> after the list of includes.","source":"Add `#include \"afxtaskdialog.h\"` after the list of includes."},{"content":"Find the method <ph id=\"ph1\">`CMyProjectApp::InitInstance`</ph>.","pos":[3086,3132],"source":"Find the method `CMyProjectApp::InitInstance`."},{"content":"Insert the following lines of code before the <ph id=\"ph1\">`return TRUE;`</ph> statement.","pos":[3133,3204],"source":" Insert the following lines of code before the `return TRUE;` statement."},{"content":"This code creates the strings that we use in either the Windows message box or in the <ph id=\"ph1\">`CTaskDialog`</ph>.","pos":[3205,3305],"source":" This code creates the strings that we use in either the Windows message box or in the `CTaskDialog`."},{"content":"Add the following code after the code from step 4.","pos":[3457,3507]},{"content":"This code guarantees that the user's computer supports the <ph id=\"ph1\">`CTaskDialog`</ph>.","pos":[3508,3581],"source":" This code guarantees that the user's computer supports the `CTaskDialog`."},{"content":"If the dialog is not supported, the application displays a Windows message box instead.","pos":[3582,3669]},{"content":"Insert the following code between the brackets after the <ph id=\"ph1\">`if`</ph> statement from step 5.","pos":[3795,3879],"source":"Insert the following code between the brackets after the `if` statement from step 5."},{"content":"This code creates the <ph id=\"ph1\">`CTaskDialog`</ph>.","pos":[3880,3916],"source":" This code creates the `CTaskDialog`."},{"content":"On the next line, add the following code.","pos":[4036,4077]},{"content":"This code sets the warning icon.","pos":[4078,4110]},{"content":"On the next line, add the following code.","pos":[4183,4224]},{"content":"This code displays the task dialog box.","pos":[4225,4264]},{"content":"You can omit step 7 if you do not want the <ph id=\"ph1\">`CTaskDialog`</ph> to display the same icon as the Windows message box.","pos":[4315,4424],"source":"You can omit step 7 if you do not want the `CTaskDialog` to display the same icon as the Windows message box."},{"content":"If you omit that step, the <ph id=\"ph1\">`CTaskDialog`</ph> has no icon when the application displays it.","pos":[4425,4511],"source":" If you omit that step, the `CTaskDialog` has no icon when the application displays it."},{"content":"Compile and run the application.","pos":[4518,4550]},{"content":"The application displays the task dialog box after it starts.","pos":[4551,4612]},{"content":"Adding Functionality to the CTaskDialog","pos":[4621,4660]},{"content":"The following procedure shows you how to add functionality to the <ph id=\"ph1\">`CTaskDialog`</ph> that you created in the previous procedure.","pos":[4664,4787],"source":"The following procedure shows you how to add functionality to the `CTaskDialog` that you created in the previous procedure."},{"content":"The example code shows you how to execute specific instructions based on the user's selections.","pos":[4788,4883]},{"content":"To Add Functionality to the CTaskDialog","pos":[4894,4933]},{"content":"Navigate to the <bpt id=\"p1\">**</bpt>Resource View<ept id=\"p1\">**</ept>.","pos":[4943,4977],"source":"Navigate to the **Resource View**."},{"content":"If you cannot see the <bpt id=\"p1\">**</bpt>Resource View<ept id=\"p1\">**</ept>, you can open it from the <bpt id=\"p2\">**</bpt>View<ept id=\"p2\">**</ept> menu.","pos":[4978,5058],"source":" If you cannot see the **Resource View**, you can open it from the **View** menu."},{"content":"Expand the <bpt id=\"p1\">**</bpt>Resource View<ept id=\"p1\">**</ept> until you can select the <bpt id=\"p2\">**</bpt>String Table<ept id=\"p2\">**</ept> folder.","pos":[5068,5146],"source":"Expand the **Resource View** until you can select the **String Table** folder."},{"content":"Expand it and double-click the <bpt id=\"p1\">**</bpt>String Table<ept id=\"p1\">**</ept> entry.","pos":[5147,5201],"source":" Expand it and double-click the **String Table** entry."},{"content":"Scroll to the bottom of the string table and add a new entry.","pos":[5211,5272]},{"content":"Change the ID to <ph id=\"ph1\">`TEMP_LINE1`</ph>.","pos":[5273,5303],"source":" Change the ID to `TEMP_LINE1`."},{"content":"Set the caption to <bpt id=\"p1\">**</bpt>Command Line 1<ept id=\"p1\">**</ept>.","pos":[5304,5342],"source":" Set the caption to **Command Line 1**."},{"content":"Add another new entry.","pos":[5352,5374]},{"content":"Change the ID to <ph id=\"ph1\">`TEMP_LINE2`</ph>.","pos":[5375,5405],"source":" Change the ID to `TEMP_LINE2`."},{"content":"Set the caption to <bpt id=\"p1\">**</bpt>Command Line 2<ept id=\"p1\">**</ept>.","pos":[5406,5444],"source":" Set the caption to **Command Line 2**."},{"content":"Navigate back to MyProject.cpp.","pos":[5454,5485]},{"pos":[5495,5548],"content":"After <ph id=\"ph1\">`CString emptyString;`</ph>, add the following code:","source":"After `CString emptyString;`, add the following code:"},{"content":"Find the <ph id=\"ph1\">`taskDialog.DoModal()`</ph> statement and replace that statement with the following code.","pos":[5789,5882],"source":"Find the `taskDialog.DoModal()` statement and replace that statement with the following code."},{"content":"This code updates the task dialog box and adds new controls:","pos":[5883,5943]},{"content":"Add the following line of code that displays the task dialog box to the user and retrieves the user's selection:","pos":[6409,6521]},{"content":"Insert the following code after the call to <ph id=\"ph1\">`taskDialog.DoModal()`</ph>.","pos":[6591,6658],"source":"Insert the following code after the call to `taskDialog.DoModal()`."},{"content":"This section of code processes the user's input:","pos":[6659,6707]},{"content":"In the code in step 9, replace the comments that start with PROCESS IF with the code that you want to execute under the specified conditions.","pos":[7343,7484]},{"content":"Compile and run the application.","pos":[7491,7523]},{"content":"The application displays the task dialog box that uses the new controls and additional information.","pos":[7524,7623]},{"content":"Displaying a CTaskDialog Without Creating a CTaskDialog Object","pos":[7632,7694]},{"content":"The following procedure shows you how to display a <ph id=\"ph1\">`CTaskDialog`</ph> without first creating a <ph id=\"ph2\">`CTaskDialog`</ph> object.","pos":[7698,7809],"source":"The following procedure shows you how to display a `CTaskDialog` without first creating a `CTaskDialog` object."},{"content":"This example continues the previous procedures.","pos":[7810,7857]},{"content":"To Display a CTaskDialog Without Creating a CTaskDialog Object","pos":[7868,7930]},{"content":"Open the MyProject.cpp file if it is not already open.","pos":[7940,7994]},{"pos":[8004,8088],"content":"Navigate to the closing bracket for the <ph id=\"ph1\">`if (CTaskDialog::IsSupported())`</ph> statement.","source":"Navigate to the closing bracket for the `if (CTaskDialog::IsSupported())` statement."},{"pos":[8098,8211],"content":"Insert the following code immediately before the closing bracket of the <ph id=\"ph1\">`if`</ph> statement (before the <ph id=\"ph2\">`else`</ph> block):","source":"Insert the following code immediately before the closing bracket of the `if` statement (before the `else` block):"},{"content":"Compile and run the application.","pos":[8368,8400]},{"content":"The application displays two task dialog boxes.","pos":[8401,8448]},{"content":"The first dialog box is from the To Add Functionality to the CTaskDialog procedure; the second dialog box is from the last procedure.","pos":[8449,8582]},{"content":"These examples do not demonstrate all the available options for a <ph id=\"ph1\">`CTaskDialog`</ph>, but should help you get started.","pos":[8589,8702],"source":"These examples do not demonstrate all the available options for a `CTaskDialog`, but should help you get started."},{"content":"See <bpt id=\"p1\">[</bpt>CTaskDialog Class<ept id=\"p1\">](../mfc/reference/ctaskdialog-class.md)</ept> for a full description of the class.","pos":[8703,8802],"source":" See [CTaskDialog Class](../mfc/reference/ctaskdialog-class.md) for a full description of the class."},{"content":"See Also","pos":[8811,8819]},{"content":"Dialog Boxes","pos":[8824,8836]},{"content":"CTaskDialog Class","pos":[8867,8884]},{"content":"CTaskDialog::CTaskDialog","pos":[8930,8954]}],"content":"---\ntitle: \"Walkthrough: Adding a CTaskDialog to an Application | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CTaskDialog, adding\"\n  - \"walkthroughs [C++], dialogs\"\nms.assetid: 3a62abb8-2d86-4bec-bdb8-5784d5f9a9f8\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Walkthrough: Adding a CTaskDialog to an Application\nThis walkthrough introduces the [CTaskDialog Class](../mfc/reference/ctaskdialog-class.md) and shows you how to add one to your application.  \n  \n The `CTaskDialog` is a task dialog box that replaces the Windows message box in [!INCLUDE[wiprlhext](../c-runtime-library/reference/includes/wiprlhext_md.md)]. The `CTaskDialog` improves the original message box and adds functionality. The Windows message box is still supported in [!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)].  \n  \n> [!NOTE]\n>  Versions of Windows earlier than [!INCLUDE[wiprlhext](../c-runtime-library/reference/includes/wiprlhext_md.md)] do not support the `CTaskDialog`. You must program an alternative dialog box option if you want to show a message to a user who runs your application on an earlier version of Windows. You can use the static method [CTaskDialog::IsSupported](../mfc/reference/ctaskdialog-class.md#ctaskdialog__issupported) to determine at run time whether a user's computer can display a `CTaskDialog`. In addition, the `CTaskDialog` is only available when your application is built with the Unicode library.  \n  \n The `CTaskDialog` supports several optional elements to gather and display information. For example, a `CTaskDialog` can display command links, customized buttons, customized icons, and a footer. The `CTaskDialog` also has several methods that enable you to query the state of the task dialog box to determine what optional elements the user selected.  \n  \n## Prerequisites  \n You need the following components to complete this walkthrough:  \n  \n- [!INCLUDE[vs_dev10_long](../build/includes/vs_dev10_long_md.md)]  \n  \n- [!INCLUDE[wiprlhext](../c-runtime-library/reference/includes/wiprlhext_md.md)]  \n  \n## Replacing a Windows Message Box with a CTaskDialog  \n The following procedure demonstrates the most basic use of the `CTaskDialog`, which is to replace the Windows message box. This example also changes the icon associated with the task dialog box. Changing the icon makes the `CTaskDialog` appear identical to the Windows message box.  \n  \n#### To Replace a Windows Message Box with a CTaskDialog  \n  \n1.  Create a new MFC Application project with the default settings. Call it `MyProject`.  \n  \n2.  Use the **Solution Explorer** to open the file MyProject.cpp.  \n  \n3.  Add `#include \"afxtaskdialog.h\"` after the list of includes.  \n  \n4.  Find the method `CMyProjectApp::InitInstance`. Insert the following lines of code before the `return TRUE;` statement. This code creates the strings that we use in either the Windows message box or in the `CTaskDialog`.  \n  \n ```  \n    CString message(\"My message to the user\");\n\n    CString dialogTitle(\"My Task Dialog title\");\n\n    CString emptyString;  \n ```  \n  \n5.  Add the following code after the code from step 4. This code guarantees that the user's computer supports the `CTaskDialog`. If the dialog is not supported, the application displays a Windows message box instead.  \n  \n ```  \n    if (CTaskDialog::IsSupported())  \n {  \n \n }  \n    else \n {  \n    AfxMessageBox(message);\n\n }  \n ```  \n  \n6.  Insert the following code between the brackets after the `if` statement from step 5. This code creates the `CTaskDialog`.  \n  \n ```  \n    CTaskDialog taskDialog(message,\n    emptyString,\n    dialogTitle,\n    TDCBF_OK_BUTTON);\n\n ```  \n  \n7.  On the next line, add the following code. This code sets the warning icon.  \n  \n ```  \n    taskDialog.SetMainIcon(TD_WARNING_ICON);\n\n ```  \n  \n8.  On the next line, add the following code. This code displays the task dialog box.  \n  \n ```  \n    taskDialog.DoModal();\n\n ```  \n  \n You can omit step 7 if you do not want the `CTaskDialog` to display the same icon as the Windows message box. If you omit that step, the `CTaskDialog` has no icon when the application displays it.  \n  \n Compile and run the application. The application displays the task dialog box after it starts.  \n  \n## Adding Functionality to the CTaskDialog  \n The following procedure shows you how to add functionality to the `CTaskDialog` that you created in the previous procedure. The example code shows you how to execute specific instructions based on the user's selections.  \n  \n#### To Add Functionality to the CTaskDialog  \n  \n1.  Navigate to the **Resource View**. If you cannot see the **Resource View**, you can open it from the **View** menu.  \n  \n2.  Expand the **Resource View** until you can select the **String Table** folder. Expand it and double-click the **String Table** entry.  \n  \n3.  Scroll to the bottom of the string table and add a new entry. Change the ID to `TEMP_LINE1`. Set the caption to **Command Line 1**.  \n  \n4.  Add another new entry. Change the ID to `TEMP_LINE2`. Set the caption to **Command Line 2**.  \n  \n5.  Navigate back to MyProject.cpp.  \n  \n6.  After `CString emptyString;`, add the following code:  \n  \n ```  \n    CString expandedLabel(\"Hide extra information\");\n\n    CString collapsedLabel(\"Show extra information\");\n\n    CString expansionInfo(\"This is the additional information to the user,\\nextended over two lines.\");\n\n ```  \n  \n7.  Find the `taskDialog.DoModal()` statement and replace that statement with the following code. This code updates the task dialog box and adds new controls:  \n  \n ```  \n    taskDialog.SetMainInstruction(L\"Warning\");\n\n taskDialog.SetCommonButtons(TDCBF_YES_BUTTON | TDCBF_NO_BUTTON | TDCBF_CANCEL_BUTTON);\n\n    taskDialog.LoadCommandControls(TEMP_LINE1,\n    TEMP_LINE2);\n\n    taskDialog.SetExpansionArea(expansionInfo,\n    collapsedLabel,\n    expandedLabel);\n\n    taskDialog.SetFooterText(L\"This is the a small footnote to the user\");\n\n    taskDialog.SetVerificationCheckboxText(L\"Remember your selection\");\n\n ```  \n  \n8.  Add the following line of code that displays the task dialog box to the user and retrieves the user's selection:  \n  \n ```  \n    INT_PTR result = taskDialog.DoModal();\n\n ```  \n  \n9. Insert the following code after the call to `taskDialog.DoModal()`. This section of code processes the user's input:  \n  \n ```  \n    if (taskDialog.GetVerificationCheckboxState())  \n { *// PROCESS IF the user selects the verification checkbox   \n }  \n \n    switch (result)  \n {  \n    case TEMP_LINE1: *// PROCESS IF the first command line  \n    break; \n    case TEMP_LINE2: *// PROCESS IF the second command line  \n    break; \n    case IDYES: *// PROCESS IF the user clicks yes  \n    break; \n    case IDNO: *// PROCESS IF the user clicks no  \n    break; \n    case IDCANCEL: *// PROCESS IF the user clicks cancel  \n    break; \n    default: *// This case should not be hit because closing the dialog box results in IDCANCEL  \n    break; \n }  \n ```  \n  \n In the code in step 9, replace the comments that start with PROCESS IF with the code that you want to execute under the specified conditions.  \n  \n Compile and run the application. The application displays the task dialog box that uses the new controls and additional information.  \n  \n## Displaying a CTaskDialog Without Creating a CTaskDialog Object  \n The following procedure shows you how to display a `CTaskDialog` without first creating a `CTaskDialog` object. This example continues the previous procedures.  \n  \n#### To Display a CTaskDialog Without Creating a CTaskDialog Object  \n  \n1.  Open the MyProject.cpp file if it is not already open.  \n  \n2.  Navigate to the closing bracket for the `if (CTaskDialog::IsSupported())` statement.  \n  \n3.  Insert the following code immediately before the closing bracket of the `if` statement (before the `else` block):  \n  \n ```  \n    HRESULT result2 = CTaskDialog::ShowDialog(L\"My error message\",\n    L\"Error\",\n    L\"New Title\",\n    TEMP_LINE1,\n    TEMP_LINE2);\n\n ```  \n  \n Compile and run the application. The application displays two task dialog boxes. The first dialog box is from the To Add Functionality to the CTaskDialog procedure; the second dialog box is from the last procedure.  \n  \n These examples do not demonstrate all the available options for a `CTaskDialog`, but should help you get started. See [CTaskDialog Class](../mfc/reference/ctaskdialog-class.md) for a full description of the class.  \n  \n## See Also  \n [Dialog Boxes](../mfc/dialog-boxes.md)   \n [CTaskDialog Class](../mfc/reference/ctaskdialog-class.md)   \n [CTaskDialog::CTaskDialog](../mfc/reference/ctaskdialog-class.md#ctaskdialog__ctaskdialog)\n\n"}