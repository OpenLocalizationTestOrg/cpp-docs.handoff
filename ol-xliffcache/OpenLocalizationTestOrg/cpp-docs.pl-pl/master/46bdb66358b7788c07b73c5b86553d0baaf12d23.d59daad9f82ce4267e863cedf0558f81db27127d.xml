{"nodes":[{"pos":[12,87],"content":"_strlwr, _wcslwr, _mbslwr, _strlwr_l, _wcslwr_l, _mbslwr_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_strlwr, _wcslwr, _mbslwr, _strlwr_l, _wcslwr_l, _mbslwr_l | Microsoft Docs","pos":[0,75]}]},{"content":"_strlwr, _wcslwr, _mbslwr, _strlwr_l, _wcslwr_l, _mbslwr_l","pos":[1688,1746]},{"content":"Converts a string to lowercase.","pos":[1747,1778]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>_strlwr_s, _strlwr_s_l, _mbslwr_s, _mbslwr_s_l, _wcslwr_s, _wcslwr_s_l<ept id=\"p1\">](../../c-runtime-library/reference/strlwr-s-strlwr-s-l-mbslwr-s-mbslwr-s-l-wcslwr-s-wcslwr-s-l.md)</ept>.","pos":[1779,2009],"source":" More secure versions of these functions are available; see [_strlwr_s, _strlwr_s_l, _mbslwr_s, _mbslwr_s_l, _wcslwr_s, _wcslwr_s_l](../../c-runtime-library/reference/strlwr-s-strlwr-s-l-mbslwr-s-mbslwr-s-l-wcslwr-s-wcslwr-s-l.md)."},{"pos":[2017,2254],"content":"[!IMPORTANT]\n `_mbslwr` and `_mbslwr_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" and `_mbslwr_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[23,235],"nodes":[{"content":"and <ph id=\"ph1\">`_mbslwr_l`</ph> cannot be used in applications that execute in the Windows Runtime.","pos":[1,84],"source":" and `_mbslwr_l` cannot be used in applications that execute in the Windows Runtime."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[85,212],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[2263,2269]},{"content":"Parameters","pos":[3263,3273]},{"content":"Null-terminated string to convert to lowercase.","pos":[3286,3333]},{"content":"The locale to use.","pos":[3352,3370]},{"content":"Return Value","pos":[3379,3391]},{"content":"Each of these functions returns a pointer to the converted string.","pos":[3395,3461]},{"content":"Because the modification is done in place, the pointer returned is the same as the pointer passed as the input argument.","pos":[3462,3582]},{"content":"No return value is reserved to indicate an error.","pos":[3583,3632]},{"content":"Remarks","pos":[3641,3648]},{"content":"The <ph id=\"ph1\">`_strlwr`</ph> function converts any uppercase letters in <ph id=\"ph2\">`str`</ph> to lowercase as determined by the <ph id=\"ph3\">`LC_CTYPE`</ph> category setting of the locale.","pos":[3652,3791],"source":"The `_strlwr` function converts any uppercase letters in `str` to lowercase as determined by the `LC_CTYPE` category setting of the locale."},{"content":"Other characters are not affected.","pos":[3792,3826]},{"content":"For more information on <ph id=\"ph1\">`LC_CTYPE`</ph>, see <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept>.","pos":[3827,3938],"source":" For more information on `LC_CTYPE`, see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md)."},{"content":"The versions of these functions without the<ph id=\"ph1\">`_l`</ph> suffix use the current locale for their locale-dependent behavior; the versions with the <ph id=\"ph2\">`_l`</ph> suffix are identical except that they use the locale passed in instead.","pos":[3939,4152],"source":" The versions of these functions without the`_l` suffix use the current locale for their locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale passed in instead."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[4153,4223],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"The <ph id=\"ph1\">`_wcslwr`</ph> and <ph id=\"ph2\">`_mbslwr`</ph> functions are wide-character and multibyte-character versions of <ph id=\"ph3\">`_strlwr`</ph>.","pos":[4230,4333],"source":"The `_wcslwr` and `_mbslwr` functions are wide-character and multibyte-character versions of `_strlwr`."},{"content":"The argument and return value of <ph id=\"ph1\">`_wcslwr`</ph> are wide-character strings; those of <ph id=\"ph2\">`_mbslwr`</ph> are multibyte-character strings.","pos":[4334,4456],"source":" The argument and return value of `_wcslwr` are wide-character strings; those of `_mbslwr` are multibyte-character strings."},{"content":"These three functions behave identically otherwise.","pos":[4457,4508]},{"content":"If <ph id=\"ph1\">`str`</ph> is a <ph id=\"ph2\">`NULL`</ph> pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept> .","pos":[4515,4676],"source":"If `str` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) ."},{"content":"If execution is allowed to continue, these functions return the original string and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[4677,4785],"source":" If execution is allowed to continue, these functions return the original string and set `errno` to `EINVAL`."},{"content":"In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions.","pos":[4792,4902]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4903,5011],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Generic-Text Routine Mappings","pos":[5021,5050]},{"content":"TCHAR.H routine","pos":[5057,5072]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[5073,5101],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[5102,5115]},{"content":"_UNICODE defined","pos":[5116,5132]},{"content":"Requirements","pos":[5346,5358]},{"content":"Routine","pos":[5365,5372]},{"content":"Required header","pos":[5373,5388]},{"pos":[5442,5443],"content":","},{"content":"string.h&gt;","pos":[5458,5467],"source":"string.h>"},{"pos":[5481,5482],"content":","},{"content":"string.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[5497,5520],"source":"string.h> or \\<wchar.h>"},{"pos":[5534,5535],"content":","},{"content":"mbstring.h&gt;","pos":[5550,5561],"source":"mbstring.h>"},{"pos":[5569,5673],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[5682,5689]},{"content":".NET Framework Equivalent","pos":[6601,6626]},{"content":"System::String::ToLower","pos":[6631,6654]},{"content":"See Also","pos":[6733,6741]},{"content":"String Manipulation","pos":[6746,6765]},{"content":"Locale","pos":[6824,6830]},{"content":"_strupr, _strupr_l, _mbsupr, _mbsupr_l, _wcsupr_l, _wcsupr","pos":[6872,6930]}],"content":"---\ntitle: \"_strlwr, _wcslwr, _mbslwr, _strlwr_l, _wcslwr_l, _mbslwr_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_strlwr_l\"\n  - \"_strlwr\"\n  - \"_wcslwr_l\"\n  - \"_mbslwr_l\"\n  - \"_wcslwr\"\n  - \"_mbslwr\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-multibyte-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_strlwr\"\n  - \"wcslwr_l\"\n  - \"_ftcslwr\"\n  - \"mbslwr_l\"\n  - \"_mbslwr\"\n  - \"_wcslwr\"\n  - \"strlwr_l\"\n  - \"_tcslwr\"\n  - \"mbslwr\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"tcslwr function\"\n  - \"_strlwr function\"\n  - \"converting case\"\n  - \"string conversion [C++], case\"\n  - \"mbslwr function\"\n  - \"_strlwr_l function\"\n  - \"strlwr_l function\"\n  - \"_wcslwr function\"\n  - \"ftcslwr function\"\n  - \"strings [C++], case\"\n  - \"_tcslwr_l function\"\n  - \"_wcslwr_l function\"\n  - \"wcslwr_l function\"\n  - \"mbslwr_l function\"\n  - \"tcslwr_l function\"\n  - \"_tcslwr function\"\n  - \"converting case, CRT functions\"\n  - \"_ftcslwr function\"\n  - \"_mbslwr function\"\n  - \"case, converting\"\n  - \"strings [C++], converting case\"\n  - \"_mbslwr_l function\"\nms.assetid: d279181d-2e7d-401f-ab44-6e7c2786a046\ncaps.latest.revision: 36\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _strlwr, _wcslwr, _mbslwr, _strlwr_l, _wcslwr_l, _mbslwr_l\nConverts a string to lowercase. More secure versions of these functions are available; see [_strlwr_s, _strlwr_s_l, _mbslwr_s, _mbslwr_s_l, _wcslwr_s, _wcslwr_s_l](../../c-runtime-library/reference/strlwr-s-strlwr-s-l-mbslwr-s-mbslwr-s-l-wcslwr-s-wcslwr-s-l.md).  \n  \n> [!IMPORTANT]\n>  `_mbslwr` and `_mbslwr_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nchar *_strlwr(  \n   char * str  \n);  \nwchar_t *_wcslwr(  \n   wchar_t * str  \n);  \nunsigned char *_mbslwr(  \n   unsigned char * str  \n);  \nchar *_strlwr_l(  \n   char * str,  \n   _locale_t locale  \n);  \nwchar_t *_wcslwr_l(  \n   wchar_t * str,  \n   _locale_t locale  \n);  \nunsigned char *_mbslwr_l(  \n   unsigned char * str,  \n   _locale_t locale   \n);  \ntemplate <size_t size>  \nchar *_strlwr(  \n   char (&str)[size]  \n); // C++ only  \ntemplate <size_t size>  \nwchar_t *_wcslwr(  \n   wchar_t (&str)[size]  \n); // C++ only  \ntemplate <size_t size>  \nunsigned char *_mbslwr(  \n   unsigned char (&str)[size]  \n); // C++ only  \ntemplate <size_t size>  \nchar *_strlwr_l(  \n   char (&str)[size],  \n   _locale_t locale  \n); // C++ only  \ntemplate <size_t size>  \nwchar_t *_wcslwr_l(  \n   wchar_t (&str)[size],  \n   _locale_t locale  \n); // C++ only  \ntemplate <size_t size>  \nunsigned char *_mbslwr_l(  \n   unsigned char (&str)[size],  \n   _locale_t locale   \n); // C++ only  \n```  \n  \n#### Parameters  \n `str`  \n Null-terminated string to convert to lowercase.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n Each of these functions returns a pointer to the converted string. Because the modification is done in place, the pointer returned is the same as the pointer passed as the input argument. No return value is reserved to indicate an error.  \n  \n## Remarks  \n The `_strlwr` function converts any uppercase letters in `str` to lowercase as determined by the `LC_CTYPE` category setting of the locale. Other characters are not affected. For more information on `LC_CTYPE`, see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md). The versions of these functions without the`_l` suffix use the current locale for their locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale passed in instead. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n The `_wcslwr` and `_mbslwr` functions are wide-character and multibyte-character versions of `_strlwr`. The argument and return value of `_wcslwr` are wide-character strings; those of `_mbslwr` are multibyte-character strings. These three functions behave identically otherwise.  \n  \n If `str` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) . If execution is allowed to continue, these functions return the original string and set `errno` to `EINVAL`.  \n  \n In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tcslwr`|`_strlwr`|`_mbslwr`|`_wcslwr`|  \n|`_tcslwr_l`|`_strlwr_l`|`_mbslwr_l`|`_wcslwr_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_strlwr`, `_strlwr_l`|\\<string.h>|  \n|`_wcslwr`, `_wcslwr_l`|\\<string.h> or \\<wchar.h>|  \n|`_mbslwr`, `_mbslwr_l`|\\<mbstring.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_strlwr.c  \n// compile with: /W3  \n// This program uses _strlwr and _strupr to create  \n// uppercase and lowercase copies of a mixed-case string.  \n#include <string.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char string[100] = \"The String to End All Strings!\";  \n   char * copy1 = _strdup( string ); // make two copies  \n   char * copy2 = _strdup( string );  \n  \n   _strlwr( copy1 ); // C4996  \n   // Note: _strlwr is deprecated; consider using _strlwr_s instead  \n   _strupr( copy2 ); // C4996  \n   // Note: _strupr is deprecated; consider using _strupr_s instead  \n  \n   printf( \"Mixed: %s\\n\", string );  \n   printf( \"Lower: %s\\n\", copy1 );  \n   printf( \"Upper: %s\\n\", copy2 );  \n  \n   free( copy1 );  \n   free( copy2 );  \n}  \n```  \n  \n```Output  \nMixed: The String to End All Strings!  \nLower: the string to end all strings!  \nUpper: THE STRING TO END ALL STRINGS!  \n```  \n  \n## .NET Framework Equivalent  \n [System::String::ToLower](https://msdn.microsoft.com/en-us/library/system.string.tolower.aspx)  \n  \n## See Also  \n [String Manipulation](../../c-runtime-library/string-manipulation-crt.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [_strupr, _strupr_l, _mbsupr, _mbsupr_l, _wcsupr_l, _wcsupr](../../c-runtime-library/reference/strupr-strupr-l-mbsupr-mbsupr-l-wcsupr-l-wcsupr.md)"}