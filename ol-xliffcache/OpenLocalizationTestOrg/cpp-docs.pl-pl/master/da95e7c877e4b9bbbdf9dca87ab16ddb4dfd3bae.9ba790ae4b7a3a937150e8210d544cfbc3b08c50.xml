{"nodes":[{"pos":[12,46],"content":"vfscanf, vfwscanf | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vfscanf, vfwscanf | Microsoft Docs","pos":[0,34]}]},{"pos":[877,894],"content":"vfscanf, vfwscanf","linkify":"vfscanf, vfwscanf","nodes":[{"content":"vfscanf, vfwscanf","pos":[0,17]}]},{"content":"Reads formatted data from a stream.","pos":[895,930]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>vfscanf_s, vfwscanf_s<ept id=\"p1\">](../../c-runtime-library/reference/vfscanf-s-vfwscanf-s.md)</ept>.","pos":[931,1073],"source":" More secure versions of these functions are available; see [vfscanf_s, vfwscanf_s](../../c-runtime-library/reference/vfscanf-s-vfwscanf-s.md)."},{"pos":[1082,1088],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1290,1300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1316,1344],"source":" Pointer to `FILE` structure."},{"content":"Format-control string.","pos":[1363,1385]},{"content":"Variable argument list.","pos":[1405,1428]},{"pos":[1437,1449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Each of these functions returns the number of fields that are successfully converted and assigned; the return value does not include fields that are read but not assigned.","pos":[1453,1624]},{"content":"A return value of 0 indicates that no fields were assigned.","pos":[1625,1684]},{"content":"If an error occurs, or if the end of the file stream is reached before the first conversion, the return value is <ph id=\"ph1\">`EOF`</ph> for <ph id=\"ph2\">`vfscanf`</ph> and <ph id=\"ph3\">`vfwscanf`</ph>.","pos":[1685,1833],"source":" If an error occurs, or if the end of the file stream is reached before the first conversion, the return value is `EOF` for `vfscanf` and `vfwscanf`."},{"content":"These functions validate their parameters.","pos":[1840,1882]},{"content":"If <ph id=\"ph1\">`stream`</ph> or <ph id=\"ph2\">`format`</ph> is a null pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1883,2056],"source":" If `stream` or `format` is a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return <ph id=\"ph1\">`EOF`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2057,2151],"source":" If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`."},{"pos":[2160,2167],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`vfscanf`</ph> function reads data from the current position of <ph id=\"ph2\">`stream`</ph> into the locations that are given by the <ph id=\"ph3\">`arglist`</ph> argument list.","pos":[2171,2308],"source":"The `vfscanf` function reads data from the current position of `stream` into the locations that are given by the `arglist` argument list."},{"content":"Each argument in the list must be a pointer to a variable of a type that corresponds to a type specifier in <ph id=\"ph1\">`format`</ph>.","pos":[2309,2426],"source":" Each argument in the list must be a pointer to a variable of a type that corresponds to a type specifier in `format`."},{"content":"<ph id=\"ph1\">`format`</ph> controls the interpretation of the input fields and has the same form and function as the <ph id=\"ph2\">`format`</ph> argument for <ph id=\"ph3\">`scanf`</ph>; see <bpt id=\"p1\">[</bpt>scanf<ept id=\"p1\">](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept> for a description of <ph id=\"ph4\">`format`</ph>.","pos":[2427,2667],"source":"`format` controls the interpretation of the input fields and has the same form and function as the `format` argument for `scanf`; see [scanf](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md) for a description of `format`."},{"content":"<ph id=\"ph1\">`vfwscanf`</ph> is a wide-character version of <ph id=\"ph2\">`vfscanf`</ph>; the format argument to <ph id=\"ph3\">`vfwscanf`</ph> is a wide-character string.","pos":[2674,2788],"source":"`vfwscanf` is a wide-character version of `vfscanf`; the format argument to `vfwscanf` is a wide-character string."},{"content":"These functions behave identically identically if the stream is opened in ANSI mode.","pos":[2789,2873]},{"content":"<ph id=\"ph1\">`vfscanf`</ph> doesn't support input from a UNICODE stream.","pos":[2874,2928],"source":"`vfscanf` doesn't support input from a UNICODE stream."},{"pos":[2938,2967],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[2974,2989]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[2990,3018],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3019,3032]},{"content":"_UNICODE defined","pos":[3033,3049]},{"pos":[3212,3379],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specification Fields: scanf and wscanf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)</ept>.","source":"For more information, see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)."},{"pos":[3388,3400],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[3407,3415]},{"content":"Required header","pos":[3416,3431]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[3487,3497],"source":"\\<stdio.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[3513,3537],"source":"\\<stdio.h> or \\<wchar.h>"},{"pos":[3545,3649],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[3658,3665],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5093,5118],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"<bpt id=\"p1\">[</bpt>System::IO::StreamReader::ReadLine<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline.aspx)</ept>.","pos":[5122,5238],"source":"[System::IO::StreamReader::ReadLine](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline.aspx)."},{"content":"See also <ph id=\"ph1\">`Parse`</ph> methods, such as <bpt id=\"p1\">[</bpt>System::Double::Parse<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept>.","pos":[5239,5364],"source":" See also `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)."},{"pos":[5373,5381],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5385,5437],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_cscanf, _cscanf_l, _cwscanf, _cwscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/cscanf-cscanf-l-cwscanf-cwscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5440,5556],"source":" [_cscanf, _cscanf_l, _cwscanf, _cwscanf_l](../../c-runtime-library/reference/cscanf-cscanf-l-cwscanf-cwscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fprintf, _fprintf_l, fwprintf, _fwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5559,5681],"source":" [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>scanf, _scanf_l, wscanf, _wscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5684,5790],"source":" [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sscanf, _sscanf_l, swscanf, _swscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5793,5907],"source":" [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/fscanf-s-fscanf-s-l-fwscanf-s-fwscanf-s-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5910,6040],"source":" [fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l](../../c-runtime-library/reference/fscanf-s-fscanf-s-l-fwscanf-s-fwscanf-s-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>vfscanf_s, vfwscanf_s<ept id=\"p1\">](../../c-runtime-library/reference/vfscanf-s-vfwscanf-s.md)</ept>","pos":[6043,6126],"source":" [vfscanf_s, vfwscanf_s](../../c-runtime-library/reference/vfscanf-s-vfwscanf-s.md)"}],"content":"---\ntitle: \"vfscanf, vfwscanf | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"vfwscanf\"\n  - \"vfscanf\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"vfwscanf\"\n  - \"_vftscanf\"\n  - \"vfscanf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nms.assetid: c06450ef-03f1-4d24-a8ac-d2dd98847918\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vfscanf, vfwscanf\nReads formatted data from a stream. More secure versions of these functions are available; see [vfscanf_s, vfwscanf_s](../../c-runtime-library/reference/vfscanf-s-vfwscanf-s.md).  \n  \n## Syntax  \n  \n```  \nint vfscanf(   \n   FILE *stream,  \n   const char *format,  \n   va_list argptr   \n);  \nint vfwscanf(   \n   FILE *stream,  \n   const wchar_t *format,  \n   va_list argptr   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n `format`  \n Format-control string.  \n  \n `arglist`  \n Variable argument list.  \n  \n## Return Value  \n Each of these functions returns the number of fields that are successfully converted and assigned; the return value does not include fields that are read but not assigned. A return value of 0 indicates that no fields were assigned. If an error occurs, or if the end of the file stream is reached before the first conversion, the return value is `EOF` for `vfscanf` and `vfwscanf`.  \n  \n These functions validate their parameters. If `stream` or `format` is a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`.  \n  \n## Remarks  \n The `vfscanf` function reads data from the current position of `stream` into the locations that are given by the `arglist` argument list. Each argument in the list must be a pointer to a variable of a type that corresponds to a type specifier in `format`. `format` controls the interpretation of the input fields and has the same form and function as the `format` argument for `scanf`; see [scanf](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md) for a description of `format`.  \n  \n `vfwscanf` is a wide-character version of `vfscanf`; the format argument to `vfwscanf` is a wide-character string. These functions behave identically identically if the stream is opened in ANSI mode. `vfscanf` doesn't support input from a UNICODE stream.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vftscanf`|`vfscanf`|`vfscanf`|`vfwscanf`|  \n  \n For more information, see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md).  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`vfscanf`|\\<stdio.h>|  \n|`vfwscanf`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_vfscanf.c  \n// compile with: /W3  \n// This program writes formatted  \n// data to a file. It then uses vfscanf to  \n// read the various data back from the file.  \n  \n#include <stdio.h>  \n#include <stdarg.h>  \n  \nFILE *stream;  \n  \nint call_vfscanf(FILE * istream, char * format, ...)  \n{  \n    int result;  \n    va_list arglist;  \n    va_start(arglist, format);  \n    result = vfscanf(istream, format, arglist);  \n    va_end(arglist);  \n    return result;  \n}  \n  \nint main(void)  \n{  \n    long l;  \n    float fp;  \n    char s[81];  \n    char c;  \n  \n    if (fopen_s(&stream, \"vfscanf.out\", \"w+\") != 0)  \n    {  \n        printf(\"The file vfscanf.out was not opened\\n\");  \n    }  \n    else  \n    {  \n        fprintf(stream, \"%s %ld %f%c\", \"a-string\",  \n            65000, 3.14159, 'x');  \n        // Security caution!  \n        // Beware loading data from a file without confirming its size,  \n        // as it may lead to a buffer overrun situation.  \n  \n        // Set pointer to beginning of file:  \n        fseek(stream, 0L, SEEK_SET);  \n  \n        // Read data back from file:  \n        call_vfscanf(stream, \"%s %ld %f%c\", s, &l, &fp, &c);  \n  \n        // Output data read:   \n        printf(\"%s\\n\", s);  \n        printf(\"%ld\\n\", l);  \n        printf(\"%f\\n\", fp);  \n        printf(\"%c\\n\", c);  \n  \n        fclose(stream);  \n    }  \n}  \n  \n```  \n  \n```Output  \na-string  \n65000  \n3.141590  \nx  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::StreamReader::ReadLine](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline.aspx). See also `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_cscanf, _cscanf_l, _cwscanf, _cwscanf_l](../../c-runtime-library/reference/cscanf-cscanf-l-cwscanf-cwscanf-l.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)   \n [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)   \n [fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l](../../c-runtime-library/reference/fscanf-s-fscanf-s-l-fwscanf-s-fwscanf-s-l.md)   \n [vfscanf_s, vfwscanf_s](../../c-runtime-library/reference/vfscanf-s-vfwscanf-s.md)"}