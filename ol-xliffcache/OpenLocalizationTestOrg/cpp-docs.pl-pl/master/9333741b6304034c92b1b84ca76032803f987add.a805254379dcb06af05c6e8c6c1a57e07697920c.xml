{"nodes":[{"pos":[12,61],"content":"General Window Creation Sequence | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"General Window Creation Sequence | Microsoft Docs","pos":[0,49]}]},{"content":"General Window Creation Sequence","pos":[688,720]},{"pos":[721,904],"content":"When you create a window of your own, such as a child window, the framework uses much the same process as that described in <bpt id=\"p1\">[</bpt>Document/View Creation<ept id=\"p1\">](../mfc/document-view-creation.md)</ept>.","source":"When you create a window of your own, such as a child window, the framework uses much the same process as that described in [Document/View Creation](../mfc/document-view-creation.md)."},{"content":"All the window classes provided by MFC employ <bpt id=\"p1\">[</bpt>two-stage construction<ept id=\"p1\">](../mfc/one-stage-and-two-stage-construction-of-objects.md)</ept>.","pos":[911,1041],"source":"All the window classes provided by MFC employ [two-stage construction](../mfc/one-stage-and-two-stage-construction-of-objects.md)."},{"content":"That is, during an invocation of the C++ <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> operator, the constructor allocates and initializes a C++ object but does not create a corresponding Windows window.","pos":[1042,1207],"source":" That is, during an invocation of the C++ **new** operator, the constructor allocates and initializes a C++ object but does not create a corresponding Windows window."},{"content":"That is done afterward by calling the <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](../mfc/reference/cwnd-class.md#cwnd__create)</ept> member function of the window object.","pos":[1208,1337],"source":" That is done afterward by calling the [Create](../mfc/reference/cwnd-class.md#cwnd__create) member function of the window object."},{"content":"The <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> member function makes the Windows window and stores its <ph id=\"ph1\">`HWND`</ph> in the C++ object's public data member <bpt id=\"p2\">[</bpt>m_hWnd<ept id=\"p2\">](../mfc/reference/cwnd-class.md#cwnd__m_hwnd)</ept>.","pos":[1344,1515],"source":"The **Create** member function makes the Windows window and stores its `HWND` in the C++ object's public data member [m_hWnd](../mfc/reference/cwnd-class.md#cwnd__m_hwnd)."},{"content":"<bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> gives complete flexibility over the creation parameters.","pos":[1516,1583],"source":"**Create** gives complete flexibility over the creation parameters."},{"content":"Before calling <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, you may want to register a window class with the global function <bpt id=\"p2\">[</bpt>AfxRegisterWndClass<ept id=\"p2\">](../mfc/reference/application-information-and-management.md#afxregisterwndclass)</ept> in order to set the icon and class styles for the frame.","pos":[1584,1834],"source":" Before calling **Create**, you may want to register a window class with the global function [AfxRegisterWndClass](../mfc/reference/application-information-and-management.md#afxregisterwndclass) in order to set the icon and class styles for the frame."},{"content":"For frame windows, you can use the <bpt id=\"p1\">[</bpt>LoadFrame<ept id=\"p1\">](../mfc/reference/cframewnd-class.md#cframewnd__loadframe)</ept> member function instead of <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>.","pos":[1841,1984],"source":"For frame windows, you can use the [LoadFrame](../mfc/reference/cframewnd-class.md#cframewnd__loadframe) member function instead of **Create**."},{"content":"makes the Windows window using fewer parameters.","pos":[1997,2045]},{"content":"It gets many default values from resources, including the frame's caption, icon, accelerator table, and menu.","pos":[2046,2155]},{"pos":[2163,2317],"content":"[!NOTE]\n Your icon, accelerator table, and menu resources must have a common resource ID, such as **IDR_MAINFRAME**, for them to be loaded by LoadFrame.","leadings":["","> "],"nodes":[{"content":"Your icon, accelerator table, and menu resources must have a common resource ID, such as <bpt id=\"p1\">**</bpt>IDR_MAINFRAME<ept id=\"p1\">**</ept>, for them to be loaded by LoadFrame.","pos":[9,152],"source":" Your icon, accelerator table, and menu resources must have a common resource ID, such as **IDR_MAINFRAME**, for them to be loaded by LoadFrame."}]},{"content":"What do you want to know more about","pos":[2326,2361]},{"content":"Window objects","pos":[2372,2386]},{"content":"Registering window \"classes\"","pos":[2424,2452]},{"content":"Destroying window objects","pos":[2502,2527]},{"content":"Creating document frame windows","pos":[2576,2607]},{"content":"See Also","pos":[2660,2668]},{"content":"Creating Windows","pos":[2673,2689]}],"content":"---\ntitle: \"General Window Creation Sequence | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"sequence [C++], window creation\"\n  - \"frame windows [C++], creating\"\n  - \"windows [C++], creating\"\n  - \"sequence [C++]\"\nms.assetid: 9cd8c7ea-5e24-429e-b6d9-d7b6041d8ba6\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# General Window Creation Sequence\nWhen you create a window of your own, such as a child window, the framework uses much the same process as that described in [Document/View Creation](../mfc/document-view-creation.md).  \n  \n All the window classes provided by MFC employ [two-stage construction](../mfc/one-stage-and-two-stage-construction-of-objects.md). That is, during an invocation of the C++ **new** operator, the constructor allocates and initializes a C++ object but does not create a corresponding Windows window. That is done afterward by calling the [Create](../mfc/reference/cwnd-class.md#cwnd__create) member function of the window object.  \n  \n The **Create** member function makes the Windows window and stores its `HWND` in the C++ object's public data member [m_hWnd](../mfc/reference/cwnd-class.md#cwnd__m_hwnd). **Create** gives complete flexibility over the creation parameters. Before calling **Create**, you may want to register a window class with the global function [AfxRegisterWndClass](../mfc/reference/application-information-and-management.md#afxregisterwndclass) in order to set the icon and class styles for the frame.  \n  \n For frame windows, you can use the [LoadFrame](../mfc/reference/cframewnd-class.md#cframewnd__loadframe) member function instead of **Create**. `LoadFrame` makes the Windows window using fewer parameters. It gets many default values from resources, including the frame's caption, icon, accelerator table, and menu.  \n  \n> [!NOTE]\n>  Your icon, accelerator table, and menu resources must have a common resource ID, such as **IDR_MAINFRAME**, for them to be loaded by LoadFrame.  \n  \n## What do you want to know more about  \n  \n-   [Window objects](../mfc/window-objects.md)  \n  \n-   [Registering window \"classes\"](../mfc/registering-window-classes.md)  \n  \n-   [Destroying window objects](../mfc/destroying-window-objects.md)  \n  \n-   [Creating document frame windows](../mfc/creating-document-frame-windows.md)  \n  \n## See Also  \n [Creating Windows](../mfc/creating-windows.md)\n\n"}