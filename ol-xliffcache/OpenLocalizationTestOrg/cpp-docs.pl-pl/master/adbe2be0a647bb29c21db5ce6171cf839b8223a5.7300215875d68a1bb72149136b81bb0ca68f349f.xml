{"nodes":[{"pos":[12,48],"content":"Introduction to ATL | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Introduction to ATL | Microsoft Docs","pos":[0,36]}]},{"content":"Introduction to ATL","pos":[600,619]},{"content":"ATL is the Active Template Library, a set of template-based C++ classes with which you can easily create small, fast Component Object Model (COM) objects.","pos":[620,774]},{"content":"It has special support for key COM features including: stock implementations of <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms680509)</ept>, <bpt id=\"p2\">[</bpt>IClassFactory<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept>, <bpt id=\"p3\">[</bpt>IClassFactory2<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms692720)</ept>, and <ph id=\"ph1\">`IDispatch`</ph>; dual interfaces; standard COM enumerator interfaces; connection points; tear-off interfaces; and ActiveX controls.","pos":[775,1213],"source":" It has special support for key COM features including: stock implementations of [IUnknown](http://msdn.microsoft.com/library/windows/desktop/ms680509), [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364), [IClassFactory2](http://msdn.microsoft.com/library/windows/desktop/ms692720), and `IDispatch`; dual interfaces; standard COM enumerator interfaces; connection points; tear-off interfaces; and ActiveX controls."},{"content":"ATL code can be used to create single-threaded objects, apartment-model objects, free-threaded model objects, or both free-threaded and apartment-model objects.","pos":[1220,1380]},{"content":"Topics covered in this section include:","pos":[1387,1426]},{"pos":[1436,1533],"content":"How a <bpt id=\"p1\">[</bpt>template library<ept id=\"p1\">](../atl/using-a-template-library.md)</ept> differs from a standard C++ library.","source":"How a [template library](../atl/using-a-template-library.md) differs from a standard C++ library."},{"pos":[1543,1605],"content":"What you <bpt id=\"p1\">[</bpt>can and cannot do with ATL<ept id=\"p1\">](../atl/scope-of-atl.md)</ept>.","source":"What you [can and cannot do with ATL](../atl/scope-of-atl.md)."},{"pos":[1615,1726],"content":"<bpt id=\"p1\">[</bpt>Recommendations for choosing between ATL and MFC<ept id=\"p1\">](../atl/recommendations-for-choosing-between-atl-and-mfc.md)</ept>.","source":"[Recommendations for choosing between ATL and MFC](../atl/recommendations-for-choosing-between-atl-and-mfc.md)."},{"content":"See Also","pos":[1735,1743]},{"content":"Introduction to COM and ATL","pos":[1748,1775]}],"content":"---\ntitle: \"Introduction to ATL | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"index-page \"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"COM objects, creating in ATL\"\n  - \"ATL\"\nms.assetid: 77f565e8-c4ec-4a80-af4b-7278fcfe5c98\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Introduction to ATL\nATL is the Active Template Library, a set of template-based C++ classes with which you can easily create small, fast Component Object Model (COM) objects. It has special support for key COM features including: stock implementations of [IUnknown](http://msdn.microsoft.com/library/windows/desktop/ms680509), [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364), [IClassFactory2](http://msdn.microsoft.com/library/windows/desktop/ms692720), and `IDispatch`; dual interfaces; standard COM enumerator interfaces; connection points; tear-off interfaces; and ActiveX controls.  \n  \n ATL code can be used to create single-threaded objects, apartment-model objects, free-threaded model objects, or both free-threaded and apartment-model objects.  \n  \n Topics covered in this section include:  \n  \n-   How a [template library](../atl/using-a-template-library.md) differs from a standard C++ library.  \n  \n-   What you [can and cannot do with ATL](../atl/scope-of-atl.md).  \n  \n-   [Recommendations for choosing between ATL and MFC](../atl/recommendations-for-choosing-between-atl-and-mfc.md).  \n  \n## See Also  \n [Introduction to COM and ATL](../atl/introduction-to-com-and-atl.md)\n\n"}