{"nodes":[{"pos":[12,46],"content":"CSyncObject Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CSyncObject Class | Microsoft Docs","pos":[0,34]}]},{"pos":[650,667],"content":"CSyncObject Class","linkify":"CSyncObject Class","nodes":[{"content":"CSyncObject Class","pos":[0,17]}]},{"content":"A pure virtual class that provides functionality common to the synchronization objects in Win32.","pos":[668,764]},{"pos":[773,779],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[840,847],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[857,876],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[883,887]},{"content":"Description","pos":[888,899]},{"pos":[937,990],"content":"<bpt id=\"p1\">[</bpt>CSyncObject::CSyncObject<ept id=\"p1\">](#csyncobject__csyncobject)</ept>","source":"[CSyncObject::CSyncObject](#csyncobject__csyncobject)"},{"pos":[991,1025],"content":"Constructs a <ph id=\"ph1\">`CSyncObject`</ph> object.","source":"Constructs a `CSyncObject` object."},{"pos":[1036,1050],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1057,1061]},{"content":"Description","pos":[1062,1073]},{"pos":[1111,1150],"content":"<bpt id=\"p1\">[</bpt>CSyncObject::Lock<ept id=\"p1\">](#csyncobject__lock)</ept>","source":"[CSyncObject::Lock](#csyncobject__lock)"},{"content":"Gains access to the synchronization object.","pos":[1151,1194]},{"pos":[1199,1242],"content":"<bpt id=\"p1\">[</bpt>CSyncObject::Unlock<ept id=\"p1\">](#csyncobject__unlock)</ept>","source":"[CSyncObject::Unlock](#csyncobject__unlock)"},{"content":"Gains access to the synchronization object.","pos":[1243,1286]},{"pos":[1297,1313],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1320,1324]},{"content":"Description","pos":[1325,1336]},{"pos":[1374,1435],"content":"<bpt id=\"p1\">[</bpt>CSyncObject::operator HANDLE<ept id=\"p1\">](#csyncobject__operator_handle)</ept>","source":"[CSyncObject::operator HANDLE](#csyncobject__operator_handle)"},{"content":"Provides access to the synchronization object.","pos":[1436,1482]},{"pos":[1493,1512],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[1519,1523]},{"content":"Description","pos":[1524,1535]},{"pos":[1573,1622],"content":"<bpt id=\"p1\">[</bpt>CSyncObject::m_hObject<ept id=\"p1\">](#csyncobject__m_hobject)</ept>","source":"[CSyncObject::m_hObject](#csyncobject__m_hobject)"},{"content":"The handle to the underlying synchronization object.","pos":[1623,1675]},{"pos":[1685,1692],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Microsoft Foundation Class Library provides several classes derived from <ph id=\"ph1\">`CSyncObject`</ph>.","pos":[1696,1787],"source":"The Microsoft Foundation Class Library provides several classes derived from `CSyncObject`."},{"content":"These are <bpt id=\"p1\">[</bpt>CEvent<ept id=\"p1\">](../../mfc/reference/cevent-class.md)</ept>, <bpt id=\"p2\">[</bpt>CMutex<ept id=\"p2\">](../../mfc/reference/cmutex-class.md)</ept>, <bpt id=\"p3\">[</bpt>CCriticalSection<ept id=\"p3\">](../../mfc/reference/ccriticalsection-class.md)</ept>, and <bpt id=\"p4\">[</bpt>CSemaphore<ept id=\"p4\">](../../mfc/reference/csemaphore-class.md)</ept>.","pos":[1788,2017],"source":" These are [CEvent](../../mfc/reference/cevent-class.md), [CMutex](../../mfc/reference/cmutex-class.md), [CCriticalSection](../../mfc/reference/ccriticalsection-class.md), and [CSemaphore](../../mfc/reference/csemaphore-class.md)."},{"pos":[2024,2229],"content":"For information on how to use the synchronization objects, see the article <bpt id=\"p1\">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id=\"p1\">](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept>.","source":"For information on how to use the synchronization objects, see the article [Multithreading: How to Use the Synchronization Classes](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)."},{"pos":[2238,2259],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2263,2310],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[2339,2351],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2355,2374],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxmt.h","source":"**Header:** afxmt.h"},{"pos":[2384,2449],"content":"<bpt id=\"p1\">&lt;a name=\"csyncobject__csyncobject\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSyncObject::CSyncObject","linkify":"<a name=\"csyncobject__csyncobject\"></a>  CSyncObject::CSyncObject","source":"<a name=\"csyncobject__csyncobject\"></a>  CSyncObject::CSyncObject"},{"content":"Constructs a synchronization object with the supplied name.","pos":[2453,2512]},{"pos":[2604,2614],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The name of the object.","pos":[2632,2655]},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, <bpt id=\"p2\">*</bpt>pstrName<ept id=\"p2\">*</ept> will be null.","pos":[2656,2693],"source":" If **NULL**, *pstrName* will be null."},{"pos":[2703,2754],"content":"<bpt id=\"p1\">&lt;a name=\"csyncobject__lock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSyncObject::Lock","linkify":"<a name=\"csyncobject__lock\"></a>  CSyncObject::Lock","source":"<a name=\"csyncobject__lock\"></a>  CSyncObject::Lock"},{"content":"Call this function to gain access to the resource controlled by the synchronization object.","pos":[2758,2849]},{"pos":[2921,2931],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the amount of time in milliseconds to wait for the synchronization object to be available (signaled).","pos":[2950,3061]},{"content":"If <bpt id=\"p1\">**</bpt>INFINITE<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`Lock`</ph> will wait until the object is signaled before returning.","pos":[3062,3142],"source":" If **INFINITE**, `Lock` will wait until the object is signaled before returning."},{"pos":[3152,3164],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the function was successful; otherwise 0.","pos":[3168,3220]},{"pos":[3230,3237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the synchronization object is signaled, <ph id=\"ph1\">`Lock`</ph> will return successfully and the thread now owns the object.","pos":[3241,3351],"source":"If the synchronization object is signaled, `Lock` will return successfully and the thread now owns the object."},{"content":"If the synchronization object is nonsignaled (unavailable), <ph id=\"ph1\">`Lock`</ph> will wait for the synchronization object to become signaled up to the number of milliseconds specified in the <bpt id=\"p1\">*</bpt>dwTimeOut<ept id=\"p1\">*</ept> parameter.","pos":[3352,3551],"source":" If the synchronization object is nonsignaled (unavailable), `Lock` will wait for the synchronization object to become signaled up to the number of milliseconds specified in the *dwTimeOut* parameter."},{"content":"If the synchronization object did not become signaled in the specified amount of time, <ph id=\"ph1\">`Lock`</ph> returns failure.","pos":[3552,3662],"source":" If the synchronization object did not become signaled in the specified amount of time, `Lock` returns failure."},{"pos":[3672,3733],"content":"<bpt id=\"p1\">&lt;a name=\"csyncobject__m_hobject\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSyncObject::m_hObject","linkify":"<a name=\"csyncobject__m_hobject\"></a>  CSyncObject::m_hObject","source":"<a name=\"csyncobject__m_hobject\"></a>  CSyncObject::m_hObject"},{"content":"The handle to the underlying synchronization object.","pos":[3737,3789]},{"pos":[3834,3907],"content":"<bpt id=\"p1\">&lt;a name=\"csyncobject__operator_handle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSyncObject::operator HANDLE","linkify":"<a name=\"csyncobject__operator_handle\"></a>  CSyncObject::operator HANDLE","source":"<a name=\"csyncobject__operator_handle\"></a>  CSyncObject::operator HANDLE"},{"pos":[3911,3975],"content":"Use this operator to get the handle of the <ph id=\"ph1\">`CSyncObject`</ph> object.","source":"Use this operator to get the handle of the `CSyncObject` object."},{"pos":[4028,4040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4044,4121],"content":"If successful, the handle of the synchronization object; otherwise, <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, the handle of the synchronization object; otherwise, **NULL**."},{"pos":[4131,4138],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can use the handle to call Windows APIs directly.","pos":[4142,4195]},{"pos":[4205,4260],"content":"<bpt id=\"p1\">&lt;a name=\"csyncobject__unlock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSyncObject::Unlock","linkify":"<a name=\"csyncobject__unlock\"></a>  CSyncObject::Unlock","source":"<a name=\"csyncobject__unlock\"></a>  CSyncObject::Unlock"},{"pos":[4264,4405],"content":"The declaration of <ph id=\"ph1\">`Unlock`</ph> with no parameters is a pure virtual function, and must be overridden by all classes deriving from <ph id=\"ph2\">`CSyncObject`</ph>.","source":"The declaration of `Unlock` with no parameters is a pure virtual function, and must be overridden by all classes deriving from `CSyncObject`."},{"pos":[4529,4539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Not used by default implementation.","pos":[4555,4590]},{"content":"Not used by default implementation.","pos":[4614,4649]},{"pos":[4659,4671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4675,4722],"content":"Default implementation always returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","source":"Default implementation always returns **TRUE**."},{"pos":[4732,4739],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of the declaration with two parameters always returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","pos":[4743,4833],"source":"The default implementation of the declaration with two parameters always returns **TRUE**."},{"content":"This function is called to release access to the synchronization object owned by the calling thread.","pos":[4834,4934]},{"content":"The second declaration is provided for synchronization objects such as semaphores that allow more than one access of a controlled resource.","pos":[4935,5074]},{"pos":[5083,5091],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[5095,5149],"source":"[CObject Class](../../mfc/reference/cobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","pos":[5152,5200],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"CSyncObject Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CSyncObject\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CSyncObject class\"\n  - \"synchronization classes, CSyncObject\"\nms.assetid: c62ea6eb-a17b-4e01-aed4-321fc435a5f4\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CSyncObject Class\nA pure virtual class that provides functionality common to the synchronization objects in Win32.  \n  \n## Syntax  \n  \n```  \nclass CSyncObject : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSyncObject::CSyncObject](#csyncobject__csyncobject)|Constructs a `CSyncObject` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSyncObject::Lock](#csyncobject__lock)|Gains access to the synchronization object.|  \n|[CSyncObject::Unlock](#csyncobject__unlock)|Gains access to the synchronization object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSyncObject::operator HANDLE](#csyncobject__operator_handle)|Provides access to the synchronization object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSyncObject::m_hObject](#csyncobject__m_hobject)|The handle to the underlying synchronization object.|  \n  \n## Remarks  \n The Microsoft Foundation Class Library provides several classes derived from `CSyncObject`. These are [CEvent](../../mfc/reference/cevent-class.md), [CMutex](../../mfc/reference/cmutex-class.md), [CCriticalSection](../../mfc/reference/ccriticalsection-class.md), and [CSemaphore](../../mfc/reference/csemaphore-class.md).  \n  \n For information on how to use the synchronization objects, see the article [Multithreading: How to Use the Synchronization Classes](../../parallel/multithreading-how-to-use-the-synchronization-classes.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CSyncObject`  \n  \n## Requirements  \n **Header:** afxmt.h  \n  \n##  <a name=\"csyncobject__csyncobject\"></a>  CSyncObject::CSyncObject  \n Constructs a synchronization object with the supplied name.  \n  \n```  \nexplicit CSyncObject(LPCTSTR pstrName);\n\n \nvirtual ~CSyncObject();\n```  \n  \n### Parameters  \n `pstrName`  \n The name of the object. If **NULL**, *pstrName* will be null.  \n  \n##  <a name=\"csyncobject__lock\"></a>  CSyncObject::Lock  \n Call this function to gain access to the resource controlled by the synchronization object.  \n  \n```  \nvirtual BOOL Lock(DWORD dwTimeout = INFINITE);\n```  \n  \n### Parameters  \n `dwTimeout`  \n Specifies the amount of time in milliseconds to wait for the synchronization object to be available (signaled). If **INFINITE**, `Lock` will wait until the object is signaled before returning.  \n  \n### Return Value  \n Nonzero if the function was successful; otherwise 0.  \n  \n### Remarks  \n If the synchronization object is signaled, `Lock` will return successfully and the thread now owns the object. If the synchronization object is nonsignaled (unavailable), `Lock` will wait for the synchronization object to become signaled up to the number of milliseconds specified in the *dwTimeOut* parameter. If the synchronization object did not become signaled in the specified amount of time, `Lock` returns failure.  \n  \n##  <a name=\"csyncobject__m_hobject\"></a>  CSyncObject::m_hObject  \n The handle to the underlying synchronization object.  \n  \n```  \nHANDLE m_hObject;  \n```  \n  \n##  <a name=\"csyncobject__operator_handle\"></a>  CSyncObject::operator HANDLE  \n Use this operator to get the handle of the `CSyncObject` object.  \n  \n```  \noperator HANDLE() const;\n\n \n```  \n  \n### Return Value  \n If successful, the handle of the synchronization object; otherwise, **NULL**.  \n  \n### Remarks  \n You can use the handle to call Windows APIs directly.  \n  \n##  <a name=\"csyncobject__unlock\"></a>  CSyncObject::Unlock  \n The declaration of `Unlock` with no parameters is a pure virtual function, and must be overridden by all classes deriving from `CSyncObject`.  \n  \n```  \nvirtual BOOL Unlock() = 0; virtual BOOL Unlock(\n    LONG lCount,  \n    LPLONG lpPrevCount = NULL);\n```  \n  \n### Parameters  \n `lCount`  \n Not used by default implementation.  \n  \n `lpPrevCount`  \n Not used by default implementation.  \n  \n### Return Value  \n Default implementation always returns **TRUE**.  \n  \n### Remarks  \n The default implementation of the declaration with two parameters always returns **TRUE**. This function is called to release access to the synchronization object owned by the calling thread. The second declaration is provided for synchronization objects such as semaphores that allow more than one access of a controlled resource.  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}