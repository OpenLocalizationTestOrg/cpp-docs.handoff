{"nodes":[{"pos":[12,62],"content":"remainder, remainderf, remainderl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"remainder, remainderf, remainderl | Microsoft Docs","pos":[0,50]}]},{"pos":[1046,1079],"content":"remainder, remainderf, remainderl","linkify":"remainder, remainderf, remainderl","nodes":[{"content":"remainder, remainderf, remainderl","pos":[0,33]}]},{"content":"Computes the remainder of the quotient of two floating-point values, rounded to the nearest integral value.","pos":[1080,1187]},{"pos":[1196,1202],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1602,1612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The numerator.","pos":[1627,1641]},{"content":"The denominator.","pos":[1659,1675]},{"pos":[1684,1696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The floating-point remainder of <ph id=\"ph1\">`x`</ph><ph id=\"ph2\"> / </ph><ph id=\"ph3\">`y`</ph>.","pos":[1700,1742],"source":"The floating-point remainder of `x` / `y`."},{"content":"If the value of <ph id=\"ph1\">`y`</ph> is 0.0, <ph id=\"ph2\">`remainder`</ph> returns a quiet NaN.","pos":[1743,1803],"source":" If the value of `y` is 0.0, `remainder` returns a quiet NaN."},{"content":"For information about the representation of a quiet NaN by the <ph id=\"ph1\">`printf`</ph> family, see <bpt id=\"p1\">[</bpt>printf, _printf_l, wprintf, _wprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept>.","pos":[1804,2001],"source":" For information about the representation of a quiet NaN by the `printf` family, see [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)."},{"pos":[2010,2017],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`remainder`</ph> function calculates the floating-point remainder <ph id=\"ph2\">`r`</ph> of <ph id=\"ph3\">`x`</ph><ph id=\"ph4\"> / </ph><ph id=\"ph5\">`y`</ph> such that <ph id=\"ph6\">`x`</ph><ph id=\"ph7\"> = </ph><ph id=\"ph8\">`n`</ph><ph id=\"ph9\"> * </ph><ph id=\"ph10\">`y`</ph><ph id=\"ph11\"> + </ph><ph id=\"ph12\">`r`</ph>, where <ph id=\"ph13\">`n`</ph> is the integer nearest in value to <ph id=\"ph14\">`x`</ph><ph id=\"ph15\"> / </ph><ph id=\"ph16\">`y`</ph> and <ph id=\"ph17\">`n`</ph> is even whenever &amp;#124; <ph id=\"ph18\">`n`</ph><ph id=\"ph19\"> - </ph><ph id=\"ph20\">`x`</ph><ph id=\"ph21\"> / </ph><ph id=\"ph22\">`y`</ph> &amp;#124; = 1/2.","pos":[2021,2252],"source":"The `remainder` function calculates the floating-point remainder `r` of `x` / `y` such that `x` = `n` * `y` + `r`, where `n` is the integer nearest in value to `x` / `y` and `n` is even whenever &#124; `n` - `x` / `y` &#124; = 1/2."},{"content":"When <ph id=\"ph1\">`r`</ph> = 0, <ph id=\"ph2\">`r`</ph> has the same sign as <ph id=\"ph3\">`x`</ph>.","pos":[2253,2296],"source":" When `r` = 0, `r` has the same sign as `x`."},{"content":"Because C++ allows overloading, you can call overloads of <ph id=\"ph1\">`remainder`</ph> that take and return <ph id=\"ph2\">`float`</ph> or <ph id=\"ph3\">`long double`</ph> values.","pos":[2303,2426],"source":"Because C++ allows overloading, you can call overloads of `remainder` that take and return `float` or `long double` values."},{"content":"In a C program, <ph id=\"ph1\">`remainder`</ph> always takes two doubles and returns a double.","pos":[2427,2501],"source":" In a C program, `remainder` always takes two doubles and returns a double."},{"pos":[2510,2522],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[2529,2537]},{"content":"Required header","pos":[2538,2553]},{"pos":[2599,2638],"content":"<ph id=\"ph1\">`remainder`</ph>, <ph id=\"ph2\">`remainderf`</ph>, <ph id=\"ph3\">`remainderl`</ph>","source":"`remainder`, `remainderf`, `remainderl`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[2639,2648],"source":"\\<math.h>"},{"pos":[2656,2749],"content":"For compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[2758,2765],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3133,3158],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[3162,3264],"content":"<bpt id=\"p1\">[</bpt>System::Math::IEEERemainder<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.math.ieeeremainder.aspx)</ept>","source":"[System::Math::IEEERemainder](https://msdn.microsoft.com/en-us/library/system.math.ieeeremainder.aspx)"},{"pos":[3273,3281],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[3285,3361],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ldiv, lldiv<ept id=\"p1\">](../../c-runtime-library/reference/ldiv-lldiv.md)</ept><ph id=\"ph1\"> </ph>","pos":[3364,3428],"source":" [ldiv, lldiv](../../c-runtime-library/reference/ldiv-lldiv.md) "},{"content":"<bpt id=\"p1\"> [</bpt>imaxdiv<ept id=\"p1\">](../../c-runtime-library/reference/imaxdiv.md)</ept><ph id=\"ph1\"> </ph>","pos":[3431,3488],"source":" [imaxdiv](../../c-runtime-library/reference/imaxdiv.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fmod, fmodf<ept id=\"p1\">](../../c-runtime-library/reference/fmod-fmodf.md)</ept><ph id=\"ph1\"> </ph>","pos":[3491,3555],"source":" [fmod, fmodf](../../c-runtime-library/reference/fmod-fmodf.md) "},{"content":"<bpt id=\"p1\"> [</bpt>remquo, remquof, remquol<ept id=\"p1\">](../../c-runtime-library/reference/remquo-remquof-remquol.md)</ept>","pos":[3558,3646],"source":" [remquo, remquof, remquol](../../c-runtime-library/reference/remquo-remquof-remquol.md)"}],"content":"---\ntitle: \"remainder, remainderf, remainderl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"remainderl\"\n  - \"remainder\"\n  - \"remainderf\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"remainderf\"\n  - \"remainder\"\n  - \"remainderl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"remainderf\"\n  - \"remainderl\"\n  - \"remainder\"\nms.assetid: 5f721fb3-8b78-4597-9bc0-ca9bcd1f1d0e\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# remainder, remainderf, remainderl\nComputes the remainder of the quotient of two floating-point values, rounded to the nearest integral value.  \n  \n## Syntax  \n  \n```  \ndouble remainder(   \n   double numer,  \n   double denom  \n);  \nfloat remainder(   \n   float numer,  \n   float denom  \n); /* C++ only */  \nlong double remainder(   \n   long double numer,  \n   long double denom  \n); /* C++ only */  \nfloat remainderf(   \n   float numer,  \n   float denom  \n);  \nlong double remainderl(   \n   long double numer,  \n   long double denom  \n);  \n  \n```  \n  \n#### Parameters  \n `numer`  \n The numerator.  \n  \n `denom`  \n The denominator.  \n  \n## Return Value  \n The floating-point remainder of `x` / `y`. If the value of `y` is 0.0, `remainder` returns a quiet NaN. For information about the representation of a quiet NaN by the `printf` family, see [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md).  \n  \n## Remarks  \n The `remainder` function calculates the floating-point remainder `r` of `x` / `y` such that `x` = `n` * `y` + `r`, where `n` is the integer nearest in value to `x` / `y` and `n` is even whenever &#124; `n` - `x` / `y` &#124; = 1/2. When `r` = 0, `r` has the same sign as `x`.  \n  \n Because C++ allows overloading, you can call overloads of `remainder` that take and return `float` or `long double` values. In a C program, `remainder` always takes two doubles and returns a double.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`remainder`, `remainderf`, `remainderl`|\\<math.h>|  \n  \n For compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```c  \n// crt_remainder.c  \n// This program displays a floating-point remainder.  \n  \n#include <math.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   double w = -10.0, x = 3.0, z;  \n  \n   z = remainder(w, x);  \n   printf(\"The remainder of %.2f / %.2f is %f\\n\", w, x, z);  \n}  \n```  \n  \n```Output  \nThe remainder of -10.00 / 3.00 is -1.000000  \n```  \n  \n## .NET Framework Equivalent  \n [System::Math::IEEERemainder](https://msdn.microsoft.com/en-us/library/system.math.ieeeremainder.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [ldiv, lldiv](../../c-runtime-library/reference/ldiv-lldiv.md)   \n [imaxdiv](../../c-runtime-library/reference/imaxdiv.md)   \n [fmod, fmodf](../../c-runtime-library/reference/fmod-fmodf.md)   \n [remquo, remquof, remquol](../../c-runtime-library/reference/remquo-remquof-remquol.md)"}