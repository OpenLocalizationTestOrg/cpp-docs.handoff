{"nodes":[{"pos":[12,48],"content":"set::find (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"set::find (STL-CLR) | Microsoft Docs","pos":[0,36]}]},{"content":"set::find (STL/CLR)","pos":[619,638]},{"content":"Finds an element that matches a specified key.","pos":[639,685]},{"content":"Syntax","pos":[694,700]},{"content":"Parameters","pos":[757,767]},{"content":"key","pos":[771,774]},{"content":"Key value to search for.","pos":[778,802]},{"content":"Remarks","pos":[811,818]},{"content":"If at least one element in the controlled sequence has equivalent ordering with <ph id=\"ph1\">`key`</ph>, the member function returns an iterator designating one of those elements; otherwise it returns <bpt id=\"p1\">[</bpt>set::end (STL/CLR)<ept id=\"p1\">](../dotnet/set-end-stl-clr.md)</ept><ph id=\"ph2\">`()`</ph>.","pos":[822,1060],"source":"If at least one element in the controlled sequence has equivalent ordering with `key`, the member function returns an iterator designating one of those elements; otherwise it returns [set::end (STL/CLR)](../dotnet/set-end-stl-clr.md)`()`."},{"content":"You use it to locate an element currently in the controlled sequence that matches a specified key.","pos":[1061,1159]},{"content":"Example","pos":[1168,1175]},{"content":"Description","pos":[1985,1996]},{"pos":[2000,2070],"content":"Note that <ph id=\"ph1\">`find`</ph> does not guarantee which of several element it finds.","source":"Note that `find` does not guarantee which of several element it finds."},{"content":"Requirements","pos":[2079,2091]},{"pos":[2095,2120],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/set&gt;","source":"**Header:** \\<cliext/set>"},{"pos":[2127,2148],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2157,2165]},{"content":"set (STL/CLR)","pos":[2170,2183]},{"content":"set::equal_range (STL/CLR)","pos":[2216,2242]},{"content":"set::lower_bound (STL/CLR)","pos":[2287,2313]},{"content":"set::upper_bound (STL/CLR)","pos":[2358,2384]}],"content":"---\ntitle: \"set::find (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::set::find\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"find member [STL/CLR]\"\nms.assetid: 916e581c-2815-4c07-a51a-6c5ddfa730c1\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# set::find (STL/CLR)\nFinds an element that matches a specified key.  \n  \n## Syntax  \n  \n```  \niterator find(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n If at least one element in the controlled sequence has equivalent ordering with `key`, the member function returns an iterator designating one of those elements; otherwise it returns [set::end (STL/CLR)](../dotnet/set-end-stl-clr.md)`()`. You use it to locate an element currently in the controlled sequence that matches a specified key.  \n  \n## Example  \n  \n```  \n// cliext_set_find.cpp   \n// compile with: /clr   \n#include <cliext/set>   \n  \ntypedef cliext::set<wchar_t> Myset;   \nint main()   \n    {   \n    Myset c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"find {0} = {1}\",   \n        L'A', c1.find(L'A') != c1.end());   \n    System::Console::WriteLine(\"find {0} = {1}\",   \n        L'b', *c1.find(L'b'));   \n    System::Console::WriteLine(\"find {0} = {1}\",   \n        L'C', c1.find(L'C') != c1.end());   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \nfind A = False  \nfind b = b  \nfind C = False  \n```  \n  \n## Description  \n Note that `find` does not guarantee which of several element it finds.  \n  \n## Requirements  \n **Header:** \\<cliext/set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [set (STL/CLR)](../dotnet/set-stl-clr.md)   \n [set::equal_range (STL/CLR)](../dotnet/set-equal-range-stl-clr.md)   \n [set::lower_bound (STL/CLR)](../dotnet/set-lower-bound-stl-clr.md)   \n [set::upper_bound (STL/CLR)](../dotnet/set-upper-bound-stl-clr.md)"}