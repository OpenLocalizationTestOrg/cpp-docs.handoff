{"nodes":[{"pos":[12,52],"content":"CContainedWindowT Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CContainedWindowT Class | Microsoft Docs","pos":[0,40]}]},{"content":"CContainedWindowT Class","pos":[729,752]},{"content":"This class implements a window contained within another object.","pos":[753,816]},{"pos":[824,934],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[943,949]},{"content":"Parameters","pos":[1086,1096]},{"content":"TBase","pos":[1101,1106]},{"content":"The base class of your new class.","pos":[1111,1144]},{"content":"The default base class is <ph id=\"ph1\">`CWindow`</ph>.","pos":[1145,1181],"source":" The default base class is `CWindow`."},{"content":"A traits class that defines styles for your window.","pos":[1204,1255]},{"content":"The default is <ph id=\"ph1\">`CControlWinTraits`</ph>.","pos":[1256,1291],"source":" The default is `CControlWinTraits`."},{"pos":[1299,1481],"content":"[!NOTE]\n[CContainedWindow](ccontainedwindowt-class.md) is a specialization of `CContainedWindowT`. If you want to change the base class or traits, use `CContainedWindowT` directly.","leadings":["","> "],"nodes":[{"content":"[CContainedWindow](ccontainedwindowt-class.md) is a specialization of `CContainedWindowT`. If you want to change the base class or traits, use `CContainedWindowT` directly.","pos":[8,180],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>CContainedWindow<ept id=\"p1\">](ccontainedwindowt-class.md)</ept> is a specialization of <ph id=\"ph1\">`CContainedWindowT`</ph>.","pos":[0,90],"source":"[CContainedWindow](ccontainedwindowt-class.md) is a specialization of `CContainedWindowT`."},{"content":"If you want to change the base class or traits, use <ph id=\"ph1\">`CContainedWindowT`</ph> directly.","pos":[91,172],"source":" If you want to change the base class or traits, use `CContainedWindowT` directly."}]}]},{"content":"Members","pos":[1490,1497]},{"content":"Public Constructors","pos":[1507,1526]},{"content":"Name","pos":[1533,1537]},{"content":"Description","pos":[1538,1549]},{"content":"CContainedWindowT::CContainedWindowT","pos":[1588,1624]},{"content":"Constructor.","pos":[1665,1677]},{"content":"Initializes data members to specify which message map will process the contained window's messages.","pos":[1678,1777]},{"content":"Public Methods","pos":[1788,1802]},{"content":"Name","pos":[1809,1813]},{"content":"Description","pos":[1814,1825]},{"content":"CContainedWindowT::Create","pos":[1864,1889]},{"content":"Creates a window.","pos":[1919,1936]},{"content":"CContainedWindowT::DefWindowProc","pos":[1942,1974]},{"content":"Provides default message processing.","pos":[2011,2047]},{"content":"CContainedWindowT::GetCurrentMessage","pos":[2053,2089]},{"content":"Returns the current message.","pos":[2130,2158]},{"content":"CContainedWindowT::RegisterWndSuperclass","pos":[2164,2204]},{"content":"Registers the window class of the contained window.","pos":[2249,2300]},{"content":"CContainedWindowT::SubclassWindow","pos":[2306,2339]},{"content":"Subclasses a window.","pos":[2377,2397]},{"content":"CContainedWindowT::SwitchMessageMap","pos":[2403,2438]},{"content":"Changes which message map is used to process the contained window's messages.","pos":[2478,2555]},{"content":"CContainedWindowT::UnsubclassWindow","pos":[2561,2596]},{"content":"Restores a previously subclassed window.","pos":[2636,2676]},{"content":"CContainedWindowT::WindowProc","pos":[2682,2711]},{"content":"(Static) Processes messages sent to the contained window.","pos":[2745,2802]},{"content":"Public Data Members","pos":[2813,2832]},{"content":"Name","pos":[2839,2843]},{"content":"Description","pos":[2844,2855]},{"content":"CContainedWindowT::m_dwMsgMapID","pos":[2894,2925]},{"content":"Identifies which message map will process the contained window's messages.","pos":[2961,3035]},{"content":"CContainedWindowT::m_lpszClassName","pos":[3041,3075]},{"content":"Specifies the name of an existing window class on which a new window class will be based.","pos":[3114,3203]},{"content":"CContainedWindowT::m_pfnSuperWindowProc","pos":[3209,3248]},{"content":"Points to the window class's original window procedure.","pos":[3292,3347]},{"content":"CContainedWindowT::m_pObject","pos":[3353,3381]},{"content":"Points to the containing object.","pos":[3414,3446]},{"content":"Remarks","pos":[3456,3463]},{"content":"implements a window contained within another object.","pos":[3487,3539]},{"content":"'s window procedure uses a message map in the containing object to direct messages to the appropriate handlers.","pos":[3559,3670]},{"content":"When constructing a <ph id=\"ph1\">`CContainedWindowT`</ph> object, you specify which message map should be used.","pos":[3671,3764],"source":" When constructing a `CContainedWindowT` object, you specify which message map should be used."},{"content":"allows you to create a new window by superclassing an existing window class.","pos":[3791,3867]},{"content":"The <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> method first registers a window class that is based on an existing class but uses <ph id=\"ph1\">`CContainedWindowT::WindowProc`</ph>.","pos":[3868,3997],"source":" The **Create** method first registers a window class that is based on an existing class but uses `CContainedWindowT::WindowProc`."},{"content":"<bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> then creates a window based on this new window class.","pos":[3998,4062],"source":"**Create** then creates a window based on this new window class."},{"content":"Each instance of <ph id=\"ph1\">`CContainedWindowT`</ph> can superclass a different window class.","pos":[4063,4140],"source":" Each instance of `CContainedWindowT` can superclass a different window class."},{"content":"also supports window subclassing.","pos":[4167,4200]},{"content":"The <ph id=\"ph1\">`SubclassWindow`</ph> method attaches an existing window to the <ph id=\"ph2\">`CContainedWindowT`</ph> object and changes the window procedure to <ph id=\"ph3\">`CContainedWindowT::WindowProc`</ph>.","pos":[4201,4359],"source":" The `SubclassWindow` method attaches an existing window to the `CContainedWindowT` object and changes the window procedure to `CContainedWindowT::WindowProc`."},{"content":"Each instance of <ph id=\"ph1\">`CContainedWindowT`</ph> can subclass a different window.","pos":[4360,4429],"source":" Each instance of `CContainedWindowT` can subclass a different window."},{"pos":[4437,4588],"content":"[!NOTE]\n For any given `CContainedWindowT` object, call either **Create** or `SubclassWindow`. You should not invoke both methods on the same object.","leadings":["","> "],"nodes":[{"content":" For any given `CContainedWindowT` object, call either **Create** or `SubclassWindow`. You should not invoke both methods on the same object.","pos":[8,149],"nodes":[{"content":"For any given <ph id=\"ph1\">`CContainedWindowT`</ph> object, call either <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> or <ph id=\"ph2\">`SubclassWindow`</ph>.","pos":[1,86],"source":" For any given `CContainedWindowT` object, call either **Create** or `SubclassWindow`."},{"content":"You should not invoke both methods on the same object.","pos":[87,141]}]}]},{"content":"When you use the <bpt id=\"p1\">**</bpt>Add control based on<ept id=\"p1\">**</ept> option in the ATL Project Wizard, the wizard will automatically add a <ph id=\"ph1\">`CContainedWindowT`</ph> data member to the class implementing the control.","pos":[4595,4777],"source":"When you use the **Add control based on** option in the ATL Project Wizard, the wizard will automatically add a `CContainedWindowT` data member to the class implementing the control."},{"content":"The following example shows how the contained window is declared:","pos":[4778,4843]},{"pos":[4861,4881],"content":"NVC_ATL_Windowing#38"},{"pos":[4956,4976],"content":"NVC_ATL_Windowing#39"},{"pos":[5051,5071],"content":"NVC_ATL_Windowing#40"},{"content":"For more information about","pos":[5135,5161]},{"content":"See","pos":[5162,5165]},{"content":"Creating controls","pos":[5217,5234]},{"content":"ATL Tutorial","pos":[5236,5248]},{"content":"Using windows in ATL","pos":[5305,5325]},{"content":"ATL Window Classes","pos":[5327,5345]},{"content":"ATL Project Wizard","pos":[5384,5402]},{"content":"Creating an ATL Project","pos":[5404,5427]},{"content":"Windows","pos":[5481,5488]},{"pos":[5489,5587],"content":"<bpt id=\"p1\">[</bpt>Windows<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632595)</ept> and subsequent topics in the","source":"[Windows](http://msdn.microsoft.com/library/windows/desktop/ms632595) and subsequent topics in the "},{"content":"Inheritance Hierarchy","pos":[5649,5670]},{"content":"Requirements","pos":[5716,5728]},{"pos":[5732,5752],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlwin.h","source":"**Header:** atlwin.h"},{"pos":[5815,5851],"content":"CContainedWindowT::CContainedWindowT"},{"content":"The constructor initializes data members.","pos":[5855,5896]},{"content":"Parameters","pos":[6111,6121]},{"content":"[in] The name of an existing window class on which the contained window will be based.","pos":[6144,6230]},{"content":"[in] A pointer to the containing object that declares the message map.","pos":[6250,6320]},{"content":"This object's class must derive from <bpt id=\"p1\">[</bpt>CMessageMap<ept id=\"p1\">](../../atl/reference/cmessagemap-class.md)</ept>.","pos":[6321,6414],"source":" This object's class must derive from [CMessageMap](../../atl/reference/cmessagemap-class.md)."},{"content":"[in] Identifies the message map that will process the contained window's messages.","pos":[6437,6519]},{"content":"The default value, 0, specifies the default message map declared with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)</ept>.","pos":[6520,6678],"source":" The default value, 0, specifies the default message map declared with [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)."},{"content":"To use an alternate message map declared with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP(msgMapID)<ept id=\"p1\">](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8)</ept>, pass <ph id=\"ph1\">`msgMapID`</ph>.","pos":[6679,6838],"source":" To use an alternate message map declared with [ALT_MSG_MAP(msgMapID)](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8), pass `msgMapID`."},{"content":"Remarks","pos":[6848,6855]},{"content":"If you want to create a new window through <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#ccontainedwindowt__create)</ept>, you must pass the name of an existing window class for the <ph id=\"ph1\">`lpszClassName`</ph> parameter.","pos":[6859,7025],"source":"If you want to create a new window through [Create](#ccontainedwindowt__create), you must pass the name of an existing window class for the `lpszClassName` parameter."},{"content":"For an example, see the <bpt id=\"p1\">[</bpt>CContainedWindow<ept id=\"p1\">](../../atl/reference/ccontainedwindowt-class.md)</ept> overview.","pos":[7026,7126],"source":" For an example, see the [CContainedWindow](../../atl/reference/ccontainedwindowt-class.md) overview."},{"content":"There are three constructors:","pos":[7133,7162]},{"content":"The constructor with three arguments is the one typically called.","pos":[7172,7237]},{"pos":[7247,7334],"content":"The constructor with two arguments uses the class name from <bpt id=\"p1\">**</bpt>TBase::GetWndClassName<ept id=\"p1\">**</ept>.","source":"The constructor with two arguments uses the class name from **TBase::GetWndClassName**."},{"content":"The constructor with no arguments is used if you want to supply the arguments later.","pos":[7344,7428]},{"content":"You must supply the window class name, message map object, and message map ID when you later call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>.","pos":[7429,7538],"source":" You must supply the window class name, message map object, and message map ID when you later call **Create**."},{"pos":[7545,7738],"content":"If you subclass an existing window through <bpt id=\"p1\">[</bpt>SubclassWindow<ept id=\"p1\">](#ccontainedwindowt__subclasswindow)</ept>, the <ph id=\"ph1\">`lpszClassName`</ph> value will not be used; therefore, you can pass <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> for this parameter.","source":"If you subclass an existing window through [SubclassWindow](#ccontainedwindowt__subclasswindow), the `lpszClassName` value will not be used; therefore, you can pass **NULL** for this parameter."},{"pos":[7790,7815],"content":"CContainedWindowT::Create"},{"pos":[7819,8027],"content":"Calls <bpt id=\"p1\">[</bpt>RegisterWndSuperclass<ept id=\"p1\">](#ccontainedwindowt__registerwndsuperclass)</ept> to register a window class that is based on an existing class but uses <bpt id=\"p2\">[</bpt>CContainedWindowT::WindowProc<ept id=\"p2\">](#ccontainedwindowt__windowproc)</ept>.","source":"Calls [RegisterWndSuperclass](#ccontainedwindowt__registerwndsuperclass) to register a window class that is based on an existing class but uses [CContainedWindowT::WindowProc](#ccontainedwindowt__windowproc)."},{"content":"Parameters","pos":[8767,8777]},{"content":"[in] The name of an existing window class on which the contained window will be based.","pos":[8800,8886]},{"content":"[in] A pointer to the containing object that declares the message map.","pos":[8906,8976]},{"content":"This object's class must derive from <bpt id=\"p1\">[</bpt>CMessageMap<ept id=\"p1\">](../../atl/reference/cmessagemap-class.md)</ept>.","pos":[8977,9070],"source":" This object's class must derive from [CMessageMap](../../atl/reference/cmessagemap-class.md)."},{"content":"[in] Identifies the message map that will process the contained window's messages.","pos":[9093,9175]},{"content":"The default value, 0, specifies the default message map declared with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)</ept>.","pos":[9176,9334],"source":" The default value, 0, specifies the default message map declared with [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)."},{"content":"To use an alternate message map declared with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP(msgMapID)<ept id=\"p1\">](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8)</ept>, pass <ph id=\"ph1\">`msgMapID`</ph>.","pos":[9335,9494],"source":" To use an alternate message map declared with [ALT_MSG_MAP(msgMapID)](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8), pass `msgMapID`."},{"content":"[in] The handle to the parent or owner window.","pos":[9517,9563]},{"content":"[in] A <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure specifying the position of the window.","pos":[9580,9702],"source":" [in] A [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure specifying the position of the window."},{"content":"The <ph id=\"ph1\">`RECT`</ph> can be passed by pointer or by reference.","pos":[9703,9755],"source":" The `RECT` can be passed by pointer or by reference."},{"content":"[in] Specifies the name of the window.","pos":[9780,9818]},{"content":"The default value is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[9819,9849],"source":" The default value is **NULL**."},{"content":"[in] The style of the window.","pos":[9869,9898]},{"content":"The default value is <bpt id=\"p1\">**</bpt>WS_CHILD &amp;#124; WS_VISIBLE<ept id=\"p1\">**</ept>.","pos":[9899,9951],"source":" The default value is **WS_CHILD &#124; WS_VISIBLE**."},{"content":"For a list of possible values, see <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[9952,10121],"source":" For a list of possible values, see [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"[in] The extended window style.","pos":[10143,10174]},{"content":"The default value is 0, meaning no extended style.","pos":[10175,10225]},{"content":"For a list of possible values, see <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[10226,10397],"source":" For a list of possible values, see [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"[in] For a child window, the window identifier.","pos":[10418,10465]},{"content":"For a top-level window, a menu handle for the window.","pos":[10466,10519]},{"content":"The default value is <bpt id=\"p1\">**</bpt>0U<ept id=\"p1\">**</ept>.","pos":[10520,10548],"source":" The default value is **0U**."},{"content":"[in] A pointer to window-creation data.","pos":[10574,10613]},{"content":"For a full description, see the description for the final parameter to <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept>.","pos":[10614,10762],"source":" For a full description, see the description for the final parameter to [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680)."},{"content":"Return Value","pos":[10772,10784]},{"pos":[10788,10863],"content":"If successful, the handle to the newly created window; otherwise, <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, the handle to the newly created window; otherwise, **NULL**."},{"content":"Remarks","pos":[10873,10880]},{"content":"The existing window class name is saved in <bpt id=\"p1\">[</bpt>m_lpszClassName<ept id=\"p1\">](#ccontainedwindowt__m_lpszclassname)</ept>.","pos":[10884,10982],"source":"The existing window class name is saved in [m_lpszClassName](#ccontainedwindowt__m_lpszclassname)."},{"content":"<bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> then creates a window based on this new class.","pos":[10983,11040],"source":"**Create** then creates a window based on this new class."},{"content":"The newly created window is automatically attached to the <ph id=\"ph1\">`CContainedWindowT`</ph> object.","pos":[11041,11126],"source":" The newly created window is automatically attached to the `CContainedWindowT` object."},{"pos":[11134,11248],"content":"[!NOTE]\n Do not call **Create** if you have already called [SubclassWindow](#ccontainedwindowt__subclasswindow).","leadings":["","> "],"nodes":[{"content":"Do not call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> if you have already called <bpt id=\"p2\">[</bpt>SubclassWindow<ept id=\"p2\">](#ccontainedwindowt__subclasswindow)</ept>.","pos":[9,112],"source":" Do not call **Create** if you have already called [SubclassWindow](#ccontainedwindowt__subclasswindow)."}]},{"pos":[11256,11396],"content":"[!NOTE]\n If 0 is used as the value for the `MenuOrID` parameter, it must be specified as 0U (the default value) to avoid a compiler error.","leadings":["","> "],"nodes":[{"content":"If 0 is used as the value for the <ph id=\"ph1\">`MenuOrID`</ph> parameter, it must be specified as 0U (the default value) to avoid a compiler error.","pos":[9,138],"source":" If 0 is used as the value for the `MenuOrID` parameter, it must be specified as 0U (the default value) to avoid a compiler error."}]},{"pos":[11455,11487],"content":"CContainedWindowT::DefWindowProc"},{"pos":[11491,11597],"content":"Called by <bpt id=\"p1\">[</bpt>WindowProc<ept id=\"p1\">](#ccontainedwindowt__windowproc)</ept> to process messages not handled by the message map.","source":"Called by [WindowProc](#ccontainedwindowt__windowproc) to process messages not handled by the message map."},{"content":"Parameters","pos":[11725,11735]},{"content":"[in] The message sent to the window.","pos":[11749,11785]},{"content":"[in] Additional message-specific information.","pos":[11804,11849]},{"content":"[in] Additional message-specific information.","pos":[11868,11913]},{"content":"Return Value","pos":[11923,11935]},{"content":"The result of the message processing.","pos":[11939,11976]},{"content":"Remarks","pos":[11986,11993]},{"pos":[11997,12261],"content":"By default, <ph id=\"ph1\">`DefWindowProc`</ph> calls the <bpt id=\"p1\">[</bpt>CallWindowProc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633571)</ept> Win32 function to send the message information to the window procedure specified in <bpt id=\"p2\">[</bpt>m_pfnSuperWindowProc<ept id=\"p2\">](#ccontainedwindowt__m_pfnsuperwindowproc)</ept>.","source":"By default, `DefWindowProc` calls the [CallWindowProc](http://msdn.microsoft.com/library/windows/desktop/ms633571) Win32 function to send the message information to the window procedure specified in [m_pfnSuperWindowProc](#ccontainedwindowt__m_pfnsuperwindowproc)."},{"pos":[12324,12360],"content":"CContainedWindowT::GetCurrentMessage"},{"pos":[12364,12413],"content":"Returns the current message ( <bpt id=\"p1\">**</bpt>m_pCurrentMsg<ept id=\"p1\">**</ept>).","source":"Returns the current message ( **m_pCurrentMsg**)."},{"content":"Return Value","pos":[12473,12485]},{"pos":[12489,12542],"content":"The current message, packaged in the <ph id=\"ph1\">`MSG`</ph> structure.","source":"The current message, packaged in the `MSG` structure."},{"pos":[12600,12631],"content":"CContainedWindowT::m_dwMsgMapID"},{"content":"Holds the identifier of the message map currently being used for the contained window.","pos":[12635,12721]},{"content":"Remarks","pos":[12764,12771]},{"content":"This message map must be declared in the containing object.","pos":[12775,12834]},{"content":"The default message map, declared with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)</ept>, is always identified by zero.","pos":[12841,12998],"source":"The default message map, declared with [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554), is always identified by zero."},{"content":"An alternate message map, declared with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP(msgMapID)<ept id=\"p1\">](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8)</ept>, is identified by <ph id=\"ph1\">`msgMapID`</ph>.","pos":[12999,13164],"source":" An alternate message map, declared with [ALT_MSG_MAP(msgMapID)](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8), is identified by `msgMapID`."},{"content":"is first initialized by the constructor and can be changed by calling <bpt id=\"p1\">[</bpt>SwitchMessageMap<ept id=\"p1\">](#ccontainedwindowt__switchmessagemap)</ept>.","pos":[13186,13313],"source":" is first initialized by the constructor and can be changed by calling [SwitchMessageMap](#ccontainedwindowt__switchmessagemap)."},{"content":"For an example, see the <bpt id=\"p1\">[</bpt>CContainedWindowT Overview<ept id=\"p1\">](../../atl/reference/ccontainedwindowt-class.md)</ept>.","pos":[13314,13415],"source":" For an example, see the [CContainedWindowT Overview](../../atl/reference/ccontainedwindowt-class.md)."},{"pos":[13476,13510],"content":"CContainedWindowT::m_lpszClassName"},{"content":"Specifies the name of an existing window class.","pos":[13514,13561]},{"content":"Remarks","pos":[13608,13615]},{"pos":[13619,13821],"content":"When you create a window, <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#ccontainedwindowt__create)</ept> registers a new window class that is based on this existing class but uses <bpt id=\"p2\">[</bpt>CContainedWindowT::WindowProc<ept id=\"p2\">](#ccontainedwindowt__windowproc)</ept>.","source":"When you create a window, [Create](#ccontainedwindowt__create) registers a new window class that is based on this existing class but uses [CContainedWindowT::WindowProc](#ccontainedwindowt__windowproc)."},{"content":"is initialized by the constructor.","pos":[13846,13880]},{"content":"For an example, see the <bpt id=\"p1\">[</bpt>CContainedWindowT<ept id=\"p1\">](../../atl/reference/ccontainedwindowt-class.md)</ept> overview.","pos":[13881,13982],"source":" For an example, see the [CContainedWindowT](../../atl/reference/ccontainedwindowt-class.md) overview."},{"pos":[14048,14087],"content":"CContainedWindowT::m_pfnSuperWindowProc"},{"pos":[14091,14213],"content":"If the contained window is subclassed, <ph id=\"ph1\">`m_pfnSuperWindowProc`</ph> points to the original window procedure of the window class.","source":"If the contained window is subclassed, `m_pfnSuperWindowProc` points to the original window procedure of the window class."},{"content":"Remarks","pos":[14266,14273]},{"pos":[14277,14467],"content":"If the contained window is superclassed, meaning it is based on a window class that modifies an existing class, <ph id=\"ph1\">`m_pfnSuperWindowProc`</ph> points to the existing window class's window procedure.","source":"If the contained window is superclassed, meaning it is based on a window class that modifies an existing class, `m_pfnSuperWindowProc` points to the existing window class's window procedure."},{"pos":[14474,14618],"content":"The <bpt id=\"p1\">[</bpt>DefWindowProc<ept id=\"p1\">](#ccontainedwindowt__defwindowproc)</ept> method sends message information to the window procedure saved in <ph id=\"ph1\">`m_pfnSuperWindowProc`</ph>.","source":"The [DefWindowProc](#ccontainedwindowt__defwindowproc) method sends message information to the window procedure saved in `m_pfnSuperWindowProc`."},{"pos":[14673,14701],"content":"CContainedWindowT::m_pObject"},{"pos":[14705,14768],"content":"Points to the object containing the <ph id=\"ph1\">`CContainedWindowT`</ph> object.","source":"Points to the object containing the `CContainedWindowT` object."},{"content":"Remarks","pos":[14815,14822]},{"pos":[14826,14982],"content":"This container, whose class must derive from <bpt id=\"p1\">[</bpt>CMessageMap<ept id=\"p1\">](../../atl/reference/cmessagemap-class.md)</ept>, declares the message map used by the contained window.","source":"This container, whose class must derive from [CMessageMap](../../atl/reference/cmessagemap-class.md), declares the message map used by the contained window."},{"content":"is initialized by the constructor.","pos":[15001,15035]},{"content":"For an example, see the <bpt id=\"p1\">[</bpt>CContainedWindowT<ept id=\"p1\">](../../atl/reference/ccontainedwindowt-class.md)</ept> overview.","pos":[15036,15137],"source":" For an example, see the [CContainedWindowT](../../atl/reference/ccontainedwindowt-class.md) overview."},{"pos":[15204,15244],"content":"CContainedWindowT::RegisterWndSuperclass"},{"pos":[15248,15348],"content":"Called by <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#ccontainedwindowt__create)</ept> to register the window class of the contained window.","source":"Called by [Create](#ccontainedwindowt__create) to register the window class of the contained window."},{"content":"Return Value","pos":[15401,15413]},{"content":"If successful, an atom that uniquely identifies the window class being registered; otherwise, zero.","pos":[15417,15516]},{"content":"Remarks","pos":[15526,15533]},{"content":"This window class is based on an existing class but uses <bpt id=\"p1\">[</bpt>CContainedWindowT::WindowProc<ept id=\"p1\">](#ccontainedwindowt__windowproc)</ept>.","pos":[15537,15658],"source":"This window class is based on an existing class but uses [CContainedWindowT::WindowProc](#ccontainedwindowt__windowproc)."},{"content":"The existing window class's name and window procedure are saved in <bpt id=\"p1\">[</bpt>m_lpszClassName<ept id=\"p1\">](#ccontainedwindowt__m_lpszclassname)</ept> and <bpt id=\"p2\">[</bpt>m_pfnSuperWindowProc<ept id=\"p2\">](#ccontainedwindowt__m_pfnsuperwindowproc)</ept>, respectively.","pos":[15659,15864],"source":" The existing window class's name and window procedure are saved in [m_lpszClassName](#ccontainedwindowt__m_lpszclassname) and [m_pfnSuperWindowProc](#ccontainedwindowt__m_pfnsuperwindowproc), respectively."},{"pos":[15924,15957],"content":"CContainedWindowT::SubclassWindow"},{"pos":[15961,16054],"content":"Subclasses the window identified by <ph id=\"ph1\">`hWnd`</ph> and attaches it to the <ph id=\"ph2\">`CContainedWindowT`</ph> object.","source":"Subclasses the window identified by `hWnd` and attaches it to the `CContainedWindowT` object."},{"content":"Parameters","pos":[16109,16119]},{"content":"[in] The handle to the window being subclassed.","pos":[16133,16180]},{"content":"Return Value","pos":[16190,16202]},{"pos":[16206,16278],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the window is successfully subclassed; otherwise, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the window is successfully subclassed; otherwise, **FALSE**."},{"content":"Remarks","pos":[16288,16295]},{"content":"The subclassed window now uses <bpt id=\"p1\">[</bpt>CContainedWindowT::WindowProc<ept id=\"p1\">](#ccontainedwindowt__windowproc)</ept>.","pos":[16299,16394],"source":"The subclassed window now uses [CContainedWindowT::WindowProc](#ccontainedwindowt__windowproc)."},{"content":"The original window procedure is saved in <bpt id=\"p1\">[</bpt>m_pfnSuperWindowProc<ept id=\"p1\">](#ccontainedwindowt__m_pfnsuperwindowproc)</ept>.","pos":[16395,16502],"source":" The original window procedure is saved in [m_pfnSuperWindowProc](#ccontainedwindowt__m_pfnsuperwindowproc)."},{"pos":[16510,16614],"content":"[!NOTE]\n Do not call `SubclassWindow` if you have already called [Create](#ccontainedwindowt__create).","leadings":["","> "],"nodes":[{"content":"Do not call <ph id=\"ph1\">`SubclassWindow`</ph> if you have already called <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#ccontainedwindowt__create)</ept>.","pos":[9,102],"source":" Do not call `SubclassWindow` if you have already called [Create](#ccontainedwindowt__create)."}]},{"pos":[16676,16711],"content":"CContainedWindowT::SwitchMessageMap"},{"content":"Changes which message map will be used to process the contained window's messages.","pos":[16715,16797]},{"content":"Parameters","pos":[16861,16871]},{"content":"[in] The message map identifier.","pos":[16891,16923]},{"content":"To use the default message map declared with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)</ept>, pass zero.","pos":[16924,17068],"source":" To use the default message map declared with [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554), pass zero."},{"content":"To use an alternate message map declared with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP(msgMapID)<ept id=\"p1\">](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8)</ept>, pass <ph id=\"ph1\">`msgMapID`</ph>.","pos":[17069,17228],"source":" To use an alternate message map declared with [ALT_MSG_MAP(msgMapID)](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8), pass `msgMapID`."},{"content":"Remarks","pos":[17238,17245]},{"content":"The message map must be defined in the containing object.","pos":[17249,17306]},{"content":"You initially specify the message map identifier in the constructor.","pos":[17313,17381]},{"pos":[17443,17478],"content":"CContainedWindowT::UnsubclassWindow"},{"pos":[17482,17667],"content":"Detaches the subclassed window from the <ph id=\"ph1\">`CContainedWindowT`</ph> object and restores the original window procedure, saved in <bpt id=\"p1\">[</bpt>m_pfnSuperWindowProc<ept id=\"p1\">](#ccontainedwindowt__m_pfnsuperwindowproc)</ept>.","source":"Detaches the subclassed window from the `CContainedWindowT` object and restores the original window procedure, saved in [m_pfnSuperWindowProc](#ccontainedwindowt__m_pfnsuperwindowproc)."},{"content":"Parameters","pos":[17734,17744]},{"content":"[in] Set to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to force the original window procedure to be restored even if the window procedure for this <ph id=\"ph1\">`CContainedWindowT`</ph> object is not currently active.","pos":[17760,17924],"source":" [in] Set to **TRUE** to force the original window procedure to be restored even if the window procedure for this `CContainedWindowT` object is not currently active."},{"content":"If <ph id=\"ph1\">`bForce`</ph> is set to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> and the window procedure for this <ph id=\"ph2\">`CContainedWindowT`</ph> object is not currently active, the original window procedure will not be restored.","pos":[17925,18094],"source":" If `bForce` is set to **FALSE** and the window procedure for this `CContainedWindowT` object is not currently active, the original window procedure will not be restored."},{"content":"Return Value","pos":[18104,18116]},{"content":"The handle to the window previously subclassed.","pos":[18120,18167]},{"content":"If <ph id=\"ph1\">`bForce`</ph> is set to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> and the window procedure for this <ph id=\"ph2\">`CContainedWindowT`</ph> object is not currently active, returns <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","pos":[18168,18303],"source":" If `bForce` is set to **FALSE** and the window procedure for this `CContainedWindowT` object is not currently active, returns **NULL**."},{"content":"Remarks","pos":[18313,18320]},{"content":"Use this method only if you want to restore the original window procedure before the window is destroyed.","pos":[18324,18429]},{"content":"Otherwise, <bpt id=\"p1\">[</bpt>WindowProc<ept id=\"p1\">](#ccontainedwindowt__windowproc)</ept> will automatically do this when the window is destroyed.","pos":[18430,18542],"source":" Otherwise, [WindowProc](#ccontainedwindowt__windowproc) will automatically do this when the window is destroyed."},{"pos":[18598,18627],"content":"CContainedWindowT::WindowProc"},{"content":"This static method implements the window procedure.","pos":[18631,18682]},{"content":"Parameters","pos":[18805,18815]},{"content":"[in] The handle to the window.","pos":[18829,18859]},{"content":"[in] The message sent to the window.","pos":[18876,18912]},{"content":"[in] Additional message-specific information.","pos":[18931,18976]},{"content":"[in] Additional message-specific information.","pos":[18995,19040]},{"content":"Return Value","pos":[19050,19062]},{"content":"The result of the message processing.","pos":[19066,19103]},{"content":"Remarks","pos":[19113,19120]},{"content":"directs messages to the message map identified by <bpt id=\"p1\">[</bpt>m_dwMsgMapID<ept id=\"p1\">](#ccontainedwindowt__m_dwmsgmapid)</ept>.","pos":[19137,19236],"source":" directs messages to the message map identified by [m_dwMsgMapID](#ccontainedwindowt__m_dwmsgmapid)."},{"content":"If necessary, <ph id=\"ph1\">`WindowProc`</ph> calls <bpt id=\"p1\">[</bpt>DefWindowProc<ept id=\"p1\">](#ccontainedwindowt__defwindowproc)</ept> for additional message processing.","pos":[19237,19355],"source":" If necessary, `WindowProc` calls [DefWindowProc](#ccontainedwindowt__defwindowproc) for additional message processing."},{"content":"See Also","pos":[19364,19372]},{"content":"CWindow Class","pos":[19377,19390]},{"content":"CWindowImpl Class","pos":[19435,19452]},{"content":"CMessageMap Class","pos":[19501,19518]},{"content":"BEGIN_MSG_MAP","pos":[19567,19580]},{"content":"ALT_MSG_MAP","pos":[19659,19670]},{"content":"Class Overview","pos":[19749,19763]}],"content":"---\ntitle: \"CContainedWindowT Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CContainedWindow\"\n  - \"CContainedWindowT\"\n  - \"ATL.CContainedWindowT\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CContainedWindow class\"\n  - \"contained windows\"\n  - \"CContainedWindowT class\"\nms.assetid: cde0ca36-9347-4068-995a-d294dae57ca9\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CContainedWindowT Class\nThis class implements a window contained within another object.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\ntemplate <class TBase = CWindow,  class TWinTraits = CControlWinTraits>  class CContainedWindowT :  public TBase\n```  \n  \n#### Parameters  \n *TBase*  \n The base class of your new class. The default base class is `CWindow`.  \n  \n `TWinTraits`  \n A traits class that defines styles for your window. The default is `CControlWinTraits`.  \n  \n> [!NOTE]\n> [CContainedWindow](ccontainedwindowt-class.md) is a specialization of `CContainedWindowT`. If you want to change the base class or traits, use `CContainedWindowT` directly.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CContainedWindowT::CContainedWindowT](#ccontainedwindowt__ccontainedwindowt)|Constructor. Initializes data members to specify which message map will process the contained window's messages.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CContainedWindowT::Create](#ccontainedwindowt__create)|Creates a window.|  \n|[CContainedWindowT::DefWindowProc](#ccontainedwindowt__defwindowproc)|Provides default message processing.|  \n|[CContainedWindowT::GetCurrentMessage](#ccontainedwindowt__getcurrentmessage)|Returns the current message.|  \n|[CContainedWindowT::RegisterWndSuperclass](#ccontainedwindowt__registerwndsuperclass)|Registers the window class of the contained window.|  \n|[CContainedWindowT::SubclassWindow](#ccontainedwindowt__subclasswindow)|Subclasses a window.|  \n|[CContainedWindowT::SwitchMessageMap](#ccontainedwindowt__switchmessagemap)|Changes which message map is used to process the contained window's messages.|  \n|[CContainedWindowT::UnsubclassWindow](#ccontainedwindowt__unsubclasswindow)|Restores a previously subclassed window.|  \n|[CContainedWindowT::WindowProc](#ccontainedwindowt__windowproc)|(Static) Processes messages sent to the contained window.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CContainedWindowT::m_dwMsgMapID](#ccontainedwindowt__m_dwmsgmapid)|Identifies which message map will process the contained window's messages.|  \n|[CContainedWindowT::m_lpszClassName](#ccontainedwindowt__m_lpszclassname)|Specifies the name of an existing window class on which a new window class will be based.|  \n|[CContainedWindowT::m_pfnSuperWindowProc](#ccontainedwindowt__m_pfnsuperwindowproc)|Points to the window class's original window procedure.|  \n|[CContainedWindowT::m_pObject](#ccontainedwindowt__m_pobject)|Points to the containing object.|  \n  \n## Remarks  \n `CContainedWindowT` implements a window contained within another object. `CContainedWindowT`'s window procedure uses a message map in the containing object to direct messages to the appropriate handlers. When constructing a `CContainedWindowT` object, you specify which message map should be used.  \n  \n `CContainedWindowT` allows you to create a new window by superclassing an existing window class. The **Create** method first registers a window class that is based on an existing class but uses `CContainedWindowT::WindowProc`. **Create** then creates a window based on this new window class. Each instance of `CContainedWindowT` can superclass a different window class.  \n  \n `CContainedWindowT` also supports window subclassing. The `SubclassWindow` method attaches an existing window to the `CContainedWindowT` object and changes the window procedure to `CContainedWindowT::WindowProc`. Each instance of `CContainedWindowT` can subclass a different window.  \n  \n> [!NOTE]\n>  For any given `CContainedWindowT` object, call either **Create** or `SubclassWindow`. You should not invoke both methods on the same object.  \n  \n When you use the **Add control based on** option in the ATL Project Wizard, the wizard will automatically add a `CContainedWindowT` data member to the class implementing the control. The following example shows how the contained window is declared:  \n  \n [!code-cpp[NVC_ATL_Windowing#38](../../atl/codesnippet/cpp/ccontainedwindowt-class_1.h)]  \n  \n [!code-cpp[NVC_ATL_Windowing#39](../../atl/codesnippet/cpp/ccontainedwindowt-class_2.h)]  \n  \n [!code-cpp[NVC_ATL_Windowing#40](../../atl/codesnippet/cpp/ccontainedwindowt-class_3.h)]  \n  \n|For more information about|See|  \n|--------------------------------|---------|  \n|Creating controls|[ATL Tutorial](../../atl/active-template-library-atl-tutorial.md)|  \n|Using windows in ATL|[ATL Window Classes](../../atl/atl-window-classes.md)|  \n|ATL Project Wizard|[Creating an ATL Project](../../atl/reference/creating-an-atl-project.md)|  \n|Windows|[Windows](http://msdn.microsoft.com/library/windows/desktop/ms632595) and subsequent topics in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]|  \n  \n## Inheritance Hierarchy  \n `TBase`  \n  \n `CContainedWindowT`  \n  \n## Requirements  \n **Header:** atlwin.h  \n  \n##  <a name=\"ccontainedwindowt__ccontainedwindowt\"></a>  CContainedWindowT::CContainedWindowT  \n The constructor initializes data members.  \n  \n```\nCContainedWindowT(LPTSTR lpszClassName,\n    CMessageMap* pObject,\n    DWORD dwMsgMapID = 0);\n\n    CContainedWindowT(CMessageMap* pObject,\n    DWORD dwMsgMapID = 0)\n    CContainedWindowT();\n```     \n  \n### Parameters  \n `lpszClassName`  \n [in] The name of an existing window class on which the contained window will be based.  \n  \n `pObject`  \n [in] A pointer to the containing object that declares the message map. This object's class must derive from [CMessageMap](../../atl/reference/cmessagemap-class.md).  \n  \n `dwMsgMapID`  \n [in] Identifies the message map that will process the contained window's messages. The default value, 0, specifies the default message map declared with [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554). To use an alternate message map declared with [ALT_MSG_MAP(msgMapID)](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8), pass `msgMapID`.  \n  \n### Remarks  \n If you want to create a new window through [Create](#ccontainedwindowt__create), you must pass the name of an existing window class for the `lpszClassName` parameter. For an example, see the [CContainedWindow](../../atl/reference/ccontainedwindowt-class.md) overview.  \n  \n There are three constructors:  \n  \n-   The constructor with three arguments is the one typically called.  \n  \n-   The constructor with two arguments uses the class name from **TBase::GetWndClassName**.  \n  \n-   The constructor with no arguments is used if you want to supply the arguments later. You must supply the window class name, message map object, and message map ID when you later call **Create**.  \n  \n If you subclass an existing window through [SubclassWindow](#ccontainedwindowt__subclasswindow), the `lpszClassName` value will not be used; therefore, you can pass **NULL** for this parameter.  \n  \n##  <a name=\"ccontainedwindowt__create\"></a>  CContainedWindowT::Create  \n Calls [RegisterWndSuperclass](#ccontainedwindowt__registerwndsuperclass) to register a window class that is based on an existing class but uses [CContainedWindowT::WindowProc](#ccontainedwindowt__windowproc).  \n  \n```\nHWND Create(HWND hWndParent,\n    _U_RECT rect,\n    LPCTSTR szWindowName = NULL,\n    DWORD dwStyle = 0,\n    DWORD dwExStyle = 0,\n    _U_MENUorID MenuOrID = 0U,\n    LPVOID lpCreateParam = NULL);\n\n    HWND Create(\n    CMessageMap* pObject,\n    DWORD dwMsgMapID,\n    HWND hWndParent,\n    _U_RECT rect,\n    LPCTSTR szWindowName = NULL,\n    DWORD dwStyle = 0,\n    DWORD dwExStyle = 0,\n    _U_MENUorID MenuOrID = 0U,\n    LPVOID lpCreateParam = NULL);\n\n    HWND Create(LPCTSTR lpszClassName,\n    CMessageMap* pObject,\n    DWORD dwMsgMapID,\n    HWND hWndParent,\n    _U_RECT rect,\n    LPCTSTR szWindowName = NULL,\n    DWORD dwStyle = 0,\n    DWORD dwExStyle = 0,\n    _U_MENUorID MenuOrID = 0U,\n    LPVOID lpCreateParam = NULL);\n```  \n  \n### Parameters  \n `lpszClassName`  \n [in] The name of an existing window class on which the contained window will be based.  \n  \n `pObject`  \n [in] A pointer to the containing object that declares the message map. This object's class must derive from [CMessageMap](../../atl/reference/cmessagemap-class.md).  \n  \n `dwMsgMapID`  \n [in] Identifies the message map that will process the contained window's messages. The default value, 0, specifies the default message map declared with [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554). To use an alternate message map declared with [ALT_MSG_MAP(msgMapID)](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8), pass `msgMapID`.  \n  \n `hWndParent`  \n [in] The handle to the parent or owner window.  \n  \n `rect`  \n [in] A [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure specifying the position of the window. The `RECT` can be passed by pointer or by reference.  \n  \n `szWindowName`  \n [in] Specifies the name of the window. The default value is **NULL**.  \n  \n `dwStyle`  \n [in] The style of the window. The default value is **WS_CHILD &#124; WS_VISIBLE**. For a list of possible values, see [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `dwExStyle`  \n [in] The extended window style. The default value is 0, meaning no extended style. For a list of possible values, see [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `MenuOrID`  \n [in] For a child window, the window identifier. For a top-level window, a menu handle for the window. The default value is **0U**.  \n  \n `lpCreateParam`  \n [in] A pointer to window-creation data. For a full description, see the description for the final parameter to [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680).  \n  \n### Return Value  \n If successful, the handle to the newly created window; otherwise, **NULL**.  \n  \n### Remarks  \n The existing window class name is saved in [m_lpszClassName](#ccontainedwindowt__m_lpszclassname). **Create** then creates a window based on this new class. The newly created window is automatically attached to the `CContainedWindowT` object.  \n  \n> [!NOTE]\n>  Do not call **Create** if you have already called [SubclassWindow](#ccontainedwindowt__subclasswindow).  \n  \n> [!NOTE]\n>  If 0 is used as the value for the `MenuOrID` parameter, it must be specified as 0U (the default value) to avoid a compiler error.  \n  \n##  <a name=\"ccontainedwindowt__defwindowproc\"></a>  CContainedWindowT::DefWindowProc  \n Called by [WindowProc](#ccontainedwindowt__windowproc) to process messages not handled by the message map.  \n  \n```\nLRESULT DefWindowProc()\n    LRESULT DefWindowProc(\n    UINT uMsg,\n    WPARAM wParam,\n    LPARAM lParam);\n```  \n  \n### Parameters  \n `uMsg`  \n [in] The message sent to the window.  \n  \n `wParam`  \n [in] Additional message-specific information.  \n  \n `lParam`  \n [in] Additional message-specific information.  \n  \n### Return Value  \n The result of the message processing.  \n  \n### Remarks  \n By default, `DefWindowProc` calls the [CallWindowProc](http://msdn.microsoft.com/library/windows/desktop/ms633571) Win32 function to send the message information to the window procedure specified in [m_pfnSuperWindowProc](#ccontainedwindowt__m_pfnsuperwindowproc).  \n  \n##  <a name=\"ccontainedwindowt__getcurrentmessage\"></a>  CContainedWindowT::GetCurrentMessage  \n Returns the current message ( **m_pCurrentMsg**).  \n  \n```\nconst _ATL_MSG* GetCurrentMessage();\n```  \n  \n### Return Value  \n The current message, packaged in the `MSG` structure.  \n  \n##  <a name=\"ccontainedwindowt__m_dwmsgmapid\"></a>  CContainedWindowT::m_dwMsgMapID  \n Holds the identifier of the message map currently being used for the contained window.  \n  \n```\nDWORD m_dwMsgMapID;\n```  \n  \n### Remarks  \n This message map must be declared in the containing object.  \n  \n The default message map, declared with [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554), is always identified by zero. An alternate message map, declared with [ALT_MSG_MAP(msgMapID)](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8), is identified by `msgMapID`.  \n  \n `m_dwMsgMapID` is first initialized by the constructor and can be changed by calling [SwitchMessageMap](#ccontainedwindowt__switchmessagemap). For an example, see the [CContainedWindowT Overview](../../atl/reference/ccontainedwindowt-class.md).  \n  \n##  <a name=\"ccontainedwindowt__m_lpszclassname\"></a>  CContainedWindowT::m_lpszClassName  \n Specifies the name of an existing window class.  \n  \n```\nLPTSTR m_lpszClassName;\n```  \n  \n### Remarks  \n When you create a window, [Create](#ccontainedwindowt__create) registers a new window class that is based on this existing class but uses [CContainedWindowT::WindowProc](#ccontainedwindowt__windowproc).  \n  \n `m_lpszClassName` is initialized by the constructor. For an example, see the [CContainedWindowT](../../atl/reference/ccontainedwindowt-class.md) overview.  \n  \n##  <a name=\"ccontainedwindowt__m_pfnsuperwindowproc\"></a>  CContainedWindowT::m_pfnSuperWindowProc  \n If the contained window is subclassed, `m_pfnSuperWindowProc` points to the original window procedure of the window class.  \n  \n```\nWNDPROC m_pfnSuperWindowProc;\n```  \n  \n### Remarks  \n If the contained window is superclassed, meaning it is based on a window class that modifies an existing class, `m_pfnSuperWindowProc` points to the existing window class's window procedure.  \n  \n The [DefWindowProc](#ccontainedwindowt__defwindowproc) method sends message information to the window procedure saved in `m_pfnSuperWindowProc`.  \n  \n##  <a name=\"ccontainedwindowt__m_pobject\"></a>  CContainedWindowT::m_pObject  \n Points to the object containing the `CContainedWindowT` object.  \n  \n```\nCMessageMap* m_pObject;\n```  \n  \n### Remarks  \n This container, whose class must derive from [CMessageMap](../../atl/reference/cmessagemap-class.md), declares the message map used by the contained window.  \n  \n `m_pObject` is initialized by the constructor. For an example, see the [CContainedWindowT](../../atl/reference/ccontainedwindowt-class.md) overview.  \n  \n##  <a name=\"ccontainedwindowt__registerwndsuperclass\"></a>  CContainedWindowT::RegisterWndSuperclass  \n Called by [Create](#ccontainedwindowt__create) to register the window class of the contained window.  \n  \n```\nATOM RegisterWndSuperClass();\n```  \n  \n### Return Value  \n If successful, an atom that uniquely identifies the window class being registered; otherwise, zero.  \n  \n### Remarks  \n This window class is based on an existing class but uses [CContainedWindowT::WindowProc](#ccontainedwindowt__windowproc). The existing window class's name and window procedure are saved in [m_lpszClassName](#ccontainedwindowt__m_lpszclassname) and [m_pfnSuperWindowProc](#ccontainedwindowt__m_pfnsuperwindowproc), respectively.  \n  \n##  <a name=\"ccontainedwindowt__subclasswindow\"></a>  CContainedWindowT::SubclassWindow  \n Subclasses the window identified by `hWnd` and attaches it to the `CContainedWindowT` object.  \n  \n```\nBOOL SubclassWindow(HWND hWnd);\n```  \n  \n### Parameters  \n `hWnd`  \n [in] The handle to the window being subclassed.  \n  \n### Return Value  \n **TRUE** if the window is successfully subclassed; otherwise, **FALSE**.  \n  \n### Remarks  \n The subclassed window now uses [CContainedWindowT::WindowProc](#ccontainedwindowt__windowproc). The original window procedure is saved in [m_pfnSuperWindowProc](#ccontainedwindowt__m_pfnsuperwindowproc).  \n  \n> [!NOTE]\n>  Do not call `SubclassWindow` if you have already called [Create](#ccontainedwindowt__create).  \n  \n##  <a name=\"ccontainedwindowt__switchmessagemap\"></a>  CContainedWindowT::SwitchMessageMap  \n Changes which message map will be used to process the contained window's messages.  \n  \n```\nvoid SwitchMessageMap(DWORD dwMsgMapID);\n```  \n  \n### Parameters  \n `dwMsgMapID`  \n [in] The message map identifier. To use the default message map declared with [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554), pass zero. To use an alternate message map declared with [ALT_MSG_MAP(msgMapID)](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8), pass `msgMapID`.  \n  \n### Remarks  \n The message map must be defined in the containing object.  \n  \n You initially specify the message map identifier in the constructor.  \n  \n##  <a name=\"ccontainedwindowt__unsubclasswindow\"></a>  CContainedWindowT::UnsubclassWindow  \n Detaches the subclassed window from the `CContainedWindowT` object and restores the original window procedure, saved in [m_pfnSuperWindowProc](#ccontainedwindowt__m_pfnsuperwindowproc).  \n  \n```\nHWND UnsubclassWindow(BOOL bForce = FALSE);\n```  \n  \n### Parameters  \n `bForce`  \n [in] Set to **TRUE** to force the original window procedure to be restored even if the window procedure for this `CContainedWindowT` object is not currently active. If `bForce` is set to **FALSE** and the window procedure for this `CContainedWindowT` object is not currently active, the original window procedure will not be restored.  \n  \n### Return Value  \n The handle to the window previously subclassed. If `bForce` is set to **FALSE** and the window procedure for this `CContainedWindowT` object is not currently active, returns **NULL**.  \n  \n### Remarks  \n Use this method only if you want to restore the original window procedure before the window is destroyed. Otherwise, [WindowProc](#ccontainedwindowt__windowproc) will automatically do this when the window is destroyed.  \n  \n##  <a name=\"ccontainedwindowt__windowproc\"></a>  CContainedWindowT::WindowProc  \n This static method implements the window procedure.  \n  \n```\nstatic LRESULT CALLBACK WindowProc(HWND hWnd,\n    UINT uMsg,\n    WPARAM wParam,\n    LPARAM lParam);\n```  \n  \n### Parameters  \n `hWnd`  \n [in] The handle to the window.  \n  \n `uMsg`  \n [in] The message sent to the window.  \n  \n `wParam`  \n [in] Additional message-specific information.  \n  \n `lParam`  \n [in] Additional message-specific information.  \n  \n### Return Value  \n The result of the message processing.  \n  \n### Remarks  \n `WindowProc` directs messages to the message map identified by [m_dwMsgMapID](#ccontainedwindowt__m_dwmsgmapid). If necessary, `WindowProc` calls [DefWindowProc](#ccontainedwindowt__defwindowproc) for additional message processing.  \n  \n## See Also  \n [CWindow Class](../../atl/reference/cwindow-class.md)   \n [CWindowImpl Class](../../atl/reference/cwindowimpl-class.md)   \n [CMessageMap Class](../../atl/reference/cmessagemap-class.md)   \n [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)   \n [ALT_MSG_MAP](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}