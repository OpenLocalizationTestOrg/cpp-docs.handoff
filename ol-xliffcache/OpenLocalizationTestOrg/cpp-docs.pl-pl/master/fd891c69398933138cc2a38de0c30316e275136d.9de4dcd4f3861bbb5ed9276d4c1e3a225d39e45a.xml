{"nodes":[{"pos":[12,50],"content":"mbstowcs, _mbstowcs_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"mbstowcs, _mbstowcs_l | Microsoft Docs","pos":[0,38]}]},{"content":"mbstowcs, _mbstowcs_l","pos":[995,1016]},{"content":"Converts a sequence of multibyte characters to a corresponding sequence of wide characters.","pos":[1017,1108]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>mbstowcs_s, _mbstowcs_s_l<ept id=\"p1\">](../../c-runtime-library/reference/mbstowcs-s-mbstowcs-s-l.md)</ept>.","pos":[1109,1258],"source":" More secure versions of these functions are available; see [mbstowcs_s, _mbstowcs_s_l](../../c-runtime-library/reference/mbstowcs-s-mbstowcs-s-l.md)."},{"content":"Syntax","pos":[1267,1273]},{"content":"Parameters","pos":[1791,1801]},{"content":"[out]","pos":[1805,1810]},{"content":"The address of a sequence of wide characters.","pos":[1822,1867]},{"content":"[in]","pos":[1874,1878]},{"content":"The address of a sequence of null terminated multibyte characters.","pos":[1890,1956]},{"content":"[in]","pos":[1963,1967]},{"content":"The maximum number of multibyte characters to convert.","pos":[1979,2033]},{"content":"[in]","pos":[2040,2044]},{"content":"The locale to use.","pos":[2057,2075]},{"content":"Return Value","pos":[2084,2096]},{"content":"If <ph id=\"ph1\">`mbstowcs`</ph> successfully converts the source string, it returns the number of converted multibyte characters.","pos":[2100,2211],"source":"If `mbstowcs` successfully converts the source string, it returns the number of converted multibyte characters."},{"content":"If the <ph id=\"ph1\">`wcstr`</ph> argument is <ph id=\"ph2\">`NULL`</ph>, the function returns the required size (in wide characters) of the destination string.","pos":[2212,2333],"source":" If the `wcstr` argument is `NULL`, the function returns the required size (in wide characters) of the destination string."},{"content":"If <ph id=\"ph1\">`mbstowcs`</ph> encounters an invalid multibyte character, it returns –1.","pos":[2334,2405],"source":" If `mbstowcs` encounters an invalid multibyte character, it returns –1."},{"content":"If the return value is <ph id=\"ph1\">`count`</ph>, the wide-character string is not null-terminated.","pos":[2406,2487],"source":" If the return value is `count`, the wide-character string is not null-terminated."},{"pos":[2495,2641],"content":"[!IMPORTANT]\n Ensure that `wcstr` and `mbstr` do not overlap, and that `count` correctly reflects the number of multibyte characters to convert.","leadings":["","> "],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`wcstr`</ph> and <ph id=\"ph2\">`mbstr`</ph> do not overlap, and that <ph id=\"ph3\">`count`</ph> correctly reflects the number of multibyte characters to convert.","pos":[14,144],"source":" Ensure that `wcstr` and `mbstr` do not overlap, and that `count` correctly reflects the number of multibyte characters to convert."}]},{"content":"Remarks","pos":[2650,2657]},{"content":"The <ph id=\"ph1\">`mbstowcs`</ph> function converts up to a maximum number of <ph id=\"ph2\">`count`</ph> multibyte characters pointed to by <ph id=\"ph3\">`mbstr`</ph> to a string of corresponding wide characters that are determined by the current locale.","pos":[2661,2858],"source":"The `mbstowcs` function converts up to a maximum number of `count` multibyte characters pointed to by `mbstr` to a string of corresponding wide characters that are determined by the current locale."},{"content":"It stores the resulting wide-character string at the address represented by <ph id=\"ph1\">`wcstr`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2859,2945],"source":" It stores the resulting wide-character string at the address represented by `wcstr`*.*"},{"content":"The result is similar to a series of calls to <ph id=\"ph1\">`mbtowc`</ph>.","pos":[2946,3001],"source":" The result is similar to a series of calls to `mbtowc`."},{"content":"If <ph id=\"ph1\">`mbstowcs`</ph> encounters the single-byte null character ('\\0') either before or when <ph id=\"ph2\">`count`</ph> occurs, it converts the null character to a wide-character null character (L'\\0') and stops.","pos":[3002,3187],"source":" If `mbstowcs` encounters the single-byte null character ('\\0') either before or when `count` occurs, it converts the null character to a wide-character null character (L'\\0') and stops."},{"content":"Thus the wide-character string at <ph id=\"ph1\">`wcstr`</ph> is null-terminated only if a null character is encountered during conversion.","pos":[3188,3307],"source":" Thus the wide-character string at `wcstr` is null-terminated only if a null character is encountered during conversion."},{"content":"If the sequences pointed to by <ph id=\"ph1\">`wcstr`</ph> and <ph id=\"ph2\">`mbstr`</ph> overlap, the behavior is undefined.","pos":[3308,3394],"source":" If the sequences pointed to by `wcstr` and `mbstr` overlap, the behavior is undefined."},{"content":"If the <ph id=\"ph1\">`wcstr`</ph> argument is <ph id=\"ph2\">`NULL`</ph>, <ph id=\"ph3\">`mbstowcs`</ph> returns the number of wide characters that would result from conversion, not including a null terminator.","pos":[3401,3552],"source":"If the `wcstr` argument is `NULL`, `mbstowcs` returns the number of wide characters that would result from conversion, not including a null terminator."},{"content":"The source string must be null-terminated for the correct value to be returned.","pos":[3553,3632]},{"content":"If you need the resulting wide character string to be null-terminated, add one to the returned value.","pos":[3633,3734]},{"content":"If the <ph id=\"ph1\">`mbstr`</ph> argument is <ph id=\"ph2\">`NULL`</ph>, or if <ph id=\"ph3\">`count`</ph> is &gt; <ph id=\"ph4\">`INT_MAX`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept> .","pos":[3741,3937],"source":"If the `mbstr` argument is `NULL`, or if `count` is > `INT_MAX`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) ."},{"content":"If execution is allowed to continue, errno is set to <ph id=\"ph1\">`EINVAL`</ph> and the function returns -1.","pos":[3938,4028],"source":" If execution is allowed to continue, errno is set to `EINVAL` and the function returns -1."},{"content":"uses the current locale for any locale-dependent behavior; <ph id=\"ph1\">`_mbstowcs_l`</ph> is identical except that it uses the locale passed in instead.","pos":[4046,4181],"source":" uses the current locale for any locale-dependent behavior; `_mbstowcs_l` is identical except that it uses the locale passed in instead."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[4182,4252],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions.","pos":[4259,4369]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4370,4478],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Requirements","pos":[4487,4499]},{"content":"Routine","pos":[4506,4513]},{"content":"Required header","pos":[4514,4529]},{"content":"stdlib.h&gt;","pos":[4587,4596],"source":"stdlib.h>"},{"content":"stdlib.h&gt;","pos":[4617,4626],"source":"stdlib.h>"},{"pos":[4634,4758],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[4767,4774]},{"content":".NET Framework Equivalent","pos":[7917,7942]},{"content":"Not applicable.","pos":[7946,7961]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[7962,8009],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[8010,8135],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[8144,8152]},{"content":"Data Conversion","pos":[8157,8172]},{"content":"Locale","pos":[8223,8229]},{"content":"Interpretation of Multibyte-Character Sequences","pos":[8271,8318]},{"content":"_mbclen, mblen, _mblen_l","pos":[8401,8425]},{"content":"mbtowc, _mbtowc_l","pos":[8491,8508]},{"content":"wcstombs, _wcstombs_l","pos":[8569,8590]},{"content":"wctomb, _wctomb_l","pos":[8655,8672]},{"content":"MultiByteToWideChar","pos":[8733,8752]}],"content":"---\ntitle: \"mbstowcs, _mbstowcs_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"mbstowcs\"\n  - \"_mbstowcs_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"mbstowcs\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_mbstowcs_l function\"\n  - \"mbstowcs_l function\"\n  - \"mbstowcs function\"\nms.assetid: 96696b27-e068-4eeb-8006-3f7a0546ae6d\ncaps.latest.revision: 30\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# mbstowcs, _mbstowcs_l\nConverts a sequence of multibyte characters to a corresponding sequence of wide characters. More secure versions of these functions are available; see [mbstowcs_s, _mbstowcs_s_l](../../c-runtime-library/reference/mbstowcs-s-mbstowcs-s-l.md).  \n  \n## Syntax  \n  \n```  \nsize_t mbstowcs(  \n   wchar_t *wcstr,  \n   const char *mbstr,  \n   size_t count   \n);  \nsize_t _mbstowcs_l(  \n   wchar_t *wcstr,  \n   const char *mbstr,  \n   size_t count,  \n   _locale_t locale  \n);  \ntemplate <size_t size>  \nsize_t mbstowcs(  \n   wchar_t (&wcstr)[size],  \n   const char *mbstr,  \n   size_t count   \n); // C++ only  \ntemplate <size_t size>  \nsize_t _mbstowcs_l(  \n   wchar_t (&wcstr)[size],  \n   const char *mbstr,  \n   size_t count,  \n   _locale_t locale  \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `wcstr`  \n The address of a sequence of wide characters.  \n  \n [in] `mbstr`  \n The address of a sequence of null terminated multibyte characters.  \n  \n [in] `count`  \n The maximum number of multibyte characters to convert.  \n  \n [in] `locale`  \n The locale to use.  \n  \n## Return Value  \n If `mbstowcs` successfully converts the source string, it returns the number of converted multibyte characters. If the `wcstr` argument is `NULL`, the function returns the required size (in wide characters) of the destination string. If `mbstowcs` encounters an invalid multibyte character, it returns –1. If the return value is `count`, the wide-character string is not null-terminated.  \n  \n> [!IMPORTANT]\n>  Ensure that `wcstr` and `mbstr` do not overlap, and that `count` correctly reflects the number of multibyte characters to convert.  \n  \n## Remarks  \n The `mbstowcs` function converts up to a maximum number of `count` multibyte characters pointed to by `mbstr` to a string of corresponding wide characters that are determined by the current locale. It stores the resulting wide-character string at the address represented by `wcstr`*.* The result is similar to a series of calls to `mbtowc`. If `mbstowcs` encounters the single-byte null character ('\\0') either before or when `count` occurs, it converts the null character to a wide-character null character (L'\\0') and stops. Thus the wide-character string at `wcstr` is null-terminated only if a null character is encountered during conversion. If the sequences pointed to by `wcstr` and `mbstr` overlap, the behavior is undefined.  \n  \n If the `wcstr` argument is `NULL`, `mbstowcs` returns the number of wide characters that would result from conversion, not including a null terminator. The source string must be null-terminated for the correct value to be returned. If you need the resulting wide character string to be null-terminated, add one to the returned value.  \n  \n If the `mbstr` argument is `NULL`, or if `count` is > `INT_MAX`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) . If execution is allowed to continue, errno is set to `EINVAL` and the function returns -1.  \n  \n `mbstowcs` uses the current locale for any locale-dependent behavior; `_mbstowcs_l` is identical except that it uses the locale passed in instead. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`mbstowcs`|\\<stdlib.h>|  \n|`_mbstowcs_l`|\\<stdlib.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_mbstowcs.c  \n// compile with: /W3  \n// illustrates the behavior of the mbstowcs function  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <locale.h>  \n  \nint main( void )  \n{  \n    size_t size;  \n    int nChar = 2; // number of characters to convert  \n    int requiredSize;  \n  \n    unsigned char    *pmbnull  = NULL;  \n    unsigned char    *pmbhello = NULL;  \n    char* localeInfo;  \n  \n    wchar_t *pwchello = L\"\\x3042\\x3043\"; // 2 Hiragana characters  \n    wchar_t *pwc;  \n  \n    /* Enable the Japanese locale and codepage */  \n    localeInfo = setlocale(LC_ALL, \"Japanese_Japan.932\");  \n    printf(\"Locale information set to %s\\n\", localeInfo);  \n  \n    printf( \"Convert to multibyte string:\\n\" );  \n  \n    requiredSize = wcstombs( NULL, pwchello, 0); // C4996  \n    // Note: wcstombs is deprecated; consider using wcstombs_s  \n    printf(\"  Required Size: %d\\n\", requiredSize);  \n  \n    /* Add one to leave room for the null terminator. */  \n    pmbhello = (unsigned char *)malloc( requiredSize + 1);  \n    if (! pmbhello)  \n    {  \n        printf(\"Memory allocation failure.\\n\");  \n        return 1;  \n    }  \n    size = wcstombs( pmbhello, pwchello, requiredSize + 1); // C4996  \n    // Note: wcstombs is deprecated; consider using wcstombs_s  \n    if (size == (size_t) (-1))  \n    {  \n        printf(\"Couldn't convert string. Code page 932 may\"  \n                \" not be available.\\n\");  \n        return 1;  \n    }  \n    printf( \"  Number of bytes written to multibyte string: %u\\n\",  \n            (unsigned int) size );  \n    printf( \"  Hex values of the \" );  \n    printf( \" multibyte characters: %#.2x %#.2x %#.2x %#.2x\\n\",  \n            pmbhello[0], pmbhello[1], pmbhello[2], pmbhello[3] );  \n    printf( \"  Codepage 932 uses 0x81 to 0x9f as lead bytes.\\n\\n\");  \n  \n    printf( \"Convert back to wide-character string:\\n\" );  \n  \n    /* Assume we don't know the length of the multibyte string.  \n     Get the required size in characters, and allocate enough space. */  \n  \n    requiredSize = mbstowcs(NULL, pmbhello, 0); // C4996  \n    /* Add one to leave room for the NULL terminator */  \n    pwc = (wchar_t *)malloc( (requiredSize + 1) * sizeof( wchar_t ));  \n    if (! pwc)  \n    {  \n        printf(\"Memory allocation failure.\\n\");  \n        return 1;  \n    }  \n    size = mbstowcs( pwc, pmbhello, requiredSize + 1); // C4996  \n    if (size == (size_t) (-1))  \n    {  \n       printf(\"Couldn't convert string--invalid multibyte character.\\n\");  \n    }  \n    printf( \"  Characters converted: %u\\n\", (unsigned int)size );  \n    printf( \"  Hex value of first 2\" );  \n    printf( \" wide characters: %#.4x %#.4x\\n\\n\", pwc[0], pwc[1] );  \n    free(pwc);  \n    free(pmbhello);  \n}  \n```  \n  \n```Output  \nLocale information set to Japanese_Japan.932  \nConvert to multibyte string:  \n  Required Size: 4  \n  Number of bytes written to multibyte string: 4  \n  Hex values of the  multibyte characters: 0x82 0xa0 0x82 0xa1  \n  Codepage 932 uses 0x81 to 0x9f as lead bytes.  \n  \nConvert back to wide-character string:  \n  Characters converted: 2  \n  Hex value of first 2 wide characters: 0x3042 0x3043  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [_mbclen, mblen, _mblen_l](../../c-runtime-library/reference/mbclen-mblen-mblen-l.md)   \n [mbtowc, _mbtowc_l](../../c-runtime-library/reference/mbtowc-mbtowc-l.md)   \n [wcstombs, _wcstombs_l](../../c-runtime-library/reference/wcstombs-wcstombs-l.md)   \n [wctomb, _wctomb_l](../../c-runtime-library/reference/wctomb-wctomb-l.md)   \n [MultiByteToWideChar](http://msdn.microsoft.com/library/windows/desktop/dd319072)"}