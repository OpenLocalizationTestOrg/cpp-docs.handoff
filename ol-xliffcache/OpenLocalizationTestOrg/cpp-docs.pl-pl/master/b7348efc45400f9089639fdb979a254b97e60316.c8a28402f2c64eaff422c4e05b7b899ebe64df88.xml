{"nodes":[{"pos":[12,43],"content":"not2 (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"not2 (STL-CLR) | Microsoft Docs","pos":[0,31]}]},{"content":"not2 (STL/CLR)","pos":[611,625]},{"pos":[626,668],"content":"Generates a <ph id=\"ph1\">`binary_negate`</ph> for a functor.","source":"Generates a `binary_negate` for a functor."},{"content":"Syntax","pos":[677,683]},{"content":"Template Parameters","pos":[777,796]},{"content":"Fun","pos":[800,803]},{"content":"The type of the functor.","pos":[807,831]},{"content":"Function Parameters","pos":[840,859]},{"content":"functor","pos":[863,870]},{"content":"The functor to wrap.","pos":[874,894]},{"content":"Remarks","pos":[903,910]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>binary_negate (STL/CLR)<ept id=\"p1\">](../dotnet/binary-negate-stl-clr.md)</ept><ph id=\"ph1\">`&lt;``Fun``&gt;(functor)`</ph>.","pos":[914,1026],"source":"The template function returns [binary_negate (STL/CLR)](../dotnet/binary-negate-stl-clr.md)`<``Fun``>(functor)`."},{"content":"You use it as a convenient way to wrap a two-argument functor in a functor that delivers its logical NOT.","pos":[1027,1132]},{"content":"Example","pos":[1141,1148]},{"content":"Requirements","pos":[2522,2534]},{"pos":[2538,2570],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[2577,2598],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2607,2615]},{"content":"binary_negate (STL/CLR)","pos":[2620,2643]}],"content":"---\ntitle: \"not2 (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::not2\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"not2 function [STL/CLR]\"\nms.assetid: f8aedcca-e4d1-4430-93b4-83dd55579d04\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# not2 (STL/CLR)\nGenerates a `binary_negate` for a functor.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Fun>  \n    binary_negate<Fun> not2(Fun% functor);  \n```  \n  \n## Template Parameters  \n Fun  \n The type of the functor.  \n  \n## Function Parameters  \n functor  \n The functor to wrap.  \n  \n## Remarks  \n The template function returns [binary_negate (STL/CLR)](../dotnet/binary-negate-stl-clr.md)`<``Fun``>(functor)`. You use it as a convenient way to wrap a two-argument functor in a functor that delivers its logical NOT.  \n  \n## Example  \n  \n```  \n// cliext_not2.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(3);   \n    Myvector c2;   \n    c2.push_back(4);   \n    c2.push_back(4);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 3\" and \" 4 4\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    for each (int elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::less<int> less_op;   \n  \n    cliext::transform(c1.begin(), c1.begin() + 2,   \n        c2.begin(), c3.begin(),   \n        cliext::binary_negate<cliext::less<int> >(less_op));   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display with function   \n    cliext::transform(c1.begin(), c1.begin() + 2,   \n        c2.begin(), c3.begin(), cliext::not2(less_op));   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 3  \n4 4  \n1 0  \n1 0  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [binary_negate (STL/CLR)](../dotnet/binary-negate-stl-clr.md)"}