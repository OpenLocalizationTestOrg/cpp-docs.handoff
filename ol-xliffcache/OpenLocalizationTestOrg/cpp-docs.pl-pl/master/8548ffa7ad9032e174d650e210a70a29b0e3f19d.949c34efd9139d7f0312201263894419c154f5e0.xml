{"nodes":[{"pos":[12,49],"content":"CUserException Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CUserException Class | Microsoft Docs","pos":[0,37]}]},{"pos":[780,800],"content":"CUserException Class","linkify":"CUserException Class","nodes":[{"content":"CUserException Class","pos":[0,20]}]},{"content":"Thrown to stop an end-user operation.","pos":[801,838]},{"pos":[847,853],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[926,933],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use <ph id=\"ph1\">`CUserException`</ph> when you want to use the throw/catch exception mechanism for application-specific exceptions.","pos":[937,1051],"source":"Use `CUserException` when you want to use the throw/catch exception mechanism for application-specific exceptions."},{"content":"\"User\" in the class name can be interpreted as \"my user did something exceptional that I need to handle.\"","pos":[1052,1157]},{"content":"A <ph id=\"ph1\">`CUserException`</ph> is usually thrown after calling the global function <ph id=\"ph2\">`AfxMessageBox`</ph> to notify the user that an operation has failed.","pos":[1164,1299],"source":"A `CUserException` is usually thrown after calling the global function `AfxMessageBox` to notify the user that an operation has failed."},{"content":"When you write an exception handler, handle the exception specially since the user usually has already been notified of the failure.","pos":[1300,1432]},{"content":"The framework throws this exception in some cases.","pos":[1433,1483]},{"content":"To throw a <ph id=\"ph1\">`CUserException`</ph> yourself, alert the user and then call the global function <ph id=\"ph2\">`AfxThrowUserException`</ph>.","pos":[1484,1595],"source":" To throw a `CUserException` yourself, alert the user and then call the global function `AfxThrowUserException`."},{"content":"In the example below, a function containing operations that may fail alerts the user and throws a <ph id=\"ph1\">`CUserException`</ph>.","pos":[1602,1717],"source":"In the example below, a function containing operations that may fail alerts the user and throws a `CUserException`."},{"content":"The calling function catches the exception and handles it specially:","pos":[1718,1786]},{"pos":[1793,1880],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCExceptions#24<ept id=\"p2\">](../../mfc/codesnippet/cpp/cuserexception-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCExceptions#24](../../mfc/codesnippet/cpp/cuserexception-class_1.cpp)]"},{"pos":[1887,2018],"content":"For more information on using <ph id=\"ph1\">`CUserException`</ph>, see the article <bpt id=\"p1\">[</bpt>Exception Handling (MFC)<ept id=\"p1\">](../../mfc/exception-handling-in-mfc.md)</ept>.","source":"For more information on using `CUserException`, see the article [Exception Handling (MFC)](../../mfc/exception-handling-in-mfc.md)."},{"pos":[2027,2048],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2052,2099],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[2106,2159],"content":"<bpt id=\"p1\">[</bpt>CException<ept id=\"p1\">](../../mfc/reference/cexception-class.md)</ept>","source":"[CException](../../mfc/reference/cexception-class.md)"},{"pos":[2166,2231],"content":"<bpt id=\"p1\">[</bpt>CSimpleException<ept id=\"p1\">](../../mfc/reference/csimpleexception-class.md)</ept>","source":"[CSimpleException](../../mfc/reference/csimpleexception-class.md)"},{"pos":[2263,2275],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2279,2299],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[2308,2316],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[2320,2368],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CException Class<ept id=\"p1\">](../../mfc/reference/cexception-class.md)</ept>","pos":[2371,2431],"source":" [CException Class](../../mfc/reference/cexception-class.md)"}],"content":"---\ntitle: \"CUserException Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CUserException\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operations [C++], stopping\"\n  - \"exceptions, throwing\"\n  - \"CUserException class\"\n  - \"errors [C++], trapping\"\n  - \"operations [C++]\"\n  - \"throwing exceptions, stopping user operations\"\nms.assetid: 2156ba6d-2cce-415a-9000-6f02c26fcd7d\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CUserException Class\nThrown to stop an end-user operation.  \n  \n## Syntax  \n  \n```  \nclass CUserException : public CSimpleException  \n```  \n  \n## Remarks  \n Use `CUserException` when you want to use the throw/catch exception mechanism for application-specific exceptions. \"User\" in the class name can be interpreted as \"my user did something exceptional that I need to handle.\"  \n  \n A `CUserException` is usually thrown after calling the global function `AfxMessageBox` to notify the user that an operation has failed. When you write an exception handler, handle the exception specially since the user usually has already been notified of the failure. The framework throws this exception in some cases. To throw a `CUserException` yourself, alert the user and then call the global function `AfxThrowUserException`.  \n  \n In the example below, a function containing operations that may fail alerts the user and throws a `CUserException`. The calling function catches the exception and handles it specially:  \n  \n [!code-cpp[NVC_MFCExceptions#24](../../mfc/codesnippet/cpp/cuserexception-class_1.cpp)]  \n  \n For more information on using `CUserException`, see the article [Exception Handling (MFC)](../../mfc/exception-handling-in-mfc.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CException](../../mfc/reference/cexception-class.md)  \n  \n [CSimpleException](../../mfc/reference/csimpleexception-class.md)  \n  \n `CUserException`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CException Class](../../mfc/reference/cexception-class.md)\n"}