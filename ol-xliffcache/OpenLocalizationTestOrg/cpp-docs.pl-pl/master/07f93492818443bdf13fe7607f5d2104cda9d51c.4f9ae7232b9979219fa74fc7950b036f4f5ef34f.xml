{"nodes":[{"pos":[12,73],"content":"strftime, wcsftime, _strftime_l, _wcsftime_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"strftime, wcsftime, _strftime_l, _wcsftime_l | Microsoft Docs","pos":[0,61]}]},{"pos":[1198,1242],"content":"strftime, wcsftime, _strftime_l, _wcsftime_l","linkify":"strftime, wcsftime, _strftime_l, _wcsftime_l","nodes":[{"content":"strftime, wcsftime, _strftime_l, _wcsftime_l","pos":[0,44]}]},{"content":"Format a time string.","pos":[1243,1264]},{"pos":[1273,1279],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1851,1861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Output string.","pos":[1878,1892]},{"content":"Size of the <ph id=\"ph1\">`strDest`</ph> buffer, measured in characters (<ph id=\"ph2\">`char`</ph> or <ph id=\"ph3\">`wchart_t`</ph>).","pos":[1912,1988],"source":" Size of the `strDest` buffer, measured in characters (`char` or `wchart_t`)."},{"content":"Format-control string.","pos":[2007,2029]},{"content":"<ph id=\"ph1\"> `tm`</ph> data structure.","pos":[2048,2069],"source":" `tm` data structure."},{"content":"The locale to use.","pos":[2088,2106]},{"pos":[2115,2127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2131,2262],"content":"<ph id=\"ph1\">`strftime`</ph> returns the number of characters placed in <ph id=\"ph2\">`strDest`</ph> and <ph id=\"ph3\">`wcsftime`</ph> returns the corresponding number of wide characters.","source":"`strftime` returns the number of characters placed in `strDest` and `wcsftime` returns the corresponding number of wide characters."},{"pos":[2269,2448],"content":"If the total number of characters, including the terminating null, is more than <ph id=\"ph1\">`maxsize`</ph>, both <ph id=\"ph2\">`strftime`</ph> and <ph id=\"ph3\">`wcsftime`</ph> return 0 and the contents of <ph id=\"ph4\">`strDest`</ph> are indeterminate.","source":"If the total number of characters, including the terminating null, is more than `maxsize`, both `strftime` and `wcsftime` return 0 and the contents of `strDest` are indeterminate."},{"content":"The number of characters in <ph id=\"ph1\">`strDest`</ph> is equal to the number of literal characters in <ph id=\"ph2\">`format`</ph> as well as any characters that may be added to <ph id=\"ph3\">`format`</ph> via formatting codes.","pos":[2455,2627],"source":"The number of characters in `strDest` is equal to the number of literal characters in `format` as well as any characters that may be added to `format` via formatting codes."},{"content":"The terminating null of a string is not counted in the return value.","pos":[2628,2696]},{"pos":[2705,2712],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`strftime`</ph> and <ph id=\"ph2\">`wcsftime`</ph> functions format the <ph id=\"ph3\">`tm`</ph> time value in <ph id=\"ph4\">`timeptr`</ph> according to the supplied <ph id=\"ph5\">`format`</ph> argument and store the result in the buffer <ph id=\"ph6\">`strDest`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2716,2887],"source":"The `strftime` and `wcsftime` functions format the `tm` time value in `timeptr` according to the supplied `format` argument and store the result in the buffer `strDest`*.*"},{"content":"At most, <ph id=\"ph1\">`maxsize`</ph> characters are placed in the string.","pos":[2888,2943],"source":" At most, `maxsize` characters are placed in the string."},{"content":"For a description of the fields in the <ph id=\"ph1\">`timeptr`</ph> structure, see <bpt id=\"p1\">[</bpt>asctime<ept id=\"p1\">](../../c-runtime-library/reference/asctime-wasctime.md)</ept>.","pos":[2944,3073],"source":" For a description of the fields in the `timeptr` structure, see [asctime](../../c-runtime-library/reference/asctime-wasctime.md)."},{"content":"<ph id=\"ph1\">`wcsftime`</ph> is the wide-character equivalent of <ph id=\"ph2\">`strftime`</ph>; its string-pointer argument points to a wide-character string.","pos":[3074,3195],"source":"`wcsftime` is the wide-character equivalent of `strftime`; its string-pointer argument points to a wide-character string."},{"content":"These functions behave identically otherwise.","pos":[3196,3241]},{"pos":[3249,3619],"content":"[!NOTE]\n In versions before Visual C++ 2005, the documentation described the `format` parameter of `wcsftime` as having the data type `const wchar_t *`, but the actual implementation of the `format` data type was `const char *`. The implementation of the `format`data type has been updated to reflect the previous and current documentation, that is, `const wchar_t *`.","leadings":["","> "],"nodes":[{"content":" In versions before Visual C++ 2005, the documentation described the `format` parameter of `wcsftime` as having the data type `const wchar_t *`, but the actual implementation of the `format` data type was `const char *`. The implementation of the `format`data type has been updated to reflect the previous and current documentation, that is, `const wchar_t *`.","pos":[8,368],"nodes":[{"content":"In versions before Visual C++ 2005, the documentation described the <ph id=\"ph1\">`format`</ph> parameter of <ph id=\"ph2\">`wcsftime`</ph> as having the data type <ph id=\"ph3\">`const wchar_t *`</ph>, but the actual implementation of the <ph id=\"ph4\">`format`</ph> data type was <ph id=\"ph5\">`const char *`</ph>.","pos":[1,220],"source":" In versions before Visual C++ 2005, the documentation described the `format` parameter of `wcsftime` as having the data type `const wchar_t *`, but the actual implementation of the `format` data type was `const char *`."},{"content":"The implementation of the <ph id=\"ph1\">`format`</ph>data type has been updated to reflect the previous and current documentation, that is, <ph id=\"ph2\">`const wchar_t *`</ph>.","pos":[221,360],"source":" The implementation of the `format`data type has been updated to reflect the previous and current documentation, that is, `const wchar_t *`."}]}]},{"content":"This function validates its parameters.","pos":[3626,3665]},{"content":"If <ph id=\"ph1\">`strDest`</ph>, <ph id=\"ph2\">`format`</ph>, or<ph id=\"ph3\">`timeptr`</ph> is a null pointer, or if the <ph id=\"ph4\">`tm`</ph> data structure addressed by <ph id=\"ph5\">`timeptr`</ph> is invalid (for example, if it contains out of range values for the time or date), or if the <ph id=\"ph6\">`format`</ph> string contains an invalid formatting code, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3666,4050],"source":" If `strDest`, `format`, or`timeptr` is a null pointer, or if the `tm` data structure addressed by `timeptr` is invalid (for example, if it contains out of range values for the time or date), or if the `format` string contains an invalid formatting code, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the function returns 0 and sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[4051,4140],"source":" If execution is allowed to continue, the function returns 0 and sets `errno` to `EINVAL`."},{"pos":[4150,4179],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[4186,4201]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[4202,4230],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4231,4244]},{"content":"_UNICODE defined","pos":[4245,4261]},{"content":"The <ph id=\"ph1\">`format`</ph> argument consists of one or more codes; as in <ph id=\"ph2\">`printf`</ph>, the formatting codes are preceded by a percent sign (<ph id=\"ph3\">`%`</ph>).","pos":[4426,4553],"source":"The `format` argument consists of one or more codes; as in `printf`, the formatting codes are preceded by a percent sign (`%`)."},{"content":"Characters that do not begin with <ph id=\"ph1\">`%`</ph> are copied unchanged to <ph id=\"ph2\">`strDest`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[4554,4628],"source":" Characters that do not begin with `%` are copied unchanged to `strDest`*.*"},{"content":"The <ph id=\"ph1\">`LC_TIME`</ph> category of the current locale affects the output formatting of <ph id=\"ph2\">`strftime`</ph>.","pos":[4629,4718],"source":" The `LC_TIME` category of the current locale affects the output formatting of `strftime`."},{"content":"(For more information on <ph id=\"ph1\">`LC_TIME`</ph>, see <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept>.) The functions without the <ph id=\"ph2\">`_l`</ph> suffix use the currently set locale.","pos":[4719,4899],"source":" (For more information on `LC_TIME`, see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md).) The functions without the `_l` suffix use the currently set locale."},{"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they take the locale as a parameter and use that instead of the currently set locale.","pos":[4900,5064],"source":" The versions of these functions with the `_l` suffix are identical except that they take the locale as a parameter and use that instead of the currently set locale."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[5065,5135],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"pos":[5142,5195],"content":"The formatting codes for <ph id=\"ph1\">`strftime`</ph> are listed below:","source":"The formatting codes for `strftime` are listed below:"},{"content":"Abbreviated weekday name","pos":[5210,5234]},{"content":"Full weekday name","pos":[5249,5266]},{"content":"Abbreviated month name","pos":[5281,5303]},{"content":"Full month name","pos":[5318,5333]},{"content":"Date and time representation appropriate for locale","pos":[5348,5399]},{"content":"Day of month as decimal number (01 – 31)","pos":[5414,5454]},{"content":"Hour in 24-hour format (00 – 23)","pos":[5469,5501]},{"content":"Hour in 12-hour format (01 – 12)","pos":[5516,5548]},{"content":"Day of year as decimal number (001 – 366)","pos":[5563,5604]},{"content":"Month as decimal number (01 – 12)","pos":[5619,5652]},{"content":"Minute as decimal number (00 – 59)","pos":[5667,5701]},{"content":"Current locale's A.M./P.M.","pos":[5716,5742]},{"content":"indicator for 12-hour clock","pos":[5743,5770]},{"content":"Second as decimal number (00 – 59)","pos":[5785,5819]},{"content":"Week of year as decimal number, with Sunday as first day of week (00 – 53)","pos":[5834,5908]},{"content":"Weekday as decimal number (0 – 6; Sunday is 0)","pos":[5923,5969]},{"content":"Week of year as decimal number, with Monday as first day of week (00 – 53)","pos":[5984,6058]},{"content":"Date representation for current locale","pos":[6073,6111]},{"content":"Time representation for current locale","pos":[6126,6164]},{"content":"Year without century, as decimal number (00 – 99)","pos":[6179,6228]},{"content":"Year with century, as decimal number","pos":[6243,6279]},{"content":"Either the time-zone name or time zone abbreviation, depending on registry settings; no characters if time zone is unknown","pos":[6298,6420]},{"content":"Percent sign","pos":[6435,6447]},{"content":"As in the <ph id=\"ph1\">`printf`</ph> function, the <ph id=\"ph2\">`#`</ph> flag may prefix any formatting code.","pos":[6454,6527],"source":"As in the `printf` function, the `#` flag may prefix any formatting code."},{"content":"In that case, the meaning of the format code is changed as follows.","pos":[6528,6595]},{"content":"Format code","pos":[6602,6613]},{"content":"Meaning","pos":[6614,6621]},{"pos":[6708,6728],"content":"<ph id=\"ph1\">`#`</ph> flag is ignored.","source":"`#` flag is ignored."},{"content":"Long date and time representation, appropriate for current locale.","pos":[6739,6805]},{"content":"For example: \"Tuesday, March 14, 1995, 12:41:29\".","pos":[6806,6855]},{"content":"Long date representation, appropriate to current locale.","pos":[6866,6922]},{"content":"For example: \"Tuesday, March 14, 1995\".","pos":[6923,6962]},{"content":"Remove leading zeros (if any).","pos":[7028,7058]},{"pos":[7068,7080],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[7087,7094]},{"content":"Required header","pos":[7095,7110]},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt;","pos":[7166,7175],"source":"\\<time.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[7191,7214],"source":"\\<time.h> or \\<wchar.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt;","pos":[7233,7242],"source":"\\<time.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[7261,7284],"source":"\\<time.h> or \\<wchar.h>"},{"pos":[7292,7416],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[7425,7432],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7436,7520],"content":"See the example for <bpt id=\"p1\">[</bpt>time<ept id=\"p1\">](../../c-runtime-library/reference/time-time32-time64.md)</ept>.","source":"See the example for [time](../../c-runtime-library/reference/time-time32-time64.md)."},{"pos":[7529,7554],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[7564,7680],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::ToLongDateString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.tolongdatestring.aspx)</ept>","source":"[System::DateTime::ToLongDateString](https://msdn.microsoft.com/en-us/library/system.datetime.tolongdatestring.aspx)"},{"pos":[7690,7806],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::ToLongTimeString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.tolongtimestring.aspx)</ept>","source":"[System::DateTime::ToLongTimeString](https://msdn.microsoft.com/en-us/library/system.datetime.tolongtimestring.aspx)"},{"pos":[7816,7934],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::ToShortDateString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.toshortdatestring.aspx)</ept>","source":"[System::DateTime::ToShortDateString](https://msdn.microsoft.com/en-us/library/system.datetime.toshortdatestring.aspx)"},{"pos":[7944,8062],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::ToShortTimeString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.toshorttimestring.aspx)</ept>","source":"[System::DateTime::ToShortTimeString](https://msdn.microsoft.com/en-us/library/system.datetime.toshorttimestring.aspx)"},{"pos":[8072,8172],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::ToString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.tostring.aspx)</ept>","source":"[System::DateTime::ToString](https://msdn.microsoft.com/en-us/library/system.datetime.tostring.aspx)"},{"pos":[8181,8189],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept><ph id=\"ph1\"> </ph>","pos":[8193,8237],"source":"[Locale](../../c-runtime-library/locale.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Time Management<ept id=\"p1\">](../../c-runtime-library/time-management.md)</ept><ph id=\"ph1\"> </ph>","pos":[8240,8303],"source":" [Time Management](../../c-runtime-library/time-management.md) "},{"content":"<bpt id=\"p1\"> [</bpt>String Manipulation<ept id=\"p1\">](../../c-runtime-library/string-manipulation-crt.md)</ept><ph id=\"ph1\"> </ph>","pos":[8306,8381],"source":" [String Manipulation](../../c-runtime-library/string-manipulation-crt.md) "},{"content":"<bpt id=\"p1\"> [</bpt>localeconv<ept id=\"p1\">](../../c-runtime-library/reference/localeconv.md)</ept><ph id=\"ph1\"> </ph>","pos":[8384,8447],"source":" [localeconv](../../c-runtime-library/reference/localeconv.md) "},{"content":"<bpt id=\"p1\"> [</bpt>setlocale, _wsetlocale<ept id=\"p1\">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept><ph id=\"ph1\"> </ph>","pos":[8450,8535],"source":" [setlocale, _wsetlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md) "},{"content":"<bpt id=\"p1\"> [</bpt>strcoll Functions<ept id=\"p1\">](../../c-runtime-library/strcoll-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[8538,8605],"source":" [strcoll Functions](../../c-runtime-library/strcoll-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>strxfrm, wcsxfrm, _strxfrm_l, _wcsxfrm_l<ept id=\"p1\">](../../c-runtime-library/reference/strxfrm-wcsxfrm-strxfrm-l-wcsxfrm-l.md)</ept>","pos":[8608,8725],"source":" [strxfrm, wcsxfrm, _strxfrm_l, _wcsxfrm_l](../../c-runtime-library/reference/strxfrm-wcsxfrm-strxfrm-l-wcsxfrm-l.md)"}],"content":"---\ntitle: \"strftime, wcsftime, _strftime_l, _wcsftime_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"strftime\"\n  - \"_wcsftime_l\"\n  - \"_strftime_l\"\n  - \"wcsftime\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_tcsftime\"\n  - \"strftime\"\n  - \"wcsftime\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_strftime_l function\"\n  - \"strftime function\"\n  - \"tcsftime function\"\n  - \"_wcsftime_l function\"\n  - \"wcsftime function\"\n  - \"_tcsftime function\"\n  - \"time strings\"\nms.assetid: 6330ff20-4729-4c4a-82af-932915d893ea\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# strftime, wcsftime, _strftime_l, _wcsftime_l\nFormat a time string.  \n  \n## Syntax  \n  \n```  \nsize_t strftime(  \n   char *strDest,  \n   size_t maxsize,  \n   const char *format,  \n   const struct tm *timeptr   \n);  \nsize_t _strftime_l(  \n   char *strDest,  \n   size_t maxsize,  \n   const char *format,  \n   const struct tm *timeptr,  \n   _locale_t locale  \n);  \nsize_t wcsftime(  \n   wchar_t *strDest,  \n   size_t maxsize,  \n   const wchar_t *format,  \n   const struct tm *timeptr   \n);  \nsize_t _wcsftime_l(  \n   wchar_t *strDest,  \n   size_t maxsize,  \n   const wchar_t *format,  \n   const struct tm *timeptr,  \n   _locale_t locale  \n);  \n```  \n  \n#### Parameters  \n `strDest`  \n Output string.  \n  \n `maxsize`  \n Size of the `strDest` buffer, measured in characters (`char` or `wchart_t`).  \n  \n `format`  \n Format-control string.  \n  \n `timeptr`  \n `tm` data structure.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n `strftime` returns the number of characters placed in `strDest` and `wcsftime` returns the corresponding number of wide characters.  \n  \n If the total number of characters, including the terminating null, is more than `maxsize`, both `strftime` and `wcsftime` return 0 and the contents of `strDest` are indeterminate.  \n  \n The number of characters in `strDest` is equal to the number of literal characters in `format` as well as any characters that may be added to `format` via formatting codes. The terminating null of a string is not counted in the return value.  \n  \n## Remarks  \n The `strftime` and `wcsftime` functions format the `tm` time value in `timeptr` according to the supplied `format` argument and store the result in the buffer `strDest`*.* At most, `maxsize` characters are placed in the string. For a description of the fields in the `timeptr` structure, see [asctime](../../c-runtime-library/reference/asctime-wasctime.md). `wcsftime` is the wide-character equivalent of `strftime`; its string-pointer argument points to a wide-character string. These functions behave identically otherwise.  \n  \n> [!NOTE]\n>  In versions before Visual C++ 2005, the documentation described the `format` parameter of `wcsftime` as having the data type `const wchar_t *`, but the actual implementation of the `format` data type was `const char *`. The implementation of the `format`data type has been updated to reflect the previous and current documentation, that is, `const wchar_t *`.  \n  \n This function validates its parameters. If `strDest`, `format`, or`timeptr` is a null pointer, or if the `tm` data structure addressed by `timeptr` is invalid (for example, if it contains out of range values for the time or date), or if the `format` string contains an invalid formatting code, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the function returns 0 and sets `errno` to `EINVAL`.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tcsftime`|`strftime`|`strftime`|`wcsftime`|  \n  \n The `format` argument consists of one or more codes; as in `printf`, the formatting codes are preceded by a percent sign (`%`). Characters that do not begin with `%` are copied unchanged to `strDest`*.* The `LC_TIME` category of the current locale affects the output formatting of `strftime`. (For more information on `LC_TIME`, see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md).) The functions without the `_l` suffix use the currently set locale. The versions of these functions with the `_l` suffix are identical except that they take the locale as a parameter and use that instead of the currently set locale. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n The formatting codes for `strftime` are listed below:  \n  \n `%a`  \n Abbreviated weekday name  \n  \n `%A`  \n Full weekday name  \n  \n `%b`  \n Abbreviated month name  \n  \n `%B`  \n Full month name  \n  \n `%c`  \n Date and time representation appropriate for locale  \n  \n `%d`  \n Day of month as decimal number (01 – 31)  \n  \n `%H`  \n Hour in 24-hour format (00 – 23)  \n  \n `%I`  \n Hour in 12-hour format (01 – 12)  \n  \n `%j`  \n Day of year as decimal number (001 – 366)  \n  \n `%m`  \n Month as decimal number (01 – 12)  \n  \n `%M`  \n Minute as decimal number (00 – 59)  \n  \n `%p`  \n Current locale's A.M./P.M. indicator for 12-hour clock  \n  \n `%S`  \n Second as decimal number (00 – 59)  \n  \n `%U`  \n Week of year as decimal number, with Sunday as first day of week (00 – 53)  \n  \n `%w`  \n Weekday as decimal number (0 – 6; Sunday is 0)  \n  \n `%W`  \n Week of year as decimal number, with Monday as first day of week (00 – 53)  \n  \n `%x`  \n Date representation for current locale  \n  \n `%X`  \n Time representation for current locale  \n  \n `%y`  \n Year without century, as decimal number (00 – 99)  \n  \n `%Y`  \n Year with century, as decimal number  \n  \n `%z, %Z`  \n Either the time-zone name or time zone abbreviation, depending on registry settings; no characters if time zone is unknown  \n  \n `%%`  \n Percent sign  \n  \n As in the `printf` function, the `#` flag may prefix any formatting code. In that case, the meaning of the format code is changed as follows.  \n  \n|Format code|Meaning|  \n|-----------------|-------------|  \n|`%#a, %#A, %#b, %#B, %#p, %#X, %#z, %#Z, %#%`|`#` flag is ignored.|  \n|`%#c`|Long date and time representation, appropriate for current locale. For example: \"Tuesday, March 14, 1995, 12:41:29\".|  \n|`%#x`|Long date representation, appropriate to current locale. For example: \"Tuesday, March 14, 1995\".|  \n|`%#d, %#H, %#I, %#j, %#m, %#M, %#S, %#U, %#w, %#W, %#y, %#Y`|Remove leading zeros (if any).|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`strftime`|\\<time.h>|  \n|`wcsftime`|\\<time.h> or \\<wchar.h>|  \n|`_strftime_l`|\\<time.h>|  \n|`_wcsftime_l`|\\<time.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n See the example for [time](../../c-runtime-library/reference/time-time32-time64.md).  \n  \n## .NET Framework Equivalent  \n  \n-   [System::DateTime::ToLongDateString](https://msdn.microsoft.com/en-us/library/system.datetime.tolongdatestring.aspx)  \n  \n-   [System::DateTime::ToLongTimeString](https://msdn.microsoft.com/en-us/library/system.datetime.tolongtimestring.aspx)  \n  \n-   [System::DateTime::ToShortDateString](https://msdn.microsoft.com/en-us/library/system.datetime.toshortdatestring.aspx)  \n  \n-   [System::DateTime::ToShortTimeString](https://msdn.microsoft.com/en-us/library/system.datetime.toshorttimestring.aspx)  \n  \n-   [System::DateTime::ToString](https://msdn.microsoft.com/en-us/library/system.datetime.tostring.aspx)  \n  \n## See Also  \n [Locale](../../c-runtime-library/locale.md)   \n [Time Management](../../c-runtime-library/time-management.md)   \n [String Manipulation](../../c-runtime-library/string-manipulation-crt.md)   \n [localeconv](../../c-runtime-library/reference/localeconv.md)   \n [setlocale, _wsetlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md)   \n [strcoll Functions](../../c-runtime-library/strcoll-functions.md)   \n [strxfrm, wcsxfrm, _strxfrm_l, _wcsxfrm_l](../../c-runtime-library/reference/strxfrm-wcsxfrm-strxfrm-l-wcsxfrm-l.md)"}