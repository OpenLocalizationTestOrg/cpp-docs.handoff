{"nodes":[{"pos":[12,57],"content":"hash_map::key_comp (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_map::key_comp (STL-CLR) | Microsoft Docs","pos":[0,45]}]},{"content":"hash_map::key_comp (STL/CLR)","pos":[641,669]},{"content":"Copies the ordering delegate for two keys.","pos":[670,712]},{"content":"Syntax","pos":[721,727]},{"content":"Remarks","pos":[777,784]},{"content":"The member function returns the ordering delegate used to order the controlled sequence.","pos":[788,876]},{"content":"You use it to compare two keys.","pos":[877,908]},{"content":"Example","pos":[917,924]},{"content":"Requirements","pos":[2154,2166]},{"pos":[2170,2200],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[2207,2228],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2237,2245]},{"content":"hash_map (STL/CLR)","pos":[2250,2268]},{"content":"hash_map::key_compare (STL/CLR)","pos":[2306,2337]},{"content":"hash_map::key_type (STL/CLR)","pos":[2387,2415]}],"content":"---\ntitle: \"hash_map::key_comp (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_map::key_comp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"key_comp member [STL/CLR]\"\nms.assetid: 08bd31cc-3a7c-49a3-ac48-089262b3bd44\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_map::key_comp (STL/CLR)\nCopies the ordering delegate for two keys.  \n  \n## Syntax  \n  \n```  \nkey_compare^key_comp();  \n```  \n  \n## Remarks  \n The member function returns the ordering delegate used to order the controlled sequence. You use it to compare two keys.  \n  \n## Example  \n  \n```  \n// cliext_hash_map_key_comp.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_map<wchar_t, int> Myhash_map;   \nint main()   \n    {   \n    Myhash_map c1;   \n    Myhash_map::key_compare^ kcomp = c1.key_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        kcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        kcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        kcomp(L'b', L'a'));   \n    System::Console::WriteLine();   \n  \n// test a different ordering rule   \n    Myhash_map c2 = cliext::greater<wchar_t>();   \n    kcomp = c2.key_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        kcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        kcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        kcomp(L'b', L'a'));   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ncompare(L'a', L'a') = True  \ncompare(L'a', L'b') = True  \ncompare(L'b', L'a') = False  \n  \ncompare(L'a', L'a') = False  \ncompare(L'a', L'b') = False  \ncompare(L'b', L'a') = True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_map (STL/CLR)](../dotnet/hash-map-stl-clr.md)   \n [hash_map::key_compare (STL/CLR)](../dotnet/hash-map-key-compare-stl-clr.md)   \n [hash_map::key_type (STL/CLR)](../dotnet/hash-map-key-type-stl-clr.md)"}