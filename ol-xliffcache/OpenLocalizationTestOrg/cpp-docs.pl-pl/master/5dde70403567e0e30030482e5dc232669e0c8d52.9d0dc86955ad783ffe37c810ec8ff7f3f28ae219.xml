{"nodes":[{"pos":[12,65],"content":"hash_multimap::mapped_type (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multimap::mapped_type (STL-CLR) | Microsoft Docs","pos":[0,53]}]},{"content":"hash_multimap::mapped_type (STL/CLR)","pos":[660,696]},{"content":"The type of a mapped value associated with each key.","pos":[697,749]},{"content":"Syntax","pos":[758,764]},{"content":"Remarks","pos":[818,825]},{"pos":[829,887],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`Mapped`</ph>.","source":"The type is a synonym for the template parameter `Mapped`."},{"content":"Example","pos":[896,903]},{"content":"Requirements","pos":[1724,1736]},{"pos":[1740,1770],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[1777,1798],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1807,1815]},{"content":"hash_multimap (STL/CLR)","pos":[1820,1843]},{"content":"hash_multimap::key_compare (STL/CLR)","pos":[1886,1922]},{"content":"hash_multimap::value_type (STL/CLR)","pos":[1977,2012]}],"content":"---\ntitle: \"hash_multimap::mapped_type (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_multimap::mapped_type\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"mapped_type member [STL/CLR]\"\nms.assetid: b97db6a7-9d4e-42f0-a725-ac309f5374bf\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multimap::mapped_type (STL/CLR)\nThe type of a mapped value associated with each key.  \n  \n## Syntax  \n  \n```  \ntypedef Mapped mapped_type;  \n```  \n  \n## Remarks  \n The type is a synonym for the template parameter `Mapped`.  \n  \n## Example  \n  \n```  \n// cliext_hash_multimap_mapped_type.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_multimap<wchar_t, int> Myhash_multimap;   \nint main()   \n    {   \n    Myhash_multimap c1;   \n    c1.insert(Myhash_multimap::make_value(L'a', 1));   \n    c1.insert(Myhash_multimap::make_value(L'b', 2));   \n    c1.insert(Myhash_multimap::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\" using mapped_type   \n    for (Myhash_multimap::iterator it = c1.begin(); it != c1.end(); ++it)   \n        {   // store element in mapped_type object   \n        Myhash_multimap::mapped_type val = it->second;   \n  \n        System::Console::Write(\" {0}\", val);   \n        }   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n1 2 3  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_multimap (STL/CLR)](../dotnet/hash-multimap-stl-clr.md)   \n [hash_multimap::key_compare (STL/CLR)](../dotnet/hash-multimap-key-compare-stl-clr.md)   \n [hash_multimap::value_type (STL/CLR)](../dotnet/hash-multimap-value-type-stl-clr.md)"}