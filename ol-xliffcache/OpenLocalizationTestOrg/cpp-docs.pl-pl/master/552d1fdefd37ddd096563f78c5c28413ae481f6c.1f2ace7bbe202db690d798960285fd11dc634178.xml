{"nodes":[{"pos":[12,40],"content":"agent Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"agent Class | Microsoft Docs","pos":[0,28]}]},{"content":"agent Class","pos":[633,644]},{"content":"A class intended to be used as a base class for all independent agents.","pos":[645,716]},{"content":"It is used to hide state from other agents and interact using message-passing.","pos":[717,795]},{"content":"Syntax","pos":[804,810]},{"content":"Members","pos":[845,852]},{"content":"Public Constructors","pos":[862,881]},{"content":"Name","pos":[888,892]},{"content":"Description","pos":[893,904]},{"content":"agent::agent Constructor","pos":[943,967]},{"content":"Overloaded.","pos":[976,987]},{"content":"Constructs an agent.","pos":[988,1008]},{"content":"agent::~agent Destructor","pos":[1014,1038]},{"content":"Destroys the agent.","pos":[1047,1066]},{"content":"Public Methods","pos":[1077,1091]},{"content":"Name","pos":[1098,1102]},{"content":"Description","pos":[1103,1114]},{"content":"agent::cancel Method","pos":[1153,1173]},{"pos":[1184,1288],"content":"Moves an agent from either the <ph id=\"ph1\">`agent_created`</ph> or <ph id=\"ph2\">`agent_runnable`</ph> states to the <ph id=\"ph3\">`agent_canceled`</ph> state.","source":"Moves an agent from either the `agent_created` or `agent_runnable` states to the `agent_canceled` state."},{"content":"agent::start Method","pos":[1294,1313]},{"pos":[1323,1431],"content":"Moves an agent from the <ph id=\"ph1\">`agent_created`</ph> state to the <ph id=\"ph2\">`agent_runnable`</ph> state, and schedules it for execution.","source":"Moves an agent from the `agent_created` state to the `agent_runnable` state, and schedules it for execution."},{"content":"agent::status Method","pos":[1437,1457]},{"content":"A synchronous source of status information from the agent.","pos":[1468,1526]},{"content":"agent::status_port Method","pos":[1532,1557]},{"content":"An asynchronous source of status information from the agent.","pos":[1573,1633]},{"content":"agent::wait Method","pos":[1639,1657]},{"content":"Waits for an agent to complete its task.","pos":[1666,1706]},{"content":"agent::wait_for_all Method","pos":[1712,1738]},{"content":"Waits for all of the specified agents to complete their tasks.","pos":[1755,1817]},{"content":"agent::wait_for_one Method","pos":[1823,1849]},{"content":"Waits for any one of the specified agents to complete its task.","pos":[1866,1929]},{"content":"Protected Methods","pos":[1940,1957]},{"content":"Name","pos":[1964,1968]},{"content":"Description","pos":[1969,1980]},{"content":"agent::done Method","pos":[2019,2037]},{"pos":[2046,2130],"content":"Moves an agent into the <ph id=\"ph1\">`agent_done`</ph> state, indicating that the agent has completed.","source":"Moves an agent into the `agent_done` state, indicating that the agent has completed."},{"content":"agent::run Method","pos":[2136,2153]},{"content":"Represents the main task of an agent.","pos":[2161,2198]},{"content":"should be overridden in a derived class, and specifies what the agent should do after it has been started.","pos":[2205,2311]},{"content":"Remarks","pos":[2321,2328]},{"pos":[2332,2429],"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Agents<ept id=\"p1\">](../../../parallel/concrt/asynchronous-agents.md)</ept>.","source":"For more information, see [Asynchronous Agents](../../../parallel/concrt/asynchronous-agents.md)."},{"content":"Inheritance Hierarchy","pos":[2438,2459]},{"content":"Requirements","pos":[2479,2491]},{"pos":[2495,2515],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[2522,2548],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2579,2603],"content":"agent::agent Constructor"},{"content":"Constructs an agent.","pos":[2607,2627]},{"content":"Parameters","pos":[2723,2733]},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object within which the execution task of the agent is scheduled.","pos":[2754,2835],"source":" The `Scheduler` object within which the execution task of the agent is scheduled."},{"content":"The <ph id=\"ph1\">`ScheduleGroup`</ph> object within which the execution task of the agent is scheduled.","pos":[2855,2940],"source":" The `ScheduleGroup` object within which the execution task of the agent is scheduled."},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object used is implied by the schedule group.","pos":[2941,3002],"source":" The `Scheduler` object used is implied by the schedule group."},{"content":"Remarks","pos":[3012,3019]},{"pos":[3023,3126],"content":"The runtime uses the default scheduler if you do not specify the <ph id=\"ph1\">`_PScheduler`</ph> or <ph id=\"ph2\">`_PGroup`</ph> parameters.","source":"The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PGroup` parameters."},{"pos":[3157,3181],"content":"agent::~agent Destructor"},{"content":"Destroys the agent.","pos":[3185,3204]},{"content":"Remarks","pos":[3245,3252]},{"content":"It is an error to destroy an agent that is not in a terminal state (either <ph id=\"ph1\">`agent_done`</ph> or <ph id=\"ph2\">`agent_canceled`</ph>).","pos":[3256,3365],"source":"It is an error to destroy an agent that is not in a terminal state (either `agent_done` or `agent_canceled`)."},{"content":"This can be avoided by waiting for the agent to reach a terminal state in the destructor of a class that inherits from the <ph id=\"ph1\">`agent`</ph> class.","pos":[3366,3503],"source":" This can be avoided by waiting for the agent to reach a terminal state in the destructor of a class that inherits from the `agent` class."},{"pos":[3536,3556],"content":"agent::cancel Method"},{"pos":[3560,3664],"content":"Moves an agent from either the <ph id=\"ph1\">`agent_created`</ph> or <ph id=\"ph2\">`agent_runnable`</ph> states to the <ph id=\"ph3\">`agent_canceled`</ph> state.","source":"Moves an agent from either the `agent_created` or `agent_runnable` states to the `agent_canceled` state."},{"content":"Return Value","pos":[3702,3714]},{"content":"if the agent was canceled, <ph id=\"ph1\">`false`</ph> otherwise.","pos":[3725,3770],"source":" if the agent was canceled, `false` otherwise."},{"content":"An agent cannot be canceled if it has already started running or has already completed.","pos":[3771,3858]},{"pos":[3889,3907],"content":"agent::done Method"},{"pos":[3911,3995],"content":"Moves an agent into the <ph id=\"ph1\">`agent_done`</ph> state, indicating that the agent has completed.","source":"Moves an agent into the `agent_done` state, indicating that the agent has completed."},{"content":"Return Value","pos":[4031,4043]},{"content":"if the agent is moved to the <ph id=\"ph1\">`agent_done`</ph> state, <ph id=\"ph2\">`false`</ph> otherwise.","pos":[4054,4121],"source":" if the agent is moved to the `agent_done` state, `false` otherwise."},{"content":"An agent that has been canceled cannot be moved to the <ph id=\"ph1\">`agent_done`</ph> state.","pos":[4122,4196],"source":" An agent that has been canceled cannot be moved to the `agent_done` state."},{"content":"Remarks","pos":[4206,4213]},{"pos":[4217,4334],"content":"This method should be called at the end of the <ph id=\"ph1\">`run`</ph> method, when you know the execution of your agent has completed.","source":"This method should be called at the end of the `run` method, when you know the execution of your agent has completed."},{"pos":[4364,4381],"content":"agent::run Method"},{"content":"Represents the main task of an agent.","pos":[4385,4422]},{"content":"should be overridden in a derived class, and specifies what the agent should do after it has been started.","pos":[4429,4535]},{"content":"Remarks","pos":[4582,4589]},{"content":"The agent status is changed to <ph id=\"ph1\">`agent_started`</ph> right before this method is invoked.","pos":[4593,4676],"source":"The agent status is changed to `agent_started` right before this method is invoked."},{"content":"The method should invoke <ph id=\"ph1\">`done`</ph> on the agent with an appropriate status before returning, and may not throw any exceptions.","pos":[4677,4800],"source":" The method should invoke `done` on the agent with an appropriate status before returning, and may not throw any exceptions."},{"pos":[4832,4851],"content":"agent::start Method"},{"pos":[4855,4963],"content":"Moves an agent from the <ph id=\"ph1\">`agent_created`</ph> state to the <ph id=\"ph2\">`agent_runnable`</ph> state, and schedules it for execution.","source":"Moves an agent from the `agent_created` state to the `agent_runnable` state, and schedules it for execution."},{"content":"Return Value","pos":[5000,5012]},{"content":"if the agent started correctly, <ph id=\"ph1\">`false`</ph> otherwise.","pos":[5023,5073],"source":" if the agent started correctly, `false` otherwise."},{"content":"An agent that has been canceled cannot be started.","pos":[5074,5124]},{"pos":[5157,5177],"content":"agent::status Method"},{"content":"A synchronous source of status information from the agent.","pos":[5181,5239]},{"content":"Return Value","pos":[5285,5297]},{"content":"Returns the current state of the agent.","pos":[5301,5340]},{"content":"Note that this returned state could change immediately after being returned.","pos":[5341,5417]},{"pos":[5455,5480],"content":"agent::status_port Method"},{"content":"An asynchronous source of status information from the agent.","pos":[5484,5544]},{"content":"Return Value","pos":[5605,5617]},{"content":"Returns a message source that can send messages about the current state of the agent.","pos":[5621,5706]},{"pos":[5737,5755],"content":"agent::wait Method"},{"content":"Waits for an agent to complete its task.","pos":[5759,5799]},{"content":"Parameters","pos":[5943,5953]},{"content":"A pointer to the agent to wait for.","pos":[5970,6005]},{"content":"The maximum time for which to wait, in milliseconds.","pos":[6026,6078]},{"content":"Return Value","pos":[6088,6100]},{"content":"The <ph id=\"ph1\">`agent_status`</ph> of the agent when the wait completes.","pos":[6104,6160],"source":"The `agent_status` of the agent when the wait completes."},{"content":"This can either be <ph id=\"ph1\">`agent_canceled`</ph> or <ph id=\"ph2\">`agent_done`</ph>.","pos":[6161,6213],"source":" This can either be `agent_canceled` or `agent_done`."},{"content":"Remarks","pos":[6223,6230]},{"pos":[6234,6327],"content":"An agent task is completed when the agent enters the <ph id=\"ph1\">`agent_canceled`</ph> or <ph id=\"ph2\">`agent_done`</ph> states.","source":"An agent task is completed when the agent enters the `agent_canceled` or `agent_done` states."},{"pos":[6334,6586],"content":"If the parameter <ph id=\"ph1\">`_Timeout`</ph> has a value other than the constant <ph id=\"ph2\">`COOPERATIVE_TIMEOUT_INFINITE`</ph>, the exception <bpt id=\"p1\">[</bpt>operation_timed_out<ept id=\"p1\">](operation-timed-out-class.md)</ept> is thrown if the specified amount of time expires before the agent has completed its task.","source":"If the parameter `_Timeout` has a value other than the constant `COOPERATIVE_TIMEOUT_INFINITE`, the exception [operation_timed_out](operation-timed-out-class.md) is thrown if the specified amount of time expires before the agent has completed its task."},{"pos":[6625,6651],"content":"agent::wait_for_all Method"},{"content":"Waits for all of the specified agents to complete their tasks.","pos":[6655,6717]},{"content":"Parameters","pos":[6950,6960]},{"content":"The number of agent pointers present in the array <ph id=\"ph1\">`_PAgents`</ph>.","pos":[6975,7036],"source":" The number of agent pointers present in the array `_PAgents`."},{"content":"An array of pointers to the agents to wait for.","pos":[7057,7104]},{"content":"A pointer to an array of agent statuses.","pos":[7125,7165]},{"content":"Each status value will represent the status of the corresponding agent when the method returns.","pos":[7166,7261]},{"content":"The maximum time for which to wait, in milliseconds.","pos":[7282,7334]},{"content":"Remarks","pos":[7344,7351]},{"pos":[7355,7448],"content":"An agent task is completed when the agent enters the <ph id=\"ph1\">`agent_canceled`</ph> or <ph id=\"ph2\">`agent_done`</ph> states.","source":"An agent task is completed when the agent enters the `agent_canceled` or `agent_done` states."},{"pos":[7455,7707],"content":"If the parameter <ph id=\"ph1\">`_Timeout`</ph> has a value other than the constant <ph id=\"ph2\">`COOPERATIVE_TIMEOUT_INFINITE`</ph>, the exception <bpt id=\"p1\">[</bpt>operation_timed_out<ept id=\"p1\">](operation-timed-out-class.md)</ept> is thrown if the specified amount of time expires before the agent has completed its task.","source":"If the parameter `_Timeout` has a value other than the constant `COOPERATIVE_TIMEOUT_INFINITE`, the exception [operation_timed_out](operation-timed-out-class.md) is thrown if the specified amount of time expires before the agent has completed its task."},{"pos":[7746,7772],"content":"agent::wait_for_one Method"},{"content":"Waits for any one of the specified agents to complete its task.","pos":[7776,7839]},{"content":"Parameters","pos":[8060,8070]},{"content":"The number of agent pointers present in the array <ph id=\"ph1\">`_PAgents`</ph>.","pos":[8085,8146],"source":" The number of agent pointers present in the array `_PAgents`."},{"content":"An array of pointers to the agents to wait for.","pos":[8167,8214]},{"content":"A reference to a variable where the agent status will be placed.","pos":[8234,8298]},{"content":"A reference to a variable where the agent index will be placed.","pos":[8317,8380]},{"content":"The maximum time for which to wait, in milliseconds.","pos":[8401,8453]},{"content":"Remarks","pos":[8463,8470]},{"pos":[8474,8567],"content":"An agent task is completed when the agent enters the <ph id=\"ph1\">`agent_canceled`</ph> or <ph id=\"ph2\">`agent_done`</ph> states.","source":"An agent task is completed when the agent enters the `agent_canceled` or `agent_done` states."},{"pos":[8574,8826],"content":"If the parameter <ph id=\"ph1\">`_Timeout`</ph> has a value other than the constant <ph id=\"ph2\">`COOPERATIVE_TIMEOUT_INFINITE`</ph>, the exception <bpt id=\"p1\">[</bpt>operation_timed_out<ept id=\"p1\">](operation-timed-out-class.md)</ept> is thrown if the specified amount of time expires before the agent has completed its task.","source":"If the parameter `_Timeout` has a value other than the constant `COOPERATIVE_TIMEOUT_INFINITE`, the exception [operation_timed_out](operation-timed-out-class.md) is thrown if the specified amount of time expires before the agent has completed its task."},{"content":"See Also","pos":[8835,8843]},{"content":"concurrency Namespace","pos":[8848,8869]}],"content":"---\ntitle: \"agent Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::agent\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"agent class\"\nms.assetid: 1b09e3d2-5e37-4966-b016-907ef1512456\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# agent Class\nA class intended to be used as a base class for all independent agents. It is used to hide state from other agents and interact using message-passing.  \n  \n## Syntax  \n  \n```\nclass agent;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[agent::agent Constructor](#ctor)|Overloaded. Constructs an agent.|  \n|[agent::~agent Destructor](#dtor)|Destroys the agent.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[agent::cancel Method](#cancel)|Moves an agent from either the `agent_created` or `agent_runnable` states to the `agent_canceled` state.|  \n|[agent::start Method](#start)|Moves an agent from the `agent_created` state to the `agent_runnable` state, and schedules it for execution.|  \n|[agent::status Method](#status)|A synchronous source of status information from the agent.|  \n|[agent::status_port Method](#status_port)|An asynchronous source of status information from the agent.|  \n|[agent::wait Method](#wait)|Waits for an agent to complete its task.|  \n|[agent::wait_for_all Method](#wait_for_all)|Waits for all of the specified agents to complete their tasks.|  \n|[agent::wait_for_one Method](#wait_for_one)|Waits for any one of the specified agents to complete its task.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[agent::done Method](#done)|Moves an agent into the `agent_done` state, indicating that the agent has completed.|  \n|[agent::run Method](#run)|Represents the main task of an agent. `run` should be overridden in a derived class, and specifies what the agent should do after it has been started.|  \n  \n## Remarks  \n For more information, see [Asynchronous Agents](../../../parallel/concrt/asynchronous-agents.md).  \n  \n## Inheritance Hierarchy  \n `agent`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"ctor\"></a>  agent::agent Constructor  \n Constructs an agent.  \n  \n```\nagent();\n\nagent(Scheduler& _PScheduler);\n\nagent(ScheduleGroup& _PGroup);\n```  \n  \n### Parameters  \n `_PScheduler`  \n The `Scheduler` object within which the execution task of the agent is scheduled.  \n  \n `_PGroup`  \n The `ScheduleGroup` object within which the execution task of the agent is scheduled. The `Scheduler` object used is implied by the schedule group.  \n  \n### Remarks  \n The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PGroup` parameters.  \n  \n##  <a name=\"dtor\"></a>  agent::~agent Destructor  \n Destroys the agent.  \n  \n```\nvirtual ~agent();\n```  \n  \n### Remarks  \n It is an error to destroy an agent that is not in a terminal state (either `agent_done` or `agent_canceled`). This can be avoided by waiting for the agent to reach a terminal state in the destructor of a class that inherits from the `agent` class.  \n  \n##  <a name=\"cancel\"></a>  agent::cancel Method  \n Moves an agent from either the `agent_created` or `agent_runnable` states to the `agent_canceled` state.  \n  \n```\nbool cancel();\n```  \n  \n### Return Value  \n `true` if the agent was canceled, `false` otherwise. An agent cannot be canceled if it has already started running or has already completed.  \n  \n##  <a name=\"done\"></a>  agent::done Method  \n Moves an agent into the `agent_done` state, indicating that the agent has completed.  \n  \n```\nbool done();\n```  \n  \n### Return Value  \n `true` if the agent is moved to the `agent_done` state, `false` otherwise. An agent that has been canceled cannot be moved to the `agent_done` state.  \n  \n### Remarks  \n This method should be called at the end of the `run` method, when you know the execution of your agent has completed.  \n  \n##  <a name=\"run\"></a>  agent::run Method  \n Represents the main task of an agent. `run` should be overridden in a derived class, and specifies what the agent should do after it has been started.  \n  \n```\nvirtual void run() = 0;\n```  \n  \n### Remarks  \n The agent status is changed to `agent_started` right before this method is invoked. The method should invoke `done` on the agent with an appropriate status before returning, and may not throw any exceptions.  \n  \n##  <a name=\"start\"></a>  agent::start Method  \n Moves an agent from the `agent_created` state to the `agent_runnable` state, and schedules it for execution.  \n  \n```\nbool start();\n```  \n  \n### Return Value  \n `true` if the agent started correctly, `false` otherwise. An agent that has been canceled cannot be started.  \n  \n##  <a name=\"status\"></a>  agent::status Method  \n A synchronous source of status information from the agent.  \n  \n```\nagent_status status();\n```  \n  \n### Return Value  \n Returns the current state of the agent. Note that this returned state could change immediately after being returned.  \n  \n##  <a name=\"status_port\"></a>  agent::status_port Method  \n An asynchronous source of status information from the agent.  \n  \n```\nISource<agent_status>* status_port();\n```  \n  \n### Return Value  \n Returns a message source that can send messages about the current state of the agent.  \n  \n##  <a name=\"wait\"></a>  agent::wait Method  \n Waits for an agent to complete its task.  \n  \n```\nstatic agent_status __cdecl wait(\n    _Inout_ agent* _PAgent,\n    unsigned int _Timeout = COOPERATIVE_TIMEOUT_INFINITE);\n```  \n  \n### Parameters  \n `_PAgent`  \n A pointer to the agent to wait for.  \n  \n `_Timeout`  \n The maximum time for which to wait, in milliseconds.  \n  \n### Return Value  \n The `agent_status` of the agent when the wait completes. This can either be `agent_canceled` or `agent_done`.  \n  \n### Remarks  \n An agent task is completed when the agent enters the `agent_canceled` or `agent_done` states.  \n  \n If the parameter `_Timeout` has a value other than the constant `COOPERATIVE_TIMEOUT_INFINITE`, the exception [operation_timed_out](operation-timed-out-class.md) is thrown if the specified amount of time expires before the agent has completed its task.  \n  \n##  <a name=\"wait_for_all\"></a>  agent::wait_for_all Method  \n Waits for all of the specified agents to complete their tasks.  \n  \n```\nstatic void __cdecl wait_for_all(\n    size_t count,\n    _In_reads_(count) agent** _PAgents,\n    _Out_writes_opt_(count) agent_status* _PStatus = NULL,\n    unsigned int _Timeout = COOPERATIVE_TIMEOUT_INFINITE);\n```  \n  \n### Parameters  \n `count`  \n The number of agent pointers present in the array `_PAgents`.  \n  \n `_PAgents`  \n An array of pointers to the agents to wait for.  \n  \n `_PStatus`  \n A pointer to an array of agent statuses. Each status value will represent the status of the corresponding agent when the method returns.  \n  \n `_Timeout`  \n The maximum time for which to wait, in milliseconds.  \n  \n### Remarks  \n An agent task is completed when the agent enters the `agent_canceled` or `agent_done` states.  \n  \n If the parameter `_Timeout` has a value other than the constant `COOPERATIVE_TIMEOUT_INFINITE`, the exception [operation_timed_out](operation-timed-out-class.md) is thrown if the specified amount of time expires before the agent has completed its task.  \n  \n##  <a name=\"wait_for_one\"></a>  agent::wait_for_one Method  \n Waits for any one of the specified agents to complete its task.  \n  \n```\nstatic void __cdecl wait_for_one(\n    size_t count,\n    _In_reads_(count) agent** _PAgents,\n    agent_status& _Status,\n    size_t& _Index,\n    unsigned int _Timeout = COOPERATIVE_TIMEOUT_INFINITE);\n```  \n  \n### Parameters  \n `count`  \n The number of agent pointers present in the array `_PAgents`.  \n  \n `_PAgents`  \n An array of pointers to the agents to wait for.  \n  \n `_Status`  \n A reference to a variable where the agent status will be placed.  \n  \n `_Index`  \n A reference to a variable where the agent index will be placed.  \n  \n `_Timeout`  \n The maximum time for which to wait, in milliseconds.  \n  \n### Remarks  \n An agent task is completed when the agent enters the `agent_canceled` or `agent_done` states.  \n  \n If the parameter `_Timeout` has a value other than the constant `COOPERATIVE_TIMEOUT_INFINITE`, the exception [operation_timed_out](operation-timed-out-class.md) is thrown if the specified amount of time expires before the agent has completed its task.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}