{"nodes":[{"pos":[12,35],"content":"malloc | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"malloc | Microsoft Docs","pos":[0,23]}]},{"pos":[924,930],"content":"malloc","linkify":"malloc","nodes":[{"content":"malloc","pos":[0,6]}]},{"content":"Allocates memory blocks.","pos":[931,955]},{"pos":[964,970],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1035,1045],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Bytes to allocate.","pos":[1059,1077]},{"pos":[1086,1098],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`malloc`</ph> returns a void pointer to the allocated space, or <ph id=\"ph2\">`NULL`</ph> if there is insufficient memory available.","pos":[1102,1210],"source":"`malloc` returns a void pointer to the allocated space, or `NULL` if there is insufficient memory available."},{"content":"To return a pointer to a type other than <ph id=\"ph1\">`void`</ph>, use a type cast on the return value.","pos":[1211,1296],"source":" To return a pointer to a type other than `void`, use a type cast on the return value."},{"content":"The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object that has an alignment requirement less than or equal to that of the fundamental alignment.","pos":[1297,1507]},{"content":"(In Visual C++, the fundamental alignment is the alignment that's required for a <ph id=\"ph1\">`double`</ph>, or 8 bytes.","pos":[1508,1610],"source":" (In Visual C++, the fundamental alignment is the alignment that's required for a `double`, or 8 bytes."},{"content":"In code that targets 64-bit platforms, it’s 16 bytes.) Use <bpt id=\"p1\">[</bpt>_aligned_malloc<ept id=\"p1\">](../../c-runtime-library/reference/aligned-malloc.md)</ept> to allocate storage for objects that have a larger alignment requirement—for example, the SSE types <bpt id=\"p2\">[</bpt>__m128<ept id=\"p2\">](../../cpp/m128.md)</ept> and <ph id=\"ph1\">`__m256`</ph>, and types that are declared by using <ph id=\"ph2\">`__declspec(align(``n``))`</ph> where <ph id=\"ph3\">`n`</ph> is greater than 8.","pos":[1611,1975],"source":" In code that targets 64-bit platforms, it’s 16 bytes.) Use [_aligned_malloc](../../c-runtime-library/reference/aligned-malloc.md) to allocate storage for objects that have a larger alignment requirement—for example, the SSE types [__m128](../../cpp/m128.md) and `__m256`, and types that are declared by using `__declspec(align(``n``))` where `n` is greater than 8."},{"content":"If <ph id=\"ph1\">`size`</ph> is 0, <ph id=\"ph2\">`malloc`</ph> allocates a zero-length item in the heap and returns a valid pointer to that item.","pos":[1976,2083],"source":" If `size` is 0, `malloc` allocates a zero-length item in the heap and returns a valid pointer to that item."},{"content":"Always check the return from <ph id=\"ph1\">`malloc`</ph>, even if the amount of memory requested is small.","pos":[2084,2171],"source":" Always check the return from `malloc`, even if the amount of memory requested is small."},{"pos":[2180,2187],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`malloc`</ph> function allocates a memory block of at least <ph id=\"ph2\">`size`</ph> bytes.","pos":[2191,2263],"source":"The `malloc` function allocates a memory block of at least `size` bytes."},{"content":"The block may be larger than <ph id=\"ph1\">`size`</ph> bytes because of the space that's required for alignment and maintenance information.","pos":[2264,2385],"source":" The block may be larger than `size` bytes because of the space that's required for alignment and maintenance information."},{"content":"<ph id=\"ph1\">`malloc`</ph> sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`ENOMEM`</ph> if a memory allocation fails or if the amount of memory requested exceeds <ph id=\"ph4\">`_HEAP_MAXREQ`</ph>.","pos":[2392,2515],"source":"`malloc` sets `errno` to `ENOMEM` if a memory allocation fails or if the amount of memory requested exceeds `_HEAP_MAXREQ`."},{"content":"For information about this and other error codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2516,2686],"source":" For information about this and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"The startup code uses <ph id=\"ph1\">`malloc`</ph> to allocate storage for the <ph id=\"ph2\">`_environ`</ph>, <ph id=\"ph3\">`envp`</ph>, and <ph id=\"ph4\">`argv`</ph> variables.","pos":[2693,2793],"source":"The startup code uses `malloc` to allocate storage for the `_environ`, `envp`, and `argv` variables."},{"content":"The following functions and their wide-character counterparts also call <ph id=\"ph1\">`malloc`</ph>.","pos":[2794,2875],"source":" The following functions and their wide-character counterparts also call `malloc`."},{"pos":[2902,2955],"content":"<bpt id=\"p1\">[</bpt>calloc<ept id=\"p1\">](../../c-runtime-library/reference/calloc.md)</ept>","source":"[calloc](../../c-runtime-library/reference/calloc.md)"},{"pos":[2956,3036],"content":"<bpt id=\"p1\">[</bpt>fscanf<ept id=\"p1\">](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)</ept>","source":"[fscanf](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)"},{"pos":[3037,3087],"content":"<bpt id=\"p1\">[</bpt>_getw<ept id=\"p1\">](../../c-runtime-library/reference/getw.md)</ept>","source":"[_getw](../../c-runtime-library/reference/getw.md)"},{"pos":[3088,3143],"content":"<bpt id=\"p1\">[</bpt>setvbuf<ept id=\"p1\">](../../c-runtime-library/reference/setvbuf.md)</ept>","source":"[setvbuf](../../c-runtime-library/reference/setvbuf.md)"},{"pos":[3148,3214],"content":"<bpt id=\"p1\">[</bpt>_exec functions<ept id=\"p1\">](../../c-runtime-library/exec-wexec-functions.md)</ept>","source":"[_exec functions](../../c-runtime-library/exec-wexec-functions.md)"},{"pos":[3215,3275],"content":"<bpt id=\"p1\">[</bpt>fseek<ept id=\"p1\">](../../c-runtime-library/reference/fseek-fseeki64.md)</ept>","source":"[fseek](../../c-runtime-library/reference/fseek-fseeki64.md)"},{"pos":[3276,3335],"content":"<bpt id=\"p1\">[</bpt>_popen<ept id=\"p1\">](../../c-runtime-library/reference/popen-wpopen.md)</ept>","source":"[_popen](../../c-runtime-library/reference/popen-wpopen.md)"},{"pos":[3336,3405],"content":"<bpt id=\"p1\">[</bpt>_spawn functions<ept id=\"p1\">](../../c-runtime-library/spawn-wspawn-functions.md)</ept>","source":"[_spawn functions](../../c-runtime-library/spawn-wspawn-functions.md)"},{"pos":[3410,3468],"content":"<bpt id=\"p1\">[</bpt>fgetc<ept id=\"p1\">](../../c-runtime-library/reference/fgetc-fgetwc.md)</ept>","source":"[fgetc](../../c-runtime-library/reference/fgetc-fgetwc.md)"},{"pos":[3469,3524],"content":"<bpt id=\"p1\">[</bpt>fsetpos<ept id=\"p1\">](../../c-runtime-library/reference/fsetpos.md)</ept>","source":"[fsetpos](../../c-runtime-library/reference/fsetpos.md)"},{"pos":[3525,3605],"content":"<bpt id=\"p1\">[</bpt>printf<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept>","source":"[printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)"},{"pos":[3606,3674],"content":"<bpt id=\"p1\">[</bpt>_strdup<ept id=\"p1\">](../../c-runtime-library/reference/strdup-wcsdup-mbsdup.md)</ept>","source":"[_strdup](../../c-runtime-library/reference/strdup-wcsdup-mbsdup.md)"},{"pos":[3679,3741],"content":"<bpt id=\"p1\">[</bpt>_fgetchar<ept id=\"p1\">](../../c-runtime-library/reference/fgetc-fgetwc.md)</ept>","source":"[_fgetchar](../../c-runtime-library/reference/fgetc-fgetwc.md)"},{"pos":[3742,3810],"content":"<bpt id=\"p1\">[</bpt>_fullpath<ept id=\"p1\">](../../c-runtime-library/reference/fullpath-wfullpath.md)</ept>","source":"[_fullpath](../../c-runtime-library/reference/fullpath-wfullpath.md)"},{"pos":[3811,3866],"content":"<bpt id=\"p1\">[</bpt>putc<ept id=\"p1\">](../../c-runtime-library/reference/putc-putwc.md)</ept>","source":"[putc](../../c-runtime-library/reference/putc-putwc.md)"},{"pos":[3867,3928],"content":"<bpt id=\"p1\">[</bpt>system<ept id=\"p1\">](../../c-runtime-library/reference/system-wsystem.md)</ept>","source":"[system](../../c-runtime-library/reference/system-wsystem.md)"},{"pos":[3933,3991],"content":"<bpt id=\"p1\">[</bpt>fgets<ept id=\"p1\">](../../c-runtime-library/reference/fgets-fgetws.md)</ept>","source":"[fgets](../../c-runtime-library/reference/fgets-fgetws.md)"},{"pos":[3992,4045],"content":"<bpt id=\"p1\">[</bpt>fwrite<ept id=\"p1\">](../../c-runtime-library/reference/fwrite.md)</ept>","source":"[fwrite](../../c-runtime-library/reference/fwrite.md)"},{"pos":[4046,4104],"content":"<bpt id=\"p1\">[</bpt>putchar<ept id=\"p1\">](../../c-runtime-library/reference/putc-putwc.md)</ept>","source":"[putchar](../../c-runtime-library/reference/putc-putwc.md)"},{"pos":[4105,4185],"content":"<bpt id=\"p1\">[</bpt>_tempnam<ept id=\"p1\">](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)</ept>","source":"[_tempnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)"},{"pos":[4190,4275],"content":"<bpt id=\"p1\">[</bpt>fprintf<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept>","source":"[fprintf](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)"},{"pos":[4276,4331],"content":"<bpt id=\"p1\">[</bpt>getc<ept id=\"p1\">](../../c-runtime-library/reference/getc-getwc.md)</ept>","source":"[getc](../../c-runtime-library/reference/getc-getwc.md)"},{"pos":[4332,4394],"content":"<bpt id=\"p1\">[</bpt>_putenv<ept id=\"p1\">](../../c-runtime-library/reference/putenv-wputenv.md)</ept>","source":"[_putenv](../../c-runtime-library/reference/putenv-wputenv.md)"},{"pos":[4395,4456],"content":"<bpt id=\"p1\">[</bpt>ungetc<ept id=\"p1\">](../../c-runtime-library/reference/ungetc-ungetwc.md)</ept>","source":"[ungetc](../../c-runtime-library/reference/ungetc-ungetwc.md)"},{"pos":[4461,4519],"content":"<bpt id=\"p1\">[</bpt>fputc<ept id=\"p1\">](../../c-runtime-library/reference/fputc-fputwc.md)</ept>","source":"[fputc](../../c-runtime-library/reference/fputc-fputwc.md)"},{"pos":[4520,4578],"content":"<bpt id=\"p1\">[</bpt>getchar<ept id=\"p1\">](../../c-runtime-library/reference/getc-getwc.md)</ept>","source":"[getchar](../../c-runtime-library/reference/getc-getwc.md)"},{"pos":[4579,4634],"content":"<bpt id=\"p1\">[</bpt>puts<ept id=\"p1\">](../../c-runtime-library/reference/puts-putws.md)</ept>","source":"[puts](../../c-runtime-library/reference/puts-putws.md)"},{"pos":[4635,4725],"content":"<bpt id=\"p1\">[</bpt>vfprintf<ept id=\"p1\">](../../c-runtime-library/reference/vfprintf-vfprintf-l-vfwprintf-vfwprintf-l.md)</ept>","source":"[vfprintf](../../c-runtime-library/reference/vfprintf-vfprintf-l-vfwprintf-vfwprintf-l.md)"},{"pos":[4730,4792],"content":"<bpt id=\"p1\">[</bpt>_fputchar<ept id=\"p1\">](../../c-runtime-library/reference/fputc-fputwc.md)</ept>","source":"[_fputchar](../../c-runtime-library/reference/fputc-fputwc.md)"},{"pos":[4793,4855],"content":"<bpt id=\"p1\">[</bpt>_getcwd<ept id=\"p1\">](../../c-runtime-library/reference/getcwd-wgetcwd.md)</ept>","source":"[_getcwd](../../c-runtime-library/reference/getcwd-wgetcwd.md)"},{"pos":[4856,4906],"content":"<bpt id=\"p1\">[</bpt>_putw<ept id=\"p1\">](../../c-runtime-library/reference/putw.md)</ept>","source":"[_putw](../../c-runtime-library/reference/putw.md)"},{"pos":[4907,4992],"content":"<bpt id=\"p1\">[</bpt>vprintf<ept id=\"p1\">](../../c-runtime-library/reference/vprintf-vprintf-l-vwprintf-vwprintf-l.md)</ept>","source":"[vprintf](../../c-runtime-library/reference/vprintf-vprintf-l-vwprintf-vwprintf-l.md)"},{"pos":[4997,5055],"content":"<bpt id=\"p1\">[</bpt>fputs<ept id=\"p1\">](../../c-runtime-library/reference/fputs-fputws.md)</ept>","source":"[fputs](../../c-runtime-library/reference/fputs-fputws.md)"},{"pos":[5056,5119],"content":"<bpt id=\"p1\">[</bpt>_getdcwd<ept id=\"p1\">](../../c-runtime-library/reference/getcwd-wgetcwd.md)</ept>","source":"[_getdcwd](../../c-runtime-library/reference/getcwd-wgetcwd.md)"},{"pos":[5120,5195],"content":"<bpt id=\"p1\">[</bpt>scanf<ept id=\"p1\">](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept>","source":"[scanf](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)"},{"pos":[5201,5252],"content":"<bpt id=\"p1\">[</bpt>fread<ept id=\"p1\">](../../c-runtime-library/reference/fread.md)</ept>","source":"[fread](../../c-runtime-library/reference/fread.md)"},{"pos":[5253,5298],"content":"<bpt id=\"p1\">[</bpt>gets<ept id=\"p1\">](../../c-runtime-library/gets-getws.md)</ept>","source":"[gets](../../c-runtime-library/gets-getws.md)"},{"pos":[5299,5370],"content":"<bpt id=\"p1\">[</bpt>_searchenv<ept id=\"p1\">](../../c-runtime-library/reference/searchenv-wsearchenv.md)</ept>","source":"[_searchenv](../../c-runtime-library/reference/searchenv-wsearchenv.md)"},{"content":"The C++ <bpt id=\"p1\">[</bpt>_set_new_mode<ept id=\"p1\">](../../c-runtime-library/reference/set-new-mode.md)</ept> function sets the new handler mode for <ph id=\"ph1\">`malloc`</ph>.","pos":[5379,5502],"source":"The C++ [_set_new_mode](../../c-runtime-library/reference/set-new-mode.md) function sets the new handler mode for `malloc`."},{"content":"The new handler mode indicates whether, on failure, <ph id=\"ph1\">`malloc`</ph> is to call the new handler routine as set by <bpt id=\"p1\">[</bpt>_set_new_handler<ept id=\"p1\">](../../c-runtime-library/reference/set-new-handler.md)</ept>.","pos":[5503,5682],"source":" The new handler mode indicates whether, on failure, `malloc` is to call the new handler routine as set by [_set_new_handler](../../c-runtime-library/reference/set-new-handler.md)."},{"content":"By default, <ph id=\"ph1\">`malloc`</ph> does not call the new handler routine on failure to allocate memory.","pos":[5683,5772],"source":" By default, `malloc` does not call the new handler routine on failure to allocate memory."},{"content":"You can override this default behavior so that, when <ph id=\"ph1\">`malloc`</ph> fails to allocate memory, <ph id=\"ph2\">`malloc`</ph> calls the new handler routine in the same way that the <ph id=\"ph3\">`new`</ph> operator does when it fails for the same reason.","pos":[5773,5979],"source":" You can override this default behavior so that, when `malloc` fails to allocate memory, `malloc` calls the new handler routine in the same way that the `new` operator does when it fails for the same reason."},{"content":"To override the default, call","pos":[5980,6009]},{"pos":[6053,6163],"content":"early in your program, or link with NEWMODE.OBJ (see <bpt id=\"p1\">[</bpt>Link Options<ept id=\"p1\">](../../c-runtime-library/link-options.md)</ept>).","source":"early in your program, or link with NEWMODE.OBJ (see [Link Options](../../c-runtime-library/link-options.md))."},{"content":"When the application is linked with a debug version of the C run-time libraries, <ph id=\"ph1\">`malloc`</ph> resolves to <bpt id=\"p1\">[</bpt>_malloc_dbg<ept id=\"p1\">](../../c-runtime-library/reference/malloc-dbg.md)</ept>.","pos":[6170,6335],"source":"When the application is linked with a debug version of the C run-time libraries, `malloc` resolves to [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md)."},{"content":"For more information about how the heap is managed during the debugging process, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[6336,6493],"source":" For more information about how the heap is managed during the debugging process, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"<ph id=\"ph1\">`malloc`</ph> is marked <ph id=\"ph2\">`__declspec(noalias)`</ph> and <ph id=\"ph3\">`__declspec(restrict)`</ph>; this means that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased.","pos":[6500,6689],"source":"`malloc` is marked `__declspec(noalias)` and `__declspec(restrict)`; this means that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>noalias<ept id=\"p1\">](../../cpp/noalias.md)</ept> and <bpt id=\"p2\">[</bpt>restrict<ept id=\"p2\">](../../cpp/restrict.md)</ept>.","pos":[6690,6786],"source":" For more information, see [noalias](../../cpp/noalias.md) and [restrict](../../cpp/restrict.md)."},{"pos":[6795,6807],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[6814,6821]},{"content":"Required header","pos":[6822,6837]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt; and <ph id=\"ph2\">\\&lt;</ph>malloc.h&gt;","pos":[6891,6918],"source":"\\<stdlib.h> and \\<malloc.h>"},{"pos":[6926,7030],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[7039,7048],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[7052,7144],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[7153,7160],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7934,7959],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[7963,7978]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[7979,8026],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[8027,8152],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[8161,8169],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Memory Allocation<ept id=\"p1\">](../../c-runtime-library/memory-allocation.md)</ept><ph id=\"ph1\"> </ph>","pos":[8173,8239],"source":"[Memory Allocation](../../c-runtime-library/memory-allocation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>calloc<ept id=\"p1\">](../../c-runtime-library/reference/calloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[8242,8297],"source":" [calloc](../../c-runtime-library/reference/calloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>free<ept id=\"p1\">](../../c-runtime-library/reference/free.md)</ept><ph id=\"ph1\"> </ph>","pos":[8300,8351],"source":" [free](../../c-runtime-library/reference/free.md) "},{"content":"<bpt id=\"p1\"> [</bpt>realloc<ept id=\"p1\">](../../c-runtime-library/reference/realloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[8354,8411],"source":" [realloc](../../c-runtime-library/reference/realloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_aligned_malloc<ept id=\"p1\">](../../c-runtime-library/reference/aligned-malloc.md)</ept>","pos":[8414,8485],"source":" [_aligned_malloc](../../c-runtime-library/reference/aligned-malloc.md)"}],"content":"---\ntitle: \"malloc | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"malloc\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-heap-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"malloc\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"malloc function\"\n  - \"memory allocation\"\nms.assetid: 144fcee2-be34-4a03-bb7e-ed6d4b99eea0\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# malloc\nAllocates memory blocks.  \n  \n## Syntax  \n  \n```  \nvoid *malloc(  \n   size_t size   \n);  \n```  \n  \n#### Parameters  \n `size`  \n Bytes to allocate.  \n  \n## Return Value  \n `malloc` returns a void pointer to the allocated space, or `NULL` if there is insufficient memory available. To return a pointer to a type other than `void`, use a type cast on the return value. The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object that has an alignment requirement less than or equal to that of the fundamental alignment. (In Visual C++, the fundamental alignment is the alignment that's required for a `double`, or 8 bytes. In code that targets 64-bit platforms, it’s 16 bytes.) Use [_aligned_malloc](../../c-runtime-library/reference/aligned-malloc.md) to allocate storage for objects that have a larger alignment requirement—for example, the SSE types [__m128](../../cpp/m128.md) and `__m256`, and types that are declared by using `__declspec(align(``n``))` where `n` is greater than 8. If `size` is 0, `malloc` allocates a zero-length item in the heap and returns a valid pointer to that item. Always check the return from `malloc`, even if the amount of memory requested is small.  \n  \n## Remarks  \n The `malloc` function allocates a memory block of at least `size` bytes. The block may be larger than `size` bytes because of the space that's required for alignment and maintenance information.  \n  \n `malloc` sets `errno` to `ENOMEM` if a memory allocation fails or if the amount of memory requested exceeds `_HEAP_MAXREQ`. For information about this and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n The startup code uses `malloc` to allocate storage for the `_environ`, `envp`, and `argv` variables. The following functions and their wide-character counterparts also call `malloc`.  \n  \n|||||  \n|-|-|-|-|  \n|[calloc](../../c-runtime-library/reference/calloc.md)|[fscanf](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)|[_getw](../../c-runtime-library/reference/getw.md)|[setvbuf](../../c-runtime-library/reference/setvbuf.md)|  \n|[_exec functions](../../c-runtime-library/exec-wexec-functions.md)|[fseek](../../c-runtime-library/reference/fseek-fseeki64.md)|[_popen](../../c-runtime-library/reference/popen-wpopen.md)|[_spawn functions](../../c-runtime-library/spawn-wspawn-functions.md)|  \n|[fgetc](../../c-runtime-library/reference/fgetc-fgetwc.md)|[fsetpos](../../c-runtime-library/reference/fsetpos.md)|[printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)|[_strdup](../../c-runtime-library/reference/strdup-wcsdup-mbsdup.md)|  \n|[_fgetchar](../../c-runtime-library/reference/fgetc-fgetwc.md)|[_fullpath](../../c-runtime-library/reference/fullpath-wfullpath.md)|[putc](../../c-runtime-library/reference/putc-putwc.md)|[system](../../c-runtime-library/reference/system-wsystem.md)|  \n|[fgets](../../c-runtime-library/reference/fgets-fgetws.md)|[fwrite](../../c-runtime-library/reference/fwrite.md)|[putchar](../../c-runtime-library/reference/putc-putwc.md)|[_tempnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)|  \n|[fprintf](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)|[getc](../../c-runtime-library/reference/getc-getwc.md)|[_putenv](../../c-runtime-library/reference/putenv-wputenv.md)|[ungetc](../../c-runtime-library/reference/ungetc-ungetwc.md)|  \n|[fputc](../../c-runtime-library/reference/fputc-fputwc.md)|[getchar](../../c-runtime-library/reference/getc-getwc.md)|[puts](../../c-runtime-library/reference/puts-putws.md)|[vfprintf](../../c-runtime-library/reference/vfprintf-vfprintf-l-vfwprintf-vfwprintf-l.md)|  \n|[_fputchar](../../c-runtime-library/reference/fputc-fputwc.md)|[_getcwd](../../c-runtime-library/reference/getcwd-wgetcwd.md)|[_putw](../../c-runtime-library/reference/putw.md)|[vprintf](../../c-runtime-library/reference/vprintf-vprintf-l-vwprintf-vwprintf-l.md)|  \n|[fputs](../../c-runtime-library/reference/fputs-fputws.md)|[_getdcwd](../../c-runtime-library/reference/getcwd-wgetcwd.md)|[scanf](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)||  \n|[fread](../../c-runtime-library/reference/fread.md)|[gets](../../c-runtime-library/gets-getws.md)|[_searchenv](../../c-runtime-library/reference/searchenv-wsearchenv.md)||  \n  \n The C++ [_set_new_mode](../../c-runtime-library/reference/set-new-mode.md) function sets the new handler mode for `malloc`. The new handler mode indicates whether, on failure, `malloc` is to call the new handler routine as set by [_set_new_handler](../../c-runtime-library/reference/set-new-handler.md). By default, `malloc` does not call the new handler routine on failure to allocate memory. You can override this default behavior so that, when `malloc` fails to allocate memory, `malloc` calls the new handler routine in the same way that the `new` operator does when it fails for the same reason. To override the default, call  \n  \n```cpp  \n_set_new_mode(1)  \n```  \n  \n early in your program, or link with NEWMODE.OBJ (see [Link Options](../../c-runtime-library/link-options.md)).  \n  \n When the application is linked with a debug version of the C run-time libraries, `malloc` resolves to [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md). For more information about how the heap is managed during the debugging process, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details).  \n  \n `malloc` is marked `__declspec(noalias)` and `__declspec(restrict)`; this means that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased. For more information, see [noalias](../../cpp/noalias.md) and [restrict](../../cpp/restrict.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`malloc`|\\<stdlib.h> and \\<malloc.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```c  \n// crt_malloc.c  \n// This program allocates memory with  \n// malloc, then frees the memory with free.  \n  \n#include <stdlib.h>   // For _MAX_PATH definition  \n#include <stdio.h>  \n#include <malloc.h>  \n  \nint main( void )  \n{  \n   char *string;  \n  \n   // Allocate space for a path name  \n   string = malloc( _MAX_PATH );  \n  \n   // In a C++ file, explicitly cast malloc's return.  For example,   \n   // string = (char *)malloc( _MAX_PATH );  \n  \n   if( string == NULL )  \n      printf( \"Insufficient memory available\\n\" );  \n   else  \n   {  \n      printf( \"Memory space allocated for path name\\n\" );  \n      free( string );  \n      printf( \"Memory freed\\n\" );  \n   }  \n}  \n```  \n  \n```Output  \nMemory space allocated for path name  \nMemory freed  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../../c-runtime-library/memory-allocation.md)   \n [calloc](../../c-runtime-library/reference/calloc.md)   \n [free](../../c-runtime-library/reference/free.md)   \n [realloc](../../c-runtime-library/reference/realloc.md)   \n [_aligned_malloc](../../c-runtime-library/reference/aligned-malloc.md)"}