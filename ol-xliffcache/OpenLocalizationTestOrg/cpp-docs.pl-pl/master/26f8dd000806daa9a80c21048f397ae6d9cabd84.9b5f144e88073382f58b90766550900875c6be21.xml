{"nodes":[{"pos":[12,47],"content":"CStringArray Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CStringArray Class | Microsoft Docs","pos":[0,35]}]},{"pos":[691,709],"content":"CStringArray Class","linkify":"CStringArray Class","nodes":[{"content":"CStringArray Class","pos":[0,18]}]},{"pos":[710,786],"content":"Supports arrays of <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/using-cstring.md)</ept> objects.","source":"Supports arrays of [CString](../../atl-mfc-shared/using-cstring.md) objects."},{"pos":[795,801],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[863,870],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"content":"The member functions of <ph id=\"ph1\">`CStringArray`</ph> are similar to the member functions of class <bpt id=\"p1\">[</bpt>CObArray<ept id=\"p1\">](../../mfc/reference/cobarray-class.md)</ept>.","pos":[874,1008],"source":"The member functions of `CStringArray` are similar to the member functions of class [CObArray](../../mfc/reference/cobarray-class.md)."},{"content":"Because of this similarity, you can use the <ph id=\"ph1\">`CObArray`</ph> reference documentation for member function specifics.","pos":[1009,1118],"source":" Because of this similarity, you can use the `CObArray` reference documentation for member function specifics."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a return value, substitute a <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/using-cstring.md)</ept> object (not a <bpt id=\"p2\">[</bpt>CString<ept id=\"p2\">](../../atl-mfc-shared/using-cstring.md)</ept> pointer).","pos":[1119,1309],"source":" Wherever you see a `CObject` pointer as a return value, substitute a [CString](../../atl-mfc-shared/using-cstring.md) object (not a [CString](../../atl-mfc-shared/using-cstring.md) pointer)."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a function parameter, substitute a <ph id=\"ph2\">`LPCTSTR`</ph>.","pos":[1310,1395],"source":" Wherever you see a `CObject` pointer as a function parameter, substitute a `LPCTSTR`."},{"content":"for example, translates to","pos":[1458,1484]},{"content":"and","pos":[1550,1553]},{"content":"translates to","pos":[1618,1631]},{"pos":[1698,1717],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1724,1728]},{"content":"Description","pos":[1729,1740]},{"pos":[1778,1856],"content":"<bpt id=\"p1\">[</bpt>CObArray::CObArray<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__cobarray)</ept>","source":"[CObArray::CObArray](../../mfc/reference/cobarray-class.md#cobarray__cobarray)"},{"content":"Constructs an empty array.","pos":[1857,1883]},{"pos":[1894,1908],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1915,1919]},{"content":"Description","pos":[1920,1931]},{"pos":[1969,2037],"content":"<bpt id=\"p1\">[</bpt>CObArray::Add<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__add)</ept>","source":"[CObArray::Add](../../mfc/reference/cobarray-class.md#cobarray__add)"},{"content":"Adds an element to the end of the array; grows the array if necessary.","pos":[2038,2108]},{"pos":[2113,2187],"content":"<bpt id=\"p1\">[</bpt>CObArray::Append<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__append)</ept>","source":"[CObArray::Append](../../mfc/reference/cobarray-class.md#cobarray__append)"},{"content":"Appends another array to the array; grows the array if necessary.","pos":[2188,2253]},{"pos":[2258,2328],"content":"<bpt id=\"p1\">[</bpt>CObArray::Copy<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__copy)</ept>","source":"[CObArray::Copy](../../mfc/reference/cobarray-class.md#cobarray__copy)"},{"content":"Copies another array to the array; grows the array if necessary.","pos":[2329,2393]},{"pos":[2398,2478],"content":"<bpt id=\"p1\">[</bpt>CObArray::ElementAt<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__elementat)</ept>","source":"[CObArray::ElementAt](../../mfc/reference/cobarray-class.md#cobarray__elementat)"},{"content":"Returns a temporary reference to the element pointer within the array.","pos":[2479,2549]},{"pos":[2554,2634],"content":"<bpt id=\"p1\">[</bpt>CObArray::FreeExtra<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__freeextra)</ept>","source":"[CObArray::FreeExtra](../../mfc/reference/cobarray-class.md#cobarray__freeextra)"},{"content":"Frees all unused memory above the current upper bound.","pos":[2635,2689]},{"pos":[2694,2766],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetAt<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__getat)</ept>","source":"[CObArray::GetAt](../../mfc/reference/cobarray-class.md#cobarray__getat)"},{"content":"Returns the value at a given index.","pos":[2767,2802]},{"pos":[2807,2885],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetCount<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__getcount)</ept>","source":"[CObArray::GetCount](../../mfc/reference/cobarray-class.md#cobarray__getcount)"},{"content":"Gets the number of elements in this array.","pos":[2886,2928]},{"pos":[2933,3009],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetData<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__getdata)</ept>","source":"[CObArray::GetData](../../mfc/reference/cobarray-class.md#cobarray__getdata)"},{"content":"Allows access to elements in the array.","pos":[3010,3049]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[3050,3066],"source":" Can be **NULL**."},{"pos":[3071,3147],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetSize<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__getsize)</ept>","source":"[CObArray::GetSize](../../mfc/reference/cobarray-class.md#cobarray__getsize)"},{"content":"Gets the number of elements in this array.","pos":[3148,3190]},{"pos":[3195,3283],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetUpperBound<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__getupperbound)</ept>","source":"[CObArray::GetUpperBound](../../mfc/reference/cobarray-class.md#cobarray__getupperbound)"},{"content":"Returns the largest valid index.","pos":[3284,3316]},{"pos":[3321,3399],"content":"<bpt id=\"p1\">[</bpt>CObArray::InsertAt<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__insertat)</ept>","source":"[CObArray::InsertAt](../../mfc/reference/cobarray-class.md#cobarray__insertat)"},{"content":"Inserts an element (or all the elements in another array) at a specified index.","pos":[3400,3479]},{"pos":[3484,3560],"content":"<bpt id=\"p1\">[</bpt>CObArray::IsEmpty<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__isempty)</ept>","source":"[CObArray::IsEmpty](../../mfc/reference/cobarray-class.md#cobarray__isempty)"},{"content":"Determines if the array is empty.","pos":[3561,3594]},{"pos":[3599,3679],"content":"<bpt id=\"p1\">[</bpt>CObArray::RemoveAll<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__removeall)</ept>","source":"[CObArray::RemoveAll](../../mfc/reference/cobarray-class.md#cobarray__removeall)"},{"content":"Removes all the elements from this array.","pos":[3680,3721]},{"pos":[3726,3804],"content":"<bpt id=\"p1\">[</bpt>CObArray::RemoveAt<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__removeat)</ept>","source":"[CObArray::RemoveAt](../../mfc/reference/cobarray-class.md#cobarray__removeat)"},{"content":"Removes an element at a specific index.","pos":[3805,3844]},{"pos":[3849,3921],"content":"<bpt id=\"p1\">[</bpt>CObArray::SetAt<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__setat)</ept>","source":"[CObArray::SetAt](../../mfc/reference/cobarray-class.md#cobarray__setat)"},{"content":"Sets the value for a given index; array not allowed to grow.","pos":[3922,3982]},{"pos":[3987,4067],"content":"<bpt id=\"p1\">[</bpt>CObArray::SetAtGrow<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__setatgrow)</ept>","source":"[CObArray::SetAtGrow](../../mfc/reference/cobarray-class.md#cobarray__setatgrow)"},{"content":"Sets the value for a given index; grows the array if necessary.","pos":[4068,4131]},{"pos":[4136,4212],"content":"<bpt id=\"p1\">[</bpt>CObArray::SetSize<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__setsize)</ept>","source":"[CObArray::SetSize](../../mfc/reference/cobarray-class.md#cobarray__setsize)"},{"content":"Sets the number of elements to be contained in this array.","pos":[4213,4271]},{"pos":[4282,4298],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[4305,4309]},{"content":"Description","pos":[4310,4321]},{"pos":[4359,4444],"content":"<bpt id=\"p1\">[</bpt>CObArray::operator [ ]<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__operator_at)</ept>","source":"[CObArray::operator [ ]](../../mfc/reference/cobarray-class.md#cobarray__operator_at)"},{"content":"Sets or gets the element at the specified index.","pos":[4445,4493]},{"pos":[4503,4510],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CStringArray`</ph> incorporates the <ph id=\"ph2\">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.","pos":[4514,4624],"source":"`CStringArray` incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements."},{"content":"If an array of <ph id=\"ph1\">`CString`</ph> objects is stored to an archive, either with an overloaded insertion operator or with the <ph id=\"ph2\">`Serialize`</ph> member function, each element is serialized in turn.","pos":[4625,4804],"source":" If an array of `CString` objects is stored to an archive, either with an overloaded insertion operator or with the `Serialize` member function, each element is serialized in turn."},{"pos":[4812,5094],"content":"[!NOTE]\n Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.","leadings":["","> "],"nodes":[{"content":" Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.","pos":[8,280],"nodes":[{"content":"Before using an array, use <ph id=\"ph1\">`SetSize`</ph> to establish its size and allocate memory for it.","pos":[1,87],"source":" Before using an array, use `SetSize` to establish its size and allocate memory for it."},{"content":"If you do not use <ph id=\"ph1\">`SetSize`</ph>, adding elements to your array causes it to be frequently reallocated and copied.","pos":[88,197],"source":" If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied."},{"content":"Frequent reallocation and copying are inefficient and can fragment memory.","pos":[198,272]}]}]},{"content":"If you need a dump of individual string elements in the array, you must set the depth of the dump context to 1 or greater.","pos":[5101,5223]},{"pos":[5230,5337],"content":"When a <ph id=\"ph1\">`CString`</ph> array is deleted, or when its elements are removed, string memory is freed as appropriate.","source":"When a `CString` array is deleted, or when its elements are removed, string memory is freed as appropriate."},{"pos":[5344,5446],"content":"For more information on using <ph id=\"ph1\">`CStringArray`</ph>, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","source":"For more information on using `CStringArray`, see the article [Collections](../../mfc/collections.md)."},{"pos":[5455,5476],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[5480,5527],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[5557,5569],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5573,5594],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"pos":[5603,5611],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[5615,5669],"source":"[CObject Class](../../mfc/reference/cobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","pos":[5672,5720],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"CStringArray Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CStringArray\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"string arrays\"\n  - \"arrays [C++], strings\"\n  - \"CStringArray class\"\n  - \"strings [C++], collections\"\nms.assetid: 6c637e06-bba8-4c08-b0fc-cf8cb067ce34\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CStringArray Class\nSupports arrays of [CString](../../atl-mfc-shared/using-cstring.md) objects.  \n  \n## Syntax  \n  \n```  \nclass CStringArray : public CObject  \n```  \n  \n## Members  \n The member functions of `CStringArray` are similar to the member functions of class [CObArray](../../mfc/reference/cobarray-class.md). Because of this similarity, you can use the `CObArray` reference documentation for member function specifics. Wherever you see a `CObject` pointer as a return value, substitute a [CString](../../atl-mfc-shared/using-cstring.md) object (not a [CString](../../atl-mfc-shared/using-cstring.md) pointer). Wherever you see a `CObject` pointer as a function parameter, substitute a `LPCTSTR`.  \n  \n `CObject* CObArray::GetAt( int <nIndex> ) const;`  \n  \n for example, translates to  \n  \n `CString CStringArray::GetAt( int <nIndex> ) const;`  \n  \n and  \n  \n `void SetAt( int <nIndex>, CObject* <newElement> )`  \n  \n translates to  \n  \n `void SetAt( int <nIndex>, LPCTSTR <newElement> )`  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::CObArray](../../mfc/reference/cobarray-class.md#cobarray__cobarray)|Constructs an empty array.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::Add](../../mfc/reference/cobarray-class.md#cobarray__add)|Adds an element to the end of the array; grows the array if necessary.|  \n|[CObArray::Append](../../mfc/reference/cobarray-class.md#cobarray__append)|Appends another array to the array; grows the array if necessary.|  \n|[CObArray::Copy](../../mfc/reference/cobarray-class.md#cobarray__copy)|Copies another array to the array; grows the array if necessary.|  \n|[CObArray::ElementAt](../../mfc/reference/cobarray-class.md#cobarray__elementat)|Returns a temporary reference to the element pointer within the array.|  \n|[CObArray::FreeExtra](../../mfc/reference/cobarray-class.md#cobarray__freeextra)|Frees all unused memory above the current upper bound.|  \n|[CObArray::GetAt](../../mfc/reference/cobarray-class.md#cobarray__getat)|Returns the value at a given index.|  \n|[CObArray::GetCount](../../mfc/reference/cobarray-class.md#cobarray__getcount)|Gets the number of elements in this array.|  \n|[CObArray::GetData](../../mfc/reference/cobarray-class.md#cobarray__getdata)|Allows access to elements in the array. Can be **NULL**.|  \n|[CObArray::GetSize](../../mfc/reference/cobarray-class.md#cobarray__getsize)|Gets the number of elements in this array.|  \n|[CObArray::GetUpperBound](../../mfc/reference/cobarray-class.md#cobarray__getupperbound)|Returns the largest valid index.|  \n|[CObArray::InsertAt](../../mfc/reference/cobarray-class.md#cobarray__insertat)|Inserts an element (or all the elements in another array) at a specified index.|  \n|[CObArray::IsEmpty](../../mfc/reference/cobarray-class.md#cobarray__isempty)|Determines if the array is empty.|  \n|[CObArray::RemoveAll](../../mfc/reference/cobarray-class.md#cobarray__removeall)|Removes all the elements from this array.|  \n|[CObArray::RemoveAt](../../mfc/reference/cobarray-class.md#cobarray__removeat)|Removes an element at a specific index.|  \n|[CObArray::SetAt](../../mfc/reference/cobarray-class.md#cobarray__setat)|Sets the value for a given index; array not allowed to grow.|  \n|[CObArray::SetAtGrow](../../mfc/reference/cobarray-class.md#cobarray__setatgrow)|Sets the value for a given index; grows the array if necessary.|  \n|[CObArray::SetSize](../../mfc/reference/cobarray-class.md#cobarray__setsize)|Sets the number of elements to be contained in this array.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::operator [ ]](../../mfc/reference/cobarray-class.md#cobarray__operator_at)|Sets or gets the element at the specified index.|  \n  \n## Remarks  \n `CStringArray` incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements. If an array of `CString` objects is stored to an archive, either with an overloaded insertion operator or with the `Serialize` member function, each element is serialized in turn.  \n  \n> [!NOTE]\n>  Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.  \n  \n If you need a dump of individual string elements in the array, you must set the depth of the dump context to 1 or greater.  \n  \n When a `CString` array is deleted, or when its elements are removed, string memory is freed as appropriate.  \n  \n For more information on using `CStringArray`, see the article [Collections](../../mfc/collections.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CStringArray`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}