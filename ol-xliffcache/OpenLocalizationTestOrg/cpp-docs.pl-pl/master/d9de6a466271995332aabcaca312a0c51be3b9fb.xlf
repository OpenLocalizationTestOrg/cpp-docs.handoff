<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9de6a466271995332aabcaca312a0c51be3b9fb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\windows-sockets-blocking.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fb9a106803dc2eff0e38aa5f5907c57566f7ce9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6ed1f8de16fb6417ec52218c5a23fcfaddb2bd5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Blocking | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Blocking</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article and two companion articles explain several issues in Windows Sockets programming.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article covers blocking.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The other issues are covered in the articles: <bpt id="p1">[</bpt>Windows Sockets: Byte Ordering<ept id="p1">](../mfc/windows-sockets-byte-ordering.md)</ept> and <bpt id="p2">[</bpt>Windows Sockets: Converting Strings<ept id="p2">](../mfc/windows-sockets-converting-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you use or derive from class <bpt id="p1">[</bpt>CAsyncSocket<ept id="p1">](../mfc/reference/casyncsocket-class.md)</ept>, you will need to manage these issues yourself.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you use or derive from class <bpt id="p1">[</bpt>CSocket<ept id="p1">](../mfc/reference/csocket-class.md)</ept>, MFC manages them for you.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Blocking</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A socket can be in "blocking mode" or "nonblocking mode."</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The functions of sockets in blocking (or synchronous) mode do not return until they can complete their action.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is called blocking because the socket whose function was called cannot do anything — is blocked — until the call returns.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A call to the <bpt id="p1">**</bpt>Receive<ept id="p1">**</ept> member function, for example, might take an arbitrarily long time to complete as it waits for the sending application to send (this is if you are using <ph id="ph1">`CSocket`</ph>, or using <ph id="ph2">`CAsyncSocket`</ph> with blocking).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CAsyncSocket`</ph> object is in nonblocking mode (operating asynchronously), the call returns immediately and the current error code, retrievable with the <bpt id="p1">[</bpt>GetLastError<ept id="p1">](../mfc/reference/casyncsocket-class.md#casyncsocket__getlasterror)</ept> member function, is <bpt id="p2">**</bpt>WSAEWOULDBLOCK<ept id="p2">**</ept>, indicating that the call would have blocked had it not returned immediately because of the mode.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">`CSocket`</ph> never returns <bpt id="p1">**</bpt>WSAEWOULDBLOCK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The class manages blocking for you.)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The behavior of sockets is different under 32-bit and 64-bit operating systems (such as Windows 95 or Windows 98) than under 16-bit operating systems (such as Windows 3.1).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unlike 16-bit operating systems, the 32-bit and 64-bit operating systems use preemptive multitasking and provide multithreading.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Under the 32-bit and 64-bit operating systems, you can put your sockets in separate worker threads.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A socket in a thread can block without interfering with other activities in your application and without spending compute time on the blocking.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For information on multithreaded programming, see the article <bpt id="p1">[</bpt>Multithreading<ept id="p1">](../parallel/multithreading-support-for-older-code-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In multithreaded applications, you can use the blocking nature of <ph id="ph1">`CSocket`</ph> to simplify your program's design without affecting the responsiveness of the user interface.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By handling user interactions in the main thread and <ph id="ph1">`CSocket`</ph> processing in alternate threads, you can separate these logical operations.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In an application that is not multithreaded, these two activities must be combined and handled as a single thread, which usually means using <ph id="ph1">`CAsyncSocket`</ph> so you can handle communications requests on demand, or overriding <ph id="ph2">`CSocket::OnMessagePending`</ph> to handle user actions during lengthy synchronous activity.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The rest of this discussion is for programmers targeting 16-bit operating systems:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Normally, if you are using <ph id="ph1">`CAsyncSocket`</ph>, you should avoid using blocking operations and operate asynchronously instead.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In asynchronous operations, from the point at which you receive a <bpt id="p1">**</bpt>WSAEWOULDBLOCK<ept id="p1">**</ept> error code after calling <bpt id="p2">**</bpt>Receive<ept id="p2">**</ept>, for example, you wait until your <ph id="ph1">`OnReceive`</ph> member function is called to notify you that you can read again.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Asynchronous calls are made by calling back your socket's appropriate callback notification function, such as <bpt id="p1">[</bpt>OnReceive<ept id="p1">](../mfc/reference/casyncsocket-class.md#casyncsocket__onreceive)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Under Windows, blocking calls are considered bad practice.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">[</bpt>CAsyncSocket<ept id="p1">](../mfc/reference/casyncsocket-class.md)</ept> supports asynchronous calls, and you must manage the blocking yourself using callback notifications.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Class <bpt id="p1">[</bpt>CSocket<ept id="p1">](../mfc/reference/csocket-class.md)</ept>, on the other hand, is synchronous.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It pumps Windows messages and manages blocking for you.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about blocking, see the Windows Sockets specification.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about "On" functions, see <bpt id="p1">[</bpt>Windows Sockets: Socket Notifications<ept id="p1">](../mfc/windows-sockets-socket-notifications.md)</ept> and <bpt id="p2">[</bpt>Windows Sockets: Deriving from Socket Classes<ept id="p2">](../mfc/windows-sockets-deriving-from-socket-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Using Class CAsyncSocket</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Using Sockets with Archives</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Background</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Stream Sockets</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Datagram Sockets</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Windows Sockets in MFC</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CAsyncSocket::OnSend</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>