{"nodes":[{"pos":[12,56],"content":"front_insert_iterator Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"front_insert_iterator Class | Microsoft Docs","pos":[0,44]}]},{"pos":[742,769],"content":"front_insert_iterator Class","linkify":"front_insert_iterator Class","nodes":[{"content":"front_insert_iterator Class","pos":[0,27]}]},{"content":"Describes an iterator adaptor that satisfies the requirements of an output iterator.","pos":[770,854]},{"content":"It inserts, rather than overwrites, elements into the front of a sequence and thus provides semantics that are different from the overwrite semantics provided by the iterators of the C++ sequence containers.","pos":[855,1062]},{"content":"The <ph id=\"ph1\">`front_insert_iterator`</ph> class is templatized on the type of container.","pos":[1063,1137],"source":" The `front_insert_iterator` class is templatized on the type of container."},{"pos":[1146,1152],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1238,1248],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of container into the front of which elements are to be inserted by a <ph id=\"ph1\">`front_insert_iterator`</ph>.","pos":[1267,1370],"source":" The type of container into the front of which elements are to be inserted by a `front_insert_iterator`."},{"pos":[1379,1386],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The container must satisfy the requirements for a front insertion sequence where is it possible to insert elements at the beginning of the sequence in amortized constant time.","pos":[1390,1565]},{"content":"The Standard Template Library sequence containers defined by the <bpt id=\"p1\">[</bpt>deque Class<ept id=\"p1\">](../standard-library/deque-class.md)</ept> and <bpt id=\"p2\">[</bpt>list Class<ept id=\"p2\">](../standard-library/list-class.md)</ept> provide the needed <ph id=\"ph1\">`push_front`</ph> member function and satisfy these requirements.","pos":[1566,1812],"source":" The Standard Template Library sequence containers defined by the [deque Class](../standard-library/deque-class.md) and [list Class](../standard-library/list-class.md) provide the needed `push_front` member function and satisfy these requirements."},{"content":"By contrast, sequence containers defined by the <bpt id=\"p1\">[</bpt>vector Class<ept id=\"p1\">](../standard-library/vector-class.md)</ept> do not satisfy these requirements and cannot be adapted to use with <ph id=\"ph1\">`front_insert_iterator`</ph>s.","pos":[1813,2006],"source":" By contrast, sequence containers defined by the [vector Class](../standard-library/vector-class.md) do not satisfy these requirements and cannot be adapted to use with `front_insert_iterator`s."},{"content":"A <ph id=\"ph1\">`front_insert_iterator`</ph> must always be initialized with its container.","pos":[2007,2079],"source":" A `front_insert_iterator` must always be initialized with its container."},{"pos":[2089,2101],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[2122,2192],"content":"<bpt id=\"p1\">[</bpt>front_insert_iterator<ept id=\"p1\">](#front_insert_iterator__front_insert_iterator)</ept>","source":"[front_insert_iterator](#front_insert_iterator__front_insert_iterator)"},{"content":"Creates an iterator that can insert elements at the front of a specified container object.","pos":[2193,2283]},{"pos":[2294,2302],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[2323,2379],"content":"<bpt id=\"p1\">[</bpt>container_type<ept id=\"p1\">](#front_insert_iterator__container_type)</ept>","source":"[container_type](#front_insert_iterator__container_type)"},{"content":"A type that represents the container into which a front insertion is to be made.","pos":[2380,2460]},{"pos":[2465,2511],"content":"<bpt id=\"p1\">[</bpt>reference<ept id=\"p1\">](#front_insert_iterator__reference)</ept>","source":"[reference](#front_insert_iterator__reference)"},{"content":"A type that provides a reference to an element in a sequence controlled by the associated container.","pos":[2512,2612]},{"pos":[2623,2632],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[2653,2703],"content":"<bpt id=\"p1\">[</bpt>operator*<ept id=\"p1\">](#front_insert_iterator__operator_star)</ept>","source":"[operator*](#front_insert_iterator__operator_star)"},{"pos":[2704,2810],"content":"Dereferencing operator used to implement the output iterator expression * <ph id=\"ph1\">`i`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`x`</ph> for a front insertion.","source":"Dereferencing operator used to implement the output iterator expression * `i` = `x` for a front insertion."},{"pos":[2815,2869],"content":"<bpt id=\"p1\">[</bpt>operator++<ept id=\"p1\">](#front_insert_iterator__operator_add_add)</ept>","source":"[operator++](#front_insert_iterator__operator_add_add)"},{"pos":[2870,2963],"content":"Increments the <ph id=\"ph1\">`front_insert_iterator`</ph> to the next location into which a value may be stored.","source":"Increments the `front_insert_iterator` to the next location into which a value may be stored."},{"pos":[2968,3016],"content":"<bpt id=\"p1\">[</bpt>operator=<ept id=\"p1\">](#front_insert_iterator__operator_eq)</ept>","source":"[operator=](#front_insert_iterator__operator_eq)"},{"pos":[3017,3120],"content":"Assignment operator used to implement the output iterator expression * <ph id=\"ph1\">`i`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`x`</ph> for a front insertion.","source":"Assignment operator used to implement the output iterator expression * `i` = `x` for a front insertion."},{"pos":[3130,3142],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3146,3169],"content":"<bpt id=\"p1\">**</bpt>Header<ept id=\"p1\">**</ept>: <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header**: \\<iterator>"},{"pos":[3176,3194],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3204,3295],"content":"<bpt id=\"p1\">&lt;a name=\"front_insert_iterator__container_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  front_insert_iterator::container_type","linkify":"<a name=\"front_insert_iterator__container_type\"></a>  front_insert_iterator::container_type","source":"<a name=\"front_insert_iterator__container_type\"></a>  front_insert_iterator::container_type"},{"content":"A type that represents the container into which a front insertion is to be made.","pos":[3299,3379]},{"pos":[3440,3447],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3451,3514],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>Container<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **Container**."},{"pos":[3524,3531],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4172,4277],"content":"<bpt id=\"p1\">&lt;a name=\"front_insert_iterator__front_insert_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  front_insert_iterator::front_insert_iterator","linkify":"<a name=\"front_insert_iterator__front_insert_iterator\"></a>  front_insert_iterator::front_insert_iterator","source":"<a name=\"front_insert_iterator__front_insert_iterator\"></a>  front_insert_iterator::front_insert_iterator"},{"content":"Creates an iterator that can insert elements at the front of a specified container object.","pos":[4281,4371]},{"pos":[4446,4456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The container object into which the <ph id=\"ph1\">`front_insert_iterator`</ph> is to insert elements.","pos":[4471,4553],"source":" The container object into which the `front_insert_iterator` is to insert elements."},{"pos":[4563,4575],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4579,4640],"content":"A <ph id=\"ph1\">`front_insert_iterator`</ph> for the parameter container object.","source":"A `front_insert_iterator` for the parameter container object."},{"pos":[4650,4657],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5742,5827],"content":"<bpt id=\"p1\">&lt;a name=\"front_insert_iterator__operator_star\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  front_insert_iterator::operator*","linkify":"<a name=\"front_insert_iterator__operator_star\"></a>  front_insert_iterator::operator*","source":"<a name=\"front_insert_iterator__operator_star\"></a>  front_insert_iterator::operator*"},{"content":"Dereferences the insert iterator returning the element it addresses.","pos":[5831,5899]},{"pos":[5971,5983],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The member function returns the value of the element addressed.","pos":[5987,6050]},{"pos":[6060,6067],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Used to implement the output iterator expression <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>Iter<ept id=\"p1\">**</ept><ph id=\"ph2\"> = </ph><bpt id=\"p2\">**</bpt>value<ept id=\"p2\">**</ept>.","pos":[6071,6143],"source":"Used to implement the output iterator expression **\\*Iter** = **value**."},{"content":"If <bpt id=\"p1\">**</bpt>Iter<ept id=\"p1\">**</ept> is an iterator that addresses an element in a sequence, then <bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\*</ph>Iter<ept id=\"p2\">**</ept><ph id=\"ph2\"> = </ph><bpt id=\"p3\">**</bpt>value<ept id=\"p3\">**</ept> replaces that element with value and does not change the total number of elements in the sequence.","pos":[6144,6338],"source":" If **Iter** is an iterator that addresses an element in a sequence, then **\\*Iter** = **value** replaces that element with value and does not change the total number of elements in the sequence."},{"pos":[6348,6355],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7347,7436],"content":"<bpt id=\"p1\">&lt;a name=\"front_insert_iterator__operator_add_add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  front_insert_iterator::operator++","linkify":"<a name=\"front_insert_iterator__operator_add_add\"></a>  front_insert_iterator::operator++","source":"<a name=\"front_insert_iterator__operator_add_add\"></a>  front_insert_iterator::operator++"},{"pos":[7440,7532],"content":"Increments the <ph id=\"ph1\">`back_insert_iterator`</ph> to the next location into which a value may be stored.","source":"Increments the `back_insert_iterator` to the next location into which a value may be stored."},{"pos":[7656,7668],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7672,7760],"content":"A <ph id=\"ph1\">`front_insert_iterator`</ph> addressing the next location into which a value may be stored.","source":"A `front_insert_iterator` addressing the next location into which a value may be stored."},{"pos":[7770,7777],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Both preincrementation and postincrementation operators return the same result.","pos":[7781,7860]},{"pos":[7870,7877],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8486,8569],"content":"<bpt id=\"p1\">&lt;a name=\"front_insert_iterator__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  front_insert_iterator::operator=","linkify":"<a name=\"front_insert_iterator__operator_eq\"></a>  front_insert_iterator::operator=","source":"<a name=\"front_insert_iterator__operator_eq\"></a>  front_insert_iterator::operator="},{"content":"Appends (pushes) a value onto the front of the container.","pos":[8573,8630]},{"pos":[8825,8835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value to be assigned to the container.","pos":[8849,8891]},{"pos":[8901,8913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the last element inserted at the front of the container.","pos":[8917,8988]},{"pos":[8998,9005],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9009,9096],"content":"The first member operator evaluates <ph id=\"ph1\">`container.push_front( val)`</ph>, then returns <ph id=\"ph2\">`*this`</ph>.","source":"The first member operator evaluates `container.push_front( val)`, then returns `*this`."},{"content":"The second member operator evaluates","pos":[9103,9139]},{"pos":[9146,9210],"content":"<ph id=\"ph1\">`container-&gt;push_front((typename Container::value_type&amp;&amp;) val)`</ph>,","source":"`container->push_front((typename Container::value_type&&) val)`,"},{"pos":[9217,9238],"content":"then returns <ph id=\"ph1\">`*this`</ph>.","source":"then returns `*this`."},{"pos":[9248,9255],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9865,9946],"content":"<bpt id=\"p1\">&lt;a name=\"front_insert_iterator__reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  front_insert_iterator::reference","linkify":"<a name=\"front_insert_iterator__reference\"></a>  front_insert_iterator::reference","source":"<a name=\"front_insert_iterator__reference\"></a>  front_insert_iterator::reference"},{"content":"A type that provides a reference to an element in a sequence controlled by the associated container.","pos":[9950,10050]},{"pos":[10126,10133],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10934,10942],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>iterator&gt;<ept id=\"p1\">](../standard-library/iterator.md)</ept><ph id=\"ph2\"> </ph>","pos":[10946,10993],"source":"[\\<iterator>](../standard-library/iterator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[10996,11107],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[11110,11198],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"front_insert_iterator Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"iterator/std::front_insert_iterator\"\n  - \"std::front_insert_iterator\"\n  - \"std.front_insert_iterator\"\n  - \"front_insert_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"front_insert_iterator class\"\nms.assetid: a9a9c075-136a-4419-928b-c4871afa033c\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# front_insert_iterator Class\nDescribes an iterator adaptor that satisfies the requirements of an output iterator. It inserts, rather than overwrites, elements into the front of a sequence and thus provides semantics that are different from the overwrite semantics provided by the iterators of the C++ sequence containers. The `front_insert_iterator` class is templatized on the type of container.  \n  \n## Syntax  \n  \n```  \ntemplate <class Container>  \nclass front_insert_iterator;  \n```  \n  \n#### Parameters  \n `Container`  \n The type of container into the front of which elements are to be inserted by a `front_insert_iterator`.  \n  \n## Remarks  \n The container must satisfy the requirements for a front insertion sequence where is it possible to insert elements at the beginning of the sequence in amortized constant time. The Standard Template Library sequence containers defined by the [deque Class](../standard-library/deque-class.md) and [list Class](../standard-library/list-class.md) provide the needed `push_front` member function and satisfy these requirements. By contrast, sequence containers defined by the [vector Class](../standard-library/vector-class.md) do not satisfy these requirements and cannot be adapted to use with `front_insert_iterator`s. A `front_insert_iterator` must always be initialized with its container.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[front_insert_iterator](#front_insert_iterator__front_insert_iterator)|Creates an iterator that can insert elements at the front of a specified container object.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[container_type](#front_insert_iterator__container_type)|A type that represents the container into which a front insertion is to be made.|  \n|[reference](#front_insert_iterator__reference)|A type that provides a reference to an element in a sequence controlled by the associated container.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator*](#front_insert_iterator__operator_star)|Dereferencing operator used to implement the output iterator expression * `i` = `x` for a front insertion.|  \n|[operator++](#front_insert_iterator__operator_add_add)|Increments the `front_insert_iterator` to the next location into which a value may be stored.|  \n|[operator=](#front_insert_iterator__operator_eq)|Assignment operator used to implement the output iterator expression * `i` = `x` for a front insertion.|  \n  \n## Requirements  \n **Header**: \\<iterator>  \n  \n **Namespace:** std  \n  \n##  <a name=\"front_insert_iterator__container_type\"></a>  front_insert_iterator::container_type  \n A type that represents the container into which a front insertion is to be made.  \n  \n```  \ntypedef Container container_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **Container**.  \n  \n### Example  \n  \n```cpp  \n// front_insert_iterator_container_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   list<int> L1;  \n   front_insert_iterator<list<int> >::container_type L2 = L1;  \n   front_inserter ( L2 ) = 20;  \n   front_inserter ( L2 ) = 10;  \n   front_inserter ( L2 ) = 40;  \n  \n   list <int>::iterator vIter;  \n   cout << \"The list L2 is: ( \";  \n   for ( vIter = L2.begin ( ) ; vIter != L2.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe list L2 is: ( 40 10 20 ).  \n*\\  \n```  \n  \n##  <a name=\"front_insert_iterator__front_insert_iterator\"></a>  front_insert_iterator::front_insert_iterator  \n Creates an iterator that can insert elements at the front of a specified container object.  \n  \n```  \nexplicit front_insert_iterator(Container& _Cont);\n```  \n  \n### Parameters  \n `_Cont`  \n The container object into which the `front_insert_iterator` is to insert elements.  \n  \n### Return Value  \n A `front_insert_iterator` for the parameter container object.  \n  \n### Example  \n  \n```cpp  \n// front_insert_iterator_front_insert_iterator.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n   list <int>::iterator L_Iter;  \n  \n   list<int> L;  \n   for (i = -1 ; i < 9 ; ++i )    \n   {  \n      L.push_back ( 2 * i );  \n   }  \n  \n   cout << \"The list L is:\\n ( \";  \n   for ( L_Iter = L.begin( ) ; L_Iter != L.end( ); L_Iter++)  \n      cout << *L_Iter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Using the member function to insert an element  \n   front_inserter ( L ) = 20;  \n  \n   // Alternatively, one may use the template function  \n   front_insert_iterator< list < int> > Iter(L);  \n *Iter = 30;  \n  \n   cout << \"After the front insertions, the list L is:\\n ( \";  \n   for ( L_Iter = L.begin( ) ; L_Iter != L.end( ); L_Iter++)  \n      cout << *L_Iter << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe list L is:  \n ( -2 0 2 4 6 8 10 12 14 16 ).  \nAfter the front insertions, the list L is:  \n ( 30 20 -2 0 2 4 6 8 10 12 14 16 ).  \n*\\  \n```  \n  \n##  <a name=\"front_insert_iterator__operator_star\"></a>  front_insert_iterator::operator*  \n Dereferences the insert iterator returning the element it addresses.  \n  \n```  \nfront_insert_iterator<Container>& operator*();\n```  \n  \n### Return Value  \n The member function returns the value of the element addressed.  \n  \n### Remarks  \n Used to implement the output iterator expression **\\*Iter** = **value**. If **Iter** is an iterator that addresses an element in a sequence, then **\\*Iter** = **value** replaces that element with value and does not change the total number of elements in the sequence.  \n  \n### Example  \n  \n```cpp  \n// front_insert_iterator_deref.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n   list <int>::iterator L_Iter;  \n  \n   list<int> L;  \n   for ( i = -1 ; i < 9 ; ++i )   \n   {  \n      L.push_back ( 2 * i );  \n   }  \n  \n   cout << \"The list L is:\\n ( \";  \n   for ( L_Iter = L.begin( ) ; L_Iter != L.end( ); L_Iter++)  \n      cout << *L_Iter << \" \";  \n   cout << \").\" << endl;  \n  \n   front_insert_iterator< list < int> > Iter(L);  \n *Iter = 20;  \n  \n   // Alternatively, you may use  \n   front_inserter ( L ) = 30;  \n  \n   cout << \"After the front insertions, the list L is:\\n ( \";  \n   for ( L_Iter = L.begin( ) ; L_Iter != L.end( ); L_Iter++)  \n      cout << *L_Iter << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe list L is:  \n ( -2 0 2 4 6 8 10 12 14 16 ).  \nAfter the front insertions, the list L is:  \n ( 30 20 -2 0 2 4 6 8 10 12 14 16 ).  \n*\\  \n```  \n  \n##  <a name=\"front_insert_iterator__operator_add_add\"></a>  front_insert_iterator::operator++  \n Increments the `back_insert_iterator` to the next location into which a value may be stored.  \n  \n```  \nfront_insert_iterator<Container>& operator++();\n\nfront_insert_iterator<Container> operator++(int);\n```  \n  \n### Return Value  \n A `front_insert_iterator` addressing the next location into which a value may be stored.  \n  \n### Remarks  \n Both preincrementation and postincrementation operators return the same result.  \n  \n### Example  \n  \n```cpp  \n// front_insert_iterator_op_incre.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   list<int> L1;  \n   front_insert_iterator<list<int> > iter ( L1 );  \n *iter = 10;  \n   iter++;  \n *iter = 20;  \n   iter++;  \n *iter = 30;  \n   iter++;  \n  \n   list <int>::iterator vIter;  \n   cout << \"The list L1 is: ( \";  \n   for ( vIter = L1.begin ( ) ; vIter != L1.end ( ); vIter++ )  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe list L1 is: ( 30 20 10 ).  \n*\\  \n```  \n  \n##  <a name=\"front_insert_iterator__operator_eq\"></a>  front_insert_iterator::operator=  \n Appends (pushes) a value onto the front of the container.  \n  \n```  \nfront_insert_iterator<Container>& operator=(typename Container::const_reference val);\n\nfront_insert_iterator<Container>& operator=(typename Container::value_type&& val);\n```  \n  \n### Parameters  \n ` val`  \n The value to be assigned to the container.  \n  \n### Return Value  \n A reference to the last element inserted at the front of the container.  \n  \n### Remarks  \n The first member operator evaluates `container.push_front( val)`, then returns `*this`.  \n  \n The second member operator evaluates  \n  \n `container->push_front((typename Container::value_type&&) val)`,  \n  \n then returns `*this`.  \n  \n### Example  \n  \n```cpp  \n// front_insert_iterator_op_assign.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   list<int> L1;  \n   front_insert_iterator<list<int> > iter ( L1 );  \n *iter = 10;  \n   iter++;  \n *iter = 20;  \n   iter++;  \n *iter = 30;  \n   iter++;  \n  \n   list <int>::iterator vIter;  \n   cout << \"The list L1 is: ( \";  \n   for ( vIter = L1.begin ( ) ; vIter != L1.end ( ); vIter++ )  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe list L1 is: ( 30 20 10 ).  \n*\\  \n```  \n  \n##  <a name=\"front_insert_iterator__reference\"></a>  front_insert_iterator::reference  \n A type that provides a reference to an element in a sequence controlled by the associated container.  \n  \n```  \ntypedef typename Container::reference reference;  \n```  \n  \n### Example  \n  \n```cpp  \n// front_insert_iterator_reference.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   list<int> L;  \n   front_insert_iterator<list<int> > fiivIter( L );  \n *fiivIter = 10;  \n *fiivIter = 20;  \n *fiivIter = 30;  \n  \n   list<int>::iterator LIter;  \n   cout << \"The list L is: ( \";  \n   for ( LIter = L.begin ( ) ; LIter != L.end ( ); LIter++)  \n      cout << *LIter << \" \";  \n   cout << \").\" << endl;  \n  \n   front_insert_iterator<list<int> >::reference   \n        RefFirst = *(L.begin ( ));  \n   cout << \"The first element in the list L is: \"   \n        << RefFirst << \".\" << endl;  \n}  \n\\* Output:   \nThe list L is: ( 30 20 10 ).  \nThe first element in the list L is: 30.  \n*\\  \n```  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n"}