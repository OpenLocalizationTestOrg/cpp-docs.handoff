{"nodes":[{"pos":[12,44],"content":"iterator Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"iterator Struct | Microsoft Docs","pos":[0,32]}]},{"pos":[687,702],"content":"iterator Struct","linkify":"iterator Struct","nodes":[{"content":"iterator Struct","pos":[0,15]}]},{"pos":[703,814],"content":"An empty base struct used to ensure that a user-defined iterator class works properly with <bpt id=\"p1\">**</bpt>iterator_trait<ept id=\"p1\">**</ept>s.","source":"An empty base struct used to ensure that a user-defined iterator class works properly with **iterator_trait**s."},{"pos":[823,829],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1076,1083],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template struct serves as a base type for all iterators.","pos":[1087,1147]},{"content":"It defines the member types","pos":[1148,1175]},{"pos":[1183,1253],"content":"<ph id=\"ph1\">`iterator_category`</ph> (a synonym for the template parameter <ph id=\"ph2\">`Category`</ph>).","source":"`iterator_category` (a synonym for the template parameter `Category`)."},{"pos":[1261,1322],"content":"<ph id=\"ph1\">`value_type`</ph> (a synonym for the template parameter <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>).","source":"`value_type` (a synonym for the template parameter **Type**)."},{"pos":[1330,1398],"content":"<ph id=\"ph1\">`difference_type`</ph> (a synonym for the template parameter <ph id=\"ph2\">`Distance`</ph>).","source":"`difference_type` (a synonym for the template parameter `Distance`)."},{"pos":[1406,1471],"content":"<ph id=\"ph1\">`distance_type`</ph> (a synonym for the template parameter <ph id=\"ph2\">`Distance`</ph>)","source":"`distance_type` (a synonym for the template parameter `Distance`)"},{"pos":[1479,1538],"content":"<ph id=\"ph1\">`pointer`</ph> (a synonym for the template parameter <ph id=\"ph2\">`Pointer`</ph>).","source":"`pointer` (a synonym for the template parameter `Pointer`)."},{"pos":[1546,1609],"content":"<ph id=\"ph1\">`reference`</ph> (a synonym for the template parameter <ph id=\"ph2\">`Reference`</ph>).","source":"`reference` (a synonym for the template parameter `Reference`)."},{"pos":[1616,1780],"content":"Note that <ph id=\"ph1\">`value_type`</ph> should not be a constant type even if <bpt id=\"p1\">**</bpt>pointer<ept id=\"p1\">**</ept> points at an object of const <bpt id=\"p2\">**</bpt>Type<ept id=\"p2\">**</ept> and reference designates an object of const <bpt id=\"p3\">**</bpt>Type<ept id=\"p3\">**</ept>.","source":"Note that `value_type` should not be a constant type even if **pointer** points at an object of const **Type** and reference designates an object of const **Type**."},{"pos":[1789,1796],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1800,1947],"content":"See <bpt id=\"p1\">[</bpt>iterator_traits<ept id=\"p1\">](../standard-library/iterator-traits-struct.md)</ept> for an example of how to declare and use the types in the iterator base class.","source":"See [iterator_traits](../standard-library/iterator-traits-struct.md) for an example of how to declare and use the types in the iterator base class."},{"pos":[1956,1968],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1972,1995],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[2002,2020],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2029,2037],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>iterator&gt;<ept id=\"p1\">](../standard-library/iterator.md)</ept><ph id=\"ph2\"> </ph>","pos":[2041,2088],"source":"[\\<iterator>](../standard-library/iterator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[2091,2202],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[2205,2293],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"iterator Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"iterator\"\n  - \"std::iterator\"\n  - \"std.iterator\"\n  - \"xutility/std::iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"iterator class\"\n  - \"iterator struct\"\nms.assetid: c74c8000-8b18-4829-9b71-6103c4229b74\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# iterator Struct\nAn empty base struct used to ensure that a user-defined iterator class works properly with **iterator_trait**s.  \n  \n## Syntax  \n```    \nstruct iterator {\n   typedef Category iterator_category;\n   typedef Type value_type;\n   typedef Distance difference_type;\n   typedef Distance distance_type;\n   typedef Pointer pointer;\n   typedef Reference reference;\n   };  \n```    \n## Remarks  \n The template struct serves as a base type for all iterators. It defines the member types  \n  \n- `iterator_category` (a synonym for the template parameter `Category`).  \n  \n- `value_type` (a synonym for the template parameter **Type**).  \n  \n- `difference_type` (a synonym for the template parameter `Distance`).  \n  \n- `distance_type` (a synonym for the template parameter `Distance`)  \n  \n- `pointer` (a synonym for the template parameter `Pointer`).  \n  \n- `reference` (a synonym for the template parameter `Reference`).  \n  \n Note that `value_type` should not be a constant type even if **pointer** points at an object of const **Type** and reference designates an object of const **Type**.  \n  \n## Example  \n See [iterator_traits](../standard-library/iterator-traits-struct.md) for an example of how to declare and use the types in the iterator base class.  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}