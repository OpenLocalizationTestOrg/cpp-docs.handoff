{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 1) C4946 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 1) C4946 | Microsoft Docs","pos":[0,49]}]},{"content":"Compiler Warning (level 1) C4946","pos":[610,642]},{"content":"reinterpret_cast used between related classes: 'class1' and 'class2'","pos":[643,711]},{"content":"Do not use <bpt id=\"p1\">[</bpt>reinterpret_cast<ept id=\"p1\">](../../cpp/reinterpret-cast-operator.md)</ept> to cast between related types.","pos":[718,818],"source":"Do not use [reinterpret_cast](../../cpp/reinterpret-cast-operator.md) to cast between related types."},{"content":"Use <bpt id=\"p1\">[</bpt>static_cast<ept id=\"p1\">](../../cpp/static-cast-operator.md)</ept> instead, or for polymorphic types, use <bpt id=\"p2\">[</bpt>dynamic_cast<ept id=\"p2\">](../../cpp/dynamic-cast-operator.md)</ept>.","pos":[819,962],"source":" Use [static_cast](../../cpp/static-cast-operator.md) instead, or for polymorphic types, use [dynamic_cast](../../cpp/dynamic-cast-operator.md)."},{"content":"By default, this warning is off.","pos":[969,1001]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Compiler Warnings That Are Off by Default<ept id=\"p1\">](../../preprocessor/compiler-warnings-that-are-off-by-default.md)</ept>.","pos":[1002,1137],"source":" For more information, see [Compiler Warnings That Are Off by Default](../../preprocessor/compiler-warnings-that-are-off-by-default.md)."},{"content":"The following code example generates C4946:","pos":[1144,1187]}],"content":"---\ntitle: \"Compiler Warning (level 1) C4946 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4946\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4946\"\nms.assetid: b85cbef0-e053-4de6-9b14-7b0f82d40495\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 1) C4946\nreinterpret_cast used between related classes: 'class1' and 'class2'  \n  \n Do not use [reinterpret_cast](../../cpp/reinterpret-cast-operator.md) to cast between related types. Use [static_cast](../../cpp/static-cast-operator.md) instead, or for polymorphic types, use [dynamic_cast](../../cpp/dynamic-cast-operator.md).  \n  \n By default, this warning is off. For more information, see [Compiler Warnings That Are Off by Default](../../preprocessor/compiler-warnings-that-are-off-by-default.md).  \n  \n The following code example generates C4946:  \n  \n```  \n// C4946.cpp  \n// compile with: /W1  \n#pragma warning (default : 4946)  \nclass a {  \npublic:  \n   a() : m(0) {}  \n   int m;  \n};  \n  \nclass b : public virtual a {  \n};  \n  \nclass b2 : public virtual a {  \n};  \n  \nclass c : public b, public b2 {  \n};  \n  \nint main() {  \n   c* pC = new c;  \n   a* pA = reinterpret_cast<a*>(pC);   // C4946  \n   // try the following line instead  \n   // a* pA = static_cast<a*>(pC);  \n}  \n```"}