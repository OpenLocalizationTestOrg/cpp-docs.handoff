{"nodes":[{"pos":[12,51],"content":"Inline Functions (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Inline Functions (C++) | Microsoft Docs","pos":[0,39]}]},{"content":"Inline Functions (C++)","pos":[725,747]},{"content":"A function defined in the body of a class declaration is an inline function.","pos":[748,824]},{"content":"Example","pos":[833,840]},{"content":"In the following class declaration, the <ph id=\"ph1\">`Account`</ph> constructor is an inline function.","pos":[844,928],"source":"In the following class declaration, the `Account` constructor is an inline function."},{"content":"The member functions <ph id=\"ph1\">`GetBalance`</ph>, <ph id=\"ph2\">`Deposit`</ph>, and <ph id=\"ph3\">`Withdraw`</ph> are not specified as <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> but can be implemented as inline functions.","pos":[929,1065],"source":" The member functions `GetBalance`, `Deposit`, and `Withdraw` are not specified as **inline** but can be implemented as inline functions."},{"pos":[1651,1837],"content":"[!NOTE]\n In the class declaration, the functions were declared without the **inline** keyword. The **inline** keyword can be specified in the class declaration; the result is the same.","leadings":["","> "],"nodes":[{"content":" In the class declaration, the functions were declared without the **inline** keyword. The **inline** keyword can be specified in the class declaration; the result is the same.","pos":[8,184],"nodes":[{"content":"In the class declaration, the functions were declared without the <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> keyword.","pos":[1,86],"source":" In the class declaration, the functions were declared without the **inline** keyword."},{"content":"The <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> keyword can be specified in the class declaration; the result is the same.","pos":[87,176],"source":" The **inline** keyword can be specified in the class declaration; the result is the same."}]}]},{"content":"A given inline member function must be declared the same way in every compilation unit.","pos":[1844,1931]},{"content":"This constraint causes inline functions to behave as if they were instantiated functions.","pos":[1932,2021]},{"content":"Additionally, there must be exactly one definition of an inline function.","pos":[2022,2095]},{"content":"A class member function defaults to external linkage unless a definition for that function contains the <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> specifier.","pos":[2102,2227],"source":"A class member function defaults to external linkage unless a definition for that function contains the **inline** specifier."},{"content":"The preceding example shows that these functions need not be explicitly declared with the <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> specifier; using <bpt id=\"p2\">**</bpt>inline<ept id=\"p2\">**</ept> in the function definition causes it to be an inline function.","pos":[2228,2419],"source":" The preceding example shows that these functions need not be explicitly declared with the **inline** specifier; using **inline** in the function definition causes it to be an inline function."},{"content":"However, it is illegal to redeclare a function as <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> after a call to that function.","pos":[2420,2511],"source":" However, it is illegal to redeclare a function as **inline** after a call to that function."},{"content":"Inline, __inline, and <ph id=\"ph1\">\\_</ph>_forceinline","pos":[2520,2556],"source":"Inline, __inline, and \\__forceinline"},{"pos":[2560,2698],"content":"The <ph id=\"ph1\">`inline`</ph> and <ph id=\"ph2\">`__inline`</ph> specifiers instruct the compiler to insert a copy of the function body into each place the function is called.","source":"The `inline` and `__inline` specifiers instruct the compiler to insert a copy of the function body into each place the function is called."},{"content":"The insertion (called inline expansion or inlining) occurs only if the compiler's cost/benefit analysis show it to be profitable.","pos":[2705,2834]},{"content":"Inline expansion alleviates the function-call overhead at the potential cost of larger code size.","pos":[2835,2932]},{"content":"The <ph id=\"ph1\">`__forceinline`</ph> keyword overrides the cost/benefit analysis and relies on the judgment of the programmer instead.","pos":[2939,3056],"source":"The `__forceinline` keyword overrides the cost/benefit analysis and relies on the judgment of the programmer instead."},{"content":"Exercise caution when using <ph id=\"ph1\">`__forceinline`</ph>.","pos":[3057,3101],"source":" Exercise caution when using `__forceinline`."},{"content":"Indiscriminate use of <ph id=\"ph1\">`__forceinline`</ph> can result in larger code with only marginal performance gains or, in some cases, even performance losses (due to increased paging of a larger executable, for example).","pos":[3102,3308],"source":" Indiscriminate use of `__forceinline` can result in larger code with only marginal performance gains or, in some cases, even performance losses (due to increased paging of a larger executable, for example)."},{"content":"Using inline functions can make your program faster because they eliminate the overhead associated with function calls.","pos":[3315,3434]},{"content":"Functions expanded inline are subject to code optimizations not available to normal functions.","pos":[3435,3529]},{"content":"The compiler treats the inline expansion options and keywords as suggestions.","pos":[3536,3613]},{"content":"There is no guarantee that functions will be inlined.","pos":[3614,3667]},{"content":"You cannot force the compiler to inline a particular function, even with the <ph id=\"ph1\">`__forceinline`</ph> keyword.","pos":[3668,3769],"source":" You cannot force the compiler to inline a particular function, even with the `__forceinline` keyword."},{"content":"When compiling with <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>, the compiler will not inline a function if there are security attributes applied to the function.","pos":[3770,3897],"source":" When compiling with **/clr**, the compiler will not inline a function if there are security attributes applied to the function."},{"content":"The <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> keyword is available only in C++.","pos":[3904,3952],"source":"The **inline** keyword is available only in C++."},{"content":"The <ph id=\"ph1\">`__inline`</ph> and <ph id=\"ph2\">`__forceinline`</ph> keywords are available in both C and C++.","pos":[3953,4029],"source":" The `__inline` and `__forceinline` keywords are available in both C and C++."},{"content":"For compatibility with previous versions, <bpt id=\"p1\">**</bpt>_inline<ept id=\"p1\">**</ept> is a synonym for <ph id=\"ph1\">`__inline`</ph>.","pos":[4030,4112],"source":" For compatibility with previous versions, **_inline** is a synonym for `__inline`."},{"content":"The <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> keyword tells the compiler that inline expansion is preferred.","pos":[4119,4196],"source":"The **inline** keyword tells the compiler that inline expansion is preferred."},{"content":"However, the compiler can create a separate instance of the function (instantiate) and create standard calling linkages instead of inserting the code inline.","pos":[4197,4354]},{"content":"Two cases where this can happen are:","pos":[4355,4391]},{"content":"Recursive functions.","pos":[4401,4421]},{"content":"Functions that are referred to through a pointer elsewhere in the translation unit.","pos":[4431,4514]},{"pos":[4521,4700],"content":"These reasons may interfere with inlining, <bpt id=\"p1\">*</bpt>as may others<ept id=\"p1\">*</ept>, at the discretion of the compiler; you should not depend on the <bpt id=\"p2\">**</bpt>inline<ept id=\"p2\">**</ept> specifier to cause a function to be inlined.","source":"These reasons may interfere with inlining, *as may others*, at the discretion of the compiler; you should not depend on the **inline** specifier to cause a function to be inlined."},{"content":"As with normal functions, there is no defined order of evaluation of the arguments to an inline function.","pos":[4707,4812]},{"content":"In fact, it could be different from the order in which the arguments are evaluated when passed using normal function call protocol.","pos":[4813,4944]},{"pos":[4951,5111],"content":"The <bpt id=\"p1\">[</bpt>/Ob<ept id=\"p1\">](../build/reference/ob-inline-function-expansion.md)</ept> compiler optimization option helps to determine whether inline function expansion actually occurs.","source":"The [/Ob](../build/reference/ob-inline-function-expansion.md) compiler optimization option helps to determine whether inline function expansion actually occurs."},{"pos":[5118,5265],"content":"<bpt id=\"p1\">[</bpt>/LTCG<ept id=\"p1\">](../build/reference/ltcg-link-time-code-generation.md)</ept> performs cross-module inlining regardless of whether it was requested in source code.","source":"[/LTCG](../build/reference/ltcg-link-time-code-generation.md) performs cross-module inlining regardless of whether it was requested in source code."},{"content":"Example 1","pos":[5275,5284]},{"pos":[5444,5599],"content":"A class's member functions can be declared inline either by using the <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> keyword or by placing the function definition within the class definition.","source":"A class's member functions can be declared inline either by using the **inline** keyword or by placing the function definition within the class definition."},{"content":"Example 2","pos":[5609,5618]},{"content":"Microsoft Specific","pos":[5863,5881]},{"pos":[5885,5936],"content":"The <ph id=\"ph1\">`__inline`</ph> keyword is equivalent to <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept>.","source":"The `__inline` keyword is equivalent to **inline**."},{"content":"Even with <ph id=\"ph1\">`__forceinline`</ph>, the compiler cannot inline code in all circumstances.","pos":[5943,6023],"source":"Even with `__forceinline`, the compiler cannot inline code in all circumstances."},{"content":"The compiler cannot inline a function if:","pos":[6024,6065]},{"content":"The function or its caller is compiled with /Ob0 (the default option for debug builds).","pos":[6075,6162]},{"content":"The function and the caller use different types of exception handling (C++ exception handling in one, structured exception handling in the other).","pos":[6172,6318]},{"content":"The function has a variable argument list.","pos":[6328,6370]},{"content":"The function uses inline assembly, unless compiled with /Og, /Ox, /O1, or /O2.","pos":[6380,6458]},{"content":"The function is recursive and not accompanied by <bpt id=\"p1\">**</bpt>#pragma inline_recursion(on)<ept id=\"p1\">**</ept>.","pos":[6468,6550],"source":"The function is recursive and not accompanied by **#pragma inline_recursion(on)**."},{"content":"With the pragma, recursive functions are inlined to a default depth of 16 calls.","pos":[6551,6631]},{"content":"To reduce the inlining depth, use <bpt id=\"p1\">[</bpt>inline_depth<ept id=\"p1\">](../preprocessor/inline-depth.md)</ept> pragma.","pos":[6632,6721],"source":" To reduce the inlining depth, use [inline_depth](../preprocessor/inline-depth.md) pragma."},{"content":"The function is virtual and is called virtually.","pos":[6731,6779]},{"content":"Direct calls to virtual functions can be inlined.","pos":[6780,6829]},{"content":"The program takes the address of the function and the call is made via the pointer to the function.","pos":[6839,6938]},{"content":"Direct calls to functions that have had their address taken can be inlined.","pos":[6939,7014]},{"pos":[7024,7132],"content":"The function is also marked with the <bpt id=\"p1\">[</bpt>naked<ept id=\"p1\">](../cpp/naked-cpp.md)</ept> <bpt id=\"p2\">[</bpt>__declspec<ept id=\"p2\">](../cpp/declspec.md)</ept> modifier.","source":"The function is also marked with the [naked](../cpp/naked-cpp.md) [__declspec](../cpp/declspec.md) modifier."},{"pos":[7139,7242],"content":"If the compiler cannot inline a function declared with <ph id=\"ph1\">`__forceinline`</ph>, it generates a level 1 warning.","source":"If the compiler cannot inline a function declared with `__forceinline`, it generates a level 1 warning."},{"content":"Recursive functions can be substituted inline to a depth specified by the <bpt id=\"p1\">[</bpt>inline_depth<ept id=\"p1\">](../preprocessor/inline-depth.md)</ept> pragma, up to a maximum of 16 calls.","pos":[7249,7407],"source":"Recursive functions can be substituted inline to a depth specified by the [inline_depth](../preprocessor/inline-depth.md) pragma, up to a maximum of 16 calls."},{"content":"After that depth, recursive function calls are treated as calls to an instance of the function.","pos":[7408,7503]},{"content":"The depth to which recursive functions are examined by the inline heuristic cannot exceed 16.","pos":[7505,7598]},{"content":"The <bpt id=\"p1\">[</bpt>inline_recursion<ept id=\"p1\">](../preprocessor/inline-recursion.md)</ept> pragma controls the inline expansion of a function currently under expansion.","pos":[7599,7736],"source":" The [inline_recursion](../preprocessor/inline-recursion.md) pragma controls the inline expansion of a function currently under expansion."},{"content":"See the <bpt id=\"p1\">[</bpt>Inline-Function Expansion<ept id=\"p1\">](../build/reference/ob-inline-function-expansion.md)</ept> (/Ob) compiler option for related information.","pos":[7737,7871],"source":" See the [Inline-Function Expansion](../build/reference/ob-inline-function-expansion.md) (/Ob) compiler option for related information."},{"content":"END Microsoft Specific","pos":[7881,7903]},{"pos":[7907,7967],"content":"For more information on using the <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> specifier, see:","source":"For more information on using the **inline** specifier, see:"},{"content":"Inline Class Member Functions","pos":[7978,8007]},{"content":"Defining Inline C++ Functions with dllexport and dllimport","pos":[8051,8109]},{"content":"When to use inline functions","pos":[8189,8217]},{"content":"Inline functions are best used for small functions such as accessing private data members.","pos":[8221,8311]},{"content":"The main purpose of these one- or two-line \"accessor\" functions is to return state information about objects; short functions are sensitive to the overhead of function calls.","pos":[8312,8486]},{"content":"Longer functions spend proportionately less time in the calling/returning sequence and benefit less from inlining.","pos":[8487,8601]},{"pos":[8608,8650],"content":"A <ph id=\"ph1\">`Point`</ph> class can be defined as follows:","source":"A `Point` class can be defined as follows:"},{"pos":[9035,9253],"content":"Assuming coordinate manipulation is a relatively common operation in a client of such a class, specifying the two accessor functions (<ph id=\"ph1\">`x`</ph> and <ph id=\"ph2\">`y`</ph> in the preceding example) as <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> typically saves the overhead on:","source":"Assuming coordinate manipulation is a relatively common operation in a client of such a class, specifying the two accessor functions (`x` and `y` in the preceding example) as **inline** typically saves the overhead on:"},{"content":"Function calls (including parameter passing and placing the object's address on the stack)","pos":[9263,9353]},{"content":"Preservation of caller's stack frame","pos":[9363,9399]},{"content":"New stack-frame setup","pos":[9409,9430]},{"content":"Return-value communication","pos":[9440,9466]},{"content":"Old stack-frame restore","pos":[9476,9499]},{"content":"Return","pos":[9509,9515]},{"content":"Inline functions vs. macros","pos":[9524,9551]},{"content":"Although inline functions are similar to macros (because the function code is expanded at the point of the call at compile time), inline functions are parsed by the compiler, whereas macros are expanded by the preprocessor.","pos":[9555,9778]},{"content":"As a result, there are several important differences:","pos":[9779,9832]},{"content":"Inline functions follow all the protocols of type safety enforced on normal functions.","pos":[9842,9928]},{"pos":[9938,10089],"content":"Inline functions are specified using the same syntax as any other function except that they include the <bpt id=\"p1\">**</bpt>inline<ept id=\"p1\">**</ept> keyword in the function declaration.","source":"Inline functions are specified using the same syntax as any other function except that they include the **inline** keyword in the function declaration."},{"content":"Expressions passed as arguments to inline functions are evaluated once.","pos":[10099,10170]},{"content":"In some cases, expressions passed as arguments to macros can be evaluated more than once.","pos":[10171,10260]},{"content":"The following example shows a macro that converts lowercase letters to uppercase:","pos":[10267,10348]},{"pos":[10703,10866],"content":"The intent of the expression <ph id=\"ph1\">`toupper(getc(stdin))`</ph> is that a character should be read from the console device (<ph id=\"ph2\">`stdin`</ph>) and, if necessary, converted to uppercase.","source":"The intent of the expression `toupper(getc(stdin))` is that a character should be read from the console device (`stdin`) and, if necessary, converted to uppercase."},{"content":"Because of the implementation of the macro, <ph id=\"ph1\">`getc`</ph> is executed once to determine whether the character is greater than or equal to \"a,\" and once to determine whether it is less than or equal to \"z.\"","pos":[10873,11071],"source":"Because of the implementation of the macro, `getc` is executed once to determine whether the character is greater than or equal to \"a,\" and once to determine whether it is less than or equal to \"z.\""},{"content":"If it is in that range, <ph id=\"ph1\">`getc`</ph> is executed again to convert the character to uppercase.","pos":[11072,11159],"source":" If it is in that range, `getc` is executed again to convert the character to uppercase."},{"content":"This means the program waits for two or three characters when, ideally, it should wait for only one.","pos":[11160,11260]},{"content":"Inline functions remedy the problem previously described:","pos":[11267,11324]},{"content":"See Also","pos":[11705,11713]},{"content":"noinline","pos":[11718,11726]},{"content":"auto_inline","pos":[11753,11764]}],"content":"---\ntitle: \"Inline Functions (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__forceinline_cpp\"\n  - \"__inline_cpp\"\n  - \"inline_cpp\"\n  - \"__forceinline\"\n  - \"__inline\"\n  - \"inline\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"inline functions, class members\"\nms.assetid: 355f120c-2847-4608-ac04-8dda18ffe10c\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Inline Functions (C++)\nA function defined in the body of a class declaration is an inline function.  \n  \n## Example  \n In the following class declaration, the `Account` constructor is an inline function. The member functions `GetBalance`, `Deposit`, and `Withdraw` are not specified as **inline** but can be implemented as inline functions.  \n  \n```  \n// Inline_Member_Functions.cpp  \nclass Account  \n{  \npublic:  \n    Account(double initial_balance) { balance = initial_balance; }  \n    double GetBalance();  \n    double Deposit( double Amount );  \n    double Withdraw( double Amount );  \nprivate:  \n    double balance;  \n};  \n  \ninline double Account::GetBalance()  \n{  \n    return balance;  \n}  \n  \ninline double Account::Deposit( double Amount )  \n{  \n    return ( balance += Amount );  \n}  \n  \ninline double Account::Withdraw( double Amount )  \n{  \n    return ( balance -= Amount );  \n}  \nint main()  \n{  \n}  \n```  \n  \n> [!NOTE]\n>  In the class declaration, the functions were declared without the **inline** keyword. The **inline** keyword can be specified in the class declaration; the result is the same.  \n  \n A given inline member function must be declared the same way in every compilation unit. This constraint causes inline functions to behave as if they were instantiated functions. Additionally, there must be exactly one definition of an inline function.  \n  \n A class member function defaults to external linkage unless a definition for that function contains the **inline** specifier. The preceding example shows that these functions need not be explicitly declared with the **inline** specifier; using **inline** in the function definition causes it to be an inline function. However, it is illegal to redeclare a function as **inline** after a call to that function.  \n  \n## Inline, __inline, and \\__forceinline  \n The `inline` and `__inline` specifiers instruct the compiler to insert a copy of the function body into each place the function is called.  \n  \n The insertion (called inline expansion or inlining) occurs only if the compiler's cost/benefit analysis show it to be profitable. Inline expansion alleviates the function-call overhead at the potential cost of larger code size.  \n  \n The `__forceinline` keyword overrides the cost/benefit analysis and relies on the judgment of the programmer instead. Exercise caution when using `__forceinline`. Indiscriminate use of `__forceinline` can result in larger code with only marginal performance gains or, in some cases, even performance losses (due to increased paging of a larger executable, for example).  \n  \n Using inline functions can make your program faster because they eliminate the overhead associated with function calls. Functions expanded inline are subject to code optimizations not available to normal functions.  \n  \n The compiler treats the inline expansion options and keywords as suggestions. There is no guarantee that functions will be inlined. You cannot force the compiler to inline a particular function, even with the `__forceinline` keyword. When compiling with **/clr**, the compiler will not inline a function if there are security attributes applied to the function.  \n  \n The **inline** keyword is available only in C++. The `__inline` and `__forceinline` keywords are available in both C and C++. For compatibility with previous versions, **_inline** is a synonym for `__inline`.  \n  \n The **inline** keyword tells the compiler that inline expansion is preferred. However, the compiler can create a separate instance of the function (instantiate) and create standard calling linkages instead of inserting the code inline. Two cases where this can happen are:  \n  \n-   Recursive functions.  \n  \n-   Functions that are referred to through a pointer elsewhere in the translation unit.  \n  \n These reasons may interfere with inlining, *as may others*, at the discretion of the compiler; you should not depend on the **inline** specifier to cause a function to be inlined.  \n  \n As with normal functions, there is no defined order of evaluation of the arguments to an inline function. In fact, it could be different from the order in which the arguments are evaluated when passed using normal function call protocol.  \n  \n The [/Ob](../build/reference/ob-inline-function-expansion.md) compiler optimization option helps to determine whether inline function expansion actually occurs.  \n  \n [/LTCG](../build/reference/ltcg-link-time-code-generation.md) performs cross-module inlining regardless of whether it was requested in source code.  \n  \n### Example 1  \n  \n```  \n// inline_keyword1.cpp  \n// compile with: /c  \ninline int max( int a , int b ) {  \n   if( a > b )   \n      return a;  \n   return b;  \n}  \n```  \n  \n A class's member functions can be declared inline either by using the **inline** keyword or by placing the function definition within the class definition.  \n  \n### Example 2  \n  \n```  \n// inline_keyword2.cpp  \n// compile with: /EHsc /c  \n#include <iostream>  \nusing namespace std;  \n  \nclass MyClass {  \npublic:  \n   void print() { cout << i << ' '; }   // Implicitly inline  \nprivate:  \n   int i;  \n};  \n```  \n  \n### Microsoft Specific  \n The `__inline` keyword is equivalent to **inline**.  \n  \n Even with `__forceinline`, the compiler cannot inline code in all circumstances. The compiler cannot inline a function if:  \n  \n-   The function or its caller is compiled with /Ob0 (the default option for debug builds).  \n  \n-   The function and the caller use different types of exception handling (C++ exception handling in one, structured exception handling in the other).  \n  \n-   The function has a variable argument list.  \n  \n-   The function uses inline assembly, unless compiled with /Og, /Ox, /O1, or /O2.  \n  \n-   The function is recursive and not accompanied by **#pragma inline_recursion(on)**. With the pragma, recursive functions are inlined to a default depth of 16 calls. To reduce the inlining depth, use [inline_depth](../preprocessor/inline-depth.md) pragma.  \n  \n-   The function is virtual and is called virtually. Direct calls to virtual functions can be inlined.  \n  \n-   The program takes the address of the function and the call is made via the pointer to the function. Direct calls to functions that have had their address taken can be inlined.  \n  \n-   The function is also marked with the [naked](../cpp/naked-cpp.md) [__declspec](../cpp/declspec.md) modifier.  \n  \n If the compiler cannot inline a function declared with `__forceinline`, it generates a level 1 warning.  \n  \n Recursive functions can be substituted inline to a depth specified by the [inline_depth](../preprocessor/inline-depth.md) pragma, up to a maximum of 16 calls. After that depth, recursive function calls are treated as calls to an instance of the function.  The depth to which recursive functions are examined by the inline heuristic cannot exceed 16. The [inline_recursion](../preprocessor/inline-recursion.md) pragma controls the inline expansion of a function currently under expansion. See the [Inline-Function Expansion](../build/reference/ob-inline-function-expansion.md) (/Ob) compiler option for related information.  \n  \n### END Microsoft Specific  \n For more information on using the **inline** specifier, see:  \n  \n-   [Inline Class Member Functions](../cpp/inline-functions-cpp.md)  \n  \n-   [Defining Inline C++ Functions with dllexport and dllimport](../cpp/defining-inline-cpp-functions-with-dllexport-and-dllimport.md)  \n  \n## When to use inline functions  \n Inline functions are best used for small functions such as accessing private data members. The main purpose of these one- or two-line \"accessor\" functions is to return state information about objects; short functions are sensitive to the overhead of function calls. Longer functions spend proportionately less time in the calling/returning sequence and benefit less from inlining.  \n  \n A `Point` class can be defined as follows:  \n  \n```  \n// when_to_use_inline_functions.cpp  \nclass Point  \n{  \npublic:  \n    // Define \"accessor\" functions as  \n    //  reference types.  \n    unsigned& x();  \n    unsigned& y();  \nprivate:  \n    unsigned _x;  \n    unsigned _y;  \n};  \n  \ninline unsigned& Point::x()  \n{  \n    return _x;  \n}  \ninline unsigned& Point::y()  \n{  \n    return _y;  \n}  \nint main()  \n{  \n}  \n```  \n  \n Assuming coordinate manipulation is a relatively common operation in a client of such a class, specifying the two accessor functions (`x` and `y` in the preceding example) as **inline** typically saves the overhead on:  \n  \n-   Function calls (including parameter passing and placing the object's address on the stack)  \n  \n-   Preservation of caller's stack frame  \n  \n-   New stack-frame setup  \n  \n-   Return-value communication  \n  \n-   Old stack-frame restore  \n  \n-   Return  \n  \n## Inline functions vs. macros  \n Although inline functions are similar to macros (because the function code is expanded at the point of the call at compile time), inline functions are parsed by the compiler, whereas macros are expanded by the preprocessor. As a result, there are several important differences:  \n  \n-   Inline functions follow all the protocols of type safety enforced on normal functions.  \n  \n-   Inline functions are specified using the same syntax as any other function except that they include the **inline** keyword in the function declaration.  \n  \n-   Expressions passed as arguments to inline functions are evaluated once. In some cases, expressions passed as arguments to macros can be evaluated more than once.  \n  \n The following example shows a macro that converts lowercase letters to uppercase:  \n  \n```  \n// inline_functions_macro.c  \n#include <stdio.h>  \n#include <conio.h>  \n  \n#define toupper(a) ((a) >= 'a' && ((a) <= 'z') ? ((a)-('a'-'A')):(a))  \n  \nint main() {  \n   char ch;  \n   printf_s(\"Enter a character: \");  \n   ch = toupper( getc(stdin) );  \n   printf_s( \"%c\", ch );  \n}  \n//  Sample Input:  xyz  \n// Sample Output:  Z  \n  \n```  \n  \n The intent of the expression `toupper(getc(stdin))` is that a character should be read from the console device (`stdin`) and, if necessary, converted to uppercase.  \n  \n Because of the implementation of the macro, `getc` is executed once to determine whether the character is greater than or equal to \"a,\" and once to determine whether it is less than or equal to \"z.\" If it is in that range, `getc` is executed again to convert the character to uppercase. This means the program waits for two or three characters when, ideally, it should wait for only one.  \n  \n Inline functions remedy the problem previously described:  \n  \n```  \n// inline_functions_inline.cpp  \n#include <stdio.h>  \n#include <conio.h>  \n  \ninline char toupper( char a ) {  \n   return ((a >= 'a' && a <= 'z') ? a-('a'-'A') : a );  \n}  \n  \nint main() {  \n   printf_s(\"Enter a character: \");  \n   char ch = toupper( getc(stdin) );  \n   printf_s( \"%c\", ch );  \n}  \n```  \n  \n```Output  \nSample Input: a  \nSample Output: A  \n```  \n  \n## See Also  \n [noinline](../cpp/noinline.md)   \n [auto_inline](../preprocessor/auto-inline.md)"}