{"nodes":[{"pos":[12,85],"content":"_vcprintf_p, _vcprintf_p_l, _vcwprintf_p, _vcwprintf_p_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_vcprintf_p, _vcprintf_p_l, _vcwprintf_p, _vcwprintf_p_l | Microsoft Docs","pos":[0,73]}]},{"pos":[1459,1515],"content":"_vcprintf_p, _vcprintf_p_l, _vcwprintf_p, _vcwprintf_p_l","linkify":"_vcprintf_p, _vcprintf_p_l, _vcwprintf_p, _vcwprintf_p_l","nodes":[{"content":"_vcprintf_p, _vcprintf_p_l, _vcwprintf_p, _vcwprintf_p_l","pos":[0,56]}]},{"content":"Writes formatted output to the console by using a pointer to a list of arguments, and supports positional parameters in the format string.","pos":[1516,1654]},{"pos":[1662,1922],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,258],"nodes":[{"content":"This API cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[1,117],"source":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[118,245],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[1931,1937],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2295,2305],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The format specification.","pos":[2321,2346]},{"content":"A pointer to a list of arguments.","pos":[2365,2398]},{"content":"The locale to use.","pos":[2417,2435]},{"pos":[2442,2613],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specification Syntax: printf and wprintf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"pos":[2622,2634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of characters that are written, or a negative value if an output error occurs.","pos":[2638,2727]},{"content":"If <ph id=\"ph1\">`format`</ph> is a null pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2728,2889],"source":" If `format` is a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and -1 is returned.","pos":[2890,2973],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and -1 is returned."},{"pos":[2982,2989],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each of these functions takes a pointer to an argument list, and then uses the <ph id=\"ph1\">`_putch`</ph> function to format and write the given data to the console.","pos":[2993,3140],"source":"Each of these functions takes a pointer to an argument list, and then uses the `_putch` function to format and write the given data to the console."},{"content":"(<ph id=\"ph1\">`_vcwprintf_p`</ph> uses <ph id=\"ph2\">`_putwch`</ph> instead of <ph id=\"ph3\">`_putch`</ph>.","pos":[3141,3192],"source":" (`_vcwprintf_p` uses `_putwch` instead of `_putch`."},{"content":"<ph id=\"ph1\">`_vcwprintf_p`</ph> is the wide-character version of <ph id=\"ph2\">`_vcprintf_p`</ph>.","pos":[3193,3255],"source":"`_vcwprintf_p` is the wide-character version of `_vcprintf_p`."},{"content":"It takes a wide-character string as an argument.)","pos":[3256,3305]},{"pos":[3312,3473],"content":"The versions of these functions that have the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter that's passed in instead of the current locale.","source":"The versions of these functions that have the `_l` suffix are identical except that they use the locale parameter that's passed in instead of the current locale."},{"content":"Each <ph id=\"ph1\">`argument`</ph> (if any) is converted and is output according to the corresponding format specification in <ph id=\"ph2\">`format`</ph>.","pos":[3480,3596],"source":"Each `argument` (if any) is converted and is output according to the corresponding format specification in `format`."},{"content":"The format specification supports positional parameters so that you can specify the order in which the arguments are used in the format string.","pos":[3597,3740]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>printf_p Positional Parameters<ept id=\"p1\">](../../c-runtime-library/printf-p-positional-parameters.md)</ept>.","pos":[3741,3859],"source":" For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)."},{"content":"These functions do not translate line-feed characters into carriage return-line feed (CR-LF) combinations when they are output.","pos":[3866,3993]},{"pos":[4001,4181],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[13,178],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[1,51],"source":" Ensure that `format` is not a user-defined string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[52,165],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"content":"These functions validate the input pointer and the format string.","pos":[4188,4253]},{"content":"If <ph id=\"ph1\">`format`</ph> or <ph id=\"ph2\">`argument`</ph> is <ph id=\"ph3\">`NULL`</ph>, or if the format string contains invalid formatting characters, these functions invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[4254,4497],"source":" If `format` or `argument` is `NULL`, or if the format string contains invalid formatting characters, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[4498,4589],"source":" If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`."},{"pos":[4599,4628],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[4635,4650]},{"content":"_UNICODE and _MBCS not defined","pos":[4651,4681]},{"content":"_MBCS defined","pos":[4682,4695]},{"content":"_UNICODE defined","pos":[4696,4712]},{"pos":[4964,4976],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4983,4990]},{"content":"Required header","pos":[4991,5006]},{"pos":[5051,5081],"content":"<ph id=\"ph1\">`_vcprintf_p`</ph>, <ph id=\"ph2\">`_vcprintf_p_l`</ph>","source":"`_vcprintf_p`, `_vcprintf_p_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>conio.h&gt; and <ph id=\"ph2\">\\&lt;</ph>stdarg.h&gt;","pos":[5082,5108],"source":"\\<conio.h> and \\<stdarg.h>"},{"pos":[5113,5145],"content":"<ph id=\"ph1\">`_vcwprintf_p`</ph>, <ph id=\"ph2\">`_vcwprintf_p_l`</ph>","source":"`_vcwprintf_p`, `_vcwprintf_p_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>conio.h&gt; and <ph id=\"ph2\">\\&lt;</ph>stdarg.h&gt;","pos":[5146,5172],"source":"\\<conio.h> and \\<stdarg.h>"},{"pos":[5180,5278],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[5287,5294],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5861,5869],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Console and Port I/O<ept id=\"p1\">](../../c-runtime-library/console-and-port-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5873,5945],"source":"[Console and Port I/O](../../c-runtime-library/console-and-port-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_cprintf, _cprintf_l, _cwprintf, _cwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5948,6072],"source":" [_cprintf, _cprintf_l, _cwprintf, _cwprintf_l](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>va_arg, va_copy, va_end, va_start<ept id=\"p1\">](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)</ept><ph id=\"ph1\"> </ph>","pos":[6075,6181],"source":" [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md) "},{"content":"<bpt id=\"p1\"> [</bpt>printf_p Positional Parameters<ept id=\"p1\">](../../c-runtime-library/printf-p-positional-parameters.md)</ept>","pos":[6184,6276],"source":" [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)"}],"content":"---\ntitle: \"_vcprintf_p, _vcprintf_p_l, _vcwprintf_p, _vcwprintf_p_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_vcprintf_p\"\n  - \"_vcwprintf_p_l\"\n  - \"_vcprintf_p_l\"\n  - \"_vcwprintf_p\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"vcwprintf_p\"\n  - \"vcprintf_p_l\"\n  - \"_vcprintf_p\"\n  - \"_vcprintf_p_l\"\n  - \"vcwprintf_p_l\"\n  - \"vcprintf_p\"\n  - \"_vcwprintf_p\"\n  - \"_vcwprintf_p_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_vtcprintf_p_l function\"\n  - \"vcprintf_p_l function\"\n  - \"_vcprintf_p_l function\"\n  - \"vtcprintf_p_l function\"\n  - \"vcprintf_p function\"\n  - \"_vcwprintf_p function\"\n  - \"_vcprintf_p function\"\n  - \"vcwprintf_p function\"\n  - \"vcwprintf_p_l function\"\n  - \"vtcprintf_p function\"\n  - \"_vcwprintf_p_l function\"\n  - \"_vtcprintf_p function\"\nms.assetid: 611024cc-90e7-41db-8e85-145ca95012b1\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _vcprintf_p, _vcprintf_p_l, _vcwprintf_p, _vcwprintf_p_l\nWrites formatted output to the console by using a pointer to a list of arguments, and supports positional parameters in the format string.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nint _vcprintf_p(  \n   const char* format,  \n   va_list argptr  \n);  \nint _vcprintf_p_l(  \n   const char* format,  \n   locale_t locale,  \n   va_list argptr  \n);  \nint _vcwprintf_p(  \n   const wchar_t* format,  \n   va_list argptr  \n);  \nint _vcwprintf_p_l(  \n   const wchar_t* format,  \n   locale_t locale,  \n   va_list argptr  \n);  \n```  \n  \n#### Parameters  \n `format`  \n The format specification.  \n  \n `argptr`  \n A pointer to a list of arguments.  \n  \n `locale`  \n The locale to use.  \n  \n For more information, see [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Return Value  \n The number of characters that are written, or a negative value if an output error occurs. If `format` is a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and -1 is returned.  \n  \n## Remarks  \n Each of these functions takes a pointer to an argument list, and then uses the `_putch` function to format and write the given data to the console. (`_vcwprintf_p` uses `_putwch` instead of `_putch`. `_vcwprintf_p` is the wide-character version of `_vcprintf_p`. It takes a wide-character string as an argument.)  \n  \n The versions of these functions that have the `_l` suffix are identical except that they use the locale parameter that's passed in instead of the current locale.  \n  \n Each `argument` (if any) is converted and is output according to the corresponding format specification in `format`. The format specification supports positional parameters so that you can specify the order in which the arguments are used in the format string. For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md).  \n  \n These functions do not translate line-feed characters into carriage return-line feed (CR-LF) combinations when they are output.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n These functions validate the input pointer and the format string. If `format` or `argument` is `NULL`, or if the format string contains invalid formatting characters, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_vtcprintf_p`|`_vcprintf_p`|`_vcprintf_p`|`_vcwprintf_p`|  \n|`_vtcprintf_p_l`|`_vcprintf_p_l`|`_vcprintf_p_l`|`_vcwprintf_p_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_vcprintf_p`, `_vcprintf_p_l`|\\<conio.h> and \\<stdarg.h>|  \n|`_vcwprintf_p`, `_vcwprintf_p_l`|\\<conio.h> and \\<stdarg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n  \n      // crt_vcprintf_p.c  \n// compile with: /c  \n#include <conio.h>  \n#include <stdarg.h>  \n  \n// An error formatting function that's used to print to the console.  \nint eprintf(const char* format, ...)  \n{  \n  va_list args;  \n  va_start(args, format);  \n  return _vcprintf_p(format, args);  \n}  \n  \nint main()  \n{  \n   int n = eprintf(\"parameter 2 = %2$d; parameter 1 = %1$s\\r\\n\",  \n      \"one\", 222);  \n   _cprintf_s(\"%d characters printed\\r\\n\");  \n}  \n```  \n  \n```Output  \nparameter 2 = 222; parameter 1 = one  \n38 characters printed  \n```  \n  \n## See Also  \n [Console and Port I/O](../../c-runtime-library/console-and-port-i-o.md)   \n [_cprintf, _cprintf_l, _cwprintf, _cwprintf_l](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)   \n [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)   \n [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)"}