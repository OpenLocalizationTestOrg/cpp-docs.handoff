<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1cecbad0d8dbb8bba6dee6ee92409797cfa34bc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\odbc\recordset-how-recordsets-select-records-odbc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acad0d4f40af2349b0030a7da31dcd94e3391175</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5b9f4aa1c6d51f61b9aeb7540169fedf357174b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Recordset: How Recordsets Select Records (ODBC) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Recordset: How Recordsets Select Records (ODBC)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic applies to the MFC ODBC classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic explains:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Your role and your options in selecting records<ept id="p1">](#_core_your_options_in_selecting_records)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How a recordset constructs its SQL statement and selects records<ept id="p1">](#_core_how_a_recordset_constructs_its_sql_statement)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>What you can do to customize the selection<ept id="p1">](#_core_customizing_the_selection)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Recordsets select records from a data source through an ODBC driver by sending SQL statements to the driver.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The SQL sent depends on how you design and open your recordset class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Your Options in Selecting Records</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following table shows your options in selecting records.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>How and When You Can Affect a Recordset</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Declare your recordset class with the <bpt id="p1">**</bpt>Add Class<ept id="p1">**</ept> wizard</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Specify which table to select from.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specify which columns to include.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Adding an MFC ODBC Consumer<ept id="p1">](../../mfc/reference/adding-an-mfc-odbc-consumer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Complete your recordset class implementation</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Override member functions such as <ph id="ph1">`OnSetOptions`</ph> (advanced) to set application-specific options or to change defaults.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Specify parameter data members if you want a parameterized recordset.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Construct a recordset object (before you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Specify a search condition (possibly compound) for use in a <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause that filters the records.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Recordset: Filtering Records (ODBC)<ept id="p1">](../../data/odbc/recordset-filtering-records-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Specify a sort order for use in an <bpt id="p1">**</bpt>ORDER BY<ept id="p1">**</ept> clause that sorts the records.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Recordset: Sorting Records (ODBC)<ept id="p1">](../../data/odbc/recordset-sorting-records-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Specify parameter values for any parameters you added to the class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Recordset: Parameterizing a Recordset (ODBC)<ept id="p1">](../../data/odbc/recordset-parameterizing-a-recordset-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>|Run the recordset's query by calling <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>|Specify a custom SQL string to replace the default SQL string set up by the wizard.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CRecordset::Open<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__open)</ept> in the <bpt id="p2">*</bpt>Class Library Reference<ept id="p2">*</ept> and <bpt id="p3">[</bpt>SQL: Customizing Your Recordset's SQL Statement (ODBC)<ept id="p3">](../../data/odbc/sql-customizing-your-recordsets-sql-statement-odbc.md)</ept>.|</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>|Call <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> to requery the recordset with the latest values on the data source|Specify new parameters, filter, or sort.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Recordset: Requerying a Recordset (ODBC)<ept id="p1">](../../data/odbc/recordset-requerying-a-recordset-odbc.md)</ept>.|</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>How a Recordset Constructs Its SQL Statement</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you call a recordset object's <bpt id="p1">[</bpt>Open<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__open)</ept> member function, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept> constructs a SQL statement using some or all of the following ingredients:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>lpszSQL<ept id="p1">**</ept> parameter passed to <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, this parameter specifies a custom SQL string or part of one.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The framework parses the string.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the string is a SQL <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement or an ODBC <bpt id="p2">**</bpt>CALL<ept id="p2">**</ept> statement, the framework uses the string as the recordset's SQL statement.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the string does not begin with "SELECT" or "{CALL", the framework uses what is supplied to construct a SQL <bpt id="p1">**</bpt>FROM<ept id="p1">**</ept> clause.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The string returned by <bpt id="p1">[</bpt>GetDefaultSQL<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__getdefaultsql)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>By default, this is the name of the table you specified for the recordset in the wizard, but you can change what the function returns.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The framework calls <ph id="ph1">`GetDefaultSQL`</ph> — if the string does not begin with "SELECT" or "{CALL", it is assumed to be a table name, which is used to construct a SQL string.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The field data members of the recordset, which are to be bound to specific columns of the table.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The framework binds record columns to the addresses of these members, using them as buffers.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The framework determines the correlation of field data members to table columns from the <bpt id="p1">[</bpt>RFX<ept id="p1">](../../data/odbc/record-field-exchange-using-rfx.md)</ept> or Bulk RFX function calls in the recordset's <bpt id="p2">[</bpt>DoFieldExchange<ept id="p2">](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange)</ept> or <bpt id="p3">[</bpt>DoBulkFieldExchange<ept id="p3">](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>filter<ept id="p1">](../../data/odbc/recordset-filtering-records-odbc.md)</ept> for the recordset, if any, contained in the <bpt id="p2">[</bpt>m_strFilter<ept id="p2">](../../mfc/reference/crecordset-class.md#crecordset__m_strfilter)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The framework uses this string to construct a SQL <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>sort<ept id="p1">](../../data/odbc/recordset-sorting-records-odbc.md)</ept> order for the recordset, if any, contained in the <bpt id="p2">[</bpt>m_strSort<ept id="p2">](../../mfc/reference/crecordset-class.md#crecordset__m_strsort)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The framework uses this string to construct a SQL <bpt id="p1">**</bpt>ORDER BY<ept id="p1">**</ept> clause.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To use the SQL <bpt id="p1">**</bpt>GROUP BY<ept id="p1">**</ept> clause (and possibly the <bpt id="p2">**</bpt>HAVING<ept id="p2">**</ept> clause), append the clauses to the end of your filter string.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The values of any <bpt id="p1">[</bpt>parameter data members<ept id="p1">](../../data/odbc/recordset-parameterizing-a-recordset-odbc.md)</ept> you specify for the class.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You set parameter values just before you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Requery<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The framework binds the parameter values to "?" placeholders in the SQL string.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>At compile time, you specify the string with placeholders.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>At run time, the framework fills in the details based on the parameter values you pass.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open<ept id="p1">**</ept> constructs a SQL <bpt id="p2">**</bpt>SELECT<ept id="p2">**</ept> statement from these ingredients.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Customizing the Selection<ept id="p1">](#_core_customizing_the_selection)</ept> for details about how the framework uses the ingredients.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>After constructing the statement, <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> sends the SQL to the ODBC Driver Manager (and the ODBC Cursor Library if it is in memory), which sends it on to the ODBC driver for the specific DBMS.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The driver communicates with the DBMS to carry out the selection on the data source and fetches the first record.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The framework loads the record into the field data members of the recordset.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can use a combination of these techniques to open <bpt id="p1">[</bpt>tables<ept id="p1">](../../data/odbc/recordset-declaring-a-class-for-a-table-odbc.md)</ept> and to construct a query based on a <bpt id="p2">[</bpt>join<ept id="p2">](../../data/odbc/recordset-performing-a-join-odbc.md)</ept> of multiple tables.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>With additional customization, you can call <bpt id="p1">[</bpt>predefined queries<ept id="p1">](../../data/odbc/recordset-declaring-a-class-for-a-predefined-query-odbc.md)</ept> (stored procedures), select table columns not known at design time and <bpt id="p2">[</bpt>bind<ept id="p2">](../../data/odbc/recordset-dynamically-binding-data-columns-odbc.md)</ept> them to recordset fields or you can perform most other data-access tasks.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Tasks you cannot accomplish by customizing recordsets can still be accomplished by <bpt id="p1">[</bpt>calling ODBC API functions<ept id="p1">](../../data/odbc/odbc-calling-odbc-api-functions-directly.md)</ept> or directly executing SQL statements with <bpt id="p2">[</bpt>CDatabase::ExecuteSQL<ept id="p2">](../../mfc/reference/cdatabase-class.md#cdatabase__executesql)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Customizing the Selection</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Besides supplying a filter, a sort order, or parameters, you can take the following actions to customize your recordset's selection:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Pass a custom SQL string in <bpt id="p1">**</bpt>lpszSQL<ept id="p1">**</ept> when you call <bpt id="p2">[</bpt>Open<ept id="p2">](../../mfc/reference/crecordset-class.md#crecordset__open)</ept> for the recordset.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Anything you pass in <bpt id="p1">**</bpt>lpsqSQL<ept id="p1">**</ept> takes precedence over what the <bpt id="p2">[</bpt>GetDefaultSQL<ept id="p2">](../../mfc/reference/crecordset-class.md#crecordset__getdefaultsql)</ept> member function returns.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>SQL: Customizing Your Recordset's SQL Statement (ODBC)<ept id="p1">](../../data/odbc/sql-customizing-your-recordsets-sql-statement-odbc.md)</ept>, which describes the types of SQL statements (or partial statements) you can pass to <bpt id="p2">**</bpt>Open<ept id="p2">**</ept> and what the framework does with them.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If the custom string you pass does not begin with "SELECT" or "{CALL", MFC assumes it contains a table name.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This also applies to the next bulleted item.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Alter the string that the wizard writes in your recordset's <ph id="ph1">`GetDefaultSQL`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Edit the function's code to change what it returns.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>By default, the wizard writes a <ph id="ph1">`GetDefaultSQL`</ph> function that returns a single table name.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can have <ph id="ph1">`GetDefaultSQL`</ph> return any of the items that you can pass in the <bpt id="p1">**</bpt>lpszSQL<ept id="p1">**</ept> parameter to <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If you do not pass a custom SQL string in <bpt id="p1">**</bpt>lpszSQL<ept id="p1">**</ept>, the framework uses the string that <ph id="ph1">`GetDefaultSQL`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>At a minimum, <ph id="ph1">`GetDefaultSQL`</ph> must return a single table name.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>But you can have it return multiple table names, a full <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement, an ODBC <bpt id="p2">**</bpt>CALL<ept id="p2">**</ept> statement, and so on.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For a list of what you can pass to <bpt id="p1">**</bpt>lpszSQL<ept id="p1">**</ept> — or have <ph id="ph1">`GetDefaultSQL`</ph> return — see <bpt id="p2">[</bpt>SQL: Customizing Your Recordset's SQL Statement (ODBC)<ept id="p2">](../../data/odbc/sql-customizing-your-recordsets-sql-statement-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If you are performing a join of two or more tables, rewrite <ph id="ph1">`GetDefaultSQL`</ph> to customize the table list used in the SQL <bpt id="p1">**</bpt>FROM<ept id="p1">**</ept> clause.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Recordset: Performing a Join (ODBC)<ept id="p1">](../../data/odbc/recordset-performing-a-join-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Manually bind additional field data members, perhaps based on information you obtain about the schema of your data source at run time.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You add field data members to the recordset class, <bpt id="p1">[</bpt>RFX<ept id="p1">](../../data/odbc/record-field-exchange-using-rfx.md)</ept> or Bulk RFX function calls for them to the <bpt id="p2">[</bpt>DoFieldExchange<ept id="p2">](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange)</ept> or <bpt id="p3">[</bpt>DoBulkFieldExchange<ept id="p3">](../../mfc/reference/crecordset-class.md#crecordset__dobulkfieldexchange)</ept> member function, and initializations of the data members in the class constructor.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Recordset: Dynamically Binding Data Columns (ODBC)<ept id="p1">](../../data/odbc/recordset-dynamically-binding-data-columns-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Override recordset member functions, such as <ph id="ph1">`OnSetOptions`</ph>, to set application-specific options or to override defaults.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you want to base the recordset on a complex SQL statement, you need to use some combination of these customization techniques.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For example, perhaps you want to use SQL clauses and keywords not directly supported by recordsets or perhaps you are joining multiple tables.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Recordset (ODBC)</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Recordset: How Recordsets Update Records (ODBC)</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>ODBC Basics</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>SQL</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Recordset: Locking Records (ODBC)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>