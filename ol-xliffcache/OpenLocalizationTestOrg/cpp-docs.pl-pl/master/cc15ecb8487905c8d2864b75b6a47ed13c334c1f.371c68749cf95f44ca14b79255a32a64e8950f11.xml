{"nodes":[{"pos":[12,45],"content":"is_trivial Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_trivial Class | Microsoft Docs","pos":[0,33]}]},{"pos":[704,720],"content":"is_trivial Class","linkify":"is_trivial Class","nodes":[{"content":"is_trivial Class","pos":[0,16]}]},{"content":"Tests whether the type is a trivial type.","pos":[721,762]},{"pos":[771,777],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[841,851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type to query.","pos":[862,880]},{"pos":[889,896],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An instance of the type predicate holds true if the type <ph id=\"ph1\">`T`</ph> is a trivial type, otherwise it holds false.","pos":[900,1005],"source":"An instance of the type predicate holds true if the type `T` is a trivial type, otherwise it holds false."},{"content":"Trivial types are scalar types, trivially copyable class types, arrays of these types and cv-qualified versions of these types.","pos":[1006,1133]},{"pos":[1142,1154],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1158,1183],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[1190,1208],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1217,1225],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1229,1280],"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>","source":"[<type_traits>](../standard-library/type-traits.md)"}],"content":"---\ntitle: \"is_trivial Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"cpp\"\n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"is_trivial\"\n  - \"std.is_trivial\"\n  - \"std::is_trivial\"\n  - \"type_traits/std::is_trivial\"\ndev_langs: \n  - \"C++\"\n  - \"c++\"\nhelpviewer_keywords: \n  - \"is_trivial\"\nms.assetid: 6beb11d4-2f38-4c7e-9959-ca5d26250df7\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_trivial Class\nTests whether the type is a trivial type.  \n  \n## Syntax  \n  \n```\ntemplate <class T>  \nstruct is_trivial;\n```  \n  \n#### Parameters  \n `T`  \n The type to query.  \n  \n## Remarks  \n An instance of the type predicate holds true if the type `T` is a trivial type, otherwise it holds false. Trivial types are scalar types, trivially copyable class types, arrays of these types and cv-qualified versions of these types.  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)\n\n\n\n"}