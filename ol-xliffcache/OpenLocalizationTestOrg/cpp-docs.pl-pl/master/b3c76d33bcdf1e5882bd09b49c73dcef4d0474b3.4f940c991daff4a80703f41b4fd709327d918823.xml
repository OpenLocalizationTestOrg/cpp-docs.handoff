{"nodes":[{"pos":[12,49],"content":"complex&lt;float&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"complex<ph id=\"ph1\">&amp;lt;</ph>float<ph id=\"ph2\">&amp;gt;</ph> | Microsoft Docs","pos":[0,37],"source":"complex&lt;float&gt; | Microsoft Docs"}]},{"content":"complex<ph id=\"ph1\">&amp;lt;</ph>float","pos":[668,684],"source":"complex&lt;float"},{"pos":[689,878],"content":"Describes an object that stores an ordered pair of objects both of type <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept><bpt id=\"p2\">*</bpt>,<ept id=\"p2\">*</ept> the first representing the real part of a complex number and the second representing the imaginary part.","source":"Describes an object that stores an ordered pair of objects both of type **float***,* the first representing the real part of a complex number and the second representing the imaginary part."},{"content":"Syntax","pos":[887,893]},{"content":"Parameters","pos":[1258,1268]},{"content":"The value of type <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> for the real part of the complex number being constructed.","pos":[1286,1372],"source":" The value of type **float** for the real part of the complex number being constructed."},{"content":"The value of type <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> for the imaginary part of the complex number being constructed.","pos":[1393,1484],"source":" The value of type **float** for the imaginary part of the complex number being constructed."},{"content":"The complex number of type <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> or of type <ph id=\"ph1\">`long double`</ph> whose real and imaginary parts are used to initialize a complex number of type <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept> being constructed.","pos":[1508,1678],"source":" The complex number of type **double** or of type `long double` whose real and imaginary parts are used to initialize a complex number of type **float** being constructed."},{"content":"Return Value","pos":[1687,1699]},{"pos":[1703,1738],"content":"A complex number of type <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>.","source":"A complex number of type **float**."},{"content":"Remarks","pos":[1747,1754]},{"content":"The explicit specialization of the template class complex to a complex class of type <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> differs from the template class only in the constructors it defines.","pos":[1758,1921],"source":"The explicit specialization of the template class complex to a complex class of type **float** differs from the template class only in the constructors it defines."},{"content":"The conversion from <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept> is allowed to be implicit, but the less safe conversion from <bpt id=\"p3\">**</bpt>float<ept id=\"p3\">**</ept> to <ph id=\"ph1\">`long double`</ph> is required to be <bpt id=\"p4\">**</bpt>explicit<ept id=\"p4\">**</ept>.","pos":[1922,2085],"source":" The conversion from **float** to **double** is allowed to be implicit, but the less safe conversion from **float** to `long double` is required to be **explicit**."},{"content":"The use of <bpt id=\"p1\">**</bpt>explicit<ept id=\"p1\">**</ept> rules out the initiation with type conversion using assignment syntax.","pos":[2086,2180],"source":" The use of **explicit** rules out the initiation with type conversion using assignment syntax."},{"content":"For more information on the template class <ph id=\"ph1\">`complex`</ph>, see <bpt id=\"p1\">[</bpt>complex Class<ept id=\"p1\">](../standard-library/complex-class.md)</ept>.","pos":[2187,2299],"source":"For more information on the template class `complex`, see [complex Class](../standard-library/complex-class.md)."},{"content":"For a list of members of the template class <ph id=\"ph1\">`complex`</ph>, see .","pos":[2300,2360],"source":" For a list of members of the template class `complex`, see ."},{"content":"Example","pos":[2369,2376]},{"content":"Requirements","pos":[4377,4389]},{"pos":[4393,4415],"content":"<bpt id=\"p1\">**</bpt>Header<ept id=\"p1\">**</ept>: <ph id=\"ph1\">\\&lt;</ph>complex&gt;","source":"**Header**: \\<complex>"},{"pos":[4422,4440],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[4449,4457]},{"content":"complex Class","pos":[4462,4475]},{"content":"Thread Safety in the C++ Standard Library","pos":[4520,4561]}],"content":"---\ntitle: \"complex&lt;float&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::complex<float>\"\n  - \"std.complex<float>\"\n  - \"complex<float>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"complex<float> function\"\nms.assetid: 1178eb1e-39bd-4017-89cd-aea95f813939\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# complex&lt;float&gt;\nDescribes an object that stores an ordered pair of objects both of type **float***,* the first representing the real part of a complex number and the second representing the imaginary part.  \n  \n## Syntax  \n  \n```\ntemplate <>\nclass complex<float> {\npublic:\n    constexpr complex(\n    float _RealVal = 0,\n    float _ImagVal = 0);\n\nconstexpr complex(\n    const complex<float>& complexNum);\n\nconstexpr complex(\n    const complex<double>& complexNum);\n\nconstexpr complex(\n    const complex<long double>& complexNum);\n// rest same as template class complex\n};\n```  \n  \n#### Parameters  \n `_RealVal`  \n The value of type **float** for the real part of the complex number being constructed.  \n  \n `_ImagVal`  \n The value of type **float** for the imaginary part of the complex number being constructed.  \n  \n ` complexNum`  \n The complex number of type **double** or of type `long double` whose real and imaginary parts are used to initialize a complex number of type **float** being constructed.  \n  \n## Return Value  \n A complex number of type **float**.  \n  \n## Remarks  \n The explicit specialization of the template class complex to a complex class of type **float** differs from the template class only in the constructors it defines. The conversion from **float** to **double** is allowed to be implicit, but the less safe conversion from **float** to `long double` is required to be **explicit**. The use of **explicit** rules out the initiation with type conversion using assignment syntax.  \n  \n For more information on the template class `complex`, see [complex Class](../standard-library/complex-class.md). For a list of members of the template class `complex`, see .  \n  \n## Example  \n  \n```cpp  \n// complex_comp_flt.cpp  \n// compile with: /EHsc  \n#include <complex>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   double pi = 3.14159265359;  \n  \n   // The first constructor specifies real & imaginary parts  \n   complex <float> c1 ( 4.0 , 5.0 );  \n   cout << \"Specifying initial real & imaginary parts,\\n\"  \n        << \" as type float gives c1 = \" << c1 << endl;  \n  \n   // The second constructor initializes values of the real &  \n   // imaginary parts using those of complex number of type double  \n   complex <double> c2double ( 1.0 , 3.0 );  \n   complex <float> c2float ( c2double );  \n   cout << \"Implicit conversion from type double to type float,\"  \n        << \"\\n gives c2float = \" << c2float << endl;  \n  \n   // The third constructor initializes values of the real &  \n   // imaginary parts using those of a complex number  \n   // of type long double  \n   complex <long double> c3longdouble ( 3.0 , 4.0 );  \n   complex <float> c3float ( c3longdouble );  \n   cout << \"Explicit conversion from type long double to type float,\"  \n        << \"\\n gives c3float = \" << c3float << endl;  \n  \n   // The modulus and argument of a complex number can be recovered  \n   double absc3 = abs ( c3float);  \n   double argc3 = arg ( c3float);  \n   cout << \"The modulus of c3 is recovered from c3 using: abs ( c3 ) = \"  \n        << absc3 << endl;  \n   cout << \"Argument of c3 is recovered from c3 using:\\n arg ( c3 ) = \"  \n        << argc3 << \" radians, which is \" << argc3 * 180 / pi  \n        << \" degrees.\" << endl;  \n}  \n\\* Output:   \nSpecifying initial real & imaginary parts,  \n as type float gives c1 = (4,5)  \nImplicit conversion from type double to type float,  \n gives c2float = (1,3)  \nExplicit conversion from type long double to type float,  \n gives c3float = (3,4)  \nThe modulus of c3 is recovered from c3 using: abs ( c3 ) = 5  \nArgument of c3 is recovered from c3 using:  \n arg ( c3 ) = 0.927295 radians, which is 53.1301 degrees.  \n*\\  \n```  \n  \n## Requirements  \n **Header**: \\<complex>  \n  \n **Namespace:** std  \n  \n## See Also  \n [complex Class](../standard-library/complex-class.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n\n\n"}