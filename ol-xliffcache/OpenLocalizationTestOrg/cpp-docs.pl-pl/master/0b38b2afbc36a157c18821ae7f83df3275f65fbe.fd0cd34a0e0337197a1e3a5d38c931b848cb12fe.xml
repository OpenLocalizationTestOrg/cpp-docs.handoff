{"nodes":[{"pos":[12,41],"content":"SafeLessThan | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"SafeLessThan | Microsoft Docs","pos":[0,29]}]},{"content":"SafeLessThan","pos":[612,624]},{"content":"Determines whether one number is less than another.","pos":[625,676]},{"content":"Syntax","pos":[685,691]},{"content":"Parameters","pos":[826,836]},{"content":"[in]","pos":[840,844]},{"content":"The first number.","pos":[852,869]},{"content":"This must be of type T.","pos":[870,893]},{"content":"[in]","pos":[900,904]},{"content":"The second numer.","pos":[912,929]},{"content":"This must be of type U.","pos":[930,953]},{"content":"Return Value","pos":[962,974]},{"pos":[985,1028],"content":"if <ph id=\"ph1\">`t`</ph> is less than <ph id=\"ph2\">`u`</ph>; otherwise <ph id=\"ph3\">`false`</ph>.","source":" if `t` is less than `u`; otherwise `false`."},{"content":"Remarks","pos":[1037,1044]},{"pos":[1048,1178],"content":"This method enhances the standard comparison operator because <ph id=\"ph1\">`SafeLessThan`</ph> enables you to compare two different types of number.","source":"This method enhances the standard comparison operator because `SafeLessThan` enables you to compare two different types of number."},{"pos":[1185,1388],"content":"This method is part of <bpt id=\"p1\">[</bpt>SafeInt Library<ept id=\"p1\">](../windows/safeint-library.md)</ept> and is designed for a single comparison operation without creating an instance of the <bpt id=\"p2\">[</bpt>SafeInt Class<ept id=\"p2\">](../windows/safeint-class.md)</ept>.","source":"This method is part of [SafeInt Library](../windows/safeint-library.md) and is designed for a single comparison operation without creating an instance of the [SafeInt Class](../windows/safeint-class.md)."},{"pos":[1396,1621],"content":"[!NOTE]\n This method should only be used when a single mathematical operation must be protected. If there are multiple operations, you should use the `SafeInt` class rather than calling the individual stand-alone functions.","leadings":["","> "],"nodes":[{"content":" This method should only be used when a single mathematical operation must be protected. If there are multiple operations, you should use the `SafeInt` class rather than calling the individual stand-alone functions.","pos":[8,223],"nodes":[{"content":"This method should only be used when a single mathematical operation must be protected.","pos":[1,88]},{"content":"If there are multiple operations, you should use the <ph id=\"ph1\">`SafeInt`</ph> class rather than calling the individual stand-alone functions.","pos":[89,215],"source":" If there are multiple operations, you should use the `SafeInt` class rather than calling the individual stand-alone functions."}]}]},{"pos":[1628,1740],"content":"For more information about the template types T and U, see <bpt id=\"p1\">[</bpt>SafeInt Functions<ept id=\"p1\">](../windows/safeint-functions.md)</ept>.","source":"For more information about the template types T and U, see [SafeInt Functions](../windows/safeint-functions.md)."},{"content":"Requirements","pos":[1749,1761]},{"pos":[1765,1786],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> safeint.h","source":"**Header:** safeint.h"},{"pos":[1793,1828],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::Utilities","source":"**Namespace:** Microsoft::Utilities"},{"content":"See Also","pos":[1837,1845]},{"content":"SafeInt Functions","pos":[1850,1867]},{"content":"SafeInt Library","pos":[1907,1922]},{"content":"SafeInt Class","pos":[1960,1973]},{"content":"SafeLessThanEquals","pos":[2009,2027]},{"content":"SafeGreaterThan","pos":[2068,2083]},{"content":"SafeGreaterThanEquals","pos":[2121,2142]}],"content":"---\ntitle: \"SafeLessThan | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"SafeLessThan\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SafeLessThan function\"\nms.assetid: 9d85bc0d-8d94-4d59-9b72-ef3c63a120a0\ncaps.latest.revision: 6\nauthor: \"ghogen\"\nms.author: \"ghogen\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# SafeLessThan\nDetermines whether one number is less than another.  \n  \n## Syntax  \n  \n```  \ntemplate<typename T, typename U>  \ninline bool SafeLessThan (  \n   const T t,  \n   const U u  \n) throw ();  \n```  \n  \n#### Parameters  \n [in] `t`  \n The first number. This must be of type T.  \n  \n [in] `u`  \n The second numer. This must be of type U.  \n  \n## Return Value  \n `true` if `t` is less than `u`; otherwise `false`.  \n  \n## Remarks  \n This method enhances the standard comparison operator because `SafeLessThan` enables you to compare two different types of number.  \n  \n This method is part of [SafeInt Library](../windows/safeint-library.md) and is designed for a single comparison operation without creating an instance of the [SafeInt Class](../windows/safeint-class.md).  \n  \n> [!NOTE]\n>  This method should only be used when a single mathematical operation must be protected. If there are multiple operations, you should use the `SafeInt` class rather than calling the individual stand-alone functions.  \n  \n For more information about the template types T and U, see [SafeInt Functions](../windows/safeint-functions.md).  \n  \n## Requirements  \n **Header:** safeint.h  \n  \n **Namespace:** Microsoft::Utilities  \n  \n## See Also  \n [SafeInt Functions](../windows/safeint-functions.md)   \n [SafeInt Library](../windows/safeint-library.md)   \n [SafeInt Class](../windows/safeint-class.md)   \n [SafeLessThanEquals](../windows/safelessthanequals.md)   \n [SafeGreaterThan](../windows/safegreaterthan.md)   \n [SafeGreaterThanEquals](../windows/safegreaterthanequals.md)"}