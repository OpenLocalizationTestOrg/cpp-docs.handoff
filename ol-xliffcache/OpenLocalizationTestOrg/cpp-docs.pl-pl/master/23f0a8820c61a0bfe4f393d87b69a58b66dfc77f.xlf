<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23f0a8820c61a0bfe4f393d87b69a58b66dfc77f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-abstract-declarators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4cdb86eefc4324251fe221cd06991c09e8d9de8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61ddf7c51381aee81d2c8722349a0a6617a1ddfd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Abstract Declarators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Abstract Declarators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An abstract declarator is a declarator without an identifier, consisting of one or more pointer, array, or function modifiers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The pointer modifier (<bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>) always precedes the identifier in a declarator; array (<bpt id="p2">**</bpt>[ ]<ept id="p2">**</ept>) and function ( <bpt id="p3">**</bpt>( )<ept id="p3">**</ept> ) modifiers follow the identifier.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Knowing this, you can determine where the identifier would appear in an abstract declarator and interpret the declarator accordingly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Interpreting More Complex Declarators<ept id="p1">](../c-language/interpreting-more-complex-declarators.md)</ept> for additional information and examples of complex declarators.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Generally <ph id="ph1">`typedef`</ph> can be used to simplify declarators.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Typedef Declarations<ept id="p1">](../c-language/typedef-declarations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Abstract declarators can be complex.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Parentheses in a complex abstract declarator specify a particular interpretation, just as they do for the complex declarators in declarations.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These examples illustrate abstract declarators:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The abstract declarator consisting of a set of empty parentheses, <bpt id="p1">**</bpt>( )<ept id="p1">**</ept>, is not allowed because it is ambiguous.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It is impossible to determine whether the implied identifier belongs inside the parentheses (in which case it is an unmodified type) or before the parentheses (in which case it is a function type).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Declarators and Variable Declarations</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>