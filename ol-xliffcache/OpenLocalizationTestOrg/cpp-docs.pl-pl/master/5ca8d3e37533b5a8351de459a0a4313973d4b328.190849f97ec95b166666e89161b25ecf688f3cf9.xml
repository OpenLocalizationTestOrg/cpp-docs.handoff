{"nodes":[{"pos":[12,50],"content":"Debug Class (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Debug Class (C++-CLI) | Microsoft Docs","pos":[0,38]}]},{"content":"Debug Class (C++/CLI)","pos":[640,661]},{"content":"When using &lt;xref:System.Diagnostics.Debug&gt; in a Visual C++ application, the behavior does not change between a debug and a release build.","pos":[662,799],"source":"When using <xref:System.Diagnostics.Debug> in a Visual C++ application, the behavior does not change between a debug and a release build."},{"content":"Remarks","pos":[808,815]},{"content":"The behavior for &lt;xref:System.Diagnostics.Trace&gt; is identical to the behavior for the Debug class, but is dependent on the symbol TRACE being defined.","pos":[819,969],"source":"The behavior for <xref:System.Diagnostics.Trace> is identical to the behavior for the Debug class, but is dependent on the symbol TRACE being defined."},{"content":"This means that you must <ph id=\"ph1\">`#ifdef`</ph> any Trace-related code to prevent debug behavior in a release build.","pos":[970,1072],"source":" This means that you must `#ifdef` any Trace-related code to prevent debug behavior in a release build."},{"content":"Example","pos":[1081,1088]},{"content":"Description","pos":[1098,1109]},{"pos":[1113,1239],"content":"The following sample always executes the output statements, regardless of whether you compile with <bpt id=\"p1\">**</bpt>/DDEBUG<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>/DTRACE<ept id=\"p2\">**</ept>.","source":"The following sample always executes the output statements, regardless of whether you compile with **/DDEBUG** or **/DTRACE**."},{"content":"Code","pos":[1249,1253]},{"content":"Output","pos":[1750,1756]},{"content":"Example","pos":[1841,1848]},{"content":"Description","pos":[1858,1869]},{"content":"To get the expected behavior (that is, no \"test\" output printed for a release build), you must use the <ph id=\"ph1\">`#ifdef`</ph> and <ph id=\"ph2\">`#endif`</ph> directives.","pos":[1873,2009],"source":"To get the expected behavior (that is, no \"test\" output printed for a release build), you must use the `#ifdef` and `#endif` directives."},{"content":"The previous code sample is modified below to demonstrate this fix:","pos":[2010,2077]},{"content":"Code","pos":[2087,2091]},{"content":"See Also","pos":[2730,2738]},{"content":".NET Programming with C++/CLI (Visual C++)","pos":[2743,2785]}],"content":"---\ntitle: \"Debug Class (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Trace class, Visual C++\"\n  - \".NET Framework [C++], Debug class\"\n  - \"Debug class\"\nms.assetid: 076bd528-1b6f-4e8a-a372-eb5849cf969a\ncaps.latest.revision: 5\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Debug Class (C++/CLI)\nWhen using <xref:System.Diagnostics.Debug> in a Visual C++ application, the behavior does not change between a debug and a release build.  \n  \n## Remarks  \n The behavior for <xref:System.Diagnostics.Trace> is identical to the behavior for the Debug class, but is dependent on the symbol TRACE being defined. This means that you must `#ifdef` any Trace-related code to prevent debug behavior in a release build.  \n  \n## Example  \n  \n### Description  \n The following sample always executes the output statements, regardless of whether you compile with **/DDEBUG** or **/DTRACE**.  \n  \n### Code  \n  \n```  \n// mcpp_debug_class.cpp  \n// compile with: /clr  \n#using <system.dll>  \nusing namespace System::Diagnostics;  \nusing namespace System;  \n  \nint main() {  \n   Trace::Listeners->Add( gcnew TextWriterTraceListener( Console::Out ) );  \n   Trace::AutoFlush = true;  \n   Trace::Indent();  \n   Trace::WriteLine( \"Entering Main\" );  \n   Console::WriteLine( \"Hello World.\" );  \n   Trace::WriteLine( \"Exiting Main\" );  \n   Trace::Unindent();  \n  \n   Debug::WriteLine(\"test\");  \n}  \n```  \n  \n### Output  \n  \n```  \n    Entering Main  \nHello World.  \n    Exiting Main  \ntest  \n```  \n  \n## Example  \n  \n### Description  \n To get the expected behavior (that is, no \"test\" output printed for a release build), you must use the `#ifdef` and `#endif` directives. The previous code sample is modified below to demonstrate this fix:  \n  \n### Code  \n  \n```  \n// mcpp_debug_class2.cpp  \n// compile with: /clr  \n#using <system.dll>  \nusing namespace System::Diagnostics;  \nusing namespace System;  \n  \nint main() {  \n   Trace::Listeners->Add( gcnew TextWriterTraceListener( Console::Out ) );  \n   Trace::AutoFlush = true;  \n   Trace::Indent();  \n  \n#ifdef TRACE   // checks for a debug build  \n   Trace::WriteLine( \"Entering Main\" );  \n   Console::WriteLine( \"Hello World.\" );  \n   Trace::WriteLine( \"Exiting Main\" );  \n#endif  \n   Trace::Unindent();  \n  \n#ifdef DEBUG   // checks for a debug build  \n   Debug::WriteLine(\"test\");  \n#endif   //ends the conditional block  \n}  \n```  \n  \n## See Also  \n [.NET Programming with C++/CLI (Visual C++)](../dotnet/dotnet-programming-with-cpp-cli-visual-cpp.md)"}