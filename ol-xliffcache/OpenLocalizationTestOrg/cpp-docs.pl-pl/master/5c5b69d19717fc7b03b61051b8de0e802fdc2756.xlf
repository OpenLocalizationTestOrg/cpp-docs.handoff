<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c5b69d19717fc7b03b61051b8de0e802fdc2756</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\message-maps-atl.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cfe8a206d0b7fcefa930ac70c0d63bea30d987d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a1b42ebdee3ffb5a6c972e84bcc93454defff39</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Message Maps (ATL) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Message Maps (ATL)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A message map associates a handler function with a particular message, command, or notification.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By using ATL's <bpt id="p1">[</bpt>message map macros<ept id="p1">](../atl/reference/message-map-macros-atl.md)</ept>, you can specify a message map for a window.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The window procedures in <ph id="ph1">`CWindowImpl`</ph>, <ph id="ph2">`CDialogImpl`</ph>, and <ph id="ph3">`CContainedWindowT`</ph> direct a window's messages to its message map.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>message handler functions<ept id="p1">](../atl/message-handler-functions.md)</ept> accept an additional argument of type <ph id="ph1">`BOOL&amp;`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This argument indicates whether a message has been processed, and it is set to <ph id="ph1">`TRUE`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A handler function can then set the argument to <ph id="ph1">`FALSE`</ph> to indicate that it has not handled a message.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this case, ATL will continue to look for a handler function further in the message map.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By setting this argument to <ph id="ph1">`FALSE`</ph>, you can first perform some action in response to a message and then allow the default processing or another handler function to finish handling the message.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Chained Message Maps</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>ATL also allows you to chain message maps, which directs the message handling to a message map defined in another class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, you can implement common message handling in a separate class to provide uniform behavior for all windows chaining to that class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can chain to a base class or to a data member of your class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>ATL also supports dynamic chaining, which allows you to chain to another object's message map at run time.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To implement dynamic chaining, you must derive your class from <bpt id="p1">[</bpt>CDynamicChain<ept id="p1">](../atl/reference/cdynamicchain-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Then declare the <bpt id="p1">[</bpt>CHAIN_MSG_MAP_DYNAMIC<ept id="p1">](http://msdn.microsoft.com/library/7e5c72b7-cb31-4f3b-8a1b-6293804af220)</ept> macro in your message map.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>requires a unique number that identifies the object and the message map to which you are chaining.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You must define this unique value through a call to <ph id="ph1">`CDynamicChain::SetChainEntry`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can chain to any class that declares a message map, provided the class derives from <bpt id="p1">[</bpt>CMessageMap<ept id="p1">](../atl/reference/cmessagemap-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>allows an object to expose its message maps to other objects.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`CWindowImpl`</ph> already derives from <ph id="ph2">`CMessageMap`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Alternate Message Maps</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Finally, ATL supports alternate message maps, declared with the <bpt id="p1">[</bpt>ALT_MSG_MAP<ept id="p1">](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Each alternate message map is identified by a unique number, which you pass to <ph id="ph1">`ALT_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Using alternate message maps, you can handle the messages of multiple windows in one map.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that by default, <ph id="ph1">`CWindowImpl`</ph> does not use alternate message maps.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To add this support, override the <ph id="ph1">`WindowProc`</ph> method in your <ph id="ph2">`CWindowImpl`</ph>-derived class and call <ph id="ph3">`ProcessWindowMessage`</ph> with the message map identifier.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Implementing a Window</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>