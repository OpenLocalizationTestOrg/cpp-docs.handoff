{"nodes":[{"pos":[12,76],"content":"_InterlockedExchangePointer Intrinsic Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_InterlockedExchangePointer Intrinsic Functions | Microsoft Docs","pos":[0,64]}]},{"content":"_InterlockedExchangePointer Intrinsic Functions","pos":[1297,1344]},{"content":"Microsoft Specific","pos":[1347,1365]},{"content":"Perform an atomic exchange operation, which copies the address passed in as the second argument to the first and returns the original address of the first.","pos":[1374,1529]},{"content":"Syntax","pos":[1538,1544]},{"content":"Parameters","pos":[2160,2170]},{"content":"[in, out]","pos":[2174,2183]},{"content":"Pointer to the pointer to the value to exchange.","pos":[2196,2244]},{"content":"The function sets the value to <ph id=\"ph1\">`Value`</ph> and returns its previous value.","pos":[2245,2315],"source":" The function sets the value to `Value` and returns its previous value."},{"content":"[in]","pos":[2322,2326]},{"content":"Value to be exchanged with the value pointed to by <ph id=\"ph1\">`Target`</ph>.","pos":[2338,2398],"source":" Value to be exchanged with the value pointed to by `Target`."},{"content":"Return Value","pos":[2407,2419]},{"pos":[2423,2485],"content":"The function returns the initial value pointed to by <ph id=\"ph1\">`Target`</ph>.","source":"The function returns the initial value pointed to by `Target`."},{"content":"Requirements","pos":[2494,2506]},{"content":"Intrinsic","pos":[2513,2522]},{"content":"Architecture","pos":[2523,2535]},{"content":"Header","pos":[2536,2542]},{"pos":[2629,2638],"content":"x86, ARM,"},{"content":"intrin.h&gt;","pos":[2705,2714],"source":"intrin.h>"},{"pos":[2752,2788],"content":", <ph id=\"ph1\">`_InterlockedExchangePointer_rel`</ph>,","source":", `_InterlockedExchangePointer_rel`, "},{"content":"ARM","pos":[2822,2825]},{"content":"intrin.h&gt;","pos":[2828,2837],"source":"intrin.h>"},{"pos":[2882,2883],"content":","},{"pos":[2989,3005],"content":"with HLE support"},{"content":"immintrin.h&gt;","pos":[3008,3020],"source":"immintrin.h>"},{"pos":[3028,3128],"content":"On the x86 architecture, <ph id=\"ph1\">`_InterlockedExchangePointer`</ph> is a macro that calls <ph id=\"ph2\">`_InterlockedExchange`</ph>.","source":"On the x86 architecture, `_InterlockedExchangePointer` is a macro that calls `_InterlockedExchange`."},{"content":"Remarks","pos":[3137,3144]},{"content":"On a 64-bit system, the parameters are 64 bits and must be aligned on 64-bit boundaries; otherwise, the function fails.","pos":[3148,3267]},{"content":"On a 32-bit system, the parameters are 32 bits and must be aligned on 32-bit boundaries.","pos":[3268,3356]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>align<ept id=\"p1\">](../cpp/align-cpp.md)</ept>.","pos":[3357,3412],"source":" For more information, see [align](../cpp/align-cpp.md)."},{"content":"On ARM platforms, use the intrinsics with <ph id=\"ph1\">`_acq`</ph> and <ph id=\"ph2\">`_rel`</ph> suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section.","pos":[3419,3586],"source":"On ARM platforms, use the intrinsics with `_acq` and `_rel` suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section."},{"content":"The intrinsic with an <ph id=\"ph1\">`_nf`</ph> (\"no fence\") suffix does not act as a memory barrier.","pos":[3587,3668],"source":" The intrinsic with an `_nf` (\"no fence\") suffix does not act as a memory barrier."},{"content":"On Intel platforms that support Hardware Lock Elision (HLE) instructions, the intrinsics with <ph id=\"ph1\">`_HLEAcquire`</ph> and <ph id=\"ph2\">`_HLERelease`</ph> suffixes include a hint to the processor that can accelerate performance by eliminating a lock write step in hardware.","pos":[3675,3919],"source":"On Intel platforms that support Hardware Lock Elision (HLE) instructions, the intrinsics with `_HLEAcquire` and `_HLERelease` suffixes include a hint to the processor that can accelerate performance by eliminating a lock write step in hardware."},{"content":"If these intrinsics are called on platforms that do not support HLE, the hint is ignored.","pos":[3920,4009]},{"content":"These routines are only available as intrinsics.","pos":[4016,4064]},{"content":"END Microsoft Specific","pos":[4073,4095]},{"content":"See Also","pos":[4104,4112]},{"content":"Compiler Intrinsics","pos":[4117,4136]},{"content":"Conflicts with the x86 Compiler","pos":[4181,4212]}],"content":"---\ntitle: \"_InterlockedExchangePointer Intrinsic Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_InterlockedExchangePointer_cpp\"\n  - \"_InterlockedExchangePointer_rel\"\n  - \"_InterlockedExchangePointer_nf\"\n  - \"_InterlockedExchangePointer_HLERelease\"\n  - \"_InterlockedExchangePointer_acq\"\n  - \"_InterlockedExchangePointer\"\n  - \"_InterlockedExchangePointer_acq_cpp\"\n  - \"_InterlockedExchangePointer_HLEAcquire\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_InterlockedExchangePointer_rel intrinsic\"\n  - \"_InterlockedExchangePointer_HLERelease intrinsic\"\n  - \"_InterlockedExchangePointer intrinsic\"\n  - \"_InterlockedExchangePointer_nf intrinsic\"\n  - \"_InterlockedExchangePointer_acq intrinsic\"\n  - \"_InterlockedExchangePointer_HLEAcquire intrinsic\"\n  - \"InterlockedExchangePointer_acq intrinsic\"\n  - \"InterlockedExchangePointer intrinsic\"\nms.assetid: 0eaca0b0-d79e-406b-892d-b3b462c50bbb\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _InterlockedExchangePointer Intrinsic Functions\n**Microsoft Specific**  \n  \n Perform an atomic exchange operation, which copies the address passed in as the second argument to the first and returns the original address of the first.  \n  \n## Syntax  \n  \n```  \nvoid * _InterlockedExchangePointer(  \n   void * volatile * Target,  \n   void * Value  \n);   \nvoid * _InterlockedExchangePointer_acq(  \n   void * volatile * Target,  \n   void * Value  \n);   \nvoid * _InterlockedExchangePointer_rel(  \n   void * volatile * Target,  \n   void * Value  \n);   \nvoid * _InterlockedExchangePointer_nf(  \n   void * volatile * Target,  \n   void * Value  \n);   \nvoid * _InterlockedExchangePointer_HLEAcquire(  \n   void * volatile * Target,  \n   void * Value  \n);   \nvoid * _InterlockedExchangePointer_HLERelease(  \n   void * volatile * Target,  \n   void * Value  \n);  \n```  \n  \n#### Parameters  \n [in, out] `Target`  \n Pointer to the pointer to the value to exchange. The function sets the value to `Value` and returns its previous value.  \n  \n [in] `Value`  \n Value to be exchanged with the value pointed to by `Target`.  \n  \n## Return Value  \n The function returns the initial value pointed to by `Target`.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|Header|  \n|---------------|------------------|------------|  \n|`_InterlockedExchangePointer`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|\\<intrin.h>|  \n|`_InterlockedExchangePointer_acq`, `_InterlockedExchangePointer_rel`, `_InterlockedExchangePointer_nf`|ARM|\\<intrin.h>|  \n|`_InterlockedExchangePointer_HLEAcquire`, `_InterlockedExchangePointer_HLERelease`|[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)] with HLE support|\\<immintrin.h>|  \n  \n On the x86 architecture, `_InterlockedExchangePointer` is a macro that calls `_InterlockedExchange`.  \n  \n## Remarks  \n On a 64-bit system, the parameters are 64 bits and must be aligned on 64-bit boundaries; otherwise, the function fails. On a 32-bit system, the parameters are 32 bits and must be aligned on 32-bit boundaries. For more information, see [align](../cpp/align-cpp.md).  \n  \n On ARM platforms, use the intrinsics with `_acq` and `_rel` suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section. The intrinsic with an `_nf` (\"no fence\") suffix does not act as a memory barrier.  \n  \n On Intel platforms that support Hardware Lock Elision (HLE) instructions, the intrinsics with `_HLEAcquire` and `_HLERelease` suffixes include a hint to the processor that can accelerate performance by eliminating a lock write step in hardware. If these intrinsics are called on platforms that do not support HLE, the hint is ignored.  \n  \n These routines are only available as intrinsics.  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)   \n [Conflicts with the x86 Compiler](../build/conflicts-with-the-x86-compiler.md)"}