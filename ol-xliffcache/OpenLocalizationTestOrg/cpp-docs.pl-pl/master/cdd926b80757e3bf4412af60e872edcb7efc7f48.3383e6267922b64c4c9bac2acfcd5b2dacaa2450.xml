{"nodes":[{"pos":[12,47],"content":"CMapPtrToPtr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMapPtrToPtr Class | Microsoft Docs","pos":[0,35]}]},{"pos":[680,698],"content":"CMapPtrToPtr Class","linkify":"CMapPtrToPtr Class","nodes":[{"content":"CMapPtrToPtr Class","pos":[0,18]}]},{"content":"Supports maps of void pointers keyed by void pointers.","pos":[699,753]},{"pos":[762,768],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[830,837],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"content":"The member functions of <ph id=\"ph1\">`CMapPtrToPtr`</ph> are similar to the member functions of class <bpt id=\"p1\">[</bpt>CMapStringToOb<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md)</ept>.","pos":[841,987],"source":"The member functions of `CMapPtrToPtr` are similar to the member functions of class [CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md)."},{"content":"Because of this similarity, you can use the <ph id=\"ph1\">`CMapStringToOb`</ph> reference documentation for member function specifics.","pos":[988,1103],"source":" Because of this similarity, you can use the `CMapStringToOb` reference documentation for member function specifics."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a function parameter or return value, substitute a pointer to <ph id=\"ph2\">`void`</ph>.","pos":[1104,1213],"source":" Wherever you see a `CObject` pointer as a function parameter or return value, substitute a pointer to `void`."},{"content":"Wherever you see a <ph id=\"ph1\">`CString`</ph> or a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> pointer to <ph id=\"ph2\">`char`</ph> as a function parameter or return value, substitute a pointer to <ph id=\"ph3\">`void`</ph>.","pos":[1214,1348],"source":" Wherever you see a `CString` or a **const** pointer to `char` as a function parameter or return value, substitute a pointer to `void`."},{"content":"for example, translates to","pos":[1447,1473]},{"pos":[1556,1575],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1582,1586]},{"content":"Description","pos":[1587,1598]},{"pos":[1636,1744],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::CMapStringToOb<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__cmapstringtoob)</ept>","source":"[CMapStringToOb::CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__cmapstringtoob)"},{"content":"Constructor.","pos":[1745,1757]},{"pos":[1768,1782],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1789,1793]},{"content":"Description","pos":[1794,1805]},{"pos":[1843,1939],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::GetCount<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getcount)</ept>","source":"[CMapStringToOb::GetCount](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getcount)"},{"content":"Returns the number of elements in this map.","pos":[1940,1983]},{"pos":[1988,2100],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::GetHashTableSize<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__gethashtablesize)</ept>","source":"[CMapStringToOb::GetHashTableSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__gethashtablesize)"},{"content":"Determines the current number of elements in the hash table.","pos":[2101,2161]},{"pos":[2166,2270],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::GetNextAssoc<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getnextassoc)</ept>","source":"[CMapStringToOb::GetNextAssoc](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getnextassoc)"},{"content":"Gets the next element for iterating.","pos":[2271,2307]},{"pos":[2312,2406],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::GetSize<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getsize)</ept>","source":"[CMapStringToOb::GetSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getsize)"},{"content":"Returns the number of elements in this map.","pos":[2407,2450]},{"pos":[2455,2567],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::GetStartPosition<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getstartposition)</ept>","source":"[CMapStringToOb::GetStartPosition](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getstartposition)"},{"content":"Returns the position of the first element.","pos":[2568,2610]},{"pos":[2615,2709],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::HashKey<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__hashkey)</ept>","source":"[CMapStringToOb::HashKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__hashkey)"},{"content":"Calculates the hash value of a specified key.","pos":[2710,2755]},{"pos":[2760,2866],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::InitHashTable<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__inithashtable)</ept>","source":"[CMapStringToOb::InitHashTable](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__inithashtable)"},{"content":"Initializes the hash table.","pos":[2867,2894]},{"pos":[2899,2993],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::IsEmpty<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__isempty)</ept>","source":"[CMapStringToOb::IsEmpty](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__isempty)"},{"content":"Tests for the empty-map condition (no elements).","pos":[2994,3042]},{"pos":[3047,3139],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::Lookup<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookup)</ept>","source":"[CMapStringToOb::Lookup](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookup)"},{"content":"Looks up a void pointer based on the void pointer key.","pos":[3140,3194]},{"content":"The pointer value, not the entity it points to, is used for the key comparison.","pos":[3195,3274]},{"pos":[3279,3377],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::LookupKey<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookupkey)</ept>","source":"[CMapStringToOb::LookupKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookupkey)"},{"content":"Returns a reference to the key associated with the specified key value.","pos":[3378,3449]},{"pos":[3454,3552],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::RemoveAll<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removeall)</ept>","source":"[CMapStringToOb::RemoveAll](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removeall)"},{"content":"Removes all the elements from this map.","pos":[3553,3592]},{"pos":[3597,3695],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::RemoveKey<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removekey)</ept>","source":"[CMapStringToOb::RemoveKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removekey)"},{"content":"Removes an element specified by a key.","pos":[3696,3734]},{"pos":[3739,3829],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::SetAt<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__setat)</ept>","source":"[CMapStringToOb::SetAt](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__setat)"},{"content":"Inserts an element into the map; replaces an existing element if a matching key is found.","pos":[3830,3919]},{"pos":[3930,3946],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[3953,3957]},{"content":"Description","pos":[3958,3969]},{"pos":[4007,4110],"content":"<bpt id=\"p1\">[</bpt>CMapStringToOb::operator [ ]<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__operator_at)</ept>","source":"[CMapStringToOb::operator [ ]](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__operator_at)"},{"pos":[4111,4179],"content":"Inserts an element into the map — operator substitution for <ph id=\"ph1\">`SetAt`</ph>.","source":"Inserts an element into the map — operator substitution for `SetAt`."},{"pos":[4189,4196],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CMapPtrToPtr`</ph> incorporates the <ph id=\"ph2\">`IMPLEMENT_DYNAMIC`</ph> macro to support run-time type access and dumping to a <ph id=\"ph3\">`CDumpContext`</ph> object.","pos":[4200,4329],"source":"`CMapPtrToPtr` incorporates the `IMPLEMENT_DYNAMIC` macro to support run-time type access and dumping to a `CDumpContext` object."},{"content":"If you need a dump of individual map elements (pointer values), you must set the depth of the dump context to 1 or greater.","pos":[4330,4453]},{"content":"Pointer-to-pointer maps may not be serialized.","pos":[4460,4506]},{"pos":[4513,4651],"content":"When a <ph id=\"ph1\">`CMapPtrToPtr`</ph> object is deleted, or when its elements are removed, only the pointers are removed, not the entities they reference.","source":"When a `CMapPtrToPtr` object is deleted, or when its elements are removed, only the pointers are removed, not the entities they reference."},{"pos":[4658,4754],"content":"For more information on <ph id=\"ph1\">`CMapPtrToPtr`</ph>, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","source":"For more information on `CMapPtrToPtr`, see the article [Collections](../../mfc/collections.md)."},{"pos":[4763,4784],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4788,4835],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[4865,4877],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4881,4902],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"pos":[4911,4919],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[4923,4977],"source":"[CObject Class](../../mfc/reference/cobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","pos":[4980,5028],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"CMapPtrToPtr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMapPtrToPtr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMapPtrToPtr class\"\n  - \"pointer mapping class\"\n  - \"collection classes, pointer mapping\"\nms.assetid: 23cbbaec-9d64-48f2-92ae-5e24fa64b926\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMapPtrToPtr Class\nSupports maps of void pointers keyed by void pointers.  \n  \n## Syntax  \n  \n```  \nclass CMapPtrToPtr : public CObject  \n```  \n  \n## Members  \n The member functions of `CMapPtrToPtr` are similar to the member functions of class [CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md). Because of this similarity, you can use the `CMapStringToOb` reference documentation for member function specifics. Wherever you see a `CObject` pointer as a function parameter or return value, substitute a pointer to `void`. Wherever you see a `CString` or a **const** pointer to `char` as a function parameter or return value, substitute a pointer to `void`.  \n  \n `BOOL CMapStringToOb::Lookup( const char* <key>,`  \n  \n `CObject*& <rValue> ) const;`  \n  \n for example, translates to  \n  \n `BOOL CMapPtrToPtr::Lookup( void* <key>, void*& <rValue> ) const;`  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__cmapstringtoob)|Constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::GetCount](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getcount)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetHashTableSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__gethashtablesize)|Determines the current number of elements in the hash table.|  \n|[CMapStringToOb::GetNextAssoc](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getnextassoc)|Gets the next element for iterating.|  \n|[CMapStringToOb::GetSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getsize)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetStartPosition](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getstartposition)|Returns the position of the first element.|  \n|[CMapStringToOb::HashKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__hashkey)|Calculates the hash value of a specified key.|  \n|[CMapStringToOb::InitHashTable](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__inithashtable)|Initializes the hash table.|  \n|[CMapStringToOb::IsEmpty](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__isempty)|Tests for the empty-map condition (no elements).|  \n|[CMapStringToOb::Lookup](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookup)|Looks up a void pointer based on the void pointer key. The pointer value, not the entity it points to, is used for the key comparison.|  \n|[CMapStringToOb::LookupKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookupkey)|Returns a reference to the key associated with the specified key value.|  \n|[CMapStringToOb::RemoveAll](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removeall)|Removes all the elements from this map.|  \n|[CMapStringToOb::RemoveKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removekey)|Removes an element specified by a key.|  \n|[CMapStringToOb::SetAt](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__setat)|Inserts an element into the map; replaces an existing element if a matching key is found.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::operator [ ]](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__operator_at)|Inserts an element into the map — operator substitution for `SetAt`.|  \n  \n## Remarks  \n `CMapPtrToPtr` incorporates the `IMPLEMENT_DYNAMIC` macro to support run-time type access and dumping to a `CDumpContext` object. If you need a dump of individual map elements (pointer values), you must set the depth of the dump context to 1 or greater.  \n  \n Pointer-to-pointer maps may not be serialized.  \n  \n When a `CMapPtrToPtr` object is deleted, or when its elements are removed, only the pointers are removed, not the entities they reference.  \n  \n For more information on `CMapPtrToPtr`, see the article [Collections](../../mfc/collections.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CMapPtrToPtr`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}