{"nodes":[{"pos":[12,49],"content":"tmpnam_s, _wtmpnam_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"tmpnam_s, _wtmpnam_s | Microsoft Docs","pos":[0,37]}]},{"pos":[1158,1178],"content":"tmpnam_s, _wtmpnam_s","linkify":"tmpnam_s, _wtmpnam_s","nodes":[{"content":"tmpnam_s, _wtmpnam_s","pos":[0,20]}]},{"content":"Generate names you can use to create temporary files.","pos":[1179,1232]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>tmpnam and _wtmpnam<ept id=\"p1\">](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1233,1478],"source":" These are versions of [tmpnam and _wtmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1487,1493],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1832,1842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`str`</ph>","pos":[1846,1857],"source":"[out] `str`"},{"content":"Pointer that will hold the generated name.","pos":[1861,1903]},{"content":"[in] <ph id=\"ph1\">`sizeInChars`</ph>","pos":[1910,1928],"source":"[in] `sizeInChars`"},{"content":"The size of the buffer in characters.","pos":[1932,1969]},{"pos":[1978,1990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Both of these functions return 0 if successful or an error number on failure.","pos":[1994,2071]},{"pos":[2081,2097],"content":"Error Conditions","linkify":"Error Conditions","nodes":[{"content":"Error Conditions","pos":[0,16]}]},{"pos":[2144,2160],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[2161,2183],"content":"<bpt id=\"p1\">**</bpt>Contents of<ept id=\"p1\">**</ept>  <ph id=\"ph1\">`str`</ph>","source":"**Contents of**  `str`"},{"content":"any","pos":[2195,2198]},{"content":"not modified","pos":[2208,2220]},{"pos":[2225,2260],"content":"not <ph id=\"ph1\">`NULL`</ph> (points to valid memory)","source":"not `NULL` (points to valid memory)"},{"content":"too short","pos":[2261,2270]},{"content":"not modified","pos":[2280,2292]},{"content":"If <ph id=\"ph1\">`str`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2300,2450],"source":"If `str` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2451,2548],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return `EINVAL`."},{"pos":[2557,2564],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each of these functions returns the name of a file that does not currently exist.","pos":[2568,2649]},{"content":"<ph id=\"ph1\">`tmpnam_s`</ph> returns a name unique in the current working directory.","pos":[2650,2716],"source":"`tmpnam_s` returns a name unique in the current working directory."},{"content":"Note than when a file name is pre-pended with a backslash and no path information, such as \\fname21, this indicates that the name is valid for the current working directory.","pos":[2717,2890]},{"content":"For <ph id=\"ph1\">`tmpnam_s`</ph>, you can store this generated file name in <ph id=\"ph2\">`str`</ph>.","pos":[2897,2961],"source":"For `tmpnam_s`, you can store this generated file name in `str`."},{"content":"The maximum length of a string returned by <ph id=\"ph1\">`tmpnam_s`</ph> is <ph id=\"ph2\">`L_tmpnam_s`</ph>, defined in STDIO.H.","pos":[2962,3052],"source":" The maximum length of a string returned by `tmpnam_s` is `L_tmpnam_s`, defined in STDIO.H."},{"content":"If <ph id=\"ph1\">`str`</ph> is <ph id=\"ph2\">`NULL`</ph>, then <ph id=\"ph3\">`tmpnam_s`</ph> leaves the result in an internal static buffer.","pos":[3053,3136],"source":" If `str` is `NULL`, then `tmpnam_s` leaves the result in an internal static buffer."},{"content":"Thus any subsequent calls destroy this value.","pos":[3137,3182]},{"content":"The name generated by <ph id=\"ph1\">`tmpnam_s`</ph> consists of a program-generated file name and, after the first call to <ph id=\"ph2\">`tmpnam_s`</ph>, a file extension of sequential numbers in base 32 (.1-.1vvvvvu, when <ph id=\"ph3\">`TMP_MAX_S`</ph> in STDIO.H is INT_MAX).","pos":[3183,3403],"source":" The name generated by `tmpnam_s` consists of a program-generated file name and, after the first call to `tmpnam_s`, a file extension of sequential numbers in base 32 (.1-.1vvvvvu, when `TMP_MAX_S` in STDIO.H is INT_MAX)."},{"content":"<ph id=\"ph1\">`tmpnam_s`</ph> automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the OEM code page obtained from the operating system.","pos":[3410,3604],"source":"`tmpnam_s` automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the OEM code page obtained from the operating system."},{"content":"<ph id=\"ph1\">`_wtmpnam_s`</ph> is a wide-character version of <ph id=\"ph2\">`tmpnam_s`</ph>; the argument and return value of <ph id=\"ph3\">`_wtmpnam_s`</ph> are wide-character strings.","pos":[3605,3734],"source":"`_wtmpnam_s` is a wide-character version of `tmpnam_s`; the argument and return value of `_wtmpnam_s` are wide-character strings."},{"content":"<ph id=\"ph1\">`_wtmpnam_s`</ph> and <ph id=\"ph2\">`tmpnam_s`</ph> behave identically except that <ph id=\"ph3\">`_wtmpnam_s`</ph> does not handle multibyte-character strings.","pos":[3735,3851],"source":"`_wtmpnam_s` and `tmpnam_s` behave identically except that `_wtmpnam_s` does not handle multibyte-character strings."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically, eliminating the need to specify a size argument.","pos":[3858,4026]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4027,4135],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"pos":[4145,4174],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[4181,4196]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[4197,4225],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4226,4239]},{"content":"_UNICODE defined","pos":[4240,4256]},{"pos":[4426,4438],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4445,4452]},{"content":"Required header","pos":[4453,4468]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[4524,4534],"source":"\\<stdio.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[4552,4576],"source":"\\<stdio.h> or \\<wchar.h>"},{"pos":[4584,4708],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4717,4724],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5332,5357],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[5361,5376]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[5377,5424],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[5425,5550],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[5559,5567],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5571,5623],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_getmbcp<ept id=\"p1\">](../../c-runtime-library/reference/getmbcp.md)</ept><ph id=\"ph1\"> </ph>","pos":[5626,5684],"source":" [_getmbcp](../../c-runtime-library/reference/getmbcp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[5687,5742],"source":" [malloc](../../c-runtime-library/reference/malloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_setmbcp<ept id=\"p1\">](../../c-runtime-library/reference/setmbcp.md)</ept><ph id=\"ph1\"> </ph>","pos":[5745,5803],"source":" [_setmbcp](../../c-runtime-library/reference/setmbcp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>tmpfile_s<ept id=\"p1\">](../../c-runtime-library/reference/tmpfile-s.md)</ept>","pos":[5806,5866],"source":" [tmpfile_s](../../c-runtime-library/reference/tmpfile-s.md)"}],"content":"---\ntitle: \"tmpnam_s, _wtmpnam_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"tmpnam_s\"\n  - \"_wtmpnam_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"tmpnam_s\"\n  - \"_wtmpnam_s\"\n  - \"L_tmpnam_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"tmpnam_s function\"\n  - \"file names [C++], creating temporary\"\n  - \"_wtmpnam_s function\"\n  - \"L_tmpnam_s constant\"\n  - \"temporary files, creating\"\n  - \"file names [C++], temporary\"\n  - \"wtmpnam_s function\"\nms.assetid: e70d76dc-49f5-4aee-bfa2-f1baa2bcd29f\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# tmpnam_s, _wtmpnam_s\nGenerate names you can use to create temporary files. These are versions of [tmpnam and _wtmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t tmpnam_s(  \n   char * str,  \n   size_t sizeInChars   \n);  \nerrno_t _wtmpnam_s(  \n   wchar_t *str,  \n   size_t sizeInChars   \n);  \ntemplate <size_t size>  \nerrno_t tmpnam_s(  \n   char (&str)[size]  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _wtmpnam_s(  \n   wchar_t (&str)[size]  \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `str`  \n Pointer that will hold the generated name.  \n  \n [in] `sizeInChars`  \n The size of the buffer in characters.  \n  \n## Return Value  \n Both of these functions return 0 if successful or an error number on failure.  \n  \n### Error Conditions  \n  \n|||||  \n|-|-|-|-|  \n|`str`|`sizeInChars`|**Return Value**|**Contents of**  `str`|  \n|`NULL`|any|`EINVAL`|not modified|  \n|not `NULL` (points to valid memory)|too short|`ERANGE`|not modified|  \n  \n If `str` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return `EINVAL`.  \n  \n## Remarks  \n Each of these functions returns the name of a file that does not currently exist. `tmpnam_s` returns a name unique in the current working directory. Note than when a file name is pre-pended with a backslash and no path information, such as \\fname21, this indicates that the name is valid for the current working directory.  \n  \n For `tmpnam_s`, you can store this generated file name in `str`. The maximum length of a string returned by `tmpnam_s` is `L_tmpnam_s`, defined in STDIO.H. If `str` is `NULL`, then `tmpnam_s` leaves the result in an internal static buffer. Thus any subsequent calls destroy this value. The name generated by `tmpnam_s` consists of a program-generated file name and, after the first call to `tmpnam_s`, a file extension of sequential numbers in base 32 (.1-.1vvvvvu, when `TMP_MAX_S` in STDIO.H is INT_MAX).  \n  \n `tmpnam_s` automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the OEM code page obtained from the operating system. `_wtmpnam_s` is a wide-character version of `tmpnam_s`; the argument and return value of `_wtmpnam_s` are wide-character strings. `_wtmpnam_s` and `tmpnam_s` behave identically except that `_wtmpnam_s` does not handle multibyte-character strings.  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically, eliminating the need to specify a size argument. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_ttmpnam_s`|`tmpnam_s`|`tmpnam_s`|`_wtmpnam_s`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`tmpnam_s`|\\<stdio.h>|  \n|`_wtmpnam_s`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_tmpnam_s.c  \n// This program uses tmpnam_s to create a unique filename in the  \n// current working directory.   \n//  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main( void )  \n{     \n   char name1[L_tmpnam_s];  \n   errno_t err;  \n   int i;  \n  \n   for (i = 0; i < 15; i++)  \n   {  \n      err = tmpnam_s( name1, L_tmpnam_s );  \n      if (err)  \n      {  \n         printf(\"Error occurred creating unique filename.\\n\");  \n         exit(1);  \n      }  \n      else  \n      {  \n         printf( \"%s is safe to use as a temporary file.\\n\", name1 );  \n      }  \n   }    \n}  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_getmbcp](../../c-runtime-library/reference/getmbcp.md)   \n [malloc](../../c-runtime-library/reference/malloc.md)   \n [_setmbcp](../../c-runtime-library/reference/setmbcp.md)   \n [tmpfile_s](../../c-runtime-library/reference/tmpfile-s.md)"}