{"nodes":[{"pos":[12,34],"content":"frexp | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"frexp | Microsoft Docs","pos":[0,22]}]},{"pos":[1090,1095],"content":"frexp","linkify":"frexp","nodes":[{"content":"frexp","pos":[0,5]}]},{"content":"Gets the mantissa and exponent of a floating-point number.","pos":[1096,1154]},{"pos":[1163,1169],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1391,1401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value.","pos":[1412,1433]},{"content":"Pointer to stored integer exponent.","pos":[1452,1487]},{"pos":[1496,1508],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`frexp`</ph> returns the mantissa.","pos":[1512,1541],"source":"`frexp` returns the mantissa."},{"content":"If <ph id=\"ph1\">`x`</ph> is 0, the function returns 0 for both the mantissa and the exponent.","pos":[1542,1617],"source":" If `x` is 0, the function returns 0 for both the mantissa and the exponent."},{"content":"If <ph id=\"ph1\">`expptr`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1618,1770],"source":" If `expptr` is `NULL`, the invalid parameter handler is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns 0.","pos":[1771,1861],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns 0."},{"pos":[1870,1877],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`frexp`</ph> function breaks down the floating-point value (<ph id=\"ph2\">`x`</ph>) into a mantissa (<ph id=\"ph3\">`m`</ph>) and an exponent (<ph id=\"ph4\">`n`</ph>), such that the absolute value of <ph id=\"ph5\">`m`</ph> is greater than or equal to 0.5 and less than 1.0, and <ph id=\"ph6\">`x`</ph><ph id=\"ph7\"> = </ph><ph id=\"ph8\">`m`</ph>*2<bpt id=\"p1\">&lt;sup&gt;</bpt>n<ept id=\"p1\">&lt;/sup&gt;</ept>.","pos":[1881,2105],"source":"The `frexp` function breaks down the floating-point value (`x`) into a mantissa (`m`) and an exponent (`n`), such that the absolute value of `m` is greater than or equal to 0.5 and less than 1.0, and `x` = `m`*2<sup>n</sup>."},{"content":"The integer exponent <ph id=\"ph1\">`n`</ph> is stored at the location pointed to by <ph id=\"ph2\">`expptr`</ph>.","pos":[2106,2180],"source":" The integer exponent `n` is stored at the location pointed to by `expptr`."},{"content":"C++ allows overloading, so you can call overloads of <ph id=\"ph1\">`frexp`</ph>.","pos":[2187,2248],"source":"C++ allows overloading, so you can call overloads of `frexp`."},{"content":"In a C program, <ph id=\"ph1\">`frexp`</ph> always takes a double and an integer and returns a double.","pos":[2249,2331],"source":" In a C program, `frexp` always takes a double and an integer and returns a double."},{"pos":[2340,2352],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[2359,2367]},{"content":"Required header","pos":[2368,2383]},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[2437,2446],"source":"\\<math.h>"},{"pos":[2454,2578],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2587,2594],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2979,3004],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3008,3023]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3024,3071],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3072,3197],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3206,3214],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[3218,3294],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ldexp<ept id=\"p1\">](../../c-runtime-library/reference/ldexp.md)</ept><ph id=\"ph1\"> </ph>","pos":[3297,3350],"source":" [ldexp](../../c-runtime-library/reference/ldexp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>modf, modff, modfl<ept id=\"p1\">](../../c-runtime-library/reference/modf-modff-modfl.md)</ept>","pos":[3353,3429],"source":" [modf, modff, modfl](../../c-runtime-library/reference/modf-modff-modfl.md)"}],"content":"---\ntitle: \"frexp | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"frexp\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"frexp\"\n  - \"_frexpl\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_frexpl function\"\n  - \"mantissas, floating-point variables\"\n  - \"frexpl function\"\n  - \"exponent, floating-point numbers\"\n  - \"frexp function\"\n  - \"floating-point functions, mantissa and exponent\"\nms.assetid: 9b020f2e-3967-45ec-a6a8-d467a071aa55\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# frexp\nGets the mantissa and exponent of a floating-point number.  \n  \n## Syntax  \n  \n```  \ndouble frexp(  \n   double x,  \n   int *expptr   \n);  \nfloat frexp(  \n   float x,  \n   int * expptr  \n);  // C++ only  \nlong double frexp(  \n   long double x,  \n   int * expptr  \n);  // C++ only  \n```  \n  \n#### Parameters  \n `x`  \n Floating-point value.  \n  \n `expptr`  \n Pointer to stored integer exponent.  \n  \n## Return Value  \n `frexp` returns the mantissa. If `x` is 0, the function returns 0 for both the mantissa and the exponent. If `expptr` is `NULL`, the invalid parameter handler is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns 0.  \n  \n## Remarks  \n The `frexp` function breaks down the floating-point value (`x`) into a mantissa (`m`) and an exponent (`n`), such that the absolute value of `m` is greater than or equal to 0.5 and less than 1.0, and `x` = `m`*2<sup>n</sup>. The integer exponent `n` is stored at the location pointed to by `expptr`.  \n  \n C++ allows overloading, so you can call overloads of `frexp`. In a C program, `frexp` always takes a double and an integer and returns a double.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`frexp`|\\<math.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_frexp.c  \n// This program calculates frexp( 16.4, &n )  \n// then displays y and n.  \n  \n#include <math.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   double x, y;  \n   int n;  \n  \n   x = 16.4;  \n   y = frexp( x, &n );  \n   printf( \"frexp( %f, &n ) = %f, n = %d\\n\", x, y, n );  \n}  \n```  \n  \n```Output  \nfrexp( 16.400000, &n ) = 0.512500, n = 5  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [ldexp](../../c-runtime-library/reference/ldexp.md)   \n [modf, modff, modfl](../../c-runtime-library/reference/modf-modff-modfl.md)"}