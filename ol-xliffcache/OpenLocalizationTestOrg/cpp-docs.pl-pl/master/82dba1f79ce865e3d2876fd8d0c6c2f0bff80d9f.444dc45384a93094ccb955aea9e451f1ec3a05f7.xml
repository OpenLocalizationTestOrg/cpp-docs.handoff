{"nodes":[{"pos":[12,46],"content":"CComControl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComControl Class | Microsoft Docs","pos":[0,34]}]},{"content":"CComControl Class","pos":[807,824]},{"content":"This class provides methods for creating and managing ATL controls.","pos":[825,892]},{"pos":[900,1010],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[1019,1025]},{"content":"Parameters","pos":[1180,1190]},{"content":"The class implementing the control.","pos":[1201,1236]},{"content":"WinBase","pos":[1244,1251]},{"content":"The base class that implements windowing functions.","pos":[1256,1307]},{"content":"Defaults to <bpt id=\"p1\">[</bpt>CWindowImpl<ept id=\"p1\">](../../atl/reference/cwindowimpl-class.md)</ept>.","pos":[1308,1376],"source":" Defaults to [CWindowImpl](../../atl/reference/cwindowimpl-class.md)."},{"content":"Members","pos":[1385,1392]},{"content":"Public Constructors","pos":[1402,1421]},{"content":"Name","pos":[1428,1432]},{"content":"Description","pos":[1433,1444]},{"content":"CComControl::CComControl","pos":[1483,1507]},{"content":"Constructor.","pos":[1536,1548]},{"content":"Public Methods","pos":[1559,1573]},{"content":"Name","pos":[1580,1584]},{"content":"Description","pos":[1585,1596]},{"content":"CComControl::ControlQueryInterface","pos":[1635,1669]},{"content":"Retrieves a pointer to the requested interface.","pos":[1708,1755]},{"content":"CComControl::CreateControlWindow","pos":[1761,1793]},{"content":"Creates a window for the control.","pos":[1830,1863]},{"content":"CComControl::FireOnChanged","pos":[1869,1895]},{"content":"Notifies the container's sink that a control property has changed.","pos":[1926,1992]},{"content":"CComControl::FireOnRequestEdit","pos":[1998,2028]},{"content":"Notifies the container's sink that a control property is about to change and that the object is asking the sink how to proceed.","pos":[2063,2190]},{"content":"CComControl::MessageBox","pos":[2196,2219]},{"content":"Call this method to create, display, and operate a message box.","pos":[2247,2310]},{"content":"Remarks","pos":[2320,2327]},{"content":"is a set of useful control helper functions and essential data members for ATL controls.","pos":[2345,2433]},{"content":"When you create a standard control or a DHTML control using the ATL Control Wizard, the wizard will automatically derive your class from <ph id=\"ph1\">`CComControl`</ph>.","pos":[2434,2585],"source":" When you create a standard control or a DHTML control using the ATL Control Wizard, the wizard will automatically derive your class from `CComControl`."},{"content":"derives most of its methods from <bpt id=\"p1\">[</bpt>CComControlBase<ept id=\"p1\">](../../atl/reference/ccomcontrolbase-class.md)</ept>.","pos":[2600,2697],"source":" derives most of its methods from [CComControlBase](../../atl/reference/ccomcontrolbase-class.md)."},{"content":"For more information about creating a control, see the <bpt id=\"p1\">[</bpt>ATL Tutorial<ept id=\"p1\">](../../atl/active-template-library-atl-tutorial.md)</ept>.","pos":[2704,2825],"source":"For more information about creating a control, see the [ATL Tutorial](../../atl/active-template-library-atl-tutorial.md)."},{"content":"For more information about the ATL Project Wizard, see the article <bpt id=\"p1\">[</bpt>Creating an ATL Project<ept id=\"p1\">](../../atl/reference/creating-an-atl-project.md)</ept>.","pos":[2826,2967],"source":" For more information about the ATL Project Wizard, see the article [Creating an ATL Project](../../atl/reference/creating-an-atl-project.md)."},{"pos":[2974,3088],"content":"For a demonstration of <ph id=\"ph1\">`CComControl`</ph> methods and data members, see the <bpt id=\"p1\">[</bpt>CIRC<ept id=\"p1\">](../../visual-cpp-samples.md)</ept> sample.","source":"For a demonstration of `CComControl` methods and data members, see the [CIRC](../../visual-cpp-samples.md) sample."},{"content":"Inheritance Hierarchy","pos":[3097,3118]},{"content":"CComControlBase","pos":[3139,3154]},{"content":"Requirements","pos":[3230,3242]},{"pos":[3246,3266],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlctl.h","source":"**Header:** atlctl.h"},{"pos":[3317,3341],"content":"CComControl::CComControl"},{"content":"The constructor.","pos":[3345,3361]},{"content":"Remarks","pos":[3399,3406]},{"pos":[3410,3617],"content":"Calls the <bpt id=\"p1\">[</bpt>CComControlBase<ept id=\"p1\">](ccomcontrolbase-class.md#ccomcontrolbase__ccomcontrolbase)</ept> constructor, passing the <ph id=\"ph1\">`m_hWnd`</ph> data member inherited through <bpt id=\"p2\">[</bpt>CWindowImpl<ept id=\"p2\">](../../atl/reference/cwindowimpl-class.md)</ept>.","source":"Calls the [CComControlBase](ccomcontrolbase-class.md#ccomcontrolbase__ccomcontrolbase) constructor, passing the `m_hWnd` data member inherited through [CWindowImpl](../../atl/reference/cwindowimpl-class.md)."},{"pos":[3678,3712],"content":"CComControl::ControlQueryInterface"},{"content":"Retrieves a pointer to the requested interface.","pos":[3716,3763]},{"content":"Parameters","pos":[3857,3867]},{"content":"[in] The GUID of the interface being requested.","pos":[3880,3927]},{"content":"[out] A pointer to the interface pointer identified by <ph id=\"ph1\">`iid`</ph>, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the interface is not found.","pos":[3943,4047],"source":" [out] A pointer to the interface pointer identified by `iid`, or **NULL** if the interface is not found."},{"content":"Remarks","pos":[4057,4064]},{"content":"Only handles interfaces in the COM map table.","pos":[4068,4113]},{"content":"Example","pos":[4123,4130]},{"pos":[4145,4159],"content":"NVC_ATL_COM#15"},{"pos":[4271,4303],"content":"CComControl::CreateControlWindow"},{"pos":[4307,4385],"content":"By default, creates a window for the control by calling <ph id=\"ph1\">`CWindowImpl::Create`</ph>.","source":"By default, creates a window for the control by calling `CWindowImpl::Create`."},{"content":"Parameters","pos":[4476,4486]},{"content":"[in] Handle to the parent or owner window.","pos":[4506,4548]},{"content":"A valid window handle must be supplied.","pos":[4549,4588]},{"content":"The control window is confined to the area of its parent window.","pos":[4589,4653]},{"content":"[in] The initial size and position of the window to be created.","pos":[4671,4734]},{"content":"Remarks","pos":[4744,4751]},{"content":"Override this method if you want to do something other than create a single window, for example, to create two windows, one of which becomes a toolbar for your control.","pos":[4755,4923]},{"content":"Example","pos":[4933,4940]},{"pos":[4955,4969],"content":"NVC_ATL_COM#16"},{"pos":[5075,5101],"content":"CComControl::FireOnChanged"},{"content":"Notifies the container's sink that a control property has changed.","pos":[5105,5171]},{"content":"Parameters","pos":[5232,5242]},{"content":"dispID","pos":[5247,5253]},{"content":"[in] Identifier of the property that has changed.","pos":[5258,5307]},{"content":"Return Value","pos":[5317,5329]},{"content":"One of the standard HRESULT values.","pos":[5333,5368]},{"content":"Remarks","pos":[5378,5385]},{"content":"If your control class derives from <bpt id=\"p1\">[</bpt>IPropertyNotifySink<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692638)</ept>, this method calls <bpt id=\"p2\">[</bpt>CFirePropNotifyEvent::FireOnChanged<ept id=\"p2\">](cfirepropnotifyevent-class.md#cfirepropnotifyevent__fireonchanged)</ept> to notify all connected <ph id=\"ph1\">`IPropertyNotifySink`</ph> interfaces that the specified control property has changed.","pos":[5389,5735],"source":"If your control class derives from [IPropertyNotifySink](http://msdn.microsoft.com/library/windows/desktop/ms692638), this method calls [CFirePropNotifyEvent::FireOnChanged](cfirepropnotifyevent-class.md#cfirepropnotifyevent__fireonchanged) to notify all connected `IPropertyNotifySink` interfaces that the specified control property has changed."},{"content":"If your control class does not derive from <ph id=\"ph1\">`IPropertyNotifySink`</ph>, this method returns <ph id=\"ph2\">`S_OK`</ph>.","pos":[5736,5829],"source":" If your control class does not derive from `IPropertyNotifySink`, this method returns `S_OK`."},{"content":"This method is safe to call even if your control doesn't support connection points.","pos":[5835,5918]},{"content":"Example","pos":[5928,5935]},{"pos":[5950,5964],"content":"NVC_ATL_COM#17"},{"pos":[6074,6104],"content":"CComControl::FireOnRequestEdit"},{"content":"Notifies the container's sink that a control property is about to change and that the object is asking the sink how to proceed.","pos":[6108,6235]},{"content":"Parameters","pos":[6300,6310]},{"content":"dispID","pos":[6315,6321]},{"content":"[in] Identifier of the property about to change.","pos":[6326,6374]},{"content":"Return Value","pos":[6384,6396]},{"content":"One of the standard HRESULT values.","pos":[6400,6435]},{"content":"Remarks","pos":[6445,6452]},{"content":"If your control class derives from <bpt id=\"p1\">[</bpt>IPropertyNotifySink<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692638)</ept>, this method calls <bpt id=\"p2\">[</bpt>CFirePropNotifyEvent::FireOnRequestEdit<ept id=\"p2\">](cfirepropnotifyevent-class.md#cfirepropnotifyevent__fireonrequestedit)</ept> to notify all connected <ph id=\"ph1\">`IPropertyNotifySink`</ph> interfaces that the specified control property is about to change.","pos":[6456,6817],"source":"If your control class derives from [IPropertyNotifySink](http://msdn.microsoft.com/library/windows/desktop/ms692638), this method calls [CFirePropNotifyEvent::FireOnRequestEdit](cfirepropnotifyevent-class.md#cfirepropnotifyevent__fireonrequestedit) to notify all connected `IPropertyNotifySink` interfaces that the specified control property is about to change."},{"content":"If your control class does not derive from <ph id=\"ph1\">`IPropertyNotifySink`</ph>, this method returns <ph id=\"ph2\">`S_OK`</ph>.","pos":[6818,6911],"source":" If your control class does not derive from `IPropertyNotifySink`, this method returns `S_OK`."},{"content":"This method is safe to call even if your control doesn't support connection points.","pos":[6919,7002]},{"content":"Example","pos":[7012,7019]},{"pos":[7034,7048],"content":"NVC_ATL_COM#18"},{"pos":[7151,7174],"content":"CComControl::MessageBox"},{"content":"Call this method to create, display, and operate a message box.","pos":[7178,7241]},{"content":"Parameters","pos":[7356,7366]},{"content":"The text to be displayed in the message box.","pos":[7384,7428]},{"content":"The dialog box title.","pos":[7452,7473]},{"content":"If NULL (the default), the title \"Error\" is used.","pos":[7474,7523]},{"content":"Specifies the contents and behavior of the dialog box.","pos":[7541,7595]},{"content":"See the <bpt id=\"p1\">[</bpt>MessageBox<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645505)</ept> entry in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> documentation for a list of the different message boxes available.","pos":[7596,7808],"source":" See the [MessageBox](http://msdn.microsoft.com/library/windows/desktop/ms645505) entry in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] documentation for a list of the different message boxes available."},{"content":"The default provides a simple <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> button.","pos":[7809,7853],"source":" The default provides a simple **OK** button."},{"content":"Return Value","pos":[7863,7875]},{"pos":[7879,8102],"content":"Returns an integer value specifying one of the menu-item values listed under <bpt id=\"p1\">[</bpt>MessageBox<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645505)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> documentation.","source":"Returns an integer value specifying one of the menu-item values listed under [MessageBox](http://msdn.microsoft.com/library/windows/desktop/ms645505) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] documentation."},{"content":"Remarks","pos":[8112,8119]},{"pos":[8136,8240],"content":"is useful both during development and as an easy way to display an error or warning message to the user."},{"content":"See Also","pos":[8249,8257]},{"content":"CWindowImpl Class","pos":[8262,8279]},{"content":"Class Overview","pos":[8328,8342]},{"content":"CComControlBase Class","pos":[8382,8403]},{"content":"CComCompositeControl Class","pos":[8456,8482]}],"content":"---\ntitle: \"CComControl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CComControl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"control flags\"\n  - \"CComControlBase class, CComControl class\"\n  - \"stock properties, ATL\"\n  - \"CComControl class\"\n  - \"controls [ATL], control helper functions\"\n  - \"ambient properties\"\n  - \"controls [ATL], properties\"\nms.assetid: 55368c27-bd16-45a7-b701-edb36157c8e8\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComControl Class\nThis class provides methods for creating and managing ATL controls.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\ntemplate <class T, class WinBase = CWindowImpl<T>>  class ATL_NO_VTABLE CComControl :  public CComControlBase,\n    public WinBase;\n```  \n  \n#### Parameters  \n `T`  \n The class implementing the control.  \n  \n *WinBase*  \n The base class that implements windowing functions. Defaults to [CWindowImpl](../../atl/reference/cwindowimpl-class.md).  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComControl::CComControl](#ccomcontrol__ccomcontrol)|Constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComControl::ControlQueryInterface](#ccomcontrol__controlqueryinterface)|Retrieves a pointer to the requested interface.|  \n|[CComControl::CreateControlWindow](#ccomcontrol__createcontrolwindow)|Creates a window for the control.|  \n|[CComControl::FireOnChanged](#ccomcontrol__fireonchanged)|Notifies the container's sink that a control property has changed.|  \n|[CComControl::FireOnRequestEdit](#ccomcontrol__fireonrequestedit)|Notifies the container's sink that a control property is about to change and that the object is asking the sink how to proceed.|  \n|[CComControl::MessageBox](#ccomcontrol__messagebox)|Call this method to create, display, and operate a message box.|  \n  \n## Remarks  \n `CComControl` is a set of useful control helper functions and essential data members for ATL controls. When you create a standard control or a DHTML control using the ATL Control Wizard, the wizard will automatically derive your class from `CComControl`. `CComControl` derives most of its methods from [CComControlBase](../../atl/reference/ccomcontrolbase-class.md).  \n  \n For more information about creating a control, see the [ATL Tutorial](../../atl/active-template-library-atl-tutorial.md). For more information about the ATL Project Wizard, see the article [Creating an ATL Project](../../atl/reference/creating-an-atl-project.md).  \n  \n For a demonstration of `CComControl` methods and data members, see the [CIRC](../../visual-cpp-samples.md) sample.  \n  \n## Inheritance Hierarchy  \n `WinBase`  \n  \n [CComControlBase](../../atl/reference/ccomcontrolbase-class.md)  \n  \n `CComControl`  \n  \n## Requirements  \n **Header:** atlctl.h  \n  \n##  <a name=\"ccomcontrol__ccomcontrol\"></a>  CComControl::CComControl  \n The constructor.  \n  \n```\nCComControl();\n```  \n  \n### Remarks  \n Calls the [CComControlBase](ccomcontrolbase-class.md#ccomcontrolbase__ccomcontrolbase) constructor, passing the `m_hWnd` data member inherited through [CWindowImpl](../../atl/reference/cwindowimpl-class.md).  \n  \n##  <a name=\"ccomcontrol__controlqueryinterface\"></a>  CComControl::ControlQueryInterface  \n Retrieves a pointer to the requested interface.  \n  \n```\nvirtual HRESULT ControlQueryInterface(const IID& iid,\n    void** ppv);\n```  \n  \n### Parameters  \n `iid`  \n [in] The GUID of the interface being requested.  \n  \n `ppv`  \n [out] A pointer to the interface pointer identified by `iid`, or **NULL** if the interface is not found.  \n  \n### Remarks  \n Only handles interfaces in the COM map table.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#15](../../atl/codesnippet/cpp/ccomcontrol-class_1.cpp)]  \n  \n##  <a name=\"ccomcontrol__createcontrolwindow\"></a>  CComControl::CreateControlWindow  \n By default, creates a window for the control by calling `CWindowImpl::Create`.  \n  \n```\nvirtual HWND CreateControlWindow(HWND hWndParent,\n    RECT& rcPos);\n```  \n  \n### Parameters  \n `hWndParent`  \n [in] Handle to the parent or owner window. A valid window handle must be supplied. The control window is confined to the area of its parent window.  \n  \n `rcPos`  \n [in] The initial size and position of the window to be created.  \n  \n### Remarks  \n Override this method if you want to do something other than create a single window, for example, to create two windows, one of which becomes a toolbar for your control.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#16](../../atl/codesnippet/cpp/ccomcontrol-class_2.cpp)]  \n  \n##  <a name=\"ccomcontrol__fireonchanged\"></a>  CComControl::FireOnChanged  \n Notifies the container's sink that a control property has changed.  \n  \n```\nHRESULT FireOnChanged(DISPID dispID);\n```  \n  \n### Parameters  \n *dispID*  \n [in] Identifier of the property that has changed.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n If your control class derives from [IPropertyNotifySink](http://msdn.microsoft.com/library/windows/desktop/ms692638), this method calls [CFirePropNotifyEvent::FireOnChanged](cfirepropnotifyevent-class.md#cfirepropnotifyevent__fireonchanged) to notify all connected `IPropertyNotifySink` interfaces that the specified control property has changed. If your control class does not derive from `IPropertyNotifySink`, this method returns `S_OK`. \n  \n This method is safe to call even if your control doesn't support connection points.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#17](../../atl/codesnippet/cpp/ccomcontrol-class_3.cpp)]  \n  \n##  <a name=\"ccomcontrol__fireonrequestedit\"></a>  CComControl::FireOnRequestEdit  \n Notifies the container's sink that a control property is about to change and that the object is asking the sink how to proceed.  \n  \n```\nHRESULT FireOnRequestEdit(DISPID dispID);\n```  \n  \n### Parameters  \n *dispID*  \n [in] Identifier of the property about to change.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n If your control class derives from [IPropertyNotifySink](http://msdn.microsoft.com/library/windows/desktop/ms692638), this method calls [CFirePropNotifyEvent::FireOnRequestEdit](cfirepropnotifyevent-class.md#cfirepropnotifyevent__fireonrequestedit) to notify all connected `IPropertyNotifySink` interfaces that the specified control property is about to change. If your control class does not derive from `IPropertyNotifySink`, this method returns `S_OK`.  \n\n  \n This method is safe to call even if your control doesn't support connection points.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#18](../../atl/codesnippet/cpp/ccomcontrol-class_4.cpp)]  \n  \n##  <a name=\"ccomcontrol__messagebox\"></a>  CComControl::MessageBox  \n Call this method to create, display, and operate a message box.  \n  \n```\nint MessageBox(LPCTSTR lpszText,\n    LPCTSTR lpszCaption = _T(\"\"),\n    UINT nType = MB_OK);\n```  \n  \n### Parameters  \n `lpszText`  \n The text to be displayed in the message box.  \n  \n `lpszCaption`  \n The dialog box title. If NULL (the default), the title \"Error\" is used.  \n  \n `nType`  \n Specifies the contents and behavior of the dialog box. See the [MessageBox](http://msdn.microsoft.com/library/windows/desktop/ms645505) entry in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] documentation for a list of the different message boxes available. The default provides a simple **OK** button.  \n  \n### Return Value  \n Returns an integer value specifying one of the menu-item values listed under [MessageBox](http://msdn.microsoft.com/library/windows/desktop/ms645505) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] documentation.  \n  \n### Remarks  \n `MessageBox` is useful both during development and as an easy way to display an error or warning message to the user.  \n  \n## See Also  \n [CWindowImpl Class](../../atl/reference/cwindowimpl-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)   \n [CComControlBase Class](../../atl/reference/ccomcontrolbase-class.md)   \n [CComCompositeControl Class](../../atl/reference/ccomcompositecontrol-class.md)\n"}