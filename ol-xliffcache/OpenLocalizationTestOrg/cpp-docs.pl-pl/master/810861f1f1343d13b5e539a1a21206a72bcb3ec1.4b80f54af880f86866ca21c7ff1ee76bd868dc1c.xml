{"nodes":[{"pos":[12,42],"content":"negate Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"negate Struct | Microsoft Docs","pos":[0,30]}]},{"pos":[702,715],"content":"negate Struct","linkify":"negate Struct","nodes":[{"content":"negate Struct","pos":[0,13]}]},{"pos":[716,829],"content":"A predefined function object that performs the arithmetic negation operation (unary <ph id=\"ph1\">`operator-`</ph>) on its argument.","source":"A predefined function object that performs the arithmetic negation operation (unary `operator-`) on its argument."},{"pos":[838,844],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1201,1211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Any type that supports an <ph id=\"ph1\">`operator-`</ph> that takes an operand of the specified or inferred type.","pos":[1225,1319],"source":" Any type that supports an `operator-` that takes an operand of the specified or inferred type."},{"content":"The operand to be negated.","pos":[1336,1362]},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`Type`</ph>.","pos":[1363,1477],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `Type`."},{"pos":[1486,1498],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1502,1647],"content":"The result of <ph id=\"ph1\">`-``Left.`</ph> The specialized template does perfect forwarding of the result, which has the type that's returned by unary <ph id=\"ph2\">`operator-`</ph>.","source":"The result of `-``Left.` The specialized template does perfect forwarding of the result, which has the type that's returned by unary `operator-`."},{"pos":[1656,1663],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2661,2673],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2677,2702],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[2709,2727],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2736,2744],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[2748,2858],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[2861,2949],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"negate Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"negate\"\n  - \"std.negate\"\n  - \"std::negate\"\n  - \"xfunctional/std::negate\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"negate struct\"\n  - \"negate class\"\nms.assetid: 8a372686-786e-4262-b37c-ca13dc11e62f\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# negate Struct\nA predefined function object that performs the arithmetic negation operation (unary `operator-`) on its argument.  \n  \n## Syntax  \n  \n```\ntemplate <class Type = void>\nstruct negate : public unary_function<Type, Type>  \n{\n    Type operator()(const Type& Left) const;\n};\n\n// specialized transparent functor for unary operator-\ntemplate <>\nstruct negate<void>  \n{\n  template <class Type>\n  auto operator()(Type&& Left) const`\n    -> decltype(-std::forward<Type>(Left));\n };\n```  \n  \n#### Parameters  \n `Type`  \n Any type that supports an `operator-` that takes an operand of the specified or inferred type.  \n  \n `Left`  \n The operand to be negated. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `Type`.  \n  \n## Return Value  \n The result of `-``Left.` The specialized template does perfect forwarding of the result, which has the type that's returned by unary `operator-`.  \n  \n## Example  \n  \n```cpp  \n// functional_negate.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <functional>  \n#include <algorithm>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )  \n{  \n   vector <int> v1, v2 ( 8 );  \n   vector <int>::iterator Iter1, Iter2;  \n  \n   int i;  \n   for ( i = -2 ; i <= 5 ; i++ )  \n   {  \n      v1.push_back( 5 * i );  \n   }  \n  \n   cout << \"The vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   // Finding the element-wise negatives of the vector v1  \n   transform ( v1.begin( ),  v1.end( ), v2.begin( ), negate<int>( ) );  \n  \n   cout << \"The negated elements of the vector = ( \" ;  \n   for ( Iter2 = v2.begin( ) ; Iter2 != v2.end( ) ; Iter2++ )  \n      cout << *Iter2 << \" \";  \n   cout << \")\" << endl;  \n}  \n\\* Output:   \nThe vector v1 = ( -10 -5 0 5 10 15 20 25 )  \nThe negated elements of the vector = ( 10 5 0 -5 -10 -15 -20 -25 )  \n*\\  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}