{"nodes":[{"pos":[12,50],"content":"CDockingManager Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDockingManager Class | Microsoft Docs","pos":[0,38]}]},{"pos":[619,640],"content":"CDockingManager Class","linkify":"CDockingManager Class","nodes":[{"content":"CDockingManager Class","pos":[0,21]}]},{"content":"Implements the core functionality that controls docking layout in a main frame window.","pos":[641,727]},{"pos":[736,742],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[807,814],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[824,838],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[845,849]},{"content":"Description","pos":[850,861]},{"pos":[899,960],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::AddDockSite<ept id=\"p1\">](#cdockingmanager__adddocksite)</ept>","source":"[CDockingManager::AddDockSite](#cdockingmanager__adddocksite)"},{"content":"Creates a dock pane and adds it to the list of control bars.","pos":[961,1021]},{"pos":[1026,1107],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::AddHiddenMDITabbedBar<ept id=\"p1\">](#cdockingmanager__addhiddenmditabbedbar)</ept>","source":"[CDockingManager::AddHiddenMDITabbedBar](#cdockingmanager__addhiddenmditabbedbar)"},{"content":"Adds a handle to a bar pane to the list of hidden MDI tabbed bar panes.","pos":[1108,1179]},{"pos":[1184,1247],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::AddMiniFrame<ept id=\"p1\">](#cdockingmanager__addminiframe)</ept>","source":"[CDockingManager::AddMiniFrame](#cdockingmanager__addminiframe)"},{"content":"Adds a frame to the list of mini frames.","pos":[1248,1288]},{"pos":[1293,1346],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::AddPane<ept id=\"p1\">](#cdockingmanager__addpane)</ept>","source":"[CDockingManager::AddPane](#cdockingmanager__addpane)"},{"content":"Registers a pane with the docking manager.","pos":[1347,1389]},{"pos":[1394,1471],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::AdjustDockingLayout<ept id=\"p1\">](#cdockingmanager__adjustdockinglayout)</ept>","source":"[CDockingManager::AdjustDockingLayout](#cdockingmanager__adjustdockinglayout)"},{"content":"Recalculates and adjusts the layout of all panes in a frame window.","pos":[1472,1539]},{"pos":[1544,1615],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::AdjustPaneFrames<ept id=\"p1\">](#cdockingmanager__adjustpaneframes)</ept>","source":"[CDockingManager::AdjustPaneFrames](#cdockingmanager__adjustpaneframes)"},{"pos":[1616,1703],"content":"Causes the <ph id=\"ph1\">`WM_NCCALCSIZE`</ph> message to be sent to all panes and <ph id=\"ph2\">`CPaneFrameWnd`</ph> windows.","source":"Causes the `WM_NCCALCSIZE` message to be sent to all panes and `CPaneFrameWnd` windows."},{"pos":[1708,1791],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::AdjustRectToClientArea<ept id=\"p1\">](#cdockingmanager__adjustrecttoclientarea)</ept>","source":"[CDockingManager::AdjustRectToClientArea](#cdockingmanager__adjustrecttoclientarea)"},{"content":"Adjusts the alignment of a rectangle.","pos":[1792,1829]},{"pos":[1834,1907],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::AlignAutoHidePane<ept id=\"p1\">](#cdockingmanager__alignautohidepane)</ept>","source":"[CDockingManager::AlignAutoHidePane](#cdockingmanager__alignautohidepane)"},{"content":"Resizes a docking pane in autohide mode so that it takes the full width or height of the frameâ€™s client area surrounded by dock sites.","pos":[1908,2042]},{"pos":[2047,2110],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::AutoHidePane<ept id=\"p1\">](#cdockingmanager__autohidepane)</ept>","source":"[CDockingManager::AutoHidePane](#cdockingmanager__autohidepane)"},{"content":"Creates an autohide toolbar.","pos":[2111,2139]},{"pos":[2144,2211],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::BringBarsToTop<ept id=\"p1\">](#cdockingmanager__bringbarstotop)</ept>","source":"[CDockingManager::BringBarsToTop](#cdockingmanager__bringbarstotop)"},{"content":"Brings the docked bars that have the specified alignment to the top.","pos":[2212,2280]},{"pos":[2285,2352],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::BuildPanesMenu<ept id=\"p1\">](#cdockingmanager__buildpanesmenu)</ept>","source":"[CDockingManager::BuildPanesMenu](#cdockingmanager__buildpanesmenu)"},{"content":"Adds names of docking panes and toolbars to a menu.","pos":[2353,2404]},{"pos":[2409,2492],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::CalcExpectedDockedRect<ept id=\"p1\">](#cdockingmanager__calcexpecteddockedrect)</ept>","source":"[CDockingManager::CalcExpectedDockedRect](#cdockingmanager__calcexpecteddockedrect)"},{"content":"Calculates the expected rectangle of a docked window.","pos":[2493,2546]},{"pos":[2551,2602],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::Create<ept id=\"p1\">](#cdockingmanager__create)</ept>","source":"[CDockingManager::Create](#cdockingmanager__create)"},{"content":"Creates a docking manager.","pos":[2603,2629]},{"pos":[2634,2717],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::DeterminePaneAndStatus<ept id=\"p1\">](#cdockingmanager__determinepaneandstatus)</ept>","source":"[CDockingManager::DeterminePaneAndStatus](#cdockingmanager__determinepaneandstatus)"},{"content":"Determines the pane that contains a given point and its docking status.","pos":[2718,2789]},{"pos":[2794,2879],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::DisableRestoreDockState<ept id=\"p1\">](#cdockingmanager__disablerestoredockstate)</ept>","source":"[CDockingManager::DisableRestoreDockState](#cdockingmanager__disablerestoredockstate)"},{"content":"Enables or disables loading of docking layout from the registry.","pos":[2880,2944]},{"pos":[2949,3004],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::DockPane<ept id=\"p1\">](#cdockingmanager__dockpane)</ept>","source":"[CDockingManager::DockPane](#cdockingmanager__dockpane)"},{"content":"Docks a pane to another pane or to a frame window.","pos":[3005,3055]},{"pos":[3060,3127],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::DockPaneLeftOf<ept id=\"p1\">](#cdockingmanager__dockpaneleftof)</ept>","source":"[CDockingManager::DockPaneLeftOf](#cdockingmanager__dockpaneleftof)"},{"content":"Docks a pane to the left of another pane.","pos":[3128,3169]},{"pos":[3174,3251],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::EnableAutoHidePanes<ept id=\"p1\">](#cdockingmanager__enableautohidepanes)</ept>","source":"[CDockingManager::EnableAutoHidePanes](#cdockingmanager__enableautohidepanes)"},{"content":"Enables docking of the pane to the main frame, creates a dock pane, and adds it to the list of control bars.","pos":[3252,3360]},{"pos":[3365,3430],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::EnableDocking<ept id=\"p1\">](#cdockingmanager__enabledocking)</ept>","source":"[CDockingManager::EnableDocking](#cdockingmanager__enabledocking)"},{"content":"Creates a dock pane and enables docking of the pane to the main frame.","pos":[3431,3501]},{"pos":[3506,3581],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::EnableDockSiteMenu<ept id=\"p1\">](#cdockingmanager__enabledocksitemenu)</ept>","source":"[CDockingManager::EnableDockSiteMenu](#cdockingmanager__enabledocksitemenu)"},{"content":"Displays an additional button that opens a pop-up menu on the captions of all docking panes.","pos":[3582,3674]},{"pos":[3679,3760],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::EnablePaneContextMenu<ept id=\"p1\">](#cdockingmanager__enablepanecontextmenu)</ept>","source":"[CDockingManager::EnablePaneContextMenu](#cdockingmanager__enablepanecontextmenu)"},{"content":"Tells the library to display a special context menu that has a list of application toolbars and docking panes when the user clicks the right mouse button and the library is processing the WM_CONTEXTMENU message.","pos":[3761,3972]},{"pos":[3977,4040],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::FindDockSite<ept id=\"p1\">](#cdockingmanager__finddocksite)</ept>","source":"[CDockingManager::FindDockSite](#cdockingmanager__finddocksite)"},{"content":"Retrieves the bar pane that is at the specified position and that has the specified alignment.","pos":[4041,4135]},{"pos":[4140,4215],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::FindDockSiteByPane<ept id=\"p1\">](#cdockingmanager__finddocksitebypane)</ept>","source":"[CDockingManager::FindDockSiteByPane](#cdockingmanager__finddocksitebypane)"},{"content":"Returns the bar pane that has the id of the target bar pane.","pos":[4216,4276]},{"pos":[4281,4344],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::FindPaneByID<ept id=\"p1\">](#cdockingmanager__findpanebyid)</ept>","source":"[CDockingManager::FindPaneByID](#cdockingmanager__findpanebyid)"},{"content":"Finds a pane by the specified control ID.","pos":[4345,4386]},{"pos":[4391,4464],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::FixupVirtualRects<ept id=\"p1\">](#cdockingmanager__fixupvirtualrects)</ept>","source":"[CDockingManager::FixupVirtualRects](#cdockingmanager__fixupvirtualrects)"},{"content":"Commits all current toolbar positions to virtual rectangles.","pos":[4465,4525]},{"pos":[4530,4597],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::FrameFromPoint<ept id=\"p1\">](#cdockingmanager__framefrompoint)</ept>","source":"[CDockingManager::FrameFromPoint](#cdockingmanager__framefrompoint)"},{"content":"Returns the frame that contains the given point.","pos":[4598,4646]},{"pos":[4651,4728],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::GetClientAreaBounds<ept id=\"p1\">](#cdockingmanager__getclientareabounds)</ept>","source":"[CDockingManager::GetClientAreaBounds](#cdockingmanager__getclientareabounds)"},{"content":"Gets the rectangle that contains the bounds of the client area.","pos":[4729,4792]},{"pos":[4797,4864],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::GetDockingMode<ept id=\"p1\">](#cdockingmanager__getdockingmode)</ept>","source":"[CDockingManager::GetDockingMode](#cdockingmanager__getdockingmode)"},{"content":"Returns the current docking mode.","pos":[4865,4898]},{"pos":[4903,4980],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::GetDockSiteFrameWnd<ept id=\"p1\">](#cdockingmanager__getdocksiteframewnd)</ept>","source":"[CDockingManager::GetDockSiteFrameWnd](#cdockingmanager__getdocksiteframewnd)"},{"content":"Gets a pointer to the parent window frame.","pos":[4981,5023]},{"pos":[5028,5121],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::GetEnabledAutoHideAlignment<ept id=\"p1\">](#cdockingmanager__getenabledautohidealignment)</ept>","source":"[CDockingManager::GetEnabledAutoHideAlignment](#cdockingmanager__getenabledautohidealignment)"},{"content":"Returns the enabled alignment of the panes.","pos":[5122,5165]},{"pos":[5170,5235],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::GetMiniFrames<ept id=\"p1\">](#cdockingmanager__getminiframes)</ept>","source":"[CDockingManager::GetMiniFrames](#cdockingmanager__getminiframes)"},{"content":"Gets a list of miniframes.","pos":[5236,5262]},{"pos":[5267,5342],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::GetOuterEdgeBounds<ept id=\"p1\">](#cdockingmanager__getouteredgebounds)</ept>","source":"[CDockingManager::GetOuterEdgeBounds](#cdockingmanager__getouteredgebounds)"},{"content":"Gets a rectangle that contains the outer edges of the frame.","pos":[5343,5403]},{"pos":[5408,5469],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::GetPaneList<ept id=\"p1\">](#cdockingmanager__getpanelist)</ept>","source":"[CDockingManager::GetPaneList](#cdockingmanager__getpanelist)"},{"content":"Returns a list of panes that belong to the docking manager.","pos":[5470,5529]},{"content":"This includes all floating panes.","pos":[5530,5563]},{"pos":[5568,5651],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::GetSmartDockingManager<ept id=\"p1\">](#cdockingmanager__getsmartdockingmanager)</ept>","source":"[CDockingManager::GetSmartDockingManager](#cdockingmanager__getsmartdockingmanager)"},{"content":"Retrieves a pointer to the smart docking manager.","pos":[5652,5701]},{"pos":[5706,5807],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::GetSmartDockingManagerPermanent<ept id=\"p1\">](#cdockingmanager__getsmartdockingmanagerpermanent)</ept>","source":"[CDockingManager::GetSmartDockingManagerPermanent](#cdockingmanager__getsmartdockingmanagerpermanent)"},{"content":"Retrieves a pointer to the smart docking manager.","pos":[5808,5857]},{"pos":[5862,5943],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::GetSmartDockingParams<ept id=\"p1\">](#cdockingmanager__getsmartdockingparams)</ept>","source":"[CDockingManager::GetSmartDockingParams](#cdockingmanager__getsmartdockingparams)"},{"content":"Returns the smart docking parameters for the docking manager.","pos":[5944,6005]},{"pos":[6010,6089],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::GetSmartDockingTheme<ept id=\"p1\">](#cdockingmanager__getsmartdockingtheme)</ept>","source":"[CDockingManager::GetSmartDockingTheme](#cdockingmanager__getsmartdockingtheme)"},{"content":"A static method that returns a theme used to display smart docking markers.","pos":[6090,6165]},{"pos":[6170,6243],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::HideAutoHidePanes<ept id=\"p1\">](#cdockingmanager__hideautohidepanes)</ept>","source":"[CDockingManager::HideAutoHidePanes](#cdockingmanager__hideautohidepanes)"},{"content":"Hides a pane that is in autohide mode.","pos":[6244,6282]},{"pos":[6287,6354],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::InsertDockSite<ept id=\"p1\">](#cdockingmanager__insertdocksite)</ept>","source":"[CDockingManager::InsertDockSite](#cdockingmanager__insertdocksite)"},{"content":"Creates a dock pane and inserts it into the list of control bars.","pos":[6355,6420]},{"pos":[6425,6484],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::InsertPane<ept id=\"p1\">](#cdockingmanager__insertpane)</ept>","source":"[CDockingManager::InsertPane](#cdockingmanager__insertpane)"},{"content":"Inserts a control pane into the list of control bars.","pos":[6485,6538]},{"pos":[6543,6610],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::IsDockSiteMenu<ept id=\"p1\">](#cdockingmanager__isdocksitemenu)</ept>","source":"[CDockingManager::IsDockSiteMenu](#cdockingmanager__isdocksitemenu)"},{"content":"Specifies whether a pop-up menu is displayed on the captions of all panes.","pos":[6611,6685]},{"pos":[6690,6761],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::IsInAdjustLayout<ept id=\"p1\">](#cdockingmanager__isinadjustlayout)</ept>","source":"[CDockingManager::IsInAdjustLayout](#cdockingmanager__isinadjustlayout)"},{"content":"Determines if the layouts of all panes are adjusted.","pos":[6762,6814]},{"pos":[6819,6894],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::IsOLEContainerMode<ept id=\"p1\">](#cdockingmanager__isolecontainermode)</ept>","source":"[CDockingManager::IsOLEContainerMode](#cdockingmanager__isolecontainermode)"},{"content":"Specifies whether the docking manager is in OLE container mode.","pos":[6895,6958]},{"pos":[6963,7040],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::IsPointNearDockSite<ept id=\"p1\">](#cdockingmanager__ispointneardocksite)</ept>","source":"[CDockingManager::IsPointNearDockSite](#cdockingmanager__ispointneardocksite)"},{"content":"Determines whether a specified point is near the dock site.","pos":[7041,7100]},{"pos":[7105,7182],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::IsPrintPreviewValid<ept id=\"p1\">](#cdockingmanager__isprintpreviewvalid)</ept>","source":"[CDockingManager::IsPrintPreviewValid](#cdockingmanager__isprintpreviewvalid)"},{"content":"Determines if the print preview mode is set.","pos":[7183,7227]},{"pos":[7232,7289],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::LoadState<ept id=\"p1\">](#cdockingmanager__loadstate)</ept>","source":"[CDockingManager::LoadState](#cdockingmanager__loadstate)"},{"content":"Loads the docking manager's state from the registry.","pos":[7290,7342]},{"pos":[7347,7406],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::LockUpdate<ept id=\"p1\">](#cdockingmanager__lockupdate)</ept>","source":"[CDockingManager::LockUpdate](#cdockingmanager__lockupdate)"},{"content":"Locks the given window.","pos":[7407,7430]},{"pos":[7435,7504],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::OnActivateFrame<ept id=\"p1\">](#cdockingmanager__onactivateframe)</ept>","source":"[CDockingManager::OnActivateFrame](#cdockingmanager__onactivateframe)"},{"content":"Called by the framework when the frame window is made active or is deactivated.","pos":[7505,7584]},{"pos":[7589,7660],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::OnClosePopupMenu<ept id=\"p1\">](#cdockingmanager__onclosepopupmenu)</ept>","source":"[CDockingManager::OnClosePopupMenu](#cdockingmanager__onclosepopupmenu)"},{"content":"Called by the framework when an active pop-up menu processes a WM_DESTROY message.","pos":[7661,7743]},{"pos":[7748,7817],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::OnMoveMiniFrame<ept id=\"p1\">](#cdockingmanager__onmoveminiframe)</ept>","source":"[CDockingManager::OnMoveMiniFrame](#cdockingmanager__onmoveminiframe)"},{"content":"Called by the framework to move a mini-frame window.","pos":[7818,7870]},{"pos":[7875,7948],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::OnPaneContextMenu<ept id=\"p1\">](#cdockingmanager__onpanecontextmenu)</ept>","source":"[CDockingManager::OnPaneContextMenu](#cdockingmanager__onpanecontextmenu)"},{"content":"Called by the framework when it builds a menu that has a list of panes.","pos":[7949,8020]},{"pos":[8025,8090],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::PaneFromPoint<ept id=\"p1\">](#cdockingmanager__panefrompoint)</ept>","source":"[CDockingManager::PaneFromPoint](#cdockingmanager__panefrompoint)"},{"content":"Returns the pane that contains the given point.","pos":[8091,8138]},{"pos":[8143,8240],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::ProcessPaneContextMenuCommand<ept id=\"p1\">](#cdockingmanager__processpanecontextmenucommand)</ept>","source":"[CDockingManager::ProcessPaneContextMenuCommand](#cdockingmanager__processpanecontextmenucommand)"},{"content":"Called by the framework to select or to clear a check box for the specified command and recalculate the layout of a shown pane.","pos":[8241,8368]},{"pos":[8373,8436],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::RecalcLayout<ept id=\"p1\">](#cdockingmanager__recalclayout)</ept>","source":"[CDockingManager::RecalcLayout](#cdockingmanager__recalclayout)"},{"content":"Recalculates the internal layout of the controls present in the list of controls.","pos":[8437,8518]},{"pos":[8523,8614],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::ReleaseEmptyPaneContainers<ept id=\"p1\">](#cdockingmanager__releaseemptypanecontainers)</ept>","source":"[CDockingManager::ReleaseEmptyPaneContainers](#cdockingmanager__releaseemptypanecontainers)"},{"content":"Releases the empty pane containers.","pos":[8615,8650]},{"pos":[8655,8742],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::RemoveHiddenMDITabbedBar<ept id=\"p1\">](#cdockingmanager__removehiddenmditabbedbar)</ept>","source":"[CDockingManager::RemoveHiddenMDITabbedBar](#cdockingmanager__removehiddenmditabbedbar)"},{"content":"Removes the specified hidden bar pane.","pos":[8743,8781]},{"pos":[8786,8855],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::RemoveMiniFrame<ept id=\"p1\">](#cdockingmanager__removeminiframe)</ept>","source":"[CDockingManager::RemoveMiniFrame](#cdockingmanager__removeminiframe)"},{"content":"Removes a specified frame from the list of mini frames.","pos":[8856,8911]},{"pos":[8916,9005],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::RemovePaneFromDockManager<ept id=\"p1\">](#cdockingmanager__removepanefromdockmanager)</ept>","source":"[CDockingManager::RemovePaneFromDockManager](#cdockingmanager__removepanefromdockmanager)"},{"content":"Unregisters a pane and removes it from the list in the docking manager.","pos":[9006,9077]},{"pos":[9082,9143],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::ReplacePane<ept id=\"p1\">](#cdockingmanager__replacepane)</ept>","source":"[CDockingManager::ReplacePane](#cdockingmanager__replacepane)"},{"content":"Replaces one pane with another.","pos":[9144,9175]},{"pos":[9180,9269],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::ResortMiniFramesForZOrder<ept id=\"p1\">](#cdockingmanager__resortminiframesforzorder)</ept>","source":"[CDockingManager::ResortMiniFramesForZOrder](#cdockingmanager__resortminiframesforzorder)"},{"content":"Resorts the frames in the list of mini frames.","pos":[9270,9316]},{"pos":[9321,9378],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::SaveState<ept id=\"p1\">](#cdockingmanager__savestate)</ept>","source":"[CDockingManager::SaveState](#cdockingmanager__savestate)"},{"content":"Saves the docking manager's state to the registry.","pos":[9379,9429]},{"pos":[9434,9519],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::SendMessageToMiniFrames<ept id=\"p1\">](#cdockingmanager__sendmessagetominiframes)</ept>","source":"[CDockingManager::SendMessageToMiniFrames](#cdockingmanager__sendmessagetominiframes)"},{"content":"Sends the specified message to all mini frames.","pos":[9520,9567]},{"pos":[9572,9629],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::Serialize<ept id=\"p1\">](#cdockingmanager__serialize)</ept>","source":"[CDockingManager::Serialize](#cdockingmanager__serialize)"},{"content":"Writes the docking manager to an archive.","pos":[9630,9671]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CObject::Serialize<ept id=\"p1\">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept>.)","pos":[9672,9762],"source":" (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)"},{"pos":[9767,9840],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::SetAutohideZOrder<ept id=\"p1\">](#cdockingmanager__setautohidezorder)</ept>","source":"[CDockingManager::SetAutohideZOrder](#cdockingmanager__setautohidezorder)"},{"content":"Sets the size, width, and height of the control bars and the specified pane.","pos":[9841,9917]},{"pos":[9922,9989],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::SetDockingMode<ept id=\"p1\">](#cdockingmanager__setdockingmode)</ept>","source":"[CDockingManager::SetDockingMode](#cdockingmanager__setdockingmode)"},{"content":"Sets the docking mode.","pos":[9990,10012]},{"pos":[10017,10080],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::SetDockState<ept id=\"p1\">](#cdockingmanager__setdockstate)</ept>","source":"[CDockingManager::SetDockState](#cdockingmanager__setdockstate)"},{"content":"Sets the docking state of the control bars, the mini frames, and the autohide bars.","pos":[10081,10164]},{"pos":[10169,10246],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::SetPrintPreviewMode<ept id=\"p1\">](#cdockingmanager__setprintpreviewmode)</ept>","source":"[CDockingManager::SetPrintPreviewMode](#cdockingmanager__setprintpreviewmode)"},{"content":"Sets the print preview mode of the bars that are displayed in the print preview.","pos":[10247,10327]},{"pos":[10332,10413],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::SetSmartDockingParams<ept id=\"p1\">](#cdockingmanager__setsmartdockingparams)</ept>","source":"[CDockingManager::SetSmartDockingParams](#cdockingmanager__setsmartdockingparams)"},{"content":"Sets the parameters that define the behavior of smart docking.","pos":[10414,10476]},{"pos":[10481,10566],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::ShowDelayShowMiniFrames<ept id=\"p1\">](#cdockingmanager__showdelayshowminiframes)</ept>","source":"[CDockingManager::ShowDelayShowMiniFrames](#cdockingmanager__showdelayshowminiframes)"},{"content":"Shows or hides the windows of the mini frames.","pos":[10567,10613]},{"pos":[10618,10675],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::ShowPanes<ept id=\"p1\">](#cdockingmanager__showpanes)</ept>","source":"[CDockingManager::ShowPanes](#cdockingmanager__showpanes)"},{"content":"Shows or hides the panes of the control and autohide bars.","pos":[10676,10734]},{"pos":[10739,10804],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::StartSDocking<ept id=\"p1\">](#cdockingmanager__startsdocking)</ept>","source":"[CDockingManager::StartSDocking](#cdockingmanager__startsdocking)"},{"content":"Starts the smart docking of the specified window according to the alignment of the smart docking manager.","pos":[10805,10910]},{"pos":[10915,10978],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::StopSDocking<ept id=\"p1\">](#cdockingmanager__stopsdocking)</ept>","source":"[CDockingManager::StopSDocking](#cdockingmanager__stopsdocking)"},{"content":"Stops smart docking.","pos":[10979,10999]},{"pos":[11010,11022],"content":"Data Members","linkify":"Data Members","nodes":[{"content":"Data Members","pos":[0,12]}]},{"content":"Name","pos":[11029,11033]},{"content":"Description","pos":[11034,11045]},{"pos":[11083,11188],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::m_bHideDockingBarsInContainerMode<ept id=\"p1\">](#cdockingmanager__m_bhidedockingbarsincontainermode)</ept>","source":"[CDockingManager::m_bHideDockingBarsInContainerMode](#cdockingmanager__m_bhidedockingbarsincontainermode)"},{"content":"Specifies whether the docking manager hides panes in OLE container mode.","pos":[11189,11261]},{"pos":[11266,11337],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::m_dockModeGlobal<ept id=\"p1\">](#cdockingmanager__m_dockmodeglobal)</ept>","source":"[CDockingManager::m_dockModeGlobal](#cdockingmanager__m_dockmodeglobal)"},{"content":"Specifies the global docking mode.","pos":[11338,11372]},{"pos":[11377,11452],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::m_nDockSensitivity<ept id=\"p1\">](#cdockingmanager__m_ndocksensitivity)</ept>","source":"[CDockingManager::m_nDockSensitivity](#cdockingmanager__m_ndocksensitivity)"},{"content":"Specifies the docking sensitivity.","pos":[11453,11487]},{"pos":[11492,11591],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::m_nTimeOutBeforeDockingBarDock<ept id=\"p1\">](#cdockingmanager__m_ntimeoutbeforedockingbardock)</ept>","source":"[CDockingManager::m_nTimeOutBeforeDockingBarDock](#cdockingmanager__m_ntimeoutbeforedockingbardock)"},{"content":"Specifies the time, in milliseconds, before a docking pane is docked in immediate docking mode.","pos":[11592,11687]},{"pos":[11692,11785],"content":"<bpt id=\"p1\">[</bpt>CDockingManager::m_nTimeOutBeforeToolBarDock<ept id=\"p1\">](#cdockingmanager__m_ntimeoutbeforetoolbardock)</ept>","source":"[CDockingManager::m_nTimeOutBeforeToolBarDock](#cdockingmanager__m_ntimeoutbeforetoolbardock)"},{"content":"Specifies the time, in milliseconds, before a toolbar is docked to the main frame window.","pos":[11786,11875]},{"pos":[11885,11892],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The main frame window creates and initializes this class automatically.","pos":[11896,11967]},{"pos":[11974,12187],"content":"The docking manager object holds a list of all panes that are in the docking layout, and also a list of all <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> windows that belong to the main frame window.","source":"The docking manager object holds a list of all panes that are in the docking layout, and also a list of all [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) windows that belong to the main frame window."},{"content":"The <ph id=\"ph1\">`CDockingManager`</ph> class implements some services that you can use to find a pane or a <ph id=\"ph2\">`CPaneFrameWnd`</ph> window.","pos":[12194,12307],"source":"The `CDockingManager` class implements some services that you can use to find a pane or a `CPaneFrameWnd` window."},{"content":"You usually do not call these services directly because they are wrapped in the main frame window object.","pos":[12308,12413]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CPaneFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept>.","pos":[12414,12506],"source":" For more information, see [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md)."},{"pos":[12515,12533],"content":"Customization Tips","linkify":"Customization Tips","nodes":[{"content":"Customization Tips","pos":[0,18]}]},{"pos":[12537,12591],"content":"The following tips apply to <ph id=\"ph1\">`CDockingManager`</ph> objects:","source":"The following tips apply to `CDockingManager` objects:"},{"pos":[12599,12698],"content":"<bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> supports these docking modes:","source":"[CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) supports these docking modes:"},{"pos":[12827,13025],"content":"These docking modes are defined by <bpt id=\"p1\">[</bpt>CDockingManager::m_dockModeGlobal<ept id=\"p1\">](#cdockingmanager__m_dockmodeglobal)</ept> and are set by calling <bpt id=\"p2\">[</bpt>CDockingManager::SetDockingMode<ept id=\"p2\">](#cdockingmanager__setdockingmode)</ept>.","source":"These docking modes are defined by [CDockingManager::m_dockModeGlobal](#cdockingmanager__m_dockmodeglobal) and are set by calling [CDockingManager::SetDockingMode](#cdockingmanager__setdockingmode)."},{"content":"If you want to create a non-floating, non-resizable pane, call the <bpt id=\"p1\">[</bpt>CDockingManager::AddPane<ept id=\"p1\">](#cdockingmanager__addpane)</ept> method.","pos":[13035,13163],"source":"If you want to create a non-floating, non-resizable pane, call the [CDockingManager::AddPane](#cdockingmanager__addpane) method."},{"content":"This method registers the pane with the docking manager, which is responsible for the layout of the pane.","pos":[13164,13269]},{"pos":[13278,13285],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to use various methods in the <ph id=\"ph1\">`CDockingManager`</ph> class to configure a <ph id=\"ph2\">`CDockingManager`</ph> object.","pos":[13289,13422],"source":"The following example demonstrates how to use various methods in the `CDockingManager` class to configure a `CDockingManager` object."},{"content":"The example shows how to display an additional button that opens a pop-up menu on the captions of all docking panes and how to set the docking mode of the object.","pos":[13423,13585]},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Visual Studio Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[13586,13676],"source":" This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md)."},{"pos":[13683,13778],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_VisualStudioDemo#24<ept id=\"p2\">](../../mfc/codesnippet/cpp/cdockingmanager-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_VisualStudioDemo#24](../../mfc/codesnippet/cpp/cdockingmanager-class_1.cpp)]"},{"pos":[13787,13808],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[13812,13859],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[13866,13929],"content":"<bpt id=\"p1\">[</bpt>CDockingManager<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept>","source":"[CDockingManager](../../mfc/reference/cdockingmanager-class.md)"},{"pos":[13938,13950],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[13954,13985],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxDockingManager.h","source":"**Header:** afxDockingManager.h"},{"pos":[13995,14068],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__adddocksite\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::AddDockSite","linkify":"<a name=\"cdockingmanager__adddocksite\"></a>  CDockingManager::AddDockSite","source":"<a name=\"cdockingmanager__adddocksite\"></a>  CDockingManager::AddDockSite"},{"content":"Creates a dock pane and adds it to the list of control bars.","pos":[14072,14132]},{"pos":[14247,14257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`info`</ph>","pos":[14261,14272],"source":"[in] `info`"},{"content":"A reference to an info structure that contains dock pane alignment.","pos":[14276,14343]},{"content":"[out] <ph id=\"ph1\">`ppDockBar`</ph>","pos":[14350,14367],"source":"[out] `ppDockBar`"},{"content":"A pointer to a pointer to the new dock pane.","pos":[14371,14415]},{"pos":[14425,14437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14441,14509],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dock pane was created successfully; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the dock pane was created successfully; `FALSE` otherwise."},{"pos":[14519,14612],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__addhiddenmditabbedbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::AddHiddenMDITabbedBar","linkify":"<a name=\"cdockingmanager__addhiddenmditabbedbar\"></a>  CDockingManager::AddHiddenMDITabbedBar","source":"<a name=\"cdockingmanager__addhiddenmditabbedbar\"></a>  CDockingManager::AddHiddenMDITabbedBar"},{"content":"Adds a handle to a bar pane to the list of hidden MDI tabbed bar panes.","pos":[14616,14687]},{"pos":[14761,14771],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[14775,14786],"source":"[in] `pBar`"},{"content":"A pointer to a bar pane","pos":[14790,14813]},{"pos":[14823,14888],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__addpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::AddPane","linkify":"<a name=\"cdockingmanager__addpane\"></a>  CDockingManager::AddPane","source":"<a name=\"cdockingmanager__addpane\"></a>  CDockingManager::AddPane"},{"content":"Registers a pane with the docking manager.","pos":[14892,14934]},{"pos":[15090,15100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in, out] <ph id=\"ph1\">`pWnd`</ph>","pos":[15104,15120],"source":"[in, out] `pWnd`"},{"content":"Specifies the pane to add to the docking manager.","pos":[15124,15173]},{"content":"[in] <ph id=\"ph1\">`bTail`</ph>","pos":[15180,15192],"source":"[in] `bTail`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to add the pane to the end of the list of panes for the docking manager; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[15195,15295],"source":" `TRUE` to add the pane to the end of the list of panes for the docking manager; otherwise, `FALSE`."},{"content":"[in] <ph id=\"ph1\">`bAutoHide`</ph>","pos":[15302,15318],"source":"[in] `bAutoHide`"},{"content":"For internal use only.","pos":[15322,15344]},{"content":"Always use the default value <ph id=\"ph1\">`FALSE`</ph>.","pos":[15345,15382],"source":" Always use the default value `FALSE`."},{"content":"[in] <ph id=\"ph1\">`bInsertForOuterEdge`</ph>","pos":[15389,15415],"source":"[in] `bInsertForOuterEdge`"},{"content":"For internal use only.","pos":[15419,15441]},{"content":"Always use the default value <ph id=\"ph1\">`FALSE`</ph>.","pos":[15442,15479],"source":" Always use the default value `FALSE`."},{"pos":[15489,15501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15505,15597],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane was successfully registered with the docking manager; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane was successfully registered with the docking manager; otherwise, `FALSE`."},{"pos":[15607,15614],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to register non-floating, non-resizable panes with the docking manager.","pos":[15618,15706]},{"content":"If you do not register the panes, they will not appear correctly when the docking manager is laid out.","pos":[15707,15809]},{"pos":[15819,15908],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__adjustdockinglayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::AdjustDockingLayout","linkify":"<a name=\"cdockingmanager__adjustdockinglayout\"></a>  CDockingManager::AdjustDockingLayout","source":"<a name=\"cdockingmanager__adjustdockinglayout\"></a>  CDockingManager::AdjustDockingLayout"},{"content":"Recalculates and adjusts the layout of all panes in a frame window.","pos":[15912,15979]},{"pos":[16056,16066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hdwp`</ph>","pos":[16070,16081],"source":"[in] `hdwp`"},{"content":"Specifies the deferred window position structure.","pos":[16085,16134]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Windows Data Types<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa383751)</ept>.","pos":[16135,16242],"source":" For more information, see [Windows Data Types](http://msdn.microsoft.com/library/windows/desktop/aa383751)."},{"pos":[16252,16259],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16269,16344],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__addminiframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::AddMiniFrame","linkify":"<a name=\"cdockingmanager__addminiframe\"></a>  CDockingManager::AddMiniFrame","source":"<a name=\"cdockingmanager__addminiframe\"></a>  CDockingManager::AddMiniFrame"},{"content":"Adds a frame to the list of mini frames.","pos":[16348,16388]},{"pos":[16461,16471],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[16475,16486],"source":"[in] `pWnd`"},{"content":"A pointer to a frame.","pos":[16490,16511]},{"pos":[16521,16533],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16537,16637],"content":"<ph id=\"ph1\">`TRUE`</ph> if the frame is not in the list of mini frames and was added successfully; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the frame is not in the list of mini frames and was added successfully; `FALSE` otherwise."},{"pos":[16647,16730],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__adjustpaneframes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::AdjustPaneFrames","linkify":"<a name=\"cdockingmanager__adjustpaneframes\"></a>  CDockingManager::AdjustPaneFrames","source":"<a name=\"cdockingmanager__adjustpaneframes\"></a>  CDockingManager::AdjustPaneFrames"},{"pos":[16734,16821],"content":"Causes the <ph id=\"ph1\">`WM_NCCALCSIZE`</ph> message to be sent to all panes and <ph id=\"ph2\">`CPaneFrameWnd`</ph> windows.","source":"Causes the `WM_NCCALCSIZE` message to be sent to all panes and `CPaneFrameWnd` windows."},{"pos":[16879,16886],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16896,16991],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__adjustrecttoclientarea\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::AdjustRectToClientArea","linkify":"<a name=\"cdockingmanager__adjustrecttoclientarea\"></a>  CDockingManager::AdjustRectToClientArea","source":"<a name=\"cdockingmanager__adjustrecttoclientarea\"></a>  CDockingManager::AdjustRectToClientArea"},{"content":"Adjusts the alignment of a rectangle.","pos":[16995,17032]},{"pos":[17143,17153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rectResult`</ph>","pos":[17157,17174],"source":"[in] `rectResult`"},{"content":"A reference to a <ph id=\"ph1\">`CRect`</ph> object","pos":[17178,17209],"source":" A reference to a `CRect` object"},{"content":"[in] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[17216,17234],"source":"[in] `dwAlignment`"},{"content":"The alignment of the <ph id=\"ph1\">`CRect`</ph> object","pos":[17238,17273],"source":" The alignment of the `CRect` object"},{"pos":[17283,17295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17299,17377],"content":"<ph id=\"ph1\">`TRUE`</ph> if the alignment of the <ph id=\"ph2\">`CRect`</ph> object was adjusted; <ph id=\"ph3\">`FALSE`</ph> otherwise.","source":"`TRUE` if the alignment of the `CRect` object was adjusted; `FALSE` otherwise."},{"pos":[17387,17394],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17398,17463],"content":"The <ph id=\"ph1\">`dwAlignment`</ph> parameter can have one of the following values:","source":"The `dwAlignment` parameter can have one of the following values:"},{"content":"CBRS_ALIGN_TOP","pos":[17473,17487]},{"content":"CBRS_ALIGN_BOTTOM","pos":[17497,17514]},{"content":"CBRS_ALIGN_LEFT","pos":[17524,17539]},{"content":"CBRS_ALIGN_RIGHT","pos":[17549,17565]},{"pos":[17575,17660],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__alignautohidepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::AlignAutoHidePane","linkify":"<a name=\"cdockingmanager__alignautohidepane\"></a>  CDockingManager::AlignAutoHidePane","source":"<a name=\"cdockingmanager__alignautohidepane\"></a>  CDockingManager::AlignAutoHidePane"},{"content":"Resizes a docking pane in autohide mode so that it takes the full width or height of the frameâ€™s client area surrounded by dock sites.","pos":[17664,17798]},{"pos":[17912,17922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDefaultSlider`</ph>","pos":[17926,17947],"source":"[in] `pDefaultSlider`"},{"content":"The docking slider pane.","pos":[17951,17975]},{"content":"[in] <ph id=\"ph1\">`bIsVisible`</ph>","pos":[17982,17999],"source":"[in] `bIsVisible`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the docking pane is visible; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[18002,18060],"source":" `TRUE` if the docking pane is visible; `FALSE` otherwise."},{"pos":[18070,18145],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__autohidepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::AutoHidePane","linkify":"<a name=\"cdockingmanager__autohidepane\"></a>  CDockingManager::AutoHidePane","source":"<a name=\"cdockingmanager__autohidepane\"></a>  CDockingManager::AutoHidePane"},{"content":"Creates an autohide toolbar.","pos":[18149,18177]},{"pos":[18319,18329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[18333,18344],"source":"[in] `pBar`"},{"content":"A pointer to the bar pane.","pos":[18348,18374]},{"content":"[in] <ph id=\"ph1\">`pCurrAutoHideToolBar`</ph>","pos":[18381,18408],"source":"[in] `pCurrAutoHideToolBar`"},{"content":"A pointer to an auto hide toolbar.","pos":[18412,18446]},{"pos":[18456,18468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18472,18560],"content":"<ph id=\"ph1\">`NULL`</ph> if the auto hide toolbar was not created; otherwise a pointer to the new toolbar.","source":"`NULL` if the auto hide toolbar was not created; otherwise a pointer to the new toolbar."},{"pos":[18570,18649],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__bringbarstotop\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::BringBarsToTop","linkify":"<a name=\"cdockingmanager__bringbarstotop\"></a>  CDockingManager::BringBarsToTop","source":"<a name=\"cdockingmanager__bringbarstotop\"></a>  CDockingManager::BringBarsToTop"},{"content":"Brings the docked bars that have the specified alignment to the top.","pos":[18653,18721]},{"pos":[18833,18843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[18847,18865],"source":"[in] `dwAlignment`"},{"content":"The alignment of the dock bars that are brought to the top of other windows.","pos":[18869,18945]},{"content":"[in] <ph id=\"ph1\">`bExcludeDockedBars`</ph>","pos":[18952,18977],"source":"[in] `bExcludeDockedBars`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to exclude the docked bars from being on top; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[18980,19052],"source":" `TRUE` to exclude the docked bars from being on top; otherwise `FALSE`."},{"pos":[19062,19141],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__buildpanesmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::BuildPanesMenu","linkify":"<a name=\"cdockingmanager__buildpanesmenu\"></a>  CDockingManager::BuildPanesMenu","source":"<a name=\"cdockingmanager__buildpanesmenu\"></a>  CDockingManager::BuildPanesMenu"},{"content":"Adds names of docking panes and toolbars to a menu.","pos":[19145,19196]},{"pos":[19286,19296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`menu`</ph>","pos":[19300,19311],"source":"[in] `menu`"},{"content":"A menu to add the names of docking panes and toolbars to.","pos":[19315,19372]},{"content":"[in] <ph id=\"ph1\">`bToolbarsOnly`</ph>","pos":[19379,19399],"source":"[in] `bToolbarsOnly`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to add only toolbar names to the menu; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[19402,19467],"source":" `TRUE` to add only toolbar names to the menu; `FALSE` otherwise."},{"pos":[19477,19572],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__calcexpecteddockedrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::CalcExpectedDockedRect","linkify":"<a name=\"cdockingmanager__calcexpecteddockedrect\"></a>  CDockingManager::CalcExpectedDockedRect","source":"<a name=\"cdockingmanager__calcexpecteddockedrect\"></a>  CDockingManager::CalcExpectedDockedRect"},{"content":"Calculates the expected rectangle of a docked window.","pos":[19576,19629]},{"pos":[19804,19814],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[19818,19829],"source":"[in] `pWnd`"},{"content":"A pointer to the window to dock.","pos":[19833,19865]},{"content":"[in] <ph id=\"ph1\">`ptMouse`</ph>","pos":[19872,19886],"source":"[in] `ptMouse`"},{"content":"The mouse location.","pos":[19890,19909]},{"content":"[out] <ph id=\"ph1\">`rectResult`</ph>","pos":[19916,19934],"source":"[out] `rectResult`"},{"content":"The calculated rectangle.","pos":[19938,19963]},{"content":"[in] <ph id=\"ph1\">`bDrawTab`</ph>","pos":[19970,19985],"source":"[in] `bDrawTab`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to draw a tab; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[19988,20029],"source":" `TRUE` to draw a tab; otherwise `FALSE`."},{"content":"[out] <ph id=\"ph1\">`ppTargetBar`</ph>","pos":[20036,20055],"source":"[out] `ppTargetBar`"},{"content":"A pointer to a pointer to the target pane.","pos":[20059,20101]},{"pos":[20111,20118],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20122,20271],"content":"This method calculates the rectangle that a window would occupy if a user dragged the window to the point specified by <ph id=\"ph1\">`ptMouse`</ph> and docked it there.","source":"This method calculates the rectangle that a window would occupy if a user dragged the window to the point specified by `ptMouse` and docked it there."},{"pos":[20281,20344],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::Create","linkify":"<a name=\"cdockingmanager__create\"></a>  CDockingManager::Create","source":"<a name=\"cdockingmanager__create\"></a>  CDockingManager::Create"},{"content":"Creates a docking manager.","pos":[20348,20374]},{"pos":[20435,20445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pParentWnd`</ph>","pos":[20449,20466],"source":"[in] `pParentWnd`"},{"content":"A pointer to the parent frame of the docking manager.","pos":[20470,20523]},{"content":"This value must not be <ph id=\"ph1\">`NULL`</ph>.","pos":[20524,20554],"source":" This value must not be `NULL`."},{"pos":[20564,20576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20580,20594],"content":"<ph id=\"ph1\">`TRUE`</ph> always.","source":"`TRUE` always."},{"pos":[20604,20699],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__determinepaneandstatus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::DeterminePaneAndStatus","linkify":"<a name=\"cdockingmanager__determinepaneandstatus\"></a>  CDockingManager::DeterminePaneAndStatus","source":"<a name=\"cdockingmanager__determinepaneandstatus\"></a>  CDockingManager::DeterminePaneAndStatus"},{"content":"Determines the pane that contains a given point and its docking status.","pos":[20703,20774]},{"pos":[21020,21030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pt`</ph>","pos":[21034,21043],"source":"[in] `pt`"},{"content":"The location of the pane to check.","pos":[21047,21081]},{"content":"[in] <ph id=\"ph1\">`nSensitivity`</ph>","pos":[21088,21107],"source":"[in] `nSensitivity`"},{"content":"The value to increase the window rectangle of each checked pane.","pos":[21111,21175]},{"content":"A pane satisfies the search criteria if the given point is in this increased region.","pos":[21176,21260]},{"content":"[in] <ph id=\"ph1\">`dwEnabledAlignment`</ph>","pos":[21267,21292],"source":"[in] `dwEnabledAlignment`"},{"content":"The alignment of the docking pane.","pos":[21296,21330]},{"content":"[out] <ph id=\"ph1\">`ppTargetBar`</ph>","pos":[21337,21356],"source":"[out] `ppTargetBar`"},{"content":"A pointer to a pointer to the target pane.","pos":[21360,21402]},{"content":"[in] <ph id=\"ph1\">`pBarToIgnore`</ph>","pos":[21409,21428],"source":"[in] `pBarToIgnore`"},{"content":"The pane that the method ignores.","pos":[21432,21465]},{"content":"[in] <ph id=\"ph1\">`pBarToDock`</ph>","pos":[21472,21489],"source":"[in] `pBarToDock`"},{"content":"The pane that is docked.","pos":[21493,21517]},{"pos":[21527,21539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The docking status.","pos":[21543,21562]},{"pos":[21572,21579],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The docking status can be one of the following values:","pos":[21583,21637]},{"content":"AFX_CS_STATUS value","pos":[21644,21663]},{"content":"Meaning","pos":[21664,21671]},{"content":"CS_NOTHING","pos":[21722,21732]},{"content":"The pointer is not over a dock site.","pos":[21733,21769]},{"content":"Therefore, keep the pane floating.","pos":[21770,21804]},{"content":"CS_DOCK_IMMEDIATELY","pos":[21809,21828]},{"content":"The pointer is over the dock site in the immediate mode (DT_IMMEDIATE style is enabled), so the pane must be docked immediately.","pos":[21829,21957]},{"content":"CS_DELAY_DOCK","pos":[21962,21975]},{"content":"The pointer is over a dock site that is another docking pane or is an edge of the main frame.","pos":[21976,22069]},{"content":"CS_DELAY_DOCK_TO_TAB","pos":[22074,22094]},{"content":"The pointer is over a dock site that causes the pane to be docked in a tabbed window.","pos":[22095,22180]},{"content":"This occurs when the mouse is over a caption of another docking pane or over a tab area of a tabbed pane.","pos":[22181,22286]},{"pos":[22297,22394],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__disablerestoredockstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::DisableRestoreDockState","linkify":"<a name=\"cdockingmanager__disablerestoredockstate\"></a>  CDockingManager::DisableRestoreDockState","source":"<a name=\"cdockingmanager__disablerestoredockstate\"></a>  CDockingManager::DisableRestoreDockState"},{"content":"Enables or disables loading of docking layout from the registry.","pos":[22398,22462]},{"pos":[22539,22549],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bDisable`</ph>","pos":[22553,22568],"source":"[in] `bDisable`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to disable loading of docking layout from the registry; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[22571,22654],"source":" `TRUE` to disable loading of docking layout from the registry; otherwise, `FALSE`."},{"pos":[22664,22671],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method when you must preserve the current layout of docking panes and toolbars when the application state is loading.","pos":[22675,22802]},{"pos":[22812,22879],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__dockpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::DockPane","linkify":"<a name=\"cdockingmanager__dockpane\"></a>  CDockingManager::DockPane","source":"<a name=\"cdockingmanager__dockpane\"></a>  CDockingManager::DockPane"},{"content":"Docks a pane to another pane or to a frame window.","pos":[22883,22933]},{"pos":[23051,23061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[23065,23076],"source":"[in] `pBar`"},{"content":"A pointer to a bar pane to dock to.","pos":[23080,23115]},{"content":"[in] <ph id=\"ph1\">`nDockBarID`</ph>","pos":[23122,23139],"source":"[in] `nDockBarID`"},{"content":"The id of the bar to dock.","pos":[23143,23169]},{"content":"[in] <ph id=\"ph1\">`lpRect`</ph>","pos":[23176,23189],"source":"[in] `lpRect`"},{"content":"The destination rectangle.","pos":[23193,23219]},{"pos":[23229,23308],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__dockpaneleftof\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::DockPaneLeftOf","linkify":"<a name=\"cdockingmanager__dockpaneleftof\"></a>  CDockingManager::DockPaneLeftOf","source":"<a name=\"cdockingmanager__dockpaneleftof\"></a>  CDockingManager::DockPaneLeftOf"},{"content":"Docks a pane to the left of another pane.","pos":[23312,23353]},{"pos":[23448,23458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBarToDock`</ph>","pos":[23462,23479],"source":"[in] `pBarToDock`"},{"content":"A pointer to the pane to be docked to the left of <ph id=\"ph1\">`pTargetBar`</ph>.","pos":[23483,23546],"source":" A pointer to the pane to be docked to the left of `pTargetBar`."},{"content":"[in] <ph id=\"ph1\">`pTargetBar`</ph>","pos":[23553,23570],"source":"[in] `pTargetBar`"},{"content":"A pointer to the target pane.","pos":[23574,23603]},{"pos":[23613,23625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23629,23692],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane was docked successfully; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane was docked successfully; otherwise, `FALSE`."},{"pos":[23702,23791],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__enableautohidepanes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::EnableAutoHidePanes","linkify":"<a name=\"cdockingmanager__enableautohidepanes\"></a>  CDockingManager::EnableAutoHidePanes","source":"<a name=\"cdockingmanager__enableautohidepanes\"></a>  CDockingManager::EnableAutoHidePanes"},{"content":"Enables docking of the pane to the main frame, creates a dock pane, and adds it to the list of control bars.","pos":[23795,23903]},{"pos":[23969,23979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwStyle`</ph>","pos":[23983,23997],"source":"[in] `dwStyle`"},{"content":"The docking alignment.","pos":[24001,24023]},{"pos":[24033,24045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24049,24117],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dock pane was created successfully; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the dock pane was created successfully; `FALSE` otherwise."},{"pos":[24127,24204],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__enabledocking\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::EnableDocking","linkify":"<a name=\"cdockingmanager__enabledocking\"></a>  CDockingManager::EnableDocking","source":"<a name=\"cdockingmanager__enabledocking\"></a>  CDockingManager::EnableDocking"},{"content":"Creates a dock pane and enables docking of the pane to the main frame.","pos":[24208,24278]},{"pos":[24338,24348],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwStyle`</ph>","pos":[24352,24366],"source":"[in] `dwStyle`"},{"content":"The docking alignment.","pos":[24370,24392]},{"pos":[24402,24414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24418,24486],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dock pane was created successfully; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the dock pane was created successfully; `FALSE` otherwise."},{"pos":[24496,24583],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__enabledocksitemenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::EnableDockSiteMenu","linkify":"<a name=\"cdockingmanager__enabledocksitemenu\"></a>  CDockingManager::EnableDockSiteMenu","source":"<a name=\"cdockingmanager__enabledocksitemenu\"></a>  CDockingManager::EnableDockSiteMenu"},{"content":"Displays an additional button that opens a pop-up menu on the captions of all docking panes.","pos":[24587,24679]},{"pos":[24757,24767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[24771,24785],"source":"[in] `bEnable`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to enable the dock site menu; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[24788,24845],"source":" `TRUE` to enable the dock site menu; otherwise, `FALSE`."},{"pos":[24855,24862],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The dock site menu displays the following options for changing the docking state of the pane:","pos":[24866,24959]},{"pos":[24967,24993],"content":"<ph id=\"ph1\">`Floating`</ph> - Floats a pane","source":"`Floating` - Floats a pane"},{"pos":[25001,25090],"content":"<ph id=\"ph1\">`Docking`</ph> - Docks a pane at the main frame at the location where the pane was last docked","source":"`Docking` - Docks a pane at the main frame at the location where the pane was last docked"},{"pos":[25098,25145],"content":"<ph id=\"ph1\">`AutoHide`</ph> - Switches the pane to autohide mode","source":"`AutoHide` - Switches the pane to autohide mode"},{"pos":[25153,25174],"content":"<ph id=\"ph1\">`Hide`</ph> - Hides a pane","source":"`Hide` - Hides a pane"},{"content":"By default, this menu is not displayed.","pos":[25181,25220]},{"pos":[25230,25323],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__enablepanecontextmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::EnablePaneContextMenu","linkify":"<a name=\"cdockingmanager__enablepanecontextmenu\"></a>  CDockingManager::EnablePaneContextMenu","source":"<a name=\"cdockingmanager__enablepanecontextmenu\"></a>  CDockingManager::EnablePaneContextMenu"},{"content":"Tells the library to display a special context menu that has a list of application toolbars and docking panes when the user clicks the right mouse button and the library is processing the WM_CONTEXTMENU message.","pos":[25327,25538]},{"pos":[25710,25720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[25724,25738],"source":"[in] `bEnable`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the library turns on the support for automatic context menu; if <ph id=\"ph2\">`FALSE`</ph> the library turns off the support for automatic context menu.","pos":[25742,25886],"source":" If `TRUE`, the library turns on the support for automatic context menu; if `FALSE` the library turns off the support for automatic context menu."},{"content":"[in] <ph id=\"ph1\">`uiCustomizeCmd`</ph>","pos":[25893,25914],"source":"[in] `uiCustomizeCmd`"},{"content":"A command id for the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> item in the menu.","pos":[25918,25970],"source":" A command id for the **Customize** item in the menu."},{"content":"[in] <ph id=\"ph1\">`strCustomizeText`</ph>","pos":[25977,26000],"source":"[in] `strCustomizeText`"},{"content":"The text of the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> item.","pos":[26004,26039],"source":" The text of the **Customize** item."},{"content":"[in] <ph id=\"ph1\">`bToolbarsOnly`</ph>","pos":[26046,26066],"source":"[in] `bToolbarsOnly`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the menu displays only a list of application toolbars; if <ph id=\"ph2\">`FALSE`</ph>, the library adds application docking panes to this list.","pos":[26070,26204],"source":" If `TRUE`, the menu displays only a list of application toolbars; if `FALSE`, the library adds application docking panes to this list."},{"pos":[26214,26289],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__finddocksite\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::FindDockSite","linkify":"<a name=\"cdockingmanager__finddocksite\"></a>  CDockingManager::FindDockSite","source":"<a name=\"cdockingmanager__finddocksite\"></a>  CDockingManager::FindDockSite"},{"content":"Retrieves the bar pane that is at the specified position and that has the specified alignment.","pos":[26293,26387]},{"pos":[26488,26498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[26502,26520],"source":"[in] `dwAlignment`"},{"content":"The alignment of the bar pane.","pos":[26524,26554]},{"content":"[in] <ph id=\"ph1\">`bOuter`</ph>","pos":[26561,26574],"source":"[in] `bOuter`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, retrieve the bar in the head position in the list of control bars.","pos":[26578,26655],"source":" If `TRUE`, retrieve the bar in the head position in the list of control bars."},{"content":"Otherwise, retrieve the bar in the tail position in the list of control bars.","pos":[26656,26733]},{"pos":[26743,26755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26759,26827],"content":"The docking pane that has the specified alignment; <ph id=\"ph1\">`NULL`</ph> otherwise.","source":"The docking pane that has the specified alignment; `NULL` otherwise."},{"pos":[26837,26912],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__findpanebyid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::FindPaneByID","linkify":"<a name=\"cdockingmanager__findpanebyid\"></a>  CDockingManager::FindPaneByID","source":"<a name=\"cdockingmanager__findpanebyid\"></a>  CDockingManager::FindPaneByID"},{"content":"Finds a pane by the specified control ID.","pos":[26916,26957]},{"pos":[27071,27081],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uBarID`</ph>","pos":[27085,27098],"source":"[in] `uBarID`"},{"content":"Specifies the control ID of the pane to find.","pos":[27102,27147]},{"content":"[in] <ph id=\"ph1\">`bSearchMiniFrames`</ph>","pos":[27154,27178],"source":"[in] `bSearchMiniFrames`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to include all floating panes in the search.","pos":[27181,27233],"source":" `TRUE` to include all floating panes in the search."},{"content":"<ph id=\"ph1\">`FALSE`</ph> to include only the docked panes.","pos":[27234,27275],"source":"`FALSE` to include only the docked panes."},{"pos":[27285,27297],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27301,27447],"content":"The <bpt id=\"p1\">[</bpt>CBasePane<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept> object that has the specified control ID, or <ph id=\"ph1\">`NULL`</ph> if the specified pane cannot be found.","source":"The [CBasePane](../../mfc/reference/cbasepane-class.md) object that has the specified control ID, or `NULL` if the specified pane cannot be found."},{"pos":[27457,27464],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27474,27561],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__finddocksitebypane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::FindDockSiteByPane","linkify":"<a name=\"cdockingmanager__finddocksitebypane\"></a>  CDockingManager::FindDockSiteByPane","source":"<a name=\"cdockingmanager__finddocksitebypane\"></a>  CDockingManager::FindDockSiteByPane"},{"content":"Returns the bar pane that has the id of the target bar pane.","pos":[27565,27625]},{"pos":[27708,27718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pTargetBar`</ph>","pos":[27722,27739],"source":"[in] `pTargetBar`"},{"content":"A pointer to the target bar pane.","pos":[27743,27776]},{"pos":[27786,27798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27802,27889],"content":"The bar pane that has the id of the target bar pane; <ph id=\"ph1\">`NULL`</ph> if no such bar pane exists.","source":"The bar pane that has the id of the target bar pane; `NULL` if no such bar pane exists."},{"pos":[27899,27984],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__fixupvirtualrects\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::FixupVirtualRects","linkify":"<a name=\"cdockingmanager__fixupvirtualrects\"></a>  CDockingManager::FixupVirtualRects","source":"<a name=\"cdockingmanager__fixupvirtualrects\"></a>  CDockingManager::FixupVirtualRects"},{"content":"Commits all current toolbar positions to virtual rectangles.","pos":[27988,28048]},{"pos":[28107,28114],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When the user starts to drag a toolbar, the application remembers its original position in the <bpt id=\"p1\">*</bpt>virtual rectangle<ept id=\"p1\">*</ept>.","pos":[28118,28233],"source":"When the user starts to drag a toolbar, the application remembers its original position in the *virtual rectangle*."},{"content":"When the user moves a toolbar across its dock site, the toolbar may shift other toolbars.","pos":[28234,28323]},{"content":"The original positions of the other toolbars are stored in the corresponding virtual rectangles.","pos":[28324,28420]},{"pos":[28430,28509],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__framefrompoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::FrameFromPoint","linkify":"<a name=\"cdockingmanager__framefrompoint\"></a>  CDockingManager::FrameFromPoint","source":"<a name=\"cdockingmanager__framefrompoint\"></a>  CDockingManager::FrameFromPoint"},{"content":"Returns the frame that contains the given point.","pos":[28513,28561]},{"pos":[28716,28726],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pt`</ph>","pos":[28730,28739],"source":"[in] `pt`"},{"content":"Specifies the point, in screen coordinates, to check.","pos":[28743,28796]},{"content":"[in] <ph id=\"ph1\">`pFrameToExclude`</ph>","pos":[28803,28825],"source":"[in] `pFrameToExclude`"},{"content":"A pointer to a frame to exclude.","pos":[28829,28861]},{"content":"[in] <ph id=\"ph1\">`bFloatMultiOnly`</ph>","pos":[28868,28890],"source":"[in] `bFloatMultiOnly`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to exclude frames that are not instances of <ph id=\"ph2\">`CMultiPaneFrameWnd`</ph>; <ph id=\"ph3\">`FALSE`</ph> otherwise.","pos":[28893,28985],"source":" `TRUE` to exclude frames that are not instances of `CMultiPaneFrameWnd`; `FALSE` otherwise."},{"pos":[28995,29007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29011,29069],"content":"The frame that contains the given point; <ph id=\"ph1\">`NULL`</ph> otherwise.","source":"The frame that contains the given point; `NULL` otherwise."},{"pos":[29079,29168],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__getclientareabounds\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::GetClientAreaBounds","linkify":"<a name=\"cdockingmanager__getclientareabounds\"></a>  CDockingManager::GetClientAreaBounds","source":"<a name=\"cdockingmanager__getclientareabounds\"></a>  CDockingManager::GetClientAreaBounds"},{"content":"Gets the rectangle that contains the bounds of the client area.","pos":[29172,29235]},{"pos":[29341,29351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`rcClient`</ph>","pos":[29355,29371],"source":"[out] `rcClient`"},{"content":"A reference to the rectangle that contains the bounds of the client area.","pos":[29375,29448]},{"pos":[29458,29470],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The rectangle that contains the bounds of the client area.","pos":[29474,29532]},{"pos":[29542,29621],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__getdockingmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::GetDockingMode","linkify":"<a name=\"cdockingmanager__getdockingmode\"></a>  CDockingManager::GetDockingMode","source":"<a name=\"cdockingmanager__getdockingmode\"></a>  CDockingManager::GetDockingMode"},{"content":"Returns the current docking mode.","pos":[29625,29658]},{"pos":[29722,29734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An enumerator value that represents the current docking mode.","pos":[29738,29799]},{"content":"It can be one of the following values:","pos":[29800,29838]},{"pos":[29909,29916],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29920,30018],"content":"To set the docking mode, call <bpt id=\"p1\">[</bpt>CDockingManager::SetDockingMode<ept id=\"p1\">](#cdockingmanager__setdockingmode)</ept>.","source":"To set the docking mode, call [CDockingManager::SetDockingMode](#cdockingmanager__setdockingmode)."},{"pos":[30028,30117],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__getdocksiteframewnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::GetDockSiteFrameWnd","linkify":"<a name=\"cdockingmanager__getdocksiteframewnd\"></a>  CDockingManager::GetDockSiteFrameWnd","source":"<a name=\"cdockingmanager__getdocksiteframewnd\"></a>  CDockingManager::GetDockSiteFrameWnd"},{"content":"Gets a pointer to the parent window frame.","pos":[30121,30163]},{"pos":[30231,30243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the parent window frame.","pos":[30247,30284]},{"pos":[30294,30399],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__getenabledautohidealignment\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::GetEnabledAutoHideAlignment","linkify":"<a name=\"cdockingmanager__getenabledautohidealignment\"></a>  CDockingManager::GetEnabledAutoHideAlignment","source":"<a name=\"cdockingmanager__getenabledautohidealignment\"></a>  CDockingManager::GetEnabledAutoHideAlignment"},{"content":"Returns the enabled alignment of the panes.","pos":[30403,30446]},{"pos":[30517,30529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A bitwise combination of <ph id=\"ph1\">`CBRS_ALIGN_`</ph> flags, or 0 if autohide panes are not enabled.","pos":[30533,30618],"source":"A bitwise combination of `CBRS_ALIGN_` flags, or 0 if autohide panes are not enabled."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CFrameWnd::EnableDocking<ept id=\"p1\">](../../mfc/reference/cframewnd-class.md#cframewnd__enabledocking)</ept>.","pos":[30619,30737],"source":" For more information, see [CFrameWnd::EnableDocking](../../mfc/reference/cframewnd-class.md#cframewnd__enabledocking)."},{"pos":[30747,30754],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method returns the enabled alignment for autohide control bars.","pos":[30758,30825]},{"content":"To enable autohide bars, call <bpt id=\"p1\">[</bpt>CFrameWndEx::EnableAutoHidePanes<ept id=\"p1\">](../../mfc/reference/cframewndex-class.md#cframewndex__enableautohidepanes)</ept>.","pos":[30826,30966],"source":" To enable autohide bars, call [CFrameWndEx::EnableAutoHidePanes](../../mfc/reference/cframewndex-class.md#cframewndex__enableautohidepanes)."},{"pos":[30976,31053],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__getminiframes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::GetMiniFrames","linkify":"<a name=\"cdockingmanager__getminiframes\"></a>  CDockingManager::GetMiniFrames","source":"<a name=\"cdockingmanager__getminiframes\"></a>  CDockingManager::GetMiniFrames"},{"content":"Gets a list of miniframes.","pos":[31057,31083]},{"pos":[31149,31161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list of miniframes that contain the control bars that belong to the docking manager.","pos":[31165,31251]},{"pos":[31261,31348],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__getouteredgebounds\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::GetOuterEdgeBounds","linkify":"<a name=\"cdockingmanager__getouteredgebounds\"></a>  CDockingManager::GetOuterEdgeBounds","source":"<a name=\"cdockingmanager__getouteredgebounds\"></a>  CDockingManager::GetOuterEdgeBounds"},{"content":"Gets a rectangle that contains the outer edges of the frame.","pos":[31352,31412]},{"pos":[31474,31486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A rectangle that contains the outer edges of the frame.","pos":[31490,31545]},{"pos":[31555,31628],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__getpanelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::GetPaneList","linkify":"<a name=\"cdockingmanager__getpanelist\"></a>  CDockingManager::GetPaneList","source":"<a name=\"cdockingmanager__getpanelist\"></a>  CDockingManager::GetPaneList"},{"content":"Returns a list of panes that belong to the docking manager.","pos":[31632,31691]},{"content":"This includes all floating panes.","pos":[31692,31725]},{"pos":[31901,31911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in, out] <ph id=\"ph1\">`lstBars`</ph>","pos":[31915,31934],"source":"[in, out] `lstBars`"},{"content":"Contains all the panes of the current docking manager.","pos":[31938,31992]},{"content":"[in] <ph id=\"ph1\">`bIncludeAutohide`</ph>","pos":[31999,32022],"source":"[in] `bIncludeAutohide`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to include the panes that are in autohide mode; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[32025,32100],"source":" `TRUE` to include the panes that are in autohide mode; otherwise, `FALSE`."},{"content":"[in] <ph id=\"ph1\">`pRTCFilter`</ph>","pos":[32107,32124],"source":"[in] `pRTCFilter`"},{"content":"If not <ph id=\"ph1\">`NULL`</ph>, the returned list contains panes only of the specified runtime class.","pos":[32128,32212],"source":" If not `NULL`, the returned list contains panes only of the specified runtime class."},{"content":"[in] <ph id=\"ph1\">`bIncludeTabs`</ph>","pos":[32219,32238],"source":"[in] `bIncludeTabs`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to include tabs; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[32241,32285],"source":" `TRUE` to include tabs; otherwise, `FALSE`."},{"pos":[32295,32302],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32306,32512],"content":"If there are any tabbed panes in the docking manager, the method returns pointers to <bpt id=\"p1\">[</bpt>CBaseTabbedPane Class<ept id=\"p1\">](../../mfc/reference/cbasetabbedpane-class.md)</ept> objects and you must enumerate the tabs explicitly.","source":"If there are any tabbed panes in the docking manager, the method returns pointers to [CBaseTabbedPane Class](../../mfc/reference/cbasetabbedpane-class.md) objects and you must enumerate the tabs explicitly."},{"content":"Use <ph id=\"ph1\">`pRTCFilter`</ph> to obtain a particular class of panes.","pos":[32519,32574],"source":"Use `pRTCFilter` to obtain a particular class of panes."},{"content":"For example, you can obtain only toolbars by setting this value appropriately.","pos":[32575,32653]},{"pos":[32663,32758],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__getsmartdockingmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::GetSmartDockingManager","linkify":"<a name=\"cdockingmanager__getsmartdockingmanager\"></a>  CDockingManager::GetSmartDockingManager","source":"<a name=\"cdockingmanager__getsmartdockingmanager\"></a>  CDockingManager::GetSmartDockingManager"},{"content":"Retrieves a pointer to the smart docking manager.","pos":[32762,32811]},{"pos":[32884,32896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32900,33011],"content":"A pointer to the <bpt id=\"p1\">[</bpt>smart docking manager<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f537a1a6-fb9e-41d7-952f-0f25d5ee7534)</ept>.","source":"A pointer to the [smart docking manager](http://msdn.microsoft.com/en-us/f537a1a6-fb9e-41d7-952f-0f25d5ee7534)."},{"pos":[33021,33134],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__getsmartdockingmanagerpermanent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::GetSmartDockingManagerPermanent","linkify":"<a name=\"cdockingmanager__getsmartdockingmanagerpermanent\"></a>  CDockingManager::GetSmartDockingManagerPermanent","source":"<a name=\"cdockingmanager__getsmartdockingmanagerpermanent\"></a>  CDockingManager::GetSmartDockingManagerPermanent"},{"content":"Retrieves a pointer to the smart docking manager.","pos":[33138,33187]},{"pos":[33278,33290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the smart docking manager.","pos":[33294,33333]},{"pos":[33343,33436],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__getsmartdockingparams\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::GetSmartDockingParams","linkify":"<a name=\"cdockingmanager__getsmartdockingparams\"></a>  CDockingManager::GetSmartDockingParams","source":"<a name=\"cdockingmanager__getsmartdockingparams\"></a>  CDockingManager::GetSmartDockingParams"},{"content":"Returns the smart docking parameters for the docking manager.","pos":[33440,33501]},{"pos":[33577,33589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The class that contains the smart docking parameters for the current docking manager.","pos":[33593,33678]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CSmartDockingInfo Class<ept id=\"p1\">](../../mfc/reference/csmartdockinginfo-class.md)</ept>.","pos":[33679,33779],"source":" For more information, see [CSmartDockingInfo Class](../../mfc/reference/csmartdockinginfo-class.md)."},{"pos":[33789,33796],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33806,33891],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__hideautohidepanes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::HideAutoHidePanes","linkify":"<a name=\"cdockingmanager__hideautohidepanes\"></a>  CDockingManager::HideAutoHidePanes","source":"<a name=\"cdockingmanager__hideautohidepanes\"></a>  CDockingManager::HideAutoHidePanes"},{"content":"Hides a pane that is in autohide mode.","pos":[33895,33933]},{"pos":[34057,34067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBarToExclude`</ph>","pos":[34071,34091],"source":"[in] `pBarToExclude`"},{"content":"A pointer to a bar to exclude from hiding.","pos":[34095,34137]},{"content":"[in] <ph id=\"ph1\">`bImmediately`</ph>","pos":[34144,34163],"source":"[in] `bImmediately`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to hide the pane immediately; <ph id=\"ph2\">`FALSE`</ph> to hide the pane with the autohide effect.","pos":[34166,34254],"source":" `TRUE` to hide the pane immediately; `FALSE` to hide the pane with the autohide effect."},{"pos":[34264,34343],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__insertdocksite\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::InsertDockSite","linkify":"<a name=\"cdockingmanager__insertdocksite\"></a>  CDockingManager::InsertDockSite","source":"<a name=\"cdockingmanager__insertdocksite\"></a>  CDockingManager::InsertDockSite"},{"content":"Creates a dock pane and inserts it into the list of control bars.","pos":[34347,34412]},{"pos":[34564,34574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`info`</ph>","pos":[34578,34589],"source":"[in] `info`"},{"content":"A structure that contains the alignment information about the dock pane.","pos":[34593,34665]},{"content":"[in] <ph id=\"ph1\">`dwAlignToInsertAfter`</ph>","pos":[34672,34699],"source":"[in] `dwAlignToInsertAfter`"},{"content":"Alignment of the dock pane.","pos":[34703,34730]},{"content":"[out] <ph id=\"ph1\">`ppDockBar`</ph>","pos":[34737,34754],"source":"[out] `ppDockBar`"},{"content":"A pointer to a pointer to a dock pane.","pos":[34758,34796]},{"pos":[34806,34818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34822,34890],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dock pane was created successfully; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the dock pane was created successfully; `FALSE` otherwise."},{"pos":[34900,34971],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__insertpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::InsertPane","linkify":"<a name=\"cdockingmanager__insertpane\"></a>  CDockingManager::InsertPane","source":"<a name=\"cdockingmanager__insertpane\"></a>  CDockingManager::InsertPane"},{"content":"Inserts a control pane into the list of control bars.","pos":[34975,35028]},{"pos":[35151,35161],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pControlBar`</ph>","pos":[35165,35183],"source":"[in] `pControlBar`"},{"content":"A pointer to a control pane.","pos":[35187,35215]},{"content":"[in] <ph id=\"ph1\">`pTarget`</ph>","pos":[35222,35236],"source":"[in] `pTarget`"},{"content":"A pointer to a target pane.","pos":[35240,35267]},{"content":"[in] <ph id=\"ph1\">`bAfter`</ph>","pos":[35274,35287],"source":"[in] `bAfter`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to insert the pane after the position of the target pane; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[35290,35374],"source":" `TRUE` to insert the pane after the position of the target pane; `FALSE` otherwise."},{"pos":[35384,35396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35400,35496],"content":"<ph id=\"ph1\">`TRUE`</ph> if the control pane is successfully added to the list of control bars; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the control pane is successfully added to the list of control bars; `FALSE` otherwise."},{"pos":[35506,35513],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method returns false if the control pane is already in the list of control bars or if the target pane does not exist in the list of control bars.","pos":[35517,35667]},{"pos":[35677,35756],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__isdocksitemenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::IsDockSiteMenu","linkify":"<a name=\"cdockingmanager__isdocksitemenu\"></a>  CDockingManager::IsDockSiteMenu","source":"<a name=\"cdockingmanager__isdocksitemenu\"></a>  CDockingManager::IsDockSiteMenu"},{"content":"Specifies whether a pop-up menu is displayed on the captions of all panes.","pos":[35760,35834]},{"pos":[35889,35901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35905,36001],"content":"<ph id=\"ph1\">`TRUE`</ph> if a dock site menu is displayed on the captions of all docking panes; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if a dock site menu is displayed on the captions of all docking panes; otherwise `FALSE`."},{"pos":[36011,36018],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36022,36143],"content":"You can enable the dock site menu by calling <bpt id=\"p1\">[</bpt>CDockingManager::EnableDockSiteMenu<ept id=\"p1\">](#cdockingmanager__enabledocksitemenu)</ept>.","source":"You can enable the dock site menu by calling [CDockingManager::EnableDockSiteMenu](#cdockingmanager__enabledocksitemenu)."},{"pos":[36153,36236],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__isinadjustlayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::IsInAdjustLayout","linkify":"<a name=\"cdockingmanager__isinadjustlayout\"></a>  CDockingManager::IsInAdjustLayout","source":"<a name=\"cdockingmanager__isinadjustlayout\"></a>  CDockingManager::IsInAdjustLayout"},{"content":"Determines if the layouts of all panes are adjusted.","pos":[36240,36292]},{"pos":[36351,36363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36367,36434],"content":"<ph id=\"ph1\">`TRUE`</ph> if the layouts of all panes are adjusted; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the layouts of all panes are adjusted; `FALSE` otherwise."},{"pos":[36444,36531],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__isolecontainermode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::IsOLEContainerMode","linkify":"<a name=\"cdockingmanager__isolecontainermode\"></a>  CDockingManager::IsOLEContainerMode","source":"<a name=\"cdockingmanager__isolecontainermode\"></a>  CDockingManager::IsOLEContainerMode"},{"content":"Specifies whether the docking manager is in OLE container mode.","pos":[36535,36598]},{"pos":[36659,36671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36675,36750],"content":"<ph id=\"ph1\">`TRUE`</ph> if the docking manager is in OLE container mode; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the docking manager is in OLE container mode; otherwise, `FALSE`."},{"pos":[36760,36767],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In OLE container mode, all docking panes and application toolbars are hidden.","pos":[36771,36848]},{"content":"The panes are also hidden in this mode if you have set <bpt id=\"p1\">[</bpt>CDockingManager::m_bHideDockingBarsInContainerMode<ept id=\"p1\">](#cdockingmanager__m_bhidedockingbarsincontainermode)</ept> to <ph id=\"ph1\">`TRUE`</ph>.","pos":[36849,37020],"source":" The panes are also hidden in this mode if you have set [CDockingManager::m_bHideDockingBarsInContainerMode](#cdockingmanager__m_bhidedockingbarsincontainermode) to `TRUE`."},{"pos":[37030,37119],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__ispointneardocksite\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::IsPointNearDockSite","linkify":"<a name=\"cdockingmanager__ispointneardocksite\"></a>  CDockingManager::IsPointNearDockSite","source":"<a name=\"cdockingmanager__ispointneardocksite\"></a>  CDockingManager::IsPointNearDockSite"},{"content":"Determines whether a specified point is near the dock site.","pos":[37123,37182]},{"pos":[37314,37324],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[37328,37340],"source":"[in] `point`"},{"content":"The specified point.","pos":[37344,37364]},{"content":"[out] <ph id=\"ph1\">`dwBarAlignment`</ph>","pos":[37371,37393],"source":"[out] `dwBarAlignment`"},{"content":"Specifies which edge the point is near.","pos":[37397,37436]},{"content":"Possible values are <ph id=\"ph1\">`CBRS_ALIGN_LEFT`</ph>, <ph id=\"ph2\">`CBRS_ALIGN_RIGHT`</ph>, <ph id=\"ph3\">`CBRS_ALIGN_TOP`</ph>, and <ph id=\"ph4\">`CBRS_ALIGN_BOTTOM`</ph>.","pos":[37437,37538],"source":" Possible values are `CBRS_ALIGN_LEFT`, `CBRS_ALIGN_RIGHT`, `CBRS_ALIGN_TOP`, and `CBRS_ALIGN_BOTTOM`."},{"content":"[out] <ph id=\"ph1\">`bOuterEdge`</ph>","pos":[37545,37563],"source":"[out] `bOuterEdge`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the point is near the outer border of the dock site; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[37566,37648],"source":" `TRUE` if the point is near the outer border of the dock site; `FALSE` otherwise."},{"pos":[37658,37670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37674,37735],"content":"<ph id=\"ph1\">`TRUE`</ph> if the point is near the dock site; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the point is near the dock site; otherwise `FALSE`."},{"pos":[37745,37834],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__isprintpreviewvalid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::IsPrintPreviewValid","linkify":"<a name=\"cdockingmanager__isprintpreviewvalid\"></a>  CDockingManager::IsPrintPreviewValid","source":"<a name=\"cdockingmanager__isprintpreviewvalid\"></a>  CDockingManager::IsPrintPreviewValid"},{"content":"Determines if the print preview mode is set.","pos":[37838,37882]},{"pos":[37944,37956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37960,38019],"content":"<ph id=\"ph1\">`TRUE`</ph> if the print preview mode is set; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the print preview mode is set; `FALSE` otherwise."},{"pos":[38029,38098],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__loadstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::LoadState","linkify":"<a name=\"cdockingmanager__loadstate\"></a>  CDockingManager::LoadState","source":"<a name=\"cdockingmanager__loadstate\"></a>  CDockingManager::LoadState"},{"content":"Loads the docking manager's state from the registry.","pos":[38102,38154]},{"pos":[38269,38279],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszProfileName`</ph>","pos":[38283,38305],"source":"[in] `lpszProfileName`"},{"content":"Profile name.","pos":[38309,38322]},{"content":"[in] <ph id=\"ph1\">`uiID`</ph>","pos":[38329,38340],"source":"[in] `uiID`"},{"content":"The id of the docking manager.","pos":[38344,38374]},{"pos":[38384,38396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38400,38479],"content":"<ph id=\"ph1\">`TRUE`</ph> if the docking manager state was loaded successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the docking manager state was loaded successfully; otherwise `FALSE`."},{"pos":[38489,38560],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__lockupdate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::LockUpdate","linkify":"<a name=\"cdockingmanager__lockupdate\"></a>  CDockingManager::LockUpdate","source":"<a name=\"cdockingmanager__lockupdate\"></a>  CDockingManager::LockUpdate"},{"content":"Locks the given window.","pos":[38564,38587]},{"pos":[38641,38651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bLock`</ph>","pos":[38655,38667],"source":"[in] `bLock`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the window is locked; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[38670,38721],"source":" `TRUE` if the window is locked; `FALSE` otherwise."},{"pos":[38731,38738],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a window is locked, it cannot be moved and it cannot be redrawn.","pos":[38742,38811]},{"pos":[38821,38938],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__m_bhidedockingbarsincontainermode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::m_bHideDockingBarsInContainerMode","linkify":"<a name=\"cdockingmanager__m_bhidedockingbarsincontainermode\"></a>  CDockingManager::m_bHideDockingBarsInContainerMode","source":"<a name=\"cdockingmanager__m_bhidedockingbarsincontainermode\"></a>  CDockingManager::m_bHideDockingBarsInContainerMode"},{"content":"Specifies whether the docking manager hides panes in OLE container mode.","pos":[38942,39014]},{"pos":[39104,39111],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set this value to <ph id=\"ph1\">`FALSE`</ph> if you want to keep all panes docked to the main frame visible when the application is in OLE container mode.","pos":[39115,39250],"source":"Set this value to `FALSE` if you want to keep all panes docked to the main frame visible when the application is in OLE container mode."},{"content":"By default, this value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[39251,39284],"source":" By default, this value is `TRUE`."},{"pos":[39294,39377],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__m_dockmodeglobal\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::m_dockModeGlobal","linkify":"<a name=\"cdockingmanager__m_dockmodeglobal\"></a>  CDockingManager::m_dockModeGlobal","source":"<a name=\"cdockingmanager__m_dockmodeglobal\"></a>  CDockingManager::m_dockModeGlobal"},{"content":"Specifies the global docking mode.","pos":[39381,39415]},{"pos":[39497,39504],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, each docking pane uses this docking mode.","pos":[39508,39561]},{"content":"For more information about the values that this field can be set to, see <bpt id=\"p1\">[</bpt>CBasePane::GetDockingMode<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__getdockingmode)</ept>.","pos":[39562,39729],"source":" For more information about the values that this field can be set to, see [CBasePane::GetDockingMode](../../mfc/reference/cbasepane-class.md#cbasepane__getdockingmode)."},{"pos":[39739,39826],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__m_ndocksensitivity\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::m_nDockSensitivity","linkify":"<a name=\"cdockingmanager__m_ndocksensitivity\"></a>  CDockingManager::m_nDockSensitivity","source":"<a name=\"cdockingmanager__m_ndocksensitivity\"></a>  CDockingManager::m_nDockSensitivity"},{"content":"Specifies the docking sensitivity.","pos":[39830,39864]},{"pos":[39938,39945],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The docking sensitivity defines how close a floating pane can approach a docking pane, docking site, or another pane before the framework changes its state to docked.","pos":[39949,40115]},{"pos":[40125,40236],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__m_ntimeoutbeforedockingbardock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::m_nTimeOutBeforeDockingBarDock","linkify":"<a name=\"cdockingmanager__m_ntimeoutbeforedockingbardock\"></a>  CDockingManager::m_nTimeOutBeforeDockingBarDock","source":"<a name=\"cdockingmanager__m_ntimeoutbeforedockingbardock\"></a>  CDockingManager::m_nTimeOutBeforeDockingBarDock"},{"content":"Specifies the time, in milliseconds, before a docking pane is docked in immediate docking mode.","pos":[40240,40335]},{"pos":[40406,40413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Before a pane is docked, the framework waits the specified length of time.","pos":[40417,40491]},{"content":"This prevents the pane from being accidentally docked to a location while the user is still dragging it.","pos":[40492,40596]},{"pos":[40606,40711],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__m_ntimeoutbeforetoolbardock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::m_nTimeOutBeforeToolBarDock","linkify":"<a name=\"cdockingmanager__m_ntimeoutbeforetoolbardock\"></a>  CDockingManager::m_nTimeOutBeforeToolBarDock","source":"<a name=\"cdockingmanager__m_ntimeoutbeforetoolbardock\"></a>  CDockingManager::m_nTimeOutBeforeToolBarDock"},{"content":"Specifies the time, in milliseconds, before a toolbar is docked to the main frame window.","pos":[40715,40804]},{"pos":[40872,40879],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Before a toolbar is docked, the framework waits the specified length of time.","pos":[40883,40960]},{"content":"This prevents the toolbar from being accidentally docked to a location while the user is still dragging it.","pos":[40961,41068]},{"pos":[41078,41159],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__onactivateframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::OnActivateFrame","linkify":"<a name=\"cdockingmanager__onactivateframe\"></a>  CDockingManager::OnActivateFrame","source":"<a name=\"cdockingmanager__onactivateframe\"></a>  CDockingManager::OnActivateFrame"},{"content":"Called by the framework when the frame window is made active or is deactivated.","pos":[41163,41242]},{"pos":[41313,41323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bActivate`</ph>","pos":[41327,41343],"source":"[in] `bActivate`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the frame window is made active; if <ph id=\"ph2\">`FALSE`</ph>, the frame window is deactivated.","pos":[41347,41435],"source":" If `TRUE`, the frame window is made active; if `FALSE`, the frame window is deactivated."},{"pos":[41445,41528],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__onclosepopupmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::OnClosePopupMenu","linkify":"<a name=\"cdockingmanager__onclosepopupmenu\"></a>  CDockingManager::OnClosePopupMenu","source":"<a name=\"cdockingmanager__onclosepopupmenu\"></a>  CDockingManager::OnClosePopupMenu"},{"content":"Called by the framework when an active pop-up menu processes a WM_DESTROY message.","pos":[41532,41614]},{"pos":[41664,41671],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework sends a WM_DESTROY message when it is about to close the current main window.","pos":[41675,41766]},{"content":"Override this method to handle notifications from <ph id=\"ph1\">`CMFCPopupMenu`</ph> objects that belong to the frame window when a <ph id=\"ph2\">`CMFCPopupMenu`</ph> object processes a <ph id=\"ph3\">`WM_DESTROY`</ph> message.","pos":[41767,41936],"source":" Override this method to handle notifications from `CMFCPopupMenu` objects that belong to the frame window when a `CMFCPopupMenu` object processes a `WM_DESTROY` message."},{"pos":[41946,42027],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__onmoveminiframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::OnMoveMiniFrame","linkify":"<a name=\"cdockingmanager__onmoveminiframe\"></a>  CDockingManager::OnMoveMiniFrame","source":"<a name=\"cdockingmanager__onmoveminiframe\"></a>  CDockingManager::OnMoveMiniFrame"},{"content":"Called by the framework to move a mini-frame window.","pos":[42031,42083]},{"pos":[42152,42162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pFrame`</ph>","pos":[42166,42179],"source":"[in] `pFrame`"},{"content":"A pointer to a mini-frame window.","pos":[42183,42216]},{"pos":[42226,42238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42242,42291],"content":"<ph id=\"ph1\">`TRUE`</ph> if the method succeeds; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the method succeeds; otherwise `FALSE`."},{"pos":[42301,42386],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__onpanecontextmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::OnPaneContextMenu","linkify":"<a name=\"cdockingmanager__onpanecontextmenu\"></a>  CDockingManager::OnPaneContextMenu","source":"<a name=\"cdockingmanager__onpanecontextmenu\"></a>  CDockingManager::OnPaneContextMenu"},{"content":"Called by the framework when it builds a menu that has a list of panes.","pos":[42390,42461]},{"pos":[42524,42534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[42538,42550],"source":"[in] `point`"},{"content":"Specifies the location of the menu.","pos":[42554,42589]},{"pos":[42599,42676],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__panefrompoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::PaneFromPoint","linkify":"<a name=\"cdockingmanager__panefrompoint\"></a>  CDockingManager::PaneFromPoint","source":"<a name=\"cdockingmanager__panefrompoint\"></a>  CDockingManager::PaneFromPoint"},{"content":"Returns the pane that contains the given point.","pos":[42680,42727]},{"pos":[43187,43197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[43201,43213],"source":"[in] `point`"},{"content":"Specifies the point, in screen coordinates, to check.","pos":[43217,43270]},{"content":"[in] <ph id=\"ph1\">`nSensitivity`</ph>","pos":[43277,43296],"source":"[in] `nSensitivity`"},{"content":"The value to inflate the window rectangle of each checked pane.","pos":[43300,43363]},{"content":"A pane satisfies the search criteria if the given point is in this inflated region.","pos":[43364,43447]},{"content":"[in] <ph id=\"ph1\">`bExactBar`</ph>","pos":[43454,43470],"source":"[in] `bExactBar`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to ignore the <ph id=\"ph2\">`nSensitivity`</ph> parameter; otherwise, <ph id=\"ph3\">`FALSE`</ph>.","pos":[43473,43540],"source":" `TRUE` to ignore the `nSensitivity` parameter; otherwise, `FALSE`."},{"content":"[in] <ph id=\"ph1\">`pRTCBarType`</ph>","pos":[43547,43565],"source":"[in] `pRTCBarType`"},{"content":"If not <ph id=\"ph1\">`NULL`</ph>, the method searches only the panes of the specified type.","pos":[43569,43641],"source":" If not `NULL`, the method searches only the panes of the specified type."},{"content":"[in] <ph id=\"ph1\">`bCheckVisibility`</ph>","pos":[43648,43671],"source":"[in] `bCheckVisibility`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to check only visible panes; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[43674,43730],"source":" `TRUE` to check only visible panes; otherwise, `FALSE`."},{"content":"[out] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[43737,43756],"source":"[out] `dwAlignment`"},{"content":"If a pane is found at the specified point, this parameter contains the side of the pane that was closest to the specified point.","pos":[43760,43888]},{"content":"For more information, see the Remarks section.","pos":[43889,43935]},{"content":"[in] <ph id=\"ph1\">`pBarToIgnore`</ph>","pos":[43942,43961],"source":"[in] `pBarToIgnore`"},{"content":"If not <ph id=\"ph1\">`NULL`</ph>, the method ignores panes specified by this parameter.","pos":[43965,44033],"source":" If not `NULL`, the method ignores panes specified by this parameter."},{"pos":[44043,44055],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44059,44192],"content":"The <bpt id=\"p1\">[</bpt>CBasePane<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept>-derived object that contains the given point, or <ph id=\"ph1\">`NULL`</ph> if no pane was found.","source":"The [CBasePane](../../mfc/reference/cbasepane-class.md)-derived object that contains the given point, or `NULL` if no pane was found."},{"pos":[44202,44209],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When the function returns and a pane was found, <ph id=\"ph1\">`dwAlignment`</ph> contains the alignment of the specified point.","pos":[44213,44321],"source":"When the function returns and a pane was found, `dwAlignment` contains the alignment of the specified point."},{"content":"For example, if the point was closest to the top of the pane, <ph id=\"ph1\">`dwAlignment`</ph> is set to <ph id=\"ph2\">`CBRS_ALIGN_TOP`</ph>.","pos":[44322,44425],"source":" For example, if the point was closest to the top of the pane, `dwAlignment` is set to `CBRS_ALIGN_TOP`."},{"pos":[44435,44544],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__processpanecontextmenucommand\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::ProcessPaneContextMenuCommand","linkify":"<a name=\"cdockingmanager__processpanecontextmenucommand\"></a>  CDockingManager::ProcessPaneContextMenuCommand","source":"<a name=\"cdockingmanager__processpanecontextmenucommand\"></a>  CDockingManager::ProcessPaneContextMenuCommand"},{"content":"Called by the framework to select or to clear a check box for the specified command and recalculate the layout of a shown pane.","pos":[44548,44675]},{"pos":[44828,44838],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nID`</ph>","pos":[44842,44852],"source":"[in] `nID`"},{"content":"The id of a control bar in the menu.","pos":[44856,44892]},{"content":"[in] <ph id=\"ph1\">`nCode`</ph>","pos":[44899,44911],"source":"[in] `nCode`"},{"content":"The command notification code.","pos":[44915,44945]},{"content":"[in] <ph id=\"ph1\">`pExtra`</ph>","pos":[44952,44965],"source":"[in] `pExtra`"},{"content":"A pointer to void that is casted to a pointer to <ph id=\"ph1\">`CCmdUI`</ph> if <ph id=\"ph2\">`nCode`</ph> is CN_UPDATE_COMMAND_UI.","pos":[44969,45062],"source":" A pointer to void that is casted to a pointer to `CCmdUI` if `nCode` is CN_UPDATE_COMMAND_UI."},{"content":"[in] <ph id=\"ph1\">`pHandlerInfo`</ph>","pos":[45069,45088],"source":"[in] `pHandlerInfo`"},{"content":"A pointer to an info structure.","pos":[45092,45123]},{"content":"This parameter is not used.","pos":[45124,45151]},{"pos":[45161,45173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45177,45303],"content":"<ph id=\"ph1\">`TRUE`</ph> if <ph id=\"ph2\">`pEXtra`</ph> is not NULL and <ph id=\"ph3\">`nCode`</ph> equals CN_UPDATE_COMMAND_UI, or if there is a control bar with the specified <ph id=\"ph4\">`nID`</ph>.","source":"`TRUE` if `pEXtra` is not NULL and `nCode` equals CN_UPDATE_COMMAND_UI, or if there is a control bar with the specified `nID`."},{"pos":[45313,45388],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__recalclayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::RecalcLayout","linkify":"<a name=\"cdockingmanager__recalclayout\"></a>  CDockingManager::RecalcLayout","source":"<a name=\"cdockingmanager__recalclayout\"></a>  CDockingManager::RecalcLayout"},{"content":"Recalculates the internal layout of the controls present in the list of controls.","pos":[45392,45473]},{"pos":[45546,45556],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bNotify`</ph>","pos":[45560,45574],"source":"[in] `bNotify`"},{"content":"This parameter is not used.","pos":[45578,45605]},{"pos":[45615,45718],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__releaseemptypanecontainers\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::ReleaseEmptyPaneContainers","linkify":"<a name=\"cdockingmanager__releaseemptypanecontainers\"></a>  CDockingManager::ReleaseEmptyPaneContainers","source":"<a name=\"cdockingmanager__releaseemptypanecontainers\"></a>  CDockingManager::ReleaseEmptyPaneContainers"},{"content":"Releases the empty pane containers.","pos":[45722,45757]},{"pos":[45817,45916],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__removehiddenmditabbedbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::RemoveHiddenMDITabbedBar","linkify":"<a name=\"cdockingmanager__removehiddenmditabbedbar\"></a>  CDockingManager::RemoveHiddenMDITabbedBar","source":"<a name=\"cdockingmanager__removehiddenmditabbedbar\"></a>  CDockingManager::RemoveHiddenMDITabbedBar"},{"content":"Removes the specified hidden bar pane.","pos":[45920,45958]},{"pos":[46035,46045],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[46049,46060],"source":"[in] `pBar`"},{"content":"A pointer to a bar pane to remove.","pos":[46064,46098]},{"pos":[46108,46189],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__removeminiframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::RemoveMiniFrame","linkify":"<a name=\"cdockingmanager__removeminiframe\"></a>  CDockingManager::RemoveMiniFrame","source":"<a name=\"cdockingmanager__removeminiframe\"></a>  CDockingManager::RemoveMiniFrame"},{"content":"Removes a specified frame from the list of mini frames.","pos":[46193,46248]},{"pos":[46324,46334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[46338,46349],"source":"[in] `pWnd`"},{"content":"A pointer to a frame to remove.","pos":[46353,46384]},{"pos":[46394,46406],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[46410,46470],"content":"<ph id=\"ph1\">`TRUE`</ph> if the specified frame is removed; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the specified frame is removed; `FALSE` otherwise."},{"pos":[46480,46581],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__removepanefromdockmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::RemovePaneFromDockManager","linkify":"<a name=\"cdockingmanager__removepanefromdockmanager\"></a>  CDockingManager::RemovePaneFromDockManager","source":"<a name=\"cdockingmanager__removepanefromdockmanager\"></a>  CDockingManager::RemovePaneFromDockManager"},{"content":"Unregisters a pane and removes it from the list in the docking manager.","pos":[46585,46656]},{"pos":[46853,46863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[46867,46878],"source":"[in] `pWnd`"},{"content":"A pointer to a pane to be removed.","pos":[46882,46916]},{"content":"[in] <ph id=\"ph1\">`bDestroy`</ph>","pos":[46923,46938],"source":"[in] `bDestroy`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the removed pane is destroyed.","pos":[46942,46983],"source":" If `TRUE`, the removed pane is destroyed."},{"content":"[in] <ph id=\"ph1\">`bAdjustLayout`</ph>","pos":[46990,47010],"source":"[in] `bAdjustLayout`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, adjust the docking layout immediately.","pos":[47014,47063],"source":" If `TRUE`, adjust the docking layout immediately."},{"content":"[in] <ph id=\"ph1\">`bAutoHide`</ph>","pos":[47070,47086],"source":"[in] `bAutoHide`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the pane is removed from the list of autohide bars.","pos":[47090,47152],"source":" If `TRUE`, the pane is removed from the list of autohide bars."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, the pane is removed from the list of regular panes.","pos":[47153,47216],"source":" If `FALSE`, the pane is removed from the list of regular panes."},{"content":"[in] <ph id=\"ph1\">`pBarReplacement`</ph>","pos":[47223,47245],"source":"[in] `pBarReplacement`"},{"content":"A pointer to a pane that replaces the removed pane.","pos":[47249,47300]},{"pos":[47310,47383],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__replacepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::ReplacePane","linkify":"<a name=\"cdockingmanager__replacepane\"></a>  CDockingManager::ReplacePane","source":"<a name=\"cdockingmanager__replacepane\"></a>  CDockingManager::ReplacePane"},{"content":"Replaces one pane with another.","pos":[47387,47418]},{"pos":[47525,47535],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pOriginalBar`</ph>","pos":[47539,47558],"source":"[in] `pOriginalBar`"},{"content":"A pointer to the original pane.","pos":[47562,47593]},{"content":"[in] <ph id=\"ph1\">`pNewBar`</ph>","pos":[47600,47614],"source":"[in] `pNewBar`"},{"content":"A pointer to the pane that replaces the original pane.","pos":[47618,47672]},{"pos":[47682,47694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47698,47761],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane is successfully replaced; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the pane is successfully replaced; `FALSE` otherwise."},{"pos":[47771,47872],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__resortminiframesforzorder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::ResortMiniFramesForZOrder","linkify":"<a name=\"cdockingmanager__resortminiframesforzorder\"></a>  CDockingManager::ResortMiniFramesForZOrder","source":"<a name=\"cdockingmanager__resortminiframesforzorder\"></a>  CDockingManager::ResortMiniFramesForZOrder"},{"content":"Resorts the frames in the list of mini frames.","pos":[47876,47922]},{"pos":[47981,48050],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__savestate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::SaveState","linkify":"<a name=\"cdockingmanager__savestate\"></a>  CDockingManager::SaveState","source":"<a name=\"cdockingmanager__savestate\"></a>  CDockingManager::SaveState"},{"content":"Saves the docking manager's state to the registry.","pos":[48054,48104]},{"pos":[48219,48229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszProfileName`</ph>","pos":[48233,48255],"source":"[in] `lpszProfileName`"},{"content":"A path to a registry key.","pos":[48259,48284]},{"content":"[in] <ph id=\"ph1\">`uiID`</ph>","pos":[48291,48302],"source":"[in] `uiID`"},{"content":"The docking manager ID.","pos":[48306,48329]},{"pos":[48339,48351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48355,48417],"content":"<ph id=\"ph1\">`TRUE`</ph> if the state was saved successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the state was saved successfully; otherwise `FALSE`."},{"pos":[48427,48434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Saving the docking manager's state to the registry involves saving the states of the control bars, the states of the autohide bars, and the states of the mini frames present in the docking manager.","pos":[48438,48635]},{"pos":[48645,48742],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__sendmessagetominiframes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::SendMessageToMiniFrames","linkify":"<a name=\"cdockingmanager__sendmessagetominiframes\"></a>  CDockingManager::SendMessageToMiniFrames","source":"<a name=\"cdockingmanager__sendmessagetominiframes\"></a>  CDockingManager::SendMessageToMiniFrames"},{"content":"Sends the specified message to all mini frames.","pos":[48746,48793]},{"pos":[48918,48928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uMessage`</ph>","pos":[48932,48947],"source":"[in] `uMessage`"},{"content":"The message to be sent.","pos":[48951,48974]},{"content":"[in] <ph id=\"ph1\">`wParam`</ph>","pos":[48981,48994],"source":"[in] `wParam`"},{"content":"Additional message dependent information.","pos":[48998,49039]},{"content":"[in] <ph id=\"ph1\">`lParam`</ph>","pos":[49046,49059],"source":"[in] `lParam`"},{"content":"Additional message dependent information.","pos":[49063,49104]},{"pos":[49114,49126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49130,49144],"content":"<ph id=\"ph1\">`TRUE`</ph> always.","source":"`TRUE` always."},{"pos":[49154,49223],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__serialize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::Serialize","linkify":"<a name=\"cdockingmanager__serialize\"></a>  CDockingManager::Serialize","source":"<a name=\"cdockingmanager__serialize\"></a>  CDockingManager::Serialize"},{"content":"Writes the docking manager to an archive.","pos":[49227,49268]},{"pos":[49323,49333],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`ar`</ph>","pos":[49337,49346],"source":"[in] `ar`"},{"content":"A reference to an archive object.","pos":[49350,49383]},{"pos":[49393,49400],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Writing the docking manager to an archive involves determining the number of docking control bars and sliders, and writing the control bars, the mini frames, the autohide bars, and the MDI tabbed bars to the archive.","pos":[49404,49620]},{"pos":[49630,49715],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__setautohidezorder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::SetAutohideZOrder","linkify":"<a name=\"cdockingmanager__setautohidezorder\"></a>  CDockingManager::SetAutohideZOrder","source":"<a name=\"cdockingmanager__setautohidezorder\"></a>  CDockingManager::SetAutohideZOrder"},{"content":"Sets the size, width, and height of the control bars and the specified pane.","pos":[49719,49795]},{"pos":[49874,49884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pAHDockingBar`</ph>","pos":[49888,49908],"source":"[in] `pAHDockingBar`"},{"content":"A pointer to a dockable pane.","pos":[49912,49941]},{"pos":[49951,50030],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__setdockingmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::SetDockingMode","linkify":"<a name=\"cdockingmanager__setdockingmode\"></a>  CDockingManager::SetDockingMode","source":"<a name=\"cdockingmanager__setdockingmode\"></a>  CDockingManager::SetDockingMode"},{"content":"Sets the docking mode.","pos":[50034,50056]},{"pos":[50189,50199],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the new docking mode.","pos":[50217,50248]},{"content":"For more information, see the Remarks section.","pos":[50249,50295]},{"content":"Specifies the theme to be used for smart docking markers.","pos":[50313,50370]},{"content":"It can be  one of the following enumerated values: AFX_SDT_DEFAULT, AFX_SDT_VS2005, AFX_SDT_VS2008.","pos":[50371,50470]},{"pos":[50480,50487],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this static method to set the docking mode.","pos":[50491,50539]},{"pos":[50546,50588],"content":"<ph id=\"ph1\">`dockMode`</ph> can be one of following values:","source":"`dockMode` can be one of following values:"},{"content":"<ph id=\"ph1\">`DT_STANDARD`</ph> - Standard docking mode as implemented in Visual Studio .NET 2003.","pos":[50596,50676],"source":"`DT_STANDARD` - Standard docking mode as implemented in Visual Studio .NET 2003."},{"content":"Panes are dragged without a dragging context.","pos":[50677,50722]},{"content":"<ph id=\"ph1\">`DT_IMMEDIATE`</ph> - Immediate docking mode as implemented in Microsoft Visio.","pos":[50730,50804],"source":"`DT_IMMEDIATE` - Immediate docking mode as implemented in Microsoft Visio."},{"content":"Panes are dragged with a dragging context, but no markers are displayed.","pos":[50805,50877]},{"content":"<ph id=\"ph1\">`DT_SMART`</ph> - Smart docking mode as implemented in Visual Studio 2005.","pos":[50885,50954],"source":"`DT_SMART` - Smart docking mode as implemented in Visual Studio 2005."},{"content":"Panes are dragged with a dragging context and smart markers are displayed that show where the pane can be docked.","pos":[50955,51068]},{"pos":[51078,51153],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__setdockstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::SetDockState","linkify":"<a name=\"cdockingmanager__setdockstate\"></a>  CDockingManager::SetDockState","source":"<a name=\"cdockingmanager__setdockstate\"></a>  CDockingManager::SetDockState"},{"content":"Sets the docking state of the control bars, the mini frames, and the autohide bars.","pos":[51157,51240]},{"pos":[51294,51383],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__setprintpreviewmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::SetPrintPreviewMode","linkify":"<a name=\"cdockingmanager__setprintpreviewmode\"></a>  CDockingManager::SetPrintPreviewMode","source":"<a name=\"cdockingmanager__setprintpreviewmode\"></a>  CDockingManager::SetPrintPreviewMode"},{"content":"Sets the print preview mode of the bars that are displayed in the print preview.","pos":[51387,51467]},{"pos":[51572,51582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bPreview`</ph>","pos":[51586,51601],"source":"[in] `bPreview`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if print preview mode is set; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[51604,51660],"source":" `TRUE` if print preview mode is set; `FALSE` otherwise."},{"content":"[in] <ph id=\"ph1\">`pState`</ph>","pos":[51667,51680],"source":"[in] `pState`"},{"content":"A pointer to a preview state.","pos":[51684,51713]},{"content":"This parameter is not used.","pos":[51714,51741]},{"pos":[51751,51844],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__setsmartdockingparams\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::SetSmartDockingParams","linkify":"<a name=\"cdockingmanager__setsmartdockingparams\"></a>  CDockingManager::SetSmartDockingParams","source":"<a name=\"cdockingmanager__setsmartdockingparams\"></a>  CDockingManager::SetSmartDockingParams"},{"content":"Sets the parameters that define the behavior of smart docking.","pos":[51848,51910]},{"pos":[51997,52007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in, out] <ph id=\"ph1\">`params`</ph>","pos":[52011,52029],"source":"[in, out] `params`"},{"content":"Defines the parameters for smart docking.","pos":[52033,52074]},{"pos":[52084,52091],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method if you want to customize the appearance, color, or shape of the smart docking markers.","pos":[52095,52198]},{"pos":[52205,52376],"content":"To use the default look for smart docking markers, pass an uninitialized instance of <bpt id=\"p1\">[</bpt>CSmartDockingInfo Class<ept id=\"p1\">](../../mfc/reference/csmartdockinginfo-class.md)</ept> to <ph id=\"ph1\">`params`</ph>.","source":"To use the default look for smart docking markers, pass an uninitialized instance of [CSmartDockingInfo Class](../../mfc/reference/csmartdockinginfo-class.md) to `params`."},{"pos":[52386,52483],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__showdelayshowminiframes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::ShowDelayShowMiniFrames","linkify":"<a name=\"cdockingmanager__showdelayshowminiframes\"></a>  CDockingManager::ShowDelayShowMiniFrames","source":"<a name=\"cdockingmanager__showdelayshowminiframes\"></a>  CDockingManager::ShowDelayShowMiniFrames"},{"content":"Shows or hides the windows of the mini frames.","pos":[52487,52533]},{"pos":[52600,52610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[52614,52626],"source":"[in] `bShow`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to make the window of the shown frame active; <ph id=\"ph2\">`FALSE to`</ph> hide the window of the frame.","pos":[52629,52723],"source":" `TRUE` to make the window of the shown frame active; `FALSE to` hide the window of the frame."},{"pos":[52733,52802],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__showpanes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::ShowPanes","linkify":"<a name=\"cdockingmanager__showpanes\"></a>  CDockingManager::ShowPanes","source":"<a name=\"cdockingmanager__showpanes\"></a>  CDockingManager::ShowPanes"},{"content":"Shows or hides the panes of the control and autohide bars.","pos":[52806,52864]},{"pos":[52925,52935],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[52939,52951],"source":"[in] `bShow`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to show the panes; <ph id=\"ph2\">`FALSE to`</ph> hide the panes.","pos":[52954,53007],"source":" `TRUE` to show the panes; `FALSE to` hide the panes."},{"pos":[53017,53029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53033,53048],"content":"Always <ph id=\"ph1\">`FALSE`</ph>.","source":"Always `FALSE`."},{"pos":[53058,53135],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__startsdocking\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::StartSDocking","linkify":"<a name=\"cdockingmanager__startsdocking\"></a>  CDockingManager::StartSDocking","source":"<a name=\"cdockingmanager__startsdocking\"></a>  CDockingManager::StartSDocking"},{"content":"Starts the smart docking of the specified window according to the alignment of the smart docking manager.","pos":[53139,53244]},{"pos":[53308,53318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDockingWnd`</ph>","pos":[53322,53340],"source":"[in] `pDockingWnd`"},{"content":"A pointer to a window to dock.","pos":[53344,53374]},{"pos":[53384,53459],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__stopsdocking\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::StopSDocking","linkify":"<a name=\"cdockingmanager__stopsdocking\"></a>  CDockingManager::StopSDocking","source":"<a name=\"cdockingmanager__stopsdocking\"></a>  CDockingManager::StopSDocking"},{"content":"Stops smart docking.","pos":[53463,53483]},{"pos":[53529,53620],"content":"<bpt id=\"p1\">&lt;a name=\"cdockingmanager__getsmartdockingtheme\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockingManager::GetSmartDockingTheme","linkify":"<a name=\"cdockingmanager__getsmartdockingtheme\"></a>  CDockingManager::GetSmartDockingTheme","source":"<a name=\"cdockingmanager__getsmartdockingtheme\"></a>  CDockingManager::GetSmartDockingTheme"},{"content":"A static method that returns a theme used to display smart docking markers.","pos":[53624,53699]},{"pos":[53785,53797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns one of the following enumerated values: AFX_SDT_DEFAULT, AFX_SDT_VS2005, AFX_SDT_VS2008.","pos":[53801,53897]},{"pos":[53907,53914],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[53923,53931],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[53935,53983],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[53986,54033],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[54036,54091],"source":" [CObject Class](../../mfc/reference/cobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CFrameWndEx Class<ept id=\"p1\">](../../mfc/reference/cframewndex-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[54094,54157],"source":" [CFrameWndEx Class](../../mfc/reference/cframewndex-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CDockablePane Class<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[54160,54227],"source":" [CDockablePane Class](../../mfc/reference/cdockablepane-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CPaneFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept>","pos":[54230,54296],"source":" [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md)"}],"content":"---\ntitle: \"CDockingManager Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CDockingManager\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CDockingManager class\"\nms.assetid: 98e69c43-55d8-4f43-b861-4fda80ec1e32\ncaps.latest.revision: 37\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDockingManager Class\nImplements the core functionality that controls docking layout in a main frame window.  \n  \n## Syntax  \n  \n```  \nclass CDockingManager : public CObject  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDockingManager::AddDockSite](#cdockingmanager__adddocksite)|Creates a dock pane and adds it to the list of control bars.|  \n|[CDockingManager::AddHiddenMDITabbedBar](#cdockingmanager__addhiddenmditabbedbar)|Adds a handle to a bar pane to the list of hidden MDI tabbed bar panes.|  \n|[CDockingManager::AddMiniFrame](#cdockingmanager__addminiframe)|Adds a frame to the list of mini frames.|  \n|[CDockingManager::AddPane](#cdockingmanager__addpane)|Registers a pane with the docking manager.|  \n|[CDockingManager::AdjustDockingLayout](#cdockingmanager__adjustdockinglayout)|Recalculates and adjusts the layout of all panes in a frame window.|  \n|[CDockingManager::AdjustPaneFrames](#cdockingmanager__adjustpaneframes)|Causes the `WM_NCCALCSIZE` message to be sent to all panes and `CPaneFrameWnd` windows.|  \n|[CDockingManager::AdjustRectToClientArea](#cdockingmanager__adjustrecttoclientarea)|Adjusts the alignment of a rectangle.|  \n|[CDockingManager::AlignAutoHidePane](#cdockingmanager__alignautohidepane)|Resizes a docking pane in autohide mode so that it takes the full width or height of the frameâ€™s client area surrounded by dock sites.|  \n|[CDockingManager::AutoHidePane](#cdockingmanager__autohidepane)|Creates an autohide toolbar.|  \n|[CDockingManager::BringBarsToTop](#cdockingmanager__bringbarstotop)|Brings the docked bars that have the specified alignment to the top.|  \n|[CDockingManager::BuildPanesMenu](#cdockingmanager__buildpanesmenu)|Adds names of docking panes and toolbars to a menu.|  \n|[CDockingManager::CalcExpectedDockedRect](#cdockingmanager__calcexpecteddockedrect)|Calculates the expected rectangle of a docked window.|  \n|[CDockingManager::Create](#cdockingmanager__create)|Creates a docking manager.|  \n|[CDockingManager::DeterminePaneAndStatus](#cdockingmanager__determinepaneandstatus)|Determines the pane that contains a given point and its docking status.|  \n|[CDockingManager::DisableRestoreDockState](#cdockingmanager__disablerestoredockstate)|Enables or disables loading of docking layout from the registry.|  \n|[CDockingManager::DockPane](#cdockingmanager__dockpane)|Docks a pane to another pane or to a frame window.|  \n|[CDockingManager::DockPaneLeftOf](#cdockingmanager__dockpaneleftof)|Docks a pane to the left of another pane.|  \n|[CDockingManager::EnableAutoHidePanes](#cdockingmanager__enableautohidepanes)|Enables docking of the pane to the main frame, creates a dock pane, and adds it to the list of control bars.|  \n|[CDockingManager::EnableDocking](#cdockingmanager__enabledocking)|Creates a dock pane and enables docking of the pane to the main frame.|  \n|[CDockingManager::EnableDockSiteMenu](#cdockingmanager__enabledocksitemenu)|Displays an additional button that opens a pop-up menu on the captions of all docking panes.|  \n|[CDockingManager::EnablePaneContextMenu](#cdockingmanager__enablepanecontextmenu)|Tells the library to display a special context menu that has a list of application toolbars and docking panes when the user clicks the right mouse button and the library is processing the WM_CONTEXTMENU message.|  \n|[CDockingManager::FindDockSite](#cdockingmanager__finddocksite)|Retrieves the bar pane that is at the specified position and that has the specified alignment.|  \n|[CDockingManager::FindDockSiteByPane](#cdockingmanager__finddocksitebypane)|Returns the bar pane that has the id of the target bar pane.|  \n|[CDockingManager::FindPaneByID](#cdockingmanager__findpanebyid)|Finds a pane by the specified control ID.|  \n|[CDockingManager::FixupVirtualRects](#cdockingmanager__fixupvirtualrects)|Commits all current toolbar positions to virtual rectangles.|  \n|[CDockingManager::FrameFromPoint](#cdockingmanager__framefrompoint)|Returns the frame that contains the given point.|  \n|[CDockingManager::GetClientAreaBounds](#cdockingmanager__getclientareabounds)|Gets the rectangle that contains the bounds of the client area.|  \n|[CDockingManager::GetDockingMode](#cdockingmanager__getdockingmode)|Returns the current docking mode.|  \n|[CDockingManager::GetDockSiteFrameWnd](#cdockingmanager__getdocksiteframewnd)|Gets a pointer to the parent window frame.|  \n|[CDockingManager::GetEnabledAutoHideAlignment](#cdockingmanager__getenabledautohidealignment)|Returns the enabled alignment of the panes.|  \n|[CDockingManager::GetMiniFrames](#cdockingmanager__getminiframes)|Gets a list of miniframes.|  \n|[CDockingManager::GetOuterEdgeBounds](#cdockingmanager__getouteredgebounds)|Gets a rectangle that contains the outer edges of the frame.|  \n|[CDockingManager::GetPaneList](#cdockingmanager__getpanelist)|Returns a list of panes that belong to the docking manager. This includes all floating panes.|  \n|[CDockingManager::GetSmartDockingManager](#cdockingmanager__getsmartdockingmanager)|Retrieves a pointer to the smart docking manager.|  \n|[CDockingManager::GetSmartDockingManagerPermanent](#cdockingmanager__getsmartdockingmanagerpermanent)|Retrieves a pointer to the smart docking manager.|  \n|[CDockingManager::GetSmartDockingParams](#cdockingmanager__getsmartdockingparams)|Returns the smart docking parameters for the docking manager.|  \n|[CDockingManager::GetSmartDockingTheme](#cdockingmanager__getsmartdockingtheme)|A static method that returns a theme used to display smart docking markers.|  \n|[CDockingManager::HideAutoHidePanes](#cdockingmanager__hideautohidepanes)|Hides a pane that is in autohide mode.|  \n|[CDockingManager::InsertDockSite](#cdockingmanager__insertdocksite)|Creates a dock pane and inserts it into the list of control bars.|  \n|[CDockingManager::InsertPane](#cdockingmanager__insertpane)|Inserts a control pane into the list of control bars.|  \n|[CDockingManager::IsDockSiteMenu](#cdockingmanager__isdocksitemenu)|Specifies whether a pop-up menu is displayed on the captions of all panes.|  \n|[CDockingManager::IsInAdjustLayout](#cdockingmanager__isinadjustlayout)|Determines if the layouts of all panes are adjusted.|  \n|[CDockingManager::IsOLEContainerMode](#cdockingmanager__isolecontainermode)|Specifies whether the docking manager is in OLE container mode.|  \n|[CDockingManager::IsPointNearDockSite](#cdockingmanager__ispointneardocksite)|Determines whether a specified point is near the dock site.|  \n|[CDockingManager::IsPrintPreviewValid](#cdockingmanager__isprintpreviewvalid)|Determines if the print preview mode is set.|  \n|[CDockingManager::LoadState](#cdockingmanager__loadstate)|Loads the docking manager's state from the registry.|  \n|[CDockingManager::LockUpdate](#cdockingmanager__lockupdate)|Locks the given window.|  \n|[CDockingManager::OnActivateFrame](#cdockingmanager__onactivateframe)|Called by the framework when the frame window is made active or is deactivated.|  \n|[CDockingManager::OnClosePopupMenu](#cdockingmanager__onclosepopupmenu)|Called by the framework when an active pop-up menu processes a WM_DESTROY message.|  \n|[CDockingManager::OnMoveMiniFrame](#cdockingmanager__onmoveminiframe)|Called by the framework to move a mini-frame window.|  \n|[CDockingManager::OnPaneContextMenu](#cdockingmanager__onpanecontextmenu)|Called by the framework when it builds a menu that has a list of panes.|  \n|[CDockingManager::PaneFromPoint](#cdockingmanager__panefrompoint)|Returns the pane that contains the given point.|  \n|[CDockingManager::ProcessPaneContextMenuCommand](#cdockingmanager__processpanecontextmenucommand)|Called by the framework to select or to clear a check box for the specified command and recalculate the layout of a shown pane.|  \n|[CDockingManager::RecalcLayout](#cdockingmanager__recalclayout)|Recalculates the internal layout of the controls present in the list of controls.|  \n|[CDockingManager::ReleaseEmptyPaneContainers](#cdockingmanager__releaseemptypanecontainers)|Releases the empty pane containers.|  \n|[CDockingManager::RemoveHiddenMDITabbedBar](#cdockingmanager__removehiddenmditabbedbar)|Removes the specified hidden bar pane.|  \n|[CDockingManager::RemoveMiniFrame](#cdockingmanager__removeminiframe)|Removes a specified frame from the list of mini frames.|  \n|[CDockingManager::RemovePaneFromDockManager](#cdockingmanager__removepanefromdockmanager)|Unregisters a pane and removes it from the list in the docking manager.|  \n|[CDockingManager::ReplacePane](#cdockingmanager__replacepane)|Replaces one pane with another.|  \n|[CDockingManager::ResortMiniFramesForZOrder](#cdockingmanager__resortminiframesforzorder)|Resorts the frames in the list of mini frames.|  \n|[CDockingManager::SaveState](#cdockingmanager__savestate)|Saves the docking manager's state to the registry.|  \n|[CDockingManager::SendMessageToMiniFrames](#cdockingmanager__sendmessagetominiframes)|Sends the specified message to all mini frames.|  \n|[CDockingManager::Serialize](#cdockingmanager__serialize)|Writes the docking manager to an archive. (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)|  \n|[CDockingManager::SetAutohideZOrder](#cdockingmanager__setautohidezorder)|Sets the size, width, and height of the control bars and the specified pane.|  \n|[CDockingManager::SetDockingMode](#cdockingmanager__setdockingmode)|Sets the docking mode.|  \n|[CDockingManager::SetDockState](#cdockingmanager__setdockstate)|Sets the docking state of the control bars, the mini frames, and the autohide bars.|  \n|[CDockingManager::SetPrintPreviewMode](#cdockingmanager__setprintpreviewmode)|Sets the print preview mode of the bars that are displayed in the print preview.|  \n|[CDockingManager::SetSmartDockingParams](#cdockingmanager__setsmartdockingparams)|Sets the parameters that define the behavior of smart docking.|  \n|[CDockingManager::ShowDelayShowMiniFrames](#cdockingmanager__showdelayshowminiframes)|Shows or hides the windows of the mini frames.|  \n|[CDockingManager::ShowPanes](#cdockingmanager__showpanes)|Shows or hides the panes of the control and autohide bars.|  \n|[CDockingManager::StartSDocking](#cdockingmanager__startsdocking)|Starts the smart docking of the specified window according to the alignment of the smart docking manager.|  \n|[CDockingManager::StopSDocking](#cdockingmanager__stopsdocking)|Stops smart docking.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDockingManager::m_bHideDockingBarsInContainerMode](#cdockingmanager__m_bhidedockingbarsincontainermode)|Specifies whether the docking manager hides panes in OLE container mode.|  \n|[CDockingManager::m_dockModeGlobal](#cdockingmanager__m_dockmodeglobal)|Specifies the global docking mode.|  \n|[CDockingManager::m_nDockSensitivity](#cdockingmanager__m_ndocksensitivity)|Specifies the docking sensitivity.|  \n|[CDockingManager::m_nTimeOutBeforeDockingBarDock](#cdockingmanager__m_ntimeoutbeforedockingbardock)|Specifies the time, in milliseconds, before a docking pane is docked in immediate docking mode.|  \n|[CDockingManager::m_nTimeOutBeforeToolBarDock](#cdockingmanager__m_ntimeoutbeforetoolbardock)|Specifies the time, in milliseconds, before a toolbar is docked to the main frame window.|  \n  \n## Remarks  \n The main frame window creates and initializes this class automatically.  \n  \n The docking manager object holds a list of all panes that are in the docking layout, and also a list of all [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) windows that belong to the main frame window.  \n  \n The `CDockingManager` class implements some services that you can use to find a pane or a `CPaneFrameWnd` window. You usually do not call these services directly because they are wrapped in the main frame window object. For more information, see [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md).  \n  \n## Customization Tips  \n The following tips apply to `CDockingManager` objects:  \n  \n- [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) supports these docking modes:  \n  \n    - `AFX_DOCK_TYPE::DT_IMMEDIATE`  \n  \n    - `AFX_DOCK_TYPE::DT_STANDARD`  \n  \n    - `AFX_DOCK_TYPE::DT_SMART`  \n  \n     These docking modes are defined by [CDockingManager::m_dockModeGlobal](#cdockingmanager__m_dockmodeglobal) and are set by calling [CDockingManager::SetDockingMode](#cdockingmanager__setdockingmode).  \n  \n-   If you want to create a non-floating, non-resizable pane, call the [CDockingManager::AddPane](#cdockingmanager__addpane) method. This method registers the pane with the docking manager, which is responsible for the layout of the pane.  \n  \n## Example  \n The following example demonstrates how to use various methods in the `CDockingManager` class to configure a `CDockingManager` object. The example shows how to display an additional button that opens a pop-up menu on the captions of all docking panes and how to set the docking mode of the object. This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_VisualStudioDemo#24](../../mfc/codesnippet/cpp/cdockingmanager-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CDockingManager](../../mfc/reference/cdockingmanager-class.md)  \n  \n## Requirements  \n **Header:** afxDockingManager.h  \n  \n##  <a name=\"cdockingmanager__adddocksite\"></a>  CDockingManager::AddDockSite  \n Creates a dock pane and adds it to the list of control bars.  \n  \n```  \nBOOL AddDockSite(\n    const AFX_DOCKSITE_INFO& info,  \n    CDockSite** ppDockBar = NULL);\n```  \n  \n### Parameters  \n [in] `info`  \n A reference to an info structure that contains dock pane alignment.  \n  \n [out] `ppDockBar`  \n A pointer to a pointer to the new dock pane.  \n  \n### Return Value  \n `TRUE` if the dock pane was created successfully; `FALSE` otherwise.  \n  \n##  <a name=\"cdockingmanager__addhiddenmditabbedbar\"></a>  CDockingManager::AddHiddenMDITabbedBar  \n Adds a handle to a bar pane to the list of hidden MDI tabbed bar panes.  \n  \n```  \nvoid AddHiddenMDITabbedBar(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to a bar pane  \n  \n##  <a name=\"cdockingmanager__addpane\"></a>  CDockingManager::AddPane  \n Registers a pane with the docking manager.  \n  \n```  \nBOOL AddPane(\n    CBasePane* pWnd,  \n    BOOL bTail = TRUE,  \n    BOOL bAutoHide = FALSE,  \n    BOOL bInsertForOuterEdge = FALSE);\n```  \n  \n### Parameters  \n [in, out] `pWnd`  \n Specifies the pane to add to the docking manager.  \n  \n [in] `bTail`  \n `TRUE` to add the pane to the end of the list of panes for the docking manager; otherwise, `FALSE`.  \n  \n [in] `bAutoHide`  \n For internal use only. Always use the default value `FALSE`.  \n  \n [in] `bInsertForOuterEdge`  \n For internal use only. Always use the default value `FALSE`.  \n  \n### Return Value  \n `TRUE` if the pane was successfully registered with the docking manager; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this method to register non-floating, non-resizable panes with the docking manager. If you do not register the panes, they will not appear correctly when the docking manager is laid out.  \n  \n##  <a name=\"cdockingmanager__adjustdockinglayout\"></a>  CDockingManager::AdjustDockingLayout  \n Recalculates and adjusts the layout of all panes in a frame window.  \n  \n```  \nvirtual void AdjustDockingLayout(HDWP hdwp = NULL);\n```  \n  \n### Parameters  \n [in] `hdwp`  \n Specifies the deferred window position structure. For more information, see [Windows Data Types](http://msdn.microsoft.com/library/windows/desktop/aa383751).  \n  \n### Remarks  \n  \n##  <a name=\"cdockingmanager__addminiframe\"></a>  CDockingManager::AddMiniFrame  \n Adds a frame to the list of mini frames.  \n  \n```  \nvirtual BOOL AddMiniFrame(CPaneFrameWnd* pWnd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n A pointer to a frame.  \n  \n### Return Value  \n `TRUE` if the frame is not in the list of mini frames and was added successfully; `FALSE` otherwise.  \n  \n##  <a name=\"cdockingmanager__adjustpaneframes\"></a>  CDockingManager::AdjustPaneFrames  \n Causes the `WM_NCCALCSIZE` message to be sent to all panes and `CPaneFrameWnd` windows.  \n  \n```  \nvirtual void AdjustPaneFrames();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cdockingmanager__adjustrecttoclientarea\"></a>  CDockingManager::AdjustRectToClientArea  \n Adjusts the alignment of a rectangle.  \n  \n```  \nvirtual BOOL AdjustRectToClientArea(\n    CRect& rectResult,  \n    DWORD dwAlignment);\n```  \n  \n### Parameters  \n [in] `rectResult`  \n A reference to a `CRect` object  \n  \n [in] `dwAlignment`  \n The alignment of the `CRect` object  \n  \n### Return Value  \n `TRUE` if the alignment of the `CRect` object was adjusted; `FALSE` otherwise.  \n  \n### Remarks  \n The `dwAlignment` parameter can have one of the following values:  \n  \n-   CBRS_ALIGN_TOP  \n  \n-   CBRS_ALIGN_BOTTOM  \n  \n-   CBRS_ALIGN_LEFT  \n  \n-   CBRS_ALIGN_RIGHT  \n  \n##  <a name=\"cdockingmanager__alignautohidepane\"></a>  CDockingManager::AlignAutoHidePane  \n Resizes a docking pane in autohide mode so that it takes the full width or height of the frameâ€™s client area surrounded by dock sites.  \n  \n```  \nvoid AlignAutoHidePane(\n    CPaneDivider* pDefaultSlider,  \n    BOOL bIsVisible = TRUE);\n```  \n  \n### Parameters  \n [in] `pDefaultSlider`  \n The docking slider pane.  \n  \n [in] `bIsVisible`  \n `TRUE` if the docking pane is visible; `FALSE` otherwise.  \n  \n##  <a name=\"cdockingmanager__autohidepane\"></a>  CDockingManager::AutoHidePane  \n Creates an autohide toolbar.  \n  \n```  \nCMFCAutoHideToolBar* AutoHidePane(\n    CDockablePane* pBar,  \n    CMFCAutoHideToolBar* pCurrAutoHideToolBar = NULL);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to the bar pane.  \n  \n [in] `pCurrAutoHideToolBar`  \n A pointer to an auto hide toolbar.  \n  \n### Return Value  \n `NULL` if the auto hide toolbar was not created; otherwise a pointer to the new toolbar.  \n  \n##  <a name=\"cdockingmanager__bringbarstotop\"></a>  CDockingManager::BringBarsToTop  \n Brings the docked bars that have the specified alignment to the top.  \n  \n```  \nvoid BringBarsToTop(\n    DWORD dwAlignment = 0,  \n    BOOL bExcludeDockedBars = TRUE);\n```  \n  \n### Parameters  \n [in] `dwAlignment`  \n The alignment of the dock bars that are brought to the top of other windows.  \n  \n [in] `bExcludeDockedBars`  \n `TRUE` to exclude the docked bars from being on top; otherwise `FALSE`.  \n  \n##  <a name=\"cdockingmanager__buildpanesmenu\"></a>  CDockingManager::BuildPanesMenu  \n Adds names of docking panes and toolbars to a menu.  \n  \n```  \nvoid BuildPanesMenu(\n    CMenu& menu,  \n    BOOL bToolbarsOnly);\n```  \n  \n### Parameters  \n [in] `menu`  \n A menu to add the names of docking panes and toolbars to.  \n  \n [in] `bToolbarsOnly`  \n `TRUE` to add only toolbar names to the menu; `FALSE` otherwise.  \n  \n##  <a name=\"cdockingmanager__calcexpecteddockedrect\"></a>  CDockingManager::CalcExpectedDockedRect  \n Calculates the expected rectangle of a docked window.  \n  \n```  \nvoid CalcExpectedDockedRect(\n    CWnd* pWnd,  \n    CPoint ptMouse,  \n    CRect& rectResult,  \n    BOOL& bDrawTab,  \n    CDockablePane** ppTargetBar);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n A pointer to the window to dock.  \n  \n [in] `ptMouse`  \n The mouse location.  \n  \n [out] `rectResult`  \n The calculated rectangle.  \n  \n [in] `bDrawTab`  \n `TRUE` to draw a tab; otherwise `FALSE`.  \n  \n [out] `ppTargetBar`  \n A pointer to a pointer to the target pane.  \n  \n### Remarks  \n This method calculates the rectangle that a window would occupy if a user dragged the window to the point specified by `ptMouse` and docked it there.  \n  \n##  <a name=\"cdockingmanager__create\"></a>  CDockingManager::Create  \n Creates a docking manager.  \n  \n```  \nBOOL Create(CFrameWnd* pParentWnd);\n```  \n  \n### Parameters  \n [in] `pParentWnd`  \n A pointer to the parent frame of the docking manager. This value must not be `NULL`.  \n  \n### Return Value  \n `TRUE` always.  \n  \n##  <a name=\"cdockingmanager__determinepaneandstatus\"></a>  CDockingManager::DeterminePaneAndStatus  \n Determines the pane that contains a given point and its docking status.  \n  \n```  \nvirtual AFX_CS_STATUS DeterminePaneAndStatus(\n    CPoint pt,  \n    int nSensitivity,  \n    DWORD dwEnabledAlignment,  \n    CBasePane** ppTargetBar,  \n    const CBasePane* pBarToIgnore,  \n    const CBasePane* pBarToDock);\n```  \n  \n### Parameters  \n [in] `pt`  \n The location of the pane to check.  \n  \n [in] `nSensitivity`  \n The value to increase the window rectangle of each checked pane. A pane satisfies the search criteria if the given point is in this increased region.  \n  \n [in] `dwEnabledAlignment`  \n The alignment of the docking pane.  \n  \n [out] `ppTargetBar`  \n A pointer to a pointer to the target pane.  \n  \n [in] `pBarToIgnore`  \n The pane that the method ignores.  \n  \n [in] `pBarToDock`  \n The pane that is docked.  \n  \n### Return Value  \n The docking status.  \n  \n### Remarks  \n The docking status can be one of the following values:  \n  \n|AFX_CS_STATUS value|Meaning|  \n|---------------------------|-------------|  \n|CS_NOTHING|The pointer is not over a dock site. Therefore, keep the pane floating.|  \n|CS_DOCK_IMMEDIATELY|The pointer is over the dock site in the immediate mode (DT_IMMEDIATE style is enabled), so the pane must be docked immediately.|  \n|CS_DELAY_DOCK|The pointer is over a dock site that is another docking pane or is an edge of the main frame.|  \n|CS_DELAY_DOCK_TO_TAB|The pointer is over a dock site that causes the pane to be docked in a tabbed window. This occurs when the mouse is over a caption of another docking pane or over a tab area of a tabbed pane.|  \n  \n##  <a name=\"cdockingmanager__disablerestoredockstate\"></a>  CDockingManager::DisableRestoreDockState  \n Enables or disables loading of docking layout from the registry.  \n  \n```  \nvoid DisableRestoreDockState(BOOL bDisable = TRUE);\n```  \n  \n### Parameters  \n [in] `bDisable`  \n `TRUE` to disable loading of docking layout from the registry; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this method when you must preserve the current layout of docking panes and toolbars when the application state is loading.  \n  \n##  <a name=\"cdockingmanager__dockpane\"></a>  CDockingManager::DockPane  \n Docks a pane to another pane or to a frame window.  \n  \n```  \nvoid DockPane(\n    CBasePane* pBar,  \n    UINT nDockBarID = 0,  \n    LPCRECT lpRect = NULL);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to a bar pane to dock to.  \n  \n [in] `nDockBarID`  \n The id of the bar to dock.  \n  \n [in] `lpRect`  \n The destination rectangle.  \n  \n##  <a name=\"cdockingmanager__dockpaneleftof\"></a>  CDockingManager::DockPaneLeftOf  \n Docks a pane to the left of another pane.  \n  \n```  \nBOOL DockPaneLeftOf(\n    CPane* pBarToDock,  \n    CPane* pTargetBar);\n```  \n  \n### Parameters  \n [in] `pBarToDock`  \n A pointer to the pane to be docked to the left of `pTargetBar`.  \n  \n [in] `pTargetBar`  \n A pointer to the target pane.  \n  \n### Return Value  \n `TRUE` if the pane was docked successfully; otherwise, `FALSE`.  \n  \n##  <a name=\"cdockingmanager__enableautohidepanes\"></a>  CDockingManager::EnableAutoHidePanes  \n Enables docking of the pane to the main frame, creates a dock pane, and adds it to the list of control bars.  \n  \n```  \nBOOL EnableAutoHidePanes(DWORD dwStyle);\n```  \n  \n### Parameters  \n [in] `dwStyle`  \n The docking alignment.  \n  \n### Return Value  \n `TRUE` if the dock pane was created successfully; `FALSE` otherwise.  \n  \n##  <a name=\"cdockingmanager__enabledocking\"></a>  CDockingManager::EnableDocking  \n Creates a dock pane and enables docking of the pane to the main frame.  \n  \n```  \nBOOL EnableDocking(DWORD dwStyle);\n```  \n  \n### Parameters  \n [in] `dwStyle`  \n The docking alignment.  \n  \n### Return Value  \n `TRUE` if the dock pane was created successfully; `FALSE` otherwise.  \n  \n##  <a name=\"cdockingmanager__enabledocksitemenu\"></a>  CDockingManager::EnableDockSiteMenu  \n Displays an additional button that opens a pop-up menu on the captions of all docking panes.  \n  \n```  \nstatic void EnableDockSiteMenu(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the dock site menu; otherwise, `FALSE`.  \n  \n### Remarks  \n The dock site menu displays the following options for changing the docking state of the pane:  \n  \n- `Floating` - Floats a pane  \n  \n- `Docking` - Docks a pane at the main frame at the location where the pane was last docked  \n  \n- `AutoHide` - Switches the pane to autohide mode  \n  \n- `Hide` - Hides a pane  \n  \n By default, this menu is not displayed.  \n  \n##  <a name=\"cdockingmanager__enablepanecontextmenu\"></a>  CDockingManager::EnablePaneContextMenu  \n Tells the library to display a special context menu that has a list of application toolbars and docking panes when the user clicks the right mouse button and the library is processing the WM_CONTEXTMENU message.  \n  \n```  \nvoid EnablePaneContextMenu(\n    BOOL bEnable,  \n    UINT uiCustomizeCmd,  \n    const CString& strCustomizeText,  \n    BOOL bToolbarsOnly = FALSE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n If `TRUE`, the library turns on the support for automatic context menu; if `FALSE` the library turns off the support for automatic context menu.  \n  \n [in] `uiCustomizeCmd`  \n A command id for the **Customize** item in the menu.  \n  \n [in] `strCustomizeText`  \n The text of the **Customize** item.  \n  \n [in] `bToolbarsOnly`  \n If `TRUE`, the menu displays only a list of application toolbars; if `FALSE`, the library adds application docking panes to this list.  \n  \n##  <a name=\"cdockingmanager__finddocksite\"></a>  CDockingManager::FindDockSite  \n Retrieves the bar pane that is at the specified position and that has the specified alignment.  \n  \n```  \nvirtual CDockSite* FindDockSite(\n    DWORD dwAlignment,  \n    BOOL bOuter);\n```  \n  \n### Parameters  \n [in] `dwAlignment`  \n The alignment of the bar pane.  \n  \n [in] `bOuter`  \n If `TRUE`, retrieve the bar in the head position in the list of control bars. Otherwise, retrieve the bar in the tail position in the list of control bars.  \n  \n### Return Value  \n The docking pane that has the specified alignment; `NULL` otherwise.  \n  \n##  <a name=\"cdockingmanager__findpanebyid\"></a>  CDockingManager::FindPaneByID  \n Finds a pane by the specified control ID.  \n  \n```  \nvirtual CBasePane* FindPaneByID(\n    UINT uBarID,  \n    BOOL bSearchMiniFrames = FALSE);\n```  \n  \n### Parameters  \n [in] `uBarID`  \n Specifies the control ID of the pane to find.  \n  \n [in] `bSearchMiniFrames`  \n `TRUE` to include all floating panes in the search. `FALSE` to include only the docked panes.  \n  \n### Return Value  \n The [CBasePane](../../mfc/reference/cbasepane-class.md) object that has the specified control ID, or `NULL` if the specified pane cannot be found.  \n  \n### Remarks  \n  \n##  <a name=\"cdockingmanager__finddocksitebypane\"></a>  CDockingManager::FindDockSiteByPane  \n Returns the bar pane that has the id of the target bar pane.  \n  \n```  \nvirtual CDockSite* FindDockSiteByPane(CPane* pTargetBar);\n```  \n  \n### Parameters  \n [in] `pTargetBar`  \n A pointer to the target bar pane.  \n  \n### Return Value  \n The bar pane that has the id of the target bar pane; `NULL` if no such bar pane exists.  \n  \n##  <a name=\"cdockingmanager__fixupvirtualrects\"></a>  CDockingManager::FixupVirtualRects  \n Commits all current toolbar positions to virtual rectangles.  \n  \n```  \nvirtual void FixupVirtualRects();\n```  \n  \n### Remarks  \n When the user starts to drag a toolbar, the application remembers its original position in the *virtual rectangle*. When the user moves a toolbar across its dock site, the toolbar may shift other toolbars. The original positions of the other toolbars are stored in the corresponding virtual rectangles.  \n  \n##  <a name=\"cdockingmanager__framefrompoint\"></a>  CDockingManager::FrameFromPoint  \n Returns the frame that contains the given point.  \n  \n```  \nvirtual CPaneFrameWnd* FrameFromPoint(\n    CPoint pt,  \n    CPaneFrameWnd* pFrameToExclude,  \n    BOOL bFloatMultiOnly) const;\n\n \n```  \n  \n### Parameters  \n [in] `pt`  \n Specifies the point, in screen coordinates, to check.  \n  \n [in] `pFrameToExclude`  \n A pointer to a frame to exclude.  \n  \n [in] `bFloatMultiOnly`  \n `TRUE` to exclude frames that are not instances of `CMultiPaneFrameWnd`; `FALSE` otherwise.  \n  \n### Return Value  \n The frame that contains the given point; `NULL` otherwise.  \n  \n##  <a name=\"cdockingmanager__getclientareabounds\"></a>  CDockingManager::GetClientAreaBounds  \n Gets the rectangle that contains the bounds of the client area.  \n  \n```  \nCRect GetClientAreaBounds() const;\n\n \nvoid GetClientAreaBounds(CRect& rcClient);\n```  \n  \n### Parameters  \n [out] `rcClient`  \n A reference to the rectangle that contains the bounds of the client area.  \n  \n### Return Value  \n The rectangle that contains the bounds of the client area.  \n  \n##  <a name=\"cdockingmanager__getdockingmode\"></a>  CDockingManager::GetDockingMode  \n Returns the current docking mode.  \n  \n```  \nstatic AFX_DOCK_TYPE GetDockingMode();\n```  \n  \n### Return Value  \n An enumerator value that represents the current docking mode. It can be one of the following values:  \n  \n- `DT_STANDARD`  \n  \n- `DT_IMMEDIATE`  \n  \n- `DT_SMART`  \n  \n### Remarks  \n To set the docking mode, call [CDockingManager::SetDockingMode](#cdockingmanager__setdockingmode).  \n  \n##  <a name=\"cdockingmanager__getdocksiteframewnd\"></a>  CDockingManager::GetDockSiteFrameWnd  \n Gets a pointer to the parent window frame.  \n  \n```  \nCFrameWnd* GetDockSiteFrameWnd() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the parent window frame.  \n  \n##  <a name=\"cdockingmanager__getenabledautohidealignment\"></a>  CDockingManager::GetEnabledAutoHideAlignment  \n Returns the enabled alignment of the panes.  \n  \n```  \nDWORD GetEnabledAutoHideAlignment() const;\n\n \n```  \n  \n### Return Value  \n A bitwise combination of `CBRS_ALIGN_` flags, or 0 if autohide panes are not enabled. For more information, see [CFrameWnd::EnableDocking](../../mfc/reference/cframewnd-class.md#cframewnd__enabledocking).  \n  \n### Remarks  \n The method returns the enabled alignment for autohide control bars. To enable autohide bars, call [CFrameWndEx::EnableAutoHidePanes](../../mfc/reference/cframewndex-class.md#cframewndex__enableautohidepanes).  \n  \n##  <a name=\"cdockingmanager__getminiframes\"></a>  CDockingManager::GetMiniFrames  \n Gets a list of miniframes.  \n  \n```  \nconst CObList& GetMiniFrames() const;\n\n \n```  \n  \n### Return Value  \n A list of miniframes that contain the control bars that belong to the docking manager.  \n  \n##  <a name=\"cdockingmanager__getouteredgebounds\"></a>  CDockingManager::GetOuterEdgeBounds  \n Gets a rectangle that contains the outer edges of the frame.  \n  \n```  \nCRect GetOuterEdgeBounds() const;\n\n \n```  \n  \n### Return Value  \n A rectangle that contains the outer edges of the frame.  \n  \n##  <a name=\"cdockingmanager__getpanelist\"></a>  CDockingManager::GetPaneList  \n Returns a list of panes that belong to the docking manager. This includes all floating panes.  \n  \n```  \nvoid GetPaneList(\n    CObList& lstBars,  \n    BOOL bIncludeAutohide = FALSE,  \n    CRuntimeClass* pRTCFilter = NULL,  \n    BOOL bIncludeTabs = FALSE);\n```  \n  \n### Parameters  \n [in, out] `lstBars`  \n Contains all the panes of the current docking manager.  \n  \n [in] `bIncludeAutohide`  \n `TRUE` to include the panes that are in autohide mode; otherwise, `FALSE`.  \n  \n [in] `pRTCFilter`  \n If not `NULL`, the returned list contains panes only of the specified runtime class.  \n  \n [in] `bIncludeTabs`  \n `TRUE` to include tabs; otherwise, `FALSE`.  \n  \n### Remarks  \n If there are any tabbed panes in the docking manager, the method returns pointers to [CBaseTabbedPane Class](../../mfc/reference/cbasetabbedpane-class.md) objects and you must enumerate the tabs explicitly.  \n  \n Use `pRTCFilter` to obtain a particular class of panes. For example, you can obtain only toolbars by setting this value appropriately.  \n  \n##  <a name=\"cdockingmanager__getsmartdockingmanager\"></a>  CDockingManager::GetSmartDockingManager  \n Retrieves a pointer to the smart docking manager.  \n  \n```  \nCSmartDockingManager* GetSmartDockingManager();\n```  \n  \n### Return Value  \n A pointer to the [smart docking manager](http://msdn.microsoft.com/en-us/f537a1a6-fb9e-41d7-952f-0f25d5ee7534).  \n  \n##  <a name=\"cdockingmanager__getsmartdockingmanagerpermanent\"></a>  CDockingManager::GetSmartDockingManagerPermanent  \n Retrieves a pointer to the smart docking manager.  \n  \n```  \nCSmartDockingManager* GetSmartDockingManagerPermanent() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the smart docking manager.  \n  \n##  <a name=\"cdockingmanager__getsmartdockingparams\"></a>  CDockingManager::GetSmartDockingParams  \n Returns the smart docking parameters for the docking manager.  \n  \n```  \nstatic CSmartDockingInfo& GetSmartDockingParams();\n```  \n  \n### Return Value  \n The class that contains the smart docking parameters for the current docking manager. For more information, see [CSmartDockingInfo Class](../../mfc/reference/csmartdockinginfo-class.md).  \n  \n### Remarks  \n  \n##  <a name=\"cdockingmanager__hideautohidepanes\"></a>  CDockingManager::HideAutoHidePanes  \n Hides a pane that is in autohide mode.  \n  \n```  \nvoid HideAutoHidePanes(\n    CDockablePane* pBarToExclude = NULL,  \n    BOOL bImmediately = FALSE);\n```  \n  \n### Parameters  \n [in] `pBarToExclude`  \n A pointer to a bar to exclude from hiding.  \n  \n [in] `bImmediately`  \n `TRUE` to hide the pane immediately; `FALSE` to hide the pane with the autohide effect.  \n  \n##  <a name=\"cdockingmanager__insertdocksite\"></a>  CDockingManager::InsertDockSite  \n Creates a dock pane and inserts it into the list of control bars.  \n  \n```  \nBOOL InsertDockSite(\n    const AFX_DOCKSITE_INFO& info,  \n    DWORD dwAlignToInsertAfter,  \n    CDockSite** ppDockBar = NULL);\n```  \n  \n### Parameters  \n [in] `info`  \n A structure that contains the alignment information about the dock pane.  \n  \n [in] `dwAlignToInsertAfter`  \n Alignment of the dock pane.  \n  \n [out] `ppDockBar`  \n A pointer to a pointer to a dock pane.  \n  \n### Return Value  \n `TRUE` if the dock pane was created successfully; `FALSE` otherwise.  \n  \n##  <a name=\"cdockingmanager__insertpane\"></a>  CDockingManager::InsertPane  \n Inserts a control pane into the list of control bars.  \n  \n```  \nBOOL InsertPane(\n    CBasePane* pControlBar,  \n    CBasePane* pTarget,  \n    BOOL bAfter = TRUE);\n```  \n  \n### Parameters  \n [in] `pControlBar`  \n A pointer to a control pane.  \n  \n [in] `pTarget`  \n A pointer to a target pane.  \n  \n [in] `bAfter`  \n `TRUE` to insert the pane after the position of the target pane; `FALSE` otherwise.  \n  \n### Return Value  \n `TRUE` if the control pane is successfully added to the list of control bars; `FALSE` otherwise.  \n  \n### Remarks  \n This method returns false if the control pane is already in the list of control bars or if the target pane does not exist in the list of control bars.  \n  \n##  <a name=\"cdockingmanager__isdocksitemenu\"></a>  CDockingManager::IsDockSiteMenu  \n Specifies whether a pop-up menu is displayed on the captions of all panes.  \n  \n```  \nstatic BOOL IsDockSiteMenu();\n```  \n  \n### Return Value  \n `TRUE` if a dock site menu is displayed on the captions of all docking panes; otherwise `FALSE`.  \n  \n### Remarks  \n You can enable the dock site menu by calling [CDockingManager::EnableDockSiteMenu](#cdockingmanager__enabledocksitemenu).  \n  \n##  <a name=\"cdockingmanager__isinadjustlayout\"></a>  CDockingManager::IsInAdjustLayout  \n Determines if the layouts of all panes are adjusted.  \n  \n```  \nBOOL IsInAdjustLayout() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the layouts of all panes are adjusted; `FALSE` otherwise.  \n  \n##  <a name=\"cdockingmanager__isolecontainermode\"></a>  CDockingManager::IsOLEContainerMode  \n Specifies whether the docking manager is in OLE container mode.  \n  \n```  \nBOOL IsOLEContainerMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the docking manager is in OLE container mode; otherwise, `FALSE`.  \n  \n### Remarks  \n In OLE container mode, all docking panes and application toolbars are hidden. The panes are also hidden in this mode if you have set [CDockingManager::m_bHideDockingBarsInContainerMode](#cdockingmanager__m_bhidedockingbarsincontainermode) to `TRUE`.  \n  \n##  <a name=\"cdockingmanager__ispointneardocksite\"></a>  CDockingManager::IsPointNearDockSite  \n Determines whether a specified point is near the dock site.  \n  \n```  \nBOOL IsPointNearDockSite(\n    CPoint point,  \n    DWORD& dwBarAlignment,  \n    BOOL& bOuterEdge) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n The specified point.  \n  \n [out] `dwBarAlignment`  \n Specifies which edge the point is near. Possible values are `CBRS_ALIGN_LEFT`, `CBRS_ALIGN_RIGHT`, `CBRS_ALIGN_TOP`, and `CBRS_ALIGN_BOTTOM`.  \n  \n [out] `bOuterEdge`  \n `TRUE` if the point is near the outer border of the dock site; `FALSE` otherwise.  \n  \n### Return Value  \n `TRUE` if the point is near the dock site; otherwise `FALSE`.  \n  \n##  <a name=\"cdockingmanager__isprintpreviewvalid\"></a>  CDockingManager::IsPrintPreviewValid  \n Determines if the print preview mode is set.  \n  \n```  \nBOOL IsPrintPreviewValid() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the print preview mode is set; `FALSE` otherwise.  \n  \n##  <a name=\"cdockingmanager__loadstate\"></a>  CDockingManager::LoadState  \n Loads the docking manager's state from the registry.  \n  \n```  \nvirtual BOOL LoadState(\n    LPCTSTR lpszProfileName = NULL,  \n    UINT uiID = (UINT) -1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n Profile name.  \n  \n [in] `uiID`  \n The id of the docking manager.  \n  \n### Return Value  \n `TRUE` if the docking manager state was loaded successfully; otherwise `FALSE`.  \n  \n##  <a name=\"cdockingmanager__lockupdate\"></a>  CDockingManager::LockUpdate  \n Locks the given window.  \n  \n```  \nvoid LockUpdate(BOOL bLock);\n```  \n  \n### Parameters  \n [in] `bLock`  \n `TRUE` if the window is locked; `FALSE` otherwise.  \n  \n### Remarks  \n When a window is locked, it cannot be moved and it cannot be redrawn.  \n  \n##  <a name=\"cdockingmanager__m_bhidedockingbarsincontainermode\"></a>  CDockingManager::m_bHideDockingBarsInContainerMode  \n Specifies whether the docking manager hides panes in OLE container mode.  \n  \n```  \nAFX_IMPORT_DATA static BOOL m_bHideDockingBarsInContainerMode;  \n```  \n  \n### Remarks  \n Set this value to `FALSE` if you want to keep all panes docked to the main frame visible when the application is in OLE container mode. By default, this value is `TRUE`.  \n  \n##  <a name=\"cdockingmanager__m_dockmodeglobal\"></a>  CDockingManager::m_dockModeGlobal  \n Specifies the global docking mode.  \n  \n```  \nAFX_IMPORT_DATA static AFX_DOCK_TYPE m_dockModeGlobal;  \n```  \n  \n### Remarks  \n By default, each docking pane uses this docking mode. For more information about the values that this field can be set to, see [CBasePane::GetDockingMode](../../mfc/reference/cbasepane-class.md#cbasepane__getdockingmode).  \n  \n##  <a name=\"cdockingmanager__m_ndocksensitivity\"></a>  CDockingManager::m_nDockSensitivity  \n Specifies the docking sensitivity.  \n  \n```  \nAFX_IMPORT_DATA static int m_nDockSensitivity;  \n```  \n  \n### Remarks  \n The docking sensitivity defines how close a floating pane can approach a docking pane, docking site, or another pane before the framework changes its state to docked.  \n  \n##  <a name=\"cdockingmanager__m_ntimeoutbeforedockingbardock\"></a>  CDockingManager::m_nTimeOutBeforeDockingBarDock  \n Specifies the time, in milliseconds, before a docking pane is docked in immediate docking mode.  \n  \n```  \nstatic UINT m_nTimeOutBeforeDockingBarDock;  \n```  \n  \n### Remarks  \n Before a pane is docked, the framework waits the specified length of time. This prevents the pane from being accidentally docked to a location while the user is still dragging it.  \n  \n##  <a name=\"cdockingmanager__m_ntimeoutbeforetoolbardock\"></a>  CDockingManager::m_nTimeOutBeforeToolBarDock  \n Specifies the time, in milliseconds, before a toolbar is docked to the main frame window.  \n  \n```  \nstatic UINT m_nTimeOutBeforeToolBarDock;  \n```  \n  \n### Remarks  \n Before a toolbar is docked, the framework waits the specified length of time. This prevents the toolbar from being accidentally docked to a location while the user is still dragging it.  \n  \n##  <a name=\"cdockingmanager__onactivateframe\"></a>  CDockingManager::OnActivateFrame  \n Called by the framework when the frame window is made active or is deactivated.  \n  \n```  \nvirtual void OnActivateFrame(BOOL bActivate);\n```  \n  \n### Parameters  \n [in] `bActivate`  \n If `TRUE`, the frame window is made active; if `FALSE`, the frame window is deactivated.  \n  \n##  <a name=\"cdockingmanager__onclosepopupmenu\"></a>  CDockingManager::OnClosePopupMenu  \n Called by the framework when an active pop-up menu processes a WM_DESTROY message.  \n  \n```  \nvoid OnClosePopupMenu();\n```  \n  \n### Remarks  \n The framework sends a WM_DESTROY message when it is about to close the current main window. Override this method to handle notifications from `CMFCPopupMenu` objects that belong to the frame window when a `CMFCPopupMenu` object processes a `WM_DESTROY` message.  \n  \n##  <a name=\"cdockingmanager__onmoveminiframe\"></a>  CDockingManager::OnMoveMiniFrame  \n Called by the framework to move a mini-frame window.  \n  \n```  \nvirtual BOOL OnMoveMiniFrame(CWnd* pFrame);\n```  \n  \n### Parameters  \n [in] `pFrame`  \n A pointer to a mini-frame window.  \n  \n### Return Value  \n `TRUE` if the method succeeds; otherwise `FALSE`.  \n  \n##  <a name=\"cdockingmanager__onpanecontextmenu\"></a>  CDockingManager::OnPaneContextMenu  \n Called by the framework when it builds a menu that has a list of panes.  \n  \n```  \nvoid OnPaneContextMenu(CPoint point);\n```  \n  \n### Parameters  \n [in] `point`  \n Specifies the location of the menu.  \n  \n##  <a name=\"cdockingmanager__panefrompoint\"></a>  CDockingManager::PaneFromPoint  \n Returns the pane that contains the given point.  \n  \n```  \nvirtual CBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    bool bExactBar = false,  \n    CRuntimeClass* pRTCBarType = NULL,  \n    BOOL bCheckVisibility = FALSE,  \n    const CBasePane* pBarToIgnore = NULL) const;\n\n \nvirtual CBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    DWORD& dwAlignment,  \n    CRuntimeClass* pRTCBarType = NULL,  \n    const CBasePane* pBarToIgnore = NULL) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n Specifies the point, in screen coordinates, to check.  \n  \n [in] `nSensitivity`  \n The value to inflate the window rectangle of each checked pane. A pane satisfies the search criteria if the given point is in this inflated region.  \n  \n [in] `bExactBar`  \n `TRUE` to ignore the `nSensitivity` parameter; otherwise, `FALSE`.  \n  \n [in] `pRTCBarType`  \n If not `NULL`, the method searches only the panes of the specified type.  \n  \n [in] `bCheckVisibility`  \n `TRUE` to check only visible panes; otherwise, `FALSE`.  \n  \n [out] `dwAlignment`  \n If a pane is found at the specified point, this parameter contains the side of the pane that was closest to the specified point. For more information, see the Remarks section.  \n  \n [in] `pBarToIgnore`  \n If not `NULL`, the method ignores panes specified by this parameter.  \n  \n### Return Value  \n The [CBasePane](../../mfc/reference/cbasepane-class.md)-derived object that contains the given point, or `NULL` if no pane was found.  \n  \n### Remarks  \n When the function returns and a pane was found, `dwAlignment` contains the alignment of the specified point. For example, if the point was closest to the top of the pane, `dwAlignment` is set to `CBRS_ALIGN_TOP`.  \n  \n##  <a name=\"cdockingmanager__processpanecontextmenucommand\"></a>  CDockingManager::ProcessPaneContextMenuCommand  \n Called by the framework to select or to clear a check box for the specified command and recalculate the layout of a shown pane.  \n  \n```  \nBOOL ProcessPaneContextMenuCommand(\n    UINT nID,  \n    int nCode,  \n    void* pExtra,  \n    AFX_CMDHANDLERINFO* pHandlerInfo);\n```  \n  \n### Parameters  \n [in] `nID`  \n The id of a control bar in the menu.  \n  \n [in] `nCode`  \n The command notification code.  \n  \n [in] `pExtra`  \n A pointer to void that is casted to a pointer to `CCmdUI` if `nCode` is CN_UPDATE_COMMAND_UI.  \n  \n [in] `pHandlerInfo`  \n A pointer to an info structure. This parameter is not used.  \n  \n### Return Value  \n `TRUE` if `pEXtra` is not NULL and `nCode` equals CN_UPDATE_COMMAND_UI, or if there is a control bar with the specified `nID`.  \n  \n##  <a name=\"cdockingmanager__recalclayout\"></a>  CDockingManager::RecalcLayout  \n Recalculates the internal layout of the controls present in the list of controls.  \n  \n```  \nvirtual void RecalcLayout(BOOL bNotify = TRUE);\n```  \n  \n### Parameters  \n [in] `bNotify`  \n This parameter is not used.  \n  \n##  <a name=\"cdockingmanager__releaseemptypanecontainers\"></a>  CDockingManager::ReleaseEmptyPaneContainers  \n Releases the empty pane containers.  \n  \n```  \nvoid ReleaseEmptyPaneContainers();\n```  \n  \n##  <a name=\"cdockingmanager__removehiddenmditabbedbar\"></a>  CDockingManager::RemoveHiddenMDITabbedBar  \n Removes the specified hidden bar pane.  \n  \n```  \nvoid RemoveHiddenMDITabbedBar(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to a bar pane to remove.  \n  \n##  <a name=\"cdockingmanager__removeminiframe\"></a>  CDockingManager::RemoveMiniFrame  \n Removes a specified frame from the list of mini frames.  \n  \n```  \nvirtual BOOL RemoveMiniFrame(CPaneFrameWnd* pWnd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n A pointer to a frame to remove.  \n  \n### Return Value  \n `TRUE` if the specified frame is removed; `FALSE` otherwise.  \n  \n##  <a name=\"cdockingmanager__removepanefromdockmanager\"></a>  CDockingManager::RemovePaneFromDockManager  \n Unregisters a pane and removes it from the list in the docking manager.  \n  \n```  \nvoid RemovePaneFromDockManager(\n    CBasePane* pWnd,  \n    BOOL bDestroy,  \n    BOOL bAdjustLayout,  \n    BOOL bAutoHide = FALSE,  \n    CBasePane* pBarReplacement = NULL);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n A pointer to a pane to be removed.  \n  \n [in] `bDestroy`  \n If `TRUE`, the removed pane is destroyed.  \n  \n [in] `bAdjustLayout`  \n If `TRUE`, adjust the docking layout immediately.  \n  \n [in] `bAutoHide`  \n If `TRUE`, the pane is removed from the list of autohide bars. If `FALSE`, the pane is removed from the list of regular panes.  \n  \n [in] `pBarReplacement`  \n A pointer to a pane that replaces the removed pane.  \n  \n##  <a name=\"cdockingmanager__replacepane\"></a>  CDockingManager::ReplacePane  \n Replaces one pane with another.  \n  \n```  \nBOOL ReplacePane(\n    CDockablePane* pOriginalBar,  \n    CDockablePane* pNewBar);\n```  \n  \n### Parameters  \n [in] `pOriginalBar`  \n A pointer to the original pane.  \n  \n [in] `pNewBar`  \n A pointer to the pane that replaces the original pane.  \n  \n### Return Value  \n `TRUE` if the pane is successfully replaced; `FALSE` otherwise.  \n  \n##  <a name=\"cdockingmanager__resortminiframesforzorder\"></a>  CDockingManager::ResortMiniFramesForZOrder  \n Resorts the frames in the list of mini frames.  \n  \n```  \nvoid ResortMiniFramesForZOrder();\n```  \n  \n##  <a name=\"cdockingmanager__savestate\"></a>  CDockingManager::SaveState  \n Saves the docking manager's state to the registry.  \n  \n```  \nvirtual BOOL SaveState(\n    LPCTSTR lpszProfileName = NULL,  \n    UINT uiID = (UINT) -1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n A path to a registry key.  \n  \n [in] `uiID`  \n The docking manager ID.  \n  \n### Return Value  \n `TRUE` if the state was saved successfully; otherwise `FALSE`.  \n  \n### Remarks  \n Saving the docking manager's state to the registry involves saving the states of the control bars, the states of the autohide bars, and the states of the mini frames present in the docking manager.  \n  \n##  <a name=\"cdockingmanager__sendmessagetominiframes\"></a>  CDockingManager::SendMessageToMiniFrames  \n Sends the specified message to all mini frames.  \n  \n```  \nBOOL SendMessageToMiniFrames(\n    UINT uMessage,  \n    WPARAM wParam = 0,  \n    LPARAM lParam = 0);\n```  \n  \n### Parameters  \n [in] `uMessage`  \n The message to be sent.  \n  \n [in] `wParam`  \n Additional message dependent information.  \n  \n [in] `lParam`  \n Additional message dependent information.  \n  \n### Return Value  \n `TRUE` always.  \n  \n##  <a name=\"cdockingmanager__serialize\"></a>  CDockingManager::Serialize  \n Writes the docking manager to an archive.  \n  \n```  \nvoid Serialize(CArchive& ar);\n```  \n  \n### Parameters  \n [in] `ar`  \n A reference to an archive object.  \n  \n### Remarks  \n Writing the docking manager to an archive involves determining the number of docking control bars and sliders, and writing the control bars, the mini frames, the autohide bars, and the MDI tabbed bars to the archive.  \n  \n##  <a name=\"cdockingmanager__setautohidezorder\"></a>  CDockingManager::SetAutohideZOrder  \n Sets the size, width, and height of the control bars and the specified pane.  \n  \n```  \nvoid SetAutohideZOrder(CDockablePane* pAHDockingBar);\n```  \n  \n### Parameters  \n [in] `pAHDockingBar`  \n A pointer to a dockable pane.  \n  \n##  <a name=\"cdockingmanager__setdockingmode\"></a>  CDockingManager::SetDockingMode  \n Sets the docking mode.  \n  \n```  \nstatic void SetDockingMode(\n    AFX_DOCK_TYPE dockMode,  \n    AFX_SMARTDOCK_THEME theme = AFX_SDT_DEFAULT);\n```  \n  \n### Parameters  \n `dockMode`  \n Specifies the new docking mode. For more information, see the Remarks section.  \n  \n `theme`  \n Specifies the theme to be used for smart docking markers. It can be  one of the following enumerated values: AFX_SDT_DEFAULT, AFX_SDT_VS2005, AFX_SDT_VS2008.  \n  \n### Remarks  \n Call this static method to set the docking mode.  \n  \n `dockMode` can be one of following values:  \n  \n- `DT_STANDARD` - Standard docking mode as implemented in Visual Studio .NET 2003. Panes are dragged without a dragging context.  \n  \n- `DT_IMMEDIATE` - Immediate docking mode as implemented in Microsoft Visio. Panes are dragged with a dragging context, but no markers are displayed.  \n  \n- `DT_SMART` - Smart docking mode as implemented in Visual Studio 2005. Panes are dragged with a dragging context and smart markers are displayed that show where the pane can be docked.  \n  \n##  <a name=\"cdockingmanager__setdockstate\"></a>  CDockingManager::SetDockState  \n Sets the docking state of the control bars, the mini frames, and the autohide bars.  \n  \n```  \nvirtual void SetDockState();\n```  \n  \n##  <a name=\"cdockingmanager__setprintpreviewmode\"></a>  CDockingManager::SetPrintPreviewMode  \n Sets the print preview mode of the bars that are displayed in the print preview.  \n  \n```  \nvoid SetPrintPreviewMode(\n    BOOL bPreview,  \n    CPrintPreviewState* pState);\n```  \n  \n### Parameters  \n [in] `bPreview`  \n `TRUE` if print preview mode is set; `FALSE` otherwise.  \n  \n [in] `pState`  \n A pointer to a preview state. This parameter is not used.  \n  \n##  <a name=\"cdockingmanager__setsmartdockingparams\"></a>  CDockingManager::SetSmartDockingParams  \n Sets the parameters that define the behavior of smart docking.  \n  \n```  \nstatic void SetSmartDockingParams(CSmartDockingInfo& params);\n```  \n  \n### Parameters  \n [in, out] `params`  \n Defines the parameters for smart docking.  \n  \n### Remarks  \n Call this method if you want to customize the appearance, color, or shape of the smart docking markers.  \n  \n To use the default look for smart docking markers, pass an uninitialized instance of [CSmartDockingInfo Class](../../mfc/reference/csmartdockinginfo-class.md) to `params`.  \n  \n##  <a name=\"cdockingmanager__showdelayshowminiframes\"></a>  CDockingManager::ShowDelayShowMiniFrames  \n Shows or hides the windows of the mini frames.  \n  \n```  \nvoid ShowDelayShowMiniFrames(BOOL bshow);\n```  \n  \n### Parameters  \n [in] `bShow`  \n `TRUE` to make the window of the shown frame active; `FALSE to` hide the window of the frame.  \n  \n##  <a name=\"cdockingmanager__showpanes\"></a>  CDockingManager::ShowPanes  \n Shows or hides the panes of the control and autohide bars.  \n  \n```  \nvirtual BOOL ShowPanes(BOOL bShow);\n```  \n  \n### Parameters  \n [in] `bShow`  \n `TRUE` to show the panes; `FALSE to` hide the panes.  \n  \n### Return Value  \n Always `FALSE`.  \n  \n##  <a name=\"cdockingmanager__startsdocking\"></a>  CDockingManager::StartSDocking  \n Starts the smart docking of the specified window according to the alignment of the smart docking manager.  \n  \n```  \nvoid StartSDocking(CWnd* pDockingWnd);\n```  \n  \n### Parameters  \n [in] `pDockingWnd`  \n A pointer to a window to dock.  \n  \n##  <a name=\"cdockingmanager__stopsdocking\"></a>  CDockingManager::StopSDocking  \n Stops smart docking.  \n  \n```  \nvoid StopSDocking();\n```  \n  \n##  <a name=\"cdockingmanager__getsmartdockingtheme\"></a>  CDockingManager::GetSmartDockingTheme  \n A static method that returns a theme used to display smart docking markers.  \n  \n```  \nstatic AFX_SMARTDOCK_THEME __stdcall GetSmartDockingTheme();\n```  \n  \n### Return Value  \n Returns one of the following enumerated values: AFX_SDT_DEFAULT, AFX_SDT_VS2005, AFX_SDT_VS2008.  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [CFrameWndEx Class](../../mfc/reference/cframewndex-class.md)   \n [CDockablePane Class](../../mfc/reference/cdockablepane-class.md)   \n [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md)\n"}