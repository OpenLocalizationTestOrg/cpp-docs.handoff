{"nodes":[{"pos":[12,51],"content":"_com_ptr_t::operator = | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_com_ptr_t::operator = | Microsoft Docs","pos":[0,39]}]},{"content":"_com_ptr_t::operator =","pos":[737,759]},{"content":"Microsoft Specific","pos":[762,780]},{"pos":[789,844],"content":"Assigns a new value to an existing <ph id=\"ph1\">`_com_ptr_t`</ph> object.","source":"Assigns a new value to an existing `_com_ptr_t` object."},{"content":"Syntax","pos":[853,859]},{"content":"Remarks","pos":[2684,2691]},{"pos":[2695,2752],"content":"Assigns an interface pointer to this <ph id=\"ph1\">`_com_ptr_t`</ph> object.","source":"Assigns an interface pointer to this `_com_ptr_t` object."},{"content":"END Microsoft Specific","pos":[2761,2783]},{"content":"See Also","pos":[2794,2802]},{"content":"_com_ptr_t Class","pos":[2807,2823]}],"content":"---\ntitle: \"_com_ptr_t::operator = | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"_com_ptr_t.operator=\"\n  - \"_com_ptr_t::operator=\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator =, pointers\"\n  - \"= operator, with specific Visual C++ objects\"\n  - \"operator=, pointers\"\nms.assetid: 46849455-371c-4d0f-bae4-c1f737d2ca4a\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _com_ptr_t::operator =\n**Microsoft Specific**  \n  \n Assigns a new value to an existing `_com_ptr_t` object.  \n  \n## Syntax  \n  \n```  \n  \n      template<typename _OtherIID>   \n_com_ptr_t& operator=(   \n   const _com_ptr_t<_OtherIID>& p   \n);  \n  \n// Sets a smart pointer to be a different smart pointer of a different   \n// type or a different raw interface pointer. QueryInterface is called   \n// to find an interface pointer of this smart pointer's type, and   \n// Release is called to decrement the reference count for the previously   \n// encapsulated pointer. If QueryInterface fails with an E_NOINTERFACE,   \n// a NULL smart pointer results.  \ntemplate<typename _InterfaceType>   \n_com_ptr_t& operator=(   \n   _InterfaceType* p   \n);  \n  \n// Encapsulates a raw interface pointer of this smart pointer's type.   \n// AddRef is called to increment the reference count for the encapsulated  \n// interface pointer, and Release is called to decrement the reference   \n// count for the previously encapsulated pointer.  \ntemplate<> _com_ptr_t&    \noperator=(   \n   Interface* pInterface   \n) throw();  \n  \n// Sets a smart pointer to be a copy of another instance of the same   \n// smart pointer of the same type. AddRef is called to increment the   \n// reference count for the encapsulated interface pointer, and Release   \n// is called to decrement the reference count for the previously   \n// encapsulated pointer.  \n_com_ptr_t& operator=(   \n   const _com_ptr_t& cp   \n) throw();  \n  \n// Sets a smart pointer to NULL. The NULL argument must be a zero.  \n_com_ptr_t& operator=(   \n   int null   \n);  \n// Sets a smart pointer to be a _variant_t object. The encapsulated   \n// VARIANT must be of type VT_DISPATCH or VT_UNKNOWN, or it can be   \n// converted to one of these two types. If QueryInterface fails with an   \n// E_NOINTERFACE error, a NULL smart pointer results.  \n_com_ptr_t& operator=(   \n   const _variant_t& varSrc   \n);  \n```  \n  \n## Remarks  \n Assigns an interface pointer to this `_com_ptr_t` object.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [_com_ptr_t Class](../cpp/com-ptr-t-class.md)"}