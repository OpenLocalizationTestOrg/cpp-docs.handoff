{"nodes":[{"pos":[12,35],"content":"calloc | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"calloc | Microsoft Docs","pos":[0,23]}]},{"pos":[958,964],"content":"calloc","linkify":"calloc","nodes":[{"content":"calloc","pos":[0,6]}]},{"content":"Allocates an array in memory with elements initialized to 0.","pos":[965,1025]},{"pos":[1034,1040],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1123,1133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Number of elements.","pos":[1146,1165]},{"content":"Length in bytes of each element.","pos":[1182,1214]},{"pos":[1223,1235],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`calloc`</ph> returns a pointer to the allocated space.","pos":[1239,1289],"source":"`calloc` returns a pointer to the allocated space."},{"content":"The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object.","pos":[1290,1410]},{"content":"To get a pointer to a type other than <ph id=\"ph1\">`void`</ph>, use a type cast on the return value.","pos":[1411,1493],"source":" To get a pointer to a type other than `void`, use a type cast on the return value."},{"pos":[1502,1509],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`calloc`</ph> function allocates storage space for an array of <ph id=\"ph2\">`num`</ph> elements, each of length <ph id=\"ph3\">`size`</ph> bytes.","pos":[1513,1619],"source":"The `calloc` function allocates storage space for an array of `num` elements, each of length `size` bytes."},{"content":"Each element is initialized to 0.","pos":[1620,1653]},{"content":"<ph id=\"ph1\">`calloc`</ph> sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`ENOMEM`</ph> if a memory allocation fails or if the amount of memory requested exceeds <ph id=\"ph4\">`_HEAP_MAXREQ`</ph>.","pos":[1660,1783],"source":"`calloc` sets `errno` to `ENOMEM` if a memory allocation fails or if the amount of memory requested exceeds `_HEAP_MAXREQ`."},{"content":"For information on this and other error codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[1784,1951],"source":" For information on this and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"<ph id=\"ph1\">`calloc`</ph> calls <ph id=\"ph2\">`malloc`</ph> to use the C++ <bpt id=\"p1\">[</bpt>_set_new_mode<ept id=\"p1\">](../../c-runtime-library/reference/set-new-mode.md)</ept> function to set the new handler mode.","pos":[1958,2101],"source":"`calloc` calls `malloc` to use the C++ [_set_new_mode](../../c-runtime-library/reference/set-new-mode.md) function to set the new handler mode."},{"content":"The new handler mode indicates whether, on failure, <ph id=\"ph1\">`malloc`</ph> is to call the new handler routine as set by <bpt id=\"p1\">[</bpt>_set_new_handler<ept id=\"p1\">](../../c-runtime-library/reference/set-new-handler.md)</ept>.","pos":[2102,2281],"source":" The new handler mode indicates whether, on failure, `malloc` is to call the new handler routine as set by [_set_new_handler](../../c-runtime-library/reference/set-new-handler.md)."},{"content":"By default, <ph id=\"ph1\">`malloc`</ph> does not call the new handler routine on failure to allocate memory.","pos":[2282,2371],"source":" By default, `malloc` does not call the new handler routine on failure to allocate memory."},{"content":"You can override this default behavior so that, when <ph id=\"ph1\">`calloc`</ph> fails to allocate memory, <ph id=\"ph2\">`malloc`</ph> calls the new handler routine in the same way that the <ph id=\"ph3\">`new`</ph> operator does when it fails for the same reason.","pos":[2372,2578],"source":" You can override this default behavior so that, when `calloc` fails to allocate memory, `malloc` calls the new handler routine in the same way that the `new` operator does when it fails for the same reason."},{"content":"To override the default, call","pos":[2579,2608]},{"pos":[2649,2759],"content":"early in your program, or link with NEWMODE.OBJ (see <bpt id=\"p1\">[</bpt>Link Options<ept id=\"p1\">](../../c-runtime-library/link-options.md)</ept>).","source":"early in your program, or link with NEWMODE.OBJ (see [Link Options](../../c-runtime-library/link-options.md))."},{"content":"When the application is linked with a debug version of the C run-time libraries, <ph id=\"ph1\">`calloc`</ph> resolves to <bpt id=\"p1\">[</bpt>_calloc_dbg<ept id=\"p1\">](../../c-runtime-library/reference/calloc-dbg.md)</ept>.","pos":[2766,2931],"source":"When the application is linked with a debug version of the C run-time libraries, `calloc` resolves to [_calloc_dbg](../../c-runtime-library/reference/calloc-dbg.md)."},{"content":"For more information about how the heap is managed during the debugging process, see <bpt id=\"p1\">[</bpt>The CRT Debug Heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2932,3085],"source":" For more information about how the heap is managed during the debugging process, see [The CRT Debug Heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"<ph id=\"ph1\">`calloc`</ph> is marked <ph id=\"ph2\">`__declspec(noalias)`</ph> and <ph id=\"ph3\">`__declspec(restrict)`</ph>, meaning that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased.","pos":[3092,3278],"source":"`calloc` is marked `__declspec(noalias)` and `__declspec(restrict)`, meaning that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>noalias<ept id=\"p1\">](../../cpp/noalias.md)</ept> and <bpt id=\"p2\">[</bpt>restrict<ept id=\"p2\">](../../cpp/restrict.md)</ept>.","pos":[3279,3375],"source":" For more information, see [noalias](../../cpp/noalias.md) and [restrict](../../cpp/restrict.md)."},{"pos":[3384,3396],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3403,3410]},{"content":"Required header","pos":[3411,3426]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt; and <ph id=\"ph2\">\\&lt;</ph>malloc.h&gt;","pos":[3480,3507],"source":"\\<stdlib.h> and \\<malloc.h>"},{"pos":[3515,3639],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3648,3655],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4161,4186],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[4190,4205]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4206,4253],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4254,4379],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[4388,4396],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Memory Allocation<ept id=\"p1\">](../../c-runtime-library/memory-allocation.md)</ept><ph id=\"ph1\"> </ph>","pos":[4400,4466],"source":"[Memory Allocation](../../c-runtime-library/memory-allocation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>free<ept id=\"p1\">](../../c-runtime-library/reference/free.md)</ept><ph id=\"ph1\"> </ph>","pos":[4469,4520],"source":" [free](../../c-runtime-library/reference/free.md) "},{"content":"<bpt id=\"p1\"> [</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[4523,4578],"source":" [malloc](../../c-runtime-library/reference/malloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>realloc<ept id=\"p1\">](../../c-runtime-library/reference/realloc.md)</ept>","pos":[4581,4637],"source":" [realloc](../../c-runtime-library/reference/realloc.md)"}],"content":"---\ntitle: \"calloc | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"calloc\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-heap-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"calloc\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"memory allocation, arrays\"\n  - \"calloc function\"\nms.assetid: 17bb79a1-98cf-4096-90cb-1f9365cd6829\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# calloc\nAllocates an array in memory with elements initialized to 0.  \n  \n## Syntax  \n  \n```  \nvoid *calloc(   \n   size_t num,  \n   size_t size   \n);  \n```  \n  \n#### Parameters  \n `num`  \n Number of elements.  \n  \n `size`  \n Length in bytes of each element.  \n  \n## Return Value  \n `calloc` returns a pointer to the allocated space. The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object. To get a pointer to a type other than `void`, use a type cast on the return value.  \n  \n## Remarks  \n The `calloc` function allocates storage space for an array of `num` elements, each of length `size` bytes. Each element is initialized to 0.  \n  \n `calloc` sets `errno` to `ENOMEM` if a memory allocation fails or if the amount of memory requested exceeds `_HEAP_MAXREQ`. For information on this and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n `calloc` calls `malloc` to use the C++ [_set_new_mode](../../c-runtime-library/reference/set-new-mode.md) function to set the new handler mode. The new handler mode indicates whether, on failure, `malloc` is to call the new handler routine as set by [_set_new_handler](../../c-runtime-library/reference/set-new-handler.md). By default, `malloc` does not call the new handler routine on failure to allocate memory. You can override this default behavior so that, when `calloc` fails to allocate memory, `malloc` calls the new handler routine in the same way that the `new` operator does when it fails for the same reason. To override the default, call  \n  \n```  \n_set_new_mode(1)  \n```  \n  \n early in your program, or link with NEWMODE.OBJ (see [Link Options](../../c-runtime-library/link-options.md)).  \n  \n When the application is linked with a debug version of the C run-time libraries, `calloc` resolves to [_calloc_dbg](../../c-runtime-library/reference/calloc-dbg.md). For more information about how the heap is managed during the debugging process, see [The CRT Debug Heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n `calloc` is marked `__declspec(noalias)` and `__declspec(restrict)`, meaning that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased. For more information, see [noalias](../../cpp/noalias.md) and [restrict](../../cpp/restrict.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`calloc`|\\<stdlib.h> and \\<malloc.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_calloc.c  \n// This program uses calloc to allocate space for  \n// 40 long integers. It initializes each element to zero.  \n  \n#include <stdio.h>  \n#include <malloc.h>  \n  \nint main( void )  \n{  \n   long *buffer;  \n  \n   buffer = (long *)calloc( 40, sizeof( long ) );  \n   if( buffer != NULL )  \n      printf( \"Allocated 40 long integers\\n\" );  \n   else  \n      printf( \"Can't allocate memory\\n\" );  \n   free( buffer );  \n}  \n```  \n  \n```Output  \nAllocated 40 long integers  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../../c-runtime-library/memory-allocation.md)   \n [free](../../c-runtime-library/reference/free.md)   \n [malloc](../../c-runtime-library/reference/malloc.md)   \n [realloc](../../c-runtime-library/reference/realloc.md)"}