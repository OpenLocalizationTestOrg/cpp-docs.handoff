<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc581b9db026d44a5d08edbc02fa95e47497dd7f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\declarations-and-definitions-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbd08f244cb61cb9f4b0d3fed0a443080d440e4c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a039ce690704e5dd8cf033af84d2e84e125d5f9c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Declarations and Definitions (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Declarations and Definitions (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declarations<ept id="p1">](http://msdn.microsoft.com/en-us/2fd0cddb-b64c-4c9f-9aac-9f8e7ef892f4)</ept> introduce names in a program, for example the names of variables, namespaces, functions and classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Declarations also specify type information as well as other characteristics of the object that is being declared.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A name must be declared before it can be used; in C++ the point at which a name is declared determines whether it is visible to the compiler.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You cannot refer to a function or class that is declared at some later point in the compilation unit; you can use <bpt id="p1">*</bpt>forward declarations<ept id="p1">*</ept> to get around this limitation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Definitions<ept id="p1">](http://msdn.microsoft.com/en-us/f96e2c0d-abb5-4414-9ea1-4d5b4048d50a)</ept> specify what code or data the name describes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The compiler needs the definition in order to allocate storage space for the thing that is being declared.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Declarations</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A declaration introduces one or more names into a program.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Declarations can occur more than once in a program.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Therefore, classes, structures, enumerated types, and other user-defined types can be declared for each compilation unit.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The constraint on this multiple declaration is that all declarations must be identical.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Declarations also serve as definitions, except when the declaration:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Is a function prototype (a function declaration with no function body).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Contains the <ph id="ph1">`extern`</ph> specifier but no initializer (objects and variables) or function body (functions).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This signifies that the definition is not necessarily in the current translation unit and gives the name external linkage.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Is of a static data member inside a class declaration.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because static class data members are discrete variables shared by all objects of the class, they must be defined and initialized outside the class declaration.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(For more information about classes and class members, see <bpt id="p1">[</bpt>Classes<ept id="p1">](../cpp/classes-and-structs-cpp.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Is a class name declaration with no following definition, such as <ph id="ph1">`class T;`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Is a <ph id="ph1">`typedef`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Examples of declarations that are also definitions are:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Some declarations that are not definitions are:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A name is considered to be declared immediately after its declarator but before its (optional) initializer.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Point of Declaration<ept id="p1">](../cpp/point-of-declaration-in-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Declarations occur in a <bpt id="p1">*</bpt>scope<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The scope controls the visibility of the name declared and the duration of the object defined, if any.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about how scope rules interact with declarations, see <bpt id="p1">[</bpt>Scope<ept id="p1">](../cpp/scope-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An object declaration is also a definition unless it contains the <ph id="ph1">`extern`</ph> storage-class specifier described in <bpt id="p1">[</bpt>Storage-Class Specifiers<ept id="p1">](http://msdn.microsoft.com/en-us/10b3d22d-cb40-450b-994b-08cf9a211b6c)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A function declaration is also a definition unless it is a prototype.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A prototype is a function header without a defining function body.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The definition of an object causes allocation of storage and appropriate initializations for that object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Definitions</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A definition is a unique specification of an object or variable, function, class, or enumerator.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Because definitions must be unique, a program can contain only one definition for a given program element.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>There can be a many-to-one correspondence between declarations and definitions.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>There are two cases in which a program element can be declared and not defined:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A function is declared but never referenced with a function call or with an expression that takes the function's address.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A class is used only in a way that does not require its definition be known.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, the class must be declared.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following code illustrates such a case:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Basic Concepts</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Point of Declaration</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>