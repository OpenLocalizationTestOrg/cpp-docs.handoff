{"nodes":[{"pos":[12,67],"content":"Application Information and Management | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Application Information and Management | Microsoft Docs","pos":[0,55]}]},{"pos":[639,677],"content":"Application Information and Management","linkify":"Application Information and Management","nodes":[{"content":"Application Information and Management","pos":[0,38]}]},{"content":"When you write an application, you create a single <bpt id=\"p1\">[</bpt>CWinApp<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept>-derived object.","pos":[678,792],"source":"When you write an application, you create a single [CWinApp](../../mfc/reference/cwinapp-class.md)-derived object."},{"content":"At times, you may want to get information about this object from outside the <ph id=\"ph1\">`CWinApp`</ph>-derived object.","pos":[793,895],"source":" At times, you may want to get information about this object from outside the `CWinApp`-derived object."},{"content":"The Microsoft Foundation Class Library provides the following global functions to help you accomplish these tasks:","pos":[902,1016]},{"pos":[1026,1074],"content":"Application Information and Management Functions","linkify":"Application Information and Management Functions","nodes":[{"content":"Application Information and Management Functions","pos":[0,48]}]},{"pos":[1095,1128],"content":"<bpt id=\"p1\">[</bpt>AfxBeginThread<ept id=\"p1\">](#afxbeginthread)</ept>","source":"[AfxBeginThread](#afxbeginthread)"},{"content":"Creates a new thread.","pos":[1129,1150]},{"pos":[1155,1184],"content":"<bpt id=\"p1\">[</bpt>AfxEndThread<ept id=\"p1\">](#afxendthread)</ept>","source":"[AfxEndThread](#afxendthread)"},{"content":"Terminates the current thread.","pos":[1185,1215]},{"pos":[1220,1253],"content":"<bpt id=\"p1\">[</bpt>AfxFreeLibrary<ept id=\"p1\">](#afxfreelibrary)</ept>","source":"[AfxFreeLibrary](#afxfreelibrary)"},{"content":"Decrements the reference count of the loaded dynamic-link library (DLL) module; when the reference count reaches zero, the module is unmapped.","pos":[1254,1396]},{"pos":[1401,1424],"content":"<bpt id=\"p1\">[</bpt>AfxGetApp<ept id=\"p1\">](#afxgetapp)</ept>","source":"[AfxGetApp](#afxgetapp)"},{"pos":[1425,1488],"content":"Returns a pointer to the application's single <ph id=\"ph1\">`CWinApp`</ph> object.","source":"Returns a pointer to the application's single `CWinApp` object."},{"pos":[1493,1524],"content":"<bpt id=\"p1\">[</bpt>AfxGetAppName<ept id=\"p1\">](#afxgetappname)</ept>","source":"[AfxGetAppName](#afxgetappname)"},{"content":"Returns a string that contains the application's name.","pos":[1525,1579]},{"pos":[1584,1629],"content":"<bpt id=\"p1\">[</bpt>AfxGetInstanceHandle<ept id=\"p1\">](#afxgetinstancehandle)</ept>","source":"[AfxGetInstanceHandle](#afxgetinstancehandle)"},{"pos":[1630,1699],"content":"Returns an <ph id=\"ph1\">`HINSTANCE`</ph> representing this instance of the application.","source":"Returns an `HINSTANCE` representing this instance of the application."},{"pos":[1704,1735],"content":"<bpt id=\"p1\">[</bpt>AfxGetMainWnd<ept id=\"p1\">](#afxgetmainwnd)</ept>","source":"[AfxGetMainWnd](#afxgetmainwnd)"},{"content":"Returns a pointer to the current \"main\" window of a non-OLE application, or the in-place frame window of a server application.","pos":[1736,1862]},{"pos":[1867,1922],"content":"<bpt id=\"p1\">[</bpt>AfxGetPerUserRegistration<ept id=\"p1\">](#afxgetperuserregistration)</ept>","source":"[AfxGetPerUserRegistration](#afxgetperuserregistration)"},{"pos":[1923,2050],"content":"Use this function to determine whether the application redirects registry access to the <bpt id=\"p1\">**</bpt>HKEY_CURRENT_USER<ept id=\"p1\">**</ept> ( <bpt id=\"p2\">**</bpt>HKCU<ept id=\"p2\">**</ept>) node.","source":"Use this function to determine whether the application redirects registry access to the **HKEY_CURRENT_USER** ( **HKCU**) node."},{"pos":[2055,2100],"content":"<bpt id=\"p1\">[</bpt>AfxGetResourceHandle<ept id=\"p1\">](#afxgetresourcehandle)</ept>","source":"[AfxGetResourceHandle](#afxgetresourcehandle)"},{"content":"Returns an <ph id=\"ph1\">`HINSTANCE`</ph> to the source of the application's default resources.","pos":[2101,2177],"source":"Returns an `HINSTANCE` to the source of the application's default resources."},{"content":"Use this to access the application's resources directly.","pos":[2178,2234]},{"pos":[2239,2268],"content":"<bpt id=\"p1\">[</bpt>AfxGetThread<ept id=\"p1\">](#afxgetthread)</ept>","source":"[AfxGetThread](#afxgetthread)"},{"pos":[2269,2365],"content":"Retrieves a pointer to the current <bpt id=\"p1\">[</bpt>CWinThread<ept id=\"p1\">](../../mfc/reference/cwinthread-class.md)</ept> object.","source":"Retrieves a pointer to the current [CWinThread](../../mfc/reference/cwinthread-class.md) object."},{"pos":[2370,2405],"content":"<bpt id=\"p1\">[</bpt>AfxInitRichEdit<ept id=\"p1\">](#afxinitrichedit)</ept>","source":"[AfxInitRichEdit](#afxinitrichedit)"},{"content":"Initializes the version 1.0 rich edit control for the application.","pos":[2406,2472]},{"pos":[2477,2514],"content":"<bpt id=\"p1\">[</bpt>AfxInitRichEdit2<ept id=\"p1\">](#afxinitrichedit2)</ept>","source":"[AfxInitRichEdit2](#afxinitrichedit2)"},{"content":"Initializes the version 2.0 and later rich edit control for the application.","pos":[2515,2591]},{"pos":[2596,2629],"content":"<bpt id=\"p1\">[</bpt>AfxLoadLibrary<ept id=\"p1\">](#afxloadlibrary)</ept>","source":"[AfxLoadLibrary](#afxloadlibrary)"},{"content":"Maps a DLL module and returns a handle that can be used to obtain the address of a DLL function.","pos":[2630,2726]},{"pos":[2731,2768],"content":"<bpt id=\"p1\">[</bpt>AfxRegisterClass<ept id=\"p1\">](#afxregisterclass)</ept>","source":"[AfxRegisterClass](#afxregisterclass)"},{"content":"Registers a window class in a DLL that uses MFC.","pos":[2769,2817]},{"pos":[2822,2865],"content":"<bpt id=\"p1\">[</bpt>AfxRegisterWndClass<ept id=\"p1\">](#afxregisterwndclass)</ept>","source":"[AfxRegisterWndClass](#afxregisterwndclass)"},{"content":"Registers a Windows window class to supplement those registered automatically by MFC.","pos":[2866,2951]},{"pos":[2956,3011],"content":"<bpt id=\"p1\">[</bpt>AfxSetPerUserRegistration<ept id=\"p1\">](#afxsetperuserregistration)</ept>","source":"[AfxSetPerUserRegistration](#afxsetperuserregistration)"},{"pos":[3012,3113],"content":"Sets whether the application redirects registry access to the <bpt id=\"p1\">**</bpt>HKEY_CURRENT_USER<ept id=\"p1\">**</ept> ( <bpt id=\"p2\">**</bpt>HKCU<ept id=\"p2\">**</ept>) node.","source":"Sets whether the application redirects registry access to the **HKEY_CURRENT_USER** ( **HKCU**) node."},{"pos":[3118,3163],"content":"<bpt id=\"p1\">[</bpt>AfxSetResourceHandle<ept id=\"p1\">](#afxsetresourcehandle)</ept>","source":"[AfxSetResourceHandle](#afxsetresourcehandle)"},{"pos":[3164,3250],"content":"Sets the <ph id=\"ph1\">`HINSTANCE`</ph> handle where the default resources of the application are loaded.","source":"Sets the `HINSTANCE` handle where the default resources of the application are loaded."},{"pos":[3255,3286],"content":"<bpt id=\"p1\">[</bpt>AfxSocketInit<ept id=\"p1\">](#afxsocketinit)</ept>","source":"[AfxSocketInit](#afxsocketinit)"},{"pos":[3287,3362],"content":"Called in a <ph id=\"ph1\">`CWinApp::InitInstance`</ph> override to initialize Windows Sockets.","source":"Called in a `CWinApp::InitInstance` override to initialize Windows Sockets."},{"pos":[3367,3392],"content":"<bpt id=\"p1\">[</bpt>AfxWinInit<ept id=\"p1\">](#afxwininit)</ept>","source":"[AfxWinInit](#afxwininit)"},{"content":"Called by the MFC-supplied <ph id=\"ph1\">`WinMain`</ph> function, as part of the <bpt id=\"p1\">[</bpt>CWinApp<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept> initialization of a GUI-based application, to initialize MFC.","pos":[3393,3564],"source":"Called by the MFC-supplied `WinMain` function, as part of the [CWinApp](../../mfc/reference/cwinapp-class.md) initialization of a GUI-based application, to initialize MFC."},{"content":"Must be called directly for console applications that use MFC.","pos":[3565,3627]},{"pos":[3638,3683],"content":"<bpt id=\"p1\">&lt;a name=\"afxbeginthread\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxBeginThread","linkify":"<a name=\"afxbeginthread\"></a>  AfxBeginThread","source":"<a name=\"afxbeginthread\"></a>  AfxBeginThread"},{"content":"Call this function to create a new thread.","pos":[3687,3729]},{"pos":[4215,4225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the controlling function for the worker thread.","pos":[4248,4305]},{"content":"Cannot be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[4306,4325],"source":" Cannot be **NULL**."},{"content":"This function must be declared as follows:","pos":[4326,4368]},{"content":"<bpt id=\"p1\">*</bpt>pThreadClass<ept id=\"p1\">*</ept>","pos":[4436,4450],"source":"*pThreadClass*"},{"content":"The RUNTIME_CLASS of an object derived from <bpt id=\"p1\">[</bpt>CWinThread<ept id=\"p1\">](../../mfc/reference/cwinthread-class.md)</ept>.","pos":[4454,4552],"source":" The RUNTIME_CLASS of an object derived from [CWinThread](../../mfc/reference/cwinthread-class.md)."},{"content":"<bpt id=\"p1\">*</bpt>pParam<ept id=\"p1\">*</ept>","pos":[4559,4567],"source":"*pParam*"},{"content":"Parameter to be passed to the controlling function as shown in the parameter to the function declaration in <ph id=\"ph1\">`pfnThreadProc`</ph>.","pos":[4571,4695],"source":" Parameter to be passed to the controlling function as shown in the parameter to the function declaration in `pfnThreadProc`."},{"content":"The desired priority of the thread.","pos":[4717,4752]},{"content":"For a full list and description of the available priorities, see <bpt id=\"p1\">[</bpt>SetThreadPriority<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686277)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[4753,4957],"source":" For a full list and description of the available priorities, see [SetThreadPriority](http://msdn.microsoft.com/library/windows/desktop/ms686277) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Specifies the size in bytes of the stack for the new thread.","pos":[4980,5040]},{"content":"If 0, the stack size defaults to the same size stack as the creating thread.","pos":[5041,5117]},{"content":"Specifies an additional flag that controls the creation of the thread.","pos":[5143,5213]},{"content":"This flag can contain one of two values:","pos":[5214,5254]},{"content":"<bpt id=\"p1\">**</bpt>CREATE_SUSPENDED<ept id=\"p1\">**</ept> Start the thread with a suspend count of one.","pos":[5262,5328],"source":"**CREATE_SUSPENDED** Start the thread with a suspend count of one."},{"content":"Use <bpt id=\"p1\">**</bpt>CREATE_SUSPENDED<ept id=\"p1\">**</ept> if you want to initialize any member data of the <ph id=\"ph1\">`CWinThread`</ph> object, such as <bpt id=\"p2\">[</bpt>m_bAutoDelete<ept id=\"p2\">](../../mfc/reference/cwinthread-class.md#cwinthread__m_bautodelete)</ept> or any members of your derived class, before the thread starts running.","pos":[5329,5586],"source":" Use **CREATE_SUSPENDED** if you want to initialize any member data of the `CWinThread` object, such as [m_bAutoDelete](../../mfc/reference/cwinthread-class.md#cwinthread__m_bautodelete) or any members of your derived class, before the thread starts running."},{"content":"Once your initialization is complete, use <bpt id=\"p1\">[</bpt>CWinThread::ResumeThread<ept id=\"p1\">](../../mfc/reference/cwinthread-class.md#cwinthread__resumethread)</ept> to start the thread running.","pos":[5587,5750],"source":" Once your initialization is complete, use [CWinThread::ResumeThread](../../mfc/reference/cwinthread-class.md#cwinthread__resumethread) to start the thread running."},{"content":"The thread will not execute until <ph id=\"ph1\">`CWinThread::ResumeThread`</ph> is called.","pos":[5751,5822],"source":" The thread will not execute until `CWinThread::ResumeThread` is called."},{"pos":[5830,5880],"content":"<bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> Start the thread immediately after creation.","source":"**0** Start the thread immediately after creation."},{"pos":[5887,6246],"content":"`lpSecurityAttrs`  \nPoints to a [SECURITY_ATTRIBUTES](http://msdn.microsoft.com/library/windows/desktop/aa379560) structure that specifies the security attributes for the thread. If **NULL**, the same security attributes as the creating thread will be used. For more information on this structure, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","leadings":[""," "],"nodes":[{"content":"Points to a [SECURITY_ATTRIBUTES](http://msdn.microsoft.com/library/windows/desktop/aa379560) structure that specifies the security attributes for the thread. If **NULL**, the same security attributes as the creating thread will be used. For more information on this structure, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","pos":[20,358],"nodes":[{"content":"Points to a <bpt id=\"p1\">[</bpt>SECURITY_ATTRIBUTES<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa379560)</ept> structure that specifies the security attributes for the thread.","pos":[0,158],"source":"Points to a [SECURITY_ATTRIBUTES](http://msdn.microsoft.com/library/windows/desktop/aa379560) structure that specifies the security attributes for the thread."},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the same security attributes as the creating thread will be used.","pos":[159,237],"source":" If **NULL**, the same security attributes as the creating thread will be used."},{"content":"For more information on this structure, see the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[238,338],"source":" For more information on this structure, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."}]}]},{"pos":[6256,6268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6272,6348],"content":"Pointer to the newly created thread object, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if a failure occurs.","source":"Pointer to the newly created thread object, or **NULL** if a failure occurs."},{"pos":[6358,6365],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first form of <ph id=\"ph1\">`AfxBeginThread`</ph> creates a worker thread.","pos":[6369,6428],"source":"The first form of `AfxBeginThread` creates a worker thread."},{"content":"The second form creates a thread that may serve as a user-interface thread or as a worker thread.","pos":[6429,6526]},{"content":"<ph id=\"ph1\">`AfxBeginThread`</ph> creates a new <ph id=\"ph2\">`CWinThread`</ph> object, calls its <bpt id=\"p1\">[</bpt>CreateThread<ept id=\"p1\">](../../mfc/reference/cwinthread-class.md#cwinthread__createthread)</ept> function to start executing the thread, and returns a pointer to the thread.","pos":[6533,6752],"source":"`AfxBeginThread` creates a new `CWinThread` object, calls its [CreateThread](../../mfc/reference/cwinthread-class.md#cwinthread__createthread) function to start executing the thread, and returns a pointer to the thread."},{"content":"Checks are made throughout the procedure to make sure all objects are deallocated properly should any part of the creation fail.","pos":[6753,6881]},{"content":"To end the thread, call <bpt id=\"p1\">[</bpt>AfxEndThread<ept id=\"p1\">](#afxendthread)</ept> from within the thread, or return from the controlling function of the worker thread.","pos":[6882,7021],"source":" To end the thread, call [AfxEndThread](#afxendthread) from within the thread, or return from the controlling function of the worker thread."},{"content":"Multithreading must be enabled by the application; otherwise, this function will fail.","pos":[7028,7114]},{"content":"For more information on enabling multithreading, refer to <bpt id=\"p1\">[</bpt>/MD, /MT, /LD (Use Run-Time Library)<ept id=\"p1\">](../../build/reference/md-mt-ld-use-run-time-library.md)</ept> under <bpt id=\"p2\">*</bpt>Visual C++ Compiler Options<ept id=\"p2\">*</ept>.","pos":[7115,7304],"source":" For more information on enabling multithreading, refer to [/MD, /MT, /LD (Use Run-Time Library)](../../build/reference/md-mt-ld-use-run-time-library.md) under *Visual C++ Compiler Options*."},{"pos":[7311,7590],"content":"For more information on <ph id=\"ph1\">`AfxBeginThread`</ph>, see the articles <bpt id=\"p1\">[</bpt>Multithreading: Creating Worker Threads<ept id=\"p1\">](../../parallel/multithreading-creating-worker-threads.md)</ept> and <bpt id=\"p2\">[</bpt>Multithreading: Creating User-Interface Threads<ept id=\"p2\">](../../parallel/multithreading-creating-user-interface-threads.md)</ept>.","source":"For more information on `AfxBeginThread`, see the articles [Multithreading: Creating Worker Threads](../../parallel/multithreading-creating-worker-threads.md) and [Multithreading: Creating User-Interface Threads](../../parallel/multithreading-creating-user-interface-threads.md)."},{"pos":[7600,7607],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7611,7703],"content":"See the example for <bpt id=\"p1\">[</bpt>CSocket::Attach<ept id=\"p1\">](../../mfc/reference/csocket-class.md#csocket__attach)</ept>.","source":"See the example for [CSocket::Attach](../../mfc/reference/csocket-class.md#csocket__attach)."},{"pos":[7713,7754],"content":"<bpt id=\"p1\">&lt;a name=\"afxendthread\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxEndThread","linkify":"<a name=\"afxendthread\"></a>  AfxEndThread","source":"<a name=\"afxendthread\"></a>  AfxEndThread"},{"content":"Call this function to terminate the currently executing thread.","pos":[7758,7821]},{"pos":[7923,7933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nExitCode<ept id=\"p1\">*</ept>","pos":[7937,7948],"source":"*nExitCode*"},{"content":"Specifies the exit code of the thread.","pos":[7952,7990]},{"content":"<bpt id=\"p1\">*</bpt>bDelete<ept id=\"p1\">*</ept>","pos":[7997,8006],"source":"*bDelete*"},{"content":"Deletes the thread object from memory.","pos":[8010,8048]},{"pos":[8058,8065],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Must be called from within the thread to be terminated.","pos":[8069,8124]},{"pos":[8131,8279],"content":"For more information on <ph id=\"ph1\">`AfxEndThread`</ph>, see the article <bpt id=\"p1\">[</bpt>Multithreading: Terminating Threads<ept id=\"p1\">](../../parallel/multithreading-terminating-threads.md)</ept>.","source":"For more information on `AfxEndThread`, see the article [Multithreading: Terminating Threads](../../parallel/multithreading-terminating-threads.md)."},{"pos":[8289,8334],"content":"<bpt id=\"p1\">&lt;a name=\"afxfreelibrary\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxFreeLibrary","linkify":"<a name=\"afxfreelibrary\"></a>  AfxFreeLibrary","source":"<a name=\"afxfreelibrary\"></a>  AfxFreeLibrary"},{"pos":[8338,8439],"content":"Both <ph id=\"ph1\">`AfxFreeLibrary`</ph> and <ph id=\"ph2\">`AfxLoadLibrary`</ph> maintain a reference count for each loaded library module.","source":"Both `AfxFreeLibrary` and `AfxLoadLibrary` maintain a reference count for each loaded library module."},{"pos":[8514,8524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>hInstLib<ept id=\"p1\">*</ept>","pos":[8528,8538],"source":"*hInstLib*"},{"content":"A handle of the loaded library module.","pos":[8542,8580]},{"content":"<bpt id=\"p1\">[</bpt>AfxLoadLibrary<ept id=\"p1\">](#afxloadlibrary)</ept> returns this handle.","pos":[8581,8635],"source":"[AfxLoadLibrary](#afxloadlibrary) returns this handle."},{"pos":[8645,8657],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8661,8717],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the function succeeds; otherwise, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the function succeeds; otherwise, **FALSE**."},{"pos":[8727,8734],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`AfxFreeLibrary`</ph> decrements the reference count of the loaded dynamic-link library (DLL) module.","pos":[8738,8834],"source":"`AfxFreeLibrary` decrements the reference count of the loaded dynamic-link library (DLL) module."},{"content":"When the reference count reaches zero, the module is unmapped from the address space of the calling process and the handle is no longer valid.","pos":[8835,8977]},{"content":"This reference count is incremented each time <ph id=\"ph1\">`AfxLoadLibrary`</ph> is called.","pos":[8978,9051],"source":" This reference count is incremented each time `AfxLoadLibrary` is called."},{"content":"Before unmapping a library module, the system enables the DLL to detach from the processes using it.","pos":[9058,9158]},{"content":"Doing so gives the DLL an opportunity to clean up resources allocated on behalf of the current process.","pos":[9159,9262]},{"content":"After the entry-point function returns, the library module is removed from the address space of the current process.","pos":[9263,9379]},{"pos":[9386,9427],"content":"Use <ph id=\"ph1\">`AfxLoadLibrary`</ph> to map a DLL module.","source":"Use `AfxLoadLibrary` to map a DLL module."},{"content":"Be sure to use <ph id=\"ph1\">`AfxFreeLibrary`</ph> and <ph id=\"ph2\">`AfxLoadLibrary`</ph> (instead of the Win32 functions <bpt id=\"p1\">**</bpt>FreeLibrary<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>LoadLibrary<ept id=\"p2\">**</ept>) if your application uses multiple threads.","pos":[9434,9598],"source":"Be sure to use `AfxFreeLibrary` and `AfxLoadLibrary` (instead of the Win32 functions **FreeLibrary** and **LoadLibrary**) if your application uses multiple threads."},{"content":"Using <ph id=\"ph1\">`AfxLoadLibrary`</ph> and <ph id=\"ph2\">`AfxFreeLibrary`</ph> ensures that the startup and shutdown code that executes when the extension DLL is loaded and unloaded does not corrupt the global MFC state.","pos":[9599,9784],"source":" Using `AfxLoadLibrary` and `AfxFreeLibrary` ensures that the startup and shutdown code that executes when the extension DLL is loaded and unloaded does not corrupt the global MFC state."},{"pos":[9794,9801],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9805,9859],"content":"See the example for <bpt id=\"p1\">[</bpt>AfxLoadLibrary<ept id=\"p1\">](#afxloadlibrary)</ept>.","source":"See the example for [AfxLoadLibrary](#afxloadlibrary)."},{"pos":[9869,9904],"content":"<bpt id=\"p1\">&lt;a name=\"afxgetapp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxGetApp","linkify":"<a name=\"afxgetapp\"></a>  AfxGetApp","source":"<a name=\"afxgetapp\"></a>  AfxGetApp"},{"content":"The pointer returned by this function can be used to access application information such as the main message-dispatch code or the topmost window.","pos":[9908,10053]},{"pos":[10109,10121],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10125,10186],"content":"A pointer to the single <ph id=\"ph1\">`CWinApp`</ph> object for the application.","source":"A pointer to the single `CWinApp` object for the application."},{"pos":[10196,10203],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this method returns NULL, it might indicate that the applicationâ€™s main window has not been fully initialized yet.","pos":[10207,10326]},{"content":"It might also indicate a problem.","pos":[10327,10360]},{"pos":[10370,10377],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10381,10496],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCWindowing#126<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCWindowing#126](../../mfc/reference/codesnippet/cpp/application-information-and-management_1.cpp)]"},{"pos":[10506,10549],"content":"<bpt id=\"p1\">&lt;a name=\"afxgetappname\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxGetAppName","linkify":"<a name=\"afxgetappname\"></a>  AfxGetAppName","source":"<a name=\"afxgetappname\"></a>  AfxGetAppName"},{"content":"The string returned by this function can be used for diagnostic messages or as a root for temporary string names.","pos":[10553,10666]},{"pos":[10725,10737],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A null-terminated string containing the application's name.","pos":[10741,10800]},{"pos":[10810,10817],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10821,10936],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCWindowing#127<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCWindowing#127](../../mfc/reference/codesnippet/cpp/application-information-and-management_2.cpp)]"},{"pos":[10946,11003],"content":"<bpt id=\"p1\">&lt;a name=\"afxgetinstancehandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxGetInstanceHandle","linkify":"<a name=\"afxgetinstancehandle\"></a>  AfxGetInstanceHandle","source":"<a name=\"afxgetinstancehandle\"></a>  AfxGetInstanceHandle"},{"content":"This function allows you to retrieve the instance handle of the current application.","pos":[11007,11091]},{"pos":[11160,11172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An <ph id=\"ph1\">`HINSTANCE`</ph> to the current instance of the application.","pos":[11176,11234],"source":"An `HINSTANCE` to the current instance of the application."},{"content":"If called from within a DLL linked with the USRDLL version of MFC, an <ph id=\"ph1\">`HINSTANCE`</ph> to the DLL is returned.","pos":[11235,11340],"source":" If called from within a DLL linked with the USRDLL version of MFC, an `HINSTANCE` to the DLL is returned."},{"pos":[11350,11357],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`AfxGetInstanceHandle`</ph> always returns the <ph id=\"ph2\">`HINSTANCE`</ph> of your executable file (.EXE) unless it is called from within a DLL linked with the USRDLL version of MFC.","pos":[11361,11522],"source":"`AfxGetInstanceHandle` always returns the `HINSTANCE` of your executable file (.EXE) unless it is called from within a DLL linked with the USRDLL version of MFC."},{"content":"In this case, it returns an <ph id=\"ph1\">`HINSTANCE`</ph> to the DLL.","pos":[11523,11574],"source":" In this case, it returns an `HINSTANCE` to the DLL."},{"pos":[11584,11591],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11595,11710],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCWindowing#128<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCWindowing#128](../../mfc/reference/codesnippet/cpp/application-information-and-management_3.cpp)]"},{"pos":[11720,11763],"content":"<bpt id=\"p1\">&lt;a name=\"afxgetmainwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxGetMainWnd","linkify":"<a name=\"afxgetmainwnd\"></a>  AfxGetMainWnd","source":"<a name=\"afxgetmainwnd\"></a>  AfxGetMainWnd"},{"pos":[11767,12038],"content":"If your application is an OLE server, call this function to retrieve a pointer to the active main window of the application instead of directly referring to the <bpt id=\"p1\">[</bpt>m_pMainWnd<ept id=\"p1\">](../../mfc/reference/cwinthread-class.md#cwinthread__m_pmainwnd)</ept> member of the application object.","source":"If your application is an OLE server, call this function to retrieve a pointer to the active main window of the application instead of directly referring to the [m_pMainWnd](../../mfc/reference/cwinthread-class.md#cwinthread__m_pmainwnd) member of the application object."},{"pos":[12095,12107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the server has an object that is in-place active inside a container, and this container is active, this function returns a pointer to the frame window object that contains the in-place active document.","pos":[12111,12315]},{"pos":[12322,12503],"content":"If there is no object that is in-place active within a container, or your application is not an OLE server, this function simply returns the <ph id=\"ph1\">`m_pMainWnd`</ph> of your application object.","source":"If there is no object that is in-place active within a container, or your application is not an OLE server, this function simply returns the `m_pMainWnd` of your application object."},{"content":"If <ph id=\"ph1\">`AfxGetMainWnd`</ph> is called from the application's primary thread, it returns the application's main window according to the above rules.","pos":[12510,12648],"source":"If `AfxGetMainWnd` is called from the application's primary thread, it returns the application's main window according to the above rules."},{"content":"If the function is called from a secondary thread in the application, the function returns the main window associated with the thread that made the call.","pos":[12649,12802]},{"pos":[12812,12819],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12823,12982],"content":"If your application is not an OLE server, then calling this function is equivalent to directly referring to the <ph id=\"ph1\">`m_pMainWnd`</ph> member of your application object.","source":"If your application is not an OLE server, then calling this function is equivalent to directly referring to the `m_pMainWnd` member of your application object."},{"pos":[12992,12999],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13003,13118],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCWindowing#129<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCWindowing#129](../../mfc/reference/codesnippet/cpp/application-information-and-management_4.cpp)]"},{"pos":[13128,13195],"content":"<bpt id=\"p1\">&lt;a name=\"afxgetperuserregistration\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxGetPerUserRegistration","linkify":"<a name=\"afxgetperuserregistration\"></a>  AfxGetPerUserRegistration","source":"<a name=\"afxgetperuserregistration\"></a>  AfxGetPerUserRegistration"},{"pos":[13199,13326],"content":"Use this function to determine whether the application redirects registry access to the <bpt id=\"p1\">**</bpt>HKEY_CURRENT_USER<ept id=\"p1\">**</ept> ( <bpt id=\"p2\">**</bpt>HKCU<ept id=\"p2\">**</ept>) node.","source":"Use this function to determine whether the application redirects registry access to the **HKEY_CURRENT_USER** ( **HKCU**) node."},{"pos":[13392,13404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> indicates that the registry information is directed to the <bpt id=\"p1\">**</bpt>HKCU<ept id=\"p1\">**</ept> node; <ph id=\"ph2\">`FALSE`</ph> indicates that the application writes registry information to the default node.","pos":[13408,13576],"source":"`TRUE` indicates that the registry information is directed to the **HKCU** node; `FALSE` indicates that the application writes registry information to the default node."},{"content":"The default node is <bpt id=\"p1\">**</bpt>HKEY_CLASSES_ROOT<ept id=\"p1\">**</ept> ( <bpt id=\"p2\">**</bpt>HKCR<ept id=\"p2\">**</ept>).","pos":[13577,13631],"source":" The default node is **HKEY_CLASSES_ROOT** ( **HKCR**)."},{"pos":[13641,13648],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you enable registry redirection, the framework redirects access from <bpt id=\"p1\">**</bpt>HKCR<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>HKEY_CURRENT_USER\\Software\\Classes<ept id=\"p2\">**</ept>.","pos":[13652,13775],"source":"If you enable registry redirection, the framework redirects access from **HKCR** to **HKEY_CURRENT_USER\\Software\\Classes**."},{"content":"Only the MFC and ATL frameworks are affected by the redirection.","pos":[13776,13840]},{"pos":[13847,13968],"content":"To change whether the application redirects registry access, use <bpt id=\"p1\">[</bpt>AfxSetPerUserRegistration<ept id=\"p1\">](#afxsetperuserregistration)</ept>.","source":"To change whether the application redirects registry access, use [AfxSetPerUserRegistration](#afxsetperuserregistration)."},{"pos":[13978,14035],"content":"<bpt id=\"p1\">&lt;a name=\"afxgetresourcehandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxGetResourceHandle","linkify":"<a name=\"afxgetresourcehandle\"></a>  AfxGetResourceHandle","source":"<a name=\"afxgetresourcehandle\"></a>  AfxGetResourceHandle"},{"pos":[14039,14203],"content":"Use the <ph id=\"ph1\">`HINSTANCE`</ph> handle returned by this function to access the application's resources directly, for example, in calls to the Windows function <bpt id=\"p1\">**</bpt>FindResource<ept id=\"p1\">**</ept>.","source":"Use the `HINSTANCE` handle returned by this function to access the application's resources directly, for example, in calls to the Windows function **FindResource**."},{"pos":[14272,14284],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14288,14368],"content":"An <ph id=\"ph1\">`HINSTANCE`</ph> handle where the default resources of the application are loaded.","source":"An `HINSTANCE` handle where the default resources of the application are loaded."},{"pos":[14378,14385],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14389,14504],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCWindowing#130<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCWindowing#130](../../mfc/reference/codesnippet/cpp/application-information-and-management_5.cpp)]"},{"pos":[14514,14555],"content":"<bpt id=\"p1\">&lt;a name=\"afxgetthread\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxGetThread","linkify":"<a name=\"afxgetthread\"></a>  AfxGetThread","source":"<a name=\"afxgetthread\"></a>  AfxGetThread"},{"pos":[14559,14707],"content":"Call this function to get a pointer to the <bpt id=\"p1\">[</bpt>CWinThread<ept id=\"p1\">](../../mfc/reference/cwinthread-class.md)</ept> object representing the currently executing thread.","source":"Call this function to get a pointer to the [CWinThread](../../mfc/reference/cwinthread-class.md) object representing the currently executing thread."},{"pos":[14762,14774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14778,14840],"content":"Pointer to the currently executing thread; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"Pointer to the currently executing thread; otherwise **NULL**."},{"pos":[14850,14857],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Must be called from within the desired thread.","pos":[14861,14907]},{"pos":[14915,15241],"content":"[!NOTE]\n If you are porting an MFC project calling `AfxGetThread` from Visual C++ versions 4.2, 5.0, or 6.0, `AfxGetThread` calls [AfxGetApp](#afxgetapp) if no thread is found. In Visual C+ .NET and later, `AfxGetThread` returns **NULL** if no thread was found. If you want the application thread, you must call `AfxGetApp`.","leadings":["","> "],"nodes":[{"content":" If you are porting an MFC project calling `AfxGetThread` from Visual C++ versions 4.2, 5.0, or 6.0, `AfxGetThread` calls [AfxGetApp](#afxgetapp) if no thread is found. In Visual C+ .NET and later, `AfxGetThread` returns **NULL** if no thread was found. If you want the application thread, you must call `AfxGetApp`.","pos":[8,324],"nodes":[{"content":"If you are porting an MFC project calling <ph id=\"ph1\">`AfxGetThread`</ph> from Visual C++ versions 4.2, 5.0, or 6.0, <ph id=\"ph2\">`AfxGetThread`</ph> calls <bpt id=\"p1\">[</bpt>AfxGetApp<ept id=\"p1\">](#afxgetapp)</ept> if no thread is found.","pos":[1,168],"source":" If you are porting an MFC project calling `AfxGetThread` from Visual C++ versions 4.2, 5.0, or 6.0, `AfxGetThread` calls [AfxGetApp](#afxgetapp) if no thread is found."},{"content":"In Visual C+ .NET and later, <ph id=\"ph1\">`AfxGetThread`</ph> returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no thread was found.","pos":[169,253],"source":" In Visual C+ .NET and later, `AfxGetThread` returns **NULL** if no thread was found."},{"content":"If you want the application thread, you must call <ph id=\"ph1\">`AfxGetApp`</ph>.","pos":[254,316],"source":" If you want the application thread, you must call `AfxGetApp`."}]}]},{"pos":[15251,15258],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15262,15377],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCWindowing#132<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCWindowing#132](../../mfc/reference/codesnippet/cpp/application-information-and-management_6.cpp)]"},{"pos":[15387,15434],"content":"<bpt id=\"p1\">&lt;a name=\"afxinitrichedit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxInitRichEdit","linkify":"<a name=\"afxinitrichedit\"></a>  AfxInitRichEdit","source":"<a name=\"afxinitrichedit\"></a>  AfxInitRichEdit"},{"content":"Call this function to initialize the rich edit control (version 1.0) for the application.","pos":[15438,15527]},{"pos":[15585,15592],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is provided for backward compatibility.","pos":[15596,15649]},{"content":"Applications created with Visual C++ .NET and later use <bpt id=\"p1\">[</bpt>AfxInitRichEdit2<ept id=\"p1\">](#afxinitrichedit2)</ept>.","pos":[15650,15744],"source":" Applications created with Visual C++ .NET and later use [AfxInitRichEdit2](#afxinitrichedit2)."},{"content":"<ph id=\"ph1\">`AfxInitRichEdit`</ph> loads RICHED32.DLL to initialize version 1.0 of the rich edit control.","pos":[15751,15839],"source":"`AfxInitRichEdit` loads RICHED32.DLL to initialize version 1.0 of the rich edit control."},{"content":"To use version 2.0 and 3.0 of the rich edit control, RICHED20.DLL needs to be loaded.","pos":[15840,15925]},{"content":"This is accomplished with a call to <bpt id=\"p1\">[</bpt>AfxInitRichEdit2<ept id=\"p1\">](#afxinitrichedit2)</ept>.","pos":[15926,16000],"source":" This is accomplished with a call to [AfxInitRichEdit2](#afxinitrichedit2)."},{"content":"If you have dialog resources with the rich edit control created prior to Visual C++ .NET, the rich edit controls are automatically version 1.0.","pos":[16001,16144]},{"content":"Rich edit controls inserted using the Visual C++ .NET Resource Editor are version 2.0.","pos":[16145,16231]},{"content":"To update rich edit controls in existing Visual C++ applications to version 2.0, open the .RC file as text, change the class name of each rich edit control from \"RICHEDIT\" to \"RichEdit20a\".","pos":[16238,16427]},{"content":"Then replace the call to <ph id=\"ph1\">`AfxInitRichEdit`</ph> with <ph id=\"ph2\">`AfxInitRichEdit2`</ph>.","pos":[16428,16495],"source":" Then replace the call to `AfxInitRichEdit` with `AfxInitRichEdit2`."},{"content":"This function also initializes the common controls library, if the library hasn't already been initialized for the process.","pos":[16502,16625]},{"content":"If you use the rich edit control directly from your MFC application, you should call this function to assure that MFC has properly initialized the rich edit control runtime.","pos":[16626,16799]},{"content":"If you call the Create method of <bpt id=\"p1\">[</bpt>CRichEditCtrl<ept id=\"p1\">](../../mfc/reference/cricheditctrl-class.md)</ept>, <bpt id=\"p2\">[</bpt>CRichEditView<ept id=\"p2\">](../../mfc/reference/cricheditview-class.md)</ept>, or <bpt id=\"p3\">[</bpt>CRichEditDoc<ept id=\"p3\">](../../mfc/reference/cricheditdoc-class.md)</ept>, you typically don't need to call this function, but in some cases it might be necessary.","pos":[16800,17105],"source":" If you call the Create method of [CRichEditCtrl](../../mfc/reference/cricheditctrl-class.md), [CRichEditView](../../mfc/reference/cricheditview-class.md), or [CRichEditDoc](../../mfc/reference/cricheditdoc-class.md), you typically don't need to call this function, but in some cases it might be necessary."},{"pos":[17115,17164],"content":"<bpt id=\"p1\">&lt;a name=\"afxinitrichedit2\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxInitRichEdit2","linkify":"<a name=\"afxinitrichedit2\"></a>  AfxInitRichEdit2","source":"<a name=\"afxinitrichedit2\"></a>  AfxInitRichEdit2"},{"content":"Call this function to initialize the rich edit control (version 2.0 and later) for the application.","pos":[17168,17267]},{"pos":[17326,17333],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this function to load the RICHED20.DLL and initialize version 2.0 of the rich edit control.","pos":[17337,17433]},{"content":"If you call the Create method of <bpt id=\"p1\">[</bpt>CRichEditCtrl<ept id=\"p1\">](../../mfc/reference/cricheditctrl-class.md)</ept>, <bpt id=\"p2\">[</bpt>CRichEditView<ept id=\"p2\">](../../mfc/reference/cricheditview-class.md)</ept>, or <bpt id=\"p3\">[</bpt>CRichEditDoc<ept id=\"p3\">](../../mfc/reference/cricheditdoc-class.md)</ept>, you typically don't need to call this function, but in some cases it might be necessary.","pos":[17434,17739],"source":" If you call the Create method of [CRichEditCtrl](../../mfc/reference/cricheditctrl-class.md), [CRichEditView](../../mfc/reference/cricheditview-class.md), or [CRichEditDoc](../../mfc/reference/cricheditdoc-class.md), you typically don't need to call this function, but in some cases it might be necessary."},{"pos":[17749,17794],"content":"<bpt id=\"p1\">&lt;a name=\"afxloadlibrary\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxLoadLibrary","linkify":"<a name=\"afxloadlibrary\"></a>  AfxLoadLibrary","source":"<a name=\"afxloadlibrary\"></a>  AfxLoadLibrary"},{"pos":[17798,17839],"content":"Use <ph id=\"ph1\">`AfxLoadLibrary`</ph> to map a DLL module.","source":"Use `AfxLoadLibrary` to map a DLL module."},{"pos":[17923,17933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpszModuleName<ept id=\"p1\">*</ept>","pos":[17937,17953],"source":"*lpszModuleName*"},{"content":"Points to a null-terminated string that contains the name of the module (either a .DLL or .EXE file).","pos":[17957,18058]},{"content":"The name specified is the filename of the module.","pos":[18059,18108]},{"content":"If the string specifies a path but the file does not exist in the specified directory, the function fails.","pos":[18115,18221]},{"content":"If a path is not specified and the filename extension is omitted, the default extension .DLL is appended.","pos":[18228,18333]},{"content":"However, the filename string can include a trailing point character (.) to indicate that the module name has no extension.","pos":[18334,18456]},{"content":"When no path is specified, the function searches for the file in the following sequence:","pos":[18457,18545]},{"content":"The directory from which the application loaded.","pos":[18555,18603]},{"content":"The current directory.","pos":[18613,18635]},{"content":"<bpt id=\"p1\">**</bpt>Windows 95/98:<ept id=\"p1\">**</ept> The Windows system directory.","pos":[18643,18691],"source":"**Windows 95/98:** The Windows system directory."},{"content":"<bpt id=\"p1\">**</bpt>Windows NT:<ept id=\"p1\">**</ept> The 32-bit Windows system directory.","pos":[18692,18744],"source":"**Windows NT:** The 32-bit Windows system directory."},{"content":"The name of this directory is SYSTEM32.","pos":[18745,18784]},{"content":"<bpt id=\"p1\">**</bpt>Windows NT only:<ept id=\"p1\">**</ept> The 16-bit Windows system directory.","pos":[18792,18849],"source":"**Windows NT only:** The 16-bit Windows system directory."},{"content":"There is no Win32 function that obtains the path of this directory, but it is searched.","pos":[18850,18937]},{"content":"The name of this directory is SYSTEM.","pos":[18938,18975]},{"content":"The Windows directory.","pos":[18985,19007]},{"content":"The directories that are listed in the PATH environment variable.","pos":[19017,19082]},{"pos":[19092,19104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the function succeeds, the return value is a handle to the module.","pos":[19108,19177]},{"content":"If the function fails, the return value is NULL.","pos":[19178,19226]},{"pos":[19236,19243],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It returns a handle that can be used in <bpt id=\"p1\">[</bpt>GetProcAddress<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683212)</ept> to get the address of a DLL function.","pos":[19247,19401],"source":"It returns a handle that can be used in [GetProcAddress](http://msdn.microsoft.com/library/windows/desktop/ms683212) to get the address of a DLL function."},{"content":"<ph id=\"ph1\">`AfxLoadLibrary`</ph> can also be used to map other executable modules.","pos":[19402,19468],"source":"`AfxLoadLibrary` can also be used to map other executable modules."},{"content":"Each process maintains a reference count for each loaded library module.","pos":[19475,19547]},{"content":"This reference count is incremented each time <ph id=\"ph1\">`AfxLoadLibrary`</ph> is called and is decremented each time <ph id=\"ph2\">`AfxFreeLibrary`</ph> is called.","pos":[19548,19677],"source":" This reference count is incremented each time `AfxLoadLibrary` is called and is decremented each time `AfxFreeLibrary` is called."},{"content":"When the reference count reaches zero, the module is unmapped from the address space of the calling process and the handle is no longer valid.","pos":[19678,19820]},{"content":"Be sure to use <ph id=\"ph1\">`AfxLoadLibrary`</ph> and <ph id=\"ph2\">`AfxFreeLibrary`</ph> (instead of the Win32 functions <bpt id=\"p1\">**</bpt>LoadLibrary<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>FreeLibrary<ept id=\"p2\">**</ept>) if your application uses multiple threads and if it dynamically loads an extension DLL.","pos":[19827,20036],"source":"Be sure to use `AfxLoadLibrary` and `AfxFreeLibrary` (instead of the Win32 functions **LoadLibrary** and **FreeLibrary**) if your application uses multiple threads and if it dynamically loads an extension DLL."},{"content":"Using <ph id=\"ph1\">`AfxLoadLibrary`</ph> and <ph id=\"ph2\">`AfxFreeLibrary`</ph> insures that the startup and shutdown code that executes when the extension DLL is loaded and unloaded does not corrupt the global MFC state.","pos":[20037,20222],"source":" Using `AfxLoadLibrary` and `AfxFreeLibrary` insures that the startup and shutdown code that executes when the extension DLL is loaded and unloaded does not corrupt the global MFC state."},{"content":"Using <ph id=\"ph1\">`AfxLoadLibrary`</ph> in an application requires you to dynamically link to the DLL version of MFC; the header file for <ph id=\"ph2\">`AfxLoadLibrary`</ph>, Afxdll_.h, is only included if MFC is linked to the application as a DLL.","pos":[20229,20441],"source":"Using `AfxLoadLibrary` in an application requires you to dynamically link to the DLL version of MFC; the header file for `AfxLoadLibrary`, Afxdll_.h, is only included if MFC is linked to the application as a DLL."},{"content":"This is by design because you have to link to the DLL version of MFC to use or create extension DLLs.","pos":[20442,20543]},{"pos":[20553,20560],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_DLLUser#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_7.cpp)</ept><ept id=\"p1\">]</ept>","pos":[20564,20676],"source":"[!code-cpp[NVC_MFC_DLLUser#1](../../mfc/reference/codesnippet/cpp/application-information-and-management_7.cpp)]"},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_DLLUser#2<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_8.cpp)</ept><ept id=\"p1\">]</ept>","pos":[20679,20791],"source":"[!code-cpp[NVC_MFC_DLLUser#2](../../mfc/reference/codesnippet/cpp/application-information-and-management_8.cpp)]"},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_DLLUser#3<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_9.cpp)</ept><ept id=\"p1\">]</ept>","pos":[20794,20906],"source":"[!code-cpp[NVC_MFC_DLLUser#3](../../mfc/reference/codesnippet/cpp/application-information-and-management_9.cpp)]"},{"pos":[20916,20965],"content":"<bpt id=\"p1\">&lt;a name=\"afxregisterclass\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxRegisterClass","linkify":"<a name=\"afxregisterclass\"></a>  AfxRegisterClass","source":"<a name=\"afxregisterclass\"></a>  AfxRegisterClass"},{"content":"Use this function to register window classes in a DLL that uses MFC.","pos":[20969,21037]},{"pos":[21116,21126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpWndClass<ept id=\"p1\">*</ept>","pos":[21130,21142],"source":"*lpWndClass*"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>WNDCLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept> structure containing information about the window class to be registered.","pos":[21146,21303],"source":" Pointer to a [WNDCLASS](http://msdn.microsoft.com/library/windows/desktop/ms633576) structure containing information about the window class to be registered."},{"content":"For more information on this structure, see the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[21304,21404],"source":" For more information on this structure, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[21414,21426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21430,21500],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the class is successfully registered; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the class is successfully registered; otherwise **FALSE**."},{"pos":[21510,21517],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you use this function, the class is automatically unregistered when the DLL is unloaded.","pos":[21521,21612]},{"content":"In non-DLL builds, the <ph id=\"ph1\">`AfxRegisterClass`</ph> identifier is defined as a macro that maps to the Windows function <bpt id=\"p1\">**</bpt>RegisterClass<ept id=\"p1\">**</ept>, since classes registered in an application are automatically unregistered.","pos":[21619,21821],"source":"In non-DLL builds, the `AfxRegisterClass` identifier is defined as a macro that maps to the Windows function **RegisterClass**, since classes registered in an application are automatically unregistered."},{"content":"If you use <ph id=\"ph1\">`AfxRegisterClass`</ph> instead of <bpt id=\"p1\">**</bpt>RegisterClass<ept id=\"p1\">**</ept>, your code can be used without change both in an application and in a DLL.","pos":[21822,21955],"source":" If you use `AfxRegisterClass` instead of **RegisterClass**, your code can be used without change both in an application and in a DLL."},{"pos":[21965,21972],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21976,22086],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_DLL#3<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/application-information-and-management_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_DLL#3](../../atl-mfc-shared/codesnippet/cpp/application-information-and-management_10.cpp)]"},{"pos":[22096,22151],"content":"<bpt id=\"p1\">&lt;a name=\"afxregisterwndclass\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxRegisterWndClass","linkify":"<a name=\"afxregisterwndclass\"></a>  AfxRegisterWndClass","source":"<a name=\"afxregisterwndclass\"></a>  AfxRegisterWndClass"},{"content":"Allows you to register your own window classes.","pos":[22155,22202]},{"pos":[22373,22383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nClassStyle<ept id=\"p1\">*</ept>","pos":[22387,22400],"source":"*nClassStyle*"},{"content":"Specifies the Windows class style or combination of styles, created by using the bitwise-OR ( <bpt id=\"p1\">**</bpt>&amp;#124;<ept id=\"p1\">**</ept>) operator, for the window class.","pos":[22404,22541],"source":" Specifies the Windows class style or combination of styles, created by using the bitwise-OR ( **&#124;**) operator, for the window class."},{"content":"For a list of class styles, see the <bpt id=\"p1\">[</bpt>WNDCLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[22542,22718],"source":" For a list of class styles, see the [WNDCLASS](http://msdn.microsoft.com/library/windows/desktop/ms633576) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the defaults will be set as follows:","pos":[22719,22768],"source":" If **NULL**, the defaults will be set as follows:"},{"pos":[22778,22914],"content":"Sets the mouse style to <bpt id=\"p1\">**</bpt>CS_DBLCLKS<ept id=\"p1\">**</ept>, which sends double-click messages to the window procedure when the user double-clicks the mouse.","source":"Sets the mouse style to **CS_DBLCLKS**, which sends double-click messages to the window procedure when the user double-clicks the mouse."},{"pos":[22924,22990],"content":"Sets the arrow cursor style to the Windows standard <bpt id=\"p1\">**</bpt>IDC_ARROW<ept id=\"p1\">**</ept>.","source":"Sets the arrow cursor style to the Windows standard **IDC_ARROW**."},{"pos":[23000,23083],"content":"Sets the background brush to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, so the window will not erase its background.","source":"Sets the background brush to **NULL**, so the window will not erase its background."},{"content":"Sets the icon to the standard, waving-flag Windows logo icon.","pos":[23093,23154]},{"pos":[23161,23358],"content":"`hCursor`  \nSpecifies a handle to the cursor resource to be installed in each window created from the window class. If you use the default of **0**, you will get the standard **IDC_ARROW** cursor.","leadings":[""," "],"nodes":[{"content":"Specifies a handle to the cursor resource to be installed in each window created from the window class. If you use the default of **0**, you will get the standard **IDC_ARROW** cursor.","pos":[12,196],"nodes":[{"content":"Specifies a handle to the cursor resource to be installed in each window created from the window class.","pos":[0,103]},{"content":"If you use the default of <bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept>, you will get the standard <bpt id=\"p2\">**</bpt>IDC_ARROW<ept id=\"p2\">**</ept> cursor.","pos":[104,184],"source":" If you use the default of **0**, you will get the standard **IDC_ARROW** cursor."}]}]},{"pos":[23365,23715],"content":"*hbrBackground*  \nSpecifies a handle to the brush resource to be installed in each window created from the window class. If you use the default of **0**, you will have a **NULL** background brush, and your window will, by default, not erase its background while processing [WM_ERASEBKGND](http://msdn.microsoft.com/library/windows/desktop/ms648055).","leadings":[""," "],"nodes":[{"content":"<bpt id=\"p1\">*</bpt>hbrBackground<ept id=\"p1\">*</ept>","pos":[0,15],"source":"*hbrBackground*"},{"content":"Specifies a handle to the brush resource to be installed in each window created from the window class. If you use the default of **0**, you will have a **NULL** background brush, and your window will, by default, not erase its background while processing [WM_ERASEBKGND](http://msdn.microsoft.com/library/windows/desktop/ms648055).","pos":[18,349],"nodes":[{"content":"Specifies a handle to the brush resource to be installed in each window created from the window class.","pos":[0,102]},{"content":"If you use the default of <bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept>, you will have a <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> background brush, and your window will, by default, not erase its background while processing <bpt id=\"p3\">[</bpt>WM_ERASEBKGND<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms648055)</ept>.","pos":[103,331],"source":" If you use the default of **0**, you will have a **NULL** background brush, and your window will, by default, not erase its background while processing [WM_ERASEBKGND](http://msdn.microsoft.com/library/windows/desktop/ms648055)."}]}]},{"pos":[23722,23925],"content":"`hIcon`  \nSpecifies a handle to the icon resource to be installed in each window created from the window class. If you use the default of **0**, you will get the standard, waving-flag Windows logo icon.","leadings":[""," "],"nodes":[{"content":"Specifies a handle to the icon resource to be installed in each window created from the window class. If you use the default of **0**, you will get the standard, waving-flag Windows logo icon.","pos":[10,202],"nodes":[{"content":"Specifies a handle to the icon resource to be installed in each window created from the window class.","pos":[0,101]},{"content":"If you use the default of <bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept>, you will get the standard, waving-flag Windows logo icon.","pos":[102,192],"source":" If you use the default of **0**, you will get the standard, waving-flag Windows logo icon."}]}]},{"pos":[23935,23947],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A null-terminated string containing the class name.","pos":[23951,24002]},{"content":"You can pass this class name to the <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> member function in <ph id=\"ph1\">`CWnd`</ph> or other <bpt id=\"p2\">**</bpt>CWnd-<ept id=\"p2\">**</ept>derived classes to create a window.","pos":[24003,24129],"source":" You can pass this class name to the **Create** member function in `CWnd` or other **CWnd-**derived classes to create a window."},{"content":"The name is generated by the Microsoft Foundation Class Library.","pos":[24130,24194]},{"pos":[24202,24318],"content":"[!NOTE]\n The return value is a pointer to a static buffer. To save this string, assign it to a `CString` variable.","leadings":["","> "],"nodes":[{"content":" The return value is a pointer to a static buffer. To save this string, assign it to a `CString` variable.","pos":[8,114],"nodes":[{"content":"The return value is a pointer to a static buffer.","pos":[1,50]},{"content":"To save this string, assign it to a <ph id=\"ph1\">`CString`</ph> variable.","pos":[51,106],"source":" To save this string, assign it to a `CString` variable."}]}]},{"pos":[24328,24335],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Microsoft Foundation Class Library automatically registers several standard window classes for you.","pos":[24339,24442]},{"content":"Call this function if you want to register your own window classes.","pos":[24443,24510]},{"content":"The name registered for a class by <ph id=\"ph1\">`AfxRegisterWndClass`</ph> depends solely on the parameters.","pos":[24517,24607],"source":"The name registered for a class by `AfxRegisterWndClass` depends solely on the parameters."},{"content":"If you call <ph id=\"ph1\">`AfxRegisterWndClass`</ph> multiple times with identical parameters, it only registers a class on the first call.","pos":[24608,24728],"source":" If you call `AfxRegisterWndClass` multiple times with identical parameters, it only registers a class on the first call."},{"content":"Subsequent calls to <ph id=\"ph1\">`AfxRegisterWndClass`</ph> with identical parameters simply return the already-registered classname.","pos":[24729,24844],"source":" Subsequent calls to `AfxRegisterWndClass` with identical parameters simply return the already-registered classname."},{"content":"If you call <ph id=\"ph1\">`AfxRegisterWndClass`</ph> for multiple CWnd-derived classes with identical parameters, instead of getting a separate window class for each class, each class shares the same window class.","pos":[24851,25045],"source":"If you call `AfxRegisterWndClass` for multiple CWnd-derived classes with identical parameters, instead of getting a separate window class for each class, each class shares the same window class."},{"content":"This can cause problems if the <bpt id=\"p1\">**</bpt>CS_CLASSDC<ept id=\"p1\">**</ept> class style is used.","pos":[25046,25112],"source":" This can cause problems if the **CS_CLASSDC** class style is used."},{"content":"Instead of multiple <bpt id=\"p1\">**</bpt>CS_CLASSDC<ept id=\"p1\">**</ept> window classes, you end up with one <bpt id=\"p2\">**</bpt>CS_CLASSDC<ept id=\"p2\">**</ept> window class, and all C++ windows that use that class share the same DC.","pos":[25113,25271],"source":" Instead of multiple **CS_CLASSDC** window classes, you end up with one **CS_CLASSDC** window class, and all C++ windows that use that class share the same DC."},{"content":"To avoid this problem, call <bpt id=\"p1\">[</bpt>AfxRegisterClass<ept id=\"p1\">](#afxregisterclass)</ept> to register the class.","pos":[25272,25360],"source":" To avoid this problem, call [AfxRegisterClass](#afxregisterclass) to register the class."},{"pos":[25367,25561],"content":"Refer to Technical Note <bpt id=\"p1\">[</bpt>TN001: Window Class Registration<ept id=\"p1\">](../../mfc/tn001-window-class-registration.md)</ept> for more information on window class registration and the <ph id=\"ph1\">`AfxRegisterWndClass`</ph> function.","source":"Refer to Technical Note [TN001: Window Class Registration](../../mfc/tn001-window-class-registration.md) for more information on window class registration and the `AfxRegisterWndClass` function."},{"pos":[25571,25578],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25582,25698],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCWindowing#134<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCWindowing#134](../../mfc/reference/codesnippet/cpp/application-information-and-management_11.cpp)]"},{"pos":[25708,25775],"content":"<bpt id=\"p1\">&lt;a name=\"afxsetperuserregistration\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxSetPerUserRegistration","linkify":"<a name=\"afxsetperuserregistration\"></a>  AfxSetPerUserRegistration","source":"<a name=\"afxsetperuserregistration\"></a>  AfxSetPerUserRegistration"},{"pos":[25779,25880],"content":"Sets whether the application redirects registry access to the <bpt id=\"p1\">**</bpt>HKEY_CURRENT_USER<ept id=\"p1\">**</ept> ( <bpt id=\"p2\">**</bpt>HKCU<ept id=\"p2\">**</ept>) node.","source":"Sets whether the application redirects registry access to the **HKEY_CURRENT_USER** ( **HKCU**) node."},{"pos":[25958,25968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[25972,25986],"source":"[in] `bEnable`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> indicates that the registry information is directed to the <bpt id=\"p1\">**</bpt>HKCU<ept id=\"p1\">**</ept> node; <ph id=\"ph2\">`FALSE`</ph> indicates that the application writes registry information to the default node.","pos":[25989,26158],"source":" `TRUE` indicates that the registry information is directed to the **HKCU** node; `FALSE` indicates that the application writes registry information to the default node."},{"content":"The default node is <bpt id=\"p1\">**</bpt>HKEY_CLASSES_ROOT<ept id=\"p1\">**</ept> ( <bpt id=\"p2\">**</bpt>HKCR<ept id=\"p2\">**</ept>).","pos":[26159,26213],"source":" The default node is **HKEY_CLASSES_ROOT** ( **HKCR**)."},{"pos":[26223,26230],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Before <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, applications that access the registry usually use the <bpt id=\"p1\">**</bpt>HKEY_CLASSES_ROOT<ept id=\"p1\">**</ept> node.","pos":[26234,26405],"source":"Before [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], applications that access the registry usually use the **HKEY_CLASSES_ROOT** node."},{"content":"However, with <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, you must run an application in elevated mode to write to <bpt id=\"p1\">**</bpt>HKCR<ept id=\"p1\">**</ept>.","pos":[26406,26569],"source":" However, with [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], you must run an application in elevated mode to write to **HKCR**."},{"content":"This method enables your application to read and write to the registry without running in elevated mode by redirecting registry access from <bpt id=\"p1\">**</bpt>HKCR<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>HKCU<ept id=\"p2\">**</ept>.","pos":[26576,26737],"source":"This method enables your application to read and write to the registry without running in elevated mode by redirecting registry access from **HKCR** to **HKCU**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Linker Property Pages<ept id=\"p1\">](../../ide/linker-property-pages.md)</ept>.","pos":[26738,26824],"source":" For more information, see [Linker Property Pages](../../ide/linker-property-pages.md)."},{"content":"If you enable registry redirection, the framework redirects access from <bpt id=\"p1\">**</bpt>HKCR<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>HKEY_CURRENT_USER\\Software\\Classes<ept id=\"p2\">**</ept>.","pos":[26831,26954],"source":"If you enable registry redirection, the framework redirects access from **HKCR** to **HKEY_CURRENT_USER\\Software\\Classes**."},{"content":"Only the MFC and ATL frameworks are affected by the redirection.","pos":[26955,27019]},{"pos":[27026,27090],"content":"The default implementation accesses the registry under <bpt id=\"p1\">**</bpt>HKCR<ept id=\"p1\">**</ept>.","source":"The default implementation accesses the registry under **HKCR**."},{"pos":[27100,27157],"content":"<bpt id=\"p1\">&lt;a name=\"afxsetresourcehandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxSetResourceHandle","linkify":"<a name=\"afxsetresourcehandle\"></a>  AfxSetResourceHandle","source":"<a name=\"afxsetresourcehandle\"></a>  AfxSetResourceHandle"},{"pos":[27161,27283],"content":"Use this function to set the <ph id=\"ph1\">`HINSTANCE`</ph> handle that determines where the default resources of the application are loaded.","source":"Use this function to set the `HINSTANCE` handle that determines where the default resources of the application are loaded."},{"pos":[27374,27384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The instance or module handle to an .EXE or DLL file from which the application's resources are loaded.","pos":[27407,27510]},{"pos":[27520,27527],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27531,27647],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCWindowing#135<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCWindowing#135](../../mfc/reference/codesnippet/cpp/application-information-and-management_12.cpp)]"},{"pos":[27657,27700],"content":"<bpt id=\"p1\">&lt;a name=\"afxsocketinit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxSocketInit","linkify":"<a name=\"afxsocketinit\"></a>  AfxSocketInit","source":"<a name=\"afxsocketinit\"></a>  AfxSocketInit"},{"pos":[27704,27794],"content":"Call this function in your <ph id=\"ph1\">`CWinApp::InitInstance`</ph> override to initialize Windows Sockets.","source":"Call this function in your `CWinApp::InitInstance` override to initialize Windows Sockets."},{"pos":[27873,27883],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>WSADATA<ept id=\"p1\">](../../mfc/reference/wsadata-structure.md)</ept> structure.","pos":[27902,27979],"source":" A pointer to a [WSADATA](../../mfc/reference/wsadata-structure.md) structure."},{"content":"If <ph id=\"ph1\">`lpwsaData`</ph> is not equal to <ph id=\"ph2\">`NULL`</ph>, then the address of the <ph id=\"ph3\">`WSADATA`</ph> structure is filled by the call to <ph id=\"ph4\">`WSAStartup`</ph>.","pos":[27980,28101],"source":" If `lpwsaData` is not equal to `NULL`, then the address of the `WSADATA` structure is filled by the call to `WSAStartup`."},{"content":"This function also ensures that <ph id=\"ph1\">`WSACleanup`</ph> is called for you before the application terminates.","pos":[28102,28199],"source":" This function also ensures that `WSACleanup` is called for you before the application terminates."},{"pos":[28209,28221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[28225,28276]},{"pos":[28286,28293],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When using MFC sockets in secondary threads in a statically linked MFC application, you must call <ph id=\"ph1\">`AfxSocketInit`</ph> in each thread that uses sockets to initialize the socket libraries.","pos":[28297,28479],"source":"When using MFC sockets in secondary threads in a statically linked MFC application, you must call `AfxSocketInit` in each thread that uses sockets to initialize the socket libraries."},{"content":"By default, <ph id=\"ph1\">`AfxSocketInit`</ph> is called only in the primary thread.","pos":[28480,28545],"source":" By default, `AfxSocketInit` is called only in the primary thread."},{"pos":[28555,28592],"content":"<bpt id=\"p1\">&lt;a name=\"afxwininit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxWinInit","linkify":"<a name=\"afxwininit\"></a>  AfxWinInit","source":"<a name=\"afxwininit\"></a>  AfxWinInit"},{"pos":[28596,28784],"content":"This function is called by the MFC-supplied <ph id=\"ph1\">`WinMain`</ph> function, as part of the <bpt id=\"p1\">[</bpt>CWinApp<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept> initialization of a GUI-based application, to initialize MFC.","source":"This function is called by the MFC-supplied `WinMain` function, as part of the [CWinApp](../../mfc/reference/cwinapp-class.md) initialization of a GUI-based application, to initialize MFC."},{"pos":[28939,28949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The handle of the currently running module.","pos":[28968,29011]},{"content":"<bpt id=\"p1\">*</bpt>hPrevInstance<ept id=\"p1\">*</ept>","pos":[29018,29033],"source":"*hPrevInstance*"},{"content":"A handle to a previous instance of the application.","pos":[29037,29088]},{"content":"For a Win32-based application, this parameter is always <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[29089,29154],"source":" For a Win32-based application, this parameter is always **NULL**."},{"content":"Points to a null-terminated string specifying the command line for the application.","pos":[29176,29259]},{"content":"Specifies how the main window of a GUI application would be shown.","pos":[29280,29346]},{"pos":[29356,29363],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29367,29504],"content":"For a console application, which does not use the MFC-supplied <ph id=\"ph1\">`WinMain`</ph> function, you must call <ph id=\"ph2\">`AfxWinInit`</ph> directly to initialize MFC.","source":"For a console application, which does not use the MFC-supplied `WinMain` function, you must call `AfxWinInit` directly to initialize MFC."},{"content":"If you call <ph id=\"ph1\">`AfxWinInit`</ph> yourself, you should declare an instance of a <ph id=\"ph2\">`CWinApp`</ph> class.","pos":[29511,29598],"source":"If you call `AfxWinInit` yourself, you should declare an instance of a `CWinApp` class."},{"content":"For a console application, you might choose not to derive your own class from <ph id=\"ph1\">`CWinApp`</ph> and instead use an instance of <ph id=\"ph2\">`CWinApp`</ph> directly.","pos":[29599,29737],"source":" For a console application, you might choose not to derive your own class from `CWinApp` and instead use an instance of `CWinApp` directly."},{"content":"This technique is appropriate if you decide to leave all functionality for your application in your implementation of <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept>.","pos":[29738,29865],"source":" This technique is appropriate if you decide to leave all functionality for your application in your implementation of **main**."},{"pos":[29873,30202],"content":"[!NOTE]\n When it creates an activation context for an assembly, MFC uses a manifest resource provided by the user module. The activation context is created in `AfxWinInit`. For more information, see [Support for Activation Contexts in the MFC Module State](../../mfc/support-for-activation-contexts-in-the-mfc-module-state.md).","leadings":["","> "],"nodes":[{"content":" When it creates an activation context for an assembly, MFC uses a manifest resource provided by the user module. The activation context is created in `AfxWinInit`. For more information, see [Support for Activation Contexts in the MFC Module State](../../mfc/support-for-activation-contexts-in-the-mfc-module-state.md).","pos":[8,327],"nodes":[{"content":"When it creates an activation context for an assembly, MFC uses a manifest resource provided by the user module.","pos":[1,113]},{"content":"The activation context is created in <ph id=\"ph1\">`AfxWinInit`</ph>.","pos":[114,164],"source":" The activation context is created in `AfxWinInit`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Support for Activation Contexts in the MFC Module State<ept id=\"p1\">](../../mfc/support-for-activation-contexts-in-the-mfc-module-state.md)</ept>.","pos":[165,319],"source":" For more information, see [Support for Activation Contexts in the MFC Module State](../../mfc/support-for-activation-contexts-in-the-mfc-module-state.md)."}]}]},{"pos":[30212,30219],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30223,30339],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_AfxWinInit#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/application-information-and-management_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_AfxWinInit#1](../../mfc/reference/codesnippet/cpp/application-information-and-management_13.cpp)]"},{"pos":[30348,30356],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Macros and Globals<ept id=\"p1\">](../../mfc/reference/mfc-macros-and-globals.md)</ept><ph id=\"ph1\"> </ph>","pos":[30360,30428],"source":"[Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWinApp Class<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept>","pos":[30431,30485],"source":" [CWinApp Class](../../mfc/reference/cwinapp-class.md)"}],"content":"---\ntitle: \"Application Information and Management | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.mfc.macros\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"applications [MFC], managing\"\nms.assetid: b72f4154-24db-4e75-bca3-6873e2459c15\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Application Information and Management\nWhen you write an application, you create a single [CWinApp](../../mfc/reference/cwinapp-class.md)-derived object. At times, you may want to get information about this object from outside the `CWinApp`-derived object.  \n  \n The Microsoft Foundation Class Library provides the following global functions to help you accomplish these tasks:  \n  \n### Application Information and Management Functions  \n  \n|||  \n|-|-|  \n|[AfxBeginThread](#afxbeginthread)|Creates a new thread.|  \n|[AfxEndThread](#afxendthread)|Terminates the current thread.|  \n|[AfxFreeLibrary](#afxfreelibrary)|Decrements the reference count of the loaded dynamic-link library (DLL) module; when the reference count reaches zero, the module is unmapped.|  \n|[AfxGetApp](#afxgetapp)|Returns a pointer to the application's single `CWinApp` object.|  \n|[AfxGetAppName](#afxgetappname)|Returns a string that contains the application's name.|  \n|[AfxGetInstanceHandle](#afxgetinstancehandle)|Returns an `HINSTANCE` representing this instance of the application.|  \n|[AfxGetMainWnd](#afxgetmainwnd)|Returns a pointer to the current \"main\" window of a non-OLE application, or the in-place frame window of a server application.|  \n|[AfxGetPerUserRegistration](#afxgetperuserregistration)|Use this function to determine whether the application redirects registry access to the **HKEY_CURRENT_USER** ( **HKCU**) node.|  \n|[AfxGetResourceHandle](#afxgetresourcehandle)|Returns an `HINSTANCE` to the source of the application's default resources. Use this to access the application's resources directly.|  \n|[AfxGetThread](#afxgetthread)|Retrieves a pointer to the current [CWinThread](../../mfc/reference/cwinthread-class.md) object.|  \n|[AfxInitRichEdit](#afxinitrichedit)|Initializes the version 1.0 rich edit control for the application.|  \n|[AfxInitRichEdit2](#afxinitrichedit2)|Initializes the version 2.0 and later rich edit control for the application.|  \n|[AfxLoadLibrary](#afxloadlibrary)|Maps a DLL module and returns a handle that can be used to obtain the address of a DLL function.|  \n|[AfxRegisterClass](#afxregisterclass)|Registers a window class in a DLL that uses MFC.|  \n|[AfxRegisterWndClass](#afxregisterwndclass)|Registers a Windows window class to supplement those registered automatically by MFC.|  \n|[AfxSetPerUserRegistration](#afxsetperuserregistration)|Sets whether the application redirects registry access to the **HKEY_CURRENT_USER** ( **HKCU**) node.|  \n|[AfxSetResourceHandle](#afxsetresourcehandle)|Sets the `HINSTANCE` handle where the default resources of the application are loaded.|  \n|[AfxSocketInit](#afxsocketinit)|Called in a `CWinApp::InitInstance` override to initialize Windows Sockets.|  \n|[AfxWinInit](#afxwininit)|Called by the MFC-supplied `WinMain` function, as part of the [CWinApp](../../mfc/reference/cwinapp-class.md) initialization of a GUI-based application, to initialize MFC. Must be called directly for console applications that use MFC.|  \n  \n##  <a name=\"afxbeginthread\"></a>  AfxBeginThread  \n Call this function to create a new thread.  \n  \n```   \nCWinThread* AfxBeginThread(\n    AFX_THREADPROC pfnThreadProc,  \n    LPVOID pParam,  \n    int nPriority = THREAD_PRIORITY_NORMAL,  \n    UINT nStackSize = 0,  \n    DWORD dwCreateFlags = 0,  \n    LPSECURITY_ATTRIBUTES lpSecurityAttrs = NULL);\n\nCWinThread* AfxBeginThread(\n    CRuntimeClass* pThreadClass,  \n    int nPriority = THREAD_PRIORITY_NORMAL,  \n    UINT nStackSize = 0,  \n    DWORD dwCreateFlags = 0,  \n    LPSECURITY_ATTRIBUTES lpSecurityAttrs = NULL); \n```  \n  \n### Parameters  \n `pfnThreadProc`  \n Points to the controlling function for the worker thread. Cannot be **NULL**. This function must be declared as follows:  \n  \n `UINT __cdecl MyControllingFunction( LPVOID pParam );`  \n  \n *pThreadClass*  \n The RUNTIME_CLASS of an object derived from [CWinThread](../../mfc/reference/cwinthread-class.md).  \n  \n *pParam*  \n Parameter to be passed to the controlling function as shown in the parameter to the function declaration in `pfnThreadProc`.  \n  \n `nPriority`  \n The desired priority of the thread. For a full list and description of the available priorities, see [SetThreadPriority](http://msdn.microsoft.com/library/windows/desktop/ms686277) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `nStackSize`  \n Specifies the size in bytes of the stack for the new thread. If 0, the stack size defaults to the same size stack as the creating thread.  \n  \n `dwCreateFlags`  \n Specifies an additional flag that controls the creation of the thread. This flag can contain one of two values:  \n  \n- **CREATE_SUSPENDED** Start the thread with a suspend count of one. Use **CREATE_SUSPENDED** if you want to initialize any member data of the `CWinThread` object, such as [m_bAutoDelete](../../mfc/reference/cwinthread-class.md#cwinthread__m_bautodelete) or any members of your derived class, before the thread starts running. Once your initialization is complete, use [CWinThread::ResumeThread](../../mfc/reference/cwinthread-class.md#cwinthread__resumethread) to start the thread running. The thread will not execute until `CWinThread::ResumeThread` is called.  \n  \n- **0** Start the thread immediately after creation.  \n  \n `lpSecurityAttrs`  \n Points to a [SECURITY_ATTRIBUTES](http://msdn.microsoft.com/library/windows/desktop/aa379560) structure that specifies the security attributes for the thread. If **NULL**, the same security attributes as the creating thread will be used. For more information on this structure, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n Pointer to the newly created thread object, or **NULL** if a failure occurs.  \n  \n### Remarks  \n The first form of `AfxBeginThread` creates a worker thread. The second form creates a thread that may serve as a user-interface thread or as a worker thread.  \n  \n `AfxBeginThread` creates a new `CWinThread` object, calls its [CreateThread](../../mfc/reference/cwinthread-class.md#cwinthread__createthread) function to start executing the thread, and returns a pointer to the thread. Checks are made throughout the procedure to make sure all objects are deallocated properly should any part of the creation fail. To end the thread, call [AfxEndThread](#afxendthread) from within the thread, or return from the controlling function of the worker thread.  \n  \n Multithreading must be enabled by the application; otherwise, this function will fail. For more information on enabling multithreading, refer to [/MD, /MT, /LD (Use Run-Time Library)](../../build/reference/md-mt-ld-use-run-time-library.md) under *Visual C++ Compiler Options*.  \n  \n For more information on `AfxBeginThread`, see the articles [Multithreading: Creating Worker Threads](../../parallel/multithreading-creating-worker-threads.md) and [Multithreading: Creating User-Interface Threads](../../parallel/multithreading-creating-user-interface-threads.md).  \n  \n### Example  \n See the example for [CSocket::Attach](../../mfc/reference/csocket-class.md#csocket__attach).  \n  \n##  <a name=\"afxendthread\"></a>  AfxEndThread  \n Call this function to terminate the currently executing thread.  \n  \n```   \nvoid AFXAPI AfxEndThread(\n    UINT nExitCode,  \n    BOOL bDelete  = TRUE); \n```  \n  \n### Parameters  \n *nExitCode*  \n Specifies the exit code of the thread.  \n  \n *bDelete*  \n Deletes the thread object from memory.  \n  \n### Remarks  \n Must be called from within the thread to be terminated.  \n  \n For more information on `AfxEndThread`, see the article [Multithreading: Terminating Threads](../../parallel/multithreading-terminating-threads.md).  \n  \n##  <a name=\"afxfreelibrary\"></a>  AfxFreeLibrary  \n Both `AfxFreeLibrary` and `AfxLoadLibrary` maintain a reference count for each loaded library module.  \n  \n```   \nBOOL AFXAPI AfxFreeLibrary(HINSTANCE hInstLib); \n```  \n  \n### Parameters  \n *hInstLib*  \n A handle of the loaded library module. [AfxLoadLibrary](#afxloadlibrary) returns this handle.  \n  \n### Return Value  \n **TRUE** if the function succeeds; otherwise, **FALSE**.  \n  \n### Remarks  \n `AfxFreeLibrary` decrements the reference count of the loaded dynamic-link library (DLL) module. When the reference count reaches zero, the module is unmapped from the address space of the calling process and the handle is no longer valid. This reference count is incremented each time `AfxLoadLibrary` is called.  \n  \n Before unmapping a library module, the system enables the DLL to detach from the processes using it. Doing so gives the DLL an opportunity to clean up resources allocated on behalf of the current process. After the entry-point function returns, the library module is removed from the address space of the current process.  \n  \n Use `AfxLoadLibrary` to map a DLL module.  \n  \n Be sure to use `AfxFreeLibrary` and `AfxLoadLibrary` (instead of the Win32 functions **FreeLibrary** and **LoadLibrary**) if your application uses multiple threads. Using `AfxLoadLibrary` and `AfxFreeLibrary` ensures that the startup and shutdown code that executes when the extension DLL is loaded and unloaded does not corrupt the global MFC state.  \n  \n### Example  \n See the example for [AfxLoadLibrary](#afxloadlibrary).  \n  \n##  <a name=\"afxgetapp\"></a>  AfxGetApp  \n The pointer returned by this function can be used to access application information such as the main message-dispatch code or the topmost window.  \n  \n```   \nCWinApp* AFXAPI AfxGetApp(); \n```  \n  \n### Return Value  \n A pointer to the single `CWinApp` object for the application.  \n  \n### Remarks  \n If this method returns NULL, it might indicate that the applicationâ€™s main window has not been fully initialized yet. It might also indicate a problem.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#126](../../mfc/reference/codesnippet/cpp/application-information-and-management_1.cpp)]  \n  \n##  <a name=\"afxgetappname\"></a>  AfxGetAppName  \n The string returned by this function can be used for diagnostic messages or as a root for temporary string names.  \n  \n```   \nLPCTSTR AFXAPI AfxGetAppName(); \n```  \n  \n### Return Value  \n A null-terminated string containing the application's name.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#127](../../mfc/reference/codesnippet/cpp/application-information-and-management_2.cpp)]  \n  \n##  <a name=\"afxgetinstancehandle\"></a>  AfxGetInstanceHandle  \n This function allows you to retrieve the instance handle of the current application.  \n  \n```   \nHINSTANCE  AFXAPI AfxGetInstanceHandle(); \n```  \n  \n### Return Value  \n An `HINSTANCE` to the current instance of the application. If called from within a DLL linked with the USRDLL version of MFC, an `HINSTANCE` to the DLL is returned.  \n  \n### Remarks  \n `AfxGetInstanceHandle` always returns the `HINSTANCE` of your executable file (.EXE) unless it is called from within a DLL linked with the USRDLL version of MFC. In this case, it returns an `HINSTANCE` to the DLL.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#128](../../mfc/reference/codesnippet/cpp/application-information-and-management_3.cpp)]  \n  \n##  <a name=\"afxgetmainwnd\"></a>  AfxGetMainWnd  \n If your application is an OLE server, call this function to retrieve a pointer to the active main window of the application instead of directly referring to the [m_pMainWnd](../../mfc/reference/cwinthread-class.md#cwinthread__m_pmainwnd) member of the application object.  \n  \n```   \nCWnd* AFXAPI AfxGetMainWnd(); \n```  \n  \n### Return Value  \n If the server has an object that is in-place active inside a container, and this container is active, this function returns a pointer to the frame window object that contains the in-place active document.  \n  \n If there is no object that is in-place active within a container, or your application is not an OLE server, this function simply returns the `m_pMainWnd` of your application object.  \n  \n If `AfxGetMainWnd` is called from the application's primary thread, it returns the application's main window according to the above rules. If the function is called from a secondary thread in the application, the function returns the main window associated with the thread that made the call.  \n  \n### Remarks  \n If your application is not an OLE server, then calling this function is equivalent to directly referring to the `m_pMainWnd` member of your application object.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#129](../../mfc/reference/codesnippet/cpp/application-information-and-management_4.cpp)]  \n  \n##  <a name=\"afxgetperuserregistration\"></a>  AfxGetPerUserRegistration  \n Use this function to determine whether the application redirects registry access to the **HKEY_CURRENT_USER** ( **HKCU**) node.  \n  \n```  \nBOOL AFXAPI AfxGetPerUserRegistration();\n```  \n  \n### Return Value  \n `TRUE` indicates that the registry information is directed to the **HKCU** node; `FALSE` indicates that the application writes registry information to the default node. The default node is **HKEY_CLASSES_ROOT** ( **HKCR**).  \n  \n### Remarks  \n If you enable registry redirection, the framework redirects access from **HKCR** to **HKEY_CURRENT_USER\\Software\\Classes**. Only the MFC and ATL frameworks are affected by the redirection.  \n  \n To change whether the application redirects registry access, use [AfxSetPerUserRegistration](#afxsetperuserregistration).  \n  \n##  <a name=\"afxgetresourcehandle\"></a>  AfxGetResourceHandle  \n Use the `HINSTANCE` handle returned by this function to access the application's resources directly, for example, in calls to the Windows function **FindResource**.  \n  \n```   \nextern HINSTANCE  AfxGetResourceHandle(); \n```  \n  \n### Return Value  \n An `HINSTANCE` handle where the default resources of the application are loaded.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#130](../../mfc/reference/codesnippet/cpp/application-information-and-management_5.cpp)]  \n  \n##  <a name=\"afxgetthread\"></a>  AfxGetThread  \n Call this function to get a pointer to the [CWinThread](../../mfc/reference/cwinthread-class.md) object representing the currently executing thread.  \n  \n```   \nCWinThread* AfxGetThread(); \n```  \n  \n### Return Value  \n Pointer to the currently executing thread; otherwise **NULL**.  \n  \n### Remarks  \n Must be called from within the desired thread.  \n  \n> [!NOTE]\n>  If you are porting an MFC project calling `AfxGetThread` from Visual C++ versions 4.2, 5.0, or 6.0, `AfxGetThread` calls [AfxGetApp](#afxgetapp) if no thread is found. In Visual C+ .NET and later, `AfxGetThread` returns **NULL** if no thread was found. If you want the application thread, you must call `AfxGetApp`.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#132](../../mfc/reference/codesnippet/cpp/application-information-and-management_6.cpp)]  \n  \n##  <a name=\"afxinitrichedit\"></a>  AfxInitRichEdit  \n Call this function to initialize the rich edit control (version 1.0) for the application.  \n  \n```   \nBOOL AFXAPI AfxInitRichEdit(); \n```  \n  \n### Remarks  \n This function is provided for backward compatibility. Applications created with Visual C++ .NET and later use [AfxInitRichEdit2](#afxinitrichedit2).  \n  \n `AfxInitRichEdit` loads RICHED32.DLL to initialize version 1.0 of the rich edit control. To use version 2.0 and 3.0 of the rich edit control, RICHED20.DLL needs to be loaded. This is accomplished with a call to [AfxInitRichEdit2](#afxinitrichedit2). If you have dialog resources with the rich edit control created prior to Visual C++ .NET, the rich edit controls are automatically version 1.0. Rich edit controls inserted using the Visual C++ .NET Resource Editor are version 2.0.  \n  \n To update rich edit controls in existing Visual C++ applications to version 2.0, open the .RC file as text, change the class name of each rich edit control from \"RICHEDIT\" to \"RichEdit20a\". Then replace the call to `AfxInitRichEdit` with `AfxInitRichEdit2`.  \n  \n This function also initializes the common controls library, if the library hasn't already been initialized for the process. If you use the rich edit control directly from your MFC application, you should call this function to assure that MFC has properly initialized the rich edit control runtime. If you call the Create method of [CRichEditCtrl](../../mfc/reference/cricheditctrl-class.md), [CRichEditView](../../mfc/reference/cricheditview-class.md), or [CRichEditDoc](../../mfc/reference/cricheditdoc-class.md), you typically don't need to call this function, but in some cases it might be necessary.  \n  \n##  <a name=\"afxinitrichedit2\"></a>  AfxInitRichEdit2  \n Call this function to initialize the rich edit control (version 2.0 and later) for the application.  \n  \n```   \nBOOL AFXAPI AfxInitRichEdit2(); \n```  \n  \n### Remarks  \n Call this function to load the RICHED20.DLL and initialize version 2.0 of the rich edit control. If you call the Create method of [CRichEditCtrl](../../mfc/reference/cricheditctrl-class.md), [CRichEditView](../../mfc/reference/cricheditview-class.md), or [CRichEditDoc](../../mfc/reference/cricheditdoc-class.md), you typically don't need to call this function, but in some cases it might be necessary.  \n  \n##  <a name=\"afxloadlibrary\"></a>  AfxLoadLibrary  \n Use `AfxLoadLibrary` to map a DLL module.  \n  \n```   \nHINSTANCE AFXAPI AfxLoadLibrary(LPCTSTR lpszModuleName); \n```  \n  \n### Parameters  \n *lpszModuleName*  \n Points to a null-terminated string that contains the name of the module (either a .DLL or .EXE file). The name specified is the filename of the module.  \n  \n If the string specifies a path but the file does not exist in the specified directory, the function fails.  \n  \n If a path is not specified and the filename extension is omitted, the default extension .DLL is appended. However, the filename string can include a trailing point character (.) to indicate that the module name has no extension. When no path is specified, the function searches for the file in the following sequence:  \n  \n-   The directory from which the application loaded.  \n  \n-   The current directory.  \n  \n- **Windows 95/98:** The Windows system directory. **Windows NT:** The 32-bit Windows system directory. The name of this directory is SYSTEM32.  \n  \n- **Windows NT only:** The 16-bit Windows system directory. There is no Win32 function that obtains the path of this directory, but it is searched. The name of this directory is SYSTEM.  \n  \n-   The Windows directory.  \n  \n-   The directories that are listed in the PATH environment variable.  \n  \n### Return Value  \n If the function succeeds, the return value is a handle to the module. If the function fails, the return value is NULL.  \n  \n### Remarks  \n It returns a handle that can be used in [GetProcAddress](http://msdn.microsoft.com/library/windows/desktop/ms683212) to get the address of a DLL function. `AfxLoadLibrary` can also be used to map other executable modules.  \n  \n Each process maintains a reference count for each loaded library module. This reference count is incremented each time `AfxLoadLibrary` is called and is decremented each time `AfxFreeLibrary` is called. When the reference count reaches zero, the module is unmapped from the address space of the calling process and the handle is no longer valid.  \n  \n Be sure to use `AfxLoadLibrary` and `AfxFreeLibrary` (instead of the Win32 functions **LoadLibrary** and **FreeLibrary**) if your application uses multiple threads and if it dynamically loads an extension DLL. Using `AfxLoadLibrary` and `AfxFreeLibrary` insures that the startup and shutdown code that executes when the extension DLL is loaded and unloaded does not corrupt the global MFC state.  \n  \n Using `AfxLoadLibrary` in an application requires you to dynamically link to the DLL version of MFC; the header file for `AfxLoadLibrary`, Afxdll_.h, is only included if MFC is linked to the application as a DLL. This is by design because you have to link to the DLL version of MFC to use or create extension DLLs.  \n  \n### Example  \n [!code-cpp[NVC_MFC_DLLUser#1](../../mfc/reference/codesnippet/cpp/application-information-and-management_7.cpp)]  \n[!code-cpp[NVC_MFC_DLLUser#2](../../mfc/reference/codesnippet/cpp/application-information-and-management_8.cpp)]  \n[!code-cpp[NVC_MFC_DLLUser#3](../../mfc/reference/codesnippet/cpp/application-information-and-management_9.cpp)]  \n  \n##  <a name=\"afxregisterclass\"></a>  AfxRegisterClass  \n Use this function to register window classes in a DLL that uses MFC.  \n  \n```   \nBOOL AFXAPI AfxRegisterClass(WNDCLASS* lpWndClass); \n```  \n  \n### Parameters  \n *lpWndClass*  \n Pointer to a [WNDCLASS](http://msdn.microsoft.com/library/windows/desktop/ms633576) structure containing information about the window class to be registered. For more information on this structure, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n **TRUE** if the class is successfully registered; otherwise **FALSE**.  \n  \n### Remarks  \n If you use this function, the class is automatically unregistered when the DLL is unloaded.  \n  \n In non-DLL builds, the `AfxRegisterClass` identifier is defined as a macro that maps to the Windows function **RegisterClass**, since classes registered in an application are automatically unregistered. If you use `AfxRegisterClass` instead of **RegisterClass**, your code can be used without change both in an application and in a DLL.  \n  \n### Example  \n [!code-cpp[NVC_MFC_DLL#3](../../atl-mfc-shared/codesnippet/cpp/application-information-and-management_10.cpp)]  \n  \n##  <a name=\"afxregisterwndclass\"></a>  AfxRegisterWndClass  \n Allows you to register your own window classes.  \n  \n```  \n \nLPCTSTR AFXAPI AfxRegisterWndClass(\n    UINT nClassStyle,  \n    HCURSOR hCursor = 0,  \n    HBRUSH hbrBackground = 0,  \n    HICON hIcon = 0);\n\n \n```  \n  \n### Parameters  \n *nClassStyle*  \n Specifies the Windows class style or combination of styles, created by using the bitwise-OR ( **&#124;**) operator, for the window class. For a list of class styles, see the [WNDCLASS](http://msdn.microsoft.com/library/windows/desktop/ms633576) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. If **NULL**, the defaults will be set as follows:  \n  \n-   Sets the mouse style to **CS_DBLCLKS**, which sends double-click messages to the window procedure when the user double-clicks the mouse.  \n  \n-   Sets the arrow cursor style to the Windows standard **IDC_ARROW**.  \n  \n-   Sets the background brush to **NULL**, so the window will not erase its background.  \n  \n-   Sets the icon to the standard, waving-flag Windows logo icon.  \n  \n `hCursor`  \n Specifies a handle to the cursor resource to be installed in each window created from the window class. If you use the default of **0**, you will get the standard **IDC_ARROW** cursor.  \n  \n *hbrBackground*  \n Specifies a handle to the brush resource to be installed in each window created from the window class. If you use the default of **0**, you will have a **NULL** background brush, and your window will, by default, not erase its background while processing [WM_ERASEBKGND](http://msdn.microsoft.com/library/windows/desktop/ms648055).  \n  \n `hIcon`  \n Specifies a handle to the icon resource to be installed in each window created from the window class. If you use the default of **0**, you will get the standard, waving-flag Windows logo icon.  \n  \n### Return Value  \n A null-terminated string containing the class name. You can pass this class name to the **Create** member function in `CWnd` or other **CWnd-**derived classes to create a window. The name is generated by the Microsoft Foundation Class Library.  \n  \n> [!NOTE]\n>  The return value is a pointer to a static buffer. To save this string, assign it to a `CString` variable.  \n  \n### Remarks  \n The Microsoft Foundation Class Library automatically registers several standard window classes for you. Call this function if you want to register your own window classes.  \n  \n The name registered for a class by `AfxRegisterWndClass` depends solely on the parameters. If you call `AfxRegisterWndClass` multiple times with identical parameters, it only registers a class on the first call. Subsequent calls to `AfxRegisterWndClass` with identical parameters simply return the already-registered classname.  \n  \n If you call `AfxRegisterWndClass` for multiple CWnd-derived classes with identical parameters, instead of getting a separate window class for each class, each class shares the same window class. This can cause problems if the **CS_CLASSDC** class style is used. Instead of multiple **CS_CLASSDC** window classes, you end up with one **CS_CLASSDC** window class, and all C++ windows that use that class share the same DC. To avoid this problem, call [AfxRegisterClass](#afxregisterclass) to register the class.  \n  \n Refer to Technical Note [TN001: Window Class Registration](../../mfc/tn001-window-class-registration.md) for more information on window class registration and the `AfxRegisterWndClass` function.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#134](../../mfc/reference/codesnippet/cpp/application-information-and-management_11.cpp)]  \n  \n##  <a name=\"afxsetperuserregistration\"></a>  AfxSetPerUserRegistration  \n Sets whether the application redirects registry access to the **HKEY_CURRENT_USER** ( **HKCU**) node.  \n  \n```  \nvoid AFXAPI AfxSetPerUserRegistration(BOOL bEnable);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` indicates that the registry information is directed to the **HKCU** node; `FALSE` indicates that the application writes registry information to the default node. The default node is **HKEY_CLASSES_ROOT** ( **HKCR**).  \n  \n### Remarks  \n Before [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], applications that access the registry usually use the **HKEY_CLASSES_ROOT** node. However, with [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], you must run an application in elevated mode to write to **HKCR**.  \n  \n This method enables your application to read and write to the registry without running in elevated mode by redirecting registry access from **HKCR** to **HKCU**. For more information, see [Linker Property Pages](../../ide/linker-property-pages.md).  \n  \n If you enable registry redirection, the framework redirects access from **HKCR** to **HKEY_CURRENT_USER\\Software\\Classes**. Only the MFC and ATL frameworks are affected by the redirection.  \n  \n The default implementation accesses the registry under **HKCR**.  \n  \n##  <a name=\"afxsetresourcehandle\"></a>  AfxSetResourceHandle  \n Use this function to set the `HINSTANCE` handle that determines where the default resources of the application are loaded.  \n  \n```  \n \nvoid  \nAFXAPI AfxSetResourceHandle(HINSTANCE hInstResource);\n\n \n```  \n  \n### Parameters  \n `hInstResource`  \n The instance or module handle to an .EXE or DLL file from which the application's resources are loaded.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#135](../../mfc/reference/codesnippet/cpp/application-information-and-management_12.cpp)]  \n  \n##  <a name=\"afxsocketinit\"></a>  AfxSocketInit  \n Call this function in your `CWinApp::InitInstance` override to initialize Windows Sockets.  \n  \n```  \n \nBOOL  \nAfxSocketInit(WSADATA* lpwsaData = NULL);\n\n \n```  \n  \n### Parameters  \n `lpwsaData`  \n A pointer to a [WSADATA](../../mfc/reference/wsadata-structure.md) structure. If `lpwsaData` is not equal to `NULL`, then the address of the `WSADATA` structure is filled by the call to `WSAStartup`. This function also ensures that `WSACleanup` is called for you before the application terminates.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n When using MFC sockets in secondary threads in a statically linked MFC application, you must call `AfxSocketInit` in each thread that uses sockets to initialize the socket libraries. By default, `AfxSocketInit` is called only in the primary thread.  \n  \n##  <a name=\"afxwininit\"></a>  AfxWinInit  \n This function is called by the MFC-supplied `WinMain` function, as part of the [CWinApp](../../mfc/reference/cwinapp-class.md) initialization of a GUI-based application, to initialize MFC.  \n  \n```  \n \nBOOL AFXAPI AfxWinInit(\n    HINSTANCE hInstance,  \n    HINSTANCE hPrevInstance,  \n    LPTSTR lpCmdLine,  \n    int nCmdShow);\n\n \n```  \n  \n### Parameters  \n `hInstance`  \n The handle of the currently running module.  \n  \n *hPrevInstance*  \n A handle to a previous instance of the application. For a Win32-based application, this parameter is always **NULL**.  \n  \n `lpCmdLine`  \n Points to a null-terminated string specifying the command line for the application.  \n  \n `nCmdShow`  \n Specifies how the main window of a GUI application would be shown.  \n  \n### Remarks  \n For a console application, which does not use the MFC-supplied `WinMain` function, you must call `AfxWinInit` directly to initialize MFC.  \n  \n If you call `AfxWinInit` yourself, you should declare an instance of a `CWinApp` class. For a console application, you might choose not to derive your own class from `CWinApp` and instead use an instance of `CWinApp` directly. This technique is appropriate if you decide to leave all functionality for your application in your implementation of **main**.  \n  \n> [!NOTE]\n>  When it creates an activation context for an assembly, MFC uses a manifest resource provided by the user module. The activation context is created in `AfxWinInit`. For more information, see [Support for Activation Contexts in the MFC Module State](../../mfc/support-for-activation-contexts-in-the-mfc-module-state.md).  \n  \n### Example  \n [!code-cpp[NVC_MFC_AfxWinInit#1](../../mfc/reference/codesnippet/cpp/application-information-and-management_13.cpp)]  \n  \n## See Also  \n [Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)   \n [CWinApp Class](../../mfc/reference/cwinapp-class.md)\n"}