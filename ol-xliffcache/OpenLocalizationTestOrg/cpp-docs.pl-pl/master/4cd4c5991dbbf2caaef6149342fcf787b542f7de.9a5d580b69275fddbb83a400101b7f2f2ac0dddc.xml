{"nodes":[{"pos":[12,51],"content":"CWinFormsControl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CWinFormsControl Class | Microsoft Docs","pos":[0,39]}]},{"content":"CWinFormsControl Class","pos":[700,722]},{"content":"Provides the basic functionality for hosting of a Windows Forms control.","pos":[723,795]},{"content":"Syntax","pos":[804,810]},{"content":"Parameters","pos":[909,919]},{"content":"A .NET Framework Windows Forms control to be displayed in the MFC application.","pos":[944,1022]},{"content":"Members","pos":[1031,1038]},{"content":"Public Constructors","pos":[1048,1067]},{"content":"Name","pos":[1074,1078]},{"content":"Description","pos":[1079,1090]},{"content":"CWinFormsControl::CWinFormsControl","pos":[1129,1163]},{"content":"Constructs an MFC Windows Forms control wrapper object.","pos":[1202,1257]},{"content":"Public Methods","pos":[1268,1282]},{"content":"Name","pos":[1289,1293]},{"content":"Description","pos":[1294,1305]},{"content":"CWinFormsControl::CreateManagedControl","pos":[1344,1382]},{"content":"Creates a Windows Forms control in an MFC container.","pos":[1425,1477]},{"content":"CWinFormsControl::GetControl","pos":[1483,1511]},{"content":"Retrieves a pointer to the Windows Forms control.","pos":[1544,1593]},{"content":"CWinFormsControl::GetControlHandle","pos":[1599,1633]},{"content":"Retrieves a handle to the Windows Forms control.","pos":[1672,1720]},{"content":"Public Operators","pos":[1731,1747]},{"content":"Name","pos":[1754,1758]},{"content":"Description","pos":[1759,1770]},{"content":"CWinFormsControl::operator -","pos":[1809,1837]},{"pos":[1878,1964],"content":"Replaces <bpt id=\"p1\">[</bpt>CWinFormsControl::GetControl<ept id=\"p1\">](#cwinformscontrol__getcontrol)</ept> in expressions.","source":"Replaces [CWinFormsControl::GetControl](#cwinformscontrol__getcontrol) in expressions."},{"content":"CWinFormsControl::operator TManagedControl^","pos":[1970,2013]},{"content":"Casts a type as a pointer to a Windows Forms control.","pos":[2060,2113]},{"content":"Remarks","pos":[2123,2130]},{"pos":[2134,2235],"content":"The <ph id=\"ph1\">`CWinFormsControl`</ph> class provides the basic functionality for hosting of a Windows Forms control.","source":"The `CWinFormsControl` class provides the basic functionality for hosting of a Windows Forms control."},{"pos":[2242,2392],"content":"For more information on using Windows Forms, see <bpt id=\"p1\">[</bpt>Using a Windows Form User Control in MFC<ept id=\"p1\">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept>.","source":"For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md)."},{"content":"Your MFC code should not cache Window handles (usually stored in <ph id=\"ph1\">`m_hWnd`</ph>).","pos":[2399,2474],"source":"Your MFC code should not cache Window handles (usually stored in `m_hWnd`)."},{"content":"Some Windows Forms control properties require that the underlying Win32 <ph id=\"ph1\">`Window`</ph> be destroyed and recreated using <ph id=\"ph2\">`DestroyWindow`</ph> and <ph id=\"ph3\">`CreateWindow`</ph>.","pos":[2475,2624],"source":" Some Windows Forms control properties require that the underlying Win32 `Window` be destroyed and recreated using `DestroyWindow` and `CreateWindow`."},{"content":"The MFC Windows Forms implementation handles the <ph id=\"ph1\">`Destroy`</ph> and <ph id=\"ph2\">`Create`</ph> events of the controls to update the <ph id=\"ph3\">`m_hWnd`</ph> member.","pos":[2625,2750],"source":" The MFC Windows Forms implementation handles the `Destroy` and `Create` events of the controls to update the `m_hWnd` member."},{"pos":[2758,2883],"content":"[!NOTE]\n MFC Windows Forms integration works only in projects which link dynamically with MFC (in which AFXDLL is defined).","leadings":["","> "],"nodes":[{"content":"MFC Windows Forms integration works only in projects which link dynamically with MFC (in which AFXDLL is defined).","pos":[9,123]}]},{"content":"Requirements","pos":[2892,2904]},{"pos":[2908,2933],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwinforms.h","source":"**Header:** afxwinforms.h"},{"pos":[2998,3036],"content":"CWinFormsControl::CreateManagedControl"},{"content":"Creates a Windows Forms control in an MFC container.","pos":[3040,3092]},{"content":"Parameters","pos":[3648,3658]},{"content":"The data type of the control to be created.","pos":[3673,3716]},{"content":"Must be a <bpt id=\"p1\">[</bpt>Type<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.type)</ept> data type.","pos":[3717,3798],"source":" Must be a [Type](https://msdn.microsoft.com/en-us/library/system.type) data type."},{"content":"The window style to apply to the control.","pos":[3818,3859]},{"content":"Specify a combination of <bpt id=\"p1\">[</bpt>Window Styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept>.","pos":[3860,3939],"source":" Specify a combination of [Window Styles](../../mfc/reference/window-styles.md)."},{"content":"Currently, only the following styles are supported: WS_TABSTOP, WS_VISIBLE, WS_DISABLED and WS_GROUP.","pos":[3940,4041]},{"content":"A <bpt id=\"p1\">[</bpt>RECT Structure<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> that defines the coordinates of the upper-left and lower-right corners of the control (first overload only).","pos":[4058,4225],"source":" A [RECT Structure](../../mfc/reference/rect-structure1.md) that defines the coordinates of the upper-left and lower-right corners of the control (first overload only)."},{"content":"The handle of the static place holder control placed in the Resource Editor.","pos":[4252,4328]},{"content":"The newly created Windows Forms control replaces the static control, assuming its position, z-order, and styles (second overload only).","pos":[4329,4464]},{"content":"A pointer to the parent window.","pos":[4487,4518]},{"content":"The resource ID number to be assigned to the newly created control.","pos":[4534,4601]},{"content":"An instance of a Windows Forms control to be associated with the <bpt id=\"p1\">[</bpt>CWinFormsControl<ept id=\"p1\">](../../mfc/reference/cwinformscontrol-class.md)</ept> object (fourth overload only).","pos":[4622,4783],"source":" An instance of a Windows Forms control to be associated with the [CWinFormsControl](../../mfc/reference/cwinformscontrol-class.md) object (fourth overload only)."},{"content":"Return Value","pos":[4793,4805]},{"content":"If successful, returns a nonzero value.","pos":[4809,4848]},{"content":"If unsuccessful, returns zero.","pos":[4849,4879]},{"content":"Remarks","pos":[4889,4896]},{"content":"This method instantiates a .NET Framework Windows Forms control in an MFC container.","pos":[4900,4984]},{"content":"The first overload of the method accepts a .NET Framework data type <ph id=\"ph1\">`pType`</ph> so that MFC can instantiate a new object of this type.","pos":[4991,5121],"source":"The first overload of the method accepts a .NET Framework data type `pType` so that MFC can instantiate a new object of this type."},{"content":"must be a <bpt id=\"p1\">[</bpt>Type<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.type)</ept> data type.","pos":[5130,5211],"source":" must be a [Type](https://msdn.microsoft.com/en-us/library/system.type) data type."},{"content":"The second overload of the method creates a Windows Forms control based on the <ph id=\"ph1\">`TManagedControl`</ph> template parameter of the <ph id=\"ph2\">`CWinFormsControl`</ph> class.","pos":[5218,5366],"source":"The second overload of the method creates a Windows Forms control based on the `TManagedControl` template parameter of the `CWinFormsControl` class."},{"content":"The size and position of the control is based on the <ph id=\"ph1\">`RECT`</ph> structure passed to the method.","pos":[5367,5458],"source":" The size and position of the control is based on the `RECT` structure passed to the method."},{"content":"Only <ph id=\"ph1\">`dwStyle`</ph> matters for the styles.","pos":[5459,5497],"source":" Only `dwStyle` matters for the styles."},{"content":"The third overload of the method creates a Windows Forms control that replaces a static control, destroying it and assuming its position, z-order, and styles.","pos":[5504,5662]},{"content":"The static control serves only as a placeholder for the Windows Forms control.","pos":[5663,5741]},{"content":"When creating the control, this overload combines the styles from <ph id=\"ph1\">`dwStyle`</ph> with the static control's resource styles.","pos":[5742,5860],"source":" When creating the control, this overload combines the styles from `dwStyle` with the static control's resource styles."},{"content":"The fourth overload of the method allows you to pass in an already instantiated Windows Forms control <ph id=\"ph1\">`pControl`</ph> that MFC will wrap.","pos":[5867,5999],"source":"The fourth overload of the method allows you to pass in an already instantiated Windows Forms control `pControl` that MFC will wrap."},{"content":"It must be of the same type as the <ph id=\"ph1\">`TManagedControl`</ph> template parameter of the <ph id=\"ph2\">`CWinFormsControl`</ph> class.","pos":[6000,6104],"source":" It must be of the same type as the `TManagedControl` template parameter of the `CWinFormsControl` class."},{"pos":[6111,6259],"content":"See <bpt id=\"p1\">[</bpt>Using a Windows Form User Control in MFC<ept id=\"p1\">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept> for samples on using Windows Form controls.","source":"See [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md) for samples on using Windows Form controls."},{"pos":[6320,6354],"content":"CWinFormsControl::CWinFormsControl"},{"content":"Constructs an MFC Windows Forms control wrapper object.","pos":[6358,6413]},{"content":"Remarks","pos":[6458,6465]},{"pos":[6469,6607],"content":"The Windows Forms control is instantiated when you call <bpt id=\"p1\">[</bpt>CWinFormsControl::CreateManagedControl<ept id=\"p1\">](#cwinformscontrol__createmanagedcontrol)</ept>.","source":"The Windows Forms control is instantiated when you call [CWinFormsControl::CreateManagedControl](#cwinformscontrol__createmanagedcontrol)."},{"pos":[6662,6690],"content":"CWinFormsControl::GetControl"},{"content":"Retrieves a pointer to the Windows Forms control.","pos":[6694,6743]},{"content":"Return Value","pos":[6815,6827]},{"content":"Returns a pointer to the Windows Forms control.","pos":[6831,6878]},{"content":"Example","pos":[6888,6895]},{"pos":[6900,6986],"content":"See <bpt id=\"p1\">[</bpt>CWinFormsControl::CreateManagedControl<ept id=\"p1\">](#cwinformscontrol__createmanagedcontrol)</ept>.","source":"See [CWinFormsControl::CreateManagedControl](#cwinformscontrol__createmanagedcontrol)."},{"pos":[7047,7081],"content":"CWinFormsControl::GetControlHandle"},{"content":"Retrieves a handle to the Windows Forms control.","pos":[7085,7133]},{"content":"Return Value","pos":[7199,7211]},{"content":"Returns a handle to the Windows Forms control.","pos":[7215,7261]},{"content":"Remarks","pos":[7271,7278]},{"content":"is a helper method that returns the window handle stored in the .NET Framework control properties.","pos":[7301,7399]},{"content":"The window handle value is copied to <bpt id=\"p1\">[</bpt>CWnd::m_hWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__m_hwnd)</ept> during the call to <bpt id=\"p2\">[</bpt>CWnd::Attach<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__attach)</ept>.","pos":[7400,7582],"source":" The window handle value is copied to [CWnd::m_hWnd](../../mfc/reference/cwnd-class.md#cwnd__m_hwnd) during the call to [CWnd::Attach](../../mfc/reference/cwnd-class.md#cwnd__attach)."},{"pos":[7641,7669],"content":"CWinFormsControl::operator -"},{"pos":[7677,7763],"content":"Replaces <bpt id=\"p1\">[</bpt>CWinFormsControl::GetControl<ept id=\"p1\">](#cwinformscontrol__getcontrol)</ept> in expressions.","source":"Replaces [CWinFormsControl::GetControl](#cwinformscontrol__getcontrol) in expressions."},{"content":"Remarks","pos":[7836,7843]},{"pos":[7847,7932],"content":"This operator provides a convenient syntax that replaces <ph id=\"ph1\">`GetControl`</ph> in expressions.","source":"This operator provides a convenient syntax that replaces `GetControl` in expressions."},{"pos":[7939,8083],"content":"For more information on Windows Forms, see <bpt id=\"p1\">[</bpt>Using a Windows Form User Control in MFC<ept id=\"p1\">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept>.","source":"For more information on Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md)."},{"pos":[8152,8195],"content":"CWinFormsControl::operator TManagedControl^"},{"content":"Casts a type as a pointer to a Windows Forms control.","pos":[8199,8252]},{"content":"Remarks","pos":[8322,8329]},{"pos":[8333,8456],"content":"This operator passes <ph id=\"ph1\">`CWinFormsControl&lt;``TManagedControl``&gt;`</ph> to functions that accept a pointer to a Windows Forms control.","source":"This operator passes `CWinFormsControl<``TManagedControl``>` to functions that accept a pointer to a Windows Forms control."},{"content":"See Also","pos":[8465,8473]},{"content":"CWinFormsDialog Class","pos":[8478,8499]},{"content":"CWinFormsView Class","pos":[8552,8571]}],"content":"---\ntitle: \"CWinFormsControl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CWinFormsControl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"MFC [C++], Windows Forms support\"\n  - \"CWinFormsControl class\"\n  - \"Windows Forms [C++], MFC support\"\nms.assetid: 6406dd7b-fb89-4a18-ac3a-c010d6b6289a\ncaps.latest.revision: 28\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CWinFormsControl Class\nProvides the basic functionality for hosting of a Windows Forms control.  \n  \n## Syntax  \n  \n```  \ntemplate<class TManagedControl>  \nclass CWinFormsControl : public CWnd  \n```  \n  \n#### Parameters  \n `TManagedControl`  \n A .NET Framework Windows Forms control to be displayed in the MFC application.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinFormsControl::CWinFormsControl](#cwinformscontrol__cwinformscontrol)|Constructs an MFC Windows Forms control wrapper object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinFormsControl::CreateManagedControl](#cwinformscontrol__createmanagedcontrol)|Creates a Windows Forms control in an MFC container.|  \n|[CWinFormsControl::GetControl](#cwinformscontrol__getcontrol)|Retrieves a pointer to the Windows Forms control.|  \n|[CWinFormsControl::GetControlHandle](#cwinformscontrol__getcontrolhandle)|Retrieves a handle to the Windows Forms control.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinFormsControl::operator -&gt;](#cwinformscontrol__operator_-_gt_)|Replaces [CWinFormsControl::GetControl](#cwinformscontrol__getcontrol) in expressions.|  \n|[CWinFormsControl::operator TManagedControl^](#cwinformscontrol__operator_tmanagedcontrol)|Casts a type as a pointer to a Windows Forms control.|  \n  \n## Remarks  \n The `CWinFormsControl` class provides the basic functionality for hosting of a Windows Forms control.  \n  \n For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md).  \n  \n Your MFC code should not cache Window handles (usually stored in `m_hWnd`). Some Windows Forms control properties require that the underlying Win32 `Window` be destroyed and recreated using `DestroyWindow` and `CreateWindow`. The MFC Windows Forms implementation handles the `Destroy` and `Create` events of the controls to update the `m_hWnd` member.  \n  \n> [!NOTE]\n>  MFC Windows Forms integration works only in projects which link dynamically with MFC (in which AFXDLL is defined).  \n  \n## Requirements  \n **Header:** afxwinforms.h  \n  \n##  <a name=\"cwinformscontrol__createmanagedcontrol\"></a>  CWinFormsControl::CreateManagedControl  \n Creates a Windows Forms control in an MFC container.  \n  \n```  \ninline BOOL CreateManagedControl(\n    System::Type^ pType,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    int nID)  \ninline BOOL CreateManagedControl(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    int nID);\n\n \ninline BOOL CreateManagedControl(\n    DWORD dwStyle,  \n    int nPlaceHolderID,  \n    CWnd* pParentWnd);\n\n \ninline BOOL CreateManagedControl(\n    typename TManagedControl^ pControl,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    int nID);\n```  \n  \n### Parameters  \n `pType`  \n The data type of the control to be created. Must be a [Type](https://msdn.microsoft.com/en-us/library/system.type) data type.  \n  \n `dwStyle`  \n The window style to apply to the control. Specify a combination of [Window Styles](../../mfc/reference/window-styles.md). Currently, only the following styles are supported: WS_TABSTOP, WS_VISIBLE, WS_DISABLED and WS_GROUP.  \n  \n `rect`  \n A [RECT Structure](../../mfc/reference/rect-structure1.md) that defines the coordinates of the upper-left and lower-right corners of the control (first overload only).  \n  \n `nPlaceHolderID`  \n The handle of the static place holder control placed in the Resource Editor. The newly created Windows Forms control replaces the static control, assuming its position, z-order, and styles (second overload only).  \n  \n `pParentWnd`  \n A pointer to the parent window.  \n  \n `nID`  \n The resource ID number to be assigned to the newly created control.  \n  \n `pControl`  \n An instance of a Windows Forms control to be associated with the [CWinFormsControl](../../mfc/reference/cwinformscontrol-class.md) object (fourth overload only).  \n  \n### Return Value  \n If successful, returns a nonzero value. If unsuccessful, returns zero.  \n  \n### Remarks  \n This method instantiates a .NET Framework Windows Forms control in an MFC container.  \n  \n The first overload of the method accepts a .NET Framework data type `pType` so that MFC can instantiate a new object of this type. `pType` must be a [Type](https://msdn.microsoft.com/en-us/library/system.type) data type.  \n  \n The second overload of the method creates a Windows Forms control based on the `TManagedControl` template parameter of the `CWinFormsControl` class. The size and position of the control is based on the `RECT` structure passed to the method. Only `dwStyle` matters for the styles.  \n  \n The third overload of the method creates a Windows Forms control that replaces a static control, destroying it and assuming its position, z-order, and styles. The static control serves only as a placeholder for the Windows Forms control. When creating the control, this overload combines the styles from `dwStyle` with the static control's resource styles.  \n  \n The fourth overload of the method allows you to pass in an already instantiated Windows Forms control `pControl` that MFC will wrap. It must be of the same type as the `TManagedControl` template parameter of the `CWinFormsControl` class.  \n  \n See [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md) for samples on using Windows Form controls.  \n  \n##  <a name=\"cwinformscontrol__cwinformscontrol\"></a>  CWinFormsControl::CWinFormsControl  \n Constructs an MFC Windows Forms control wrapper object.  \n  \n```  \nCWinFormsControl();\n```  \n  \n### Remarks  \n The Windows Forms control is instantiated when you call [CWinFormsControl::CreateManagedControl](#cwinformscontrol__createmanagedcontrol).  \n  \n##  <a name=\"cwinformscontrol__getcontrol\"></a>  CWinFormsControl::GetControl  \n Retrieves a pointer to the Windows Forms control.  \n  \n```  \ninline TManagedControl^ GetControl() const;\n\n \n```  \n  \n### Return Value  \n Returns a pointer to the Windows Forms control.  \n  \n### Example  \n  See [CWinFormsControl::CreateManagedControl](#cwinformscontrol__createmanagedcontrol).  \n  \n##  <a name=\"cwinformscontrol__getcontrolhandle\"></a>  CWinFormsControl::GetControlHandle  \n Retrieves a handle to the Windows Forms control.  \n  \n```  \ninline HWND GetControlHandle() const;\n\n \n```  \n  \n### Return Value  \n Returns a handle to the Windows Forms control.  \n  \n### Remarks  \n `GetControlHandle` is a helper method that returns the window handle stored in the .NET Framework control properties. The window handle value is copied to [CWnd::m_hWnd](../../mfc/reference/cwnd-class.md#cwnd__m_hwnd) during the call to [CWnd::Attach](../../mfc/reference/cwnd-class.md#cwnd__attach).  \n  \n##  <a name=\"cwinformscontrol__operator_-_gt_\"></a>  CWinFormsControl::operator -&gt;  \n Replaces [CWinFormsControl::GetControl](#cwinformscontrol__getcontrol) in expressions.  \n  \n```  \ninline TManagedControl^  operator->() const;\n\n \n```  \n  \n### Remarks  \n This operator provides a convenient syntax that replaces `GetControl` in expressions.  \n  \n For more information on Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md).  \n  \n##  <a name=\"cwinformscontrol__operator_tmanagedcontrol\"></a>  CWinFormsControl::operator TManagedControl^  \n Casts a type as a pointer to a Windows Forms control.  \n  \n```  \ninline operator TManagedControl^() const;\n\n \n```  \n  \n### Remarks  \n This operator passes `CWinFormsControl<``TManagedControl``>` to functions that accept a pointer to a Windows Forms control.  \n  \n## See Also  \n [CWinFormsDialog Class](../../mfc/reference/cwinformsdialog-class.md)   \n [CWinFormsView Class](../../mfc/reference/cwinformsview-class.md)\n"}