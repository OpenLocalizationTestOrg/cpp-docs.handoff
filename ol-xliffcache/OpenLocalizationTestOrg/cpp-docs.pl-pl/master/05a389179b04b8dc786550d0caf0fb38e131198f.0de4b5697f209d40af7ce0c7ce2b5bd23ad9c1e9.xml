{"nodes":[{"pos":[12,42],"content":"CWindow Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CWindow Class | Microsoft Docs","pos":[0,30]}]},{"pos":[632,645],"content":"CWindow Class","linkify":"CWindow Class","nodes":[{"content":"CWindow Class","pos":[0,13]}]},{"content":"This class provides methods for manipulating a window.","pos":[646,700]},{"pos":[708,818],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"pos":[827,833],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[869,876],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[886,905],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[912,916]},{"content":"Description","pos":[917,928]},{"pos":[966,1003],"content":"<bpt id=\"p1\">[</bpt>CWindow::CWindow<ept id=\"p1\">](#cwindow__cwindow)</ept>","source":"[CWindow::CWindow](#cwindow__cwindow)"},{"content":"Constructor.","pos":[1004,1016]},{"pos":[1027,1041],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1048,1052]},{"content":"Description","pos":[1053,1064]},{"pos":[1102,1165],"content":"<bpt id=\"p1\">[</bpt>CWindow::ArrangeIconicWindows<ept id=\"p1\">](#cwindow__arrangeiconicwindows)</ept>","source":"[CWindow::ArrangeIconicWindows](#cwindow__arrangeiconicwindows)"},{"content":"Arranges all minimized child windows.","pos":[1166,1203]},{"pos":[1208,1243],"content":"<bpt id=\"p1\">[</bpt>CWindow::Attach<ept id=\"p1\">](#cwindow__attach)</ept>","source":"[CWindow::Attach](#cwindow__attach)"},{"pos":[1244,1286],"content":"Attaches a window to the <ph id=\"ph1\">`CWindow`</ph> object.","source":"Attaches a window to the `CWindow` object."},{"pos":[1291,1334],"content":"<bpt id=\"p1\">[</bpt>CWindow::BeginPaint<ept id=\"p1\">](#cwindow__beginpaint)</ept>","source":"[CWindow::BeginPaint](#cwindow__beginpaint)"},{"content":"Prepares the window for painting.","pos":[1335,1368]},{"pos":[1373,1428],"content":"<bpt id=\"p1\">[</bpt>CWindow::BringWindowToTop<ept id=\"p1\">](#cwindow__bringwindowtotop)</ept>","source":"[CWindow::BringWindowToTop](#cwindow__bringwindowtotop)"},{"content":"Brings the window to the top of the Z order.","pos":[1429,1473]},{"pos":[1478,1525],"content":"<bpt id=\"p1\">[</bpt>CWindow::CenterWindow<ept id=\"p1\">](#cwindow__centerwindow)</ept>","source":"[CWindow::CenterWindow](#cwindow__centerwindow)"},{"content":"Centers the window against a given window.","pos":[1526,1568]},{"pos":[1573,1636],"content":"<bpt id=\"p1\">[</bpt>CWindow::ChangeClipboardChain<ept id=\"p1\">](#cwindow__changeclipboardchain)</ept>","source":"[CWindow::ChangeClipboardChain](#cwindow__changeclipboardchain)"},{"content":"Removes the window from the chain of Clipboard viewers.","pos":[1637,1692]},{"pos":[1697,1748],"content":"<bpt id=\"p1\">[</bpt>CWindow::CheckDlgButton<ept id=\"p1\">](#cwindow__checkdlgbutton)</ept>","source":"[CWindow::CheckDlgButton](#cwindow__checkdlgbutton)"},{"content":"Changes the check state of the specified button.","pos":[1749,1797]},{"pos":[1802,1857],"content":"<bpt id=\"p1\">[</bpt>CWindow::CheckRadioButton<ept id=\"p1\">](#cwindow__checkradiobutton)</ept>","source":"[CWindow::CheckRadioButton](#cwindow__checkradiobutton)"},{"content":"Checks the specified radio button.","pos":[1858,1892]},{"pos":[1897,1960],"content":"<bpt id=\"p1\">[</bpt>CWindow::ChildWindowFromPoint<ept id=\"p1\">](#cwindow__childwindowfrompoint)</ept>","source":"[CWindow::ChildWindowFromPoint](#cwindow__childwindowfrompoint)"},{"content":"Retrieves the child window containing the specified point.","pos":[1961,2019]},{"pos":[2024,2091],"content":"<bpt id=\"p1\">[</bpt>CWindow::ChildWindowFromPointEx<ept id=\"p1\">](#cwindow__childwindowfrompointex)</ept>","source":"[CWindow::ChildWindowFromPointEx](#cwindow__childwindowfrompointex)"},{"content":"Retrieves a particular type of child window containing the specified point.","pos":[2092,2167]},{"pos":[2172,2223],"content":"<bpt id=\"p1\">[</bpt>CWindow::ClientToScreen<ept id=\"p1\">](#cwindow__clienttoscreen)</ept>","source":"[CWindow::ClientToScreen](#cwindow__clienttoscreen)"},{"content":"Converts client coordinates to screen coordinates.","pos":[2224,2274]},{"pos":[2279,2314],"content":"<bpt id=\"p1\">[</bpt>CWindow::Create<ept id=\"p1\">](#cwindow__create)</ept>","source":"[CWindow::Create](#cwindow__create)"},{"content":"Creates a window.","pos":[2315,2332]},{"pos":[2337,2382],"content":"<bpt id=\"p1\">[</bpt>CWindow::CreateCaret<ept id=\"p1\">](#cwindow__createcaret)</ept>","source":"[CWindow::CreateCaret](#cwindow__createcaret)"},{"content":"Creates a new shape for the system caret.","pos":[2383,2424]},{"pos":[2429,2482],"content":"<bpt id=\"p1\">[</bpt>CWindow::CreateGrayCaret<ept id=\"p1\">](#cwindow__creategraycaret)</ept>","source":"[CWindow::CreateGrayCaret](#cwindow__creategraycaret)"},{"content":"Creates a gray rectangle for the system caret.","pos":[2483,2529]},{"pos":[2534,2589],"content":"<bpt id=\"p1\">[</bpt>CWindow::CreateSolidCaret<ept id=\"p1\">](#cwindow__createsolidcaret)</ept>","source":"[CWindow::CreateSolidCaret](#cwindow__createsolidcaret)"},{"content":"Creates a solid rectangle for the system caret.","pos":[2590,2637]},{"pos":[2642,2693],"content":"<bpt id=\"p1\">[</bpt>CWindow::DeferWindowPos<ept id=\"p1\">](#cwindow__deferwindowpos)</ept>","source":"[CWindow::DeferWindowPos](#cwindow__deferwindowpos)"},{"content":"Updates the specified multiple-window-position structure for the specified window.","pos":[2694,2776]},{"pos":[2781,2830],"content":"<bpt id=\"p1\">[</bpt>CWindow::DestroyWindow<ept id=\"p1\">](#cwindow__destroywindow)</ept>","source":"[CWindow::DestroyWindow](#cwindow__destroywindow)"},{"pos":[2831,2888],"content":"Destroys the window associated with the <ph id=\"ph1\">`CWindow`</ph> object.","source":"Destroys the window associated with the `CWindow` object."},{"pos":[2893,2928],"content":"<bpt id=\"p1\">[</bpt>CWindow::Detach<ept id=\"p1\">](#cwindow__detach)</ept>","source":"[CWindow::Detach](#cwindow__detach)"},{"pos":[2929,2975],"content":"Detaches the window from the <ph id=\"ph1\">`CWindow`</ph> object.","source":"Detaches the window from the `CWindow` object."},{"pos":[2980,3023],"content":"<bpt id=\"p1\">[</bpt>CWindow::DlgDirList<ept id=\"p1\">](#cwindow__dlgdirlist)</ept>","source":"[CWindow::DlgDirList](#cwindow__dlgdirlist)"},{"content":"Fills a list box with the names of all files matching a specified path or file name.","pos":[3024,3108]},{"pos":[3113,3172],"content":"<bpt id=\"p1\">[</bpt>CWindow::DlgDirListComboBox<ept id=\"p1\">](#cwindow__dlgdirlistcombobox)</ept>","source":"[CWindow::DlgDirListComboBox](#cwindow__dlgdirlistcombobox)"},{"content":"Fills a combo box with the names of all files matching a specified path or file name.","pos":[3173,3258]},{"pos":[3263,3310],"content":"<bpt id=\"p1\">[</bpt>CWindow::DlgDirSelect<ept id=\"p1\">](#cwindow__dlgdirselect)</ept>","source":"[CWindow::DlgDirSelect](#cwindow__dlgdirselect)"},{"content":"Retrieves the current selection from a list box.","pos":[3311,3359]},{"pos":[3364,3427],"content":"<bpt id=\"p1\">[</bpt>CWindow::DlgDirSelectComboBox<ept id=\"p1\">](#cwindow__dlgdirselectcombobox)</ept>","source":"[CWindow::DlgDirSelectComboBox](#cwindow__dlgdirselectcombobox)"},{"content":"Retrieves the current selection from a combo box.","pos":[3428,3477]},{"pos":[3482,3535],"content":"<bpt id=\"p1\">[</bpt>CWindow::DragAcceptFiles<ept id=\"p1\">](#cwindow__dragacceptfiles)</ept>","source":"[CWindow::DragAcceptFiles](#cwindow__dragacceptfiles)"},{"content":"Registers whether the window accepts dragged files.","pos":[3536,3587]},{"pos":[3592,3637],"content":"<bpt id=\"p1\">[</bpt>CWindow::DrawMenuBar<ept id=\"p1\">](#cwindow__drawmenubar)</ept>","source":"[CWindow::DrawMenuBar](#cwindow__drawmenubar)"},{"content":"Redraws the window's menu bar.","pos":[3638,3668]},{"pos":[3673,3726],"content":"<bpt id=\"p1\">[</bpt>CWindow::EnableScrollBar<ept id=\"p1\">](#cwindow__enablescrollbar)</ept>","source":"[CWindow::EnableScrollBar](#cwindow__enablescrollbar)"},{"content":"Enables or disables the scroll bar arrows.","pos":[3727,3769]},{"pos":[3774,3821],"content":"<bpt id=\"p1\">[</bpt>CWindow::EnableWindow<ept id=\"p1\">](#cwindow__enablewindow)</ept>","source":"[CWindow::EnableWindow](#cwindow__enablewindow)"},{"content":"Enables or disables input.","pos":[3822,3848]},{"pos":[3853,3892],"content":"<bpt id=\"p1\">[</bpt>CWindow::EndPaint<ept id=\"p1\">](#cwindow__endpaint)</ept>","source":"[CWindow::EndPaint](#cwindow__endpaint)"},{"content":"Marks the end of painting.","pos":[3893,3919]},{"pos":[3924,3969],"content":"<bpt id=\"p1\">[</bpt>CWindow::FlashWindow<ept id=\"p1\">](#cwindow__flashwindow)</ept>","source":"[CWindow::FlashWindow](#cwindow__flashwindow)"},{"content":"Flashes the window once.","pos":[3970,3994]},{"pos":[3999,4048],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetClientRect<ept id=\"p1\">](#cwindow__getclientrect)</ept>","source":"[CWindow::GetClientRect](#cwindow__getclientrect)"},{"content":"Retrieves the coordinates of the client area.","pos":[4049,4094]},{"pos":[4099,4132],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetDC<ept id=\"p1\">](#cwindow__getdc)</ept>","source":"[CWindow::GetDC](#cwindow__getdc)"},{"content":"Retrieves a device context for the client area.","pos":[4133,4180]},{"pos":[4185,4222],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetDCEx<ept id=\"p1\">](#cwindow__getdcex)</ept>","source":"[CWindow::GetDCEx](#cwindow__getdcex)"},{"content":"Retrieves a device context for the client area and allows clipping options.","pos":[4223,4298]},{"pos":[4303,4364],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetDescendantWindow<ept id=\"p1\">](#cwindow__getdescendantwindow)</ept>","source":"[CWindow::GetDescendantWindow](#cwindow__getdescendantwindow)"},{"content":"Retrieves the specified descendant window.","pos":[4365,4407]},{"pos":[4412,4461],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetDlgControl<ept id=\"p1\">](#cwindow__getdlgcontrol)</ept>","source":"[CWindow::GetDlgControl](#cwindow__getdlgcontrol)"},{"content":"Retrieves an interface on the specified control.","pos":[4462,4510]},{"pos":[4515,4562],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetDlgCtrlID<ept id=\"p1\">](#cwindow__getdlgctrlid)</ept>","source":"[CWindow::GetDlgCtrlID](#cwindow__getdlgctrlid)"},{"content":"Retrieves the window's identifier (for child windows only).","pos":[4563,4622]},{"pos":[4627,4670],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetDlgHost<ept id=\"p1\">](#cwindow__getdlghost)</ept>","source":"[CWindow::GetDlgHost](#cwindow__getdlghost)"},{"content":"Retrieves a pointer to an interface to the ATL Control hosting container.","pos":[4671,4744]},{"pos":[4749,4792],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetDlgItem<ept id=\"p1\">](#cwindow__getdlgitem)</ept>","source":"[CWindow::GetDlgItem](#cwindow__getdlgitem)"},{"content":"Retrieves the specified child window.","pos":[4793,4830]},{"pos":[4835,4884],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetDlgItemInt<ept id=\"p1\">](#cwindow__getdlgitemint)</ept>","source":"[CWindow::GetDlgItemInt](#cwindow__getdlgitemint)"},{"content":"Translates a control's text to an integer.","pos":[4885,4927]},{"pos":[4932,4983],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetDlgItemText<ept id=\"p1\">](#cwindow__getdlgitemtext)</ept>","source":"[CWindow::GetDlgItemText](#cwindow__getdlgitemtext)"},{"content":"Retrieves a control's text.","pos":[4984,5011]},{"pos":[5016,5059],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetExStyle<ept id=\"p1\">](#cwindow__getexstyle)</ept>","source":"[CWindow::GetExStyle](#cwindow__getexstyle)"},{"content":"Retrieves the extended window styles.","pos":[5060,5097]},{"pos":[5102,5139],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetFont<ept id=\"p1\">](#cwindow__getfont)</ept>","source":"[CWindow::GetFont](#cwindow__getfont)"},{"content":"Retrieves the window's current font.","pos":[5140,5176]},{"pos":[5181,5222],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetHotKey<ept id=\"p1\">](#cwindow__gethotkey)</ept>","source":"[CWindow::GetHotKey](#cwindow__gethotkey)"},{"content":"Determines the hot key associated with the window.","pos":[5223,5273]},{"pos":[5278,5315],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetIcon<ept id=\"p1\">](#cwindow__geticon)</ept>","source":"[CWindow::GetIcon](#cwindow__geticon)"},{"content":"Retrieves the window's large or small icon.","pos":[5316,5359]},{"pos":[5364,5423],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetLastActivePopup<ept id=\"p1\">](#cwindow__getlastactivepopup)</ept>","source":"[CWindow::GetLastActivePopup](#cwindow__getlastactivepopup)"},{"content":"Retrieves the most recently active pop-up window.","pos":[5424,5473]},{"pos":[5478,5515],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetMenu<ept id=\"p1\">](#cwindow__getmenu)</ept>","source":"[CWindow::GetMenu](#cwindow__getmenu)"},{"content":"Retrieves the window's menu.","pos":[5516,5544]},{"pos":[5549,5610],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetNextDlgGroupItem<ept id=\"p1\">](#cwindow__getnextdlggroupitem)</ept>","source":"[CWindow::GetNextDlgGroupItem](#cwindow__getnextdlggroupitem)"},{"content":"Retrieves the previous or next control within a group of controls.","pos":[5611,5677]},{"pos":[5682,5739],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetNextDlgTabItem<ept id=\"p1\">](#cwindow__getnextdlgtabitem)</ept>","source":"[CWindow::GetNextDlgTabItem](#cwindow__getnextdlgtabitem)"},{"pos":[5740,5811],"content":"Retrieves the previous or next control having the <bpt id=\"p1\">**</bpt>WS_TABSTOP<ept id=\"p1\">**</ept> style.","source":"Retrieves the previous or next control having the **WS_TABSTOP** style."},{"pos":[5816,5857],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetParent<ept id=\"p1\">](#cwindow__getparent)</ept>","source":"[CWindow::GetParent](#cwindow__getparent)"},{"content":"Retrieves the immediate parent window.","pos":[5858,5896]},{"pos":[5901,5950],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetScrollInfo<ept id=\"p1\">](#cwindow__getscrollinfo)</ept>","source":"[CWindow::GetScrollInfo](#cwindow__getscrollinfo)"},{"content":"Retrieves the parameters of a scroll bar.","pos":[5951,5992]},{"pos":[5997,6044],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetScrollPos<ept id=\"p1\">](#cwindow__getscrollpos)</ept>","source":"[CWindow::GetScrollPos](#cwindow__getscrollpos)"},{"content":"Retrieves the position of the scroll box.","pos":[6045,6086]},{"pos":[6091,6142],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetScrollRange<ept id=\"p1\">](#cwindow__getscrollrange)</ept>","source":"[CWindow::GetScrollRange](#cwindow__getscrollrange)"},{"content":"Retrieves the scroll bar range.","pos":[6143,6174]},{"pos":[6179,6218],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetStyle<ept id=\"p1\">](#cwindow__getstyle)</ept>","source":"[CWindow::GetStyle](#cwindow__getstyle)"},{"content":"Retrieves the window styles.","pos":[6219,6247]},{"pos":[6252,6301],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetSystemMenu<ept id=\"p1\">](#cwindow__getsystemmenu)</ept>","source":"[CWindow::GetSystemMenu](#cwindow__getsystemmenu)"},{"content":"Creates a copy of the system menu for modification.","pos":[6302,6353]},{"pos":[6358,6415],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetTopLevelParent<ept id=\"p1\">](#cwindow__gettoplevelparent)</ept>","source":"[CWindow::GetTopLevelParent](#cwindow__gettoplevelparent)"},{"content":"Retrieves the top-level parent or owner window.","pos":[6416,6463]},{"pos":[6468,6525],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetTopLevelWindow<ept id=\"p1\">](#cwindow__gettoplevelwindow)</ept>","source":"[CWindow::GetTopLevelWindow](#cwindow__gettoplevelwindow)"},{"content":"Retrieves the top-level owner window.","pos":[6526,6563]},{"pos":[6568,6615],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetTopWindow<ept id=\"p1\">](#cwindow__gettopwindow)</ept>","source":"[CWindow::GetTopWindow](#cwindow__gettopwindow)"},{"content":"Retrieves the top-level child window.","pos":[6616,6653]},{"pos":[6658,6707],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetUpdateRect<ept id=\"p1\">](#cwindow__getupdaterect)</ept>","source":"[CWindow::GetUpdateRect](#cwindow__getupdaterect)"},{"content":"Retrieves the coordinates of the smallest rectangle that completely encloses the update region.","pos":[6708,6803]},{"pos":[6808,6855],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetUpdateRgn<ept id=\"p1\">](#cwindow__getupdatergn)</ept>","source":"[CWindow::GetUpdateRgn](#cwindow__getupdatergn)"},{"content":"Retrieves the update region and copies it into a specified region.","pos":[6856,6922]},{"pos":[6927,6968],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindow<ept id=\"p1\">](#cwindow__getwindow)</ept>","source":"[CWindow::GetWindow](#cwindow__getwindow)"},{"content":"Retrieves the specified window.","pos":[6969,7000]},{"pos":[7005,7072],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowContextHelpId<ept id=\"p1\">](#cwindow__getwindowcontexthelpid)</ept>","source":"[CWindow::GetWindowContextHelpId](#cwindow__getwindowcontexthelpid)"},{"content":"Retrieves the window's help context identifier.","pos":[7073,7120]},{"pos":[7125,7170],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowDC<ept id=\"p1\">](#cwindow__getwindowdc)</ept>","source":"[CWindow::GetWindowDC](#cwindow__getwindowdc)"},{"content":"Retrieves a device context for the entire window.","pos":[7171,7220]},{"pos":[7225,7274],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowLong<ept id=\"p1\">](#cwindow__getwindowlong)</ept>","source":"[CWindow::GetWindowLong](#cwindow__getwindowlong)"},{"content":"Retrieves a 32-bit value at a specified offset into the extra window memory.","pos":[7275,7351]},{"pos":[7356,7411],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowLongPtr<ept id=\"p1\">](#cwindow__getwindowlongptr)</ept>","source":"[CWindow::GetWindowLongPtr](#cwindow__getwindowlongptr)"},{"content":"Retrieves information about the specified window, including a value at a specified offset into the extra window memory.","pos":[7412,7531]},{"pos":[7536,7595],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowPlacement<ept id=\"p1\">](#cwindow__getwindowplacement)</ept>","source":"[CWindow::GetWindowPlacement](#cwindow__getwindowplacement)"},{"content":"Retrieves the show state and positions.","pos":[7596,7635]},{"pos":[7640,7699],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowProcessID<ept id=\"p1\">](#cwindow__getwindowprocessid)</ept>","source":"[CWindow::GetWindowProcessID](#cwindow__getwindowprocessid)"},{"content":"Retrieves the identifier of the process that created the window.","pos":[7700,7764]},{"pos":[7769,7818],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowRect<ept id=\"p1\">](#cwindow__getwindowrect)</ept>","source":"[CWindow::GetWindowRect](#cwindow__getwindowrect)"},{"content":"Retrieves the window's bounding dimensions.","pos":[7819,7862]},{"pos":[7867,7914],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowRgn<ept id=\"p1\">](#cwindow__getwindowrgn)</ept>","source":"[CWindow::GetWindowRgn](#cwindow__getwindowrgn)"},{"content":"Obtains a copy of the window region of a window.","pos":[7915,7963]},{"pos":[7968,8017],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowText<ept id=\"p1\">](#cwindow__getwindowtext)</ept>","source":"[CWindow::GetWindowText](#cwindow__getwindowtext)"},{"content":"Retrieves the window's text.","pos":[8018,8046]},{"pos":[8051,8112],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowTextLength<ept id=\"p1\">](#cwindow__getwindowtextlength)</ept>","source":"[CWindow::GetWindowTextLength](#cwindow__getwindowtextlength)"},{"content":"Retrieves the length of the window's text.","pos":[8113,8155]},{"pos":[8160,8217],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowThreadID<ept id=\"p1\">](#cwindow__getwindowthreadid)</ept>","source":"[CWindow::GetWindowThreadID](#cwindow__getwindowthreadid)"},{"content":"Retrieves the identifier of the thread that created the specified window.","pos":[8218,8291]},{"pos":[8296,8345],"content":"<bpt id=\"p1\">[</bpt>CWindow::GetWindowWord<ept id=\"p1\">](#cwindow__getwindowword)</ept>","source":"[CWindow::GetWindowWord](#cwindow__getwindowword)"},{"content":"Retrieves a 16-bit value at a specified offset into the extra window memory.","pos":[8346,8422]},{"pos":[8427,8472],"content":"<bpt id=\"p1\">[</bpt>CWindow::GotoDlgCtrl<ept id=\"p1\">](#cwindow__gotodlgctrl)</ept>","source":"[CWindow::GotoDlgCtrl](#cwindow__gotodlgctrl)"},{"content":"Sets the keyboard focus to a control in the dialog box.","pos":[8473,8528]},{"pos":[8533,8574],"content":"<bpt id=\"p1\">[</bpt>CWindow::HideCaret<ept id=\"p1\">](#cwindow__hidecaret)</ept>","source":"[CWindow::HideCaret](#cwindow__hidecaret)"},{"content":"Hides the system caret.","pos":[8575,8598]},{"pos":[8603,8654],"content":"<bpt id=\"p1\">[</bpt>CWindow::HiliteMenuItem<ept id=\"p1\">](#cwindow__hilitemenuitem)</ept>","source":"[CWindow::HiliteMenuItem](#cwindow__hilitemenuitem)"},{"content":"Highlights or removes the highlight from a top-level menu item.","pos":[8655,8718]},{"pos":[8723,8766],"content":"<bpt id=\"p1\">[</bpt>CWindow::Invalidate<ept id=\"p1\">](#cwindow__invalidate)</ept>","source":"[CWindow::Invalidate](#cwindow__invalidate)"},{"content":"Invalidates the entire client area.","pos":[8767,8802]},{"pos":[8807,8858],"content":"<bpt id=\"p1\">[</bpt>CWindow::InvalidateRect<ept id=\"p1\">](#cwindow__invalidaterect)</ept>","source":"[CWindow::InvalidateRect](#cwindow__invalidaterect)"},{"content":"Invalidates the client area within the specified rectangle.","pos":[8859,8918]},{"pos":[8923,8972],"content":"<bpt id=\"p1\">[</bpt>CWindow::InvalidateRgn<ept id=\"p1\">](#cwindow__invalidatergn)</ept>","source":"[CWindow::InvalidateRgn](#cwindow__invalidatergn)"},{"content":"Invalidates the client area within the specified region.","pos":[8973,9029]},{"pos":[9034,9071],"content":"<bpt id=\"p1\">[</bpt>CWindow::IsChild<ept id=\"p1\">](#cwindow__ischild)</ept>","source":"[CWindow::IsChild](#cwindow__ischild)"},{"content":"Determines whether the specified window is a child window.","pos":[9072,9130]},{"pos":[9135,9188],"content":"<bpt id=\"p1\">[</bpt>CWindow::IsDialogMessage<ept id=\"p1\">](#cwindow__isdialogmessage)</ept>","source":"[CWindow::IsDialogMessage](#cwindow__isdialogmessage)"},{"content":"Determines whether a message is intended for the specified dialog box.","pos":[9189,9259]},{"pos":[9264,9323],"content":"<bpt id=\"p1\">[</bpt>CWindow::IsDlgButtonChecked<ept id=\"p1\">](#cwindow__isdlgbuttonchecked)</ept>","source":"[CWindow::IsDlgButtonChecked](#cwindow__isdlgbuttonchecked)"},{"content":"Determines the check state of the button.","pos":[9324,9365]},{"pos":[9370,9409],"content":"<bpt id=\"p1\">[</bpt>CWindow::IsIconic<ept id=\"p1\">](#cwindow__isiconic)</ept>","source":"[CWindow::IsIconic](#cwindow__isiconic)"},{"content":"Determines whether the window is minimized.","pos":[9410,9453]},{"pos":[9458,9509],"content":"<bpt id=\"p1\">[</bpt>CWindow::IsParentDialog<ept id=\"p1\">](#cwindow__isparentdialog)</ept>","source":"[CWindow::IsParentDialog](#cwindow__isparentdialog)"},{"content":"Determines if the parent window of a control is a dialog window.","pos":[9510,9574]},{"pos":[9579,9618],"content":"<bpt id=\"p1\">[</bpt>CWindow::IsWindow<ept id=\"p1\">](#cwindow__iswindow)</ept>","source":"[CWindow::IsWindow](#cwindow__iswindow)"},{"content":"Determines whether the specified window handle identifies an existing window.","pos":[9619,9696]},{"pos":[9701,9754],"content":"<bpt id=\"p1\">[</bpt>CWindow::IsWindowEnabled<ept id=\"p1\">](#cwindow__iswindowenabled)</ept>","source":"[CWindow::IsWindowEnabled](#cwindow__iswindowenabled)"},{"content":"Determines whether the window is enabled for input.","pos":[9755,9806]},{"pos":[9811,9864],"content":"<bpt id=\"p1\">[</bpt>CWindow::IsWindowUnicode<ept id=\"p1\">](#cwindow__iswindowunicode)</ept>","source":"[CWindow::IsWindowUnicode](#cwindow__iswindowunicode)"},{"content":"Determines whether the specified window is a native Unicode window.","pos":[9865,9932]},{"pos":[9937,9990],"content":"<bpt id=\"p1\">[</bpt>CWindow::IsWindowVisible<ept id=\"p1\">](#cwindow__iswindowvisible)</ept>","source":"[CWindow::IsWindowVisible](#cwindow__iswindowvisible)"},{"content":"Determines the window's visibility state.","pos":[9991,10032]},{"pos":[10037,10076],"content":"<bpt id=\"p1\">[</bpt>CWindow::IsZoomed<ept id=\"p1\">](#cwindow__iszoomed)</ept>","source":"[CWindow::IsZoomed](#cwindow__iszoomed)"},{"content":"Determines whether the window is maximized.","pos":[10077,10120]},{"pos":[10125,10166],"content":"<bpt id=\"p1\">[</bpt>CWindow::KillTimer<ept id=\"p1\">](#cwindow__killtimer)</ept>","source":"[CWindow::KillTimer](#cwindow__killtimer)"},{"content":"Destroys a timer event.","pos":[10167,10190]},{"pos":[10195,10250],"content":"<bpt id=\"p1\">[</bpt>CWindow::LockWindowUpdate<ept id=\"p1\">](#cwindow__lockwindowupdate)</ept>","source":"[CWindow::LockWindowUpdate](#cwindow__lockwindowupdate)"},{"content":"Disables or enables drawing in the window.","pos":[10251,10293]},{"pos":[10298,10351],"content":"<bpt id=\"p1\">[</bpt>CWindow::MapWindowPoints<ept id=\"p1\">](#cwindow__mapwindowpoints)</ept>","source":"[CWindow::MapWindowPoints](#cwindow__mapwindowpoints)"},{"content":"Converts a set of points from the window's coordinate space to the coordinate space of another window.","pos":[10352,10454]},{"pos":[10459,10502],"content":"<bpt id=\"p1\">[</bpt>CWindow::MessageBox<ept id=\"p1\">](#cwindow__messagebox)</ept>","source":"[CWindow::MessageBox](#cwindow__messagebox)"},{"content":"Displays a message box.","pos":[10503,10526]},{"pos":[10531,10576],"content":"<bpt id=\"p1\">[</bpt>CWindow::ModifyStyle<ept id=\"p1\">](#cwindow__modifystyle)</ept>","source":"[CWindow::ModifyStyle](#cwindow__modifystyle)"},{"content":"Modifies the window styles.","pos":[10577,10604]},{"pos":[10609,10658],"content":"<bpt id=\"p1\">[</bpt>CWindow::ModifyStyleEx<ept id=\"p1\">](#cwindow__modifystyleex)</ept>","source":"[CWindow::ModifyStyleEx](#cwindow__modifystyleex)"},{"content":"Modifies the extended window styles.","pos":[10659,10695]},{"pos":[10700,10743],"content":"<bpt id=\"p1\">[</bpt>CWindow::MoveWindow<ept id=\"p1\">](#cwindow__movewindow)</ept>","source":"[CWindow::MoveWindow](#cwindow__movewindow)"},{"content":"Changes the window's size and position.","pos":[10744,10783]},{"pos":[10788,10833],"content":"<bpt id=\"p1\">[</bpt>CWindow::NextDlgCtrl<ept id=\"p1\">](#cwindow__nextdlgctrl)</ept>","source":"[CWindow::NextDlgCtrl](#cwindow__nextdlgctrl)"},{"content":"Sets the keyboard focus to the next control in the dialog box.","pos":[10834,10896]},{"pos":[10901,10950],"content":"<bpt id=\"p1\">[</bpt>CWindow::OpenClipboard<ept id=\"p1\">](#cwindow__openclipboard)</ept>","source":"[CWindow::OpenClipboard](#cwindow__openclipboard)"},{"content":"Opens the Clipboard.","pos":[10951,10971]},{"pos":[10976,11021],"content":"<bpt id=\"p1\">[</bpt>CWindow::PostMessage<ept id=\"p1\">](#cwindow__postmessage)</ept>","source":"[CWindow::PostMessage](#cwindow__postmessage)"},{"content":"Places a message in the message queue associated with the thread that created the window.","pos":[11022,11111]},{"content":"Returns without waiting for the thread to process the message.","pos":[11112,11174]},{"pos":[11179,11224],"content":"<bpt id=\"p1\">[</bpt>CWindow::PrevDlgCtrl<ept id=\"p1\">](#cwindow__prevdlgctrl)</ept>","source":"[CWindow::PrevDlgCtrl](#cwindow__prevdlgctrl)"},{"content":"Sets the keyboard focus to the previous control in the dialog box.","pos":[11225,11291]},{"pos":[11296,11329],"content":"<bpt id=\"p1\">[</bpt>CWindow::Print<ept id=\"p1\">](#cwindow__print)</ept>","source":"[CWindow::Print](#cwindow__print)"},{"content":"Requests that the window be drawn in a specified device context.","pos":[11330,11394]},{"pos":[11399,11444],"content":"<bpt id=\"p1\">[</bpt>CWindow::PrintClient<ept id=\"p1\">](#cwindow__printclient)</ept>","source":"[CWindow::PrintClient](#cwindow__printclient)"},{"content":"Requests that the window's client area be drawn in a specified device context.","pos":[11445,11523]},{"pos":[11528,11575],"content":"<bpt id=\"p1\">[</bpt>CWindow::RedrawWindow<ept id=\"p1\">](#cwindow__redrawwindow)</ept>","source":"[CWindow::RedrawWindow](#cwindow__redrawwindow)"},{"content":"Updates a specified rectangle or region in the client area.","pos":[11576,11635]},{"pos":[11640,11681],"content":"<bpt id=\"p1\">[</bpt>CWindow::ReleaseDC<ept id=\"p1\">](#cwindow__releasedc)</ept>","source":"[CWindow::ReleaseDC](#cwindow__releasedc)"},{"content":"Releases a device context.","pos":[11682,11708]},{"pos":[11713,11760],"content":"<bpt id=\"p1\">[</bpt>CWindow::ResizeClient<ept id=\"p1\">](#cwindow__resizeclient)</ept>","source":"[CWindow::ResizeClient](#cwindow__resizeclient)"},{"content":"Resizes the window.","pos":[11761,11780]},{"pos":[11785,11836],"content":"<bpt id=\"p1\">[</bpt>CWindow::ScreenToClient<ept id=\"p1\">](#cwindow__screentoclient)</ept>","source":"[CWindow::ScreenToClient](#cwindow__screentoclient)"},{"content":"Converts screen coordinates to client coordinates.","pos":[11837,11887]},{"pos":[11892,11939],"content":"<bpt id=\"p1\">[</bpt>CWindow::ScrollWindow<ept id=\"p1\">](#cwindow__scrollwindow)</ept>","source":"[CWindow::ScrollWindow](#cwindow__scrollwindow)"},{"content":"Scrolls the specified client area.","pos":[11940,11974]},{"pos":[11979,12030],"content":"<bpt id=\"p1\">[</bpt>CWindow::ScrollWindowEx<ept id=\"p1\">](#cwindow__scrollwindowex)</ept>","source":"[CWindow::ScrollWindowEx](#cwindow__scrollwindowex)"},{"content":"Scrolls the specified client area with additional features.","pos":[12031,12090]},{"pos":[12095,12154],"content":"<bpt id=\"p1\">[</bpt>CWindow::SendDlgItemMessage<ept id=\"p1\">](#cwindow__senddlgitemmessage)</ept>","source":"[CWindow::SendDlgItemMessage](#cwindow__senddlgitemmessage)"},{"content":"Sends a message to a control.","pos":[12155,12184]},{"pos":[12189,12234],"content":"<bpt id=\"p1\">[</bpt>CWindow::SendMessage<ept id=\"p1\">](#cwindow__sendmessage)</ept>","source":"[CWindow::SendMessage](#cwindow__sendmessage)"},{"content":"Sends a message to the window and does not return until the window procedure has processed the message.","pos":[12235,12338]},{"pos":[12343,12414],"content":"<bpt id=\"p1\">[</bpt>CWindow::SendMessageToDescendants<ept id=\"p1\">](#cwindow__sendmessagetodescendants)</ept>","source":"[CWindow::SendMessageToDescendants](#cwindow__sendmessagetodescendants)"},{"content":"Sends a message to the specified descendant windows.","pos":[12415,12467]},{"pos":[12472,12529],"content":"<bpt id=\"p1\">[</bpt>CWindow::SendNotifyMessage<ept id=\"p1\">](#cwindow__sendnotifymessage)</ept>","source":"[CWindow::SendNotifyMessage](#cwindow__sendnotifymessage)"},{"content":"Sends a message to the window.","pos":[12530,12560]},{"content":"If the window was created by the calling thread, <ph id=\"ph1\">`SendNotifyMessage`</ph> does not return until the window procedure has processed the message.","pos":[12561,12699],"source":" If the window was created by the calling thread, `SendNotifyMessage` does not return until the window procedure has processed the message."},{"content":"Otherwise, it returns immediately.","pos":[12700,12734]},{"pos":[12739,12792],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetActiveWindow<ept id=\"p1\">](#cwindow__setactivewindow)</ept>","source":"[CWindow::SetActiveWindow](#cwindow__setactivewindow)"},{"content":"Activates the window.","pos":[12793,12814]},{"pos":[12819,12862],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetCapture<ept id=\"p1\">](#cwindow__setcapture)</ept>","source":"[CWindow::SetCapture](#cwindow__setcapture)"},{"content":"Sends all subsequent mouse input to the window.","pos":[12863,12910]},{"pos":[12915,12974],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetClipboardViewer<ept id=\"p1\">](#cwindow__setclipboardviewer)</ept>","source":"[CWindow::SetClipboardViewer](#cwindow__setclipboardviewer)"},{"content":"Adds the window to the Clipboard viewer chain.","pos":[12975,13021]},{"pos":[13026,13073],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetDlgCtrlID<ept id=\"p1\">](#cwindow__setdlgctrlid)</ept>","source":"[CWindow::SetDlgCtrlID](#cwindow__setdlgctrlid)"},{"content":"Changes the window's identifier.","pos":[13074,13106]},{"pos":[13111,13160],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetDlgItemInt<ept id=\"p1\">](#cwindow__setdlgitemint)</ept>","source":"[CWindow::SetDlgItemInt](#cwindow__setdlgitemint)"},{"content":"Changes a control's text to the string representation of an integer value.","pos":[13161,13235]},{"pos":[13240,13291],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetDlgItemText<ept id=\"p1\">](#cwindow__setdlgitemtext)</ept>","source":"[CWindow::SetDlgItemText](#cwindow__setdlgitemtext)"},{"content":"Changes a control's text.","pos":[13292,13317]},{"pos":[13322,13361],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetFocus<ept id=\"p1\">](#cwindow__setfocus)</ept>","source":"[CWindow::SetFocus](#cwindow__setfocus)"},{"content":"Sets the input focus to the window.","pos":[13362,13397]},{"pos":[13402,13439],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetFont<ept id=\"p1\">](#cwindow__setfont)</ept>","source":"[CWindow::SetFont](#cwindow__setfont)"},{"content":"Changes the window's current font.","pos":[13440,13474]},{"pos":[13479,13520],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetHotKey<ept id=\"p1\">](#cwindow__sethotkey)</ept>","source":"[CWindow::SetHotKey](#cwindow__sethotkey)"},{"content":"Associates a hot key with the window.","pos":[13521,13558]},{"pos":[13563,13600],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetIcon<ept id=\"p1\">](#cwindow__seticon)</ept>","source":"[CWindow::SetIcon](#cwindow__seticon)"},{"content":"Changes the window's large or small icon.","pos":[13601,13642]},{"pos":[13647,13684],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetMenu<ept id=\"p1\">](#cwindow__setmenu)</ept>","source":"[CWindow::SetMenu](#cwindow__setmenu)"},{"content":"Changes the window's current menu.","pos":[13685,13719]},{"pos":[13724,13765],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetParent<ept id=\"p1\">](#cwindow__setparent)</ept>","source":"[CWindow::SetParent](#cwindow__setparent)"},{"content":"Changes the parent window.","pos":[13766,13792]},{"pos":[13797,13838],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetRedraw<ept id=\"p1\">](#cwindow__setredraw)</ept>","source":"[CWindow::SetRedraw](#cwindow__setredraw)"},{"content":"Sets or clears the redraw flag.","pos":[13839,13870]},{"pos":[13875,13924],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetScrollInfo<ept id=\"p1\">](#cwindow__setscrollinfo)</ept>","source":"[CWindow::SetScrollInfo](#cwindow__setscrollinfo)"},{"content":"Sets the parameters of a scroll bar.","pos":[13925,13961]},{"pos":[13966,14013],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetScrollPos<ept id=\"p1\">](#cwindow__setscrollpos)</ept>","source":"[CWindow::SetScrollPos](#cwindow__setscrollpos)"},{"content":"Changes the position of the scroll box.","pos":[14014,14053]},{"pos":[14058,14109],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetScrollRange<ept id=\"p1\">](#cwindow__setscrollrange)</ept>","source":"[CWindow::SetScrollRange](#cwindow__setscrollrange)"},{"content":"Changes the scroll bar range.","pos":[14110,14139]},{"pos":[14144,14183],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetTimer<ept id=\"p1\">](#cwindow__settimer)</ept>","source":"[CWindow::SetTimer](#cwindow__settimer)"},{"content":"Creates a timer event.","pos":[14184,14206]},{"pos":[14211,14278],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetWindowContextHelpId<ept id=\"p1\">](#cwindow__setwindowcontexthelpid)</ept>","source":"[CWindow::SetWindowContextHelpId](#cwindow__setwindowcontexthelpid)"},{"content":"Sets the window's help context identifier.","pos":[14279,14321]},{"pos":[14326,14375],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetWindowLong<ept id=\"p1\">](#cwindow__setwindowlong)</ept>","source":"[CWindow::SetWindowLong](#cwindow__setwindowlong)"},{"content":"Sets a 32-bit value at a specified offset into the extra window memory.","pos":[14376,14447]},{"pos":[14452,14507],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetWindowLongPtr<ept id=\"p1\">](#cwindow__setwindowlongptr)</ept>","source":"[CWindow::SetWindowLongPtr](#cwindow__setwindowlongptr)"},{"content":"Changes an attribute of the specified window, and also sets a value at the specified offset in the extra window memory.","pos":[14508,14627]},{"pos":[14632,14691],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetWindowPlacement<ept id=\"p1\">](#cwindow__setwindowplacement)</ept>","source":"[CWindow::SetWindowPlacement](#cwindow__setwindowplacement)"},{"content":"Sets the show state and positions.","pos":[14692,14726]},{"pos":[14731,14778],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetWindowPos<ept id=\"p1\">](#cwindow__setwindowpos)</ept>","source":"[CWindow::SetWindowPos](#cwindow__setwindowpos)"},{"content":"Sets the size, position, and Z order.","pos":[14779,14816]},{"pos":[14821,14868],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetWindowRgn<ept id=\"p1\">](#cwindow__setwindowrgn)</ept>","source":"[CWindow::SetWindowRgn](#cwindow__setwindowrgn)"},{"content":"Sets the window region of a window.","pos":[14869,14904]},{"pos":[14909,14958],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetWindowText<ept id=\"p1\">](#cwindow__setwindowtext)</ept>","source":"[CWindow::SetWindowText](#cwindow__setwindowtext)"},{"content":"Changes the window's text.","pos":[14959,14985]},{"pos":[14990,15039],"content":"<bpt id=\"p1\">[</bpt>CWindow::SetWindowWord<ept id=\"p1\">](#cwindow__setwindowword)</ept>","source":"[CWindow::SetWindowWord](#cwindow__setwindowword)"},{"content":"Sets a 16-bit value at a specified offset into the extra window memory.","pos":[15040,15111]},{"pos":[15116,15157],"content":"<bpt id=\"p1\">[</bpt>CWindow::ShowCaret<ept id=\"p1\">](#cwindow__showcaret)</ept>","source":"[CWindow::ShowCaret](#cwindow__showcaret)"},{"content":"Displays the system caret.","pos":[15158,15184]},{"pos":[15189,15242],"content":"<bpt id=\"p1\">[</bpt>CWindow::ShowOwnedPopups<ept id=\"p1\">](#cwindow__showownedpopups)</ept>","source":"[CWindow::ShowOwnedPopups](#cwindow__showownedpopups)"},{"content":"Shows or hides the pop-up windows owned by the window.","pos":[15243,15297]},{"pos":[15302,15351],"content":"<bpt id=\"p1\">[</bpt>CWindow::ShowScrollBar<ept id=\"p1\">](#cwindow__showscrollbar)</ept>","source":"[CWindow::ShowScrollBar](#cwindow__showscrollbar)"},{"content":"Shows or hides a scroll bar.","pos":[15352,15380]},{"pos":[15385,15428],"content":"<bpt id=\"p1\">[</bpt>CWindow::ShowWindow<ept id=\"p1\">](#cwindow__showwindow)</ept>","source":"[CWindow::ShowWindow](#cwindow__showwindow)"},{"content":"Sets the window's show state.","pos":[15429,15458]},{"pos":[15463,15516],"content":"<bpt id=\"p1\">[</bpt>CWindow::ShowWindowAsync<ept id=\"p1\">](#cwindow__showwindowasync)</ept>","source":"[CWindow::ShowWindowAsync](#cwindow__showwindowasync)"},{"content":"Sets the show state of a window created by a different thread.","pos":[15517,15579]},{"pos":[15584,15631],"content":"<bpt id=\"p1\">[</bpt>CWindow::UpdateWindow<ept id=\"p1\">](#cwindow__updatewindow)</ept>","source":"[CWindow::UpdateWindow](#cwindow__updatewindow)"},{"content":"Updates the client area.","pos":[15632,15656]},{"pos":[15661,15708],"content":"<bpt id=\"p1\">[</bpt>CWindow::ValidateRect<ept id=\"p1\">](#cwindow__validaterect)</ept>","source":"[CWindow::ValidateRect](#cwindow__validaterect)"},{"content":"Validates the client area within the specified rectangle.","pos":[15709,15766]},{"pos":[15771,15816],"content":"<bpt id=\"p1\">[</bpt>CWindow::ValidateRgn<ept id=\"p1\">](#cwindow__validatergn)</ept>","source":"[CWindow::ValidateRgn](#cwindow__validatergn)"},{"content":"Validates the client area within the specified region.","pos":[15817,15871]},{"pos":[15876,15913],"content":"<bpt id=\"p1\">[</bpt>CWindow::WinHelp<ept id=\"p1\">](#cwindow__winhelp)</ept>","source":"[CWindow::WinHelp](#cwindow__winhelp)"},{"content":"Starts Windows Help.","pos":[15914,15934]},{"pos":[15945,15961],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[15968,15972]},{"content":"Description","pos":[15973,15984]},{"pos":[16022,16071],"content":"<bpt id=\"p1\">[</bpt>CWindow::operator HWND<ept id=\"p1\">](#cwindow__operator_hwnd)</ept>","source":"[CWindow::operator HWND](#cwindow__operator_hwnd)"},{"pos":[16072,16115],"content":"Converts the <ph id=\"ph1\">`CWindow`</ph> object to an <ph id=\"ph2\">`HWND`</ph>.","source":"Converts the `CWindow` object to an `HWND`."},{"pos":[16120,16164],"content":"<bpt id=\"p1\">[</bpt>CWindow::operator =<ept id=\"p1\">](#cwindow__operator_eq)</ept>","source":"[CWindow::operator =](#cwindow__operator_eq)"},{"pos":[16165,16207],"content":"Assigns an <ph id=\"ph1\">`HWND`</ph> to the <ph id=\"ph2\">`CWindow`</ph> object.","source":"Assigns an `HWND` to the `CWindow` object."},{"pos":[16218,16237],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[16244,16248]},{"content":"Description","pos":[16249,16260]},{"pos":[16298,16333],"content":"<bpt id=\"p1\">[</bpt>CWindow::m_hWnd<ept id=\"p1\">](#cwindow__m_hwnd)</ept>","source":"[CWindow::m_hWnd](#cwindow__m_hwnd)"},{"pos":[16334,16396],"content":"The handle to the window associated with the <ph id=\"ph1\">`CWindow`</ph> object.","source":"The handle to the window associated with the `CWindow` object."},{"pos":[16401,16442],"content":"<bpt id=\"p1\">[</bpt>CWindow::rcDefault<ept id=\"p1\">](#cwindow__rcdefault)</ept>","source":"[CWindow::rcDefault](#cwindow__rcdefault)"},{"content":"Contains default window dimensions.","pos":[16443,16478]},{"pos":[16488,16495],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CWindow`</ph> provides the base functionality for manipulating a window in ATL.","pos":[16499,16574],"source":"`CWindow` provides the base functionality for manipulating a window in ATL."},{"content":"Many of the <ph id=\"ph1\">`CWindow`</ph> methods simply wrap one of the Win32 API functions.","pos":[16575,16648],"source":" Many of the `CWindow` methods simply wrap one of the Win32 API functions."},{"content":"For example, compare the prototypes for <ph id=\"ph1\">`CWindow::ShowWindow`</ph> and <ph id=\"ph2\">`ShowWindow`</ph>:","pos":[16649,16728],"source":" For example, compare the prototypes for `CWindow::ShowWindow` and `ShowWindow`:"},{"content":"CWindow method","pos":[16735,16749]},{"content":"Win32 function","pos":[16750,16764]},{"pos":[16815,16857],"content":"<bpt id=\"p1\">**</bpt>BOOL ShowWindow( int<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nCmdShow`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**BOOL ShowWindow( int** `nCmdShow` **);**"},{"pos":[16858,16918],"content":"<bpt id=\"p1\">**</bpt>BOOL ShowWindow( HWND<ept id=\"p1\">**</ept> <ph id=\"ph1\">`hWnd`</ph> <bpt id=\"p2\">**</bpt>, int<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nCmdShow`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**BOOL ShowWindow( HWND** `hWnd` **, int** `nCmdShow` **);**"},{"content":"<ph id=\"ph1\">`CWindow::ShowWindow`</ph> calls the Win32 function <ph id=\"ph2\">`ShowWindow`</ph> by passing <ph id=\"ph3\">`CWindow::m_hWnd`</ph> as the first parameter.","pos":[16926,17038],"source":"`CWindow::ShowWindow` calls the Win32 function `ShowWindow` by passing `CWindow::m_hWnd` as the first parameter."},{"content":"Every <ph id=\"ph1\">`CWindow`</ph> method that directly wraps a Win32 function passes the <ph id=\"ph2\">`m_hWnd`</ph> member; therefore, much of the <ph id=\"ph3\">`CWindow`</ph> documentation will refer you to the <ph id=\"ph4\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[17039,17248],"source":" Every `CWindow` method that directly wraps a Win32 function passes the `m_hWnd` member; therefore, much of the `CWindow` documentation will refer you to the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[17256,17386],"content":"[!NOTE]\n Not every window-related Win32 function is wrapped by `CWindow`, and not every `CWindow` method wraps a Win32 function.","leadings":["","> "],"nodes":[{"content":"Not every window-related Win32 function is wrapped by <ph id=\"ph1\">`CWindow`</ph>, and not every <ph id=\"ph2\">`CWindow`</ph> method wraps a Win32 function.","pos":[9,128],"source":" Not every window-related Win32 function is wrapped by `CWindow`, and not every `CWindow` method wraps a Win32 function."}]},{"content":"<ph id=\"ph1\">`CWindow::m_hWnd`</ph> stores the <ph id=\"ph2\">`HWND`</ph> that identifies a window.","pos":[17393,17454],"source":"`CWindow::m_hWnd` stores the `HWND` that identifies a window."},{"content":"An <ph id=\"ph1\">`HWND`</ph> is attached to your object when you:","pos":[17455,17501],"source":" An `HWND` is attached to your object when you:"},{"pos":[17511,17556],"content":"Specify an <ph id=\"ph1\">`HWND`</ph> in <ph id=\"ph2\">`CWindow`</ph>'s constructor.","source":"Specify an `HWND` in `CWindow`'s constructor."},{"pos":[17566,17589],"content":"Call <ph id=\"ph1\">`CWindow::Attach`</ph>.","source":"Call `CWindow::Attach`."},{"pos":[17599,17630],"content":"Use <ph id=\"ph1\">`CWindow`</ph>'s <bpt id=\"p1\">**</bpt>operator =<ept id=\"p1\">**</ept>.","source":"Use `CWindow`'s **operator =**."},{"pos":[17640,17726],"content":"Create or subclass a window using one of the following classes derived from <ph id=\"ph1\">`CWindow`</ph>:","source":"Create or subclass a window using one of the following classes derived from `CWindow`:"},{"pos":[17733,17854],"content":"<bpt id=\"p1\">[</bpt>CWindowImpl<ept id=\"p1\">](../../atl/reference/cwindowimpl-class.md)</ept> Allows you to create a new window or subclass an existing window.","source":"[CWindowImpl](../../atl/reference/cwindowimpl-class.md) Allows you to create a new window or subclass an existing window."},{"content":"<bpt id=\"p1\">[</bpt>CContainedWindow<ept id=\"p1\">](../../atl/reference/ccontainedwindowt-class.md)</ept> Implements a window contained within another object.","pos":[17861,17980],"source":"[CContainedWindow](../../atl/reference/ccontainedwindowt-class.md) Implements a window contained within another object."},{"content":"You can create a new window or subclass an existing window.","pos":[17981,18040]},{"pos":[18047,18155],"content":"<bpt id=\"p1\">[</bpt>CDialogImpl<ept id=\"p1\">](../../atl/reference/cdialogimpl-class.md)</ept> Allows you to create a modal or modeless dialog box.","source":"[CDialogImpl](../../atl/reference/cdialogimpl-class.md) Allows you to create a modal or modeless dialog box."},{"content":"For more information about windows, see <bpt id=\"p1\">[</bpt>Windows<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632595)</ept> and subsequent topics in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[18162,18353],"source":"For more information about windows, see [Windows](http://msdn.microsoft.com/library/windows/desktop/ms632595) and subsequent topics in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"For more information about using windows in ATL, see the article <bpt id=\"p1\">[</bpt>ATL Window Classes<ept id=\"p1\">](../../atl/atl-window-classes.md)</ept>.","pos":[18354,18473],"source":" For more information about using windows in ATL, see the article [ATL Window Classes](../../atl/atl-window-classes.md)."},{"pos":[18482,18494],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[18498,18518],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlwin.h","source":"**Header:** atlwin.h"},{"pos":[18528,18603],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__arrangeiconicwindows\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::ArrangeIconicWindows","linkify":"<a name=\"cwindow__arrangeiconicwindows\"></a>  CWindow::ArrangeIconicWindows","source":"<a name=\"cwindow__arrangeiconicwindows\"></a>  CWindow::ArrangeIconicWindows"},{"content":"Arranges all minimized child windows.","pos":[18607,18644]},{"pos":[18704,18711],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18715,18861],"content":"See <bpt id=\"p1\">[</bpt>ArrangeIconicWindows<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632671)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [ArrangeIconicWindows](http://msdn.microsoft.com/library/windows/desktop/ms632671) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[18871,18918],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__attach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::Attach","linkify":"<a name=\"cwindow__attach\"></a>  CWindow::Attach","source":"<a name=\"cwindow__attach\"></a>  CWindow::Attach"},{"pos":[18922,18990],"content":"Attaches the window identified by <ph id=\"ph1\">`hWndNew`</ph> to the <ph id=\"ph2\">`CWindow`</ph> object.","source":"Attaches the window identified by `hWndNew` to the `CWindow` object."},{"pos":[19048,19058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The handle to a window.","pos":[19075,19103]},{"pos":[19113,19120],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19124,19203],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#1<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#1](../../atl/codesnippet/cpp/cwindow-class_1.cpp)]"},{"pos":[19213,19268],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__beginpaint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::BeginPaint","linkify":"<a name=\"cwindow__beginpaint\"></a>  CWindow::BeginPaint","source":"<a name=\"cwindow__beginpaint\"></a>  CWindow::BeginPaint"},{"content":"Prepares the window for painting.","pos":[19272,19305]},{"pos":[19375,19382],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19386,19522],"content":"See <bpt id=\"p1\">[</bpt>BeginPaint<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183362)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [BeginPaint](http://msdn.microsoft.com/library/windows/desktop/dd183362) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[19532,19539],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19543,19622],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#2<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#2](../../atl/codesnippet/cpp/cwindow-class_2.cpp)]"},{"pos":[19632,19699],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__bringwindowtotop\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::BringWindowToTop","linkify":"<a name=\"cwindow__bringwindowtotop\"></a>  CWindow::BringWindowToTop","source":"<a name=\"cwindow__bringwindowtotop\"></a>  CWindow::BringWindowToTop"},{"content":"Brings the window to the top of the Z order.","pos":[19703,19747]},{"pos":[19803,19810],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19814,19956],"content":"See <bpt id=\"p1\">[</bpt>BringWindowToTop<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632673)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [BringWindowToTop](http://msdn.microsoft.com/library/windows/desktop/ms632673) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[19966,19973],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19977,20056],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#3<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#3](../../atl/codesnippet/cpp/cwindow-class_3.cpp)]"},{"pos":[20066,20125],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__centerwindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::CenterWindow","linkify":"<a name=\"cwindow__centerwindow\"></a>  CWindow::CenterWindow","source":"<a name=\"cwindow__centerwindow\"></a>  CWindow::CenterWindow"},{"content":"Centers the window against a given window.","pos":[20129,20171]},{"pos":[20245,20255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The handle to the window against which to center.","pos":[20275,20329]},{"content":"If this parameter is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> (the default value), the method will set <ph id=\"ph1\">`hWndCenter`</ph> to the window's parent window if it is a child window.","pos":[20330,20468],"source":" If this parameter is **NULL** (the default value), the method will set `hWndCenter` to the window's parent window if it is a child window."},{"content":"Otherwise, it will set <ph id=\"ph1\">`hWndCenter`</ph> to the window's owner window.","pos":[20469,20534],"source":" Otherwise, it will set `hWndCenter` to the window's owner window."},{"pos":[20544,20556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20560,20630],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the window is successfully centered; otherwise, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the window is successfully centered; otherwise, **FALSE**."},{"pos":[20640,20647],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20651,20730],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#4<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#4](../../atl/codesnippet/cpp/cwindow-class_4.cpp)]"},{"pos":[20740,20815],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__changeclipboardchain\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::ChangeClipboardChain","linkify":"<a name=\"cwindow__changeclipboardchain\"></a>  CWindow::ChangeClipboardChain","source":"<a name=\"cwindow__changeclipboardchain\"></a>  CWindow::ChangeClipboardChain"},{"content":"Removes the window from the chain of Clipboard viewers.","pos":[20819,20874]},{"pos":[20950,20957],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20961,21107],"content":"See <bpt id=\"p1\">[</bpt>ChangeClipboardChain<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms649034)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [ChangeClipboardChain](http://msdn.microsoft.com/library/windows/desktop/ms649034) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[21117,21180],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__checkdlgbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::CheckDlgButton","linkify":"<a name=\"cwindow__checkdlgbutton\"></a>  CWindow::CheckDlgButton","source":"<a name=\"cwindow__checkdlgbutton\"></a>  CWindow::CheckDlgButton"},{"content":"Changes the check state of the specified button.","pos":[21184,21232]},{"pos":[21313,21320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21324,21464],"content":"See <bpt id=\"p1\">[</bpt>CheckDlgButton<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761875)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [CheckDlgButton](http://msdn.microsoft.com/library/windows/desktop/bb761875) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[21474,21541],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__checkradiobutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::CheckRadioButton","linkify":"<a name=\"cwindow__checkradiobutton\"></a>  CWindow::CheckRadioButton","source":"<a name=\"cwindow__checkradiobutton\"></a>  CWindow::CheckRadioButton"},{"content":"Checks the specified radio button.","pos":[21545,21579]},{"pos":[21700,21707],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21711,21853],"content":"See <bpt id=\"p1\">[</bpt>CheckRadioButton<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761877)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [CheckRadioButton](http://msdn.microsoft.com/library/windows/desktop/bb761877) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[21863,21938],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__childwindowfrompoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::ChildWindowFromPoint","linkify":"<a name=\"cwindow__childwindowfrompoint\"></a>  CWindow::ChildWindowFromPoint","source":"<a name=\"cwindow__childwindowfrompoint\"></a>  CWindow::ChildWindowFromPoint"},{"content":"Retrieves the child window containing the specified point.","pos":[21942,22000]},{"pos":[22077,22084],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22088,22234],"content":"See <bpt id=\"p1\">[</bpt>ChildWindowFromPoint<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632676)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [ChildWindowFromPoint](http://msdn.microsoft.com/library/windows/desktop/ms632676) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[22244,22323],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__childwindowfrompointex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::ChildWindowFromPointEx","linkify":"<a name=\"cwindow__childwindowfrompointex\"></a>  CWindow::ChildWindowFromPointEx","source":"<a name=\"cwindow__childwindowfrompointex\"></a>  CWindow::ChildWindowFromPointEx"},{"content":"Retrieves a particular type of child window containing the specified point.","pos":[22327,22402]},{"pos":[22493,22500],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22504,22652],"content":"See <bpt id=\"p1\">[</bpt>ChildWindowFromPointEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632677)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [ChildWindowFromPointEx](http://msdn.microsoft.com/library/windows/desktop/ms632677) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[22662,22725],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__clienttoscreen\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::ClientToScreen","linkify":"<a name=\"cwindow__clienttoscreen\"></a>  CWindow::ClientToScreen","source":"<a name=\"cwindow__clienttoscreen\"></a>  CWindow::ClientToScreen"},{"content":"Converts client coordinates to screen coordinates.","pos":[22729,22779]},{"pos":[22905,22912],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22916,23056],"content":"See <bpt id=\"p1\">[</bpt>ClientToScreen<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183434)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [ClientToScreen](http://msdn.microsoft.com/library/windows/desktop/dd183434) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[23063,23217],"content":"The second version of this method allows you to convert the coordinates of a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.","source":"The second version of this method allows you to convert the coordinates of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure."},{"pos":[23227,23274],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::Create","linkify":"<a name=\"cwindow__create\"></a>  CWindow::Create","source":"<a name=\"cwindow__create\"></a>  CWindow::Create"},{"content":"Creates a window.","pos":[23278,23295]},{"pos":[23553,23563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A pointer to the window's class.","pos":[23586,23623]},{"content":"[in] The handle to the parent or owner window.","pos":[23646,23692]},{"content":"[in] A variable of type <bpt id=\"p1\">[</bpt>_U_RECT<ept id=\"p1\">](../../atl/reference/u-rect-class.md)</ept> specifying the position of the window.","pos":[23709,23818],"source":" [in] A variable of type [_U_RECT](../../atl/reference/u-rect-class.md) specifying the position of the window."},{"content":"The default value is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[23819,23849],"source":" The default value is **NULL**."},{"content":"When this parameter is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the value of <ph id=\"ph1\">`CWindow::rcDefault`</ph> is used.","pos":[23850,23925],"source":" When this parameter is **NULL**, the value of `CWindow::rcDefault` is used."},{"content":"[in] Specifies the name of the window.","pos":[23950,23988]},{"content":"The default value is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[23989,24019],"source":" The default value is **NULL**."},{"content":"[in] The style of the window.","pos":[24039,24068]},{"content":"The default value is 0, meaning no style is specified.","pos":[24069,24123]},{"content":"For a list of possible values, see <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[24124,24293],"source":" For a list of possible values, see [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"[in] The extended window style.","pos":[24315,24346]},{"content":"The default value is 0, meaning no extended style is specified.","pos":[24347,24410]},{"content":"For a list of possible values, see <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[24411,24582],"source":" For a list of possible values, see [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"[in] A variable of type <bpt id=\"p1\">[</bpt>_U_MENUorID<ept id=\"p1\">](../../atl/reference/u-menuorid-class.md)</ept> specifying a handle to a menu or a window identifier.","pos":[24603,24735],"source":" [in] A variable of type [_U_MENUorID](../../atl/reference/u-menuorid-class.md) specifying a handle to a menu or a window identifier."},{"content":"The default value is 0U.","pos":[24736,24760]},{"content":"A pointer to the window-creation data contained in a <bpt id=\"p1\">[</bpt>CREATESTRUCT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632603)</ept> structure.","pos":[24786,24924],"source":" A pointer to the window-creation data contained in a [CREATESTRUCT](http://msdn.microsoft.com/library/windows/desktop/ms632603) structure."},{"pos":[24934,24946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If successful, the handle to the newly created window, specified by <bpt id=\"p1\">[</bpt>m_hWnd<ept id=\"p1\">](#cwindow__m_hwnd)</ept>.","pos":[24950,25045],"source":"If successful, the handle to the newly created window, specified by [m_hWnd](#cwindow__m_hwnd)."},{"content":"Otherwise, <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[25046,25066],"source":" Otherwise, **NULL**."},{"pos":[25076,25083],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25087,25210],"content":"<ph id=\"ph1\">`CWindow::rcDefault`</ph> is defined as <ph id=\"ph2\">`__declspec(selectany) RECT CWindow::rcDefault = {CW_USEDEFAULT, CW_USEDEFAULT, 0, 0};`</ph>.","source":"`CWindow::rcDefault` is defined as `__declspec(selectany) RECT CWindow::rcDefault = {CW_USEDEFAULT, CW_USEDEFAULT, 0, 0};`."},{"pos":[25217,25376],"content":"See <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information.","source":"See [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information."},{"pos":[25383,25521],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> If 0 is used as the value for the <ph id=\"ph1\">`MenuOrID`</ph> parameter, it must be specified as 0U (the default value) to avoid a compiler error.","source":"**Note** If 0 is used as the value for the `MenuOrID` parameter, it must be specified as 0U (the default value) to avoid a compiler error."},{"pos":[25531,25588],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__createcaret\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::CreateCaret","linkify":"<a name=\"cwindow__createcaret\"></a>  CWindow::CreateCaret","source":"<a name=\"cwindow__createcaret\"></a>  CWindow::CreateCaret"},{"content":"Creates a new shape for the system caret.","pos":[25592,25633]},{"pos":[25699,25706],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25710,25847],"content":"See <bpt id=\"p1\">[</bpt>CreateCaret<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648399)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [CreateCaret](http://msdn.microsoft.com/library/windows/desktop/ms648399) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[25857,25922],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__creategraycaret\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::CreateGrayCaret","linkify":"<a name=\"cwindow__creategraycaret\"></a>  CWindow::CreateGrayCaret","source":"<a name=\"cwindow__creategraycaret\"></a>  CWindow::CreateGrayCaret"},{"content":"Creates a gray rectangle for the system caret.","pos":[25926,25972]},{"pos":[26051,26058],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26062,26199],"content":"See <bpt id=\"p1\">[</bpt>CreateCaret<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648399)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [CreateCaret](http://msdn.microsoft.com/library/windows/desktop/ms648399) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Passes (HBITMAP) 1 for the bitmap handle parameter to the Win32 function.","pos":[26206,26279]},{"pos":[26289,26356],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__createsolidcaret\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::CreateSolidCaret","linkify":"<a name=\"cwindow__createsolidcaret\"></a>  CWindow::CreateSolidCaret","source":"<a name=\"cwindow__createsolidcaret\"></a>  CWindow::CreateSolidCaret"},{"content":"Creates a solid rectangle for the system caret.","pos":[26360,26407]},{"pos":[26487,26494],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26498,26635],"content":"See <bpt id=\"p1\">[</bpt>CreateCaret<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648399)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [CreateCaret](http://msdn.microsoft.com/library/windows/desktop/ms648399) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Passes (HBITMAP) 0 for the bitmap handle parameter to the Win32 function.","pos":[26642,26715]},{"pos":[26725,26774],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__cwindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::CWindow","linkify":"<a name=\"cwindow__cwindow\"></a>  CWindow::CWindow","source":"<a name=\"cwindow__cwindow\"></a>  CWindow::CWindow"},{"content":"The constructor.","pos":[26778,26794]},{"pos":[26852,26862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The handle to a window.","pos":[26876,26904]},{"pos":[26914,26921],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26925,27015],"content":"Initializes the <bpt id=\"p1\">[</bpt>m_hWnd<ept id=\"p1\">](#cwindow__m_hwnd)</ept> member to <ph id=\"ph1\">`hWnd`</ph>, which by default is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","source":"Initializes the [m_hWnd](#cwindow__m_hwnd) member to `hWnd`, which by default is **NULL**."},{"pos":[27023,27515],"content":"[!NOTE]\n`CWindow::CWindow` does not create a window. Classes [CWindowImpl](../../atl/reference/cwindowimpl-class.md), [CContainedWindow](../../atl/reference/ccontainedwindowt-class.md), and [CDialogImpl](../../atl/reference/cdialogimpl-class.md) (all of which derive from `CWindow`) provide a method to create a window or dialog box, which is then assigned to `CWindow::m_hWnd`. You can also use the [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) Win32 function.","leadings":["","> "],"nodes":[{"content":"`CWindow::CWindow` does not create a window. Classes [CWindowImpl](../../atl/reference/cwindowimpl-class.md), [CContainedWindow](../../atl/reference/ccontainedwindowt-class.md), and [CDialogImpl](../../atl/reference/cdialogimpl-class.md) (all of which derive from `CWindow`) provide a method to create a window or dialog box, which is then assigned to `CWindow::m_hWnd`. You can also use the [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) Win32 function.","pos":[8,490],"nodes":[{"content":"<ph id=\"ph1\">`CWindow::CWindow`</ph> does not create a window.","pos":[0,44],"source":"`CWindow::CWindow` does not create a window."},{"content":"Classes <bpt id=\"p1\">[</bpt>CWindowImpl<ept id=\"p1\">](../../atl/reference/cwindowimpl-class.md)</ept>, <bpt id=\"p2\">[</bpt>CContainedWindow<ept id=\"p2\">](../../atl/reference/ccontainedwindowt-class.md)</ept>, and <bpt id=\"p3\">[</bpt>CDialogImpl<ept id=\"p3\">](../../atl/reference/cdialogimpl-class.md)</ept> (all of which derive from <ph id=\"ph1\">`CWindow`</ph>) provide a method to create a window or dialog box, which is then assigned to <ph id=\"ph2\">`CWindow::m_hWnd`</ph>.","pos":[45,370],"source":" Classes [CWindowImpl](../../atl/reference/cwindowimpl-class.md), [CContainedWindow](../../atl/reference/ccontainedwindowt-class.md), and [CDialogImpl](../../atl/reference/cdialogimpl-class.md) (all of which derive from `CWindow`) provide a method to create a window or dialog box, which is then assigned to `CWindow::m_hWnd`."},{"content":"You can also use the <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> Win32 function.","pos":[371,482],"source":" You can also use the [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) Win32 function."}]}]},{"pos":[27525,27588],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__deferwindowpos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::DeferWindowPos","linkify":"<a name=\"cwindow__deferwindowpos\"></a>  CWindow::DeferWindowPos","source":"<a name=\"cwindow__deferwindowpos\"></a>  CWindow::DeferWindowPos"},{"content":"Updates the specified multiple-window-position structure for the specified window.","pos":[27592,27674]},{"pos":[27833,27840],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27844,27984],"content":"See <bpt id=\"p1\">[</bpt>DeferWindowPos<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632681)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [DeferWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms632681) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[27994,28055],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__destroywindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::DestroyWindow","linkify":"<a name=\"cwindow__destroywindow\"></a>  CWindow::DestroyWindow","source":"<a name=\"cwindow__destroywindow\"></a>  CWindow::DestroyWindow"},{"pos":[28059,28164],"content":"Destroys the window associated with the <ph id=\"ph1\">`CWindow`</ph> object and sets <bpt id=\"p1\">[</bpt>m_hWnd<ept id=\"p1\">](#cwindow__m_hwnd)</ept> to <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","source":"Destroys the window associated with the `CWindow` object and sets [m_hWnd](#cwindow__m_hwnd) to **NULL**."},{"pos":[28217,28224],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28228,28367],"content":"See <bpt id=\"p1\">[</bpt>DestroyWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632682)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [DestroyWindow](http://msdn.microsoft.com/library/windows/desktop/ms632682) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[28374,28422],"content":"It does not destroy the <ph id=\"ph1\">`CWindow`</ph> object itself.","source":"It does not destroy the `CWindow` object itself."},{"pos":[28432,28439],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28443,28522],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#5<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#5](../../atl/codesnippet/cpp/cwindow-class_5.cpp)]"},{"pos":[28532,28579],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__detach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::Detach","linkify":"<a name=\"cwindow__detach\"></a>  CWindow::Detach","source":"<a name=\"cwindow__detach\"></a>  CWindow::Detach"},{"pos":[28583,28675],"content":"Detaches <bpt id=\"p1\">[</bpt>m_hWnd<ept id=\"p1\">](#cwindow__m_hwnd)</ept> from the <ph id=\"ph1\">`CWindow`</ph> object and sets <ph id=\"ph2\">`m_hWnd`</ph> to <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","source":"Detaches [m_hWnd](#cwindow__m_hwnd) from the `CWindow` object and sets `m_hWnd` to **NULL**."},{"pos":[28721,28733],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28737,28785],"content":"The <ph id=\"ph1\">`HWND`</ph> associated with the <ph id=\"ph2\">`CWindow`</ph> object.","source":"The `HWND` associated with the `CWindow` object."},{"pos":[28795,28802],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28806,28885],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#6<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#6](../../atl/codesnippet/cpp/cwindow-class_6.cpp)]"},{"pos":[28895,28950],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__dlgdirlist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::DlgDirList","linkify":"<a name=\"cwindow__dlgdirlist\"></a>  CWindow::DlgDirList","source":"<a name=\"cwindow__dlgdirlist\"></a>  CWindow::DlgDirList"},{"content":"Fills a list box with the names of all files matching a specified path or file name.","pos":[28954,29038]},{"pos":[29167,29174],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29178,29314],"content":"See <bpt id=\"p1\">[</bpt>DlgDirList<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761366)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [DlgDirList](http://msdn.microsoft.com/library/windows/desktop/bb761366) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[29324,29395],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__dlgdirlistcombobox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::DlgDirListComboBox","linkify":"<a name=\"cwindow__dlgdirlistcombobox\"></a>  CWindow::DlgDirListComboBox","source":"<a name=\"cwindow__dlgdirlistcombobox\"></a>  CWindow::DlgDirListComboBox"},{"content":"Fills a combo box with the names of all files matching a specified path or file name.","pos":[29399,29484]},{"pos":[29622,29629],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29633,29777],"content":"See <bpt id=\"p1\">[</bpt>DlgDirListComboBox<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775935)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [DlgDirListComboBox](http://msdn.microsoft.com/library/windows/desktop/bb775935) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[29787,29846],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__dlgdirselect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::DlgDirSelect","linkify":"<a name=\"cwindow__dlgdirselect\"></a>  CWindow::DlgDirSelect","source":"<a name=\"cwindow__dlgdirselect\"></a>  CWindow::DlgDirSelect"},{"content":"Retrieves the current selection from a list box.","pos":[29850,29898]},{"pos":[30001,30008],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30012,30152],"content":"See <bpt id=\"p1\">[</bpt>DlgDirSelectEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761368)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [DlgDirSelectEx](http://msdn.microsoft.com/library/windows/desktop/bb761368) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[30162,30237],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__dlgdirselectcombobox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::DlgDirSelectComboBox","linkify":"<a name=\"cwindow__dlgdirselectcombobox\"></a>  CWindow::DlgDirSelectComboBox","source":"<a name=\"cwindow__dlgdirselectcombobox\"></a>  CWindow::DlgDirSelectComboBox"},{"content":"Retrieves the current selection from a combo box.","pos":[30241,30290]},{"pos":[30402,30409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30413,30561],"content":"See <bpt id=\"p1\">[</bpt>DlgDirSelectComboBoxEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775937)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [DlgDirSelectComboBoxEx](http://msdn.microsoft.com/library/windows/desktop/bb775937) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[30571,30636],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__dragacceptfiles\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::DragAcceptFiles","linkify":"<a name=\"cwindow__dragacceptfiles\"></a>  CWindow::DragAcceptFiles","source":"<a name=\"cwindow__dragacceptfiles\"></a>  CWindow::DragAcceptFiles"},{"content":"Registers whether the window accepts dragged files.","pos":[30640,30691]},{"pos":[30757,30764],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30768,30909],"content":"See <bpt id=\"p1\">[</bpt>DragAcceptFiles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb776406)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [DragAcceptFiles](http://msdn.microsoft.com/library/windows/desktop/bb776406) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[30919,30976],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__drawmenubar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::DrawMenuBar","linkify":"<a name=\"cwindow__drawmenubar\"></a>  CWindow::DrawMenuBar","source":"<a name=\"cwindow__drawmenubar\"></a>  CWindow::DrawMenuBar"},{"content":"Redraws the window's menu bar.","pos":[30980,31010]},{"pos":[31061,31068],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31072,31209],"content":"See <bpt id=\"p1\">[</bpt>DrawMenuBar<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647633)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [DrawMenuBar](http://msdn.microsoft.com/library/windows/desktop/ms647633) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[31219,31284],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__enablescrollbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::EnableScrollBar","linkify":"<a name=\"cwindow__enablescrollbar\"></a>  CWindow::EnableScrollBar","source":"<a name=\"cwindow__enablescrollbar\"></a>  CWindow::EnableScrollBar"},{"content":"Enables or disables the scroll bar arrows.","pos":[31288,31330]},{"pos":[31435,31442],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31446,31587],"content":"See <bpt id=\"p1\">[</bpt>EnableScrollBar<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787579)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [EnableScrollBar](http://msdn.microsoft.com/library/windows/desktop/bb787579) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[31597,31656],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__enablewindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::EnableWindow","linkify":"<a name=\"cwindow__enablewindow\"></a>  CWindow::EnableWindow","source":"<a name=\"cwindow__enablewindow\"></a>  CWindow::EnableWindow"},{"content":"Enables or disables input.","pos":[31660,31686]},{"pos":[31757,31764],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31768,31906],"content":"See <bpt id=\"p1\">[</bpt>EnableWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646291)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [EnableWindow](http://msdn.microsoft.com/library/windows/desktop/ms646291) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[31916,31923],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31927,32006],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#7<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#7](../../atl/codesnippet/cpp/cwindow-class_7.cpp)]"},{"pos":[32016,32067],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__endpaint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::EndPaint","linkify":"<a name=\"cwindow__endpaint\"></a>  CWindow::EndPaint","source":"<a name=\"cwindow__endpaint\"></a>  CWindow::EndPaint"},{"content":"Marks the end of painting.","pos":[32071,32097]},{"pos":[32166,32173],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32177,32311],"content":"See <bpt id=\"p1\">[</bpt>EndPaint<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162598)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [EndPaint](http://msdn.microsoft.com/library/windows/desktop/dd162598) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[32321,32328],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[32332,32411],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#2<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#2](../../atl/codesnippet/cpp/cwindow-class_2.cpp)]"},{"pos":[32421,32478],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__flashwindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::FlashWindow","linkify":"<a name=\"cwindow__flashwindow\"></a>  CWindow::FlashWindow","source":"<a name=\"cwindow__flashwindow\"></a>  CWindow::FlashWindow"},{"content":"Flashes the window once.","pos":[32482,32506]},{"pos":[32569,32576],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32580,32717],"content":"See <bpt id=\"p1\">[</bpt>FlashWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679346)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [FlashWindow](http://msdn.microsoft.com/library/windows/desktop/ms679346) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[32727,32788],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getclientrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetClientRect","linkify":"<a name=\"cwindow__getclientrect\"></a>  CWindow::GetClientRect","source":"<a name=\"cwindow__getclientrect\"></a>  CWindow::GetClientRect"},{"content":"Retrieves the coordinates of the client area.","pos":[32792,32837]},{"pos":[32909,32916],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32920,33059],"content":"See <bpt id=\"p1\">[</bpt>GetClientRect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633503)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetClientRect](http://msdn.microsoft.com/library/windows/desktop/ms633503) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[33069,33076],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33080,33159],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#8<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#8](../../atl/codesnippet/cpp/cwindow-class_8.cpp)]"},{"pos":[33169,33214],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getdc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetDC","linkify":"<a name=\"cwindow__getdc\"></a>  CWindow::GetDC","source":"<a name=\"cwindow__getdc\"></a>  CWindow::GetDC"},{"content":"Retrieves a device context for the client area.","pos":[33218,33265]},{"pos":[33309,33316],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33320,33451],"content":"See <bpt id=\"p1\">[</bpt>GetDC<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144871)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetDC](http://msdn.microsoft.com/library/windows/desktop/dd144871) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[33461,33468],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33472,33551],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#9<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#9](../../atl/codesnippet/cpp/cwindow-class_9.cpp)]"},{"pos":[33561,33610],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getdcex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetDCEx","linkify":"<a name=\"cwindow__getdcex\"></a>  CWindow::GetDCEx","source":"<a name=\"cwindow__getdcex\"></a>  CWindow::GetDCEx"},{"content":"Retrieves a device context for the client area and allows clipping options.","pos":[33614,33689]},{"pos":[33762,33769],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33773,33906],"content":"See <bpt id=\"p1\">[</bpt>GetDCEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144873)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetDCEx](http://msdn.microsoft.com/library/windows/desktop/dd144873) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[33916,33989],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getdescendantwindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetDescendantWindow","linkify":"<a name=\"cwindow__getdescendantwindow\"></a>  CWindow::GetDescendantWindow","source":"<a name=\"cwindow__getdescendantwindow\"></a>  CWindow::GetDescendantWindow"},{"content":"Finds the descendant window specified by the given identifier.","pos":[33993,34055]},{"pos":[34127,34137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The identifier of the descendant window to be retrieved.","pos":[34150,34211]},{"pos":[34221,34233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle to a descendant window.","pos":[34237,34271]},{"pos":[34281,34288],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34292,34406],"content":"<ph id=\"ph1\">`GetDescendantWindow`</ph> searches the entire tree of child windows, not only the windows that are immediate children.","source":"`GetDescendantWindow` searches the entire tree of child windows, not only the windows that are immediate children."},{"pos":[34416,34477],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getdlgcontrol\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetDlgControl","linkify":"<a name=\"cwindow__getdlgcontrol\"></a>  CWindow::GetDlgControl","source":"<a name=\"cwindow__getdlgcontrol\"></a>  CWindow::GetDlgControl"},{"content":"Call this function to get a pointer to an interface of an ActiveX control that is hosted by a composite control or a control-hosting dialog.","pos":[34481,34621]},{"pos":[34719,34729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The resource ID of the control being retrieved.","pos":[34742,34794]},{"content":"[in] The ID of the interface you would like to get from the control.","pos":[34810,34878]},{"content":"<bpt id=\"p1\">*</bpt>ppCtrl<ept id=\"p1\">*</ept>","pos":[34885,34893],"source":"*ppCtrl*"},{"content":"[out] The pointer to the interface.","pos":[34897,34932]},{"pos":[34942,34954],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns <ph id=\"ph1\">`S_OK`</ph> on success or any valid error <ph id=\"ph2\">`HRESULT`</ph>.","pos":[34958,35013],"source":"Returns `S_OK` on success or any valid error `HRESULT`."},{"content":"For example, the function returns <bpt id=\"p1\">**</bpt>E_FAIL<ept id=\"p1\">**</ept> if the control specified by <ph id=\"ph1\">`nID`</ph> cannot be found and it returns <bpt id=\"p2\">**</bpt>E_NOINTERFACE<ept id=\"p2\">**</ept> if the control can be found, but it doesn't support the interface specified by <ph id=\"ph2\">`iid`</ph>.","pos":[35014,35227],"source":" For example, the function returns **E_FAIL** if the control specified by `nID` cannot be found and it returns **E_NOINTERFACE** if the control can be found, but it doesn't support the interface specified by `iid`."},{"pos":[35237,35244],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Using this pointer, you can call methods on the interface.","pos":[35248,35306]},{"pos":[35316,35375],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getdlgctrlid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetDlgCtrlID","linkify":"<a name=\"cwindow__getdlgctrlid\"></a>  CWindow::GetDlgCtrlID","source":"<a name=\"cwindow__getdlgctrlid\"></a>  CWindow::GetDlgCtrlID"},{"content":"Retrieves the window's identifier (for child windows only).","pos":[35379,35438]},{"pos":[35495,35502],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35506,35644],"content":"See <bpt id=\"p1\">[</bpt>GetDlgCtrlID<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645478)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetDlgCtrlID](http://msdn.microsoft.com/library/windows/desktop/ms645478) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[35654,35709],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getdlghost\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetDlgHost","linkify":"<a name=\"cwindow__getdlghost\"></a>  CWindow::GetDlgHost","source":"<a name=\"cwindow__getdlghost\"></a>  CWindow::GetDlgHost"},{"content":"Retrieves a pointer to an interface to the ATL Control hosting container.","pos":[35713,35786]},{"pos":[35881,35891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The resource ID of the control being retrieved.","pos":[35904,35956]},{"content":"[in] The ID of the interface you would like to get from the control.","pos":[35972,36040]},{"content":"<bpt id=\"p1\">*</bpt>ppHost<ept id=\"p1\">*</ept>","pos":[36047,36055],"source":"*ppHost*"},{"content":"[out] The pointer to the interface.","pos":[36059,36094]},{"pos":[36104,36116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns <ph id=\"ph1\">`S_OK`</ph> if the window specified by <ph id=\"ph2\">`iid`</ph> is a Control Container, and the requested interface could be retrieved.","pos":[36120,36239],"source":"Returns `S_OK` if the window specified by `iid` is a Control Container, and the requested interface could be retrieved."},{"content":"Returns <bpt id=\"p1\">**</bpt>E_FAIL<ept id=\"p1\">**</ept> if the window is not a Control Container, or if the interface requested could not be retrieved.","pos":[36240,36354],"source":" Returns **E_FAIL** if the window is not a Control Container, or if the interface requested could not be retrieved."},{"content":"If a window with the specified ID could not be found, then the return value is equal to HRESULT_FROM_WIN32(ERROR_CONTROL_ID_NOT_FOUND).","pos":[36355,36490]},{"pos":[36500,36507],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Using this pointer, you can call methods on the interface.","pos":[36511,36569]},{"pos":[36579,36634],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getdlgitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetDlgItem","linkify":"<a name=\"cwindow__getdlgitem\"></a>  CWindow::GetDlgItem","source":"<a name=\"cwindow__getdlgitem\"></a>  CWindow::GetDlgItem"},{"content":"Retrieves the specified child window.","pos":[36638,36675]},{"pos":[36738,36745],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36749,36885],"content":"See <bpt id=\"p1\">[</bpt>GetDlgItem<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645481)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetDlgItem](http://msdn.microsoft.com/library/windows/desktop/ms645481) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[36895,36956],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getdlgitemint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetDlgItemInt","linkify":"<a name=\"cwindow__getdlgitemint\"></a>  CWindow::GetDlgItemInt","source":"<a name=\"cwindow__getdlgitemint\"></a>  CWindow::GetDlgItemInt"},{"content":"Translates a control's text to an integer.","pos":[36960,37002]},{"pos":[37119,37126],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37130,37269],"content":"See <bpt id=\"p1\">[</bpt>GetDlgItemInt<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645485)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetDlgItemInt](http://msdn.microsoft.com/library/windows/desktop/ms645485) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[37279,37342],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getdlgitemtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetDlgItemText","linkify":"<a name=\"cwindow__getdlgitemtext\"></a>  CWindow::GetDlgItemText","source":"<a name=\"cwindow__getdlgitemtext\"></a>  CWindow::GetDlgItemText"},{"content":"Retrieves a control's text.","pos":[37346,37373]},{"pos":[37541,37548],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37552,37692],"content":"See <bpt id=\"p1\">[</bpt>GetDlgItemText<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645489)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetDlgItemText](http://msdn.microsoft.com/library/windows/desktop/ms645489) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[37702,37709],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The second version of this method allows you to copy the control's text to a <ph id=\"ph1\">`BSTR`</ph>.","pos":[37713,37797],"source":"The second version of this method allows you to copy the control's text to a `BSTR`."},{"content":"This version returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the text is successfully copied; otherwise, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[37798,37885],"source":" This version returns **TRUE** if the text is successfully copied; otherwise, **FALSE**."},{"pos":[37895,37950],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getexstyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetExStyle","linkify":"<a name=\"cwindow__getexstyle\"></a>  CWindow::GetExStyle","source":"<a name=\"cwindow__getexstyle\"></a>  CWindow::GetExStyle"},{"content":"Retrieves the extended window styles of the window.","pos":[37954,38005]},{"pos":[38062,38074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The window's extended styles.","pos":[38078,38107]},{"pos":[38117,38124],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38128,38203],"content":"To retrieve the regular window styles, call <bpt id=\"p1\">[</bpt>GetStyle<ept id=\"p1\">](#cwindow__getstyle)</ept>.","source":"To retrieve the regular window styles, call [GetStyle](#cwindow__getstyle)."},{"pos":[38213,38220],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38224,38305],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#10<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#10](../../atl/codesnippet/cpp/cwindow-class_10.cpp)]"},{"pos":[38315,38364],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getfont\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetFont","linkify":"<a name=\"cwindow__getfont\"></a>  CWindow::GetFont","source":"<a name=\"cwindow__getfont\"></a>  CWindow::GetFont"},{"pos":[38368,38512],"content":"Retrieves the window's current font by sending a <bpt id=\"p1\">[</bpt>WM_GETFONT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632624)</ept> message to the window.","source":"Retrieves the window's current font by sending a [WM_GETFONT](http://msdn.microsoft.com/library/windows/desktop/ms632624) message to the window."},{"pos":[38566,38578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A font handle.","pos":[38582,38596]},{"pos":[38606,38659],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__gethotkey\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetHotKey","linkify":"<a name=\"cwindow__gethotkey\"></a>  CWindow::GetHotKey","source":"<a name=\"cwindow__gethotkey\"></a>  CWindow::GetHotKey"},{"pos":[38663,38751],"content":"Determines the hot key associated with the window by sending a <bpt id=\"p1\">**</bpt>WM_GETHOTKEY<ept id=\"p1\">**</ept> message.","source":"Determines the hot key associated with the window by sending a **WM_GETHOTKEY** message."},{"pos":[38807,38819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The virtual key code and modifiers for the hot key associated with the window.","pos":[38823,38901]},{"content":"For a list of possible modifiers, see <bpt id=\"p1\">[</bpt>WM_GETHOTKEY<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646278)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[38902,39074],"source":" For a list of possible modifiers, see [WM_GETHOTKEY](http://msdn.microsoft.com/library/windows/desktop/ms646278) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"For a list of of standard virtual key codes, see Winuser.h.","pos":[39075,39134]},{"pos":[39144,39193],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__geticon\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetIcon","linkify":"<a name=\"cwindow__geticon\"></a>  CWindow::GetIcon","source":"<a name=\"cwindow__geticon\"></a>  CWindow::GetIcon"},{"content":"Retrieves the handle to the window's large or small icon.","pos":[39197,39254]},{"pos":[39320,39330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> (the default value) the method returns the large icon.","pos":[39348,39419],"source":" [in] If **TRUE** (the default value) the method returns the large icon."},{"content":"Otherwise, it returns the small icon.","pos":[39420,39457]},{"pos":[39467,39479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An icon handle.","pos":[39483,39498]},{"pos":[39508,39515],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39519,39632],"content":"<ph id=\"ph1\">`GetIcon`</ph> sends a <bpt id=\"p1\">[</bpt>WM_GETICON<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632625)</ept> message to the window.","source":"`GetIcon` sends a [WM_GETICON](http://msdn.microsoft.com/library/windows/desktop/ms632625) message to the window."},{"pos":[39642,39713],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getlastactivepopup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetLastActivePopup","linkify":"<a name=\"cwindow__getlastactivepopup\"></a>  CWindow::GetLastActivePopup","source":"<a name=\"cwindow__getlastactivepopup\"></a>  CWindow::GetLastActivePopup"},{"content":"Retrieves the most recently active pop-up window.","pos":[39717,39766]},{"pos":[39830,39837],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39841,39985],"content":"See <bpt id=\"p1\">[</bpt>GetLastActivePopup<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633507)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetLastActivePopup](http://msdn.microsoft.com/library/windows/desktop/ms633507) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[39995,40044],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetMenu","linkify":"<a name=\"cwindow__getmenu\"></a>  CWindow::GetMenu","source":"<a name=\"cwindow__getmenu\"></a>  CWindow::GetMenu"},{"content":"Retrieves the window's menu.","pos":[40048,40076]},{"pos":[40130,40137],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40141,40274],"content":"See <bpt id=\"p1\">[</bpt>GetMenu<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647640)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetMenu](http://msdn.microsoft.com/library/windows/desktop/ms647640) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[40284,40357],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getnextdlggroupitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetNextDlgGroupItem","linkify":"<a name=\"cwindow__getnextdlggroupitem\"></a>  CWindow::GetNextDlgGroupItem","source":"<a name=\"cwindow__getnextdlggroupitem\"></a>  CWindow::GetNextDlgGroupItem"},{"content":"Retrieves the previous or next control within a group of controls.","pos":[40361,40427]},{"pos":[40529,40536],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40540,40685],"content":"See <bpt id=\"p1\">[</bpt>GetNextDlgGroupItem<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645492)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetNextDlgGroupItem](http://msdn.microsoft.com/library/windows/desktop/ms645492) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[40695,40764],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getnextdlgtabitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetNextDlgTabItem","linkify":"<a name=\"cwindow__getnextdlgtabitem\"></a>  CWindow::GetNextDlgTabItem","source":"<a name=\"cwindow__getnextdlgtabitem\"></a>  CWindow::GetNextDlgTabItem"},{"pos":[40768,40839],"content":"Retrieves the previous or next control having the <bpt id=\"p1\">**</bpt>WS_TABSTOP<ept id=\"p1\">**</ept> style.","source":"Retrieves the previous or next control having the **WS_TABSTOP** style."},{"pos":[40939,40946],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40950,41093],"content":"See <bpt id=\"p1\">[</bpt>GetNextDlgTabItem<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645495)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetNextDlgTabItem](http://msdn.microsoft.com/library/windows/desktop/ms645495) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[41103,41156],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getparent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetParent","linkify":"<a name=\"cwindow__getparent\"></a>  CWindow::GetParent","source":"<a name=\"cwindow__getparent\"></a>  CWindow::GetParent"},{"content":"Retrieves the immediate parent window.","pos":[41160,41198]},{"pos":[41253,41260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41264,41399],"content":"See <bpt id=\"p1\">[</bpt>GetParent<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633510)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetParent](http://msdn.microsoft.com/library/windows/desktop/ms633510) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[41409,41416],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[41420,41501],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#11<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#11](../../atl/codesnippet/cpp/cwindow-class_11.cpp)]"},{"pos":[41511,41572],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getscrollinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetScrollInfo","linkify":"<a name=\"cwindow__getscrollinfo\"></a>  CWindow::GetScrollInfo","source":"<a name=\"cwindow__getscrollinfo\"></a>  CWindow::GetScrollInfo"},{"content":"Retrieves the parameters of a scroll bar.","pos":[41576,41617]},{"pos":[41706,41713],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41717,41856],"content":"See <bpt id=\"p1\">[</bpt>GetScrollInfo<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787583)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetScrollInfo](http://msdn.microsoft.com/library/windows/desktop/bb787583) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[41866,41925],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getscrollpos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetScrollPos","linkify":"<a name=\"cwindow__getscrollpos\"></a>  CWindow::GetScrollPos","source":"<a name=\"cwindow__getscrollpos\"></a>  CWindow::GetScrollPos"},{"content":"Retrieves the position of the scroll box.","pos":[41929,41970]},{"pos":[42035,42042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[42046,42184],"content":"See <bpt id=\"p1\">[</bpt>GetScrollPos<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787585)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetScrollPos](http://msdn.microsoft.com/library/windows/desktop/bb787585) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[42194,42257],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getscrollrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetScrollRange","linkify":"<a name=\"cwindow__getscrollrange\"></a>  CWindow::GetScrollRange","source":"<a name=\"cwindow__getscrollrange\"></a>  CWindow::GetScrollRange"},{"content":"Retrieves the scroll bar range.","pos":[42261,42292]},{"pos":[42400,42407],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[42411,42551],"content":"See <bpt id=\"p1\">[</bpt>GetScrollRange<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787587)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetScrollRange](http://msdn.microsoft.com/library/windows/desktop/bb787587) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[42561,42612],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getstyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetStyle","linkify":"<a name=\"cwindow__getstyle\"></a>  CWindow::GetStyle","source":"<a name=\"cwindow__getstyle\"></a>  CWindow::GetStyle"},{"content":"Retrieves the window styles of the window.","pos":[42616,42658]},{"pos":[42713,42725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The window's styles.","pos":[42729,42749]},{"pos":[42759,42766],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[42770,42850],"content":"To retrieve the extended window styles, call <bpt id=\"p1\">[</bpt>GetExStyle<ept id=\"p1\">](#cwindow__getexstyle)</ept>.","source":"To retrieve the extended window styles, call [GetExStyle](#cwindow__getexstyle)."},{"pos":[42860,42867],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42871,42952],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#12<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#12](../../atl/codesnippet/cpp/cwindow-class_12.cpp)]"},{"pos":[42962,43023],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getsystemmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetSystemMenu","linkify":"<a name=\"cwindow__getsystemmenu\"></a>  CWindow::GetSystemMenu","source":"<a name=\"cwindow__getsystemmenu\"></a>  CWindow::GetSystemMenu"},{"content":"Creates a copy of the system menu for modification.","pos":[43027,43078]},{"pos":[43150,43157],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43161,43300],"content":"See <bpt id=\"p1\">[</bpt>GetSystemMenu<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647985)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetSystemMenu](http://msdn.microsoft.com/library/windows/desktop/ms647985) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[43310,43379],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__gettoplevelparent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetTopLevelParent","linkify":"<a name=\"cwindow__gettoplevelparent\"></a>  CWindow::GetTopLevelParent","source":"<a name=\"cwindow__gettoplevelparent\"></a>  CWindow::GetTopLevelParent"},{"content":"Retrieves the window's top-level parent window.","pos":[43383,43430]},{"pos":[43493,43505],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle to the top-level parent window.","pos":[43509,43551]},{"pos":[43561,43630],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__gettoplevelwindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetTopLevelWindow","linkify":"<a name=\"cwindow__gettoplevelwindow\"></a>  CWindow::GetTopLevelWindow","source":"<a name=\"cwindow__gettoplevelwindow\"></a>  CWindow::GetTopLevelWindow"},{"content":"Retrieves the window's top-level parent or owner window.","pos":[43634,43690]},{"pos":[43753,43765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle to the top-level owner window.","pos":[43769,43810]},{"pos":[43820,43879],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__gettopwindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetTopWindow","linkify":"<a name=\"cwindow__gettopwindow\"></a>  CWindow::GetTopWindow","source":"<a name=\"cwindow__gettopwindow\"></a>  CWindow::GetTopWindow"},{"content":"Retrieves the top-level child window.","pos":[43883,43920]},{"pos":[43978,43985],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43989,44127],"content":"See <bpt id=\"p1\">[</bpt>GetTopWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633514)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetTopWindow](http://msdn.microsoft.com/library/windows/desktop/ms633514) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[44137,44144],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[44148,44229],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#13<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#13](../../atl/codesnippet/cpp/cwindow-class_13.cpp)]"},{"pos":[44239,44300],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getupdaterect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetUpdateRect","linkify":"<a name=\"cwindow__getupdaterect\"></a>  CWindow::GetUpdateRect","source":"<a name=\"cwindow__getupdaterect\"></a>  CWindow::GetUpdateRect"},{"content":"Retrieves the coordinates of the smallest rectangle that completely encloses the update region.","pos":[44304,44399]},{"pos":[44487,44494],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44498,44637],"content":"See <bpt id=\"p1\">[</bpt>GetUpdateRect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144943)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetUpdateRect](http://msdn.microsoft.com/library/windows/desktop/dd144943) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[44647,44706],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getupdatergn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetUpdateRgn","linkify":"<a name=\"cwindow__getupdatergn\"></a>  CWindow::GetUpdateRgn","source":"<a name=\"cwindow__getupdatergn\"></a>  CWindow::GetUpdateRgn"},{"content":"Retrieves the update region and copies it into a specified region.","pos":[44710,44776]},{"pos":[44858,44865],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44869,45007],"content":"See <bpt id=\"p1\">[</bpt>GetUpdateRgn<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144944)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetUpdateRgn](http://msdn.microsoft.com/library/windows/desktop/dd144944) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[45017,45070],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindow","linkify":"<a name=\"cwindow__getwindow\"></a>  CWindow::GetWindow","source":"<a name=\"cwindow__getwindow\"></a>  CWindow::GetWindow"},{"content":"Retrieves the specified window.","pos":[45074,45105]},{"pos":[45169,45176],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[45180,45255],"content":"See <ph id=\"ph1\">`GetWindow`</ph> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See `GetWindow` in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[45265,45344],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowcontexthelpid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowContextHelpId","linkify":"<a name=\"cwindow__getwindowcontexthelpid\"></a>  CWindow::GetWindowContextHelpId","source":"<a name=\"cwindow__getwindowcontexthelpid\"></a>  CWindow::GetWindowContextHelpId"},{"content":"Retrieves the window's help context identifier.","pos":[45348,45395]},{"pos":[45464,45471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[45475,45623],"content":"See <bpt id=\"p1\">[</bpt>GetWindowContextHelpId<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb776429)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowContextHelpId](http://msdn.microsoft.com/library/windows/desktop/bb776429) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[45633,45690],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowdc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowDC","linkify":"<a name=\"cwindow__getwindowdc\"></a>  CWindow::GetWindowDC","source":"<a name=\"cwindow__getwindowdc\"></a>  CWindow::GetWindowDC"},{"content":"Retrieves a device context for the entire window.","pos":[45694,45743]},{"pos":[45793,45800],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[45804,45941],"content":"See <bpt id=\"p1\">[</bpt>GetWindowDC<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144947)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowDC](http://msdn.microsoft.com/library/windows/desktop/dd144947) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[45951,45958],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[45962,46043],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#14<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_14.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#14](../../atl/codesnippet/cpp/cwindow-class_14.cpp)]"},{"pos":[46053,46114],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowlong\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowLong","linkify":"<a name=\"cwindow__getwindowlong\"></a>  CWindow::GetWindowLong","source":"<a name=\"cwindow__getwindowlong\"></a>  CWindow::GetWindowLong"},{"content":"Retrieves a 32-bit value at a specified offset into the extra window memory.","pos":[46118,46194]},{"pos":[46263,46270],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[46274,46413],"content":"See <bpt id=\"p1\">[</bpt>GetWindowLong<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633584)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowLong](http://msdn.microsoft.com/library/windows/desktop/ms633584) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[46421,46574],"content":"[!NOTE]\n To write code that is compatible with both 32-bit and 64-bit versions of Windows, use [CWindow::GetWindowLongPtr](#cwindow__getwindowlongptr).","leadings":["","> "],"nodes":[{"content":"To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <bpt id=\"p1\">[</bpt>CWindow::GetWindowLongPtr<ept id=\"p1\">](#cwindow__getwindowlongptr)</ept>.","pos":[9,151],"source":" To write code that is compatible with both 32-bit and 64-bit versions of Windows, use [CWindow::GetWindowLongPtr](#cwindow__getwindowlongptr)."}]},{"pos":[46584,46651],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowlongptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowLongPtr","linkify":"<a name=\"cwindow__getwindowlongptr\"></a>  CWindow::GetWindowLongPtr","source":"<a name=\"cwindow__getwindowlongptr\"></a>  CWindow::GetWindowLongPtr"},{"content":"Retrieves information about the specified window, including a value at a specified offset into the extra window memory.","pos":[46655,46774]},{"pos":[46850,46857],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[46861,47003],"content":"See <bpt id=\"p1\">[</bpt>GetWindowLongPtr<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633585)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowLongPtr](http://msdn.microsoft.com/library/windows/desktop/ms633585) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[47013,47020],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47024,47130],"content":"If you are retrieving a pointer or a handle, this function supersedes the <ph id=\"ph1\">`CWindow::GetWindowLong`</ph> method.","source":"If you are retrieving a pointer or a handle, this function supersedes the `CWindow::GetWindowLong` method."},{"pos":[47138,47230],"content":"[!NOTE]\n Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.","leadings":["","> "],"nodes":[{"content":"Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.","pos":[9,90]}]},{"pos":[47237,47351],"content":"To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <ph id=\"ph1\">`CWindow::GetWindowLongPtr`</ph>.","source":"To write code that is compatible with both 32-bit and 64-bit versions of Windows, use `CWindow::GetWindowLongPtr`."},{"pos":[47361,47432],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowplacement\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowPlacement","linkify":"<a name=\"cwindow__getwindowplacement\"></a>  CWindow::GetWindowPlacement","source":"<a name=\"cwindow__getwindowplacement\"></a>  CWindow::GetWindowPlacement"},{"content":"Retrieves the show state and positions.","pos":[47436,47475]},{"pos":[47567,47574],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47578,47722],"content":"See <bpt id=\"p1\">[</bpt>GetWindowPlacement<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633518)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowPlacement](http://msdn.microsoft.com/library/windows/desktop/ms633518) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[47732,47803],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowprocessid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowProcessID","linkify":"<a name=\"cwindow__getwindowprocessid\"></a>  CWindow::GetWindowProcessID","source":"<a name=\"cwindow__getwindowprocessid\"></a>  CWindow::GetWindowProcessID"},{"content":"Retrieves the identifier of the process that created the window.","pos":[47807,47871]},{"pos":[47930,47937],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47941,48091],"content":"See <bpt id=\"p1\">[</bpt>GetWindowThreadProcessID<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633522)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowThreadProcessID](http://msdn.microsoft.com/library/windows/desktop/ms633522) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[48101,48108],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[48112,48193],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#15<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_15.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#15](../../atl/codesnippet/cpp/cwindow-class_15.cpp)]"},{"pos":[48203,48264],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowRect","linkify":"<a name=\"cwindow__getwindowrect\"></a>  CWindow::GetWindowRect","source":"<a name=\"cwindow__getwindowrect\"></a>  CWindow::GetWindowRect"},{"content":"Retrieves the window's bounding dimensions.","pos":[48268,48311]},{"pos":[48383,48390],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[48394,48533],"content":"See <bpt id=\"p1\">[</bpt>GetWindowRect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633519)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowRect](http://msdn.microsoft.com/library/windows/desktop/ms633519) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[48543,48602],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowrgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowRgn","linkify":"<a name=\"cwindow__getwindowrgn\"></a>  CWindow::GetWindowRgn","source":"<a name=\"cwindow__getwindowrgn\"></a>  CWindow::GetWindowRgn"},{"content":"Obtains a copy of the window region of a window.","pos":[48606,48654]},{"pos":[48714,48721],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[48725,48863],"content":"See <bpt id=\"p1\">[</bpt>GetWindowRgn<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144950)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowRgn](http://msdn.microsoft.com/library/windows/desktop/dd144950) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[48873,48934],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowText","linkify":"<a name=\"cwindow__getwindowtext\"></a>  CWindow::GetWindowText","source":"<a name=\"cwindow__getwindowtext\"></a>  CWindow::GetWindowText"},{"content":"Retrieves the window's text.","pos":[48938,48966]},{"pos":[49160,49170],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A buffer to which to write the window text.","pos":[49193,49236]},{"content":"The size of the buffer in characters; also the maximum number of characters to write.","pos":[49258,49343]},{"content":"A <ph id=\"ph1\">`BSTR`</ph> in which to store the window text.","pos":[49364,49407],"source":" A `BSTR` in which to store the window text."},{"content":"A <ph id=\"ph1\">`CString`</ph> in which to store the window text.","pos":[49427,49473],"source":" A `CString` in which to store the window text."},{"pos":[49483,49495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49499,49606],"content":"If the text is successfully copied, the return value is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>; otherwise, the return value is <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"If the text is successfully copied, the return value is **TRUE**; otherwise, the return value is **FALSE**."},{"pos":[49616,49623],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49627,49766],"content":"See <bpt id=\"p1\">[</bpt>GetWindowText<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633520)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowText](http://msdn.microsoft.com/library/windows/desktop/ms633520) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[49773,50017],"content":"The second version of this method allows you to store the text in a <ph id=\"ph1\">`BSTR`</ph>; the third version allows you to store the result in a <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>, since <ph id=\"ph2\">`CSimpleString`</ph> is the base class of <ph id=\"ph3\">`CString`</ph>.","source":"The second version of this method allows you to store the text in a `BSTR`; the third version allows you to store the result in a [CString](../../atl-mfc-shared/reference/cstringt-class.md), since `CSimpleString` is the base class of `CString`."},{"pos":[50027,50100],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowtextlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowTextLength","linkify":"<a name=\"cwindow__getwindowtextlength\"></a>  CWindow::GetWindowTextLength","source":"<a name=\"cwindow__getwindowtextlength\"></a>  CWindow::GetWindowTextLength"},{"content":"Retrieves the length of the window's text.","pos":[50104,50146]},{"pos":[50210,50217],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[50221,50366],"content":"See <bpt id=\"p1\">[</bpt>GetWindowTextLength<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633521)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowTextLength](http://msdn.microsoft.com/library/windows/desktop/ms633521) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[50376,50445],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowthreadid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowThreadID","linkify":"<a name=\"cwindow__getwindowthreadid\"></a>  CWindow::GetWindowThreadID","source":"<a name=\"cwindow__getwindowthreadid\"></a>  CWindow::GetWindowThreadID"},{"content":"Retrieves the identifier of the thread that created the specified window.","pos":[50449,50522]},{"pos":[50580,50587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[50591,50741],"content":"See <bpt id=\"p1\">[</bpt>GetWindowThreadProcessID<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633522)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowThreadProcessID](http://msdn.microsoft.com/library/windows/desktop/ms633522) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[50751,50758],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[50762,50843],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#16<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_16.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#16](../../atl/codesnippet/cpp/cwindow-class_16.cpp)]"},{"pos":[50853,50914],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__getwindowword\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GetWindowWord","linkify":"<a name=\"cwindow__getwindowword\"></a>  CWindow::GetWindowWord","source":"<a name=\"cwindow__getwindowword\"></a>  CWindow::GetWindowWord"},{"content":"Retrieves a 16-bit value at a specified offset into the extra window memory.","pos":[50918,50994]},{"pos":[51063,51070],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51074,51213],"content":"See <bpt id=\"p1\">[</bpt>GetWindowLong<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633584)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [GetWindowLong](http://msdn.microsoft.com/library/windows/desktop/ms633584) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[51223,51280],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__gotodlgctrl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::GotoDlgCtrl","linkify":"<a name=\"cwindow__gotodlgctrl\"></a>  CWindow::GotoDlgCtrl","source":"<a name=\"cwindow__gotodlgctrl\"></a>  CWindow::GotoDlgCtrl"},{"content":"Sets the keyboard focus to a control in the dialog box.","pos":[51284,51339]},{"pos":[51409,51416],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51420,51559],"content":"See <bpt id=\"p1\">[</bpt>WM_NEXTDLGCTL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645432)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [WM_NEXTDLGCTL](http://msdn.microsoft.com/library/windows/desktop/ms645432) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[51569,51622],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__hidecaret\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::HideCaret","linkify":"<a name=\"cwindow__hidecaret\"></a>  CWindow::HideCaret","source":"<a name=\"cwindow__hidecaret\"></a>  CWindow::HideCaret"},{"content":"Hides the system caret.","pos":[51626,51649]},{"pos":[51698,51705],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51709,51844],"content":"See <bpt id=\"p1\">[</bpt>HideCaret<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648403)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [HideCaret](http://msdn.microsoft.com/library/windows/desktop/ms648403) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[51854,51861],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[51865,51946],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#17<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_17.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#17](../../atl/codesnippet/cpp/cwindow-class_17.cpp)]"},{"pos":[51956,52019],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__hilitemenuitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::HiliteMenuItem","linkify":"<a name=\"cwindow__hilitemenuitem\"></a>  CWindow::HiliteMenuItem","source":"<a name=\"cwindow__hilitemenuitem\"></a>  CWindow::HiliteMenuItem"},{"content":"Highlights or removes the highlight from a top-level menu item.","pos":[52023,52086]},{"pos":[52191,52198],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52202,52342],"content":"See <bpt id=\"p1\">[</bpt>HiliteMenuItem<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647986)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [HiliteMenuItem](http://msdn.microsoft.com/library/windows/desktop/ms647986) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[52352,52407],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__invalidate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::Invalidate","linkify":"<a name=\"cwindow__invalidate\"></a>  CWindow::Invalidate","source":"<a name=\"cwindow__invalidate\"></a>  CWindow::Invalidate"},{"content":"Invalidates the entire client area.","pos":[52411,52446]},{"pos":[52514,52521],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52525,52665],"content":"See <bpt id=\"p1\">[</bpt>InvalidateRect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145002)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [InvalidateRect](http://msdn.microsoft.com/library/windows/desktop/dd145002) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[52672,52752],"content":"Passes <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> for the <ph id=\"ph1\">`RECT`</ph> parameter to the <ph id=\"ph2\">`InvalidateRect`</ph> Win32 function.","source":"Passes **NULL** for the `RECT` parameter to the `InvalidateRect` Win32 function."},{"pos":[52762,52769],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[52773,52854],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#18<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_18.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#18](../../atl/codesnippet/cpp/cwindow-class_18.cpp)]"},{"pos":[52864,52927],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__invalidaterect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::InvalidateRect","linkify":"<a name=\"cwindow__invalidaterect\"></a>  CWindow::InvalidateRect","source":"<a name=\"cwindow__invalidaterect\"></a>  CWindow::InvalidateRect"},{"content":"Invalidates the client area within the specified rectangle.","pos":[52931,52990]},{"pos":[53079,53086],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[53090,53230],"content":"See <bpt id=\"p1\">[</bpt>InvalidateRect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145002)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [InvalidateRect](http://msdn.microsoft.com/library/windows/desktop/dd145002) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[53240,53301],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__invalidatergn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::InvalidateRgn","linkify":"<a name=\"cwindow__invalidatergn\"></a>  CWindow::InvalidateRgn","source":"<a name=\"cwindow__invalidatergn\"></a>  CWindow::InvalidateRgn"},{"content":"Invalidates the client area within the specified region.","pos":[53305,53361]},{"pos":[53444,53451],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[53455,53594],"content":"See <bpt id=\"p1\">[</bpt>InvalidateRgn<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145003)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [InvalidateRgn](http://msdn.microsoft.com/library/windows/desktop/dd145003) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[53604,53611],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[53615,53712],"content":"Specifies a <ph id=\"ph1\">`void`</ph> return type, while the <ph id=\"ph2\">`InvalidateRgn`</ph> Win32 function always returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","source":"Specifies a `void` return type, while the `InvalidateRgn` Win32 function always returns **TRUE**."},{"pos":[53722,53771],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__ischild\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::IsChild","linkify":"<a name=\"cwindow__ischild\"></a>  CWindow::IsChild","source":"<a name=\"cwindow__ischild\"></a>  CWindow::IsChild"},{"content":"Determines whether the specified window is a child window.","pos":[53775,53833]},{"pos":[53902,53909],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[53913,54046],"content":"See <bpt id=\"p1\">[</bpt>IsChild<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633524)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IsChild](http://msdn.microsoft.com/library/windows/desktop/ms633524) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[54056,54121],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__isdialogmessage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::IsDialogMessage","linkify":"<a name=\"cwindow__isdialogmessage\"></a>  CWindow::IsDialogMessage","source":"<a name=\"cwindow__isdialogmessage\"></a>  CWindow::IsDialogMessage"},{"content":"Determines whether a message is intended for the specified dialog box.","pos":[54125,54195]},{"pos":[54261,54268],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[54272,54413],"content":"See <bpt id=\"p1\">[</bpt>IsDialogMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645498)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IsDialogMessage](http://msdn.microsoft.com/library/windows/desktop/ms645498) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[54423,54494],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__isdlgbuttonchecked\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::IsDlgButtonChecked","linkify":"<a name=\"cwindow__isdlgbuttonchecked\"></a>  CWindow::IsDlgButtonChecked","source":"<a name=\"cwindow__isdlgbuttonchecked\"></a>  CWindow::IsDlgButtonChecked"},{"content":"Determines the check state of the button.","pos":[54498,54539]},{"pos":[54616,54623],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[54627,54771],"content":"See <bpt id=\"p1\">[</bpt>IsDlgButtonChecked<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761879)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IsDlgButtonChecked](http://msdn.microsoft.com/library/windows/desktop/bb761879) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[54781,54832],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__isiconic\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::IsIconic","linkify":"<a name=\"cwindow__isiconic\"></a>  CWindow::IsIconic","source":"<a name=\"cwindow__isiconic\"></a>  CWindow::IsIconic"},{"content":"Determines whether the window is minimized.","pos":[54836,54879]},{"pos":[54933,54940],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[54944,55078],"content":"See <bpt id=\"p1\">[</bpt>IsIconic<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633527)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IsIconic](http://msdn.microsoft.com/library/windows/desktop/ms633527) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[55088,55095],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[55099,55180],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#19<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_19.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#19](../../atl/codesnippet/cpp/cwindow-class_19.cpp)]"},{"pos":[55190,55253],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__isparentdialog\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::IsParentDialog","linkify":"<a name=\"cwindow__isparentdialog\"></a>  CWindow::IsParentDialog","source":"<a name=\"cwindow__isparentdialog\"></a>  CWindow::IsParentDialog"},{"content":"Determines if the parent window of the control is a dialog window.","pos":[55257,55323]},{"pos":[55377,55389],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE if the parent window is a dialog, FALSE otherwise.","pos":[55393,55456]},{"pos":[55466,55517],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__iswindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::IsWindow","linkify":"<a name=\"cwindow__iswindow\"></a>  CWindow::IsWindow","source":"<a name=\"cwindow__iswindow\"></a>  CWindow::IsWindow"},{"content":"Determines whether the specified window handle identifies an existing window.","pos":[55521,55598]},{"pos":[55646,55653],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[55657,55791],"content":"See <bpt id=\"p1\">[</bpt>IsWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633528)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IsWindow](http://msdn.microsoft.com/library/windows/desktop/ms633528) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[55801,55808],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[55812,55893],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#20<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_20.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#20](../../atl/codesnippet/cpp/cwindow-class_20.cpp)]"},{"pos":[55903,55968],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__iswindowenabled\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::IsWindowEnabled","linkify":"<a name=\"cwindow__iswindowenabled\"></a>  CWindow::IsWindowEnabled","source":"<a name=\"cwindow__iswindowenabled\"></a>  CWindow::IsWindowEnabled"},{"content":"Determines whether the window is enabled for input.","pos":[55972,56023]},{"pos":[56084,56091],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[56095,56236],"content":"See <bpt id=\"p1\">[</bpt>IsWindowEnabled<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646303)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IsWindowEnabled](http://msdn.microsoft.com/library/windows/desktop/ms646303) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[56246,56253],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[56257,56338],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#21<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_21.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#21](../../atl/codesnippet/cpp/cwindow-class_21.cpp)]"},{"pos":[56348,56413],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__iswindowvisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::IsWindowVisible","linkify":"<a name=\"cwindow__iswindowvisible\"></a>  CWindow::IsWindowVisible","source":"<a name=\"cwindow__iswindowvisible\"></a>  CWindow::IsWindowVisible"},{"content":"Determines the window's visibility state.","pos":[56417,56458]},{"pos":[56519,56526],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[56530,56671],"content":"See <bpt id=\"p1\">[</bpt>IsWindowVisible<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633530)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IsWindowVisible](http://msdn.microsoft.com/library/windows/desktop/ms633530) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[56681,56688],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[56692,56773],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#22<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_22.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#22](../../atl/codesnippet/cpp/cwindow-class_22.cpp)]"},{"pos":[56783,56848],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__iswindowunicode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::IsWindowUnicode","linkify":"<a name=\"cwindow__iswindowunicode\"></a>  CWindow::IsWindowUnicode","source":"<a name=\"cwindow__iswindowunicode\"></a>  CWindow::IsWindowUnicode"},{"content":"Determines whether the specified window is a native Unicode window.","pos":[56852,56919]},{"pos":[56974,56981],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[56985,57126],"content":"See <bpt id=\"p1\">[</bpt>IsWindowUnicode<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633529)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IsWindowUnicode](http://msdn.microsoft.com/library/windows/desktop/ms633529) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[57136,57143],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[57147,57228],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#23<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_23.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#23](../../atl/codesnippet/cpp/cwindow-class_23.cpp)]"},{"pos":[57238,57289],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__iszoomed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::IsZoomed","linkify":"<a name=\"cwindow__iszoomed\"></a>  CWindow::IsZoomed","source":"<a name=\"cwindow__iszoomed\"></a>  CWindow::IsZoomed"},{"content":"Determines whether the window is maximized.","pos":[57293,57336]},{"pos":[57390,57397],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[57401,57535],"content":"See <bpt id=\"p1\">[</bpt>IsZoomed<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633531)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IsZoomed](http://msdn.microsoft.com/library/windows/desktop/ms633531) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[57545,57598],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__killtimer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::KillTimer","linkify":"<a name=\"cwindow__killtimer\"></a>  CWindow::KillTimer","source":"<a name=\"cwindow__killtimer\"></a>  CWindow::KillTimer"},{"pos":[57602,57656],"content":"Destroys a timer event created by <ph id=\"ph1\">`CWindow::SetTimer`</ph>.","source":"Destroys a timer event created by `CWindow::SetTimer`."},{"pos":[57718,57725],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[57729,57864],"content":"See <bpt id=\"p1\">[</bpt>KillTimer<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms644903)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [KillTimer](http://msdn.microsoft.com/library/windows/desktop/ms644903) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[57874,57941],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__lockwindowupdate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::LockWindowUpdate","linkify":"<a name=\"cwindow__lockwindowupdate\"></a>  CWindow::LockWindowUpdate","source":"<a name=\"cwindow__lockwindowupdate\"></a>  CWindow::LockWindowUpdate"},{"pos":[57945,58096],"content":"Disables or enables drawing in the window by calling the <bpt id=\"p1\">[</bpt>LockWindowUpdate<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145034)</ept> Win32 function.","source":"Disables or enables drawing in the window by calling the [LockWindowUpdate](http://msdn.microsoft.com/library/windows/desktop/dd145034) Win32 function."},{"pos":[58169,58179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> (the default value), the window will be locked.","pos":[58194,58258],"source":" [in] If **TRUE** (the default value), the window will be locked."},{"content":"Otherwise, it will be unlocked.","pos":[58259,58290]},{"pos":[58300,58312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58316,58384],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the window is successfully locked; otherwise, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the window is successfully locked; otherwise, **FALSE**."},{"pos":[58394,58401],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[58405,58528],"content":"If <ph id=\"ph1\">`bLock`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, this method passes <bpt id=\"p2\">[</bpt>m_hWnd<ept id=\"p2\">](#cwindow__m_hwnd)</ept> to the Win32 function; otherwise, it passes <bpt id=\"p3\">**</bpt>NULL<ept id=\"p3\">**</ept>.","source":"If `bLock` is **TRUE**, this method passes [m_hWnd](#cwindow__m_hwnd) to the Win32 function; otherwise, it passes **NULL**."},{"pos":[58538,58585],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__m_hwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::m_hWnd","linkify":"<a name=\"cwindow__m_hwnd\"></a>  CWindow::m_hWnd","source":"<a name=\"cwindow__m_hwnd\"></a>  CWindow::m_hWnd"},{"pos":[58589,58658],"content":"Contains a handle to the window associated with the <ph id=\"ph1\">`CWindow`</ph> object.","source":"Contains a handle to the window associated with the `CWindow` object."},{"pos":[58710,58775],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__mapwindowpoints\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::MapWindowPoints","linkify":"<a name=\"cwindow__mapwindowpoints\"></a>  CWindow::MapWindowPoints","source":"<a name=\"cwindow__mapwindowpoints\"></a>  CWindow::MapWindowPoints"},{"content":"Converts a set of points from the window's coordinate space to the coordinate space of another window.","pos":[58779,58881]},{"pos":[59058,59065],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[59069,59210],"content":"See <bpt id=\"p1\">[</bpt>MapWindowPoints<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145046)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [MapWindowPoints](http://msdn.microsoft.com/library/windows/desktop/dd145046) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[59217,59371],"content":"The second version of this method allows you to convert the coordinates of a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.","source":"The second version of this method allows you to convert the coordinates of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure."},{"pos":[59381,59436],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__messagebox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::MessageBox","linkify":"<a name=\"cwindow__messagebox\"></a>  CWindow::MessageBox","source":"<a name=\"cwindow__messagebox\"></a>  CWindow::MessageBox"},{"content":"Displays a message box.","pos":[59440,59463]},{"pos":[59584,59591],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[59595,59731],"content":"See <bpt id=\"p1\">[</bpt>MessageBox<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645505)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [MessageBox](http://msdn.microsoft.com/library/windows/desktop/ms645505) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[59741,59748],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[59752,59833],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#24<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_24.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#24](../../atl/codesnippet/cpp/cwindow-class_24.cpp)]"},{"pos":[59843,59900],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__modifystyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::ModifyStyle","linkify":"<a name=\"cwindow__modifystyle\"></a>  CWindow::ModifyStyle","source":"<a name=\"cwindow__modifystyle\"></a>  CWindow::ModifyStyle"},{"pos":[59904,59955],"content":"Modifies the window styles of the <ph id=\"ph1\">`CWindow`</ph> object.","source":"Modifies the window styles of the `CWindow` object."},{"pos":[60058,60068],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Specifies the window styles to be removed during style modification.","pos":[60086,60159]},{"content":"[in] Specifies the window styles to be added during style modification.","pos":[60177,60248]},{"content":"[in] Window-positioning flags.","pos":[60267,60297]},{"content":"For a list of possible values, see the <bpt id=\"p1\">[</bpt>SetWindowPos<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633545)</ept> function in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[60298,60480],"source":" For a list of possible values, see the [SetWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms633545) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[60490,60502],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60506,60571],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the window styles are modified; otherwise, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the window styles are modified; otherwise, **FALSE**."},{"pos":[60581,60588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Styles to be added or removed can be combined by using the bitwise OR ( &amp;#124; ) operator.","pos":[60592,60682],"source":"Styles to be added or removed can be combined by using the bitwise OR ( &#124; ) operator."},{"content":"See the <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> function in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>for information about the available window styles.","pos":[60683,60883],"source":" See the [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]for information about the available window styles."},{"pos":[60890,61044],"content":"If <ph id=\"ph1\">`nFlags`</ph> is nonzero, <ph id=\"ph2\">`ModifyStyle`</ph> calls the Win32 function <ph id=\"ph3\">`SetWindowPos`</ph>, and redraws the window by combining <ph id=\"ph4\">`nFlags`</ph> with the following four flags:","source":"If `nFlags` is nonzero, `ModifyStyle` calls the Win32 function `SetWindowPos`, and redraws the window by combining `nFlags` with the following four flags:"},{"pos":[61052,61090],"content":"<ph id=\"ph1\">`SWP_NOSIZE`</ph> Retains the current size.","source":"`SWP_NOSIZE` Retains the current size."},{"pos":[61098,61140],"content":"<ph id=\"ph1\">`SWP_NOMOVE`</ph> Retains the current position.","source":"`SWP_NOMOVE` Retains the current position."},{"pos":[61148,61191],"content":"<ph id=\"ph1\">`SWP_NOZORDER`</ph> Retains the current Z order.","source":"`SWP_NOZORDER` Retains the current Z order."},{"pos":[61199,61245],"content":"<ph id=\"ph1\">`SWP_NOACTIVATE`</ph> Does not activate the window.","source":"`SWP_NOACTIVATE` Does not activate the window."},{"pos":[61252,61336],"content":"To modify a window's extended styles, call <bpt id=\"p1\">[</bpt>ModifyStyleEx<ept id=\"p1\">](#cwindow__modifystyleex)</ept>.","source":"To modify a window's extended styles, call [ModifyStyleEx](#cwindow__modifystyleex)."},{"pos":[61346,61353],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[61357,61438],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#25<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_25.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#25](../../atl/codesnippet/cpp/cwindow-class_25.cpp)]"},{"pos":[61448,61509],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__modifystyleex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::ModifyStyleEx","linkify":"<a name=\"cwindow__modifystyleex\"></a>  CWindow::ModifyStyleEx","source":"<a name=\"cwindow__modifystyleex\"></a>  CWindow::ModifyStyleEx"},{"pos":[61513,61573],"content":"Modifies the extended window styles of the <ph id=\"ph1\">`CWindow`</ph> object.","source":"Modifies the extended window styles of the `CWindow` object."},{"pos":[61678,61688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Specifies the extended styles to be removed during style modification.","pos":[61706,61781]},{"content":"[in] Specifies the extended styles to be added during style modification.","pos":[61799,61872]},{"content":"[in] Window-positioning flags.","pos":[61891,61921]},{"content":"For a list of possible values, see the <bpt id=\"p1\">[</bpt>SetWindowPos<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633545)</ept> function in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[61922,62104],"source":" For a list of possible values, see the [SetWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms633545) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[62114,62126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62130,62204],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the extended window styles are modified; otherwise, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the extended window styles are modified; otherwise, **FALSE**."},{"pos":[62214,62221],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Styles to be added or removed can be combined by using the bitwise OR ( &amp;#124; ) operator.","pos":[62225,62315],"source":"Styles to be added or removed can be combined by using the bitwise OR ( &#124; ) operator."},{"content":"See the <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> function in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>for information about the available extended styles.","pos":[62316,62520],"source":" See the [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]for information about the available extended styles."},{"pos":[62527,62683],"content":"If <ph id=\"ph1\">`nFlags`</ph> is nonzero, <ph id=\"ph2\">`ModifyStyleEx`</ph> calls the Win32 function <ph id=\"ph3\">`SetWindowPos`</ph>, and redraws the window by combining <ph id=\"ph4\">`nFlags`</ph> with the following four flags:","source":"If `nFlags` is nonzero, `ModifyStyleEx` calls the Win32 function `SetWindowPos`, and redraws the window by combining `nFlags` with the following four flags:"},{"pos":[62691,62729],"content":"<ph id=\"ph1\">`SWP_NOSIZE`</ph> Retains the current size.","source":"`SWP_NOSIZE` Retains the current size."},{"pos":[62737,62779],"content":"<ph id=\"ph1\">`SWP_NOMOVE`</ph> Retains the current position.","source":"`SWP_NOMOVE` Retains the current position."},{"pos":[62787,62830],"content":"<ph id=\"ph1\">`SWP_NOZORDER`</ph> Retains the current Z order.","source":"`SWP_NOZORDER` Retains the current Z order."},{"pos":[62838,62884],"content":"<ph id=\"ph1\">`SWP_NOACTIVATE`</ph> Does not activate the window.","source":"`SWP_NOACTIVATE` Does not activate the window."},{"pos":[62891,62980],"content":"To modify windows using regular window styles, call <bpt id=\"p1\">[</bpt>ModifyStyle<ept id=\"p1\">](#cwindow__modifystyle)</ept>.","source":"To modify windows using regular window styles, call [ModifyStyle](#cwindow__modifystyle)."},{"pos":[62990,62997],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[63001,63082],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#26<ept id=\"p2\">](../../atl/codesnippet/cpp/cwindow-class_26.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#26](../../atl/codesnippet/cpp/cwindow-class_26.cpp)]"},{"pos":[63092,63147],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__movewindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::MoveWindow","linkify":"<a name=\"cwindow__movewindow\"></a>  CWindow::MoveWindow","source":"<a name=\"cwindow__movewindow\"></a>  CWindow::MoveWindow"},{"content":"Changes the window's size and position.","pos":[63151,63190]},{"pos":[63383,63390],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For a top-level window object, the x and y parameters are relative to the upper-left corner of the screen.","pos":[63394,63500]},{"content":"For a child window object, they are relative to the upper-left corner of the parent window's client area.","pos":[63501,63606]},{"pos":[63613,63789],"content":"The second version of this method uses a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure to determine the window's new position, width, and height.","source":"The second version of this method uses a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure to determine the window's new position, width, and height."},{"pos":[63799,63856],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__nextdlgctrl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::NextDlgCtrl","linkify":"<a name=\"cwindow__nextdlgctrl\"></a>  CWindow::NextDlgCtrl","source":"<a name=\"cwindow__nextdlgctrl\"></a>  CWindow::NextDlgCtrl"},{"content":"Sets the keyboard focus to the next control in the dialog box.","pos":[63860,63922]},{"pos":[63979,63986],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[63990,64129],"content":"See <bpt id=\"p1\">[</bpt>WM_NEXTDLGCTL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645432)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [WM_NEXTDLGCTL](http://msdn.microsoft.com/library/windows/desktop/ms645432) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[64139,64200],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__openclipboard\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::OpenClipboard","linkify":"<a name=\"cwindow__openclipboard\"></a>  CWindow::OpenClipboard","source":"<a name=\"cwindow__openclipboard\"></a>  CWindow::OpenClipboard"},{"content":"Opens the Clipboard.","pos":[64204,64224]},{"pos":[64277,64284],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[64288,64427],"content":"See <bpt id=\"p1\">[</bpt>OpenClipboard<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms649048)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [OpenClipboard](http://msdn.microsoft.com/library/windows/desktop/ms649048) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[64437,64498],"content":"<bpt id=\"p1\">&lt;a name=\"cwindow__operator_hwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWindow::operator HWND","linkify":"<a name=\"cwindow__operator_hwnd\"></a>  CWindow::operator HWND","source":"<a name=\"cwindow__operator_hwnd\"></a>  CWindow::operator HWND"},{"pos":[64502,64543],"content":"Converts a <ph id=\"ph1\">`CWindow`</ph> object to an <ph id=\"ph2\">`HWND`</ph>.","source":"Converts a `CWindow` object to an `HWND`."},{"content":"```operator HWND() const throw();","pos":[64549,64582]},{"content":"CWindow&amp; operator= (HWND hWnd) throw();","pos":[64767,64806],"source":"CWindow& operator= (HWND hWnd) throw();"},{"pos":[64980,65065],"content":"BOOL PostMessage(UINT message, WPARAM wParam = 0, LPARAM lParam = 0) throw();","source":"BOOL PostMessage(UINT message,\n    WPARAM wParam = 0,\n    LPARAM lParam = 0) throw();"},{"content":"void PrevDlgCtrl() const throw();","pos":[65545,65578]},{"content":"void Print(HDC hDC,  DWORD dwFlags) const throw();","pos":[65975,66025]},{"content":"void PrintClient(HDC hDC,  DWORD dwFlags) const throw();","pos":[66818,66874]},{"content":"static RECT rcDefault;","pos":[67515,67537]},{"pos":[67683,67819],"content":"BOOL RedrawWindow(LPCRECT lpRectUpdate = NULL, HRGN hRgnUpdate = NULL, UINT flags = RDW_INVALIDATE | RDW_UPDATENOW | RDW_ERASE);","source":"BOOL RedrawWindow(LPCRECT lpRectUpdate = NULL,\n    HRGN hRgnUpdate = NULL,\n    UINT flags = RDW_INVALIDATE | RDW_UPDATENOW | RDW_ERASE);"},{"content":"throw()","pos":[67821,67828]},{"content":"int ReleaseDC(HDC hDC);","pos":[68196,68219]},{"pos":[68615,68696],"content":"BOOL ResizeClient(int nWidth, int nHeight, BOOL bRedraw = FALSE) throw();","source":"BOOL ResizeClient(int nWidth,\n    int nHeight,\n    BOOL bRedraw = FALSE) throw();"},{"content":"BOOL ScreenToClient(LPPOINT lpPoint) const throw();","pos":[69095,69146]},{"content":"BOOL ScreenToClient(LPRECT lpRect) const throw();","pos":[69148,69197]},{"pos":[69640,69754],"content":"BOOL ScrollWindow(int xAmount, int yAmount, LPCRECT lpRect = NULL, LPCRECT lpClipRect = NULL) throw();","source":"BOOL ScrollWindow(int xAmount,\n    int yAmount,\n    LPCRECT lpRect = NULL,\n    LPCRECT lpClipRect = NULL) throw();"},{"pos":[70063,70222],"content":"int ScrollWindowEx(int dx, int dy, LPCRECT lpRectScroll, LPCRECT lpRectClip, HRGN hRgnUpdate, LPRECT lpRectUpdate, UINT flags) throw();","source":"int ScrollWindowEx(int dx,\n    int dy,\n    LPCRECT lpRectScroll,\n    LPCRECT lpRectClip,\n    HRGN hRgnUpdate,\n    LPRECT lpRectUpdate,\n    UINT flags) throw();"},{"pos":[70511,70619],"content":"LRESULT SendDlgItemMessage(int nID, UINT message, WPARAM wParam = 0, LPARAM lParam = 0) throw();","source":"LRESULT SendDlgItemMessage(int nID,\n    UINT message,\n    WPARAM wParam = 0,\n    LPARAM lParam = 0) throw();"},{"pos":[70972,71163],"content":"LRESULT SendMessage(UINT message, WPARAM wParam = 0, LPARAM lParam = 0) throw(); static LRESULT SendMessage(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) throw();","source":"LRESULT SendMessage(UINT message,\n    WPARAM wParam = 0,\n    LPARAM lParam = 0) throw();\nstatic LRESULT SendMessage(HWND hWnd,\n    UINT message,\n    WPARAM wParam,\n    LPARAM lParam) throw();"},{"pos":[71612,71733],"content":"void SendMessageToDescendants(UINT message, WPARAM wParam = 0, LPARAM lParam = 0, BOOL bDeep = TRUE) throw();","source":"void SendMessageToDescendants(UINT message,\n    WPARAM wParam = 0,\n    LPARAM lParam = 0,\n    BOOL bDeep = TRUE) throw();"},{"pos":[72334,72425],"content":"BOOL SendNotifyMessage(UINT message, WPARAM wParam = 0, LPARAM lParam = 0) throw();","source":"BOOL SendNotifyMessage(UINT message,\n    WPARAM wParam = 0,\n    LPARAM lParam = 0) throw();"},{"content":"HWND SetActiveWindow() throw();","pos":[72883,72914]},{"content":"HWND SetCapture() throw();","pos":[73308,73334]},{"content":"HWND SetClipboardViewer() throw();","pos":[73636,73670]},{"content":"int SetDlgCtrlID(int nID) throw();","pos":[73979,74013]},{"pos":[74355,74433],"content":"BOOL SetDlgItemInt(int nID, UINT nValue, BOOL bSigned = TRUE) throw();","source":"BOOL SetDlgItemInt(int nID,\n    UINT nValue,\n    BOOL bSigned = TRUE) throw();"},{"content":"BOOL SetDlgItemText(int nID,  LPCTSTR lpszString) throw();","pos":[74709,74767]},{"content":"HWND SetFocus() throw();","pos":[75042,75066]},{"content":"void SetFont(HFONT hFont,  BOOL bRedraw = TRUE) throw();","pos":[75542,75598]},{"content":"int SetHotKey(WORD wVirtualKeyCode,  WORD wModifiers) throw();","pos":[75923,75985]},{"content":"HICON SetIcon(HICON hIcon,  BOOL bBigIcon = TRUE) throw();","pos":[76651,76709]},{"content":"BOOL SetMenu(HMENU hMenu) throw();","pos":[77198,77232]},{"content":"HWND SetParent(HWND hWndNewParent) throw();","pos":[77493,77536]},{"content":"void SetRedraw(BOOL bRedraw = TRUE) throw();","pos":[78016,78060]},{"pos":[78570,78662],"content":"int SetScrollInfo(int nBar, LPSCROLLINFO lpScrollInfo, BOOL bRedraw = TRUE) throw();","source":"int SetScrollInfo(int nBar,\n    LPSCROLLINFO lpScrollInfo,\n    BOOL bRedraw = TRUE) throw();"},{"pos":[78948,79022],"content":"int SetScrollPos(int nBar, int nPos, BOOL bRedraw = TRUE) throw();","source":"int SetScrollPos(int nBar,\n    int nPos,\n    BOOL bRedraw = TRUE) throw();"},{"pos":[79301,79398],"content":"BOOL SetScrollRange(int nBar, int nMinPos, int nMaxPos, BOOL bRedraw = TRUE) throw();","source":"BOOL SetScrollRange(int nBar,\n    int nMinPos,\n    int nMaxPos,\n    BOOL bRedraw = TRUE) throw();"},{"pos":[79660,79788],"content":"UINT SetTimer(UINT nIDEvent, UINT nElapse, void (CALLBACK* lpfnTimer)(HWND, UINT, UINT, DWORD) = NULL) throw();","source":"UINT SetTimer(UINT nIDEvent,\n    UINT nElapse,\n    void (CALLBACK* lpfnTimer)(HWND,\n    UINT,\n UINT,\n    DWORD) = NULL) throw();"},{"content":"BOOL SetWindowContextHelpId(DWORD dwContextHelpId) throw();","pos":[80092,80151]},{"content":"LONG SetWindowLong(int nIndex,  LONG dwNewLong) throw();","pos":[80480,80536]},{"content":"LONG_PTR SetWindowLongPtr(int nIndex,  LONG_PTR dwNewLong) throw();","pos":[81071,81138]},{"content":"BOOL SetWindowPlacement(const WINDOWPLACEMENT FAR* lpwndpl);","pos":[81617,81677]},{"pos":[81966,82163],"content":"BOOL SetWindowPos(HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT nFlags) throw(); BOOL SetWindowPos(HWND hWndInsertAfter, LPCRECT lpRect, UINT nFlags) throw();","source":"BOOL SetWindowPos(HWND hWndInsertAfter,\n    int x,\n    int y,\n    int cx,\n    int cy,\n    UINT nFlags) throw();\nBOOL SetWindowPos(HWND hWndInsertAfter,\n    LPCRECT lpRect,\n    UINT nFlags) throw();"},{"content":"int SetWindowRgn(HRGN hRgn,  BOOL bRedraw = FALSE) throw();","pos":[82621,82680]},{"content":"BOOL SetWindowText(LPCTSTR lpszString) throw();","pos":[82954,83001]},{"content":"WORD SetWindowWord(int nIndex,  WORD wNewWord) throw();","pos":[83423,83478]},{"content":"BOOL ShowCaret() throw();","pos":[83745,83770]},{"content":"BOOL ShowOwnedPopups(BOOL bShow = TRUE) throw();","pos":[84175,84223]},{"content":"BOOL ShowScrollBar(UINT nBar,  BOOL bShow = TRUE) throw();","pos":[84502,84560]},{"content":"BOOL ShowWindow(int nCmdShow) throw();","pos":[84832,84870]},{"content":"BOOL ShowWindowAsync(int nCmdShow) throw();","pos":[85284,85327]},{"content":"BOOL UpdateWindow() throw();","pos":[85600,85628]},{"content":"BOOL ValidateRect(LPCRECT lpRect) throw();","pos":[86033,86075]},{"content":"BOOL ValidateRgn(HRGN hRgn) throw();","pos":[86373,86409]},{"pos":[86664,86755],"content":"BOOL WinHelp(LPCTSTR lpszHelp, UINT nCmd = HELP_CONTEXT, DWORD dwData = 0) throw();","source":"BOOL WinHelp(LPCTSTR lpszHelp,\n    UINT nCmd = HELP_CONTEXT,\n    DWORD dwData = 0) throw();"}],"content":"---\ntitle: \"CWindow Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CWindow\"\n  - \"ATL::CWindow\"\n  - \"CWindow\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CWindow class\"\nms.assetid: fefa00c8-f053-4bcf-87bc-dc84f5386683\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CWindow Class\nThis class provides methods for manipulating a window.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass CWindow\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWindow::CWindow](#cwindow__cwindow)|Constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWindow::ArrangeIconicWindows](#cwindow__arrangeiconicwindows)|Arranges all minimized child windows.|  \n|[CWindow::Attach](#cwindow__attach)|Attaches a window to the `CWindow` object.|  \n|[CWindow::BeginPaint](#cwindow__beginpaint)|Prepares the window for painting.|  \n|[CWindow::BringWindowToTop](#cwindow__bringwindowtotop)|Brings the window to the top of the Z order.|  \n|[CWindow::CenterWindow](#cwindow__centerwindow)|Centers the window against a given window.|  \n|[CWindow::ChangeClipboardChain](#cwindow__changeclipboardchain)|Removes the window from the chain of Clipboard viewers.|  \n|[CWindow::CheckDlgButton](#cwindow__checkdlgbutton)|Changes the check state of the specified button.|  \n|[CWindow::CheckRadioButton](#cwindow__checkradiobutton)|Checks the specified radio button.|  \n|[CWindow::ChildWindowFromPoint](#cwindow__childwindowfrompoint)|Retrieves the child window containing the specified point.|  \n|[CWindow::ChildWindowFromPointEx](#cwindow__childwindowfrompointex)|Retrieves a particular type of child window containing the specified point.|  \n|[CWindow::ClientToScreen](#cwindow__clienttoscreen)|Converts client coordinates to screen coordinates.|  \n|[CWindow::Create](#cwindow__create)|Creates a window.|  \n|[CWindow::CreateCaret](#cwindow__createcaret)|Creates a new shape for the system caret.|  \n|[CWindow::CreateGrayCaret](#cwindow__creategraycaret)|Creates a gray rectangle for the system caret.|  \n|[CWindow::CreateSolidCaret](#cwindow__createsolidcaret)|Creates a solid rectangle for the system caret.|  \n|[CWindow::DeferWindowPos](#cwindow__deferwindowpos)|Updates the specified multiple-window-position structure for the specified window.|  \n|[CWindow::DestroyWindow](#cwindow__destroywindow)|Destroys the window associated with the `CWindow` object.|  \n|[CWindow::Detach](#cwindow__detach)|Detaches the window from the `CWindow` object.|  \n|[CWindow::DlgDirList](#cwindow__dlgdirlist)|Fills a list box with the names of all files matching a specified path or file name.|  \n|[CWindow::DlgDirListComboBox](#cwindow__dlgdirlistcombobox)|Fills a combo box with the names of all files matching a specified path or file name.|  \n|[CWindow::DlgDirSelect](#cwindow__dlgdirselect)|Retrieves the current selection from a list box.|  \n|[CWindow::DlgDirSelectComboBox](#cwindow__dlgdirselectcombobox)|Retrieves the current selection from a combo box.|  \n|[CWindow::DragAcceptFiles](#cwindow__dragacceptfiles)|Registers whether the window accepts dragged files.|  \n|[CWindow::DrawMenuBar](#cwindow__drawmenubar)|Redraws the window's menu bar.|  \n|[CWindow::EnableScrollBar](#cwindow__enablescrollbar)|Enables or disables the scroll bar arrows.|  \n|[CWindow::EnableWindow](#cwindow__enablewindow)|Enables or disables input.|  \n|[CWindow::EndPaint](#cwindow__endpaint)|Marks the end of painting.|  \n|[CWindow::FlashWindow](#cwindow__flashwindow)|Flashes the window once.|  \n|[CWindow::GetClientRect](#cwindow__getclientrect)|Retrieves the coordinates of the client area.|  \n|[CWindow::GetDC](#cwindow__getdc)|Retrieves a device context for the client area.|  \n|[CWindow::GetDCEx](#cwindow__getdcex)|Retrieves a device context for the client area and allows clipping options.|  \n|[CWindow::GetDescendantWindow](#cwindow__getdescendantwindow)|Retrieves the specified descendant window.|  \n|[CWindow::GetDlgControl](#cwindow__getdlgcontrol)|Retrieves an interface on the specified control.|  \n|[CWindow::GetDlgCtrlID](#cwindow__getdlgctrlid)|Retrieves the window's identifier (for child windows only).|  \n|[CWindow::GetDlgHost](#cwindow__getdlghost)|Retrieves a pointer to an interface to the ATL Control hosting container.|  \n|[CWindow::GetDlgItem](#cwindow__getdlgitem)|Retrieves the specified child window.|  \n|[CWindow::GetDlgItemInt](#cwindow__getdlgitemint)|Translates a control's text to an integer.|  \n|[CWindow::GetDlgItemText](#cwindow__getdlgitemtext)|Retrieves a control's text.|  \n|[CWindow::GetExStyle](#cwindow__getexstyle)|Retrieves the extended window styles.|  \n|[CWindow::GetFont](#cwindow__getfont)|Retrieves the window's current font.|  \n|[CWindow::GetHotKey](#cwindow__gethotkey)|Determines the hot key associated with the window.|  \n|[CWindow::GetIcon](#cwindow__geticon)|Retrieves the window's large or small icon.|  \n|[CWindow::GetLastActivePopup](#cwindow__getlastactivepopup)|Retrieves the most recently active pop-up window.|  \n|[CWindow::GetMenu](#cwindow__getmenu)|Retrieves the window's menu.|  \n|[CWindow::GetNextDlgGroupItem](#cwindow__getnextdlggroupitem)|Retrieves the previous or next control within a group of controls.|  \n|[CWindow::GetNextDlgTabItem](#cwindow__getnextdlgtabitem)|Retrieves the previous or next control having the **WS_TABSTOP** style.|  \n|[CWindow::GetParent](#cwindow__getparent)|Retrieves the immediate parent window.|  \n|[CWindow::GetScrollInfo](#cwindow__getscrollinfo)|Retrieves the parameters of a scroll bar.|  \n|[CWindow::GetScrollPos](#cwindow__getscrollpos)|Retrieves the position of the scroll box.|  \n|[CWindow::GetScrollRange](#cwindow__getscrollrange)|Retrieves the scroll bar range.|  \n|[CWindow::GetStyle](#cwindow__getstyle)|Retrieves the window styles.|  \n|[CWindow::GetSystemMenu](#cwindow__getsystemmenu)|Creates a copy of the system menu for modification.|  \n|[CWindow::GetTopLevelParent](#cwindow__gettoplevelparent)|Retrieves the top-level parent or owner window.|  \n|[CWindow::GetTopLevelWindow](#cwindow__gettoplevelwindow)|Retrieves the top-level owner window.|  \n|[CWindow::GetTopWindow](#cwindow__gettopwindow)|Retrieves the top-level child window.|  \n|[CWindow::GetUpdateRect](#cwindow__getupdaterect)|Retrieves the coordinates of the smallest rectangle that completely encloses the update region.|  \n|[CWindow::GetUpdateRgn](#cwindow__getupdatergn)|Retrieves the update region and copies it into a specified region.|  \n|[CWindow::GetWindow](#cwindow__getwindow)|Retrieves the specified window.|  \n|[CWindow::GetWindowContextHelpId](#cwindow__getwindowcontexthelpid)|Retrieves the window's help context identifier.|  \n|[CWindow::GetWindowDC](#cwindow__getwindowdc)|Retrieves a device context for the entire window.|  \n|[CWindow::GetWindowLong](#cwindow__getwindowlong)|Retrieves a 32-bit value at a specified offset into the extra window memory.|  \n|[CWindow::GetWindowLongPtr](#cwindow__getwindowlongptr)|Retrieves information about the specified window, including a value at a specified offset into the extra window memory.|  \n|[CWindow::GetWindowPlacement](#cwindow__getwindowplacement)|Retrieves the show state and positions.|  \n|[CWindow::GetWindowProcessID](#cwindow__getwindowprocessid)|Retrieves the identifier of the process that created the window.|  \n|[CWindow::GetWindowRect](#cwindow__getwindowrect)|Retrieves the window's bounding dimensions.|  \n|[CWindow::GetWindowRgn](#cwindow__getwindowrgn)|Obtains a copy of the window region of a window.|  \n|[CWindow::GetWindowText](#cwindow__getwindowtext)|Retrieves the window's text.|  \n|[CWindow::GetWindowTextLength](#cwindow__getwindowtextlength)|Retrieves the length of the window's text.|  \n|[CWindow::GetWindowThreadID](#cwindow__getwindowthreadid)|Retrieves the identifier of the thread that created the specified window.|  \n|[CWindow::GetWindowWord](#cwindow__getwindowword)|Retrieves a 16-bit value at a specified offset into the extra window memory.|  \n|[CWindow::GotoDlgCtrl](#cwindow__gotodlgctrl)|Sets the keyboard focus to a control in the dialog box.|  \n|[CWindow::HideCaret](#cwindow__hidecaret)|Hides the system caret.|  \n|[CWindow::HiliteMenuItem](#cwindow__hilitemenuitem)|Highlights or removes the highlight from a top-level menu item.|  \n|[CWindow::Invalidate](#cwindow__invalidate)|Invalidates the entire client area.|  \n|[CWindow::InvalidateRect](#cwindow__invalidaterect)|Invalidates the client area within the specified rectangle.|  \n|[CWindow::InvalidateRgn](#cwindow__invalidatergn)|Invalidates the client area within the specified region.|  \n|[CWindow::IsChild](#cwindow__ischild)|Determines whether the specified window is a child window.|  \n|[CWindow::IsDialogMessage](#cwindow__isdialogmessage)|Determines whether a message is intended for the specified dialog box.|  \n|[CWindow::IsDlgButtonChecked](#cwindow__isdlgbuttonchecked)|Determines the check state of the button.|  \n|[CWindow::IsIconic](#cwindow__isiconic)|Determines whether the window is minimized.|  \n|[CWindow::IsParentDialog](#cwindow__isparentdialog)|Determines if the parent window of a control is a dialog window.|  \n|[CWindow::IsWindow](#cwindow__iswindow)|Determines whether the specified window handle identifies an existing window.|  \n|[CWindow::IsWindowEnabled](#cwindow__iswindowenabled)|Determines whether the window is enabled for input.|  \n|[CWindow::IsWindowUnicode](#cwindow__iswindowunicode)|Determines whether the specified window is a native Unicode window.|  \n|[CWindow::IsWindowVisible](#cwindow__iswindowvisible)|Determines the window's visibility state.|  \n|[CWindow::IsZoomed](#cwindow__iszoomed)|Determines whether the window is maximized.|  \n|[CWindow::KillTimer](#cwindow__killtimer)|Destroys a timer event.|  \n|[CWindow::LockWindowUpdate](#cwindow__lockwindowupdate)|Disables or enables drawing in the window.|  \n|[CWindow::MapWindowPoints](#cwindow__mapwindowpoints)|Converts a set of points from the window's coordinate space to the coordinate space of another window.|  \n|[CWindow::MessageBox](#cwindow__messagebox)|Displays a message box.|  \n|[CWindow::ModifyStyle](#cwindow__modifystyle)|Modifies the window styles.|  \n|[CWindow::ModifyStyleEx](#cwindow__modifystyleex)|Modifies the extended window styles.|  \n|[CWindow::MoveWindow](#cwindow__movewindow)|Changes the window's size and position.|  \n|[CWindow::NextDlgCtrl](#cwindow__nextdlgctrl)|Sets the keyboard focus to the next control in the dialog box.|  \n|[CWindow::OpenClipboard](#cwindow__openclipboard)|Opens the Clipboard.|  \n|[CWindow::PostMessage](#cwindow__postmessage)|Places a message in the message queue associated with the thread that created the window. Returns without waiting for the thread to process the message.|  \n|[CWindow::PrevDlgCtrl](#cwindow__prevdlgctrl)|Sets the keyboard focus to the previous control in the dialog box.|  \n|[CWindow::Print](#cwindow__print)|Requests that the window be drawn in a specified device context.|  \n|[CWindow::PrintClient](#cwindow__printclient)|Requests that the window's client area be drawn in a specified device context.|  \n|[CWindow::RedrawWindow](#cwindow__redrawwindow)|Updates a specified rectangle or region in the client area.|  \n|[CWindow::ReleaseDC](#cwindow__releasedc)|Releases a device context.|  \n|[CWindow::ResizeClient](#cwindow__resizeclient)|Resizes the window.|  \n|[CWindow::ScreenToClient](#cwindow__screentoclient)|Converts screen coordinates to client coordinates.|  \n|[CWindow::ScrollWindow](#cwindow__scrollwindow)|Scrolls the specified client area.|  \n|[CWindow::ScrollWindowEx](#cwindow__scrollwindowex)|Scrolls the specified client area with additional features.|  \n|[CWindow::SendDlgItemMessage](#cwindow__senddlgitemmessage)|Sends a message to a control.|  \n|[CWindow::SendMessage](#cwindow__sendmessage)|Sends a message to the window and does not return until the window procedure has processed the message.|  \n|[CWindow::SendMessageToDescendants](#cwindow__sendmessagetodescendants)|Sends a message to the specified descendant windows.|  \n|[CWindow::SendNotifyMessage](#cwindow__sendnotifymessage)|Sends a message to the window. If the window was created by the calling thread, `SendNotifyMessage` does not return until the window procedure has processed the message. Otherwise, it returns immediately.|  \n|[CWindow::SetActiveWindow](#cwindow__setactivewindow)|Activates the window.|  \n|[CWindow::SetCapture](#cwindow__setcapture)|Sends all subsequent mouse input to the window.|  \n|[CWindow::SetClipboardViewer](#cwindow__setclipboardviewer)|Adds the window to the Clipboard viewer chain.|  \n|[CWindow::SetDlgCtrlID](#cwindow__setdlgctrlid)|Changes the window's identifier.|  \n|[CWindow::SetDlgItemInt](#cwindow__setdlgitemint)|Changes a control's text to the string representation of an integer value.|  \n|[CWindow::SetDlgItemText](#cwindow__setdlgitemtext)|Changes a control's text.|  \n|[CWindow::SetFocus](#cwindow__setfocus)|Sets the input focus to the window.|  \n|[CWindow::SetFont](#cwindow__setfont)|Changes the window's current font.|  \n|[CWindow::SetHotKey](#cwindow__sethotkey)|Associates a hot key with the window.|  \n|[CWindow::SetIcon](#cwindow__seticon)|Changes the window's large or small icon.|  \n|[CWindow::SetMenu](#cwindow__setmenu)|Changes the window's current menu.|  \n|[CWindow::SetParent](#cwindow__setparent)|Changes the parent window.|  \n|[CWindow::SetRedraw](#cwindow__setredraw)|Sets or clears the redraw flag.|  \n|[CWindow::SetScrollInfo](#cwindow__setscrollinfo)|Sets the parameters of a scroll bar.|  \n|[CWindow::SetScrollPos](#cwindow__setscrollpos)|Changes the position of the scroll box.|  \n|[CWindow::SetScrollRange](#cwindow__setscrollrange)|Changes the scroll bar range.|  \n|[CWindow::SetTimer](#cwindow__settimer)|Creates a timer event.|  \n|[CWindow::SetWindowContextHelpId](#cwindow__setwindowcontexthelpid)|Sets the window's help context identifier.|  \n|[CWindow::SetWindowLong](#cwindow__setwindowlong)|Sets a 32-bit value at a specified offset into the extra window memory.|  \n|[CWindow::SetWindowLongPtr](#cwindow__setwindowlongptr)|Changes an attribute of the specified window, and also sets a value at the specified offset in the extra window memory.|  \n|[CWindow::SetWindowPlacement](#cwindow__setwindowplacement)|Sets the show state and positions.|  \n|[CWindow::SetWindowPos](#cwindow__setwindowpos)|Sets the size, position, and Z order.|  \n|[CWindow::SetWindowRgn](#cwindow__setwindowrgn)|Sets the window region of a window.|  \n|[CWindow::SetWindowText](#cwindow__setwindowtext)|Changes the window's text.|  \n|[CWindow::SetWindowWord](#cwindow__setwindowword)|Sets a 16-bit value at a specified offset into the extra window memory.|  \n|[CWindow::ShowCaret](#cwindow__showcaret)|Displays the system caret.|  \n|[CWindow::ShowOwnedPopups](#cwindow__showownedpopups)|Shows or hides the pop-up windows owned by the window.|  \n|[CWindow::ShowScrollBar](#cwindow__showscrollbar)|Shows or hides a scroll bar.|  \n|[CWindow::ShowWindow](#cwindow__showwindow)|Sets the window's show state.|  \n|[CWindow::ShowWindowAsync](#cwindow__showwindowasync)|Sets the show state of a window created by a different thread.|  \n|[CWindow::UpdateWindow](#cwindow__updatewindow)|Updates the client area.|  \n|[CWindow::ValidateRect](#cwindow__validaterect)|Validates the client area within the specified rectangle.|  \n|[CWindow::ValidateRgn](#cwindow__validatergn)|Validates the client area within the specified region.|  \n|[CWindow::WinHelp](#cwindow__winhelp)|Starts Windows Help.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWindow::operator HWND](#cwindow__operator_hwnd)|Converts the `CWindow` object to an `HWND`.|  \n|[CWindow::operator =](#cwindow__operator_eq)|Assigns an `HWND` to the `CWindow` object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWindow::m_hWnd](#cwindow__m_hwnd)|The handle to the window associated with the `CWindow` object.|  \n|[CWindow::rcDefault](#cwindow__rcdefault)|Contains default window dimensions.|  \n  \n## Remarks  \n `CWindow` provides the base functionality for manipulating a window in ATL. Many of the `CWindow` methods simply wrap one of the Win32 API functions. For example, compare the prototypes for `CWindow::ShowWindow` and `ShowWindow`:  \n  \n|CWindow method|Win32 function|  \n|--------------------|--------------------|  \n|**BOOL ShowWindow( int** `nCmdShow` **);**|**BOOL ShowWindow( HWND** `hWnd` **, int** `nCmdShow` **);**|  \n  \n `CWindow::ShowWindow` calls the Win32 function `ShowWindow` by passing `CWindow::m_hWnd` as the first parameter. Every `CWindow` method that directly wraps a Win32 function passes the `m_hWnd` member; therefore, much of the `CWindow` documentation will refer you to the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n> [!NOTE]\n>  Not every window-related Win32 function is wrapped by `CWindow`, and not every `CWindow` method wraps a Win32 function.  \n  \n `CWindow::m_hWnd` stores the `HWND` that identifies a window. An `HWND` is attached to your object when you:  \n  \n-   Specify an `HWND` in `CWindow`'s constructor.  \n  \n-   Call `CWindow::Attach`.  \n  \n-   Use `CWindow`'s **operator =**.  \n  \n-   Create or subclass a window using one of the following classes derived from `CWindow`:  \n  \n [CWindowImpl](../../atl/reference/cwindowimpl-class.md) Allows you to create a new window or subclass an existing window.  \n  \n [CContainedWindow](../../atl/reference/ccontainedwindowt-class.md) Implements a window contained within another object. You can create a new window or subclass an existing window.  \n  \n [CDialogImpl](../../atl/reference/cdialogimpl-class.md) Allows you to create a modal or modeless dialog box.  \n  \n For more information about windows, see [Windows](http://msdn.microsoft.com/library/windows/desktop/ms632595) and subsequent topics in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. For more information about using windows in ATL, see the article [ATL Window Classes](../../atl/atl-window-classes.md).  \n  \n## Requirements  \n **Header:** atlwin.h  \n  \n##  <a name=\"cwindow__arrangeiconicwindows\"></a>  CWindow::ArrangeIconicWindows  \n Arranges all minimized child windows.  \n  \n```\nUINT ArrangeIconicWindows() throw();\n```  \n  \n### Remarks  \n See [ArrangeIconicWindows](http://msdn.microsoft.com/library/windows/desktop/ms632671) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__attach\"></a>  CWindow::Attach  \n Attaches the window identified by `hWndNew` to the `CWindow` object.  \n  \n```\nvoid Attach(HWND hWndNew) throw();\n```  \n  \n### Parameters  \n `hWndNew`  \n [in] The handle to a window.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#1](../../atl/codesnippet/cpp/cwindow-class_1.cpp)]  \n  \n##  <a name=\"cwindow__beginpaint\"></a>  CWindow::BeginPaint  \n Prepares the window for painting.  \n  \n```\nHDC BeginPaint(LPPAINTSTRUCT lpPaint) throw();\n```  \n  \n### Remarks  \n See [BeginPaint](http://msdn.microsoft.com/library/windows/desktop/dd183362) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#2](../../atl/codesnippet/cpp/cwindow-class_2.cpp)]  \n  \n##  <a name=\"cwindow__bringwindowtotop\"></a>  CWindow::BringWindowToTop  \n Brings the window to the top of the Z order.  \n  \n```\nBOOL BringWindowToTop() throw();\n```  \n  \n### Remarks  \n See [BringWindowToTop](http://msdn.microsoft.com/library/windows/desktop/ms632673) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#3](../../atl/codesnippet/cpp/cwindow-class_3.cpp)]  \n  \n##  <a name=\"cwindow__centerwindow\"></a>  CWindow::CenterWindow  \n Centers the window against a given window.  \n  \n```\nBOOL CenterWindow(HWND hWndCenter = NULL) throw();\n```  \n  \n### Parameters  \n `hWndCenter`  \n [in] The handle to the window against which to center. If this parameter is **NULL** (the default value), the method will set `hWndCenter` to the window's parent window if it is a child window. Otherwise, it will set `hWndCenter` to the window's owner window.  \n  \n### Return Value  \n **TRUE** if the window is successfully centered; otherwise, **FALSE**.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#4](../../atl/codesnippet/cpp/cwindow-class_4.cpp)]  \n  \n##  <a name=\"cwindow__changeclipboardchain\"></a>  CWindow::ChangeClipboardChain  \n Removes the window from the chain of Clipboard viewers.  \n  \n```\nBOOL ChangeClipboardChain(HWND hWndNewNext) throw();\n```  \n  \n### Remarks  \n See [ChangeClipboardChain](http://msdn.microsoft.com/library/windows/desktop/ms649034) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__checkdlgbutton\"></a>  CWindow::CheckDlgButton  \n Changes the check state of the specified button.  \n  \n```\nBOOL CheckDlgButton(int nIDButton,  UINT nCheck) throw();\n```  \n  \n### Remarks  \n See [CheckDlgButton](http://msdn.microsoft.com/library/windows/desktop/bb761875) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__checkradiobutton\"></a>  CWindow::CheckRadioButton  \n Checks the specified radio button.  \n  \n```\nBOOL CheckRadioButton(int nIDFirstButton,\n    int nIDLastButton,\n    int nIDCheckButton) throw();\n```  \n  \n### Remarks  \n See [CheckRadioButton](http://msdn.microsoft.com/library/windows/desktop/bb761877) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__childwindowfrompoint\"></a>  CWindow::ChildWindowFromPoint  \n Retrieves the child window containing the specified point.  \n  \n```\nHWND ChildWindowFromPoint(POINT point) const throw();\n```  \n  \n### Remarks  \n See [ChildWindowFromPoint](http://msdn.microsoft.com/library/windows/desktop/ms632676) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__childwindowfrompointex\"></a>  CWindow::ChildWindowFromPointEx  \n Retrieves a particular type of child window containing the specified point.  \n  \n```\nHWND ChildWindowFromPoint(POINT point,  UINT uFlags) const throw();\n```  \n  \n### Remarks  \n See [ChildWindowFromPointEx](http://msdn.microsoft.com/library/windows/desktop/ms632677) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__clienttoscreen\"></a>  CWindow::ClientToScreen  \n Converts client coordinates to screen coordinates.  \n  \n```\nBOOL ClientToScreen(LPPOINT lpPoint) const throw();\n\nBOOL ClientToScreen(LPRECT lpRect) const throw();\n```  \n  \n### Remarks  \n See [ClientToScreen](http://msdn.microsoft.com/library/windows/desktop/dd183434) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n The second version of this method allows you to convert the coordinates of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure.  \n  \n##  <a name=\"cwindow__create\"></a>  CWindow::Create  \n Creates a window.  \n  \n```\nHWND Create(LPCTSTR lpstrWndClass,\n    HWND hWndParent,\n    _U_RECT rect = NULL,\n    LPCTSTR szWindowName = NULL,\n    DWORD dwStyle = 0,\n    DWORD dwExStyle = 0,\n    _U_MENUorID MenuOrID = 0U,\n    LPVOID lpCreateParam = NULL) throw();\n```  \n  \n### Parameters  \n `lpstrWndClass`  \n [in] A pointer to the window's class.  \n  \n `hWndParent`  \n [in] The handle to the parent or owner window.  \n  \n `rect`  \n [in] A variable of type [_U_RECT](../../atl/reference/u-rect-class.md) specifying the position of the window. The default value is **NULL**. When this parameter is **NULL**, the value of `CWindow::rcDefault` is used.  \n  \n `szWindowName`  \n [in] Specifies the name of the window. The default value is **NULL**.  \n  \n `dwStyle`  \n [in] The style of the window. The default value is 0, meaning no style is specified. For a list of possible values, see [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `dwExStyle`  \n [in] The extended window style. The default value is 0, meaning no extended style is specified. For a list of possible values, see [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `MenuOrID`  \n [in] A variable of type [_U_MENUorID](../../atl/reference/u-menuorid-class.md) specifying a handle to a menu or a window identifier. The default value is 0U.  \n  \n `lpCreateParam`  \n A pointer to the window-creation data contained in a [CREATESTRUCT](http://msdn.microsoft.com/library/windows/desktop/ms632603) structure.  \n  \n### Return Value  \n If successful, the handle to the newly created window, specified by [m_hWnd](#cwindow__m_hwnd). Otherwise, **NULL**.  \n  \n### Remarks  \n `CWindow::rcDefault` is defined as `__declspec(selectany) RECT CWindow::rcDefault = {CW_USEDEFAULT, CW_USEDEFAULT, 0, 0};`.  \n  \n See [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information.  \n  \n **Note** If 0 is used as the value for the `MenuOrID` parameter, it must be specified as 0U (the default value) to avoid a compiler error.  \n  \n##  <a name=\"cwindow__createcaret\"></a>  CWindow::CreateCaret  \n Creates a new shape for the system caret.  \n  \n```\nBOOL CreateCaret(HBITMAP pBitmap) throw();\n```  \n  \n### Remarks  \n See [CreateCaret](http://msdn.microsoft.com/library/windows/desktop/ms648399) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__creategraycaret\"></a>  CWindow::CreateGrayCaret  \n Creates a gray rectangle for the system caret.  \n  \n```\nBOOL CreateGrayCaret(int nWidth,  int nHeight) throw();\n```  \n  \n### Remarks  \n See [CreateCaret](http://msdn.microsoft.com/library/windows/desktop/ms648399) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n Passes (HBITMAP) 1 for the bitmap handle parameter to the Win32 function.  \n  \n##  <a name=\"cwindow__createsolidcaret\"></a>  CWindow::CreateSolidCaret  \n Creates a solid rectangle for the system caret.  \n  \n```\nBOOL CreateSolidCaret(int nWidth,  int nHeight) throw();\n```  \n  \n### Remarks  \n See [CreateCaret](http://msdn.microsoft.com/library/windows/desktop/ms648399) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n Passes (HBITMAP) 0 for the bitmap handle parameter to the Win32 function.  \n  \n##  <a name=\"cwindow__cwindow\"></a>  CWindow::CWindow  \n The constructor.  \n  \n```\nCWindow(HWND hWnd = NULL) throw();\n```  \n  \n### Parameters  \n `hWnd`  \n [in] The handle to a window.  \n  \n### Remarks  \n Initializes the [m_hWnd](#cwindow__m_hwnd) member to `hWnd`, which by default is **NULL**.  \n  \n> [!NOTE]\n> `CWindow::CWindow` does not create a window. Classes [CWindowImpl](../../atl/reference/cwindowimpl-class.md), [CContainedWindow](../../atl/reference/ccontainedwindowt-class.md), and [CDialogImpl](../../atl/reference/cdialogimpl-class.md) (all of which derive from `CWindow`) provide a method to create a window or dialog box, which is then assigned to `CWindow::m_hWnd`. You can also use the [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) Win32 function.  \n  \n##  <a name=\"cwindow__deferwindowpos\"></a>  CWindow::DeferWindowPos  \n Updates the specified multiple-window-position structure for the specified window.  \n  \n```\nHDWP DeferWindowPos(HDWP hWinPosInfo,\n    HWND hWndInsertAfter,\n    int x,\n    int y,\n    int cx,\n    int cy,\n    UINT uFlags) throw();\n```  \n  \n### Remarks  \n See [DeferWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms632681) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__destroywindow\"></a>  CWindow::DestroyWindow  \n Destroys the window associated with the `CWindow` object and sets [m_hWnd](#cwindow__m_hwnd) to **NULL**.  \n  \n```\nBOOL DestroyWindow() throw();\n```  \n  \n### Remarks  \n See [DestroyWindow](http://msdn.microsoft.com/library/windows/desktop/ms632682) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n It does not destroy the `CWindow` object itself.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#5](../../atl/codesnippet/cpp/cwindow-class_5.cpp)]  \n  \n##  <a name=\"cwindow__detach\"></a>  CWindow::Detach  \n Detaches [m_hWnd](#cwindow__m_hwnd) from the `CWindow` object and sets `m_hWnd` to **NULL**.  \n  \n```\nHWND Detach() throw();\n```  \n  \n### Return Value  \n The `HWND` associated with the `CWindow` object.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#6](../../atl/codesnippet/cpp/cwindow-class_6.cpp)]  \n  \n##  <a name=\"cwindow__dlgdirlist\"></a>  CWindow::DlgDirList  \n Fills a list box with the names of all files matching a specified path or file name.  \n  \n```\nint DlgDirList(LPTSTR lpPathSpec,\n    int nIDListBox,\n    int nIDStaticPath,\n    UINT nFileType) throw();\n```  \n  \n### Remarks  \n See [DlgDirList](http://msdn.microsoft.com/library/windows/desktop/bb761366) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__dlgdirlistcombobox\"></a>  CWindow::DlgDirListComboBox  \n Fills a combo box with the names of all files matching a specified path or file name.  \n  \n```\nint DlgDirListComboBox(LPTSTR lpPathSpec,\n    int nIDComboBox,\n    int nIDStaticPath,\n    UINT nFileType) throw();\n```  \n  \n### Remarks  \n See [DlgDirListComboBox](http://msdn.microsoft.com/library/windows/desktop/bb775935) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__dlgdirselect\"></a>  CWindow::DlgDirSelect  \n Retrieves the current selection from a list box.  \n  \n```\nBOOL DlgDirSelect(LPTSTR lpString,\n    int nCount,\n    int nIDListBox) throw();\n```  \n  \n### Remarks  \n See [DlgDirSelectEx](http://msdn.microsoft.com/library/windows/desktop/bb761368) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__dlgdirselectcombobox\"></a>  CWindow::DlgDirSelectComboBox  \n Retrieves the current selection from a combo box.  \n  \n```\nBOOL DlgDirSelectComboBox(LPTSTR lpString,\n    int nCount,\n    int nIDComboBox) throw();\n```  \n  \n### Remarks  \n See [DlgDirSelectComboBoxEx](http://msdn.microsoft.com/library/windows/desktop/bb775937) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__dragacceptfiles\"></a>  CWindow::DragAcceptFiles  \n Registers whether the window accepts dragged files.  \n  \n```\nvoid DragAcceptFiles(BOOL bAccept = TRUE);\n```  \n  \n### Remarks  \n See [DragAcceptFiles](http://msdn.microsoft.com/library/windows/desktop/bb776406) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__drawmenubar\"></a>  CWindow::DrawMenuBar  \n Redraws the window's menu bar.  \n  \n```\nBOOL DrawMenuBar() throw();\n```  \n  \n### Remarks  \n See [DrawMenuBar](http://msdn.microsoft.com/library/windows/desktop/ms647633) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__enablescrollbar\"></a>  CWindow::EnableScrollBar  \n Enables or disables the scroll bar arrows.  \n  \n```\nBOOL EnableScrollBar(UINT uSBFlags,  UINT uArrowFlags = ESB_ENABLE_BOTH) throw();\n```  \n  \n### Remarks  \n See [EnableScrollBar](http://msdn.microsoft.com/library/windows/desktop/bb787579) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__enablewindow\"></a>  CWindow::EnableWindow  \n Enables or disables input.  \n  \n```\nBOOL EnableWindow(BOOL bEnable = TRUE) throw();\n```  \n  \n### Remarks  \n See [EnableWindow](http://msdn.microsoft.com/library/windows/desktop/ms646291) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#7](../../atl/codesnippet/cpp/cwindow-class_7.cpp)]  \n  \n##  <a name=\"cwindow__endpaint\"></a>  CWindow::EndPaint  \n Marks the end of painting.  \n  \n```\nvoid EndPaint(LPPAINTSTRUCT lpPaint) throw();\n```  \n  \n### Remarks  \n See [EndPaint](http://msdn.microsoft.com/library/windows/desktop/dd162598) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#2](../../atl/codesnippet/cpp/cwindow-class_2.cpp)]  \n  \n##  <a name=\"cwindow__flashwindow\"></a>  CWindow::FlashWindow  \n Flashes the window once.  \n  \n```\nBOOL FlashWindow(BOOL bInvert) throw();\n```  \n  \n### Remarks  \n See [FlashWindow](http://msdn.microsoft.com/library/windows/desktop/ms679346) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getclientrect\"></a>  CWindow::GetClientRect  \n Retrieves the coordinates of the client area.  \n  \n```\nBOOL GetClientRect(LPRECT lpRect) const throw();\n```  \n  \n### Remarks  \n See [GetClientRect](http://msdn.microsoft.com/library/windows/desktop/ms633503) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#8](../../atl/codesnippet/cpp/cwindow-class_8.cpp)]  \n  \n##  <a name=\"cwindow__getdc\"></a>  CWindow::GetDC  \n Retrieves a device context for the client area.  \n  \n```\nHDC GetDC() throw();\n```  \n  \n### Remarks  \n See [GetDC](http://msdn.microsoft.com/library/windows/desktop/dd144871) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#9](../../atl/codesnippet/cpp/cwindow-class_9.cpp)]  \n  \n##  <a name=\"cwindow__getdcex\"></a>  CWindow::GetDCEx  \n Retrieves a device context for the client area and allows clipping options.  \n  \n```\nHDC GetDCEx(HRGN hRgnClip,  DWORD flags) throw();\n```  \n  \n### Remarks  \n See [GetDCEx](http://msdn.microsoft.com/library/windows/desktop/dd144873) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getdescendantwindow\"></a>  CWindow::GetDescendantWindow  \n Finds the descendant window specified by the given identifier.  \n  \n```\nHWND GetDescendantWindow(int nID) const throw();\n```  \n  \n### Parameters  \n `nID`  \n [in] The identifier of the descendant window to be retrieved.  \n  \n### Return Value  \n The handle to a descendant window.  \n  \n### Remarks  \n `GetDescendantWindow` searches the entire tree of child windows, not only the windows that are immediate children.  \n  \n##  <a name=\"cwindow__getdlgcontrol\"></a>  CWindow::GetDlgControl  \n Call this function to get a pointer to an interface of an ActiveX control that is hosted by a composite control or a control-hosting dialog.  \n  \n```\nHRESULT GetDlgControl(int nID,\n    REFIID iid,\n    void** ppCtrl) throw();\n```  \n  \n### Parameters  \n `nID`  \n [in] The resource ID of the control being retrieved.  \n  \n `iid`  \n [in] The ID of the interface you would like to get from the control.  \n  \n *ppCtrl*  \n [out] The pointer to the interface.  \n  \n### Return Value  \n Returns `S_OK` on success or any valid error `HRESULT`. For example, the function returns **E_FAIL** if the control specified by `nID` cannot be found and it returns **E_NOINTERFACE** if the control can be found, but it doesn't support the interface specified by `iid`.  \n  \n### Remarks  \n Using this pointer, you can call methods on the interface.  \n  \n##  <a name=\"cwindow__getdlgctrlid\"></a>  CWindow::GetDlgCtrlID  \n Retrieves the window's identifier (for child windows only).  \n  \n```\nint GetDlgCtrlID() const throw();\n```  \n  \n### Remarks  \n See [GetDlgCtrlID](http://msdn.microsoft.com/library/windows/desktop/ms645478) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getdlghost\"></a>  CWindow::GetDlgHost  \n Retrieves a pointer to an interface to the ATL Control hosting container.  \n  \n```\nHRESULT GetDlgHost(int nID,\n    REFIID iid,\n    void** ppHost) throw();\n```  \n  \n### Parameters  \n `nID`  \n [in] The resource ID of the control being retrieved.  \n  \n `iid`  \n [in] The ID of the interface you would like to get from the control.  \n  \n *ppHost*  \n [out] The pointer to the interface.  \n  \n### Return Value  \n Returns `S_OK` if the window specified by `iid` is a Control Container, and the requested interface could be retrieved. Returns **E_FAIL** if the window is not a Control Container, or if the interface requested could not be retrieved. If a window with the specified ID could not be found, then the return value is equal to HRESULT_FROM_WIN32(ERROR_CONTROL_ID_NOT_FOUND).  \n  \n### Remarks  \n Using this pointer, you can call methods on the interface.  \n  \n##  <a name=\"cwindow__getdlgitem\"></a>  CWindow::GetDlgItem  \n Retrieves the specified child window.  \n  \n```\nHWND GetDlgItem(int nID) const throw();\n```  \n  \n### Remarks  \n See [GetDlgItem](http://msdn.microsoft.com/library/windows/desktop/ms645481) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getdlgitemint\"></a>  CWindow::GetDlgItemInt  \n Translates a control's text to an integer.  \n  \n```\nUINT GetDlgItemInt(int nID,\n    BOOL* lpTrans = NULL,\n    BOOL bSigned = TRUE) const throw();\n```  \n  \n### Remarks  \n See [GetDlgItemInt](http://msdn.microsoft.com/library/windows/desktop/ms645485) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getdlgitemtext\"></a>  CWindow::GetDlgItemText  \n Retrieves a control's text.  \n  \n```\nUINT GetDlgItemText(int nID,\n    LPTSTR lpStr,\n    int nMaxCount) const throw();\nBOOL GetDlgItemText(int nID,\n    BSTR& bstrText) const throw();\n```  \n  \n### Remarks  \n See [GetDlgItemText](http://msdn.microsoft.com/library/windows/desktop/ms645489) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n The second version of this method allows you to copy the control's text to a `BSTR`. This version returns **TRUE** if the text is successfully copied; otherwise, **FALSE**.  \n  \n##  <a name=\"cwindow__getexstyle\"></a>  CWindow::GetExStyle  \n Retrieves the extended window styles of the window.  \n  \n```\nDWORD GetExStyle() const throw();\n```  \n  \n### Return Value  \n The window's extended styles.  \n  \n### Remarks  \n To retrieve the regular window styles, call [GetStyle](#cwindow__getstyle).  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#10](../../atl/codesnippet/cpp/cwindow-class_10.cpp)]  \n  \n##  <a name=\"cwindow__getfont\"></a>  CWindow::GetFont  \n Retrieves the window's current font by sending a [WM_GETFONT](http://msdn.microsoft.com/library/windows/desktop/ms632624) message to the window.  \n  \n```\nHFONT GetFont() const throw();\n```  \n  \n### Return Value  \n A font handle.  \n  \n##  <a name=\"cwindow__gethotkey\"></a>  CWindow::GetHotKey  \n Determines the hot key associated with the window by sending a **WM_GETHOTKEY** message.  \n  \n```\nDWORD GetHotKey() const throw();\n```  \n  \n### Return Value  \n The virtual key code and modifiers for the hot key associated with the window. For a list of possible modifiers, see [WM_GETHOTKEY](http://msdn.microsoft.com/library/windows/desktop/ms646278) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. For a list of of standard virtual key codes, see Winuser.h.  \n  \n##  <a name=\"cwindow__geticon\"></a>  CWindow::GetIcon  \n Retrieves the handle to the window's large or small icon.  \n  \n```\nHICON GetIcon(BOOL bBigIcon = TRUE) const;\n```  \n  \n### Parameters  \n `bBigIcon`  \n [in] If **TRUE** (the default value) the method returns the large icon. Otherwise, it returns the small icon.  \n  \n### Return Value  \n An icon handle.  \n  \n### Remarks  \n `GetIcon` sends a [WM_GETICON](http://msdn.microsoft.com/library/windows/desktop/ms632625) message to the window.  \n  \n##  <a name=\"cwindow__getlastactivepopup\"></a>  CWindow::GetLastActivePopup  \n Retrieves the most recently active pop-up window.  \n  \n```\nHWND GetLastActivePopup() const throw();\n```  \n  \n### Remarks  \n See [GetLastActivePopup](http://msdn.microsoft.com/library/windows/desktop/ms633507) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getmenu\"></a>  CWindow::GetMenu  \n Retrieves the window's menu.  \n  \n```\nHMENU GetMenu() const throw();\n```  \n  \n### Remarks  \n See [GetMenu](http://msdn.microsoft.com/library/windows/desktop/ms647640) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getnextdlggroupitem\"></a>  CWindow::GetNextDlgGroupItem  \n Retrieves the previous or next control within a group of controls.  \n  \n```\nHWND GetNextDlgGroupItem(HWND hWndCtl,  BOOL bPrevious = FALSE) const throw();\n```  \n  \n### Remarks  \n See [GetNextDlgGroupItem](http://msdn.microsoft.com/library/windows/desktop/ms645492) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getnextdlgtabitem\"></a>  CWindow::GetNextDlgTabItem  \n Retrieves the previous or next control having the **WS_TABSTOP** style.  \n  \n```\nHWND GetNextDlgTabItem(HWND hWndCtl,  BOOL bPrevious = FALSE) const throw();\n```  \n  \n### Remarks  \n See [GetNextDlgTabItem](http://msdn.microsoft.com/library/windows/desktop/ms645495) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getparent\"></a>  CWindow::GetParent  \n Retrieves the immediate parent window.  \n  \n```\nHWND GetParent() const throw();\n```  \n  \n### Remarks  \n See [GetParent](http://msdn.microsoft.com/library/windows/desktop/ms633510) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#11](../../atl/codesnippet/cpp/cwindow-class_11.cpp)]  \n  \n##  <a name=\"cwindow__getscrollinfo\"></a>  CWindow::GetScrollInfo  \n Retrieves the parameters of a scroll bar.  \n  \n```\nBOOL GetScrollInfo(int nBar,  LPSCROLLINFO lpScrollInfo) throw();\n```  \n  \n### Remarks  \n See [GetScrollInfo](http://msdn.microsoft.com/library/windows/desktop/bb787583) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getscrollpos\"></a>  CWindow::GetScrollPos  \n Retrieves the position of the scroll box.  \n  \n```\nint GetScrollPos(int nBar) const throw();\n```  \n  \n### Remarks  \n See [GetScrollPos](http://msdn.microsoft.com/library/windows/desktop/bb787585) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getscrollrange\"></a>  CWindow::GetScrollRange  \n Retrieves the scroll bar range.  \n  \n```\nBOOL GetScrollRange(int nBar,\n    LPINT lpMinPos,\n    LPINT lpMaxPos) const throw();\n```  \n  \n### Remarks  \n See [GetScrollRange](http://msdn.microsoft.com/library/windows/desktop/bb787587) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getstyle\"></a>  CWindow::GetStyle  \n Retrieves the window styles of the window.  \n  \n```\nDWORD GetStyle() const throw();\n```  \n  \n### Return Value  \n The window's styles.  \n  \n### Remarks  \n To retrieve the extended window styles, call [GetExStyle](#cwindow__getexstyle).  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#12](../../atl/codesnippet/cpp/cwindow-class_12.cpp)]  \n  \n##  <a name=\"cwindow__getsystemmenu\"></a>  CWindow::GetSystemMenu  \n Creates a copy of the system menu for modification.  \n  \n```\nHMENU GetSystemMenu(BOOL bRevert) const throw();\n```  \n  \n### Remarks  \n See [GetSystemMenu](http://msdn.microsoft.com/library/windows/desktop/ms647985) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__gettoplevelparent\"></a>  CWindow::GetTopLevelParent  \n Retrieves the window's top-level parent window.  \n  \n```\nHWND GetTopLevelParent() const throw();\n```  \n  \n### Return Value  \n The handle to the top-level parent window.  \n  \n##  <a name=\"cwindow__gettoplevelwindow\"></a>  CWindow::GetTopLevelWindow  \n Retrieves the window's top-level parent or owner window.  \n  \n```\nHWND GetTopLevelWindow() const throw();\n```  \n  \n### Return Value  \n The handle to the top-level owner window.  \n  \n##  <a name=\"cwindow__gettopwindow\"></a>  CWindow::GetTopWindow  \n Retrieves the top-level child window.  \n  \n```\nHWND GetTopWindow() const throw();\n```  \n  \n### Remarks  \n See [GetTopWindow](http://msdn.microsoft.com/library/windows/desktop/ms633514) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#13](../../atl/codesnippet/cpp/cwindow-class_13.cpp)]  \n  \n##  <a name=\"cwindow__getupdaterect\"></a>  CWindow::GetUpdateRect  \n Retrieves the coordinates of the smallest rectangle that completely encloses the update region.  \n  \n```\nBOOL GetUpdateRect(LPRECT lpRect,  BOOL bErase = FALSE) throw();\n```  \n  \n### Remarks  \n See [GetUpdateRect](http://msdn.microsoft.com/library/windows/desktop/dd144943) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getupdatergn\"></a>  CWindow::GetUpdateRgn  \n Retrieves the update region and copies it into a specified region.  \n  \n```\nint GetUpdateRgn(HRGN hRgn,  BOOL bErase = FALSE) throw();\n```  \n  \n### Remarks  \n See [GetUpdateRgn](http://msdn.microsoft.com/library/windows/desktop/dd144944) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getwindow\"></a>  CWindow::GetWindow  \n Retrieves the specified window.  \n  \n```\nHWND GetWindow(UINT nCmd) const throw();\n```  \n  \n### Remarks  \n See `GetWindow` in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getwindowcontexthelpid\"></a>  CWindow::GetWindowContextHelpId  \n Retrieves the window's help context identifier.  \n  \n```\nDWORD GetWindowContextHelpId() const throw();\n```  \n  \n### Remarks  \n See [GetWindowContextHelpId](http://msdn.microsoft.com/library/windows/desktop/bb776429) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getwindowdc\"></a>  CWindow::GetWindowDC  \n Retrieves a device context for the entire window.  \n  \n```\nHDC GetWindowDC() throw();\n```  \n  \n### Remarks  \n See [GetWindowDC](http://msdn.microsoft.com/library/windows/desktop/dd144947) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#14](../../atl/codesnippet/cpp/cwindow-class_14.cpp)]  \n  \n##  <a name=\"cwindow__getwindowlong\"></a>  CWindow::GetWindowLong  \n Retrieves a 32-bit value at a specified offset into the extra window memory.  \n  \n```\nLONG GetWindowLong(int nIndex) const throw();\n```  \n  \n### Remarks  \n See [GetWindowLong](http://msdn.microsoft.com/library/windows/desktop/ms633584) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n> [!NOTE]\n>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use [CWindow::GetWindowLongPtr](#cwindow__getwindowlongptr).  \n  \n##  <a name=\"cwindow__getwindowlongptr\"></a>  CWindow::GetWindowLongPtr  \n Retrieves information about the specified window, including a value at a specified offset into the extra window memory.  \n  \n```\nLONG_PTR GetWindowLongPtr(int nIndex) const throw();\n```  \n  \n### Remarks  \n See [GetWindowLongPtr](http://msdn.microsoft.com/library/windows/desktop/ms633585) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n If you are retrieving a pointer or a handle, this function supersedes the `CWindow::GetWindowLong` method.  \n  \n> [!NOTE]\n>  Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.  \n  \n To write code that is compatible with both 32-bit and 64-bit versions of Windows, use `CWindow::GetWindowLongPtr`.  \n  \n##  <a name=\"cwindow__getwindowplacement\"></a>  CWindow::GetWindowPlacement  \n Retrieves the show state and positions.  \n  \n```\nBOOL GetWindowPlacement(WINDOWPLACEMENT FAR* lpwndpl) const throw();\n```  \n  \n### Remarks  \n See [GetWindowPlacement](http://msdn.microsoft.com/library/windows/desktop/ms633518) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getwindowprocessid\"></a>  CWindow::GetWindowProcessID  \n Retrieves the identifier of the process that created the window.  \n  \n```\nDWORD GetWindowProcessID() throw();\n```  \n  \n### Remarks  \n See [GetWindowThreadProcessID](http://msdn.microsoft.com/library/windows/desktop/ms633522) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#15](../../atl/codesnippet/cpp/cwindow-class_15.cpp)]  \n  \n##  <a name=\"cwindow__getwindowrect\"></a>  CWindow::GetWindowRect  \n Retrieves the window's bounding dimensions.  \n  \n```\nBOOL GetWindowRect(LPRECT lpRect) const throw();\n```  \n  \n### Remarks  \n See [GetWindowRect](http://msdn.microsoft.com/library/windows/desktop/ms633519) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getwindowrgn\"></a>  CWindow::GetWindowRgn  \n Obtains a copy of the window region of a window.  \n  \n```\nint GetWindowRgn(HRGN hRgn) throw();\n```  \n  \n### Remarks  \n See [GetWindowRgn](http://msdn.microsoft.com/library/windows/desktop/dd144950) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getwindowtext\"></a>  CWindow::GetWindowText  \n Retrieves the window's text.  \n  \n```\nint GetWindowText(LPTSTR lpszStringBuf,  int nMaxCount) const throw();\n\nBOOL GetWindowText(\n    BSTR& bstrText) throw();\n\nint GetWindowText(CSimpleString& strText) const;\n```  \n  \n### Parameters  \n `lpszStringBuf`  \n A buffer to which to write the window text.  \n  \n `nMaxCount`  \n The size of the buffer in characters; also the maximum number of characters to write.  \n  \n `bstrText`  \n A `BSTR` in which to store the window text.  \n  \n `strText`  \n A `CString` in which to store the window text.  \n  \n### Return Value  \n If the text is successfully copied, the return value is **TRUE**; otherwise, the return value is **FALSE**.  \n  \n### Remarks  \n See [GetWindowText](http://msdn.microsoft.com/library/windows/desktop/ms633520) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n The second version of this method allows you to store the text in a `BSTR`; the third version allows you to store the result in a [CString](../../atl-mfc-shared/reference/cstringt-class.md), since `CSimpleString` is the base class of `CString`.  \n  \n##  <a name=\"cwindow__getwindowtextlength\"></a>  CWindow::GetWindowTextLength  \n Retrieves the length of the window's text.  \n  \n```\nint GetWindowTextLength() const throw();\n```  \n  \n### Remarks  \n See [GetWindowTextLength](http://msdn.microsoft.com/library/windows/desktop/ms633521) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__getwindowthreadid\"></a>  CWindow::GetWindowThreadID  \n Retrieves the identifier of the thread that created the specified window.  \n  \n```\nDWORD GetWindowThreadID() throw();\n```  \n  \n### Remarks  \n See [GetWindowThreadProcessID](http://msdn.microsoft.com/library/windows/desktop/ms633522) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#16](../../atl/codesnippet/cpp/cwindow-class_16.cpp)]  \n  \n##  <a name=\"cwindow__getwindowword\"></a>  CWindow::GetWindowWord  \n Retrieves a 16-bit value at a specified offset into the extra window memory.  \n  \n```\nWORD GetWindowWord(int nIndex) const throw();\n```  \n  \n### Remarks  \n See [GetWindowLong](http://msdn.microsoft.com/library/windows/desktop/ms633584) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__gotodlgctrl\"></a>  CWindow::GotoDlgCtrl  \n Sets the keyboard focus to a control in the dialog box.  \n  \n```\nvoid GotoDlgCtrl(HWND hWndCtrl) const throw();\n```  \n  \n### Remarks  \n See [WM_NEXTDLGCTL](http://msdn.microsoft.com/library/windows/desktop/ms645432) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__hidecaret\"></a>  CWindow::HideCaret  \n Hides the system caret.  \n  \n```\nBOOL HideCaret() throw();\n```  \n  \n### Remarks  \n See [HideCaret](http://msdn.microsoft.com/library/windows/desktop/ms648403) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#17](../../atl/codesnippet/cpp/cwindow-class_17.cpp)]  \n  \n##  <a name=\"cwindow__hilitemenuitem\"></a>  CWindow::HiliteMenuItem  \n Highlights or removes the highlight from a top-level menu item.  \n  \n```\nBOOL HiliteMenuItem(HMENU hMenu,\n    UINT uHiliteItem,\n    UINT uHilite) throw();\n```  \n  \n### Remarks  \n See [HiliteMenuItem](http://msdn.microsoft.com/library/windows/desktop/ms647986) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__invalidate\"></a>  CWindow::Invalidate  \n Invalidates the entire client area.  \n  \n```\nBOOL Invalidate(BOOL bErase = TRUE) throw();\n```  \n  \n### Remarks  \n See [InvalidateRect](http://msdn.microsoft.com/library/windows/desktop/dd145002) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n Passes **NULL** for the `RECT` parameter to the `InvalidateRect` Win32 function.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#18](../../atl/codesnippet/cpp/cwindow-class_18.cpp)]  \n  \n##  <a name=\"cwindow__invalidaterect\"></a>  CWindow::InvalidateRect  \n Invalidates the client area within the specified rectangle.  \n  \n```\nBOOL InvalidateRect(LPCRECT lpRect,  BOOL bErase = TRUE) throw();\n```  \n  \n### Remarks  \n See [InvalidateRect](http://msdn.microsoft.com/library/windows/desktop/dd145002) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__invalidatergn\"></a>  CWindow::InvalidateRgn  \n Invalidates the client area within the specified region.  \n  \n```\nvoid InvalidateRgn(HRGN hRgn,  BOOL bErase = TRUE) throw();\n```  \n  \n### Remarks  \n See [InvalidateRgn](http://msdn.microsoft.com/library/windows/desktop/dd145003) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n Specifies a `void` return type, while the `InvalidateRgn` Win32 function always returns **TRUE**.  \n  \n##  <a name=\"cwindow__ischild\"></a>  CWindow::IsChild  \n Determines whether the specified window is a child window.  \n  \n```\nBOOL IsChild(\nconst HWND hWnd) const throw();\n```  \n  \n### Remarks  \n See [IsChild](http://msdn.microsoft.com/library/windows/desktop/ms633524) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__isdialogmessage\"></a>  CWindow::IsDialogMessage  \n Determines whether a message is intended for the specified dialog box.  \n  \n```\nBOOL IsDialogMessage(LPMSG lpMsg) throw();\n```  \n  \n### Remarks  \n See [IsDialogMessage](http://msdn.microsoft.com/library/windows/desktop/ms645498) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__isdlgbuttonchecked\"></a>  CWindow::IsDlgButtonChecked  \n Determines the check state of the button.  \n  \n```\nUINT IsDlgButtonChecked(int nIDButton) const throw();\n```  \n  \n### Remarks  \n See [IsDlgButtonChecked](http://msdn.microsoft.com/library/windows/desktop/bb761879) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__isiconic\"></a>  CWindow::IsIconic  \n Determines whether the window is minimized.  \n  \n```\nBOOL IsIconic() const throw();\n```  \n  \n### Remarks  \n See [IsIconic](http://msdn.microsoft.com/library/windows/desktop/ms633527) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#19](../../atl/codesnippet/cpp/cwindow-class_19.cpp)]  \n  \n##  <a name=\"cwindow__isparentdialog\"></a>  CWindow::IsParentDialog  \n Determines if the parent window of the control is a dialog window.  \n  \n```\nBOOL IsParentDialog() throw();\n```  \n  \n### Return Value  \n Returns TRUE if the parent window is a dialog, FALSE otherwise.  \n  \n##  <a name=\"cwindow__iswindow\"></a>  CWindow::IsWindow  \n Determines whether the specified window handle identifies an existing window.  \n  \n```\nBOOL IsWindow() throw();\n```  \n  \n### Remarks  \n See [IsWindow](http://msdn.microsoft.com/library/windows/desktop/ms633528) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#20](../../atl/codesnippet/cpp/cwindow-class_20.cpp)]  \n  \n##  <a name=\"cwindow__iswindowenabled\"></a>  CWindow::IsWindowEnabled  \n Determines whether the window is enabled for input.  \n  \n```\nBOOL IsWindowEnabled() const throw();\n```  \n  \n### Remarks  \n See [IsWindowEnabled](http://msdn.microsoft.com/library/windows/desktop/ms646303) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#21](../../atl/codesnippet/cpp/cwindow-class_21.cpp)]  \n  \n##  <a name=\"cwindow__iswindowvisible\"></a>  CWindow::IsWindowVisible  \n Determines the window's visibility state.  \n  \n```\nBOOL IsWindowVisible() const throw();\n```  \n  \n### Remarks  \n See [IsWindowVisible](http://msdn.microsoft.com/library/windows/desktop/ms633530) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#22](../../atl/codesnippet/cpp/cwindow-class_22.cpp)]  \n  \n##  <a name=\"cwindow__iswindowunicode\"></a>  CWindow::IsWindowUnicode  \n Determines whether the specified window is a native Unicode window.  \n  \n```\nBOOL IsWindowUnicode() throw();\n```  \n  \n### Remarks  \n See [IsWindowUnicode](http://msdn.microsoft.com/library/windows/desktop/ms633529) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#23](../../atl/codesnippet/cpp/cwindow-class_23.cpp)]  \n  \n##  <a name=\"cwindow__iszoomed\"></a>  CWindow::IsZoomed  \n Determines whether the window is maximized.  \n  \n```\nBOOL IsZoomed() const throw();\n```  \n  \n### Remarks  \n See [IsZoomed](http://msdn.microsoft.com/library/windows/desktop/ms633531) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__killtimer\"></a>  CWindow::KillTimer  \n Destroys a timer event created by `CWindow::SetTimer`.  \n  \n```\nBOOL KillTimer(UINT nIDEvent) throw();\n```  \n  \n### Remarks  \n See [KillTimer](http://msdn.microsoft.com/library/windows/desktop/ms644903) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__lockwindowupdate\"></a>  CWindow::LockWindowUpdate  \n Disables or enables drawing in the window by calling the [LockWindowUpdate](http://msdn.microsoft.com/library/windows/desktop/dd145034) Win32 function.  \n  \n```\nBOOL LockWindowUpdate(BOOL bLock = TRUE) throw();\n```  \n  \n### Parameters  \n `bLock`  \n [in] If **TRUE** (the default value), the window will be locked. Otherwise, it will be unlocked.  \n  \n### Return Value  \n **TRUE** if the window is successfully locked; otherwise, **FALSE**.  \n  \n### Remarks  \n If `bLock` is **TRUE**, this method passes [m_hWnd](#cwindow__m_hwnd) to the Win32 function; otherwise, it passes **NULL**.  \n  \n##  <a name=\"cwindow__m_hwnd\"></a>  CWindow::m_hWnd  \n Contains a handle to the window associated with the `CWindow` object.  \n  \n```\nHWND m_hWnd throw() throw();\n```  \n  \n##  <a name=\"cwindow__mapwindowpoints\"></a>  CWindow::MapWindowPoints  \n Converts a set of points from the window's coordinate space to the coordinate space of another window.  \n  \n```\nint MapWindowPoints(HWND hWndTo,\n    LPPOINT lpPoint,\n    UINT nCount) const throw();\n\nint MapWindowPoints(HWND hWndTo,\n    LPRECT lpRect) const throw();\n```  \n  \n### Remarks  \n See [MapWindowPoints](http://msdn.microsoft.com/library/windows/desktop/dd145046) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n The second version of this method allows you to convert the coordinates of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure.  \n  \n##  <a name=\"cwindow__messagebox\"></a>  CWindow::MessageBox  \n Displays a message box.  \n  \n```\nint MessageBox(LPCTSTR lpszText,\n    LPCTSTR lpszCaption = NULL,\n    UINT nType = MB_OK) throw();\n```  \n  \n### Remarks  \n See [MessageBox](http://msdn.microsoft.com/library/windows/desktop/ms645505) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#24](../../atl/codesnippet/cpp/cwindow-class_24.cpp)]  \n  \n##  <a name=\"cwindow__modifystyle\"></a>  CWindow::ModifyStyle  \n Modifies the window styles of the `CWindow` object.  \n  \n```\nBOOL ModifyStyle(DWORD dwRemove,\n    DWORD dwAdd,\n    UINT nFlags = 0) throw();\n```  \n  \n### Parameters  \n `dwRemove`  \n [in] Specifies the window styles to be removed during style modification.  \n  \n `dwAdd`  \n [in] Specifies the window styles to be added during style modification.  \n  \n `nFlags`  \n [in] Window-positioning flags. For a list of possible values, see the [SetWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms633545) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n **TRUE** if the window styles are modified; otherwise, **FALSE**.  \n  \n### Remarks  \n Styles to be added or removed can be combined by using the bitwise OR ( &#124; ) operator. See the [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]for information about the available window styles.  \n  \n If `nFlags` is nonzero, `ModifyStyle` calls the Win32 function `SetWindowPos`, and redraws the window by combining `nFlags` with the following four flags:  \n  \n- `SWP_NOSIZE` Retains the current size.  \n  \n- `SWP_NOMOVE` Retains the current position.  \n  \n- `SWP_NOZORDER` Retains the current Z order.  \n  \n- `SWP_NOACTIVATE` Does not activate the window.  \n  \n To modify a window's extended styles, call [ModifyStyleEx](#cwindow__modifystyleex).  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#25](../../atl/codesnippet/cpp/cwindow-class_25.cpp)]  \n  \n##  <a name=\"cwindow__modifystyleex\"></a>  CWindow::ModifyStyleEx  \n Modifies the extended window styles of the `CWindow` object.  \n  \n```\nBOOL ModifyStyleEx(DWORD dwRemove,\n    DWORD dwAdd,\n    UINT nFlags = 0) throw();\n```  \n  \n### Parameters  \n `dwRemove`  \n [in] Specifies the extended styles to be removed during style modification.  \n  \n `dwAdd`  \n [in] Specifies the extended styles to be added during style modification.  \n  \n `nFlags`  \n [in] Window-positioning flags. For a list of possible values, see the [SetWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms633545) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n **TRUE** if the extended window styles are modified; otherwise, **FALSE**.  \n  \n### Remarks  \n Styles to be added or removed can be combined by using the bitwise OR ( &#124; ) operator. See the [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]for information about the available extended styles.  \n  \n If `nFlags` is nonzero, `ModifyStyleEx` calls the Win32 function `SetWindowPos`, and redraws the window by combining `nFlags` with the following four flags:  \n  \n- `SWP_NOSIZE` Retains the current size.  \n  \n- `SWP_NOMOVE` Retains the current position.  \n  \n- `SWP_NOZORDER` Retains the current Z order.  \n  \n- `SWP_NOACTIVATE` Does not activate the window.  \n  \n To modify windows using regular window styles, call [ModifyStyle](#cwindow__modifystyle).  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#26](../../atl/codesnippet/cpp/cwindow-class_26.cpp)]  \n  \n##  <a name=\"cwindow__movewindow\"></a>  CWindow::MoveWindow  \n Changes the window's size and position.  \n  \n```\nBOOL MoveWindow(int x,\n    int y,\n    int nWidth,\n    int nHeight,\n    BOOL bRepaint = TRUE) throw();\n\nBOOL MoveWindow(LPCRECT lpRect,\n    BOOL bRepaint = TRUE) throw();\n```  \n  \n### Remarks  \n For a top-level window object, the x and y parameters are relative to the upper-left corner of the screen. For a child window object, they are relative to the upper-left corner of the parent window's client area.  \n  \n The second version of this method uses a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure to determine the window's new position, width, and height.  \n  \n##  <a name=\"cwindow__nextdlgctrl\"></a>  CWindow::NextDlgCtrl  \n Sets the keyboard focus to the next control in the dialog box.  \n  \n```\nvoid NextDlgCtrl() const throw();\n```  \n  \n### Remarks  \n See [WM_NEXTDLGCTL](http://msdn.microsoft.com/library/windows/desktop/ms645432) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__openclipboard\"></a>  CWindow::OpenClipboard  \n Opens the Clipboard.  \n  \n```\nBOOL OpenClipboard() throw();\n```  \n  \n### Remarks  \n See [OpenClipboard](http://msdn.microsoft.com/library/windows/desktop/ms649048) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__operator_hwnd\"></a>  CWindow::operator HWND  \n Converts a `CWindow` object to an `HWND`.  \n  \n```operator HWND() const throw();\n```  \n  \n##  <a name=\"cwindow__operator_eq\"></a>  CWindow::operator =  \n Assigns an `HWND` to the `CWindow` object by setting the [m_hWnd](#cwindow__m_hwnd) member to `hWnd`.  \n  \n```\nCWindow& operator= (HWND hWnd) throw();\n```  \n  \n##  <a name=\"cwindow__postmessage\"></a>  CWindow::PostMessage  \n Places a message in the message queue associated with the thread that created the window.  \n  \n```\nBOOL PostMessage(UINT message,\n    WPARAM wParam = 0,\n    LPARAM lParam = 0) throw();\n```  \n  \n### Remarks  \n See [PostMessage](http://msdn.microsoft.com/library/windows/desktop/ms644944) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n Returns without waiting for the thread to process the message.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#27](../../atl/codesnippet/cpp/cwindow-class_27.cpp)]  \n  \n##  <a name=\"cwindow__prevdlgctrl\"></a>  CWindow::PrevDlgCtrl  \n Sets the keyboard focus to the previous control in the dialog box.  \n  \n```\nvoid PrevDlgCtrl() const throw();\n```  \n  \n### Remarks  \n See [WM_NEXTDLGCTL](http://msdn.microsoft.com/library/windows/desktop/ms645432) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__print\"></a>  CWindow::Print  \n Sends a [WM_PRINT](http://msdn.microsoft.com/library/windows/desktop/dd145216) message to the window to request that it draw itself in the specified device context.  \n  \n```\nvoid Print(HDC hDC,  DWORD dwFlags) const throw();\n```  \n  \n### Parameters  \n `hDC`  \n [in] The handle to a device context.  \n  \n `dwFlags`  \n [in] Specifies the drawing options. You can combine one or more of the following flags:  \n  \n- `PRF_CHECKVISIBLE` Draw the window only if it is visible.  \n  \n- `PRF_CHILDREN` Draw all visible child windows.  \n  \n- `PRF_CLIENT` Draw the client area of the window.  \n  \n- `PRF_ERASEBKGND` Erase the background before drawing the window.  \n  \n- `PRF_NONCLIENT` Draw the non-client area of the window.  \n  \n- `PRF_OWNED` Draw all owned windows.  \n  \n##  <a name=\"cwindow__printclient\"></a>  CWindow::PrintClient  \n Sends a [WM_PRINTCLIENT](http://msdn.microsoft.com/library/windows/desktop/dd145217) message to the window to request that it draw its client area in the specified device context.  \n  \n```\nvoid PrintClient(HDC hDC,  DWORD dwFlags) const throw();\n```  \n  \n### Parameters  \n `hDC`  \n [in] The handle to a device context.  \n  \n `dwFlags`  \n [in] Specifies drawing options. You can combine one or more of the following flags:  \n  \n- `PRF_CHECKVISIBLE` Draw the window only if it is visible.  \n  \n- `PRF_CHILDREN` Draw all visible child windows.  \n  \n- `PRF_CLIENT` Draw the client area of the window.  \n  \n- `PRF_ERASEBKGND` Erase the background before drawing the window.  \n  \n- `PRF_NONCLIENT` Draw the non-client area of the window.  \n  \n- `PRF_OWNED` Draw all owned windows.  \n  \n##  <a name=\"cwindow__rcdefault\"></a>  CWindow::rcDefault  \n Contains default window dimensions.  \n  \n```\nstatic RECT rcDefault;\n```  \n  \n##  <a name=\"cwindow__redrawwindow\"></a>  CWindow::RedrawWindow  \n Updates a specified rectangle or region in the client area.  \n  \n```\nBOOL RedrawWindow(LPCRECT lpRectUpdate = NULL,\n    HRGN hRgnUpdate = NULL,\n    UINT flags = RDW_INVALIDATE | RDW_UPDATENOW | RDW_ERASE);\n\nthrow()\n```  \n  \n### Remarks  \n See [RedrawWindow](http://msdn.microsoft.com/library/windows/desktop/dd162911) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#28](../../atl/codesnippet/cpp/cwindow-class_28.cpp)]  \n  \n##  <a name=\"cwindow__releasedc\"></a>  CWindow::ReleaseDC  \n Releases a device context.  \n  \n```\nint ReleaseDC(HDC hDC);\n```  \n  \n### Remarks  \n See [ReleaseDC](http://msdn.microsoft.com/library/windows/desktop/dd162920) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#9](../../atl/codesnippet/cpp/cwindow-class_9.cpp)]  \n  \n##  <a name=\"cwindow__resizeclient\"></a>  CWindow::ResizeClient  \n Resizes the window to the specified client area size.  \n  \n```\nBOOL ResizeClient(int nWidth,\n    int nHeight,\n    BOOL bRedraw = FALSE) throw();\n```  \n  \n### Parameters  \n `nWidth`  \n New width of the window in pixels.  \n  \n `nHeight`  \n New height of the window in pixels.  \n  \n `bRedraw`  \n A flag indicating whether to redraw changes. Default is **FALSE**, indicating the window does not redraw changes.  \n  \n##  <a name=\"cwindow__screentoclient\"></a>  CWindow::ScreenToClient  \n Converts screen coordinates to client coordinates.  \n  \n```\nBOOL ScreenToClient(LPPOINT lpPoint) const throw();\n\nBOOL ScreenToClient(LPRECT lpRect) const throw();\n```  \n  \n### Remarks  \n See [ScreenToClient](http://msdn.microsoft.com/library/windows/desktop/dd162952) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n The second version of this method allows you to convert the coordinates of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure.  \n  \n##  <a name=\"cwindow__scrollwindow\"></a>  CWindow::ScrollWindow  \n Scrolls the specified client area.  \n  \n```\nBOOL ScrollWindow(int xAmount,\n    int yAmount,\n    LPCRECT lpRect = NULL,\n    LPCRECT lpClipRect = NULL) throw();\n```  \n  \n### Remarks  \n See [ScrollWindow](http://msdn.microsoft.com/library/windows/desktop/bb787591) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__scrollwindowex\"></a>  CWindow::ScrollWindowEx  \n Scrolls the specified client area with additional features.  \n  \n```\nint ScrollWindowEx(int dx,\n    int dy,\n    LPCRECT lpRectScroll,\n    LPCRECT lpRectClip,\n    HRGN hRgnUpdate,\n    LPRECT lpRectUpdate,\n    UINT flags) throw();\n```  \n  \n### Remarks  \n See [ScrollWindowEx](http://msdn.microsoft.com/library/windows/desktop/bb787593) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__senddlgitemmessage\"></a>  CWindow::SendDlgItemMessage  \n Sends a message to a control.  \n  \n```\nLRESULT SendDlgItemMessage(int nID,\n    UINT message,\n    WPARAM wParam = 0,\n    LPARAM lParam = 0) throw();\n```  \n  \n### Remarks  \n See [SendDlgItemMessage](http://msdn.microsoft.com/library/windows/desktop/ms645515) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__sendmessage\"></a>  CWindow::SendMessage  \n Sends a message to the window and does not return until the window procedure has processed the message.  \n  \n```\nLRESULT SendMessage(UINT message,\n    WPARAM wParam = 0,\n    LPARAM lParam = 0) throw();\nstatic LRESULT SendMessage(HWND hWnd,\n    UINT message,\n    WPARAM wParam,\n    LPARAM lParam) throw();\n```  \n  \n### Remarks  \n See [SendMessage](http://msdn.microsoft.com/library/windows/desktop/ms644950) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#29](../../atl/codesnippet/cpp/cwindow-class_29.cpp)]  \n  \n##  <a name=\"cwindow__sendmessagetodescendants\"></a>  CWindow::SendMessageToDescendants  \n Sends the specified message to all immediate children of the `CWindow` object.  \n  \n```\nvoid SendMessageToDescendants(UINT message,\n    WPARAM wParam = 0,\n    LPARAM lParam = 0,\n    BOOL bDeep = TRUE) throw();\n```  \n  \n### Parameters  \n `message`  \n [in] The message to be sent.  \n  \n `wParam`  \n [in] Additional message-specific information.  \n  \n `lParam`  \n [in] Additional message-specific information.  \n  \n `bDeep`  \n [in] If **TRUE** (the default value), the message will be sent to all descendant windows; otherwise, it will be sent only to the immediate child windows.  \n  \n### Remarks  \n If `bDeep` is **TRUE**, the message is additionally sent to all other descendant windows.  \n  \n##  <a name=\"cwindow__sendnotifymessage\"></a>  CWindow::SendNotifyMessage  \n Sends a message to the window.  \n  \n```\nBOOL SendNotifyMessage(UINT message,\n    WPARAM wParam = 0,\n    LPARAM lParam = 0) throw();\n```  \n  \n### Remarks  \n See [SendNotifyMessage](http://msdn.microsoft.com/library/windows/desktop/ms644953) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n If the window was created by the calling thread, `SendNotifyMessage` does not return until the window procedure has processed the message. Otherwise, it returns immediately.  \n  \n##  <a name=\"cwindow__setactivewindow\"></a>  CWindow::SetActiveWindow  \n Activates the window.  \n  \n```\nHWND SetActiveWindow() throw();\n```  \n  \n### Remarks  \n See [SetActiveWindow](http://msdn.microsoft.com/library/windows/desktop/ms646311) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#30](../../atl/codesnippet/cpp/cwindow-class_30.cpp)]  \n  \n##  <a name=\"cwindow__setcapture\"></a>  CWindow::SetCapture  \n Sends all subsequent mouse input to the window.  \n  \n```\nHWND SetCapture() throw();\n```  \n  \n### Remarks  \n See [SetCapture](http://msdn.microsoft.com/library/windows/desktop/ms646262) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__setclipboardviewer\"></a>  CWindow::SetClipboardViewer  \n Adds the window to the Clipboard viewer chain.  \n  \n```\nHWND SetClipboardViewer() throw();\n```  \n  \n### Remarks  \n See [SetClipboardViewer](http://msdn.microsoft.com/library/windows/desktop/ms649052) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__setdlgctrlid\"></a>  CWindow::SetDlgCtrlID  \n Sets the identifier of the window to the specified value.  \n  \n```\nint SetDlgCtrlID(int nID) throw();\n```  \n  \n### Parameters  \n `nID`  \n [in] The new value to set for the window's identifier.  \n  \n### Return Value  \n If successful, the previous identifier of the window; otherwise 0.  \n  \n##  <a name=\"cwindow__setdlgitemint\"></a>  CWindow::SetDlgItemInt  \n Changes a control's text to the string representation of an integer value.  \n  \n```\nBOOL SetDlgItemInt(int nID,\n    UINT nValue,\n    BOOL bSigned = TRUE) throw();\n```  \n  \n### Remarks  \n See [SetDlgItemInt](http://msdn.microsoft.com/library/windows/desktop/ms645518) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__setdlgitemtext\"></a>  CWindow::SetDlgItemText  \n Changes a control's text.  \n  \n```\nBOOL SetDlgItemText(int nID,  LPCTSTR lpszString) throw();\n```  \n  \n### Remarks  \n See [SetDlgItemText](http://msdn.microsoft.com/library/windows/desktop/ms645521) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__setfocus\"></a>  CWindow::SetFocus  \n Sets the input focus to the window.  \n  \n```\nHWND SetFocus() throw();\n```  \n  \n### Remarks  \n See [SetFocus](http://msdn.microsoft.com/library/windows/desktop/ms646312) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#31](../../atl/codesnippet/cpp/cwindow-class_31.cpp)]  \n  \n##  <a name=\"cwindow__setfont\"></a>  CWindow::SetFont  \n Changes the window's current font by sending a [WM_SETFONT](http://msdn.microsoft.com/library/windows/desktop/ms632642) message to the window.  \n  \n```\nvoid SetFont(HFONT hFont,  BOOL bRedraw = TRUE) throw();\n```  \n  \n### Parameters  \n `hFont`  \n [in] The handle to the new font.  \n  \n `bRedraw`  \n [in] If **TRUE** (the default value), the window is redrawn. Otherwise, it is not.  \n  \n##  <a name=\"cwindow__sethotkey\"></a>  CWindow::SetHotKey  \n Associates a hot key with the window by sending a **WM_SETHOTKEY** message.  \n  \n```\nint SetHotKey(WORD wVirtualKeyCode,  WORD wModifiers) throw();\n```  \n  \n### Parameters  \n `wVirtualKeyCode`  \n [in] The virtual key code of the hot key. For a list of of standard virtual key codes, see Winuser.h.  \n  \n `wModifiers`  \n [in] The modifiers of the hot key. For a list of possible values, see **WM_SETHOTKEY** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n For a list of possible return values, see [WM_SETHOTKEY](http://msdn.microsoft.com/library/windows/desktop/ms646284) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__seticon\"></a>  CWindow::SetIcon  \n Sets the window's large or small icon to the icon identified by `hIcon`.  \n  \n```\nHICON SetIcon(HICON hIcon,  BOOL bBigIcon = TRUE) throw();\n```  \n  \n### Parameters  \n `hIcon`  \n [in] The handle to a new icon.  \n  \n `bBigIcon`  \n [in] If **TRUE** (the default value), the method sets a large icon. Otherwise, it sets a small icon.  \n  \n### Return Value  \n The handle to the previous icon.  \n  \n### Remarks  \n `SetIcon` sends a [WM_SETICON](http://msdn.microsoft.com/library/windows/desktop/ms632643) message to the window.  \n  \n##  <a name=\"cwindow__setmenu\"></a>  CWindow::SetMenu  \n Changes the window's current menu.  \n  \n```\nBOOL SetMenu(HMENU hMenu) throw();\n```  \n  \n### Remarks  \n See [SetMenu](http://msdn.microsoft.com/library/windows/desktop/ms647995) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__setparent\"></a>  CWindow::SetParent  \n Changes the parent window.  \n  \n```\nHWND SetParent(HWND hWndNewParent) throw();\n```  \n  \n### Remarks  \n See [SetParent](http://msdn.microsoft.com/library/windows/desktop/ms633541) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#32](../../atl/codesnippet/cpp/cwindow-class_32.cpp)]  \n  \n##  <a name=\"cwindow__setredraw\"></a>  CWindow::SetRedraw  \n Sets or clears the redraw flag by sending a [WM_SETREDRAW](http://msdn.microsoft.com/library/windows/desktop/dd145219) message to the window.  \n  \n```\nvoid SetRedraw(BOOL bRedraw = TRUE) throw();\n```  \n  \n### Parameters  \n `bRedraw`  \n [in] Specifies the state of the redraw flag. If **TRUE** (the default value), the redraw flag is set; if **FALSE**, the flag is cleared.  \n  \n### Remarks  \n Call `SetRedraw` to allow changes to be redrawn or to prevent changes from being redrawn.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#33](../../atl/codesnippet/cpp/cwindow-class_33.cpp)]  \n  \n##  <a name=\"cwindow__setscrollinfo\"></a>  CWindow::SetScrollInfo  \n Sets the parameters of a scroll bar.  \n  \n```\nint SetScrollInfo(int nBar,\n    LPSCROLLINFO lpScrollInfo,\n    BOOL bRedraw = TRUE) throw();\n```  \n  \n### Remarks  \n See [SetScrollInfo](http://msdn.microsoft.com/library/windows/desktop/bb787595) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__setscrollpos\"></a>  CWindow::SetScrollPos  \n Changes the position of the scroll box.  \n  \n```\nint SetScrollPos(int nBar,\n    int nPos,\n    BOOL bRedraw = TRUE) throw();\n```  \n  \n### Remarks  \n See [SetScrollPos](http://msdn.microsoft.com/library/windows/desktop/bb787597) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__setscrollrange\"></a>  CWindow::SetScrollRange  \n Changes the scroll bar range.  \n  \n```\nBOOL SetScrollRange(int nBar,\n    int nMinPos,\n    int nMaxPos,\n    BOOL bRedraw = TRUE) throw();\n```  \n  \n### Remarks  \n See [SetScrollRange](http://msdn.microsoft.com/library/windows/desktop/bb787599) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__settimer\"></a>  CWindow::SetTimer  \n Creates a timer event.  \n  \n```\nUINT SetTimer(UINT nIDEvent,\n    UINT nElapse,\n    void (CALLBACK* lpfnTimer)(HWND,\n    UINT,\n UINT,\n    DWORD) = NULL) throw();\n```  \n  \n### Remarks  \n See [SetTimer](http://msdn.microsoft.com/library/windows/desktop/ms644906) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__setwindowcontexthelpid\"></a>  CWindow::SetWindowContextHelpId  \n Sets the window's help context identifier.  \n  \n```\nBOOL SetWindowContextHelpId(DWORD dwContextHelpId) throw();\n```  \n  \n### Remarks  \n See [SetWindowContextHelpId](http://msdn.microsoft.com/library/windows/desktop/bb762101) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__setwindowlong\"></a>  CWindow::SetWindowLong  \n Sets a 32-bit value at a specified offset into the extra window memory.  \n  \n```\nLONG SetWindowLong(int nIndex,  LONG dwNewLong) throw();\n```  \n  \n### Remarks  \n See [SetWindowLong](http://msdn.microsoft.com/library/windows/desktop/ms633591) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n> [!NOTE]\n>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use [CWindow::SetWindowLongPtr](#cwindow__setwindowlongptr).  \n  \n##  <a name=\"cwindow__setwindowlongptr\"></a>  CWindow::SetWindowLongPtr  \n Changes an attribute of the specified window, and also sets a value at the specified offset in the extra window memory.  \n  \n```\nLONG_PTR SetWindowLongPtr(int nIndex,  LONG_PTR dwNewLong) throw();\n```  \n  \n### Remarks  \n See [SetWindowLongPtr](http://msdn.microsoft.com/library/windows/desktop/ms644898) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n This function supersedes the `CWindow::SetWindowLong` method. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use `CWindow::SetWindowLongPtr`.  \n  \n##  <a name=\"cwindow__setwindowplacement\"></a>  CWindow::SetWindowPlacement  \n Sets the show state and positions.  \n  \n```\nBOOL SetWindowPlacement(const WINDOWPLACEMENT FAR* lpwndpl);\n```  \n  \n### Remarks  \n See [SetWindowPlacement](http://msdn.microsoft.com/library/windows/desktop/ms633544) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__setwindowpos\"></a>  CWindow::SetWindowPos  \n Sets the size, position, and Z order.  \n  \n```\nBOOL SetWindowPos(HWND hWndInsertAfter,\n    int x,\n    int y,\n    int cx,\n    int cy,\n    UINT nFlags) throw();\nBOOL SetWindowPos(HWND hWndInsertAfter,\n    LPCRECT lpRect,\n    UINT nFlags) throw();\n```  \n  \n### Remarks  \n See [SetWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms633545) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n The second version of this method uses a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure to set the window's new position, width, and height.  \n  \n##  <a name=\"cwindow__setwindowrgn\"></a>  CWindow::SetWindowRgn  \n Sets the window region of a window.  \n  \n```\nint SetWindowRgn(HRGN hRgn,  BOOL bRedraw = FALSE) throw();\n```  \n  \n### Remarks  \n See [SetWindowRgn](http://msdn.microsoft.com/library/windows/desktop/dd145102) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__setwindowtext\"></a>  CWindow::SetWindowText  \n Changes the window's text.  \n  \n```\nBOOL SetWindowText(LPCTSTR lpszString) throw();\n```  \n  \n### Remarks  \n See [SetWindowText](http://msdn.microsoft.com/library/windows/desktop/ms633546) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#34](../../atl/codesnippet/cpp/cwindow-class_34.cpp)]  \n  \n##  <a name=\"cwindow__setwindowword\"></a>  CWindow::SetWindowWord  \n Sets a 16-bit value at a specified offset into the extra window memory.  \n  \n```\nWORD SetWindowWord(int nIndex,  WORD wNewWord) throw();\n```  \n  \n### Remarks  \n See [SetWindowLong](http://msdn.microsoft.com/library/windows/desktop/ms633591) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__showcaret\"></a>  CWindow::ShowCaret  \n Displays the system caret.  \n  \n```\nBOOL ShowCaret() throw();\n```  \n  \n### Remarks  \n See [ShowCaret](http://msdn.microsoft.com/library/windows/desktop/ms648406) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#35](../../atl/codesnippet/cpp/cwindow-class_35.cpp)]  \n  \n##  <a name=\"cwindow__showownedpopups\"></a>  CWindow::ShowOwnedPopups  \n Shows or hides the pop-up windows owned by the window.  \n  \n```\nBOOL ShowOwnedPopups(BOOL bShow = TRUE) throw();\n```  \n  \n### Remarks  \n See [ShowOwnedPopups](http://msdn.microsoft.com/library/windows/desktop/ms633547) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__showscrollbar\"></a>  CWindow::ShowScrollBar  \n Shows or hides a scroll bar.  \n  \n```\nBOOL ShowScrollBar(UINT nBar,  BOOL bShow = TRUE) throw();\n```  \n  \n### Remarks  \n See [ShowScrollBar](http://msdn.microsoft.com/library/windows/desktop/bb787601) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__showwindow\"></a>  CWindow::ShowWindow  \n Sets the window's show state.  \n  \n```\nBOOL ShowWindow(int nCmdShow) throw();\n```  \n  \n### Remarks  \n See [ShowWindow](http://msdn.microsoft.com/library/windows/desktop/ms633548) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#36](../../atl/codesnippet/cpp/cwindow-class_36.cpp)]  \n  \n##  <a name=\"cwindow__showwindowasync\"></a>  CWindow::ShowWindowAsync  \n Sets the show state of a window created by a different thread.  \n  \n```\nBOOL ShowWindowAsync(int nCmdShow) throw();\n```  \n  \n### Remarks  \n See [ShowWindowAsync](http://msdn.microsoft.com/library/windows/desktop/ms633549) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__updatewindow\"></a>  CWindow::UpdateWindow  \n Updates the client area.  \n  \n```\nBOOL UpdateWindow() throw();\n```  \n  \n### Remarks  \n See [UpdateWindow](http://msdn.microsoft.com/library/windows/desktop/dd145167) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#37](../../atl/codesnippet/cpp/cwindow-class_37.cpp)]  \n  \n##  <a name=\"cwindow__validaterect\"></a>  CWindow::ValidateRect  \n Validates the client area within the specified rectangle.  \n  \n```\nBOOL ValidateRect(LPCRECT lpRect) throw();\n```  \n  \n### Remarks  \n See [ValidateRect](http://msdn.microsoft.com/library/windows/desktop/dd145194) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__validatergn\"></a>  CWindow::ValidateRgn  \n Validates the client area within the specified region.  \n  \n```\nBOOL ValidateRgn(HRGN hRgn) throw();\n```  \n  \n### Remarks  \n See [ValidateRgn](http://msdn.microsoft.com/library/windows/desktop/dd145195) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwindow__winhelp\"></a>  CWindow::WinHelp  \n Starts Windows Help.  \n  \n```\nBOOL WinHelp(LPCTSTR lpszHelp,\n    UINT nCmd = HELP_CONTEXT,\n    DWORD dwData = 0) throw();\n```  \n  \n### Remarks  \n See [WinHelp](http://msdn.microsoft.com/library/windows/desktop/bb762267) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)\n"}