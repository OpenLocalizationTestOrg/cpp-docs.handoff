{"nodes":[{"pos":[12,52],"content":"C++ Library Conventions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C++ Library Conventions | Microsoft Docs","pos":[0,40]}]},{"content":"C++ Library Conventions","pos":[881,904]},{"content":"The C++ library obeys much the same conventions as the Standard C Library, plus a few more outlined here.","pos":[905,1010]},{"content":"An implementation has certain latitude in how it declares types and functions in the C++ library:","pos":[1017,1114]},{"content":"Names of functions in the Standard C library may have either extern #\"C++\" or extern \"C\" linkage.","pos":[1124,1221]},{"content":"Include the appropriate Standard C header rather than declare a library entity inline.","pos":[1222,1308]},{"content":"A member function name in a library class may have additional function signatures over those listed in this document.","pos":[1318,1435]},{"content":"You can be sure that a function call described here behaves as expected, but you cannot reliably take the address of a library member function.","pos":[1436,1579]},{"content":"(The type may not be what you expect.)","pos":[1580,1618]},{"content":"A library class may have undocumented (nonvirtual) base classes.","pos":[1628,1692]},{"content":"A class documented as derived from another class may, in fact, be derived from that class through other undocumented classes.","pos":[1693,1818]},{"content":"A type defined as a synonym for some integer type may be the same as one of several different integer types.","pos":[1828,1936]},{"content":"A bitmask type can be implemented as either an integer type or an enumeration.","pos":[1946,2024]},{"content":"In either case, you can perform bitwise operations (such as <ph id=\"ph1\">`AND`</ph> and <ph id=\"ph2\">`OR`</ph>) on values of the same bitmask type.","pos":[2025,2136],"source":" In either case, you can perform bitwise operations (such as `AND` and `OR`) on values of the same bitmask type."},{"content":"The elements <ph id=\"ph1\">`A`</ph> and <ph id=\"ph2\">`B`</ph> of a bitmask type are nonzero values such that <ph id=\"ph3\">`A` &amp; `B`</ph> is zero.","pos":[2137,2227],"source":" The elements `A` and `B` of a bitmask type are nonzero values such that `A` & `B` is zero."},{"content":"A library function that has no exception specification can throw an arbitrary exception, unless its definition clearly restricts such a possibility.","pos":[2237,2385]},{"content":"On the other hand, there are some restrictions:","pos":[2392,2439]},{"content":"The Standard C Library uses no masking macros.","pos":[2449,2495]},{"content":"Only specific function signatures are reserved, not the names of the functions themselves.","pos":[2496,2586]},{"content":"A library function name outside a class will not have additional, undocumented, function signatures.","pos":[2596,2696]},{"content":"You can reliably take its address.","pos":[2697,2731]},{"content":"Base classes and member functions described as virtual are assuredly virtual, while those described as nonvirtual are assuredly nonvirtual.","pos":[2741,2880]},{"content":"Two types defined by the C++ library are always different unless this document explicitly suggests otherwise.","pos":[2890,2999]},{"content":"Functions supplied by the library, including the default versions of replaceable functions, can throw <bpt id=\"p1\">*</bpt>at most<ept id=\"p1\">*</ept> those exceptions listed in any exception specification.","pos":[3009,3176],"source":"Functions supplied by the library, including the default versions of replaceable functions, can throw *at most* those exceptions listed in any exception specification."},{"content":"No destructors supplied by the library throw exceptions.","pos":[3177,3233]},{"content":"Functions in the Standard C Library may propagate an exception, as when <ph id=\"ph1\">`qsort`</ph> calls a comparison function that throws an exception, but they do not otherwise throw exceptions.","pos":[3234,3411],"source":" Functions in the Standard C Library may propagate an exception, as when `qsort` calls a comparison function that throws an exception, but they do not otherwise throw exceptions."},{"content":"See Also","pos":[3420,3428]},{"content":"STL Overview","pos":[3433,3445]},{"content":"Thread Safety in the C++ Standard Library","pos":[3506,3547]}],"content":"---\ntitle: \"C++ Library Conventions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Standard C++ Library, conventions\"\n  - \"classes [C++]\"\n  - \"functions [C++], library naming conventions\"\n  - \"naming conventions [C++], Standard C++ Library\"\n  - \"conventions [C++], Standard C++ Library\"\n  - \"function names [C++]\"\n  - \"coding conventions, Standard C++ Library\"\n  - \"naming conventions [C++], C++ library\"\nms.assetid: bf41b79a-2d53-4f46-8d05-779358335146\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C++ Library Conventions\nThe C++ library obeys much the same conventions as the Standard C Library, plus a few more outlined here.  \n  \n An implementation has certain latitude in how it declares types and functions in the C++ library:  \n  \n-   Names of functions in the Standard C library may have either extern #\"C++\" or extern \"C\" linkage. Include the appropriate Standard C header rather than declare a library entity inline.  \n  \n-   A member function name in a library class may have additional function signatures over those listed in this document. You can be sure that a function call described here behaves as expected, but you cannot reliably take the address of a library member function. (The type may not be what you expect.)  \n  \n-   A library class may have undocumented (nonvirtual) base classes. A class documented as derived from another class may, in fact, be derived from that class through other undocumented classes.  \n  \n-   A type defined as a synonym for some integer type may be the same as one of several different integer types.  \n  \n-   A bitmask type can be implemented as either an integer type or an enumeration. In either case, you can perform bitwise operations (such as `AND` and `OR`) on values of the same bitmask type. The elements `A` and `B` of a bitmask type are nonzero values such that `A` & `B` is zero.  \n  \n-   A library function that has no exception specification can throw an arbitrary exception, unless its definition clearly restricts such a possibility.  \n  \n On the other hand, there are some restrictions:  \n  \n-   The Standard C Library uses no masking macros. Only specific function signatures are reserved, not the names of the functions themselves.  \n  \n-   A library function name outside a class will not have additional, undocumented, function signatures. You can reliably take its address.  \n  \n-   Base classes and member functions described as virtual are assuredly virtual, while those described as nonvirtual are assuredly nonvirtual.  \n  \n-   Two types defined by the C++ library are always different unless this document explicitly suggests otherwise.  \n  \n-   Functions supplied by the library, including the default versions of replaceable functions, can throw *at most* those exceptions listed in any exception specification. No destructors supplied by the library throw exceptions. Functions in the Standard C Library may propagate an exception, as when `qsort` calls a comparison function that throws an exception, but they do not otherwise throw exceptions.  \n  \n## See Also  \n [STL Overview](../standard-library/cpp-standard-library-overview.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}