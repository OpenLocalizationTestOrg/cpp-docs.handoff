{"nodes":[{"pos":[12,46],"content":"C Storage Classes | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C Storage Classes | Microsoft Docs","pos":[0,34]}]},{"content":"C Storage Classes","pos":[742,759]},{"content":"The \"storage class\" of a variable determines whether the item has a \"global\" or \"local\" lifetime.","pos":[760,857]},{"content":"C calls these two lifetimes \"static\" and \"automatic.\"","pos":[858,911]},{"content":"An item with a global lifetime exists and has a value throughout the execution of the program.","pos":[912,1006]},{"content":"All functions have global lifetimes.","pos":[1007,1043]},{"content":"Automatic variables, or variables with local lifetimes, are allocated new storage each time execution control passes to the block in which they are defined.","pos":[1050,1206]},{"content":"When execution returns, the variables no longer have meaningful values.","pos":[1207,1278]},{"content":"C provides the following storage-class specifiers:","pos":[1285,1335]},{"content":"Syntax","pos":[1344,1350]},{"content":"<bpt id=\"p1\">*</bpt>storage-class-specifier<ept id=\"p1\">*</ept>:","pos":[1354,1380],"source":"*storage-class-specifier*:"},{"content":"auto","pos":[1386,1390]},{"content":"register","pos":[1401,1409]},{"content":"static","pos":[1420,1426]},{"content":"extern","pos":[1437,1443]},{"content":"typedef","pos":[1454,1461]},{"pos":[1470,1539],"content":"<bpt id=\"p1\">**</bpt>__declspec<ept id=\"p1\">**</ept> ( <bpt id=\"p2\">*</bpt>extended-decl-modifier-seq<ept id=\"p2\">*</ept> ) /* Microsoft Specific","source":"**__declspec** ( *extended-decl-modifier-seq* ) /* Microsoft Specific "},{"content":"Except for <ph id=\"ph1\">`__declspec`</ph>, you can use only one <bpt id=\"p1\">*</bpt>storage-class-specifier<ept id=\"p1\">*</ept> in the <bpt id=\"p2\">*</bpt>declaration-specifier<ept id=\"p2\">*</ept> in a declaration.","pos":[1550,1670],"source":"Except for `__declspec`, you can use only one *storage-class-specifier* in the *declaration-specifier* in a declaration."},{"content":"If no storage-class specification is made, declarations within a block create automatic objects.","pos":[1671,1767]},{"content":"Items declared with the <bpt id=\"p1\">**</bpt>auto<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>register<ept id=\"p2\">**</ept> specifier have local lifetimes.","pos":[1774,1854],"source":"Items declared with the **auto** or **register** specifier have local lifetimes."},{"content":"Items declared with the <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`extern`</ph> specifier have global lifetimes.","pos":[1855,1934],"source":" Items declared with the **static** or `extern` specifier have global lifetimes."},{"content":"Since <ph id=\"ph1\">`typedef`</ph> and <ph id=\"ph2\">`__declspec`</ph> are semantically different from the other four <bpt id=\"p1\">*</bpt>storage-class-specifier<ept id=\"p1\">*</ept> terminals, they are discussed separately.","pos":[1941,2088],"source":"Since `typedef` and `__declspec` are semantically different from the other four *storage-class-specifier* terminals, they are discussed separately."},{"content":"For specific information on <ph id=\"ph1\">`typedef`</ph>, see <bpt id=\"p1\">[</bpt>Typedef Declarations<ept id=\"p1\">](../c-language/typedef-declarations.md)</ept>.","pos":[2089,2194],"source":" For specific information on `typedef`, see [Typedef Declarations](../c-language/typedef-declarations.md)."},{"content":"For specific information on <ph id=\"ph1\">`__declspec`</ph>, see <bpt id=\"p1\">[</bpt>Extended Storage-Class Attributes<ept id=\"p1\">](../c-language/c-extended-storage-class-attributes.md)</ept>.","pos":[2195,2331],"source":" For specific information on `__declspec`, see [Extended Storage-Class Attributes](../c-language/c-extended-storage-class-attributes.md)."},{"content":"The placement of variable and function declarations within source files also affects storage class and visibility.","pos":[2338,2452]},{"content":"Declarations outside all function definitions are said to appear at the \"external level.\"","pos":[2453,2542]},{"content":"Declarations within function definitions appear at the \"internal level.\"","pos":[2543,2615]},{"content":"The exact meaning of each storage-class specifier depends on two factors:","pos":[2622,2695]},{"content":"Whether the declaration appears at the external or internal level","pos":[2705,2770]},{"content":"Whether the item being declared is a variable or a function","pos":[2780,2839]},{"content":"<bpt id=\"p1\">[</bpt>Storage-Class Specifiers for External-Level Declarations<ept id=\"p1\">](../c-language/storage-class-specifiers-for-external-level-declarations.md)</ept> and <bpt id=\"p2\">[</bpt>Storage-Class Specifiers for Internal-Level Declarations<ept id=\"p2\">](../c-language/storage-class-specifiers-for-internal-level-declarations.md)</ept> describe the <bpt id=\"p3\">*</bpt>storage-class-specifier<ept id=\"p3\">*</ept> terminals in each kind of declaration and explain the default behavior when the <bpt id=\"p4\">*</bpt>storage-class-specifier<ept id=\"p4\">*</ept> is omitted from a variable.","pos":[2846,3290],"source":"[Storage-Class Specifiers for External-Level Declarations](../c-language/storage-class-specifiers-for-external-level-declarations.md) and [Storage-Class Specifiers for Internal-Level Declarations](../c-language/storage-class-specifiers-for-internal-level-declarations.md) describe the *storage-class-specifier* terminals in each kind of declaration and explain the default behavior when the *storage-class-specifier* is omitted from a variable."},{"content":"<bpt id=\"p1\">[</bpt>Storage-Class Specifiers with Function Declarations<ept id=\"p1\">](../c-language/storage-class-specifiers-with-function-declarations.md)</ept> discusses storage-class specifiers used with functions.","pos":[3291,3470],"source":"[Storage-Class Specifiers with Function Declarations](../c-language/storage-class-specifiers-with-function-declarations.md) discusses storage-class specifiers used with functions."},{"content":"See Also","pos":[3479,3487]},{"content":"Declarations and Types","pos":[3492,3514]}],"content":"---\ntitle: \"C Storage Classes | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"static variables, lifetime\"\n  - \"storage classes\"\n  - \"lifetime, variables\"\n  - \"specifiers, storage class\"\n  - \"storage class specifiers, C storage classes\"\n  - \"storage duration\"\nms.assetid: 893fb929-f7a9-43dc-a0b3-29cb1ef845c1\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C Storage Classes\nThe \"storage class\" of a variable determines whether the item has a \"global\" or \"local\" lifetime. C calls these two lifetimes \"static\" and \"automatic.\" An item with a global lifetime exists and has a value throughout the execution of the program. All functions have global lifetimes.  \n  \n Automatic variables, or variables with local lifetimes, are allocated new storage each time execution control passes to the block in which they are defined. When execution returns, the variables no longer have meaningful values.  \n  \n C provides the following storage-class specifiers:  \n  \n## Syntax  \n *storage-class-specifier*:  \n **auto**  \n  \n **register**  \n  \n **static**  \n  \n **extern**  \n  \n **typedef**  \n  \n **__declspec** ( *extended-decl-modifier-seq* ) /* Microsoft Specific \\*/  \n  \n Except for `__declspec`, you can use only one *storage-class-specifier* in the *declaration-specifier* in a declaration. If no storage-class specification is made, declarations within a block create automatic objects.  \n  \n Items declared with the **auto** or **register** specifier have local lifetimes. Items declared with the **static** or `extern` specifier have global lifetimes.  \n  \n Since `typedef` and `__declspec` are semantically different from the other four *storage-class-specifier* terminals, they are discussed separately. For specific information on `typedef`, see [Typedef Declarations](../c-language/typedef-declarations.md). For specific information on `__declspec`, see [Extended Storage-Class Attributes](../c-language/c-extended-storage-class-attributes.md).  \n  \n The placement of variable and function declarations within source files also affects storage class and visibility. Declarations outside all function definitions are said to appear at the \"external level.\" Declarations within function definitions appear at the \"internal level.\"  \n  \n The exact meaning of each storage-class specifier depends on two factors:  \n  \n-   Whether the declaration appears at the external or internal level  \n  \n-   Whether the item being declared is a variable or a function  \n  \n [Storage-Class Specifiers for External-Level Declarations](../c-language/storage-class-specifiers-for-external-level-declarations.md) and [Storage-Class Specifiers for Internal-Level Declarations](../c-language/storage-class-specifiers-for-internal-level-declarations.md) describe the *storage-class-specifier* terminals in each kind of declaration and explain the default behavior when the *storage-class-specifier* is omitted from a variable. [Storage-Class Specifiers with Function Declarations](../c-language/storage-class-specifiers-with-function-declarations.md) discusses storage-class specifiers used with functions.  \n  \n## See Also  \n [Declarations and Types](../c-language/declarations-and-types.md)"}