{"nodes":[{"pos":[12,61],"content":"Expressions with Unary Operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Expressions with Unary Operators | Microsoft Docs","pos":[0,49]}]},{"content":"Expressions with Unary Operators","pos":[690,722]},{"content":"Unary operators act on only one operand in an expression.","pos":[723,780]},{"content":"The unary operators are as follows:","pos":[781,816]},{"content":"Indirection operator (*)","pos":[827,851]},{"content":"Address-of operator (&amp;)","pos":[900,923],"source":"Address-of operator (&)"},{"content":"Unary plus operator (+)","pos":[970,993]},{"content":"Unary negation operator (–)","pos":[1059,1086]},{"content":"Logical negation operator (!)","pos":[1152,1181]},{"content":"One's complement operator (~)","pos":[1237,1266]},{"content":"Prefix increment operator (++)","pos":[1321,1351]},{"content":"Prefix decrement operator (––)","pos":[1439,1469]},{"content":"Cast operator ()","pos":[1557,1573]},{"content":"sizeof operator","pos":[1617,1632]},{"content":"__uuidof operator","pos":[1671,1688]},{"content":"__alignof operator","pos":[1727,1745]},{"content":"new operator","pos":[1785,1797]},{"content":"delete operator","pos":[1837,1852]},{"content":"These operators have right-to-left associativity.","pos":[1891,1940]},{"content":"Unary expressions generally involve syntax that precedes a postfix or primary expression.","pos":[1941,2030]},{"content":"The following are the possible forms of unary expressions.","pos":[2037,2095]},{"content":"postfix-expression","pos":[2106,2124]},{"pos":[2141,2157],"content":"unary-expression"},{"pos":[2174,2190],"content":"unary-expression"},{"pos":[2201,2235],"content":"<bpt id=\"p1\">*</bpt>unary-operator<ept id=\"p1\">*</ept> <bpt id=\"p2\">*</bpt>cast-expression<ept id=\"p2\">*</ept>","source":"*unary-operator* *cast-expression*"},{"pos":[2255,2271],"content":"unary-expression"},{"pos":[2293,2302],"content":"type-name"},{"pos":[2330,2340],"content":"expression"},{"content":"allocation-expression","pos":[2356,2377]},{"content":"deallocation-expression","pos":[2389,2412]},{"content":"Any <bpt id=\"p1\">*</bpt>postfix-expression<ept id=\"p1\">*</ept> is considered a <bpt id=\"p2\">*</bpt>unary-expression<ept id=\"p2\">*</ept>, and because any primary expression is considered a <bpt id=\"p3\">*</bpt>postfix-expression<ept id=\"p3\">*</ept>, any primary expressions is considered a <bpt id=\"p4\">*</bpt>unary-expression<ept id=\"p4\">*</ept> also.","pos":[2420,2618],"source":"Any *postfix-expression* is considered a *unary-expression*, and because any primary expression is considered a *postfix-expression*, any primary expressions is considered a *unary-expression* also."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Postfix Expressions<ept id=\"p1\">](../cpp/postfix-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Primary Expressions<ept id=\"p2\">](../cpp/primary-expressions.md)</ept>.","pos":[2619,2755],"source":" For more information, see [Postfix Expressions](../cpp/postfix-expressions.md) and [Primary Expressions](../cpp/primary-expressions.md)."},{"pos":[2762,2830],"content":"A <bpt id=\"p1\">*</bpt>unary-operator<ept id=\"p1\">*</ept> consists of one or more of the following symbols:","source":"A *unary-operator* consists of one or more of the following symbols: "},{"content":"The <bpt id=\"p1\">*</bpt>cast-expression<ept id=\"p1\">*</ept> is a unary expression with an optional cast to change the type.","pos":[2855,2940],"source":"The *cast-expression* is a unary expression with an optional cast to change the type."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Cast Operator: ()<ept id=\"p1\">](../cpp/cast-operator-parens.md)</ept>.","pos":[2941,3018],"source":" For more information see [Cast Operator: ()](../cpp/cast-operator-parens.md)."},{"content":"An <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> can be any expression.","pos":[3025,3063],"source":"An *expression* can be any expression."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Expressions<ept id=\"p1\">](../cpp/expressions-cpp.md)</ept>.","pos":[3064,3131],"source":" For more information, see [Expressions](../cpp/expressions-cpp.md)."},{"content":"The <bpt id=\"p1\">*</bpt>allocation-expression<ept id=\"p1\">*</ept> refers to the <ph id=\"ph1\">`new`</ph> operator.","pos":[3138,3195],"source":"The *allocation-expression* refers to the `new` operator."},{"content":"The <bpt id=\"p1\">*</bpt>deallocation-expression<ept id=\"p1\">*</ept> refers to the <ph id=\"ph1\">`delete`</ph> operator.","pos":[3196,3258],"source":" The *deallocation-expression* refers to the `delete` operator."},{"content":"For more information, see the links earlier in this topic.","pos":[3259,3317]},{"content":"See Also","pos":[3326,3334]},{"content":"Types of Expressions","pos":[3339,3359]}],"content":"---\ntitle: \"Expressions with Unary Operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"expressions [C++], unary operators\"\n  - \"unary operators, expressions with\"\n  - \"expressions [C++], operators\"\nms.assetid: 1217685b-b85d-4b48-9ff4-d90f56a26c1b\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Expressions with Unary Operators\nUnary operators act on only one operand in an expression. The unary operators are as follows:  \n  \n-   [Indirection operator (*)](../cpp/indirection-operator-star.md)  \n  \n-   [Address-of operator (&)](../cpp/address-of-operator-amp.md)  \n  \n-   [Unary plus operator (+)](../cpp/unary-plus-and-negation-operators-plus-and.md)  \n  \n-   [Unary negation operator (–)](../cpp/unary-plus-and-negation-operators-plus-and.md)  \n  \n-   [Logical negation operator (!)](../cpp/logical-negation-operator-exclpt.md)  \n  \n-   [One's complement operator (~)](../cpp/one-s-complement-operator-tilde.md)  \n  \n-   [Prefix increment operator (++)](../cpp/prefix-increment-and-decrement-operators-increment-and-decrement.md)  \n  \n-   [Prefix decrement operator (––)](../cpp/prefix-increment-and-decrement-operators-increment-and-decrement.md)  \n  \n-   [Cast operator ()](../cpp/cast-operator-parens.md)  \n  \n-   [sizeof operator](../cpp/sizeof-operator.md)  \n  \n-   [__uuidof operator](../cpp/uuidof-operator.md)  \n  \n-   [__alignof operator](../cpp/alignof-operator.md)  \n  \n-   [new operator](../cpp/new-operator-cpp.md)  \n  \n-   [delete operator](../cpp/delete-operator-cpp.md)  \n  \n These operators have right-to-left associativity. Unary expressions generally involve syntax that precedes a postfix or primary expression.  \n  \n The following are the possible forms of unary expressions.  \n  \n-   *postfix-expression*  \n  \n-   `++` *unary-expression*  \n  \n-   `––` *unary-expression*  \n  \n-   *unary-operator* *cast-expression*  \n  \n-   `sizeof` *unary-expression*  \n  \n-   `sizeof(` *type-name* `)`  \n  \n-   `decltype(` *expression* `)`  \n  \n-   *allocation-expression*  \n  \n-   *deallocation-expression*  \n  \n Any *postfix-expression* is considered a *unary-expression*, and because any primary expression is considered a *postfix-expression*, any primary expressions is considered a *unary-expression* also. For more information, see [Postfix Expressions](../cpp/postfix-expressions.md) and [Primary Expressions](../cpp/primary-expressions.md).  \n  \n A *unary-operator* consists of one or more of the following symbols: `* &``+``–``!``~`  \n  \n The *cast-expression* is a unary expression with an optional cast to change the type. For more information see [Cast Operator: ()](../cpp/cast-operator-parens.md).  \n  \n An *expression* can be any expression. For more information, see [Expressions](../cpp/expressions-cpp.md).  \n  \n The *allocation-expression* refers to the `new` operator. The *deallocation-expression* refers to the `delete` operator. For more information, see the links earlier in this topic.  \n  \n## See Also  \n [Types of Expressions](../cpp/types-of-expressions.md)"}