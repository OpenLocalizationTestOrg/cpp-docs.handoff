{"nodes":[{"pos":[12,34],"content":"_lock | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_lock | Microsoft Docs","pos":[0,22]}]},{"content":"_lock","pos":[861,866]},{"content":"Acquires a multi-thread lock.","pos":[867,896]},{"pos":[904,1011],"content":"[!IMPORTANT]\n This function is obsolete. Beginning in Visual Studio 2015, it is not available in the CRT.","leadings":["","> "],"nodes":[{"content":" This function is obsolete. Beginning in Visual Studio 2015, it is not available in the CRT.","pos":[13,105],"nodes":[{"content":"This function is obsolete.","pos":[1,27]},{"content":"Beginning in Visual Studio 2015, it is not available in the CRT.","pos":[28,92]}]}]},{"content":"Syntax","pos":[1020,1026]},{"content":"Parameters","pos":[1095,1105]},{"content":"[in]","pos":[1109,1113]},{"content":"The identifier of the lock to acquire.","pos":[1127,1165]},{"content":"Remarks","pos":[1174,1181]},{"content":"If the lock has already been acquired, this method acquires the lock anyway and causes an internal C run-time (CRT) error.","pos":[1185,1307]},{"content":"If the method cannot acquire a lock, it exits with a fatal error and sets the error code to <ph id=\"ph1\">`_RT_LOCK`</ph>.","pos":[1308,1411],"source":" If the method cannot acquire a lock, it exits with a fatal error and sets the error code to `_RT_LOCK`."},{"content":"Requirements","pos":[1420,1432]},{"pos":[1436,1455],"content":"<bpt id=\"p1\">**</bpt>Source:<ept id=\"p1\">**</ept> mlock.c","source":"**Source:** mlock.c"},{"content":"See Also","pos":[1464,1472]},{"content":"Alphabetical Function Reference","pos":[1477,1508]},{"content":"_unlock","pos":[1586,1593]}],"content":"---\ntitle: \"_lock | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_lock\"\napilocation: \n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcrt.dll\"\n  - \"msvcr120_clr0400.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"lock\"\n  - \"_lock\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"lock function\"\n  - \"_lock function\"\nms.assetid: 29f77c37-30de-4b3d-91b6-030216e645a6\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _lock\nAcquires a multi-thread lock.  \n  \n> [!IMPORTANT]\n>  This function is obsolete. Beginning in Visual Studio 2015, it is not available in the CRT.  \n  \n## Syntax  \n  \n```  \nvoid __cdecl _lock  \n   int locknum  \n);  \n```  \n  \n#### Parameters  \n [in] `locknum`  \n The identifier of the lock to acquire.  \n  \n## Remarks  \n If the lock has already been acquired, this method acquires the lock anyway and causes an internal C run-time (CRT) error. If the method cannot acquire a lock, it exits with a fatal error and sets the error code to `_RT_LOCK`.  \n  \n## Requirements  \n **Source:** mlock.c  \n  \n## See Also  \n [Alphabetical Function Reference](../c-runtime-library/reference/crt-alphabetical-function-reference.md)   \n [_unlock](../c-runtime-library/unlock.md)"}