{"nodes":[{"pos":[12,68],"content":"Accessing C or C++ Data in __asm Blocks | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Accessing C or C++ Data in __asm Blocks | Microsoft Docs","pos":[0,56]}]},{"content":"Accessing C or C++ Data in __asm Blocks","pos":[731,770]},{"content":"Microsoft Specific","pos":[774,792]},{"content":"A great convenience of inline assembly is the ability to refer to C or C++ variables by name.","pos":[796,889]},{"content":"An <ph id=\"ph1\">`__asm`</ph> block can refer to any symbols, including variable names, that are in scope where the block appears.","pos":[890,1001],"source":" An `__asm` block can refer to any symbols, including variable names, that are in scope where the block appears."},{"content":"For instance, if the C variable <ph id=\"ph1\">`var`</ph> is in scope, the instruction","pos":[1002,1068],"source":" For instance, if the C variable `var` is in scope, the instruction"},{"pos":[1111,1144],"content":"stores the value of <ph id=\"ph1\">`var`</ph> in EAX.","source":"stores the value of `var` in EAX."},{"content":"If a class, structure, or union member has a unique name, an <ph id=\"ph1\">`__asm`</ph> block can refer to it using only the member name, without specifying the variable or <ph id=\"ph2\">`typedef`</ph> name before the period (<bpt id=\"p1\">**</bpt>.<ept id=\"p1\">**</ept>) operator.","pos":[1151,1355],"source":"If a class, structure, or union member has a unique name, an `__asm` block can refer to it using only the member name, without specifying the variable or `typedef` name before the period (**.**) operator."},{"content":"If the member name is not unique, however, you must place a variable or <ph id=\"ph1\">`typedef`</ph> name immediately before the period operator.","pos":[1356,1482],"source":" If the member name is not unique, however, you must place a variable or `typedef` name immediately before the period operator."},{"content":"For example, the structure types in the following sample share <ph id=\"ph1\">`same_name`</ph> as their member name:.","pos":[1483,1580],"source":" For example, the structure types in the following sample share `same_name` as their member name:."},{"content":"If you declare variables with the types","pos":[1587,1626]},{"content":"all references to the member <ph id=\"ph1\">`same_name`</ph> must use the variable name because <ph id=\"ph2\">`same_name`</ph> is not unique.","pos":[1699,1801],"source":"all references to the member `same_name` must use the variable name because `same_name` is not unique."},{"content":"But the member <ph id=\"ph1\">`weasel`</ph> has a unique name, so you can refer to it using only its member name:","pos":[1802,1895],"source":" But the member `weasel` has a unique name, so you can refer to it using only its member name:"},{"content":"Note that omitting the variable name is merely a coding convenience.","pos":[2396,2464]},{"content":"The same assembly instructions are generated whether or not the variable name is present.","pos":[2465,2554]},{"content":"You can access data members in C++ without regard to access restrictions.","pos":[2561,2634]},{"content":"However, you cannot call member functions.","pos":[2635,2677]},{"content":"END Microsoft Specific","pos":[2686,2708]},{"content":"See Also","pos":[2719,2727]},{"content":"Using C or C++ in __asm Blocks","pos":[2732,2762]}],"content":"---\ntitle: \"Accessing C or C++ Data in __asm Blocks | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"data members [C++], in __asm blocks\"\n  - \"data access [C++], in __asm blocks\"\n  - \"__asm keyword [C++], data members\"\n  - \"structure types in __asm blocks\"\nms.assetid: e99f5a28-0381-4090-8ece-6af8f2436a49\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Accessing C or C++ Data in __asm Blocks\n## Microsoft Specific  \n A great convenience of inline assembly is the ability to refer to C or C++ variables by name. An `__asm` block can refer to any symbols, including variable names, that are in scope where the block appears. For instance, if the C variable `var` is in scope, the instruction  \n  \n```  \n__asm mov eax, var  \n```  \n  \n stores the value of `var` in EAX.  \n  \n If a class, structure, or union member has a unique name, an `__asm` block can refer to it using only the member name, without specifying the variable or `typedef` name before the period (**.**) operator. If the member name is not unique, however, you must place a variable or `typedef` name immediately before the period operator. For example, the structure types in the following sample share `same_name` as their member name:.  \n  \n If you declare variables with the types  \n  \n```  \nstruct first_type hal;  \nstruct second_type oat;  \n```  \n  \n all references to the member `same_name` must use the variable name because `same_name` is not unique. But the member `weasel` has a unique name, so you can refer to it using only its member name:  \n  \n```  \n// InlineAssembler_Accessing_C_asm_Blocks.cpp  \n// processor: x86  \n#include <stdio.h>  \nstruct first_type  \n{  \n   char *weasel;  \n   int same_name;  \n};  \n  \nstruct second_type  \n{  \n   int wonton;  \n   long same_name;  \n};  \n  \nint main()  \n{  \n   struct first_type hal;  \n   struct second_type oat;  \n  \n   __asm  \n   {  \n      lea ebx, hal  \n      mov ecx, [ebx]hal.same_name ; Must use 'hal'  \n      mov esi, [ebx].weasel       ; Can omit 'hal'  \n   }  \n   return 0;  \n}  \n```  \n  \n Note that omitting the variable name is merely a coding convenience. The same assembly instructions are generated whether or not the variable name is present.  \n  \n You can access data members in C++ without regard to access restrictions. However, you cannot call member functions.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Using C or C++ in __asm Blocks](../../assembler/inline/using-c-or-cpp-in-asm-blocks.md)"}