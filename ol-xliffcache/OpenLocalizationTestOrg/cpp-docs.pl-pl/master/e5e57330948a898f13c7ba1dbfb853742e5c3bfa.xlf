<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5e57330948a898f13c7ba1dbfb853742e5c3bfa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\strtol-wcstol-strtol-l-wcstol-l.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">67cd114ae3eb82757470f9d95d0d775f51b6a2c5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">776dda786de1f72efb2de34310b55376b23cf80e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>strtol, wcstol, _strtol_l, _wcstol_l | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>strtol, wcstol, _strtol_l, _wcstol_l</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Convert strings to a long-integer value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Null-terminated string to convert.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Pointer to character that stops scan.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Number base to use.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Locale to use.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>returns the value represented in the string <ph id="ph1">`nptr`</ph>, except when the representation would cause an overflow, in which case it returns <ph id="ph2">`LONG_MAX`</ph> or <ph id="ph3">`LONG_MIN`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>returns 0 if no conversion can be performed.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>returns values analogously to <ph id="ph1">`strtol`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For both functions, <ph id="ph1">`errno`</ph> is set to <ph id="ph2">`ERANGE`</ph> if overflow or underflow occurs.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> for more information on these and other return codes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`strtol`</ph> function converts <ph id="ph2">`nptr`</ph> to a <ph id="ph3">`long`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>stops reading the string <ph id="ph1">`nptr`</ph> at the first character it cannot recognize as part of a number.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This may be the terminating null character, or it may be the first numeric character greater than or equal to <ph id="ph1">`base`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>is a wide-character version of <ph id="ph1">`strtol`</ph>; its <ph id="ph2">`nptr`</ph> argument is a wide-character string.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These functions behave identically otherwise.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The current locale's <ph id="ph1">`LC_NUMERIC`</ph> category setting determines recognition of the radix character in <ph id="ph2">`nptr`</ph><bpt id="p1">*</bpt>;<ept id="p1">*</ept> for more information, see <bpt id="p2">[</bpt>setlocale<ept id="p2">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The functions without the <ph id="ph1">`_l`</ph> suffix use the current locale; <ph id="ph2">`_strtol_l`</ph> and <ph id="ph3">`_wcstol_l`</ph> are identical to the corresponding functions without the <ph id="ph4">`_l`</ph> suffix except that they use the locale passed in instead.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Locale<ept id="p1">](../../c-runtime-library/locale.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`endptr`</ph> is not <ph id="ph2">`NULL`</ph>, a pointer to the character that stopped the scan is stored at the location pointed to by <ph id="ph3">`endptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If no conversion can be performed (no valid digits were found or an invalid base was specified), the value of <ph id="ph1">`nptr`</ph> is stored at the location pointed to by <ph id="ph2">`endptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>expects <ph id="ph1">`nptr`</ph> to point to a string of the following form:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>[<ph id="ph1">`whitespace`</ph>] [{<ph id="ph2">`+`</ph> &amp;#124; <ph id="ph3">`â€“`</ph>}] [<ph id="ph4">`0`</ph> [{ <ph id="ph5">`x`</ph> &amp;#124; <ph id="ph6">`X`</ph> }]] [<ph id="ph7">`digits`</ph>]</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`whitespace`</ph> may consist of space and tab characters, which are ignored; <ph id="ph2">`digits`</ph> are one or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The first character that does not fit this form stops the scan.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`base`</ph> is between 2 and 36, then it is used as the base of the number.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`base`</ph> is 0, the initial characters of the string pointed to by <ph id="ph2">`nptr`</ph> are used to determine the base.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the first character is 0 and the second character is not 'x' or 'X', the string is interpreted as an octal integer.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the first character is '0' and the second character is 'x' or 'X', the string is interpreted as a hexadecimal integer.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the first character is '1' through '9', the string is interpreted as a decimal integer.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The letters 'a' through 'z' (or 'A' through 'Z') are assigned the values 10 through 35; only letters whose assigned values are less than <ph id="ph1">`base`</ph> are permitted.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The first character outside the range of the base stops the scan.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`base`</ph> is 0 and the first character scanned is '0', an octal integer is assumed and an '8' or '9' character will stop the scan.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>stdlib.h&gt;</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>stdlib.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>stdlib.h&gt;</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>strtod<ept id="p1">](../../c-runtime-library/reference/strtod-strtod-l-wcstod-wcstod-l.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>System::Convert::ToInt64</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Data Conversion</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Locale</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>localeconv</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>setlocale, _wsetlocale</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>String to Numeric Value Functions</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>strtod, _strtod_l, wcstod, _wcstod_l</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>strtoul, _strtoul_l, wcstoul, _wcstoul_l</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>atof, _atof_l, _wtof, _wtof_l</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>