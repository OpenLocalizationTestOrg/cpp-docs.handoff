{"nodes":[{"pos":[12,92],"content":"Using Database, OLE, and Sockets Extension DLLs in Regular DLLs | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Database, OLE, and Sockets Extension DLLs in Regular DLLs | Microsoft Docs","pos":[0,80]}]},{"content":"Using Database, OLE, and Sockets Extension DLLs in Regular DLLs","pos":[679,742]},{"content":"When using an extension DLL from a regular DLL, if the extension DLL is not wired into the <bpt id=\"p1\">**</bpt>CDynLinkLibrary<ept id=\"p1\">**</ept> object chain of the regular DLL, you might run into one or more of a set of related problems.","pos":[743,947],"source":"When using an extension DLL from a regular DLL, if the extension DLL is not wired into the **CDynLinkLibrary** object chain of the regular DLL, you might run into one or more of a set of related problems."},{"content":"Because the debug versions of the MFC Database, OLE, and Sockets support DLLs are implemented as extension DLLs, you might see similar problems if you are using these MFC features, even if you are not explicitly using any of your own extension DLLs.","pos":[948,1197]},{"content":"Some symptoms are:","pos":[1198,1216]},{"content":"When attempting to deserialize an object of a type of class defined in the extension DLL, the message \"Warning: Cannot load CYourClass from archive.","pos":[1226,1374]},{"content":"Class not defined.\"","pos":[1375,1394]},{"content":"appears in the TRACE debug window and the object fails to serialize.","pos":[1395,1463]},{"content":"An exception indicating bad class might be thrown.","pos":[1473,1523]},{"pos":[1533,1665],"content":"Resources stored in the extension DLL fail to load because <ph id=\"ph1\">`AfxFindResourceHandle`</ph> returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> or an incorrect resource handle.","source":"Resources stored in the extension DLL fail to load because `AfxFindResourceHandle` returns **NULL** or an incorrect resource handle."},{"pos":[1694,1882],"content":", <ph id=\"ph1\">`DllCanUnloadNow`</ph>, and the <ph id=\"ph2\">`UpdateRegistry`</ph>, <ph id=\"ph3\">`Revoke`</ph>, <ph id=\"ph4\">`RevokeAll`</ph>, and <ph id=\"ph5\">`RegisterAll`</ph> member functions of <ph id=\"ph6\">`COleObjectFactory`</ph> fail to locate a class factory defined in the extension DLL.","source":", `DllCanUnloadNow`, and the `UpdateRegistry`, `Revoke`, `RevokeAll`, and `RegisterAll` member functions of `COleObjectFactory` fail to locate a class factory defined in the extension DLL."},{"pos":[1913,1964],"content":"does not work for any classes in the extension DLL."},{"content":"Standard MFC database, sockets, or OLE resources fail to load.","pos":[1974,2036]},{"content":"For example, <bpt id=\"p1\">**</bpt>AfxLoadString<ept id=\"p1\">**</ept>(<bpt id=\"p2\">**</bpt>AFX_IDP_SQL_CONNECT_FAIL<ept id=\"p2\">**</ept>) returns an empty string, even when the regular DLL is properly using the MFC Database classes.","pos":[2037,2192],"source":" For example, **AfxLoadString**(**AFX_IDP_SQL_CONNECT_FAIL**) returns an empty string, even when the regular DLL is properly using the MFC Database classes."},{"content":"The solution to these problems is to create and export an initialization function in the extension DLL that creates a <bpt id=\"p1\">**</bpt>CDynLinkLibrary<ept id=\"p1\">**</ept> object.","pos":[2199,2344],"source":"The solution to these problems is to create and export an initialization function in the extension DLL that creates a **CDynLinkLibrary** object."},{"content":"Call this initialization function exactly once from each regular DLL that uses the extension DLL.","pos":[2345,2442]},{"content":"MFC OLE, MFC Database (or DAO), or MFC Sockets Support","pos":[2451,2505]},{"content":"If you are using any MFC OLE, MFC Database (or DAO), or MFC Sockets support in your regular DLL, respectively, the MFC debug extension DLLs MFCOxxD.dll, MFCDxxD.dll, and MFCNxxD.dll (where xx is the version number) are linked automatically.","pos":[2509,2749]},{"content":"You must call a predefined initialization function for each of these DLLs that you are using.","pos":[2750,2843]},{"content":"For database support, add a call to <ph id=\"ph1\">`AfxDbInitModule`</ph> to your regular DLL's <ph id=\"ph2\">`CWinApp::InitInstance`</ph> function.","pos":[2850,2959],"source":"For database support, add a call to `AfxDbInitModule` to your regular DLL's `CWinApp::InitInstance` function."},{"content":"Make sure this call occurs before any base-class call or any added code which accesses the MFCDxxD.dll.","pos":[2960,3063]},{"content":"This function takes no parameters and returns void.","pos":[3064,3115]},{"content":"For OLE support, add a call to <ph id=\"ph1\">`AfxOleInitModule`</ph> to your regular DLL's <ph id=\"ph2\">`CWinApp::InitInstance`</ph>.","pos":[3122,3218],"source":"For OLE support, add a call to `AfxOleInitModule` to your regular DLL's `CWinApp::InitInstance`."},{"content":"Note that the <bpt id=\"p1\">**</bpt>COleControlModule InitInstance<ept id=\"p1\">**</ept> function calls <ph id=\"ph1\">`AfxOleInitModule`</ph> already, so if you are building an OLE control and are using <ph id=\"ph2\">`COleControlModule`</ph>, you should not add this call to <ph id=\"ph3\">`AfxOleInitModule`</ph>.","pos":[3219,3435],"source":" Note that the **COleControlModule InitInstance** function calls `AfxOleInitModule` already, so if you are building an OLE control and are using `COleControlModule`, you should not add this call to `AfxOleInitModule`."},{"pos":[3442,3542],"content":"For Sockets support, add a call to <ph id=\"ph1\">`AfxNetInitModule`</ph> to your regular DLL's <ph id=\"ph2\">`CWinApp::InitInstance`</ph>.","source":"For Sockets support, add a call to `AfxNetInitModule` to your regular DLL's `CWinApp::InitInstance`."},{"content":"Note that release builds of MFC DLLs and applications do not use separate DLLs for database, sockets, or OLE support.","pos":[3549,3666]},{"content":"However, it is safe to call these initialization functions in release mode.","pos":[3667,3742]},{"content":"CDynLinkLibrary Objects","pos":[3751,3774]},{"content":"During each of the operations mentioned at the beginning of this topic, MFC needs to search for a desired value or object.","pos":[3778,3900]},{"content":"For example, during deserialization, MFC needs to search through all the currently available run-time classes to match objects in the archive with their proper run-time class.","pos":[3901,4076]},{"content":"As a part of these searches, MFC scans through all the extension DLLs in use by walking a chain of <bpt id=\"p1\">**</bpt>CDynLinkLibrary<ept id=\"p1\">**</ept> objects.","pos":[4083,4210],"source":"As a part of these searches, MFC scans through all the extension DLLs in use by walking a chain of **CDynLinkLibrary** objects."},{"content":"<bpt id=\"p1\">**</bpt>CDynLinkLibrary<ept id=\"p1\">**</ept> objects attach automatically to a chain during their construction and are created by each extension DLL in turn during initialization.","pos":[4211,4365],"source":"**CDynLinkLibrary** objects attach automatically to a chain during their construction and are created by each extension DLL in turn during initialization."},{"content":"In addition, every module (application or regular DLL) has its own chain of <bpt id=\"p1\">**</bpt>CDynLinkLibrary<ept id=\"p1\">**</ept> objects.","pos":[4366,4470],"source":" In addition, every module (application or regular DLL) has its own chain of **CDynLinkLibrary** objects."},{"content":"For an extension DLL to get wired into a <bpt id=\"p1\">**</bpt>CDynLinkLibrary<ept id=\"p1\">**</ept> chain, it must create a <bpt id=\"p2\">**</bpt>CDynLinkLibrary<ept id=\"p2\">**</ept> object in the context of every module that uses the extension DLL.","pos":[4477,4648],"source":"For an extension DLL to get wired into a **CDynLinkLibrary** chain, it must create a **CDynLinkLibrary** object in the context of every module that uses the extension DLL."},{"content":"Therefore, if an extension DLL is going to be used from regular DLLs, it must provide an exported initialization function that creates a <bpt id=\"p1\">**</bpt>CDynLinkLibrary<ept id=\"p1\">**</ept> object.","pos":[4649,4813],"source":" Therefore, if an extension DLL is going to be used from regular DLLs, it must provide an exported initialization function that creates a **CDynLinkLibrary** object."},{"content":"Every regular DLL that uses the extension DLL must call the exported initialization function.","pos":[4814,4907]},{"content":"If an extension DLL is only going to be used from an MFC application (.exe) and never from a regular DLL, then it is sufficient to create the <bpt id=\"p1\">**</bpt>CDynLinkLibrary<ept id=\"p1\">**</ept> object in the extension DLL's <ph id=\"ph1\">`DllMain`</ph>.","pos":[4914,5116],"source":"If an extension DLL is only going to be used from an MFC application (.exe) and never from a regular DLL, then it is sufficient to create the **CDynLinkLibrary** object in the extension DLL's `DllMain`."},{"content":"This is what the MFC DLL Wizard extension DLL code does.","pos":[5117,5173]},{"content":"When loading an extension DLL implicitly, <ph id=\"ph1\">`DllMain`</ph> loads and executes before the application ever starts.","pos":[5174,5280],"source":" When loading an extension DLL implicitly, `DllMain` loads and executes before the application ever starts."},{"content":"Any <bpt id=\"p1\">**</bpt>CDynLinkLibrary<ept id=\"p1\">**</ept> creations are wired into a default chain that the MFC DLL reserves for an MFC application.","pos":[5281,5395],"source":" Any **CDynLinkLibrary** creations are wired into a default chain that the MFC DLL reserves for an MFC application."},{"content":"Note that it is a bad idea to have multiple <bpt id=\"p1\">**</bpt>CDynLinkLibrary<ept id=\"p1\">**</ept> objects from one extension DLL in any one chain, especially if the extension DLL will be dynamically unloaded from memory.","pos":[5402,5588],"source":"Note that it is a bad idea to have multiple **CDynLinkLibrary** objects from one extension DLL in any one chain, especially if the extension DLL will be dynamically unloaded from memory."},{"content":"Do not call the initialization function more than once from any one module.","pos":[5589,5664]},{"content":"Sample Code","pos":[5673,5684]},{"content":"This sample code assumes that the regular DLL is implicitly linking to the extension DLL.","pos":[5688,5777]},{"content":"This is accomplished by linking to the import library (.lib) of the extension DLL when building the regular DLL.","pos":[5778,5890]},{"content":"The following lines should be in the source of the extension DLL:","pos":[5897,5962]},{"content":"Be sure to export the <bpt id=\"p1\">**</bpt>InitYourExtDLL<ept id=\"p1\">**</ept> function.","pos":[6737,6787],"source":"Be sure to export the **InitYourExtDLL** function."},{"content":"This could be done using <bpt id=\"p1\">**</bpt>__declspec(dllexport)<ept id=\"p1\">**</ept> or in your DLL's .def file as follows:","pos":[6788,6877],"source":" This could be done using **__declspec(dllexport)** or in your DLL's .def file as follows:"},{"pos":[7051,7167],"content":"Add a call to the <ph id=\"ph1\">`InitInstance`</ph> member of the <ph id=\"ph2\">`CWinApp`</ph>-derived object in each regular DLL using the extension DLL:","source":"Add a call to the `InitInstance` member of the `CWinApp`-derived object in each regular DLL using the extension DLL:"},{"content":"What do you want to do?","pos":[7749,7772]},{"content":"Initialize an extension DLL","pos":[7783,7810]},{"content":"Initialize regular DLLs","pos":[7863,7886]},{"content":"What do you want to know more about?","pos":[7936,7972]},{"content":"Extension DLLs","pos":[7983,7997]},{"content":"Regular DLLs Statically Linked to MFC","pos":[8037,8074]},{"content":"Regular DLLs Dynamically Linked to MFC","pos":[8137,8175]},{"content":"Using MFC as Part of a DLL","pos":[8239,8265]},{"content":"DLL Version of MFC","pos":[8321,8339]},{"content":"See Also","pos":[8385,8393]},{"content":"Extension DLLs","pos":[8398,8412]}],"content":"---\ntitle: \"Using Database, OLE, and Sockets Extension DLLs in Regular DLLs | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"DLLs [C++], initializing\"\n  - \"DLLs [C++], extension\"\n  - \"DLLs [C++], regular\"\nms.assetid: 9f1d14a7-9e2a-4760-b3b6-db014fcdb7ff\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using Database, OLE, and Sockets Extension DLLs in Regular DLLs\nWhen using an extension DLL from a regular DLL, if the extension DLL is not wired into the **CDynLinkLibrary** object chain of the regular DLL, you might run into one or more of a set of related problems. Because the debug versions of the MFC Database, OLE, and Sockets support DLLs are implemented as extension DLLs, you might see similar problems if you are using these MFC features, even if you are not explicitly using any of your own extension DLLs. Some symptoms are:  \n  \n-   When attempting to deserialize an object of a type of class defined in the extension DLL, the message \"Warning: Cannot load CYourClass from archive. Class not defined.\" appears in the TRACE debug window and the object fails to serialize.  \n  \n-   An exception indicating bad class might be thrown.  \n  \n-   Resources stored in the extension DLL fail to load because `AfxFindResourceHandle` returns **NULL** or an incorrect resource handle.  \n  \n-   `DllGetClassObject`, `DllCanUnloadNow`, and the `UpdateRegistry`, `Revoke`, `RevokeAll`, and `RegisterAll` member functions of `COleObjectFactory` fail to locate a class factory defined in the extension DLL.  \n  \n-   `AfxDoForAllClasses` does not work for any classes in the extension DLL.  \n  \n-   Standard MFC database, sockets, or OLE resources fail to load. For example, **AfxLoadString**(**AFX_IDP_SQL_CONNECT_FAIL**) returns an empty string, even when the regular DLL is properly using the MFC Database classes.  \n  \n The solution to these problems is to create and export an initialization function in the extension DLL that creates a **CDynLinkLibrary** object. Call this initialization function exactly once from each regular DLL that uses the extension DLL.  \n  \n## MFC OLE, MFC Database (or DAO), or MFC Sockets Support  \n If you are using any MFC OLE, MFC Database (or DAO), or MFC Sockets support in your regular DLL, respectively, the MFC debug extension DLLs MFCOxxD.dll, MFCDxxD.dll, and MFCNxxD.dll (where xx is the version number) are linked automatically. You must call a predefined initialization function for each of these DLLs that you are using.  \n  \n For database support, add a call to `AfxDbInitModule` to your regular DLL's `CWinApp::InitInstance` function. Make sure this call occurs before any base-class call or any added code which accesses the MFCDxxD.dll. This function takes no parameters and returns void.  \n  \n For OLE support, add a call to `AfxOleInitModule` to your regular DLL's `CWinApp::InitInstance`. Note that the **COleControlModule InitInstance** function calls `AfxOleInitModule` already, so if you are building an OLE control and are using `COleControlModule`, you should not add this call to `AfxOleInitModule`.  \n  \n For Sockets support, add a call to `AfxNetInitModule` to your regular DLL's `CWinApp::InitInstance`.  \n  \n Note that release builds of MFC DLLs and applications do not use separate DLLs for database, sockets, or OLE support. However, it is safe to call these initialization functions in release mode.  \n  \n## CDynLinkLibrary Objects  \n During each of the operations mentioned at the beginning of this topic, MFC needs to search for a desired value or object. For example, during deserialization, MFC needs to search through all the currently available run-time classes to match objects in the archive with their proper run-time class.  \n  \n As a part of these searches, MFC scans through all the extension DLLs in use by walking a chain of **CDynLinkLibrary** objects. **CDynLinkLibrary** objects attach automatically to a chain during their construction and are created by each extension DLL in turn during initialization. In addition, every module (application or regular DLL) has its own chain of **CDynLinkLibrary** objects.  \n  \n For an extension DLL to get wired into a **CDynLinkLibrary** chain, it must create a **CDynLinkLibrary** object in the context of every module that uses the extension DLL. Therefore, if an extension DLL is going to be used from regular DLLs, it must provide an exported initialization function that creates a **CDynLinkLibrary** object. Every regular DLL that uses the extension DLL must call the exported initialization function.  \n  \n If an extension DLL is only going to be used from an MFC application (.exe) and never from a regular DLL, then it is sufficient to create the **CDynLinkLibrary** object in the extension DLL's `DllMain`. This is what the MFC DLL Wizard extension DLL code does. When loading an extension DLL implicitly, `DllMain` loads and executes before the application ever starts. Any **CDynLinkLibrary** creations are wired into a default chain that the MFC DLL reserves for an MFC application.  \n  \n Note that it is a bad idea to have multiple **CDynLinkLibrary** objects from one extension DLL in any one chain, especially if the extension DLL will be dynamically unloaded from memory. Do not call the initialization function more than once from any one module.  \n  \n## Sample Code  \n This sample code assumes that the regular DLL is implicitly linking to the extension DLL. This is accomplished by linking to the import library (.lib) of the extension DLL when building the regular DLL.  \n  \n The following lines should be in the source of the extension DLL:  \n  \n```  \n// YourExtDLL.cpp:  \n  \n// standard MFC extension DLL routines  \n#include \"afxdllx.h\"  \n  \nstatic AFX_EXTENSION_MODULE NEAR extensionDLL = { NULL, NULL };  \n  \nextern \"C\" int APIENTRY  \nDllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved)  \n{  \n    if (dwReason == DLL_PROCESS_ATTACH)  \n    {  \n        // extension DLL one-time initialization  \n        if (!AfxInitExtensionModule(extensionDLL, hInstance))  \n           return 0;  \n    }  \n    return 1;   // ok  \n}  \n  \n// Exported DLL initialization is run in context of  \n// application or regular DLL  \nextern \"C\" void WINAPI InitYourExtDLL()  \n{  \n    // create a new CDynLinkLibrary for this app  \n    new CDynLinkLibrary(extensionDLL);  \n  \n    // add other initialization here  \n}  \n```  \n  \n Be sure to export the **InitYourExtDLL** function. This could be done using **__declspec(dllexport)** or in your DLL's .def file as follows:  \n  \n```  \n// YourExtDLL.Def:  \nLIBRARY      YOUREXTDLL  \nCODE         PRELOAD MOVEABLE DISCARDABLE  \nDATA         PRELOAD SINGLE  \nEXPORTS  \n    InitYourExtDLL  \n```  \n  \n Add a call to the `InitInstance` member of the `CWinApp`-derived object in each regular DLL using the extension DLL:  \n  \n```  \n// YourRegularDLL.cpp:  \n  \nclass CYourRegularDLL : public CWinApp  \n{  \npublic:  \n    virtual BOOL InitInstance(); // Initialization  \n    virtual int ExitInstance();  // Termination  \n  \n    // nothing special for the constructor  \n    CYourRegularDLL(LPCTSTR pszAppName) : CWinApp(pszAppName) { }  \n};  \n  \nBOOL CYourRegularDLL::InitInstance()  \n{  \n    // any DLL initialization goes here  \n    TRACE0(\"YOUR regular DLL initializing\\n\");  \n  \n    // wire any extension DLLs into CDynLinkLibrary chain  \n    InitYourExtDLL();  \n  \n    return TRUE;  \n}  \n```  \n  \n### What do you want to do?  \n  \n-   [Initialize an extension DLL](../build/initializing-extension-dlls.md)  \n  \n-   [Initialize regular DLLs](../build/initializing-regular-dlls.md)  \n  \n### What do you want to know more about?  \n  \n-   [Extension DLLs](../build/extension-dlls.md)  \n  \n-   [Regular DLLs Statically Linked to MFC](../build/regular-dlls-statically-linked-to-mfc.md)  \n  \n-   [Regular DLLs Dynamically Linked to MFC](../build/regular-dlls-dynamically-linked-to-mfc.md)  \n  \n-   [Using MFC as Part of a DLL](../mfc/tn011-using-mfc-as-part-of-a-dll.md)  \n  \n-   [DLL Version of MFC](../mfc/tn033-dll-version-of-mfc.md)  \n  \n## See Also  \n [Extension DLLs](../build/extension-dlls.md)"}