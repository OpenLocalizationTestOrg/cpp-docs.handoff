{"nodes":[{"pos":[12,63],"content":"Structure and Constant Definitions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Structure and Constant Definitions | Microsoft Docs","pos":[0,51]}]},{"content":"Structure and Constant Definitions","pos":[543,577]},{"content":"The default helper routine uses several structures to communicate with the hook functions and during any exceptions.","pos":[578,694]},{"content":"Here are the notification and failure values, information structures, and the pointer-to-hook-function type passed to the hooks:","pos":[695,823]},{"content":"See Also","pos":[3352,3360]},{"content":"Understanding the Helper Function","pos":[3365,3398]}],"content":"---\ntitle: \"Structure and Constant Definitions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 1df7cf46-b853-4788-a257-100d5c37997f\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Structure and Constant Definitions\nThe default helper routine uses several structures to communicate with the hook functions and during any exceptions. Here are the notification and failure values, information structures, and the pointer-to-hook-function type passed to the hooks:  \n  \n```  \n//  \n// Delay load import hook notifications  \n//  \nenum {  \n    dliStartProcessing,        // used to bypass or note helper only  \n    dliNotePreLoadLibrary,     // called just before LoadLibrary, can  \n                               //  override w/ new HMODULE return val  \n    dliNotePreGetProcAddress,  // called just before GetProcAddress, can  \n                               //  override w/ new FARPROC return value  \n    dliFailLoadLib,            // failed to load library, fix it by  \n                               //  returning a valid HMODULE  \n    dliFailGetProc,            // failed to get proc address, fix it by  \n                               //  returning a valid FARPROC  \n    dliNoteEndProcessing,      // called after all processing is done, no  \n                               //  bypass possible at this point except  \n                               //  by longjmp()/throw()/RaiseException.  \n    };  \n  \ntypedef struct DelayLoadProc {  \n    BOOL                fImportByName;  \n    union {  \n        LPCSTR          szProcName;  \n        DWORD           dwOrdinal;  \n        };  \n    } DelayLoadProc;  \n  \ntypedef struct DelayLoadInfo {  \n    DWORD           cb;         // size of structure  \n    PCImgDelayDescr pidd;       // raw form of data (everything is there)  \n    FARPROC *       ppfn;       // points to address of function to load  \n    LPCSTR          szDll;      // name of dll  \n    DelayLoadProc   dlp;        // name or ordinal of procedure  \n    HMODULE         hmodCur;    // the hInstance of the library we have loaded  \n    FARPROC         pfnCur;     // the actual function that will be called  \n    DWORD           dwLastError;// error received (if an error notification)  \n    } DelayLoadInfo, * PDelayLoadInfo;  \n  \ntypedef FARPROC (WINAPI *PfnDliHook)(  \n    unsigned        dliNotify,  \n    PDelayLoadInfo  pdli  \n    );  \n  \ntypedef struct ImgDelayDescr {  \n    DWORD        grAttrs;        // attributes  \n    RVA          rvaDLLName;     // RVA to dll name  \n    RVA          rvaHmod;        // RVA of module handle  \n    RVA          rvaIAT;         // RVA of the IAT  \n    RVA          rvaINT;         // RVA of the INT  \n    RVA          rvaBoundIAT;    // RVA of the optional bound IAT  \n    RVA          rvaUnloadIAT;   // RVA of optional copy of original IAT  \n    DWORD        dwTimeStamp;    // 0 if not bound,  \n                                 // O.W. date/time stamp of DLL bound to (Old BIND)  \n    } ImgDelayDescr, * PImgDelayDescr;  \n```  \n  \n## See Also  \n [Understanding the Helper Function](../../build/reference/understanding-the-helper-function.md)"}