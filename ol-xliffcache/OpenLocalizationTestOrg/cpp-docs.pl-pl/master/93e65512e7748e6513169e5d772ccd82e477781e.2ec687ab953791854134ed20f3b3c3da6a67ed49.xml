{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 1) C4346 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 1) C4346 | Microsoft Docs","pos":[0,49]}]},{"pos":[609,641],"content":"Compiler Warning (level 1) C4346","linkify":"Compiler Warning (level 1) C4346","nodes":[{"content":"Compiler Warning (level 1) C4346","pos":[0,32]}]},{"content":"'name' : dependent name is not a type","pos":[642,679]},{"content":"The <bpt id=\"p1\">[</bpt>typename<ept id=\"p1\">](../../cpp/typename.md)</ept> keyword is required if a dependent name is to be treated as a type.","pos":[686,791],"source":"The [typename](../../cpp/typename.md) keyword is required if a dependent name is to be treated as a type."},{"content":"This is a breaking change in the Visual C++ .NET 2003 compiler, made in order to conform to the ISO C++ standard.","pos":[792,905]},{"pos":[912,1006],"content":"For code that works the same in all versions of Visual C++, add <ph id=\"ph1\">`typename`</ph> to the declaration.","source":"For code that works the same in all versions of Visual C++, add `typename` to the declaration."},{"content":"The following sample generates C4346:","pos":[1013,1050]},{"pos":[1242,1328],"content":"The following samples shows other examples where the <bpt id=\"p1\">**</bpt>typename<ept id=\"p1\">**</ept> keyword is required:","source":"The following samples shows other examples where the **typename** keyword is required:"},{"content":"and this,","pos":[1860,1869]}],"content":"---\ntitle: \"Compiler Warning (level 1) C4346 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4346\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4346\"\nms.assetid: 68ee562d-cca9-4a2a-9a1b-14ad1a1e7396\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 1) C4346\n'name' : dependent name is not a type  \n  \n The [typename](../../cpp/typename.md) keyword is required if a dependent name is to be treated as a type. This is a breaking change in the Visual C++ .NET 2003 compiler, made in order to conform to the ISO C++ standard.  \n  \n For code that works the same in all versions of Visual C++, add `typename` to the declaration.  \n  \n The following sample generates C4346:  \n  \n```  \n// C4346.cpp  \n// compile with: /WX /LD  \ntemplate<class T>  \nstruct C {  \n   T::X* x;   // C4346  \n   // try the following line instead  \n   // typename T::X* x;  \n};  \n```  \n  \n The following samples shows other examples where the **typename** keyword is required:  \n  \n```  \n// C4346b.cpp  \n// compile with: /LD /W1  \ntemplate<class T>  \nconst typename T::X& f(typename T::Z* p);   // Required in both places  \n  \ntemplate<class T, int N>  \nstruct L{};  \n  \ntemplate<class T>  \nstruct M : public L<typename T::Type, T::Value>   \n{   // required on type argument, not on non-type argument  \n   typedef typename T::X   Type;  \n   Type f();   // OK: \"Type\" is a type-specifer  \n   typename T::X g();   // typename required  \n   operator typename T::Z();   // typename required      \n};  \n```  \n  \n and this,  \n  \n```  \n// C4346c.cpp  \n// compile with: /LD /WX  \nstruct Y {  \n   typedef int Y_t;  \n};  \n  \ntemplate<class T>  \nstruct A {  \n   typedef Y A_t;  \n};  \n  \ntemplate<class T>  \nstruct B {  \n   typedef /*typename*/ A<T>::A_t B_t;   // C4346 typename needed here  \n   typedef /*typename*/ B_t::Y_t  B_t2;   // typename also needed here  \n};  \n```"}