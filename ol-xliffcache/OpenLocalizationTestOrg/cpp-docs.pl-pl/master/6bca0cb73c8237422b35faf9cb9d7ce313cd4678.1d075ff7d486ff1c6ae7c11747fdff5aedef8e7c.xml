{"nodes":[{"pos":[12,35],"content":"_cwait | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_cwait | Microsoft Docs","pos":[0,23]}]},{"pos":[924,930],"content":"_cwait","linkify":"_cwait","nodes":[{"content":"_cwait","pos":[0,6]}]},{"content":"Waits until another process terminates.","pos":[931,970]},{"pos":[978,1238],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,258],"nodes":[{"content":"This API cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[1,117],"source":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[118,245],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[1247,1253],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1367,1377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to a buffer where the result code of the specified process will be stored, or NULL.","pos":[1395,1486]},{"content":"The handle to the process to wait on (that is, the process that has to terminate before <ph id=\"ph1\">`_cwait`</ph> can return).","pos":[1509,1618],"source":" The handle to the process to wait on (that is, the process that has to terminate before `_cwait` can return)."},{"content":"NULL: Ignored by Windows operating system applications; for other applications: action code to perform on <ph id=\"ph1\">`procHandle`</ph>.","pos":[1637,1756],"source":" NULL: Ignored by Windows operating system applications; for other applications: action code to perform on `procHandle`."},{"pos":[1765,1777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"When the specified process has successfully completed, returns the handle of the specified process and sets <ph id=\"ph1\">`termstat`</ph> to the result code that's returned by the specified process.","pos":[1781,1960],"source":"When the specified process has successfully completed, returns the handle of the specified process and sets `termstat` to the result code that's returned by the specified process."},{"content":"Otherwise, returns –1 and sets <ph id=\"ph1\">`errno`</ph> as follows.","pos":[1961,2011],"source":" Otherwise, returns –1 and sets `errno` as follows."},{"content":"Value","pos":[2018,2023]},{"content":"Description","pos":[2024,2035]},{"pos":[2083,2343],"content":"No specified process exists, <ph id=\"ph1\">`procHandle`</ph> is invalid, or the call to the <bpt id=\"p1\">[</bpt>GetExitCodeProcess<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683189.aspx)</ept> or <bpt id=\"p2\">[</bpt>WaitForSingleObject<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms687032.aspx)</ept> API failed.","source":"No specified process exists, `procHandle` is invalid, or the call to the [GetExitCodeProcess](http://msdn.microsoft.com/library/windows/desktop/ms683189.aspx) or [WaitForSingleObject](http://msdn.microsoft.com/library/windows/desktop/ms687032.aspx) API failed."},{"pos":[2357,2377],"content":"<ph id=\"ph1\">`action`</ph> is invalid.","source":"`action` is invalid."},{"pos":[2385,2562],"content":"For more information about these and other return codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about these and other return codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2571,2578],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_cwait`</ph> function waits for the termination of the process ID of the specified process that's provided by <ph id=\"ph2\">`procHandle`</ph>.","pos":[2582,2705],"source":"The `_cwait` function waits for the termination of the process ID of the specified process that's provided by `procHandle`."},{"content":"The value of <ph id=\"ph1\">`procHandle`</ph> that's passed to <ph id=\"ph2\">`_cwait`</ph> should be the value that's returned by the call to the <bpt id=\"p1\">[</bpt>_spawn<ept id=\"p1\">](../../c-runtime-library/spawn-wspawn-functions.md)</ept> function that created the specified process.","pos":[2706,2917],"source":" The value of `procHandle` that's passed to `_cwait` should be the value that's returned by the call to the [_spawn](../../c-runtime-library/spawn-wspawn-functions.md) function that created the specified process."},{"content":"If the process ID terminates before <ph id=\"ph1\">`_cwait`</ph> is called, <ph id=\"ph2\">`_cwait`</ph> returns immediately.","pos":[2918,3003],"source":" If the process ID terminates before `_cwait` is called, `_cwait` returns immediately."},{"content":"<ph id=\"ph1\">`_cwait`</ph> can be used by any process to wait for any other known process for which a valid handle (<ph id=\"ph2\">`procHandle`</ph>) exists.","pos":[3004,3123],"source":"`_cwait` can be used by any process to wait for any other known process for which a valid handle (`procHandle`) exists."},{"content":"<ph id=\"ph1\">`termstat`</ph> points to a buffer where the return code of the specified process will be stored.","pos":[3130,3222],"source":"`termstat` points to a buffer where the return code of the specified process will be stored."},{"content":"The value of <ph id=\"ph1\">`termstat`</ph> indicates whether the specified process terminated normally by calling the Windows <bpt id=\"p1\">[</bpt>ExitProcess<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms682658.aspx)</ept> API.","pos":[3223,3413],"source":" The value of `termstat` indicates whether the specified process terminated normally by calling the Windows [ExitProcess](http://msdn.microsoft.com/library/windows/desktop/ms682658.aspx) API."},{"content":"<ph id=\"ph1\">`ExitProcess`</ph> is called internally if the specified process calls <ph id=\"ph2\">`exit`</ph> or <ph id=\"ph3\">`_exit`</ph>, returns from <ph id=\"ph4\">`main`</ph>, or reaches the end of <ph id=\"ph5\">`main`</ph>.","pos":[3414,3549],"source":"`ExitProcess` is called internally if the specified process calls `exit` or `_exit`, returns from `main`, or reaches the end of `main`."},{"content":"For more information about the value that's passed back through <ph id=\"ph1\">`termstat`</ph>, see <bpt id=\"p1\">[</bpt>GetExitCodeProcess<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683189.aspx)</ept>.","pos":[3550,3716],"source":" For more information about the value that's passed back through `termstat`, see [GetExitCodeProcess](http://msdn.microsoft.com/library/windows/desktop/ms683189.aspx)."},{"content":"If <ph id=\"ph1\">`_cwait`</ph> is called by using a NULL value for <ph id=\"ph2\">`termstat`</ph>, the return code of the specified process is not stored.","pos":[3717,3832],"source":" If `_cwait` is called by using a NULL value for `termstat`, the return code of the specified process is not stored."},{"pos":[3839,3982],"content":"The <ph id=\"ph1\">`action`</ph> parameter is ignored by the Windows operating system because parent-child relationships are not implemented in these environments.","source":"The `action` parameter is ignored by the Windows operating system because parent-child relationships are not implemented in these environments."},{"content":"Unless <ph id=\"ph1\">`procHandle`</ph> is -1 or -2 (handles to the current process or thread), the handle will be closed.","pos":[3989,4091],"source":"Unless `procHandle` is -1 or -2 (handles to the current process or thread), the handle will be closed."},{"content":"Therefore, in this situation, do not use the returned handle.","pos":[4092,4153]},{"pos":[4162,4174],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4181,4188]},{"content":"Required header","pos":[4189,4204]},{"content":"Optional header","pos":[4205,4220]},{"content":"<ph id=\"ph1\">\\&lt;</ph>process.h&gt;","pos":[4296,4308],"source":"\\<process.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[4309,4319],"source":"\\<errno.h>"},{"pos":[4327,4425],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[4434,4441],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6224,6249],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[6253,6382],"content":"<bpt id=\"p1\">[</bpt>System::Diagnostics::Process::WaitForExit<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.waitforexit.aspx)</ept>","source":"[System::Diagnostics::Process::WaitForExit](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.waitforexit.aspx)"},{"pos":[6391,6399],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Process and Environment Control<ept id=\"p1\">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[6403,6497],"source":"[Process and Environment Control](../../c-runtime-library/process-and-environment-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_spawn, _wspawn Functions<ept id=\"p1\">](../../c-runtime-library/spawn-wspawn-functions.md)</ept>","pos":[6500,6579],"source":" [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)"}],"content":"---\ntitle: \"_cwait | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_cwait\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-process-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_cwait\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"cwait function\"\n  - \"_cwait function\"\nms.assetid: d9b596b5-45f4-4e03-9896-3f383cb922b8\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _cwait\nWaits until another process terminates.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nintptr_t _cwait(   \n   int *termstat,  \n   intptr_t procHandle,  \n   int action   \n);  \n```  \n  \n#### Parameters  \n `termstat`  \n Pointer to a buffer where the result code of the specified process will be stored, or NULL.  \n  \n `procHandle`  \n The handle to the process to wait on (that is, the process that has to terminate before `_cwait` can return).  \n  \n `action`  \n NULL: Ignored by Windows operating system applications; for other applications: action code to perform on `procHandle`.  \n  \n## Return Value  \n When the specified process has successfully completed, returns the handle of the specified process and sets `termstat` to the result code that's returned by the specified process. Otherwise, returns –1 and sets `errno` as follows.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`ECHILD`|No specified process exists, `procHandle` is invalid, or the call to the [GetExitCodeProcess](http://msdn.microsoft.com/library/windows/desktop/ms683189.aspx) or [WaitForSingleObject](http://msdn.microsoft.com/library/windows/desktop/ms687032.aspx) API failed.|  \n|`EINVAL`|`action` is invalid.|  \n  \n For more information about these and other return codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_cwait` function waits for the termination of the process ID of the specified process that's provided by `procHandle`. The value of `procHandle` that's passed to `_cwait` should be the value that's returned by the call to the [_spawn](../../c-runtime-library/spawn-wspawn-functions.md) function that created the specified process. If the process ID terminates before `_cwait` is called, `_cwait` returns immediately. `_cwait` can be used by any process to wait for any other known process for which a valid handle (`procHandle`) exists.  \n  \n `termstat` points to a buffer where the return code of the specified process will be stored. The value of `termstat` indicates whether the specified process terminated normally by calling the Windows [ExitProcess](http://msdn.microsoft.com/library/windows/desktop/ms682658.aspx) API. `ExitProcess` is called internally if the specified process calls `exit` or `_exit`, returns from `main`, or reaches the end of `main`. For more information about the value that's passed back through `termstat`, see [GetExitCodeProcess](http://msdn.microsoft.com/library/windows/desktop/ms683189.aspx). If `_cwait` is called by using a NULL value for `termstat`, the return code of the specified process is not stored.  \n  \n The `action` parameter is ignored by the Windows operating system because parent-child relationships are not implemented in these environments.  \n  \n Unless `procHandle` is -1 or -2 (handles to the current process or thread), the handle will be closed. Therefore, in this situation, do not use the returned handle.  \n  \n## Requirements  \n  \n|Routine|Required header|Optional header|  \n|-------------|---------------------|---------------------|  \n|`_cwait`|\\<process.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n  \n      // crt_cwait.c  \n// compile with: /c  \n// This program launches several processes and waits  \n// for a specified process to finish.  \n//  \n#define _CRT_RAND_S  \n  \n#include <windows.h>  \n#include <process.h>  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <time.h>  \n  \n// Macro to get a random integer within a specified range  \n#define getrandom( min, max ) (( (rand_s (&number), number) % (int)((( max ) + 1 ) - ( min ))) + ( min ))  \n  \nstruct PROCESS  \n{  \n   int     nPid;  \n   char    name[40];  \n} process[4] = { { 0, \"Ann\" }, { 0, \"Beth\" }, { 0, \"Carl\" }, { 0, \"Dave\" } };  \n  \nint main( int argc, char *argv[] )  \n{  \n   int termstat, c;  \n   unsigned int number;  \n  \n   srand( (unsigned)time( NULL ) );    // Seed randomizer  \n  \n   // If no arguments, this is the calling process  \n   if( argc == 1 )  \n   {  \n      // Spawn processes in numeric order  \n      for( c = 0; c < 4; c++ ){  \n         _flushall();  \n         process[c].nPid = _spawnl( _P_NOWAIT, argv[0], argv[0],   \n                             process[c].name, NULL );  \n      }  \n  \n      // Wait for randomly specified process, and respond when done   \n      c = getrandom( 0, 3 );  \n      printf( \"Come here, %s.\\n\", process[c].name );  \n      _cwait( &termstat, process[c].nPid, _WAIT_CHILD );  \n      printf( \"Thank you, %s.\\n\", process[c].name );  \n  \n   }  \n   // If there are arguments, this must be a spawned process   \n   else  \n   {  \n      // Delay for a period that's determined by process number  \n      Sleep( (argv[1][0] - 'A' + 1) * 1000L );  \n      printf( \"Hi, Dad. It's %s.\\n\", argv[1] );  \n   }  \n}  \n```  \n  \n```Output  \nHi, Dad. It's Ann.  \nCome here, Ann.  \nThank you, Ann.  \nHi, Dad. It's Beth.  \nHi, Dad. It's Carl.  \nHi, Dad. It's Dave.  \n```  \n  \n## .NET Framework Equivalent  \n [System::Diagnostics::Process::WaitForExit](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.waitforexit.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)"}