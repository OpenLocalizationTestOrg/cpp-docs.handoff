{"nodes":[{"pos":[12,63],"content":"Parsing C++ Command-Line Arguments | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Parsing C++ Command-Line Arguments | Microsoft Docs","pos":[0,51]}]},{"content":"Parsing C++ Command-Line Arguments","pos":[794,828]},{"content":"Microsoft Specific","pos":[831,849]},{"content":"Microsoft C/C++ startup code uses the following rules when interpreting arguments given on the operating system command line:","pos":[858,983]},{"content":"Arguments are delimited by white space, which is either a space or a tab.","pos":[993,1066]},{"content":"The caret character (^) is not recognized as an escape character or delimiter.","pos":[1076,1154]},{"content":"The character is handled completely by the command-line parser in the operating system before being passed to the <ph id=\"ph1\">`argv`</ph> array in the program.","pos":[1155,1297],"source":" The character is handled completely by the command-line parser in the operating system before being passed to the `argv` array in the program."},{"content":"A string surrounded by double quotation marks (\"<bpt id=\"p1\">*</bpt>string<ept id=\"p1\">*</ept>\") is interpreted as a single argument, regardless of white space contained within.","pos":[1307,1446],"source":"A string surrounded by double quotation marks (\"*string*\") is interpreted as a single argument, regardless of white space contained within."},{"content":"A quoted string can be embedded in an argument.","pos":[1447,1494]},{"content":"A double quotation mark preceded by a backslash (<ph id=\"ph1\">\\\\</ph>\") is interpreted as a literal double quotation mark character (\").","pos":[1504,1622],"source":"A double quotation mark preceded by a backslash (\\\\\") is interpreted as a literal double quotation mark character (\")."},{"content":"Backslashes are interpreted literally, unless they immediately precede a double quotation mark.","pos":[1632,1727]},{"pos":[1737,1952],"content":"If an even number of backslashes is followed by a double quotation mark, one backslash is placed in the <ph id=\"ph1\">`argv`</ph> array for every pair of backslashes, and the double quotation mark is interpreted as a string delimiter.","source":"If an even number of backslashes is followed by a double quotation mark, one backslash is placed in the `argv` array for every pair of backslashes, and the double quotation mark is interpreted as a string delimiter."},{"pos":[1962,2247],"content":"If an odd number of backslashes is followed by a double quotation mark, one backslash is placed in the <ph id=\"ph1\">`argv`</ph> array for every pair of backslashes, and the double quotation mark is \"escaped\" by the remaining backslash, causing a literal double quotation mark (\") to be placed in <ph id=\"ph2\">`argv`</ph>.","source":"If an odd number of backslashes is followed by a double quotation mark, one backslash is placed in the `argv` array for every pair of backslashes, and the double quotation mark is \"escaped\" by the remaining backslash, causing a literal double quotation mark (\") to be placed in `argv`."},{"content":"Example","pos":[2256,2263]},{"content":"The following program demonstrates how command-line arguments are passed:","pos":[2267,2340]},{"content":"The following table shows example input and expected output, demonstrating the rules in the preceding list.","pos":[2922,3029]},{"content":"Results of Parsing Command Lines","pos":[3039,3071]},{"content":"Command-Line Input","pos":[3078,3096]},{"content":"argv[1]","pos":[3097,3104]},{"content":"argv[2]","pos":[3105,3112]},{"content":"argv[3]","pos":[3113,3120]},{"content":"END Microsoft Specific","pos":[3348,3370]},{"content":"See Also","pos":[3379,3387]},{"content":"main: Program Startup","pos":[3392,3413]}],"content":"---\ntitle: \"Parsing C++ Command-Line Arguments | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"quotation marks, command-line arguments\"\n  - \"double quotation marks\"\n  - \"command line, parsing\"\n  - \"parsing, command-line arguments\"\n  - \"startup code, parsing command-line arguments\"\nms.assetid: e634e733-ac2f-4298-abe2-7e9288c94951\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Parsing C++ Command-Line Arguments\n**Microsoft Specific**  \n  \n Microsoft C/C++ startup code uses the following rules when interpreting arguments given on the operating system command line:  \n  \n-   Arguments are delimited by white space, which is either a space or a tab.  \n  \n-   The caret character (^) is not recognized as an escape character or delimiter. The character is handled completely by the command-line parser in the operating system before being passed to the `argv` array in the program.  \n  \n-   A string surrounded by double quotation marks (\"*string*\") is interpreted as a single argument, regardless of white space contained within. A quoted string can be embedded in an argument.  \n  \n-   A double quotation mark preceded by a backslash (\\\\\") is interpreted as a literal double quotation mark character (\").  \n  \n-   Backslashes are interpreted literally, unless they immediately precede a double quotation mark.  \n  \n-   If an even number of backslashes is followed by a double quotation mark, one backslash is placed in the `argv` array for every pair of backslashes, and the double quotation mark is interpreted as a string delimiter.  \n  \n-   If an odd number of backslashes is followed by a double quotation mark, one backslash is placed in the `argv` array for every pair of backslashes, and the double quotation mark is \"escaped\" by the remaining backslash, causing a literal double quotation mark (\") to be placed in `argv`.  \n  \n## Example  \n The following program demonstrates how command-line arguments are passed:  \n  \n```  \n// command_line_arguments.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nusing namespace std;  \nint main( int argc,      // Number of strings in array argv  \n          char *argv[],   // Array of command-line argument strings  \n          char *envp[] )  // Array of environment variable strings  \n{  \n    int count;  \n  \n    // Display each command-line argument.  \n    cout << \"\\nCommand-line arguments:\\n\";  \n    for( count = 0; count < argc; count++ )  \n         cout << \"  argv[\" << count << \"]   \"  \n                << argv[count] << \"\\n\";  \n}  \n```  \n  \n The following table shows example input and expected output, demonstrating the rules in the preceding list.  \n  \n### Results of Parsing Command Lines  \n  \n|Command-Line Input|argv[1]|argv[2]|argv[3]|  \n|-------------------------|---------------|---------------|---------------|  \n|`\"abc\" d e`|`abc`|`d`|`e`|  \n|`a\\\\b d\"e f\"g h`|`a\\\\b`|`de fg`|`h`|  \n|`a\\\\\\\"b c d`|`a\\\"b`|`c`|`d`|  \n|`a\\\\\\\\\"b c\" d e`|`a\\\\b c`|`d`|`e`|  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [main: Program Startup](../cpp/main-program-startup.md)"}