{"nodes":[{"pos":[12,50],"content":"memmove_s, wmemmove_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"memmove_s, wmemmove_s | Microsoft Docs","pos":[0,38]}]},{"pos":[986,1007],"content":"memmove_s, wmemmove_s","linkify":"memmove_s, wmemmove_s","nodes":[{"content":"memmove_s, wmemmove_s","pos":[0,21]}]},{"content":"Moves one buffer to another.","pos":[1008,1036]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>memmove, wmemmove<ept id=\"p1\">](../../c-runtime-library/reference/memmove-wmemmove.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1037,1265],"source":" These are versions of [memmove, wmemmove](../../c-runtime-library/reference/memmove-wmemmove.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1274,1280],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1548,1558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Destination object.","pos":[1572,1591]},{"content":"Size of the destination buffer.","pos":[1620,1651]},{"content":"Source object.","pos":[1667,1681]},{"content":"Number of bytes (<ph id=\"ph1\">`memmove_s`</ph>) or characters (<ph id=\"ph2\">`wmemmove_s`</ph>) to copy.","pos":[1699,1766],"source":" Number of bytes (`memmove_s`) or characters (`wmemmove_s`) to copy."},{"pos":[1775,1787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if successful; an error code on failure","pos":[1791,1835]},{"pos":[1845,1861],"content":"Error Conditions","linkify":"Error Conditions","nodes":[{"content":"Error Conditions","pos":[0,16]}]},{"content":"Return value","pos":[1900,1912]},{"pos":[1913,1931],"content":"Contents of <ph id=\"ph1\">`dest`</ph>","source":"Contents of `dest`"},{"content":"any","pos":[2041,2044]},{"content":"any","pos":[2045,2048]},{"content":"not modified","pos":[2058,2070]},{"content":"any","pos":[2075,2078]},{"content":"any","pos":[2079,2082]},{"content":"not modified","pos":[2099,2111]},{"content":"any","pos":[2116,2119]},{"content":"any","pos":[2130,2133]},{"content":"not modified","pos":[2143,2155]},{"pos":[2165,2172],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Copies <ph id=\"ph1\">`count`</ph> bytes of characters from <ph id=\"ph2\">`src`</ph> to <ph id=\"ph3\">`dest`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2176,2234],"source":"Copies `count` bytes of characters from `src` to `dest`*.*"},{"content":"If some regions of the source area and the destination overlap, <ph id=\"ph1\">`memmove_s`</ph> ensures that the original source bytes in the overlapping region are copied before being overwritten.","pos":[2235,2412],"source":" If some regions of the source area and the destination overlap, `memmove_s` ensures that the original source bytes in the overlapping region are copied before being overwritten."},{"content":"If <ph id=\"ph1\">`dest`</ph> or if <ph id=\"ph2\">`src`</ph> is a null pointer, or if the destination string is too small, these functions invoke an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept> .","pos":[2419,2645],"source":"If `dest` or if `src` is a null pointer, or if the destination string is too small, these functions invoke an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) ."},{"content":"If execution is allowed to continue, these functions return <ph id=\"ph1\">`EINVAL`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2646,2743],"source":" If execution is allowed to continue, these functions return `EINVAL` and set `errno` to `EINVAL`."},{"pos":[2752,2764],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2771,2778]},{"content":"Required header","pos":[2779,2794]},{"content":"<ph id=\"ph1\">\\&lt;</ph>string.h&gt;","pos":[2851,2862],"source":"\\<string.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[2880,2890],"source":"\\<wchar.h>"},{"pos":[2898,3022],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3031,3038],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3698,3704],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[3770,3795],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[3799,3897],"content":"<bpt id=\"p1\">[</bpt>System::Buffer::BlockCopy<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.buffer.blockcopy.aspx)</ept>","source":"[System::Buffer::BlockCopy](https://msdn.microsoft.com/en-us/library/system.buffer.blockcopy.aspx)"},{"pos":[3906,3914],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Buffer Manipulation<ept id=\"p1\">](../../c-runtime-library/buffer-manipulation.md)</ept><ph id=\"ph1\"> </ph>","pos":[3918,3988],"source":"[Buffer Manipulation](../../c-runtime-library/buffer-manipulation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_memccpy<ept id=\"p1\">](../../c-runtime-library/reference/memccpy.md)</ept><ph id=\"ph1\"> </ph>","pos":[3991,4049],"source":" [_memccpy](../../c-runtime-library/reference/memccpy.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memcpy, wmemcpy<ept id=\"p1\">](../../c-runtime-library/reference/memcpy-wmemcpy.md)</ept><ph id=\"ph1\"> </ph>","pos":[4052,4124],"source":" [memcpy, wmemcpy](../../c-runtime-library/reference/memcpy-wmemcpy.md) "},{"content":"<bpt id=\"p1\"> [</bpt>strcpy_s, wcscpy_s, _mbscpy_s<ept id=\"p1\">](../../c-runtime-library/reference/strcpy-s-wcscpy-s-mbscpy-s.md)</ept><ph id=\"ph1\"> </ph>","pos":[4127,4225],"source":" [strcpy_s, wcscpy_s, _mbscpy_s](../../c-runtime-library/reference/strcpy-s-wcscpy-s-mbscpy-s.md) "},{"content":"<bpt id=\"p1\"> [</bpt>strcpy, wcscpy, _mbscpy<ept id=\"p1\">](../../c-runtime-library/reference/strcpy-wcscpy-mbscpy.md)</ept><ph id=\"ph1\"> </ph>","pos":[4228,4314],"source":" [strcpy, wcscpy, _mbscpy](../../c-runtime-library/reference/strcpy-wcscpy-mbscpy.md) "},{"content":"<bpt id=\"p1\"> [</bpt>strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l<ept id=\"p1\">](../../c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[4317,4499],"source":" [strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l](../../c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l<ept id=\"p1\">](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md)</ept>","pos":[4502,4659],"source":" [strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md)"}],"content":"---\ntitle: \"memmove_s, wmemmove_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"wmemmove_s\"\n  - \"memmove_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-string-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wmemmove_s\"\n  - \"memmove_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"wmemmove_s function\"\n  - \"memmove_s function\"\nms.assetid: a17619e4-1307-4bb0-98c6-77f8c68dab2d\ncaps.latest.revision: 26\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# memmove_s, wmemmove_s\nMoves one buffer to another. These are versions of [memmove, wmemmove](../../c-runtime-library/reference/memmove-wmemmove.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \n  \n      errno_t memmove_s(  \n   void *dest,  \n   size_t numberOfElements,  \n   const void *src,  \n   size_t count  \n);  \nerrno_t wmemmove_s(  \n   wchar_t *dest,  \n   size_t numberOfElements,  \n   const wchar_t *src,  \n   size_t count  \n);  \n```  \n  \n#### Parameters  \n `dest`  \n Destination object.  \n  \n `numberOfElements`  \n Size of the destination buffer.  \n  \n `src`  \n Source object.  \n  \n `count`  \n Number of bytes (`memmove_s`) or characters (`wmemmove_s`) to copy.  \n  \n## Return Value  \n Zero if successful; an error code on failure  \n  \n### Error Conditions  \n  \n|`dest`|`numberOfElements`|`src`|Return value|Contents of `dest`|  \n|------------|------------------------|-----------|------------------|------------------------|  \n|`NULL`|any|any|`EINVAL`|not modified|  \n|any|any|`NULL`|`EINVAL`|not modified|  \n|any|< `count`|any|`ERANGE`|not modified|  \n  \n## Remarks  \n Copies `count` bytes of characters from `src` to `dest`*.* If some regions of the source area and the destination overlap, `memmove_s` ensures that the original source bytes in the overlapping region are copied before being overwritten.  \n  \n If `dest` or if `src` is a null pointer, or if the destination string is too small, these functions invoke an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) . If execution is allowed to continue, these functions return `EINVAL` and set `errno` to `EINVAL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`memmove_s`|\\<string.h>|  \n|`wmemmove_s`|\\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_memmove_s.c  \n//  \n// The program demonstrates the   \n// memmove_s function which works as expected  \n// for moving overlapping regions.  \n  \n#include <stdio.h>  \n#include <string.h>  \n  \nint main()  \n{  \n   char str[] = \"0123456789\";  \n  \n   printf(\"Before: %s\\n\", str);  \n  \n   // Move six bytes from the start of the string  \n   // to a new position shifted by one byte. To protect against  \n   // buffer overrun, the secure version of memmove requires the  \n   // the length of the destination string to be specified.   \n  \n   memmove_s((str + 1), strnlen(str + 1, 10), str, 6);   \n  \n   printf_s(\" After: %s\\n\", str);  \n}  \n```  \n  \n## Output  \n  \n```  \nBefore: 0123456789  \n After: 0012345789  \n```  \n  \n## .NET Framework Equivalent  \n [System::Buffer::BlockCopy](https://msdn.microsoft.com/en-us/library/system.buffer.blockcopy.aspx)  \n  \n## See Also  \n [Buffer Manipulation](../../c-runtime-library/buffer-manipulation.md)   \n [_memccpy](../../c-runtime-library/reference/memccpy.md)   \n [memcpy, wmemcpy](../../c-runtime-library/reference/memcpy-wmemcpy.md)   \n [strcpy_s, wcscpy_s, _mbscpy_s](../../c-runtime-library/reference/strcpy-s-wcscpy-s-mbscpy-s.md)   \n [strcpy, wcscpy, _mbscpy](../../c-runtime-library/reference/strcpy-wcscpy-mbscpy.md)   \n [strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l](../../c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l.md)   \n [strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md)"}