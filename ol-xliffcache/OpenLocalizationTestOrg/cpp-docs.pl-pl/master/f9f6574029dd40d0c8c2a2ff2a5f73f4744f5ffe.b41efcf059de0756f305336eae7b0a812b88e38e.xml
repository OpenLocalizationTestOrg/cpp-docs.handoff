{"nodes":[{"pos":[12,43],"content":"pair Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"pair Structure | Microsoft Docs","pos":[0,31]}]},{"pos":[643,657],"content":"pair Structure","linkify":"pair Structure","nodes":[{"content":"pair Structure","pos":[0,14]}]},{"content":"A struct that provides for the ability to treat two objects as a single object.","pos":[658,737]},{"pos":[746,752],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1265,1275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Value initializing the first element of <ph id=\"ph1\">`pair`</ph>.","pos":[1289,1336],"source":" Value initializing the first element of `pair`."},{"content":"Value initializing the second element of <ph id=\"ph1\">`pair`</ph>.","pos":[1353,1401],"source":" Value initializing the second element of `pair`."},{"content":"A pair whose values are to be used to initialize the elements of another pair.","pos":[1419,1497]},{"pos":[1506,1518],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1522,1667],"content":"The first (default) constructor initializes first element of the pair to the default of type <bpt id=\"p1\">**</bpt>T1<ept id=\"p1\">**</ept> and second element to default of type <bpt id=\"p2\">**</bpt>T2<ept id=\"p2\">**</ept>.","source":"The first (default) constructor initializes first element of the pair to the default of type **T1** and second element to default of type **T2**."},{"pos":[1674,1766],"content":"The second constructor initializes first element of the pair to <ph id=\"ph1\">`Val1`</ph> and second to <bpt id=\"p1\">*</bpt>Val2.<ept id=\"p1\">*</ept>","source":"The second constructor initializes first element of the pair to `Val1` and second to *Val2.*"},{"content":"The third (template) constructor initializes first element of the pair to <ph id=\"ph1\">`Right`</ph>.","pos":[1773,1855],"source":"The third (template) constructor initializes first element of the pair to `Right`."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept> and second to <ph id=\"ph1\">`Right`</ph>.","pos":[1856,1888],"source":"**first** and second to `Right`."},{"content":"<bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept>.","pos":[1889,1900],"source":"**second**."},{"pos":[1907,2086],"content":"The fourth constructor initializes first element of the pair to <ph id=\"ph1\">`Val1`</ph> and second to <bpt id=\"p1\">*</bpt>Val2<ept id=\"p1\">*</ept> using <bpt id=\"p2\">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id=\"p2\">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.","source":"The fourth constructor initializes first element of the pair to `Val1` and second to *Val2* using [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md)."},{"pos":[2095,2102],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template struct stores a pair of objects of type <bpt id=\"p1\">**</bpt>T1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>T2<ept id=\"p2\">**</ept>, respectively.","pos":[2106,2191],"source":"The template struct stores a pair of objects of type **T1** and **T2**, respectively."},{"content":"The type <bpt id=\"p1\">**</bpt>first_type<ept id=\"p1\">**</ept> is the same as the template parameter <bpt id=\"p2\">**</bpt>T1<ept id=\"p2\">**</ept> and the type <bpt id=\"p3\">**</bpt>second_type<ept id=\"p3\">**</ept> is the same as the template parameter <bpt id=\"p4\">**</bpt>T2<ept id=\"p4\">**</ept>.","pos":[2192,2335],"source":" The type **first_type** is the same as the template parameter **T1** and the type **second_type** is the same as the template parameter **T2**."},{"content":"<bpt id=\"p1\">**</bpt>T1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>T2<ept id=\"p2\">**</ept> each need supply only a default constructor, a single-argument constructor, and a destructor.","pos":[2336,2447],"source":"**T1** and **T2** each need supply only a default constructor, a single-argument constructor, and a destructor."},{"content":"All members of the type <ph id=\"ph1\">`pair`</ph> are public, because the type is declared as a <ph id=\"ph2\">`struct`</ph> rather than as a <bpt id=\"p1\">**</bpt>class<ept id=\"p1\">**</ept>.","pos":[2448,2561],"source":" All members of the type `pair` are public, because the type is declared as a `struct` rather than as a **class**."},{"content":"The two most common uses for a pair are as return types for functions that return two values and as elements for the associative container classes <bpt id=\"p1\">[</bpt>map Class<ept id=\"p1\">](../standard-library/map-class.md)</ept> and <bpt id=\"p2\">[</bpt>multimap Class<ept id=\"p2\">](../standard-library/multimap-class.md)</ept> that have both a key and a value type associated with each element.","pos":[2562,2882],"source":" The two most common uses for a pair are as return types for functions that return two values and as elements for the associative container classes [map Class](../standard-library/map-class.md) and [multimap Class](../standard-library/multimap-class.md) that have both a key and a value type associated with each element."},{"content":"The latter satisfies the requirements for a pair associative container and has a value type of the form <ph id=\"ph1\">`pair`</ph><ph id=\"ph2\">&lt; </ph><bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept><ph id=\"ph3\">`key_type`</ph>, <ph id=\"ph4\">`mapped_type`</ph>&gt;.","pos":[2883,3031],"source":" The latter satisfies the requirements for a pair associative container and has a value type of the form `pair`< **const**`key_type`, `mapped_type`>."},{"pos":[3040,3047],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5708,5720],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5724,5746],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>utility&gt;","source":"**Header:** \\<utility>"},{"pos":[5753,5771],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5780,5788],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5792,5901],"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept>","source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)"}],"content":"---\ntitle: \"pair Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"utility/std::pair\"\n  - \"pair\"\n  - \"std::pair\"\n  - \"std.pair\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"pair class\"\nms.assetid: 539d3d67-80a2-4170-b347-783495d42109\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# pair Structure\nA struct that provides for the ability to treat two objects as a single object.  \n  \n## Syntax  \n```  \nstruct pair\n{\n    typedef T1 first_type;\n    typedef T2 second_type;\n    T1 first;\n    T2 second;\n    constexpr pair();\n    constexpr pair(\n        const T1& Val1,\n        const T2& Val2);\n\n    template <class Other1, class Other2>\n    constexpr pair(const pair<Other1, Other2>& Right);\n\n    template <class Other1, class Other2>\n    constexpr pair(const pair <Other1 Val1, Other2 Val2>&& Right);\n\n    template <class Other1, class Other2>\n    constexpr pair(Other1&& Val1, Other2&& Val2);\n};\n```  \n#### Parameters  \n `Val1`  \n Value initializing the first element of `pair`.  \n  \n `Val2`  \n Value initializing the second element of `pair`.  \n  \n `Right`  \n A pair whose values are to be used to initialize the elements of another pair.  \n  \n## Return Value  \n The first (default) constructor initializes first element of the pair to the default of type **T1** and second element to default of type **T2**.  \n  \n The second constructor initializes first element of the pair to `Val1` and second to *Val2.*  \n  \n The third (template) constructor initializes first element of the pair to `Right`. **first** and second to `Right`. **second**.  \n  \n The fourth constructor initializes first element of the pair to `Val1` and second to *Val2* using [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md).  \n  \n## Remarks  \n The template struct stores a pair of objects of type **T1** and **T2**, respectively. The type **first_type** is the same as the template parameter **T1** and the type **second_type** is the same as the template parameter **T2**. **T1** and **T2** each need supply only a default constructor, a single-argument constructor, and a destructor. All members of the type `pair` are public, because the type is declared as a `struct` rather than as a **class**. The two most common uses for a pair are as return types for functions that return two values and as elements for the associative container classes [map Class](../standard-library/map-class.md) and [multimap Class](../standard-library/multimap-class.md) that have both a key and a value type associated with each element. The latter satisfies the requirements for a pair associative container and has a value type of the form `pair`< **const**`key_type`, `mapped_type`>.  \n  \n## Example  \n  \n```cpp  \n// utility_pair.cpp  \n// compile with: /EHsc  \n#include <utility>  \n#include <map>  \n#include <iomanip>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Using the constructor to declare and initialize a pair  \n   pair <int, double> p1 ( 10, 1.1e-2 );  \n  \n   // Compare using the helper function to declare and initialize a pair  \n   pair <int, double> p2;  \n   p2 = make_pair ( 10, 2.22e-1 );  \n  \n   // Making a copy of a pair  \n   pair <int, double> p3 ( p1 );  \n  \n   cout.precision ( 3 );  \n   cout << \"The pair p1 is: ( \" << p1.first << \", \"   \n        << p1.second << \" ).\" << endl;  \n   cout << \"The pair p2 is: ( \" << p2.first << \", \"   \n        << p2.second << \" ).\" << endl;  \n   cout << \"The pair p3 is: ( \" << p3.first << \", \"   \n        << p3.second << \" ).\" << endl;  \n  \n   // Using a pair for a map element  \n   map <int, int> m1;  \n   map <int, int>::iterator m1_Iter;  \n  \n   typedef pair <int, int> Map_Int_Pair;  \n  \n   m1.insert ( Map_Int_Pair ( 1, 10 ) );  \n   m1.insert ( Map_Int_Pair ( 2, 20 ) );  \n   m1.insert ( Map_Int_Pair ( 3, 30 ) );  \n  \n   cout << \"The element pairs of the map m1 are:\";  \n   for ( m1_Iter = m1.begin( ); m1_Iter != m1.end( ); m1_Iter++ )  \n      cout << \" ( \" << m1_Iter -> first << \", \"  \n           << m1_Iter -> second << \" )\";  \n   cout   << \".\" << endl;  \n  \n   // Using pair as a return type for a function  \n   pair< map<int,int>::iterator, bool > pr1, pr2;  \n   pr1 = m1.insert ( Map_Int_Pair ( 4, 40 ) );  \n   pr2 = m1.insert ( Map_Int_Pair (1, 10 ) );  \n  \n   if( pr1.second == true )  \n   {  \n      cout << \"The element (4,40) was inserted successfully in m1.\"  \n           << endl;  \n   }  \n   else     \n   {  \n      cout << \"The element with a key value of\\n\"  \n           << \" ( (pr1.first) -> first ) = \" << ( pr1.first ) -> first   \n           << \" is already in m1,\\n so the insertion failed.\" << endl;  \n   }  \n  \n   if( pr2.second == true )  \n   {  \n      cout << \"The element (1,10) was inserted successfully in m1.\"  \n           << endl;  \n   }  \n   else     \n   {  \n      cout << \"The element with a key value of\\n\"  \n           << \" ( (pr2.first) -> first ) = \" << ( pr2.first ) -> first   \n           << \" is already in m1,\\n so the insertion failed.\" << endl;  \n   }  \n}  \n\\* Output:   \nThe pair p1 is: ( 10, 0.011 ).  \nThe pair p2 is: ( 10, 0.222 ).  \nThe pair p3 is: ( 10, 0.011 ).  \nThe element pairs of the map m1 are: ( 1, 10 ) ( 2, 20 ) ( 3, 30 ).  \nThe element (4,40) was inserted successfully in m1.  \nThe element with a key value of  \n ( (pr2.first) -> first ) = 1 is already in m1,  \n so the insertion failed.  \n*\\  \n```  \n  \n## Requirements  \n **Header:** \\<utility>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n\n\n"}