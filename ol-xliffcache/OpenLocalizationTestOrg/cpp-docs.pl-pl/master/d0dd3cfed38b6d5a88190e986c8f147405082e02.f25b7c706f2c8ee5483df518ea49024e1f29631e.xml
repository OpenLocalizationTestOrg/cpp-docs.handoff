{"nodes":[{"pos":[12,50],"content":"vfscanf_s, vfwscanf_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vfscanf_s, vfwscanf_s | Microsoft Docs","pos":[0,38]}]},{"content":"vfscanf_s, vfwscanf_s","pos":[891,912]},{"content":"Reads formatted data from a stream.","pos":[913,948]},{"content":"These versions of vfscanf, vfwscanf have security enhancements, as described in <bpt id=\"p1\">[</bpt>Security Features in the CRT<ept id=\"p1\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[949,1117],"source":" These versions of vfscanf, vfwscanf have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1126,1132]},{"content":"Parameters","pos":[1341,1351]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1367,1395],"source":" Pointer to `FILE` structure."},{"content":"Format-control string.","pos":[1414,1436]},{"content":"Variable argument list.","pos":[1456,1479]},{"content":"Return Value","pos":[1488,1500]},{"content":"Each of these functions returns the number of fields that are successfully converted and assigned; the return value does not include fields that were read but not assigned.","pos":[1504,1676]},{"content":"A return value of 0 indicates that no fields were assigned.","pos":[1677,1736]},{"content":"If an error occurs, or if the end of the file stream is reached before the first conversion, the return value is <ph id=\"ph1\">`EOF`</ph> for <ph id=\"ph2\">`vfscanf_s`</ph> and <ph id=\"ph3\">`vfwscanf_s`</ph>.","pos":[1737,1889],"source":" If an error occurs, or if the end of the file stream is reached before the first conversion, the return value is `EOF` for `vfscanf_s` and `vfwscanf_s`."},{"content":"These functions validate their parameters.","pos":[1896,1938]},{"content":"If <ph id=\"ph1\">`stream`</ph> is an invalid file pointer, or <ph id=\"ph2\">`format`</ph> is a null pointer, these functions invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1939,2152],"source":" If `stream` is an invalid file pointer, or `format` is a null pointer, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return <ph id=\"ph1\">`EOF`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2153,2247],"source":" If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`."},{"content":"Remarks","pos":[2256,2263]},{"content":"The <ph id=\"ph1\">`vfscanf_s`</ph> function reads data from the current position of <ph id=\"ph2\">`stream`</ph> into the locations that are given by the <ph id=\"ph3\">`arglist`</ph> argument list (if any).","pos":[2267,2415],"source":"The `vfscanf_s` function reads data from the current position of `stream` into the locations that are given by the `arglist` argument list (if any)."},{"content":"Each argument in the list must be a pointer to a variable of a type that corresponds to a type specifier in <ph id=\"ph1\">`format`</ph>.","pos":[2416,2533],"source":" Each argument in the list must be a pointer to a variable of a type that corresponds to a type specifier in `format`."},{"content":"controls the interpretation of the input fields and has the same form and function as the <ph id=\"ph1\">`format`</ph> argument for <ph id=\"ph2\">`scanf_s`</ph>; see <bpt id=\"p1\">[</bpt>Format Specification Fields: scanf and wscanf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)</ept> for a description of <ph id=\"ph3\">`format`</ph>.","pos":[2543,2841],"source":" controls the interpretation of the input fields and has the same form and function as the `format` argument for `scanf_s`; see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md) for a description of `format`."},{"content":"is a wide-character version of <ph id=\"ph1\">`vfscanf_s`</ph>; the format argument to <ph id=\"ph2\">`vfwscanf_s`</ph> is a wide-character string.","pos":[2855,2962],"source":" is a wide-character version of `vfscanf_s`; the format argument to `vfwscanf_s` is a wide-character string."},{"content":"These functions behave identically if the stream is opened in ANSI mode.","pos":[2963,3035]},{"content":"doesn't currently support input from a UNICODE stream.","pos":[3048,3102]},{"content":"The main difference between the more secure functions (that have the <ph id=\"ph1\">`_s`</ph> suffix) and the other versions is that the more secure functions require the size in characters of each <ph id=\"ph2\">`c`</ph>, <ph id=\"ph3\">`C`</ph>, <ph id=\"ph4\">`s`</ph>, <ph id=\"ph5\">`S`</ph>, and <ph id=\"ph6\">`[`</ph> type field to be passed as an argument immediately following the variable.","pos":[3109,3389],"source":"The main difference between the more secure functions (that have the `_s` suffix) and the other versions is that the more secure functions require the size in characters of each `c`, `C`, `s`, `S`, and `[` type field to be passed as an argument immediately following the variable."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)</ept> and <bpt id=\"p2\">[</bpt>scanf Width Specification<ept id=\"p2\">](../../c-runtime-library/scanf-width-specification.md)</ept>.","pos":[3390,3623],"source":" For more information, see [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md) and [scanf Width Specification](../../c-runtime-library/scanf-width-specification.md)."},{"pos":[3631,3697],"content":"[!NOTE]\n The size parameter is of type `unsigned`, not `size_t`.","leadings":["","> "],"nodes":[{"content":"The size parameter is of type <ph id=\"ph1\">`unsigned`</ph>, not <ph id=\"ph2\">`size_t`</ph>.","pos":[9,64],"source":" The size parameter is of type `unsigned`, not `size_t`."}]},{"content":"Generic-Text Routine Mappings","pos":[3707,3736]},{"content":"TCHAR.H routine","pos":[3743,3758]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3759,3787],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3788,3801]},{"content":"_UNICODE defined","pos":[3802,3818]},{"content":"Requirements","pos":[3991,4003]},{"content":"Function","pos":[4010,4018]},{"content":"Required header","pos":[4019,4034]},{"content":"stdio.h&gt;","pos":[4094,4102],"source":"stdio.h>"},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4122,4144],"source":"stdio.h> or \\<wchar.h>"},{"pos":[4152,4256],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[4265,4272]},{"content":".NET Framework Equivalent","pos":[5752,5777]},{"content":"<bpt id=\"p1\">[</bpt>System::IO::StreamReader::ReadLine<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline.aspx)</ept>.","pos":[5781,5897],"source":"[System::IO::StreamReader::ReadLine](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline.aspx)."},{"content":"See also <ph id=\"ph1\">`Parse`</ph> methods, such as <bpt id=\"p1\">[</bpt>System::Double::Parse<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept>.","pos":[5898,6023],"source":" See also `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)."},{"content":"See Also","pos":[6032,6040]},{"content":"Stream I/O","pos":[6045,6055]},{"content":"_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l","pos":[6101,6149]},{"content":"fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l","pos":[6236,6286]},{"content":"scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l","pos":[6377,6419]},{"content":"sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l","pos":[6502,6548]},{"content":"fscanf, _fscanf_l, fwscanf, _fwscanf_l","pos":[6635,6673]},{"content":"vfscanf, vfwscanf","pos":[6752,6769]}],"content":"---\ntitle: \"vfscanf_s, vfwscanf_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"vfscanf_s\"\n  - \"vfwscanf_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"vfscanf_s\"\n  - \"vfwscanf_s\"\n  - \"_vftscanf_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nms.assetid: 9b0133f0-9a18-4581-b24b-3b72683ad432\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vfscanf_s, vfwscanf_s\nReads formatted data from a stream. These versions of vfscanf, vfwscanf have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nint vfscanf_s(   \n   FILE *stream,  \n   const char *format,  \n   va_list arglist  \n);  \nint vfwscanf_s(   \n   FILE *stream,  \n   const wchar_t *format,  \n   va_list arglist  \n);  \n  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n `format`  \n Format-control string.  \n  \n `arglist`  \n Variable argument list.  \n  \n## Return Value  \n Each of these functions returns the number of fields that are successfully converted and assigned; the return value does not include fields that were read but not assigned. A return value of 0 indicates that no fields were assigned. If an error occurs, or if the end of the file stream is reached before the first conversion, the return value is `EOF` for `vfscanf_s` and `vfwscanf_s`.  \n  \n These functions validate their parameters. If `stream` is an invalid file pointer, or `format` is a null pointer, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`.  \n  \n## Remarks  \n The `vfscanf_s` function reads data from the current position of `stream` into the locations that are given by the `arglist` argument list (if any). Each argument in the list must be a pointer to a variable of a type that corresponds to a type specifier in `format`. `format` controls the interpretation of the input fields and has the same form and function as the `format` argument for `scanf_s`; see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md) for a description of `format`. `vfwscanf_s` is a wide-character version of `vfscanf_s`; the format argument to `vfwscanf_s` is a wide-character string. These functions behave identically if the stream is opened in ANSI mode. `vfscanf_s` doesn't currently support input from a UNICODE stream.  \n  \n The main difference between the more secure functions (that have the `_s` suffix) and the other versions is that the more secure functions require the size in characters of each `c`, `C`, `s`, `S`, and `[` type field to be passed as an argument immediately following the variable. For more information, see [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md) and [scanf Width Specification](../../c-runtime-library/scanf-width-specification.md).  \n  \n> [!NOTE]\n>  The size parameter is of type `unsigned`, not `size_t`.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vftscanf_s`|`vfscanf_s`|`vfscanf_s`|`vfwscanf_s`|  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`vfscanf_s`|\\<stdio.h>|  \n|`vfwscanf_s`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_vfscanf_s.c  \n// compile with: /W3  \n// This program writes formatted  \n// data to a file. It then uses vfscanf_s to  \n// read the various data back from the file.  \n  \n#include <stdio.h>  \n#include <stdarg.h>  \n#include <stdlib.h>  \n  \nFILE *stream;  \n  \nint call_vfscanf_s(FILE * istream, char * format, ...)  \n{  \n    int result;  \n    va_list arglist;  \n    va_start(arglist, format);  \n    result = vfscanf_s(istream, format, arglist);  \n    va_end(arglist);  \n    return result;  \n}  \n  \nint main(void)  \n{  \n    long l;  \n    float fp;  \n    char s[81];  \n    char c;  \n  \n    if (fopen_s(&stream, \"vfscanf_s.out\", \"w+\") != 0)  \n    {  \n        printf(\"The file vfscanf_s.out was not opened\\n\");  \n    }  \n    else  \n    {  \n        fprintf(stream, \"%s %ld %f%c\", \"a-string\",  \n            65000, 3.14159, 'x');  \n        // Security caution!  \n        // Beware loading data from a file without confirming its size,  \n        // as it may lead to a buffer overrun situation.  \n  \n        // Set pointer to beginning of file:  \n        fseek(stream, 0L, SEEK_SET);  \n  \n        // Read data back from file:  \n        call_vfscanf_s(stream, \"%s %ld %f%c\", s, _countof(s), &l, &fp, &c, 1);  \n  \n        // Output data read:   \n        printf(\"%s\\n\", s);  \n        printf(\"%ld\\n\", l);  \n        printf(\"%f\\n\", fp);  \n        printf(\"%c\\n\", c);  \n  \n        fclose(stream);  \n    }  \n}  \n  \n```  \n  \n```Output  \na-string  \n65000  \n3.141590  \nx  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::StreamReader::ReadLine](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline.aspx). See also `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l](../../c-runtime-library/reference/cscanf-s-cscanf-s-l-cwscanf-s-cwscanf-s-l.md)   \n [fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l](../../c-runtime-library/reference/fprintf-s-fprintf-s-l-fwprintf-s-fwprintf-s-l.md)   \n [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)   \n [sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)   \n [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)   \n [vfscanf, vfwscanf](../../c-runtime-library/reference/vfscanf-vfwscanf.md)"}