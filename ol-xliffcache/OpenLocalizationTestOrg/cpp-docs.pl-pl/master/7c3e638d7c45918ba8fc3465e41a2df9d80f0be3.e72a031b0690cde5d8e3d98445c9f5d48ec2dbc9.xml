{"nodes":[{"pos":[12,38],"content":"mbsrtowcs | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"mbsrtowcs | Microsoft Docs","pos":[0,26]}]},{"content":"mbsrtowcs","pos":[915,924]},{"content":"Converts a multibyte character string in the current locale to a corresponding wide character string, with the capability of restarting in the middle of a multibyte character.","pos":[925,1100]},{"content":"A more secure version of this function is available; see <bpt id=\"p1\">[</bpt>mbsrtowcs_s<ept id=\"p1\">](../../c-runtime-library/reference/mbsrtowcs-s.md)</ept>.","pos":[1101,1222],"source":" A more secure version of this function is available; see [mbsrtowcs_s](../../c-runtime-library/reference/mbsrtowcs-s.md)."},{"content":"Syntax","pos":[1231,1237]},{"content":"Parameters","pos":[1536,1546]},{"content":"[out]","pos":[1550,1555]},{"content":"Address to store the resulting converted wide character string.","pos":[1567,1630]},{"content":"[in, out]","pos":[1637,1646]},{"content":"Indirect pointer to the location of the multibyte character string to convert.","pos":[1658,1736]},{"content":"[in]","pos":[1743,1747]},{"content":"The maximum number of characters (not bytes) to convert and store in <ph id=\"ph1\">`wcstr`</ph>.","pos":[1759,1836],"source":" The maximum number of characters (not bytes) to convert and store in `wcstr`."},{"content":"[in, out]","pos":[1843,1852]},{"content":"A pointer to an <ph id=\"ph1\">`mbstate_t`</ph> conversion state object.","pos":[1866,1918],"source":" A pointer to an `mbstate_t` conversion state object."},{"content":"If this value is a null pointer, a static internal conversion state object is used.","pos":[1919,2002]},{"content":"Because the internal <ph id=\"ph1\">`mbstate_t`</ph> object is not thread-safe, we recommend that you always pass your own <ph id=\"ph2\">`mbstate`</ph> parameter.","pos":[2003,2126],"source":" Because the internal `mbstate_t` object is not thread-safe, we recommend that you always pass your own `mbstate` parameter."},{"content":"Return Value","pos":[2135,2147]},{"content":"Returns the number of characters successfully converted, not including the terminating null character, if any.","pos":[2151,2261]},{"content":"Returns (size_t)(-1) if an error occurred, and sets <ph id=\"ph1\">`errno`</ph> to EILSEQ.","pos":[2262,2332],"source":" Returns (size_t)(-1) if an error occurred, and sets `errno` to EILSEQ."},{"content":"Remarks","pos":[2341,2348]},{"content":"The <ph id=\"ph1\">`mbsrtowcs`</ph> function converts a string of multibyte characters indirectly pointed to by <ph id=\"ph2\">`mbstr`</ph>, into wide characters stored in the buffer pointed to by <ph id=\"ph3\">`wcstr`</ph>, by using the conversion state contained in <ph id=\"ph4\">`mbstate`</ph>.","pos":[2352,2571],"source":"The `mbsrtowcs` function converts a string of multibyte characters indirectly pointed to by `mbstr`, into wide characters stored in the buffer pointed to by `wcstr`, by using the conversion state contained in `mbstate`."},{"content":"The conversion continues for each character until either a terminating null multibyte character is encountered, a multibyte sequence that does not correspond to a valid character in the current locale is encountered, or until <ph id=\"ph1\">`count`</ph> characters have been converted.","pos":[2572,2837],"source":" The conversion continues for each character until either a terminating null multibyte character is encountered, a multibyte sequence that does not correspond to a valid character in the current locale is encountered, or until `count` characters have been converted."},{"content":"If <ph id=\"ph1\">`mbsrtowcs`</ph> encounters the multibyte null character ('\\0') either before or when <ph id=\"ph2\">`count`</ph> occurs, it converts it to a 16-bit terminating null character and stops.","pos":[2838,3002],"source":" If `mbsrtowcs` encounters the multibyte null character ('\\0') either before or when `count` occurs, it converts it to a 16-bit terminating null character and stops."},{"content":"Thus, the wide character string at <ph id=\"ph1\">`wcstr`</ph> is null-terminated only if <ph id=\"ph2\">`mbsrtowcs`</ph> encounters a multibyte null character during conversion.","pos":[3009,3147],"source":"Thus, the wide character string at `wcstr` is null-terminated only if `mbsrtowcs` encounters a multibyte null character during conversion."},{"content":"If the sequences pointed to by <ph id=\"ph1\">`mbstr`</ph> and <ph id=\"ph2\">`wcstr`</ph> overlap, the behavior of <ph id=\"ph3\">`mbsrtowcs`</ph> is undefined.","pos":[3148,3249],"source":" If the sequences pointed to by `mbstr` and `wcstr` overlap, the behavior of `mbsrtowcs` is undefined."},{"content":"is affected by the LC_TYPE category of the current locale.","pos":[3262,3320]},{"content":"The <ph id=\"ph1\">`mbsrtowcs`</ph> function differs from <bpt id=\"p1\">[</bpt>mbstowcs, _mbstowcs_l<ept id=\"p1\">](../../c-runtime-library/reference/mbstowcs-mbstowcs-l.md)</ept> by its restartability.","pos":[3327,3469],"source":"The `mbsrtowcs` function differs from [mbstowcs, _mbstowcs_l](../../c-runtime-library/reference/mbstowcs-mbstowcs-l.md) by its restartability."},{"content":"The conversion state is stored in <ph id=\"ph1\">`mbstate`</ph> for subsequent calls to the same or other restartable functions.","pos":[3470,3578],"source":" The conversion state is stored in `mbstate` for subsequent calls to the same or other restartable functions."},{"content":"Results are undefined when mixing the use of restartable and nonrestartable functions.","pos":[3579,3665]},{"content":"For example, an application should use <ph id=\"ph1\">`mbsrlen`</ph> instead of <ph id=\"ph2\">`mbslen`</ph>, if a subsequent call to <ph id=\"ph3\">`mbsrtowcs`</ph> is used instead of","pos":[3667,3791],"source":"  For example, an application should use `mbsrlen` instead of `mbslen`, if a subsequent call to `mbsrtowcs` is used instead of "},{"content":"If <ph id=\"ph1\">`wcstr`</ph> is not a null pointer, the pointer object pointed to by <ph id=\"ph2\">`mbstr`</ph> is assigned a null pointer if conversion stopped because a terminating null character was reached.","pos":[3810,3983],"source":"If `wcstr` is not a null pointer, the pointer object pointed to by `mbstr` is assigned a null pointer if conversion stopped because a terminating null character was reached."},{"content":"Otherwise, it is assigned the address just past the last multibyte character converted, if any.","pos":[3984,4079]},{"content":"This allows a subsequent function call to restart conversion where this call stopped.","pos":[4080,4165]},{"content":"If the <ph id=\"ph1\">`wcstr`</ph> argument is a null pointer, the <ph id=\"ph2\">`count`</ph> argument is ignored and <ph id=\"ph3\">`mbsrtowcs`</ph> returns the required size in wide characters for the destination string.","pos":[4172,4335],"source":"If the `wcstr` argument is a null pointer, the `count` argument is ignored and `mbsrtowcs` returns the required size in wide characters for the destination string."},{"content":"If <ph id=\"ph1\">`mbstate`</ph> is a null pointer, the function uses a non-thread-safe static internal <ph id=\"ph2\">`mbstate_t`</ph> conversion state object.","pos":[4336,4456],"source":" If `mbstate` is a null pointer, the function uses a non-thread-safe static internal `mbstate_t` conversion state object."},{"content":"If the character sequence <ph id=\"ph1\">`mbstr`</ph> does not have a corresponding multibyte character representation, a -1 is returned and the <ph id=\"ph2\">`errno`</ph> is set to <ph id=\"ph3\">`EILSEQ`</ph>.","pos":[4457,4609],"source":" If the character sequence `mbstr` does not have a corresponding multibyte character representation, a -1 is returned and the `errno` is set to `EILSEQ`."},{"content":"If <ph id=\"ph1\">`mbstr`</ph> isa null pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[4616,4775],"source":"If `mbstr` isa null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns -1.","pos":[4776,4867],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns -1."},{"content":"In C++, this function has a template overload that invokes the newer, secure counterpart of this function.","pos":[4874,4980]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4981,5089],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Exceptions","pos":[5098,5108]},{"pos":[5112,5307],"content":"The <ph id=\"ph1\">`mbsrtowcs`</ph> function is multithread safe as long as no function in the current thread calls <ph id=\"ph2\">`setlocale`</ph> as long as this function is executing and the <ph id=\"ph3\">`mbstate`</ph> argument is not a null pointer.","source":"The `mbsrtowcs` function is multithread safe as long as no function in the current thread calls `setlocale` as long as this function is executing and the `mbstate` argument is not a null pointer."},{"content":".NET Framework Equivalent","pos":[5316,5341]},{"content":"Not applicable.","pos":[5345,5360]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[5361,5408],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[5409,5534],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"Requirements","pos":[5543,5555]},{"content":"Routine","pos":[5562,5569]},{"content":"Required header","pos":[5570,5585]},{"content":"wchar.h&gt;","pos":[5644,5652],"source":"wchar.h>"},{"content":"See Also","pos":[5662,5670]},{"content":"Data Conversion","pos":[5675,5690]},{"content":"Locale","pos":[5741,5747]},{"content":"Interpretation of Multibyte-Character Sequences","pos":[5789,5836]},{"content":"mbrtowc","pos":[5919,5926]},{"content":"mbtowc, _mbtowc_l","pos":[5979,5996]},{"content":"mbstowcs, _mbstowcs_l","pos":[6057,6078]},{"content":"mbsinit","pos":[6143,6150]}],"content":"---\ntitle: \"mbsrtowcs | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"mbsrtowcs\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"mbsrtowcs\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"mbsrtowcs function\"\nms.assetid: f3a29de8-e36e-425b-a7fa-a258e6d7909d\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# mbsrtowcs\nConverts a multibyte character string in the current locale to a corresponding wide character string, with the capability of restarting in the middle of a multibyte character. A more secure version of this function is available; see [mbsrtowcs_s](../../c-runtime-library/reference/mbsrtowcs-s.md).  \n  \n## Syntax  \n  \n```  \nsize_t mbsrtowcs(  \n   wchar_t *wcstr,  \n   const char **mbstr,  \n   sizeof count,  \n   mbstate_t *mbstate  \n);  \ntemplate <size_t size>  \nsize_t mbsrtowcs(  \n   wchar_t (&wcstr)[size],  \n   const char **mbstr,  \n   sizeof count,  \n   mbstate_t *mbstate  \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `wcstr`  \n Address to store the resulting converted wide character string.  \n  \n [in, out] `mbstr`  \n Indirect pointer to the location of the multibyte character string to convert.  \n  \n [in] `count`  \n The maximum number of characters (not bytes) to convert and store in `wcstr`.  \n  \n [in, out] `mbstate`  \n A pointer to an `mbstate_t` conversion state object. If this value is a null pointer, a static internal conversion state object is used. Because the internal `mbstate_t` object is not thread-safe, we recommend that you always pass your own `mbstate` parameter.  \n  \n## Return Value  \n Returns the number of characters successfully converted, not including the terminating null character, if any. Returns (size_t)(-1) if an error occurred, and sets `errno` to EILSEQ.  \n  \n## Remarks  \n The `mbsrtowcs` function converts a string of multibyte characters indirectly pointed to by `mbstr`, into wide characters stored in the buffer pointed to by `wcstr`, by using the conversion state contained in `mbstate`. The conversion continues for each character until either a terminating null multibyte character is encountered, a multibyte sequence that does not correspond to a valid character in the current locale is encountered, or until `count` characters have been converted. If `mbsrtowcs` encounters the multibyte null character ('\\0') either before or when `count` occurs, it converts it to a 16-bit terminating null character and stops.  \n  \n Thus, the wide character string at `wcstr` is null-terminated only if `mbsrtowcs` encounters a multibyte null character during conversion. If the sequences pointed to by `mbstr` and `wcstr` overlap, the behavior of `mbsrtowcs` is undefined. `mbsrtowcs` is affected by the LC_TYPE category of the current locale.  \n  \n The `mbsrtowcs` function differs from [mbstowcs, _mbstowcs_l](../../c-runtime-library/reference/mbstowcs-mbstowcs-l.md) by its restartability. The conversion state is stored in `mbstate` for subsequent calls to the same or other restartable functions. Results are undefined when mixing the use of restartable and nonrestartable functions.  For example, an application should use `mbsrlen` instead of `mbslen`, if a subsequent call to `mbsrtowcs` is used instead of `mbstowcs.`  \n  \n If `wcstr` is not a null pointer, the pointer object pointed to by `mbstr` is assigned a null pointer if conversion stopped because a terminating null character was reached. Otherwise, it is assigned the address just past the last multibyte character converted, if any. This allows a subsequent function call to restart conversion where this call stopped.  \n  \n If the `wcstr` argument is a null pointer, the `count` argument is ignored and `mbsrtowcs` returns the required size in wide characters for the destination string. If `mbstate` is a null pointer, the function uses a non-thread-safe static internal `mbstate_t` conversion state object. If the character sequence `mbstr` does not have a corresponding multibyte character representation, a -1 is returned and the `errno` is set to `EILSEQ`.  \n  \n If `mbstr` isa null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns -1.  \n  \n In C++, this function has a template overload that invokes the newer, secure counterpart of this function. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n## Exceptions  \n The `mbsrtowcs` function is multithread safe as long as no function in the current thread calls `setlocale` as long as this function is executing and the `mbstate` argument is not a null pointer.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`mbsrtowcs`|\\<wchar.h>|  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [mbrtowc](../../c-runtime-library/reference/mbrtowc.md)   \n [mbtowc, _mbtowc_l](../../c-runtime-library/reference/mbtowc-mbtowc-l.md)   \n [mbstowcs, _mbstowcs_l](../../c-runtime-library/reference/mbstowcs-mbstowcs-l.md)   \n [mbsinit](../../c-runtime-library/reference/mbsinit.md)"}