{"nodes":[{"pos":[12,58],"content":"operator&gt;= (set) (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"operator<ph id=\"ph1\">&amp;gt;</ph>= (set) (STL-CLR) | Microsoft Docs","pos":[0,46],"source":"operator&gt;= (set) (STL-CLR) | Microsoft Docs"}]},{"content":"operator<ph id=\"ph1\">&amp;gt;</ph>= (set) (STL/CLR)","pos":[641,670],"source":"operator&gt;= (set) (STL/CLR)"},{"content":"List greater than or equal comparison.","pos":[671,709]},{"content":"Syntax","pos":[718,724]},{"content":"Parameters","pos":[841,851]},{"content":"left","pos":[855,859]},{"content":"Left container to compare.","pos":[863,889]},{"content":"right","pos":[896,901]},{"content":"Right container to compare.","pos":[905,932]},{"content":"Remarks","pos":[941,948]},{"content":"The operator function returns <ph id=\"ph1\">`!(``left`</ph> <ph id=\"ph2\">`&lt;`</ph> <ph id=\"ph3\">`right``)`</ph>.","pos":[952,1008],"source":"The operator function returns `!(``left` `<` `right``)`."},{"content":"You use it to test whether <ph id=\"ph1\">`left`</ph> is not ordered before <ph id=\"ph2\">`right`</ph> when the two sets are compared element by element.","pos":[1009,1123],"source":" You use it to test whether `left` is not ordered before `right` when the two sets are compared element by element."},{"content":"Example","pos":[1132,1139]},{"content":"Requirements","pos":[2141,2153]},{"pos":[2157,2182],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/set&gt;","source":"**Header:** \\<cliext/set>"},{"pos":[2189,2210],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2219,2227]},{"content":"set (STL/CLR)","pos":[2232,2245]},{"content":"operator== (set) (STL/CLR)","pos":[2278,2304]},{"content":"operator!= (set) (STL/CLR)","pos":[2355,2381]},{"content":"operator<ph id=\"ph1\">\\&lt;</ph> (set) (STL/CLR)","pos":[2434,2460],"source":"operator\\< (set) (STL/CLR)"},{"content":"operator&gt; (set) (STL/CLR)","pos":[2512,2537],"source":"operator> (set) (STL/CLR)"},{"content":"operator&lt;= (set) (STL/CLR)","pos":[2592,2618],"source":"operator<= (set) (STL/CLR)"}],"content":"---\ntitle: \"operator&gt;= (set) (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::set::operator>=\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator>= member [STL/CLR]\"\nms.assetid: d08a0fc9-02e4-4e05-b469-bac325c38370\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# operator&gt;= (set) (STL/CLR)\nList greater than or equal comparison.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Key>  \n    bool operator>=(set<Key>% left,  \n        set<Key>% right);  \n```  \n  \n#### Parameters  \n left  \n Left container to compare.  \n  \n right  \n Right container to compare.  \n  \n## Remarks  \n The operator function returns `!(``left` `<` `right``)`. You use it to test whether `left` is not ordered before `right` when the two sets are compared element by element.  \n  \n## Example  \n  \n```  \n// cliext_set_operator_ge.cpp   \n// compile with: /clr   \n#include <cliext/set>   \n  \ntypedef cliext::set<wchar_t> Myset;   \nint main()   \n    {   \n    Myset c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// assign to a new container   \n    Myset c2;   \n    c2.insert(L'a');   \n    c2.insert(L'b');   \n    c2.insert(L'd');   \n  \n// display contents \" a b d\"   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"[a b c] >= [a b c] is {0}\",   \n        c1 >= c1);   \n    System::Console::WriteLine(\"[a b c] >= [a b d] is {0}\",   \n        c1 >= c2);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \n a b d  \n[a b c] >= [a b c] is True  \n[a b c] >= [a b d] is False  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [set (STL/CLR)](../dotnet/set-stl-clr.md)   \n [operator== (set) (STL/CLR)](../dotnet/operator-equality-set-stl-clr.md)   \n [operator!= (set) (STL/CLR)](../dotnet/operator-inequality-set-stl-clr.md)   \n [operator\\< (set) (STL/CLR)](../dotnet/operator-less-than-set-stl-clr.md)   \n [operator> (set) (STL/CLR)](../dotnet/operator-greater-than-set-stl-clr.md)   \n [operator<= (set) (STL/CLR)](../dotnet/operator-less-or-equal-set-stl-clr.md)"}