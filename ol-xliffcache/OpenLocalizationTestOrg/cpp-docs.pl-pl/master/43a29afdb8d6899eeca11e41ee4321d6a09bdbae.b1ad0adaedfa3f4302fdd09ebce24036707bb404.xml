{"nodes":[{"pos":[12,41],"content":"User Records | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"User Records | Microsoft Docs","pos":[0,29]}]},{"content":"User Records","pos":[916,928]},{"content":"To use a static accessor (that is, an accessor derived from <bpt id=\"p1\">**</bpt>CAccessor)<ept id=\"p1\">**</ept>, your consumer must have a user record.","pos":[929,1043],"source":"To use a static accessor (that is, an accessor derived from **CAccessor)**, your consumer must have a user record."},{"content":"The user record is a C++ class that contains data elements to handle input or output.","pos":[1044,1129]},{"content":"The ATL OLE DB Consumer Wizard generates a user record for your consumer.","pos":[1130,1203]},{"content":"You can add methods to the user record for optional tasks like handling commands.","pos":[1204,1285]},{"content":"The following code shows a sample record that handles commands.","pos":[1292,1355]},{"content":"In the user record, <ph id=\"ph1\">`BEGIN_COLUMN_MAP`</ph> represents a data rowset passed to the consumer from a provider.","pos":[1356,1459],"source":" In the user record, `BEGIN_COLUMN_MAP` represents a data rowset passed to the consumer from a provider."},{"content":"represents a set of command parameters.","pos":[1478,1517]},{"content":"This example uses a <bpt id=\"p1\">[</bpt>CCommand<ept id=\"p1\">](../../data/oledb/ccommand-class.md)</ept> class to handle the command parameters.","pos":[1518,1624],"source":" This example uses a [CCommand](../../data/oledb/ccommand-class.md) class to handle the command parameters."},{"content":"The data members in the map entries represent offsets into one contiguous block of memory for each instance of the class.","pos":[1625,1746]},{"content":"The <ph id=\"ph1\">`COLUMN_ENTRY`</ph> macros correspond to the <ph id=\"ph2\">`PROVIDER_COLUMN_ENTRY`</ph> macros on the provider side.","pos":[1747,1843],"source":" The `COLUMN_ENTRY` macros correspond to the `PROVIDER_COLUMN_ENTRY` macros on the provider side."},{"pos":[1850,2044],"content":"For more information about the <bpt id=\"p1\">**</bpt>COLUMN_MAP<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>PARAM_MAP<ept id=\"p2\">**</ept> macros, see <bpt id=\"p3\">[</bpt>Macros for OLE DB Consumer Templates<ept id=\"p3\">](../../data/oledb/macros-and-global-functions-for-ole-db-consumer-templates.md)</ept>.","source":"For more information about the **COLUMN_MAP** and **PARAM_MAP** macros, see [Macros for OLE DB Consumer Templates](../../data/oledb/macros-and-global-functions-for-ole-db-consumer-templates.md)."},{"content":"Wizard-Generated User Records","pos":[2479,2508]},{"content":"If you use the ATL OLE DB Consumer Wizard to generate a consumer, you have the choice of using OLE DB Templates or OLE DB Attributes.","pos":[2512,2645]},{"content":"The generated code is different in each case.","pos":[2646,2691]},{"content":"For more information about this code, see <bpt id=\"p1\">[</bpt>Consumer Wizard-Generated Classes<ept id=\"p1\">](../../data/oledb/consumer-wizard-generated-classes.md)</ept>.","pos":[2692,2825],"source":" For more information about this code, see [Consumer Wizard-Generated Classes](../../data/oledb/consumer-wizard-generated-classes.md)."},{"content":"User Record Support for Multiple Accessors","pos":[2834,2876]},{"pos":[2880,3069],"content":"For a detailed discussion of the scenarios in which you need to use multiple accessors, see <bpt id=\"p1\">[</bpt>Using Multiple Accessors on a Rowset<ept id=\"p1\">](../../data/oledb/using-multiple-accessors-on-a-rowset.md)</ept>.","source":"For a detailed discussion of the scenarios in which you need to use multiple accessors, see [Using Multiple Accessors on a Rowset](../../data/oledb/using-multiple-accessors-on-a-rowset.md)."},{"content":"The following example shows the user record modified to support multiple accessors on the rowset.","pos":[3076,3173]},{"content":"Instead of <ph id=\"ph1\">`BEGIN_COLUMN_MAP`</ph> and <ph id=\"ph2\">`END_COLUMN_MAP`</ph>, it uses <bpt id=\"p1\">[</bpt>BEGIN_ACCESSOR_MAP<ept id=\"p1\">](../../data/oledb/begin-accessor-map.md)</ept> and <bpt id=\"p2\">[</bpt>BEGIN_ACCESSOR<ept id=\"p2\">](../../data/oledb/begin-accessor.md)</ept> for each accessor.","pos":[3174,3370],"source":" Instead of `BEGIN_COLUMN_MAP` and `END_COLUMN_MAP`, it uses [BEGIN_ACCESSOR_MAP](../../data/oledb/begin-accessor-map.md) and [BEGIN_ACCESSOR](../../data/oledb/begin-accessor.md) for each accessor."},{"content":"The <ph id=\"ph1\">`BEGIN_ACCESSOR`</ph> macro specifies the accessor number (offset from zero) and whether the accessor is an autoaccessor.","pos":[3371,3491],"source":" The `BEGIN_ACCESSOR` macro specifies the accessor number (offset from zero) and whether the accessor is an autoaccessor."},{"content":"Autoaccessors call <ph id=\"ph1\">`GetData`</ph> to retrieve data automatically on a call to <bpt id=\"p1\">[</bpt>MoveNext<ept id=\"p1\">](../../data/oledb/crowset-movenext.md)</ept>.","pos":[3492,3614],"source":" Autoaccessors call `GetData` to retrieve data automatically on a call to [MoveNext](../../data/oledb/crowset-movenext.md)."},{"content":"Nonautomatic accessors require you to explicitly retrieve the data.","pos":[3615,3682]},{"content":"Use a nonautomatic accessor if you are binding to a large data field (like a bitmap image) that you might not want to retrieve for every record.","pos":[3683,3827]},{"content":"See Also","pos":[4353,4361]},{"content":"OLE DB Consumer Templates","pos":[4366,4391]}],"content":"---\ntitle: \"User Records | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"COLUMN_ENTRY_MAP\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"rowsets [C++], accessors\"\n  - \"COLUMN_ENTRY macro\"\n  - \"COLUMN_ENTRY_MAP macro\"\n  - \"user records, OLE DB consumer templates\"\n  - \"OLE DB consumer templates, user records\"\n  - \"CAccessor class, example\"\n  - \"BEGIN_ACCESSOR_MAP macro\"\n  - \"accessors [C++], rowsets\"\n  - \"accessors [C++], static\"\n  - \"BEGIN_ACCESSOR macro, example\"\nms.assetid: 2de9e5eb-53ce-42b1-80fa-57d46600a80c\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# User Records\nTo use a static accessor (that is, an accessor derived from **CAccessor)**, your consumer must have a user record. The user record is a C++ class that contains data elements to handle input or output. The ATL OLE DB Consumer Wizard generates a user record for your consumer. You can add methods to the user record for optional tasks like handling commands.  \n  \n The following code shows a sample record that handles commands. In the user record, `BEGIN_COLUMN_MAP` represents a data rowset passed to the consumer from a provider. `BEGIN_PARAM_MAP` represents a set of command parameters. This example uses a [CCommand](../../data/oledb/ccommand-class.md) class to handle the command parameters. The data members in the map entries represent offsets into one contiguous block of memory for each instance of the class. The `COLUMN_ENTRY` macros correspond to the `PROVIDER_COLUMN_ENTRY` macros on the provider side.  \n  \n For more information about the **COLUMN_MAP** and **PARAM_MAP** macros, see [Macros for OLE DB Consumer Templates](../../data/oledb/macros-and-global-functions-for-ole-db-consumer-templates.md).  \n  \n```  \nclass CArtists  \n{  \npublic:  \n// Data Elements  \n   CHAR m_szFirstName[20];  \n   CHAR m_szLastName[30];  \n   short m_nAge;  \n  \n// Column binding map  \nBEGIN_COLUMN_MAP(CArtists)  \n   COLUMN_ENTRY(1, m_szFirstName)  \n   COLUMN_ENTRY(2, m_szLastName)  \n   COLUMN_ENTRY(3, m_nAge)  \nEND_COLUMN_MAP()  \n  \n// Parameter binding map  \nBEGIN_PARAM_MAP(CArtists)  \n   COLUMN_ENTRY(1, m_nAge)  \nEND_PARAM_MAP()  \n};  \n```  \n  \n## Wizard-Generated User Records  \n If you use the ATL OLE DB Consumer Wizard to generate a consumer, you have the choice of using OLE DB Templates or OLE DB Attributes. The generated code is different in each case. For more information about this code, see [Consumer Wizard-Generated Classes](../../data/oledb/consumer-wizard-generated-classes.md).  \n  \n## User Record Support for Multiple Accessors  \n For a detailed discussion of the scenarios in which you need to use multiple accessors, see [Using Multiple Accessors on a Rowset](../../data/oledb/using-multiple-accessors-on-a-rowset.md).  \n  \n The following example shows the user record modified to support multiple accessors on the rowset. Instead of `BEGIN_COLUMN_MAP` and `END_COLUMN_MAP`, it uses [BEGIN_ACCESSOR_MAP](../../data/oledb/begin-accessor-map.md) and [BEGIN_ACCESSOR](../../data/oledb/begin-accessor.md) for each accessor. The `BEGIN_ACCESSOR` macro specifies the accessor number (offset from zero) and whether the accessor is an autoaccessor. Autoaccessors call `GetData` to retrieve data automatically on a call to [MoveNext](../../data/oledb/crowset-movenext.md). Nonautomatic accessors require you to explicitly retrieve the data. Use a nonautomatic accessor if you are binding to a large data field (like a bitmap image) that you might not want to retrieve for every record.  \n  \n```  \nclass CMultiArtists  \n{  \npublic:  \n// Data Elements  \n   CHAR m_szFirstName[20];  \n   CHAR m_szLastName[30];  \n   short m_nAge;  \n  \n// Column binding map  \nBEGIN_ACCESSOR_MAP(CMultiArtists, 2)  \n   BEGIN_ACCESSOR(0, true)    // true specifies an auto accessor  \n    COLUMN_ENTRY(1, m_szFirstName)  \n    COLUMN_ENTRY(2, m_szLastName)  \n   END_ACCESSOR()  \n   BEGIN_ACCESSOR(1, false)   // false specifies a manual accessor  \n    COLUMN_ENTRY(3, m_nAge)  \n   END_ACCESSOR()  \nEND_ACCESSOR_MAP()  \n};  \n```  \n  \n## See Also  \n [OLE DB Consumer Templates](../../data/oledb/ole-db-consumer-templates-cpp.md)"}