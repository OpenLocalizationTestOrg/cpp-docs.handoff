{"nodes":[{"pos":[12,42],"content":"Low-Level I-O | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Low-Level I-O | Microsoft Docs","pos":[0,30]}]},{"content":"Low-Level I/O","pos":[725,738]},{"content":"These functions invoke the operating system directly for lower-level operation than that provided by stream I/O.","pos":[739,851]},{"content":"Low-level input and output calls do not buffer or format data.","pos":[852,914]},{"content":"Low-level routines can access the standard streams opened at program startup using the following predefined file descriptors.","pos":[921,1046]},{"content":"Stream","pos":[1053,1059]},{"content":"File Descriptor","pos":[1060,1075]},{"content":"0","pos":[1127,1128]},{"content":"1","pos":[1142,1143]},{"content":"2","pos":[1157,1158]},{"content":"Low-level I/O routines set the <bpt id=\"p1\">[</bpt>errno<ept id=\"p1\">](../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> global variable when an error occurs.","pos":[1166,1307],"source":"Low-level I/O routines set the [errno](../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) global variable when an error occurs."},{"content":"You must include STDIO.H when you use low-level functions only if your program requires a constant that is defined in STDIO.H, such as the end-of-file indicator (<ph id=\"ph1\">`EOF`</ph>).","pos":[1308,1477],"source":" You must include STDIO.H when you use low-level functions only if your program requires a constant that is defined in STDIO.H, such as the end-of-file indicator (`EOF`)."},{"content":"Low-Level I/O Functions","pos":[1487,1510]},{"content":"Function","pos":[1517,1525]},{"content":"Use","pos":[1526,1529]},{"content":"_close","pos":[1564,1570]},{"content":"Close file","pos":[1613,1623]},{"content":"_commit","pos":[1629,1636]},{"content":"Flush file to disk","pos":[1680,1698]},{"content":"_creat, _wcreat","pos":[1704,1719]},{"content":"Create file","pos":[1769,1780]},{"content":"_dup","pos":[1786,1790]},{"content":"Return next available file descriptor for given file","pos":[1836,1888]},{"content":"_dup2","pos":[1894,1899]},{"content":"Create second descriptor for given file","pos":[1945,1984]},{"content":"_eof","pos":[1990,1994]},{"content":"Test for end of file","pos":[2035,2055]},{"content":"_lseek, _lseeki64","pos":[2061,2078]},{"content":"Reposition file pointer to given location","pos":[2130,2171]},{"content":"_open, _wopen","pos":[2177,2190]},{"content":"Open file","pos":[2238,2247]},{"content":"_read","pos":[2253,2258]},{"content":"Read data from file","pos":[2300,2319]},{"pos":[2324,2464],"content":"<bpt id=\"p1\">[</bpt>_sopen, _wsopen<ept id=\"p1\">](../c-runtime-library/reference/sopen-wsopen.md)</ept>, <bpt id=\"p2\">[</bpt>_sopen_s, _wsopen_s<ept id=\"p2\">](../c-runtime-library/reference/sopen-s-wsopen-s.md)</ept>","source":"[_sopen, _wsopen](../c-runtime-library/reference/sopen-wsopen.md), [_sopen_s, _wsopen_s](../c-runtime-library/reference/sopen-s-wsopen-s.md)"},{"content":"Open file for file sharing","pos":[2465,2491]},{"content":"_tell, _telli64","pos":[2497,2512]},{"content":"Get current file-pointer position","pos":[2562,2595]},{"pos":[2600,2704],"content":"<bpt id=\"p1\">[</bpt>_umask<ept id=\"p1\">](../c-runtime-library/reference/umask.md)</ept>, <bpt id=\"p2\">[</bpt>_umask_s<ept id=\"p2\">](../c-runtime-library/reference/umask-s.md)</ept>","source":"[_umask](../c-runtime-library/reference/umask.md), [_umask_s](../c-runtime-library/reference/umask-s.md)"},{"content":"Set file-permission mask","pos":[2705,2729]},{"content":"_write","pos":[2735,2741]},{"content":"Write data to file","pos":[2784,2802]},{"pos":[2817,2914],"content":"and <ph id=\"ph1\">`_dup2`</ph> are typically used to associate the predefined file descriptors with different files.","source":" and `_dup2` are typically used to associate the predefined file descriptors with different files."},{"content":"See Also","pos":[2923,2931]},{"content":"Input and Output","pos":[2936,2952]},{"content":"Run-Time Routines by Category","pos":[3001,3030]},{"content":"System Calls","pos":[3092,3104]}],"content":"---\ntitle: \"Low-Level I-O | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"c.io\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"I/O [CRT], low-level\"\n  - \"I/O [CRT], functions\"\n  - \"low-level I/O routines\"\n  - \"file handles [C++]\"\n  - \"file handles [C++], I/O functions\"\nms.assetid: 53e11bdd-6720-481c-8b2b-3a3a569ed534\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Low-Level I/O\nThese functions invoke the operating system directly for lower-level operation than that provided by stream I/O. Low-level input and output calls do not buffer or format data.  \n  \n Low-level routines can access the standard streams opened at program startup using the following predefined file descriptors.  \n  \n|Stream|File Descriptor|  \n|------------|---------------------|  \n|`stdin`|0|  \n|`stdout`|1|  \n|`stderr`|2|  \n  \n Low-level I/O routines set the [errno](../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) global variable when an error occurs. You must include STDIO.H when you use low-level functions only if your program requires a constant that is defined in STDIO.H, such as the end-of-file indicator (`EOF`).  \n  \n### Low-Level I/O Functions  \n  \n|Function|Use|  \n|--------------|---------|  \n|[_close](../c-runtime-library/reference/close.md)|Close file|  \n|[_commit](../c-runtime-library/reference/commit.md)|Flush file to disk|  \n|[_creat, _wcreat](../c-runtime-library/reference/creat-wcreat.md)|Create file|  \n|[_dup](../c-runtime-library/reference/dup-dup2.md)|Return next available file descriptor for given file|  \n|[_dup2](../c-runtime-library/reference/dup-dup2.md)|Create second descriptor for given file|  \n|[_eof](../c-runtime-library/reference/eof.md)|Test for end of file|  \n|[_lseek, _lseeki64](../c-runtime-library/reference/lseek-lseeki64.md)|Reposition file pointer to given location|  \n|[_open, _wopen](../c-runtime-library/reference/open-wopen.md)|Open file|  \n|[_read](../c-runtime-library/reference/read.md)|Read data from file|  \n|[_sopen, _wsopen](../c-runtime-library/reference/sopen-wsopen.md), [_sopen_s, _wsopen_s](../c-runtime-library/reference/sopen-s-wsopen-s.md)|Open file for file sharing|  \n|[_tell, _telli64](../c-runtime-library/reference/tell-telli64.md)|Get current file-pointer position|  \n|[_umask](../c-runtime-library/reference/umask.md), [_umask_s](../c-runtime-library/reference/umask-s.md)|Set file-permission mask|  \n|[_write](../c-runtime-library/reference/write.md)|Write data to file|  \n  \n `_dup` and `_dup2` are typically used to associate the predefined file descriptors with different files.  \n  \n## See Also  \n [Input and Output](../c-runtime-library/input-and-output.md)   \n [Run-Time Routines by Category](../c-runtime-library/run-time-routines-by-category.md)   \n [System Calls](../c-runtime-library/system-calls.md)"}