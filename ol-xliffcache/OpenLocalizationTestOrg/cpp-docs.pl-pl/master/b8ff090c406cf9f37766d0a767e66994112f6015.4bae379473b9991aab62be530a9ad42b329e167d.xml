{"nodes":[{"pos":[12,39],"content":"_lock_file | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_lock_file | Microsoft Docs","pos":[0,27]}]},{"pos":[988,998],"content":"_lock_file","linkify":"_lock_file","nodes":[{"content":"_lock_file","pos":[0,10]}]},{"pos":[999,1096],"content":"Locks a <ph id=\"ph1\">`FILE`</ph> object to ensure consistency for threads accessing the <ph id=\"ph2\">`FILE`</ph> object concurrently.","source":"Locks a `FILE` object to ensure consistency for threads accessing the `FILE` object concurrently."},{"pos":[1105,1111],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1177,1187],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"File handle.","pos":[1201,1213]},{"pos":[1222,1229],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_lock_file`</ph> function locks the <ph id=\"ph2\">`FILE`</ph> object specified by <ph id=\"ph3\">`file`</ph>.","pos":[1233,1303],"source":"The `_lock_file` function locks the `FILE` object specified by `file`."},{"content":"The underlying file is not locked by <ph id=\"ph1\">`_lock_file`</ph>.","pos":[1304,1354],"source":" The underlying file is not locked by `_lock_file`."},{"content":"Use <bpt id=\"p1\">[</bpt>_unlock_file<ept id=\"p1\">](../../c-runtime-library/reference/unlock-file.md)</ept> to release the lock on the file.","pos":[1355,1456],"source":" Use [_unlock_file](../../c-runtime-library/reference/unlock-file.md) to release the lock on the file."},{"content":"Calls to <ph id=\"ph1\">`_lock_file`</ph> and <ph id=\"ph2\">`_unlock_file`</ph> must be matched in a thread.","pos":[1457,1526],"source":" Calls to `_lock_file` and `_unlock_file` must be matched in a thread."},{"pos":[1535,1547],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[1554,1561]},{"content":"Required header","pos":[1562,1577]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[1635,1645],"source":"\\<stdio.h>"},{"pos":[1653,1771],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[1780,1787],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3286,3311],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[3315,3418],"content":"<bpt id=\"p1\">[</bpt>System::IO::FileStream::Lock<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.filestream.lock.aspx)</ept>","source":"[System::IO::FileStream::Lock](https://msdn.microsoft.com/en-us/library/system.io.filestream.lock.aspx)"},{"pos":[3427,3435],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>File Handling<ept id=\"p1\">](../../c-runtime-library/file-handling.md)</ept><ph id=\"ph1\"> </ph>","pos":[3439,3497],"source":"[File Handling](../../c-runtime-library/file-handling.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_creat, _wcreat<ept id=\"p1\">](../../c-runtime-library/reference/creat-wcreat.md)</ept><ph id=\"ph1\"> </ph>","pos":[3500,3570],"source":" [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_open, _wopen<ept id=\"p1\">](../../c-runtime-library/reference/open-wopen.md)</ept><ph id=\"ph1\"> </ph>","pos":[3573,3639],"source":" [_open, _wopen](../../c-runtime-library/reference/open-wopen.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_unlock_file<ept id=\"p1\">](../../c-runtime-library/reference/unlock-file.md)</ept>","pos":[3642,3707],"source":" [_unlock_file](../../c-runtime-library/reference/unlock-file.md)"}],"content":"---\ntitle: \"_lock_file | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_lock_file\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-filesystem-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_lock_file\"\n  - \"lock_file\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"file locking [C++]\"\n  - \"_lock_file function\"\n  - \"lock_file function\"\nms.assetid: 75c7e0e6-efff-4747-b6ed-9bcf2b0894c3\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _lock_file\nLocks a `FILE` object to ensure consistency for threads accessing the `FILE` object concurrently.  \n  \n## Syntax  \n  \n```  \nvoid _lock_file(  \n   FILE* file  \n);  \n```  \n  \n#### Parameters  \n `file`  \n File handle.  \n  \n## Remarks  \n The `_lock_file` function locks the `FILE` object specified by `file`. The underlying file is not locked by `_lock_file`. Use [_unlock_file](../../c-runtime-library/reference/unlock-file.md) to release the lock on the file. Calls to `_lock_file` and `_unlock_file` must be matched in a thread.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_lock_file`|\\<stdio.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_lock_file.c  \n// This example creates multiple threads that write to standard output  \n// concurrently, first with _file_lock, then without.  \n  \n#include <stdio.h>  \n#include <process.h>// _beginthread  \n#include <windows.h>// HANDLE  \n  \nvoid Task_locked( void* str )  \n{  \n    for( int i=0; i<1000; ++i )  \n    {  \n        _lock_file( stdout );  \n        for( char* cp = (char*)str; *cp; ++cp )  \n        {  \n            _fputc_nolock( *cp, stdout );  \n        }  \n        _unlock_file( stdout );  \n    }  \n}  \n  \nvoid Task_unlocked( void* str )  \n{  \n    for( int i=0; i<1000; ++i )  \n    {  \n        for( char* cp = (char*)str; *cp; ++cp )  \n        {  \n            fputc( *cp, stdout );  \n        }  \n    }  \n}  \n  \nint main()  \n{  \n    HANDLE h[3];  \n    h[0] = (HANDLE)_beginthread( &Task_locked, 0, \"First\\n\" );  \n    h[1] = (HANDLE)_beginthread( &Task_locked, 0, \"Second\\n\" );  \n    h[2] = (HANDLE)_beginthread( &Task_locked, 0, \"Third\\n\" );  \n  \n    WaitForMultipleObjects( 3, h, true, INFINITE );  \n  \n    h[0] = (HANDLE)_beginthread( &Task_unlocked, 0, \"First\\n\" );  \n    h[1] = (HANDLE)_beginthread( &Task_unlocked, 0, \"Second\\n\" );  \n    h[2] = (HANDLE)_beginthread( &Task_unlocked, 0, \"Third\\n\" );  \n  \n    WaitForMultipleObjects( 3, h, true, INFINITE );  \n}  \n```  \n  \n```Output  \n...  \nFirst  \nSecond  \nFirst  \nSecond  \nThird  \nSecond  \nThird  \nSecond  \n...  \nFSiercsotn  \ndF  \niSrescto  \nnFdi  \nrSsetc  \noFnidr  \nsSte  \ncFoinrds  \ntS  \neFciornsdt  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::FileStream::Lock](https://msdn.microsoft.com/en-us/library/system.io.filestream.lock.aspx)  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md)   \n [_open, _wopen](../../c-runtime-library/reference/open-wopen.md)   \n [_unlock_file](../../c-runtime-library/reference/unlock-file.md)"}