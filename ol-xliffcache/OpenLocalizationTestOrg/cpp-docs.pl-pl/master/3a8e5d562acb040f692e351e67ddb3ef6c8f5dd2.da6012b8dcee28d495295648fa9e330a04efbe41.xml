{"nodes":[{"pos":[12,48],"content":"CPaneFrameWnd Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CPaneFrameWnd Class | Microsoft Docs","pos":[0,36]}]},{"content":"CPaneFrameWnd Class","pos":[879,898]},{"content":"Implements a mini-frame window that contains one pane.","pos":[1005,1059]},{"content":"The pane fills the client area of the window.","pos":[1060,1105]},{"content":"Syntax","pos":[1114,1120]},{"content":"Members","pos":[1180,1187]},{"content":"Public Methods","pos":[1197,1211]},{"content":"Name","pos":[1218,1222]},{"content":"Description","pos":[1223,1234]},{"content":"CPaneFrameWnd::AddPane","pos":[1273,1295]},{"content":"Adds a pane.","pos":[1322,1334]},{"content":"CPaneFrameWnd::AddRemovePaneFromGlobalList","pos":[1340,1382]},{"content":"Adds or removes a pane from the global list.","pos":[1429,1473]},{"content":"CPaneFrameWnd::AdjustLayout","pos":[1479,1506]},{"content":"Adjusts the layout of the mini-frame window.","pos":[1538,1582]},{"content":"CPaneFrameWnd::AdjustPaneFrames","pos":[1588,1619]},{"content":"CPaneFrameWnd::CalcBorderSize","pos":[1661,1690]},{"content":"Calculates the size of the borders for a mini-frame window.","pos":[1724,1783]},{"content":"CPaneFrameWnd::CalcExpectedDockedRect","pos":[1789,1826]},{"content":"Calculate the expected rectangle of a docked window.","pos":[1868,1920]},{"content":"CPaneFrameWnd::CanBeAttached","pos":[1926,1954]},{"content":"Determines whether the current pane can be docked to another pane or frame window.","pos":[1987,2069]},{"content":"CPaneFrameWnd::CanBeDockedToPane","pos":[2075,2107]},{"content":"Determines whether the mini-frame window can be docked to a pane.","pos":[2144,2209]},{"content":"CPaneFrameWnd::CheckGripperVisibility","pos":[2215,2252]},{"content":"CPaneFrameWnd::ConvertToTabbedDocument","pos":[2300,2338]},{"content":"Converts the pane to a tabbed document.","pos":[2381,2420]},{"content":"CPaneFrameWnd::Create","pos":[2426,2447]},{"pos":[2473,2547],"content":"Creates a mini-frame window and attaches it to the <ph id=\"ph1\">`CPaneFrameWnd`</ph> object.","source":"Creates a mini-frame window and attaches it to the `CPaneFrameWnd` object."},{"content":"CPaneFrameWnd::CreateEx","pos":[2553,2576]},{"pos":[2604,2678],"content":"Creates a mini-frame window and attaches it to the <ph id=\"ph1\">`CPaneFrameWnd`</ph> object.","source":"Creates a mini-frame window and attaches it to the `CPaneFrameWnd` object."},{"content":"CPaneFrameWnd::DockPane","pos":[2684,2707]},{"content":"Docks the pane.","pos":[2735,2750]},{"content":"CPaneFrameWnd::FindFloatingPaneByID","pos":[2756,2791]},{"content":"Finds a pane with the specified control ID in the global list of floating panes.","pos":[2831,2911]},{"content":"CPaneFrameWnd::FrameFromPoint","pos":[2917,2946]},{"content":"Finds the mini-frame window containing a user-supplied point.","pos":[2980,3041]},{"content":"CPaneFrameWnd::GetCaptionHeight","pos":[3047,3078]},{"content":"Returns the height of the mini-frame window caption.","pos":[3114,3166]},{"content":"CPaneFrameWnd::GetCaptionRect","pos":[3172,3201]},{"content":"Calculates the bounding rectangle of a mini-frame window caption.","pos":[3235,3300]},{"content":"CPaneFrameWnd::GetCaptionText","pos":[3306,3335]},{"content":"Returns the caption text.","pos":[3369,3394]},{"content":"CPaneFrameWnd::GetDockingManager","pos":[3400,3432]},{"content":"CPaneFrameWnd::GetDockingMode","pos":[3475,3504]},{"content":"Returns the docking mode.","pos":[3538,3563]},{"content":"CPaneFrameWnd::GetFirstVisiblePane","pos":[3569,3603]},{"content":"Returns the first visible pane that is contained in a mini-frame window.","pos":[3642,3714]},{"content":"CPaneFrameWnd::GetHotPoint","pos":[3720,3746]},{"content":"CPaneFrameWnd::GetPane","pos":[3783,3805]},{"content":"Returns a pane that is contained in the mini-frame window.","pos":[3832,3890]},{"content":"CPaneFrameWnd::GetPaneCount","pos":[3896,3923]},{"content":"Returns the number of panes that are contained in a mini-frame window.","pos":[3955,4025]},{"content":"CPaneFrameWnd::GetParent","pos":[4031,4055]},{"content":"CPaneFrameWnd::GetPinState","pos":[4090,4116]},{"content":"CPaneFrameWnd::GetRecentFloatingRect","pos":[4153,4189]},{"content":"CPaneFrameWnd::GetVisiblePaneCount","pos":[4236,4270]},{"content":"Returns the number of visible panes that are contained in a mini-frame window.","pos":[4309,4387]},{"content":"CPaneFrameWnd::HitTest","pos":[4393,4415]},{"content":"Determines what part of a mini-frame window is at a given point.","pos":[4442,4506]},{"content":"CPaneFrameWnd::IsCaptured","pos":[4512,4537]},{"content":"CPaneFrameWnd::IsDelayShow","pos":[4573,4599]},{"content":"CPaneFrameWnd::IsRollDown","pos":[4636,4661]},{"content":"Determines whether a mini-frame window should be rolled down.","pos":[4691,4752]},{"content":"CPaneFrameWnd::IsRollUp","pos":[4758,4781]},{"content":"Determines whether a mini-frame window should be rolled up.","pos":[4809,4868]},{"content":"CPaneFrameWnd::KillDockingTimer","pos":[4874,4905]},{"content":"Stops the docking timer.","pos":[4941,4965]},{"content":"CPaneFrameWnd::LoadState","pos":[4971,4995]},{"content":"Loads the pane's state from the registry.","pos":[5024,5065]},{"content":"CPaneFrameWnd::OnBeforeDock","pos":[5071,5098]},{"content":"Determines if docking is possible.","pos":[5130,5164]},{"content":"CPaneFrameWnd::OnDockToRecentPos","pos":[5170,5202]},{"content":"Docks the mini-frame window at its most recent position.","pos":[5239,5295]},{"content":"CPaneFrameWnd::OnKillRollUpTimer","pos":[5301,5333]},{"content":"Stops the rollup timer.","pos":[5370,5393]},{"content":"CPaneFrameWnd::OnMovePane","pos":[5399,5424]},{"content":"Moves the mini-frame window by a specified offset.","pos":[5454,5504]},{"content":"CPaneFrameWnd::OnPaneRecalcLayout","pos":[5510,5543]},{"content":"Adjusts the layout of a contained pane.","pos":[5581,5620]},{"content":"CPaneFrameWnd::OnSetRollUpTimer","pos":[5626,5657]},{"content":"Sets the rollup timer.","pos":[5693,5715]},{"content":"CPaneFrameWnd::OnShowPane","pos":[5721,5746]},{"content":"Called by the framework when a pane in the mini-frame window is hidden or displayed.","pos":[5776,5860]},{"content":"CPaneFrameWnd::PaneFromPoint","pos":[5866,5894]},{"content":"Returns a pane if it contains a user-supplied point inside a mini-frame window.","pos":[5927,6006]},{"content":"CPaneFrameWnd::Pin","pos":[6012,6030]},{"pos":[6095,6399],"content":"Used by class <bpt id=\"p1\">[</bpt>CWinApp<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept> to translate window messages before they are dispatched to the <bpt id=\"p2\">[</bpt>TranslateMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id=\"p3\">[</bpt>DispatchMessage<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> Windows functions.","source":"Used by class [CWinApp](../../mfc/reference/cwinapp-class.md) to translate window messages before they are dispatched to the [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) Windows functions."},{"content":"CPaneFrameWnd::RedrawAll","pos":[6405,6429]},{"content":"Redraws all mini-frame windows.","pos":[6458,6489]},{"content":"CPaneFrameWnd::RemoveNonValidPanes","pos":[6495,6529]},{"content":"Called by the framework to remove non-valid panes.","pos":[6568,6618]},{"content":"CPaneFrameWnd::RemovePane","pos":[6624,6649]},{"content":"Removes a pane from the mini-frame window.","pos":[6679,6721]},{"content":"CPaneFrameWnd::ReplacePane","pos":[6727,6753]},{"content":"Replaces one pane with another.","pos":[6784,6815]},{"content":"CPaneFrameWnd::SaveState","pos":[6821,6845]},{"content":"Saves the pane's state to the registry.","pos":[6874,6913]},{"content":"Reads or writes this object from or to an archive.","pos":[6945,6995]},{"content":"CPaneFrameWnd::SetCaptionButtons","pos":[7001,7033]},{"content":"Sets caption buttons.","pos":[7070,7091]},{"content":"CPaneFrameWnd::SetDelayShow","pos":[7097,7124]},{"content":"CPaneFrameWnd::SetDockingManager","pos":[7162,7194]},{"content":"CPaneFrameWnd::SetDockingTimer","pos":[7237,7267]},{"content":"Sets the docking timer.","pos":[7302,7325]},{"content":"CPaneFrameWnd::SetDockState","pos":[7331,7358]},{"content":"Sets the docking state.","pos":[7390,7413]},{"content":"CPaneFrameWnd::SetHotPoint","pos":[7419,7445]},{"content":"CPaneFrameWnd::SetPreDockState","pos":[7482,7512]},{"content":"Called by the framework to set the predocking state.","pos":[7547,7599]},{"content":"CPaneFrameWnd::SizeToContent","pos":[7605,7633]},{"content":"Adjusts the size of a mini-frame window so that it is equivalent in size to a contained pane.","pos":[7666,7759]},{"content":"CPaneFrameWnd::StartTearOff","pos":[7765,7792]},{"content":"Tears off a menu.","pos":[7824,7841]},{"content":"CPaneFrameWnd::StoreRecentDockSiteInfo","pos":[7847,7885]},{"content":"CPaneFrameWnd::StoreRecentTabRelatedInfo","pos":[7934,7974]},{"content":"Protected Methods","pos":[8030,8047]},{"content":"Name","pos":[8054,8058]},{"content":"Description","pos":[8059,8070]},{"content":"CPaneFrameWnd::OnCheckRollState","pos":[8109,8140]},{"content":"Determines whether a mini-frame window should be rolled up or down.","pos":[8176,8243]},{"content":"CPaneFrameWnd::OnDrawBorder","pos":[8249,8276]},{"content":"Draws the borders of a mini-frame window.","pos":[8308,8349]},{"content":"Data Members","pos":[8360,8372]},{"content":"Name","pos":[8379,8383]},{"content":"Description","pos":[8384,8395]},{"content":"CPaneFrameWnd::m_bUseSaveBits","pos":[8434,8463]},{"pos":[8497,8579],"content":"Specifies whether to register the window class with the <ph id=\"ph1\">`CS_SAVEBITS`</ph> class style.","source":"Specifies whether to register the window class with the `CS_SAVEBITS` class style."},{"content":"Remarks","pos":[8589,8596]},{"pos":[8600,8725],"content":"The framework automatically creates a <ph id=\"ph1\">`CPaneFrameWnd`</ph> object when a pane is switched from a docked state to a floating state.","source":"The framework automatically creates a `CPaneFrameWnd` object when a pane is switched from a docked state to a floating state."},{"content":"A mini-frame window can be dragged with its contents visible (immediate docking) or using a drag rectangle (standard docking).","pos":[8732,8858]},{"content":"The docking mode of the mini-frame's container pane determines the mini-frame's dragging behavior.","pos":[8859,8957]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CBasePane::GetDockingMode<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__getdockingmode)</ept>.","pos":[8958,9078],"source":" For more information, see [CBasePane::GetDockingMode](../../mfc/reference/cbasepane-class.md#cbasepane__getdockingmode)."},{"content":"A mini-frame window displays buttons on the caption in accordance with the contained pane style.","pos":[9085,9181]},{"content":"If the pane can be closed ( <bpt id=\"p1\">[</bpt>CBasePane::CanBeClosed<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__canbeclosed)</ept>), it displays a Close button.","pos":[9182,9327],"source":" If the pane can be closed ( [CBasePane::CanBeClosed](../../mfc/reference/cbasepane-class.md#cbasepane__canbeclosed)), it displays a Close button."},{"content":"If the pane has the <ph id=\"ph1\">`AFX_CBRS_AUTO_ROLLUP`</ph> style, it displays a pin.","pos":[9328,9396],"source":" If the pane has the `AFX_CBRS_AUTO_ROLLUP` style, it displays a pin."},{"content":"If you derive a class from <ph id=\"ph1\">`CPaneFrameWnd`</ph>, you must tell the framework how to create it.","pos":[9403,9492],"source":"If you derive a class from `CPaneFrameWnd`, you must tell the framework how to create it."},{"content":"Either create the class by overriding <bpt id=\"p1\">[</bpt>CPane::CreateDefaultMiniframe<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__createdefaultminiframe)</ept>, or set the <ph id=\"ph1\">`CPane::m_pMiniFrameRTC`</ph> member so that it points to the runtime class information for your class.","pos":[9493,9739],"source":" Either create the class by overriding [CPane::CreateDefaultMiniframe](../../mfc/reference/cpane-class.md#cpane__createdefaultminiframe), or set the `CPane::m_pMiniFrameRTC` member so that it points to the runtime class information for your class."},{"content":"Inheritance Hierarchy","pos":[9748,9769]},{"content":"CObject","pos":[9774,9781]},{"content":"CCmdTarget","pos":[9828,9838]},{"content":"CWnd","pos":[9888,9892]},{"content":"CPaneFrameWnd","pos":[9936,9949]},{"content":"Requirements","pos":[10003,10015]},{"pos":[10019,10048],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxPaneFrameWnd.h","source":"**Header:** afxPaneFrameWnd.h"},{"pos":[10097,10119],"content":"CPaneFrameWnd::AddPane"},{"content":"Adds a pane.","pos":[10123,10135]},{"content":"Parameters","pos":[10199,10209]},{"content":"[in]","pos":[10213,10217]},{"content":"The pane to add.","pos":[10228,10244]},{"pos":[10313,10355],"content":"CPaneFrameWnd::AddRemovePaneFromGlobalList"},{"content":"Adds or removes a pane from the global list.","pos":[10359,10403]},{"content":"Parameters","pos":[10518,10528]},{"content":"[in]","pos":[10532,10536]},{"content":"The pane to add or remove.","pos":[10547,10573]},{"content":"[in]","pos":[10580,10584]},{"content":"If non-zero, add the pane.","pos":[10595,10621]},{"content":"If 0, remove the pane.","pos":[10622,10644]},{"content":"Return Value","pos":[10654,10666]},{"content":"Nonzero if the method was successful; otherwise 0.","pos":[10670,10720]},{"pos":[10774,10801],"content":"CPaneFrameWnd::AdjustLayout"},{"content":"Adjusts the layout of the mini-frame window.","pos":[10805,10849]},{"pos":[10951,10982],"content":"CPaneFrameWnd::AdjustPaneFrames"},{"content":"Remarks","pos":[11143,11150]},{"pos":[11206,11235],"content":"CPaneFrameWnd::CalcBorderSize"},{"content":"Calculates the size of the borders for a miniframe window.","pos":[11239,11297]},{"content":"Parameters","pos":[11383,11393]},{"content":"[out]","pos":[11397,11402]},{"content":"Contains the size, in pixels, of the border of the miniframe window.","pos":[11423,11491]},{"content":"Remarks","pos":[11501,11508]},{"content":"This method is called by the framework to calculate the size of the border of a miniframe window.","pos":[11512,11609]},{"content":"The returned size depends on whether a miniframe window contains a toolbar or a <bpt id=\"p1\">[</bpt>CDockablePane<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept>.","pos":[11610,11750],"source":" The returned size depends on whether a miniframe window contains a toolbar or a [CDockablePane](../../mfc/reference/cdockablepane-class.md)."},{"pos":[11814,11851],"content":"CPaneFrameWnd::CalcExpectedDockedRect"},{"content":"Calculate the expected rectangle of a docked window.","pos":[11855,11907]},{"content":"Parameters","pos":[12096,12106]},{"content":"[in]","pos":[12110,12114]},{"content":"A pointer to the window to dock.","pos":[12131,12163]},{"content":"[in]","pos":[12170,12174]},{"content":"The mouse location.","pos":[12188,12207]},{"content":"[out]","pos":[12214,12219]},{"content":"The calculated rectangle.","pos":[12236,12261]},{"content":"[out]","pos":[12268,12273]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, draw a tab.","pos":[12288,12310],"source":" If `TRUE`, draw a tab."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, do not draw a tab.","pos":[12311,12341],"source":" If `FALSE`, do not draw a tab."},{"content":"[out]","pos":[12348,12353]},{"content":"A pointer to the target pane.","pos":[12371,12400]},{"content":"Remarks","pos":[12410,12417]},{"pos":[12421,12570],"content":"This method calculates the rectangle that a window would occupy if a user dragged the window to the point specified by <ph id=\"ph1\">`ptMouse`</ph> and docked it there.","source":"This method calculates the rectangle that a window would occupy if a user dragged the window to the point specified by `ptMouse` and docked it there."},{"pos":[12625,12653],"content":"CPaneFrameWnd::CanBeAttached"},{"content":"Determines whether the current pane can be docked to another pane or frame window.","pos":[12657,12739]},{"content":"Return Value","pos":[12803,12815]},{"pos":[12826,12903],"content":"if the pane can be docked to another pane or frame window; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane can be docked to another pane or frame window; otherwise `FALSE`."},{"pos":[12962,12994],"content":"CPaneFrameWnd::CanBeDockedToPane"},{"content":"Determines whether the mini-frame window can be docked to a pane.","pos":[12998,13063]},{"content":"Parameters","pos":[13163,13173]},{"content":"[in]","pos":[13177,13181]},{"content":"A pane.","pos":[13199,13206]},{"content":"Return Value","pos":[13216,13228]},{"pos":[13232,13302],"content":"Nonzero if the mini-frame can be docked to <ph id=\"ph1\">`pDockingBar`</ph>; otherwise 0.","source":"Nonzero if the mini-frame can be docked to `pDockingBar`; otherwise 0."},{"pos":[13366,13403],"content":"CPaneFrameWnd::CheckGripperVisibility"},{"content":"Remarks","pos":[13570,13577]},{"pos":[13642,13680],"content":"CPaneFrameWnd::ConvertToTabbedDocument"},{"content":"Converts the pane to a tabbed document.","pos":[13684,13723]},{"pos":[13826,13847],"content":"CPaneFrameWnd::Create"},{"pos":[13851,13968],"content":"Creates a miniframe window and attaches it to the <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> object.","source":"Creates a miniframe window and attaches it to the [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object."},{"content":"Parameters","pos":[14151,14161]},{"content":"[in]","pos":[14165,14169]},{"content":"Specifies the text to display on the miniframe window.","pos":[14190,14244]},{"content":"[in]","pos":[14251,14255]},{"content":"Specifies the window style.","pos":[14269,14296]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Window Styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept>.","pos":[14297,14377],"source":" For more information, see [Window Styles](../../mfc/reference/window-styles.md)."},{"content":"[in]","pos":[14384,14388]},{"content":"Specifies the initial size and position of the miniframe window.","pos":[14399,14463]},{"content":"[in] [out]","pos":[14470,14480]},{"content":"Specifies the parent frame of the miniframe window.","pos":[14497,14548]},{"content":"This value must not be <ph id=\"ph1\">`NULL`</ph>.","pos":[14549,14579],"source":" This value must not be `NULL`."},{"content":"[in] [out]","pos":[14586,14596]},{"content":"Specifies user-defined context.","pos":[14611,14642]},{"content":"Return Value","pos":[14652,14664]},{"pos":[14675,14734],"content":"if the window was created successfully; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the window was created successfully; otherwise, `FALSE`."},{"content":"Remarks","pos":[14744,14751]},{"content":"A miniframe window is created in two steps.","pos":[14755,14798]},{"content":"First, the framework creates a <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> object.","pos":[14799,14897],"source":" First, the framework creates a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object."},{"content":"Second, it calls <ph id=\"ph1\">`Create`</ph> to create the Windows miniframe window and attach it to the <ph id=\"ph2\">`CPaneFrameWnd`</ph> object.","pos":[14898,15007],"source":" Second, it calls `Create` to create the Windows miniframe window and attach it to the `CPaneFrameWnd` object."},{"pos":[15057,15080],"content":"CPaneFrameWnd::CreateEx"},{"pos":[15084,15201],"content":"Creates a miniframe window and attaches it to the <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> object.","source":"Creates a miniframe window and attaches it to the [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object."},{"content":"Parameters","pos":[15407,15417]},{"content":"[in]","pos":[15421,15425]},{"content":"Specifies the extended window style.","pos":[15441,15477]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Extended Window Styles<ept id=\"p1\">](../../mfc/reference/extended-window-styles.md)</ept>","pos":[15478,15575],"source":" For more information, see [Extended Window Styles](../../mfc/reference/extended-window-styles.md)"},{"content":"[in]","pos":[15582,15586]},{"content":"Specifies the text to display on the miniframe window.","pos":[15607,15661]},{"content":"[in]","pos":[15668,15672]},{"content":"Specifies the window style.","pos":[15686,15713]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Window Styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept>.","pos":[15714,15794],"source":" For more information, see [Window Styles](../../mfc/reference/window-styles.md)."},{"content":"[in]","pos":[15801,15805]},{"content":"Specifies the initial size and position of the miniframe window.","pos":[15816,15880]},{"content":"[in] [out]","pos":[15887,15897]},{"content":"Specifies the parent frame of the miniframe window.","pos":[15914,15965]},{"content":"This value must not be <ph id=\"ph1\">`NULL`</ph>.","pos":[15966,15996],"source":" This value must not be `NULL`."},{"content":"[in] [out]","pos":[16003,16013]},{"content":"Specifies user-defined context.","pos":[16028,16059]},{"content":"Return Value","pos":[16069,16081]},{"pos":[16092,16151],"content":"if the window was created successfully; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the window was created successfully; otherwise, `FALSE`."},{"content":"Remarks","pos":[16161,16168]},{"content":"A miniframe window is created in two steps.","pos":[16172,16215]},{"content":"First, the framework creates a <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> object.","pos":[16216,16314],"source":" First, the framework creates a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object."},{"content":"Second, it calls <ph id=\"ph1\">`Create`</ph> to create the Windows miniframe window and attach it to the <ph id=\"ph2\">`CPaneFrameWnd`</ph> object.","pos":[16315,16424],"source":" Second, it calls `Create` to create the Windows miniframe window and attach it to the `CPaneFrameWnd` object."},{"pos":[16474,16497],"content":"CPaneFrameWnd::DockPane"},{"content":"Docks the pane.","pos":[16501,16516]},{"content":"Parameters","pos":[16592,16602]},{"content":"[out]","pos":[16606,16611]},{"content":"if the pane was already docked; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[16635,16685],"source":" if the pane was already docked; otherwise `FALSE`."},{"content":"Return Value","pos":[16695,16707]},{"pos":[16711,16810],"content":"If the operation was successful, the <ph id=\"ph1\">`CDockablePane`</ph> that the pane was docked to; otherwise <ph id=\"ph2\">`NULL`</ph>.","source":"If the operation was successful, the `CDockablePane` that the pane was docked to; otherwise `NULL`."},{"pos":[16872,16907],"content":"CPaneFrameWnd::FindFloatingPaneByID"},{"content":"Finds a pane with the specified control ID in the global list of floating panes.","pos":[16911,16991]},{"content":"Parameters","pos":[17066,17076]},{"content":"[in]","pos":[17080,17084]},{"content":"Represents the control ID of the pane to find.","pos":[17094,17140]},{"content":"Return Value","pos":[17150,17162]},{"pos":[17166,17265],"content":"The pane with the specified control ID; otherwise, <ph id=\"ph1\">`NULL`</ph>, if no pane has the specified control ID.","source":"The pane with the specified control ID; otherwise, `NULL`, if no pane has the specified control ID."},{"pos":[17321,17350],"content":"CPaneFrameWnd::FrameFromPoint"},{"content":"Finds the mini-frame window that contains the specified point.","pos":[17354,17416]},{"content":"Parameters","pos":[17610,17620]},{"content":"[in]","pos":[17624,17628]},{"content":"The point, in screen coordinates.","pos":[17637,17670]},{"content":"[in]","pos":[17677,17681]},{"content":"Increase the search area of the mini-frame window by this size.","pos":[17700,17763]},{"content":"A mini-frame window satisfies the search criteria if the given point falls in the increased area.","pos":[17764,17861]},{"content":"[in]","pos":[17868,17872]},{"content":"Specifies a mini-frame window to exclude from the search.","pos":[17894,17951]},{"content":"[in]","pos":[17958,17962]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, only search mini-frame windows that have the <ph id=\"ph2\">`CBRS_FLOAT_MULTI`</ph> style.","pos":[17984,18065],"source":" If `TRUE`, only search mini-frame windows that have the `CBRS_FLOAT_MULTI` style."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, search all mini-frame windows.","pos":[18066,18108],"source":" If `FALSE`, search all mini-frame windows."},{"content":"Return Value","pos":[18118,18130]},{"pos":[18134,18206],"content":"A pointer to the mini-frame window that contains <ph id=\"ph1\">`pt`</ph>; otherwise <ph id=\"ph2\">`NULL`</ph>.","source":"A pointer to the mini-frame window that contains `pt`; otherwise `NULL`."},{"pos":[18264,18295],"content":"CPaneFrameWnd::GetCaptionHeight"},{"content":"Returns the height of the mini-frame window caption.","pos":[18299,18351]},{"content":"Return Value","pos":[18417,18429]},{"content":"The height, in pixels, of the mini-frame window.","pos":[18433,18481]},{"content":"Remarks","pos":[18491,18498]},{"content":"Call this method to determine the height of a mini-frame window.","pos":[18502,18566]},{"content":"By default, the height is set to <ph id=\"ph1\">`SM_CYSMCAPTION`</ph>.","pos":[18567,18617],"source":" By default, the height is set to `SM_CYSMCAPTION`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>GetSystemMetrics Function<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724385)</ept>.","pos":[18618,18732],"source":" For more information, see [GetSystemMetrics Function](http://msdn.microsoft.com/library/windows/desktop/ms724385)."},{"pos":[18788,18817],"content":"CPaneFrameWnd::GetCaptionRect"},{"content":"Calculates the bounding rectangle of a mini-frame window caption.","pos":[18821,18886]},{"content":"Parameters","pos":[18969,18979]},{"content":"[out]","pos":[18983,18988]},{"content":"Contains the size and position of the mini-frame window caption, in screen coordinates.","pos":[19006,19093]},{"content":"Remarks","pos":[19103,19110]},{"content":"This method is called by the framework to calculate the bounding rectangle of a mini-frame window caption.","pos":[19114,19220]},{"pos":[19276,19305],"content":"CPaneFrameWnd::GetCaptionText"},{"content":"Returns the caption text.","pos":[19309,19334]},{"content":"Return Value","pos":[19393,19405]},{"content":"The caption text of the mini-frame window.","pos":[19409,19451]},{"content":"Remarks","pos":[19461,19468]},{"content":"This method is called by the framework when it displays the caption text.","pos":[19472,19545]},{"pos":[19604,19636],"content":"CPaneFrameWnd::GetDockingManager"},{"content":"Return Value","pos":[19811,19823]},{"content":"Remarks","pos":[19833,19840]},{"pos":[19896,19925],"content":"CPaneFrameWnd::GetDockingMode"},{"content":"Returns the docking mode.","pos":[19929,19954]},{"content":"Return Value","pos":[20028,20040]},{"content":"The docking mode.","pos":[20044,20061]},{"content":"One of the following values:","pos":[20062,20090]},{"pos":[20212,20246],"content":"CPaneFrameWnd::GetFirstVisiblePane"},{"content":"Returns the first visible pane that is contained in a mini-frame window.","pos":[20250,20322]},{"content":"Return Value","pos":[20393,20405]},{"pos":[20409,20503],"content":"The first pane in the mini-frame window, or <ph id=\"ph1\">`NULL`</ph> if the mini-frame window contains no panes.","source":"The first pane in the mini-frame window, or `NULL` if the mini-frame window contains no panes."},{"pos":[20556,20582],"content":"CPaneFrameWnd::GetHotPoint"},{"content":"Return Value","pos":[20741,20753]},{"content":"Remarks","pos":[20763,20770]},{"pos":[20819,20841],"content":"CPaneFrameWnd::GetPane"},{"content":"Returns a pane that is contained in the mini-frame window.","pos":[20845,20903]},{"content":"Return Value","pos":[20962,20974]},{"pos":[20978,21077],"content":"The pane that is contained in the mini-frame, or <ph id=\"ph1\">`NULL`</ph> if the mini-frame window contains no panes.","source":"The pane that is contained in the mini-frame, or `NULL` if the mini-frame window contains no panes."},{"content":"Remarks","pos":[21087,21094]},{"pos":[21148,21175],"content":"CPaneFrameWnd::GetPaneCount"},{"content":"Returns the number of panes that are contained in a mini-frame window.","pos":[21179,21249]},{"content":"Return Value","pos":[21311,21323]},{"content":"The number of panes in the mini-frame window.","pos":[21327,21372]},{"content":"This value can be zero.","pos":[21373,21396]},{"content":"Remarks","pos":[21406,21413]},{"pos":[21464,21488],"content":"CPaneFrameWnd::GetParent"},{"content":"Return Value","pos":[21635,21647]},{"content":"Remarks","pos":[21657,21664]},{"pos":[21717,21743],"content":"CPaneFrameWnd::GetPinState"},{"content":"Return Value","pos":[21900,21912]},{"content":"Remarks","pos":[21922,21929]},{"pos":[21992,22028],"content":"CPaneFrameWnd::GetRecentFloatingRect"},{"content":"Return Value","pos":[22196,22208]},{"content":"Remarks","pos":[22218,22225]},{"pos":[22286,22320],"content":"CPaneFrameWnd::GetVisiblePaneCount"},{"content":"Returns the number of visible panes that are contained in a mini-frame window.","pos":[22324,22402]},{"content":"Return Value","pos":[22471,22483]},{"content":"The number of visible panes.","pos":[22487,22515]},{"content":"Remarks","pos":[22525,22532]},{"pos":[22581,22603],"content":"CPaneFrameWnd::HitTest"},{"content":"Determines what part of a mini-frame window is at a given point.","pos":[22607,22671]},{"content":"Parameters","pos":[22767,22777]},{"content":"[in]","pos":[22781,22785]},{"content":"The point to test.","pos":[22797,22815]},{"content":"[in]","pos":[22822,22826]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, check the point against the caption.","pos":[22847,22894],"source":" If `TRUE`, check the point against the caption."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, ignore the caption.","pos":[22895,22926],"source":" If `FALSE`, ignore the caption."},{"content":"Return Value","pos":[22936,22948]},{"content":"One of the following values:","pos":[22952,22980]},{"content":"Value","pos":[22987,22992]},{"content":"Meaning","pos":[22993,23000]},{"content":"The point is outside the mini-frame window.","pos":[23047,23090]},{"content":"The point is in the client area.","pos":[23106,23138]},{"content":"The point is on the caption.","pos":[23155,23183]},{"content":"The point is at the top.","pos":[23196,23220]},{"content":"The point is at the top left.","pos":[23237,23266]},{"content":"The point is at the top right.","pos":[23284,23314]},{"content":"The point is at the left.","pos":[23328,23353]},{"content":"The point is at the right.","pos":[23368,23394]},{"content":"The point is at the bottom.","pos":[23410,23437]},{"content":"The point is at the bottom left.","pos":[23457,23489]},{"content":"The point is at the bottom right.","pos":[23510,23543]},{"pos":[23596,23621],"content":"CPaneFrameWnd::IsCaptured"},{"content":"Return Value","pos":[23777,23789]},{"content":"Remarks","pos":[23799,23806]},{"pos":[23859,23885],"content":"CPaneFrameWnd::IsDelayShow"},{"content":"Return Value","pos":[24042,24054]},{"content":"Remarks","pos":[24064,24071]},{"pos":[24123,24148],"content":"CPaneFrameWnd::IsRollDown"},{"content":"Determines whether a mini-frame window should be rolled down.","pos":[24152,24213]},{"content":"Return Value","pos":[24274,24286]},{"pos":[24297,24362],"content":"if the mini-frame window must be rolled down; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the mini-frame window must be rolled down; otherwise, `FALSE`."},{"content":"Remarks","pos":[24372,24379]},{"content":"This method is called by the framework to determine whether a mini-frame window should be rolled down.","pos":[24383,24485]},{"content":"The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the <ph id=\"ph1\">`AFX_CBRS_AUTO_ROLLUP`</ph> flag.","pos":[24486,24623],"source":" The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the `AFX_CBRS_AUTO_ROLLUP` flag."},{"content":"This flag is set when a pane is created.","pos":[24624,24664]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CBasePane::CreateEx<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__createex)</ept>.","pos":[24665,24773],"source":" For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex)."},{"content":"By default, the framework checks whether the mouse pointer is inside the mini-frame window bounding rectangle to determine whether the window has to be rolled down.","pos":[24780,24944]},{"content":"You can override this behavior in a derived class.","pos":[24945,24995]},{"pos":[25045,25068],"content":"CPaneFrameWnd::IsRollUp"},{"content":"Determines whether a mini-frame window should be rolled up.","pos":[25072,25131]},{"content":"Return Value","pos":[25190,25202]},{"pos":[25213,25276],"content":"if the mini-frame window must be rolled up; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the mini-frame window must be rolled up; otherwise, `FALSE`."},{"content":"Remarks","pos":[25286,25293]},{"content":"This method is called by the framework to determine whether a mini-frame window should be rolled up.","pos":[25297,25397]},{"content":"The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the <ph id=\"ph1\">`AFX_CBRS_AUTO_ROLLUP`</ph> flag.","pos":[25398,25535],"source":" The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the `AFX_CBRS_AUTO_ROLLUP` flag."},{"content":"This flag is set when a pane is created.","pos":[25536,25576]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CBasePane::CreateEx<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__createex)</ept>.","pos":[25577,25685],"source":" For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex)."},{"content":"By default, the framework checks whether the mouse pointer is inside the mini-frame window bounding rectangle to determine whether the window has to be rolled up.","pos":[25692,25854]},{"content":"You can override this behavior in a derived class.","pos":[25855,25905]},{"pos":[25963,25994],"content":"CPaneFrameWnd::KillDockingTimer"},{"content":"Stops the docking timer.","pos":[25998,26022]},{"pos":[26113,26137],"content":"CPaneFrameWnd::LoadState"},{"content":"Loads the pane's state from the registry.","pos":[26141,26182]},{"content":"Parameters","pos":[26297,26307]},{"content":"[in]","pos":[26311,26315]},{"content":"The profile name.","pos":[26337,26354]},{"content":"[in]","pos":[26361,26365]},{"content":"The pane ID.","pos":[26376,26388]},{"content":"Return Value","pos":[26398,26410]},{"pos":[26421,26482],"content":"if the pane state was loaded successfully; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane state was loaded successfully; otherwise `FALSE`."},{"pos":[26538,26567],"content":"CPaneFrameWnd::m_bUseSaveBits"},{"pos":[26571,26657],"content":"Specifies whether to register the window class that has the <ph id=\"ph1\">`CS_SAVEBITS`</ph> class style.","source":"Specifies whether to register the window class that has the `CS_SAVEBITS` class style."},{"content":"Remarks","pos":[26728,26735]},{"content":"Set this static member to <ph id=\"ph1\">`TRUE`</ph> to register the mini-frame window class that has the <ph id=\"ph2\">`CS_SAVEBITS`</ph> style.","pos":[26739,26845],"source":"Set this static member to `TRUE` to register the mini-frame window class that has the `CS_SAVEBITS` style."},{"content":"This may help reduce flickering when a user drags the mini-frame window.","pos":[26846,26918]},{"pos":[26972,26999],"content":"CPaneFrameWnd::OnBeforeDock"},{"content":"Determines if docking is possible.","pos":[27003,27037]},{"content":"Return Value","pos":[27091,27103]},{"pos":[27114,27157],"content":"if docking is possible; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if docking is possible; otherwise, `FALSE`."},{"pos":[27215,27246],"content":"CPaneFrameWnd::OnCheckRollState"},{"content":"Determines whether a mini-frame window should be rolled up or down.","pos":[27250,27317]},{"content":"Remarks","pos":[27375,27382]},{"content":"This method is called by the framework to determine whether a mini-frame window should be rolled up or down.","pos":[27386,27494]},{"content":"By default, the framework calls <bpt id=\"p1\">[</bpt>CPaneFrameWnd::IsRollUp<ept id=\"p1\">](#cpaneframewnd__isrollup)</ept> and <bpt id=\"p2\">[</bpt>CPaneFrameWnd::IsRollDown<ept id=\"p2\">](#cpaneframewnd__isrolldown)</ept> and just stretches or restores the mini-frame window.","pos":[27501,27698],"source":"By default, the framework calls [CPaneFrameWnd::IsRollUp](#cpaneframewnd__isrollup) and [CPaneFrameWnd::IsRollDown](#cpaneframewnd__isrolldown) and just stretches or restores the mini-frame window."},{"content":"You can override this method in a derived class to use a different visual effect.","pos":[27699,27780]},{"pos":[27839,27871],"content":"CPaneFrameWnd::OnDockToRecentPos"},{"content":"Docks the mini-frame window at its most recent position.","pos":[27875,27931]},{"pos":[28034,28061],"content":"CPaneFrameWnd::OnDrawBorder"},{"content":"Draws the borders of a mini-frame window.","pos":[28065,28106]},{"content":"Parameters","pos":[28168,28178]},{"content":"[in]","pos":[28182,28186]},{"content":"The device context used to draw the border.","pos":[28196,28239]},{"content":"Remarks","pos":[28249,28256]},{"content":"This method is called by the framework to draw the borders of the mini-frame window.","pos":[28260,28344]},{"pos":[28403,28435],"content":"CPaneFrameWnd::OnKillRollUpTimer"},{"content":"Stops the rollup timer.","pos":[28439,28462]},{"pos":[28563,28588],"content":"CPaneFrameWnd::OnMovePane"},{"content":"Moves the mini-frame window by a specified offset.","pos":[28592,28642]},{"content":"Parameters","pos":[28733,28743]},{"content":"[in]","pos":[28747,28751]},{"content":"A pointer to a pane (ignored).","pos":[28762,28792]},{"content":"[in]","pos":[28799,28803]},{"content":"The offset by which to move the pane.","pos":[28818,28855]},{"pos":[28915,28948],"content":"CPaneFrameWnd::OnPaneRecalcLayout"},{"content":"Adjusts the layout of a pane inside a mini-frame window.","pos":[28952,29008]},{"content":"Remarks","pos":[29068,29075]},{"content":"The framework calls this method when it must adjust the layout of a pane inside the mini-frame window.","pos":[29079,29181]},{"content":"By default, the pane is positioned to cover the complete client area of the mini-frame window.","pos":[29188,29282]},{"pos":[29340,29371],"content":"CPaneFrameWnd::OnSetRollUpTimer"},{"content":"Sets the rollup timer.","pos":[29375,29397]},{"pos":[29497,29522],"content":"CPaneFrameWnd::OnShowPane"},{"content":"Called by the framework when a pane in the mini-frame window is hidden or displayed.","pos":[29526,29610]},{"content":"Parameters","pos":[29704,29714]},{"content":"[in]","pos":[29718,29722]},{"content":"The pane that is being shown or hidden.","pos":[29733,29772]},{"content":"[in]","pos":[29779,29783]},{"content":"if the pane is being shown; <ph id=\"ph1\">`FALSE`</ph> if the pane is being hidden.","pos":[29802,29866],"source":" if the pane is being shown; `FALSE` if the pane is being hidden."},{"content":"Remarks","pos":[29876,29883]},{"content":"Called by the framework when a pane in the mini-frame window is shown or hidden.","pos":[29887,29967]},{"content":"The default implementation does nothing.","pos":[29968,30008]},{"pos":[30053,30071],"content":"CPaneFrameWnd::Pin"},{"content":"Parameters","pos":[30227,30237]},{"pos":[30241,30245],"content":"[in]"},{"content":"Remarks","pos":[30262,30269]},{"pos":[30324,30352],"content":"CPaneFrameWnd::PaneFromPoint"},{"content":"Returns a pane if it contains a user-supplied point inside a mini-frame window.","pos":[30356,30435]},{"content":"Parameters","pos":[30566,30576]},{"content":"[in]","pos":[30580,30584]},{"content":"The point that the user clicked, in screen coordinates.","pos":[30596,30651]},{"content":"[in]","pos":[30658,30662]},{"content":"This parameter is not used.","pos":[30681,30708]},{"content":"[in]","pos":[30715,30719]},{"content":"to specify that only visible panes should be returned; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[30749,30823],"source":" to specify that only visible panes should be returned; otherwise, `FALSE`."},{"content":"Return Value","pos":[30833,30845]},{"pos":[30849,30926],"content":"The pane that the user clicked, or <ph id=\"ph1\">`NULL`</ph> if no pane exists at that location.","source":"The pane that the user clicked, or `NULL` if no pane exists at that location."},{"content":"Remarks","pos":[30936,30943]},{"content":"Call this method to obtain a pane that contains the given point.","pos":[30947,31011]},{"pos":[31062,31086],"content":"CPaneFrameWnd::RedrawAll"},{"content":"Redraws all mini-frame windows.","pos":[31090,31121]},{"content":"Remarks","pos":[31171,31178]},{"pos":[31182,31327],"content":"This method updates all mini-frame windows by calling <bpt id=\"p1\">[</bpt>CWnd::RedrawWindow<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__redrawwindow)</ept> for each window.","source":"This method updates all mini-frame windows by calling [CWnd::RedrawWindow](../../mfc/reference/cwnd-class.md#cwnd__redrawwindow) for each window."},{"pos":[31388,31422],"content":"CPaneFrameWnd::RemoveNonValidPanes"},{"content":"Called by the framework to remove non-valid panes.","pos":[31426,31476]},{"pos":[31579,31604],"content":"CPaneFrameWnd::RemovePane"},{"content":"Removes a pane from the mini-frame window.","pos":[31608,31650]},{"content":"Parameters","pos":[31789,31799]},{"content":"[in]","pos":[31803,31807]},{"content":"A pointer to the pane to remove.","pos":[31818,31850]},{"content":"[in]","pos":[31857,31861]},{"content":"Specifies what happens to the mini-frame window.","pos":[31876,31924]},{"content":"If <ph id=\"ph1\">`bDestroy`</ph> is <ph id=\"ph2\">`TRUE`</ph>, this method destroys the mini-frame window immediately.","pos":[31925,32005],"source":" If `bDestroy` is `TRUE`, this method destroys the mini-frame window immediately."},{"content":"If it is <ph id=\"ph1\">`FALSE`</ph>, this method destroys the mini-frame window after a certain delay.","pos":[32006,32089],"source":" If it is `FALSE`, this method destroys the mini-frame window after a certain delay."},{"content":"[in]","pos":[32096,32100]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, delayed destruction is disabled.","pos":[32124,32167],"source":" If `TRUE`, delayed destruction is disabled."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, delayed destruction is enabled.","pos":[32168,32211],"source":" If `FALSE`, delayed destruction is enabled."},{"content":"Remarks","pos":[32221,32228]},{"content":"The framework can destroy mini-frame windows immediately or after a certain delay.","pos":[32232,32314]},{"content":"If you want to delay destruction of mini-frame windows, pass <ph id=\"ph1\">`FALSE`</ph> in the <ph id=\"ph2\">`bNoDelayedDestroy`</ph> parameter.","pos":[32315,32421],"source":" If you want to delay destruction of mini-frame windows, pass `FALSE` in the `bNoDelayedDestroy` parameter."},{"content":"Delayed destruction occurs when the framework processes the <ph id=\"ph1\">`AFX_WM_CHECKEMPTYMINIFRAME`</ph> message.","pos":[32422,32519],"source":" Delayed destruction occurs when the framework processes the `AFX_WM_CHECKEMPTYMINIFRAME` message."},{"pos":[32572,32598],"content":"CPaneFrameWnd::ReplacePane"},{"content":"Replaces one pane with another.","pos":[32602,32633]},{"content":"Parameters","pos":[32743,32753]},{"content":"[in]","pos":[32757,32761]},{"content":"A pointer to the original pane.","pos":[32775,32806]},{"content":"[in]","pos":[32813,32817]},{"content":"A pointer to the pane that replaces the original pane.","pos":[32839,32893]},{"pos":[32944,32968],"content":"CPaneFrameWnd::SaveState"},{"content":"Saves the pane's state to the registry.","pos":[32972,33011]},{"content":"Parameters","pos":[33126,33136]},{"content":"[in]","pos":[33140,33144]},{"content":"The profile name.","pos":[33166,33183]},{"content":"[in]","pos":[33190,33194]},{"content":"The pane ID.","pos":[33205,33217]},{"content":"Return Value","pos":[33227,33239]},{"pos":[33250,33310],"content":"if the pane state was saved successfully; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane state was saved successfully; otherwise `FALSE`."},{"pos":[33369,33401],"content":"CPaneFrameWnd::SetCaptionButtons"},{"content":"Sets caption buttons.","pos":[33405,33426]},{"content":"Parameters","pos":[33500,33510]},{"content":"[in]","pos":[33514,33518]},{"content":"Bitwise-OR combination of the following values:","pos":[33534,33581]},{"pos":[33760,33787],"content":"CPaneFrameWnd::SetDelayShow"},{"content":"Parameters","pos":[33951,33961]},{"pos":[33965,33969],"content":"[in]"},{"content":"Remarks","pos":[33992,33999]},{"pos":[34058,34090],"content":"CPaneFrameWnd::SetDockingManager"},{"content":"Parameters","pos":[34269,34279]},{"pos":[34283,34287],"content":"[in]"},{"content":"Remarks","pos":[34308,34315]},{"pos":[34372,34402],"content":"CPaneFrameWnd::SetDockingTimer"},{"content":"Sets the docking timer.","pos":[34406,34429]},{"content":"Parameters","pos":[34491,34501]},{"content":"[in]","pos":[34505,34509]},{"content":"Timeout value in milliseconds.","pos":[34524,34554]},{"pos":[34608,34635],"content":"CPaneFrameWnd::SetDockState"},{"content":"Sets the docking state.","pos":[34639,34662]},{"content":"Parameters","pos":[34745,34755]},{"content":"[in]","pos":[34759,34763]},{"content":"A pointer to a docking manager.","pos":[34782,34813]},{"pos":[34866,34892],"content":"CPaneFrameWnd::SetHotPoint"},{"content":"Parameters","pos":[35053,35063]},{"pos":[35067,35071],"content":"[in]"},{"content":"Remarks","pos":[35089,35096]},{"pos":[35153,35183],"content":"CPaneFrameWnd::SetPreDockState"},{"content":"Called by the framework to set the predocking state.","pos":[35187,35239]},{"content":"Parameters","pos":[35412,35422]},{"content":"[in]","pos":[35426,35430]},{"content":"Possible values:","pos":[35449,35465]},{"pos":[35486,35487],"content":","},{"pos":[35513,35514],"content":","},{"pos":[35546,35597],"content":"[in] `pBarToDock`  \nA pointer to the pane to dock.","leadings":[""," "],"nodes":[{"content":"[in]","pos":[0,4]},{"content":"A pointer to the pane to dock.","pos":[20,50]}]},{"pos":[35604,35673],"content":"[in] `dockMethod`  \nThe docking method. (This parameter is ignored.)","leadings":[""," "],"nodes":[{"content":"[in]","pos":[0,4]},{"content":"The docking method. (This parameter is ignored.)","pos":[20,68],"nodes":[{"content":"The docking method.","pos":[0,19]},{"content":"(This parameter is ignored.)","pos":[20,48]}]}]},{"content":"Return Value","pos":[35683,35695]},{"pos":[35706,35768],"content":"if the mini-frame window is undocked; <ph id=\"ph1\">`FALSE`</ph> if it is docked.","source":" if the mini-frame window is undocked; `FALSE` if it is docked."},{"pos":[35823,35851],"content":"CPaneFrameWnd::SizeToContent"},{"content":"Adjusts the size of a mini-frame window so that it is equivalent to a contained pane.","pos":[35855,35940]},{"content":"Remarks","pos":[35995,36002]},{"content":"Call this method to adjust the size of a mini-frame window to the size of a contained pane.","pos":[36006,36097]},{"pos":[36151,36178],"content":"CPaneFrameWnd::StartTearOff"},{"content":"Tears off a menu.","pos":[36182,36199]},{"content":"Parameters","pos":[36260,36270]},{"content":"[in]","pos":[36274,36278]},{"content":"A pointer to a menu.","pos":[36290,36310]},{"content":"Return Value","pos":[36320,36332]},{"pos":[36343,36392],"content":"if the method was successful; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method was successful; otherwise, `FALSE`."},{"pos":[36457,36495],"content":"CPaneFrameWnd::StoreRecentDockSiteInfo"},{"content":"Parameters","pos":[36674,36684]},{"pos":[36688,36692],"content":"[in]"},{"content":"Remarks","pos":[36709,36716]},{"pos":[36783,36823],"content":"CPaneFrameWnd::StoreRecentTabRelatedInfo"},{"content":"Parameters","pos":[37057,37067]},{"content":"[in]","pos":[37071,37075]},{"content":"[in]","pos":[37093,37097]},{"content":"Remarks","pos":[37120,37127]},{"content":"See Also","pos":[37136,37144]},{"content":"Hierarchy Chart","pos":[37149,37164]},{"content":"Classes","pos":[37201,37208]},{"content":"CWnd Class","pos":[37251,37261]}],"content":"---\ntitle: \"CPaneFrameWnd Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CPaneFrameWnd.Serialize\"\n  - \"CPaneFrameWnd.PreTranslateMessage\"\n  - \"CPaneFrameWnd\"\n  - \"CPaneFrameWnd::Serialize\"\n  - \"PreTranslateMessage\"\n  - \"CPaneFrameWnd::PreTranslateMessage\"\n  - \"Serialize\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CPaneFrameWnd class\"\n  - \"Serialize method\"\n  - \"PreTranslateMessage method\"\nms.assetid: ea3423a3-2763-482e-b763-817036ded10d\ncaps.latest.revision: 28\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# CPaneFrameWnd Class\n[!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n Implements a mini-frame window that contains one pane. The pane fills the client area of the window.  \n  \n## Syntax  \n  \n```  \nclass CPaneFrameWnd : public CWnd  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneFrameWnd::AddPane](#cpaneframewnd__addpane)|Adds a pane.|  \n|[CPaneFrameWnd::AddRemovePaneFromGlobalList](#cpaneframewnd__addremovepanefromgloballist)|Adds or removes a pane from the global list.|  \n|[CPaneFrameWnd::AdjustLayout](#cpaneframewnd__adjustlayout)|Adjusts the layout of the mini-frame window.|  \n|[CPaneFrameWnd::AdjustPaneFrames](#cpaneframewnd__adjustpaneframes)||  \n|[CPaneFrameWnd::CalcBorderSize](#cpaneframewnd__calcbordersize)|Calculates the size of the borders for a mini-frame window.|  \n|[CPaneFrameWnd::CalcExpectedDockedRect](#cpaneframewnd__calcexpecteddockedrect)|Calculate the expected rectangle of a docked window.|  \n|[CPaneFrameWnd::CanBeAttached](#cpaneframewnd__canbeattached)|Determines whether the current pane can be docked to another pane or frame window.|  \n|[CPaneFrameWnd::CanBeDockedToPane](#cpaneframewnd__canbedockedtopane)|Determines whether the mini-frame window can be docked to a pane.|  \n|[CPaneFrameWnd::CheckGripperVisibility](#cpaneframewnd__checkgrippervisibility)||  \n|[CPaneFrameWnd::ConvertToTabbedDocument](#cpaneframewnd__converttotabbeddocument)|Converts the pane to a tabbed document.|  \n|[CPaneFrameWnd::Create](#cpaneframewnd__create)|Creates a mini-frame window and attaches it to the `CPaneFrameWnd` object.|  \n|[CPaneFrameWnd::CreateEx](#cpaneframewnd__createex)|Creates a mini-frame window and attaches it to the `CPaneFrameWnd` object.|  \n|[CPaneFrameWnd::DockPane](#cpaneframewnd__dockpane)|Docks the pane.|  \n|[CPaneFrameWnd::FindFloatingPaneByID](#cpaneframewnd__findfloatingpanebyid)|Finds a pane with the specified control ID in the global list of floating panes.|  \n|[CPaneFrameWnd::FrameFromPoint](#cpaneframewnd__framefrompoint)|Finds the mini-frame window containing a user-supplied point.|  \n|[CPaneFrameWnd::GetCaptionHeight](#cpaneframewnd__getcaptionheight)|Returns the height of the mini-frame window caption.|  \n|[CPaneFrameWnd::GetCaptionRect](#cpaneframewnd__getcaptionrect)|Calculates the bounding rectangle of a mini-frame window caption.|  \n|[CPaneFrameWnd::GetCaptionText](#cpaneframewnd__getcaptiontext)|Returns the caption text.|  \n|[CPaneFrameWnd::GetDockingManager](#cpaneframewnd__getdockingmanager)||  \n|[CPaneFrameWnd::GetDockingMode](#cpaneframewnd__getdockingmode)|Returns the docking mode.|  \n|[CPaneFrameWnd::GetFirstVisiblePane](#cpaneframewnd__getfirstvisiblepane)|Returns the first visible pane that is contained in a mini-frame window.|  \n|[CPaneFrameWnd::GetHotPoint](#cpaneframewnd__gethotpoint)||  \n|[CPaneFrameWnd::GetPane](#cpaneframewnd__getpane)|Returns a pane that is contained in the mini-frame window.|  \n|[CPaneFrameWnd::GetPaneCount](#cpaneframewnd__getpanecount)|Returns the number of panes that are contained in a mini-frame window.|  \n|[CPaneFrameWnd::GetParent](#cpaneframewnd__getparent)||  \n|[CPaneFrameWnd::GetPinState](#cpaneframewnd__getpinstate)||  \n|[CPaneFrameWnd::GetRecentFloatingRect](#cpaneframewnd__getrecentfloatingrect)||  \n|[CPaneFrameWnd::GetVisiblePaneCount](#cpaneframewnd__getvisiblepanecount)|Returns the number of visible panes that are contained in a mini-frame window.|  \n|[CPaneFrameWnd::HitTest](#cpaneframewnd__hittest)|Determines what part of a mini-frame window is at a given point.|  \n|[CPaneFrameWnd::IsCaptured](#cpaneframewnd__iscaptured)||  \n|[CPaneFrameWnd::IsDelayShow](#cpaneframewnd__isdelayshow)||  \n|[CPaneFrameWnd::IsRollDown](#cpaneframewnd__isrolldown)|Determines whether a mini-frame window should be rolled down.|  \n|[CPaneFrameWnd::IsRollUp](#cpaneframewnd__isrollup)|Determines whether a mini-frame window should be rolled up.|  \n|[CPaneFrameWnd::KillDockingTimer](#cpaneframewnd__killdockingtimer)|Stops the docking timer.|  \n|[CPaneFrameWnd::LoadState](#cpaneframewnd__loadstate)|Loads the pane's state from the registry.|  \n|[CPaneFrameWnd::OnBeforeDock](#cpaneframewnd__onbeforedock)|Determines if docking is possible.|  \n|[CPaneFrameWnd::OnDockToRecentPos](#cpaneframewnd__ondocktorecentpos)|Docks the mini-frame window at its most recent position.|  \n|[CPaneFrameWnd::OnKillRollUpTimer](#cpaneframewnd__onkillrolluptimer)|Stops the rollup timer.|  \n|[CPaneFrameWnd::OnMovePane](#cpaneframewnd__onmovepane)|Moves the mini-frame window by a specified offset.|  \n|[CPaneFrameWnd::OnPaneRecalcLayout](#cpaneframewnd__onpanerecalclayout)|Adjusts the layout of a contained pane.|  \n|[CPaneFrameWnd::OnSetRollUpTimer](#cpaneframewnd__onsetrolluptimer)|Sets the rollup timer.|  \n|[CPaneFrameWnd::OnShowPane](#cpaneframewnd__onshowpane)|Called by the framework when a pane in the mini-frame window is hidden or displayed.|  \n|[CPaneFrameWnd::PaneFromPoint](#cpaneframewnd__panefrompoint)|Returns a pane if it contains a user-supplied point inside a mini-frame window.|  \n|[CPaneFrameWnd::Pin](#cpaneframewnd__pin)||  \n|`CPaneFrameWnd::PreTranslateMessage`|Used by class [CWinApp](../../mfc/reference/cwinapp-class.md) to translate window messages before they are dispatched to the [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) Windows functions.|  \n|[CPaneFrameWnd::RedrawAll](#cpaneframewnd__redrawall)|Redraws all mini-frame windows.|  \n|[CPaneFrameWnd::RemoveNonValidPanes](#cpaneframewnd__removenonvalidpanes)|Called by the framework to remove non-valid panes.|  \n|[CPaneFrameWnd::RemovePane](#cpaneframewnd__removepane)|Removes a pane from the mini-frame window.|  \n|[CPaneFrameWnd::ReplacePane](#cpaneframewnd__replacepane)|Replaces one pane with another.|  \n|[CPaneFrameWnd::SaveState](#cpaneframewnd__savestate)|Saves the pane's state to the registry.|  \n|`CPaneFrameWnd::Serialize`|Reads or writes this object from or to an archive.|  \n|[CPaneFrameWnd::SetCaptionButtons](#cpaneframewnd__setcaptionbuttons)|Sets caption buttons.|  \n|[CPaneFrameWnd::SetDelayShow](#cpaneframewnd__setdelayshow)||  \n|[CPaneFrameWnd::SetDockingManager](#cpaneframewnd__setdockingmanager)||  \n|[CPaneFrameWnd::SetDockingTimer](#cpaneframewnd__setdockingtimer)|Sets the docking timer.|  \n|[CPaneFrameWnd::SetDockState](#cpaneframewnd__setdockstate)|Sets the docking state.|  \n|[CPaneFrameWnd::SetHotPoint](#cpaneframewnd__sethotpoint)||  \n|[CPaneFrameWnd::SetPreDockState](#cpaneframewnd__setpredockstate)|Called by the framework to set the predocking state.|  \n|[CPaneFrameWnd::SizeToContent](#cpaneframewnd__sizetocontent)|Adjusts the size of a mini-frame window so that it is equivalent in size to a contained pane.|  \n|[CPaneFrameWnd::StartTearOff](#cpaneframewnd__starttearoff)|Tears off a menu.|  \n|[CPaneFrameWnd::StoreRecentDockSiteInfo](#cpaneframewnd__storerecentdocksiteinfo)||  \n|[CPaneFrameWnd::StoreRecentTabRelatedInfo](#cpaneframewnd__storerecenttabrelatedinfo)||  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneFrameWnd::OnCheckRollState](#cpaneframewnd__oncheckrollstate)|Determines whether a mini-frame window should be rolled up or down.|  \n|[CPaneFrameWnd::OnDrawBorder](#cpaneframewnd__ondrawborder)|Draws the borders of a mini-frame window.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneFrameWnd::m_bUseSaveBits](#cpaneframewnd__m_busesavebits)|Specifies whether to register the window class with the `CS_SAVEBITS` class style.|  \n  \n## Remarks  \n The framework automatically creates a `CPaneFrameWnd` object when a pane is switched from a docked state to a floating state.  \n  \n A mini-frame window can be dragged with its contents visible (immediate docking) or using a drag rectangle (standard docking). The docking mode of the mini-frame's container pane determines the mini-frame's dragging behavior. For more information, see [CBasePane::GetDockingMode](../../mfc/reference/cbasepane-class.md#cbasepane__getdockingmode).  \n  \n A mini-frame window displays buttons on the caption in accordance with the contained pane style. If the pane can be closed ( [CBasePane::CanBeClosed](../../mfc/reference/cbasepane-class.md#cbasepane__canbeclosed)), it displays a Close button. If the pane has the `AFX_CBRS_AUTO_ROLLUP` style, it displays a pin.  \n  \n If you derive a class from `CPaneFrameWnd`, you must tell the framework how to create it. Either create the class by overriding [CPane::CreateDefaultMiniframe](../../mfc/reference/cpane-class.md#cpane__createdefaultminiframe), or set the `CPane::m_pMiniFrameRTC` member so that it points to the runtime class information for your class.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md)  \n  \n## Requirements  \n **Header:** afxPaneFrameWnd.h  \n  \n##  <a name=\"cpaneframewnd__addpane\"></a>  CPaneFrameWnd::AddPane  \n Adds a pane.  \n  \n```  \nvirtual void AddPane(CBasePane* pWnd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n The pane to add.  \n  \n##  <a name=\"cpaneframewnd__addremovepanefromgloballist\"></a>  CPaneFrameWnd::AddRemovePaneFromGlobalList  \n Adds or removes a pane from the global list.  \n  \n```  \nstatic BOOL __stdcall AddRemovePaneFromGlobalList(\n    CBasePane* pWnd,  \n    BOOL bAdd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n The pane to add or remove.  \n  \n [in] `bAdd`  \n If non-zero, add the pane. If 0, remove the pane.  \n  \n### Return Value  \n Nonzero if the method was successful; otherwise 0.  \n  \n##  <a name=\"cpaneframewnd__adjustlayout\"></a>  CPaneFrameWnd::AdjustLayout  \n Adjusts the layout of the mini-frame window.  \n  \n```  \nvirtual void AdjustLayout();\n```  \n  \n##  <a name=\"cpaneframewnd__adjustpaneframes\"></a>  CPaneFrameWnd::AdjustPaneFrames  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void AdjustPaneFrames();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__calcbordersize\"></a>  CPaneFrameWnd::CalcBorderSize  \n Calculates the size of the borders for a miniframe window.  \n  \n```  \nvirtual void CalcBorderSize(CRect& rectBorderSize) const;\n\n \n```  \n  \n### Parameters  \n [out] `rectBorderSize`  \n Contains the size, in pixels, of the border of the miniframe window.  \n  \n### Remarks  \n This method is called by the framework to calculate the size of the border of a miniframe window. The returned size depends on whether a miniframe window contains a toolbar or a [CDockablePane](../../mfc/reference/cdockablepane-class.md).  \n  \n##  <a name=\"cpaneframewnd__calcexpecteddockedrect\"></a>  CPaneFrameWnd::CalcExpectedDockedRect  \n Calculate the expected rectangle of a docked window.  \n  \n```  \nvirtual void CalcExpectedDockedRect(\n    CWnd* pWndToDock,  \n    CPoint ptMouse,  \n    CRect& rectResult,  \n    BOOL& bDrawTab,  \n    CDockablePane** ppTargetBar);\n```  \n  \n### Parameters  \n [in] `pWndToDock`  \n A pointer to the window to dock.  \n  \n [in] `ptMouse`  \n The mouse location.  \n  \n [out] `rectResult`  \n The calculated rectangle.  \n  \n [out] `bDrawTab`  \n If `TRUE`, draw a tab. If `FALSE`, do not draw a tab.  \n  \n [out] `ppTargetBar`  \n A pointer to the target pane.  \n  \n### Remarks  \n This method calculates the rectangle that a window would occupy if a user dragged the window to the point specified by `ptMouse` and docked it there.  \n  \n##  <a name=\"cpaneframewnd__canbeattached\"></a>  CPaneFrameWnd::CanBeAttached  \n Determines whether the current pane can be docked to another pane or frame window.  \n  \n```  \nvirtual BOOL CanBeAttached() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane can be docked to another pane or frame window; otherwise `FALSE`.  \n  \n##  <a name=\"cpaneframewnd__canbedockedtopane\"></a>  CPaneFrameWnd::CanBeDockedToPane  \n Determines whether the mini-frame window can be docked to a pane.  \n  \n```  \nvirtual BOOL CanBeDockedToPane(const CDockablePane* pDockingBar) const;\n\n \n```  \n  \n### Parameters  \n [in] `pDockingBar`  \n A pane.  \n  \n### Return Value  \n Nonzero if the mini-frame can be docked to `pDockingBar`; otherwise 0.  \n  \n##  <a name=\"cpaneframewnd__checkgrippervisibility\"></a>  CPaneFrameWnd::CheckGripperVisibility  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void CheckGripperVisibility();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__converttotabbeddocument\"></a>  CPaneFrameWnd::ConvertToTabbedDocument  \n Converts the pane to a tabbed document.  \n  \n```  \nvirtual void ConvertToTabbedDocument();\n```  \n  \n##  <a name=\"cpaneframewnd__create\"></a>  CPaneFrameWnd::Create  \n Creates a miniframe window and attaches it to the [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object.  \n  \n```  \nvirtual BOOL Create(\n    LPCTSTR lpszWindowName,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    CCreateContext* pContext = NULL);\n```  \n  \n### Parameters  \n [in] `lpszWindowName`  \n Specifies the text to display on the miniframe window.  \n  \n [in] `dwStyle`  \n Specifies the window style. For more information, see [Window Styles](../../mfc/reference/window-styles.md).  \n  \n [in] `rect`  \n Specifies the initial size and position of the miniframe window.  \n  \n [in] [out] `pParentWnd`  \n Specifies the parent frame of the miniframe window. This value must not be `NULL`.  \n  \n [in] [out] `pContext`  \n Specifies user-defined context.  \n  \n### Return Value  \n `TRUE` if the window was created successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n A miniframe window is created in two steps. First, the framework creates a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object. Second, it calls `Create` to create the Windows miniframe window and attach it to the `CPaneFrameWnd` object.  \n  \n##  <a name=\"cpaneframewnd__createex\"></a>  CPaneFrameWnd::CreateEx  \n Creates a miniframe window and attaches it to the [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwStyleEx,  \n    LPCTSTR lpszWindowName,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    CCreateContext* pContext=NULL);\n```  \n  \n### Parameters  \n [in] `dwStyleEx`  \n Specifies the extended window style. For more information, see [Extended Window Styles](../../mfc/reference/extended-window-styles.md)  \n  \n [in] `lpszWindowName`  \n Specifies the text to display on the miniframe window.  \n  \n [in] `dwStyle`  \n Specifies the window style. For more information, see [Window Styles](../../mfc/reference/window-styles.md).  \n  \n [in] `rect`  \n Specifies the initial size and position of the miniframe window.  \n  \n [in] [out] `pParentWnd`  \n Specifies the parent frame of the miniframe window. This value must not be `NULL`.  \n  \n [in] [out] `pContext`  \n Specifies user-defined context.  \n  \n### Return Value  \n `TRUE` if the window was created successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n A miniframe window is created in two steps. First, the framework creates a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object. Second, it calls `Create` to create the Windows miniframe window and attach it to the `CPaneFrameWnd` object.  \n  \n##  <a name=\"cpaneframewnd__dockpane\"></a>  CPaneFrameWnd::DockPane  \n Docks the pane.  \n  \n```  \nvirtual CDockablePane* DockPane(BOOL& bWasDocked);\n```  \n  \n### Parameters  \n [out] `bWasDocked`  \n `TRUE` if the pane was already docked; otherwise `FALSE`.  \n  \n### Return Value  \n If the operation was successful, the `CDockablePane` that the pane was docked to; otherwise `NULL`.  \n  \n##  <a name=\"cpaneframewnd__findfloatingpanebyid\"></a>  CPaneFrameWnd::FindFloatingPaneByID  \n Finds a pane with the specified control ID in the global list of floating panes.  \n  \n```  \nstatic CBasePane* FindFloatingPaneByID(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n Represents the control ID of the pane to find.  \n  \n### Return Value  \n The pane with the specified control ID; otherwise, `NULL`, if no pane has the specified control ID.  \n  \n##  <a name=\"cpaneframewnd__framefrompoint\"></a>  CPaneFrameWnd::FrameFromPoint  \n Finds the mini-frame window that contains the specified point.  \n  \n```  \nstatic CPaneFrameWnd* __stdcall FrameFromPoint(\n    CPoint pt,  \n    int nSensitivity,  \n    CPaneFrameWnd* pFrameToExclude = NULL,  \n    BOOL bFloatMultiOnly = FALSE);\n```  \n  \n### Parameters  \n [in] `pt`  \n The point, in screen coordinates.  \n  \n [in] `nSensitivity`  \n Increase the search area of the mini-frame window by this size. A mini-frame window satisfies the search criteria if the given point falls in the increased area.  \n  \n [in] `pFrameToExclude`  \n Specifies a mini-frame window to exclude from the search.  \n  \n [in] `bFloatMultiOnly`  \n If `TRUE`, only search mini-frame windows that have the `CBRS_FLOAT_MULTI` style. If `FALSE`, search all mini-frame windows.  \n  \n### Return Value  \n A pointer to the mini-frame window that contains `pt`; otherwise `NULL`.  \n  \n##  <a name=\"cpaneframewnd__getcaptionheight\"></a>  CPaneFrameWnd::GetCaptionHeight  \n Returns the height of the mini-frame window caption.  \n  \n```  \nvirtual int GetCaptionHeight() const;\n\n \n```  \n  \n### Return Value  \n The height, in pixels, of the mini-frame window.  \n  \n### Remarks  \n Call this method to determine the height of a mini-frame window. By default, the height is set to `SM_CYSMCAPTION`. For more information, see [GetSystemMetrics Function](http://msdn.microsoft.com/library/windows/desktop/ms724385).  \n  \n##  <a name=\"cpaneframewnd__getcaptionrect\"></a>  CPaneFrameWnd::GetCaptionRect  \n Calculates the bounding rectangle of a mini-frame window caption.  \n  \n```  \nvirtual void GetCaptionRect(CRect& rectCaption) const;\n\n \n```  \n  \n### Parameters  \n [out] `rectCaption`  \n Contains the size and position of the mini-frame window caption, in screen coordinates.  \n  \n### Remarks  \n This method is called by the framework to calculate the bounding rectangle of a mini-frame window caption.  \n  \n##  <a name=\"cpaneframewnd__getcaptiontext\"></a>  CPaneFrameWnd::GetCaptionText  \n Returns the caption text.  \n  \n```  \nvirtual CString GetCaptionText();\n```  \n  \n### Return Value  \n The caption text of the mini-frame window.  \n  \n### Remarks  \n This method is called by the framework when it displays the caption text.  \n  \n##  <a name=\"cpaneframewnd__getdockingmanager\"></a>  CPaneFrameWnd::GetDockingManager  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCDockingManager* GetDockingManager() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getdockingmode\"></a>  CPaneFrameWnd::GetDockingMode  \n Returns the docking mode.  \n  \n```  \nvirtual AFX_DOCK_TYPE GetDockingMode() const;\n\n \n```  \n  \n### Return Value  \n The docking mode. One of the following values:  \n  \n- `DT_STANDARD`  \n  \n- `DT_IMMEDIATE`  \n  \n- `DT_SMART`  \n  \n##  <a name=\"cpaneframewnd__getfirstvisiblepane\"></a>  CPaneFrameWnd::GetFirstVisiblePane  \n Returns the first visible pane that is contained in a mini-frame window.  \n  \n```  \nvirtual CWnd* GetFirstVisiblePane() const;\n\n \n```  \n  \n### Return Value  \n The first pane in the mini-frame window, or `NULL` if the mini-frame window contains no panes.  \n  \n##  <a name=\"cpaneframewnd__gethotpoint\"></a>  CPaneFrameWnd::GetHotPoint  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCPoint GetHotPoint() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getpane\"></a>  CPaneFrameWnd::GetPane  \n Returns a pane that is contained in the mini-frame window.  \n  \n```  \nvirtual CWnd* GetPane() const;\n\n \n```  \n  \n### Return Value  \n The pane that is contained in the mini-frame, or `NULL` if the mini-frame window contains no panes.  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getpanecount\"></a>  CPaneFrameWnd::GetPaneCount  \n Returns the number of panes that are contained in a mini-frame window.  \n  \n```  \nvirtual int GetPaneCount() const;\n\n \n```  \n  \n### Return Value  \n The number of panes in the mini-frame window. This value can be zero.  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getparent\"></a>  CPaneFrameWnd::GetParent  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCWnd* GetParent();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getpinstate\"></a>  CPaneFrameWnd::GetPinState  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL GetPinState() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getrecentfloatingrect\"></a>  CPaneFrameWnd::GetRecentFloatingRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCRect GetRecentFloatingRect() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getvisiblepanecount\"></a>  CPaneFrameWnd::GetVisiblePaneCount  \n Returns the number of visible panes that are contained in a mini-frame window.  \n  \n```  \nvirtual int GetVisiblePaneCount() const;\n\n \n```  \n  \n### Return Value  \n The number of visible panes.  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__hittest\"></a>  CPaneFrameWnd::HitTest  \n Determines what part of a mini-frame window is at a given point.  \n  \n```  \nvirtual LRESULT HitTest(\n    CPoint point,  \n    BOOL bDetectCaption);\n```  \n  \n### Parameters  \n [in] `point`  \n The point to test.  \n  \n [in] `bDetectCaption`  \n If `TRUE`, check the point against the caption. If `FALSE`, ignore the caption.  \n  \n### Return Value  \n One of the following values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|`HTNOWHERE`|The point is outside the mini-frame window.|  \n|`HTCLIENT`|The point is in the client area.|  \n|`HTCAPTION`|The point is on the caption.|  \n|`HTTOP`|The point is at the top.|  \n|`HTTOPLEFT`|The point is at the top left.|  \n|`HTTOPRIGHT`|The point is at the top right.|  \n|`HTLEFT`|The point is at the left.|  \n|`HTRIGHT`|The point is at the right.|  \n|`HTBOTTOM`|The point is at the bottom.|  \n|`HTBOTTOMLEFT`|The point is at the bottom left.|  \n|`HTBOTTOMRIGHT`|The point is at the bottom right.|  \n  \n##  <a name=\"cpaneframewnd__iscaptured\"></a>  CPaneFrameWnd::IsCaptured  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsCaptured() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__isdelayshow\"></a>  CPaneFrameWnd::IsDelayShow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsDelayShow() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__isrolldown\"></a>  CPaneFrameWnd::IsRollDown  \n Determines whether a mini-frame window should be rolled down.  \n  \n```  \nvirtual BOOL IsRollDown() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the mini-frame window must be rolled down; otherwise, `FALSE`.  \n  \n### Remarks  \n This method is called by the framework to determine whether a mini-frame window should be rolled down. The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the `AFX_CBRS_AUTO_ROLLUP` flag. This flag is set when a pane is created. For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex).  \n  \n By default, the framework checks whether the mouse pointer is inside the mini-frame window bounding rectangle to determine whether the window has to be rolled down. You can override this behavior in a derived class.  \n  \n##  <a name=\"cpaneframewnd__isrollup\"></a>  CPaneFrameWnd::IsRollUp  \n Determines whether a mini-frame window should be rolled up.  \n  \n```  \nvirtual BOOL IsRollUp() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the mini-frame window must be rolled up; otherwise, `FALSE`.  \n  \n### Remarks  \n This method is called by the framework to determine whether a mini-frame window should be rolled up. The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the `AFX_CBRS_AUTO_ROLLUP` flag. This flag is set when a pane is created. For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex).  \n  \n By default, the framework checks whether the mouse pointer is inside the mini-frame window bounding rectangle to determine whether the window has to be rolled up. You can override this behavior in a derived class.  \n  \n##  <a name=\"cpaneframewnd__killdockingtimer\"></a>  CPaneFrameWnd::KillDockingTimer  \n Stops the docking timer.  \n  \n```  \nvoid KillDockingTimer();\n```  \n  \n##  <a name=\"cpaneframewnd__loadstate\"></a>  CPaneFrameWnd::LoadState  \n Loads the pane's state from the registry.  \n  \n```  \nvirtual BOOL LoadState(\n    LPCTSTR lpszProfileName = NULL,  \n    UINT uiID = (UINT) -1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n The profile name.  \n  \n [in] `uiID`  \n The pane ID.  \n  \n### Return Value  \n `TRUE` if the pane state was loaded successfully; otherwise `FALSE`.  \n  \n##  <a name=\"cpaneframewnd__m_busesavebits\"></a>  CPaneFrameWnd::m_bUseSaveBits  \n Specifies whether to register the window class that has the `CS_SAVEBITS` class style.  \n  \n```  \nAFX_IMPORT_DATA static BOOL m_bUseSaveBits;  \n```  \n  \n### Remarks  \n Set this static member to `TRUE` to register the mini-frame window class that has the `CS_SAVEBITS` style. This may help reduce flickering when a user drags the mini-frame window.  \n  \n##  <a name=\"cpaneframewnd__onbeforedock\"></a>  CPaneFrameWnd::OnBeforeDock  \n Determines if docking is possible.  \n  \n```  \nvirtual BOOL OnBeforeDock();\n```  \n  \n### Return Value  \n `TRUE` if docking is possible; otherwise, `FALSE`.  \n  \n##  <a name=\"cpaneframewnd__oncheckrollstate\"></a>  CPaneFrameWnd::OnCheckRollState  \n Determines whether a mini-frame window should be rolled up or down.  \n  \n```  \nvirtual void OnCheckRollState();\n```  \n  \n### Remarks  \n This method is called by the framework to determine whether a mini-frame window should be rolled up or down.  \n  \n By default, the framework calls [CPaneFrameWnd::IsRollUp](#cpaneframewnd__isrollup) and [CPaneFrameWnd::IsRollDown](#cpaneframewnd__isrolldown) and just stretches or restores the mini-frame window. You can override this method in a derived class to use a different visual effect.  \n  \n##  <a name=\"cpaneframewnd__ondocktorecentpos\"></a>  CPaneFrameWnd::OnDockToRecentPos  \n Docks the mini-frame window at its most recent position.  \n  \n```  \nvirtual void OnDockToRecentPos();\n```  \n  \n##  <a name=\"cpaneframewnd__ondrawborder\"></a>  CPaneFrameWnd::OnDrawBorder  \n Draws the borders of a mini-frame window.  \n  \n```  \nvirtual void OnDrawBorder(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n The device context used to draw the border.  \n  \n### Remarks  \n This method is called by the framework to draw the borders of the mini-frame window.  \n  \n##  <a name=\"cpaneframewnd__onkillrolluptimer\"></a>  CPaneFrameWnd::OnKillRollUpTimer  \n Stops the rollup timer.  \n  \n```  \nvirtual void OnKillRollUpTimer();\n```  \n  \n##  <a name=\"cpaneframewnd__onmovepane\"></a>  CPaneFrameWnd::OnMovePane  \n Moves the mini-frame window by a specified offset.  \n  \n```  \nvirtual void OnMovePane(\n    CPane* pBar,  \n    CPoint ptOffset);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to a pane (ignored).  \n  \n [in] `ptOffset`  \n The offset by which to move the pane.  \n  \n##  <a name=\"cpaneframewnd__onpanerecalclayout\"></a>  CPaneFrameWnd::OnPaneRecalcLayout  \n Adjusts the layout of a pane inside a mini-frame window.  \n  \n```  \nvirtual void OnPaneRecalcLayout();\n```  \n  \n### Remarks  \n The framework calls this method when it must adjust the layout of a pane inside the mini-frame window.  \n  \n By default, the pane is positioned to cover the complete client area of the mini-frame window.  \n  \n##  <a name=\"cpaneframewnd__onsetrolluptimer\"></a>  CPaneFrameWnd::OnSetRollUpTimer  \n Sets the rollup timer.  \n  \n```  \nvirtual void OnSetRollUpTimer();\n```  \n  \n##  <a name=\"cpaneframewnd__onshowpane\"></a>  CPaneFrameWnd::OnShowPane  \n Called by the framework when a pane in the mini-frame window is hidden or displayed.  \n  \n```  \nvirtual void OnShowPane(\n    CDockablePane* pBar,  \n    BOOL bShow);\n```  \n  \n### Parameters  \n [in] `pBar`  \n The pane that is being shown or hidden.  \n  \n [in] `bShow`  \n `TRUE` if the pane is being shown; `FALSE` if the pane is being hidden.  \n  \n### Remarks  \n Called by the framework when a pane in the mini-frame window is shown or hidden. The default implementation does nothing.  \n  \n##  <a name=\"cpaneframewnd__pin\"></a>  CPaneFrameWnd::Pin  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid Pin(BOOL bPin = TRUE);\n```  \n  \n### Parameters  \n [in] `bPin`  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__panefrompoint\"></a>  CPaneFrameWnd::PaneFromPoint  \n Returns a pane if it contains a user-supplied point inside a mini-frame window.  \n  \n```  \nvirtual CBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    BOOL bCheckVisibility);\n```  \n  \n### Parameters  \n [in] `point`  \n The point that the user clicked, in screen coordinates.  \n  \n [in] `nSensitivity`  \n This parameter is not used.  \n  \n [in] `bCheckVisibility`  \n `TRUE` to specify that only visible panes should be returned; otherwise, `FALSE`.  \n  \n### Return Value  \n The pane that the user clicked, or `NULL` if no pane exists at that location.  \n  \n### Remarks  \n Call this method to obtain a pane that contains the given point.  \n  \n##  <a name=\"cpaneframewnd__redrawall\"></a>  CPaneFrameWnd::RedrawAll  \n Redraws all mini-frame windows.  \n  \n```  \nstatic void RedrawAll();\n```  \n  \n### Remarks  \n This method updates all mini-frame windows by calling [CWnd::RedrawWindow](../../mfc/reference/cwnd-class.md#cwnd__redrawwindow) for each window.  \n  \n##  <a name=\"cpaneframewnd__removenonvalidpanes\"></a>  CPaneFrameWnd::RemoveNonValidPanes  \n Called by the framework to remove non-valid panes.  \n  \n```  \nvirtual void RemoveNonValidPanes();\n```  \n  \n##  <a name=\"cpaneframewnd__removepane\"></a>  CPaneFrameWnd::RemovePane  \n Removes a pane from the mini-frame window.  \n  \n```  \nvirtual void RemovePane(\n    CBasePane* pWnd,  \n    BOOL bDestroy = FALSE,  \n    BOOL bNoDelayedDestroy = FALSE);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n A pointer to the pane to remove.  \n  \n [in] `bDestroy`  \n Specifies what happens to the mini-frame window. If `bDestroy` is `TRUE`, this method destroys the mini-frame window immediately. If it is `FALSE`, this method destroys the mini-frame window after a certain delay.  \n  \n [in] `bNoDelayedDestroy`  \n If `TRUE`, delayed destruction is disabled. If `FALSE`, delayed destruction is enabled.  \n  \n### Remarks  \n The framework can destroy mini-frame windows immediately or after a certain delay. If you want to delay destruction of mini-frame windows, pass `FALSE` in the `bNoDelayedDestroy` parameter. Delayed destruction occurs when the framework processes the `AFX_WM_CHECKEMPTYMINIFRAME` message.  \n  \n##  <a name=\"cpaneframewnd__replacepane\"></a>  CPaneFrameWnd::ReplacePane  \n Replaces one pane with another.  \n  \n```  \nvirtual void ReplacePane(\n    CBasePane* pBarOrg,  \n    CBasePane* pBarReplaceWith);\n```  \n  \n### Parameters  \n [in] `pBarOrg`  \n A pointer to the original pane.  \n  \n [in] `pBarReplaceWith`  \n A pointer to the pane that replaces the original pane.  \n  \n##  <a name=\"cpaneframewnd__savestate\"></a>  CPaneFrameWnd::SaveState  \n Saves the pane's state to the registry.  \n  \n```  \nvirtual BOOL SaveState(\n    LPCTSTR lpszProfileName = NULL,  \n    UINT uiID = (UINT) -1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n The profile name.  \n  \n [in] `uiID`  \n The pane ID.  \n  \n### Return Value  \n `TRUE` if the pane state was saved successfully; otherwise `FALSE`.  \n  \n##  <a name=\"cpaneframewnd__setcaptionbuttons\"></a>  CPaneFrameWnd::SetCaptionButtons  \n Sets caption buttons.  \n  \n```  \nvirtual void SetCaptionButtons(DWORD dwButtons);\n```  \n  \n### Parameters  \n [in] `dwButtons`  \n Bitwise-OR combination of the following values:  \n  \n- `AFX_CAPTION_BTN_CLOSE`  \n  \n- `AFX_CAPTION_BTN_PIN`  \n  \n- `AFX_CAPTION_BTN_MENU`  \n  \n- `AFX_CAPTION_BTN_CUSTOMIZE`  \n  \n##  <a name=\"cpaneframewnd__setdelayshow\"></a>  CPaneFrameWnd::SetDelayShow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetDelayShow(BOOL bDelayShow);\n```  \n  \n### Parameters  \n [in] `bDelayShow`  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__setdockingmanager\"></a>  CPaneFrameWnd::SetDockingManager  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetDockingManager(CDockingManager* pManager);\n```  \n  \n### Parameters  \n [in] `pManager`  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__setdockingtimer\"></a>  CPaneFrameWnd::SetDockingTimer  \n Sets the docking timer.  \n  \n```  \nvoid SetDockingTimer(UINT nTimeOut);\n```  \n  \n### Parameters  \n [in] `nTimeOut`  \n Timeout value in milliseconds.  \n  \n##  <a name=\"cpaneframewnd__setdockstate\"></a>  CPaneFrameWnd::SetDockState  \n Sets the docking state.  \n  \n```  \nvirtual void SetDockState(CDockingManager* pDockManager);\n```  \n  \n### Parameters  \n [in] `pDockManager`  \n A pointer to a docking manager.  \n  \n##  <a name=\"cpaneframewnd__sethotpoint\"></a>  CPaneFrameWnd::SetHotPoint  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetHotPoint(CPoint& ptNew);\n```  \n  \n### Parameters  \n [in] `ptNew`  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__setpredockstate\"></a>  CPaneFrameWnd::SetPreDockState  \n Called by the framework to set the predocking state.  \n  \n```  \nvirtual BOOL SetPreDockState(\n    AFX_PREDOCK_STATE preDockState,  \n    CBasePane* pBarToDock = NULL,  \n    AFX_DOCK_METHOD dockMethod = DM_MOUSE);\n```  \n  \n### Parameters  \n [in] `preDockState`  \n Possible values:  \n  \n- `PDS_NOTHING`,  \n  \n- `PDS_DOCK_REGULAR`,  \n  \n- `PDS_DOCK_TO_TAB`  \n  \n [in] `pBarToDock`  \n A pointer to the pane to dock.  \n  \n [in] `dockMethod`  \n The docking method. (This parameter is ignored.)  \n  \n### Return Value  \n `TRUE` if the mini-frame window is undocked; `FALSE` if it is docked.  \n  \n##  <a name=\"cpaneframewnd__sizetocontent\"></a>  CPaneFrameWnd::SizeToContent  \n Adjusts the size of a mini-frame window so that it is equivalent to a contained pane.  \n  \n```  \nvirtual void SizeToContent();\n```  \n  \n### Remarks  \n Call this method to adjust the size of a mini-frame window to the size of a contained pane.  \n  \n##  <a name=\"cpaneframewnd__starttearoff\"></a>  CPaneFrameWnd::StartTearOff  \n Tears off a menu.  \n  \n```  \nBOOL StartTearOff(CMFCPopu* pMenu);\n```  \n  \n### Parameters  \n [in] `pMenu`  \n A pointer to a menu.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise, `FALSE`.  \n  \n##  <a name=\"cpaneframewnd__storerecentdocksiteinfo\"></a>  CPaneFrameWnd::StoreRecentDockSiteInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void StoreRecentDockSiteInfo(CPane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__storerecenttabrelatedinfo\"></a>  CPaneFrameWnd::StoreRecentTabRelatedInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void StoreRecentTabRelatedInfo(\n    CDockablePane* pDockingBar,  \n    CDockablePane* pTabbedBar);\n```  \n  \n### Parameters  \n [in] `pDockingBar`  \n [in] `pTabbedBar`  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)\n"}