<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30e8f1c86ebff67c520f4ff303ade831306cede6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\ostreambuf-iterator-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca644d5167676ef8a29c852100faeca6b80279e6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5140d0eb4da734cdff4be0d22ce75c42157951bc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class ostreambuf_iterator describes an output iterator object that writes successive character elements onto the output stream with the extraction <bpt id="p1">**</bpt>operator&gt;&gt;<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ostreambuf_iterator`</ph>s differ from those of the <bpt id="p1">[</bpt>ostream_iterator Class<ept id="p1">](../standard-library/ostream-iterator-class.md)</ept> in having characters instead of a generic type at the type of object being inserted into the output stream.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type that represents the character type for the ostreambuf_iterator.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This argument is optional and the default value is <ph id="ph1">`char`</ph><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The type that represents the character type for the ostreambuf_iterator.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This argument is optional and the default value is <ph id="ph1">`char_traits`\&lt;</ph> <bpt id="p1">*</bpt>CharType&gt;.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The ostreambuf_iterator class must satisfy the requirements for an output iterator.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Algorithms can be written directly to output streams using an <ph id="ph1">`ostreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The class provides a low-level stream iterator that allows access to the raw (unformatted) I/O stream in the form of characters and the ability to bypass the buffering and character translations associated with the high-level stream iterators.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Constructs an <ph id="ph1">`ostreambuf_iterator`</ph> that is initialized to write characters to the output stream.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>char_type</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A type that provides for the character type of the <ph id="ph1">`ostreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>ostream_type</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A type that provides for the stream type of the <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>streambuf_type</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A type that provides for the stream type of the <ph id="ph1">`ostreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>traits_type</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A type that provides for the character traits type of the <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>failed</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Tests for failure of an insertion into the output stream buffer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>operator*</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Dereferencing operator used to implement the output iterator expression * <ph id="ph1">`i` = `x`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>operator++</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A nonfunctional increment operator that returns an <ph id="ph1">`ostreambuf_iterator`</ph> to the same object it addressed before the operation was called.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The operator inserts a character into the associated stream buffer.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>iterator&gt;</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator::char_type</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A type that provides for the character type of the <ph id="ph1">`ostreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator::failed</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Tests for failure of an insertion into the output stream buffer.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if no insertion into the output stream buffer has failed earlier; otherwise <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if, in any prior use of member <ph id="ph1">`operator=`</ph>, the call to <bpt id="p2">**</bpt>subf<ept id="p2">**</ept>_-&gt; <ph id="ph2">`sputc`</ph> returned <bpt id="p3">**</bpt>eof<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator::operator*</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A nonfunctional dereferencing operator used to implement the output iterator expression <ph id="ph1">\*</ph> <bpt id="p1">*</bpt>i<ept id="p1">*</ept><ph id="ph2"> = </ph><bpt id="p2">*</bpt>x<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The ostreambuf iterator object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This operator functions only in the output iterator expression <ph id="ph1">\*</ph> <bpt id="p1">*</bpt>i<ept id="p1">*</ept><ph id="ph2"> = </ph><bpt id="p2">*</bpt>x<ept id="p2">*</ept> to output characters to stream buffer.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Applied to an ostreambuf iterator, it returns the iterator; <bpt id="p1">**</bpt><ph id="ph1">\*</ph>iter<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>iter<ept id="p2">**</ept>,</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator::operator++</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A nonfunctional increment operator that returns an ostream iterator to the same character it addressed before the operation was called.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A reference to the character originally addressed or to an implementation-defined object that is convertible to <ph id="ph1">`ostreambuf_iterator`\&lt;</ph> <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Traits<ept id="p2">**</ept>&gt;.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The operator is used to implement the output iterator expression <ph id="ph1">\*</ph> <bpt id="p1">*</bpt>i<ept id="p1">*</ept><ph id="ph2"> = </ph><bpt id="p2">*</bpt>x<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator::operator=</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The operator inserts a character into the associated stream buffer.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The character to be inserted into the stream buffer.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A reference to the character inserted into the stream buffer.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Assignment operator used to implement the output iterator expression <ph id="ph1">\*</ph> <bpt id="p1">*</bpt>i<ept id="p1">*</ept><ph id="ph2"> = </ph><bpt id="p2">*</bpt>x<ept id="p2">*</ept> for writing to an output stream.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator::ostreambuf_iterator</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Constructs an <ph id="ph1">`ostreambuf_iterator`</ph> that is initialized to write characters to the output stream.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The output streambuf object used to initialize the output stream-buffer pointer.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The output stream object used to initialize the output stream-buffer pointer.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The first constructor initializes the output stream-buffer pointer with <ph id="ph1">`strbuf`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The second constructor initializes the output stream-buffer pointer with <ph id="ph1">`Ostr`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The stored pointer must not be a null pointer.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator::ostream_type</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A type that provides for the stream type of the <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <ph id="ph1">`basicOstream`\&lt;</ph> <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Traits<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ostreambuf_iterator<ept id="p1">](#ostreambuf_iterator_ostreambuf_iterator)</ept> for an example of how to declare and use <ph id="ph1">`ostream_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator::streambuf_type</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A type that provides for the stream type of the <ph id="ph1">`ostreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <ph id="ph1">`basic_streambuf`\&lt;</ph> <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Traits<ept id="p2">**</ept>&gt;, a stream class for I/O buffers that becomes <ph id="ph2">`streambuf`</ph> when specialized to character type <ph id="ph3">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ostreambuf_iterator<ept id="p1">](#ostreambuf_iterator_ostreambuf_iterator)</ept> for an example of how to declare and use <ph id="ph1">`streambuf_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>ostreambuf_iterator::traits_type</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A type that provides for the character traits type of the <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>Traits<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>iterator&gt;</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>