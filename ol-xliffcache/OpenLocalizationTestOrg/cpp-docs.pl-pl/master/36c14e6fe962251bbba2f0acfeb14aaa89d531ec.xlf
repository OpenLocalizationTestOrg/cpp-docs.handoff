<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36c14e6fe962251bbba2f0acfeb14aaa89d531ec</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\string-data-management.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e4844d8c61b4aa23c549127d870bfe543bd0bc2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e2e15d70a05c30ddb75013e9a64eec808776511</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>String Data Management | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>String Data Management</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Visual C++ provides several ways to manage string data:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String Manipulation<ept id="p1">](../c-runtime-library/string-manipulation-crt.md)</ept> for working with C-style null-terminated strings</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Win32 API functions for managing strings</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>MFC's class <bpt id="p1">[</bpt>CStringT Class<ept id="p1">](../atl-mfc-shared/reference/cstringt-class.md)</ept>, which provides flexible, resizable string objects</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Class <bpt id="p1">[</bpt>CStringT Class<ept id="p1">](../atl-mfc-shared/reference/cstringt-class.md)</ept>, which provides an MFC-independent string object with the same functionality as</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Nearly all programs work with string data.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>MFC's <ph id="ph1">`CString`</ph> class is often the best solution for flexible string handling.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Starting with version 7.0, <ph id="ph1">`CString`</ph> can be used in MFC or MFC-independent programs.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Both the run-time library and <ph id="ph1">`CString`</ph> support strings containing multibyte (wide) characters, as in Unicode or MBCS programming.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This article describes the general-purpose services that the class library provides related to string manipulation.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Topics covered in this article include:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Unicode and MBCS Provide portability</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CStrings and const char Pointers</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CString Reference Counting</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CStringT Class<ept id="p1">](../atl-mfc-shared/reference/cstringt-class.md)</ept> class provides support for manipulating strings.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is intended to replace and extend the functionality normally provided by the C run-time library string package.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CString`</ph> class supplies member functions and operators for simplified string handling, similar to those found in Basic.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The class also provides constructors and operators for constructing, assigning, and comparing <bpt id="p1">**</bpt>CStrings<ept id="p1">**</ept> and standard C++ string data types.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CString`</ph> is not derived from <ph id="ph2">`CObject`</ph>, you can use <ph id="ph3">`CString`</ph> objects independently of most of the Microsoft Foundation Class Library (MFC).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>objects follow "value semantics."</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object represents a unique value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Think of a <ph id="ph1">`CString`</ph> as an actual string, not as a pointer to a string.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object represents a sequence of a variable number of characters.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>objects can be thought of as arrays of characters.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Unicode and MBCS Provide Portability</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>With MFC version 3.0 and later, MFC, including <ph id="ph1">`CString`</ph>, is enabled for both Unicode and multibyte character sets (MBCS).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This support makes it easier for you to write portable applications that you can build for either Unicode or ANSI characters.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To enable this portability, each character in a <ph id="ph1">`CString`</ph> object is of type <bpt id="p1">**</bpt>TCHAR<ept id="p1">**</ept>, which is defined as <ph id="ph2">`wchar_t`</ph> if you define the symbol <bpt id="p2">**</bpt>_UNICODE<ept id="p2">**</ept> when you build your application, or as <ph id="ph3">`char`</ph> if not.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`wchar_t`</ph> character is 16 bits wide.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>MBCS is enabled if you build with the symbol <bpt id="p1">**</bpt>_MBCS<ept id="p1">**</ept> defined.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>MFC itself is built with either the <bpt id="p1">**</bpt>_MBCS<ept id="p1">**</ept> symbol (for the NAFX libraries) or the <bpt id="p2">**</bpt>_UNICODE<ept id="p2">**</ept> symbol (for the UAFX libraries) defined.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CString`</ph> examples in this and the accompanying articles on strings show literal strings properly formatted for Unicode portability, using the <bpt id="p1">**</bpt>_T<ept id="p1">**</ept> macro, which translates the literal string to the form:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>which the compiler treats as a Unicode string.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the following code:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#187</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>is translated as a Unicode string if <bpt id="p1">**</bpt>_UNICODE<ept id="p1">**</ept> is defined or as an ANSI string if not.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Unicode and Multibyte Character Set (MBCS) Support<ept id="p1">](../atl-mfc-shared/unicode-and-multibyte-character-set-mbcs-support.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object can store up to <bpt id="p1">**</bpt>INT_MAX<ept id="p1">**</ept> (2,147,483,647) characters.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TCHAR<ept id="p1">**</ept> data type is used to get or set individual characters inside a <ph id="ph1">`CString`</ph> object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Unlike character arrays, the <ph id="ph1">`CString`</ph> class has a built-in memory allocation capability.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This allows <ph id="ph1">`CString`</ph> objects to automatically grow as needed (that is, you do not have to worry about growing a <ph id="ph2">`CString`</ph> object to fit longer strings).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CStrings and const char Pointers</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object also can act like a literal C-style string (an <ph id="ph2">`PCXSTR`</ph>, which is the same as <bpt id="p1">**</bpt>const char<ph id="ph3">\*</ph><ept id="p1">**</ept> if not under Unicode).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CSimpleStringT::operator PCXSTR<ept id="p1">](../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__operator_pcxstr)</ept> conversion operator allows <ph id="ph1">`CString`</ph> objects to be freely substituted for character pointers in function calls.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CString( LPCWSTR<ept id="p1">**</ept> <ph id="ph1">`pszSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> constructor allows character pointers to be substituted for <ph id="ph2">`CString`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>No attempt is made to fold <ph id="ph1">`CString`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you make two <ph id="ph1">`CString`</ph> objects containing <ph id="ph2">`Chicago`</ph>, for example, the characters in <ph id="ph3">`Chicago`</ph> are stored in two places.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>(This may not be true of future versions of MFC, so you should not depend on it.)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CSimpleStringT::GetBuffer<ept id="p1">](../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__getbuffer)</ept> and <bpt id="p2">[</bpt>CSimpleStringT::ReleaseBuffer<ept id="p2">](../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__releasebuffer)</ept> member functions when you need to directly access a <ph id="ph1">`CString`</ph> as a nonconstant pointer to a character.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CStringT::AllocSysString<ept id="p1">](../atl-mfc-shared/reference/cstringt-class.md#cstringt__allocsysstring)</ept> and <bpt id="p2">[</bpt>CStringT::SetSysString<ept id="p2">](../atl-mfc-shared/reference/cstringt-class.md#cstringt__setsysstring)</ept> member functions to allocate and set <ph id="ph1">`BSTR`</ph> objects used in Automation (formerly known as OLE Automation).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Where possible, allocate <ph id="ph1">`CString`</ph> objects on the frame rather than on the heap.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This saves memory and simplifies parameter passing.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CString`</ph> class is not implemented as a Microsoft Foundation Class Library collection class, though <ph id="ph2">`CString`</ph> objects can certainly be stored as elements in collections.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CString Reference Counting</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>As of MFC version 4.0, when <bpt id="p1">[</bpt>CStringT Class<ept id="p1">](../atl-mfc-shared/reference/cstringt-class.md)</ept> objects are copied, MFC increments a reference count rather than copying the data.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This makes passing parameters by value and returning <ph id="ph1">`CString`</ph> objects by value more efficient.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>These operations cause the copy constructor to be called, sometimes more than once.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Incrementing a reference count reduces that overhead for these common operations and makes using <ph id="ph1">`CString`</ph> a more attractive option.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>As each copy is destroyed, the reference count in the original object is decremented.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The original <ph id="ph1">`CString`</ph> object is not destroyed until its reference count is reduced to zero.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`CString`</ph> member functions <bpt id="p1">[</bpt>CSimpleStringT::LockBuffer<ept id="p1">](../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__lockbuffer)</ept> and <bpt id="p2">[</bpt>CSimpleStringT::UnlockBuffer<ept id="p2">](../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__unlockbuffer)</ept> to disable or enable reference counting.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>General MFC Topics</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>