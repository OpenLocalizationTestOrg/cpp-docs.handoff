{"nodes":[{"pos":[12,44],"content":"spawn Constants | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"spawn Constants | Microsoft Docs","pos":[0,32]}]},{"content":"spawn Constants","pos":[915,930]},{"content":"Syntax","pos":[934,940]},{"content":"Remarks","pos":[987,994]},{"content":"The <ph id=\"ph1\">`mode`</ph> argument determines the action taken by the calling process before and during a spawn operation.","pos":[998,1105],"source":"The `mode` argument determines the action taken by the calling process before and during a spawn operation."},{"content":"The following values for <ph id=\"ph1\">`mode`</ph> are possible:","pos":[1106,1151],"source":" The following values for `mode` are possible:"},{"content":"Constant","pos":[1158,1166]},{"content":"Meaning","pos":[1167,1174]},{"pos":[1225,1326],"content":"Overlays calling process with new process, destroying calling process (same effect as <ph id=\"ph1\">`_exec`</ph> calls).","source":"Overlays calling process with new process, destroying calling process (same effect as `_exec` calls)."},{"pos":[1341,1431],"content":"Suspends calling thread until execution of new process is complete (synchronous <ph id=\"ph1\">`_spawn`</ph>).","source":"Suspends calling thread until execution of new process is complete (synchronous `_spawn`)."},{"pos":[1447,1448],"content":","},{"pos":[1462,1553],"content":"Continues to execute calling process concurrently with new process (asynchronous <ph id=\"ph1\">`_spawn`</ph>).","source":"Continues to execute calling process concurrently with new process (asynchronous `_spawn`)."},{"content":"Continues to execute calling process; new process is run in background with no access to console or keyboard.","pos":[1570,1679]},{"content":"Calls to <ph id=\"ph1\">`_cwait`</ph> against new process will fail.","pos":[1680,1728],"source":" Calls to `_cwait` against new process will fail."},{"content":"This is an asynchronous <ph id=\"ph1\">`_spawn`</ph>.","pos":[1729,1762],"source":" This is an asynchronous `_spawn`."},{"content":"See Also","pos":[1772,1780]},{"content":"_spawn, _wspawn Functions","pos":[1785,1810]},{"content":"Global Constants","pos":[1865,1881]}],"content":"---\ntitle: \"spawn Constants | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_P_NOWAIT\"\n  - \"_P_OVERLAY\"\n  - \"_P_WAIT\"\n  - \"_P_DETACH\"\n  - \"_P_NOWAITO\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_P_OVERLAY constant\"\n  - \"P_DETACH constant\"\n  - \"P_OVERLAY constant\"\n  - \"P_NOWAIT constant\"\n  - \"_P_DETACH constant\"\n  - \"_P_NOWAIT constant\"\n  - \"_P_NOWAITO constant\"\n  - \"P_NOWAITO constant\"\n  - \"spawn constants\"\n  - \"P_WAIT constant\"\n  - \"_P_WAIT constant\"\nms.assetid: e0533e88-d362-46fc-b53c-5f193226d879\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# spawn Constants\n## Syntax  \n  \n```  \n#include <process.h>  \n```  \n  \n## Remarks  \n The `mode` argument determines the action taken by the calling process before and during a spawn operation. The following values for `mode` are possible:  \n  \n|Constant|Meaning|  \n|--------------|-------------|  \n|`_P_OVERLAY`|Overlays calling process with new process, destroying calling process (same effect as `_exec` calls).|  \n|`_P_WAIT`|Suspends calling thread until execution of new process is complete (synchronous `_spawn`).|  \n|`_P_NOWAIT`, `_P_NOWAITO`|Continues to execute calling process concurrently with new process (asynchronous `_spawn`).|  \n|`_P_DETACH`|Continues to execute calling process; new process is run in background with no access to console or keyboard. Calls to `_cwait` against new process will fail. This is an asynchronous `_spawn`.|  \n  \n## See Also  \n [_spawn, _wspawn Functions](../c-runtime-library/spawn-wspawn-functions.md)   \n [Global Constants](../c-runtime-library/global-constants.md)"}