{"nodes":[{"pos":[12,46],"content":"CComPtrBase Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComPtrBase Class | Microsoft Docs","pos":[0,34]}]},{"content":"CComPtrBase Class","pos":[703,720]},{"content":"This class provides a basis for smart pointer classes using COM-based memory routines.","pos":[721,807]},{"content":"Syntax","pos":[816,822]},{"content":"Parameters","pos":[883,893]},{"content":"The object type to be referenced by the smart pointer.","pos":[904,958]},{"content":"Members","pos":[967,974]},{"content":"Public Constructors","pos":[984,1003]},{"content":"Name","pos":[1010,1014]},{"content":"Description","pos":[1015,1026]},{"content":"CComPtrBase::~CComPtrBase","pos":[1065,1090]},{"content":"The destructor.","pos":[1124,1139]},{"content":"Public Methods","pos":[1150,1164]},{"content":"Name","pos":[1171,1175]},{"content":"Description","pos":[1176,1187]},{"content":"CComPtrBase::Advise","pos":[1226,1245]},{"pos":[1269,1374],"content":"Call this method to create a connection between the <ph id=\"ph1\">`CComPtrBase`</ph>'s connection point and a client's sink.","source":"Call this method to create a connection between the `CComPtrBase`'s connection point and a client's sink."},{"content":"CComPtrBase::Attach","pos":[1380,1399]},{"content":"Call this method to take ownership of an existing pointer.","pos":[1423,1481]},{"content":"CComPtrBase::CoCreateInstance","pos":[1487,1516]},{"content":"Call this method to create an object of the class associated with a specified Class ID or Program ID.","pos":[1550,1651]},{"content":"CComPtrBase::CopyTo","pos":[1657,1676]},{"pos":[1700,1779],"content":"Call this method to copy the <ph id=\"ph1\">`CComPtrBase`</ph> pointer to another pointer variable.","source":"Call this method to copy the `CComPtrBase` pointer to another pointer variable."},{"content":"CComPtrBase::Detach","pos":[1785,1804]},{"content":"Call this method to release ownership of a pointer.","pos":[1828,1879]},{"content":"CComPtrBase::IsEqualObject","pos":[1885,1911]},{"pos":[1942,2065],"content":"Call this method to check if the specified <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> points to the same object associated with the <ph id=\"ph1\">`CComPtrBase`</ph> object.","source":"Call this method to check if the specified **IUnknown** points to the same object associated with the `CComPtrBase` object."},{"content":"CComPtrBase::QueryInterface","pos":[2071,2098]},{"content":"Call this method to return a pointer to a specified interface.","pos":[2130,2192]},{"content":"CComPtrBase::Release","pos":[2198,2218]},{"content":"Call this method to release the interface.","pos":[2243,2285]},{"content":"CComPtrBase::SetSite","pos":[2291,2311]},{"pos":[2336,2438],"content":"Call this method to set the site of the <ph id=\"ph1\">`CComPtrBase`</ph> object to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the parent object.","source":"Call this method to set the site of the `CComPtrBase` object to the **IUnknown** of the parent object."},{"content":"Public Operators","pos":[2449,2465]},{"content":"Name","pos":[2472,2476]},{"content":"Description","pos":[2477,2488]},{"content":"CComPtrBase::operator T*","pos":[2527,2551]},{"content":"The cast operator.","pos":[2584,2602]},{"content":"CComPtrBase::operator !","pos":[2608,2631]},{"content":"The NOT operator.","pos":[2661,2678]},{"content":"CComPtrBase::operator &amp;","pos":[2684,2707],"source":"CComPtrBase::operator &"},{"content":"The &amp; operator.","pos":[2737,2752],"source":"The & operator."},{"content":"CComPtrBase::operator *","pos":[2758,2781]},{"content":"The * operator.","pos":[2812,2827]},{"content":"CComPtrBase::operator &lt;","pos":[2833,2856],"source":"CComPtrBase::operator <"},{"content":"The less-than operator.","pos":[2885,2908]},{"content":"CComPtrBase::operator ==","pos":[2914,2938]},{"content":"The equality operator.","pos":[2970,2992]},{"content":"CComPtrBase::operator -&gt;","pos":[2998,3022],"source":"CComPtrBase::operator ->"},{"content":"The pointer-to-members operator.","pos":[3052,3084]},{"content":"Public Data Members","pos":[3095,3114]},{"content":"Name","pos":[3121,3125]},{"content":"Description","pos":[3126,3137]},{"content":"CComPtrBase::p","pos":[3176,3190]},{"content":"The pointer data member variable.","pos":[3209,3242]},{"content":"Remarks","pos":[3252,3259]},{"content":"This class provides the basis for other smart pointers which use COM memory management routines, such as <bpt id=\"p1\">[</bpt>CComQIPtr<ept id=\"p1\">](../../atl/reference/ccomqiptr-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComPtr<ept id=\"p2\">](../../atl/reference/ccomptr-class.md)</ept>.","pos":[3263,3472],"source":"This class provides the basis for other smart pointers which use COM memory management routines, such as [CComQIPtr](../../atl/reference/ccomqiptr-class.md) and [CComPtr](../../atl/reference/ccomptr-class.md)."},{"content":"The derived classes add their own constructors and operators, but rely on the methods provided by <ph id=\"ph1\">`CComPtrBase`</ph>.","pos":[3473,3585],"source":" The derived classes add their own constructors and operators, but rely on the methods provided by `CComPtrBase`."},{"content":"Requirements","pos":[3594,3606]},{"pos":[3610,3633],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcomcli.h","source":"**Header:** atlcomcli.h"},{"pos":[3679,3698],"content":"CComPtrBase::Advise"},{"pos":[3702,3807],"content":"Call this method to create a connection between the <ph id=\"ph1\">`CComPtrBase`</ph>'s connection point and a client's sink.","source":"Call this method to create a connection between the `CComPtrBase`'s connection point and a client's sink."},{"content":"Parameters","pos":[3912,3922]},{"content":"pUnk","pos":[3927,3931]},{"content":"A pointer to the client's <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept>.","pos":[3936,3975],"source":" A pointer to the client's **IUnknown**."},{"content":"The GUID of the connection point.","pos":[3991,4024]},{"content":"Typically, this is the same as the outgoing interface managed by the connection point.","pos":[4025,4111]},{"content":"A pointer to the cookie that uniquely identifies the connection.","pos":[4127,4191]},{"content":"Return Value","pos":[4201,4213]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[4217,4273]},{"content":"Remarks","pos":[4283,4290]},{"pos":[4294,4403],"content":"See <bpt id=\"p1\">[</bpt>AtlAdvise<ept id=\"p1\">](http://msdn.microsoft.com/library/625a2f03-6b7f-4761-be5d-d2871d1d3254)</ept> for more information.","source":"See [AtlAdvise](http://msdn.microsoft.com/library/625a2f03-6b7f-4761-be5d-d2871d1d3254) for more information."},{"pos":[4449,4468],"content":"CComPtrBase::Attach"},{"content":"Call this method to take ownership of an existing pointer.","pos":[4472,4530]},{"content":"Parameters","pos":[4581,4591]},{"content":"The <ph id=\"ph1\">`CComPtrBase`</ph> object will take ownership of this pointer.","pos":[4603,4664],"source":" The `CComPtrBase` object will take ownership of this pointer."},{"content":"Remarks","pos":[4674,4681]},{"content":"<bpt id=\"p1\">**</bpt>Attach<ept id=\"p1\">**</ept> calls <bpt id=\"p2\">[</bpt>CComPtrBase::Release<ept id=\"p2\">](#ccomptrbase__release)</ept> on the existing <bpt id=\"p3\">[</bpt>CComPtrBase::p<ept id=\"p3\">](#ccomptrbase__p)</ept> member variable and then assigns <ph id=\"ph1\">`p2`</ph> to <ph id=\"ph2\">`CComPtrBase::p`</ph>.","pos":[4685,4856],"source":"**Attach** calls [CComPtrBase::Release](#ccomptrbase__release) on the existing [CComPtrBase::p](#ccomptrbase__p) member variable and then assigns `p2` to `CComPtrBase::p`."},{"content":"When a <ph id=\"ph1\">`CComPtrBase`</ph> object takes ownership of a pointer, it will automatically call <ph id=\"ph2\">`Release`</ph> on the pointer which will delete the pointer and any allocated data if the reference count on the object goes to 0.","pos":[4857,5067],"source":" When a `CComPtrBase` object takes ownership of a pointer, it will automatically call `Release` on the pointer which will delete the pointer and any allocated data if the reference count on the object goes to 0."},{"pos":[5123,5148],"content":"CComPtrBase::~CComPtrBase"},{"content":"The destructor.","pos":[5152,5167]},{"content":"Remarks","pos":[5214,5221]},{"pos":[5225,5276],"content":"Releases the interface pointed to by <ph id=\"ph1\">`CComPtrBase`</ph>.","source":"Releases the interface pointed to by `CComPtrBase`."},{"pos":[5332,5361],"content":"CComPtrBase::CoCreateInstance"},{"content":"Call this method to create an object of the class associated with a specified Class ID or Program ID.","pos":[5365,5466]},{"content":"Parameters","pos":[5732,5742]},{"content":"Pointer to a ProgID, used to recover the CLSID.","pos":[5760,5807]},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, indicates that the object is not being created as part of an aggregate.","pos":[5829,5913],"source":" If **NULL**, indicates that the object is not being created as part of an aggregate."},{"content":"If non- <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, is a pointer to the aggregate object's <bpt id=\"p2\">**</bpt>IUnknown<ept id=\"p2\">**</ept> interface (the controlling <bpt id=\"p3\">**</bpt>IUnknown<ept id=\"p3\">**</ept>).","pos":[5914,6025],"source":" If non- **NULL**, is a pointer to the aggregate object's **IUnknown** interface (the controlling **IUnknown**)."},{"content":"Context in which the code that manages the newly created object will run.","pos":[6050,6123]},{"content":"CLSID associated with the data and code that will be used to create the object.","pos":[6142,6221]},{"content":"Return Value","pos":[6231,6243]},{"content":"Returns S_OK on success, or REGDB_E_CLASSNOTREG, CLASS_E_NOAGGREGATION, CO_E_CLASSSTRING or E_NOINTERFACE on failure.","pos":[6247,6364]},{"content":"See <bpt id=\"p1\">[</bpt>CoCreateClassInstance<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686615)</ept> and <bpt id=\"p2\">[</bpt>CLSIDFromProgID<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms688386)</ept> for a description of these errors.","pos":[6365,6569],"source":" See [CoCreateClassInstance](http://msdn.microsoft.com/library/windows/desktop/ms686615) and [CLSIDFromProgID](http://msdn.microsoft.com/library/windows/desktop/ms688386) for a description of these errors."},{"content":"Remarks","pos":[6579,6586]},{"content":"If the first form of the method is called, <bpt id=\"p1\">[</bpt>CLSIDFromProgID<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms688386)</ept> is used to recover the CLSID.","pos":[6590,6740],"source":"If the first form of the method is called, [CLSIDFromProgID](http://msdn.microsoft.com/library/windows/desktop/ms688386) is used to recover the CLSID."},{"content":"Both forms then call <bpt id=\"p1\">[</bpt>CoCreateClassInstance<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686615)</ept>.","pos":[6741,6846],"source":" Both forms then call [CoCreateClassInstance](http://msdn.microsoft.com/library/windows/desktop/ms686615)."},{"pos":[6853,6958],"content":"In debug builds, an assertion error will occur if <bpt id=\"p1\">[</bpt>CComPtrBase::p<ept id=\"p1\">](#ccomptrbase__p)</ept> is not equal to NULL.","source":"In debug builds, an assertion error will occur if [CComPtrBase::p](#ccomptrbase__p) is not equal to NULL."},{"pos":[7004,7023],"content":"CComPtrBase::CopyTo"},{"pos":[7027,7106],"content":"Call this method to copy the <ph id=\"ph1\">`CComPtrBase`</ph> pointer to another pointer variable.","source":"Call this method to copy the `CComPtrBase` pointer to another pointer variable."},{"content":"Parameters","pos":[7162,7172]},{"content":"ppT","pos":[7177,7180]},{"content":"Address of the variable which will receive the <ph id=\"ph1\">`CComPtrBase`</ph> pointer.","pos":[7185,7254],"source":" Address of the variable which will receive the `CComPtrBase` pointer."},{"content":"Return Value","pos":[7264,7276]},{"content":"Returns S_OK on success, E_POINTER on failure.","pos":[7280,7326]},{"content":"Remarks","pos":[7336,7343]},{"content":"Copies the <ph id=\"ph1\">`CComPtrBase`</ph> pointer to <bpt id=\"p1\">*</bpt>ppT<ept id=\"p1\">*</ept>.","pos":[7347,7389],"source":"Copies the `CComPtrBase` pointer to *ppT*."},{"content":"The reference count on the <bpt id=\"p1\">[</bpt>CComPtrBase::p<ept id=\"p1\">](#ccomptrbase__p)</ept> member variable is incremented.","pos":[7390,7482],"source":" The reference count on the [CComPtrBase::p](#ccomptrbase__p) member variable is incremented."},{"content":"An error HRESULT will be returned if <bpt id=\"p1\">*</bpt>ppT<ept id=\"p1\">*</ept> is equal to NULL.","pos":[7489,7549],"source":"An error HRESULT will be returned if *ppT* is equal to NULL."},{"content":"In debug builds, an assertion error will occur if <bpt id=\"p1\">*</bpt>ppT<ept id=\"p1\">*</ept> is equal to NULL.","pos":[7550,7623],"source":" In debug builds, an assertion error will occur if *ppT* is equal to NULL."},{"pos":[7669,7688],"content":"CComPtrBase::Detach"},{"content":"Call this method to release ownership of a pointer.","pos":[7692,7743]},{"content":"Return Value","pos":[7787,7799]},{"content":"Returns a copy of the pointer.","pos":[7803,7833]},{"content":"Remarks","pos":[7843,7850]},{"pos":[7854,7994],"content":"Releases ownership of a pointer, sets the <bpt id=\"p1\">[</bpt>CComPtrBase::p<ept id=\"p1\">](#ccomptrbase__p)</ept> data member variable to NULL, and returns a copy of the pointer.","source":"Releases ownership of a pointer, sets the [CComPtrBase::p](#ccomptrbase__p) data member variable to NULL, and returns a copy of the pointer."},{"pos":[8047,8073],"content":"CComPtrBase::IsEqualObject"},{"pos":[8077,8200],"content":"Call this method to check if the specified <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> points to the same object associated with the <ph id=\"ph1\">`CComPtrBase`</ph> object.","source":"Call this method to check if the specified **IUnknown** points to the same object associated with the `CComPtrBase` object."},{"content":"Parameters","pos":[8269,8279]},{"content":"The <bpt id=\"p1\">**</bpt>IUnknown <ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> to compare.","pos":[8295,8326],"source":" The **IUnknown \\*** to compare."},{"content":"Return Value","pos":[8336,8348]},{"content":"Returns true if the objects are identical, false otherwise.","pos":[8352,8411]},{"pos":[8463,8486],"content":"CComPtrBase::operator !"},{"content":"The NOT operator.","pos":[8490,8507]},{"content":"Return Value","pos":[8562,8574]},{"pos":[8578,8654],"content":"Returns true if the <ph id=\"ph1\">`CComHeapPtr`</ph> pointer is equal to NULL, false otherwise.","source":"Returns true if the `CComHeapPtr` pointer is equal to NULL, false otherwise."},{"pos":[8706,8727],"content":"CComPtrBase::operator"},{"content":"The &amp; operator.","pos":[8737,8752],"source":"The & operator."},{"content":"Return Value","pos":[8800,8812]},{"pos":[8816,8889],"content":"Returns the address of the object pointed to by the <ph id=\"ph1\">`CComPtrBase`</ph> object.","source":"Returns the address of the object pointed to by the `CComPtrBase` object."},{"pos":[8942,8965],"content":"CComPtrBase::operator *"},{"content":"The * operator.","pos":[8969,8984]},{"content":"Return Value","pos":[9037,9049]},{"pos":[9053,9181],"content":"Returns the value of <bpt id=\"p1\">[</bpt>CComPtrBase::p<ept id=\"p1\">](#ccomptrbase__p)</ept>; that is, a pointer to the object referenced by the <ph id=\"ph1\">`CComPtrBase`</ph> object.","source":"Returns the value of [CComPtrBase::p](#ccomptrbase__p); that is, a pointer to the object referenced by the `CComPtrBase` object."},{"pos":[9188,9293],"content":"If debug builds, an assertion error will occur if <bpt id=\"p1\">[</bpt>CComPtrBase::p<ept id=\"p1\">](#ccomptrbase__p)</ept> is not equal to NULL.","source":"If debug builds, an assertion error will occur if [CComPtrBase::p](#ccomptrbase__p) is not equal to NULL."},{"pos":[9347,9371],"content":"CComPtrBase::operator =="},{"content":"The equality operator.","pos":[9375,9397]},{"content":"Parameters","pos":[9459,9469]},{"content":"pT","pos":[9474,9476]},{"content":"A pointer to an object.","pos":[9481,9504]},{"content":"Return Value","pos":[9514,9526]},{"pos":[9530,9611],"content":"Returns true if <ph id=\"ph1\">`CComPtrBase`</ph> and <bpt id=\"p1\">*</bpt>pT<ept id=\"p1\">*</ept> point to the same object, false otherwise.","source":"Returns true if `CComPtrBase` and *pT* point to the same object, false otherwise."},{"pos":[9663,9686],"content":"CComPtrBase::operator -"},{"content":"The pointer-to-member operator.","pos":[9695,9726]},{"content":"Return Value","pos":[9807,9819]},{"pos":[9823,9903],"content":"Returns the value of the <bpt id=\"p1\">[</bpt>CComPtrBase::p<ept id=\"p1\">](#ccomptrbase__p)</ept> data member variable.","source":"Returns the value of the [CComPtrBase::p](#ccomptrbase__p) data member variable."},{"content":"Remarks","pos":[9913,9920]},{"content":"Use this operator to call a method in a class pointed to by the <ph id=\"ph1\">`CComPtrBase`</ph> object.","pos":[9924,10009],"source":"Use this operator to call a method in a class pointed to by the `CComPtrBase` object."},{"content":"In debug builds, an assertion failure will occur if the <ph id=\"ph1\">`CComPtrBase`</ph> data member points to NULL.","pos":[10010,10107],"source":" In debug builds, an assertion failure will occur if the `CComPtrBase` data member points to NULL."},{"pos":[10158,10179],"content":"CComPtrBase::operator"},{"content":"The less-than operator.","pos":[10188,10211]},{"content":"Parameters","pos":[10271,10281]},{"content":"pT","pos":[10286,10288]},{"content":"A pointer to an object.","pos":[10293,10316]},{"content":"Return Value","pos":[10326,10338]},{"content":"Returns true if the pointer managed by current object is less than the pointer to which it is being compared.","pos":[10342,10451]},{"pos":[10506,10530],"content":"CComPtrBase::operator T*"},{"content":"The cast operator.","pos":[10534,10552]},{"content":"```operator T*() const throw();","pos":[10558,10589]},{"content":"T* p;","pos":[10788,10793]},{"pos":[11026,11091],"content":"template <ph id=\"ph1\">&lt;class Q&gt;</ph> HRESULT QueryInterface(Q ** pp) const throw();","source":"template <class Q> HRESULT QueryInterface(Q\n** pp) const throw();"},{"content":"void Release() throw();","pos":[11677,11700]},{"content":"HRESULT SetSite(IUnknown* punkParent) throw();","pos":[11988,12034]}],"content":"---\ntitle: \"CComPtrBase Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CComPtrBase\"\n  - \"ATL::CComPtrBase<T>\"\n  - \"ATL.CComPtrBase<T>\"\n  - \"ATL::CComPtrBase\"\n  - \"CComPtrBase\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CComPtrBase class\"\nms.assetid: 6dbe9543-dee8-4a97-b02f-dd3a25f4a1a0\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComPtrBase Class\nThis class provides a basis for smart pointer classes using COM-based memory routines.  \n  \n## Syntax  \n  \n```\ntemplate <class T> class CComPtrBase\n```  \n  \n#### Parameters  \n `T`  \n The object type to be referenced by the smart pointer.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComPtrBase::~CComPtrBase](#ccomptrbase___dtorccomptrbase)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComPtrBase::Advise](#ccomptrbase__advise)|Call this method to create a connection between the `CComPtrBase`'s connection point and a client's sink.|  \n|[CComPtrBase::Attach](#ccomptrbase__attach)|Call this method to take ownership of an existing pointer.|  \n|[CComPtrBase::CoCreateInstance](#ccomptrbase__cocreateinstance)|Call this method to create an object of the class associated with a specified Class ID or Program ID.|  \n|[CComPtrBase::CopyTo](#ccomptrbase__copyto)|Call this method to copy the `CComPtrBase` pointer to another pointer variable.|  \n|[CComPtrBase::Detach](#ccomptrbase__detach)|Call this method to release ownership of a pointer.|  \n|[CComPtrBase::IsEqualObject](#ccomptrbase__isequalobject)|Call this method to check if the specified **IUnknown** points to the same object associated with the `CComPtrBase` object.|  \n|[CComPtrBase::QueryInterface](#ccomptrbase__queryinterface)|Call this method to return a pointer to a specified interface.|  \n|[CComPtrBase::Release](#ccomptrbase__release)|Call this method to release the interface.|  \n|[CComPtrBase::SetSite](#ccomptrbase__setsite)|Call this method to set the site of the `CComPtrBase` object to the **IUnknown** of the parent object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComPtrBase::operator T*](#ccomptrbase__operator_t_star)|The cast operator.|  \n|[CComPtrBase::operator !](#ccomptrbase__operator_not)|The NOT operator.|  \n|[CComPtrBase::operator &](#ccomptrbase__operator_amp)|The & operator.|  \n|[CComPtrBase::operator *](#ccomptrbase__operator_star)|The * operator.|  \n|[CComPtrBase::operator <](#ccomptrbase__operator lt)|The less-than operator.|  \n|[CComPtrBase::operator ==](#ccomptrbase__operator_eq_eq)|The equality operator.|  \n|[CComPtrBase::operator ->](#ccomptrbase__operator_ptr)|The pointer-to-members operator.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComPtrBase::p](#ccomptrbase__p)|The pointer data member variable.|  \n  \n## Remarks  \n This class provides the basis for other smart pointers which use COM memory management routines, such as [CComQIPtr](../../atl/reference/ccomqiptr-class.md) and [CComPtr](../../atl/reference/ccomptr-class.md). The derived classes add their own constructors and operators, but rely on the methods provided by `CComPtrBase`.  \n  \n## Requirements  \n **Header:** atlcomcli.h  \n  \n##  <a name=\"ccomptrbase__advise\"></a>  CComPtrBase::Advise  \n Call this method to create a connection between the `CComPtrBase`'s connection point and a client's sink.  \n  \n```\nHRESULT Advise(\n    IUnknown* pUnk,\n    const IID& iid,\n    LPDWORD pdw) throw();\n```  \n  \n### Parameters  \n *pUnk*  \n A pointer to the client's **IUnknown**.  \n  \n `iid`  \n The GUID of the connection point. Typically, this is the same as the outgoing interface managed by the connection point.  \n  \n `pdw`  \n A pointer to the cookie that uniquely identifies the connection.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n See [AtlAdvise](http://msdn.microsoft.com/library/625a2f03-6b7f-4761-be5d-d2871d1d3254) for more information.  \n  \n##  <a name=\"ccomptrbase__attach\"></a>  CComPtrBase::Attach  \n Call this method to take ownership of an existing pointer.  \n  \n```\nvoid Attach(T* p2) throw();\n```  \n  \n### Parameters  \n `p2`  \n The `CComPtrBase` object will take ownership of this pointer.  \n  \n### Remarks  \n **Attach** calls [CComPtrBase::Release](#ccomptrbase__release) on the existing [CComPtrBase::p](#ccomptrbase__p) member variable and then assigns `p2` to `CComPtrBase::p`. When a `CComPtrBase` object takes ownership of a pointer, it will automatically call `Release` on the pointer which will delete the pointer and any allocated data if the reference count on the object goes to 0.  \n  \n##  <a name=\"ccomptrbase___dtorccomptrbase\"></a>  CComPtrBase::~CComPtrBase  \n The destructor.  \n  \n```\n~CComPtrBase() throw();\n```  \n  \n### Remarks  \n Releases the interface pointed to by `CComPtrBase`.  \n  \n##  <a name=\"ccomptrbase__cocreateinstance\"></a>  CComPtrBase::CoCreateInstance  \n Call this method to create an object of the class associated with a specified Class ID or Program ID.  \n  \n```\nHRESULT CoCreateInstance(LPCOLESTR szProgID,\n    LPUNKNOWN pUnkOuter = NULL,\n    DWORD dwClsContext = CLSCTX_ALL) throw();\nHRESULT CoCreateInstance(REFCLSID rclsid,\n    LPUNKNOWN pUnkOuter = NULL,\n    DWORD dwClsContext = CLSCTX_ALL) throw();\n```  \n  \n### Parameters  \n `szProgID`  \n Pointer to a ProgID, used to recover the CLSID.  \n  \n `pUnkOuter`  \n If **NULL**, indicates that the object is not being created as part of an aggregate. If non- **NULL**, is a pointer to the aggregate object's **IUnknown** interface (the controlling **IUnknown**).  \n  \n `dwClsContext`  \n Context in which the code that manages the newly created object will run.  \n  \n `rclsid`  \n CLSID associated with the data and code that will be used to create the object.  \n  \n### Return Value  \n Returns S_OK on success, or REGDB_E_CLASSNOTREG, CLASS_E_NOAGGREGATION, CO_E_CLASSSTRING or E_NOINTERFACE on failure. See [CoCreateClassInstance](http://msdn.microsoft.com/library/windows/desktop/ms686615) and [CLSIDFromProgID](http://msdn.microsoft.com/library/windows/desktop/ms688386) for a description of these errors.  \n  \n### Remarks  \n If the first form of the method is called, [CLSIDFromProgID](http://msdn.microsoft.com/library/windows/desktop/ms688386) is used to recover the CLSID. Both forms then call [CoCreateClassInstance](http://msdn.microsoft.com/library/windows/desktop/ms686615).  \n  \n In debug builds, an assertion error will occur if [CComPtrBase::p](#ccomptrbase__p) is not equal to NULL.  \n  \n##  <a name=\"ccomptrbase__copyto\"></a>  CComPtrBase::CopyTo  \n Call this method to copy the `CComPtrBase` pointer to another pointer variable.  \n  \n```\nHRESULT CopyTo(T** ppT) throw();\n```  \n  \n### Parameters  \n *ppT*  \n Address of the variable which will receive the `CComPtrBase` pointer.  \n  \n### Return Value  \n Returns S_OK on success, E_POINTER on failure.  \n  \n### Remarks  \n Copies the `CComPtrBase` pointer to *ppT*. The reference count on the [CComPtrBase::p](#ccomptrbase__p) member variable is incremented.  \n  \n An error HRESULT will be returned if *ppT* is equal to NULL. In debug builds, an assertion error will occur if *ppT* is equal to NULL.  \n  \n##  <a name=\"ccomptrbase__detach\"></a>  CComPtrBase::Detach  \n Call this method to release ownership of a pointer.  \n  \n```\nT* Detach() throw();\n```  \n  \n### Return Value  \n Returns a copy of the pointer.  \n  \n### Remarks  \n Releases ownership of a pointer, sets the [CComPtrBase::p](#ccomptrbase__p) data member variable to NULL, and returns a copy of the pointer.  \n  \n##  <a name=\"ccomptrbase__isequalobject\"></a>  CComPtrBase::IsEqualObject  \n Call this method to check if the specified **IUnknown** points to the same object associated with the `CComPtrBase` object.  \n  \n```\nbool IsEqualObject(IUnknown* pOther) throw();\n```  \n  \n### Parameters  \n `pOther`  \n The **IUnknown \\*** to compare.  \n  \n### Return Value  \n Returns true if the objects are identical, false otherwise.  \n  \n##  <a name=\"ccomptrbase__operator_not\"></a>  CComPtrBase::operator !  \n The NOT operator.  \n  \n```\nbool operator!() const throw();\n```  \n  \n### Return Value  \n Returns true if the `CComHeapPtr` pointer is equal to NULL, false otherwise.  \n  \n##  <a name=\"ccomptrbase__operator_amp\"></a>  CComPtrBase::operator &amp;  \n The & operator.  \n  \n```\nT** operator&() throw();\n```  \n  \n### Return Value  \n Returns the address of the object pointed to by the `CComPtrBase` object.  \n  \n##  <a name=\"ccomptrbase__operator_star\"></a>  CComPtrBase::operator *  \n The * operator.  \n  \n```\nT& operator*() const throw();\n```  \n  \n### Return Value  \n Returns the value of [CComPtrBase::p](#ccomptrbase__p); that is, a pointer to the object referenced by the `CComPtrBase` object.  \n  \n If debug builds, an assertion error will occur if [CComPtrBase::p](#ccomptrbase__p) is not equal to NULL.  \n  \n##  <a name=\"ccomptrbase__operator_eq_eq\"></a>  CComPtrBase::operator ==  \n The equality operator.  \n  \n```\nbool operator== (T* pT) const throw();\n```  \n  \n### Parameters  \n *pT*  \n A pointer to an object.  \n  \n### Return Value  \n Returns true if `CComPtrBase` and *pT* point to the same object, false otherwise.  \n  \n##  <a name=\"ccomptrbase__operator_ptr\"></a>  CComPtrBase::operator -&gt;  \n\n The pointer-to-member operator.  \n  \n```\n_NoAddRefReleaseOnCComPtr<T>* operator->() const throw();\n```  \n  \n### Return Value  \n Returns the value of the [CComPtrBase::p](#ccomptrbase__p) data member variable.  \n  \n### Remarks  \n Use this operator to call a method in a class pointed to by the `CComPtrBase` object. In debug builds, an assertion failure will occur if the `CComPtrBase` data member points to NULL.  \n  \n##  <a name=\"ccomptrbase__operator_lt\"></a>  CComPtrBase::operator &lt;  \n The less-than operator.  \n  \n```\nbool operator<(T* pT) const throw();\n```  \n  \n### Parameters  \n *pT*  \n A pointer to an object.  \n  \n### Return Value  \n Returns true if the pointer managed by current object is less than the pointer to which it is being compared.  \n  \n##  <a name=\"ccomptrbase__operator_t_star\"></a>  CComPtrBase::operator T*  \n The cast operator.  \n  \n```operator T*() const throw();\n```  \n  \n### Remarks  \n Returns a pointer to the object data type defined in the class template.  \n  \n##  <a name=\"ccomptrbase__p\"></a>  CComPtrBase::p  \n The pointer data member variable.  \n  \n```\nT* p;\n```  \n  \n### Remarks  \n This member variable holds the pointer information.  \n  \n##  <a name=\"ccomptrbase__queryinterface\"></a>  CComPtrBase::QueryInterface  \n Call this method to return a pointer to a specified interface.  \n  \n```\ntemplate <class Q> HRESULT QueryInterface(Q\n** pp) const throw();\n```  \n  \n### Parameters  \n `Q`  \n The object type whose interface pointer is required.  \n  \n `pp`  \n Address of output variable that receives the requested interface pointer.  \n  \n### Return Value  \n Returns S_OK on success, or E_NOINTERFACE on failure.  \n  \n### Remarks  \n This method calls [IUnknown::QueryInterface](http://msdn.microsoft.com/library/windows/desktop/ms682521).  \n  \n In debug builds, an assertion error will occur if *pp* is not equal to NULL.  \n  \n##  <a name=\"ccomptrbase__release\"></a>  CComPtrBase::Release  \n Call this method to release the interface.  \n  \n```\nvoid Release() throw();\n```  \n  \n### Remarks  \n The interface is released, and [CComPtrBase::p](#ccomptrbase__p) is set to NULL.  \n  \n##  <a name=\"ccomptrbase__setsite\"></a>  CComPtrBase::SetSite  \n Call this method to set the site of the `CComPtrBase` object to the **IUnknown** of the parent object.  \n  \n```\nHRESULT SetSite(IUnknown* punkParent) throw();\n```  \n  \n### Parameters  \n `punkParent`  \n A pointer to the **IUnknown** interface of the parent.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n This method calls [AtlSetChildSite](http://msdn.microsoft.com/library/2a8ece19-6bfd-4e89-9d1d-e5a78f95e2df).  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)\n"}