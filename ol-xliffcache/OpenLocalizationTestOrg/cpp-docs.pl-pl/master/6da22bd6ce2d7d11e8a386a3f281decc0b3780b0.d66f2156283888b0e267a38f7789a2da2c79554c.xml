{"nodes":[{"pos":[12,56],"content":"_com_ptr_t::GetActiveObject | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_com_ptr_t::GetActiveObject | Microsoft Docs","pos":[0,44]}]},{"content":"_com_ptr_t::GetActiveObject","pos":[701,728]},{"content":"Microsoft Specific","pos":[731,749]},{"pos":[758,836],"content":"Attaches to an existing instance of an object given a <bpt id=\"p1\">**</bpt>CLSID<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>ProgID<ept id=\"p2\">**</ept>.","source":"Attaches to an existing instance of an object given a **CLSID** or **ProgID**."},{"content":"Syntax","pos":[845,851]},{"content":"Parameters","pos":[1087,1097]},{"content":"The <bpt id=\"p1\">**</bpt>CLSID<ept id=\"p1\">**</ept> of an object.","pos":[1113,1140],"source":" The **CLSID** of an object."},{"content":"A Unicode string that holds either a <bpt id=\"p1\">**</bpt>CLSID<ept id=\"p1\">**</ept> (starting with \"<bpt id=\"p2\">**</bpt>{<ept id=\"p2\">**</ept>\") or a <bpt id=\"p3\">**</bpt>ProgID<ept id=\"p3\">**</ept>.","pos":[1164,1251],"source":" A Unicode string that holds either a **CLSID** (starting with \"**{**\") or a **ProgID**."},{"content":"A multibyte string, using the ANSI code page, that holds either a <bpt id=\"p1\">**</bpt>CLSID<ept id=\"p1\">**</ept> (starting with \"<bpt id=\"p2\">**</bpt>{<ept id=\"p2\">**</ept>\") or a <bpt id=\"p3\">**</bpt>ProgID<ept id=\"p3\">**</ept>.","pos":[1276,1392],"source":" A multibyte string, using the ANSI code page, that holds either a **CLSID** (starting with \"**{**\") or a **ProgID**."},{"content":"Remarks","pos":[1401,1408]},{"content":"These member functions call <ph id=\"ph1\">`GetActiveObject`</ph> to retrieve a pointer to a running object that has been registered with OLE and then queries for this smart pointer's interface type.","pos":[1412,1591],"source":"These member functions call `GetActiveObject` to retrieve a pointer to a running object that has been registered with OLE and then queries for this smart pointer's interface type."},{"content":"The resulting pointer is then encapsulated within this <ph id=\"ph1\">`_com_ptr_t`</ph> object.","pos":[1592,1667],"source":" The resulting pointer is then encapsulated within this `_com_ptr_t` object."},{"content":"<bpt id=\"p1\">**</bpt>Release<ept id=\"p1\">**</ept> is called to decrement the reference count for the previously encapsulated pointer.","pos":[1668,1763],"source":"**Release** is called to decrement the reference count for the previously encapsulated pointer."},{"content":"This routine returns the <ph id=\"ph1\">`HRESULT`</ph> to indicate success or failure.","pos":[1764,1830],"source":" This routine returns the `HRESULT` to indicate success or failure."},{"pos":[1840,1942],"content":"<bpt id=\"p1\">**</bpt>GetActiveObject(<ept id=\"p1\">**</ept>  <ph id=\"ph1\">`rclsid`</ph>  <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Attaches to an existing instance of an object given a <bpt id=\"p3\">**</bpt>CLSID<ept id=\"p3\">**</ept>.","source":"**GetActiveObject(**  `rclsid`  **)** Attaches to an existing instance of an object given a **CLSID**."},{"pos":[1952,2134],"content":"<bpt id=\"p1\">**</bpt>GetActiveObject(<ept id=\"p1\">**</ept>  <ph id=\"ph1\">`clsidString`</ph>  <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Attaches to an existing instance of an object given a Unicode string that holds either a <bpt id=\"p3\">**</bpt>CLSID<ept id=\"p3\">**</ept> (starting with \"<bpt id=\"p4\">**</bpt>{<ept id=\"p4\">**</ept>\") or a <bpt id=\"p5\">**</bpt>ProgID<ept id=\"p5\">**</ept>.","source":"**GetActiveObject(**  `clsidString`  **)** Attaches to an existing instance of an object given a Unicode string that holds either a **CLSID** (starting with \"**{**\") or a **ProgID**."},{"content":"<bpt id=\"p1\">**</bpt>GetActiveObject(<ept id=\"p1\">**</ept>  <ph id=\"ph1\">`clsidStringA`</ph>  <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Attaches to an existing instance of an object given a multibyte character string that holds either a <bpt id=\"p3\">**</bpt>CLSID<ept id=\"p3\">**</ept> (starting with \"<bpt id=\"p4\">**</bpt>{<ept id=\"p4\">**</ept>\") or a <bpt id=\"p5\">**</bpt>ProgID<ept id=\"p5\">**</ept>.","pos":[2144,2339],"source":"**GetActiveObject(**  `clsidStringA`  **)** Attaches to an existing instance of an object given a multibyte character string that holds either a **CLSID** (starting with \"**{**\") or a **ProgID**."},{"content":"Calls <bpt id=\"p1\">[</bpt>MultiByteToWideChar<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd319072)</ept>, which assumes that the string is in the ANSI code page rather than an OEM code page.","pos":[2340,2513],"source":" Calls [MultiByteToWideChar](http://msdn.microsoft.com/library/windows/desktop/dd319072), which assumes that the string is in the ANSI code page rather than an OEM code page."},{"content":"END Microsoft Specific","pos":[2522,2544]},{"content":"See Also","pos":[2555,2563]},{"content":"_com_ptr_t Class","pos":[2568,2584]}],"content":"---\ntitle: \"_com_ptr_t::GetActiveObject | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"_com_ptr_t.GetActiveObject\"\n  - \"_com_ptr_t::GetActiveObject\"\n  - \"GetActiveObject\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"GetActiveObject method\"\nms.assetid: 2fa94853-0410-4620-91f2-136dae923f9f\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _com_ptr_t::GetActiveObject\n**Microsoft Specific**  \n  \n Attaches to an existing instance of an object given a **CLSID** or **ProgID**.  \n  \n## Syntax  \n  \n```  \n  \n      HRESULT GetActiveObject(  \n   const CLSID& rclsid   \n) throw( );  \nHRESULT GetActiveObject(  \n   LPCWSTR clsidString   \n) throw( );  \nHRESULT GetActiveObject(  \n   LPCSTR clsidStringA   \n) throw( );  \n```  \n  \n#### Parameters  \n `rclsid`  \n The **CLSID** of an object.  \n  \n `clsidString`  \n A Unicode string that holds either a **CLSID** (starting with \"**{**\") or a **ProgID**.  \n  \n `clsidStringA`  \n A multibyte string, using the ANSI code page, that holds either a **CLSID** (starting with \"**{**\") or a **ProgID**.  \n  \n## Remarks  \n These member functions call `GetActiveObject` to retrieve a pointer to a running object that has been registered with OLE and then queries for this smart pointer's interface type. The resulting pointer is then encapsulated within this `_com_ptr_t` object. **Release** is called to decrement the reference count for the previously encapsulated pointer. This routine returns the `HRESULT` to indicate success or failure.  \n  \n-   **GetActiveObject(**  `rclsid`  **)** Attaches to an existing instance of an object given a **CLSID**.  \n  \n-   **GetActiveObject(**  `clsidString`  **)** Attaches to an existing instance of an object given a Unicode string that holds either a **CLSID** (starting with \"**{**\") or a **ProgID**.  \n  \n-   **GetActiveObject(**  `clsidStringA`  **)** Attaches to an existing instance of an object given a multibyte character string that holds either a **CLSID** (starting with \"**{**\") or a **ProgID**. Calls [MultiByteToWideChar](http://msdn.microsoft.com/library/windows/desktop/dd319072), which assumes that the string is in the ANSI code page rather than an OEM code page.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [_com_ptr_t Class](../cpp/com-ptr-t-class.md)"}