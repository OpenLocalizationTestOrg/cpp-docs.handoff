<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ac52acf3ec13943d1b6c75e10257eac90f31c86</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdaoexception-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49322e0af5aac9a3abb0ebeb71d4bd1a1d6c4b5e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4b114b8b5b61244d4d62e686599b5941d61ca05</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDaoException Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDaoException Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents an exception condition arising from the MFC database classes based on data access objects (DAO).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CDaoException::CDaoException</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDaoException`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CDaoException::GetErrorCount</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Returns the number of errors in the database engine's Errors collection.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CDaoException::GetErrorInfo</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns error information about a particular error object in the Errors collection.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CDaoException::m_nAfxDaoError</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Contains an extended error code for any error in the MFC DAO classes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CDaoException::m_pErrorInfo</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CDaoErrorInfo<ept id="p1">](../../mfc/reference/cdaoerrorinfo-structure.md)</ept> object that contains information about one DAO error object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CDaoException::m_scode</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SCODE<ept id="p1">](#cdaoexception__m_scode)</ept> value associated with the error.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The class includes public data members you can use to determine the cause of the exception.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>objects are constructed and thrown by member functions of the DAO database classes.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The DAO database classes are distinct from the MFC database classes based on Open Database Connectivity (ODBC).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All DAO database class names have the "CDao" prefix.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can still access ODBC data sources with the DAO classes.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In general, the MFC classes based on DAO are more capable than the MFC classes based on ODBC; the DAO-based classes can access data, including through ODBC drivers, via their own database engine.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The DAO-based classes also support Data Definition Language (DDL) operations, such as adding tables via the classes, without having to call DAO directly.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For information on exceptions thrown by the ODBC classes, see <bpt id="p1">[</bpt>CDBException<ept id="p1">](../../mfc/reference/cdbexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can access exception objects within the scope of a <bpt id="p1">[</bpt>CATCH<ept id="p1">](../../mfc/reference/exception-processing.md#catch)</ept> expression.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can also throw <ph id="ph1">`CDaoException`</ph> objects from your own code with the <bpt id="p1">[</bpt>AfxThrowDaoException<ept id="p1">](../../mfc/reference/exception-processing.md#afxthrowdaoexception)</ept> global function.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In MFC, all DAO errors are expressed as exceptions, of type <ph id="ph1">`CDaoException`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you catch an exception of this type, you can use <ph id="ph1">`CDaoException`</ph> member functions to retrieve information from any DAO error objects stored in the database engine's Errors collection.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>As each error occurs, one or more error objects are placed in the Errors collection.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>(Normally the collection contains only one error object; if you are using an ODBC data source, you are more likely to get multiple error objects.) When another DAO operation generates an error, the Errors collection is cleared, and the new error object is placed in the Errors collection.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>DAO operations that do not generate an error have no effect on the Errors collection.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For DAO error codes, see the file DAOERR.H.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Trappable Data Access Errors" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information about exception handling in general, or about <ph id="ph1">`CDaoException`</ph> objects, see the articles <bpt id="p1">[</bpt>Exception Handling (MFC)<ept id="p1">](../../mfc/exception-handling-in-mfc.md)</ept> and <bpt id="p2">[</bpt>Exceptions: Database Exceptions<ept id="p2">](../../mfc/exceptions-database-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The second article contains example code that illustrates exception handling in DAO.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CException</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdao.h</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CDaoException::CDaoException</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDaoException`</ph> object.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Ordinarily, the framework creates exception objects when its code throws an exception.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You seldom need to construct an exception object explicitly.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you want to throw a <ph id="ph1">`CDaoException`</ph> from your own code, call the global function <bpt id="p1">[</bpt>AfxThrowDaoException<ept id="p1">](../../mfc/reference/exception-processing.md#afxthrowdaoexception)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>However, you might want to explicitly create an exception object if you are making direct calls to DAO via the DAO interface pointers that MFC classes encapsulate.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In that case, you might need to retrieve error information from DAO.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Suppose an error occurs in DAO when you call a DAO method via the DAODatabases interface to a workspace's Databases collection.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To retrieve the DAO error information</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Construct a <ph id="ph1">`CDaoException`</ph> object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Call the exception object's <bpt id="p1">[</bpt>GetErrorCount<ept id="p1">](#cdaoexception__geterrorcount)</ept> member function to determine how many error objects are in the database engine's Errors collection.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>(Normally only one, unless you are using an ODBC data source.)</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Call the exception object's <bpt id="p1">[</bpt>GetErrorInfo<ept id="p1">](#cdaoexception__geterrorinfo)</ept> member function to retrieve one specific error object at a time, by index in the collection, via the exception object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Think of the exception object as a proxy for one DAO error object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Examine the current <bpt id="p1">[</bpt>CDaoErrorInfo<ept id="p1">](../../mfc/reference/cdaoerrorinfo-structure.md)</ept> structure that <ph id="ph1">`GetErrorInfo`</ph> returns in the <bpt id="p2">[</bpt>m_pErrorInfo<ept id="p2">](#cdaoexception__m_perrorinfo)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Its members provide information on the DAO error.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In the case of an ODBC data source, repeat steps 3 and 4 as needed, for more error objects.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you constructed the exception object on the heap, delete it with the <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> operator when you finish.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information about handling errors in the MFC DAO classes, see the article <bpt id="p1">[</bpt>Exceptions: Database Exceptions<ept id="p1">](../../mfc/exceptions-database-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CDaoException::GetErrorCount</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the number of DAO error objects in the database engine's Errors collection.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The number of DAO error objects in the database engine's Errors collection.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This information is useful for looping through the Errors collection to retrieve each of the one or more DAO error objects in the collection.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To retrieve an error object by index or by DAO error number, call the <bpt id="p1">[</bpt>GetErrorInfo<ept id="p1">](#cdaoexception__geterrorinfo)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Normally there is only one error object in the Errors collection.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you are working with an ODBC data source, however, there could be more than one.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CDaoException::GetErrorInfo</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Returns error information about a particular error object in the Errors collection.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The index of the error information in the database engine's Errors collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain the following kinds of information about the exception:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Error code</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Source</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Help file</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Help context</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>stores the information in the exception object's <ph id="ph1">`m_pErrorInfo`</ph> data member.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For a brief description of the information returned, see <bpt id="p1">[</bpt>m_pErrorInfo<ept id="p1">](#cdaoexception__m_perrorinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If you catch an exception of type <ph id="ph1">`CDaoException`</ph> thrown by MFC, the <ph id="ph2">`m_pErrorInfo`</ph> member will already be filled in.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If you choose to call DAO directly, you must call the exception object's <ph id="ph1">`GetErrorInfo`</ph> member function yourself to fill <ph id="ph2">`m_pErrorInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For a more detailed description, see the <bpt id="p1">[</bpt>CDaoErrorInfo<ept id="p1">](../../mfc/reference/cdaoerrorinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For information about DAO exceptions, and example code, see the article <bpt id="p1">[</bpt>Exceptions: Database Exceptions<ept id="p1">](../../mfc/exceptions-database-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CDaoException::m_nAfxDaoError</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Contains an MFC extended error code.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This code is supplied in cases where a specific component of the MFC DAO classes has erred.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Possible values are:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NO_AFX_DAO_ERROR<ept id="p1">**</ept> The most recent operation did not result in an MFC extended error.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>However, the operation could have produced other errors from DAO or OLE, so you should check <bpt id="p1">[</bpt>m_pErrorInfo<ept id="p1">](#cdaoexception__m_perrorinfo)</ept> and possibly <bpt id="p2">[</bpt>m_scode<ept id="p2">](#cdaoexception__m_scode)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AFX_DAO_ERROR_ENGINE_INITIALIZATION<ept id="p1">**</ept> MFC could not initialize the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>OLE might have failed to initialize, or it might have been impossible to create an instance of the DAO database engine object.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>These problems usually suggest a bad installation of either DAO or OLE.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AFX_DAO_ERROR_DFX_BIND<ept id="p1">**</ept> An address used in a DAO record field exchange (DFX) function call does not exist or is invalid (the address was not used to bind data).</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You might have passed a bad address in a DFX call, or the address might have become invalid between DFX operations.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AFX_DAO_ERROR_OBJECT_NOT_OPEN<ept id="p1">**</ept> You attempted to open a recordset based on a querydef or a tabledef object that was not in an open state.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CDaoException::m_pErrorInfo</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Contains a pointer to a <ph id="ph1">`CDaoErrorInfo`</ph> structure that provides information on the DAO error object that you last retrieved by calling <bpt id="p1">[</bpt>GetErrorInfo<ept id="p1">](#cdaoexception__geterrorinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This object contains the following information:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>CDaoErrorInfo member</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Information</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>m_lErrorCode</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Error Code</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The DAO error code</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Source</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The name of the object or application that originally generated the error</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A descriptive string associated with the error</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Help File</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A path to a Windows Help file in which the user can get information about the problem</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>m_lHelpContext</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Help Context</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The context ID for a topic in the DAO Help file</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For full details about the information contained in the <ph id="ph1">`CDaoErrorInfo`</ph> object, see the <bpt id="p1">[</bpt>CDaoErrorInfo<ept id="p1">](../../mfc/reference/cdaoerrorinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CDaoException::m_scode</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Contains a value of type <ph id="ph1">`SCODE`</ph> that describes the error.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This is an OLE code.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>You will seldom need to use this value because, in almost all cases, more specific MFC or DAO error information is available in the other <ph id="ph1">`CDaoException`</ph> data members.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For information about <ph id="ph1">`SCODE`</ph>, see the topic <bpt id="p1">[</bpt>Structure of OLE Error Codes<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms690088)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SCODE`</ph> data type maps to the <ph id="ph2">`HRESULT`</ph> data type.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>CException Class</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CException Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>