{"nodes":[{"pos":[12,51],"content":"CMFCPopupMenuBar Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCPopupMenuBar Class | Microsoft Docs","pos":[0,39]}]},{"content":"CMFCPopupMenuBar Class","pos":[648,670]},{"content":"A menu bar embedded into a pop-up menu.","pos":[671,710]},{"content":"Syntax","pos":[719,725]},{"content":"Members","pos":[795,802]},{"content":"Public Methods","pos":[812,826]},{"content":"Name","pos":[833,837]},{"content":"Description","pos":[838,849]},{"content":"CMFCPopupMenuBar::AdjustSizeImmediate","pos":[888,925]},{"content":"Immediately recalculates the layout of a pane.","pos":[967,1013]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPane::AdjustSizeImmediate<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate)</ept>.)","pos":[1014,1118],"source":" (Overrides [CPane::AdjustSizeImmediate](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate).)"},{"content":"CMFCPopupMenuBar::BuildOrigItems","pos":[1124,1156]},{"content":"Loads popup menu items from a specified menu resource.","pos":[1193,1247]},{"content":"CMFCPopupMenuBar::CloseDelayedSubMenu","pos":[1253,1290]},{"content":"Closes a delayed popup menu button.","pos":[1332,1367]},{"content":"CMFCPopupMenuBar::ExportToMenu","pos":[1373,1403]},{"content":"Builds a menu from the popup-menu buttons.","pos":[1438,1480]},{"content":"CMFCPopupMenuBar::FindDestintationToolBar","pos":[1486,1527]},{"content":"Locates the toolbar where a specified point lies.","pos":[1573,1622]},{"content":"CMFCPopupMenuBar::GetCurrentMenuImageSize","pos":[1628,1669]},{"content":"Indicates the size of menu-button images.","pos":[1715,1756]},{"content":"CMFCPopupMenuBar::GetDefaultMenuId","pos":[1762,1796]},{"content":"Returns the identifier of the default menu item.","pos":[1835,1883]},{"content":"CMFCPopupMenuBar::GetLastCommandIndex","pos":[1889,1926]},{"content":"Gets the index of the most recently invoked menu command.","pos":[1968,2025]},{"content":"CMFCPopupMenuBar::GetOffset","pos":[2031,2058]},{"content":"Gets the row offset of the popup menu bar.","pos":[2090,2132]},{"content":"CMFCPopupMenuBar::ImportFromMenu","pos":[2138,2170]},{"content":"Imports popup menu buttons from a specified menu.","pos":[2207,2256]},{"content":"CMFCPopupMenuBar::IsDropDownListMode","pos":[2262,2298]},{"content":"Indicates whether the popup menu bar is in drop-down-list mode.","pos":[2339,2402]},{"content":"CMFCPopupMenuBar::IsPaletteMode","pos":[2408,2439]},{"content":"Indicates whether the popup menu bar is in palette mode.","pos":[2475,2531]},{"content":"CMFCPopupMenuBar::IsRibbonPanel","pos":[2537,2568]},{"pos":[2604,2667],"content":"Indicates whether this is a ribbon panel ( <ph id=\"ph1\">`FALSE`</ph> by default).","source":"Indicates whether this is a ribbon panel ( `FALSE` by default)."},{"content":"CMFCPopupMenuBar::IsRibbonPanelInRegularMode","pos":[2673,2717]},{"pos":[2766,2845],"content":"Indicates whether this is a ribbon panel in regular mode ( <ph id=\"ph1\">`FALSE`</ph> by default).","source":"Indicates whether this is a ribbon panel in regular mode ( `FALSE` by default)."},{"content":"CMFCPopupMenuBar::LoadFromHash","pos":[2851,2881]},{"content":"Loads an archived menu.","pos":[2916,2939]},{"content":"CMFCPopupMenuBar::RestoreDelayedSubMenu","pos":[2945,2984]},{"content":"Restores a delayed menu button for closing the popup menu bar.","pos":[3028,3090]},{"content":"CMFCPopupMenuBar::SetButtonStyle","pos":[3096,3128]},{"content":"Sets the style of the toolbar button at the given index.","pos":[3165,3221]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBar::SetButtonStyle<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setbuttonstyle)</ept>.)","pos":[3222,3334],"source":" (Overrides [CMFCToolBar::SetButtonStyle](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setbuttonstyle).)"},{"content":"CMFCPopupMenuBar::SetOffset","pos":[3340,3367]},{"content":"Sets the row offset of the popup menu bar.","pos":[3399,3441]},{"content":"CMFCPopupMenuBar::StartPopupMenuTimer","pos":[3447,3484]},{"content":"Starts the timer for a specified delayed popup menu button.","pos":[3526,3585]},{"content":"Data Members","pos":[3596,3608]},{"content":"Name","pos":[3615,3619]},{"content":"Description","pos":[3620,3631]},{"content":"CMFCPopupMenuBar::m_bDisableSideBarInXPMode","pos":[3670,3713]},{"content":"Specifies whether the gray sidebar will be displayed when the application has a Windows XP appearance.","pos":[3761,3863]},{"content":"Remarks","pos":[3873,3880]},{"content":"The <ph id=\"ph1\">`CMFCPopupMenuBar`</ph> is created at the same time as a <bpt id=\"p1\">[</bpt>CMFCPopupMenu Class<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> and embedded inside it.","pos":[3884,4029],"source":"The `CMFCPopupMenuBar` is created at the same time as a [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) and embedded inside it."},{"content":"The <ph id=\"ph1\">`CMFCPopupMenuBar`</ph> covers the entire client area of the <ph id=\"ph2\">`CMFCPopupMenu`</ph> object.","pos":[4030,4113],"source":" The `CMFCPopupMenuBar` covers the entire client area of the `CMFCPopupMenu` object."},{"content":"It supports keyboard and mouse input.","pos":[4114,4151]},{"content":"It also communicates that input to the <ph id=\"ph1\">`CMFCPopupMenu`</ph> and to the top-level frame window.","pos":[4152,4241],"source":" It also communicates that input to the `CMFCPopupMenu` and to the top-level frame window."},{"content":"Example","pos":[4250,4257]},{"content":"The following example demonstrates how to initialize a <ph id=\"ph1\">`CMFCPopupMenuBar`</ph> object from a <ph id=\"ph2\">`CMFCPopupMenu`</ph> object.","pos":[4261,4372],"source":"The following example demonstrates how to initialize a `CMFCPopupMenuBar` object from a `CMFCPopupMenu` object."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Draw Client sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[4373,4456],"source":" This code snippet is part of the [Draw Client sample](../../visual-cpp-samples.md)."},{"pos":[4474,4494],"content":"NVC_MFC_DrawClient#7"},{"content":"Inheritance Hierarchy","pos":[4571,4592]},{"content":"CObject","pos":[4597,4604]},{"content":"CCmdTarget","pos":[4651,4661]},{"content":"CWnd","pos":[4711,4715]},{"content":"CBasePane","pos":[4759,4768]},{"content":"CPane","pos":[4817,4822]},{"content":"CMFCBaseToolBar","pos":[4867,4882]},{"content":"CMFCToolBar","pos":[4937,4948]},{"content":"CMFCPopupMenuBar","pos":[4999,5015]},{"content":"Requirements","pos":[5072,5084]},{"pos":[5088,5117],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxpopupmenubar.h","source":"**Header:** afxpopupmenubar.h"},{"pos":[5181,5218],"content":"CMFCPopupMenuBar::AdjustSizeImmediate"},{"content":"Immediately recalculates the layout of the popup menu bar pane.","pos":[5222,5285]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPane::AdjustSizeImmediate<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate)</ept>.","pos":[5286,5389],"source":" (Overrides [CPane::AdjustSizeImmediate](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate)."},{"content":"Parameters","pos":[5468,5478]},{"content":"[in]","pos":[5482,5486]},{"content":"to automatically recalculate the layout of the popup menu bar pane; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[5513,5600],"source":" to automatically recalculate the layout of the popup menu bar pane; otherwise, `FALSE`."},{"content":"Remarks","pos":[5610,5617]},{"pos":[5676,5708],"content":"CMFCPopupMenuBar::BuildOrigItems"},{"content":"Loads popup menu items from a specified menu resource.","pos":[5712,5766]},{"content":"Parameters","pos":[5830,5840]},{"content":"[in]","pos":[5844,5848]},{"content":"Specifies the menu ID of the menu resource to load.","pos":[5866,5917]},{"content":"Return Value","pos":[5927,5939]},{"pos":[5943,5990],"content":"Returns <ph id=\"ph1\">`TRUE`</ph> if successful or <ph id=\"ph2\">`FALSE`</ph> if not.","source":"Returns `TRUE` if successful or `FALSE` if not."},{"content":"Remarks","pos":[6000,6007]},{"pos":[6071,6108],"content":"CMFCPopupMenuBar::CloseDelayedSubMenu"},{"content":"Closes a popup menu button that has been delayed.","pos":[6112,6161]},{"content":"Remarks","pos":[6222,6229]},{"pos":[6286,6316],"content":"CMFCPopupMenuBar::ExportToMenu"},{"content":"Builds a menu from the popup menu buttons.","pos":[6320,6362]},{"content":"Return Value","pos":[6426,6438]},{"content":"Returns a handle to the new menu.","pos":[6442,6475]},{"content":"Remarks","pos":[6485,6492]},{"pos":[6560,6601],"content":"CMFCPopupMenuBar::FindDestintationToolBar"},{"content":"Locates the toolbar where a specified point lies.","pos":[6605,6654]},{"content":"Parameters","pos":[6731,6741]},{"content":"[in]","pos":[6745,6749]},{"content":"A point on the screen.","pos":[6761,6783]},{"content":"Return Value","pos":[6793,6805]},{"pos":[6809,6898],"content":"Returns a handle to the toolbar where the point lies, if therei is one, or <ph id=\"ph1\">`NULL`</ph> if not.","source":"Returns a handle to the toolbar where the point lies, if therei is one, or `NULL` if not."},{"content":"Remarks","pos":[6908,6915]},{"pos":[6983,7024],"content":"CMFCPopupMenuBar::GetCurrentMenuImageSize"},{"content":"Indicates the size of menu-button images.","pos":[7028,7069]},{"content":"Return Value","pos":[7144,7156]},{"content":"Returns the size of menu-button images in the toolbar.","pos":[7160,7214]},{"content":"Remarks","pos":[7224,7231]},{"pos":[7292,7326],"content":"CMFCPopupMenuBar::GetDefaultMenuId"},{"content":"Returns the identifier of the default menu item.","pos":[7330,7378]},{"content":"Return Value","pos":[7437,7449]},{"content":"Returns the identifier of the default menu item in the popup menu bar.","pos":[7453,7523]},{"content":"Remarks","pos":[7533,7540]},{"pos":[7604,7641],"content":"CMFCPopupMenuBar::GetLastCommandIndex"},{"content":"Gets the index of the most recently invoked menu command.","pos":[7645,7702]},{"content":"Return Value","pos":[7771,7783]},{"content":"Returns the index of the last menu command that has been invoked.","pos":[7787,7852]},{"content":"Remarks","pos":[7862,7869]},{"pos":[7923,7950],"content":"CMFCPopupMenuBar::GetOffset"},{"content":"Gets the row offset of the popup menu bar.","pos":[7954,7996]},{"content":"Return Value","pos":[8047,8059]},{"content":"Returns the row offset of the popup menu bar.","pos":[8063,8108]},{"content":"Remarks","pos":[8118,8125]},{"pos":[8129,8213],"content":"This value is set using <bpt id=\"p1\">[</bpt>CMFCPopupMenuBar::SetOffset<ept id=\"p1\">](#cmfcpopupmenubar__setoffset)</ept>.","source":"This value is set using [CMFCPopupMenuBar::SetOffset](#cmfcpopupmenubar__setoffset)."},{"pos":[8272,8304],"content":"CMFCPopupMenuBar::ImportFromMenu"},{"content":"Imports popup menu buttons from a specified menu.","pos":[8308,8357]},{"content":"Parameters","pos":[8466,8476]},{"content":"[in]","pos":[8480,8484]},{"content":"The menu from which to import the popup menu buttons.","pos":[8496,8549]},{"content":"[in]","pos":[8556,8560]},{"content":"if all commands on the menu are to be imported, or <ph id=\"ph1\">`FALSE`</ph> if rarely used ones may be hidden.","pos":[8590,8683],"source":" if all commands on the menu are to be imported, or `FALSE` if rarely used ones may be hidden."},{"content":"Return Value","pos":[8693,8705]},{"pos":[8709,8804],"content":"Returns <ph id=\"ph1\">`TRUE`</ph> if the menu buttons were successfully imported from the menu, or <ph id=\"ph2\">`FALSE`</ph> if not.","source":"Returns `TRUE` if the menu buttons were successfully imported from the menu, or `FALSE` if not."},{"content":"Remarks","pos":[8814,8821]},{"pos":[8884,8920],"content":"CMFCPopupMenuBar::IsDropDownListMode"},{"content":"Indicates whether the popup menu bar is in drop-down-list mode.","pos":[8924,8987]},{"content":"Return Value","pos":[9048,9060]},{"pos":[9064,9146],"content":"Returns <ph id=\"ph1\">`TRUE`</ph> if the popup menu bar is in drop-down-list mode, or <ph id=\"ph2\">`FALSE`</ph> if not.","source":"Returns `TRUE` if the popup menu bar is in drop-down-list mode, or `FALSE` if not."},{"content":"Remarks","pos":[9156,9163]},{"pos":[9221,9252],"content":"CMFCPopupMenuBar::IsPaletteMode"},{"content":"Indicates whether the popup menu bar is in palette mode.","pos":[9256,9312]},{"content":"Return Value","pos":[9368,9380]},{"pos":[9384,9445],"content":"Returns <ph id=\"ph1\">`TRUE`</ph> if palette mode is enabled, or <ph id=\"ph2\">`FALSE`</ph> if not.","source":"Returns `TRUE` if palette mode is enabled, or `FALSE` if not."},{"content":"Remarks","pos":[9455,9462]},{"content":"When the menu bar is set to palette mode, menu items appear in multiple columns and a limited number of rows.","pos":[9466,9575]},{"pos":[9633,9664],"content":"CMFCPopupMenuBar::IsRibbonPanel"},{"pos":[9668,9731],"content":"Indicates whether this is a ribbon panel ( <ph id=\"ph1\">`FALSE`</ph> by default).","source":"Indicates whether this is a ribbon panel ( `FALSE` by default)."},{"content":"Return Value","pos":[9795,9807]},{"pos":[9811,9882],"content":"Returns <ph id=\"ph1\">`FALSE`</ph> by default, indicating that this is not a ribbon panel.","source":"Returns `FALSE` by default, indicating that this is not a ribbon panel."},{"content":"Remarks","pos":[9892,9899]},{"pos":[9970,10014],"content":"CMFCPopupMenuBar::IsRibbonPanelInRegularMode"},{"pos":[10018,10097],"content":"Indicates whether this is a ribbon panel in regular mode ( <ph id=\"ph1\">`FALSE`</ph> by default).","source":"Indicates whether this is a ribbon panel in regular mode ( `FALSE` by default)."},{"content":"Return Value","pos":[10174,10186]},{"pos":[10190,10277],"content":"Returns <ph id=\"ph1\">`FALSE`</ph> by default, indicating that this is not a ribbon panel in regular mode.","source":"Returns `FALSE` by default, indicating that this is not a ribbon panel in regular mode."},{"content":"Remarks","pos":[10287,10294]},{"pos":[10351,10381],"content":"CMFCPopupMenuBar::LoadFromHash"},{"content":"Loads an archived menu.","pos":[10385,10408]},{"content":"Parameters","pos":[10465,10475]},{"content":"[in]","pos":[10479,10483]},{"content":"A handle to the archived menu to load.","pos":[10495,10533]},{"content":"Return Value","pos":[10543,10555]},{"pos":[10559,10628],"content":"Returns <ph id=\"ph1\">`TRUE`</ph> if the menu is loaded successfully, or <ph id=\"ph2\">`FALSE`</ph> if not.","source":"Returns `TRUE` if the menu is loaded successfully, or `FALSE` if not."},{"content":"Remarks","pos":[10638,10645]},{"pos":[10715,10758],"content":"CMFCPopupMenuBar::m_bDisableSideBarInXPMode"},{"content":"A Boolean parameter that indicates whether your application has a gray sidebar when it has a Windows XP appearance.","pos":[10762,10877]},{"content":"Remarks","pos":[10936,10943]},{"pos":[10947,11094],"content":"If this member variable is set to <ph id=\"ph1\">`FALSE`</ph> and your application has a Windows XP appearance, the framework draws a gray sidebar in your application.","source":"If this member variable is set to `FALSE` and your application has a Windows XP appearance, the framework draws a gray sidebar in your application."},{"pos":[11101,11130],"content":"The default value is <ph id=\"ph1\">`FALSE`</ph>.","source":"The default value is `FALSE`."},{"pos":[11196,11235],"content":"CMFCPopupMenuBar::RestoreDelayedSubMenu"},{"content":"Restores a delayed menu button for closing the popup menu bar.","pos":[11239,11301]},{"content":"Remarks","pos":[11364,11371]},{"pos":[11430,11462],"content":"CMFCPopupMenuBar::SetButtonStyle"},{"content":"Sets the style of the toolbar button at the given index.","pos":[11466,11522]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBar::SetButtonStyle<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setbuttonstyle)</ept>.)","pos":[11523,11635],"source":" (Overrides [CMFCToolBar::SetButtonStyle](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setbuttonstyle).)"},{"content":"Parameters","pos":[11725,11735]},{"content":"[in]","pos":[11739,11743]},{"content":"The zero-based index of the toolbar button whose style is to be set.","pos":[11756,11824]},{"content":"[in]","pos":[11831,11835]},{"content":"The style of the button.","pos":[11848,11872]},{"content":"See <bpt id=\"p1\">[</bpt>ToolBar Control Styles<ept id=\"p1\">](../../mfc/reference/toolbar-control-styles.md)</ept> for the list of available toolbar button styles.","pos":[11873,11997],"source":" See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for the list of available toolbar button styles."},{"content":"Remarks","pos":[12007,12014]},{"pos":[12068,12095],"content":"CMFCPopupMenuBar::SetOffset"},{"content":"Sets the row offset of the popup menu bar.","pos":[12099,12141]},{"content":"Parameters","pos":[12195,12205]},{"content":"[in]","pos":[12209,12213]},{"content":"The number of rows that the popup menu bar should be offset.","pos":[12227,12287]},{"content":"Remarks","pos":[12297,12304]},{"pos":[12368,12405],"content":"CMFCPopupMenuBar::StartPopupMenuTimer"},{"content":"Starts the timer for a specified delayed popup menu button.","pos":[12409,12468]},{"content":"Parameters","pos":[12588,12598]},{"content":"[in]","pos":[12602,12606]},{"content":"Pointer to the menu button for which to set the delay timer.","pos":[12624,12684]},{"content":"[in]","pos":[12691,12695]},{"content":"A delay factor, equal to at least one, to multiply by the standard menu delay time (generally between a half second and five seconds).","pos":[12714,12848]},{"content":"Remarks","pos":[12858,12865]},{"content":"See Also","pos":[12874,12882]},{"content":"Hierarchy Chart","pos":[12887,12902]},{"content":"Classes","pos":[12939,12946]},{"content":"CMFCColorBar Class","pos":[12989,13007]},{"content":"CMFCPopupMenu Class","pos":[13057,13076]}],"content":"---\ntitle: \"CMFCPopupMenuBar Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCPopupMenuBar\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCPopupMenuBar class\"\nms.assetid: 4c93c459-7f70-4240-8c63-280bb811e374\ncaps.latest.revision: 32\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# CMFCPopupMenuBar Class\nA menu bar embedded into a pop-up menu.  \n  \n## Syntax  \n  \n```  \nclass CMFCPopupMenuBar : public CMFCToolBar  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCPopupMenuBar::AdjustSizeImmediate](#cmfcpopupmenubar__adjustsizeimmediate)|Immediately recalculates the layout of a pane. (Overrides [CPane::AdjustSizeImmediate](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate).)|  \n|[CMFCPopupMenuBar::BuildOrigItems](#cmfcpopupmenubar__buildorigitems)|Loads popup menu items from a specified menu resource.|  \n|[CMFCPopupMenuBar::CloseDelayedSubMenu](#cmfcpopupmenubar__closedelayedsubmenu)|Closes a delayed popup menu button.|  \n|[CMFCPopupMenuBar::ExportToMenu](#cmfcpopupmenubar__exporttomenu)|Builds a menu from the popup-menu buttons.|  \n|[CMFCPopupMenuBar::FindDestintationToolBar](#cmfcpopupmenubar__finddestintationtoolbar)|Locates the toolbar where a specified point lies.|  \n|[CMFCPopupMenuBar::GetCurrentMenuImageSize](#cmfcpopupmenubar__getcurrentmenuimagesize)|Indicates the size of menu-button images.|  \n|[CMFCPopupMenuBar::GetDefaultMenuId](#cmfcpopupmenubar__getdefaultmenuid)|Returns the identifier of the default menu item.|  \n|[CMFCPopupMenuBar::GetLastCommandIndex](#cmfcpopupmenubar__getlastcommandindex)|Gets the index of the most recently invoked menu command.|  \n|[CMFCPopupMenuBar::GetOffset](#cmfcpopupmenubar__getoffset)|Gets the row offset of the popup menu bar.|  \n|[CMFCPopupMenuBar::ImportFromMenu](#cmfcpopupmenubar__importfrommenu)|Imports popup menu buttons from a specified menu.|  \n|[CMFCPopupMenuBar::IsDropDownListMode](#cmfcpopupmenubar__isdropdownlistmode)|Indicates whether the popup menu bar is in drop-down-list mode.|  \n|[CMFCPopupMenuBar::IsPaletteMode](#cmfcpopupmenubar__ispalettemode)|Indicates whether the popup menu bar is in palette mode.|  \n|[CMFCPopupMenuBar::IsRibbonPanel](#cmfcpopupmenubar__isribbonpanel)|Indicates whether this is a ribbon panel ( `FALSE` by default).|  \n|[CMFCPopupMenuBar::IsRibbonPanelInRegularMode](#cmfcpopupmenubar__isribbonpanelinregularmode)|Indicates whether this is a ribbon panel in regular mode ( `FALSE` by default).|  \n|[CMFCPopupMenuBar::LoadFromHash](#cmfcpopupmenubar__loadfromhash)|Loads an archived menu.|  \n|[CMFCPopupMenuBar::RestoreDelayedSubMenu](#cmfcpopupmenubar__restoredelayedsubmenu)|Restores a delayed menu button for closing the popup menu bar.|  \n|[CMFCPopupMenuBar::SetButtonStyle](#cmfcpopupmenubar__setbuttonstyle)|Sets the style of the toolbar button at the given index. (Overrides [CMFCToolBar::SetButtonStyle](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setbuttonstyle).)|  \n|[CMFCPopupMenuBar::SetOffset](#cmfcpopupmenubar__setoffset)|Sets the row offset of the popup menu bar.|  \n|[CMFCPopupMenuBar::StartPopupMenuTimer](#cmfcpopupmenubar__startpopupmenutimer)|Starts the timer for a specified delayed popup menu button.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCPopupMenuBar::m_bDisableSideBarInXPMode](#cmfcpopupmenubar__m_bdisablesidebarinxpmode)|Specifies whether the gray sidebar will be displayed when the application has a Windows XP appearance.|  \n  \n## Remarks  \n The `CMFCPopupMenuBar` is created at the same time as a [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) and embedded inside it. The `CMFCPopupMenuBar` covers the entire client area of the `CMFCPopupMenu` object. It supports keyboard and mouse input. It also communicates that input to the `CMFCPopupMenu` and to the top-level frame window.  \n  \n## Example  \n The following example demonstrates how to initialize a `CMFCPopupMenuBar` object from a `CMFCPopupMenu` object. This code snippet is part of the [Draw Client sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_DrawClient#7](../../mfc/reference/codesnippet/cpp/cmfcpopupmenubar-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CBasePane](../../mfc/reference/cbasepane-class.md)  \n  \n [CPane](../../mfc/reference/cpane-class.md)  \n  \n [CMFCBaseToolBar](../../mfc/reference/cmfcbasetoolbar-class.md)  \n  \n [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md)  \n  \n [CMFCPopupMenuBar](../../mfc/reference/cmfcpopupmenubar-class.md)  \n  \n## Requirements  \n **Header:** afxpopupmenubar.h  \n  \n##  <a name=\"cmfcpopupmenubar__adjustsizeimmediate\"></a>  CMFCPopupMenuBar::AdjustSizeImmediate  \n Immediately recalculates the layout of the popup menu bar pane. (Overrides [CPane::AdjustSizeImmediate](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate).  \n  \n```  \nvirtual void AdjustSizeImmediate(BOOL bRecalcLayout);\n```  \n  \n### Parameters  \n [in] `bRecalcLayout`  \n `TRUE` to automatically recalculate the layout of the popup menu bar pane; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__buildorigitems\"></a>  CMFCPopupMenuBar::BuildOrigItems  \n Loads popup menu items from a specified menu resource.  \n  \n```  \nBOOL BuildOrigItems(UINT uiMenuResID);\n```  \n  \n### Parameters  \n [in] `uiMenuResID`  \n Specifies the menu ID of the menu resource to load.  \n  \n### Return Value  \n Returns `TRUE` if successful or `FALSE` if not.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__closedelayedsubmenu\"></a>  CMFCPopupMenuBar::CloseDelayedSubMenu  \n Closes a popup menu button that has been delayed.  \n  \n```  \nvirtual void CloseDelayedSubMenu();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__exporttomenu\"></a>  CMFCPopupMenuBar::ExportToMenu  \n Builds a menu from the popup menu buttons.  \n  \n```  \nvirtual HMENU ExportToMenu() const;\n\n \n```  \n  \n### Return Value  \n Returns a handle to the new menu.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__finddestintationtoolbar\"></a>  CMFCPopupMenuBar::FindDestintationToolBar  \n Locates the toolbar where a specified point lies.  \n  \n```  \nCMFCToolBar* FindDestintationToolBar(CPoint point);\n```  \n  \n### Parameters  \n [in] `point`  \n A point on the screen.  \n  \n### Return Value  \n Returns a handle to the toolbar where the point lies, if therei is one, or `NULL` if not.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__getcurrentmenuimagesize\"></a>  CMFCPopupMenuBar::GetCurrentMenuImageSize  \n Indicates the size of menu-button images.  \n  \n```  \nvirtual CSize GetCurrentMenuImageSize() const;\n\n \n```  \n  \n### Return Value  \n Returns the size of menu-button images in the toolbar.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__getdefaultmenuid\"></a>  CMFCPopupMenuBar::GetDefaultMenuId  \n Returns the identifier of the default menu item.  \n  \n```  \nUINT GetDefaultMenuId() const;\n\n \n```  \n  \n### Return Value  \n Returns the identifier of the default menu item in the popup menu bar.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__getlastcommandindex\"></a>  CMFCPopupMenuBar::GetLastCommandIndex  \n Gets the index of the most recently invoked menu command.  \n  \n```  \nstatic int __stdcall GetLastCommandIndex();\n```  \n  \n### Return Value  \n Returns the index of the last menu command that has been invoked.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__getoffset\"></a>  CMFCPopupMenuBar::GetOffset  \n Gets the row offset of the popup menu bar.  \n  \n```  \nint GetOffset() const;\n\n \n```  \n  \n### Return Value  \n Returns the row offset of the popup menu bar.  \n  \n### Remarks  \n This value is set using [CMFCPopupMenuBar::SetOffset](#cmfcpopupmenubar__setoffset).  \n  \n##  <a name=\"cmfcpopupmenubar__importfrommenu\"></a>  CMFCPopupMenuBar::ImportFromMenu  \n Imports popup menu buttons from a specified menu.  \n  \n```  \nvirtual BOOL ImportFromMenu(\n    HMENU hMenu,  \n    BOOL bShowAllCommands = FALSE);\n```  \n  \n### Parameters  \n [in] `hMenu`  \n The menu from which to import the popup menu buttons.  \n  \n [in] `bShowAllCommands`  \n `TRUE` if all commands on the menu are to be imported, or `FALSE` if rarely used ones may be hidden.  \n  \n### Return Value  \n Returns `TRUE` if the menu buttons were successfully imported from the menu, or `FALSE` if not.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__isdropdownlistmode\"></a>  CMFCPopupMenuBar::IsDropDownListMode  \n Indicates whether the popup menu bar is in drop-down-list mode.  \n  \n```  \nBOOL IsDropDownListMode() const;\n\n \n```  \n  \n### Return Value  \n Returns `TRUE` if the popup menu bar is in drop-down-list mode, or `FALSE` if not.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__ispalettemode\"></a>  CMFCPopupMenuBar::IsPaletteMode  \n Indicates whether the popup menu bar is in palette mode.  \n  \n```  \nBOOL IsPaletteMode() const;\n\n \n```  \n  \n### Return Value  \n Returns `TRUE` if palette mode is enabled, or `FALSE` if not.  \n  \n### Remarks  \n When the menu bar is set to palette mode, menu items appear in multiple columns and a limited number of rows.  \n  \n##  <a name=\"cmfcpopupmenubar__isribbonpanel\"></a>  CMFCPopupMenuBar::IsRibbonPanel  \n Indicates whether this is a ribbon panel ( `FALSE` by default).  \n  \n```  \nvirtual BOOL IsRibbonPanel() const;\n\n \n```  \n  \n### Return Value  \n Returns `FALSE` by default, indicating that this is not a ribbon panel.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__isribbonpanelinregularmode\"></a>  CMFCPopupMenuBar::IsRibbonPanelInRegularMode  \n Indicates whether this is a ribbon panel in regular mode ( `FALSE` by default).  \n  \n```  \nvirtual BOOL IsRibbonPanelInRegularMode() const;\n\n \n```  \n  \n### Return Value  \n Returns `FALSE` by default, indicating that this is not a ribbon panel in regular mode.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__loadfromhash\"></a>  CMFCPopupMenuBar::LoadFromHash  \n Loads an archived menu.  \n  \n```  \nBOOL LoadFromHash(HMENU hMenu);\n```  \n  \n### Parameters  \n [in] `hMenu`  \n A handle to the archived menu to load.  \n  \n### Return Value  \n Returns `TRUE` if the menu is loaded successfully, or `FALSE` if not.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__m_bdisablesidebarinxpmode\"></a>  CMFCPopupMenuBar::m_bDisableSideBarInXPMode  \n A Boolean parameter that indicates whether your application has a gray sidebar when it has a Windows XP appearance.  \n  \n```  \nBOOL m_bDisableSideBarInXPMode;  \n```  \n  \n### Remarks  \n If this member variable is set to `FALSE` and your application has a Windows XP appearance, the framework draws a gray sidebar in your application.  \n  \n The default value is `FALSE`.  \n  \n##  <a name=\"cmfcpopupmenubar__restoredelayedsubmenu\"></a>  CMFCPopupMenuBar::RestoreDelayedSubMenu  \n Restores a delayed menu button for closing the popup menu bar.  \n  \n```  \nvirtual void RestoreDelayedSubMenu();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__setbuttonstyle\"></a>  CMFCPopupMenuBar::SetButtonStyle  \n Sets the style of the toolbar button at the given index. (Overrides [CMFCToolBar::SetButtonStyle](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setbuttonstyle).)  \n  \n```  \nvirtual void SetButtonStyle(\n    int nIndex,  \n    UINT nStyle);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n The zero-based index of the toolbar button whose style is to be set.  \n  \n [in] `nStyle`  \n The style of the button. See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for the list of available toolbar button styles.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__setoffset\"></a>  CMFCPopupMenuBar::SetOffset  \n Sets the row offset of the popup menu bar.  \n  \n```  \nvoid SetOffset(int iOffset);\n```  \n  \n### Parameters  \n [in] `iOffset`  \n The number of rows that the popup menu bar should be offset.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenubar__startpopupmenutimer\"></a>  CMFCPopupMenuBar::StartPopupMenuTimer  \n Starts the timer for a specified delayed popup menu button.  \n  \n```  \nvoid StartPopupMenuTimer(\n    CMFCToolBarMenuButton* pMenuButton,  \n    int nDelayFactor = 1);\n```  \n  \n### Parameters  \n [in] `pMenuButton`  \n Pointer to the menu button for which to set the delay timer.  \n  \n [in] `nDelayFactor`  \n A delay factor, equal to at least one, to multiply by the standard menu delay time (generally between a half second and five seconds).  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCColorBar Class](../../mfc/reference/cmfccolorbar-class.md)   \n [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md)\n"}