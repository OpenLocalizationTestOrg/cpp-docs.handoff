{"nodes":[{"pos":[12,50],"content":"SchedulerPolicy Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"SchedulerPolicy Class | Microsoft Docs","pos":[0,38]}]},{"pos":[681,702],"content":"SchedulerPolicy Class","linkify":"SchedulerPolicy Class","nodes":[{"content":"SchedulerPolicy Class","pos":[0,21]}]},{"pos":[703,845],"content":"The <ph id=\"ph1\">`SchedulerPolicy`</ph> class contains a set of key/value pairs, one for each policy element, that control the behavior of a scheduler instance.","source":"The `SchedulerPolicy` class contains a set of key/value pairs, one for each policy element, that control the behavior of a scheduler instance."},{"pos":[854,860],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[905,912],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[922,941],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[948,952]},{"content":"Description","pos":[953,964]},{"pos":[1002,1055],"content":"<bpt id=\"p1\">[</bpt>SchedulerPolicy::SchedulerPolicy Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[SchedulerPolicy::SchedulerPolicy Constructor](#ctor)"},{"content":"Overloaded.","pos":[1056,1067]},{"content":"Constructs a new scheduler policy and populates it with values for <bpt id=\"p1\">[</bpt>policy keys<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> supported by Concurrency Runtime schedulers and the Resource Manager.","pos":[1068,1250],"source":" Constructs a new scheduler policy and populates it with values for [policy keys](concurrency-namespace-enums.md) supported by Concurrency Runtime schedulers and the Resource Manager."},{"pos":[1255,1308],"content":"<bpt id=\"p1\">[</bpt>SchedulerPolicy::~SchedulerPolicy Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[SchedulerPolicy::~SchedulerPolicy Destructor](#dtor)"},{"content":"Destroys a scheduler policy.","pos":[1309,1337]},{"pos":[1348,1362],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1369,1373]},{"content":"Description","pos":[1374,1385]},{"pos":[1423,1480],"content":"<bpt id=\"p1\">[</bpt>SchedulerPolicy::GetPolicyValue Method<ept id=\"p1\">](#getpolicyvalue)</ept>","source":"[SchedulerPolicy::GetPolicyValue Method](#getpolicyvalue)"},{"pos":[1481,1551],"content":"Retrieves the value of the policy key supplied as the <ph id=\"ph1\">`key`</ph> parameter.","source":"Retrieves the value of the policy key supplied as the `key` parameter."},{"pos":[1556,1625],"content":"<bpt id=\"p1\">[</bpt>SchedulerPolicy::SetConcurrencyLimits Method<ept id=\"p1\">](#setconcurrencylimits)</ept>","source":"[SchedulerPolicy::SetConcurrencyLimits Method](#setconcurrencylimits)"},{"pos":[1626,1729],"content":"Simultaneously sets the <ph id=\"ph1\">`MinConcurrency`</ph> and <ph id=\"ph2\">`MaxConcurrency`</ph> policies on the <ph id=\"ph3\">`SchedulerPolicy`</ph> object.","source":"Simultaneously sets the `MinConcurrency` and `MaxConcurrency` policies on the `SchedulerPolicy` object."},{"pos":[1734,1791],"content":"<bpt id=\"p1\">[</bpt>SchedulerPolicy::SetPolicyValue Method<ept id=\"p1\">](#setpolicyvalue)</ept>","source":"[SchedulerPolicy::SetPolicyValue Method](#setpolicyvalue)"},{"pos":[1792,1883],"content":"Sets the value of the policy key supplied as the <ph id=\"ph1\">`key`</ph> parameter and returns the old value.","source":"Sets the value of the policy key supplied as the `key` parameter and returns the old value."},{"pos":[1894,1910],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1917,1921]},{"content":"Description","pos":[1922,1933]},{"pos":[1971,2022],"content":"<bpt id=\"p1\">[</bpt>SchedulerPolicy::operator= Operator<ept id=\"p1\">](#operator_eq)</ept>","source":"[SchedulerPolicy::operator= Operator](#operator_eq)"},{"content":"Assigns the scheduler policy from another scheduler policy.","pos":[2023,2082]},{"pos":[2092,2099],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2103,2269],"content":"For more information about the policies which can be controlled using the <ph id=\"ph1\">`SchedulerPolicy`</ph> class, see <bpt id=\"p1\">[</bpt>PolicyElementKey Enumeration<ept id=\"p1\">](concurrency-namespace-enums.md)</ept>.","source":"For more information about the policies which can be controlled using the `SchedulerPolicy` class, see [PolicyElementKey Enumeration](concurrency-namespace-enums.md)."},{"pos":[2278,2299],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2329,2341],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2345,2377],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrt.h, concrtrm.h","source":"**Header:** concrt.h, concrtrm.h"},{"pos":[2384,2410],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2420,2489],"content":"<bpt id=\"p1\">&lt;a name=\"getpolicyvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  SchedulerPolicy::GetPolicyValue Method","linkify":"<a name=\"getpolicyvalue\"></a>  SchedulerPolicy::GetPolicyValue Method","source":"<a name=\"getpolicyvalue\"></a>  SchedulerPolicy::GetPolicyValue Method"},{"pos":[2493,2563],"content":"Retrieves the value of the policy key supplied as the <ph id=\"ph1\">`key`</ph> parameter.","source":"Retrieves the value of the policy key supplied as the `key` parameter."},{"pos":[2643,2653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The policy key to retrieve a value for.","pos":[2666,2705]},{"pos":[2715,2727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2731,2844],"content":"If the key specified by the <ph id=\"ph1\">`key`</ph> parameter is supported, the policy value for the key cast to an <ph id=\"ph2\">`unsigned int`</ph>.","source":"If the key specified by the `key` parameter is supported, the policy value for the key cast to an `unsigned int`."},{"pos":[2854,2861],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2865,2983],"content":"The method will throw <bpt id=\"p1\">[</bpt>invalid_scheduler_policy_key<ept id=\"p1\">](invalid-scheduler-policy-key-class.md)</ept> for an invalid policy key.","source":"The method will throw [invalid_scheduler_policy_key](invalid-scheduler-policy-key-class.md) for an invalid policy key."},{"pos":[2993,3056],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  SchedulerPolicy::operator= Operator","linkify":"<a name=\"operator_eq\"></a>  SchedulerPolicy::operator= Operator","source":"<a name=\"operator_eq\"></a>  SchedulerPolicy::operator= Operator"},{"content":"Assigns the scheduler policy from another scheduler policy.","pos":[3060,3119]},{"pos":[3206,3216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The policy to assign to this policy.","pos":[3236,3272]},{"pos":[3282,3294],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the scheduler policy.","pos":[3298,3334]},{"pos":[3344,3351],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3355,3524],"content":"Often, the most convenient way to define a new scheduler policy is to copy an existing policy and modify it using the <ph id=\"ph1\">`SetPolicyValue`</ph> or <ph id=\"ph2\">`SetConcurrencyLimits`</ph> methods.","source":"Often, the most convenient way to define a new scheduler policy is to copy an existing policy and modify it using the `SetPolicyValue` or `SetConcurrencyLimits` methods."},{"pos":[3534,3599],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  SchedulerPolicy::SchedulerPolicy Constructor","linkify":"<a name=\"ctor\"></a>  SchedulerPolicy::SchedulerPolicy Constructor","source":"<a name=\"ctor\"></a>  SchedulerPolicy::SchedulerPolicy Constructor"},{"pos":[3603,3785],"content":"Constructs a new scheduler policy and populates it with values for <bpt id=\"p1\">[</bpt>policy keys<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> supported by Concurrency Runtime schedulers and the Resource Manager.","source":"Constructs a new scheduler policy and populates it with values for [policy keys](concurrency-namespace-enums.md) supported by Concurrency Runtime schedulers and the Resource Manager."},{"pos":[3938,3948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of key/value pairs that follow the <ph id=\"ph1\">`_PolicyKeyCount`</ph> parameter.","pos":[3973,4047],"source":" The number of key/value pairs that follow the `_PolicyKeyCount` parameter."},{"content":"The source policy to copy.","pos":[4070,4096]},{"pos":[4106,4113],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first constructor creates a new scheduler policy where all policies will be initialized to their default values.","pos":[4117,4233]},{"content":"The second constructor creates a new scheduler policy that uses a named-parameter style of initialization.","pos":[4240,4346]},{"content":"Values after the <ph id=\"ph1\">`_PolicyKeyCount`</ph> parameter are supplied as key/value pairs.","pos":[4347,4424],"source":" Values after the `_PolicyKeyCount` parameter are supplied as key/value pairs."},{"content":"Any policy key which is not specified in this constructor will have its default value.","pos":[4425,4511]},{"content":"This constructor could throw the exceptions <bpt id=\"p1\">[</bpt>invalid_scheduler_policy_key<ept id=\"p1\">](invalid-scheduler-policy-key-class.md)</ept>, <bpt id=\"p2\">[</bpt>invalid_scheduler_policy_value<ept id=\"p2\">](invalid-scheduler-policy-value-class.md)</ept> or <bpt id=\"p3\">[</bpt>invalid_scheduler_policy_thread_specification<ept id=\"p3\">](invalid-scheduler-policy-thread-specification-class.md)</ept>.","pos":[4512,4808],"source":" This constructor could throw the exceptions [invalid_scheduler_policy_key](invalid-scheduler-policy-key-class.md), [invalid_scheduler_policy_value](invalid-scheduler-policy-value-class.md) or [invalid_scheduler_policy_thread_specification](invalid-scheduler-policy-thread-specification-class.md)."},{"content":"The third constructor is a copy constructor.","pos":[4815,4859]},{"content":"Often, the most convenient way to define a new scheduler policy is to copy an existing policy and modify it using the <ph id=\"ph1\">`SetPolicyValue`</ph> or <ph id=\"ph2\">`SetConcurrencyLimits`</ph> methods.","pos":[4860,5029],"source":" Often, the most convenient way to define a new scheduler policy is to copy an existing policy and modify it using the `SetPolicyValue` or `SetConcurrencyLimits` methods."},{"pos":[5039,5104],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  SchedulerPolicy::~SchedulerPolicy Destructor","linkify":"<a name=\"dtor\"></a>  SchedulerPolicy::~SchedulerPolicy Destructor","source":"<a name=\"dtor\"></a>  SchedulerPolicy::~SchedulerPolicy Destructor"},{"content":"Destroys a scheduler policy.","pos":[5108,5136]},{"pos":[5179,5260],"content":"<bpt id=\"p1\">&lt;a name=\"setconcurrencylimits\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  SchedulerPolicy::SetConcurrencyLimits Method","linkify":"<a name=\"setconcurrencylimits\"></a>  SchedulerPolicy::SetConcurrencyLimits Method","source":"<a name=\"setconcurrencylimits\"></a>  SchedulerPolicy::SetConcurrencyLimits Method"},{"pos":[5264,5367],"content":"Simultaneously sets the <ph id=\"ph1\">`MinConcurrency`</ph> and <ph id=\"ph2\">`MaxConcurrency`</ph> policies on the <ph id=\"ph3\">`SchedulerPolicy`</ph> object.","source":"Simultaneously sets the `MinConcurrency` and `MaxConcurrency` policies on the `SchedulerPolicy` object."},{"pos":[5510,5520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value for the <ph id=\"ph1\">`MinConcurrency`</ph> policy key.","pos":[5545,5591],"source":" The value for the `MinConcurrency` policy key."},{"content":"The value for the <ph id=\"ph1\">`MaxConcurrency`</ph> policy key.","pos":[5619,5665],"source":" The value for the `MaxConcurrency` policy key."},{"pos":[5675,5682],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5686,5930],"content":"The method will throw <bpt id=\"p1\">[</bpt>invalid_scheduler_policy_thread_specification<ept id=\"p1\">](invalid-scheduler-policy-thread-specification-class.md)</ept> if the value specified for the <ph id=\"ph1\">`MinConcurrency`</ph> policy is greater than that specified for the <ph id=\"ph2\">`MaxConcurrency`</ph> policy.","source":"The method will throw [invalid_scheduler_policy_thread_specification](invalid-scheduler-policy-thread-specification-class.md) if the value specified for the `MinConcurrency` policy is greater than that specified for the `MaxConcurrency` policy."},{"pos":[5937,6062],"content":"The method can also throw <bpt id=\"p1\">[</bpt>invalid_scheduler_policy_value<ept id=\"p1\">](invalid-scheduler-policy-value-class.md)</ept> for other invalid values.","source":"The method can also throw [invalid_scheduler_policy_value](invalid-scheduler-policy-value-class.md) for other invalid values."},{"pos":[6072,6141],"content":"<bpt id=\"p1\">&lt;a name=\"setpolicyvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  SchedulerPolicy::SetPolicyValue Method","linkify":"<a name=\"setpolicyvalue\"></a>  SchedulerPolicy::SetPolicyValue Method","source":"<a name=\"setpolicyvalue\"></a>  SchedulerPolicy::SetPolicyValue Method"},{"pos":[6145,6236],"content":"Sets the value of the policy key supplied as the <ph id=\"ph1\">`key`</ph> parameter and returns the old value.","source":"Sets the value of the policy key supplied as the `key` parameter and returns the old value."},{"pos":[6339,6349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The policy key to set a value for.","pos":[6362,6396]},{"content":"The value to set the policy key to.","pos":[6414,6449]},{"pos":[6459,6471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6475,6592],"content":"If the key specified by the <ph id=\"ph1\">`key`</ph> parameter is supported, the old policy value for the key cast to an <ph id=\"ph2\">`unsigned int`</ph>.","source":"If the key specified by the `key` parameter is supported, the old policy value for the key cast to an `unsigned int`."},{"pos":[6602,6609],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6613,6806],"content":"The method will throw <bpt id=\"p1\">[</bpt>invalid_scheduler_policy_key<ept id=\"p1\">](invalid-scheduler-policy-key-class.md)</ept> for an invalid policy key or any policy key whose value cannot be set by the <ph id=\"ph1\">`SetPolicyValue`</ph> method.","source":"The method will throw [invalid_scheduler_policy_key](invalid-scheduler-policy-key-class.md) for an invalid policy key or any policy key whose value cannot be set by the `SetPolicyValue` method."},{"pos":[6813,6988],"content":"The method will throw <bpt id=\"p1\">[</bpt>invalid_scheduler_policy_value<ept id=\"p1\">](invalid-scheduler-policy-value-class.md)</ept> for a value that is not supported for the key specified by the <ph id=\"ph1\">`key`</ph> parameter.","source":"The method will throw [invalid_scheduler_policy_value](invalid-scheduler-policy-value-class.md) for a value that is not supported for the key specified by the `key` parameter."},{"content":"Note that this method is not allowed to set the <ph id=\"ph1\">`MinConcurrency`</ph> or <ph id=\"ph2\">`MaxConcurrency`</ph> policies.","pos":[6995,7089],"source":"Note that this method is not allowed to set the `MinConcurrency` or `MaxConcurrency` policies."},{"content":"To set these values, use the <bpt id=\"p1\">[</bpt>SetConcurrencyLimits<ept id=\"p1\">](#setconcurrencylimits)</ept> method.","pos":[7090,7172],"source":" To set these values, use the [SetConcurrencyLimits](#setconcurrencylimits) method."},{"pos":[7181,7189],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[7193,7243],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>PolicyElementKey Enumeration<ept id=\"p1\">](concurrency-namespace-enums.md)</ept><ph id=\"ph1\"> </ph>","pos":[7246,7310],"source":" [PolicyElementKey Enumeration](concurrency-namespace-enums.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CurrentScheduler Class<ept id=\"p1\">](currentscheduler-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[7313,7366],"source":" [CurrentScheduler Class](currentscheduler-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Scheduler Class<ept id=\"p1\">](scheduler-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[7369,7408],"source":" [Scheduler Class](scheduler-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Task Scheduler<ept id=\"p1\">](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept>","pos":[7411,7492],"source":" [Task Scheduler](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)"}],"content":"---\ntitle: \"SchedulerPolicy Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrt/concurrency::SchedulerPolicy\"\n  - \"concrtrm/concurrency::SchedulerPolicy\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SchedulerPolicy class\"\nms.assetid: bcebf51a-65f8-45a3-809b-d1ff93527dc4\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# SchedulerPolicy Class\nThe `SchedulerPolicy` class contains a set of key/value pairs, one for each policy element, that control the behavior of a scheduler instance.  \n  \n## Syntax  \n  \n```\nclass SchedulerPolicy;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[SchedulerPolicy::SchedulerPolicy Constructor](#ctor)|Overloaded. Constructs a new scheduler policy and populates it with values for [policy keys](concurrency-namespace-enums.md) supported by Concurrency Runtime schedulers and the Resource Manager.|  \n|[SchedulerPolicy::~SchedulerPolicy Destructor](#dtor)|Destroys a scheduler policy.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[SchedulerPolicy::GetPolicyValue Method](#getpolicyvalue)|Retrieves the value of the policy key supplied as the `key` parameter.|  \n|[SchedulerPolicy::SetConcurrencyLimits Method](#setconcurrencylimits)|Simultaneously sets the `MinConcurrency` and `MaxConcurrency` policies on the `SchedulerPolicy` object.|  \n|[SchedulerPolicy::SetPolicyValue Method](#setpolicyvalue)|Sets the value of the policy key supplied as the `key` parameter and returns the old value.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[SchedulerPolicy::operator= Operator](#operator_eq)|Assigns the scheduler policy from another scheduler policy.|  \n  \n## Remarks  \n For more information about the policies which can be controlled using the `SchedulerPolicy` class, see [PolicyElementKey Enumeration](concurrency-namespace-enums.md).  \n  \n## Inheritance Hierarchy  \n `SchedulerPolicy`  \n  \n## Requirements  \n **Header:** concrt.h, concrtrm.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"getpolicyvalue\"></a>  SchedulerPolicy::GetPolicyValue Method  \n Retrieves the value of the policy key supplied as the `key` parameter.  \n  \n```\nunsigned int GetPolicyValue(PolicyElementKey key) const;\n```  \n  \n### Parameters  \n `key`  \n The policy key to retrieve a value for.  \n  \n### Return Value  \n If the key specified by the `key` parameter is supported, the policy value for the key cast to an `unsigned int`.  \n  \n### Remarks  \n The method will throw [invalid_scheduler_policy_key](invalid-scheduler-policy-key-class.md) for an invalid policy key.  \n  \n##  <a name=\"operator_eq\"></a>  SchedulerPolicy::operator= Operator  \n Assigns the scheduler policy from another scheduler policy.  \n  \n```\nSchedulerPolicy& operator= (const SchedulerPolicy& _RhsPolicy);\n```  \n  \n### Parameters  \n `_RhsPolicy`  \n The policy to assign to this policy.  \n  \n### Return Value  \n A reference to the scheduler policy.  \n  \n### Remarks  \n Often, the most convenient way to define a new scheduler policy is to copy an existing policy and modify it using the `SetPolicyValue` or `SetConcurrencyLimits` methods.  \n  \n##  <a name=\"ctor\"></a>  SchedulerPolicy::SchedulerPolicy Constructor  \n Constructs a new scheduler policy and populates it with values for [policy keys](concurrency-namespace-enums.md) supported by Concurrency Runtime schedulers and the Resource Manager.  \n  \n```\nSchedulerPolicy();\n\nSchedulerPolicy(\n    size_t _PolicyKeyCount,\n ...);\n\nSchedulerPolicy(\n    const SchedulerPolicy& _SrcPolicy);\n```  \n  \n### Parameters  \n `_PolicyKeyCount`  \n The number of key/value pairs that follow the `_PolicyKeyCount` parameter.  \n  \n `_SrcPolicy`  \n The source policy to copy.  \n  \n### Remarks  \n The first constructor creates a new scheduler policy where all policies will be initialized to their default values.  \n  \n The second constructor creates a new scheduler policy that uses a named-parameter style of initialization. Values after the `_PolicyKeyCount` parameter are supplied as key/value pairs. Any policy key which is not specified in this constructor will have its default value. This constructor could throw the exceptions [invalid_scheduler_policy_key](invalid-scheduler-policy-key-class.md), [invalid_scheduler_policy_value](invalid-scheduler-policy-value-class.md) or [invalid_scheduler_policy_thread_specification](invalid-scheduler-policy-thread-specification-class.md).  \n  \n The third constructor is a copy constructor. Often, the most convenient way to define a new scheduler policy is to copy an existing policy and modify it using the `SetPolicyValue` or `SetConcurrencyLimits` methods.  \n  \n##  <a name=\"dtor\"></a>  SchedulerPolicy::~SchedulerPolicy Destructor  \n Destroys a scheduler policy.  \n  \n```\n~SchedulerPolicy();\n```  \n  \n##  <a name=\"setconcurrencylimits\"></a>  SchedulerPolicy::SetConcurrencyLimits Method  \n Simultaneously sets the `MinConcurrency` and `MaxConcurrency` policies on the `SchedulerPolicy` object.  \n  \n```\nvoid SetConcurrencyLimits(\n    unsigned int _MinConcurrency,\n    unsigned int _MaxConcurrency = MaxExecutionResources);\n```  \n  \n### Parameters  \n `_MinConcurrency`  \n The value for the `MinConcurrency` policy key.  \n  \n `_MaxConcurrency`  \n The value for the `MaxConcurrency` policy key.  \n  \n### Remarks  \n The method will throw [invalid_scheduler_policy_thread_specification](invalid-scheduler-policy-thread-specification-class.md) if the value specified for the `MinConcurrency` policy is greater than that specified for the `MaxConcurrency` policy.  \n  \n The method can also throw [invalid_scheduler_policy_value](invalid-scheduler-policy-value-class.md) for other invalid values.  \n  \n##  <a name=\"setpolicyvalue\"></a>  SchedulerPolicy::SetPolicyValue Method  \n Sets the value of the policy key supplied as the `key` parameter and returns the old value.  \n  \n```\nunsigned int SetPolicyValue(\n    PolicyElementKey key,\n    unsigned int value);\n```  \n  \n### Parameters  \n `key`  \n The policy key to set a value for.  \n  \n `value`  \n The value to set the policy key to.  \n  \n### Return Value  \n If the key specified by the `key` parameter is supported, the old policy value for the key cast to an `unsigned int`.  \n  \n### Remarks  \n The method will throw [invalid_scheduler_policy_key](invalid-scheduler-policy-key-class.md) for an invalid policy key or any policy key whose value cannot be set by the `SetPolicyValue` method.  \n  \n The method will throw [invalid_scheduler_policy_value](invalid-scheduler-policy-value-class.md) for a value that is not supported for the key specified by the `key` parameter.  \n  \n Note that this method is not allowed to set the `MinConcurrency` or `MaxConcurrency` policies. To set these values, use the [SetConcurrencyLimits](#setconcurrencylimits) method.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [PolicyElementKey Enumeration](concurrency-namespace-enums.md)   \n [CurrentScheduler Class](currentscheduler-class.md)   \n [Scheduler Class](scheduler-class.md)   \n [Task Scheduler](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)\n\n\n\n"}