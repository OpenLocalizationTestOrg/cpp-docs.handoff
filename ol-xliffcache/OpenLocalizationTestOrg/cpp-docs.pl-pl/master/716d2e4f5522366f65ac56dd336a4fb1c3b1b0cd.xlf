<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">716d2e4f5522366f65ac56dd336a4fb1c3b1b0cd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\logical-and-operator-amp-amp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7f50f9e83d3c377b62a3d93969c49bfae3aa28e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">867f789b4d9bd0eda246b48cbd1ba5d9ba62721b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Logical AND Operator: <ph id="ph1">&amp;amp;&amp;amp;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Logical AND Operator:</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The logical AND operator (<bpt id="p1">**</bpt><ph id="ph1">&amp;&amp;</ph><ept id="p1">**</ept>) returns the boolean value <bpt id="p2">**</bpt>true<ept id="p2">**</ept> if both operands are <bpt id="p3">**</bpt>true<ept id="p3">**</ept> and returns <bpt id="p4">**</bpt>false<ept id="p4">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The operands are implicitly converted to type <ph id="ph1">`bool`</ph> prior to evaluation, and the result is of type <ph id="ph2">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Logical AND has left-to-right associativity.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The operands to the logical AND operator need not be of the same type, but they must be of integral or pointer type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The operands are commonly relational or equality expressions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The first operand is completely evaluated and all side effects are completed before continuing evaluation of the logical AND expression.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The second operand is evaluated only if the first operand evaluates to true (nonzero).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This evaluation eliminates needless evaluation of the second operand when the logical AND expression is false.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use this short-circuit evaluation to prevent null-pointer dereferencing, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pch`</ph> is null (0), the right side of the expression is never evaluated.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Therefore, the assignment through a null pointer is impossible.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Operator Keyword for &amp;&amp;</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>and<ept id="p1">**</ept> operator is the text equivalent of <bpt id="p2">**</bpt><ph id="ph1">&amp;&amp;</ph><ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There are two ways to access the <bpt id="p1">**</bpt>and<ept id="p1">**</ept> operator in your programs: include the header file <ph id="ph1">`iso646.h`</ph>, or compile with the <bpt id="p2">[</bpt>/Za<ept id="p2">](../build/reference/za-ze-disable-language-extensions.md)</ept> (Disable language extensions) compiler option.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C++ Built-in Operators Precedence and Associativity<ept id="p1">](cpp-built-in-operators-precedence-and-associativity.md)</ept><ph id="ph1">
</ph><bpt id="p2"> [</bpt>C++ Built-in Operators, Precedence and Associativity<ept id="p2">](../cpp/cpp-built-in-operators-precedence-and-associativity.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>C Logical Operators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>