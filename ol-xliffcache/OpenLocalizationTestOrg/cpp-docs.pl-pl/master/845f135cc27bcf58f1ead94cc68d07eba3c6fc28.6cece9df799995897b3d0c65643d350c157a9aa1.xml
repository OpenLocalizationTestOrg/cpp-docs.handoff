{"nodes":[{"pos":[12,49],"content":"Compiler Error C3718 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C3718 | Microsoft Docs","pos":[0,37]}]},{"content":"Compiler Error C3718","pos":[597,617]},{"content":"can only call 'event' in the context of a member function of the receiving class","pos":[618,698]},{"pos":[705,760],"content":"The <ph id=\"ph1\">`event`</ph>can only be called from the receiving class.","source":"The `event`can only be called from the receiving class."},{"content":"Example","pos":[769,776]},{"content":"The following sample generates C3718:","pos":[780,817]}],"content":"---\ntitle: \"Compiler Error C3718 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C3718\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C3718\"\nms.assetid: 346b5205-c44d-49d3-b66a-96417d3d6986\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error C3718\ncan only call 'event' in the context of a member function of the receiving class  \n  \n The `event`can only be called from the receiving class.  \n  \n## Example  \n The following sample generates C3718:  \n  \n```  \n// C3718.cpp  \n#define _ATL_ATTRIBUTES 1  \n#include \"atlbase.h\"  \n#include \"atlcom.h\"  \n  \n[module(name=\"test\")];  \n  \n[object, uuid(\"00000000-0000-0000-0000-000000000001\")]  \n__interface I  \n{  \n    HRESULT f();  \n};  \n  \n[event_source(com), coclass, uuid(\"00000000-0000-0000-0000-000000000002\")]  \nstruct E  \n{  \n    __event __interface I;  \n};  \n  \n[event_receiver(com)]  \nstruct R  \n{  \n    void b()  \n    {  \n        printf_s(\"B::bar()\\n\");   \n    }  \n  \n    void HookAndRun(E* pE)  \n    {  \n        __hook(&I::f, pE->GetUnknown(), &R::b);  \n        __raise pE->f();  \n    }  \n};  \n  \nint main()  \n{  \n    CComObject<E>* pE;  \n    CComObject<E>::CreateInstance(&pE);  \n  \n    __hook(&I::f, pE->GetUnknown(), &R::b, &r);   // C3718  \n    __raise pE->f();  \n    // try the following lines instead  \n    // R r;  \n    // r.HookAndRun(pE);  \n}  \n```"}