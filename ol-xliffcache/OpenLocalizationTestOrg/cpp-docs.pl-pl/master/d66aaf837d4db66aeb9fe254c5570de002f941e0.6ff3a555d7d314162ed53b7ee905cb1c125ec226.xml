{"nodes":[{"pos":[12,44],"content":"Name Decoration | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Name Decoration | Microsoft Docs","pos":[0,32]}]},{"content":"Name Decoration","pos":[654,669]},{"content":"Name decoration usually refers to C++ naming conventions, but can apply to a number of C cases as well.","pos":[670,773]},{"content":"By default, C++ uses the function name, parameters, and return type to create a linker name for the function.","pos":[774,883]},{"content":"Consider the following function:","pos":[884,916]},{"content":"The following table shows the linker name for various calling conventions.","pos":[965,1039]},{"content":"Calling convention","pos":[1046,1064]},{"content":"extern \"C\" or .c file","pos":[1065,1086]},{"content":".cpp, .cxx or /TP","pos":[1087,1104]},{"pos":[1191,1222],"content":"C naming convention (<ph id=\"ph1\">`__cdecl`</ph>)","source":"C naming convention (`__cdecl`)"},{"content":"_test","pos":[1223,1228]},{"content":"?test@@ZAXXZ","pos":[1229,1241]},{"pos":[1246,1287],"content":"Fastcall naming convention (<ph id=\"ph1\">`__fastcall`</ph>)","source":"Fastcall naming convention (`__fastcall`)"},{"content":"@test@0","pos":[1288,1295]},{"content":"?test@@YIXXZ","pos":[1296,1308]},{"pos":[1313,1358],"content":"Standard Call naming convention (<ph id=\"ph1\">`__stdcall`</ph>)","source":"Standard Call naming convention (`__stdcall`)"},{"content":"_test@0","pos":[1359,1366]},{"content":"?test@@YGXXZ","pos":[1367,1379]},{"pos":[1384,1429],"content":"Vectorcall naming convention (<ph id=\"ph1\">`__vectorcall`</ph>)","source":"Vectorcall naming convention (`__vectorcall`)"},{"content":"test@@0","pos":[1430,1437]},{"content":"?test@@YQXXZ","pos":[1438,1450]},{"content":"Use extern \"C\" to call a C function from C++.","pos":[1458,1503]},{"content":"Extern \"C\" forces use of the C naming convention for non-class C++ functions.","pos":[1504,1581]},{"content":"Be aware of compiler switches <bpt id=\"p1\">**</bpt>/Tc<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>/Tp<ept id=\"p2\">**</ept>, which tell the compiler to ignore the filename extension and compile the file as C or C++, respectively.","pos":[1582,1736],"source":" Be aware of compiler switches **/Tc** or **/Tp**, which tell the compiler to ignore the filename extension and compile the file as C or C++, respectively."},{"content":"These options may cause names you do not expect.","pos":[1737,1785]},{"content":"Having function prototypes that have mismatched parameters can also cause this error.","pos":[1792,1877]},{"content":"Name decoration incorporates the parameters of a function into the final decorated function name.","pos":[1878,1975]},{"content":"Calling a function with the parameter types that do not match those in the function declaration may also cause LNK2001.","pos":[1976,2095]},{"content":"There is currently no standard for C++ naming between compiler vendors or even between different versions of a compiler.","pos":[2102,2222]},{"content":"Therefore linking object files compiled with other compilers may not produce the same naming scheme and thus causes unresolved externals.","pos":[2223,2360]},{"content":"See Also","pos":[2369,2377]},{"content":"Linker Tools Error LNK2001","pos":[2382,2408]}],"content":"---\ntitle: \"Name Decoration | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"name decoration [C++]\"\n  - \"names [C++], decorated\"\n  - \"decorated names, calling conventions\"\nms.assetid: 8327a27b-bb4f-49f2-8218-b851b9d2a463\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Name Decoration\nName decoration usually refers to C++ naming conventions, but can apply to a number of C cases as well. By default, C++ uses the function name, parameters, and return type to create a linker name for the function. Consider the following function:  \n  \n```  \nvoid CALLTYPE test(void)  \n```  \n  \n The following table shows the linker name for various calling conventions.  \n  \n|Calling convention|extern \"C\" or .c file|.cpp, .cxx or /TP|  \n|------------------------|---------------------------|------------------------|  \n|C naming convention (`__cdecl`)|_test|?test@@ZAXXZ|  \n|Fastcall naming convention (`__fastcall`)|@test@0|?test@@YIXXZ|  \n|Standard Call naming convention (`__stdcall`)|_test@0|?test@@YGXXZ|  \n|Vectorcall naming convention (`__vectorcall`)|test@@0|?test@@YQXXZ|  \n  \n Use extern \"C\" to call a C function from C++. Extern \"C\" forces use of the C naming convention for non-class C++ functions. Be aware of compiler switches **/Tc** or **/Tp**, which tell the compiler to ignore the filename extension and compile the file as C or C++, respectively. These options may cause names you do not expect.  \n  \n Having function prototypes that have mismatched parameters can also cause this error. Name decoration incorporates the parameters of a function into the final decorated function name. Calling a function with the parameter types that do not match those in the function declaration may also cause LNK2001.  \n  \n There is currently no standard for C++ naming between compiler vendors or even between different versions of a compiler. Therefore linking object files compiled with other compilers may not produce the same naming scheme and thus causes unresolved externals.  \n  \n## See Also  \n [Linker Tools Error LNK2001](../../error-messages/tool-errors/linker-tools-error-lnk2001.md)"}