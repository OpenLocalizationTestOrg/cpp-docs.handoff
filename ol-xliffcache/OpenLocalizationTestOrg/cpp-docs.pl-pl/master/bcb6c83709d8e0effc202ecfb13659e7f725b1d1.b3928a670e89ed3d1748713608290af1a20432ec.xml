{"nodes":[{"pos":[12,43],"content":"greater Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"greater Struct | Microsoft Docs","pos":[0,31]}]},{"content":"greater Struct","pos":[712,726]},{"pos":[727,819],"content":"A binary predicate that performs the greater-than operation ( <ph id=\"ph1\">`operator&gt;`</ph>) on its arguments.","source":"A binary predicate that performs the greater-than operation ( `operator>`) on its arguments."},{"content":"Syntax","pos":[828,834]},{"content":"Parameters","pos":[1259,1269]},{"content":", <ph id=\"ph1\">`T`</ph>,","pos":[1279,1285],"source":", `T`, "},{"content":"Any type that supports an <ph id=\"ph1\">`operator&gt;`</ph> that takes operands of the specified or inferred types.","pos":[1293,1386],"source":" Any type that supports an `operator>` that takes operands of the specified or inferred types."},{"content":"The left operand of the greater-than operation.","pos":[1403,1450]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1451,1528],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`T`</ph>.","pos":[1529,1640],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`."},{"content":"The right operand of the greater-than operation.","pos":[1658,1706]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1707,1784],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`U`</ph>.","pos":[1785,1896],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`."},{"content":"Return Value","pos":[1905,1917]},{"content":"The result of <ph id=\"ph1\">`Left``&gt;``Right`</ph>.","pos":[1921,1952],"source":"The result of `Left``>``Right`."},{"content":"The specialized template does perfect forwarding of the result, which has the type that's returned by <ph id=\"ph1\">`operator&gt;`</ph>.","pos":[1953,2067],"source":" The specialized template does perfect forwarding of the result, which has the type that's returned by `operator>`."},{"content":"Remarks","pos":[2076,2083]},{"content":"The binary predicate <ph id=\"ph1\">`greater`&lt; `Type`</ph>&gt; provides a strict weak ordering of a set of element values of type <ph id=\"ph2\">`Type`</ph> into equivalence classes, if and only if this type satisfies the standard mathematical requirements for being so ordered.","pos":[2087,2322],"source":"The binary predicate `greater`< `Type`> provides a strict weak ordering of a set of element values of type `Type` into equivalence classes, if and only if this type satisfies the standard mathematical requirements for being so ordered."},{"content":"The specializations for any pointer type yield a total ordering of elements, in that all elements of distinct values are ordered with respect to each other.","pos":[2323,2479]},{"content":"Example","pos":[2488,2495]},{"content":"Output","pos":[3645,3651]},{"content":"Requirements","pos":[3872,3884]},{"pos":[3888,3913],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[3920,3938],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[3947,3955]},{"content":"C++ Standard Library Reference","pos":[3960,3990]}],"content":"---\ntitle: \"greater Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"greater\"\n  - \"xfunctional/std::greater\"\n  - \"std.greater\"\n  - \"std::greater\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"greater struct\"\n  - \"greater function\"\nms.assetid: ebc348e1-edcd-466b-b21a-db95bd8f9079\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# greater Struct\nA binary predicate that performs the greater-than operation ( `operator>`) on its arguments.  \n  \n## Syntax  \n  \n```\ntemplate <class Type = void>\nstruct greater : public binary_function <Type, Type, bool>  \n{\n    bool operator()(\n    const Type& Left,\n    const Type& Right) const;\n\n };\n\n// specialized transparent functor for operator>\ntemplate <>\nstruct greater<void>  \n{\n  template <class T, class U>\n  auto operator()(T&& Left, U&& Right) const\n    ->  decltype(std::forward<T>(Left)> std::forward<U>(Right));\n };\n```  \n  \n#### Parameters  \n `Type`, `T`, `U`  \n Any type that supports an `operator>` that takes operands of the specified or inferred types.  \n  \n `Left`  \n The left operand of the greater-than operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`.  \n  \n `Right`  \n The right operand of the greater-than operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`.  \n  \n## Return Value  \n The result of `Left``>``Right`. The specialized template does perfect forwarding of the result, which has the type that's returned by `operator>`.  \n  \n## Remarks  \n The binary predicate `greater`< `Type`> provides a strict weak ordering of a set of element values of type `Type` into equivalence classes, if and only if this type satisfies the standard mathematical requirements for being so ordered. The specializations for any pointer type yield a total ordering of elements, in that all elements of distinct values are ordered with respect to each other.  \n  \n## Example  \n  \n```cpp  \n// functional_greater.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <algorithm>  \n#include <functional>  \n#include <cstdlib>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   vector <int> v1;  \n   vector <int>::iterator Iter1;  \n  \n   int i;  \n   for ( i = 0 ; i < 8 ; i++ )  \n   {  \n      v1.push_back( rand( ) );  \n   }  \n  \n   cout << \"Original vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   // To sort in ascending order,  \n   // use default binary predicate less<int>( )  \n   sort( v1.begin( ), v1.end( ) );  \n   cout << \"Sorted vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   // To sort in descending order,   \n   // specify binary predicate greater<int>( )  \n   sort( v1.begin( ), v1.end( ), greater<int>( ) );  \n   cout << \"Resorted vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n}  \n```  \n  \n## Output  \n  \n```\nOriginal vector v1 = (41 18467 6334 26500 19169 15724 11478 29358)\nSorted vector v1 = (41 6334 11478 15724 18467 19169 26500 29358)\nResorted vector v1 = (29358 26500 19169 18467 15724 11478 6334 41)\n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}