{"nodes":[{"pos":[12,52],"content":"MASM for x64 (ml64.exe) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"MASM for x64 (ml64.exe) | Microsoft Docs","pos":[0,40]}]},{"content":"MASM for x64 (ml64.exe)","pos":[579,602]},{"content":"ml64.exe is the assembler that accepts <ph id=\"ph1\">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph> assembly language.","pos":[603,727],"source":"ml64.exe is the assembler that accepts [!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)] assembly language."},{"content":"For information on ml64.exe compiler options, see <bpt id=\"p1\">[</bpt>ML and ML64 Command-Line Reference<ept id=\"p1\">](../../assembler/masm/ml-and-ml64-command-line-reference.md)</ept>.","pos":[728,875],"source":" For information on ml64.exe compiler options, see [ML and ML64 Command-Line Reference](../../assembler/masm/ml-and-ml64-command-line-reference.md)."},{"content":"Inline ASM is not supported for <ph id=\"ph1\">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph>.","pos":[882,981],"source":"Inline ASM is not supported for [!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]."},{"content":"Use MASM or compiler intrinsics (<bpt id=\"p1\">[</bpt>x64 Intrinsics<ept id=\"p1\">](http://msdn.microsoft.com/en-us/5d1f5d3e-156e-4ebf-932e-fd09be7ced62)</ept>).","pos":[982,1103],"source":" Use MASM or compiler intrinsics ([x64 Intrinsics](http://msdn.microsoft.com/en-us/5d1f5d3e-156e-4ebf-932e-fd09be7ced62))."},{"content":"The two workarounds are separate assembly with MASM (which supports x64 fully) and compiler intrinsics.","pos":[1110,1213]},{"content":"We’ve added a lot of intrinsics to allow customers to make use of special-function instructions (e.g. privileged, bit scan/test, interlocked, etc…) in as close to cross-platform a manner as possible.","pos":[1214,1413]},{"content":"ml64-Specific Directives","pos":[1422,1446]},{"content":"Use the following directives with ml64.exe:","pos":[1450,1493]},{"content":".ALLOCSTACK","pos":[1504,1515]},{"content":".ENDPROLOG","pos":[1567,1577]},{"content":".PUSHFRAME","pos":[1628,1638]},{"content":".PUSHREG","pos":[1689,1697]},{"content":".SAVEREG","pos":[1746,1754]},{"content":".SAVEXMM128","pos":[1803,1814]},{"content":".SETFRAME","pos":[1866,1875]},{"pos":[1921,2019],"content":"In addition, the <bpt id=\"p1\">[</bpt>PROC<ept id=\"p1\">](../../assembler/masm/proc.md)</ept> directive was updated for use with ml64.exe.","source":"In addition, the [PROC](../../assembler/masm/proc.md) directive was updated for use with ml64.exe."},{"content":"32-Bit Address Mode (Address Size Override)","pos":[2028,2071]},{"content":"MASM will emit the 0x67 address size override if a memory operand includes 32-bit registers.","pos":[2075,2167]},{"content":"For example, the following examples cause the address size override to be emitted:","pos":[2168,2250]},{"content":"MASM assumes that if a 32-bit displacement appears alone as a memory operand, 64-bit addressing is intended.","pos":[2420,2528]},{"content":"There is currently no support for 32-bit addressing with such operands.","pos":[2529,2600]},{"content":"Finally, mixing register sizes within a memory operand, as demonstrated in the following code, will generate an error.","pos":[2607,2725]},{"content":"See Also","pos":[2822,2830]},{"content":"Microsoft Macro Assembler Reference","pos":[2835,2870]}],"content":"---\ntitle: \"MASM for x64 (ml64.exe) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ml64.exe\"\n  - \"ml\"\nms.assetid: 89059103-f372-4968-80ea-0c7f90bb9c91\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# MASM for x64 (ml64.exe)\nml64.exe is the assembler that accepts [!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)] assembly language. For information on ml64.exe compiler options, see [ML and ML64 Command-Line Reference](../../assembler/masm/ml-and-ml64-command-line-reference.md).  \n  \n Inline ASM is not supported for [!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]. Use MASM or compiler intrinsics ([x64 Intrinsics](http://msdn.microsoft.com/en-us/5d1f5d3e-156e-4ebf-932e-fd09be7ced62)).  \n  \n The two workarounds are separate assembly with MASM (which supports x64 fully) and compiler intrinsics. We’ve added a lot of intrinsics to allow customers to make use of special-function instructions (e.g. privileged, bit scan/test, interlocked, etc…) in as close to cross-platform a manner as possible.  \n  \n## ml64-Specific Directives  \n Use the following directives with ml64.exe:  \n  \n-   [.ALLOCSTACK](../../assembler/masm/dot-allocstack.md)  \n  \n-   [.ENDPROLOG](../../assembler/masm/dot-endprolog.md)  \n  \n-   [.PUSHFRAME](../../assembler/masm/dot-pushframe.md)  \n  \n-   [.PUSHREG](../../assembler/masm/dot-pushreg.md)  \n  \n-   [.SAVEREG](../../assembler/masm/dot-savereg.md)  \n  \n-   [.SAVEXMM128](../../assembler/masm/dot-savexmm128.md)  \n  \n-   [.SETFRAME](../../assembler/masm/dot-setframe.md)  \n  \n In addition, the [PROC](../../assembler/masm/proc.md) directive was updated for use with ml64.exe.  \n  \n## 32-Bit Address Mode (Address Size Override)  \n MASM will emit the 0x67 address size override if a memory operand includes 32-bit registers. For example, the following examples cause the address size override to be emitted:  \n  \n```  \nmov rax, QWORD PTR [ecx]  \nmov eax, DWORD PTR [ecx*2+r10d]  \nmov eax, DWORD PTR [ecx*2+r10d+0100h]  \nprefetch [eax]  \nmovnti rax, QWORD PTR [r8d]  \n```  \n  \n MASM assumes that if a 32-bit displacement appears alone as a memory operand, 64-bit addressing is intended. There is currently no support for 32-bit addressing with such operands.  \n  \n Finally, mixing register sizes within a memory operand, as demonstrated in the following code, will generate an error.  \n  \n```  \nmov eax, DWORD PTR [rcx*2+r10d]  \nmov eax, DWORD PTR [ecx*2+r10+0100h]  \n```  \n  \n## See Also  \n [Microsoft Macro Assembler Reference](../../assembler/masm/microsoft-macro-assembler-reference.md)"}