{"nodes":[{"pos":[12,51],"content":"Compiler Warning C4484 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning C4484 | Microsoft Docs","pos":[0,39]}]},{"content":"Compiler Warning C4484","pos":[599,621]},{"content":"'override_function' : matches base ref class method 'base_class_function', but is not marked 'virtual', 'new' or 'override'; 'new' (and not 'virtual') is assumed","pos":[622,783]},{"content":"When compiling with <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>, the compiler will not implicitly override a base class function, which means the function will get a new slot in the vtable.","pos":[790,944],"source":"When compiling with **/clr**, the compiler will not implicitly override a base class function, which means the function will get a new slot in the vtable."},{"content":"To resolve, explicitly specify whether a function is an override.","pos":[945,1010]},{"content":"For more information, see:","pos":[1017,1043]},{"content":"/clr (Common Language Runtime Compilation)","pos":[1054,1096]},{"content":"override","pos":[1174,1182]},{"content":"new (new slot in vtable)","pos":[1246,1270]},{"content":"C4484 is always issued as an error.","pos":[1344,1379]},{"content":"Use the <bpt id=\"p1\">[</bpt>warning<ept id=\"p1\">](../../preprocessor/warning.md)</ept> pragma to suppress C4484.","pos":[1380,1454],"source":" Use the [warning](../../preprocessor/warning.md) pragma to suppress C4484."},{"content":"Example","pos":[1463,1470]},{"content":"The following sample generates C4484.","pos":[1474,1511]}],"content":"---\ntitle: \"Compiler Warning C4484 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4484\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4484\"\nms.assetid: 3d30e5b3-2297-45b7-a37a-1360056fdd0e\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning C4484\n'override_function' : matches base ref class method 'base_class_function', but is not marked 'virtual', 'new' or 'override'; 'new' (and not 'virtual') is assumed  \n  \n When compiling with **/clr**, the compiler will not implicitly override a base class function, which means the function will get a new slot in the vtable. To resolve, explicitly specify whether a function is an override.  \n  \n For more information, see:  \n  \n-   [/clr (Common Language Runtime Compilation)](../../build/reference/clr-common-language-runtime-compilation.md)  \n  \n-   [override](../../windows/override-cpp-component-extensions.md)  \n  \n-   [new (new slot in vtable)](../../windows/new-new-slot-in-vtable-cpp-component-extensions.md)  \n  \n C4484 is always issued as an error. Use the [warning](../../preprocessor/warning.md) pragma to suppress C4484.  \n  \n## Example  \n The following sample generates C4484.  \n  \n```  \n// C4484.cpp  \n// compile with: /clr  \nref struct A {  \n   virtual void Test() {}  \n};  \n  \nref struct B : A {  \n   void Test() {}   // C4484  \n};  \n  \n// OK  \nref struct C {  \n   virtual void Test() {}  \n   virtual void Test2() {}  \n};  \n  \nref struct D : C {  \n   virtual void Test() new {}  \n   virtual void Test2() override {}  \n};  \n```"}