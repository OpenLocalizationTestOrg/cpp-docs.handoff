{"nodes":[{"pos":[12,60],"content":"Range-based for Statement (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Range-based for Statement (C++) | Microsoft Docs","pos":[0,48]}]},{"content":"Range-based for Statement (C++)","pos":[552,583]},{"pos":[584,666],"content":"Executes <ph id=\"ph1\">`statement`</ph> repeatedly and sequentially for each element in <ph id=\"ph2\">`expression`</ph>.","source":"Executes `statement` repeatedly and sequentially for each element in `expression`."},{"content":"Syntax","pos":[675,681]},{"content":"Remarks","pos":[775,782]},{"content":"Use the range-based <ph id=\"ph1\">`for`</ph> statement to construct loops that must execute through a \"range\", which is defined as anything that you can iterate through—for example, <ph id=\"ph2\">`std::vector`</ph>, or any other STL sequence whose range is defined by a <ph id=\"ph3\">`begin()`</ph> and <ph id=\"ph4\">`end()`</ph>.","pos":[786,1040],"source":"Use the range-based `for` statement to construct loops that must execute through a \"range\", which is defined as anything that you can iterate through—for example, `std::vector`, or any other STL sequence whose range is defined by a `begin()` and `end()`."},{"content":"The name that is declared in the <ph id=\"ph1\">`for-range-declaration`</ph> portion is local to the <ph id=\"ph2\">`for`</ph> statement and cannot be re-declared in <ph id=\"ph3\">`expression`</ph> or <ph id=\"ph4\">`statement`</ph>.","pos":[1041,1195],"source":" The name that is declared in the `for-range-declaration` portion is local to the `for` statement and cannot be re-declared in `expression` or `statement`."},{"content":"Note that the <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept> keyword is preferred in the <ph id=\"ph1\">`for-range-declaration`</ph> portion of the statement.","pos":[1196,1314],"source":" Note that the [auto](../cpp/auto-cpp.md) keyword is preferred in the `for-range-declaration` portion of the statement."},{"pos":[1321,1408],"content":"This code shows how to use ranged <ph id=\"ph1\">`for`</ph> loops to iterate through an array and a vector:","source":"This code shows how to use ranged `for` loops to iterate through an array and a vector:"},{"content":"Here is the output:","pos":[2988,3007]},{"content":"A range-based <ph id=\"ph1\">`for`</ph> loop terminates when one of these in <ph id=\"ph2\">`statement`</ph> is executed: a <bpt id=\"p1\">[</bpt>break<ept id=\"p1\">](../cpp/break-statement-cpp.md)</ept>, <bpt id=\"p2\">[</bpt>return<ept id=\"p2\">](../cpp/return-statement-cpp.md)</ept>, or <bpt id=\"p3\">[</bpt>goto<ept id=\"p3\">](../cpp/goto-statement-cpp.md)</ept> to a labeled statement outside the range-based <bpt id=\"p4\">**</bpt>for<ept id=\"p4\">**</ept> loop.","pos":[3279,3545],"source":"A range-based `for` loop terminates when one of these in `statement` is executed: a [break](../cpp/break-statement-cpp.md), [return](../cpp/return-statement-cpp.md), or [goto](../cpp/goto-statement-cpp.md) to a labeled statement outside the range-based **for** loop."},{"content":"A <bpt id=\"p1\">[</bpt>continue<ept id=\"p1\">](../cpp/continue-statement-cpp.md)</ept> statement in a range-based <ph id=\"ph1\">`for`</ph> loop terminates only the current iteration.","pos":[3546,3669],"source":" A [continue](../cpp/continue-statement-cpp.md) statement in a range-based `for` loop terminates only the current iteration."},{"pos":[3676,3725],"content":"Keep in mind these facts about range-based <ph id=\"ph1\">`for`</ph>:","source":"Keep in mind these facts about range-based `for`:"},{"content":"Automatically recognizes arrays.","pos":[3735,3767]},{"pos":[3777,3833],"content":"Recognizes containers that have <ph id=\"ph1\">`.begin()`</ph> and <ph id=\"ph2\">`.end()`</ph>.","source":"Recognizes containers that have `.begin()` and `.end()`."},{"pos":[3843,3914],"content":"Uses argument-dependent lookup <ph id=\"ph1\">`begin()`</ph> and <ph id=\"ph2\">`end()`</ph> for anything else.","source":"Uses argument-dependent lookup `begin()` and `end()` for anything else."},{"content":"See Also","pos":[3923,3931]},{"content":"auto","pos":[3936,3940]},{"content":"Iteration Statements","pos":[3967,3987]},{"content":"Keywords","pos":[4030,4038]},{"content":"while Statement (C++)","pos":[4069,4090]},{"content":"do-while Statement (C++)","pos":[4128,4152]},{"content":"for Statement (C++)","pos":[4193,4212]}],"content":"---\ntitle: \"Range-based for Statement (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nms.assetid: 5750ba1d-ba48-4236-a923-e32de8345c2d\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Range-based for Statement (C++)\nExecutes `statement` repeatedly and sequentially for each element in `expression`.  \n  \n## Syntax  \n  \n```  \n  \n      for ( for-range-declaration : expression )  \n   statement   \n```  \n  \n## Remarks  \n Use the range-based `for` statement to construct loops that must execute through a \"range\", which is defined as anything that you can iterate through—for example, `std::vector`, or any other STL sequence whose range is defined by a `begin()` and `end()`. The name that is declared in the `for-range-declaration` portion is local to the `for` statement and cannot be re-declared in `expression` or `statement`. Note that the [auto](../cpp/auto-cpp.md) keyword is preferred in the `for-range-declaration` portion of the statement.  \n  \n This code shows how to use ranged `for` loops to iterate through an array and a vector:  \n  \n```cpp  \n  \n// range-based-for.cpp  \n// compile by using: cl /EHsc /nologo /W4  \n#include <iostream>  \n#include <vector>  \nusing namespace std;  \n  \nint main()   \n{  \n    // Basic 10-element integer array.  \n    int x[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };  \n  \n    // Range-based for loop to iterate through the array.  \n    for( int y : x ) { // Access by value using a copy declared as a specific type.   \n                       // Not preferred.  \n        cout << y << \" \";  \n    }  \n    cout << endl;  \n  \n    // The auto keyword causes type inference to be used. Preferred.  \n  \n    for( auto y : x ) { // Copy of 'x', almost always undesirable  \n        cout << y << \" \";  \n    }  \n    cout << endl;  \n  \n    for( auto &y : x ) { // Type inference by reference.  \n        // Observes and/or modifies in-place. Preferred when modify is needed.  \n        cout << y << \" \";  \n    }  \n    cout << endl;  \n  \n    for( const auto &y : x ) { // Type inference by reference.  \n        // Observes in-place. Preferred when no modify is needed.  \n        cout << y << \" \";  \n    }  \n    cout << endl;  \n    cout << \"end of integer array test\" << endl;  \n    cout << endl;  \n  \n    // Create a vector object that contains 10 elements.  \n    vector<double> v;  \n    for (int i = 0; i < 10; ++i) {  \n        v.push_back(i + 0.14159);  \n    }  \n  \n    // Range-based for loop to iterate through the vector, observing in-place.  \n    for( const auto &j : v ) {  \n        cout << j << \" \";  \n    }  \n    cout << endl;  \n    cout << \"end of vector test\" << endl;  \n}  \n  \n```  \n  \n Here is the output:  \n  \n `1 2 3 4 5 6 7 8 9 10`  \n  \n `1 2 3 4 5 6 7 8 9 10`  \n  \n `1 2 3 4 5 6 7 8 9 10`  \n  \n `1 2 3 4 5 6 7 8 9 10`  \n  \n `end of integer array test`  \n  \n `0.14159 1.14159 2.14159 3.14159 4.14159 5.14159 6.14159 7.14159 8.14159 9.14159`  \n  \n `end of vector test`  \n  \n A range-based `for` loop terminates when one of these in `statement` is executed: a [break](../cpp/break-statement-cpp.md), [return](../cpp/return-statement-cpp.md), or [goto](../cpp/goto-statement-cpp.md) to a labeled statement outside the range-based **for** loop. A [continue](../cpp/continue-statement-cpp.md) statement in a range-based `for` loop terminates only the current iteration.  \n  \n Keep in mind these facts about range-based `for`:  \n  \n-   Automatically recognizes arrays.  \n  \n-   Recognizes containers that have `.begin()` and `.end()`.  \n  \n-   Uses argument-dependent lookup `begin()` and `end()` for anything else.  \n  \n## See Also  \n [auto](../cpp/auto-cpp.md)   \n [Iteration Statements](../cpp/iteration-statements-cpp.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [while Statement (C++)](../cpp/while-statement-cpp.md)   \n [do-while Statement (C++)](../cpp/do-while-statement-cpp.md)   \n [for Statement (C++)](../cpp/for-statement-cpp.md)"}