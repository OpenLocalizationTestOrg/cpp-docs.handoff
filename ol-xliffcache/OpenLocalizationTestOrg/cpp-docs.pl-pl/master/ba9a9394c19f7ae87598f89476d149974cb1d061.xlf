<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba9a9394c19f7ae87598f89476d149974cb1d061</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\implementation-of-a-custom-string-manager-advanced-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9c13fd2472497cb99180d035b8f9f6a8e592842</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">719dfe96216c597f4829030cf33642909e55279e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implementation of a Custom String Manager (Advanced Method) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implementation of a Custom String Manager (Advanced Method)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In specialized situations, you might want to implement a custom string manager that does more than just change which heap is used to allocate memory.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this situation, you must manually implement the <bpt id="p1">[</bpt>IAtlStringMgr<ept id="p1">](../atl-mfc-shared/reference/iatlstringmgr-class.md)</ept> interface as your custom string manager.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In order to do this, it is important to first understand how <bpt id="p1">[</bpt>CStringT<ept id="p1">](../atl-mfc-shared/reference/cstringt-class.md)</ept> uses that interface to manage its string data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Every instance of <ph id="ph1">`CStringT`</ph> has a pointer to a <bpt id="p1">[</bpt>CStringData<ept id="p1">](../atl-mfc-shared/reference/cstringdata-class.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This variable-length structure contains important information about the string (such as length), as well as the actual character data for the string.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Every custom string manager is responsible for allocating and freeing these structures at the request of <ph id="ph1">`CStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CStringData`</ph> structure comprises four fields:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pStringMgr<ept id="p1">](../atl-mfc-shared/reference/cstringdata-class.md#cstringdata__pstringmgr)</ept> This field points to the <ph id="ph1">`IAtlStringMgr`</ph> interface used to manage this string data.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`CStringT`</ph> needs to reallocate or free the string buffer it calls the Reallocate or Free methods of this interface, passing the <ph id="ph2">`CStringData`</ph> structure as a parameter.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When allocating a <ph id="ph1">`CStringData`</ph> structure in your string manager, you must set this field to point to your custom string manager.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>nDataLength<ept id="p1">](../atl-mfc-shared/reference/cstringdata-class.md#cstringdata__ndatalength)</ept> This field contains the current logical length of the string stored in the buffer excluding the terminating null.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>updates this field when the length of the string changes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When allocating a <ph id="ph1">`CStringData`</ph> structure, your string manager must set this field to zero.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When reallocating a <ph id="ph1">`CStringData`</ph> structure, your custom string manager must leave this field unchanged.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>nAllocLength<ept id="p1">](../atl-mfc-shared/reference/cstringdata-class.md#cstringdata__nalloclength)</ept> This field contains the maximum number of characters (excluding the terminating null) that can be stored in this string buffer without reallocating it.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Whenever <ph id="ph1">`CStringT`</ph> needs to increase the logical length of the string, it first checks this field to make sure there is enough space in the buffer.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the check fails, <ph id="ph1">`CStringT`</ph> calls into your custom string manager to reallocate the buffer.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When allocating or reallocating a <ph id="ph1">`CStringData`</ph> structure, you must set this field to at least the number of characters requested in the <bpt id="p1">**</bpt>nChars<ept id="p1">**</ept> parameter to <bpt id="p2">[</bpt>IAtlStringMgr::Allocate<ept id="p2">](../atl-mfc-shared/reference/iatlstringmgr-class.md#iatlstringmgr__allocate)</ept> or <bpt id="p3">[</bpt>IAtlStringMgr::Reallocate<ept id="p3">](../atl-mfc-shared/reference/iatlstringmgr-class.md#iatlstringmgr__reallocate)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If there is more space in the buffer than requested, you can set this value to reflect the actual amount of space available.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This allows <ph id="ph1">`CStringT`</ph> to grow the string to fill the entire allocated space before it has to call back into the string manager to reallocate the buffer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>nRefs<ept id="p1">](../atl-mfc-shared/reference/cstringdata-class.md#cstringdata__nrefs)</ept> This field contains the current reference count of the string buffer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the value is one, then a single instance of <ph id="ph1">`CStringT`</ph> is using the buffer.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In addition, the instance is allowed to both read and modify the contents of the buffer.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the value is greater than one, multiple instances of <ph id="ph1">`CStringT`</ph> can use the buffer.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Because the character buffer is shared, <ph id="ph1">`CStringT`</ph> instances can only read the contents of the buffer.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To modify the contents, <ph id="ph1">`CStringT`</ph> first makes a copy of the buffer.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the value is negative, only one instance of <ph id="ph1">`CStringT`</ph> is using the buffer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this case, the buffer is considered locked.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`CStringT`</ph> instance is using a locked buffer no other instances of <ph id="ph2">`CStringT`</ph> may share the buffer.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Instead, these instances create a copy of the buffer before manipulating the contents.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`CStringT`</ph> instance using the locked buffer does not attempt to share the buffer of any other <ph id="ph2">`CStringT`</ph> instance assigned to it.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`CStringT`</ph> instance copies the other string into the locked buffer.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When allocating a <ph id="ph1">`CStringData`</ph> structure, you must set this field to reflect the type of sharing that is allowed for the buffer.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For most implementations, set this value to one.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This allows the usual copy-on-write sharing behavior.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, if your string manager does not support sharing the string buffer, set this field to a locked state.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This forces <ph id="ph1">`CStringT`</ph> to only use this buffer for the instance of <ph id="ph2">`CStringT`</ph> that allocated it.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Memory Management with CStringT</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>