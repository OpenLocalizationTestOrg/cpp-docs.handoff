{"nodes":[{"pos":[12,50],"content":"is_literal_type Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_literal_type Class | Microsoft Docs","pos":[0,38]}]},{"pos":[713,734],"content":"is_literal_type Class","linkify":"is_literal_type Class","nodes":[{"content":"is_literal_type Class","pos":[0,21]}]},{"pos":[735,861],"content":"Tests whether a type can be used as a <ph id=\"ph1\">`constexpr`</ph> variable or be constructed, used by, or returned from <ph id=\"ph2\">`constexpr`</ph> functions.","source":"Tests whether a type can be used as a `constexpr` variable or be constructed, used by, or returned from `constexpr` functions."},{"pos":[870,876],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[945,955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type to query.","pos":[966,984]},{"pos":[993,1000],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An instance of the type predicate holds true if the type <ph id=\"ph1\">`T`</ph> is a <bpt id=\"p1\">*</bpt>literal type<ept id=\"p1\">*</ept>, otherwise it holds false.","pos":[1004,1111],"source":"An instance of the type predicate holds true if the type `T` is a *literal type*, otherwise it holds false."},{"content":"A literal type is either <ph id=\"ph1\">`void`</ph>, a scalar type, a reference type, an array of literal type, or a literal class type.","pos":[1112,1228],"source":" A literal type is either `void`, a scalar type, a reference type, an array of literal type, or a literal class type."},{"content":"A literal class type is a class type that has a trivial destructor, is either an aggregate type or has at least one non-move, non-copy <ph id=\"ph1\">`constexpr`</ph> constructor, and all of its base classes and non-static data members are non-volatile literal types.","pos":[1229,1476],"source":" A literal class type is a class type that has a trivial destructor, is either an aggregate type or has at least one non-move, non-copy `constexpr` constructor, and all of its base classes and non-static data members are non-volatile literal types."},{"content":"While the type of a literal is always a literal type, the concept of a literal type includes anything that the compiler can evaluate as a <ph id=\"ph1\">`constexpr`</ph> at compile time.","pos":[1477,1643],"source":" While the type of a literal is always a literal type, the concept of a literal type includes anything that the compiler can evaluate as a `constexpr` at compile time."},{"pos":[1652,1664],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1668,1693],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[1700,1718],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1727,1735],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1739,1790],"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>","source":"[<type_traits>](../standard-library/type-traits.md)"}],"content":"---\ntitle: \"is_literal_type Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"cpp\"\n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"is_literal_type\"\n  - \"std.is_literal_type\"\n  - \"std::is_literal_type\"\n  - \"type_traits/std::is_literal_type\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"is_literal_type\"\nms.assetid: a03a4ebb-ee66-48d6-91bb-41cf72b2401f\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_literal_type Class\nTests whether a type can be used as a `constexpr` variable or be constructed, used by, or returned from `constexpr` functions.  \n  \n## Syntax  \n  \n```\ntemplate <class T>  \nstruct is_literal_type;\n```  \n  \n#### Parameters  \n `T`  \n The type to query.  \n  \n## Remarks  \n An instance of the type predicate holds true if the type `T` is a *literal type*, otherwise it holds false. A literal type is either `void`, a scalar type, a reference type, an array of literal type, or a literal class type. A literal class type is a class type that has a trivial destructor, is either an aggregate type or has at least one non-move, non-copy `constexpr` constructor, and all of its base classes and non-static data members are non-volatile literal types. While the type of a literal is always a literal type, the concept of a literal type includes anything that the compiler can evaluate as a `constexpr` at compile time.  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)\n\n\n\n"}