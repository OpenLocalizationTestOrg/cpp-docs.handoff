{"nodes":[{"pos":[12,56],"content":"Database Macros and Globals | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Database Macros and Globals | Microsoft Docs","pos":[0,44]}]},{"pos":[775,802],"content":"Database Macros and Globals","linkify":"Database Macros and Globals","nodes":[{"content":"Database Macros and Globals","pos":[0,27]}]},{"content":"The macros and globals listed below apply to ODBC-based database applications.","pos":[803,881]},{"content":"They are not used with DAO-based applications.","pos":[882,928]},{"content":"Before MFC 4.2, the macros <ph id=\"ph1\">`AFX_SQL_ASYNC`</ph> and <ph id=\"ph2\">`AFX_SQL_SYNC`</ph> gave asynchronous operations an opportunity to yield time to other processes.","pos":[935,1074],"source":"Before MFC 4.2, the macros `AFX_SQL_ASYNC` and `AFX_SQL_SYNC` gave asynchronous operations an opportunity to yield time to other processes."},{"content":"Beginning with MFC 4.2, the implementation of these macros changed because the MFC ODBC classes used only synchronous operations.","pos":[1075,1204]},{"content":"The macro <ph id=\"ph1\">`AFX_ODBC_CALL`</ph> was new to MFC 4.2.","pos":[1205,1250],"source":" The macro `AFX_ODBC_CALL` was new to MFC 4.2."},{"pos":[1260,1275],"content":"Database Macros","linkify":"Database Macros","nodes":[{"content":"Database Macros","pos":[0,15]}]},{"pos":[1296,1327],"content":"<bpt id=\"p1\">[</bpt>AFX_ODBC_CALL<ept id=\"p1\">](#afx_odbc_call)</ept>","source":"[AFX_ODBC_CALL](#afx_odbc_call)"},{"content":"Calls an ODBC API function that returns <ph id=\"ph1\">`SQL_STILL_EXECUTING`</ph>.","pos":[1328,1390],"source":"Calls an ODBC API function that returns `SQL_STILL_EXECUTING`."},{"content":"<ph id=\"ph1\">`AFX_ODBC_CALL`</ph> will repeatedly call the function until it no longer returns <ph id=\"ph2\">`SQL_STILL_EXECUTING`</ph>.","pos":[1391,1490],"source":"`AFX_ODBC_CALL` will repeatedly call the function until it no longer returns `SQL_STILL_EXECUTING`."},{"pos":[1495,1526],"content":"<bpt id=\"p1\">[</bpt>AFX_SQL_ASYNC<ept id=\"p1\">](#afx_sql_async)</ept>","source":"[AFX_SQL_ASYNC](#afx_sql_async)"},{"pos":[1527,1549],"content":"Calls <ph id=\"ph1\">`AFX_ODBC_CALL`</ph>.","source":"Calls `AFX_ODBC_CALL`."},{"pos":[1554,1583],"content":"<bpt id=\"p1\">[</bpt>AFX_SQL_SYNC<ept id=\"p1\">](#afx_sql_sync)</ept>","source":"[AFX_SQL_SYNC](#afx_sql_sync)"},{"pos":[1584,1654],"content":"Calls an ODBC API function that does not return <ph id=\"ph1\">`SQL_STILL_EXECUTING`</ph>.","source":"Calls an ODBC API function that does not return `SQL_STILL_EXECUTING`."},{"pos":[1665,1681],"content":"Database Globals","linkify":"Database Globals","nodes":[{"content":"Database Globals","pos":[0,16]}]},{"pos":[1702,1727],"content":"<bpt id=\"p1\">[</bpt>AfxGetHENV<ept id=\"p1\">](#afxgethenv)</ept>","source":"[AfxGetHENV](#afxgethenv)"},{"content":"Retrieves a handle to the ODBC environment currently in use by MFC.","pos":[1728,1795]},{"content":"You can use this handle in direct ODBC calls.","pos":[1796,1841]},{"pos":[1852,1895],"content":"<bpt id=\"p1\">&lt;a name=\"afx_odbc_call\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AFX_ODBC_CALL","linkify":"<a name=\"afx_odbc_call\"></a>  AFX_ODBC_CALL","source":"<a name=\"afx_odbc_call\"></a>  AFX_ODBC_CALL"},{"pos":[1899,1982],"content":"Use this macro to call any ODBC API function that may return <ph id=\"ph1\">`SQL_STILL_EXECUTING`</ph>.","source":"Use this macro to call any ODBC API function that may return `SQL_STILL_EXECUTING`."},{"pos":[2032,2042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An ODBC API function.","pos":[2059,2080]},{"content":"For more information about ODBC API functions, see the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[2081,2188],"source":" For more information about ODBC API functions, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[2198,2205],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2209,2304],"content":"<ph id=\"ph1\">`AFX_ODBC_CALL`</ph> repeatedly calls the function until it no longer returns <ph id=\"ph2\">`SQL_STILL_EXECUTING`</ph>.","source":"`AFX_ODBC_CALL` repeatedly calls the function until it no longer returns `SQL_STILL_EXECUTING`."},{"pos":[2311,2405],"content":"Before invoking <ph id=\"ph1\">`AFX_ODBC_CALL`</ph>, you must declare a variable, <ph id=\"ph2\">`nRetCode`</ph>, of type <bpt id=\"p1\">**</bpt>RETCODE<ept id=\"p1\">**</ept>.","source":"Before invoking `AFX_ODBC_CALL`, you must declare a variable, `nRetCode`, of type **RETCODE**."},{"content":"Note that the MFC ODBC classes now use only synchronous processing.","pos":[2412,2479]},{"content":"In order to perform an asynchronous operation, you must call the ODBC API function <bpt id=\"p1\">**</bpt>SQLSetConnectOption<ept id=\"p1\">**</ept>.","pos":[2480,2587],"source":" In order to perform an asynchronous operation, you must call the ODBC API function **SQLSetConnectOption**."},{"content":"For more information, see the topic \"Executing Functions Asynchronously\" in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[2588,2720],"source":" For more information, see the topic \"Executing Functions Asynchronously\" in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[2730,2737],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses <ph id=\"ph1\">`AFX_ODBC_CALL`</ph> to call the <bpt id=\"p1\">**</bpt>SQLColumns<ept id=\"p1\">**</ept> ODBC API function, which returns a list of the columns in the table named by <ph id=\"ph2\">`strTableName`</ph>.","pos":[2741,2894],"source":"This example uses `AFX_ODBC_CALL` to call the **SQLColumns** ODBC API function, which returns a list of the columns in the table named by `strTableName`."},{"content":"Note the declaration of <ph id=\"ph1\">`nRetCode`</ph> and the use of recordset data members to pass parameters to the function.","pos":[2895,3003],"source":" Note the declaration of `nRetCode` and the use of recordset data members to pass parameters to the function."},{"content":"The example also illustrates checking the results of the call with <bpt id=\"p1\">**</bpt>Check<ept id=\"p1\">**</ept>, a member function of class <ph id=\"ph1\">`CRecordset`</ph>.","pos":[3004,3122],"source":" The example also illustrates checking the results of the call with **Check**, a member function of class `CRecordset`."},{"content":"The variable <ph id=\"ph1\">`prs`</ph> is a pointer to a <ph id=\"ph2\">`CRecordset`</ph> object, declared elsewhere.","pos":[3123,3200],"source":" The variable `prs` is a pointer to a `CRecordset` object, declared elsewhere."},{"pos":[3207,3299],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDatabase#39<ept id=\"p2\">](../../mfc/codesnippet/cpp/database-macros-and-globals_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDatabase#39](../../mfc/codesnippet/cpp/database-macros-and-globals_1.cpp)]"},{"pos":[3309,3352],"content":"<bpt id=\"p1\">&lt;a name=\"afx_sql_async\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AFX_SQL_ASYNC","linkify":"<a name=\"afx_sql_async\"></a>  AFX_SQL_ASYNC","source":"<a name=\"afx_sql_async\"></a>  AFX_SQL_ASYNC"},{"content":"The implementation of this macro changed in MFC 4.2.","pos":[3356,3408]},{"pos":[3465,3475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <ph id=\"ph1\">`CRecordset`</ph> object or a <ph id=\"ph2\">`CDatabase`</ph> object.","pos":[3488,3547],"source":" A pointer to a `CRecordset` object or a `CDatabase` object."},{"content":"Beginning with MFC 4.2, this parameter value is ignored.","pos":[3548,3604]},{"content":"An ODBC API function.","pos":[3624,3645]},{"content":"For more information about ODBC API functions, see the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[3646,3753],"source":" For more information about ODBC API functions, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[3763,3770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`AFX_SQL_ASYNC`</ph> simply calls the macro <bpt id=\"p1\">[</bpt>AFX_ODBC_CALL<ept id=\"p1\">](#afx_odbc_call)</ept> and ignores the <ph id=\"ph2\">`prs`</ph> parameter.","pos":[3774,3877],"source":"`AFX_SQL_ASYNC` simply calls the macro [AFX_ODBC_CALL](#afx_odbc_call) and ignores the `prs` parameter."},{"content":"In versions of MFC prior to 4.2, <ph id=\"ph1\">`AFX_SQL_ASYNC`</ph> was used to call ODBC API functions that might return <ph id=\"ph2\">`SQL_STILL_EXECUTING`</ph>.","pos":[3878,4003],"source":" In versions of MFC prior to 4.2, `AFX_SQL_ASYNC` was used to call ODBC API functions that might return `SQL_STILL_EXECUTING`."},{"content":"If an ODBC API function did return <ph id=\"ph1\">`SQL_STILL_EXECUTING`</ph>, then <ph id=\"ph2\">`AFX_SQL_ASYNC`</ph> would call <ph id=\"ph3\">`prs-&gt;OnWaitForDataSource`</ph>.","pos":[4004,4121],"source":" If an ODBC API function did return `SQL_STILL_EXECUTING`, then `AFX_SQL_ASYNC` would call `prs->OnWaitForDataSource`."},{"pos":[4129,4438],"content":"[!NOTE]\n The MFC ODBC classes now use only synchronous processing. In order to perform an asynchronous operation, you must call the ODBC API function **SQLSetConnectOption**. For more information, see the topic \"Executing Functions Asynchronously\" in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","leadings":["","> "],"nodes":[{"content":" The MFC ODBC classes now use only synchronous processing. In order to perform an asynchronous operation, you must call the ODBC API function **SQLSetConnectOption**. For more information, see the topic \"Executing Functions Asynchronously\" in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","pos":[8,307],"nodes":[{"content":"The MFC ODBC classes now use only synchronous processing.","pos":[1,58]},{"content":"In order to perform an asynchronous operation, you must call the ODBC API function <bpt id=\"p1\">**</bpt>SQLSetConnectOption<ept id=\"p1\">**</ept>.","pos":[59,166],"source":" In order to perform an asynchronous operation, you must call the ODBC API function **SQLSetConnectOption**."},{"content":"For more information, see the topic \"Executing Functions Asynchronously\" in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[167,299],"source":" For more information, see the topic \"Executing Functions Asynchronously\" in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."}]}]},{"pos":[4448,4489],"content":"<bpt id=\"p1\">&lt;a name=\"afx_sql_sync\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AFX_SQL_SYNC","linkify":"<a name=\"afx_sql_sync\"></a>  AFX_SQL_SYNC","source":"<a name=\"afx_sql_sync\"></a>  AFX_SQL_SYNC"},{"pos":[4493,4554],"content":"The <ph id=\"ph1\">`AFX_SQL_SYNC`</ph> macro simply calls the function <ph id=\"ph2\">`SQLFunc`</ph>.","source":"The `AFX_SQL_SYNC` macro simply calls the function `SQLFunc`."},{"pos":[4605,4615],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An ODBC API function.","pos":[4632,4653]},{"content":"For more information about these functions, see the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[4654,4758],"source":" For more information about these functions, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[4768,4775],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4779,4864],"content":"Use this macro to call ODBC API functions that will not return <ph id=\"ph1\">`SQL_STILL_EXECUTING`</ph>.","source":"Use this macro to call ODBC API functions that will not return `SQL_STILL_EXECUTING`."},{"content":"Before calling <ph id=\"ph1\">`AFX_SQL_SYNC`</ph>, you must declare a variable, <ph id=\"ph2\">`nRetCode`</ph>, of type <bpt id=\"p1\">**</bpt>RETCODE<ept id=\"p1\">**</ept>.","pos":[4871,4963],"source":"Before calling `AFX_SQL_SYNC`, you must declare a variable, `nRetCode`, of type **RETCODE**."},{"content":"You can check the value of <ph id=\"ph1\">`nRetCode`</ph> after the macro call.","pos":[4964,5023],"source":" You can check the value of `nRetCode` after the macro call."},{"content":"Note that the implementation of <ph id=\"ph1\">`AFX_SQL_SYNC`</ph> changed in MFC 4.2.","pos":[5030,5096],"source":"Note that the implementation of `AFX_SQL_SYNC` changed in MFC 4.2."},{"content":"Because checking the server status was no longer required, <ph id=\"ph1\">`AFX_SQL_SYNC`</ph> simply assigns a value to <ph id=\"ph2\">`nRetCode`</ph>.","pos":[5097,5208],"source":" Because checking the server status was no longer required, `AFX_SQL_SYNC` simply assigns a value to `nRetCode`."},{"content":"For example, instead of making the call","pos":[5209,5248]},{"pos":[5255,5347],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDatabase#40<ept id=\"p2\">](../../mfc/codesnippet/cpp/database-macros-and-globals_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDatabase#40](../../mfc/codesnippet/cpp/database-macros-and-globals_2.cpp)]"},{"content":"you can simply make the assignment","pos":[5354,5388]},{"pos":[5395,5487],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDatabase#41<ept id=\"p2\">](../../mfc/codesnippet/cpp/database-macros-and-globals_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDatabase#41](../../mfc/codesnippet/cpp/database-macros-and-globals_3.cpp)]"},{"pos":[5497,5534],"content":"<bpt id=\"p1\">&lt;a name=\"afxgethenv\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxGetHENV","linkify":"<a name=\"afxgethenv\"></a>  AfxGetHENV","source":"<a name=\"afxgethenv\"></a>  AfxGetHENV"},{"pos":[5538,5765],"content":"You can use the returned handle in direct ODBC calls, but you must not close the handle or assume that the handle is still valid and available after any existing <ph id=\"ph1\">`CDatabase`</ph>- or <ph id=\"ph2\">`CRecordset`</ph>-derived objects have been destroyed.","source":"You can use the returned handle in direct ODBC calls, but you must not close the handle or assume that the handle is still valid and available after any existing `CDatabase`- or `CRecordset`-derived objects have been destroyed."},{"pos":[5818,5830],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle to the ODBC environment currently in use by MFC.","pos":[5834,5893]},{"content":"Can be <ph id=\"ph1\">`SQL_HENV_NULL`</ph> if there are no <bpt id=\"p1\">[</bpt>CDatabase<ept id=\"p1\">](../../mfc/reference/cdatabase-class.md)</ept> objects and no <bpt id=\"p2\">[</bpt>CRecordset<ept id=\"p2\">](../../mfc/reference/crecordset-class.md)</ept> objects in use.","pos":[5894,6069],"source":" Can be `SQL_HENV_NULL` if there are no [CDatabase](../../mfc/reference/cdatabase-class.md) objects and no [CRecordset](../../mfc/reference/crecordset-class.md) objects in use."},{"pos":[6078,6086],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6090,6157],"content":"<bpt id=\"p1\">[</bpt>Macros and Globals<ept id=\"p1\">](../../mfc/reference/mfc-macros-and-globals.md)</ept>","source":"[Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)"}],"content":"---\ntitle: \"Database Macros and Globals | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.mfc.macros.data\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"global database functions [C++]\"\n  - \"database macros [C++]\"\n  - \"database globals [C++]\"\n  - \"global functions [C++], database functions\"\n  - \"macros [C++], MFC database\"\nms.assetid: 5b9b9e61-1cf9-4345-9f29-3807dd466488\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Database Macros and Globals\nThe macros and globals listed below apply to ODBC-based database applications. They are not used with DAO-based applications.  \n  \n Before MFC 4.2, the macros `AFX_SQL_ASYNC` and `AFX_SQL_SYNC` gave asynchronous operations an opportunity to yield time to other processes. Beginning with MFC 4.2, the implementation of these macros changed because the MFC ODBC classes used only synchronous operations. The macro `AFX_ODBC_CALL` was new to MFC 4.2.  \n  \n### Database Macros  \n  \n|||  \n|-|-|  \n|[AFX_ODBC_CALL](#afx_odbc_call)|Calls an ODBC API function that returns `SQL_STILL_EXECUTING`. `AFX_ODBC_CALL` will repeatedly call the function until it no longer returns `SQL_STILL_EXECUTING`.|  \n|[AFX_SQL_ASYNC](#afx_sql_async)|Calls `AFX_ODBC_CALL`.|  \n|[AFX_SQL_SYNC](#afx_sql_sync)|Calls an ODBC API function that does not return `SQL_STILL_EXECUTING`.|  \n  \n### Database Globals  \n  \n|||  \n|-|-|  \n|[AfxGetHENV](#afxgethenv)|Retrieves a handle to the ODBC environment currently in use by MFC. You can use this handle in direct ODBC calls.|  \n  \n##  <a name=\"afx_odbc_call\"></a>  AFX_ODBC_CALL  \n Use this macro to call any ODBC API function that may return `SQL_STILL_EXECUTING`.  \n  \n```  \nAFX_ODBC_CALL(SQLFunc)  \n```  \n  \n### Parameters  \n `SQLFunc`  \n An ODBC API function. For more information about ODBC API functions, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n `AFX_ODBC_CALL` repeatedly calls the function until it no longer returns `SQL_STILL_EXECUTING`.  \n  \n Before invoking `AFX_ODBC_CALL`, you must declare a variable, `nRetCode`, of type **RETCODE**.  \n  \n Note that the MFC ODBC classes now use only synchronous processing. In order to perform an asynchronous operation, you must call the ODBC API function **SQLSetConnectOption**. For more information, see the topic \"Executing Functions Asynchronously\" in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n This example uses `AFX_ODBC_CALL` to call the **SQLColumns** ODBC API function, which returns a list of the columns in the table named by `strTableName`. Note the declaration of `nRetCode` and the use of recordset data members to pass parameters to the function. The example also illustrates checking the results of the call with **Check**, a member function of class `CRecordset`. The variable `prs` is a pointer to a `CRecordset` object, declared elsewhere.  \n  \n [!code-cpp[NVC_MFCDatabase#39](../../mfc/codesnippet/cpp/database-macros-and-globals_1.cpp)]  \n  \n##  <a name=\"afx_sql_async\"></a>  AFX_SQL_ASYNC  \n The implementation of this macro changed in MFC 4.2.  \n  \n```   \nAFX_SQL_ASYNC(prs, SQLFunc)   \n```  \n  \n### Parameters  \n `prs`  \n A pointer to a `CRecordset` object or a `CDatabase` object. Beginning with MFC 4.2, this parameter value is ignored.  \n  \n `SQLFunc`  \n An ODBC API function. For more information about ODBC API functions, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n `AFX_SQL_ASYNC` simply calls the macro [AFX_ODBC_CALL](#afx_odbc_call) and ignores the `prs` parameter. In versions of MFC prior to 4.2, `AFX_SQL_ASYNC` was used to call ODBC API functions that might return `SQL_STILL_EXECUTING`. If an ODBC API function did return `SQL_STILL_EXECUTING`, then `AFX_SQL_ASYNC` would call `prs->OnWaitForDataSource`.  \n  \n> [!NOTE]\n>  The MFC ODBC classes now use only synchronous processing. In order to perform an asynchronous operation, you must call the ODBC API function **SQLSetConnectOption**. For more information, see the topic \"Executing Functions Asynchronously\" in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"afx_sql_sync\"></a>  AFX_SQL_SYNC  \n The `AFX_SQL_SYNC` macro simply calls the function `SQLFunc`.  \n  \n```   \nAFX_SQL_SYNC(SQLFunc)   \n```  \n  \n### Parameters  \n `SQLFunc`  \n An ODBC API function. For more information about these functions, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n Use this macro to call ODBC API functions that will not return `SQL_STILL_EXECUTING`.  \n  \n Before calling `AFX_SQL_SYNC`, you must declare a variable, `nRetCode`, of type **RETCODE**. You can check the value of `nRetCode` after the macro call.  \n  \n Note that the implementation of `AFX_SQL_SYNC` changed in MFC 4.2. Because checking the server status was no longer required, `AFX_SQL_SYNC` simply assigns a value to `nRetCode`. For example, instead of making the call  \n  \n [!code-cpp[NVC_MFCDatabase#40](../../mfc/codesnippet/cpp/database-macros-and-globals_2.cpp)]  \n  \n you can simply make the assignment  \n  \n [!code-cpp[NVC_MFCDatabase#41](../../mfc/codesnippet/cpp/database-macros-and-globals_3.cpp)]  \n  \n##  <a name=\"afxgethenv\"></a>  AfxGetHENV  \n You can use the returned handle in direct ODBC calls, but you must not close the handle or assume that the handle is still valid and available after any existing `CDatabase`- or `CRecordset`-derived objects have been destroyed.  \n  \n```   \nHENV AFXAPI AfxGetHENV(); \n```  \n  \n### Return Value  \n The handle to the ODBC environment currently in use by MFC. Can be `SQL_HENV_NULL` if there are no [CDatabase](../../mfc/reference/cdatabase-class.md) objects and no [CRecordset](../../mfc/reference/crecordset-class.md) objects in use.  \n  \n## See Also  \n [Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)\n"}