{"nodes":[{"pos":[12,51],"content":"extent Class (C++ AMP) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"extent Class (C++ AMP) | Microsoft Docs","pos":[0,39]}]},{"pos":[621,643],"content":"extent Class (C++ AMP)","linkify":"extent Class (C++ AMP)","nodes":[{"content":"extent Class (C++ AMP)","pos":[0,22]}]},{"content":"Represents a vector of <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> integer values that specify the bounds of an <bpt id=\"p2\">*</bpt>N<ept id=\"p2\">*</ept>-dimensional space that has an origin of 0.","pos":[644,762],"source":"Represents a vector of *N* integer values that specify the bounds of an *N*-dimensional space that has an origin of 0."},{"content":"The values in the vector are ordered from most significant to least significant.","pos":[763,843]},{"pos":[853,859],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[928,938],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The rank of the <ph id=\"ph1\">`extent`</ph> object.","pos":[953,985],"source":" The rank of the `extent` object."},{"pos":[993,1005],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1009,1026],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> amp.h","source":"**Header:** amp.h"},{"pos":[1033,1059],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Concurrency","source":"**Namespace:** Concurrency"},{"pos":[1068,1075],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1085,1104],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1111,1115]},{"content":"Description","pos":[1116,1127]},{"pos":[1165,1200],"content":"<bpt id=\"p1\">[</bpt>extent::extent Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[extent::extent Constructor](#ctor)"},{"pos":[1201,1250],"content":"Initializes a new instance of the <ph id=\"ph1\">`extent`</ph> class.","source":"Initializes a new instance of the `extent` class."},{"pos":[1261,1275],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1282,1286]},{"content":"Description","pos":[1287,1298]},{"pos":[1336,1372],"content":"<bpt id=\"p1\">[</bpt>extent::contains Method<ept id=\"p1\">](#contains)</ept>","source":"[extent::contains Method](#contains)"},{"pos":[1373,1440],"content":"Verifies that the specified <ph id=\"ph1\">`extent`</ph> object has the specified rank.","source":"Verifies that the specified `extent` object has the specified rank."},{"pos":[1445,1473],"content":"<bpt id=\"p1\">[</bpt>extent::size Method<ept id=\"p1\">](#size)</ept>","source":"[extent::size Method](#size)"},{"content":"Returns the total linear size of the extent (in units of elements).","pos":[1474,1541]},{"pos":[1546,1574],"content":"<bpt id=\"p1\">[</bpt>extent::tile Method<ept id=\"p1\">](#tile)</ept>","source":"[extent::tile Method](#tile)"},{"pos":[1575,1660],"content":"Produces a <ph id=\"ph1\">`tiled_extent`</ph> object with the tile extents given by specified dimensions.","source":"Produces a `tiled_extent` object with the tile extents given by specified dimensions."},{"pos":[1671,1687],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1694,1698]},{"content":"Description","pos":[1699,1710]},{"pos":[1748,1799],"content":"<bpt id=\"p1\">[</bpt>extent::operator- Operator<ept id=\"p1\">](#extent__operator_min)</ept>","source":"[extent::operator- Operator](#extent__operator_min)"},{"pos":[1800,1922],"content":"Returns a new <ph id=\"ph1\">`extent`</ph> object that's created by subtracting the <ph id=\"ph2\">`index`</ph> elements from the corresponding <ph id=\"ph3\">`extent`</ph> elements.","source":"Returns a new `extent` object that's created by subtracting the `index` elements from the corresponding `extent` elements."},{"pos":[1927,1983],"content":"<bpt id=\"p1\">[</bpt>extent::operator-- Operator<ept id=\"p1\">](#extent__operator_min_min)</ept>","source":"[extent::operator-- Operator](#extent__operator_min_min)"},{"pos":[1984,2031],"content":"Decrements each element of the <ph id=\"ph1\">`extent`</ph> object.","source":"Decrements each element of the `extent` object."},{"pos":[2036,2094],"content":"<bpt id=\"p1\">[</bpt>extent::operator(mod)= Operator<ept id=\"p1\">](#extent__operator_mod)</ept>=)","source":"[extent::operator(mod)= Operator](#extent__operator_mod)=)"},{"pos":[2095,2210],"content":"Calculates the modulus (remainder) of each element in the <ph id=\"ph1\">`extent`</ph> object when that element is divided by a number.","source":"Calculates the modulus (remainder) of each element in the `extent` object when that element is divided by a number."},{"pos":[2215,2271],"content":"<bpt id=\"p1\">[</bpt>extent::operator*= Operator<ept id=\"p1\">](#extent__operator_star_eq)</ept>","source":"[extent::operator*= Operator](#extent__operator_star_eq)"},{"pos":[2272,2331],"content":"Multiplies each element of the <ph id=\"ph1\">`extent`</ph> object by a number.","source":"Multiplies each element of the `extent` object by a number."},{"pos":[2336,2391],"content":"<bpt id=\"p1\">[</bpt>extent::operator/= Operator<ept id=\"p1\">](#extent__operator_min_eq)</ept>","source":"[extent::operator/= Operator](#extent__operator_min_eq)"},{"pos":[2392,2448],"content":"Divides each element of the <ph id=\"ph1\">`extent`</ph> object by a number.","source":"Divides each element of the `extent` object by a number."},{"pos":[2453,2497],"content":"<bpt id=\"p1\">[</bpt>extent::operator<ph id=\"ph1\">\\[</ph><ph id=\"ph2\">\\]</ph><ept id=\"p1\">](#extent__operator_at)</ept>","source":"[extent::operator\\[\\]](#extent__operator_at)"},{"content":"Returns the element that's at the specified index.","pos":[2498,2548]},{"pos":[2553,2604],"content":"<bpt id=\"p1\">[</bpt>extent::operator+ Operator<ept id=\"p1\">](#extent__operator_add)</ept>","source":"[extent::operator+ Operator](#extent__operator_add)"},{"pos":[2605,2708],"content":"Returns a new <ph id=\"ph1\">`extent`</ph> object that's created by adding the corresponding <ph id=\"ph2\">`index`</ph> and <ph id=\"ph3\">`extent`</ph> elements.","source":"Returns a new `extent` object that's created by adding the corresponding `index` and `extent` elements."},{"pos":[2713,2769],"content":"<bpt id=\"p1\">[</bpt>extent::operator++ Operator<ept id=\"p1\">](#extent__operator_add_add)</ept>","source":"[extent::operator++ Operator](#extent__operator_add_add)"},{"pos":[2770,2817],"content":"Increments each element of the <ph id=\"ph1\">`extent`</ph> object.","source":"Increments each element of the `extent` object."},{"pos":[2822,2877],"content":"<bpt id=\"p1\">[</bpt>extent::operator+= Operator<ept id=\"p1\">](#extent__operator_add_eq)</ept>","source":"[extent::operator+= Operator](#extent__operator_add_eq)"},{"pos":[2878,2943],"content":"Adds the specified number to each element of the <ph id=\"ph1\">`extent`</ph> object.","source":"Adds the specified number to each element of the `extent` object."},{"pos":[2948,2998],"content":"<bpt id=\"p1\">[</bpt>extent::operator= Operator<ept id=\"p1\">](#extent__operator_eq)</ept>","source":"[extent::operator= Operator](#extent__operator_eq)"},{"pos":[2999,3060],"content":"Copies the contents of another <ph id=\"ph1\">`extent`</ph> object into this one.","source":"Copies the contents of another `extent` object into this one."},{"pos":[3065,3120],"content":"<bpt id=\"p1\">[</bpt>extent::operator-= Operator<ept id=\"p1\">](#extent__operator_min_eq)</ept>","source":"[extent::operator-= Operator](#extent__operator_min_eq)"},{"pos":[3121,3193],"content":"Subtracts the specified number from each element of the <ph id=\"ph1\">`extent`</ph> object.","source":"Subtracts the specified number from each element of the `extent` object."},{"pos":[3205,3221],"content":"Public Constants","linkify":"Public Constants","nodes":[{"content":"Public Constants","pos":[0,16]}]},{"content":"Name","pos":[3228,3232]},{"content":"Description","pos":[3233,3244]},{"pos":[3282,3312],"content":"<bpt id=\"p1\">[</bpt>extent::rank Constant<ept id=\"p1\">](#rank)</ept>","source":"[extent::rank Constant](#rank)"},{"pos":[3313,3350],"content":"Gets the rank of the <ph id=\"ph1\">`extent`</ph> object.","source":"Gets the rank of the `extent` object."},{"pos":[3360,3381],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3401,3463],"content":"<bpt id=\"p1\">&lt;a name=\"extent__contains_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::contains Method","linkify":"<a name=\"extent__contains_method\"></a> extent::contains Method","source":"<a name=\"extent__contains_method\"></a> extent::contains Method"},{"pos":[3465,3567],"content":"Indicates whether the specified <bpt id=\"p1\">[</bpt>index<ept id=\"p1\">](index-class.md)</ept> value is contained within the `extent' object.","source":"Indicates whether the specified [index](index-class.md) value is contained within the `extent' object."},{"pos":[3577,3583],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3678,3688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`index`</ph> value to test.","pos":[3704,3730],"source":" The `index` value to test."},{"pos":[3740,3752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3756,3850],"content":"<ph id=\"ph1\">`true`</ph> if the specified <ph id=\"ph2\">`index`</ph> value is contained in the <ph id=\"ph3\">`extent`</ph> object; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the specified `index` value is contained in the `extent` object; otherwise, `false`."},{"pos":[3860,3914],"content":"<bpt id=\"p1\">&lt;a name=\"extent__ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::extent Constructor","linkify":"<a name=\"extent__ctor\"></a> extent::extent Constructor","source":"<a name=\"extent__ctor\"></a> extent::extent Constructor"},{"content":"Initializes a new instance of the `extent' class.","pos":[3917,3966]},{"pos":[3976,3982],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[4377,4387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An array of <ph id=\"ph1\">`_Rank`</ph> integers that is used to create the new <ph id=\"ph2\">`extent`</ph> object.","pos":[4403,4479],"source":" An array of `_Rank` integers that is used to create the new `extent` object."},{"content":"The length of the extent.","pos":[4494,4519]},{"content":"The length of the most significant dimension.","pos":[4535,4580]},{"content":"The length of the next-to-most-significant dimension.","pos":[4596,4649]},{"content":"The length of the least significant dimension.","pos":[4665,4711]},{"content":"An <ph id=\"ph1\">`extent`</ph> object on which the new <ph id=\"ph2\">`extent`</ph> object is based.","pos":[4730,4791],"source":" An `extent` object on which the new `extent` object is based."},{"pos":[4800,4807],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4811,4897],"content":"The parameterless constructor initializes an <ph id=\"ph1\">`extent`</ph> object that has a rank of three.","source":"The parameterless constructor initializes an `extent` object that has a rank of three."},{"pos":[4904,5024],"content":"If an array is used to construct an <ph id=\"ph1\">`extent`</ph> object, the length of the array must match the rank of the <ph id=\"ph2\">`extent`</ph> object.","source":"If an array is used to construct an `extent` object, the length of the array must match the rank of the `extent` object."},{"pos":[5034,5101],"content":"<bpt id=\"p1\">&lt;a name=\"extent__operator_mod\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::operator(mod)= Operator","linkify":"<a name=\"extent__operator_mod\"></a> extent::operator(mod)= Operator","source":"<a name=\"extent__operator_mod\"></a> extent::operator(mod)= Operator"},{"content":"Calculates the modulus (remainder) of each element in the `extent' when that element is divided by a number.","pos":[5103,5211]},{"pos":[5221,5227],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[5318,5328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number to find the modulus of.","pos":[5342,5376]},{"pos":[5386,5398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5402,5422],"content":"The <ph id=\"ph1\">`extent`</ph> object.","source":"The `extent` object."},{"pos":[5432,5499],"content":"<bpt id=\"p1\">&lt;a name=\"extent__operator_star_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::operator*= Operator","linkify":"<a name=\"extent__operator_star_eq\"></a> extent::operator*= Operator","source":"<a name=\"extent__operator_star_eq\"></a> extent::operator*= Operator"},{"content":"Multiplies each element in the `extent' object by the specified number.","pos":[5502,5573]},{"pos":[5583,5589],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[5675,5685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number to multiply.","pos":[5699,5722]},{"pos":[5732,5744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5748,5768],"content":"The <ph id=\"ph1\">`extent`</ph> object.","source":"The `extent` object."},{"pos":[5777,5803],"content":"extent::operator+ Operator","linkify":"extent::operator+ Operator","nodes":[{"content":"extent::operator+ Operator","pos":[0,26]}]},{"pos":[5806,5902],"content":"Returns a new <ph id=\"ph1\">`extent`</ph> object created by adding the corresponding <ph id=\"ph2\">`index`</ph> and <ph id=\"ph3\">`extent`</ph> elements.","source":"Returns a new `extent` object created by adding the corresponding `index` and `extent` elements."},{"pos":[5912,5918],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[6023,6033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`index`</ph> object that contains the elements to add.","pos":[6047,6100],"source":" The `index` object that contains the elements to add."},{"pos":[6110,6122],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6126,6150],"content":"The new <ph id=\"ph1\">`extent`</ph> object.","source":"The new `extent` object."},{"pos":[6160,6227],"content":"<bpt id=\"p1\">&lt;a name=\"extent__operator_add_add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::operator++ Operator","linkify":"<a name=\"extent__operator_add_add\"></a> extent::operator++ Operator","source":"<a name=\"extent__operator_add_add\"></a> extent::operator++ Operator"},{"content":"Increments each element of the `extent' object.","pos":[6230,6277]},{"pos":[6287,6293],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[6433,6445],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"For the prefix operator, the <ph id=\"ph1\">`extent`</ph> object (<ph id=\"ph2\">`*this`</ph>).","pos":[6449,6504],"source":"For the prefix operator, the `extent` object (`*this`)."},{"content":"For the suffix operator, a new <ph id=\"ph1\">`extent`</ph> object.","pos":[6505,6552],"source":" For the suffix operator, a new `extent` object."},{"pos":[6562,6628],"content":"<bpt id=\"p1\">&lt;a name=\"extent__operator_add_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::operator+= Operator","linkify":"<a name=\"extent__operator_add_eq\"></a> extent::operator+= Operator","source":"<a name=\"extent__operator_add_eq\"></a> extent::operator+= Operator"},{"content":"Adds the specified number to each element of the `extent' object.","pos":[6631,6696]},{"pos":[6706,6712],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[6977,6987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number, index, or extent to add.","pos":[7001,7037]},{"pos":[7047,7059],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7063,7093],"content":"The resulting <ph id=\"ph1\">`extent`</ph> object.","source":"The resulting `extent` object."},{"pos":[7103,7165],"content":"<bpt id=\"p1\">&lt;a name=\"extent__operator_min\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::operator- Operator","linkify":"<a name=\"extent__operator_min\"></a> extent::operator- Operator","source":"<a name=\"extent__operator_min\"></a> extent::operator- Operator"},{"pos":[7168,7313],"content":"Creates a new <ph id=\"ph1\">`extent`</ph> object by subtracting each element in the specified <ph id=\"ph2\">`index`</ph> object from the corresponding element in this <ph id=\"ph3\">`extent`</ph> object.","source":"Creates a new `extent` object by subtracting each element in the specified `index` object from the corresponding element in this `extent` object."},{"pos":[7323,7329],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[7434,7444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`index`</ph> object that contains the elements to subtract.","pos":[7458,7516],"source":" The `index` object that contains the elements to subtract."},{"pos":[7526,7538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7542,7566],"content":"The new <ph id=\"ph1\">`extent`</ph> object.","source":"The new `extent` object."},{"pos":[7576,7643],"content":"<bpt id=\"p1\">&lt;a name=\"extent__operator_min_min\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::operator-- Operator","linkify":"<a name=\"extent__operator_min_min\"></a> extent::operator-- Operator","source":"<a name=\"extent__operator_min_min\"></a> extent::operator-- Operator"},{"content":"Decrements each element in the `extent' object.","pos":[7646,7693]},{"pos":[7703,7709],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[7849,7861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"For the prefix operator, the <ph id=\"ph1\">`extent`</ph> object (<ph id=\"ph2\">`*this`</ph>).","pos":[7865,7920],"source":"For the prefix operator, the `extent` object (`*this`)."},{"content":"For the suffix operator, a new <ph id=\"ph1\">`extent`</ph> object.","pos":[7921,7968],"source":" For the suffix operator, a new `extent` object."},{"pos":[7978,8044],"content":"<bpt id=\"p1\">&lt;a name=\"extent__operator_div_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::operator/= Operator","linkify":"<a name=\"extent__operator_div_eq\"></a> extent::operator/= Operator","source":"<a name=\"extent__operator_div_eq\"></a> extent::operator/= Operator"},{"content":"Divides each element in the `extent' object by the specified number.","pos":[8047,8115]},{"pos":[8125,8131],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[8223,8233],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number to divide by.","pos":[8247,8271]},{"pos":[8281,8293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8297,8317],"content":"The <ph id=\"ph1\">`extent`</ph> object.","source":"The `extent` object."},{"pos":[8327,8393],"content":"<bpt id=\"p1\">&lt;a name=\"extent__operator_min_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::operator-= Operator","linkify":"<a name=\"extent__operator_min_eq\"></a> extent::operator-= Operator","source":"<a name=\"extent__operator_min_eq\"></a> extent::operator-= Operator"},{"content":"Subtracts the specified number from each element of the `extent' object.","pos":[8396,8468]},{"pos":[8478,8484],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[8749,8759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number to subtract.","pos":[8773,8796]},{"pos":[8806,8818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8822,8852],"content":"The resulting <ph id=\"ph1\">`extent`</ph> object.","source":"The resulting `extent` object."},{"pos":[8862,8923],"content":"<bpt id=\"p1\">&lt;a name=\"extent__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::operator= Operator","linkify":"<a name=\"extent__operator_eq\"></a> extent::operator= Operator","source":"<a name=\"extent__operator_eq\"></a> extent::operator= Operator"},{"content":"Copies the contents of another `extent' object into this one.","pos":[8926,8987]},{"pos":[8997,9003],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[9113,9123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`extent`</ph> object to copy from.","pos":[9139,9172],"source":" The `extent` object to copy from."},{"pos":[9182,9194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9198,9234],"content":"A reference to this <ph id=\"ph1\">`extent`</ph> object.","source":"A reference to this `extent` object."},{"pos":[9244,9300],"content":"<bpt id=\"p1\">&lt;a name=\"extent__operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::operator <ph id=\"ph1\">\\[</ph><ph id=\"ph2\">\\]</ph>","linkify":"<a name=\"extent__operator_at\"></a> extent::operator \\[\\]","source":"<a name=\"extent__operator_at\"></a> extent::operator \\[\\]"},{"content":"Returns the element that's at the specified index.","pos":[9302,9352]},{"pos":[9362,9368],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[9524,9534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An integer from 0 through the rank minus 1.","pos":[9550,9593]},{"pos":[9603,9615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The element that's at the specified index.","pos":[9619,9661]},{"pos":[9671,9729],"content":"<bpt id=\"p1\">&lt;a name=\"extent__rank_constant\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::rank Constant","linkify":"<a name=\"extent__rank_constant\"></a> extent::rank Constant","source":"<a name=\"extent__rank_constant\"></a> extent::rank Constant"},{"content":"Stores the rank of the `extent' object.","pos":[9732,9771]},{"pos":[9781,9787],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[9845,9899],"content":"<bpt id=\"p1\">&lt;a name=\"extent__size_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::size Method","linkify":"<a name=\"extent__size_method\"></a> extent::size Method","source":"<a name=\"extent__size_method\"></a> extent::size Method"},{"pos":[9902,9978],"content":"Returns the total linear size of the <ph id=\"ph1\">`extent`</ph> object (in units of elements).","source":"Returns the total linear size of the `extent` object (in units of elements)."},{"pos":[9988,9994],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[10063,10102],"content":"<bpt id=\"p1\">&lt;a name=\"tile\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> extent::tile Method","linkify":"<a name=\"tile\"></a> extent::tile Method","source":"<a name=\"tile\"></a> extent::tile Method"},{"content":"Produces a tiled_extent object with the specified tile dimensions.","pos":[10103,10169]},{"pos":[10433,10443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\">`_Dim0`</ph> The most significant component of the tiled extent.","pos":[10444,10503],"source":"`_Dim0`\nThe most significant component of the tiled extent."},{"content":"<ph id=\"ph1\">`_Dim1`</ph> The next-to-most-significant component of the tiled extent.","pos":[10504,10571],"source":"`_Dim1`\nThe next-to-most-significant component of the tiled extent."},{"content":"<ph id=\"ph1\">`_Dim2`</ph> The least significant component of the tiled extent.","pos":[10572,10632],"source":"`_Dim2`\nThe least significant component of the tiled extent."},{"pos":[10641,10649],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[10653,10720],"content":"<bpt id=\"p1\">[</bpt>Concurrency Namespace (C++ AMP)<ept id=\"p1\">](concurrency-namespace-cpp-amp.md)</ept>","source":"[Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)"}],"content":"---\ntitle: \"extent Class (C++ AMP) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"amp/Concurrency::extent\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"extent structure\"\nms.assetid: edb5de3d-3935-4dbb-8365-4cc6c4fb0269\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# extent Class (C++ AMP)\nRepresents a vector of *N* integer values that specify the bounds of an *N*-dimensional space that has an origin of 0. The values in the vector are ordered from most significant to least significant.  \n  \n### Syntax  \n  \n```  \ntemplate <\n    int _Rank>  \nclass extent;  \n```  \n  \n### Parameters  \n `_Rank`  \n The rank of the `extent` object.  \n\n ## Requirements  \n **Header:** amp.h  \n  \n **Namespace:** Concurrency  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[extent::extent Constructor](#ctor)|Initializes a new instance of the `extent` class.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[extent::contains Method](#contains)|Verifies that the specified `extent` object has the specified rank.|  \n|[extent::size Method](#size)|Returns the total linear size of the extent (in units of elements).|  \n|[extent::tile Method](#tile)|Produces a `tiled_extent` object with the tile extents given by specified dimensions.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[extent::operator- Operator](#extent__operator_min)|Returns a new `extent` object that's created by subtracting the `index` elements from the corresponding `extent` elements.|  \n|[extent::operator-- Operator](#extent__operator_min_min)|Decrements each element of the `extent` object.|  \n|[extent::operator(mod)= Operator](#extent__operator_mod)=)|Calculates the modulus (remainder) of each element in the `extent` object when that element is divided by a number.|  \n|[extent::operator*= Operator](#extent__operator_star_eq)|Multiplies each element of the `extent` object by a number.|  \n|[extent::operator/= Operator](#extent__operator_min_eq)|Divides each element of the `extent` object by a number.|  \n|[extent::operator\\[\\]](#extent__operator_at)|Returns the element that's at the specified index.|  \n|[extent::operator+ Operator](#extent__operator_add)|Returns a new `extent` object that's created by adding the corresponding `index` and `extent` elements.|  \n|[extent::operator++ Operator](#extent__operator_add_add)|Increments each element of the `extent` object.|  \n|[extent::operator+= Operator](#extent__operator_add_eq)|Adds the specified number to each element of the `extent` object.|  \n|[extent::operator= Operator](#extent__operator_eq)|Copies the contents of another `extent` object into this one.|  \n|[extent::operator-= Operator](#extent__operator_min_eq)|Subtracts the specified number from each element of the `extent` object.|  \n\n  \n### Public Constants  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[extent::rank Constant](#rank)|Gets the rank of the `extent` object.|  \n  \n## Inheritance Hierarchy  \n `extent`  \n\n\n## <a name=\"extent__contains_method\"></a> extent::contains Method \nIndicates whether the specified [index](index-class.md) value is contained within the `extent' object.  \n  \n### Syntax  \n  \n```  \nbool contains( const index<rank>& _Index ) const restrict(amp,cpu);  \n```  \n  \n### Parameters  \n `_Index`  \n The `index` value to test.  \n  \n### Return Value  \n `true` if the specified `index` value is contained in the `extent` object; otherwise, `false`.  \n  \n##  <a name=\"extent__ctor\"></a> extent::extent Constructor  \nInitializes a new instance of the `extent' class.  \n  \n### Syntax  \n  \n```  \nextent() restrict(amp,cpu);  \n  \nextent(  \n    const extent<_Rank>& _Other ) restrict(amp,cpu);  \n  \nexplicit extent(  \n    int _I ) restrict(amp,cpu);  \n  \nextent(  \n    int _I0,  \n    int _I1 ) restrict(amp,cpu);  \n  \nextent(  \n    int _I0,  \n    int _I1,  \n    int _I2 ) restrict(amp,cpu);  \n  \nexplicit extent(  \n    const int _Array[_Rank]  \n) restrict(amp,cpu);  \n```  \n  \n### Parameters  \n `_Array`  \n An array of `_Rank` integers that is used to create the new `extent` object.  \n  \n `_I`  \n The length of the extent.  \n  \n `_I0`  \n The length of the most significant dimension.  \n  \n `_I1`  \n The length of the next-to-most-significant dimension.  \n  \n `_I2`  \n The length of the least significant dimension.  \n  \n `_Other`  \n An `extent` object on which the new `extent` object is based.  \n  \n## Remarks  \n The parameterless constructor initializes an `extent` object that has a rank of three.  \n  \n If an array is used to construct an `extent` object, the length of the array must match the rank of the `extent` object.  \n  \n##  <a name=\"extent__operator_mod\"></a> extent::operator(mod)= Operator \nCalculates the modulus (remainder) of each element in the `extent' when that element is divided by a number.  \n  \n### Syntax  \n  \n```  \nextent<_Rank>&  operator%= (int _Rhs ) restrict(cpu, direct3d);  \n```  \n  \n### Parameters  \n `_Rhs`  \n The number to find the modulus of.  \n  \n### Return Value  \n The `extent` object.  \n  \n##  <a name=\"extent__operator_star_eq\"></a> extent::operator*= Operator  \nMultiplies each element in the `extent' object by the specified number.  \n  \n### Syntax  \n  \n```  \nextent<_Rank>&  operator*= ( int _Rhs ) restrict(amp,cpu);  \n```  \n  \n### Parameters  \n `_Rhs`  \n The number to multiply.  \n  \n### Return Value  \n The `extent` object.  \n  \n## extent::operator+ Operator  \nReturns a new `extent` object created by adding the corresponding `index` and `extent` elements.  \n  \n### Syntax  \n  \n```  \nextent<_Rank>  operator+(  \n    const index<_Rank>& _Rhs ) restrict(amp,cpu);  \n```  \n  \n### Parameters  \n `_Rhs`  \n The `index` object that contains the elements to add.  \n  \n### Return Value  \n The new `extent` object.  \n  \n##  <a name=\"extent__operator_add_add\"></a> extent::operator++ Operator  \nIncrements each element of the `extent' object.  \n  \n### Syntax  \n  \n```  \nextent<_Rank>&  operator++() restrict(amp,cpu);  \n  \nextent<_Rank>  operator++(  \n    int  \n) restrict(amp,cpu);  \n```  \n  \n### Return Value  \n For the prefix operator, the `extent` object (`*this`). For the suffix operator, a new `extent` object.  \n  \n##  <a name=\"extent__operator_add_eq\"></a> extent::operator+= Operator  \nAdds the specified number to each element of the `extent' object.  \n  \n### Syntax  \n  \n```  \nextent<_Rank>&  operator+= (  \n    const extent<_Rank>& _Rhs ) restrict(amp,cpu);  \n  \nextent<_Rank>&  operator+= (  \n    const index<_Rank>& _Rhs ) restrict(amp,cpu);  \n  \nextent<_Rank>&  operator+= (  \n    int _Rhs ) restrict(amp,cpu);  \n```  \n  \n### Parameters  \n `_Rhs`  \n The number, index, or extent to add.  \n  \n### Return Value  \n The resulting `extent` object.  \n  \n##  <a name=\"extent__operator_min\"></a> extent::operator- Operator  \nCreates a new `extent` object by subtracting each element in the specified `index` object from the corresponding element in this `extent` object.  \n  \n### Syntax  \n  \n```  \nextent<_Rank>  operator-(  \n    const index<_Rank>& _Rhs ) restrict(amp,cpu);  \n```  \n  \n### Parameters  \n `_Rhs`  \n The `index` object that contains the elements to subtract.  \n  \n### Return Value  \n The new `extent` object.  \n  \n##  <a name=\"extent__operator_min_min\"></a> extent::operator-- Operator  \nDecrements each element in the `extent' object.  \n  \n### Syntax  \n  \n```  \nextent<_Rank>&  operator--() restrict(amp,cpu);  \n  \nextent<_Rank>  operator--(  \n    int  \n) restrict(amp,cpu);  \n```  \n  \n### Return Value  \n For the prefix operator, the `extent` object (`*this`). For the suffix operator, a new `extent` object.  \n  \n##  <a name=\"extent__operator_div_eq\"></a> extent::operator/= Operator  \nDivides each element in the `extent' object by the specified number.  \n  \n### Syntax  \n  \n```  \nextent<_Rank>&  operator/= (  \n    int _Rhs ) restrict(amp,cpu);  \n```  \n  \n### Parameters  \n `_Rhs`  \n The number to divide by.  \n  \n### Return Value  \n The `extent` object.  \n  \n##  <a name=\"extent__operator_min_eq\"></a> extent::operator-= Operator  \nSubtracts the specified number from each element of the `extent' object.  \n  \n### Syntax  \n  \n```  \nextent<_Rank>&  operator-= (  \n    const extent<_Rank>& _Rhs ) restrict(amp,cpu);  \n  \nextent<_Rank>&  operator-= (  \n    const index<_Rank>& _Rhs ) restrict(amp,cpu);  \n  \nextent<_Rank>&  operator-= (  \n    int _Rhs ) restrict(amp,cpu);  \n```  \n  \n### Parameters  \n `_Rhs`  \n The number to subtract.  \n  \n### Return Value  \n The resulting `extent` object.  \n  \n##  <a name=\"extent__operator_eq\"></a> extent::operator= Operator  \nCopies the contents of another `extent' object into this one.  \n  \n### Syntax  \n  \n```  \nextent<_Rank>&  operator= (  \n    const extent<_Rank>& _Other ) restrict(amp,cpu);  \n```  \n  \n### Parameters  \n `_Other`  \n The `extent` object to copy from.  \n  \n### Return Value  \n A reference to this `extent` object.  \n  \n##  <a name=\"extent__operator_at\"></a> extent::operator \\[\\] \nReturns the element that's at the specified index.  \n  \n### Syntax  \n  \n```  \nint operator[] ( unsigned int _Index ) const restrict(amp,cpu);  \n  \nint&  operator[] ( unsigned int _Index ) restrict(amp,cpu);  \n```  \n  \n### Parameters  \n `_Index`  \n An integer from 0 through the rank minus 1.  \n  \n### Return Value  \n The element that's at the specified index.  \n  \n##  <a name=\"extent__rank_constant\"></a> extent::rank Constant  \nStores the rank of the `extent' object.  \n  \n### Syntax  \n  \n```  \nstatic const int rank = _Rank;  \n```  \n  \n##  <a name=\"extent__size_method\"></a> extent::size Method  \nReturns the total linear size of the `extent` object (in units of elements).  \n  \n### Syntax  \n\n```  \nunsigned int size() const restrict(amp,cpu);  \n```  \n  \n## <a name=\"tile\"></a> extent::tile Method\nProduces a tiled_extent object with the specified tile dimensions.\n\n```\ntemplate <\n   int _Dim0\n>\ntiled_extent<_Dim0> tile() const ;\n\ntemplate <\n   int _Dim0,\n   int _Dim1\n>\ntiled_extent<_Dim0, _Dim1> tile() const ;\n\ntemplate <\n   int _Dim0,\n   int _Dim1,\n   int _Dim2\n>\ntiled_extent<_Dim0, _Dim1, _Dim2> tile() const ;\n```  \n### Parameters\n`_Dim0`\nThe most significant component of the tiled extent.\n`_Dim1`\nThe next-to-most-significant component of the tiled extent.\n`_Dim2`\nThe least significant component of the tiled extent.\n\n\n  \n## See Also  \n [Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)\n"}