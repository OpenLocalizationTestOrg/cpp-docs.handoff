{"nodes":[{"pos":[12,41],"content":"Registration | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Registration | Microsoft Docs","pos":[0,29]}]},{"content":"Registration","pos":[787,799]},{"content":"When a user wants to insert an OLE item into an application, OLE presents a list of object types to choose from.","pos":[800,912]},{"content":"OLE gets this list from the system registration database, which contains information provided by all server applications.","pos":[913,1034]},{"content":"When a server registers itself, the entries it puts into the system registration database (the Registry) describe each type of object it supplies, file extensions, and the path to itself, among other information.","pos":[1035,1247]},{"content":"The framework and the OLE system dynamic-link libraries (DLL) use this registry to determine what types of OLE items are available on the system.","pos":[1254,1399]},{"content":"The OLE system DLLs also use this registry to determine how to launch a server application when a linked or embedded object is activated.","pos":[1400,1537]},{"content":"This article describes what each server application needs to do when it is installed and each time it is executed.","pos":[1544,1658]},{"pos":[1665,1818],"content":"For detailed information about the system registration database and the format of the .reg files used to update it, see the <bpt id=\"p1\">*</bpt>OLE Programmer's Reference<ept id=\"p1\">*</ept>.","source":"For detailed information about the system registration database and the format of the .reg files used to update it, see the *OLE Programmer's Reference*."},{"pos":[1869,1888],"content":"Server Installation"},{"content":"When you first install your server application, it should register all the types of OLE items that it supports.","pos":[1892,2003]},{"content":"You can also have the server update the system registration database every time it executes as a stand-alone application.","pos":[2004,2125]},{"content":"This keeps the registration database up-to-date if the server's executable file is moved.","pos":[2126,2215]},{"pos":[2223,2367],"content":"[!NOTE]\n MFC applications generated by the application wizard automatically register themselves when they are run as stand-alone applications.","leadings":["","> "],"nodes":[{"content":"MFC applications generated by the application wizard automatically register themselves when they are run as stand-alone applications.","pos":[9,142]}]},{"content":"If you want to register your application during installation, use the RegEdit.exe program.","pos":[2374,2464]},{"content":"(In Windows 95, Windows 98, and Windows ME, RegEdit is in the Windows directory.","pos":[2465,2545]},{"content":"In Windows NT and Windows 2000, RegEdit is in the Windows System32 directory.) If you include a setup program with your application, have the setup program run \"RegEdit /S <bpt id=\"p1\">*</bpt>appname<ept id=\"p1\">*</ept>.reg\".","pos":[2546,2733],"source":" In Windows NT and Windows 2000, RegEdit is in the Windows System32 directory.) If you include a setup program with your application, have the setup program run \"RegEdit /S *appname*.reg\"."},{"content":"(The /S flag indicates silent operation, that is, it does not display the dialog box reporting successful completion of the command.) Otherwise, instruct the user to run RegEdit manually.","pos":[2734,2921]},{"pos":[2929,3227],"content":"[!NOTE]\n The .reg file created by the application wizard does not include the complete path for the executable. Your installation program must either modify the .reg file to include the complete path to the executable or modify the PATH environment variable to include the installation directory.","leadings":["","> "],"nodes":[{"content":" The .reg file created by the application wizard does not include the complete path for the executable. Your installation program must either modify the .reg file to include the complete path to the executable or modify the PATH environment variable to include the installation directory.","pos":[8,296],"nodes":[{"content":"The .reg file created by the application wizard does not include the complete path for the executable.","pos":[1,103]},{"content":"Your installation program must either modify the .reg file to include the complete path to the executable or modify the PATH environment variable to include the installation directory.","pos":[104,288]}]}]},{"content":"RegEdit merges the contents of the .reg text file into the registration database.","pos":[3234,3315]},{"content":"To verify the database or to repair it, use the registry editor.","pos":[3316,3380]},{"content":"Take care to avoid deleting essential OLE entries.","pos":[3381,3431]},{"content":"(In Windows 95, Windows 98, and Windows ME, the registry editor is RegEdit.exe.","pos":[3432,3511]},{"content":"In Windows NT and Windows 2000, it is RegEdit32.exe.)","pos":[3512,3565]},{"pos":[3618,3639],"content":"Server Initialization"},{"content":"When you create a server application with the application wizard, the wizard completes all initialization tasks for you automatically.","pos":[3643,3777]},{"content":"This section describes what you must do if you write a server application manually.","pos":[3778,3861]},{"content":"When a server application is launched by a container application, the OLE system DLLs add the \"/Embedding\" option to the server's command line.","pos":[3868,4011]},{"content":"A server application's behavior differs depending on whether it was launched by a container, so the first thing an application should do when it begins execution is check for the \"/Embedding\" or \"-Embedding\" option on the command line.","pos":[4012,4247]},{"content":"If this switch exists, load a different set of resources that show the server as being either in-place active or fully open.","pos":[4248,4372]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Menus and Resources: Server Additions<ept id=\"p1\">](../mfc/menus-and-resources-server-additions.md)</ept>.","pos":[4373,4487],"source":" For more information, see [Menus and Resources: Server Additions](../mfc/menus-and-resources-server-additions.md)."},{"content":"Your server application should also call its <ph id=\"ph1\">`CWinApp::RunEmbedded`</ph> function to parse the command line.","pos":[4494,4597],"source":"Your server application should also call its `CWinApp::RunEmbedded` function to parse the command line."},{"content":"If it returns a nonzero value, the application should not show its window because it has been run from a container application, not as a stand-alone application.","pos":[4598,4759]},{"content":"This function updates the server's entry in the system registration database and calls the <ph id=\"ph1\">`RegisterAll`</ph> member function for you, performing instance registration.","pos":[4760,4923],"source":" This function updates the server's entry in the system registration database and calls the `RegisterAll` member function for you, performing instance registration."},{"content":"When your server application is starting, you must ensure that it can perform instance registration.","pos":[4930,5030]},{"content":"Instance registration informs the OLE system DLLs that the server is active and ready to receive requests from containers.","pos":[5031,5153]},{"content":"It does not add an entry to the registration database.","pos":[5154,5208]},{"content":"Perform instance registration of the server by calling the <ph id=\"ph1\">`ConnectTemplate`</ph> member function defined by <ph id=\"ph2\">`COleTemplateServer`</ph>.","pos":[5209,5334],"source":" Perform instance registration of the server by calling the `ConnectTemplate` member function defined by `COleTemplateServer`."},{"content":"This connects the <ph id=\"ph1\">`CDocTemplate`</ph> object to the <ph id=\"ph2\">`COleTemplateServer`</ph> object.","pos":[5335,5410],"source":" This connects the `CDocTemplate` object to the `COleTemplateServer` object."},{"content":"The <ph id=\"ph1\">`ConnectTemplate`</ph> function takes three parameters: the server's <bpt id=\"p1\">**</bpt>CLSID<ept id=\"p1\">**</ept>, a pointer to the <ph id=\"ph2\">`CDocTemplate`</ph> object, and a flag indicating whether the server supports multiple instances.","pos":[5417,5605],"source":"The `ConnectTemplate` function takes three parameters: the server's **CLSID**, a pointer to the `CDocTemplate` object, and a flag indicating whether the server supports multiple instances."},{"content":"A miniserver must be able to support multiple instances, that is, it must be possible for multiple instances of the server to run simultaneously, one for each container.","pos":[5606,5775]},{"content":"Consequently, pass <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> for this flag when launching a miniserver.","pos":[5776,5846],"source":" Consequently, pass **TRUE** for this flag when launching a miniserver."},{"content":"If you are writing a miniserver, by definition it will always be launched by a container.","pos":[5853,5942]},{"content":"You should still parse the command line to check for the \"/Embedding\" option.","pos":[5943,6020]},{"content":"The absence of this option on the command line means that the user has tried to launch the miniserver as a stand-alone application.","pos":[6021,6152]},{"content":"If this occurs, register the server with the system registration database and then display a message box informing the user to launch the miniserver from a container application.","pos":[6153,6331]},{"content":"See Also","pos":[6340,6348]},{"content":"OLE","pos":[6353,6356]},{"content":"Servers","pos":[6385,6392]},{"content":"CWinApp::RunAutomated","pos":[6418,6439]},{"content":"CWinApp::RunEmbedded","pos":[6503,6523]},{"content":"COleTemplateServer Class","pos":[6586,6610]}],"content":"---\ntitle: \"Registration | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"servers, initializing\"\n  - \"initializing servers\"\n  - \"OLE, registration\"\n  - \"installing servers\"\n  - \"registry, OLE item database\"\n  - \"registration databases\"\n  - \"servers, installing\"\n  - \"OLE server applications, registering servers\"\nms.assetid: 991d5684-72c1-4f9e-a09a-9184ed12bbb9\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Registration\nWhen a user wants to insert an OLE item into an application, OLE presents a list of object types to choose from. OLE gets this list from the system registration database, which contains information provided by all server applications. When a server registers itself, the entries it puts into the system registration database (the Registry) describe each type of object it supplies, file extensions, and the path to itself, among other information.  \n  \n The framework and the OLE system dynamic-link libraries (DLL) use this registry to determine what types of OLE items are available on the system. The OLE system DLLs also use this registry to determine how to launch a server application when a linked or embedded object is activated.  \n  \n This article describes what each server application needs to do when it is installed and each time it is executed.  \n  \n For detailed information about the system registration database and the format of the .reg files used to update it, see the *OLE Programmer's Reference*.  \n  \n##  <a name=\"_core_server_installation\"></a> Server Installation  \n When you first install your server application, it should register all the types of OLE items that it supports. You can also have the server update the system registration database every time it executes as a stand-alone application. This keeps the registration database up-to-date if the server's executable file is moved.  \n  \n> [!NOTE]\n>  MFC applications generated by the application wizard automatically register themselves when they are run as stand-alone applications.  \n  \n If you want to register your application during installation, use the RegEdit.exe program. (In Windows 95, Windows 98, and Windows ME, RegEdit is in the Windows directory. In Windows NT and Windows 2000, RegEdit is in the Windows System32 directory.) If you include a setup program with your application, have the setup program run \"RegEdit /S *appname*.reg\". (The /S flag indicates silent operation, that is, it does not display the dialog box reporting successful completion of the command.) Otherwise, instruct the user to run RegEdit manually.  \n  \n> [!NOTE]\n>  The .reg file created by the application wizard does not include the complete path for the executable. Your installation program must either modify the .reg file to include the complete path to the executable or modify the PATH environment variable to include the installation directory.  \n  \n RegEdit merges the contents of the .reg text file into the registration database. To verify the database or to repair it, use the registry editor. Take care to avoid deleting essential OLE entries. (In Windows 95, Windows 98, and Windows ME, the registry editor is RegEdit.exe. In Windows NT and Windows 2000, it is RegEdit32.exe.)  \n  \n##  <a name=\"_core_server_initialization\"></a> Server Initialization  \n When you create a server application with the application wizard, the wizard completes all initialization tasks for you automatically. This section describes what you must do if you write a server application manually.  \n  \n When a server application is launched by a container application, the OLE system DLLs add the \"/Embedding\" option to the server's command line. A server application's behavior differs depending on whether it was launched by a container, so the first thing an application should do when it begins execution is check for the \"/Embedding\" or \"-Embedding\" option on the command line. If this switch exists, load a different set of resources that show the server as being either in-place active or fully open. For more information, see [Menus and Resources: Server Additions](../mfc/menus-and-resources-server-additions.md).  \n  \n Your server application should also call its `CWinApp::RunEmbedded` function to parse the command line. If it returns a nonzero value, the application should not show its window because it has been run from a container application, not as a stand-alone application. This function updates the server's entry in the system registration database and calls the `RegisterAll` member function for you, performing instance registration.  \n  \n When your server application is starting, you must ensure that it can perform instance registration. Instance registration informs the OLE system DLLs that the server is active and ready to receive requests from containers. It does not add an entry to the registration database. Perform instance registration of the server by calling the `ConnectTemplate` member function defined by `COleTemplateServer`. This connects the `CDocTemplate` object to the `COleTemplateServer` object.  \n  \n The `ConnectTemplate` function takes three parameters: the server's **CLSID**, a pointer to the `CDocTemplate` object, and a flag indicating whether the server supports multiple instances. A miniserver must be able to support multiple instances, that is, it must be possible for multiple instances of the server to run simultaneously, one for each container. Consequently, pass **TRUE** for this flag when launching a miniserver.  \n  \n If you are writing a miniserver, by definition it will always be launched by a container. You should still parse the command line to check for the \"/Embedding\" option. The absence of this option on the command line means that the user has tried to launch the miniserver as a stand-alone application. If this occurs, register the server with the system registration database and then display a message box informing the user to launch the miniserver from a container application.  \n  \n## See Also  \n [OLE](../mfc/ole-in-mfc.md)   \n [Servers](../mfc/servers.md)   \n [CWinApp::RunAutomated](../mfc/reference/cwinapp-class.md#cwinapp__runautomated)   \n [CWinApp::RunEmbedded](../mfc/reference/cwinapp-class.md#cwinapp__runembedded)   \n [COleTemplateServer Class](../mfc/reference/coletemplateserver-class.md)\n"}