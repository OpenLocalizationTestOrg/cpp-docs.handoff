{"nodes":[{"pos":[12,36],"content":"_gcvt_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_gcvt_s | Microsoft Docs","pos":[0,24]}]},{"pos":[1171,1178],"content":"_gcvt_s","linkify":"_gcvt_s","nodes":[{"content":"_gcvt_s","pos":[0,7]}]},{"content":"Converts a floating-point value to a string.","pos":[1179,1223]},{"content":"This is a version of <bpt id=\"p1\">[</bpt>_gcvt<ept id=\"p1\">](../../c-runtime-library/reference/gcvt.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1224,1427],"source":" This is a version of [_gcvt](../../c-runtime-library/reference/gcvt.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1436,1442],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1702,1712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`buffer`</ph>","pos":[1716,1730],"source":"[out] `buffer`"},{"content":"Buffer to store the result of the conversion.","pos":[1734,1779]},{"content":"[in] <ph id=\"ph1\">`sizeInBytes`</ph>","pos":[1786,1804],"source":"[in] `sizeInBytes`"},{"content":"Size of the buffer.","pos":[1808,1827]},{"content":"[in] <ph id=\"ph1\">`value`</ph>","pos":[1834,1846],"source":"[in] `value`"},{"content":"Value to be converted.","pos":[1850,1872]},{"content":"[in] <ph id=\"ph1\">`digits`</ph>","pos":[1879,1892],"source":"[in] `digits`"},{"content":"Number of significant digits stored.","pos":[1896,1932]},{"pos":[1941,1953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if successful.","pos":[1957,1976]},{"content":"If a failure occurs due to an invalid parameter (see the following table for invalid values), the invalid parameter handler is invoked as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1977,2200],"source":" If a failure occurs due to an invalid parameter (see the following table for invalid values), the invalid parameter handler is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, an error code is returned.","pos":[2201,2264]},{"content":"Error codes are defined in Errno.h.","pos":[2265,2300]},{"content":"For a listing of these errors, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2301,2452],"source":" For a listing of these errors, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2462,2478],"content":"Error Conditions","linkify":"Error Conditions","nodes":[{"content":"Error Conditions","pos":[0,16]}]},{"content":"Return","pos":[2525,2531]},{"pos":[2532,2549],"content":"Value in <ph id=\"ph1\">`buffer`</ph>","source":"Value in `buffer`"},{"content":"any","pos":[2666,2669]},{"content":"any","pos":[2670,2673]},{"content":"any","pos":[2674,2677]},{"content":"Not modified.","pos":[2687,2700]},{"pos":[2705,2740],"content":"Not <ph id=\"ph1\">`NULL`</ph> (points to valid memory)","source":"Not `NULL` (points to valid memory)"},{"content":"zero","pos":[2741,2745]},{"content":"any","pos":[2746,2749]},{"content":"any","pos":[2750,2753]},{"content":"Not modified.","pos":[2763,2776]},{"pos":[2781,2816],"content":"Not <ph id=\"ph1\">`NULL`</ph> (points to valid memory)","source":"Not `NULL` (points to valid memory)"},{"content":"any","pos":[2817,2820]},{"content":"any","pos":[2821,2824]},{"content":"Not modified.","pos":[2851,2864]},{"pos":[2872,2891],"content":"<bpt id=\"p1\">**</bpt>Security Issues<ept id=\"p1\">**</ept>","source":"**Security Issues**"},{"pos":[2898,3002],"content":"<ph id=\"ph1\">`_gcvt_s`</ph> can generate an access violation if <ph id=\"ph2\">`buffer`</ph> does not point to valid memory and is not <ph id=\"ph3\">`NULL`</ph>.","source":"`_gcvt_s` can generate an access violation if `buffer` does not point to valid memory and is not `NULL`."},{"pos":[3011,3018],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_gcvt_s`</ph> function converts a floating-point <ph id=\"ph2\">`value`</ph> to a character string (which includes a decimal point and a possible sign byte) and stores the string in <ph id=\"ph3\">`buffer`</ph>.","pos":[3022,3193],"source":"The `_gcvt_s` function converts a floating-point `value` to a character string (which includes a decimal point and a possible sign byte) and stores the string in `buffer`."},{"content":"<ph id=\"ph1\">`buffer`</ph> should be large enough to accommodate the converted value plus a terminating null character, which is appended automatically.","pos":[3194,3328],"source":"`buffer` should be large enough to accommodate the converted value plus a terminating null character, which is appended automatically."},{"content":"A buffer of length <ph id=\"ph1\">`_CVTBUFSIZE`</ph> is sufficient for any floating point value.","pos":[3329,3405],"source":" A buffer of length `_CVTBUFSIZE` is sufficient for any floating point value."},{"content":"If a buffer size of <ph id=\"ph1\">`digits`</ph> + 1 is used, the function will not overwrite the end of the buffer, so be sure to supply a sufficient buffer for this operation.","pos":[3406,3563],"source":" If a buffer size of `digits` + 1 is used, the function will not overwrite the end of the buffer, so be sure to supply a sufficient buffer for this operation."},{"content":"<ph id=\"ph1\">`_gcvt_s`</ph> attempts to produce <ph id=\"ph2\">`digits`</ph> digits in decimal format.","pos":[3564,3628],"source":"`_gcvt_s` attempts to produce `digits` digits in decimal format."},{"content":"If it cannot, it produces <ph id=\"ph1\">`digits`</ph> digits in exponential format.","pos":[3629,3693],"source":" If it cannot, it produces `digits` digits in exponential format."},{"content":"Trailing zeros can be suppressed in the conversion.","pos":[3694,3745]},{"content":"In C++, using this function is simplified by a template overload; the overload can infer buffer length automatically, eliminating the need to specify a size argument.","pos":[3752,3918]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[3919,4027],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"The debug version of this function first fills the buffer with 0xFD.","pos":[4034,4102]},{"content":"To disable this behavior, use <bpt id=\"p1\">[</bpt>_CrtSetDebugFillThreshold<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)</ept>.","pos":[4103,4224],"source":" To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)."},{"pos":[4233,4245],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4252,4259]},{"content":"Required header","pos":[4260,4275]},{"content":"Optional header","pos":[4276,4291]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[4368,4379],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>error.h&gt;","pos":[4380,4390],"source":"\\<error.h>"},{"pos":[4398,4516],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4525,4532],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4983,5008],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"&lt;xref:System.Convert.ToString%2A&gt;","pos":[5012,5045],"source":"<xref:System.Convert.ToString%2A>"},{"pos":[5054,5062],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Data Conversion<ept id=\"p1\">](../../c-runtime-library/data-conversion.md)</ept><ph id=\"ph1\"> </ph>","pos":[5066,5128],"source":"[Data Conversion](../../c-runtime-library/data-conversion.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[5131,5208],"source":" [Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>atof, _atof_l, _wtof, _wtof_l<ept id=\"p1\">](../../c-runtime-library/reference/atof-atof-l-wtof-wtof-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5211,5306],"source":" [atof, _atof_l, _wtof, _wtof_l](../../c-runtime-library/reference/atof-atof-l-wtof-wtof-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_ecvt_s<ept id=\"p1\">](../../c-runtime-library/reference/ecvt-s.md)</ept><ph id=\"ph1\"> </ph>","pos":[5309,5365],"source":" [_ecvt_s](../../c-runtime-library/reference/ecvt-s.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_fcvt_s<ept id=\"p1\">](../../c-runtime-library/reference/fcvt-s.md)</ept><ph id=\"ph1\"> </ph>","pos":[5368,5424],"source":" [_fcvt_s](../../c-runtime-library/reference/fcvt-s.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_gcvt<ept id=\"p1\">](../../c-runtime-library/reference/gcvt.md)</ept>","pos":[5427,5478],"source":" [_gcvt](../../c-runtime-library/reference/gcvt.md)"}],"content":"---\ntitle: \"_gcvt_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_gcvt_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_gcvt_s\"\n  - \"gcvt_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_gcvt_s function\"\n  - \"_CVTBUFSIZE\"\n  - \"floating-point functions, converting number to string\"\n  - \"gcvt_s function\"\n  - \"numbers, converting to strings\"\n  - \"conversions, floating point to strings\"\n  - \"strings [C++], converting from floating point\"\n  - \"CVTBUFSIZE\"\nms.assetid: 0a8d8a26-5940-4ae3-835e-0aa6ec1b0744\ncaps.latest.revision: 30\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _gcvt_s\nConverts a floating-point value to a string. This is a version of [_gcvt](../../c-runtime-library/reference/gcvt.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t _gcvt_s(   \n   char *buffer,  \n   size_t sizeInBytes,  \n   double value,  \n   int digits   \n);  \ntemplate <size_t cchStr>  \nerrno_t _gcvt_s(   \n   char (&buffer)[cchStr],  \n   double value,  \n   int digits   \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `buffer`  \n Buffer to store the result of the conversion.  \n  \n [in] `sizeInBytes`  \n Size of the buffer.  \n  \n [in] `value`  \n Value to be converted.  \n  \n [in] `digits`  \n Number of significant digits stored.  \n  \n## Return Value  \n Zero if successful. If a failure occurs due to an invalid parameter (see the following table for invalid values), the invalid parameter handler is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, an error code is returned. Error codes are defined in Errno.h. For a listing of these errors, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n### Error Conditions  \n  \n|`buffer`|`sizeInBytes`|`value`|`digits`|Return|Value in `buffer`|  \n|--------------|-------------------|-------------|--------------|------------|-----------------------|  \n|`NULL`|any|any|any|`EINVAL`|Not modified.|  \n|Not `NULL` (points to valid memory)|zero|any|any|`EINVAL`|Not modified.|  \n|Not `NULL` (points to valid memory)|any|any|>= `sizeInBytes`|`EINVAL`|Not modified.|  \n  \n **Security Issues**  \n  \n `_gcvt_s` can generate an access violation if `buffer` does not point to valid memory and is not `NULL`.  \n  \n## Remarks  \n The `_gcvt_s` function converts a floating-point `value` to a character string (which includes a decimal point and a possible sign byte) and stores the string in `buffer`. `buffer` should be large enough to accommodate the converted value plus a terminating null character, which is appended automatically. A buffer of length `_CVTBUFSIZE` is sufficient for any floating point value. If a buffer size of `digits` + 1 is used, the function will not overwrite the end of the buffer, so be sure to supply a sufficient buffer for this operation. `_gcvt_s` attempts to produce `digits` digits in decimal format. If it cannot, it produces `digits` digits in exponential format. Trailing zeros can be suppressed in the conversion.  \n  \n In C++, using this function is simplified by a template overload; the overload can infer buffer length automatically, eliminating the need to specify a size argument. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n The debug version of this function first fills the buffer with 0xFD. To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md).  \n  \n## Requirements  \n  \n|Routine|Required header|Optional header|  \n|-------------|---------------------|---------------------|  \n|`_gcvt_s`|\\<stdlib.h>|\\<error.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_gcvt_s.c  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <errno.h>  \n  \nint main()  \n{  \n  char buf[_CVTBUFSIZE];  \n  int decimal;  \n  int sign;  \n  int err;  \n  \n  err = _gcvt_s(buf, _CVTBUFSIZE, 1.2, 5);  \n  \n  if (err != 0)  \n  {  \n     printf(\"_gcvt_s failed with error code %d\\n\", err);  \n     exit(1);  \n  }  \n  \n  printf(\"Converted value: %s\\n\", buf);    \n  \n}  \n```  \n  \n```Output  \nConverted value: 1.2  \n```  \n  \n## .NET Framework Equivalent  \n <xref:System.Convert.ToString%2A>  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [atof, _atof_l, _wtof, _wtof_l](../../c-runtime-library/reference/atof-atof-l-wtof-wtof-l.md)   \n [_ecvt_s](../../c-runtime-library/reference/ecvt-s.md)   \n [_fcvt_s](../../c-runtime-library/reference/fcvt-s.md)   \n [_gcvt](../../c-runtime-library/reference/gcvt.md)"}