{"nodes":[{"pos":[12,44],"content":"ungetc, ungetwc | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ungetc, ungetwc | Microsoft Docs","pos":[0,32]}]},{"pos":[1066,1081],"content":"ungetc, ungetwc","linkify":"ungetc, ungetwc","nodes":[{"content":"ungetc, ungetwc","pos":[0,15]}]},{"content":"Pushes a character back onto the stream.","pos":[1082,1122]},{"pos":[1131,1137],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1270,1280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Character to be pushed.","pos":[1291,1314]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1333,1361],"source":" Pointer to `FILE` structure."},{"pos":[1370,1382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If successful, each of these functions returns the character argument <ph id=\"ph1\">`c`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[1386,1462],"source":"If successful, each of these functions returns the character argument `c`*.*"},{"content":"If <ph id=\"ph1\">`c`</ph> cannot be pushed back or if no character has been read, the input stream is unchanged and <ph id=\"ph2\">`ungetc`</ph> returns <ph id=\"ph3\">`EOF`</ph>; <ph id=\"ph4\">`ungetwc`</ph> returns <ph id=\"ph5\">`WEOF`</ph>.","pos":[1463,1609],"source":" If `c` cannot be pushed back or if no character has been read, the input stream is unchanged and `ungetc` returns `EOF`; `ungetwc` returns `WEOF`."},{"content":"If <ph id=\"ph1\">`stream`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1610,1763],"source":" If `stream` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`EOF`</ph> or <ph id=\"ph2\">`WEOF`</ph> is returned and <ph id=\"ph3\">`errno`</ph> is set to <ph id=\"ph4\">`EINVAL`</ph>.","pos":[1764,1860],"source":" If execution is allowed to continue, `EOF` or `WEOF` is returned and `errno` is set to `EINVAL`."},{"pos":[1867,2035],"content":"For information on these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2044,2051],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`ungetc`</ph> function pushes the character <ph id=\"ph2\">`c`</ph> back onto <ph id=\"ph3\">`stream`</ph> and clears the end-of-file indicator.","pos":[2055,2158],"source":"The `ungetc` function pushes the character `c` back onto `stream` and clears the end-of-file indicator."},{"content":"The stream must be open for reading.","pos":[2159,2195]},{"content":"A subsequent read operation on <ph id=\"ph1\">`stream`</ph> starts with <ph id=\"ph2\">`c`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2196,2254],"source":" A subsequent read operation on `stream` starts with `c`*.*"},{"content":"An attempt to push <ph id=\"ph1\">`EOF`</ph> onto the stream using <ph id=\"ph2\">`ungetc`</ph> is ignored.","pos":[2255,2322],"source":" An attempt to push `EOF` onto the stream using `ungetc` is ignored."},{"content":"Characters placed on the stream by <ph id=\"ph1\">`ungetc`</ph> may be erased if <ph id=\"ph2\">`fflush`</ph>, <ph id=\"ph3\">`fseek`</ph>, <ph id=\"ph4\">`fsetpos`</ph>, or <ph id=\"ph5\">`rewind`</ph> is called before the character is read from the stream.","pos":[2329,2487],"source":"Characters placed on the stream by `ungetc` may be erased if `fflush`, `fseek`, `fsetpos`, or `rewind` is called before the character is read from the stream."},{"content":"The file-position indicator will have the value it had before the characters were pushed back.","pos":[2488,2582]},{"content":"The external storage corresponding to the stream is unchanged.","pos":[2583,2645]},{"content":"On a successful <ph id=\"ph1\">`ungetc`</ph> call against a text stream, the file-position indicator is unspecified until all the pushed-back characters are read or discarded.","pos":[2646,2801],"source":" On a successful `ungetc` call against a text stream, the file-position indicator is unspecified until all the pushed-back characters are read or discarded."},{"content":"On each successful <ph id=\"ph1\">`ungetc`</ph> call against a binary stream, the file-position indicator is decremented; if its value was 0 before a call, the value is undefined after the call.","pos":[2802,2976],"source":" On each successful `ungetc` call against a binary stream, the file-position indicator is decremented; if its value was 0 before a call, the value is undefined after the call."},{"content":"Results are unpredictable if <ph id=\"ph1\">`ungetc`</ph> is called twice without a read or file-positioning operation between the two calls.","pos":[2983,3104],"source":"Results are unpredictable if `ungetc` is called twice without a read or file-positioning operation between the two calls."},{"content":"After a call to <ph id=\"ph1\">`fscanf`</ph>, a call to <ph id=\"ph2\">`ungetc`</ph> may fail unless another read operation (such as <ph id=\"ph3\">`getc`</ph>) has been performed.","pos":[3105,3225],"source":" After a call to `fscanf`, a call to `ungetc` may fail unless another read operation (such as `getc`) has been performed."},{"content":"This is because <ph id=\"ph1\">`fscanf`</ph> itself calls <ph id=\"ph2\">`ungetc`</ph>.","pos":[3226,3273],"source":" This is because `fscanf` itself calls `ungetc`."},{"content":"<ph id=\"ph1\">`ungetwc`</ph> is a wide-character version of <ph id=\"ph2\">`ungetc`</ph>.","pos":[3280,3330],"source":"`ungetwc` is a wide-character version of `ungetc`."},{"content":"However, on each successful <ph id=\"ph1\">`ungetwc`</ph> call against a text or binary stream, the value of the file-position indicator is unspecified until all pushed-back characters are read or discarded.","pos":[3331,3518],"source":" However, on each successful `ungetwc` call against a text or binary stream, the value of the file-position indicator is unspecified until all pushed-back characters are read or discarded."},{"content":"These functions are thread-safe and lock sensitive data during execution.","pos":[3525,3598]},{"content":"For a non-locking version, see <bpt id=\"p1\">[</bpt>_ungetc_nolock, _ungetwc_nolock<ept id=\"p1\">](../../c-runtime-library/reference/ungetc-nolock-ungetwc-nolock.md)</ept>.","pos":[3599,3731],"source":" For a non-locking version, see [_ungetc_nolock, _ungetwc_nolock](../../c-runtime-library/reference/ungetc-nolock-ungetwc-nolock.md)."},{"pos":[3741,3770],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[3777,3792]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3793,3821],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3822,3835]},{"content":"_UNICODE defined","pos":[3836,3852]},{"pos":[4013,4025],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4032,4039]},{"content":"Required header","pos":[4040,4055]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[4109,4119],"source":"\\<stdio.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[4134,4158],"source":"\\<stdio.h> or \\<wchar.h>"},{"content":"The console is not supported in <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[4166,4279],"source":"The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"The standard stream handles that are associated with the console—<ph id=\"ph1\">`stdin`</ph>, <ph id=\"ph2\">`stdout`</ph>, and <ph id=\"ph3\">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id=\"ph4\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[4280,4521],"source":" The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","pos":[4522,4626],"source":" For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[4635,4642],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5444,5469],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[5473,5488]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[5489,5536],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[5537,5662],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[5671,5679],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5683,5735],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>getc, getwc<ept id=\"p1\">](../../c-runtime-library/reference/getc-getwc.md)</ept><ph id=\"ph1\"> </ph>","pos":[5738,5802],"source":" [getc, getwc](../../c-runtime-library/reference/getc-getwc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>putc, putwc<ept id=\"p1\">](../../c-runtime-library/reference/putc-putwc.md)</ept>","pos":[5805,5868],"source":" [putc, putwc](../../c-runtime-library/reference/putc-putwc.md)"}],"content":"---\ntitle: \"ungetc, ungetwc | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"ungetwc\"\n  - \"ungetc\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_ungettc\"\n  - \"ungetwc\"\n  - \"ungetc\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"ungetwc function\"\n  - \"ungettc function\"\n  - \"characters, pushing back onto stream\"\n  - \"_ungettc function\"\n  - \"ungetc function\"\nms.assetid: e0754f3a-b4c6-408f-90c7-e6387b830d84\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ungetc, ungetwc\nPushes a character back onto the stream.  \n  \n## Syntax  \n  \n```  \nint ungetc(  \n   int c,  \n   FILE *stream   \n);  \nwint_t ungetwc(  \n   wint_t c,  \n   FILE *stream   \n);  \n```  \n  \n#### Parameters  \n `c`  \n Character to be pushed.  \n  \n `stream`  \n Pointer to `FILE` structure.  \n  \n## Return Value  \n If successful, each of these functions returns the character argument `c`*.* If `c` cannot be pushed back or if no character has been read, the input stream is unchanged and `ungetc` returns `EOF`; `ungetwc` returns `WEOF`. If `stream` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `EOF` or `WEOF` is returned and `errno` is set to `EINVAL`.  \n  \n For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `ungetc` function pushes the character `c` back onto `stream` and clears the end-of-file indicator. The stream must be open for reading. A subsequent read operation on `stream` starts with `c`*.* An attempt to push `EOF` onto the stream using `ungetc` is ignored.  \n  \n Characters placed on the stream by `ungetc` may be erased if `fflush`, `fseek`, `fsetpos`, or `rewind` is called before the character is read from the stream. The file-position indicator will have the value it had before the characters were pushed back. The external storage corresponding to the stream is unchanged. On a successful `ungetc` call against a text stream, the file-position indicator is unspecified until all the pushed-back characters are read or discarded. On each successful `ungetc` call against a binary stream, the file-position indicator is decremented; if its value was 0 before a call, the value is undefined after the call.  \n  \n Results are unpredictable if `ungetc` is called twice without a read or file-positioning operation between the two calls. After a call to `fscanf`, a call to `ungetc` may fail unless another read operation (such as `getc`) has been performed. This is because `fscanf` itself calls `ungetc`.  \n  \n `ungetwc` is a wide-character version of `ungetc`. However, on each successful `ungetwc` call against a text or binary stream, the value of the file-position indicator is unspecified until all pushed-back characters are read or discarded.  \n  \n These functions are thread-safe and lock sensitive data during execution. For a non-locking version, see [_ungetc_nolock, _ungetwc_nolock](../../c-runtime-library/reference/ungetc-nolock-ungetwc-nolock.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_ungettc`|`ungetc`|`ungetc`|`ungetwc`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`ungetc`|\\<stdio.h>|  \n|`ungetwc`|\\<stdio.h> or \\<wchar.h>|  \n  \n The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_ungetc.c  \n// This program first converts a character  \n// representation of an unsigned integer to an integer. If  \n// the program encounters a character that is not a digit,  \n// the program uses ungetc to replace it in the  stream.  \n//  \n  \n#include <stdio.h>  \n#include <ctype.h>  \n  \nint main( void )  \n{  \n   int ch;  \n   int result = 0;  \n  \n   // Read in and convert number:  \n   while( ((ch = getchar()) != EOF) && isdigit( ch ) )  \n      result = result * 10 + ch - '0';    // Use digit.  \n   if( ch != EOF )  \n      ungetc( ch, stdin );                // Put nondigit back.  \n   printf( \"Number = %d\\nNext character in stream = '%c'\",   \n            result, getchar() );  \n}  \n```  \n  \n```Output  \n  \n      521aNumber = 521  \nNext character in stream = 'a'  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [getc, getwc](../../c-runtime-library/reference/getc-getwc.md)   \n [putc, putwc](../../c-runtime-library/reference/putc-putwc.md)"}