{"nodes":[{"pos":[12,56],"content":"_getdcwd_dbg, _wgetdcwd_dbg | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_getdcwd_dbg, _wgetdcwd_dbg | Microsoft Docs","pos":[0,44]}]},{"pos":[1160,1187],"content":"_getdcwd_dbg, _wgetdcwd_dbg","linkify":"_getdcwd_dbg, _wgetdcwd_dbg","nodes":[{"content":"_getdcwd_dbg, _wgetdcwd_dbg","pos":[0,27]}]},{"pos":[1188,1327],"content":"Debug versions of the <bpt id=\"p1\">[</bpt>_getdcwd, _wgetdcwd<ept id=\"p1\">](../../c-runtime-library/reference/getdcwd-wgetdcwd.md)</ept> functions (only available during debug).","source":"Debug versions of the [_getdcwd, _wgetdcwd](../../c-runtime-library/reference/getdcwd-wgetdcwd.md) functions (only available during debug)."},{"pos":[1336,1342],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1669,1679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name of the disk drive.","pos":[1694,1717]},{"content":"Storage location for the path.","pos":[1736,1766]},{"content":"Maximum length of the path in characters: <ph id=\"ph1\">`char`</ph> for <ph id=\"ph2\">`_getdcwd_dbg`</ph>and <ph id=\"ph3\">`wchar_t`</ph>for <ph id=\"ph4\">`_wgetdcwd_dbg`</ph>.","pos":[1785,1885],"source":" Maximum length of the path in characters: `char` for `_getdcwd_dbg`and `wchar_t`for `_wgetdcwd_dbg`."},{"content":"Requested type of the memory block: <ph id=\"ph1\">`_CLIENT_BLOCK`</ph>or <ph id=\"ph2\">`_NORMAL_BLOCK`</ph>.","pos":[1907,1977],"source":" Requested type of the memory block: `_CLIENT_BLOCK`or `_NORMAL_BLOCK`."},{"content":"Pointer to the name of the source file that requested the allocation operation or <ph id=\"ph1\">`NULL`</ph>.","pos":[1998,2087],"source":" Pointer to the name of the source file that requested the allocation operation or `NULL`."},{"content":"Line number in the source file where the allocation operation was requested or <ph id=\"ph1\">`NULL`</ph>.","pos":[2110,2196],"source":" Line number in the source file where the allocation operation was requested or `NULL`."},{"pos":[2205,2217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a pointer to <ph id=\"ph1\">`buffer`</ph>.","pos":[2221,2251],"source":"Returns a pointer to `buffer`."},{"content":"A <ph id=\"ph1\">`NULL`</ph> return value indicates an error, and <ph id=\"ph2\">`errno`</ph> is set either to <ph id=\"ph3\">`ENOMEM`</ph>, indicating that there is insufficient memory to allocate <ph id=\"ph4\">`maxlen`</ph> bytes (when a <ph id=\"ph5\">`NULL`</ph> argument is given as <ph id=\"ph6\">`buffer`</ph>), or to <ph id=\"ph7\">`ERANGE`</ph>, indicating that the path is longer than <ph id=\"ph8\">`maxlen`</ph> characters.","pos":[2252,2528],"source":" A `NULL` return value indicates an error, and `errno` is set either to `ENOMEM`, indicating that there is insufficient memory to allocate `maxlen` bytes (when a `NULL` argument is given as `buffer`), or to `ERANGE`, indicating that the path is longer than `maxlen` characters."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2529,2671],"source":" For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2680,2687],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_getdcwd_dbg`</ph> and <ph id=\"ph2\">`_wgetdcwd_dbg`</ph> functions are identical to <ph id=\"ph3\">`_getdcwd`</ph> and <ph id=\"ph4\">`_wgetdcwd`</ph> except that, when <ph id=\"ph5\">`_DEBUG`</ph> is defined, these functions use the debug version of <ph id=\"ph6\">`malloc`</ph> and <ph id=\"ph7\">`_malloc_dbg`</ph> to allocate memory if <ph id=\"ph8\">`NULL`</ph> is passed as the <ph id=\"ph9\">`buffer`</ph> parameter.","pos":[2691,2956],"source":"The `_getdcwd_dbg` and `_wgetdcwd_dbg` functions are identical to `_getdcwd` and `_wgetdcwd` except that, when `_DEBUG` is defined, these functions use the debug version of `malloc` and `_malloc_dbg` to allocate memory if `NULL` is passed as the `buffer` parameter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_malloc_dbg<ept id=\"p1\">](../../c-runtime-library/reference/malloc-dbg.md)</ept>.","pos":[2957,3046],"source":" For more information, see [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md)."},{"content":"You do not need to call these functions explicitly in most cases.","pos":[3053,3118]},{"content":"Instead, you can define the <ph id=\"ph1\">`_CRTDBG_MAP_ALLOC`</ph> flag.","pos":[3119,3172],"source":" Instead, you can define the `_CRTDBG_MAP_ALLOC` flag."},{"content":"When <ph id=\"ph1\">`_CRTDBG_MAP_ALLOC`</ph> is defined, calls to <ph id=\"ph2\">`_getdcwd`</ph> and <ph id=\"ph3\">`_wgetdcwd`</ph> are remapped to <ph id=\"ph4\">`_getdcwd_dbg`</ph> and <ph id=\"ph5\">`_wgetdcwd_dbg`</ph>, respectively, with the <ph id=\"ph6\">`blockType`</ph> set to <ph id=\"ph7\">`_NORMAL_BLOCK`</ph>.","pos":[3173,3356],"source":" When `_CRTDBG_MAP_ALLOC` is defined, calls to `_getdcwd` and `_wgetdcwd` are remapped to `_getdcwd_dbg` and `_wgetdcwd_dbg`, respectively, with the `blockType` set to `_NORMAL_BLOCK`."},{"content":"Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as <ph id=\"ph1\">`_CLIENT_BLOCK`</ph>.","pos":[3357,3473],"source":" Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as `_CLIENT_BLOCK`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Types of Blocks on the Debug Heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3474,3583],"source":" For more information, see [Types of Blocks on the Debug Heap](/visualstudio/debugger/crt-debug-heap-details)."},{"pos":[3593,3622],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[3629,3644]},{"content":"_UNICODE and _MBCS not defined","pos":[3645,3675]},{"content":"_MBCS defined","pos":[3676,3689]},{"content":"_UNICODE defined","pos":[3690,3706]},{"pos":[3892,3904],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3911,3918]},{"content":"Required header","pos":[3919,3934]},{"content":"<ph id=\"ph1\">\\&lt;</ph>crtdbg.h&gt;","pos":[3994,4005],"source":"\\<crtdbg.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>crtdbg.h&gt;","pos":[4026,4037],"source":"\\<crtdbg.h>"},{"pos":[4045,4163],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4172,4197],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"&lt;xref:System.Environment.CurrentDirectory%2A?displayProperty=fullName&gt;","pos":[4201,4271],"source":"<xref:System.Environment.CurrentDirectory%2A?displayProperty=fullName>"},{"pos":[4280,4288],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>_getdcwd, _wgetdcwd<ept id=\"p1\">](../../c-runtime-library/reference/getdcwd-wgetdcwd.md)</ept><ph id=\"ph1\"> </ph>","pos":[4292,4369],"source":"[_getdcwd, _wgetdcwd](../../c-runtime-library/reference/getdcwd-wgetdcwd.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Directory Control<ept id=\"p1\">](../../c-runtime-library/directory-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[4372,4439],"source":" [Directory Control](../../c-runtime-library/directory-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Debug Versions of Heap Allocation Functions<ept id=\"p1\">](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)</ept>","pos":[4442,4556],"source":" [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)"}],"content":"---\ntitle: \"_getdcwd_dbg, _wgetdcwd_dbg | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_getdcwd_dbg\"\n  - \"_wgetdcwd_dbg\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_getdcwd_dbg\"\n  - \"getdcwd_dbg\"\n  - \"_wgetdcwd_dbg\"\n  - \"wgetdcwd_dbg\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"working directory\"\n  - \"_getdcwd_dbg function\"\n  - \"wgetdcwd_dbg function\"\n  - \"current working directory\"\n  - \"getdcwd_dbg function\"\n  - \"_wgetdcwd_dbg function\"\n  - \"directories [C++], current working\"\nms.assetid: 266bf6f0-0417-497f-963d-2e0f306d9385\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _getdcwd_dbg, _wgetdcwd_dbg\nDebug versions of the [_getdcwd, _wgetdcwd](../../c-runtime-library/reference/getdcwd-wgetdcwd.md) functions (only available during debug).  \n  \n## Syntax  \n  \n```  \nchar *_getdcwd_dbg(  \n   int drive,  \n   char *buffer,  \n   int maxlen,  \n   int blockType,  \n   const char *filename,  \n   int linenumber   \n);  \nwchar_t *_wgetdcwd_dbg(  \n   int drive,  \n   wchar_t *buffer,  \n   int maxlen,  \n   int blockType,  \n   const char *filename,  \n   int linenumber   \n);  \n```  \n  \n#### Parameters  \n `drive`  \n Name of the disk drive.  \n  \n `buffer`  \n Storage location for the path.  \n  \n `maxlen`  \n Maximum length of the path in characters: `char` for `_getdcwd_dbg`and `wchar_t`for `_wgetdcwd_dbg`.  \n  \n `blockType`  \n Requested type of the memory block: `_CLIENT_BLOCK`or `_NORMAL_BLOCK`.  \n  \n `filename`  \n Pointer to the name of the source file that requested the allocation operation or `NULL`.  \n  \n `linenumber`  \n Line number in the source file where the allocation operation was requested or `NULL`.  \n  \n## Return Value  \n Returns a pointer to `buffer`. A `NULL` return value indicates an error, and `errno` is set either to `ENOMEM`, indicating that there is insufficient memory to allocate `maxlen` bytes (when a `NULL` argument is given as `buffer`), or to `ERANGE`, indicating that the path is longer than `maxlen` characters. For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_getdcwd_dbg` and `_wgetdcwd_dbg` functions are identical to `_getdcwd` and `_wgetdcwd` except that, when `_DEBUG` is defined, these functions use the debug version of `malloc` and `_malloc_dbg` to allocate memory if `NULL` is passed as the `buffer` parameter. For more information, see [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md).  \n  \n You do not need to call these functions explicitly in most cases. Instead, you can define the `_CRTDBG_MAP_ALLOC` flag. When `_CRTDBG_MAP_ALLOC` is defined, calls to `_getdcwd` and `_wgetdcwd` are remapped to `_getdcwd_dbg` and `_wgetdcwd_dbg`, respectively, with the `blockType` set to `_NORMAL_BLOCK`. Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as `_CLIENT_BLOCK`. For more information, see [Types of Blocks on the Debug Heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tgetdcwd_dbg`|`_getdcwd_dbg`|`_getdcwd_dbg`|`_wgetdcwd_dbg`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_getdcwd_dbg`|\\<crtdbg.h>|  \n|`_wgetdcwd_dbg`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n <xref:System.Environment.CurrentDirectory%2A?displayProperty=fullName>  \n  \n## See Also  \n [_getdcwd, _wgetdcwd](../../c-runtime-library/reference/getdcwd-wgetdcwd.md)   \n [Directory Control](../../c-runtime-library/directory-control.md)   \n [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)"}