{"nodes":[{"pos":[12,51],"content":"CCriticalSection Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CCriticalSection Class | Microsoft Docs","pos":[0,39]}]},{"pos":[748,770],"content":"CCriticalSection Class","linkify":"CCriticalSection Class","nodes":[{"content":"CCriticalSection Class","pos":[0,22]}]},{"content":"Represents a \"critical section\" â€” a synchronization object that allows one thread at a time to access a resource or section of code.","pos":[771,903]},{"pos":[912,918],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[988,995],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1005,1024],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1031,1035]},{"content":"Description","pos":[1036,1047]},{"pos":[1085,1158],"content":"<bpt id=\"p1\">[</bpt>CCriticalSection::CCriticalSection<ept id=\"p1\">](#ccriticalsection__ccriticalsection)</ept>","source":"[CCriticalSection::CCriticalSection](#ccriticalsection__ccriticalsection)"},{"pos":[1159,1198],"content":"Constructs a <ph id=\"ph1\">`CCriticalSection`</ph> object.","source":"Constructs a `CCriticalSection` object."},{"pos":[1209,1223],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1230,1234]},{"content":"Description","pos":[1235,1246]},{"pos":[1284,1333],"content":"<bpt id=\"p1\">[</bpt>CCriticalSection::Lock<ept id=\"p1\">](#ccriticalsection__lock)</ept>","source":"[CCriticalSection::Lock](#ccriticalsection__lock)"},{"pos":[1334,1386],"content":"Use to gain access to the <ph id=\"ph1\">`CCriticalSection`</ph> object.","source":"Use to gain access to the `CCriticalSection` object."},{"pos":[1391,1444],"content":"<bpt id=\"p1\">[</bpt>CCriticalSection::Unlock<ept id=\"p1\">](#ccriticalsection__unlock)</ept>","source":"[CCriticalSection::Unlock](#ccriticalsection__unlock)"},{"pos":[1445,1484],"content":"Releases the <ph id=\"ph1\">`CCriticalSection`</ph> object.","source":"Releases the `CCriticalSection` object."},{"pos":[1495,1511],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1518,1522]},{"content":"Description","pos":[1523,1534]},{"pos":[1572,1669],"content":"<bpt id=\"p1\">[</bpt>CCriticalSection::operator CRITICAL_SECTION*<ept id=\"p1\">](#ccriticalsection__operator_critical_section_star)</ept>","source":"[CCriticalSection::operator CRITICAL_SECTION*](#ccriticalsection__operator_critical_section_star)"},{"pos":[1670,1734],"content":"Retrieves a pointer to the internal <bpt id=\"p1\">**</bpt>CRITICAL_SECTION<ept id=\"p1\">**</ept> object.","source":"Retrieves a pointer to the internal **CRITICAL_SECTION** object."},{"pos":[1745,1764],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[1771,1775]},{"content":"Description","pos":[1776,1787]},{"pos":[1825,1878],"content":"<bpt id=\"p1\">[</bpt>CCriticalSection::m_sect<ept id=\"p1\">](#ccriticalsection__m_sect)</ept>","source":"[CCriticalSection::m_sect](#ccriticalsection__m_sect)"},{"pos":[1879,1909],"content":"A <bpt id=\"p1\">**</bpt>CRITICAL_SECTION<ept id=\"p1\">**</ept> object.","source":"A **CRITICAL_SECTION** object."},{"pos":[1919,1926],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Critical sections are useful when only one thread at a time can be allowed to modify data or some other controlled resource.","pos":[1930,2054]},{"content":"For example, adding nodes to a linked list is a process that should only be allowed by one thread at a time.","pos":[2055,2163]},{"content":"By using a <ph id=\"ph1\">`CCriticalSection`</ph> object to control the linked list, only one thread at a time can gain access to the list.","pos":[2164,2283],"source":" By using a `CCriticalSection` object to control the linked list, only one thread at a time can gain access to the list."},{"pos":[2291,2411],"content":"[!NOTE]\n The functionality of the `CCriticalSection` class is provided by an actual Win32 **CRITICAL_SECTION** object.","leadings":["","> "],"nodes":[{"content":"The functionality of the <ph id=\"ph1\">`CCriticalSection`</ph> class is provided by an actual Win32 <bpt id=\"p1\">**</bpt>CRITICAL_SECTION<ept id=\"p1\">**</ept> object.","pos":[9,118],"source":" The functionality of the `CCriticalSection` class is provided by an actual Win32 **CRITICAL_SECTION** object."}]},{"pos":[2418,2599],"content":"Critical sections are used instead of mutexes (see <bpt id=\"p1\">[</bpt>CMutex<ept id=\"p1\">](../../mfc/reference/cmutex-class.md)</ept>) when speed is critical and the resource will not be used across process boundaries.","source":"Critical sections are used instead of mutexes (see [CMutex](../../mfc/reference/cmutex-class.md)) when speed is critical and the resource will not be used across process boundaries."},{"pos":[2606,2703],"content":"There are two methods for using a <ph id=\"ph1\">`CCriticalSection`</ph> object: stand-alone and embedded in a class.","source":"There are two methods for using a `CCriticalSection` object: stand-alone and embedded in a class."},{"content":"Stand-alone method   To use a stand-alone <ph id=\"ph1\">`CCriticalSection`</ph> object, construct the <ph id=\"ph2\">`CCriticalSection`</ph> object when it is needed.","pos":[2713,2840],"source":"Stand-alone method   To use a stand-alone `CCriticalSection` object, construct the `CCriticalSection` object when it is needed."},{"content":"After a successful return from the constructor, explicitly lock the object with a call to <bpt id=\"p1\">[</bpt>Lock<ept id=\"p1\">](#ccriticalsection__lock)</ept>.","pos":[2841,2963],"source":" After a successful return from the constructor, explicitly lock the object with a call to [Lock](#ccriticalsection__lock)."},{"content":"Call <bpt id=\"p1\">[</bpt>Unlock<ept id=\"p1\">](#ccriticalsection__unlock)</ept> when you are done accessing the critical section.","pos":[2964,3054],"source":" Call [Unlock](#ccriticalsection__unlock) when you are done accessing the critical section."},{"content":"This method, while clearer to someone reading your source code, is more prone to error as you must remember to lock and unlock the critical section before and after access.","pos":[3055,3227]},{"content":"A more preferable method is to use the <bpt id=\"p1\">[</bpt>CSingleLock<ept id=\"p1\">](../../mfc/reference/csinglelock-class.md)</ept> class.","pos":[3238,3339],"source":"A more preferable method is to use the [CSingleLock](../../mfc/reference/csinglelock-class.md) class."},{"content":"It also has a <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> method, but you don't have to worry about unlocking the resource if an exception occurs.","pos":[3340,3462],"source":" It also has a `Lock` and `Unlock` method, but you don't have to worry about unlocking the resource if an exception occurs."},{"pos":[3472,3640],"content":"Embedded method   You can also share a class with multiple threads by adding a <ph id=\"ph1\">`CCriticalSection`</ph>-type data member to the class and locking the data member when needed.","source":"Embedded method   You can also share a class with multiple threads by adding a `CCriticalSection`-type data member to the class and locking the data member when needed."},{"pos":[3647,3851],"content":"For more information on using <ph id=\"ph1\">`CCriticalSection`</ph> objects, see the article <bpt id=\"p1\">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id=\"p1\">](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept>.","source":"For more information on using `CCriticalSection` objects, see the article [Multithreading: How to Use the Synchronization Classes](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)."},{"pos":[3860,3881],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3885,3932],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3939,3994],"content":"<bpt id=\"p1\">[</bpt>CSyncObject<ept id=\"p1\">](../../mfc/reference/csyncobject-class.md)</ept>","source":"[CSyncObject](../../mfc/reference/csyncobject-class.md)"},{"pos":[4028,4040],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4044,4063],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxmt.h","source":"**Header:** afxmt.h"},{"pos":[4073,4158],"content":"<bpt id=\"p1\">&lt;a name=\"ccriticalsection__ccriticalsection\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CCriticalSection::CCriticalSection","linkify":"<a name=\"ccriticalsection__ccriticalsection\"></a>  CCriticalSection::CCriticalSection","source":"<a name=\"ccriticalsection__ccriticalsection\"></a>  CCriticalSection::CCriticalSection"},{"pos":[4162,4201],"content":"Constructs a <ph id=\"ph1\">`CCriticalSection`</ph> object.","source":"Constructs a `CCriticalSection` object."},{"pos":[4246,4253],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To access or release a <ph id=\"ph1\">`CCriticalSection`</ph> object, create a <bpt id=\"p1\">[</bpt>CSingleLock<ept id=\"p1\">](../../mfc/reference/csinglelock-class.md)</ept> object and call its <bpt id=\"p2\">[</bpt>Lock<ept id=\"p2\">](../../mfc/reference/csinglelock-class.md#csinglelock__lock)</ept> and <bpt id=\"p3\">[</bpt>Unlock<ept id=\"p3\">](../../mfc/reference/csinglelock-class.md#csinglelock__unlock)</ept> member functions.","pos":[4257,4551],"source":"To access or release a `CCriticalSection` object, create a [CSingleLock](../../mfc/reference/csinglelock-class.md) object and call its [Lock](../../mfc/reference/csinglelock-class.md#csinglelock__lock) and [Unlock](../../mfc/reference/csinglelock-class.md#csinglelock__unlock) member functions."},{"content":"If the <ph id=\"ph1\">`CCriticalSection`</ph> object is being used stand-alone, call its <bpt id=\"p1\">[</bpt>Unlock<ept id=\"p1\">](#ccriticalsection__unlock)</ept> member function to release it.","pos":[4552,4687],"source":" If the `CCriticalSection` object is being used stand-alone, call its [Unlock](#ccriticalsection__unlock) member function to release it."},{"pos":[4694,4878],"content":"If the constructor fails to allocate the required system memory, a memory exception (of type <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept>) is automatically thrown.","source":"If the constructor fails to allocate the required system memory, a memory exception (of type [CMemoryException](../../mfc/reference/cmemoryexception-class.md)) is automatically thrown."},{"pos":[4888,4895],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4900,4970],"content":"See the example for <bpt id=\"p1\">[</bpt>CCriticalSection::Lock<ept id=\"p1\">](#ccriticalsection__lock)</ept>.","source":"See the example for [CCriticalSection::Lock](#ccriticalsection__lock)."},{"pos":[4980,5041],"content":"<bpt id=\"p1\">&lt;a name=\"ccriticalsection__lock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CCriticalSection::Lock","linkify":"<a name=\"ccriticalsection__lock\"></a>  CCriticalSection::Lock","source":"<a name=\"ccriticalsection__lock\"></a>  CCriticalSection::Lock"},{"content":"Call this member function to gain access to the critical section object.","pos":[5045,5117]},{"pos":[5186,5196],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\"> `Lock`</ph> ignores this parameter value.","pos":[5214,5251],"source":" `Lock` ignores this parameter value."},{"pos":[5261,5273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the function was successful; otherwise 0.","pos":[5277,5329]},{"pos":[5339,5346],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5350,5463],"content":"<ph id=\"ph1\">`Lock`</ph> is a blocking call that will not return until the critical section object is signaled (becomes available).","source":"`Lock` is a blocking call that will not return until the critical section object is signaled (becomes available)."},{"pos":[5470,5606],"content":"If timed waits are necessary, you can use a <bpt id=\"p1\">[</bpt>CMutex<ept id=\"p1\">](../../mfc/reference/cmutex-class.md)</ept> object instead of a <ph id=\"ph1\">`CCriticalSection`</ph> object.","source":"If timed waits are necessary, you can use a [CMutex](../../mfc/reference/cmutex-class.md) object instead of a `CCriticalSection` object."},{"pos":[5613,5789],"content":"If <ph id=\"ph1\">`Lock`</ph> fails to allocate the necessary system memory, a memory exception (of type <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept>) is automatically thrown.","source":"If `Lock` fails to allocate the necessary system memory, a memory exception (of type [CMemoryException](../../mfc/reference/cmemoryexception-class.md)) is automatically thrown."},{"pos":[5799,5806],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example demonstrates the nested critical section approach by controlling access to a shared resource (the static <ph id=\"ph1\">`_strShared`</ph> object) using a shared <ph id=\"ph2\">`CCriticalSection`</ph> object.","pos":[5810,5990],"source":"This example demonstrates the nested critical section approach by controlling access to a shared resource (the static `_strShared` object) using a shared `CCriticalSection` object."},{"content":"The <ph id=\"ph1\">`SomeMethod`</ph> function demonstrates updating a shared resource in a safe manner.","pos":[5991,6074],"source":" The `SomeMethod` function demonstrates updating a shared resource in a safe manner."},{"pos":[6081,6168],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Utilities#11<ept id=\"p2\">](../../mfc/codesnippet/cpp/ccriticalsection-class_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Utilities#11](../../mfc/codesnippet/cpp/ccriticalsection-class_1.h)]"},{"pos":[6178,6243],"content":"<bpt id=\"p1\">&lt;a name=\"ccriticalsection__m_sect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CCriticalSection::m_sect","linkify":"<a name=\"ccriticalsection__m_sect\"></a>  CCriticalSection::m_sect","source":"<a name=\"ccriticalsection__m_sect\"></a>  CCriticalSection::m_sect"},{"pos":[6247,6329],"content":"Contains a critical section object that is used by all <ph id=\"ph1\">`CCriticalSection`</ph> methods.","source":"Contains a critical section object that is used by all `CCriticalSection` methods."},{"pos":[6381,6490],"content":"<bpt id=\"p1\">&lt;a name=\"ccriticalsection__operator_critical_section_star\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CCriticalSection::operator CRITICAL_SECTION*","linkify":"<a name=\"ccriticalsection__operator_critical_section_star\"></a>  CCriticalSection::operator CRITICAL_SECTION*","source":"<a name=\"ccriticalsection__operator_critical_section_star\"></a>  CCriticalSection::operator CRITICAL_SECTION*"},{"pos":[6494,6534],"content":"Retrieves a <bpt id=\"p1\">**</bpt>CRITICAL_SECTION<ept id=\"p1\">**</ept> object.","source":"Retrieves a **CRITICAL_SECTION** object."},{"pos":[6590,6597],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6601,6686],"content":"Call this function to retrieve a pointer to the internal <bpt id=\"p1\">**</bpt>CRITICAL_SECTION<ept id=\"p1\">**</ept> object.","source":"Call this function to retrieve a pointer to the internal **CRITICAL_SECTION** object."},{"pos":[6696,6761],"content":"<bpt id=\"p1\">&lt;a name=\"ccriticalsection__unlock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CCriticalSection::Unlock","linkify":"<a name=\"ccriticalsection__unlock\"></a>  CCriticalSection::Unlock","source":"<a name=\"ccriticalsection__unlock\"></a>  CCriticalSection::Unlock"},{"pos":[6765,6830],"content":"Releases the <ph id=\"ph1\">`CCriticalSection`</ph> object for use by another thread.","source":"Releases the `CCriticalSection` object for use by another thread."},{"pos":[6870,6882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6886,6995],"content":"Nonzero if the <ph id=\"ph1\">`CCriticalSection`</ph> object was owned by the thread and the release was successful; otherwise 0.","source":"Nonzero if the `CCriticalSection` object was owned by the thread and the release was successful; otherwise 0."},{"pos":[7005,7012],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the <ph id=\"ph1\">`CCriticalSection`</ph> is being used stand-alone, <ph id=\"ph2\">`Unlock`</ph> must be called immediately after completing use of the resource controlled by the critical section.","pos":[7016,7177],"source":"If the `CCriticalSection` is being used stand-alone, `Unlock` must be called immediately after completing use of the resource controlled by the critical section."},{"content":"If a <bpt id=\"p1\">[</bpt>CSingleLock<ept id=\"p1\">](../../mfc/reference/csinglelock-class.md)</ept> object is being used, <ph id=\"ph1\">`CCriticalSection::Unlock`</ph> will be called by the lock object's <ph id=\"ph2\">`Unlock`</ph> member function.","pos":[7178,7349],"source":" If a [CSingleLock](../../mfc/reference/csinglelock-class.md) object is being used, `CCriticalSection::Unlock` will be called by the lock object's `Unlock` member function."},{"pos":[7359,7366],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7371,7441],"content":"See the example for <bpt id=\"p1\">[</bpt>CCriticalSection::Lock<ept id=\"p1\">](#ccriticalsection__lock)</ept>.","source":"See the example for [CCriticalSection::Lock](#ccriticalsection__lock)."},{"pos":[7450,7458],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CSyncObject Class<ept id=\"p1\">](../../mfc/reference/csyncobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[7462,7524],"source":"[CSyncObject Class](../../mfc/reference/csyncobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[7527,7576],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMutex Class<ept id=\"p1\">](../../mfc/reference/cmutex-class.md)</ept>","pos":[7579,7631],"source":" [CMutex Class](../../mfc/reference/cmutex-class.md)"}],"content":"---\ntitle: \"CCriticalSection Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CCriticalSection\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"synchronization objects, critical section\"\n  - \"CCriticalSection class\"\n  - \"critical sections\"\n  - \"synchronization classes, CCriticalSection class\"\nms.assetid: f776f74b-5b0b-4f32-9c13-2b8e4a0d7b2b\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CCriticalSection Class\nRepresents a \"critical section\" â€” a synchronization object that allows one thread at a time to access a resource or section of code.  \n  \n## Syntax  \n  \n```  \nclass CCriticalSection : public CSyncObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CCriticalSection::CCriticalSection](#ccriticalsection__ccriticalsection)|Constructs a `CCriticalSection` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CCriticalSection::Lock](#ccriticalsection__lock)|Use to gain access to the `CCriticalSection` object.|  \n|[CCriticalSection::Unlock](#ccriticalsection__unlock)|Releases the `CCriticalSection` object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CCriticalSection::operator CRITICAL_SECTION*](#ccriticalsection__operator_critical_section_star)|Retrieves a pointer to the internal **CRITICAL_SECTION** object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CCriticalSection::m_sect](#ccriticalsection__m_sect)|A **CRITICAL_SECTION** object.|  \n  \n## Remarks  \n Critical sections are useful when only one thread at a time can be allowed to modify data or some other controlled resource. For example, adding nodes to a linked list is a process that should only be allowed by one thread at a time. By using a `CCriticalSection` object to control the linked list, only one thread at a time can gain access to the list.  \n  \n> [!NOTE]\n>  The functionality of the `CCriticalSection` class is provided by an actual Win32 **CRITICAL_SECTION** object.  \n  \n Critical sections are used instead of mutexes (see [CMutex](../../mfc/reference/cmutex-class.md)) when speed is critical and the resource will not be used across process boundaries.  \n  \n There are two methods for using a `CCriticalSection` object: stand-alone and embedded in a class.  \n  \n-   Stand-alone method   To use a stand-alone `CCriticalSection` object, construct the `CCriticalSection` object when it is needed. After a successful return from the constructor, explicitly lock the object with a call to [Lock](#ccriticalsection__lock). Call [Unlock](#ccriticalsection__unlock) when you are done accessing the critical section. This method, while clearer to someone reading your source code, is more prone to error as you must remember to lock and unlock the critical section before and after access.  \n  \n     A more preferable method is to use the [CSingleLock](../../mfc/reference/csinglelock-class.md) class. It also has a `Lock` and `Unlock` method, but you don't have to worry about unlocking the resource if an exception occurs.  \n  \n-   Embedded method   You can also share a class with multiple threads by adding a `CCriticalSection`-type data member to the class and locking the data member when needed.  \n  \n For more information on using `CCriticalSection` objects, see the article [Multithreading: How to Use the Synchronization Classes](../../parallel/multithreading-how-to-use-the-synchronization-classes.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CSyncObject](../../mfc/reference/csyncobject-class.md)  \n  \n `CCriticalSection`  \n  \n## Requirements  \n **Header:** afxmt.h  \n  \n##  <a name=\"ccriticalsection__ccriticalsection\"></a>  CCriticalSection::CCriticalSection  \n Constructs a `CCriticalSection` object.  \n  \n```  \nCCriticalSection();\n```  \n  \n### Remarks  \n To access or release a `CCriticalSection` object, create a [CSingleLock](../../mfc/reference/csinglelock-class.md) object and call its [Lock](../../mfc/reference/csinglelock-class.md#csinglelock__lock) and [Unlock](../../mfc/reference/csinglelock-class.md#csinglelock__unlock) member functions. If the `CCriticalSection` object is being used stand-alone, call its [Unlock](#ccriticalsection__unlock) member function to release it.  \n  \n If the constructor fails to allocate the required system memory, a memory exception (of type [CMemoryException](../../mfc/reference/cmemoryexception-class.md)) is automatically thrown.  \n  \n### Example  \n  See the example for [CCriticalSection::Lock](#ccriticalsection__lock).  \n  \n##  <a name=\"ccriticalsection__lock\"></a>  CCriticalSection::Lock  \n Call this member function to gain access to the critical section object.  \n  \n```  \nBOOL Lock();\n\n \nBOOL Lock(DWORD dwTimeout);\n```  \n  \n### Parameters  \n `dwTimeout`  \n `Lock` ignores this parameter value.  \n  \n### Return Value  \n Nonzero if the function was successful; otherwise 0.  \n  \n### Remarks  \n `Lock` is a blocking call that will not return until the critical section object is signaled (becomes available).  \n  \n If timed waits are necessary, you can use a [CMutex](../../mfc/reference/cmutex-class.md) object instead of a `CCriticalSection` object.  \n  \n If `Lock` fails to allocate the necessary system memory, a memory exception (of type [CMemoryException](../../mfc/reference/cmemoryexception-class.md)) is automatically thrown.  \n  \n### Example  \n This example demonstrates the nested critical section approach by controlling access to a shared resource (the static `_strShared` object) using a shared `CCriticalSection` object. The `SomeMethod` function demonstrates updating a shared resource in a safe manner.  \n  \n [!code-cpp[NVC_MFC_Utilities#11](../../mfc/codesnippet/cpp/ccriticalsection-class_1.h)]  \n  \n##  <a name=\"ccriticalsection__m_sect\"></a>  CCriticalSection::m_sect  \n Contains a critical section object that is used by all `CCriticalSection` methods.  \n  \n```  \nCRITICAL_SECTION m_sect;  \n```  \n  \n##  <a name=\"ccriticalsection__operator_critical_section_star\"></a>  CCriticalSection::operator CRITICAL_SECTION*  \n Retrieves a **CRITICAL_SECTION** object.  \n  \n```  \noperator CRITICAL_SECTION*();\n```   \n  \n### Remarks  \n Call this function to retrieve a pointer to the internal **CRITICAL_SECTION** object.  \n  \n##  <a name=\"ccriticalsection__unlock\"></a>  CCriticalSection::Unlock  \n Releases the `CCriticalSection` object for use by another thread.  \n  \n```  \nBOOL Unlock();\n```  \n  \n### Return Value  \n Nonzero if the `CCriticalSection` object was owned by the thread and the release was successful; otherwise 0.  \n  \n### Remarks  \n If the `CCriticalSection` is being used stand-alone, `Unlock` must be called immediately after completing use of the resource controlled by the critical section. If a [CSingleLock](../../mfc/reference/csinglelock-class.md) object is being used, `CCriticalSection::Unlock` will be called by the lock object's `Unlock` member function.  \n  \n### Example  \n  See the example for [CCriticalSection::Lock](#ccriticalsection__lock).  \n  \n## See Also  \n [CSyncObject Class](../../mfc/reference/csyncobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CMutex Class](../../mfc/reference/cmutex-class.md)\n"}