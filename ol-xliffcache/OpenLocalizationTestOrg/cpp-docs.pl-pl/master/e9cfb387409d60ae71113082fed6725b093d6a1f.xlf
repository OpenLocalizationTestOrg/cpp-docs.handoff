<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9cfb387409d60ae71113082fed6725b093d6a1f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\reference\ctime-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e991a3b025c494589385e661db899917e73a543e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f1299f18745f903bae0bf5eeb9f698cc5136c1b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CTime Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CTime Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents an absolute time and date.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CTime::CTime</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs <ph id="ph1">`CTime`</ph> objects in various ways.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CTime::Format</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">`CTime`</ph> object into a formatted string — based on the local time zone.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CTime::FormatGmt</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">`CTime`</ph> object into a formatted string — based on UTC.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CTime::GetAsDBTIMESTAMP</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Converts the time information stored in the <ph id="ph1">`CTime`</ph> object to a Win32-compatible DBTIMESTAMP structure.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CTime::GetAsSystemTime</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Converts the time information stored in the <ph id="ph1">`CTime`</ph> object to a Win32-compatible <bpt id="p1">[</bpt>SYSTEMTIME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724950)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CTime::GetCurrentTime</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CTime`</ph> object that represents the current time (static member function).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CTime::GetDay</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns the day represent by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CTime::GetDayOfWeek</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Returns the day of the week represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CTime::GetGmtTm</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Breaks down a <ph id="ph1">`CTime`</ph> object into components — based on UTC.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CTime::GetHour</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns the hour represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CTime::GetLocalTm</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Breaks down a <ph id="ph1">`CTime`</ph> object into components — based on the local time zone.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CTime::GetMinute</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns the minute represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CTime::GetMonth</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns the month represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CTime::GetSecond</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns the second represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CTime::GetTime</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">**</bpt>__time64_t<ept id="p1">**</ept> value for the given <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CTime::GetYear</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns the year represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CTime::Serialize64</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Serializes data to or from an archive.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>operator + –</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>These operators add and subtract <ph id="ph1">`CTimeSpan`</ph> and <ph id="ph2">`CTime`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>operator +=, –=</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>These operators add and subtract a <ph id="ph1">`CTimeSpan`</ph> object to and from this <ph id="ph2">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>operator =</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The assignment operator.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>operator ==, &lt; , etc.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Comparison operators.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>does not have a base class.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>values are based on coordinated universal time (UTC), which is equivalent to Coordinated Universal time (Greenwich Mean Time, GMT).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Time Management<ept id="p1">](../../c-runtime-library/time-management.md)</ept> for information about how the time zone is determined.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When you create a <ph id="ph1">`CTime`</ph> object, set the <ph id="ph2">`nDST`</ph> parameter to 0 to indicate that standard time is in effect, or to a value larger than 0 to indicate that daylight saving time is in effect, or to a value less than zero to have the C run-time library code compute whether standard time or daylight saving time is in effect.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>is a required field.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If not set, its value is undefined and the return value from <bpt id="p1">[</bpt>mktime<ept id="p1">](../../c-runtime-library/reference/mktime-mktime32-mktime64.md)</ept> is unpredictable.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeptr`</ph> points to a tm structure returned by a previous call to <bpt id="p1">[</bpt>asctime_s<ept id="p1">](../../c-runtime-library/reference/asctime-s-wasctime-s.md)</ept>, <bpt id="p2">[</bpt>_gmtime_s<ept id="p2">](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md)</ept>, or <bpt id="p3">[</bpt>localtime_s<ept id="p3">](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md)</ept>, the <ph id="ph2">`tm_isdst`</ph> field contains the correct value.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A companion class, <bpt id="p1">[</bpt>CTimeSpan<ept id="p1">](../../atl-mfc-shared/reference/ctimespan-class.md)</ept>, represents a time interval.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CTime`</ph> and <ph id="ph2">`CTimeSpan`</ph> classes are not designed for derivation.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Because there are no virtual functions, the size of <ph id="ph1">`CTime`</ph> and <ph id="ph2">`CTimeSpan`</ph> objects is exactly 8 bytes.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Most member functions are inline.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The upper date limit is 12/31/3000.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The lower limit is 1/1/1970 12:00:00 AM GMT.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information about using <ph id="ph1">`CTime`</ph>, see the articles <bpt id="p1">[</bpt>Date and Time<ept id="p1">](../../atl-mfc-shared/date-and-time.md)</ept>, and <bpt id="p2">[</bpt>Time Management<ept id="p2">](../../c-runtime-library/time-management.md)</ept> in the Run-Time Library Reference.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CTime`</ph> structure changed from MFC 7.1 to MFC 8.0.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you serialize a <ph id="ph1">`CTime`</ph> structure by using the <ph id="ph2">`operator &lt;&lt;`</ph> under MFC 8.0 or a later version, the resulting file will not be readable on older versions of MFC.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atltime.h</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CTime Comparison Operators</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Comparison operators.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CTime`</ph> object to be compared.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>These operators compare two absolute times and return <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the condition is true; otherwise <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#161</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CTime::CTime</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">`CTime`</ph> object initialized with the specified time.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Indicates a <ph id="ph1">`CTime`</ph> object that already exists.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>__time64_t<ept id="p1">**</ept> time value, which is the number of seconds after January 1, 1970 UTC.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Note that this will be adjusted to your local time.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, if you are in New York and create a <ph id="ph1">`CTime`</ph> object by passing a parameter of 0, <bpt id="p1">[</bpt>CTime::GetMonth<ept id="p1">](#ctime__getmonth)</ept> will return 12.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In Visual C++ versions 6.0 and earlier, <ph id="ph1">`time`</ph> was a value of <ph id="ph2">`time_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Visual C++ .NET and later converts a <ph id="ph1">`time_t`</ph> parameter to <bpt id="p1">**</bpt>__time64_t<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`nMonth`</ph>, <ph id="ph2">`nDay`</ph>, <ph id="ph3">`nHour`</ph>, <ph id="ph4">`nMin`</ph>,</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Indicates the date and time values to be copied into the new <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Indicates whether daylight savings time is in effect.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Can have one of three values:</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>set to 0Standard time is in effect.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>set to a value greater than 0Daylight savings time is in effect.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>set to a value less than 0The default.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Automatically computes whether standard time or daylight savings time is in effect.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>MS-DOS date and time values to be converted to a date/time value and copied into the new <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>SYSTEMTIME<ept id="p1">](https://www.microsoftonedoc.com/#/organizations/e6f6a65cf14f462597b64ac058dbe1d0/projects/3fedad16-eaf1-41a6-8f96-0c1949c68f32/containers/a3daf831-1c5f-4bbe-964d-503870caf874/tocpaths/d6609fff-1931-4818-8a26-f042630af0b0/locales/en-us)</ept> structure to be converted to a date/time value and copied into the new <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>FILETIME<ept id="p1">](https://www.microsoftonedoc.com/#/organizations/e6f6a65cf14f462597b64ac058dbe1d0/projects/3fedad16-eaf1-41a6-8f96-0c1949c68f32/containers/a3daf831-1c5f-4bbe-964d-503870caf874/tocpaths/979ce746-dc17-4147-89f8-41d05c5fcc5f/locales/en-us)</ept> structure to be converted to a date/time value and copied into the new <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>dbts</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A reference to a DBTIMESTAMP structure containing the current local time.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Each constructor is described below:</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTime( );<ept id="p1">**</ept>Constructs an uninitialized <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This constructor allows you to define <ph id="ph1">`CTime`</ph> object arrays.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You should initialize such arrays with valid times before using.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTime( const CTime&amp; );<ept id="p1">**</ept>Constructs a <ph id="ph1">`CTime`</ph> object from another <ph id="ph2">`CTime`</ph> value.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTime( __time64_t );<ept id="p1">**</ept>Constructs a <ph id="ph1">`CTime`</ph> object from a <bpt id="p2">**</bpt>__time64_t<ept id="p2">**</ept> type.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This constructor expects a UTC time and converts the result to a local time before storing the result.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTime( int, int, ...);<ept id="p1">**</ept>Constructs a <ph id="ph1">`CTime`</ph> object from local time components with each component constrained to the following ranges:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Component</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Range</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>1970–3000</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>1–12</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>1–31</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>0-23</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>0-59</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>0-59</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This constructor makes the appropriate conversion to UTC.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The Debug version of the Microsoft Foundation Class Library asserts if one or more of the time components are out of range.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You must validate the arguments before calling.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This constructor expects a local time.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>( <bpt id="p1">**</bpt>WORD, WORD<ept id="p1">**</ept> ) <bpt id="p2">**</bpt>;<ept id="p2">**</ept>Constructs a <ph id="ph1">`CTime`</ph> object from the specified MS-DOS date and time values.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This constructor expects a local time.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>( <bpt id="p1">**</bpt>const SYSTEMTIME&amp;<ept id="p1">**</ept> ) <bpt id="p2">**</bpt>;<ept id="p2">**</ept>Constructs a <ph id="ph1">`CTime`</ph> object from a <ph id="ph2">`SYSTEMTIME`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This constructor expects a local time.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>( <bpt id="p1">**</bpt>const FILETIME&amp;<ept id="p1">**</ept> ) <bpt id="p2">**</bpt>;<ept id="p2">**</ept>Constructs a <ph id="ph1">`CTime`</ph> object from a <ph id="ph2">`FILETIME`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>You most likely will not use <ph id="ph1">`CTime``FILETIME`</ph> initialization directly.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If you use a <ph id="ph1">`CFile`</ph> object to manipulate a file, <ph id="ph2">`CFile::GetStatus`</ph> retrieves the file time stamp for you through a <ph id="ph3">`CTime`</ph> object initialized with a <ph id="ph4">`FILETIME`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This constructor assumes a time based on UTC and automatically converts the value to local time before storing the result.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The constructor using <bpt id="p1">**</bpt>DBTIMESTAMP<ept id="p1">**</ept> parameter is only available when OLEDB.h is included.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>SYSTEMTIME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724950)</ept> and <bpt id="p2">[</bpt>FILETIME<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms724284)</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Also see the <bpt id="p1">[</bpt>MS-DOS Date and Time<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724503)</ept> entry in the <ph id="ph1">[!INCLUDE[winsdkshort](../../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#148</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>CTime::Format</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Call this member function to create a formatted representation of the date-time value.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A formatting string similar to the <ph id="ph1">`printf`</ph> formatting string.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Formatting codes, preceded by a percent ( <ph id="ph1">`%`</ph>) sign, are replaced by the corresponding <ph id="ph2">`CTime`</ph> component.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Other characters in the formatting string are copied unchanged to the returned string.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>See the run-time function <bpt id="p1">[</bpt>strftime<ept id="p1">](../../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md)</ept> for a list of formatting codes.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The ID of the string that identifies this format.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> that contains the formatted time.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If the status of this <ph id="ph1">`CTime`</ph> object is null, the return value is an empty string.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This method throws an exception if the date-time value to format does not range from midnight, January 1, 1970 through December 31, 3000 Universal Coordinated Time (UTC).</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#149</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>CTime::FormatGmt</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Generates a formatted string that corresponds to this <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Specifies a formatting string similar to the <ph id="ph1">`printf`</ph> formatting string.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>See the run-time function <bpt id="p1">[</bpt>strftime<ept id="p1">](../../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md)</ept> for details.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The ID of the string that identifies this format.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> that contains the formatted time.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The time value is not converted and thus reflects UTC.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This method throws an exception if the date-time value to format does not range from midnight, January 1, 1970 through December 31, 3000 Universal Coordinated Time (UTC).</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTime::Format<ept id="p1">](#ctime__format)</ept>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>CTime::GetAsDBTIMESTAMP</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Call this member function to convert the time information stored in the <ph id="ph1">`CTime`</ph> object to a Win32–compatible DBTIMESTAMP structure.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A reference to a DBTIMESTAMP structure containing the current local time.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Stores the resulting time in the referenced <ph id="ph1">`dbts`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DBTIMESTAMP<ept id="p1">**</ept> data structure initialized by this function will have its <bpt id="p2">**</bpt>fraction<ept id="p2">**</ept> member set to zero.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#150</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>CTime::GetAsSystemTime</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Call this member function to convert the time information stored in the <ph id="ph1">`CTime`</ph> object to a Win32–compatible <bpt id="p1">[</bpt>SYSTEMTIME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724950)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>timeDest</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>SYSTEMTIME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724950)</ept> structure that will hold the converted date/time value of the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>True if successful; otherwise false.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>stores the resulting time in the referenced <bpt id="p1">*</bpt>timeDest<ept id="p1">*</ept> structure.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SYSTEMTIME`</ph> data structure initialized by this function will have its <bpt id="p1">**</bpt>wMilliseconds<ept id="p1">**</ept> member set to zero.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#151</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>CTime::GetCurrentTime</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CTime`</ph> object that represents the current time.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Returns the current system date and time in Coordinated Universal Time (UTC).</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#152</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>CTime::GetDay</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Returns the day represent by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Returns the day of the month, based on local time, in the range 1 through 31.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>This function calls <ph id="ph1">`GetLocalTm`</ph>, which uses an internal, statically allocated buffer.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The data in this buffer is overwritten because of calls to other <ph id="ph1">`CTime`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#153</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>CTime::GetDayOfWeek</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Returns the day of the week represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Returns the day of the week based on local time; 1 = Sunday, 2 = Monday, to 7 = Saturday.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>This function calls <ph id="ph1">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The data in this buffer is overwritten because of calls to other <ph id="ph1">`CTime`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#154</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>CTime::GetGmtTm</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">**</bpt>struct tm<ept id="p1">**</ept> that contains a decomposition of the time contained in this <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Points to a buffer that will receive the time data.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>If this pointer is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>A pointer to a filled-in <bpt id="p1">**</bpt>struct tm<ept id="p1">**</ept> as defined in the include file TIME.H.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>gmtime, _gmtime32, _gmtime64<ept id="p1">](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)</ept> for the structure layout.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>returns UTC.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>cannot be <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>If you want to revert to the old behavior, in which <ph id="ph1">`ptm`</ph> could be <ph id="ph2">`NULL`</ph> to indicate that an internal, statically allocated buffer should be used, then undefine <ph id="ph3">`_SECURE_ATL`</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#155</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>CTime::GetHour</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Returns the hour represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Returns the hour, based on local time, in the range 0 through 23.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>This function calls <ph id="ph1">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The data in this buffer is overwritten because of calls to other <ph id="ph1">`CTime`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#156</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>CTime::GetLocalTm</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">**</bpt>struct tm<ept id="p1">**</ept> containing a decomposition of the time contained in this <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Points to a buffer that will receive the time data.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If this pointer is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>A pointer to a filled-in <bpt id="p1">**</bpt>struct tm<ept id="p1">**</ept> as defined in the include file TIME.H.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>gmtime, _gmtime32, _gmtime64<ept id="p1">](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)</ept> for the structure layout.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>returns local time.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>cannot be <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>If you want to revert to the old behavior, in which <ph id="ph1">`ptm`</ph> could be <ph id="ph2">`NULL`</ph> to indicate that an internal, statically allocated buffer should be used, then undefine <ph id="ph3">`_SECURE_ATL`</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#157</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>CTime::GetMinute</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Returns the minute represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Returns the minute, based on local time, in the range 0 through 59.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>This function calls <ph id="ph1">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The data in this buffer is overwritten because of calls to other <ph id="ph1">`CTime`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>GetHour<ept id="p1">](#ctime__gethour)</ept>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>CTime::GetMonth</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Returns the month represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Returns the month, based on local time, in the range 1 through 12 (1 = January).</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>This function calls <ph id="ph1">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The data in this buffer is overwritten because of calls to other <ph id="ph1">`CTime`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>GetDay<ept id="p1">](#ctime__getday)</ept>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>CTime::GetSecond</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Returns the second represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Returns the second, based on local time, in the range 0 through 59.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>This function calls <ph id="ph1">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The data in this buffer is overwritten because of calls to other <ph id="ph1">`CTime`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>GetHour<ept id="p1">](#ctime__gethour)</ept>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>CTime::GetTime</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">**</bpt>__time64_t<ept id="p1">**</ept> value for the given <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetTime<ept id="p1">**</ept> will return the number of seconds between the current <ph id="ph1">`CTime`</ph> object and January 1, 1970.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#158</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>CTime::GetYear</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Returns the year represented by the <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Returns the year, based on local time, in the range January 1,1970, to January 18, 2038 (inclusive).</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>This function calls <ph id="ph1">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The data in this buffer is overwritten because of calls to other <ph id="ph1">`CTime`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>GetDay<ept id="p1">](#ctime__getday)</ept>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>CTime::operator =</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The assignment operator.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The new date/time value.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The updated <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>This overloaded assignment operator copies the source time into this <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The internal time storage in a <ph id="ph1">`CTime`</ph> object is independent of time zone.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Time zone conversion is not necessary during assignment.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>CTime::operator +, -</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>These operators add and subtract <ph id="ph1">`CTimeSpan`</ph> and <ph id="ph2">`CTime`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>timeSpan</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CTimeSpan`</ph> object to be added or subtracted.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CTime`</ph> object to be subtracted.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CTime`</ph> or <ph id="ph2">`CTimeSpan`</ph> object representing the result of the operation.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>objects represent absolute time, <ph id="ph1">`CTimeSpan`</ph> objects represent relative time.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The first two operators allow you to add and subtract <ph id="ph1">`CTimeSpan`</ph> objects to and from <ph id="ph2">`CTime`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The third operator allows you to subtract one <ph id="ph1">`CTime`</ph> object from another to yield a <ph id="ph2">`CTimeSpan`</ph> object.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#159</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>CTime::operator +=, -=</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>These operators add and subtract a <ph id="ph1">`CTimeSpan`</ph> object to and from this <ph id="ph2">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CTimeSpan`</ph> object to be added or subtracted.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The updated <ph id="ph1">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>These operators allow you to add and subtract a <ph id="ph1">`CTimeSpan`</ph> object to and from this <ph id="ph2">`CTime`</ph> object.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#160</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>CTime::Serialize64</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>This method is only available in MFC projects.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Serializes the data associated with the member variable to or from an archive.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CArchive`</ph> object that you want to update.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The updated <ph id="ph1">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>asctime_s, _wasctime_s</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>_ftime_s, _ftime32_s, _ftime64_s</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>gmtime_s, _gmtime32_s, _gmtime64_s</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>localtime_s, _localtime32_s, _localtime64_s</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>strftime, wcsftime, _strftime_l, _wcsftime_l</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>time, _time32, _time64</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>CTimeSpan Class</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>ATL/MFC Shared Classes</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>