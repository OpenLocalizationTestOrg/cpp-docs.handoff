{"nodes":[{"pos":[12,50],"content":"_variant_t Extractors | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_variant_t Extractors | Microsoft Docs","pos":[0,38]}]},{"content":"_variant_t Extractors","pos":[1761,1782]},{"content":"Microsoft Specific","pos":[1785,1803]},{"pos":[1812,1866],"content":"Extract data from the encapsulated <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> object.","source":"Extract data from the encapsulated **VARIANT** object."},{"content":"Syntax","pos":[1875,1881]},{"content":"Remarks","pos":[2481,2488]},{"content":"Extracts raw data from an encapsulated <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","pos":[2492,2543],"source":"Extracts raw data from an encapsulated **VARIANT**."},{"content":"If the <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> is not already the proper type, <bpt id=\"p2\">**</bpt>VariantChangeType<ept id=\"p2\">**</ept> is used to attempt a conversion, and an error is generated upon failure:","pos":[2544,2689],"source":" If the **VARIANT** is not already the proper type, **VariantChangeType** is used to attempt a conversion, and an error is generated upon failure:"},{"pos":[2699,2756],"content":"<bpt id=\"p1\">**</bpt>operator short( )<ept id=\"p1\">**</ept> Extracts a <bpt id=\"p2\">**</bpt>short<ept id=\"p2\">**</ept> integer value.","source":"**operator short( )** Extracts a **short** integer value."},{"pos":[2766,2821],"content":"<bpt id=\"p1\">**</bpt>operator long( )<ept id=\"p1\">**</ept> Extracts a <bpt id=\"p2\">**</bpt>long<ept id=\"p2\">**</ept> integer value.","source":"**operator long( )** Extracts a **long** integer value."},{"pos":[2831,2890],"content":"<bpt id=\"p1\">**</bpt>operator float( )<ept id=\"p1\">**</ept> Extracts a <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept> numerical value.","source":"**operator float( )** Extracts a **float** numerical value."},{"pos":[2900,2959],"content":"<bpt id=\"p1\">**</bpt>operator double( )<ept id=\"p1\">**</ept> Extracts a <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept> integer value.","source":"**operator double( )** Extracts a **double** integer value."},{"pos":[2969,3013],"content":"<bpt id=\"p1\">**</bpt>operator CY( )<ept id=\"p1\">**</ept> Extracts a <bpt id=\"p2\">**</bpt>CY<ept id=\"p2\">**</ept> object.","source":"**operator CY( )** Extracts a **CY** object."},{"pos":[3023,3068],"content":"<bpt id=\"p1\">**</bpt>operator bool( )<ept id=\"p1\">**</ept> Extracts a <ph id=\"ph1\">`bool`</ph> value.","source":"**operator bool( )** Extracts a `bool` value."},{"pos":[3078,3131],"content":"<bpt id=\"p1\">**</bpt>operator DECIMAL( )<ept id=\"p1\">**</ept> Extracts a <bpt id=\"p2\">**</bpt>DECIMAL<ept id=\"p2\">**</ept> value.","source":"**operator DECIMAL( )** Extracts a **DECIMAL** value."},{"pos":[3141,3188],"content":"<bpt id=\"p1\">**</bpt>operator BYTE( )<ept id=\"p1\">**</ept> Extracts a <bpt id=\"p2\">**</bpt>BYTE<ept id=\"p2\">**</ept> value.","source":"**operator BYTE( )** Extracts a **BYTE** value."},{"pos":[3198,3285],"content":"<bpt id=\"p1\">**</bpt>operator _bstr_t( )<ept id=\"p1\">**</ept> Extracts a string, which is encapsulated in a <ph id=\"ph1\">`_bstr_t`</ph> object.","source":"**operator _bstr_t( )** Extracts a string, which is encapsulated in a `_bstr_t` object."},{"content":"<bpt id=\"p1\">**</bpt>operator IDispatch<ph id=\"ph1\">\\*</ph>( )<ept id=\"p1\">**</ept> Extracts a dispinterface pointer from an encapsulated <bpt id=\"p2\">**</bpt>VARIANT<ept id=\"p2\">**</ept>.","pos":[3295,3389],"source":"**operator IDispatch\\*( )** Extracts a dispinterface pointer from an encapsulated **VARIANT**."},{"content":"is called on the resulting pointer, so it is up to you to call <bpt id=\"p1\">**</bpt>Release<ept id=\"p1\">**</ept> to free it.","pos":[3399,3485],"source":" is called on the resulting pointer, so it is up to you to call **Release** to free it."},{"content":"<bpt id=\"p1\">**</bpt>operator IUnknown<ph id=\"ph1\">\\*</ph>( )<ept id=\"p1\">**</ept> Extracts a COM interface pointer from an encapsulated <bpt id=\"p2\">**</bpt>VARIANT<ept id=\"p2\">**</ept>.","pos":[3495,3588],"source":"**operator IUnknown\\*( )** Extracts a COM interface pointer from an encapsulated **VARIANT**."},{"content":"is called on the resulting pointer, so it is up to you to call <bpt id=\"p1\">**</bpt>Release<ept id=\"p1\">**</ept> to free it.","pos":[3598,3684],"source":" is called on the resulting pointer, so it is up to you to call **Release** to free it."},{"content":"END Microsoft Specific","pos":[3693,3715]},{"content":"See Also","pos":[3726,3734]},{"content":"_variant_t Class","pos":[3739,3755]}],"content":"---\ntitle: \"_variant_t Extractors | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"_variant_t.operatordouble\"\n  - \"operatorlong\"\n  - \"_variant_t::operator_bstr_t\"\n  - \"operatordouble\"\n  - \"_variant_t.operatorCY\"\n  - \"operatorCY\"\n  - \"_variant_t::operatorCY\"\n  - \"_variant_t::operatordouble\"\n  - \"operatorfloat\"\n  - \"operatorBYTE\"\n  - \"_variant_t.operatorDECIMAL\"\n  - \"_variant_t::operatorlong\"\n  - \"operatorIDispatch\"\n  - \"_variant_t.operatorBYTE\"\n  - \"operatorDECIMAL\"\n  - \"_variant_t.operator_bstr_t\"\n  - \"_variant_t::operatorDECIMAL\"\n  - \"_variant_t.operatorIUnknown\"\n  - \"_variant_t.operatorlong\"\n  - \"_variant_t::operatorIDispatch\"\n  - \"_variant_t::operatorIUnknown\"\n  - \"operatorIUnknown\"\n  - \"_variant_t.operatorbool\"\n  - \"_variant_t::operatorBYTE\"\n  - \"_variant_t.operatorfloat\"\n  - \"operator_bstr_t\"\n  - \"_variant_t::operatorbool\"\n  - \"operatorshort\"\n  - \"_variant_t::operatorshort\"\n  - \"_variant_t::operatorfloat\"\n  - \"_variant_t.operatorIDispatch\"\n  - \"_variant_t.operatorshort\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"extractors, _variant_t class\"\n  - \"operator CY\"\n  - \"operator IDispatch\"\n  - \"operator SHORT\"\n  - \"operator double\"\n  - \"operator long\"\n  - \"operator _bstr_t\"\n  - \"operator DECIMAL\"\n  - \"operator float\"\n  - \"operator bool\"\n  - \"operator BYTE\"\n  - \"operator IUnknown\"\nms.assetid: 33c1782f-045a-4673-9619-1d750efc83a9\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _variant_t Extractors\n**Microsoft Specific**  \n  \n Extract data from the encapsulated **VARIANT** object.  \n  \n## Syntax  \n  \n```  \n  \n      operator short( ) const;   \noperator long( ) const;   \noperator float( ) const;   \noperator double( ) const;   \noperator CY( ) const;   \noperator _bstr_t( ) const;   \noperator IDispatch*( ) const;   \noperator bool( ) const;   \noperator IUnknown*( ) const;   \noperator DECIMAL( ) const;   \noperator BYTE( ) const;  \noperator VARIANT() const throw();  \noperator char() const;  \noperator unsigned short() const;  \noperator unsigned long() const;  \noperator int() const;  \noperator unsigned int() const;  \noperator __int64() const;  \noperator unsigned __int64() const;  \n```  \n  \n## Remarks  \n Extracts raw data from an encapsulated **VARIANT**. If the **VARIANT** is not already the proper type, **VariantChangeType** is used to attempt a conversion, and an error is generated upon failure:  \n  \n-   **operator short( )** Extracts a **short** integer value.  \n  \n-   **operator long( )** Extracts a **long** integer value.  \n  \n-   **operator float( )** Extracts a **float** numerical value.  \n  \n-   **operator double( )** Extracts a **double** integer value.  \n  \n-   **operator CY( )** Extracts a **CY** object.  \n  \n-   **operator bool( )** Extracts a `bool` value.  \n  \n-   **operator DECIMAL( )** Extracts a **DECIMAL** value.  \n  \n-   **operator BYTE( )** Extracts a **BYTE** value.  \n  \n-   **operator _bstr_t( )** Extracts a string, which is encapsulated in a `_bstr_t` object.  \n  \n-   **operator IDispatch\\*( )** Extracts a dispinterface pointer from an encapsulated **VARIANT**. `AddRef` is called on the resulting pointer, so it is up to you to call **Release** to free it.  \n  \n-   **operator IUnknown\\*( )** Extracts a COM interface pointer from an encapsulated **VARIANT**. `AddRef` is called on the resulting pointer, so it is up to you to call **Release** to free it.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [_variant_t Class](../cpp/variant-t-class.md)"}