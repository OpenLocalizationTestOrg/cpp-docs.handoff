{"nodes":[{"pos":[12,47],"content":"modf, modff, modfl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"modf, modff, modfl | Microsoft Docs","pos":[0,35]}]},{"pos":[1059,1077],"content":"modf, modff, modfl","linkify":"modf, modff, modfl","nodes":[{"content":"modf, modff, modfl","pos":[0,18]}]},{"content":"Splits a floating-point value into fractional and integer parts.","pos":[1078,1142]},{"pos":[1151,1157],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1517,1527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[1531,1534],"source":"*x*"},{"content":"Floating-point value.","pos":[1538,1559]},{"content":"Pointer to stored integer portion.","pos":[1578,1612]},{"pos":[1621,1633],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"This function returns the signed fractional portion of <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>.","pos":[1637,1696],"source":"This function returns the signed fractional portion of *x*."},{"content":"There is no error return.","pos":[1697,1722]},{"pos":[1731,1738],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`modf`</ph> functions break down the floating-point value <ph id=\"ph2\">`x`</ph> into fractional and integer parts, each of which has the same sign as <ph id=\"ph3\">`x`</ph>.","pos":[1742,1877],"source":"The `modf` functions break down the floating-point value `x` into fractional and integer parts, each of which has the same sign as `x`."},{"content":"The signed fractional portion of <ph id=\"ph1\">`x`</ph> is returned.","pos":[1878,1927],"source":" The signed fractional portion of `x` is returned."},{"content":"The integer portion is stored as a floating-point value at <ph id=\"ph1\">`intptr.`</ph>","pos":[1928,1996],"source":" The integer portion is stored as a floating-point value at `intptr.`"},{"content":"<ph id=\"ph1\">`modf`</ph> has an implementation that uses Streaming SIMD Extensions 2 (SSE2).","pos":[2003,2077],"source":"`modf` has an implementation that uses Streaming SIMD Extensions 2 (SSE2)."},{"content":"See <bpt id=\"p1\">[</bpt>_set_SSE2_enable<ept id=\"p1\">](../../c-runtime-library/reference/set-sse2-enable.md)</ept> for information and restrictions on using the SSE2 implementation.","pos":[2078,2221],"source":" See [_set_SSE2_enable](../../c-runtime-library/reference/set-sse2-enable.md) for information and restrictions on using the SSE2 implementation."},{"content":"C++ allows overloading, so you can call overloads of <ph id=\"ph1\">`modf`</ph> that take and return <ph id=\"ph2\">`float`</ph> or <ph id=\"ph3\">`long double`</ph> parameters.","pos":[2228,2345],"source":"C++ allows overloading, so you can call overloads of `modf` that take and return `float` or `long double` parameters."},{"content":"In a C program, <ph id=\"ph1\">`modf`</ph> always takes two double values and returns a double value.","pos":[2346,2427],"source":" In a C program, `modf` always takes two double values and returns a double value."},{"pos":[2436,2448],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2455,2462]},{"content":"Required header","pos":[2463,2478]},{"pos":[2523,2547],"content":"<ph id=\"ph1\">`modf`</ph>, <ph id=\"ph2\">`modff`</ph>, <ph id=\"ph3\">`modfl`</ph>","source":"`modf`, `modff`, `modfl`"},{"content":"C: <ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[2548,2560],"source":"C: \\<math.h>"},{"content":"C++: , <ph id=\"ph1\">\\&lt;</ph>cmath&gt; or <ph id=\"ph2\">\\&lt;</ph>math.h&gt;","pos":[2573,2601],"source":"C++: , \\<cmath> or \\<math.h>"},{"pos":[2609,2733],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2742,2751],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[2755,2847],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[2856,2863],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3223,3229],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[3320,3328],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[3332,3408],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>frexp<ept id=\"p1\">](../../c-runtime-library/reference/frexp.md)</ept><ph id=\"ph1\"> </ph>","pos":[3411,3464],"source":" [frexp](../../c-runtime-library/reference/frexp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ldexp<ept id=\"p1\">](../../c-runtime-library/reference/ldexp.md)</ept>","pos":[3467,3519],"source":" [ldexp](../../c-runtime-library/reference/ldexp.md)"}],"content":"---\ntitle: \"modf, modff, modfl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"modff\"\n  - \"modf\"\n  - \"modfl\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"modff\"\n  - \"_modfl\"\n  - \"modf\"\n  - \"modfl\"\n  - \"math/modf\"\n  - \"math/modff\"\n  - \"math/modfl\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"modf function\"\n  - \"modff function\"\n  - \"modfl function\"\nms.assetid: b1c7abf5-d476-43ca-a03c-02072a86e32d\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# modf, modff, modfl\nSplits a floating-point value into fractional and integer parts.  \n  \n## Syntax  \n  \n```  \ndouble modf(  \n   double x,  \n   double * intptr   \n);  \nfloat modf(  \n   float x,  \n   float * intptr  \n);  // C++ only  \nlong double modf(  \n   long double x,  \n   long double * intptr  \n);  // C++ only  \nfloat modff(  \n   float x,  \n   float * intptr   \n);  \nlong double modfl(  \n   long double x,  \n   long double * intptr  \n);  \n```  \n  \n#### Parameters  \n *x*  \n Floating-point value.  \n  \n `intptr`  \n Pointer to stored integer portion.  \n  \n## Return Value  \n This function returns the signed fractional portion of *x*. There is no error return.  \n  \n## Remarks  \n The `modf` functions break down the floating-point value `x` into fractional and integer parts, each of which has the same sign as `x`. The signed fractional portion of `x` is returned. The integer portion is stored as a floating-point value at `intptr.`  \n  \n `modf` has an implementation that uses Streaming SIMD Extensions 2 (SSE2). See [_set_SSE2_enable](../../c-runtime-library/reference/set-sse2-enable.md) for information and restrictions on using the SSE2 implementation.  \n  \n C++ allows overloading, so you can call overloads of `modf` that take and return `float` or `long double` parameters. In a C program, `modf` always takes two double values and returns a double value.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`modf`, `modff`, `modfl`|C: \\<math.h><br /><br /> C++: , \\<cmath> or \\<math.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_modf.c  \n  \n#include <math.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   double x, y, n;  \n  \n   x = -14.87654321;      /* Divide x into its fractional */  \n   y = modf( x, &n );     /* and integer parts            */  \n  \n   printf( \"For %f, the fraction is %f and the integer is %.f\\n\",   \n           x, y, n );  \n}  \n```  \n  \n## Output  \n  \n```  \nFor -14.876543, the fraction is -0.876543 and the integer is -14  \n```  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [frexp](../../c-runtime-library/reference/frexp.md)   \n [ldexp](../../c-runtime-library/reference/ldexp.md)"}