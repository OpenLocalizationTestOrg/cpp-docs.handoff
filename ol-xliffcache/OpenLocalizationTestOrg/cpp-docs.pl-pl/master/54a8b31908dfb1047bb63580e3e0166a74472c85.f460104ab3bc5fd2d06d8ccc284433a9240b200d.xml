{"nodes":[{"pos":[12,49],"content":"IDispEventImpl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IDispEventImpl Class | Microsoft Docs","pos":[0,37]}]},{"pos":[616,636],"content":"IDispEventImpl Class","linkify":"IDispEventImpl Class","nodes":[{"content":"IDispEventImpl Class","pos":[0,20]}]},{"pos":[637,700],"content":"This class provides implementations of the <ph id=\"ph1\">`IDispatch`</ph> methods.","source":"This class provides implementations of the `IDispatch` methods."},{"pos":[708,858],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[14,148],"source":" This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."}]},{"pos":[867,873],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1171,1181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A unique identifier for the source object.","pos":[1194,1236]},{"content":"When <ph id=\"ph1\">`IDispEventImpl`</ph> is the base class for a composite control, use the resource ID of the desired contained control for this parameter.","pos":[1237,1374],"source":" When `IDispEventImpl` is the base class for a composite control, use the resource ID of the desired contained control for this parameter."},{"content":"In other cases, use an arbitrary positive integer.","pos":[1375,1425]},{"content":"The user's class, which is derived from <ph id=\"ph1\">`IDispEventImpl`</ph>.","pos":[1439,1496],"source":" The user's class, which is derived from `IDispEventImpl`."},{"content":"The pointer to the IID of the event dispinterface implemented by this class.","pos":[1514,1590]},{"content":"This interface must be defined in the type library denoted by <ph id=\"ph1\">`plibid`</ph>, <ph id=\"ph2\">`wMajor`</ph>, and <ph id=\"ph3\">`wMinor`</ph>.","pos":[1591,1686],"source":" This interface must be defined in the type library denoted by `plibid`, `wMajor`, and `wMinor`."},{"content":"A pointer to the type library that defines the dispatch interface pointed to by <ph id=\"ph1\">`pdiid`</ph>.","pos":[1705,1793],"source":" A pointer to the type library that defines the dispatch interface pointed to by `pdiid`."},{"content":"If <bpt id=\"p1\">**</bpt>&amp;GUID_NULL<ept id=\"p1\">**</ept>, the type library will be loaded from the object sourcing the events.","pos":[1794,1881],"source":" If **&GUID_NULL**, the type library will be loaded from the object sourcing the events."},{"content":"The major version of the type library.","pos":[1900,1938]},{"content":"The default value is 0.","pos":[1939,1962]},{"content":"The minor version of the type library.","pos":[1981,2019]},{"content":"The default value is 0.","pos":[2020,2043]},{"content":"The class used to manage the type information for <ph id=\"ph1\">`T`</ph>.","pos":[2064,2118],"source":" The class used to manage the type information for `T`."},{"content":"The default value is a class of type <ph id=\"ph1\">`CComTypeInfoHolder`</ph>; however, you can override this template parameter by providing a class of a type other than <ph id=\"ph2\">`CComTypeInfoHolder`</ph>.","pos":[2119,2291],"source":" The default value is a class of type `CComTypeInfoHolder`; however, you can override this template parameter by providing a class of a type other than `CComTypeInfoHolder`."},{"pos":[2300,2307],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[2317,2332],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[2339,2343]},{"content":"Description","pos":[2344,2355]},{"pos":[2393,2465],"content":"<bpt id=\"p1\">[</bpt>IDispEventImpl::_tihclass<ept id=\"p1\">](../../atl/reference/idispeventimpl-class.md)</ept>","source":"[IDispEventImpl::_tihclass](../../atl/reference/idispeventimpl-class.md)"},{"content":"The class used to manage the type information.","pos":[2466,2512]},{"content":"By default, <ph id=\"ph1\">`CComTypeInfoHolder`</ph>.","pos":[2513,2546],"source":" By default, `CComTypeInfoHolder`."},{"pos":[2557,2576],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[2583,2587]},{"content":"Description","pos":[2588,2599]},{"pos":[2637,2702],"content":"<bpt id=\"p1\">[</bpt>IDispEventImpl::IDispEventImpl<ept id=\"p1\">](#idispeventimpl__idispeventimpl)</ept>","source":"[IDispEventImpl::IDispEventImpl](#idispeventimpl__idispeventimpl)"},{"content":"The constructor.","pos":[2703,2719]},{"pos":[2730,2744],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[2751,2755]},{"content":"Description","pos":[2756,2767]},{"pos":[2805,2876],"content":"<bpt id=\"p1\">[</bpt>IDispEventImpl::GetFuncInfoFromId<ept id=\"p1\">](#idispeventimpl__getfuncinfofromid)</ept>","source":"[IDispEventImpl::GetFuncInfoFromId](#idispeventimpl__getfuncinfofromid)"},{"content":"Locates the function index for the specified dispatch identifier.","pos":[2877,2942]},{"pos":[2947,3010],"content":"<bpt id=\"p1\">[</bpt>IDispEventImpl::GetIDsOfNames<ept id=\"p1\">](#idispeventimpl__getidsofnames)</ept>","source":"[IDispEventImpl::GetIDsOfNames](#idispeventimpl__getidsofnames)"},{"content":"Maps a single member and an optional set of argument names to a corresponding set of integer DISPIDs.","pos":[3011,3112]},{"pos":[3117,3176],"content":"<bpt id=\"p1\">[</bpt>IDispEventImpl::GetTypeInfo<ept id=\"p1\">](#idispeventimpl__gettypeinfo)</ept>","source":"[IDispEventImpl::GetTypeInfo](#idispeventimpl__gettypeinfo)"},{"content":"Retrieves the type information for an object.","pos":[3177,3222]},{"pos":[3227,3296],"content":"<bpt id=\"p1\">[</bpt>IDispEventImpl::GetTypeInfoCount<ept id=\"p1\">](#idispeventimpl__gettypeinfocount)</ept>","source":"[IDispEventImpl::GetTypeInfoCount](#idispeventimpl__gettypeinfocount)"},{"content":"Retrieves the number of type information interfaces.","pos":[3297,3349]},{"pos":[3354,3427],"content":"<bpt id=\"p1\">[</bpt>IDispEventImpl::GetUserDefinedType<ept id=\"p1\">](#idispeventimpl__getuserdefinedtype)</ept>","source":"[IDispEventImpl::GetUserDefinedType](#idispeventimpl__getuserdefinedtype)"},{"content":"Retrieves the basic type of a user-defined type.","pos":[3428,3476]},{"pos":[3486,3493],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`IDispEventImpl`</ph> provides a way of implementing an event dispinterface without requiring you to supply implementation code for every method/event on that interface.","pos":[3497,3661],"source":"`IDispEventImpl` provides a way of implementing an event dispinterface without requiring you to supply implementation code for every method/event on that interface."},{"content":"<ph id=\"ph1\">`IDispEventImpl`</ph> provides implementations of the <ph id=\"ph2\">`IDispatch`</ph> methods.","pos":[3662,3731],"source":"`IDispEventImpl` provides implementations of the `IDispatch` methods."},{"content":"You only need to supply implementations for the events that you are interested in handling.","pos":[3732,3823]},{"content":"<ph id=\"ph1\">`IDispEventImpl`</ph> works in conjunction with the <bpt id=\"p1\">[</bpt>event sink map<ept id=\"p1\">](http://msdn.microsoft.com/library/32542b3d-ac43-4139-8ac4-41c48481744f)</ept> in your class to route events to the appropriate handler function.","pos":[3830,4032],"source":"`IDispEventImpl` works in conjunction with the [event sink map](http://msdn.microsoft.com/library/32542b3d-ac43-4139-8ac4-41c48481744f) in your class to route events to the appropriate handler function."},{"content":"To use this class:","pos":[4033,4051]},{"content":"Add a <bpt id=\"p1\">[</bpt>SINK_ENTRY<ept id=\"p1\">](http://msdn.microsoft.com/library/33a5fff6-5248-47c0-8cf4-8bdf760e86e5)</ept> or <bpt id=\"p2\">[</bpt>SINK_ENTRY_EX<ept id=\"p2\">](http://msdn.microsoft.com/library/e1d14342-838f-4791-ac2f-5dae2801c1ac)</ept> macro to the event sink map for each event on each object that you want to handle.","pos":[4059,4323],"source":"Add a [SINK_ENTRY](http://msdn.microsoft.com/library/33a5fff6-5248-47c0-8cf4-8bdf760e86e5) or [SINK_ENTRY_EX](http://msdn.microsoft.com/library/e1d14342-838f-4791-ac2f-5dae2801c1ac) macro to the event sink map for each event on each object that you want to handle."},{"content":"When using <ph id=\"ph1\">`IDispEventImpl`</ph> as a base class of a composite control, you can call <bpt id=\"p1\">[</bpt>AtlAdviseSinkMap<ept id=\"p1\">](http://msdn.microsoft.com/library/0757a6af-3de3-4179-8b4f-ccd137d919b4)</ept> to establish and break the connection with the event sources for all entries in the event sink map.","pos":[4324,4595],"source":" When using `IDispEventImpl` as a base class of a composite control, you can call [AtlAdviseSinkMap](http://msdn.microsoft.com/library/0757a6af-3de3-4179-8b4f-ccd137d919b4) to establish and break the connection with the event sources for all entries in the event sink map."},{"content":"In other cases, or for greater control, call <bpt id=\"p1\">[</bpt>DispEventAdvise<ept id=\"p1\">](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise)</ept> to establish the connection between the source object and the base class.","pos":[4596,4801],"source":" In other cases, or for greater control, call [DispEventAdvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise) to establish the connection between the source object and the base class."},{"content":"Call <bpt id=\"p1\">[</bpt>DispEventUnadvise<ept id=\"p1\">](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise)</ept> to break the connection.","pos":[4802,4922],"source":" Call [DispEventUnadvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise) to break the connection."},{"content":"You must derive from <ph id=\"ph1\">`IDispEventImpl`</ph> (using a unique value for <ph id=\"ph2\">`nID`</ph>) for each object for which you need to handle events.","pos":[4930,5053],"source":"You must derive from `IDispEventImpl` (using a unique value for `nID`) for each object for which you need to handle events."},{"content":"You can reuse the base class by unadvising against one source object then advising against a different source object, but the maximum number of source objects that can be handled by a single object at one time is limited by the number of <ph id=\"ph1\">`IDispEventImpl`</ph> base classes.","pos":[5054,5322],"source":" You can reuse the base class by unadvising against one source object then advising against a different source object, but the maximum number of source objects that can be handled by a single object at one time is limited by the number of `IDispEventImpl` base classes."},{"content":"<ph id=\"ph1\">`IDispEventImpl`</ph> provides the same functionality as <bpt id=\"p1\">[</bpt>IDispEventSimpleImpl<ept id=\"p1\">](../../atl/reference/idispeventsimpleimpl-class.md)</ept>, except it gets type information about the interface from a type library rather than having it supplied as a pointer to an <bpt id=\"p2\">[</bpt>_ATL_FUNC_INFO<ept id=\"p2\">](../../atl/reference/atl-func-info-structure.md)</ept> structure.","pos":[5329,5653],"source":"`IDispEventImpl` provides the same functionality as [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md), except it gets type information about the interface from a type library rather than having it supplied as a pointer to an [_ATL_FUNC_INFO](../../atl/reference/atl-func-info-structure.md) structure."},{"content":"Use <ph id=\"ph1\">`IDispEventSimpleImpl`</ph> when you do not have a type library describing the event interface or want to avoid the overhead associated with using the type library.","pos":[5654,5817],"source":" Use `IDispEventSimpleImpl` when you do not have a type library describing the event interface or want to avoid the overhead associated with using the type library."},{"pos":[5825,6123],"content":"[!NOTE]\n`IDispEventImpl` and `IDispEventSimpleImpl` provide their own implementation of **IUnknown::QueryInterface** enabling each `IDispEventImpl` and `IDispEventSimpleImpl` base class to act as a separate COM identity while still allowing direct access to class members in your main COM object.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\">`IDispEventImpl`</ph> and <ph id=\"ph2\">`IDispEventSimpleImpl`</ph> provide their own implementation of <bpt id=\"p1\">**</bpt>IUnknown::QueryInterface<ept id=\"p1\">**</ept> enabling each <ph id=\"ph3\">`IDispEventImpl`</ph> and <ph id=\"ph4\">`IDispEventSimpleImpl`</ph> base class to act as a separate COM identity while still allowing direct access to class members in your main COM object.","pos":[8,296],"source":"`IDispEventImpl` and `IDispEventSimpleImpl` provide their own implementation of **IUnknown::QueryInterface** enabling each `IDispEventImpl` and `IDispEventSimpleImpl` base class to act as a separate COM identity while still allowing direct access to class members in your main COM object."}]},{"content":"CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.","pos":[6130,6328]},{"pos":[6335,6429],"content":"For more information, see <bpt id=\"p1\">[</bpt>Supporting IDispEventImpl<ept id=\"p1\">](../../atl/supporting-idispeventimpl.md)</ept>.","source":"For more information, see [Supporting IDispEventImpl](../../atl/supporting-idispeventimpl.md)."},{"pos":[6438,6459],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[6510,6583],"content":"<bpt id=\"p1\">[</bpt>IDispEventSimpleImpl<ept id=\"p1\">](../../atl/reference/idispeventsimpleimpl-class.md)</ept>","source":"[IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md)"},{"pos":[6615,6627],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6631,6651],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcom.h","source":"**Header:** atlcom.h"},{"pos":[6661,6744],"content":"<bpt id=\"p1\">&lt;a name=\"idispeventimpl__getfuncinfofromid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IDispEventImpl::GetFuncInfoFromId","linkify":"<a name=\"idispeventimpl__getfuncinfofromid\"></a>  IDispEventImpl::GetFuncInfoFromId","source":"<a name=\"idispeventimpl__getfuncinfofromid\"></a>  IDispEventImpl::GetFuncInfoFromId"},{"content":"Locates the function index for the specified dispatch identifier.","pos":[6748,6813]},{"pos":[6950,6960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A reference to the ID of the function.","pos":[6973,7016]},{"content":"<bpt id=\"p1\">*</bpt>dispidMember<ept id=\"p1\">*</ept>","pos":[7023,7037],"source":"*dispidMember*"},{"content":"[in] The dispatch ID of the function.","pos":[7041,7078]},{"content":"[in] The locale context of the function ID.","pos":[7095,7138]},{"content":"[in] The structure indicating how the function is called.","pos":[7155,7212]},{"pos":[7222,7234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7238,7265],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[7275,7350],"content":"<bpt id=\"p1\">&lt;a name=\"idispeventimpl__getidsofnames\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IDispEventImpl::GetIDsOfNames","linkify":"<a name=\"idispeventimpl__getidsofnames\"></a>  IDispEventImpl::GetIDsOfNames","source":"<a name=\"idispeventimpl__getidsofnames\"></a>  IDispEventImpl::GetIDsOfNames"},{"pos":[7354,7587],"content":"Maps a single member and an optional set of argument names to a corresponding set of integer DISPIDs, which can be used on subsequent calls to <bpt id=\"p1\">[</bpt>IDispatch::Invoke<ept id=\"p1\">](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d)</ept>.","source":"Maps a single member and an optional set of argument names to a corresponding set of integer DISPIDs, which can be used on subsequent calls to [IDispatch::Invoke](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d)."},{"pos":[7733,7740],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7744,7904],"content":"See <bpt id=\"p1\">[</bpt>IDispatch::GetIDsOfNames<ept id=\"p1\">](http://msdn.microsoft.com/en-us/6f6cf233-3481-436e-8d6a-51f93bf91619)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IDispatch::GetIDsOfNames](http://msdn.microsoft.com/en-us/6f6cf233-3481-436e-8d6a-51f93bf91619) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[7914,7985],"content":"<bpt id=\"p1\">&lt;a name=\"idispeventimpl__gettypeinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IDispEventImpl::GetTypeInfo","linkify":"<a name=\"idispeventimpl__gettypeinfo\"></a>  IDispEventImpl::GetTypeInfo","source":"<a name=\"idispeventimpl__gettypeinfo\"></a>  IDispEventImpl::GetTypeInfo"},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[7989,8103]},{"pos":[8208,8215],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8225,8306],"content":"<bpt id=\"p1\">&lt;a name=\"idispeventimpl__gettypeinfocount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IDispEventImpl::GetTypeInfoCount","linkify":"<a name=\"idispeventimpl__gettypeinfocount\"></a>  IDispEventImpl::GetTypeInfoCount","source":"<a name=\"idispeventimpl__gettypeinfocount\"></a>  IDispEventImpl::GetTypeInfoCount"},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[8310,8402]},{"pos":[8469,8476],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8480,8643],"content":"See <bpt id=\"p1\">[</bpt>IDispatch::GetTypeInfoCount<ept id=\"p1\">](http://msdn.microsoft.com/en-us/da876d53-cb8a-465c-a43e-c0eb272e2a12)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IDispatch::GetTypeInfoCount](http://msdn.microsoft.com/en-us/da876d53-cb8a-465c-a43e-c0eb272e2a12) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[8653,8738],"content":"<bpt id=\"p1\">&lt;a name=\"idispeventimpl__getuserdefinedtype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IDispEventImpl::GetUserDefinedType","linkify":"<a name=\"idispeventimpl__getuserdefinedtype\"></a>  IDispEventImpl::GetUserDefinedType","source":"<a name=\"idispeventimpl__getuserdefinedtype\"></a>  IDispEventImpl::GetUserDefinedType"},{"content":"Retrieves the basic type of a user-defined type.","pos":[8742,8790]},{"pos":[8880,8890],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A pointer to the <bpt id=\"p1\">[</bpt>ITypeInfo<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680)</ept> interface containing the user-defined type.","pos":[8903,9050],"source":" [in] A pointer to the [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) interface containing the user-defined type."},{"content":"<bpt id=\"p1\">*</bpt>hrt<ept id=\"p1\">*</ept>","pos":[9057,9062],"source":"*hrt*"},{"content":"[in] A handle to the type description to be retrieved.","pos":[9066,9120]},{"pos":[9130,9142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of variant.","pos":[9146,9166]},{"pos":[9176,9183],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9187,9289],"content":"See <bpt id=\"p1\">[</bpt>ITypeInfo::GetRefTypeInfo<ept id=\"p1\">](http://msdn.microsoft.com/en-us/61d3b31d-6591-4e55-9e82-5246a168be00)</ept>.","source":"See [ITypeInfo::GetRefTypeInfo](http://msdn.microsoft.com/en-us/61d3b31d-6591-4e55-9e82-5246a168be00)."},{"pos":[9299,9376],"content":"<bpt id=\"p1\">&lt;a name=\"idispeventimpl__idispeventimpl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IDispEventImpl::IDispEventImpl","linkify":"<a name=\"idispeventimpl__idispeventimpl\"></a>  IDispEventImpl::IDispEventImpl","source":"<a name=\"idispeventimpl__idispeventimpl\"></a>  IDispEventImpl::IDispEventImpl"},{"content":"The constructor.","pos":[9380,9396]},{"content":"Stores the values of the class template parameters <ph id=\"ph1\">`plibid`</ph>, <ph id=\"ph2\">`pdiid`</ph>, <ph id=\"ph3\">`wMajor`</ph>, and <ph id=\"ph4\">`wMinor`</ph>.","pos":[9397,9490],"source":" Stores the values of the class template parameters `plibid`, `pdiid`, `wMajor`, and `wMinor`."},{"pos":[9531,9596],"content":"<bpt id=\"p1\">&lt;a name=\"idispeventimpl__tihclass\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IDispEventImpl::tihclass","linkify":"<a name=\"idispeventimpl__tihclass\"></a>  IDispEventImpl::tihclass","source":"<a name=\"idispeventimpl__tihclass\"></a>  IDispEventImpl::tihclass"},{"pos":[9600,9671],"content":"This typedef is an instance of the class template parameter <ph id=\"ph1\">`tihclass`</ph>.","source":"This typedef is an instance of the class template parameter `tihclass`."},{"pos":[9722,9729],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, the class is <ph id=\"ph1\">`CComTypeInfoHolder`</ph>.","pos":[9733,9779],"source":"By default, the class is `CComTypeInfoHolder`."},{"content":"<ph id=\"ph1\">`CComTypeInfoHolder`</ph> manages the type information for the class.","pos":[9780,9844],"source":"`CComTypeInfoHolder` manages the type information for the class."},{"pos":[9853,9861],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>_ATL_FUNC_INFO Structure<ept id=\"p1\">](../../atl/reference/atl-func-info-structure.md)</ept><ph id=\"ph1\"> </ph>","pos":[9865,9940],"source":"[_ATL_FUNC_INFO Structure](../../atl/reference/atl-func-info-structure.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IDispatchImpl Class<ept id=\"p1\">](../../atl/reference/idispatchimpl-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[9943,10010],"source":" [IDispatchImpl Class](../../atl/reference/idispatchimpl-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IDispEventSimpleImpl Class<ept id=\"p1\">](../../atl/reference/idispeventsimpleimpl-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[10013,10094],"source":" [IDispEventSimpleImpl Class](../../atl/reference/idispeventsimpleimpl-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>SINK_ENTRY<ept id=\"p1\">](http://msdn.microsoft.com/library/33a5fff6-5248-47c0-8cf4-8bdf760e86e5)</ept><ph id=\"ph1\"> </ph>","pos":[10097,10183],"source":" [SINK_ENTRY](http://msdn.microsoft.com/library/33a5fff6-5248-47c0-8cf4-8bdf760e86e5) "},{"content":"<bpt id=\"p1\"> [</bpt>SINK_ENTRY_EX<ept id=\"p1\">](http://msdn.microsoft.com/library/e1d14342-838f-4791-ac2f-5dae2801c1ac)</ept><ph id=\"ph1\"> </ph>","pos":[10186,10275],"source":" [SINK_ENTRY_EX](http://msdn.microsoft.com/library/e1d14342-838f-4791-ac2f-5dae2801c1ac) "},{"content":"<bpt id=\"p1\"> [</bpt>SINK_ENTRY_INFO<ept id=\"p1\">](http://msdn.microsoft.com/library/1a0ae260-2c82-4926-a537-db01e5f206a7)</ept><ph id=\"ph1\"> </ph>","pos":[10278,10369],"source":" [SINK_ENTRY_INFO](http://msdn.microsoft.com/library/1a0ae260-2c82-4926-a537-db01e5f206a7) "},{"content":"<bpt id=\"p1\"> [</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept>","pos":[10372,10422],"source":" [Class Overview](../../atl/atl-class-overview.md)"}],"content":"---\ntitle: \"IDispEventImpl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"IDispEventImpl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"IDispEventImpl class\"\nms.assetid: a64b5288-35cb-4638-aad6-2d15b1c7cf7b\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IDispEventImpl Class\nThis class provides implementations of the `IDispatch` methods.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].  \n  \n## Syntax  \n  \n```\ntemplate <UINT   nID, class T,\n    const IID* pdiid = &IID_NULL,\n    const GUID* plibid = &GUID_NULL,\n    WORD wMajor = 0,\n    WORD wMinor = 0, class tihclass = CcomTypeInfoHolder>\n    class ATL_NO_VTABLE IDispEventImpl :\n    public IDispEventSimpleImpl<nID,\n    T,\n pdiid>\n```  \n  \n#### Parameters  \n `nID`  \n A unique identifier for the source object. When `IDispEventImpl` is the base class for a composite control, use the resource ID of the desired contained control for this parameter. In other cases, use an arbitrary positive integer.  \n  \n `T`  \n The user's class, which is derived from `IDispEventImpl`.  \n  \n `pdiid`  \n The pointer to the IID of the event dispinterface implemented by this class. This interface must be defined in the type library denoted by `plibid`, `wMajor`, and `wMinor`.  \n  \n `plibid`  \n A pointer to the type library that defines the dispatch interface pointed to by `pdiid`. If **&GUID_NULL**, the type library will be loaded from the object sourcing the events.  \n  \n `wMajor`  \n The major version of the type library. The default value is 0.  \n  \n `wMinor`  \n The minor version of the type library. The default value is 0.  \n  \n `tihclass`  \n The class used to manage the type information for `T`. The default value is a class of type `CComTypeInfoHolder`; however, you can override this template parameter by providing a class of a type other than `CComTypeInfoHolder`.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IDispEventImpl::_tihclass](../../atl/reference/idispeventimpl-class.md)|The class used to manage the type information. By default, `CComTypeInfoHolder`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IDispEventImpl::IDispEventImpl](#idispeventimpl__idispeventimpl)|The constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IDispEventImpl::GetFuncInfoFromId](#idispeventimpl__getfuncinfofromid)|Locates the function index for the specified dispatch identifier.|  \n|[IDispEventImpl::GetIDsOfNames](#idispeventimpl__getidsofnames)|Maps a single member and an optional set of argument names to a corresponding set of integer DISPIDs.|  \n|[IDispEventImpl::GetTypeInfo](#idispeventimpl__gettypeinfo)|Retrieves the type information for an object.|  \n|[IDispEventImpl::GetTypeInfoCount](#idispeventimpl__gettypeinfocount)|Retrieves the number of type information interfaces.|  \n|[IDispEventImpl::GetUserDefinedType](#idispeventimpl__getuserdefinedtype)|Retrieves the basic type of a user-defined type.|  \n  \n## Remarks  \n `IDispEventImpl` provides a way of implementing an event dispinterface without requiring you to supply implementation code for every method/event on that interface. `IDispEventImpl` provides implementations of the `IDispatch` methods. You only need to supply implementations for the events that you are interested in handling.  \n  \n `IDispEventImpl` works in conjunction with the [event sink map](http://msdn.microsoft.com/library/32542b3d-ac43-4139-8ac4-41c48481744f) in your class to route events to the appropriate handler function. To use this class:  \n  \n\n Add a [SINK_ENTRY](http://msdn.microsoft.com/library/33a5fff6-5248-47c0-8cf4-8bdf760e86e5) or [SINK_ENTRY_EX](http://msdn.microsoft.com/library/e1d14342-838f-4791-ac2f-5dae2801c1ac) macro to the event sink map for each event on each object that you want to handle. When using `IDispEventImpl` as a base class of a composite control, you can call [AtlAdviseSinkMap](http://msdn.microsoft.com/library/0757a6af-3de3-4179-8b4f-ccd137d919b4) to establish and break the connection with the event sources for all entries in the event sink map. In other cases, or for greater control, call [DispEventAdvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise) to establish the connection between the source object and the base class. Call [DispEventUnadvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise) to break the connection.  \n\n  \n You must derive from `IDispEventImpl` (using a unique value for `nID`) for each object for which you need to handle events. You can reuse the base class by unadvising against one source object then advising against a different source object, but the maximum number of source objects that can be handled by a single object at one time is limited by the number of `IDispEventImpl` base classes.  \n  \n `IDispEventImpl` provides the same functionality as [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md), except it gets type information about the interface from a type library rather than having it supplied as a pointer to an [_ATL_FUNC_INFO](../../atl/reference/atl-func-info-structure.md) structure. Use `IDispEventSimpleImpl` when you do not have a type library describing the event interface or want to avoid the overhead associated with using the type library.  \n  \n> [!NOTE]\n> `IDispEventImpl` and `IDispEventSimpleImpl` provide their own implementation of **IUnknown::QueryInterface** enabling each `IDispEventImpl` and `IDispEventSimpleImpl` base class to act as a separate COM identity while still allowing direct access to class members in your main COM object.  \n  \n CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.  \n  \n For more information, see [Supporting IDispEventImpl](../../atl/supporting-idispeventimpl.md).  \n  \n## Inheritance Hierarchy  \n `_IDispEvent`  \n  \n `_IDispEventLocator`  \n  \n [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md)  \n  \n `IDispEventImpl`  \n  \n## Requirements  \n **Header:** atlcom.h  \n  \n##  <a name=\"idispeventimpl__getfuncinfofromid\"></a>  IDispEventImpl::GetFuncInfoFromId  \n Locates the function index for the specified dispatch identifier.  \n  \n```\nHRESULT GetFuncInfoFromId(\n    const IID& iid,\n    DISPID dispidMember,\n    LCID lcid,\n    _ATL_FUNC_INFO& info);\n```  \n  \n### Parameters  \n `iid`  \n [in] A reference to the ID of the function.  \n  \n *dispidMember*  \n [in] The dispatch ID of the function.  \n  \n `lcid`  \n [in] The locale context of the function ID.  \n  \n `info`  \n [in] The structure indicating how the function is called.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"idispeventimpl__getidsofnames\"></a>  IDispEventImpl::GetIDsOfNames  \n Maps a single member and an optional set of argument names to a corresponding set of integer DISPIDs, which can be used on subsequent calls to [IDispatch::Invoke](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d).  \n  \n```\nSTDMETHOD(GetIDsOfNames)(\n    REFIID riid,\n    LPOLESTR* rgszNames,\n    UINT cNames,\n    LCID lcid,\n    DISPID* rgdispid);\n```  \n  \n### Remarks  \n See [IDispatch::GetIDsOfNames](http://msdn.microsoft.com/en-us/6f6cf233-3481-436e-8d6a-51f93bf91619) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"idispeventimpl__gettypeinfo\"></a>  IDispEventImpl::GetTypeInfo  \n Retrieves the type information for an object, which can then be used to get the type information for an interface.  \n  \n```\nSTDMETHOD(GetTypeInfo)(\n    UINT itinfo,\n    LCID lcid,\n    ITypeInfo** pptinfo);\n```  \n  \n### Remarks  \n  \n##  <a name=\"idispeventimpl__gettypeinfocount\"></a>  IDispEventImpl::GetTypeInfoCount  \n Retrieves the number of type information interfaces that an object provides (either 0 or 1).  \n  \n```\nSTDMETHOD(GetTypeInfoCount)(UINT* pctinfo);\n```  \n  \n### Remarks  \n See [IDispatch::GetTypeInfoCount](http://msdn.microsoft.com/en-us/da876d53-cb8a-465c-a43e-c0eb272e2a12) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"idispeventimpl__getuserdefinedtype\"></a>  IDispEventImpl::GetUserDefinedType  \n Retrieves the basic type of a user-defined type.  \n  \n```\nVARTYPE GetUserDefinedType(\n    ITypeInfo* pTI,\n    HREFTYPE hrt);\n```  \n  \n### Parameters  \n `pTI`  \n [in] A pointer to the [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) interface containing the user-defined type.  \n  \n *hrt*  \n [in] A handle to the type description to be retrieved.  \n  \n### Return Value  \n The type of variant.  \n  \n### Remarks  \n See [ITypeInfo::GetRefTypeInfo](http://msdn.microsoft.com/en-us/61d3b31d-6591-4e55-9e82-5246a168be00).  \n  \n##  <a name=\"idispeventimpl__idispeventimpl\"></a>  IDispEventImpl::IDispEventImpl  \n The constructor. Stores the values of the class template parameters `plibid`, `pdiid`, `wMajor`, and `wMinor`.  \n  \n```\nIDispEventImpl();\n```  \n  \n##  <a name=\"idispeventimpl__tihclass\"></a>  IDispEventImpl::tihclass  \n This typedef is an instance of the class template parameter `tihclass`.  \n  \n```\ntypedef tihclass _tihclass;\n```  \n  \n### Remarks  \n By default, the class is `CComTypeInfoHolder`. `CComTypeInfoHolder` manages the type information for the class.  \n  \n## See Also  \n [_ATL_FUNC_INFO Structure](../../atl/reference/atl-func-info-structure.md)   \n [IDispatchImpl Class](../../atl/reference/idispatchimpl-class.md)   \n [IDispEventSimpleImpl Class](../../atl/reference/idispeventsimpleimpl-class.md)   \n [SINK_ENTRY](http://msdn.microsoft.com/library/33a5fff6-5248-47c0-8cf4-8bdf760e86e5)   \n [SINK_ENTRY_EX](http://msdn.microsoft.com/library/e1d14342-838f-4791-ac2f-5dae2801c1ac)   \n [SINK_ENTRY_INFO](http://msdn.microsoft.com/library/1a0ae260-2c82-4926-a537-db01e5f206a7)   \n [Class Overview](../../atl/atl-class-overview.md)"}