{"nodes":[{"pos":[12,46],"content":"Fatal Error C1017 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Fatal Error C1017 | Microsoft Docs","pos":[0,34]}]},{"content":"Fatal Error C1017","pos":[594,611]},{"content":"invalid integer constant expression","pos":[612,647]},{"pos":[654,739],"content":"The expression in an <ph id=\"ph1\">`#if`</ph> directive did not exist or did not evaluate to a constant.","source":"The expression in an `#if` directive did not exist or did not evaluate to a constant."},{"pos":[746,894],"content":"Constants defined using <ph id=\"ph1\">`#define`</ph> must have values that evaluate to an integer constant if they are used in an <ph id=\"ph2\">`#if`</ph>, <ph id=\"ph3\">`#elif`</ph>, or <ph id=\"ph4\">`#else`</ph> directive.","source":"Constants defined using `#define` must have values that evaluate to an integer constant if they are used in an `#if`, `#elif`, or `#else` directive."},{"content":"The following sample generates C1017:","pos":[901,938]},{"content":"Possible resolution:","pos":[1045,1065]},{"pos":[1180,1294],"content":"Because <ph id=\"ph1\">`CONSTANT_NAME`</ph> evaluates to a string and not an integer, the <ph id=\"ph2\">`#if`</ph> directive generates fatal error C1017.","source":"Because `CONSTANT_NAME` evaluates to a string and not an integer, the `#if` directive generates fatal error C1017."},{"content":"In other cases, the preprocessor evaluates an undefined constant as zero.","pos":[1301,1374]},{"content":"This can cause unintended results, as shown in the following sample.","pos":[1375,1443]},{"content":"is undefined, so it evaluates to zero.","pos":[1450,1488]},{"content":"The expression <ph id=\"ph1\">`#if`</ph> <ph id=\"ph2\">`CONSTANT_NAME`</ph> evaluates to false and the code to be used on <ph id=\"ph3\">`YES`</ph> is removed by the preprocessor.","pos":[1489,1609],"source":" The expression `#if` `CONSTANT_NAME` evaluates to false and the code to be used on `YES` is removed by the preprocessor."},{"content":"is also undefined (zero), so <ph id=\"ph1\">`#elif`</ph> <ph id=\"ph2\">`CONSTANT_NAME==NO`</ph> evaluates to true (<ph id=\"ph3\">`0 == 0`</ph>), causing the preprocessor to leave the code in the <ph id=\"ph4\">`#elif`</ph> portion of the statement — exactly the opposite of the intended behavior.","pos":[1615,1833],"source":" is also undefined (zero), so `#elif` `CONSTANT_NAME==NO` evaluates to true (`0 == 0`), causing the preprocessor to leave the code in the `#elif` portion of the statement — exactly the opposite of the intended behavior."},{"pos":[2035,2302],"content":"To see exactly how the compiler handles preprocessor directives, use <bpt id=\"p1\">[</bpt>/P<ept id=\"p1\">](../../build/reference/p-preprocess-to-a-file.md)</ept>, <bpt id=\"p2\">[</bpt>/E<ept id=\"p2\">](../../build/reference/e-preprocess-to-stdout.md)</ept>, or <bpt id=\"p3\">[</bpt>/EP<ept id=\"p3\">](../../build/reference/ep-preprocess-to-stdout-without-hash-line-directives.md)</ept>.","source":"To see exactly how the compiler handles preprocessor directives, use [/P](../../build/reference/p-preprocess-to-a-file.md), [/E](../../build/reference/e-preprocess-to-stdout.md), or [/EP](../../build/reference/ep-preprocess-to-stdout-without-hash-line-directives.md)."}],"content":"---\ntitle: \"Fatal Error C1017 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C1017\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C1017\"\nms.assetid: 5542e604-599d-4e36-8f83-1d454c5753c9\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Fatal Error C1017\ninvalid integer constant expression  \n  \n The expression in an `#if` directive did not exist or did not evaluate to a constant.  \n  \n Constants defined using `#define` must have values that evaluate to an integer constant if they are used in an `#if`, `#elif`, or `#else` directive.  \n  \n The following sample generates C1017:  \n  \n```  \n// C1017.cpp  \n#define CONSTANT_NAME \"YES\"  \n#if CONSTANT_NAME   // C1017  \n#endif  \n```  \n  \n Possible resolution:  \n  \n```  \n// C1017b.cpp  \n// compile with: /c  \n#define CONSTANT_NAME 1  \n#if CONSTANT_NAME  \n#endif  \n```  \n  \n Because `CONSTANT_NAME` evaluates to a string and not an integer, the `#if` directive generates fatal error C1017.  \n  \n In other cases, the preprocessor evaluates an undefined constant as zero. This can cause unintended results, as shown in the following sample. `YES` is undefined, so it evaluates to zero. The expression `#if` `CONSTANT_NAME` evaluates to false and the code to be used on `YES` is removed by the preprocessor. `NO` is also undefined (zero), so `#elif` `CONSTANT_NAME==NO` evaluates to true (`0 == 0`), causing the preprocessor to leave the code in the `#elif` portion of the statement — exactly the opposite of the intended behavior.  \n  \n```  \n// C1017c.cpp  \n// compile with: /c  \n#define CONSTANT_NAME YES  \n#if CONSTANT_NAME  \n   // Code to use on YES...  \n#elif CONSTANT_NAME==NO  \n   // Code to use on NO...  \n#endif  \n```  \n  \n To see exactly how the compiler handles preprocessor directives, use [/P](../../build/reference/p-preprocess-to-a-file.md), [/E](../../build/reference/e-preprocess-to-stdout.md), or [/EP](../../build/reference/ep-preprocess-to-stdout-without-hash-line-directives.md)."}