{"nodes":[{"pos":[12,34],"content":"clock | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"clock | Microsoft Docs","pos":[0,22]}]},{"pos":[1033,1038],"content":"clock","linkify":"clock","nodes":[{"content":"clock","pos":[0,5]}]},{"content":"Calculates the wall-clock time used by the calling process.","pos":[1039,1098]},{"pos":[1107,1113],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1162,1174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The elapsed wall-clock time since the start of the process (elapsed time in seconds times <ph id=\"ph1\">`CLOCKS_PER_SEC`</ph>).","pos":[1178,1286],"source":"The elapsed wall-clock time since the start of the process (elapsed time in seconds times `CLOCKS_PER_SEC`)."},{"content":"If the amount of elapsed time is unavailable, the function returns –1, cast as a <ph id=\"ph1\">`clock_t`</ph>.","pos":[1287,1378],"source":" If the amount of elapsed time is unavailable, the function returns –1, cast as a `clock_t`."},{"pos":[1387,1394],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`clock`</ph> function tells how much wall-clock time the calling process has used.","pos":[1398,1479],"source":"The `clock` function tells how much wall-clock time the calling process has used."},{"content":"Note that this is not strictly conformant with ISO C99, which specifies net CPU time as the return value.","pos":[1480,1585]},{"content":"To obtain CPU time, use the Win32 <bpt id=\"p1\">[</bpt>GetProcessTimes<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683223)</ept> function.","pos":[1586,1707],"source":" To obtain CPU time, use the Win32 [GetProcessTimes](http://msdn.microsoft.com/library/windows/desktop/ms683223) function."},{"content":"A timer tick is approximately equal to 1/<ph id=\"ph1\">`CLOCKS_PER_SEC`</ph> seconds.","pos":[1714,1780],"source":"A timer tick is approximately equal to 1/`CLOCKS_PER_SEC` seconds."},{"content":"Given enough time, the value returned by <ph id=\"ph1\">`clock`</ph> can exceed the maximum positive value of <ph id=\"ph2\">`clock_t`</ph> and become negative, or exceed the maximum absolute value and roll over.","pos":[1781,1953],"source":" Given enough time, the value returned by `clock` can exceed the maximum positive value of `clock_t` and become negative, or exceed the maximum absolute value and roll over."},{"content":"Do not rely on this value for total elapsed time in processes that run for more than 214,748 seconds, or about 59 hours.","pos":[1954,2074]},{"pos":[2083,2095],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2102,2109]},{"content":"Required header","pos":[2110,2125]},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt;","pos":[2178,2187],"source":"\\<time.h>"},{"pos":[2195,2319],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2328,2335],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3431,3456],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3460,3475]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3476,3523],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3524,3649],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3658,3666],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Time Management<ept id=\"p1\">](../../c-runtime-library/time-management.md)</ept><ph id=\"ph1\"> </ph>","pos":[3670,3732],"source":"[Time Management](../../c-runtime-library/time-management.md) "},{"content":"<bpt id=\"p1\"> [</bpt>difftime, _difftime32, _difftime64<ept id=\"p1\">](../../c-runtime-library/reference/difftime-difftime32-difftime64.md)</ept><ph id=\"ph1\"> </ph>","pos":[3735,3842],"source":" [difftime, _difftime32, _difftime64](../../c-runtime-library/reference/difftime-difftime32-difftime64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>time, _time32, _time64<ept id=\"p1\">](../../c-runtime-library/reference/time-time32-time64.md)</ept>","pos":[3845,3927],"source":" [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)"}],"content":"---\ntitle: \"clock | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"clock\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"clock\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"processor time used, calculating\"\n  - \"time, calculating processor\"\n  - \"clock function\"\n  - \"processor time used\"\n  - \"calculating processor time used\"\nms.assetid: 3e1853dd-498f-49ba-b06a-f2315f20904e\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# clock\nCalculates the wall-clock time used by the calling process.  \n  \n## Syntax  \n  \n```  \nclock_t clock( void );  \n```  \n  \n## Return Value  \n The elapsed wall-clock time since the start of the process (elapsed time in seconds times `CLOCKS_PER_SEC`). If the amount of elapsed time is unavailable, the function returns –1, cast as a `clock_t`.  \n  \n## Remarks  \n The `clock` function tells how much wall-clock time the calling process has used. Note that this is not strictly conformant with ISO C99, which specifies net CPU time as the return value. To obtain CPU time, use the Win32 [GetProcessTimes](http://msdn.microsoft.com/library/windows/desktop/ms683223) function.  \n  \n A timer tick is approximately equal to 1/`CLOCKS_PER_SEC` seconds. Given enough time, the value returned by `clock` can exceed the maximum positive value of `clock_t` and become negative, or exceed the maximum absolute value and roll over. Do not rely on this value for total elapsed time in processes that run for more than 214,748 seconds, or about 59 hours.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`clock`|\\<time.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_clock.c  \n// This example prompts for how long  \n// the program is to run and then continuously  \n// displays the elapsed time for that period.  \n//  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <time.h>  \n  \nvoid sleep( clock_t wait );  \n  \nint main( void )  \n{  \n   long    i = 6000000L;  \n   clock_t start, finish;  \n   double  duration;  \n  \n   // Delay for a specified time.  \n   printf( \"Delay for three seconds\\n\" );  \n   sleep( (clock_t)3 * CLOCKS_PER_SEC );  \n   printf( \"Done!\\n\" );  \n  \n   // Measure the duration of an event.  \n   printf( \"Time to do %ld empty loops is \", i );  \n   start = clock();  \n   while( i-- )   \n      ;  \n   finish = clock();  \n   duration = (double)(finish - start) / CLOCKS_PER_SEC;  \n   printf( \"%2.1f seconds\\n\", duration );  \n}  \n  \n// Pauses for a specified number of milliseconds.  \nvoid sleep( clock_t wait )  \n{  \n   clock_t goal;  \n   goal = wait + clock();  \n   while( goal > clock() )  \n      ;  \n}  \n```  \n  \n```Output  \nDelay for three seconds  \nDone!  \nTime to do 6000000 empty loops is 0.1 seconds  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Time Management](../../c-runtime-library/time-management.md)   \n [difftime, _difftime32, _difftime64](../../c-runtime-library/reference/difftime-difftime32-difftime64.md)   \n [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)"}