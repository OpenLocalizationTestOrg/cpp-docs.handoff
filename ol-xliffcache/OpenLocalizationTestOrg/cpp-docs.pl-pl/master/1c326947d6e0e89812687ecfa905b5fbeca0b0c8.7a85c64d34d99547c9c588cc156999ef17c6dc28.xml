{"nodes":[{"pos":[12,56],"content":"Function Objects in the STL | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Function Objects in the STL | Microsoft Docs","pos":[0,44]}]},{"pos":[704,731],"content":"Function Objects in the STL","linkify":"Function Objects in the STL","nodes":[{"content":"Function Objects in the STL","pos":[0,27]}]},{"content":"A <bpt id=\"p1\">*</bpt>function object<ept id=\"p1\">*</ept>, or <bpt id=\"p2\">*</bpt>functor<ept id=\"p2\">*</ept>, is any type that implements operator().","pos":[732,806],"source":"A *function object*, or *functor*, is any type that implements operator()."},{"content":"This operator is referred to as the <bpt id=\"p1\">*</bpt>call operator<ept id=\"p1\">*</ept> or sometimes the <bpt id=\"p2\">*</bpt>application operator<ept id=\"p2\">*</ept>.","pos":[807,899],"source":" This operator is referred to as the *call operator* or sometimes the *application operator*."},{"content":"The Standard Template Library uses function objects primarily as sorting criteria for containers and in algorithms.","pos":[900,1015]},{"content":"Function objects provide two main advantages over a straight function call.","pos":[1022,1097]},{"content":"The first is that a function object can contain state.","pos":[1098,1152]},{"content":"The second is that a function object is a type and therefore can be used as a template parameter.","pos":[1153,1250]},{"pos":[1259,1285],"content":"Creating a Function Object","linkify":"Creating a Function Object","nodes":[{"content":"Creating a Function Object","pos":[0,26]}]},{"content":"To create a function object, create a type and implement operator(), such as:","pos":[1289,1366]},{"content":"class Functor","pos":[1372,1385]},{"content":"{","pos":[1391,1392]},{"content":"public:","pos":[1398,1405]},{"content":"int operator()(int a, int b)","pos":[1411,1439]},{"content":"{","pos":[1445,1446]},{"content":"return a &lt;b;","pos":[1452,1464],"source":"return a <b;"},{"content":"}","pos":[1470,1471]},{"content":"};","pos":[1477,1479]},{"content":"The last line of the <ph id=\"ph1\">`main`</ph> function shows how you call the function object.","pos":[1486,1562],"source":"The last line of the `main` function shows how you call the function object."},{"content":"This call looks like a call to a function, but it is actually calling operator() of the Functor type.","pos":[1563,1664]},{"content":"This similarity between calling a function object and a function is how the term function object came about.","pos":[1665,1773]},{"pos":[1782,1813],"content":"Function Objects and Containers","linkify":"Function Objects and Containers","nodes":[{"content":"Function Objects and Containers","pos":[0,31]}]},{"content":"The Standard Template Library contains several function objects in the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>functional&gt;<ept id=\"p1\">](../standard-library/functional.md)</ept> header file.","pos":[1817,1951],"source":"The Standard Template Library contains several function objects in the [\\<functional>](../standard-library/functional.md) header file."},{"content":"One use of these function objects is as a sorting criterion for containers.","pos":[1952,2027]},{"content":"For example, the <ph id=\"ph1\">`set`</ph> container is declared as follows:","pos":[2028,2084],"source":" For example, the `set` container is declared as follows:"},{"content":"The second template argument is the function object <ph id=\"ph1\">`less`</ph>.","pos":[2209,2268],"source":"The second template argument is the function object `less`."},{"content":"This function object returns <ph id=\"ph1\">`true`</ph> if the first parameter passed to it is less than the second parameter passed.","pos":[2269,2382],"source":" This function object returns `true` if the first parameter passed to it is less than the second parameter passed."},{"content":"Since some containers sort their elements, the container needs a way of comparing two elements, and this is accomplished using the function object.","pos":[2383,2530]},{"content":"You can define your own sorting criteria for containers by creating a function object and specifying it in the template list for the container.","pos":[2531,2674]},{"pos":[2683,2714],"content":"Function Objects and Algorithms","linkify":"Function Objects and Algorithms","nodes":[{"content":"Function Objects and Algorithms","pos":[0,31]}]},{"content":"Another use of functional objects is in algorithms.","pos":[2718,2769]},{"content":"For example, the <ph id=\"ph1\">`remove_if`</ph> algorithm is declared as follows:","pos":[2770,2832],"source":" For example, the `remove_if` algorithm is declared as follows:"},{"content":"The last argument to <ph id=\"ph1\">`remove_if`</ph> is a function object that returns a boolean value (a <bpt id=\"p1\">*</bpt>predicate<ept id=\"p1\">*</ept>).","pos":[3011,3110],"source":"The last argument to `remove_if` is a function object that returns a boolean value (a *predicate*)."},{"content":"If the result of the function object is <ph id=\"ph1\">`true`</ph>, then the element is removed from the container being accessed by the iterators <ph id=\"ph2\">` first`</ph> and <ph id=\"ph3\">` last`</ph>.","pos":[3111,3259],"source":" If the result of the function object is `true`, then the element is removed from the container being accessed by the iterators ` first` and ` last`."},{"content":"You can use any of the function objects declared in the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>functional&gt;<ept id=\"p1\">](../standard-library/functional.md)</ept> header for the argument <ph id=\"ph2\">` pred`</ph> or you can create your own.","pos":[3260,3426],"source":" You can use any of the function objects declared in the [\\<functional>](../standard-library/functional.md) header for the argument ` pred` or you can create your own."},{"pos":[3435,3443],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3447,3534],"content":"<bpt id=\"p1\">[</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","source":"[C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"Function Objects in the STL | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"functors\"\n  - \"Standard C++ Library, functors\"\n  - \"Standard C++ Library, function objects\"\n  - \"function objects\"\nms.assetid: 85f8a735-2c7b-4f10-9c4d-95c666ec4192\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Function Objects in the STL\nA *function object*, or *functor*, is any type that implements operator(). This operator is referred to as the *call operator* or sometimes the *application operator*. The Standard Template Library uses function objects primarily as sorting criteria for containers and in algorithms.  \n  \n Function objects provide two main advantages over a straight function call. The first is that a function object can contain state. The second is that a function object is a type and therefore can be used as a template parameter.  \n  \n## Creating a Function Object  \n To create a function object, create a type and implement operator(), such as:  \n  \nclass Functor  \n   {  \n   public:  \n   int operator()(int a, int b)  \n   {  \n   return a <b;  \n   }  \n   };  \n  \n The last line of the `main` function shows how you call the function object. This call looks like a call to a function, but it is actually calling operator() of the Functor type. This similarity between calling a function object and a function is how the term function object came about.  \n  \n## Function Objects and Containers  \n The Standard Template Library contains several function objects in the [\\<functional>](../standard-library/functional.md) header file. One use of these function objects is as a sorting criterion for containers. For example, the `set` container is declared as follows:  \n  \n```  \ntemplate <class Key,  \n    class Traits=less<Key>,  \n    class Allocator=allocator<Key>>  \nclass set  \n```  \n  \n The second template argument is the function object `less`. This function object returns `true` if the first parameter passed to it is less than the second parameter passed. Since some containers sort their elements, the container needs a way of comparing two elements, and this is accomplished using the function object. You can define your own sorting criteria for containers by creating a function object and specifying it in the template list for the container.  \n  \n## Function Objects and Algorithms  \n Another use of functional objects is in algorithms. For example, the `remove_if` algorithm is declared as follows:  \n  \n```  \ntemplate <class ForwardIterator, class Predicate>  \nForwardIterator remove_if(\n    ForwardIterator first,  \n    ForwardIterator last,  \n    Predicate pred);\n```  \n  \n The last argument to `remove_if` is a function object that returns a boolean value (a *predicate*). If the result of the function object is `true`, then the element is removed from the container being accessed by the iterators ` first` and ` last`. You can use any of the function objects declared in the [\\<functional>](../standard-library/functional.md) header for the argument ` pred` or you can create your own.  \n  \n## See Also  \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n"}