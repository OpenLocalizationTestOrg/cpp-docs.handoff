{"nodes":[{"pos":[12,41],"content":"for (OpenMP) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"for (OpenMP) | Microsoft Docs","pos":[0,29]}]},{"content":"for (OpenMP)","pos":[595,607]},{"content":"Causes the work done in a for loop inside a parallel region to be divided among threads.","pos":[608,696]},{"content":"Syntax","pos":[705,711]},{"content":"Remarks","pos":[793,800]},{"content":"where,","pos":[804,810]},{"content":"(optional)","pos":[826,836]},{"content":"Zero or more clauses.","pos":[840,861]},{"content":"See the Remarks section for a list of the clauses supported by <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept>.","pos":[862,933],"source":" See the Remarks section for a list of the clauses supported by **for**."},{"content":"A for loop.","pos":[959,970]},{"content":"Undefined behavior will result if user code in the for loop changes the index variable.","pos":[971,1058]},{"content":"Remarks","pos":[1067,1074]},{"pos":[1078,1138],"content":"The <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> directive supports the following OpenMP clauses:","source":"The **for** directive supports the following OpenMP clauses:"},{"content":"firstprivate","pos":[1149,1161]},{"content":"lastprivate","pos":[1225,1236]},{"content":"nowait","pos":[1299,1305]},{"content":"ordered","pos":[1363,1370]},{"content":"private","pos":[1447,1454]},{"content":"reduction","pos":[1520,1529]},{"content":"schedule","pos":[1590,1598]},{"pos":[1654,1786],"content":"If <bpt id=\"p1\">**</bpt>parallel<ept id=\"p1\">**</ept> is also specified, <ph id=\"ph1\">`clause`</ph> can be any clause accepted by the <bpt id=\"p2\">**</bpt>parallel<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>for<ept id=\"p3\">**</ept> directives, except <bpt id=\"p4\">**</bpt>nowait<ept id=\"p4\">**</ept>.","source":"If **parallel** is also specified, `clause` can be any clause accepted by the **parallel** or **for** directives, except **nowait**."},{"pos":[1793,1890],"content":"For more information, see <bpt id=\"p1\">[</bpt>2.4.1 for Construct<ept id=\"p1\">](../../../parallel/openmp/2-4-1-for-construct.md)</ept>.","source":"For more information, see [2.4.1 for Construct](../../../parallel/openmp/2-4-1-for-construct.md)."},{"content":"Example","pos":[1899,1906]},{"content":"See Also","pos":[3466,3474]},{"content":"Directives","pos":[3479,3489]}],"content":"---\ntitle: \"for (OpenMP) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"for\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"for OpenMP directive\"\nms.assetid: 8b54e034-9db2-4c1a-a2b1-72e14e930506\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# for (OpenMP)\nCauses the work done in a for loop inside a parallel region to be divided among threads.  \n  \n## Syntax  \n  \n```  \n#pragma omp [parallel] for [clauses]  \n   for_statement  \n```  \n  \n## Remarks  \n where,  \n  \n `clause` (optional)  \n Zero or more clauses. See the Remarks section for a list of the clauses supported by **for**.  \n  \n `for_statement`  \n A for loop. Undefined behavior will result if user code in the for loop changes the index variable.  \n  \n## Remarks  \n The **for** directive supports the following OpenMP clauses:  \n  \n-   [firstprivate](../../../parallel/openmp/reference/firstprivate.md)  \n  \n-   [lastprivate](../../../parallel/openmp/reference/lastprivate.md)  \n  \n-   [nowait](../../../parallel/openmp/reference/nowait.md)  \n  \n-   [ordered](../../../parallel/openmp/reference/ordered-openmp-directives.md)  \n  \n-   [private](../../../parallel/openmp/reference/private-openmp.md)  \n  \n-   [reduction](../../../parallel/openmp/reference/reduction.md)  \n  \n-   [schedule](../../../parallel/openmp/reference/schedule.md)  \n  \n If **parallel** is also specified, `clause` can be any clause accepted by the **parallel** or **for** directives, except **nowait**.  \n  \n For more information, see [2.4.1 for Construct](../../../parallel/openmp/2-4-1-for-construct.md).  \n  \n## Example  \n  \n```  \n// omp_for.cpp  \n// compile with: /openmp   \n#include <stdio.h>  \n#include <math.h>  \n#include <omp.h>  \n  \n#define NUM_THREADS 4  \n#define NUM_START 1  \n#define NUM_END 10  \n  \nint main() {  \n   int i, nRet = 0, nSum = 0, nStart = NUM_START, nEnd = NUM_END;  \n   int nThreads = 0, nTmp = nStart + nEnd;  \n   unsigned uTmp = (unsigned((abs(nStart - nEnd) + 1)) *   \n                               unsigned(abs(nTmp))) / 2;  \n   int nSumCalc = uTmp;  \n  \n   if (nTmp < 0)  \n      nSumCalc = -nSumCalc;  \n  \n   omp_set_num_threads(NUM_THREADS);  \n  \n   #pragma omp parallel default(none) private(i) shared(nSum, nThreads, nStart, nEnd)  \n   {  \n      #pragma omp master  \n      nThreads = omp_get_num_threads();  \n  \n      #pragma omp for  \n      for (i=nStart; i<=nEnd; ++i) {  \n            #pragma omp atomic  \n            nSum += i;  \n      }  \n   }  \n  \n   if  (nThreads == NUM_THREADS) {  \n      printf_s(\"%d OpenMP threads were used.\\n\", NUM_THREADS);  \n      nRet = 0;  \n   }  \n   else {  \n      printf_s(\"Expected %d OpenMP threads, but %d were used.\\n\",  \n               NUM_THREADS, nThreads);  \n      nRet = 1;  \n   }  \n  \n   if (nSum != nSumCalc) {  \n      printf_s(\"The sum of %d through %d should be %d, \"  \n               \"but %d was reported!\\n\",  \n               NUM_START, NUM_END, nSumCalc, nSum);  \n      nRet = 1;  \n   }  \n   else  \n      printf_s(\"The sum of %d through %d is %d\\n\",  \n               NUM_START, NUM_END, nSum);  \n}  \n```  \n  \n```Output  \n4 OpenMP threads were used.  \nThe sum of 1 through 10 is 55  \n```  \n  \n## See Also  \n [Directives](../../../parallel/openmp/reference/openmp-directives.md)"}