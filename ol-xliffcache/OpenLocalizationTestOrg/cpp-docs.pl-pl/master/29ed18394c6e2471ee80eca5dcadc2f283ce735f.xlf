<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29ed18394c6e2471ee80eca5dcadc2f283ce735f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\memcpy-wmemcpy.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">822b83f9d3e36cf3270644d2764862372667645c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f27e857794d34d9dbda9a4672ccfeee1819d3d1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>memcpy, wmemcpy | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>memcpy, wmemcpy</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Copies bytes between buffers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>More secure versions of these functions are available; see <bpt id="p1">[</bpt>memcpy_s, wmemcpy_s<ept id="p1">](../../c-runtime-library/reference/memcpy-s-wmemcpy-s.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>New buffer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Buffer to copy from.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Number of characters to copy.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`dest`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>copies <ph id="ph1">`count`</ph> bytes from <ph id="ph2">`src`</ph> to <ph id="ph3">`dest`</ph>; <ph id="ph4">`wmemcpy`</ph> copies <ph id="ph5">`count`</ph> wide characters (two bytes).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the source and destination overlap, the behavior of <ph id="ph1">`memcpy`</ph> is undefined.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`memmove`</ph> to handle overlapping regions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Make sure that the destination buffer is the same size or larger than the source buffer.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Avoiding Buffer Overruns<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Because so many buffer overruns, and thus potential security exploits, have been traced to improper usage of <ph id="ph1">`memcpy`</ph>, this function is listed among the “banned” functions by the Security Development Lifecycle (SDL).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You may observe that some VC++ library classes continue to use <ph id="ph1">`memcpy`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Furthermore, you may observe that the VC++ compiler optimizer sometimes emits calls to <ph id="ph1">`memcpy`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The Visual C++ product is developed in accordance with the SDL process, and thus usage of this banned function has been closely evaluated.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the case of library use of it, the calls have been carefully scrutinized to ensure that buffer overruns will not be allowed through these calls.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the case of the compiler, sometimes certain code patterns are recognized as identical to the pattern of <ph id="ph1">`memcpy`</ph>, and are thus replaced with a call to the function.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In such cases, the use of <ph id="ph1">`memcpy`</ph> is no more unsafe than the original instructions would have been; they have simply been optimized to a call to the performance-tuned <ph id="ph2">`memcpy`</ph> function.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Just as the use of “safe” CRT functions doesn’t guarantee safety (they just make it harder to be unsafe), the use of “banned” functions doesn’t guarantee danger (they just require greater scrutiny to ensure safety).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`memcpy`</ph> usage by the VC++ compiler and libraries has been so carefully scrutinized, these calls are permitted within code that is otherwise compliant with SDL.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>calls introduced in application source code are only compliant with the SDL when that use has been reviewed by security experts.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`memcpy`</ph> and <ph id="ph2">`wmemcpy`</ph> functions will only be deprecated if the constant <ph id="ph3">`_CRT_SECURE_DEPRECATE_MEMORY`</ph> is defined prior to the inclusion statement in order for the functions to be deprecated, such as in the example below:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>memory.h&gt; or <ph id="ph1">\&lt;</ph>string.h&gt;</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>memmove<ept id="p1">](../../c-runtime-library/reference/memmove-wmemmove.md)</ept> for a sample of how to use <ph id="ph1">`memcpy`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Buffer Manipulation</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>_memccpy</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>memchr, wmemchr</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>memcmp, wmemcmp</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>memmove, wmemmove</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>memset, wmemset</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>strcpy_s, wcscpy_s, _mbscpy_s</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>