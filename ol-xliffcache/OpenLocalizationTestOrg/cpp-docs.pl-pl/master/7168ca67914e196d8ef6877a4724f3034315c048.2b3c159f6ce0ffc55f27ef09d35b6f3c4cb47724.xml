{"nodes":[{"pos":[12,44],"content":"_mm_cvtsi64x_ss | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_mm_cvtsi64x_ss | Microsoft Docs","pos":[0,32]}]},{"content":"_mm_cvtsi64x_ss","pos":[668,683]},{"content":"Microsoft Specific","pos":[686,704]},{"pos":[713,911],"content":"Generates the <ph id=\"ph1\">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph> extended version of the Convert 64-Bit Integer to Scalar Single-Precision Floating-Point Value (<ph id=\"ph2\">`cvtsi2ss`</ph>) instruction.","source":"Generates the [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)] extended version of the Convert 64-Bit Integer to Scalar Single-Precision Floating-Point Value (`cvtsi2ss`) instruction."},{"content":"Syntax","pos":[920,926]},{"content":"Parameters","pos":[1016,1026]},{"content":"[in]","pos":[1030,1034]},{"content":"An <ph id=\"ph1\">`__m128`</ph> structure containing four single-precision floating-point values.","pos":[1042,1119],"source":" An `__m128` structure containing four single-precision floating-point values."},{"content":"[in]","pos":[1126,1130]},{"content":"A 64-bit integer to be converted into a floating-point value.","pos":[1138,1199]},{"content":"Return Value","pos":[1208,1220]},{"content":"An <ph id=\"ph1\">`__m128`</ph> structure whose first floating-point value is the result of the conversion.","pos":[1224,1311],"source":"An `__m128` structure whose first floating-point value is the result of the conversion."},{"content":"The other three values are copied unchanged from <ph id=\"ph1\">`a`</ph>.","pos":[1312,1365],"source":" The other three values are copied unchanged from `a`."},{"content":"Requirements","pos":[1374,1386]},{"content":"Intrinsic","pos":[1393,1402]},{"content":"Architecture","pos":[1403,1415]},{"content":"x64","pos":[1477,1480]},{"pos":[1488,1515],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Remarks","pos":[1524,1531]},{"pos":[1535,1677],"content":"The <ph id=\"ph1\">`__m128`</ph> structure represents an XMM register, so this intrinsic allows the value <ph id=\"ph2\">`b`</ph> from system memory to be moved into an XMM register.","source":"The `__m128` structure represents an XMM register, so this intrinsic allows the value `b` from system memory to be moved into an XMM register."},{"content":"This routine is only available as an intrinsic.","pos":[1684,1731]},{"content":"Example","pos":[1740,1747]},{"content":"END Microsoft Specific","pos":[2295,2317]},{"content":"See Also","pos":[2326,2334]},{"content":"__m128","pos":[2339,2345]},{"content":"Compiler Intrinsics","pos":[2368,2387]}],"content":"---\ntitle: \"_mm_cvtsi64x_ss | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_mm_cvtsi64x_ss\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"cvtsi2ss instruction\"\n  - \"_mm_cvtsi64x_ss intrinsic\"\nms.assetid: 01e5d321-c18a-46fd-a6f6-324364514e1f\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _mm_cvtsi64x_ss\n**Microsoft Specific**  \n  \n Generates the [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)] extended version of the Convert 64-Bit Integer to Scalar Single-Precision Floating-Point Value (`cvtsi2ss`) instruction.  \n  \n## Syntax  \n  \n```  \n__m128 _mm_cvtsi64x_ss(   \n   __m128 a,   \n   __int64 b   \n);  \n```  \n  \n#### Parameters  \n [in] `a`  \n An `__m128` structure containing four single-precision floating-point values.  \n  \n [in] `b`  \n A 64-bit integer to be converted into a floating-point value.  \n  \n## Return Value  \n An `__m128` structure whose first floating-point value is the result of the conversion. The other three values are copied unchanged from `a`.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`_mm_cvtsi64x_ss`|x64|  \n  \n **Header file** \\<intrin.h>  \n  \n## Remarks  \n The `__m128` structure represents an XMM register, so this intrinsic allows the value `b` from system memory to be moved into an XMM register.  \n  \n This routine is only available as an intrinsic.  \n  \n## Example  \n  \n```  \n// _mm_cvtsi64x_ss.cpp  \n// processor: x64  \n  \n#include <intrin.h>  \n#include <stdio.h>  \n  \n#pragma intrinsic(_mm_cvtsi64x_ss)  \n  \nint main()  \n{  \n    __m128 a;  \n    __int64 b = 54;  \n  \n    a.m128_f32[0] = 0;  \n    a.m128_f32[1] = 0;  \n    a.m128_f32[2] = 0;  \n    a.m128_f32[3] = 0;  \n    a = _mm_cvtsi64x_ss(a, b);  \n  \n    printf_s( \"%lf %lf %lf %lf\\n\",  \n              a.m128_f32[0], a.m128_f32[1],   \n              a.m128_f32[2], a.m128_f32[3] );  \n}  \n```  \n  \n```Output  \n54.000000 0.000000 0.000000 0.000000  \n```  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [__m128](../cpp/m128.md)   \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}