<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f66895701b65fa3f3a2ca9399edbf61e0e472472</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\unhandled-cpp-exceptions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34d0a4a7de96395b00eb7fcf423830be2a56ffc3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d024540c8e97976563311073414abbafacf03d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unhandled C++ Exceptions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unhandled C++ Exceptions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If a matching handler (or ellipsis <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> handler) cannot be found for the current exception, the predefined <ph id="ph1">`terminate`</ph> run-time function is called.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(You can also explicitly call <ph id="ph1">`terminate`</ph> in any of your handlers.) The default action of <ph id="ph2">`terminate`</ph> is to call <ph id="ph3">`abort`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you want <ph id="ph1">`terminate`</ph> to call some other function in your program before exiting the application, call the <ph id="ph2">`set_terminate`</ph> function with the name of the function to be called as its single argument.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`set_terminate`</ph> at any point in your program.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`terminate`</ph> routine always calls the last function given as an argument to <ph id="ph2">`set_terminate`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example throws a <ph id="ph1">`char *`</ph> exception, but does not contain a handler designated to catch exceptions of type <ph id="ph2">`char *`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">`set_terminate`</ph> instructs <ph id="ph2">`terminate`</ph> to call <ph id="ph3">`term_func`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`term_func`</ph> function should terminate the program or current thread, ideally by calling <ph id="ph2">`exit`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If it doesn't, and instead returns to its caller, <ph id="ph1">`abort`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>C++ Exception Handling</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>