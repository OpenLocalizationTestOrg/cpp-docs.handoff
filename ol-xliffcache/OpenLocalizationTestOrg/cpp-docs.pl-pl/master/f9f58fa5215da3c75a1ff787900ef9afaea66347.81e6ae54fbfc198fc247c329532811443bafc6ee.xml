{"nodes":[{"pos":[12,50],"content":"aligned_storage Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"aligned_storage Class | Microsoft Docs","pos":[0,38]}]},{"pos":[799,820],"content":"aligned_storage Class","linkify":"aligned_storage Class","nodes":[{"content":"aligned_storage Class","pos":[0,21]}]},{"content":"Makes suitably aligned type.","pos":[821,849]},{"pos":[858,864],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1121,1131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The object size.","pos":[1144,1160]},{"content":"The object alignment.","pos":[1178,1199]},{"pos":[1208,1215],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template member typedef <ph id=\"ph1\">`type`</ph> is a synonym for a POD type with alignment <ph id=\"ph2\">`Align`</ph> and size <ph id=\"ph3\">`Len`</ph>.","pos":[1219,1320],"source":"The template member typedef `type` is a synonym for a POD type with alignment `Align` and size `Len`."},{"content":"<ph id=\"ph1\">`Align`</ph> must be equal to <ph id=\"ph2\">`alignment_of&lt;T&gt;::value`</ph> for some type <ph id=\"ph3\">`T`</ph>, or to the default alignment.","pos":[1321,1418],"source":"`Align` must be equal to `alignment_of<T>::value` for some type `T`, or to the default alignment."},{"pos":[1427,1434],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1952,1964],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1968,1993],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[2000,2018],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2027,2035],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept><ph id=\"ph1\"> </ph>","pos":[2039,2091],"source":"[<type_traits>](../standard-library/type-traits.md) "},{"content":"<bpt id=\"p1\"> [</bpt>alignment_of Class<ept id=\"p1\">](../standard-library/alignment-of-class.md)</ept>","pos":[2094,2158],"source":" [alignment_of Class](../standard-library/alignment-of-class.md)"}],"content":"---\ntitle: \"aligned_storage Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"aligned_storage\"\n  - \"std::tr1::aligned_storage\"\n  - \"std.tr1.aligned_storage\"\n  - \"std.aligned_storage\"\n  - \"std::aligned_storage\"\n  - \"type_traits/std::aligned_storage\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"aligned_storage class [TR1]\"\n  - \"aligned_storage\"\nms.assetid: f255e345-1f05-4d07-81e4-017f420839fb\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# aligned_storage Class\nMakes suitably aligned type.  \n  \n## Syntax  \n  \n```  \ntemplate <std::size_t Len, std::size_t Align>  \nstruct aligned_storage;  \n \ntemplate <std::size_t Len, std::size_t Align = alignment_of<max_align_t>::value>  \nusing aligned_storage_t = typename aligned_storage<Len, Align>::type;  \n```  \n  \n#### Parameters  \n `Len`  \n The object size.  \n  \n `Align`  \n The object alignment.  \n  \n## Remarks  \n The template member typedef `type` is a synonym for a POD type with alignment `Align` and size `Len`. `Align` must be equal to `alignment_of<T>::value` for some type `T`, or to the default alignment.  \n  \n## Example  \n  \n```cpp  \n#include <type_traits>   \n#include <iostream>   \n  \ntypedef std::aligned_storage<sizeof (int),   \n    std::alignment_of<double>::value>::type New_type;   \nint main()   \n    {   \n    std::cout << \"alignment_of<int> == \"   \n        << std::alignment_of<int>::value << std::endl;   \n    std::cout << \"aligned to double == \"   \n        << std::alignment_of<New_type>::value << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nalignment_of<int> == 4  \naligned to double == 8  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)   \n [alignment_of Class](../standard-library/alignment-of-class.md)\n"}