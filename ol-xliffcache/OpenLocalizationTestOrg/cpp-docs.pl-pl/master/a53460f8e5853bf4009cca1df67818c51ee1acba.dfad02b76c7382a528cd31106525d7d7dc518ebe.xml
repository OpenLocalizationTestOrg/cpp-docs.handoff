{"nodes":[{"pos":[12,52],"content":"&lt;array&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>array<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,40],"source":"&lt;array&gt; operators | Microsoft Docs"}]},{"pos":[255,278],"content":"&lt;array&gt; operators","linkify":"&lt;array&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>array<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,23],"source":"&lt;array&gt; operators"}]},{"pos":[297,324],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[325,354],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt_)</ept>","source":"[operator&gt;](#operator_gt_)"},{"pos":[355,388],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_gt__eq)</ept>","source":"[operator&gt;=](#operator_gt__eq)"},{"pos":[393,422],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_)</ept>","source":"[operator&lt;](#operator_lt_)"},{"pos":[423,456],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_lt__eq)</ept>","source":"[operator&lt;=](#operator_lt__eq)"},{"pos":[457,486],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[497,536],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"content":"Array comparison, not equal.","pos":[540,568]},{"pos":[705,715],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of an element.","pos":[727,750]},{"content":"The size of the array.","pos":[764,786]},{"content":"Left container to compare.","pos":[803,829]},{"content":"Right container to compare.","pos":[847,874]},{"pos":[884,891],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[895,952],"content":"The template function returns <ph id=\"ph1\">`!(``left`</ph> <ph id=\"ph2\">`==`</ph> <ph id=\"ph3\">`right``)`</ph>.","source":"The template function returns `!(``left` `==` `right``)`."},{"pos":[962,969],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1923,1964],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_\"></a>  operator&lt;","source":"<a name=\"operator_lt_\"></a>  operator&lt;"},{"content":"Array comparison, less than.","pos":[1968,1996]},{"pos":[2132,2142],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of an element.","pos":[2154,2177]},{"content":"The size of the array.","pos":[2191,2213]},{"content":"Left container to compare.","pos":[2230,2256]},{"content":"Right container to compare.","pos":[2274,2301]},{"pos":[2311,2318],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function overloads <ph id=\"ph1\">`operator&lt;`</ph> to compare two objects of template class <bpt id=\"p1\">[</bpt>array Class<ept id=\"p1\">](../standard-library/array-class-stl.md)</ept>.","pos":[2322,2461],"source":"The template function overloads `operator<` to compare two objects of template class [array Class](../standard-library/array-class-stl.md)."},{"content":"The function returns <ph id=\"ph1\">`lexicographical_compare(``left``.begin(),`</ph> <ph id=\"ph2\">`left``.end(),`</ph> <ph id=\"ph3\">`right``.begin())`</ph>.","pos":[2462,2562],"source":" The function returns `lexicographical_compare(``left``.begin(),` `left``.end(),` `right``.begin())`."},{"pos":[2572,2579],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3533,3578],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_lt__eq\"></a>  operator&lt;=","source":"<a name=\"operator_lt__eq\"></a>  operator&lt;="},{"content":"Array comparison, less than or equal.","pos":[3582,3619]},{"pos":[3756,3766],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of an element.","pos":[3778,3801]},{"content":"The size of the array.","pos":[3815,3837]},{"content":"Left container to compare.","pos":[3854,3880]},{"content":"Right container to compare.","pos":[3898,3925]},{"pos":[3935,3942],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3946,4002],"content":"The template function returns <ph id=\"ph1\">`!(``right`</ph> <ph id=\"ph2\">`&lt;`</ph> <ph id=\"ph3\">`left``)`</ph>.","source":"The template function returns `!(``right` `<` `left``)`."},{"pos":[4012,4019],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4975,5016],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"content":"Array comparison, equal.","pos":[5020,5044]},{"pos":[5181,5191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of an element.","pos":[5203,5226]},{"content":"The size of the array.","pos":[5240,5262]},{"content":"Left container to compare.","pos":[5279,5305]},{"content":"Right container to compare.","pos":[5323,5350]},{"pos":[5360,5367],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function overloads <ph id=\"ph1\">`operator==`</ph> to compare two objects of template class <bpt id=\"p1\">[</bpt>array Class<ept id=\"p1\">](../standard-library/array-class-stl.md)</ept>.","pos":[5371,5511],"source":"The template function overloads `operator==` to compare two objects of template class [array Class](../standard-library/array-class-stl.md)."},{"content":"The function returns <ph id=\"ph1\">`equal(``left``.begin(),`</ph> <ph id=\"ph2\">`left``.end(),`</ph> <ph id=\"ph3\">`right``.begin())`</ph>.","pos":[5512,5594],"source":" The function returns `equal(``left``.begin(),` `left``.end(),` `right``.begin())`."},{"pos":[5604,5611],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6567,6608],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt_\"></a>  operator&gt;","source":"<a name=\"operator_gt_\"></a>  operator&gt;"},{"content":"Array comparison, greater than.","pos":[6612,6643]},{"pos":[6779,6789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of an element.","pos":[6801,6824]},{"content":"The size of the array.","pos":[6838,6860]},{"content":"Left container to compare.","pos":[6877,6903]},{"content":"Right container to compare.","pos":[6921,6948]},{"pos":[6958,6965],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6969,7018],"content":"The template function returns <ph id=\"ph1\">`right`</ph> <ph id=\"ph2\">`&lt;`</ph> <ph id=\"ph3\">`left`</ph>.","source":"The template function returns `right` `<` `left`."},{"pos":[7028,7035],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7989,8034],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_gt__eq\"></a>  operator&gt;=","source":"<a name=\"operator_gt__eq\"></a>  operator&gt;="},{"content":"Array comparison, greater than or equal.","pos":[8038,8078]},{"pos":[8215,8225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of an element.","pos":[8237,8260]},{"content":"The size of the array.","pos":[8274,8296]},{"content":"Left container to compare.","pos":[8313,8339]},{"content":"Right container to compare.","pos":[8357,8384]},{"pos":[8394,8401],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8405,8461],"content":"The template function returns <ph id=\"ph1\">`!(``left`</ph> <ph id=\"ph2\">`&lt;`</ph> <ph id=\"ph3\">`right``)`</ph>.","source":"The template function returns `!(``left` `<` `right``)`."},{"pos":[8471,8478],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9433,9441],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[9445,9485],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>array&gt;<ept id=\"p1\">](../standard-library/array.md)</ept>","source":"[\\<array>](../standard-library/array.md)"}],"content":"---\ntitle: \"&lt;array&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: c8f46282-f179-4909-9a01-639cb8e18c27\ncaps.latest.revision: 12\nmanager: \"ghogen\"\n---\n# &lt;array&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Array comparison, not equal.  \n  \n```  \ntemplate <Ty, std::size_t N>  \nbool operator!=(\n    const array<Ty, N>& left,  \n    const array<Ty, N>& right);\n```  \n  \n### Parameters  \n `Ty`  \n The type of an element.  \n  \n `N`  \n The size of the array.  \n  \n `left`  \n Left container to compare.  \n  \n `right`  \n Right container to compare.  \n  \n### Remarks  \n The template function returns `!(``left` `==` `right``)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__operator_ne.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    Myarray c1 = {4, 5, 6, 7};   \n  \n// display contents \" 4 5 6 7\"   \n    for (Myarray::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 != c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c0 != c1);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }   \n```  \n  \n```Output  \n0 1 2 3  \n4 5 6 7  \nfalse  \ntrue  \n```  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Array comparison, less than.  \n  \n```  \ntemplate <Ty, std::size_t N>  \nbool operator<(\n    const array<Ty, N>& left,  \n    const array<Ty, N>& right);\n```  \n  \n### Parameters  \n `Ty`  \n The type of an element.  \n  \n `N`  \n The size of the array.  \n  \n `left`  \n Left container to compare.  \n  \n `right`  \n Right container to compare.  \n  \n### Remarks  \n The template function overloads `operator<` to compare two objects of template class [array Class](../standard-library/array-class-stl.md). The function returns `lexicographical_compare(``left``.begin(),` `left``.end(),` `right``.begin())`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__operator_lt.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    Myarray c1 = {4, 5, 6, 7};   \n  \n// display contents \" 4 5 6 7\"   \n    for (Myarray::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 < c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c0 < c1);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n4 5 6 7  \nfalse  \ntrue  \n```  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Array comparison, less than or equal.  \n  \n```  \ntemplate <Ty, std::size_t N>  \nbool operator<=(\n    const array<Ty, N>& left,  \n    const array<Ty, N>& right);\n```  \n  \n### Parameters  \n `Ty`  \n The type of an element.  \n  \n `N`  \n The size of the array.  \n  \n `left`  \n Left container to compare.  \n  \n `right`  \n Right container to compare.  \n  \n### Remarks  \n The template function returns `!(``right` `<` `left``)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__operator_le.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    Myarray c1 = {4, 5, 6, 7};   \n  \n// display contents \" 4 5 6 7\"   \n    for (Myarray::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 <= c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c1 <= c0);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n4 5 6 7  \ntrue  \nfalse  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Array comparison, equal.  \n  \n```  \ntemplate <Ty, std::size_t N>  \nbool operator==(\n    const array<Ty, N>& left,  \n    const array<Ty, N>& right);\n```  \n  \n### Parameters  \n `Ty`  \n The type of an element.  \n  \n `N`  \n The size of the array.  \n  \n `left`  \n Left container to compare.  \n  \n `right`  \n Right container to compare.  \n  \n### Remarks  \n The template function overloads `operator==` to compare two objects of template class [array Class](../standard-library/array-class-stl.md). The function returns `equal(``left``.begin(),` `left``.end(),` `right``.begin())`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__operator_eq.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    Myarray c1 = {4, 5, 6, 7};   \n  \n// display contents \" 4 5 6 7\"   \n    for (Myarray::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 == c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c0 == c1);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n4 5 6 7  \ntrue  \nfalse  \n```  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Array comparison, greater than.  \n  \n```  \ntemplate <Ty, std::size_t N>  \nbool operator>(\n    const array<Ty, N>& left,  \n    const array<Ty, N>& right);\n```  \n  \n### Parameters  \n `Ty`  \n The type of an element.  \n  \n `N`  \n The size of the array.  \n  \n `left`  \n Left container to compare.  \n  \n `right`  \n Right container to compare.  \n  \n### Remarks  \n The template function returns `right` `<` `left`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__operator_gt.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    Myarray c1 = {4, 5, 6, 7};   \n  \n// display contents \" 4 5 6 7\"   \n    for (Myarray::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 > c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c1 > c0);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n4 5 6 7  \nfalse  \ntrue  \n```  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Array comparison, greater than or equal.  \n  \n```  \ntemplate <Ty, std::size_t N>  \nbool operator>=(\n    const array<Ty, N>& left,  \n    const array<Ty, N>& right);\n```  \n  \n### Parameters  \n `Ty`  \n The type of an element.  \n  \n `N`  \n The size of the array.  \n  \n `left`  \n Left container to compare.  \n  \n `right`  \n Right container to compare.  \n  \n### Remarks  \n The template function returns `!(``left` `<` `right``)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__operator_ge.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    Myarray c1 = {4, 5, 6, 7};   \n  \n// display contents \" 4 5 6 7\"   \n    for (Myarray::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 >= c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c0 >= c1);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n4 5 6 7  \ntrue  \nfalse  \n```  \n  \n## See Also  \n [\\<array>](../standard-library/array.md)\n\n"}