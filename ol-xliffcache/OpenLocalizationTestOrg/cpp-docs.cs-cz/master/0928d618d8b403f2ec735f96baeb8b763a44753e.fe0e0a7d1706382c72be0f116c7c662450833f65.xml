{"nodes":[{"pos":[12,44],"content":"MixIn Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"MixIn Structure | Microsoft Docs","pos":[0,32]}]},{"content":"MixIn Structure","pos":[649,664]},{"pos":[665,812],"content":"Ensures that a runtime class derives from <ph id=\"ph1\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> interfaces, if any, and then classic COM interfaces.","source":"Ensures that a runtime class derives from [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] interfaces, if any, and then classic COM interfaces."},{"content":"Syntax","pos":[821,827]},{"content":"Parameters","pos":[1013,1023]},{"content":"A type derived from the <bpt id=\"p1\">[</bpt>Implements<ept id=\"p1\">](../windows/implements-structure.md)</ept> structure.","pos":[1040,1123],"source":" A type derived from the [Implements](../windows/implements-structure.md) structure."},{"content":"A base type.","pos":[1145,1157]},{"content":"if <ph id=\"ph1\">`MixInType`</ph> is derived from the current implementation the base type; <ph id=\"ph2\">`false`</ph> otherwise.","pos":[1190,1281],"source":" if `MixInType` is derived from the current implementation the base type; `false` otherwise."},{"content":"Remarks","pos":[1290,1297]},{"content":"If a class is derived from both <ph id=\"ph1\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> and class COM interfaces, the class declaration list must first list any <ph id=\"ph2\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> interfaces and then any classic COM interfaces.","pos":[1301,1559],"source":"If a class is derived from both [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] and class COM interfaces, the class declaration list must first list any [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] interfaces and then any classic COM interfaces."},{"content":"MixIn ensures that the interfaces are specified in the correct order.","pos":[1560,1629]},{"content":"Inheritance Hierarchy","pos":[1638,1659]},{"content":"Requirements","pos":[1679,1691]},{"pos":[1695,1719],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> implements.h","source":"**Header:** implements.h"},{"pos":[1726,1755],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL","source":"**Namespace:** Microsoft::WRL"},{"content":"See Also","pos":[1764,1772]},{"content":"Microsoft::WRL Namespace","pos":[1777,1801]}],"content":"---\ntitle: \"MixIn Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"implements/Microsoft::WRL::MixIn\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"MixIn structure\"\nms.assetid: 47e2df9b-3a2e-4ae8-8ba3-b1fd3aa73566\ncaps.latest.revision: 4\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# MixIn Structure\nEnsures that a runtime class derives from [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] interfaces, if any, and then classic COM interfaces.  \n  \n## Syntax  \n  \n```  \ntemplate<  \n   typename Derived,  \n   typename MixInType,  \n   bool hasImplements = __is_base_of(Details::ImplementsBase,  \n   MixInType)  \n>  \nstruct MixIn;  \n```  \n  \n#### Parameters  \n `Derived`  \n A type derived from the [Implements](../windows/implements-structure.md) structure.  \n  \n `MixInType`  \n A base type.  \n  \n `hasImplements`  \n `true` if `MixInType` is derived from the current implementation the base type; `false` otherwise.  \n  \n## Remarks  \n If a class is derived from both [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] and class COM interfaces, the class declaration list must first list any [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] interfaces and then any classic COM interfaces. MixIn ensures that the interfaces are specified in the correct order.  \n  \n## Inheritance Hierarchy  \n `MixIn`  \n  \n## Requirements  \n **Header:** implements.h  \n  \n **Namespace:** Microsoft::WRL  \n  \n## See Also  \n [Microsoft::WRL Namespace](../windows/microsoft-wrl-namespace.md)"}