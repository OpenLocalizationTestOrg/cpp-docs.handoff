{"nodes":[{"pos":[12,46],"content":"less_equal Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"less_equal Struct | Microsoft Docs","pos":[0,34]}]},{"pos":[733,750],"content":"less_equal Struct","linkify":"less_equal Struct","nodes":[{"content":"less_equal Struct","pos":[0,17]}]},{"pos":[751,853],"content":"A binary predicate that performs the less-than-or-equal-to operation ( <ph id=\"ph1\">`operator&lt;=`</ph>) on its arguments.","source":"A binary predicate that performs the less-than-or-equal-to operation ( `operator<=`) on its arguments."},{"pos":[862,868],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1290,1300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\">`Type`</ph>, <ph id=\"ph2\">`T`</ph>, <ph id=\"ph3\">`U`</ph>","pos":[1304,1320],"source":"`Type`, `T`, `U`"},{"content":"Any type that supports an <ph id=\"ph1\">`operator&lt;=`</ph> that takes operands of the specified or inferred types.","pos":[1324,1418],"source":" Any type that supports an `operator<=` that takes operands of the specified or inferred types."},{"content":"The left operand of the less-than-or-equal-to operation.","pos":[1435,1491]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1492,1569],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`T`</ph>.","pos":[1570,1681],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`."},{"content":"The right operand of the less-than-or-equal-to operation.","pos":[1699,1756]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1757,1834],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`U`</ph>.","pos":[1835,1946],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`."},{"pos":[1955,1967],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The result of <ph id=\"ph1\">`Left``&lt;=``Right`</ph>.","pos":[1971,2003],"source":"The result of `Left``<=``Right`."},{"content":"The specialized template does perfect forwarding of the result, which has the type returned by <ph id=\"ph1\">`operator&lt;=`</ph>.","pos":[2004,2112],"source":" The specialized template does perfect forwarding of the result, which has the type returned by `operator<=`."},{"pos":[2121,2128],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The binary predicate <ph id=\"ph1\">`less_equal`</ph><ph id=\"ph2\">&lt; </ph><ph id=\"ph3\">`Type`</ph>&gt; provides a strict weak ordering of a set of element values of type <ph id=\"ph4\">`Type`</ph> into equivalence classes, if and only if this type satisfies the standard mathematical requirements for being so ordered.","pos":[2132,2370],"source":"The binary predicate `less_equal`< `Type`> provides a strict weak ordering of a set of element values of type `Type` into equivalence classes, if and only if this type satisfies the standard mathematical requirements for being so ordered."},{"content":"The specializations for any pointer type yield a total ordering of elements, in that all elements of distinct values are ordered with respect to each other.","pos":[2371,2527]},{"pos":[2536,2543],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3913,3926],"content":"Sample Output","linkify":"Sample Output","nodes":[{"content":"Sample Output","pos":[0,13]}]},{"pos":[4080,4092],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4096,4121],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[4128,4146],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4155,4163],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4167,4254],"content":"<bpt id=\"p1\">[</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","source":"[C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"less_equal Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::less_equal\"\n  - \"xfunctional/std::less_equal\"\n  - \"std.less_equal\"\n  - \"less_equal\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"less_equal function\"\n  - \"less_equal struct\"\nms.assetid: 32085782-c7e0-4310-9b40-8aa3c1bff211\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# less_equal Struct\nA binary predicate that performs the less-than-or-equal-to operation ( `operator<=`) on its arguments.  \n  \n## Syntax  \n  \n```\ntemplate <class Type = void>\nstruct less_equal : public binary_function <Type, Type, bool>  \n{\n    bool operator()(const Type& Left, const Type& Right) const;\n};\n\n// specialized transparent functor for operator<=\ntemplate <>\nstruct less_equal<void>  \n{\n  template <class T, class U>\n  auto operator()(T&& Left, U&& Right) const`\n    -> decltype(std::forward<T>(Left) <= std::forward<U>(Right));\n};\n```  \n  \n#### Parameters  \n `Type`, `T`, `U`  \n Any type that supports an `operator<=` that takes operands of the specified or inferred types.  \n  \n `Left`  \n The left operand of the less-than-or-equal-to operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`.  \n  \n `Right`  \n The right operand of the less-than-or-equal-to operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`.  \n  \n## Return Value  \n The result of `Left``<=``Right`. The specialized template does perfect forwarding of the result, which has the type returned by `operator<=`.  \n  \n## Remarks  \n The binary predicate `less_equal`< `Type`> provides a strict weak ordering of a set of element values of type `Type` into equivalence classes, if and only if this type satisfies the standard mathematical requirements for being so ordered. The specializations for any pointer type yield a total ordering of elements, in that all elements of distinct values are ordered with respect to each other.  \n  \n## Example  \n  \n```cpp  \n// functional_less_equal.cpp  \n// compile with: /EHsc  \n#define _CRT_RAND_S  \n#include <stdlib.h>  \n#include <vector>  \n#include <algorithm>  \n#include <functional>  \n#include <cstdlib>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   vector <int> v1;  \n   vector <int>::iterator Iter1;  \n   vector <int>::reverse_iterator rIter1;  \n   unsigned int randomNumber;  \n  \n   int i;  \n   for ( i = 0 ; i < 5 ; i++ )  \n   {  \n      if ( rand_s( &randomNumber ) == 0 )  \n      {  \n         // Convert the random number to be between 1 - 50000  \n         // This is done for readability purposes  \n         randomNumber = ( unsigned int) ((double)randomNumber /   \n            (double) UINT_MAX * 50000) + 1;  \n  \n         v1.push_back( randomNumber );  \n      }  \n   }  \n   for ( i = 0 ; i < 3 ; i++ )  \n   {  \n      v1.push_back( 2836 );  \n   }  \n  \n   cout << \"Original vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   // To sort in ascending order,  \n   // use the binary predicate less_equal<int>( )  \n   sort( v1.begin( ), v1.end( ), less_equal<int>( ) );  \n   cout << \"Sorted vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n}  \n```  \n  \n## Sample Output  \n  \n```\nOriginal vector v1 = (31247 37154 48755 15251 6205 2836 2836 2836)\nSorted vector v1 = (2836 2836 2836 6205 15251 31247 37154 48755)\n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}