{"nodes":[{"pos":[12,39],"content":"OLE in MFC | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"OLE in MFC | Microsoft Docs","pos":[0,27]}]},{"content":"OLE in MFC","pos":[746,756]},{"content":"These articles explain the fundamentals of OLE programming using MFC.","pos":[757,826]},{"content":"MFC provides the easiest way to write programs that use OLE:","pos":[827,887]},{"content":"To use OLE visual editing (in-place activation).","pos":[897,945]},{"content":"To work as OLE containers or servers.","pos":[955,992]},{"content":"To implement drag-and-drop functionality.","pos":[1002,1043]},{"content":"To work with date and time data.","pos":[1053,1085]},{"content":"To manage the state data of MFC modules, including exported DLL function entry points, OLE/COM interface entry points, and window procedure entry points.","pos":[1095,1248]},{"pos":[1255,1404],"content":"You can also use <bpt id=\"p1\">[</bpt>Automation<ept id=\"p1\">](../mfc/automation.md)</ept> or <bpt id=\"p2\">[</bpt>Remote Automation<ept id=\"p2\">](../mfc/remote-automation.md)</ept> to operate another program from your program.","source":"You can also use [Automation](../mfc/automation.md) or [Remote Automation](../mfc/remote-automation.md) to operate another program from your program."},{"pos":[1412,1782],"content":"[!NOTE]\n The term OLE denotes the technologies associated with linking and embedding, including OLE containers, OLE servers, OLE items, in-place activation (or visual editing), trackers, drag and drop, and menu merging. The term Active applies to the Component Object Model (COM) and COM-based objects such as ActiveX controls. OLE Automation is now called Automation.","leadings":["","> "],"nodes":[{"content":" The term OLE denotes the technologies associated with linking and embedding, including OLE containers, OLE servers, OLE items, in-place activation (or visual editing), trackers, drag and drop, and menu merging. The term Active applies to the Component Object Model (COM) and COM-based objects such as ActiveX controls. OLE Automation is now called Automation.","pos":[8,368],"nodes":[{"content":"The term OLE denotes the technologies associated with linking and embedding, including OLE containers, OLE servers, OLE items, in-place activation (or visual editing), trackers, drag and drop, and menu merging.","pos":[1,211]},{"content":"The term Active applies to the Component Object Model (COM) and COM-based objects such as ActiveX controls.","pos":[212,319]},{"content":"OLE Automation is now called Automation.","pos":[320,360]}]}]},{"content":"In This Section","pos":[1791,1806]},{"content":"OLE Background","pos":[1811,1825]},{"content":"Discusses OLE and provides conceptual information about how it works.","pos":[1856,1925]},{"content":"Activation","pos":[1933,1943]},{"content":"Describes the role of activation in editing OLE items.","pos":[1974,2028]},{"content":"Containers","pos":[2036,2046]},{"content":"Provides links to using containers in OLE.","pos":[2073,2115]},{"content":"Data Objects and Data Sources","pos":[2123,2152]},{"content":"Provides links to topics discussing the use of the <ph id=\"ph1\">`COleDataObject`</ph> and <ph id=\"ph2\">`COleDataSource`</ph> classes.","pos":[2202,2299],"source":" Provides links to topics discussing the use of the `COleDataObject` and `COleDataSource` classes."},{"content":"Drag and Drop","pos":[2307,2320]},{"content":"Discusses using copying and pasting with OLE.","pos":[2354,2399]},{"content":"OLE Menus and Resources","pos":[2407,2430]},{"content":"Explains the use of menus and resources in MFC OLE document applications.","pos":[2470,2543]},{"content":"Registration","pos":[2551,2563]},{"content":"Discusses server installation and initialization.","pos":[2592,2641]},{"content":"Servers","pos":[2649,2656]},{"content":"Describes how to create OLE items (or components) for use by container applications.","pos":[2680,2764]},{"content":"Trackers","pos":[2772,2780]},{"content":"Provides information about the <ph id=\"ph1\">`CRectTracker`</ph> class, which provides a graphical interface to enable users to interact with OLE client items.","pos":[2805,2945],"source":" Provides information about the `CRectTracker` class, which provides a graphical interface to enable users to interact with OLE client items."},{"content":"Related Sections","pos":[2954,2970]},{"content":"Connection Points","pos":[2975,2992]},{"content":"Explains how to implement connection points (formerly known as OLE connection points) using the MFC classes <ph id=\"ph1\">`CCmdTarget`</ph> and <ph id=\"ph2\">`CConnectionPoint`</ph>.","pos":[3026,3170],"source":" Explains how to implement connection points (formerly known as OLE connection points) using the MFC classes `CCmdTarget` and `CConnectionPoint`."},{"content":"Container/Server COM Components","pos":[3178,3209]},{"content":"Describes the steps necessary to incorporate optional advanced features into existing container applications.","pos":[3254,3363]},{"content":"The Component Object Model","pos":[3371,3397]},{"content":"Describes using OLE without MFC.","pos":[3462,3494]},{"content":"See Also","pos":[3503,3511]},{"content":"Concepts","pos":[3516,3524]}],"content":"---\ntitle: \"OLE in MFC | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"MFC [C++], OLE and\"\n  - \"OLE items\"\n  - \"OLE applications [C++], about OLE\"\n  - \"OLE [C++]\"\n  - \"OLE containers, about OLE\"\n  - \"applications [OLE], about OLE\"\n  - \"OLE component object model (COM)\"\nms.assetid: 5193479d-1239-4697-aea4-e82f92c707ab\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# OLE in MFC\nThese articles explain the fundamentals of OLE programming using MFC. MFC provides the easiest way to write programs that use OLE:  \n  \n-   To use OLE visual editing (in-place activation).  \n  \n-   To work as OLE containers or servers.  \n  \n-   To implement drag-and-drop functionality.  \n  \n-   To work with date and time data.  \n  \n-   To manage the state data of MFC modules, including exported DLL function entry points, OLE/COM interface entry points, and window procedure entry points.  \n  \n You can also use [Automation](../mfc/automation.md) or [Remote Automation](../mfc/remote-automation.md) to operate another program from your program.  \n  \n> [!NOTE]\n>  The term OLE denotes the technologies associated with linking and embedding, including OLE containers, OLE servers, OLE items, in-place activation (or visual editing), trackers, drag and drop, and menu merging. The term Active applies to the Component Object Model (COM) and COM-based objects such as ActiveX controls. OLE Automation is now called Automation.  \n  \n## In This Section  \n [OLE Background](../mfc/ole-background.md)  \n Discusses OLE and provides conceptual information about how it works.  \n  \n [Activation](../mfc/activation-cpp.md)  \n Describes the role of activation in editing OLE items.  \n  \n [Containers](../mfc/containers.md)  \n Provides links to using containers in OLE.  \n  \n [Data Objects and Data Sources](../mfc/data-objects-and-data-sources-ole.md)  \n Provides links to topics discussing the use of the `COleDataObject` and `COleDataSource` classes.  \n  \n [Drag and Drop](../mfc/drag-and-drop-ole.md)  \n Discusses using copying and pasting with OLE.  \n  \n [OLE Menus and Resources](../mfc/menus-and-resources-ole.md)  \n Explains the use of menus and resources in MFC OLE document applications.  \n  \n [Registration](../mfc/registration.md)  \n Discusses server installation and initialization.  \n  \n [Servers](../mfc/servers.md)  \n Describes how to create OLE items (or components) for use by container applications.  \n  \n [Trackers](../mfc/trackers.md)  \n Provides information about the `CRectTracker` class, which provides a graphical interface to enable users to interact with OLE client items.  \n  \n## Related Sections  \n [Connection Points](../mfc/connection-points.md)  \n Explains how to implement connection points (formerly known as OLE connection points) using the MFC classes `CCmdTarget` and `CConnectionPoint`.  \n  \n [Container/Server COM Components](../mfc/containers-advanced-features.md)  \n Describes the steps necessary to incorporate optional advanced features into existing container applications.  \n  \n [The Component Object Model](http://msdn.microsoft.com/library/windows/desktop/ms694363)  \n Describes using OLE without MFC.  \n  \n## See Also  \n [Concepts](../mfc/mfc-concepts.md)\n\n"}