{"nodes":[{"pos":[12,67],"content":"printf, _printf_l, wprintf, _wprintf_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"printf, _printf_l, wprintf, _wprintf_l | Microsoft Docs","pos":[0,55]}]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[1324,1362]},{"content":"Prints formatted output to the standard output stream.","pos":[1363,1417]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>printf_s, _printf_s_l, wprintf_s, _wprintf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/printf-s-printf-s-l-wprintf-s-wprintf-s-l.md)</ept>.","pos":[1418,1606],"source":" More secure versions of these functions are available; see [printf_s, _printf_s_l, wprintf_s, _wprintf_s_l](../../c-runtime-library/reference/printf-s-printf-s-l-wprintf-s-wprintf-s-l.md)."},{"content":"Syntax","pos":[1615,1621]},{"content":"Parameters","pos":[1965,1975]},{"content":"Format control.","pos":[1991,2006]},{"content":"Optional arguments.","pos":[2027,2046]},{"content":"The locale to use.","pos":[2065,2083]},{"content":"Return Value","pos":[2092,2104]},{"content":"Returns the number of characters printed, or a negative value if an error occurs.","pos":[2108,2189]},{"content":"If <ph id=\"ph1\">`format`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2190,2343],"source":" If `format` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the function returns -1 and sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2344,2434],"source":" If execution is allowed to continue, the function returns -1 and sets `errno` to `EINVAL`."},{"content":"If <bpt id=\"p1\">**</bpt>EOF<ept id=\"p1\">**</ept> (0xFFFF) is encountered in <ph id=\"ph1\">`argument`</ph>, the function returns -1.","pos":[2435,2509],"source":" If **EOF** (0xFFFF) is encountered in `argument`, the function returns -1."},{"pos":[2516,2680],"content":"For information on <ph id=\"ph1\">`errno`</ph> and error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information on `errno` and error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[2689,2696]},{"content":"The <ph id=\"ph1\">`printf`</ph> function formats and prints a series of characters and values to the standard output stream, <ph id=\"ph2\">`stdout`</ph>.","pos":[2700,2815],"source":"The `printf` function formats and prints a series of characters and values to the standard output stream, `stdout`."},{"content":"If arguments follow the <ph id=\"ph1\">`format`</ph> string, the <ph id=\"ph2\">`format`</ph> string must contain specifications that determine the output format for the arguments.","pos":[2816,2956],"source":" If arguments follow the `format` string, the `format` string must contain specifications that determine the output format for the arguments."},{"content":"and <bpt id=\"p1\">[</bpt>fprintf<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept> behave identically except that <ph id=\"ph1\">`printf`</ph> writes output to <ph id=\"ph2\">`stdout`</ph> rather than to a destination of type <ph id=\"ph3\">`FILE`</ph>.","pos":[2966,3166],"source":" and [fprintf](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md) behave identically except that `printf` writes output to `stdout` rather than to a destination of type `FILE`."},{"content":"is a wide-character version of <ph id=\"ph1\">`printf`</ph>; <ph id=\"ph2\">`format`</ph> is a wide-character string.","pos":[3183,3260],"source":" is a wide-character version of `printf`; `format` is a wide-character string."},{"content":"and <ph id=\"ph1\">`printf`</ph> behave identically if the stream is opened in ANSI mode.","pos":[3271,3340],"source":" and `printf` behave identically if the stream is opened in ANSI mode."},{"content":"does not currently support output into a UNICODE stream.","pos":[3350,3406]},{"pos":[3413,3569],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"content":"Generic-Text Routine Mappings","pos":[3579,3608]},{"content":"TCHAR.H routine","pos":[3615,3630]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3631,3659],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3660,3673]},{"content":"_unicode defined","pos":[3674,3690]},{"content":"The <ph id=\"ph1\">`format`</ph> argument consists of ordinary characters, escape sequences, and (if arguments follow <ph id=\"ph2\">`format`</ph>) format specifications.","pos":[3849,3979],"source":"The `format` argument consists of ordinary characters, escape sequences, and (if arguments follow `format`) format specifications."},{"content":"The ordinary characters and escape sequences are copied to <ph id=\"ph1\">`stdout`</ph> in order of their appearance.","pos":[3980,4077],"source":" The ordinary characters and escape sequences are copied to `stdout` in order of their appearance."},{"content":"For example, the line:","pos":[4078,4100]},{"content":"produces the output:","pos":[4161,4181]},{"content":"<bpt id=\"p1\">[</bpt>Format specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept> always begin with a percent sign (<ph id=\"ph1\">`%`</ph>) and are read left to right.","pos":[4233,4408],"source":"[Format specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md) always begin with a percent sign (`%`) and are read left to right."},{"content":"When <ph id=\"ph1\">`printf`</ph> encounters the first format specification (if any), it converts the value of the first argument after <ph id=\"ph2\">`format`</ph> and outputs it accordingly.","pos":[4409,4561],"source":" When `printf` encounters the first format specification (if any), it converts the value of the first argument after `format` and outputs it accordingly."},{"content":"The second format specification causes the second argument to be converted and output, and so on.","pos":[4562,4659]},{"content":"If there are more arguments than there are format specifications, the extra arguments are ignored.","pos":[4660,4758]},{"content":"The results are undefined if there are not enough arguments for all the format specifications.","pos":[4759,4853]},{"pos":[4861,4927],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string.","leadings":["","> "],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[14,64],"source":" Ensure that `format` is not a user-defined string."}]},{"content":"Generic-Text Routine Mappings","pos":[4937,4966]},{"content":"Tchar.h routine","pos":[4973,4988]},{"content":"_UNICODE and _MBCS not defined","pos":[4989,5019]},{"content":"_MBCS defined","pos":[5020,5033]},{"content":"_UNICODE defined","pos":[5034,5050]},{"content":"Requirements","pos":[5267,5279]},{"content":"Routine","pos":[5286,5293]},{"content":"Required header","pos":[5294,5309]},{"pos":[5362,5363],"content":","},{"content":"stdio.h&gt;","pos":[5378,5386],"source":"stdio.h>"},{"pos":[5400,5401],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[5417,5439],"source":"stdio.h> or \\<wchar.h>"},{"content":"The console is not supported in <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[5447,5560],"source":"The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"The standard stream handles that are associated with the console—<ph id=\"ph1\">`stdin`</ph>, <ph id=\"ph2\">`stdout`</ph>, and <ph id=\"ph3\">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id=\"ph4\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[5561,5802],"source":" The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","pos":[5803,5907],"source":" For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[5916,5923]},{"content":"Sample Output","pos":[7514,7527]},{"content":".NET Framework Equivalent","pos":[8207,8232]},{"content":"System::Console::Write","pos":[8243,8265]},{"content":"System::Console::WriteLine","pos":[8345,8371]},{"content":"See Also","pos":[8453,8461]},{"content":"Floating-Point Support","pos":[8466,8488]},{"content":"Stream I/O","pos":[8546,8556]},{"content":"Locale","pos":[8602,8608]},{"content":"fopen, _wfopen","pos":[8650,8664]},{"content":"_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l","pos":[8722,8774]},{"content":"scanf, _scanf_l, wscanf, _wscanf_l","pos":[8865,8899]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l","pos":[8974,9031],"source":"sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l"},{"content":"vprintf Functions","pos":[9125,9142]},{"content":"_set_output_format","pos":[9195,9213]}],"content":"---\ntitle: \"printf, _printf_l, wprintf, _wprintf_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_printf_l\"\n  - \"wprintf\"\n  - \"_wprintf_l\"\n  - \"printf\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"printf\"\n  - \"_tprintf\"\n  - \"wprintf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"printf function\"\n  - \"printf_l function\"\n  - \"tprintf_l function\"\n  - \"tprintf function\"\n  - \"_printf_l function\"\n  - \"wprintf function\"\n  - \"writing to console\"\n  - \"wprintf_l function\"\n  - \"_tprintf_l function\"\n  - \"_wprintf_l function\"\n  - \"_tprintf function\"\n  - \"printf function, format specification fields\"\n  - \"printf function, using\"\n  - \"formatted text [C++]\"\nms.assetid: 77a854ae-5b48-4865-89f4-f2dc5cf80f52\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# printf, _printf_l, wprintf, _wprintf_l\nPrints formatted output to the standard output stream. More secure versions of these functions are available; see [printf_s, _printf_s_l, wprintf_s, _wprintf_s_l](../../c-runtime-library/reference/printf-s-printf-s-l-wprintf-s-wprintf-s-l.md).  \n  \n## Syntax  \n  \n```  \nint printf(  \n   const char *format [,  \n   argument]...   \n);  \nint _printf_l(  \n   const char *format,  \n   locale_t locale [,  \n   argument]...   \n);  \nint wprintf(  \n   const wchar_t *format [,  \n   argument]...   \n);  \nint _wprintf_l(  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument]...   \n);  \n```  \n  \n#### Parameters  \n `format`  \n Format control.  \n  \n `argument`  \n Optional arguments.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n Returns the number of characters printed, or a negative value if an error occurs. If `format` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the function returns -1 and sets `errno` to `EINVAL`. If **EOF** (0xFFFF) is encountered in `argument`, the function returns -1.  \n  \n For information on `errno` and error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `printf` function formats and prints a series of characters and values to the standard output stream, `stdout`. If arguments follow the `format` string, the `format` string must contain specifications that determine the output format for the arguments. `printf` and [fprintf](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md) behave identically except that `printf` writes output to `stdout` rather than to a destination of type `FILE`.  \n  \n `wprintf` is a wide-character version of `printf`; `format` is a wide-character string. `wprintf` and `printf` behave identically if the stream is opened in ANSI mode. `printf` does not currently support output into a UNICODE stream.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_unicode defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tprintf`|`printf`|`printf`|`wprintf`|  \n  \n The `format` argument consists of ordinary characters, escape sequences, and (if arguments follow `format`) format specifications. The ordinary characters and escape sequences are copied to `stdout` in order of their appearance. For example, the line:  \n  \n```  \nprintf(\"Line one\\n\\t\\tLine two\\n\");   \n```  \n  \n produces the output:  \n  \n```  \nLine one  \n        Line two  \n```  \n  \n [Format specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md) always begin with a percent sign (`%`) and are read left to right. When `printf` encounters the first format specification (if any), it converts the value of the first argument after `format` and outputs it accordingly. The second format specification causes the second argument to be converted and output, and so on. If there are more arguments than there are format specifications, the extra arguments are ignored. The results are undefined if there are not enough arguments for all the format specifications.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tprintf`|`printf`|`printf`|`wprintf`|  \n|`_tprintf_l`|`_printf_l`|`_printf_l`|`_wprintf_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`printf`, `_printf_l`|\\<stdio.h>|  \n|`wprintf`, `_wprintf_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_printf.c  \n// This program uses the printf and wprintf functions  \n// to produce formatted output.  \n  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char     ch = 'h',   \n            *string = \"computer\";  \n   wchar_t  wch = L'w',   \n            *wstring = L\"Unicode\";  \n   int      count = -9234;  \n   double   fp = 251.7366;  \n  \n   // Display integers  \n   printf( \"Integer formats:\\n\"  \n           \"   Decimal: %d  Justified: %.6d  \"  \n           \"Unsigned: %u\\n\",  \n           count, count, count, count );  \n  \n   // Display decimals  \n   printf( \"Decimal %d as:\\n   Hex: %Xh  \"  \n           \"C hex: 0x%x  Octal: %o\\n\",  \n            count, count, count, count );  \n  \n   // Display in different radixes  \n   printf( \"Digits 10 equal:\\n   Hex: %i  \"  \n           \"Octal: %i  Decimal: %i\\n\",  \n            0x10, 010, 10 );  \n  \n   // Display characters  \n   printf(\"Characters in field (1):\\n\"  \n          \"%10c%5hc%5C%5lc\\n\",  \n          ch, ch, wch, wch);  \n   wprintf(L\"Characters in field (2):\\n\"  \n           L\"%10C%5hc%5c%5lc\\n\",  \n           ch, ch, wch, wch);  \n  \n   // Display strings  \n   printf(\"Strings in field (1):\\n%25s\\n\"  \n          \"%25.4hs\\n   %S%25.3ls\\n\",  \n          string, string, wstring, wstring);  \n   wprintf(L\"Strings in field (2):\\n%25S\\n\"  \n           L\"%25.4hs\\n   %s%25.3ls\\n\",  \n           string, string, wstring, wstring);  \n  \n   // Display real numbers  \n   printf(\"Real numbers:\\n   %f %.2f %e %E\\n\",  \n          fp, fp, fp, fp );  \n  \n   // Display pointer  \n   printf( \"\\nAddress as:   %p\\n\", &count);  \n}  \n```  \n  \n## Sample Output  \n  \n```  \nInteger formats:  \n   Decimal: -9234  Justified: -009234  Unsigned: 4294958062  \nDecimal -9234 as:  \n   Hex: FFFFDBEEh  C hex: 0xffffdbee  Octal: 37777755756  \nDigits 10 equal:  \n   Hex: 16  Octal: 8  Decimal: 10  \nCharacters in field (1):  \n         h    h    w    w  \nCharacters in field (2):  \n         h    h    w    w  \nStrings in field (1):  \n                 computer  \n                     comp  \n   Unicode                      Uni  \nStrings in field (2):  \n                 computer  \n                     comp  \n   Unicode                      Uni  \nReal numbers:  \n   251.736600 251.74 2.517366e+002 2.517366E+002  \n  \nAddress as:   0012FF3C  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Console::Write](https://msdn.microsoft.com/en-us/library/system.console.write.aspx)  \n  \n-   [System::Console::WriteLine](https://msdn.microsoft.com/en-us/library/system.console.writeline.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md)   \n [_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l](../../c-runtime-library/reference/fprintf-p-fprintf-p-l-fwprintf-p-fwprintf-p-l.md)   \n [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)   \n [_set_output_format](../../c-runtime-library/set-output-format.md)"}