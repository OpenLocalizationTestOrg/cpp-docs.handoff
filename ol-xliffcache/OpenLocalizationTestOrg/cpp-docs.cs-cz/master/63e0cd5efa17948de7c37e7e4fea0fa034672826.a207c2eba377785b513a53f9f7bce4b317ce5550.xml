{"nodes":[{"pos":[12,73],"content":"Implementing a Connection Point (Visual C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Implementing a Connection Point (Visual C++) | Microsoft Docs","pos":[0,61]}]},{"content":"Implementing a Connection Point (Visual C++)","pos":[665,709]},{"content":"To implement a connection point using the Implement Connection Point Wizard, you must have created a project as an ATL COM application or as an MFC application that contains ATL support.","pos":[710,896]},{"content":"You can use the <bpt id=\"p1\">[</bpt>ATL Project Wizard<ept id=\"p1\">](../atl/reference/atl-project-wizard.md)</ept> to create an ATL application, or <bpt id=\"p2\">[</bpt>add an ATL object to your MFC application<ept id=\"p2\">](../mfc/reference/adding-atl-support-to-your-mfc-project.md)</ept> to implement ATL support for an MFC application.","pos":[897,1159],"source":" You can use the [ATL Project Wizard](../atl/reference/atl-project-wizard.md) to create an ATL application, or [add an ATL object to your MFC application](../mfc/reference/adding-atl-support-to-your-mfc-project.md) to implement ATL support for an MFC application."},{"pos":[1167,1304],"content":"[!NOTE]\n For information about implementing connection points for an MFC project, see [Connection Points](../mfc/connection-points.md).","leadings":["","> "],"nodes":[{"content":"For information about implementing connection points for an MFC project, see <bpt id=\"p1\">[</bpt>Connection Points<ept id=\"p1\">](../mfc/connection-points.md)</ept>.","pos":[9,135],"source":" For information about implementing connection points for an MFC project, see [Connection Points](../mfc/connection-points.md)."}]},{"content":"Once you create the project, to implement a connection point, you must first add an ATL object.","pos":[1311,1406]},{"content":"See <bpt id=\"p1\">[</bpt>Adding Objects and Controls to an ATL Project<ept id=\"p1\">](../atl/reference/adding-objects-and-controls-to-an-atl-project.md)</ept> for a list of wizards that add objects to your ATL project.","pos":[1407,1585],"source":" See [Adding Objects and Controls to an ATL Project](../atl/reference/adding-objects-and-controls-to-an-atl-project.md) for a list of wizards that add objects to your ATL project."},{"pos":[1593,1732],"content":"[!NOTE]\n The wizard does not support ATL dialogs, XML Web services created with ATL Server, performance objects, or performance counters.","leadings":["","> "],"nodes":[{"content":"The wizard does not support ATL dialogs, XML Web services created with ATL Server, performance objects, or performance counters.","pos":[9,137]}]},{"content":"A connectable object (that is, a source) can expose a connection point for each of its outgoing interfaces.","pos":[1739,1846]},{"content":"Each outgoing interface can be implemented by a client on an object (that is, a sink).","pos":[1847,1933]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>ATL Connection Points<ept id=\"p1\">](../atl/atl-connection-points.md)</ept>.","pos":[1934,2017],"source":" For more information, see [ATL Connection Points](../atl/atl-connection-points.md)."},{"content":"To implement a connection point","pos":[2027,2058]},{"content":"In Class View, right-click the class name for your ATL object.","pos":[2068,2130]},{"pos":[2140,2314],"content":"Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> from the shortcut menu, and then click <bpt id=\"p2\">**</bpt>Add Connection Point<ept id=\"p2\">**</ept> to display the <bpt id=\"p3\">[</bpt>Implement Connection Point Wizard<ept id=\"p3\">](../ide/implement-connection-point-wizard.md)</ept>.","source":"Click **Add** from the shortcut menu, and then click **Add Connection Point** to display the [Implement Connection Point Wizard](../ide/implement-connection-point-wizard.md)."},{"pos":[2324,2433],"content":"Select the connection point interfaces to implement from the appropriate type libraries and click <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept>.","source":"Select the connection point interfaces to implement from the appropriate type libraries and click **Finish**."},{"content":"In Class View, examine the proxy classes created for each connection point.","pos":[2443,2518]},{"content":"The classes appear as CProxy<bpt id=\"p1\">*</bpt>InterfaceName<ept id=\"p1\">*</ept><ph id=\"ph1\">\\&lt;</ph>T&gt; and are derived from <bpt id=\"p2\">[</bpt>IConnectionPointImpl<ept id=\"p2\">](../atl/reference/iconnectionpointimpl-class.md)</ept>.","pos":[2519,2659],"source":" The classes appear as CProxy*InterfaceName*\\<T> and are derived from [IConnectionPointImpl](../atl/reference/iconnectionpointimpl-class.md)."},{"content":"Double-click the connection point class to display the definition of the connection point's class.","pos":[2669,2767]},{"content":"If you implement a connection point for your own project's interface, the following definition appears","pos":[2781,2883]},{"content":"If you implement a local interface, methods and properties appear in the class body.","pos":[3106,3190]},{"pos":[3204,3337],"content":"If you implement a connection point for another interface, the definition includes the interface's methods, each preceded by <ph id=\"ph1\">`Fire_`</ph>.","source":"If you implement a connection point for another interface, the definition includes the interface's methods, each preceded by `Fire_`."},{"content":"See Also","pos":[3346,3354]},{"content":"Adding Functionality with Code Wizards","pos":[3359,3397]},{"content":"Adding Connection Points to an Object","pos":[3458,3495]}],"content":"---\ntitle: \"Implementing a Connection Point (Visual C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Implement Connection Point Wizard [C++]\"\n  - \"connection points [C++], implementing\"\nms.assetid: 5b37e4f9-73c9-4bef-b26d-365bc0662260\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Implementing a Connection Point (Visual C++)\nTo implement a connection point using the Implement Connection Point Wizard, you must have created a project as an ATL COM application or as an MFC application that contains ATL support. You can use the [ATL Project Wizard](../atl/reference/atl-project-wizard.md) to create an ATL application, or [add an ATL object to your MFC application](../mfc/reference/adding-atl-support-to-your-mfc-project.md) to implement ATL support for an MFC application.  \n  \n> [!NOTE]\n>  For information about implementing connection points for an MFC project, see [Connection Points](../mfc/connection-points.md).  \n  \n Once you create the project, to implement a connection point, you must first add an ATL object. See [Adding Objects and Controls to an ATL Project](../atl/reference/adding-objects-and-controls-to-an-atl-project.md) for a list of wizards that add objects to your ATL project.  \n  \n> [!NOTE]\n>  The wizard does not support ATL dialogs, XML Web services created with ATL Server, performance objects, or performance counters.  \n  \n A connectable object (that is, a source) can expose a connection point for each of its outgoing interfaces. Each outgoing interface can be implemented by a client on an object (that is, a sink). For more information, see [ATL Connection Points](../atl/atl-connection-points.md).  \n  \n### To implement a connection point  \n  \n1.  In Class View, right-click the class name for your ATL object.  \n  \n2.  Click **Add** from the shortcut menu, and then click **Add Connection Point** to display the [Implement Connection Point Wizard](../ide/implement-connection-point-wizard.md).  \n  \n3.  Select the connection point interfaces to implement from the appropriate type libraries and click **Finish**.  \n  \n4.  In Class View, examine the proxy classes created for each connection point. The classes appear as CProxy*InterfaceName*\\<T> and are derived from [IConnectionPointImpl](../atl/reference/iconnectionpointimpl-class.md).  \n  \n5.  Double-click the connection point class to display the definition of the connection point's class.  \n  \n    -   If you implement a connection point for your own project's interface, the following definition appears  \n  \n        ```  \n        template< class T >  \n        class CProxyInterfaceName :  \n           public IConnectionPointImpl< T, &IID_InterfaceName >  \n        {  \n        public:  \n        };  \n        ```  \n  \n         If you implement a local interface, methods and properties appear in the class body.  \n  \n    -   If you implement a connection point for another interface, the definition includes the interface's methods, each preceded by `Fire_`.  \n  \n## See Also  \n [Adding Functionality with Code Wizards](../ide/adding-functionality-with-code-wizards-cpp.md)   \n [Adding Connection Points to an Object](../atl/adding-connection-points-to-an-object.md)"}