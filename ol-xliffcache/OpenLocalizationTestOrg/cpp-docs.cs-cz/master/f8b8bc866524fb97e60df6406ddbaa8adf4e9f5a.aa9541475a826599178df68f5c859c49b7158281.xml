{"nodes":[{"pos":[12,53],"content":"&lt;thread&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>thread<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,41],"source":"&lt;thread&gt; operators | Microsoft Docs"}]},{"pos":[256,280],"content":"&lt;thread&gt; operators","linkify":"&lt;thread&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>thread<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,24],"source":"&lt;thread&gt; operators"}]},{"pos":[299,326],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[327,356],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt_)</ept>","source":"[operator&gt;](#operator_gt_)"},{"pos":[357,390],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_gt__eq)</ept>","source":"[operator&gt;=](#operator_gt__eq)"},{"pos":[395,424],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_)</ept>","source":"[operator&lt;](#operator_lt_)"},{"pos":[425,462],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt__lt_)</ept>","source":"[operator&lt;&lt;](#operator_lt__lt_)"},{"pos":[463,496],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_lt__eq)</ept>","source":"[operator&lt;=](#operator_lt__eq)"},{"pos":[501,530],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[541,586],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_gt__eq\"></a>  operator&gt;=","source":"<a name=\"operator_gt__eq\"></a>  operator&gt;="},{"pos":[590,669],"content":"Determines whether one <ph id=\"ph1\">`thread::id`</ph> object is greater than or equal to another.","source":"Determines whether one `thread::id` object is greater than or equal to another."},{"pos":[765,775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`thread::id`</ph> object.","pos":[789,818],"source":" The left `thread::id` object."},{"content":"The right <ph id=\"ph1\">`thread::id`</ph> object.","pos":[836,866],"source":" The right `thread::id` object."},{"pos":[876,888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[919,926],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function does not throw any exceptions.","pos":[930,974]},{"pos":[984,1025],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt_\"></a>  operator&gt;","source":"<a name=\"operator_gt_\"></a>  operator&gt;"},{"pos":[1029,1096],"content":"Determines whether one <ph id=\"ph1\">`thread::id`</ph> object is greater than another.","source":"Determines whether one `thread::id` object is greater than another."},{"pos":[1191,1201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`thread::id`</ph> object.","pos":[1215,1244],"source":" The left `thread::id` object."},{"content":"The right <ph id=\"ph1\">`thread::id`</ph> object.","pos":[1262,1292],"source":" The right `thread::id` object."},{"pos":[1302,1314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1342,1349],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function does not throw any exceptions.","pos":[1353,1397]},{"pos":[1407,1452],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_lt__eq\"></a>  operator&lt;=","source":"<a name=\"operator_lt__eq\"></a>  operator&lt;="},{"pos":[1456,1532],"content":"Determines whether one <ph id=\"ph1\">`thread::id`</ph> object is less than or equal to another.","source":"Determines whether one `thread::id` object is less than or equal to another."},{"pos":[1628,1638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`thread::id`</ph> object.","pos":[1652,1681],"source":" The left `thread::id` object."},{"content":"The right <ph id=\"ph1\">`thread::id`</ph> object.","pos":[1699,1729],"source":" The right `thread::id` object."},{"pos":[1739,1751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1782,1789],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function does not throw any exceptions.","pos":[1793,1837]},{"pos":[1847,1888],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_\"></a>  operator&lt;","source":"<a name=\"operator_lt_\"></a>  operator&lt;"},{"pos":[1892,1956],"content":"Determines whether one <ph id=\"ph1\">`thread::id`</ph> object is less than another.","source":"Determines whether one `thread::id` object is less than another."},{"pos":[2050,2060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`thread::id`</ph> object.","pos":[2074,2103],"source":" The left `thread::id` object."},{"content":"The right <ph id=\"ph1\">`thread::id`</ph> object.","pos":[2121,2151],"source":" The right `thread::id` object."},{"pos":[2161,2173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2177,2253],"content":"<ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`Left`</ph> precedes <ph id=\"ph3\">`Right`</ph> in the total ordering; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if `Left` precedes `Right` in the total ordering; otherwise, `false`."},{"pos":[2263,2270],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The operator defines a total ordering on all <ph id=\"ph1\">`thread::id`</ph> objects.","pos":[2274,2340],"source":"The operator defines a total ordering on all `thread::id` objects."},{"content":"These objects can be used as keys in associative containers.","pos":[2341,2401]},{"content":"This function does not throw any exceptions.","pos":[2408,2452]},{"pos":[2462,2501],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"pos":[2505,2554],"content":"Compares two <ph id=\"ph1\">`thread::id`</ph> objects for inequality.","source":"Compares two `thread::id` objects for inequality."},{"pos":[2650,2660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`thread::id`</ph> object.","pos":[2674,2703],"source":" The left `thread::id` object."},{"content":"The right <ph id=\"ph1\">`thread::id`</ph> object.","pos":[2721,2751],"source":" The right `thread::id` object."},{"pos":[2761,2773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2805,2812],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function does not throw any exceptions.","pos":[2816,2860]},{"pos":[2870,2911],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"pos":[2915,2962],"content":"Compares two <ph id=\"ph1\">`thread::id`</ph> objects for equality.","source":"Compares two `thread::id` objects for equality."},{"pos":[3058,3068],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`thread::id`</ph> object.","pos":[3082,3111],"source":" The left `thread::id` object."},{"content":"The right <ph id=\"ph1\">`thread::id`</ph> object.","pos":[3129,3159],"source":" The right `thread::id` object."},{"pos":[3169,3181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3185,3324],"content":"<ph id=\"ph1\">`true`</ph> if the two objects represent the same thread of execution or if neither object represents a thread of execution; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two objects represent the same thread of execution or if neither object represents a thread of execution; otherwise, `false`."},{"pos":[3334,3341],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function does not throw any exceptions.","pos":[3345,3389]},{"pos":[3399,3448],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt__lt_\"></a>  operator&lt;&lt;","source":"<a name=\"operator_lt__lt_\"></a>  operator&lt;&lt;"},{"pos":[3452,3521],"content":"Inserts a text representation of a <ph id=\"ph1\">`thread::id`</ph> object into a stream.","source":"Inserts a text representation of a `thread::id` object into a stream."},{"pos":[3667,3677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>basic_ostream<ept id=\"p1\">](../standard-library/basic-ostream-class.md)</ept> object.","pos":[3691,3760],"source":" A [basic_ostream](../standard-library/basic-ostream-class.md) object."},{"content":"A <ph id=\"ph1\">`thread::id`</ph> object.","pos":[3775,3797],"source":" A `thread::id` object."},{"pos":[3807,3819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3823,3830],"content":"<ph id=\"ph1\">`Ostr`</ph>.","source":"`Ostr`."},{"pos":[3840,3847],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3851,3890],"content":"This function inserts <ph id=\"ph1\">`Id`</ph> into <ph id=\"ph2\">`Ostr`</ph>.","source":"This function inserts `Id` into `Ostr`."},{"pos":[3897,4004],"content":"If two <ph id=\"ph1\">`thread::id`</ph> objects compare equal, the inserted text representations of those objects are the same.","source":"If two `thread::id` objects compare equal, the inserted text representations of those objects are the same."},{"pos":[4013,4021],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4025,4067],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>thread&gt;<ept id=\"p1\">](../standard-library/thread.md)</ept>","source":"[\\<thread>](../standard-library/thread.md)"}],"content":"---\ntitle: \"&lt;thread&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: e6bb6c0f-64f9-4cb2-9ff2-05b88a6ba7ac\ncaps.latest.revision: 11\nmanager: \"ghogen\"\n---\n# &lt;thread&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;&lt;](#operator_lt__lt_)|[operator&lt;=](#operator_lt__eq)|  \n|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Determines whether one `thread::id` object is greater than or equal to another.  \n  \n```cpp\nbool operator>= (\n    thread::id Left,\n    thread::id Right) noexcept\n```  \n  \n### Parameters  \n `Left`  \n The left `thread::id` object.  \n  \n `Right`  \n The right `thread::id` object.  \n  \n### Return Value  \n `!(Left < Right)`  \n  \n### Remarks  \n This function does not throw any exceptions.  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Determines whether one `thread::id` object is greater than another.  \n  \n```cpp\nbool operator> (\n    thread::id Left,\n    thread::id Right) noexcept\n```  \n  \n### Parameters  \n `Left`  \n The left `thread::id` object.  \n  \n `Right`  \n The right `thread::id` object.  \n  \n### Return Value  \n `Right < Left`  \n  \n### Remarks  \n This function does not throw any exceptions.  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Determines whether one `thread::id` object is less than or equal to another.  \n  \n```cpp\nbool operator<= (\n    thread::id Left,\n    thread::id Right) noexcept\n```  \n  \n### Parameters  \n `Left`  \n The left `thread::id` object.  \n  \n `Right`  \n The right `thread::id` object.  \n  \n### Return Value  \n `!(Right < Left)`  \n  \n### Remarks  \n This function does not throw any exceptions.  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Determines whether one `thread::id` object is less than another.  \n  \n```cpp\nbool operator<(\n    thread::id Left,\n    thread::id Right) noexcept\n```  \n  \n### Parameters  \n `Left`  \n The left `thread::id` object.  \n  \n `Right`  \n The right `thread::id` object.  \n  \n### Return Value  \n `true` if `Left` precedes `Right` in the total ordering; otherwise, `false`.  \n  \n### Remarks  \n The operator defines a total ordering on all `thread::id` objects. These objects can be used as keys in associative containers.  \n  \n This function does not throw any exceptions.  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Compares two `thread::id` objects for inequality.  \n  \n```cpp\nbool operator!= (\n    thread::id Left,\n    thread::id Right) noexcept\n```  \n  \n### Parameters  \n `Left`  \n The left `thread::id` object.  \n  \n `Right`  \n The right `thread::id` object.  \n  \n### Return Value  \n `!(Left == Right)`  \n  \n### Remarks  \n This function does not throw any exceptions.  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Compares two `thread::id` objects for equality.  \n  \n```cpp\nbool operator== (\n    thread::id Left,\n    thread::id Right) noexcept\n```  \n  \n### Parameters  \n `Left`  \n The left `thread::id` object.  \n  \n `Right`  \n The right `thread::id` object.  \n  \n### Return Value  \n `true` if the two objects represent the same thread of execution or if neither object represents a thread of execution; otherwise, `false`.  \n  \n### Remarks  \n This function does not throw any exceptions.  \n  \n##  <a name=\"operator_lt__lt_\"></a>  operator&lt;&lt;  \n Inserts a text representation of a `thread::id` object into a stream.  \n  \n```cpp\ntemplate <class Elem, class Tr>\nbasic_ostream<Elem, Tr>& operator<<(\n    basic_ostream<Elem, Tr>& Ostr, thread::id Id);\n```  \n  \n### Parameters  \n `Ostr`  \n A [basic_ostream](../standard-library/basic-ostream-class.md) object.  \n  \n `Id`  \n A `thread::id` object.  \n  \n### Return Value  \n `Ostr`.  \n  \n### Remarks  \n This function inserts `Id` into `Ostr`.  \n  \n If two `thread::id` objects compare equal, the inserted text representations of those objects are the same.  \n  \n## See Also  \n [\\<thread>](../standard-library/thread.md)\n\n\n\n"}