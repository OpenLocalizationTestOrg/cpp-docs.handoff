{"nodes":[{"pos":[12,57],"content":"IExecutionResource Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IExecutionResource Structure | Microsoft Docs","pos":[0,45]}]},{"pos":[656,684],"content":"IExecutionResource Structure","linkify":"IExecutionResource Structure","nodes":[{"content":"IExecutionResource Structure","pos":[0,28]}]},{"content":"An abstraction for a hardware thread.","pos":[685,722]},{"pos":[731,737],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[786,793],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[803,817],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[824,828]},{"content":"Description","pos":[829,840]},{"pos":[878,958],"content":"<bpt id=\"p1\">[</bpt>IExecutionResource::CurrentSubscriptionLevel Method<ept id=\"p1\">](#currentsubscriptionlevel)</ept>","source":"[IExecutionResource::CurrentSubscriptionLevel Method](#currentsubscriptionlevel)"},{"content":"Returns the number of activated virtual processor roots and subscribed external threads currently associated with the underlying hardware thread this execution resource represents.","pos":[959,1139]},{"pos":[1144,1220],"content":"<bpt id=\"p1\">[</bpt>IExecutionResource::GetExecutionResourceId Method<ept id=\"p1\">](#getexecutionresourceid)</ept>","source":"[IExecutionResource::GetExecutionResourceId Method](#getexecutionresourceid)"},{"content":"Returns a unique identifier for the hardware thread that this execution resource represents.","pos":[1221,1313]},{"pos":[1318,1368],"content":"<bpt id=\"p1\">[</bpt>IExecutionResource::GetNodeId Method<ept id=\"p1\">](#getnodeid)</ept>","source":"[IExecutionResource::GetNodeId Method](#getnodeid)"},{"content":"Returns a unique identifier for the processor node that this execution resource belongs to.","pos":[1369,1460]},{"pos":[1465,1509],"content":"<bpt id=\"p1\">[</bpt>IExecutionResource::Remove Method<ept id=\"p1\">](#remove)</ept>","source":"[IExecutionResource::Remove Method](#remove)"},{"content":"Returns this execution resource to the Resource Manager.","pos":[1510,1566]},{"pos":[1576,1583],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Execution resources can be standalone or associated with virtual processor roots.","pos":[1587,1668]},{"content":"A standalone execution resource is created when a thread in your application creates a thread subscription.","pos":[1669,1776]},{"content":"The methods <bpt id=\"p1\">[</bpt>ISchedulerProxy::SubscribeThread<ept id=\"p1\">](ischedulerproxy-structure.md#subscribecurrentthread)</ept> and <bpt id=\"p2\">[</bpt>ISchedulerProxy::RequestInitialVirtualProcessors<ept id=\"p2\">](ischedulerproxy-structure.md#requestinitialvirtualprocessors)</ept> create thread subscriptions, and return an <ph id=\"ph1\">`IExecutionResource`</ph> interface representing the subscription.","pos":[1777,2098],"source":" The methods [ISchedulerProxy::SubscribeThread](ischedulerproxy-structure.md#subscribecurrentthread) and [ISchedulerProxy::RequestInitialVirtualProcessors](ischedulerproxy-structure.md#requestinitialvirtualprocessors) create thread subscriptions, and return an `IExecutionResource` interface representing the subscription."},{"content":"Creating a thread subscription is a way to inform the Resource Manager that a given thread will participate in the work queued to a scheduler, along with the virtual processor roots Resource Manager assigns to the scheduler.","pos":[2099,2323]},{"content":"The Resource Manager uses the information to avoid oversubscribing hardware threads where it can.","pos":[2324,2421]},{"pos":[2430,2451],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2484,2496],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2500,2522],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrtrm.h","source":"**Header:** concrtrm.h"},{"pos":[2529,2555],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2565,2657],"content":"<bpt id=\"p1\">&lt;a name=\"currentsubscriptionlevel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IExecutionResource::CurrentSubscriptionLevel Method","linkify":"<a name=\"currentsubscriptionlevel\"></a>  IExecutionResource::CurrentSubscriptionLevel Method","source":"<a name=\"currentsubscriptionlevel\"></a>  IExecutionResource::CurrentSubscriptionLevel Method"},{"content":"Returns the number of activated virtual processor roots and subscribed external threads currently associated with the underlying hardware thread this execution resource represents.","pos":[2661,2841]},{"pos":[2923,2935],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current subscription level.","pos":[2939,2970]},{"pos":[2980,2987],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The subscription level tells you how many running threads are associated with the hardware thread.","pos":[2991,3089]},{"content":"This only includes threads the Resource Manager is aware of in the form of subscribed threads, and virtual processor roots that are actively executing thread proxies.","pos":[3090,3256]},{"content":"Calling the method <bpt id=\"p1\">[</bpt>ISchedulerProxy::SubscribeCurrentThread<ept id=\"p1\">](ischedulerproxy-structure.md#subscribecurrentthread)</ept>, or the method <bpt id=\"p2\">[</bpt>ISchedulerProxy::RequestInitialVirtualProcessors<ept id=\"p2\">](ischedulerproxy-structure.md#requestinitialvirtualprocessors)</ept> with the parameter <ph id=\"ph1\">`doSubscribeCurrentThread`</ph> set to the value <ph id=\"ph2\">`true`</ph> increments the subscription level of a hardware thread by one.","pos":[3263,3637],"source":"Calling the method [ISchedulerProxy::SubscribeCurrentThread](ischedulerproxy-structure.md#subscribecurrentthread), or the method [ISchedulerProxy::RequestInitialVirtualProcessors](ischedulerproxy-structure.md#requestinitialvirtualprocessors) with the parameter `doSubscribeCurrentThread` set to the value `true` increments the subscription level of a hardware thread by one."},{"content":"They also return an <ph id=\"ph1\">`IExecutionResource`</ph> interface representing the subscription.","pos":[3638,3719],"source":" They also return an `IExecutionResource` interface representing the subscription."},{"content":"A corresponding call to the <bpt id=\"p1\">[</bpt>IExecutionResource::Remove<ept id=\"p1\">](#remove)</ept> decrements the hardware thread's subscription level by one.","pos":[3720,3845],"source":" A corresponding call to the [IExecutionResource::Remove](#remove) decrements the hardware thread's subscription level by one."},{"content":"The act of activating a virtual processor root using the method <bpt id=\"p1\">[</bpt>IVirtualProcessorRoot::Activate<ept id=\"p1\">](ivirtualprocessorroot-structure.md#activate)</ept> increments the subscription level of a hardware thread by one.","pos":[3852,4057],"source":"The act of activating a virtual processor root using the method [IVirtualProcessorRoot::Activate](ivirtualprocessorroot-structure.md#activate) increments the subscription level of a hardware thread by one."},{"content":"The methods <bpt id=\"p1\">[</bpt>IVirtualProcessorRoot::Deactivate<ept id=\"p1\">](ivirtualprocessorroot-structure.md#deactivate)</ept>, or <bpt id=\"p2\">[</bpt>IExecutionResource::Remove<ept id=\"p2\">](#remove)</ept> decrement the subscription level by one when invoked on an activated virtual processor root.","pos":[4058,4287],"source":" The methods [IVirtualProcessorRoot::Deactivate](ivirtualprocessorroot-structure.md#deactivate), or [IExecutionResource::Remove](#remove) decrement the subscription level by one when invoked on an activated virtual processor root."},{"content":"The Resource Manager uses subscription level information as one of the ways in which to determine when to move resources between schedulers.","pos":[4294,4434]},{"pos":[4444,4532],"content":"<bpt id=\"p1\">&lt;a name=\"getexecutionresourceid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IExecutionResource::GetExecutionResourceId Method","linkify":"<a name=\"getexecutionresourceid\"></a>  IExecutionResource::GetExecutionResourceId Method","source":"<a name=\"getexecutionresourceid\"></a>  IExecutionResource::GetExecutionResourceId Method"},{"content":"Returns a unique identifier for the hardware thread that this execution resource represents.","pos":[4536,4628]},{"pos":[4708,4720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A unique identifier for the hardware thread underlying this execution resource.","pos":[4724,4803]},{"pos":[4813,4820],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each hardware thread is assigned a unique identifier by the Concurrency Runtime.","pos":[4824,4904]},{"content":"If multiple execution resources are associated hardware thread, they will all have the same execution resource identifier.","pos":[4905,5027]},{"pos":[5037,5099],"content":"<bpt id=\"p1\">&lt;a name=\"getnodeid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IExecutionResource::GetNodeId Method","linkify":"<a name=\"getnodeid\"></a>  IExecutionResource::GetNodeId Method","source":"<a name=\"getnodeid\"></a>  IExecutionResource::GetNodeId Method"},{"content":"Returns a unique identifier for the processor node that this execution resource belongs to.","pos":[5103,5194]},{"pos":[5261,5273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A unique identifier for a processor node.","pos":[5277,5318]},{"pos":[5328,5335],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Concurrency Runtime represents hardware threads on the system in groups of processor nodes.","pos":[5339,5434]},{"content":"Nodes are usually derived from the hardware topology of the system.","pos":[5435,5502]},{"content":"For example, all processors on a specific socket or a specific NUMA node may belong to the same processor node.","pos":[5503,5614]},{"content":"The Resource Manager assigns unique identifiers to these nodes starting with <ph id=\"ph1\">`0`</ph> up to and including <ph id=\"ph2\">`nodeCount - 1`</ph>, where <ph id=\"ph3\">`nodeCount`</ph> represents the total number of processor nodes on the system.","pos":[5615,5812],"source":" The Resource Manager assigns unique identifiers to these nodes starting with `0` up to and including `nodeCount - 1`, where `nodeCount` represents the total number of processor nodes on the system."},{"pos":[5819,5932],"content":"The count of nodes can be obtained from the function <bpt id=\"p1\">[</bpt>GetProcessorNodeCount<ept id=\"p1\">](concurrency-namespace-functions.md)</ept>.","source":"The count of nodes can be obtained from the function [GetProcessorNodeCount](concurrency-namespace-functions.md)."},{"pos":[5942,5998],"content":"<bpt id=\"p1\">&lt;a name=\"remove\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IExecutionResource::Remove Method","linkify":"<a name=\"remove\"></a>  IExecutionResource::Remove Method","source":"<a name=\"remove\"></a>  IExecutionResource::Remove Method"},{"content":"Returns this execution resource to the Resource Manager.","pos":[6002,6058]},{"pos":[6138,6148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An interface to the scheduler making the request to remove this execution resource.","pos":[6168,6251]},{"pos":[6261,6268],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this method to return standalone execution resources as well as execution resources associated with virtual processor roots to the Resource Manager.","pos":[6272,6424]},{"content":"If this is a standalone execution resource you received from either of the methods <bpt id=\"p1\">[</bpt>ISchedulerProxy::SubscribeCurrentThread<ept id=\"p1\">](ischedulerproxy-structure.md#subscribecurrentthread)</ept> or <bpt id=\"p2\">[</bpt>ISchedulerProxy::RequestInitialVirtualProcessors<ept id=\"p2\">](ischedulerproxy-structure.md#requestinitialvirtualprocessors)</ept>, calling the method <ph id=\"ph1\">`Remove`</ph> will end the thread subscription that the resource was created to represent.","pos":[6431,6830],"source":"If this is a standalone execution resource you received from either of the methods [ISchedulerProxy::SubscribeCurrentThread](ischedulerproxy-structure.md#subscribecurrentthread) or [ISchedulerProxy::RequestInitialVirtualProcessors](ischedulerproxy-structure.md#requestinitialvirtualprocessors), calling the method `Remove` will end the thread subscription that the resource was created to represent."},{"content":"You are required to end all thread subscriptions before shutting down a scheduler proxy, and must call <ph id=\"ph1\">`Remove`</ph> from the thread that created the subscription.","pos":[6831,6989],"source":" You are required to end all thread subscriptions before shutting down a scheduler proxy, and must call `Remove` from the thread that created the subscription."},{"content":"Virtual processor roots, too, can be returned to the Resource Manager by invoking the <ph id=\"ph1\">`Remove`</ph> method, because the interface <ph id=\"ph2\">`IVirtualProcessorRoot`</ph> inherits from the <ph id=\"ph3\">`IExecutionResource`</ph> interface.","pos":[6996,7194],"source":"Virtual processor roots, too, can be returned to the Resource Manager by invoking the `Remove` method, because the interface `IVirtualProcessorRoot` inherits from the `IExecutionResource` interface."},{"content":"You may need to return a virtual processor root either in response to a call to the <bpt id=\"p1\">[</bpt>IScheduler::RemoveVirtualProcessors<ept id=\"p1\">](ischeduler-structure.md#removevirtualprocessors)</ept> method, or when you are done with an oversubscribed virtual processor root you obtained from the <bpt id=\"p2\">[</bpt>ISchedulerProxy::CreateOversubscriber<ept id=\"p2\">](ischedulerproxy-structure.md#createoversubscriber)</ept> method.","pos":[7195,7561],"source":" You may need to return a virtual processor root either in response to a call to the [IScheduler::RemoveVirtualProcessors](ischeduler-structure.md#removevirtualprocessors) method, or when you are done with an oversubscribed virtual processor root you obtained from the [ISchedulerProxy::CreateOversubscriber](ischedulerproxy-structure.md#createoversubscriber) method."},{"content":"For virtual processor roots, there are no restrictions on which thread can invoke the <ph id=\"ph1\">`Remove`</ph> method.","pos":[7562,7664],"source":" For virtual processor roots, there are no restrictions on which thread can invoke the `Remove` method."},{"pos":[7671,7747],"content":"<ph id=\"ph1\">`invalid_argument`</ph> is thrown if the parameter <ph id=\"ph2\">`pScheduler`</ph> is set to <ph id=\"ph3\">`NULL`</ph>.","source":"`invalid_argument` is thrown if the parameter `pScheduler` is set to `NULL`."},{"pos":[7754,8022],"content":"<ph id=\"ph1\">`invalid_operation`</ph> is thrown if the parameter <ph id=\"ph2\">`pScheduler`</ph> is different from the scheduler that this execution resource was created for, or, with a standalone execution resource, if the current thread is different from the thread that created the thread subscription.","source":"`invalid_operation` is thrown if the parameter `pScheduler` is different from the scheduler that this execution resource was created for, or, with a standalone execution resource, if the current thread is different from the thread that created the thread subscription."},{"pos":[8031,8039],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[8043,8093],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IVirtualProcessorRoot Structure<ept id=\"p1\">](ivirtualprocessorroot-structure.md)</ept>","pos":[8096,8166],"source":" [IVirtualProcessorRoot Structure](ivirtualprocessorroot-structure.md)"}],"content":"---\ntitle: \"IExecutionResource Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrtrm/concurrency::IExecutionResource\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"IExecutionResource structure\"\nms.assetid: 6b27042b-b98c-4f7f-b831-566950af84cd\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IExecutionResource Structure\nAn abstraction for a hardware thread.  \n  \n## Syntax  \n  \n```\nstruct IExecutionResource;\n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IExecutionResource::CurrentSubscriptionLevel Method](#currentsubscriptionlevel)|Returns the number of activated virtual processor roots and subscribed external threads currently associated with the underlying hardware thread this execution resource represents.|  \n|[IExecutionResource::GetExecutionResourceId Method](#getexecutionresourceid)|Returns a unique identifier for the hardware thread that this execution resource represents.|  \n|[IExecutionResource::GetNodeId Method](#getnodeid)|Returns a unique identifier for the processor node that this execution resource belongs to.|  \n|[IExecutionResource::Remove Method](#remove)|Returns this execution resource to the Resource Manager.|  \n  \n## Remarks  \n Execution resources can be standalone or associated with virtual processor roots. A standalone execution resource is created when a thread in your application creates a thread subscription. The methods [ISchedulerProxy::SubscribeThread](ischedulerproxy-structure.md#subscribecurrentthread) and [ISchedulerProxy::RequestInitialVirtualProcessors](ischedulerproxy-structure.md#requestinitialvirtualprocessors) create thread subscriptions, and return an `IExecutionResource` interface representing the subscription. Creating a thread subscription is a way to inform the Resource Manager that a given thread will participate in the work queued to a scheduler, along with the virtual processor roots Resource Manager assigns to the scheduler. The Resource Manager uses the information to avoid oversubscribing hardware threads where it can.  \n  \n## Inheritance Hierarchy  \n `IExecutionResource`  \n  \n## Requirements  \n **Header:** concrtrm.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"currentsubscriptionlevel\"></a>  IExecutionResource::CurrentSubscriptionLevel Method  \n Returns the number of activated virtual processor roots and subscribed external threads currently associated with the underlying hardware thread this execution resource represents.  \n  \n```\nvirtual unsigned int CurrentSubscriptionLevel() const = 0;\n```  \n  \n### Return Value  \n The current subscription level.  \n  \n### Remarks  \n The subscription level tells you how many running threads are associated with the hardware thread. This only includes threads the Resource Manager is aware of in the form of subscribed threads, and virtual processor roots that are actively executing thread proxies.  \n  \n Calling the method [ISchedulerProxy::SubscribeCurrentThread](ischedulerproxy-structure.md#subscribecurrentthread), or the method [ISchedulerProxy::RequestInitialVirtualProcessors](ischedulerproxy-structure.md#requestinitialvirtualprocessors) with the parameter `doSubscribeCurrentThread` set to the value `true` increments the subscription level of a hardware thread by one. They also return an `IExecutionResource` interface representing the subscription. A corresponding call to the [IExecutionResource::Remove](#remove) decrements the hardware thread's subscription level by one.  \n  \n The act of activating a virtual processor root using the method [IVirtualProcessorRoot::Activate](ivirtualprocessorroot-structure.md#activate) increments the subscription level of a hardware thread by one. The methods [IVirtualProcessorRoot::Deactivate](ivirtualprocessorroot-structure.md#deactivate), or [IExecutionResource::Remove](#remove) decrement the subscription level by one when invoked on an activated virtual processor root.  \n  \n The Resource Manager uses subscription level information as one of the ways in which to determine when to move resources between schedulers.  \n  \n##  <a name=\"getexecutionresourceid\"></a>  IExecutionResource::GetExecutionResourceId Method  \n Returns a unique identifier for the hardware thread that this execution resource represents.  \n  \n```\nvirtual unsigned int GetExecutionResourceId() const = 0;\n```  \n  \n### Return Value  \n A unique identifier for the hardware thread underlying this execution resource.  \n  \n### Remarks  \n Each hardware thread is assigned a unique identifier by the Concurrency Runtime. If multiple execution resources are associated hardware thread, they will all have the same execution resource identifier.  \n  \n##  <a name=\"getnodeid\"></a>  IExecutionResource::GetNodeId Method  \n Returns a unique identifier for the processor node that this execution resource belongs to.  \n  \n```\nvirtual unsigned int GetNodeId() const = 0;\n```  \n  \n### Return Value  \n A unique identifier for a processor node.  \n  \n### Remarks  \n The Concurrency Runtime represents hardware threads on the system in groups of processor nodes. Nodes are usually derived from the hardware topology of the system. For example, all processors on a specific socket or a specific NUMA node may belong to the same processor node. The Resource Manager assigns unique identifiers to these nodes starting with `0` up to and including `nodeCount - 1`, where `nodeCount` represents the total number of processor nodes on the system.  \n  \n The count of nodes can be obtained from the function [GetProcessorNodeCount](concurrency-namespace-functions.md).  \n  \n##  <a name=\"remove\"></a>  IExecutionResource::Remove Method  \n Returns this execution resource to the Resource Manager.  \n  \n```\nvirtual void Remove(_Inout_ IScheduler* pScheduler) = 0;\n```  \n  \n### Parameters  \n `pScheduler`  \n An interface to the scheduler making the request to remove this execution resource.  \n  \n### Remarks  \n Use this method to return standalone execution resources as well as execution resources associated with virtual processor roots to the Resource Manager.  \n  \n If this is a standalone execution resource you received from either of the methods [ISchedulerProxy::SubscribeCurrentThread](ischedulerproxy-structure.md#subscribecurrentthread) or [ISchedulerProxy::RequestInitialVirtualProcessors](ischedulerproxy-structure.md#requestinitialvirtualprocessors), calling the method `Remove` will end the thread subscription that the resource was created to represent. You are required to end all thread subscriptions before shutting down a scheduler proxy, and must call `Remove` from the thread that created the subscription.  \n  \n Virtual processor roots, too, can be returned to the Resource Manager by invoking the `Remove` method, because the interface `IVirtualProcessorRoot` inherits from the `IExecutionResource` interface. You may need to return a virtual processor root either in response to a call to the [IScheduler::RemoveVirtualProcessors](ischeduler-structure.md#removevirtualprocessors) method, or when you are done with an oversubscribed virtual processor root you obtained from the [ISchedulerProxy::CreateOversubscriber](ischedulerproxy-structure.md#createoversubscriber) method. For virtual processor roots, there are no restrictions on which thread can invoke the `Remove` method.  \n  \n `invalid_argument` is thrown if the parameter `pScheduler` is set to `NULL`.  \n  \n `invalid_operation` is thrown if the parameter `pScheduler` is different from the scheduler that this execution resource was created for, or, with a standalone execution resource, if the current thread is different from the thread that created the thread subscription.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [IVirtualProcessorRoot Structure](ivirtualprocessorroot-structure.md)\n"}