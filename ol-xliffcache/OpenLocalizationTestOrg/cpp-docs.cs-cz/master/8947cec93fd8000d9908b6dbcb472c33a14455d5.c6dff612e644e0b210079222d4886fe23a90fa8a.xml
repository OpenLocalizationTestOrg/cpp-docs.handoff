{"nodes":[{"pos":[12,44],"content":"CWinAppEx Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CWinAppEx Class | Microsoft Docs","pos":[0,32]}]},{"content":"CWinAppEx Class","pos":[601,616]},{"pos":[629,816],"content":"handles the application state, saves the state to the registry, loads the state from the registry, initializes application managers, and provides links to those same application managers."},{"content":"Syntax","pos":[825,831]},{"content":"Members","pos":[890,897]},{"content":"Public Constructors","pos":[907,926]},{"content":"Name","pos":[933,937]},{"content":"Description","pos":[938,949]},{"content":"CWinAppEx::CWinAppEx","pos":[988,1008]},{"pos":[1033,1065],"content":"Constructs a <ph id=\"ph1\">`CWinAppEx`</ph> object.","source":"Constructs a `CWinAppEx` object."},{"content":"Public Methods","pos":[1076,1090]},{"content":"Name","pos":[1097,1101]},{"content":"Description","pos":[1102,1113]},{"content":"CWinAppEx::CleanState","pos":[1152,1173]},{"content":"Removes information about the application from the Windows registry.","pos":[1199,1267]},{"content":"CWinAppEx::EnableLoadWindowPlacement","pos":[1273,1309]},{"content":"Specifies whether the application will load the initial size and location of the main frame window from the registry.","pos":[1350,1467]},{"content":"CWinAppEx::EnableTearOffMenus","pos":[1473,1502]},{"content":"Enables tear-off menus for the application.","pos":[1536,1579]},{"content":"CWinAppEx::EnableUserTools","pos":[1585,1611]},{"content":"Enables the user to create custom menu commands in the application.","pos":[1642,1709]},{"content":"CWinAppEx::ExitInstance","pos":[1715,1738]},{"content":"Called by the framework from within the <ph id=\"ph1\">`Run`</ph> member function to exit this instance of the application.","pos":[1766,1869],"source":"Called by the framework from within the `Run` member function to exit this instance of the application."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWinApp::ExitInstance<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md#cwinapp__exitinstance)</ept>.)","pos":[1870,1966],"source":" (Overrides [CWinApp::ExitInstance](../../mfc/reference/cwinapp-class.md#cwinapp__exitinstance).)"},{"content":"CWinAppEx::GetBinary","pos":[1972,1992]},{"content":"Reads binary data that is associated with the specified registry value.","pos":[2017,2088]},{"content":"CWinAppEx::GetContextMenuManager","pos":[2094,2126]},{"pos":[2163,2274],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CContextMenuManager<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept> object.","source":"Returns a pointer to the global [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) object."},{"content":"CWinAppEx::GetDataVersion","pos":[2280,2305]},{"content":"CWinAppEx::GetDataVersionMajor","pos":[2341,2371]},{"content":"Returns the major version of the application saved in the Windows registry.","pos":[2406,2481]},{"content":"CWinAppEx::GetDataVersionMinor","pos":[2487,2517]},{"content":"Returns the minor version of the application saved in the Windows registry.","pos":[2552,2627]},{"content":"CWinAppEx::GetInt","pos":[2633,2650]},{"content":"Reads numeric data that is associated with the specified value from the registry.","pos":[2672,2753]},{"content":"CWinAppEx::GetKeyboardManager","pos":[2759,2788]},{"pos":[2822,2927],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CKeyboardManager<ept id=\"p1\">](../../mfc/reference/ckeyboardmanager-class.md)</ept> object.","source":"Returns a pointer to the global [CKeyboardManager](../../mfc/reference/ckeyboardmanager-class.md) object."},{"content":"CWinAppEx::GetMouseManager","pos":[2933,2959]},{"pos":[2990,3089],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CMouseManager<ept id=\"p1\">](../../mfc/reference/cmousemanager-class.md)</ept> object.","source":"Returns a pointer to the global [CMouseManager](../../mfc/reference/cmousemanager-class.md) object."},{"content":"CWinAppEx::GetObject","pos":[3095,3115]},{"pos":[3140,3231],"content":"Reads <ph id=\"ph1\">`CObject`</ph>-derived data that is associated with the specified value from the registry.","source":"Reads `CObject`-derived data that is associated with the specified value from the registry."},{"content":"CWinAppEx::GetRegSectionPath","pos":[3237,3265]},{"content":"Returns a string that is the path of a registry key.","pos":[3298,3350]},{"content":"This path concatenates the supplied relative path with the application path.","pos":[3351,3427]},{"content":"CWinAppEx::GetRegistryBase","pos":[3433,3459]},{"content":"Returns the registry path for the application.","pos":[3490,3536]},{"content":"CWinAppEx::GetSectionBinary","pos":[3542,3569]},{"content":"Reads binary data that is associated with the specified key and value from the registry.","pos":[3601,3689]},{"content":"CWinAppEx::GetSectionInt","pos":[3695,3719]},{"content":"Reads numeric data from the registry associated with the specified key and value.","pos":[3748,3829]},{"content":"CWinAppEx::GetSectionObject","pos":[3835,3862]},{"pos":[3894,3985],"content":"Reads <ph id=\"ph1\">`CObject`</ph> data that is associated with the specified key and value from the registry.","source":"Reads `CObject` data that is associated with the specified key and value from the registry."},{"content":"CWinAppEx::GetSectionString","pos":[3991,4018]},{"content":"Reads string data that is associated with the specified key and value from the registry.","pos":[4050,4138]},{"content":"CWinAppEx::GetShellManager","pos":[4144,4170]},{"pos":[4201,4300],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CShellManager<ept id=\"p1\">](../../mfc/reference/cshellmanager-class.md)</ept> object.","source":"Returns a pointer to the global [CShellManager](../../mfc/reference/cshellmanager-class.md) object."},{"content":"CWinAppEx::GetString","pos":[4306,4326]},{"content":"Reads string data that is associated with the specified value from the registry.","pos":[4351,4431]},{"content":"CWinAppEx::GetTooltipManager","pos":[4437,4465]},{"pos":[4498,4601],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CTooltipManager<ept id=\"p1\">](../../mfc/reference/ctooltipmanager-class.md)</ept> object.","source":"Returns a pointer to the global [CTooltipManager](../../mfc/reference/ctooltipmanager-class.md) object."},{"content":"CWinAppEx::GetUserToolsManager","pos":[4607,4637]},{"pos":[4672,4779],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CUserToolsManager<ept id=\"p1\">](../../mfc/reference/cusertoolsmanager-class.md)</ept> object.","source":"Returns a pointer to the global [CUserToolsManager](../../mfc/reference/cusertoolsmanager-class.md) object."},{"content":"CWinAppEx::InitContextMenuManager","pos":[4785,4818]},{"pos":[4856,4901],"content":"Initializes the <ph id=\"ph1\">`CContextMenuManager`</ph> object.","source":"Initializes the `CContextMenuManager` object."},{"content":"CWinAppEx::InitKeyboardManager","pos":[4907,4937]},{"pos":[4972,5014],"content":"Initializes the <ph id=\"ph1\">`CKeyboardManager`</ph> object.","source":"Initializes the `CKeyboardManager` object."},{"content":"CWinAppEx::InitMouseManager","pos":[5020,5047]},{"pos":[5079,5118],"content":"Initializes the <ph id=\"ph1\">`CMouseManager`</ph> object.","source":"Initializes the `CMouseManager` object."},{"content":"CWinAppEx::InitShellManager","pos":[5124,5151]},{"pos":[5183,5220],"content":"Initializes the <ph id=\"ph1\">`CShellManager`</ph> class","source":"Initializes the `CShellManager` class"},{"content":"CWinAppEx::InitTooltipManager","pos":[5226,5255]},{"pos":[5289,5329],"content":"Initializes the <ph id=\"ph1\">`CTooltipManager`</ph> class.","source":"Initializes the `CTooltipManager` class."},{"content":"CWinAppEx::IsResourceSmartUpdate","pos":[5335,5367]},{"content":"CWinAppEx::IsStateExists","pos":[5410,5434]},{"content":"Indicates whether the specified key is in the registry.","pos":[5463,5518]},{"content":"CWinAppEx::LoadState","pos":[5524,5544]},{"content":"Loads the application state from the registry.","pos":[5569,5615]},{"content":"CWinAppEx::OnAppContextHelp","pos":[5621,5648]},{"pos":[5680,5777],"content":"Called by the framework when the user requests context help for the <bpt id=\"p1\">**</bpt>Customization<ept id=\"p1\">**</ept> dialog box.","source":"Called by the framework when the user requests context help for the **Customization** dialog box."},{"content":"CWinAppEx::OnViewDoubleClick","pos":[5783,5811]},{"content":"Calls the user-defined command when the user double-clicks anywhere in the application.","pos":[5844,5931]},{"content":"CWinAppEx::OnWorkspaceIdle","pos":[5937,5963]},{"content":"CWinAppEx::SaveState","pos":[6000,6020]},{"content":"Writes the state of the application framework to the Windows registry.","pos":[6045,6115]},{"content":"CWinAppEx::SetRegistryBase","pos":[6121,6147]},{"content":"Sets the path of the default registry key.","pos":[6178,6220]},{"content":"This key will serve as a root for all subsequent registry calls.","pos":[6221,6285]},{"content":"CWinAppEx::ShowPopupMenu","pos":[6291,6315]},{"content":"Displays a popup menu.","pos":[6344,6366]},{"content":"CWinAppEx::WriteBinary","pos":[6372,6394]},{"content":"Writes the binary data to the specified registry value.","pos":[6421,6476]},{"content":"CWinAppEx::WriteInt","pos":[6482,6501]},{"content":"Writes the numeric data to the specified registry value.","pos":[6525,6581]},{"content":"CWinAppEx::WriteObject","pos":[6587,6609]},{"pos":[6636,6759],"content":"Writes data that is derived from the <bpt id=\"p1\">[</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept> to the specified registry value.","source":"Writes data that is derived from the [CObject Class](../../mfc/reference/cobject-class.md) to the specified registry value."},{"content":"CWinAppEx::WriteSectionBinary","pos":[6765,6794]},{"content":"Writes the binary data to a value of the specified registry key.","pos":[6828,6892]},{"content":"CWinAppEx::WriteSectionInt","pos":[6898,6924]},{"content":"Writes the numeric data to a value of the specified registry key.","pos":[6955,7020]},{"content":"CWinAppEx::WriteSectionObject","pos":[7026,7055]},{"pos":[7089,7175],"content":"Writes data derived from the <ph id=\"ph1\">`CObject`</ph> class to a value of the specified registry key.","source":"Writes data derived from the `CObject` class to a value of the specified registry key."},{"content":"CWinAppEx::WriteSectionString","pos":[7181,7210]},{"content":"Writes the string data to a value of the specified registry key.","pos":[7244,7308]},{"content":"CWinAppEx::WriteString","pos":[7314,7336]},{"content":"Writes the string data to the specified registry value.","pos":[7363,7418]},{"content":"Protected Methods","pos":[7429,7446]},{"content":"Name","pos":[7453,7457]},{"content":"Description","pos":[7458,7469]},{"content":"CWinAppEx::LoadCustomState","pos":[7508,7534]},{"content":"Called by the framework when the application state has been loaded.","pos":[7565,7632]},{"content":"CWinAppEx::LoadWindowPlacement","pos":[7638,7668]},{"content":"Called by the framework when it loads the size and location of your application from the registry.","pos":[7703,7801]},{"content":"The loaded data includes the size and location of the main frame at the time your application last closed.","pos":[7802,7908]},{"content":"CWinAppEx::OnClosingMainFrame","pos":[7914,7943]},{"pos":[7977,8051],"content":"Called by the framework when a main frame window is processing <ph id=\"ph1\">`WM_CLOSE`</ph>.","source":"Called by the framework when a main frame window is processing `WM_CLOSE`."},{"content":"CWinAppEx::PreLoadState","pos":[8057,8080]},{"content":"Called by the framework immediately before the application state is loaded.","pos":[8108,8183]},{"content":"CWinAppEx::PreSaveState","pos":[8189,8212]},{"content":"Called by the framework immediately before the application state is saved.","pos":[8240,8314]},{"content":"CWinAppEx::ReloadWindowPlacement","pos":[8320,8352]},{"content":"Reloads the size and location of the supplied window from the registry","pos":[8389,8459]},{"content":"CWinAppEx::SaveCustomState","pos":[8465,8491]},{"content":"Called by the framework after it writes the application state to the registry.","pos":[8522,8600]},{"content":"CWinAppEx::StoreWindowPlacement","pos":[8606,8637]},{"content":"Called by the framework to write the size and location of the main frame to the registry.","pos":[8673,8762]},{"content":"Data Members","pos":[8773,8785]},{"content":"Name","pos":[8792,8796]},{"content":"Description","pos":[8797,8808]},{"content":"CWinAppEx::m_bForceImageReset","pos":[8847,8876]},{"content":"Specifies whether the framework will reset all toolbar images when the frame window that contains the toolbar is loaded.","pos":[8910,9030]},{"content":"Remarks","pos":[9040,9047]},{"content":"Much of the functionality provided by the MFC framework depends on the <ph id=\"ph1\">`CWinAppEx`</ph> class.","pos":[9051,9140],"source":"Much of the functionality provided by the MFC framework depends on the `CWinAppEx` class."},{"content":"You can incorporate the <ph id=\"ph1\">`CWinAppEx`</ph> class into your application in one of two ways:","pos":[9141,9224],"source":" You can incorporate the `CWinAppEx` class into your application in one of two ways:"},{"pos":[9234,9283],"content":"Construct a <ph id=\"ph1\">`CWinAppEx`</ph> class in the main thread.","source":"Construct a `CWinAppEx` class in the main thread."},{"pos":[9293,9344],"content":"Derive the main application class from <ph id=\"ph1\">`CWinAppEx`</ph>.","source":"Derive the main application class from `CWinAppEx`."},{"content":"After you incorporate <ph id=\"ph1\">`CWinAppEx`</ph> into your application, you can initialize any one of the application managers.","pos":[9351,9463],"source":"After you incorporate `CWinAppEx` into your application, you can initialize any one of the application managers."},{"content":"Before you use an application manager, you must initialize it by calling the appropriate initialize method.","pos":[9464,9571]},{"content":"To obtain a pointer to a specific manager, call the associated get method.","pos":[9572,9646]},{"content":"The <ph id=\"ph1\">`CWinAppEx`</ph> class manages the following application managers: <bpt id=\"p1\">[</bpt>CMouseManager Class<ept id=\"p1\">](../../mfc/reference/cmousemanager-class.md)</ept>, <bpt id=\"p2\">[</bpt>CContextMenuManager Class<ept id=\"p2\">](../../mfc/reference/ccontextmenumanager-class.md)</ept>, <bpt id=\"p3\">[</bpt>CKeyboardManager Class<ept id=\"p3\">](../../mfc/reference/ckeyboardmanager-class.md)</ept>, <bpt id=\"p4\">[</bpt>CUserToolsManager Class<ept id=\"p4\">](../../mfc/reference/cusertoolsmanager-class.md)</ept>, and <bpt id=\"p5\">[</bpt>CMenuTearOffManager Class<ept id=\"p5\">](../../mfc/reference/cmenutearoffmanager-class.md)</ept>.","pos":[9647,10089],"source":" The `CWinAppEx` class manages the following application managers: [CMouseManager Class](../../mfc/reference/cmousemanager-class.md), [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md), [CKeyboardManager Class](../../mfc/reference/ckeyboardmanager-class.md), [CUserToolsManager Class](../../mfc/reference/cusertoolsmanager-class.md), and [CMenuTearOffManager Class](../../mfc/reference/cmenutearoffmanager-class.md)."},{"content":"Inheritance Hierarchy","pos":[10098,10119]},{"content":"CObject","pos":[10124,10131]},{"content":"CCmdTarget","pos":[10178,10188]},{"content":"CWinThread","pos":[10238,10248]},{"content":"CWinApp","pos":[10298,10305]},{"content":"CWinAppEx","pos":[10352,10361]},{"content":"Requirements","pos":[10411,10423]},{"pos":[10427,10452],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwinappex.h","source":"**Header:** afxwinappex.h"},{"pos":[10500,10521],"content":"CWinAppEx::CleanState"},{"content":"Removes all the information about the application from the Windows registry.","pos":[10525,10601]},{"content":"Parameters","pos":[10681,10691]},{"content":"[in]","pos":[10695,10699]},{"content":"A string that contains a path of a registry key.","pos":[10721,10769]},{"content":"Return Value","pos":[10779,10791]},{"content":"Nonzero if the method was successful; otherwise 0.","pos":[10795,10845]},{"content":"Remarks","pos":[10855,10862]},{"content":"This method clears application data from a specific section of the registry.","pos":[10866,10942]},{"content":"You can specify the section to clear by using the parameter <ph id=\"ph1\">`lpszSectionName`</ph>.","pos":[10943,11021],"source":" You can specify the section to clear by using the parameter `lpszSectionName`."},{"content":"If <ph id=\"ph1\">`lpszSectionName`</ph> is <ph id=\"ph2\">`NULL`</ph>, this method will use the default registry path stored in the <ph id=\"ph3\">`CWinAppEx`</ph> object.","pos":[11022,11134],"source":" If `lpszSectionName` is `NULL`, this method will use the default registry path stored in the `CWinAppEx` object."},{"content":"To get the default registry path, use <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept>.","pos":[11135,11231],"source":" To get the default registry path, use [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase)."},{"pos":[11278,11298],"content":"CWinAppEx::CWinAppEx"},{"pos":[11302,11334],"content":"Constructs a <ph id=\"ph1\">`CWinAppEx`</ph> object.","source":"Constructs a `CWinAppEx` object."},{"content":"Parameters","pos":[11405,11415]},{"content":"[in]","pos":[11419,11423]},{"content":"A Boolean parameter that specifies whether the workspace object should detect and handle resource updates.","pos":[11450,11556]},{"content":"Remarks","pos":[11566,11573]},{"content":"The <ph id=\"ph1\">`CWinAppEx`</ph> class has initialization methods, provides functionality for saving and loading application information to the registry, and controls global application settings.","pos":[11577,11755],"source":"The `CWinAppEx` class has initialization methods, provides functionality for saving and loading application information to the registry, and controls global application settings."},{"content":"It also enables you to use global managers such as the <bpt id=\"p1\">[</bpt>CKeyboardManager Class<ept id=\"p1\">](../../mfc/reference/ckeyboardmanager-class.md)</ept> and the <bpt id=\"p2\">[</bpt>CUserToolsManager Class<ept id=\"p2\">](../../mfc/reference/cusertoolsmanager-class.md)</ept>.","pos":[11756,11965],"source":" It also enables you to use global managers such as the [CKeyboardManager Class](../../mfc/reference/ckeyboardmanager-class.md) and the [CUserToolsManager Class](../../mfc/reference/cusertoolsmanager-class.md)."},{"content":"Each application can have only one instance of the <ph id=\"ph1\">`CWinAppEx`</ph> class.","pos":[11966,12035],"source":" Each application can have only one instance of the `CWinAppEx` class."},{"pos":[12098,12134],"content":"CWinAppEx::EnableLoadWindowPlacement"},{"content":"Specifies whether the application will load the initial size and location of the main frame window from the registry.","pos":[12138,12255]},{"content":"Parameters","pos":[12333,12343]},{"content":"[in]","pos":[12347,12351]},{"content":"Specifies whether the application loads the initial size and location of the main frame window from the registry.","pos":[12365,12478]},{"content":"Remarks","pos":[12488,12495]},{"content":"By default, the size and location of the main frame is loaded from the registry together with other application settings.","pos":[12499,12620]},{"content":"This occurs during <bpt id=\"p1\">[</bpt>CWinAppEx::LoadState<ept id=\"p1\">](#cwinappex__loadstate)</ept>.","pos":[12621,12686],"source":" This occurs during [CWinAppEx::LoadState](#cwinappex__loadstate)."},{"content":"If you do not want to load the initial window placement from the registry, call this method with <ph id=\"ph1\">`bEnable`</ph> set to <ph id=\"ph2\">`false`</ph>.","pos":[12687,12809],"source":" If you do not want to load the initial window placement from the registry, call this method with `bEnable` set to `false`."},{"pos":[12865,12894],"content":"CWinAppEx::EnableTearOffMenus"},{"pos":[12898,13003],"content":"Creates and initializes a <bpt id=\"p1\">[</bpt>CMenuTearOffManager<ept id=\"p1\">](../../mfc/reference/cmenutearoffmanager-class.md)</ept> object.","source":"Creates and initializes a [CMenuTearOffManager](../../mfc/reference/cmenutearoffmanager-class.md) object."},{"content":"Parameters","pos":[13137,13147]},{"content":"[in]","pos":[13151,13155]},{"content":"A string that contains the path of a registry key.","pos":[13174,13224]},{"content":"The application uses this registry key to store information for the tear-off menus.","pos":[13225,13308]},{"content":"[in]","pos":[13315,13319]},{"content":"The first tear off menu ID.","pos":[13336,13363]},{"content":"[in]","pos":[13370,13374]},{"content":"The last tear off menu ID.","pos":[13390,13416]},{"content":"Return Value","pos":[13426,13438]},{"pos":[13449,13593],"content":"if the <ph id=\"ph1\">`CMenuTearOffManager`</ph> is created and initialized successfully; <ph id=\"ph2\">`false`</ph> if an error occurs or if the <ph id=\"ph3\">`CMenuTearOffManager`</ph> already exists.","source":" if the `CMenuTearOffManager` is created and initialized successfully; `false` if an error occurs or if the `CMenuTearOffManager` already exists."},{"content":"Remarks","pos":[13603,13610]},{"content":"Use this function to enable tear-off menus in your application.","pos":[13614,13677]},{"content":"You should call this function from <ph id=\"ph1\">`InitInstance`</ph>.","pos":[13678,13728],"source":" You should call this function from `InitInstance`."},{"pos":[13781,13807],"content":"CWinAppEx::EnableUserTools"},{"content":"Enables the user to create custom menu commands that reduce keystrokes in your application.","pos":[13811,13902]},{"content":"This method creates a <bpt id=\"p1\">[</bpt>CUserToolsManager<ept id=\"p1\">](../../mfc/reference/cusertoolsmanager-class.md)</ept> object.","pos":[13903,14000],"source":" This method creates a [CUserToolsManager](../../mfc/reference/cusertoolsmanager-class.md) object."},{"content":"Parameters","pos":[14253,14263]},{"content":"[in]","pos":[14267,14271]},{"content":"An unsigned integer that the framework uses as a placeholder for the command ID of the user tools menu.","pos":[14293,14396]},{"content":"[in]","pos":[14403,14407]},{"content":"The command ID for the first user tool command.","pos":[14424,14471]},{"content":"[in]","pos":[14478,14482]},{"content":"The command ID for the last user tool command.","pos":[14498,14544]},{"content":"[in]","pos":[14551,14555]},{"content":"A class that the <ph id=\"ph1\">`CUserToolsManager`</ph> object uses to create new user tools.","pos":[14570,14644],"source":" A class that the `CUserToolsManager` object uses to create new user tools."},{"content":"[in]","pos":[14651,14655]},{"content":"The argument menu ID.","pos":[14672,14693]},{"content":"[in]","pos":[14700,14704]},{"content":"The menu ID for the initial tool directory.","pos":[14725,14768]},{"content":"Return Value","pos":[14778,14790]},{"pos":[14801,14947],"content":"if the method creates and initializes a <ph id=\"ph1\">`CUserToolsManager`</ph> object; <ph id=\"ph2\">`FALSE`</ph> if the method fails or if a <ph id=\"ph3\">`CUserToolsManager`</ph> object already exists.","source":" if the method creates and initializes a `CUserToolsManager` object; `FALSE` if the method fails or if a `CUserToolsManager` object already exists."},{"content":"Remarks","pos":[14957,14964]},{"content":"When you enable user-defined tools, the framework automatically supports a dynamic menu that can be extended during customization.","pos":[14968,15098]},{"content":"The framework associates each new item with an external command.","pos":[15099,15163]},{"content":"The framework invokes these commands when the user selects the appropriate item from the <bpt id=\"p1\">**</bpt>Tools<ept id=\"p1\">**</ept> menu.","pos":[15164,15268],"source":" The framework invokes these commands when the user selects the appropriate item from the **Tools** menu."},{"content":"Every time the user adds a new item, the framework creates a new object.","pos":[15275,15347]},{"content":"The class type for the new object is defined by <ph id=\"ph1\">`pToolRTC`</ph>.","pos":[15348,15407],"source":" The class type for the new object is defined by `pToolRTC`."},{"content":"The <ph id=\"ph1\">`pToolRTC`</ph> class type must be derived from the <bpt id=\"p1\">[</bpt>CUserTool Class<ept id=\"p1\">](../../mfc/reference/cusertool-class.md)</ept>.","pos":[15408,15517],"source":" The `pToolRTC` class type must be derived from the [CUserTool Class](../../mfc/reference/cusertool-class.md)."},{"pos":[15524,15671],"content":"For more information about user tools and how to incorporate them into your application, see <bpt id=\"p1\">[</bpt>User-defined Tools<ept id=\"p1\">](../../mfc/user-defined-tools.md)</ept>.","source":"For more information about user tools and how to incorporate them into your application, see [User-defined Tools](../../mfc/user-defined-tools.md)."},{"pos":[15721,15744],"content":"CWinAppEx::ExitInstance"},{"content":"Return Value","pos":[15900,15912]},{"content":"Remarks","pos":[15922,15929]},{"pos":[15976,15996],"content":"CWinAppEx::GetBinary"},{"content":"Reads binary data from a specified registry key.","pos":[16000,16048]},{"content":"Parameters","pos":[16155,16165]},{"content":"[in]","pos":[16169,16173]},{"content":"A string that contains the name of a registry key.","pos":[16189,16239]},{"content":"[out]","pos":[16246,16251]},{"content":"A pointer to the buffer that the method fills with the binary data.","pos":[16264,16331]},{"content":"[out]","pos":[16338,16343]},{"content":"A pointer to an unsigned integer that the method uses to write the number of bytes read.","pos":[16356,16444]},{"content":"Return Value","pos":[16454,16466]},{"pos":[16477,16510],"content":"if successful; <ph id=\"ph1\">`false`</ph> otherwise.","source":" if successful; `false` otherwise."},{"content":"Remarks","pos":[16520,16527]},{"content":"This method reads binary data written to the registry.","pos":[16531,16585]},{"content":"To write data to the registry, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::WriteBinary<ept id=\"p1\">](#cwinappex__writebinary)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::WriteSectionBinary<ept id=\"p2\">](#cwinappex__writesectionbinary)</ept>.","pos":[16586,16751],"source":" To write data to the registry, use the methods [CWinAppEx::WriteBinary](#cwinappex__writebinary) and [CWinAppEx::WriteSectionBinary](#cwinappex__writesectionbinary)."},{"content":"The <ph id=\"ph1\">`lpszEntry`</ph> parameter is the name of a registry entry located under the default registry key for your application.","pos":[16758,16876],"source":"The `lpszEntry` parameter is the name of a registry entry located under the default registry key for your application."},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[16877,17066],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[17125,17157],"content":"CWinAppEx::GetContextMenuManager"},{"pos":[17161,17272],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CContextMenuManager<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept> object.","source":"Returns a pointer to the global [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) object."},{"content":"Return Value","pos":[17343,17355]},{"pos":[17359,17412],"content":"A pointer to the global <ph id=\"ph1\">`CContextMenuManager`</ph> object.","source":"A pointer to the global `CContextMenuManager` object."},{"content":"Remarks","pos":[17422,17429]},{"pos":[17433,17607],"content":"If the CContextMenuManager object is not initialized, this function calls <bpt id=\"p1\">[</bpt>CWinAppEx::InitContextMenuManager<ept id=\"p1\">](#cwinappex__initcontextmenumanager)</ept> before it returns a pointer.","source":"If the CContextMenuManager object is not initialized, this function calls [CWinAppEx::InitContextMenuManager](#cwinappex__initcontextmenumanager) before it returns a pointer."},{"pos":[17659,17684],"content":"CWinAppEx::GetDataVersion"},{"content":"Return Value","pos":[17843,17855]},{"content":"Remarks","pos":[17865,17872]},{"pos":[17929,17959],"content":"CWinAppEx::GetDataVersionMajor"},{"pos":[17963,18106],"content":"Returns the major version of the application that is saved in the Windows registry when you call <bpt id=\"p1\">[</bpt>CWinAppEx::SaveState<ept id=\"p1\">](#cwinappex__savestate)</ept>.","source":"Returns the major version of the application that is saved in the Windows registry when you call [CWinAppEx::SaveState](#cwinappex__savestate)."},{"content":"Return Value","pos":[18167,18179]},{"content":"An integer value that contains the major version number.","pos":[18183,18239]},{"pos":[18296,18326],"content":"CWinAppEx::GetDataVersionMinor"},{"pos":[18330,18473],"content":"Returns the minor version of the application that is saved in the Windows registry when you call <bpt id=\"p1\">[</bpt>CWinAppEx::SaveState<ept id=\"p1\">](#cwinappex__savestate)</ept>.","source":"Returns the minor version of the application that is saved in the Windows registry when you call [CWinAppEx::SaveState](#cwinappex__savestate)."},{"content":"Return Value","pos":[18534,18546]},{"content":"An integer value that contains the minor version number.","pos":[18550,18606]},{"pos":[18650,18667],"content":"CWinAppEx::GetInt"},{"content":"Reads integer data from a specified registry key.","pos":[18671,18720]},{"content":"Parameters","pos":[18805,18815]},{"content":"[in]","pos":[18819,18823]},{"content":"A string that contains the name of a registry entry.","pos":[18839,18891]},{"content":"[in]","pos":[18898,18902]},{"content":"The default value that the method returns if the specified registry entry does not exist.","pos":[18917,19006]},{"content":"Return Value","pos":[19016,19028]},{"pos":[19032,19101],"content":"The registry data if the method was successful; otherwise <ph id=\"ph1\">`nDefault`</ph>.","source":"The registry data if the method was successful; otherwise `nDefault`."},{"content":"Remarks","pos":[19111,19118]},{"content":"This method reads integer data from the registry.","pos":[19122,19171]},{"content":"If there is no integer data associated with the registry key indicated by <ph id=\"ph1\">`lpszEntry`</ph>, this method returns <ph id=\"ph2\">`nDefault`</ph>.","pos":[19172,19290],"source":" If there is no integer data associated with the registry key indicated by `lpszEntry`, this method returns `nDefault`."},{"content":"To write data to the registry, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::WriteSectionInt<ept id=\"p1\">](#cwinappex__writesectionint)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::WriteInt<ept id=\"p2\">](#cwinappex__writeint)</ept>.","pos":[19291,19444],"source":" To write data to the registry, use the methods [CWinAppEx::WriteSectionInt](#cwinappex__writesectionint) and [CWinAppEx::WriteInt](#cwinappex__writeint)."},{"content":"The <ph id=\"ph1\">`lpszEntry`</ph> parameter is the name of a registry entry located under the default registry key for your application.","pos":[19451,19569],"source":"The `lpszEntry` parameter is the name of a registry entry located under the default registry key for your application."},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[19570,19759],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[19815,19844],"content":"CWinAppEx::GetKeyboardManager"},{"pos":[19848,19953],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CKeyboardManager<ept id=\"p1\">](../../mfc/reference/ckeyboardmanager-class.md)</ept> object.","source":"Returns a pointer to the global [CKeyboardManager](../../mfc/reference/ckeyboardmanager-class.md) object."},{"content":"Return Value","pos":[20018,20030]},{"pos":[20034,20084],"content":"A pointer to the global <ph id=\"ph1\">`CKeyboardManager`</ph> object.","source":"A pointer to the global `CKeyboardManager` object."},{"content":"Remarks","pos":[20094,20101]},{"pos":[20105,20263],"content":"If the keyboard manager is not initialized, this function calls <bpt id=\"p1\">[</bpt>CWinAppEx::InitKeyboardManager<ept id=\"p1\">](#cwinappex__initkeyboardmanager)</ept> before it returns a pointer.","source":"If the keyboard manager is not initialized, this function calls [CWinAppEx::InitKeyboardManager](#cwinappex__initkeyboardmanager) before it returns a pointer."},{"pos":[20316,20342],"content":"CWinAppEx::GetMouseManager"},{"pos":[20346,20445],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CMouseManager<ept id=\"p1\">](../../mfc/reference/cmousemanager-class.md)</ept> object.","source":"Returns a pointer to the global [CMouseManager](../../mfc/reference/cmousemanager-class.md) object."},{"content":"Return Value","pos":[20504,20516]},{"pos":[20520,20567],"content":"A pointer to the global <ph id=\"ph1\">`CMouseManager`</ph> object.","source":"A pointer to the global `CMouseManager` object."},{"content":"Remarks","pos":[20577,20584]},{"pos":[20588,20738],"content":"If the mouse manager is not initialized,, this function calls <bpt id=\"p1\">[</bpt>CWinAppEx::InitMouseManager<ept id=\"p1\">](#cwinappex__initmousemanager)</ept> before it returns a pointer.","source":"If the mouse manager is not initialized,, this function calls [CWinAppEx::InitMouseManager](#cwinappex__initmousemanager) before it returns a pointer."},{"pos":[20785,20805],"content":"CWinAppEx::GetObject"},{"pos":[20809,20894],"content":"Reads <bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>-dervied data from the registry.","source":"Reads [CObject](../../mfc/reference/cobject-class.md)-dervied data from the registry."},{"content":"Parameters","pos":[20979,20989]},{"content":"[in]","pos":[20993,20997]},{"content":"A string that contains the relative path of a registry entry.","pos":[21013,21074]},{"content":"[out]","pos":[21081,21086]},{"content":"A reference to a <ph id=\"ph1\">`CObject`</ph>.","pos":[21096,21123],"source":" A reference to a `CObject`."},{"content":"The method uses this reference to store the registry data.","pos":[21124,21182]},{"content":"Return Value","pos":[21192,21204]},{"content":"Nonzero if the method was successful; otherwise 0.","pos":[21208,21258]},{"content":"Remarks","pos":[21268,21275]},{"content":"This method reads data from the registry that is derived from <ph id=\"ph1\">`CObject`</ph>.","pos":[21279,21351],"source":"This method reads data from the registry that is derived from `CObject`."},{"content":"To write <ph id=\"ph1\">`CObject`</ph> data to the registry, use either <bpt id=\"p1\">[</bpt>CWinAppEx::WriteObject<ept id=\"p1\">](#cwinappex__writeobject)</ept> or <bpt id=\"p2\">[</bpt>CWinAppEx::WriteSectionObject<ept id=\"p2\">](#cwinappex__writesectionobject)</ept>.","pos":[21352,21521],"source":" To write `CObject` data to the registry, use either [CWinAppEx::WriteObject](#cwinappex__writeobject) or [CWinAppEx::WriteSectionObject](#cwinappex__writesectionobject)."},{"content":"The <ph id=\"ph1\">`lpszEntry`</ph> parameter is the name of a registry entry that is located under the default registry key for your application.","pos":[21528,21654],"source":"The `lpszEntry` parameter is the name of a registry entry that is located under the default registry key for your application."},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[21655,21844],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[21897,21923],"content":"CWinAppEx::GetRegistryBase"},{"content":"Retrieves the default registry path for the application.","pos":[21927,21983]},{"content":"Return Value","pos":[22035,22047]},{"content":"A string that contains the path of the default registry location.","pos":[22051,22116]},{"content":"Remarks","pos":[22126,22133]},{"content":"All methods of the <bpt id=\"p1\">[</bpt>CWinAppEx Class<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md)</ept> that access the registry start in a default location.","pos":[22137,22267],"source":"All methods of the [CWinAppEx Class](../../mfc/reference/cwinappex-class.md) that access the registry start in a default location."},{"content":"Use this method to retrieve a path of the default registry location.","pos":[22268,22336]},{"content":"Use <bpt id=\"p1\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p1\">](#cwinappex__setregistrybase)</ept> to change the default registry location.","pos":[22337,22439],"source":" Use [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) to change the default registry location."},{"pos":[22494,22522],"content":"CWinAppEx::GetRegSectionPath"},{"content":"Creates and returns the absolute path of a registry key.","pos":[22526,22582]},{"content":"Parameters","pos":[22665,22675]},{"content":"[in]","pos":[22679,22683]},{"content":"A string that contains the relative path of a registry key.","pos":[22702,22761]},{"content":"Return Value","pos":[22771,22783]},{"pos":[22787,22849],"content":"A <ph id=\"ph1\">`CString`</ph> that contains the absolute path of a registry key.","source":"A `CString` that contains the absolute path of a registry key."},{"content":"Remarks","pos":[22859,22866]},{"content":"This method defines the registry key's absolute path by appending the relative path in <ph id=\"ph1\">`szSectionAdd`</ph> to the default registry location for your application.","pos":[22870,23026],"source":"This method defines the registry key's absolute path by appending the relative path in `szSectionAdd` to the default registry location for your application."},{"content":"To get the default registry key, use the method <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept>.","pos":[23027,23133],"source":" To get the default registry key, use the method [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase)."},{"pos":[23187,23214],"content":"CWinAppEx::GetSectionBinary"},{"content":"Reads binary data from the registry.","pos":[23218,23254]},{"content":"Parameters","pos":[23398,23408]},{"content":"[in]","pos":[23412,23416]},{"content":"A string that contains the relative path of a registry key.","pos":[23437,23496]},{"content":"[in]","pos":[23503,23507]},{"content":"A string that contains the value to read.","pos":[23523,23564]},{"content":"[out]","pos":[23571,23576]},{"content":"A pointer to the buffer where the method stores the data.","pos":[23589,23646]},{"content":"[out]","pos":[23653,23658]},{"content":"A pointer to an unsigned integer.","pos":[23671,23704]},{"content":"The method writes the size of <ph id=\"ph1\">`ppData`</ph> to this parameter.","pos":[23705,23762],"source":" The method writes the size of `ppData` to this parameter."},{"content":"Return Value","pos":[23772,23784]},{"pos":[23795,23828],"content":"if successful; otherwise <ph id=\"ph1\">`false`</ph>.","source":" if successful; otherwise `false`."},{"content":"Remarks","pos":[23838,23845]},{"pos":[23849,24047],"content":"This method reads binary data that is written to the registry using the methods <bpt id=\"p1\">[</bpt>CWinAppEx::WriteBinary<ept id=\"p1\">](#cwinappex__writebinary)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::WriteSectionBinary<ept id=\"p2\">](#cwinappex__writesectionbinary)</ept>.","source":"This method reads binary data that is written to the registry using the methods [CWinAppEx::WriteBinary](#cwinappex__writebinary) and [CWinAppEx::WriteSectionBinary](#cwinappex__writesectionbinary)."},{"content":"The <ph id=\"ph1\">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.","pos":[24054,24130],"source":"The `lpszSubSection` parameter is not an absolute path for a registry entry."},{"content":"It is a relative path that is appended to the end of the default registry key for your application.","pos":[24131,24230]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[24231,24420],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[24471,24495],"content":"CWinAppEx::GetSectionInt"},{"content":"Reads integer data from the registry.","pos":[24499,24536]},{"content":"Parameters","pos":[24658,24668]},{"content":"[in]","pos":[24672,24676]},{"content":"A string that contains the relative path of a registry key.","pos":[24697,24756]},{"content":"[in]","pos":[24763,24767]},{"content":"A string that contains the value to read.","pos":[24783,24824]},{"content":"[in]","pos":[24831,24835]},{"content":"The default value to return if the specified value does not exist.","pos":[24850,24916]},{"content":"Return Value","pos":[24926,24938]},{"pos":[24942,25045],"content":"The integer data that is stored in the specified registry value; <ph id=\"ph1\">`nDefault`</ph> if the data does not exist.","source":"The integer data that is stored in the specified registry value; `nDefault` if the data does not exist."},{"content":"Remarks","pos":[25055,25062]},{"pos":[25066,25226],"content":"Use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::WriteInt<ept id=\"p1\">](#cwinappex__writeint)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::WriteSectionInt<ept id=\"p2\">](#cwinappex__writesectionint)</ept> to write integer data to the registry.","source":"Use the methods [CWinAppEx::WriteInt](#cwinappex__writeint) and [CWinAppEx::WriteSectionInt](#cwinappex__writesectionint) to write integer data to the registry."},{"content":"The <ph id=\"ph1\">`lpszSubSection`</ph> parameter is not an absolute path of a registry entry.","pos":[25233,25308],"source":"The `lpszSubSection` parameter is not an absolute path of a registry entry."},{"content":"It is a relative path that is added to the end of the default registry key for your application.","pos":[25309,25405]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[25406,25595],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[25649,25676],"content":"CWinAppEx::GetSectionObject"},{"pos":[25680,25766],"content":"Reads <bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept> registry data from the registry.","source":"Reads [CObject](../../mfc/reference/cobject-class.md) registry data from the registry."},{"content":"Parameters","pos":[25888,25898]},{"content":"[in]","pos":[25902,25906]},{"content":"A string that contains the relative path of a registry key.","pos":[25927,25986]},{"content":"[in]","pos":[25993,25997]},{"content":"A string that contains the value to read.","pos":[26013,26054]},{"content":"[out]","pos":[26061,26066]},{"content":"A reference to a <ph id=\"ph1\">`CObject`</ph>.","pos":[26076,26103],"source":" A reference to a `CObject`."},{"content":"The method uses this <ph id=\"ph1\">`CObject`</ph> to store the registry data.","pos":[26104,26162],"source":" The method uses this `CObject` to store the registry data."},{"content":"Return Value","pos":[26172,26184]},{"content":"Nonzero if successful; otherwise 0.","pos":[26188,26223]},{"content":"Remarks","pos":[26233,26240]},{"content":"This method reads data from the registry.","pos":[26244,26285]},{"content":"The data read is <ph id=\"ph1\">`CObject`</ph> data, or data for a class derived from <ph id=\"ph2\">`CObject`</ph>.","pos":[26286,26362],"source":" The data read is `CObject` data, or data for a class derived from `CObject`."},{"content":"To write <ph id=\"ph1\">`CObject`</ph> data to the registry, use either <bpt id=\"p1\">[</bpt>CWinAppEx::WriteObject<ept id=\"p1\">](#cwinappex__writeobject)</ept> or <bpt id=\"p2\">[</bpt>CWinAppEx::WriteSectionObject<ept id=\"p2\">](#cwinappex__writesectionobject)</ept>.","pos":[26363,26532],"source":" To write `CObject` data to the registry, use either [CWinAppEx::WriteObject](#cwinappex__writeobject) or [CWinAppEx::WriteSectionObject](#cwinappex__writesectionobject)."},{"content":"The <ph id=\"ph1\">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.","pos":[26539,26615],"source":"The `lpszSubSection` parameter is not an absolute path for a registry entry."},{"content":"It is a relative path that is appended to the end of the default registry key for your application.","pos":[26616,26715]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[26716,26905],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[26959,26986],"content":"CWinAppEx::GetSectionString"},{"content":"Reads string data from the registry.","pos":[26990,27026]},{"content":"Parameters","pos":[27167,27177]},{"content":"[in]","pos":[27181,27185]},{"content":"A string that contains the relative path of a registry key.","pos":[27206,27265]},{"content":"[in]","pos":[27272,27276]},{"content":"A string that contains the value to read.","pos":[27292,27333]},{"content":"[in]","pos":[27340,27344]},{"content":"The default value to return if the specified value does not exist.","pos":[27362,27428]},{"content":"Return Value","pos":[27438,27450]},{"pos":[27454,27553],"content":"The string data stored in the specified registry value if the data exists; otherwise <ph id=\"ph1\">`lpszDefault`</ph>.","source":"The string data stored in the specified registry value if the data exists; otherwise `lpszDefault`."},{"content":"Remarks","pos":[27563,27570]},{"content":"This method reads string data written to the registry.","pos":[27574,27628]},{"content":"Use <bpt id=\"p1\">[</bpt>CWinAppEx::WriteString<ept id=\"p1\">](#cwinappex__writestring)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::WriteSectionString<ept id=\"p2\">](#cwinappex__writesectionstring)</ept> to write string data to the registry.","pos":[27629,27788],"source":" Use [CWinAppEx::WriteString](#cwinappex__writestring) and [CWinAppEx::WriteSectionString](#cwinappex__writesectionstring) to write string data to the registry."},{"content":"The <ph id=\"ph1\">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.","pos":[27795,27871],"source":"The `lpszSubSection` parameter is not an absolute path for a registry entry."},{"content":"It is a relative path that is appended to the end of the default registry key for your application.","pos":[27872,27971]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[27972,28161],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[28214,28240],"content":"CWinAppEx::GetShellManager"},{"pos":[28244,28343],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CShellManager<ept id=\"p1\">](../../mfc/reference/cshellmanager-class.md)</ept> object.","source":"Returns a pointer to the global [CShellManager](../../mfc/reference/cshellmanager-class.md) object."},{"content":"Return Value","pos":[28402,28414]},{"pos":[28418,28465],"content":"A pointer to the global <ph id=\"ph1\">`CShellManager`</ph> object.","source":"A pointer to the global `CShellManager` object."},{"content":"Remarks","pos":[28475,28482]},{"pos":[28486,28644],"content":"If the <ph id=\"ph1\">`CShellManager`</ph> object is not initialized, this function calls <bpt id=\"p1\">[</bpt>CWinAppEx::InitShellManager<ept id=\"p1\">](#cwinappex__initshellmanager)</ept> before it returns a pointer.","source":"If the `CShellManager` object is not initialized, this function calls [CWinAppEx::InitShellManager](#cwinappex__initshellmanager) before it returns a pointer."},{"pos":[28691,28711],"content":"CWinAppEx::GetString"},{"content":"Reads string data from a specified registry key.","pos":[28715,28763]},{"content":"Parameters","pos":[28865,28875]},{"content":"[in]","pos":[28879,28883]},{"content":"A string that contains the name of a registry key","pos":[28899,28948]},{"content":"[in]","pos":[28955,28959]},{"content":"The default value that the method returns if the specified registry entry does not exist.","pos":[28976,29065]},{"content":"Return Value","pos":[29075,29087]},{"pos":[29091,29169],"content":"The string data stored in the registry if successful; <ph id=\"ph1\">`lpszDefault`</ph> otherwise.","source":"The string data stored in the registry if successful; `lpszDefault` otherwise."},{"content":"Remarks","pos":[29179,29186]},{"content":"This method reads string data written to the registry.","pos":[29190,29244]},{"content":"To write data to the registry, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::WriteString<ept id=\"p1\">](#cwinappex__writestring)</ept> or <bpt id=\"p2\">[</bpt>CWinAppEx::WriteSectionString<ept id=\"p2\">](#cwinappex__writesectionstring)</ept>.","pos":[29245,29409],"source":" To write data to the registry, use the methods [CWinAppEx::WriteString](#cwinappex__writestring) or [CWinAppEx::WriteSectionString](#cwinappex__writesectionstring)."},{"content":"The <ph id=\"ph1\">`lpszEntry`</ph> parameter is the name of a registry entry located under the default registry key for your application.","pos":[29416,29534],"source":"The `lpszEntry` parameter is the name of a registry entry located under the default registry key for your application."},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[29535,29724],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[29779,29807],"content":"CWinAppEx::GetTooltipManager"},{"pos":[29811,29914],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CTooltipManager<ept id=\"p1\">](../../mfc/reference/ctooltipmanager-class.md)</ept> object.","source":"Returns a pointer to the global [CTooltipManager](../../mfc/reference/ctooltipmanager-class.md) object."},{"content":"Return Value","pos":[29977,29989]},{"pos":[29993,30042],"content":"A pointer to the global <ph id=\"ph1\">`CTooltipManager`</ph> object.","source":"A pointer to the global `CTooltipManager` object."},{"content":"Remarks","pos":[30052,30059]},{"pos":[30063,30227],"content":"If the <ph id=\"ph1\">`CTooltipManager`</ph> object is not initialized, this function calls <bpt id=\"p1\">[</bpt>CWinAppEx::InitTooltipManager<ept id=\"p1\">](#cwinappex__inittooltipmanager)</ept> before it returns a pointer.","source":"If the `CTooltipManager` object is not initialized, this function calls [CWinAppEx::InitTooltipManager](#cwinappex__inittooltipmanager) before it returns a pointer."},{"pos":[30284,30314],"content":"CWinAppEx::GetUserToolsManager"},{"pos":[30318,30425],"content":"Returns a pointer to the global <bpt id=\"p1\">[</bpt>CUserToolsManager<ept id=\"p1\">](../../mfc/reference/cusertoolsmanager-class.md)</ept> object.","source":"Returns a pointer to the global [CUserToolsManager](../../mfc/reference/cusertoolsmanager-class.md) object."},{"content":"Return Value","pos":[30492,30504]},{"pos":[30508,30627],"content":"A pointer to the global <ph id=\"ph1\">`CUserToolsManager`</ph> object; <ph id=\"ph2\">`NULL`</ph> if user tools management is not enabled for the application.","source":"A pointer to the global `CUserToolsManager` object; `NULL` if user tools management is not enabled for the application."},{"content":"Remarks","pos":[30637,30644]},{"pos":[30648,30814],"content":"Before you retrieve a pointer to the <ph id=\"ph1\">`CUserToolsManager`</ph> object, you must initialize the manager by calling <bpt id=\"p1\">[</bpt>CWinAppEx::EnableUserTools<ept id=\"p1\">](#cwinappex__enableusertools)</ept>.","source":"Before you retrieve a pointer to the `CUserToolsManager` object, you must initialize the manager by calling [CWinAppEx::EnableUserTools](#cwinappex__enableusertools)."},{"pos":[30874,30907],"content":"CWinAppEx::InitContextMenuManager"},{"pos":[30911,31006],"content":"Initializes the <bpt id=\"p1\">[</bpt>CContextMenuManager<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept> object.","source":"Initializes the [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) object."},{"content":"Return Value","pos":[31062,31074]},{"pos":[31078,31193],"content":"Nonzero if the method creates the CContextMenuManager object; 0 if the <ph id=\"ph1\">`CContextMenuManager`</ph> object already exists.","source":"Nonzero if the method creates the CContextMenuManager object; 0 if the `CContextMenuManager` object already exists."},{"content":"Remarks","pos":[31203,31210]},{"pos":[31214,31370],"content":"If you call <bpt id=\"p1\">[</bpt>CWinAppEx::GetContextMenuManager<ept id=\"p1\">](#cwinappex__getcontextmenumanager)</ept>, the default implementation of that method calls <ph id=\"ph1\">`InitContextMenuManager`</ph>.","source":"If you call [CWinAppEx::GetContextMenuManager](#cwinappex__getcontextmenumanager), the default implementation of that method calls `InitContextMenuManager`."},{"content":"If your application already has a context menu manager and you call <ph id=\"ph1\">`InitContextMenuManager`</ph>, your application will have an <bpt id=\"p1\">[</bpt>ASSERT<ept id=\"p1\">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept> failure.","pos":[31377,31590],"source":"If your application already has a context menu manager and you call `InitContextMenuManager`, your application will have an [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c) failure."},{"content":"Therefore, you should not call <ph id=\"ph1\">`InitContextMenuManager`</ph> if you create a <ph id=\"ph2\">`CContextMenuManager`</ph> object directly.","pos":[31591,31701],"source":" Therefore, you should not call `InitContextMenuManager` if you create a `CContextMenuManager` object directly."},{"content":"If you are not using a custom <ph id=\"ph1\">`CContextMenuManager`</ph>, you should use <ph id=\"ph2\">`GetContextMenuManager`</ph> to create a <ph id=\"ph3\">`CContextMenuManager`</ph> object.","pos":[31702,31835],"source":" If you are not using a custom `CContextMenuManager`, you should use `GetContextMenuManager` to create a `CContextMenuManager` object."},{"pos":[31892,31922],"content":"CWinAppEx::InitKeyboardManager"},{"pos":[31926,32015],"content":"Initializes the <bpt id=\"p1\">[</bpt>CKeyboardManager<ept id=\"p1\">](../../mfc/reference/ckeyboardmanager-class.md)</ept> object.","source":"Initializes the [CKeyboardManager](../../mfc/reference/ckeyboardmanager-class.md) object."},{"content":"Return Value","pos":[32068,32080]},{"pos":[32084,32195],"content":"Nonzero if the method creates the <ph id=\"ph1\">`CKeyboardManager`</ph> object; 0 if the <ph id=\"ph2\">`CKeyboardManager`</ph> object already exists.","source":"Nonzero if the method creates the `CKeyboardManager` object; 0 if the `CKeyboardManager` object already exists."},{"content":"Remarks","pos":[32205,32212]},{"pos":[32216,32363],"content":"If you call <bpt id=\"p1\">[</bpt>CWinAppEx::GetKeyboardManager<ept id=\"p1\">](#cwinappex__getkeyboardmanager)</ept>, the default implementation of that method calls <ph id=\"ph1\">`InitKeyboardManager`</ph>.","source":"If you call [CWinAppEx::GetKeyboardManager](#cwinappex__getkeyboardmanager), the default implementation of that method calls `InitKeyboardManager`."},{"content":"If your application already has a keyboard manager and you call <ph id=\"ph1\">`InitKeyboardManager`</ph>, your application will have an <bpt id=\"p1\">[</bpt>ASSERT<ept id=\"p1\">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept> failure.","pos":[32370,32576],"source":"If your application already has a keyboard manager and you call `InitKeyboardManager`, your application will have an [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c) failure."},{"content":"Therefore, you should not call <ph id=\"ph1\">`InitKeyboardManager`</ph> if you create a <ph id=\"ph2\">`CKeyboardManager`</ph> object directly.","pos":[32577,32681],"source":" Therefore, you should not call `InitKeyboardManager` if you create a `CKeyboardManager` object directly."},{"content":"If you are not using a custom <ph id=\"ph1\">`CKeyboardManager`</ph>, you should use <ph id=\"ph2\">`GetKeyboardManager`</ph> to create a <ph id=\"ph3\">`CKeyboardManager`</ph> object.","pos":[32682,32806],"source":" If you are not using a custom `CKeyboardManager`, you should use `GetKeyboardManager` to create a `CKeyboardManager` object."},{"pos":[32860,32887],"content":"CWinAppEx::InitMouseManager"},{"pos":[32891,32974],"content":"Initializes the <bpt id=\"p1\">[</bpt>CMouseManager<ept id=\"p1\">](../../mfc/reference/cmousemanager-class.md)</ept> object.","source":"Initializes the [CMouseManager](../../mfc/reference/cmousemanager-class.md) object."},{"content":"Return Value","pos":[33024,33036]},{"pos":[33040,33145],"content":"Nonzero if the method creates the <ph id=\"ph1\">`CMouseManager`</ph> object; 0 if the <ph id=\"ph2\">`CMouseManager`</ph> object already exists.","source":"Nonzero if the method creates the `CMouseManager` object; 0 if the `CMouseManager` object already exists."},{"content":"Remarks","pos":[33155,33162]},{"pos":[33166,33304],"content":"If you call <bpt id=\"p1\">[</bpt>CWinAppEx::GetMouseManager<ept id=\"p1\">](#cwinappex__getmousemanager)</ept>, the default implementation of that method calls <ph id=\"ph1\">`InitMouseManager`</ph>.","source":"If you call [CWinAppEx::GetMouseManager](#cwinappex__getmousemanager), the default implementation of that method calls `InitMouseManager`."},{"content":"If your application already has a mouse manager and you call <ph id=\"ph1\">`InitMouseManager`</ph>, your application will have an <bpt id=\"p1\">[</bpt>ASSERT<ept id=\"p1\">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept> failure.","pos":[33311,33511],"source":"If your application already has a mouse manager and you call `InitMouseManager`, your application will have an [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c) failure."},{"content":"Therefore you should not call <ph id=\"ph1\">`InitMouseManager`</ph> if you create a <ph id=\"ph2\">`CMouseManager`</ph> object directly.","pos":[33512,33609],"source":" Therefore you should not call `InitMouseManager` if you create a `CMouseManager` object directly."},{"content":"If you are not using a custom <ph id=\"ph1\">`CMouseManager`</ph>, you should use <ph id=\"ph2\">`GetMouseManager`</ph> to create a <ph id=\"ph3\">`CMouseManager`</ph> object.","pos":[33610,33725],"source":" If you are not using a custom `CMouseManager`, you should use `GetMouseManager` to create a `CMouseManager` object."},{"pos":[33779,33806],"content":"CWinAppEx::InitShellManager"},{"pos":[33810,33893],"content":"Initializes the <bpt id=\"p1\">[</bpt>CShellManager<ept id=\"p1\">](../../mfc/reference/cshellmanager-class.md)</ept> object.","source":"Initializes the [CShellManager](../../mfc/reference/cshellmanager-class.md) object."},{"content":"Return Value","pos":[33943,33955]},{"pos":[33959,34064],"content":"Nonzero if the method creates the <ph id=\"ph1\">`CShellManager`</ph> object; 0 if the <ph id=\"ph2\">`CShellManager`</ph> object already exists.","source":"Nonzero if the method creates the `CShellManager` object; 0 if the `CShellManager` object already exists."},{"content":"Remarks","pos":[34074,34081]},{"pos":[34085,34223],"content":"If you call <bpt id=\"p1\">[</bpt>CWinAppEx::GetShellManager<ept id=\"p1\">](#cwinappex__getshellmanager)</ept>, the default implementation of that method calls <ph id=\"ph1\">`InitShellManager`</ph>.","source":"If you call [CWinAppEx::GetShellManager](#cwinappex__getshellmanager), the default implementation of that method calls `InitShellManager`."},{"content":"If your application already has a shell manager and you call <ph id=\"ph1\">`InitShellManager`</ph>, your application raises an <bpt id=\"p1\">[</bpt>ASSERT<ept id=\"p1\">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept> failure.","pos":[34230,34427],"source":"If your application already has a shell manager and you call `InitShellManager`, your application raises an [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c) failure."},{"content":"Therefore, do not call <ph id=\"ph1\">`InitShellManager`</ph> if you create a <ph id=\"ph2\">`CShellManager`</ph> object directly.","pos":[34428,34518],"source":" Therefore, do not call `InitShellManager` if you create a `CShellManager` object directly."},{"content":"If you are not using a custom <ph id=\"ph1\">`CShellManager`</ph>, use <ph id=\"ph2\">`GetShellManager`</ph> to create a <ph id=\"ph3\">`CShellManager`</ph> object.","pos":[34519,34623],"source":" If you are not using a custom `CShellManager`, use `GetShellManager` to create a `CShellManager` object."},{"pos":[34679,34708],"content":"CWinAppEx::InitTooltipManager"},{"pos":[34712,34799],"content":"Initializes the <bpt id=\"p1\">[</bpt>CTooltipManager<ept id=\"p1\">](../../mfc/reference/ctooltipmanager-class.md)</ept> object.","source":"Initializes the [CTooltipManager](../../mfc/reference/ctooltipmanager-class.md) object."},{"content":"Return Value","pos":[34851,34863]},{"pos":[34867,34976],"content":"Nonzero if the method creates the <ph id=\"ph1\">`CTooltipManager`</ph> object; 0 if the <ph id=\"ph2\">`CTooltipManager`</ph> object already exists.","source":"Nonzero if the method creates the `CTooltipManager` object; 0 if the `CTooltipManager` object already exists."},{"content":"Remarks","pos":[34986,34993]},{"pos":[34997,35141],"content":"If you call <bpt id=\"p1\">[</bpt>CWinAppEx::GetTooltipManager<ept id=\"p1\">](#cwinappex__gettooltipmanager)</ept>, the default implementation of that method calls <ph id=\"ph1\">`InitTooltipManager`</ph>.","source":"If you call [CWinAppEx::GetTooltipManager](#cwinappex__gettooltipmanager), the default implementation of that method calls `InitTooltipManager`."},{"content":"If your application already has a tooltip manager and you call <ph id=\"ph1\">`InitTooltipManager`</ph>, your application will have an <bpt id=\"p1\">[</bpt>ASSERT<ept id=\"p1\">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept> failure.","pos":[35148,35352],"source":"If your application already has a tooltip manager and you call `InitTooltipManager`, your application will have an [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c) failure."},{"content":"Therefore, you should not call <ph id=\"ph1\">`InitTooltipManager`</ph> if you create a <ph id=\"ph2\">`CTooltipManager`</ph> object directly.","pos":[35353,35455],"source":" Therefore, you should not call `InitTooltipManager` if you create a `CTooltipManager` object directly."},{"content":"If you are not using a custom <ph id=\"ph1\">`CTooltipManager`</ph>, you should use <ph id=\"ph2\">`GetTooltipManager`</ph> to create a <ph id=\"ph3\">`CTooltipManager`</ph> object.","pos":[35456,35577],"source":" If you are not using a custom `CTooltipManager`, you should use `GetTooltipManager` to create a `CTooltipManager` object."},{"pos":[35636,35668],"content":"CWinAppEx::IsResourceSmartUpdate"},{"content":"Return Value","pos":[35835,35847]},{"content":"Remarks","pos":[35857,35864]},{"pos":[35915,35939],"content":"CWinAppEx::IsStateExists"},{"content":"Indicates whether the specified key is in the registry.","pos":[35943,35998]},{"content":"Parameters","pos":[36068,36078]},{"content":"[in]","pos":[36082,36086]},{"content":"A string that contains a path of a registry key.","pos":[36108,36156]},{"content":"Return Value","pos":[36166,36178]},{"content":"Nonzero if the key is in the registry; otherwise 0.","pos":[36182,36233]},{"pos":[36286,36312],"content":"CWinAppEx::LoadCustomState"},{"content":"The framework calls this method after it loads the state of the application from the registry.","pos":[36316,36410]},{"content":"Remarks","pos":[36467,36474]},{"content":"Override this method if you want to do any processing after the application loads the state from the registry.","pos":[36478,36588]},{"content":"By default, this method does nothing.","pos":[36589,36626]},{"pos":[36633,36797],"content":"In order to load custom state information from the registry, the information must first be saved by using <bpt id=\"p1\">[</bpt>CWinAppEx::SaveCustomState<ept id=\"p1\">](#cwinappex__savecustomstate)</ept>.","source":"In order to load custom state information from the registry, the information must first be saved by using [CWinAppEx::SaveCustomState](#cwinappex__savecustomstate)."},{"pos":[36844,36864],"content":"CWinAppEx::LoadState"},{"content":"Reads the application state from the Windows registry.","pos":[36868,36922]},{"content":"Parameters","pos":[37302,37312]},{"content":"[in]","pos":[37316,37320]},{"content":"A pointer to a frame window object.","pos":[37333,37368]},{"content":"The method applies the state information in the registry to this frame window.","pos":[37369,37447]},{"content":"[in]","pos":[37454,37458]},{"content":"A string that contains the relative path of a registry key.","pos":[37480,37539]},{"content":"[in]","pos":[37546,37550]},{"content":"A pointer to a <ph id=\"ph1\">`CFrameImpl`</ph> object.","pos":[37567,37602],"source":" A pointer to a `CFrameImpl` object."},{"content":"The method applies the state information in the registry to this frame window.","pos":[37603,37681]},{"content":"Return Value","pos":[37691,37703]},{"content":"Nonzero if successful; 0 otherwise.","pos":[37707,37742]},{"content":"Remarks","pos":[37752,37759]},{"content":"This method loads the state of the application and any state information for a frame window.","pos":[37763,37855]},{"content":"The loaded information for the frame window is applied to the supplied frame window.","pos":[37856,37940]},{"content":"If you do not supply a frame window, only the application state information is loaded.","pos":[37941,38027]},{"content":"The application information includes the state of the <bpt id=\"p1\">[</bpt>CMouseManager Class<ept id=\"p1\">](../../mfc/reference/cmousemanager-class.md)</ept>, <bpt id=\"p2\">[</bpt>CContextMenuManager Class<ept id=\"p2\">](../../mfc/reference/ccontextmenumanager-class.md)</ept>, <bpt id=\"p3\">[</bpt>CKeyboardManager Class<ept id=\"p3\">](../../mfc/reference/ckeyboardmanager-class.md)</ept>, and the <bpt id=\"p4\">[</bpt>CUserToolsManager Class<ept id=\"p4\">](../../mfc/reference/cusertoolsmanager-class.md)</ept>.","pos":[38028,38383],"source":" The application information includes the state of the [CMouseManager Class](../../mfc/reference/cmousemanager-class.md), [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md), [CKeyboardManager Class](../../mfc/reference/ckeyboardmanager-class.md), and the [CUserToolsManager Class](../../mfc/reference/cusertoolsmanager-class.md)."},{"pos":[38390,38464],"content":"The default implementation of <ph id=\"ph1\">`CFrameImpl::OnLoadFrame`</ph> calls <ph id=\"ph2\">`LoadState`</ph>.","source":"The default implementation of `CFrameImpl::OnLoadFrame` calls `LoadState`."},{"content":"The <ph id=\"ph1\">`lpszSectionName`</ph> parameter is not the absolute path for a registry entry.","pos":[38471,38549],"source":"The `lpszSectionName` parameter is not the absolute path for a registry entry."},{"content":"It is a relative path that is added to the end of the default registry key for your application.","pos":[38550,38646]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[38647,38836],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[38893,38923],"content":"CWinAppEx::LoadWindowPlacement"},{"content":"Called by the framework when it loads the size and location of the main frame window from the registry.","pos":[38927,39030]},{"content":"Parameters","pos":[39161,39171]},{"content":"[out]","pos":[39175,39180]},{"content":"A rectangle that contains the coordinates of the main frame window when it is in the restored position.","pos":[39205,39308]},{"content":"[out]","pos":[39315,39320]},{"content":"Flags that control the position of the minimized window and how the operating system switches between a minimized window and a restored window.","pos":[39333,39476]},{"content":"[out]","pos":[39483,39488]},{"content":"An integer that specifies the show state of the window.","pos":[39503,39558]},{"content":"For more information about possible values, see <bpt id=\"p1\">[</bpt>CWnd::ShowWindow<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__showwindow)</ept>.","pos":[39559,39678],"source":" For more information about possible values, see [CWnd::ShowWindow](../../mfc/reference/cwnd-class.md#cwnd__showwindow)."},{"content":"Return Value","pos":[39688,39700]},{"content":"Nonzero if successful; 0 otherwise.","pos":[39704,39739]},{"content":"Remarks","pos":[39749,39756]},{"content":"By default, MFC automatically loads the previous position and state of the main frame window when the application starts.","pos":[39760,39881]},{"content":"For more information about how this information is stored in the registry, see <bpt id=\"p1\">[</bpt>CWinAppEx::StoreWindowPlacement<ept id=\"p1\">](#cwinappex__storewindowplacement)</ept>.","pos":[39882,40029],"source":" For more information about how this information is stored in the registry, see [CWinAppEx::StoreWindowPlacement](#cwinappex__storewindowplacement)."},{"content":"Override this method if you want to load additional information about the main frame window.","pos":[40036,40128]},{"pos":[40184,40213],"content":"CWinAppEx::m_bForceImageReset"},{"content":"Specifies whether the framework resets all toolbar images when it reloads the frame window that contains the toolbar.","pos":[40217,40334]},{"content":"Remarks","pos":[40386,40393]},{"pos":[40397,40458],"content":"The <ph id=\"ph1\">`m_bForceImageReset`</ph> data member is a protected variable.","source":"The `m_bForceImageReset` data member is a protected variable."},{"pos":[40512,40539],"content":"CWinAppEx::OnAppContextHelp"},{"pos":[40543,40648],"content":"The framework calls this method when the user requests context help for the <bpt id=\"p1\">**</bpt>Customization<ept id=\"p1\">**</ept> dialog box.","source":"The framework calls this method when the user requests context help for the **Customization** dialog box."},{"content":"Parameters","pos":[40763,40773]},{"content":"[in]","pos":[40777,40781]},{"content":"A pointer to a window object for which the user invoked context help.","pos":[40799,40868]},{"content":"[in]","pos":[40875,40879]},{"content":"A reserved value.","pos":[40901,40918]},{"content":"Remarks","pos":[40928,40935]},{"content":"This method is currently reserved for future use.","pos":[40939,40988]},{"content":"The default implementation does nothing and it is currently not called by the framework.","pos":[40989,41077]},{"pos":[41133,41162],"content":"CWinAppEx::OnClosingMainFrame"},{"pos":[41166,41243],"content":"The framework calls this method when a frame window is processing <ph id=\"ph1\">`WM_CLOSE`</ph>.","source":"The framework calls this method when a frame window is processing `WM_CLOSE`."},{"content":"Parameters","pos":[41325,41335]},{"content":"[in]","pos":[41339,41343]},{"content":"A pointer to a <ph id=\"ph1\">`CFrameImpl`</ph> object.","pos":[41360,41395],"source":" A pointer to a `CFrameImpl` object."},{"content":"Remarks","pos":[41405,41412]},{"pos":[41416,41490],"content":"The default implementation of this method saves the state of <ph id=\"ph1\">`pFrameImpl`</ph>.","source":"The default implementation of this method saves the state of `pFrameImpl`."},{"pos":[41545,41573],"content":"CWinAppEx::OnViewDoubleClick"},{"content":"Calls the user-defined command that is associated with a view when the user double-clicks anywhere within that view.","pos":[41577,41693]},{"content":"Parameters","pos":[41786,41796]},{"content":"[in]","pos":[41800,41804]},{"content":"A pointer to an object derived from the <bpt id=\"p1\">[</bpt>CView Class<ept id=\"p1\">](../../mfc/reference/cview-class.md)</ept>.","pos":[41815,41905],"source":" A pointer to an object derived from the [CView Class](../../mfc/reference/cview-class.md)."},{"content":"[in]","pos":[41912,41916]},{"content":"The view ID.","pos":[41930,41942]},{"content":"Return Value","pos":[41952,41964]},{"pos":[41975,42025],"content":"if the framework finds a command; otherwise false."},{"content":"Remarks","pos":[42035,42042]},{"content":"In order to support custom mouse behavior, you must call this function when you process the <ph id=\"ph1\">`WM_LBUTTONDBLCLK`</ph> message.","pos":[42046,42165],"source":"In order to support custom mouse behavior, you must call this function when you process the `WM_LBUTTONDBLCLK` message."},{"content":"This method will execute the command associated with the view ID supplied by <ph id=\"ph1\">`iViewId`</ph>.","pos":[42166,42253],"source":" This method will execute the command associated with the view ID supplied by `iViewId`."},{"content":"For more information about custom mouse behavior, see <bpt id=\"p1\">[</bpt>Keyboard and Mouse Customization<ept id=\"p1\">](../../mfc/keyboard-and-mouse-customization.md)</ept>.","pos":[42254,42390],"source":" For more information about custom mouse behavior, see [Keyboard and Mouse Customization](../../mfc/keyboard-and-mouse-customization.md)."},{"pos":[42443,42469],"content":"CWinAppEx::OnWorkspaceIdle"},{"content":"Parameters","pos":[42634,42644]},{"pos":[42648,42652],"content":"[in]"},{"content":"Return Value","pos":[42670,42682]},{"content":"Remarks","pos":[42692,42699]},{"pos":[42749,42772],"content":"CWinAppEx::PreLoadState"},{"content":"The framework calls this method immediately before it loads the state of the application from the registry.","pos":[42776,42883]},{"content":"Remarks","pos":[42937,42944]},{"content":"Override this method if you want to do any processing immediately before the framework loads the application state.","pos":[42948,43063]},{"pos":[43113,43136],"content":"CWinAppEx::PreSaveState"},{"content":"The framework calls this method immediately before it saves the application state.","pos":[43140,43222]},{"content":"Remarks","pos":[43276,43283]},{"content":"Override this method if you want to do any processing immediately before the framework saves the application state.","pos":[43287,43402]},{"pos":[43461,43493],"content":"CWinAppEx::ReloadWindowPlacement"},{"content":"Reloads the size and location of a window from the registry.","pos":[43497,43557]},{"content":"Parameters","pos":[43637,43647]},{"content":"[in]","pos":[43651,43655]},{"content":"A pointer to a frame window.","pos":[43668,43696]},{"content":"Return Value","pos":[43706,43718]},{"content":"Nonzero if the method was successful; 0 if the load failed or there is no data to load.","pos":[43722,43809]},{"content":"Remarks","pos":[43819,43826]},{"pos":[43830,43974],"content":"Use the function <bpt id=\"p1\">[</bpt>CWinAppEx::StoreWindowPlacement<ept id=\"p1\">](#cwinappex__storewindowplacement)</ept> to write the size and location of a window to the registry.","source":"Use the function [CWinAppEx::StoreWindowPlacement](#cwinappex__storewindowplacement) to write the size and location of a window to the registry."},{"pos":[44027,44053],"content":"CWinAppEx::SaveCustomState"},{"content":"The framework calls this method after it saves the state of the application to the registry.","pos":[44057,44149]},{"content":"Remarks","pos":[44206,44213]},{"content":"Override this method if you want to do any processing after the application saves the state to the registry.","pos":[44217,44325]},{"content":"By default, this method does nothing.","pos":[44326,44363]},{"pos":[44410,44430],"content":"CWinAppEx::SaveState"},{"content":"Writes the application state to the Windows registry.","pos":[44434,44487]},{"content":"Parameters","pos":[44867,44877]},{"content":"[in]","pos":[44881,44885]},{"content":"A string that contains the relative path of a registry key.","pos":[44907,44966]},{"content":"[in]","pos":[44973,44977]},{"content":"A pointer to a <ph id=\"ph1\">`CFrameImpl`</ph> object.","pos":[44994,45029],"source":" A pointer to a `CFrameImpl` object."},{"content":"This frame is saved to the Windows registry.","pos":[45030,45074]},{"content":"[in]","pos":[45081,45085]},{"content":"A pointer to a frame window object.","pos":[45098,45133]},{"content":"This frame is saved to the Windows registry.","pos":[45134,45178]},{"content":"Return Value","pos":[45188,45200]},{"pos":[45211,45244],"content":"if successful; <ph id=\"ph1\">`false`</ph> otherwise.","source":" if successful; `false` otherwise."},{"content":"Remarks","pos":[45254,45261]},{"content":"This method saves the state of the application and any state information for the provided frame window.","pos":[45265,45368]},{"content":"If you do not provide a frame window, the method only saves the application state.","pos":[45369,45451]},{"content":"The application information includes the state of the <bpt id=\"p1\">[</bpt>CMouseManager Class<ept id=\"p1\">](../../mfc/reference/cmousemanager-class.md)</ept>, <bpt id=\"p2\">[</bpt>CContextMenuManager Class<ept id=\"p2\">](../../mfc/reference/ccontextmenumanager-class.md)</ept>, <bpt id=\"p3\">[</bpt>CKeyboardManager Class<ept id=\"p3\">](../../mfc/reference/ckeyboardmanager-class.md)</ept>, and the <bpt id=\"p4\">[</bpt>CUserToolsManager Class<ept id=\"p4\">](../../mfc/reference/cusertoolsmanager-class.md)</ept>.","pos":[45452,45807],"source":" The application information includes the state of the [CMouseManager Class](../../mfc/reference/cmousemanager-class.md), [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md), [CKeyboardManager Class](../../mfc/reference/ckeyboardmanager-class.md), and the [CUserToolsManager Class](../../mfc/reference/cusertoolsmanager-class.md)."},{"content":"The <ph id=\"ph1\">`lpszSectionName`</ph> parameter is not the absolute path for a registry entry.","pos":[45814,45892],"source":"The `lpszSectionName` parameter is not the absolute path for a registry entry."},{"content":"It is a relative path that is appended to the end of the default registry key for your application.","pos":[45893,45992]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[45993,46182],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[46235,46261],"content":"CWinAppEx::SetRegistryBase"},{"content":"Sets the default registry path for the application.","pos":[46265,46316]},{"content":"Parameters","pos":[46398,46408]},{"content":"[in]","pos":[46412,46416]},{"content":"A string that contains the path of a registry key.","pos":[46438,46488]},{"content":"Return Value","pos":[46498,46510]},{"content":"A string that contains the path of the default registry location.","pos":[46514,46579]},{"content":"Remarks","pos":[46589,46596]},{"content":"All methods of the <bpt id=\"p1\">[</bpt>CWinAppEx Class<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md)</ept> that access the registry start in a default location.","pos":[46600,46730],"source":"All methods of the [CWinAppEx Class](../../mfc/reference/cwinappex-class.md) that access the registry start in a default location."},{"content":"Use this method to change that default registry location.","pos":[46731,46788]},{"content":"Use <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> to retrieve the default registry location.","pos":[46789,46893],"source":" Use [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) to retrieve the default registry location."},{"pos":[46944,46968],"content":"CWinAppEx::ShowPopupMenu"},{"content":"Displays a popup menu.","pos":[46972,46994]},{"content":"Parameters","pos":[47115,47125]},{"content":"[in]","pos":[47129,47133]},{"content":"A menu resource ID.","pos":[47151,47170]},{"content":"[in]","pos":[47177,47181]},{"content":"A <bpt id=\"p1\">[</bpt>CPoint<ept id=\"p1\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> that specifies the position of the menu in screen coordinates.","pos":[47193,47314],"source":" A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) that specifies the position of the menu in screen coordinates."},{"content":"[in]","pos":[47321,47325]},{"content":"A pointer to the window that owns the popup menu.","pos":[47336,47385]},{"content":"Return Value","pos":[47395,47407]},{"content":"Nonzero if the popup menu is displayed successfully; 0 otherwise.","pos":[47411,47476]},{"content":"Remarks","pos":[47486,47493]},{"pos":[47497,47557],"content":"This method displays the menu associated with <ph id=\"ph1\">`uiMenuResId`</ph>.","source":"This method displays the menu associated with `uiMenuResId`."},{"content":"To support popup menus, you must have a <bpt id=\"p1\">[</bpt>CContextMenuManager<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept> object.","pos":[47564,47683],"source":"To support popup menus, you must have a [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) object."},{"content":"If you have not initialized the <ph id=\"ph1\">`CContextMenuManager`</ph> object, <ph id=\"ph2\">`ShowPopupMenu`</ph> will fail.","pos":[47684,47772],"source":" If you have not initialized the `CContextMenuManager` object, `ShowPopupMenu` will fail."},{"pos":[47830,47861],"content":"CWinAppEx::StoreWindowPlacement"},{"content":"Called by the framework to write the size and location of the main frame window to the registry.","pos":[47865,47961]},{"content":"Parameters","pos":[48097,48107]},{"content":"[in]","pos":[48111,48115]},{"content":"Flags that control the position of the minimized window and how the operating system switches between a minimized window and a restored window.","pos":[48128,48271]},{"content":"[in]","pos":[48278,48282]},{"content":"An integer that specifies the show state of the window.","pos":[48297,48352]},{"content":"For more information about possible values, see <bpt id=\"p1\">[</bpt>CWnd::ShowWindow<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__showwindow)</ept>.","pos":[48353,48472],"source":" For more information about possible values, see [CWnd::ShowWindow](../../mfc/reference/cwnd-class.md#cwnd__showwindow)."},{"content":"[in]","pos":[48479,48483]},{"content":"A rectangle that contains the coordinates of the main frame window when it is in the restored state.","pos":[48508,48608]},{"content":"Return Value","pos":[48618,48630]},{"content":"Nonzero if successful; 0 otherwise.","pos":[48634,48669]},{"content":"Remarks","pos":[48679,48686]},{"content":"By default, MFC automatically saves the position and state of the main frame window before the application exits.","pos":[48690,48803]},{"content":"This information is stored in the Windows registry under the WindowPlacement key in the default registry location for your application.","pos":[48804,48939]},{"content":"For more information about the default registry location of your application, see <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept>.","pos":[48940,49080],"source":" For more information about the default registry location of your application, see [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase)."},{"content":"Override this method if you want to store additional information about the main frame window.","pos":[49087,49180]},{"pos":[49229,49251],"content":"CWinAppEx::WriteBinary"},{"content":"Writes binary data to the registry.","pos":[49255,49290]},{"content":"Parameters","pos":[49396,49406]},{"content":"[in]","pos":[49410,49414]},{"content":"A string that contains the name of a registry key.","pos":[49430,49480]},{"content":"[in]","pos":[49487,49491]},{"content":"The data to store.","pos":[49503,49521]},{"content":"[in]","pos":[49528,49532]},{"content":"The size of <ph id=\"ph1\">`pData`</ph> in bytes.","pos":[49545,49574],"source":" The size of `pData` in bytes."},{"content":"Return Value","pos":[49584,49596]},{"pos":[49607,49655],"content":"if this method is successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise `FALSE`."},{"content":"Remarks","pos":[49665,49672]},{"content":"The <ph id=\"ph1\">`lpszEntry`</ph> parameter is the name of a registry entry that is located under the default registry key for your application.","pos":[49676,49802],"source":"The `lpszEntry` parameter is the name of a registry entry that is located under the default registry key for your application."},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[49803,49992],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[49999,50078],"content":"If the key specified by <ph id=\"ph1\">`lpszEntry`</ph> does not exist, this method will create it.","source":"If the key specified by `lpszEntry` does not exist, this method will create it."},{"pos":[50124,50143],"content":"CWinAppEx::WriteInt"},{"content":"Writes numeric data to the registry.","pos":[50147,50183]},{"content":"Parameters","pos":[50265,50275]},{"content":"[in]","pos":[50279,50283]},{"content":"A string that contains the name of a registry key.","pos":[50299,50349]},{"content":"[in]","pos":[50356,50360]},{"content":"The data to store.","pos":[50373,50391]},{"content":"Return Value","pos":[50401,50413]},{"pos":[50424,50472],"content":"if this method is successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise `FALSE`."},{"content":"Remarks","pos":[50482,50489]},{"content":"The <ph id=\"ph1\">`lpszEntry`</ph> parameter is the name of a registry entry located under the default registry key for your application.","pos":[50493,50611],"source":"The `lpszEntry` parameter is the name of a registry entry located under the default registry key for your application."},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[50612,50801],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[50808,50887],"content":"If the key specified by <ph id=\"ph1\">`lpszEntry`</ph> does not exist, this method will create it.","source":"If the key specified by `lpszEntry` does not exist, this method will create it."},{"pos":[50936,50958],"content":"CWinAppEx::WriteObject"},{"pos":[50962,51061],"content":"Writes data derived from the <bpt id=\"p1\">[</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept> to the registry.","source":"Writes data derived from the [CObject Class](../../mfc/reference/cobject-class.md) to the registry."},{"content":"Parameters","pos":[51148,51158]},{"content":"[in]","pos":[51162,51166]},{"content":"A string that contains the value to set.","pos":[51182,51222]},{"content":"[in]","pos":[51229,51233]},{"content":"A reference to <ph id=\"ph1\">`CObject`</ph> data that the method will store.","pos":[51243,51300],"source":" A reference to `CObject` data that the method will store."},{"content":"Return Value","pos":[51310,51322]},{"pos":[51333,51381],"content":"if this method is successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise `FALSE`."},{"content":"Remarks","pos":[51391,51398]},{"content":"This method writes the <ph id=\"ph1\">`obj`</ph> data to the specified value under the default registry key.","pos":[51402,51490],"source":"This method writes the `obj` data to the specified value under the default registry key."},{"content":"Use <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> to determine the current registry key.","pos":[51491,51591],"source":" Use [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) to determine the current registry key."},{"pos":[51647,51676],"content":"CWinAppEx::WriteSectionBinary"},{"content":"Writes binary data to a value in the registry.","pos":[51680,51726]},{"content":"Parameters","pos":[51869,51879]},{"content":"[in]","pos":[51883,51887]},{"content":"A string that contains the name of a registry key","pos":[51908,51957]},{"content":"[in]","pos":[51964,51968]},{"content":"A string that contains the value to set.","pos":[51984,52024]},{"content":"[in]","pos":[52031,52035]},{"content":"The data to write to the registry.","pos":[52047,52081]},{"content":"[in]","pos":[52088,52092]},{"content":"The size of <ph id=\"ph1\">`pData`</ph> in bytes.","pos":[52105,52134],"source":" The size of `pData` in bytes."},{"content":"Return Value","pos":[52144,52156]},{"pos":[52167,52215],"content":"if this method is successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise `FALSE`."},{"content":"Remarks","pos":[52225,52232]},{"content":"The <ph id=\"ph1\">`lpszSubSection`</ph> parameter is not the absolute path for a registry entry.","pos":[52236,52313],"source":"The `lpszSubSection` parameter is not the absolute path for a registry entry."},{"content":"It is a relative path that is appended to the end of the default registry key for your application.","pos":[52314,52413]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[52414,52603],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[52610,52689],"content":"If the key specified by <ph id=\"ph1\">`lpszEntry`</ph> does not exist, this method will create it.","source":"If the key specified by `lpszEntry` does not exist, this method will create it."},{"pos":[52742,52768],"content":"CWinAppEx::WriteSectionInt"},{"content":"Writes numeric data to the registry.","pos":[52772,52808]},{"content":"Parameters","pos":[52927,52937]},{"content":"[in]","pos":[52941,52945]},{"content":"A string that contains the relative path of a registry key.","pos":[52966,53025]},{"content":"[in]","pos":[53032,53036]},{"content":"A string that contains the value to set.","pos":[53052,53092]},{"content":"[in]","pos":[53099,53103]},{"content":"The data to write to the registry.","pos":[53116,53150]},{"content":"Return Value","pos":[53160,53172]},{"pos":[53183,53231],"content":"if this method is successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise `FALSE`."},{"content":"Remarks","pos":[53241,53248]},{"content":"The <ph id=\"ph1\">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.","pos":[53252,53328],"source":"The `lpszSubSection` parameter is not an absolute path for a registry entry."},{"content":"It is a relative path that is appended to the default registry key for your application.","pos":[53329,53417]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[53418,53607],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[53614,53693],"content":"If the key specified by <ph id=\"ph1\">`lpszEntry`</ph> does not exist, this method will create it.","source":"If the key specified by `lpszEntry` does not exist, this method will create it."},{"pos":[53749,53778],"content":"CWinAppEx::WriteSectionObject"},{"pos":[53782,53894],"content":"Writes data derived from the <bpt id=\"p1\">[</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept> to a specific registry value.","source":"Writes data derived from the [CObject Class](../../mfc/reference/cobject-class.md) to a specific registry value."},{"content":"Parameters","pos":[54018,54028]},{"content":"[in]","pos":[54032,54036]},{"content":"A string that contains the name of a registry key.","pos":[54057,54107]},{"content":"[in]","pos":[54114,54118]},{"content":"A string that contains the name of the value to set.","pos":[54134,54186]},{"content":"[in]","pos":[54193,54197]},{"content":"The data to store.","pos":[54207,54225]},{"content":"Return Value","pos":[54235,54247]},{"pos":[54258,54306],"content":"if this method is successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise `FALSE`."},{"content":"Remarks","pos":[54316,54323]},{"content":"The <ph id=\"ph1\">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.","pos":[54327,54403],"source":"The `lpszSubSection` parameter is not an absolute path for a registry entry."},{"content":"It is a relative path that is appended to the end of the default registry key for your application.","pos":[54404,54503]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept>, respectively.","pos":[54504,54694],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase), respectively."},{"pos":[54701,54843],"content":"If the value specified by <ph id=\"ph1\">`lpszEntry`</ph> does not exist under the registry key specified by <ph id=\"ph2\">`lpszSubSection`</ph>, this method will create that value.","source":"If the value specified by `lpszEntry` does not exist under the registry key specified by `lpszSubSection`, this method will create that value."},{"pos":[54899,54928],"content":"CWinAppEx::WriteSectionString"},{"content":"Writes string data to a value in the registry.","pos":[54932,54978]},{"content":"Parameters","pos":[55107,55117]},{"content":"[in]","pos":[55121,55125]},{"content":"A string that contains the name of a registry key.","pos":[55146,55196]},{"content":"[in]","pos":[55203,55207]},{"content":"A string that contains the value to set.","pos":[55223,55263]},{"content":"[in]","pos":[55270,55274]},{"content":"The string data to write to the registry.","pos":[55290,55331]},{"content":"Return Value","pos":[55341,55353]},{"pos":[55364,55412],"content":"if this method is successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise `FALSE`."},{"content":"Remarks","pos":[55422,55429]},{"content":"The <ph id=\"ph1\">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.","pos":[55433,55509],"source":"The `lpszSubSection` parameter is not an absolute path for a registry entry."},{"content":"It is a relative path that is appended to the end of the default registry key for your application.","pos":[55510,55609]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept>, respectively.","pos":[55610,55800],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase), respectively."},{"pos":[55807,55911],"content":"If the value specified by <ph id=\"ph1\">`lpszEntry`</ph> does not exist under <ph id=\"ph2\">`lpszSubSection`</ph>, this method will create it.","source":"If the value specified by `lpszEntry` does not exist under `lpszSubSection`, this method will create it."},{"pos":[55960,55982],"content":"CWinAppEx::WriteString"},{"content":"Writes string data to the registry.","pos":[55986,56021]},{"content":"Parameters","pos":[56113,56123]},{"content":"[in]","pos":[56127,56131]},{"content":"A string that contains the name of a registry key.","pos":[56147,56197]},{"content":"[in]","pos":[56204,56208]},{"content":"The data to store.","pos":[56224,56242]},{"content":"Return Value","pos":[56252,56264]},{"pos":[56275,56323],"content":"if this method is successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise `FALSE`."},{"content":"Remarks","pos":[56333,56340]},{"content":"The <ph id=\"ph1\">`lpszEntry`</ph> parameter is the name of a registry entry located under the default registry key for your application.","pos":[56344,56462],"source":"The `lpszEntry` parameter is the name of a registry entry located under the default registry key for your application."},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](#cwinappex__setregistrybase)</ept> respectively.","pos":[56463,56652],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively."},{"pos":[56659,56738],"content":"If the key specified by <ph id=\"ph1\">`lspzEntry`</ph> does not exist, this method will create it.","source":"If the key specified by `lspzEntry` does not exist, this method will create it."},{"content":"See Also","pos":[56747,56755]},{"content":"Hierarchy Chart","pos":[56760,56775]},{"content":"Classes","pos":[56812,56819]},{"content":"CWinApp Class","pos":[56862,56875]},{"content":"CMouseManager Class","pos":[56920,56939]},{"content":"CContextMenuManager Class","pos":[56990,57015]},{"content":"CKeyboardManager Class","pos":[57072,57094]},{"content":"CUserToolsManager Class","pos":[57148,57171]}],"content":"---\ntitle: \"CWinAppEx Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CWinAppEx\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CWinAppEx class\"\nms.assetid: a3d3e053-3e22-463f-9444-c73abb1bb9d7\ncaps.latest.revision: 37\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CWinAppEx Class\n`CWinAppEx` handles the application state, saves the state to the registry, loads the state from the registry, initializes application managers, and provides links to those same application managers.  \n  \n## Syntax  \n  \n```  \nclass CWinAppEx : public CWinApp  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinAppEx::CWinAppEx](#cwinappex__cwinappex)|Constructs a `CWinAppEx` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinAppEx::CleanState](#cwinappex__cleanstate)|Removes information about the application from the Windows registry.|  \n|[CWinAppEx::EnableLoadWindowPlacement](#cwinappex__enableloadwindowplacement)|Specifies whether the application will load the initial size and location of the main frame window from the registry.|  \n|[CWinAppEx::EnableTearOffMenus](#cwinappex__enabletearoffmenus)|Enables tear-off menus for the application.|  \n|[CWinAppEx::EnableUserTools](#cwinappex__enableusertools)|Enables the user to create custom menu commands in the application.|  \n|[CWinAppEx::ExitInstance](#cwinappex__exitinstance)|Called by the framework from within the `Run` member function to exit this instance of the application. (Overrides [CWinApp::ExitInstance](../../mfc/reference/cwinapp-class.md#cwinapp__exitinstance).)|  \n|[CWinAppEx::GetBinary](#cwinappex__getbinary)|Reads binary data that is associated with the specified registry value.|  \n|[CWinAppEx::GetContextMenuManager](#cwinappex__getcontextmenumanager)|Returns a pointer to the global [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) object.|  \n|[CWinAppEx::GetDataVersion](#cwinappex__getdataversion)||  \n|[CWinAppEx::GetDataVersionMajor](#cwinappex__getdataversionmajor)|Returns the major version of the application saved in the Windows registry.|  \n|[CWinAppEx::GetDataVersionMinor](#cwinappex__getdataversionminor)|Returns the minor version of the application saved in the Windows registry.|  \n|[CWinAppEx::GetInt](#cwinappex__getint)|Reads numeric data that is associated with the specified value from the registry.|  \n|[CWinAppEx::GetKeyboardManager](#cwinappex__getkeyboardmanager)|Returns a pointer to the global [CKeyboardManager](../../mfc/reference/ckeyboardmanager-class.md) object.|  \n|[CWinAppEx::GetMouseManager](#cwinappex__getmousemanager)|Returns a pointer to the global [CMouseManager](../../mfc/reference/cmousemanager-class.md) object.|  \n|[CWinAppEx::GetObject](#cwinappex__getobject)|Reads `CObject`-derived data that is associated with the specified value from the registry.|  \n|[CWinAppEx::GetRegSectionPath](#cwinappex__getregsectionpath)|Returns a string that is the path of a registry key. This path concatenates the supplied relative path with the application path.|  \n|[CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase)|Returns the registry path for the application.|  \n|[CWinAppEx::GetSectionBinary](#cwinappex__getsectionbinary)|Reads binary data that is associated with the specified key and value from the registry.|  \n|[CWinAppEx::GetSectionInt](#cwinappex__getsectionint)|Reads numeric data from the registry associated with the specified key and value.|  \n|[CWinAppEx::GetSectionObject](#cwinappex__getsectionobject)|Reads `CObject` data that is associated with the specified key and value from the registry.|  \n|[CWinAppEx::GetSectionString](#cwinappex__getsectionstring)|Reads string data that is associated with the specified key and value from the registry.|  \n|[CWinAppEx::GetShellManager](#cwinappex__getshellmanager)|Returns a pointer to the global [CShellManager](../../mfc/reference/cshellmanager-class.md) object.|  \n|[CWinAppEx::GetString](#cwinappex__getstring)|Reads string data that is associated with the specified value from the registry.|  \n|[CWinAppEx::GetTooltipManager](#cwinappex__gettooltipmanager)|Returns a pointer to the global [CTooltipManager](../../mfc/reference/ctooltipmanager-class.md) object.|  \n|[CWinAppEx::GetUserToolsManager](#cwinappex__getusertoolsmanager)|Returns a pointer to the global [CUserToolsManager](../../mfc/reference/cusertoolsmanager-class.md) object.|  \n|[CWinAppEx::InitContextMenuManager](#cwinappex__initcontextmenumanager)|Initializes the `CContextMenuManager` object.|  \n|[CWinAppEx::InitKeyboardManager](#cwinappex__initkeyboardmanager)|Initializes the `CKeyboardManager` object.|  \n|[CWinAppEx::InitMouseManager](#cwinappex__initmousemanager)|Initializes the `CMouseManager` object.|  \n|[CWinAppEx::InitShellManager](#cwinappex__initshellmanager)|Initializes the `CShellManager` class|  \n|[CWinAppEx::InitTooltipManager](#cwinappex__inittooltipmanager)|Initializes the `CTooltipManager` class.|  \n|[CWinAppEx::IsResourceSmartUpdate](#cwinappex__isresourcesmartupdate)||  \n|[CWinAppEx::IsStateExists](#cwinappex__isstateexists)|Indicates whether the specified key is in the registry.|  \n|[CWinAppEx::LoadState](#cwinappex__loadstate)|Loads the application state from the registry.|  \n|[CWinAppEx::OnAppContextHelp](#cwinappex__onappcontexthelp)|Called by the framework when the user requests context help for the **Customization** dialog box.|  \n|[CWinAppEx::OnViewDoubleClick](#cwinappex__onviewdoubleclick)|Calls the user-defined command when the user double-clicks anywhere in the application.|  \n|[CWinAppEx::OnWorkspaceIdle](#cwinappex__onworkspaceidle)||  \n|[CWinAppEx::SaveState](#cwinappex__savestate)|Writes the state of the application framework to the Windows registry.|  \n|[CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase)|Sets the path of the default registry key. This key will serve as a root for all subsequent registry calls.|  \n|[CWinAppEx::ShowPopupMenu](#cwinappex__showpopupmenu)|Displays a popup menu.|  \n|[CWinAppEx::WriteBinary](#cwinappex__writebinary)|Writes the binary data to the specified registry value.|  \n|[CWinAppEx::WriteInt](#cwinappex__writeint)|Writes the numeric data to the specified registry value.|  \n|[CWinAppEx::WriteObject](#cwinappex__writeobject)|Writes data that is derived from the [CObject Class](../../mfc/reference/cobject-class.md) to the specified registry value.|  \n|[CWinAppEx::WriteSectionBinary](#cwinappex__writesectionbinary)|Writes the binary data to a value of the specified registry key.|  \n|[CWinAppEx::WriteSectionInt](#cwinappex__writesectionint)|Writes the numeric data to a value of the specified registry key.|  \n|[CWinAppEx::WriteSectionObject](#cwinappex__writesectionobject)|Writes data derived from the `CObject` class to a value of the specified registry key.|  \n|[CWinAppEx::WriteSectionString](#cwinappex__writesectionstring)|Writes the string data to a value of the specified registry key.|  \n|[CWinAppEx::WriteString](#cwinappex__writestring)|Writes the string data to the specified registry value.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinAppEx::LoadCustomState](#cwinappex__loadcustomstate)|Called by the framework when the application state has been loaded.|  \n|[CWinAppEx::LoadWindowPlacement](#cwinappex__loadwindowplacement)|Called by the framework when it loads the size and location of your application from the registry. The loaded data includes the size and location of the main frame at the time your application last closed.|  \n|[CWinAppEx::OnClosingMainFrame](#cwinappex__onclosingmainframe)|Called by the framework when a main frame window is processing `WM_CLOSE`.|  \n|[CWinAppEx::PreLoadState](#cwinappex__preloadstate)|Called by the framework immediately before the application state is loaded.|  \n|[CWinAppEx::PreSaveState](#cwinappex__presavestate)|Called by the framework immediately before the application state is saved.|  \n|[CWinAppEx::ReloadWindowPlacement](#cwinappex__reloadwindowplacement)|Reloads the size and location of the supplied window from the registry|  \n|[CWinAppEx::SaveCustomState](#cwinappex__savecustomstate)|Called by the framework after it writes the application state to the registry.|  \n|[CWinAppEx::StoreWindowPlacement](#cwinappex__storewindowplacement)|Called by the framework to write the size and location of the main frame to the registry.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinAppEx::m_bForceImageReset](#cwinappex__m_bforceimagereset)|Specifies whether the framework will reset all toolbar images when the frame window that contains the toolbar is loaded.|  \n  \n## Remarks  \n Much of the functionality provided by the MFC framework depends on the `CWinAppEx` class. You can incorporate the `CWinAppEx` class into your application in one of two ways:  \n  \n-   Construct a `CWinAppEx` class in the main thread.  \n  \n-   Derive the main application class from `CWinAppEx`.  \n  \n After you incorporate `CWinAppEx` into your application, you can initialize any one of the application managers. Before you use an application manager, you must initialize it by calling the appropriate initialize method. To obtain a pointer to a specific manager, call the associated get method. The `CWinAppEx` class manages the following application managers: [CMouseManager Class](../../mfc/reference/cmousemanager-class.md), [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md), [CKeyboardManager Class](../../mfc/reference/ckeyboardmanager-class.md), [CUserToolsManager Class](../../mfc/reference/cusertoolsmanager-class.md), and [CMenuTearOffManager Class](../../mfc/reference/cmenutearoffmanager-class.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWinThread](../../mfc/reference/cwinthread-class.md)  \n  \n [CWinApp](../../mfc/reference/cwinapp-class.md)  \n  \n [CWinAppEx](../../mfc/reference/cwinappex-class.md)  \n  \n## Requirements  \n **Header:** afxwinappex.h  \n  \n##  <a name=\"cwinappex__cleanstate\"></a>  CWinAppEx::CleanState  \n Removes all the information about the application from the Windows registry.  \n  \n```  \nvirtual BOOL CleanState(LPCTSTR lpszSectionName=NULL);\n```  \n  \n### Parameters  \n [in] `lpszSectionName`  \n A string that contains a path of a registry key.  \n  \n### Return Value  \n Nonzero if the method was successful; otherwise 0.  \n  \n### Remarks  \n This method clears application data from a specific section of the registry. You can specify the section to clear by using the parameter `lpszSectionName`. If `lpszSectionName` is `NULL`, this method will use the default registry path stored in the `CWinAppEx` object. To get the default registry path, use [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase).  \n  \n##  <a name=\"cwinappex__cwinappex\"></a>  CWinAppEx::CWinAppEx  \n Constructs a `CWinAppEx` object.  \n  \n```  \nCWinAppEx(BOOL bResourceSmartUpdate = FALSE);\n```  \n  \n### Parameters  \n [in] `bResourceSmartUpdate`  \n A Boolean parameter that specifies whether the workspace object should detect and handle resource updates.  \n  \n### Remarks  \n The `CWinAppEx` class has initialization methods, provides functionality for saving and loading application information to the registry, and controls global application settings. It also enables you to use global managers such as the [CKeyboardManager Class](../../mfc/reference/ckeyboardmanager-class.md) and the [CUserToolsManager Class](../../mfc/reference/cusertoolsmanager-class.md). Each application can have only one instance of the `CWinAppEx` class.  \n  \n##  <a name=\"cwinappex__enableloadwindowplacement\"></a>  CWinAppEx::EnableLoadWindowPlacement  \n Specifies whether the application will load the initial size and location of the main frame window from the registry.  \n  \n```  \nvoid EnableLoadWindowPlacement(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n Specifies whether the application loads the initial size and location of the main frame window from the registry.  \n  \n### Remarks  \n By default, the size and location of the main frame is loaded from the registry together with other application settings. This occurs during [CWinAppEx::LoadState](#cwinappex__loadstate). If you do not want to load the initial window placement from the registry, call this method with `bEnable` set to `false`.  \n  \n##  <a name=\"cwinappex__enabletearoffmenus\"></a>  CWinAppEx::EnableTearOffMenus  \n Creates and initializes a [CMenuTearOffManager](../../mfc/reference/cmenutearoffmanager-class.md) object.  \n  \n```  \nBOOL EnableTearOffMenus(\n    LPCTSTR lpszRegEntry,  \n    const UINT uiCmdFirst,  \n    const UINT uiCmdLast);\n```  \n  \n### Parameters  \n [in] `lpszRegEntry`  \n A string that contains the path of a registry key. The application uses this registry key to store information for the tear-off menus.  \n  \n [in] `uiCmdFirst`  \n The first tear off menu ID.  \n  \n [in] `uiCmdLast`  \n The last tear off menu ID.  \n  \n### Return Value  \n `True` if the `CMenuTearOffManager` is created and initialized successfully; `false` if an error occurs or if the `CMenuTearOffManager` already exists.  \n  \n### Remarks  \n Use this function to enable tear-off menus in your application. You should call this function from `InitInstance`.  \n  \n##  <a name=\"cwinappex__enableusertools\"></a>  CWinAppEx::EnableUserTools  \n Enables the user to create custom menu commands that reduce keystrokes in your application. This method creates a [CUserToolsManager](../../mfc/reference/cusertoolsmanager-class.md) object.  \n  \n```  \nBOOL EnableUserTools(\n    const UINT uiCmdToolsDummy,  \n    const UINT uiCmdFirst,  \n    const UINT uiCmdLast,  \n    CRuntimeClass* pToolRTC = RUNTIME_CLASS(CUserTool),  \n    UINT uArgMenuID = 0,  \n    UINT uInitDirMenuID = 0);\n```  \n  \n### Parameters  \n [in] `uiCmdToolsDummy`  \n An unsigned integer that the framework uses as a placeholder for the command ID of the user tools menu.  \n  \n [in] `uiCmdFirst`  \n The command ID for the first user tool command.  \n  \n [in] `uiCmdLast`  \n The command ID for the last user tool command.  \n  \n [in] `pToolRTC`  \n A class that the `CUserToolsManager` object uses to create new user tools.  \n  \n [in] `uArgMenuID`  \n The argument menu ID.  \n  \n [in] `uInitDirMenuID`  \n The menu ID for the initial tool directory.  \n  \n### Return Value  \n `TRUE` if the method creates and initializes a `CUserToolsManager` object; `FALSE` if the method fails or if a `CUserToolsManager` object already exists.  \n  \n### Remarks  \n When you enable user-defined tools, the framework automatically supports a dynamic menu that can be extended during customization. The framework associates each new item with an external command. The framework invokes these commands when the user selects the appropriate item from the **Tools** menu.  \n  \n Every time the user adds a new item, the framework creates a new object. The class type for the new object is defined by `pToolRTC`. The `pToolRTC` class type must be derived from the [CUserTool Class](../../mfc/reference/cusertool-class.md).  \n  \n For more information about user tools and how to incorporate them into your application, see [User-defined Tools](../../mfc/user-defined-tools.md).  \n  \n##  <a name=\"cwinappex__exitinstance\"></a>  CWinAppEx::ExitInstance  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int ExitInstance();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cwinappex__getbinary\"></a>  CWinAppEx::GetBinary  \n Reads binary data from a specified registry key.  \n  \n```  \nBOOL GetBinary(\n    LPCTSTR lpszEntry,  \n    LPBYTE* ppData,  \n    UINT* pBytes);\n```  \n  \n### Parameters  \n [in] `lpszEntry`  \n A string that contains the name of a registry key.  \n  \n [out] `ppData`  \n A pointer to the buffer that the method fills with the binary data.  \n  \n [out] `pBytes`  \n A pointer to an unsigned integer that the method uses to write the number of bytes read.  \n  \n### Return Value  \n `True` if successful; `false` otherwise.  \n  \n### Remarks  \n This method reads binary data written to the registry. To write data to the registry, use the methods [CWinAppEx::WriteBinary](#cwinappex__writebinary) and [CWinAppEx::WriteSectionBinary](#cwinappex__writesectionbinary).  \n  \n The `lpszEntry` parameter is the name of a registry entry located under the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n##  <a name=\"cwinappex__getcontextmenumanager\"></a>  CWinAppEx::GetContextMenuManager  \n Returns a pointer to the global [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) object.  \n  \n```  \nCContextMenuManager* GetContextMenuManager();\n```  \n  \n### Return Value  \n A pointer to the global `CContextMenuManager` object.  \n  \n### Remarks  \n If the CContextMenuManager object is not initialized, this function calls [CWinAppEx::InitContextMenuManager](#cwinappex__initcontextmenumanager) before it returns a pointer.  \n  \n##  <a name=\"cwinappex__getdataversion\"></a>  CWinAppEx::GetDataVersion  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetDataVersion() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cwinappex__getdataversionmajor\"></a>  CWinAppEx::GetDataVersionMajor  \n Returns the major version of the application that is saved in the Windows registry when you call [CWinAppEx::SaveState](#cwinappex__savestate).  \n  \n```  \nint GetDataVersionMajor() const;\n\n \n```  \n  \n### Return Value  \n An integer value that contains the major version number.  \n  \n##  <a name=\"cwinappex__getdataversionminor\"></a>  CWinAppEx::GetDataVersionMinor  \n Returns the minor version of the application that is saved in the Windows registry when you call [CWinAppEx::SaveState](#cwinappex__savestate).  \n  \n```  \nint GetDataVersionMinor() const;\n\n \n```  \n  \n### Return Value  \n An integer value that contains the minor version number.  \n  \n##  <a name=\"cwinappex__getint\"></a>  CWinAppEx::GetInt  \n Reads integer data from a specified registry key.  \n  \n```  \nint GetInt(\n    LPCTSTR lpszEntry,  \n    int nDefault = 0);\n```  \n  \n### Parameters  \n [in] `lpszEntry`  \n A string that contains the name of a registry entry.  \n  \n [in] `nDefault`  \n The default value that the method returns if the specified registry entry does not exist.  \n  \n### Return Value  \n The registry data if the method was successful; otherwise `nDefault`.  \n  \n### Remarks  \n This method reads integer data from the registry. If there is no integer data associated with the registry key indicated by `lpszEntry`, this method returns `nDefault`. To write data to the registry, use the methods [CWinAppEx::WriteSectionInt](#cwinappex__writesectionint) and [CWinAppEx::WriteInt](#cwinappex__writeint).  \n  \n The `lpszEntry` parameter is the name of a registry entry located under the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n##  <a name=\"cwinappex__getkeyboardmanager\"></a>  CWinAppEx::GetKeyboardManager  \n Returns a pointer to the global [CKeyboardManager](../../mfc/reference/ckeyboardmanager-class.md) object.  \n  \n```  \nCKeyboardManager* GetKeyboardManager();\n```  \n  \n### Return Value  \n A pointer to the global `CKeyboardManager` object.  \n  \n### Remarks  \n If the keyboard manager is not initialized, this function calls [CWinAppEx::InitKeyboardManager](#cwinappex__initkeyboardmanager) before it returns a pointer.  \n  \n##  <a name=\"cwinappex__getmousemanager\"></a>  CWinAppEx::GetMouseManager  \n Returns a pointer to the global [CMouseManager](../../mfc/reference/cmousemanager-class.md) object.  \n  \n```  \nCMouseManager* GetMouseManager();\n```  \n  \n### Return Value  \n A pointer to the global `CMouseManager` object.  \n  \n### Remarks  \n If the mouse manager is not initialized,, this function calls [CWinAppEx::InitMouseManager](#cwinappex__initmousemanager) before it returns a pointer.  \n  \n##  <a name=\"cwinappex__getobject\"></a>  CWinAppEx::GetObject  \n Reads [CObject](../../mfc/reference/cobject-class.md)-dervied data from the registry.  \n  \n```  \nBOOL GetObject(\n    LPCTSTR lpszEntry,  \n    CObject& obj);\n```  \n  \n### Parameters  \n [in] `lpszEntry`  \n A string that contains the relative path of a registry entry.  \n  \n [out] `obj`  \n A reference to a `CObject`. The method uses this reference to store the registry data.  \n  \n### Return Value  \n Nonzero if the method was successful; otherwise 0.  \n  \n### Remarks  \n This method reads data from the registry that is derived from `CObject`. To write `CObject` data to the registry, use either [CWinAppEx::WriteObject](#cwinappex__writeobject) or [CWinAppEx::WriteSectionObject](#cwinappex__writesectionobject).  \n  \n The `lpszEntry` parameter is the name of a registry entry that is located under the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n##  <a name=\"cwinappex__getregistrybase\"></a>  CWinAppEx::GetRegistryBase  \n Retrieves the default registry path for the application.  \n  \n```  \nLPCTSTR GetRegistryBase();\n```  \n  \n### Return Value  \n A string that contains the path of the default registry location.  \n  \n### Remarks  \n All methods of the [CWinAppEx Class](../../mfc/reference/cwinappex-class.md) that access the registry start in a default location. Use this method to retrieve a path of the default registry location. Use [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) to change the default registry location.  \n  \n##  <a name=\"cwinappex__getregsectionpath\"></a>  CWinAppEx::GetRegSectionPath  \n Creates and returns the absolute path of a registry key.  \n  \n```  \nCString GetRegSectionPath(LPCTSTR szSectionAdd = _T(\"\"));\n```  \n  \n### Parameters  \n [in] `szSectionAdd`  \n A string that contains the relative path of a registry key.  \n  \n### Return Value  \n A `CString` that contains the absolute path of a registry key.  \n  \n### Remarks  \n This method defines the registry key's absolute path by appending the relative path in `szSectionAdd` to the default registry location for your application. To get the default registry key, use the method [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase).  \n  \n##  <a name=\"cwinappex__getsectionbinary\"></a>  CWinAppEx::GetSectionBinary  \n Reads binary data from the registry.  \n  \n```  \nBOOL GetSectionBinary(\n    LPCTSTR lpszSubSection,  \n    LPCTSTR lpszEntry,  \n    LPBYTE* ppData,  \n    UINT* pBytes);\n```  \n  \n### Parameters  \n [in] `lpszSubSection`  \n A string that contains the relative path of a registry key.  \n  \n [in] `lpszEntry`  \n A string that contains the value to read.  \n  \n [out] `ppData`  \n A pointer to the buffer where the method stores the data.  \n  \n [out] `pBytes`  \n A pointer to an unsigned integer. The method writes the size of `ppData` to this parameter.  \n  \n### Return Value  \n `True` if successful; otherwise `false`.  \n  \n### Remarks  \n This method reads binary data that is written to the registry using the methods [CWinAppEx::WriteBinary](#cwinappex__writebinary) and [CWinAppEx::WriteSectionBinary](#cwinappex__writesectionbinary).  \n  \n The `lpszSubSection` parameter is not an absolute path for a registry entry. It is a relative path that is appended to the end of the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n##  <a name=\"cwinappex__getsectionint\"></a>  CWinAppEx::GetSectionInt  \n Reads integer data from the registry.  \n  \n```  \nint GetSectionInt(\n    LPCTSTR lpszSubSection,  \n    LPCTSTR lpszEntry,  \n    int nDefault = 0);\n```  \n  \n### Parameters  \n [in] `lpszSubSection`  \n A string that contains the relative path of a registry key.  \n  \n [in] `lpszEntry`  \n A string that contains the value to read.  \n  \n [in] `nDefault`  \n The default value to return if the specified value does not exist.  \n  \n### Return Value  \n The integer data that is stored in the specified registry value; `nDefault` if the data does not exist.  \n  \n### Remarks  \n Use the methods [CWinAppEx::WriteInt](#cwinappex__writeint) and [CWinAppEx::WriteSectionInt](#cwinappex__writesectionint) to write integer data to the registry.  \n  \n The `lpszSubSection` parameter is not an absolute path of a registry entry. It is a relative path that is added to the end of the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n##  <a name=\"cwinappex__getsectionobject\"></a>  CWinAppEx::GetSectionObject  \n Reads [CObject](../../mfc/reference/cobject-class.md) registry data from the registry.  \n  \n```  \nBOOL GetSectionObject(\n    LPCTSTR lpszSubSection,  \n    LPCTSTR lpszEntry,  \n    CObject& obj);\n```  \n  \n### Parameters  \n [in] `lpszSubSection`  \n A string that contains the relative path of a registry key.  \n  \n [in] `lpszEntry`  \n A string that contains the value to read.  \n  \n [out] `obj`  \n A reference to a `CObject`. The method uses this `CObject` to store the registry data.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This method reads data from the registry. The data read is `CObject` data, or data for a class derived from `CObject`. To write `CObject` data to the registry, use either [CWinAppEx::WriteObject](#cwinappex__writeobject) or [CWinAppEx::WriteSectionObject](#cwinappex__writesectionobject).  \n  \n The `lpszSubSection` parameter is not an absolute path for a registry entry. It is a relative path that is appended to the end of the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n##  <a name=\"cwinappex__getsectionstring\"></a>  CWinAppEx::GetSectionString  \n Reads string data from the registry.  \n  \n```  \nCString GetSectionString(\n    LPCTSTR lpszSubSection,  \n    LPCTSTR lpszEntry,  \n    LPCTSTR lpszDefault = _T(\"\"));\n```  \n  \n### Parameters  \n [in] `lpszSubSection`  \n A string that contains the relative path of a registry key.  \n  \n [in] `lpszEntry`  \n A string that contains the value to read.  \n  \n [in] `lpszDefault`  \n The default value to return if the specified value does not exist.  \n  \n### Return Value  \n The string data stored in the specified registry value if the data exists; otherwise `lpszDefault`.  \n  \n### Remarks  \n This method reads string data written to the registry. Use [CWinAppEx::WriteString](#cwinappex__writestring) and [CWinAppEx::WriteSectionString](#cwinappex__writesectionstring) to write string data to the registry.  \n  \n The `lpszSubSection` parameter is not an absolute path for a registry entry. It is a relative path that is appended to the end of the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n##  <a name=\"cwinappex__getshellmanager\"></a>  CWinAppEx::GetShellManager  \n Returns a pointer to the global [CShellManager](../../mfc/reference/cshellmanager-class.md) object.  \n  \n```  \nCShellManager* GetShellManager();\n```  \n  \n### Return Value  \n A pointer to the global `CShellManager` object.  \n  \n### Remarks  \n If the `CShellManager` object is not initialized, this function calls [CWinAppEx::InitShellManager](#cwinappex__initshellmanager) before it returns a pointer.  \n  \n##  <a name=\"cwinappex__getstring\"></a>  CWinAppEx::GetString  \n Reads string data from a specified registry key.  \n  \n```  \nCString GetString(\n    LPCTSTR lpszEntry,  \n    LPCTSTR lpzDefault= _T(\"\"));\n```  \n  \n### Parameters  \n [in] `lpszEntry`  \n A string that contains the name of a registry key  \n  \n [in] `lpzDefault`  \n The default value that the method returns if the specified registry entry does not exist.  \n  \n### Return Value  \n The string data stored in the registry if successful; `lpszDefault` otherwise.  \n  \n### Remarks  \n This method reads string data written to the registry. To write data to the registry, use the methods [CWinAppEx::WriteString](#cwinappex__writestring) or [CWinAppEx::WriteSectionString](#cwinappex__writesectionstring).  \n  \n The `lpszEntry` parameter is the name of a registry entry located under the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n##  <a name=\"cwinappex__gettooltipmanager\"></a>  CWinAppEx::GetTooltipManager  \n Returns a pointer to the global [CTooltipManager](../../mfc/reference/ctooltipmanager-class.md) object.  \n  \n```  \nCTooltipManager* GetTooltipManager();\n```  \n  \n### Return Value  \n A pointer to the global `CTooltipManager` object.  \n  \n### Remarks  \n If the `CTooltipManager` object is not initialized, this function calls [CWinAppEx::InitTooltipManager](#cwinappex__inittooltipmanager) before it returns a pointer.  \n  \n##  <a name=\"cwinappex__getusertoolsmanager\"></a>  CWinAppEx::GetUserToolsManager  \n Returns a pointer to the global [CUserToolsManager](../../mfc/reference/cusertoolsmanager-class.md) object.  \n  \n```  \nCUserToolsManager* GetUserToolsManager();\n```  \n  \n### Return Value  \n A pointer to the global `CUserToolsManager` object; `NULL` if user tools management is not enabled for the application.  \n  \n### Remarks  \n Before you retrieve a pointer to the `CUserToolsManager` object, you must initialize the manager by calling [CWinAppEx::EnableUserTools](#cwinappex__enableusertools).  \n  \n##  <a name=\"cwinappex__initcontextmenumanager\"></a>  CWinAppEx::InitContextMenuManager  \n Initializes the [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) object.  \n  \n```  \nBOOL InitContextMenuManager();\n```  \n  \n### Return Value  \n Nonzero if the method creates the CContextMenuManager object; 0 if the `CContextMenuManager` object already exists.  \n  \n### Remarks  \n If you call [CWinAppEx::GetContextMenuManager](#cwinappex__getcontextmenumanager), the default implementation of that method calls `InitContextMenuManager`.  \n  \n If your application already has a context menu manager and you call `InitContextMenuManager`, your application will have an [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c) failure. Therefore, you should not call `InitContextMenuManager` if you create a `CContextMenuManager` object directly. If you are not using a custom `CContextMenuManager`, you should use `GetContextMenuManager` to create a `CContextMenuManager` object.  \n  \n##  <a name=\"cwinappex__initkeyboardmanager\"></a>  CWinAppEx::InitKeyboardManager  \n Initializes the [CKeyboardManager](../../mfc/reference/ckeyboardmanager-class.md) object.  \n  \n```  \nBOOL InitKeyboardManager();\n```  \n  \n### Return Value  \n Nonzero if the method creates the `CKeyboardManager` object; 0 if the `CKeyboardManager` object already exists.  \n  \n### Remarks  \n If you call [CWinAppEx::GetKeyboardManager](#cwinappex__getkeyboardmanager), the default implementation of that method calls `InitKeyboardManager`.  \n  \n If your application already has a keyboard manager and you call `InitKeyboardManager`, your application will have an [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c) failure. Therefore, you should not call `InitKeyboardManager` if you create a `CKeyboardManager` object directly. If you are not using a custom `CKeyboardManager`, you should use `GetKeyboardManager` to create a `CKeyboardManager` object.  \n  \n##  <a name=\"cwinappex__initmousemanager\"></a>  CWinAppEx::InitMouseManager  \n Initializes the [CMouseManager](../../mfc/reference/cmousemanager-class.md) object.  \n  \n```  \nBOOL InitMouseManager();\n```  \n  \n### Return Value  \n Nonzero if the method creates the `CMouseManager` object; 0 if the `CMouseManager` object already exists.  \n  \n### Remarks  \n If you call [CWinAppEx::GetMouseManager](#cwinappex__getmousemanager), the default implementation of that method calls `InitMouseManager`.  \n  \n If your application already has a mouse manager and you call `InitMouseManager`, your application will have an [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c) failure. Therefore you should not call `InitMouseManager` if you create a `CMouseManager` object directly. If you are not using a custom `CMouseManager`, you should use `GetMouseManager` to create a `CMouseManager` object.  \n  \n##  <a name=\"cwinappex__initshellmanager\"></a>  CWinAppEx::InitShellManager  \n Initializes the [CShellManager](../../mfc/reference/cshellmanager-class.md) object.  \n  \n```  \nBOOL InitShellManager();\n```  \n  \n### Return Value  \n Nonzero if the method creates the `CShellManager` object; 0 if the `CShellManager` object already exists.  \n  \n### Remarks  \n If you call [CWinAppEx::GetShellManager](#cwinappex__getshellmanager), the default implementation of that method calls `InitShellManager`.  \n  \n If your application already has a shell manager and you call `InitShellManager`, your application raises an [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c) failure. Therefore, do not call `InitShellManager` if you create a `CShellManager` object directly. If you are not using a custom `CShellManager`, use `GetShellManager` to create a `CShellManager` object.  \n  \n##  <a name=\"cwinappex__inittooltipmanager\"></a>  CWinAppEx::InitTooltipManager  \n Initializes the [CTooltipManager](../../mfc/reference/ctooltipmanager-class.md) object.  \n  \n```  \nBOOL InitTooltipManager();\n```  \n  \n### Return Value  \n Nonzero if the method creates the `CTooltipManager` object; 0 if the `CTooltipManager` object already exists.  \n  \n### Remarks  \n If you call [CWinAppEx::GetTooltipManager](#cwinappex__gettooltipmanager), the default implementation of that method calls `InitTooltipManager`.  \n  \n If your application already has a tooltip manager and you call `InitTooltipManager`, your application will have an [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c) failure. Therefore, you should not call `InitTooltipManager` if you create a `CTooltipManager` object directly. If you are not using a custom `CTooltipManager`, you should use `GetTooltipManager` to create a `CTooltipManager` object.  \n  \n##  <a name=\"cwinappex__isresourcesmartupdate\"></a>  CWinAppEx::IsResourceSmartUpdate  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsResourceSmartUpdate() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cwinappex__isstateexists\"></a>  CWinAppEx::IsStateExists  \n Indicates whether the specified key is in the registry.  \n  \n```  \nBOOL IsStateExists(LPCTSTR lpszSectionName);\n```  \n  \n### Parameters  \n [in] `lpszSectionName`  \n A string that contains a path of a registry key.  \n  \n### Return Value  \n Nonzero if the key is in the registry; otherwise 0.  \n  \n##  <a name=\"cwinappex__loadcustomstate\"></a>  CWinAppEx::LoadCustomState  \n The framework calls this method after it loads the state of the application from the registry.  \n  \n```  \nvirtual void LoadCustomState();\n```  \n  \n### Remarks  \n Override this method if you want to do any processing after the application loads the state from the registry. By default, this method does nothing.  \n  \n In order to load custom state information from the registry, the information must first be saved by using [CWinAppEx::SaveCustomState](#cwinappex__savecustomstate).  \n  \n##  <a name=\"cwinappex__loadstate\"></a>  CWinAppEx::LoadState  \n Reads the application state from the Windows registry.  \n  \n```  \nBOOL LoadState(\n    CMDIFrameWndEx* pFrame,  \n    LPCTSTR lpszSectionName = NULL);\n\n \nBOOL LoadState(\n    CFrameWndEx* pFrame,  \n    LPCTSTR lpszSectionName = NULL);\n\n \nBOOL LoadState(\n    COleIPFrameWndEx* pFrame,  \n    LPCTSTR lpszSectionName = NULL);\n\n \nvirtual BOOL LoadState(\n    LPCTSTR lpszSectionName = NULL,  \n    CFrameImpl* pFrameImpl = NULL);\n```  \n  \n### Parameters  \n [in] `pFrame`  \n A pointer to a frame window object. The method applies the state information in the registry to this frame window.  \n  \n [in] `lpszSectionName`  \n A string that contains the relative path of a registry key.  \n  \n [in] `pFrameImpl`  \n A pointer to a `CFrameImpl` object. The method applies the state information in the registry to this frame window.  \n  \n### Return Value  \n Nonzero if successful; 0 otherwise.  \n  \n### Remarks  \n This method loads the state of the application and any state information for a frame window. The loaded information for the frame window is applied to the supplied frame window. If you do not supply a frame window, only the application state information is loaded. The application information includes the state of the [CMouseManager Class](../../mfc/reference/cmousemanager-class.md), [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md), [CKeyboardManager Class](../../mfc/reference/ckeyboardmanager-class.md), and the [CUserToolsManager Class](../../mfc/reference/cusertoolsmanager-class.md).  \n  \n The default implementation of `CFrameImpl::OnLoadFrame` calls `LoadState`.  \n  \n The `lpszSectionName` parameter is not the absolute path for a registry entry. It is a relative path that is added to the end of the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n##  <a name=\"cwinappex__loadwindowplacement\"></a>  CWinAppEx::LoadWindowPlacement  \n Called by the framework when it loads the size and location of the main frame window from the registry.  \n  \n```  \nvirtual BOOL LoadWindowPlacement(\n    CRect& rectNormalPosition,  \n    int& nFlags,  \n    int& nShowCmd);\n```  \n  \n### Parameters  \n [out] `rectNormalPosition`  \n A rectangle that contains the coordinates of the main frame window when it is in the restored position.  \n  \n [out] `nFlags`  \n Flags that control the position of the minimized window and how the operating system switches between a minimized window and a restored window.  \n  \n [out] `nShowCmd`  \n An integer that specifies the show state of the window. For more information about possible values, see [CWnd::ShowWindow](../../mfc/reference/cwnd-class.md#cwnd__showwindow).  \n  \n### Return Value  \n Nonzero if successful; 0 otherwise.  \n  \n### Remarks  \n By default, MFC automatically loads the previous position and state of the main frame window when the application starts. For more information about how this information is stored in the registry, see [CWinAppEx::StoreWindowPlacement](#cwinappex__storewindowplacement).  \n  \n Override this method if you want to load additional information about the main frame window.  \n  \n##  <a name=\"cwinappex__m_bforceimagereset\"></a>  CWinAppEx::m_bForceImageReset  \n Specifies whether the framework resets all toolbar images when it reloads the frame window that contains the toolbar.  \n  \n```  \nBOOL m_bForceImageReset;  \n```  \n  \n### Remarks  \n The `m_bForceImageReset` data member is a protected variable.  \n  \n##  <a name=\"cwinappex__onappcontexthelp\"></a>  CWinAppEx::OnAppContextHelp  \n The framework calls this method when the user requests context help for the **Customization** dialog box.  \n  \n```  \nvirtual void OnAppContextHelp(\n    CWnd* pWndControl,  \n    const DWORD dwHelpIDArray[]);\n```  \n  \n### Parameters  \n [in] `pWndControl`  \n A pointer to a window object for which the user invoked context help.  \n  \n [in] `dwHelpIDArray[]`  \n A reserved value.  \n  \n### Remarks  \n This method is currently reserved for future use. The default implementation does nothing and it is currently not called by the framework.  \n  \n##  <a name=\"cwinappex__onclosingmainframe\"></a>  CWinAppEx::OnClosingMainFrame  \n The framework calls this method when a frame window is processing `WM_CLOSE`.  \n  \n```  \nvirtual void OnClosingMainFrame(CFrameImpl* pFrameImpl);\n```  \n  \n### Parameters  \n [in] `pFrameImpl`  \n A pointer to a `CFrameImpl` object.  \n  \n### Remarks  \n The default implementation of this method saves the state of `pFrameImpl`.  \n  \n##  <a name=\"cwinappex__onviewdoubleclick\"></a>  CWinAppEx::OnViewDoubleClick  \n Calls the user-defined command that is associated with a view when the user double-clicks anywhere within that view.  \n  \n```  \nvirtual BOOL OnViewDoubleClick(\n    CWnd* pWnd,  \n    int iViewId);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n A pointer to an object derived from the [CView Class](../../mfc/reference/cview-class.md).  \n  \n [in] `iViewId`  \n The view ID.  \n  \n### Return Value  \n `True` if the framework finds a command; otherwise false.  \n  \n### Remarks  \n In order to support custom mouse behavior, you must call this function when you process the `WM_LBUTTONDBLCLK` message. This method will execute the command associated with the view ID supplied by `iViewId`. For more information about custom mouse behavior, see [Keyboard and Mouse Customization](../../mfc/keyboard-and-mouse-customization.md).  \n  \n##  <a name=\"cwinappex__onworkspaceidle\"></a>  CWinAppEx::OnWorkspaceIdle  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnWorkspaceIdle(CWnd*);\n```  \n  \n### Parameters  \n [in] `CWnd*`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cwinappex__preloadstate\"></a>  CWinAppEx::PreLoadState  \n The framework calls this method immediately before it loads the state of the application from the registry.  \n  \n```  \nvirtual void PreLoadState();\n```  \n  \n### Remarks  \n Override this method if you want to do any processing immediately before the framework loads the application state.  \n  \n##  <a name=\"cwinappex__presavestate\"></a>  CWinAppEx::PreSaveState  \n The framework calls this method immediately before it saves the application state.  \n  \n```  \nvirtual void PreSaveState();\n```  \n  \n### Remarks  \n Override this method if you want to do any processing immediately before the framework saves the application state.  \n  \n##  <a name=\"cwinappex__reloadwindowplacement\"></a>  CWinAppEx::ReloadWindowPlacement  \n Reloads the size and location of a window from the registry.  \n  \n```  \nvirtual BOOL ReloadWindowPlacement(CFrameWnd* pFrame);\n```  \n  \n### Parameters  \n [in] `pFrame`  \n A pointer to a frame window.  \n  \n### Return Value  \n Nonzero if the method was successful; 0 if the load failed or there is no data to load.  \n  \n### Remarks  \n Use the function [CWinAppEx::StoreWindowPlacement](#cwinappex__storewindowplacement) to write the size and location of a window to the registry.  \n  \n##  <a name=\"cwinappex__savecustomstate\"></a>  CWinAppEx::SaveCustomState  \n The framework calls this method after it saves the state of the application to the registry.  \n  \n```  \nvirtual void SaveCustomState();\n```  \n  \n### Remarks  \n Override this method if you want to do any processing after the application saves the state to the registry. By default, this method does nothing.  \n  \n##  <a name=\"cwinappex__savestate\"></a>  CWinAppEx::SaveState  \n Writes the application state to the Windows registry.  \n  \n```  \nvirtual BOOL SaveState(\n    LPCTSTR lpszSectionName = NULL,  \n    CFrameImpl* pFrameImpl = NULL);\n\n \nBOOL SaveState(\n    CMDIFrameWndEx* pFrame,  \n    LPCTSTR lpszSectionName = NULL);\n\n \nBOOL SaveState(\n    CFrameWndEx* pFrame,  \n    LPCTSTR lpszSectionName = NULL);\n\n \nBOOL SaveState(\n    COleIPFrameWndEx* pFrame,  \n    LPCTSTR lpszSectionName = NULL);\n```  \n  \n### Parameters  \n [in] `lpszSectionName`  \n A string that contains the relative path of a registry key.  \n  \n [in] `pFrameImpl`  \n A pointer to a `CFrameImpl` object. This frame is saved to the Windows registry.  \n  \n [in] `pFrame`  \n A pointer to a frame window object. This frame is saved to the Windows registry.  \n  \n### Return Value  \n `True` if successful; `false` otherwise.  \n  \n### Remarks  \n This method saves the state of the application and any state information for the provided frame window. If you do not provide a frame window, the method only saves the application state. The application information includes the state of the [CMouseManager Class](../../mfc/reference/cmousemanager-class.md), [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md), [CKeyboardManager Class](../../mfc/reference/ckeyboardmanager-class.md), and the [CUserToolsManager Class](../../mfc/reference/cusertoolsmanager-class.md).  \n  \n The `lpszSectionName` parameter is not the absolute path for a registry entry. It is a relative path that is appended to the end of the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n##  <a name=\"cwinappex__setregistrybase\"></a>  CWinAppEx::SetRegistryBase  \n Sets the default registry path for the application.  \n  \n```  \nLPCTSTR SetRegistryBase(LPCTSTR lpszSectionName = NULL);\n```  \n  \n### Parameters  \n [in] `lpszSectionName`  \n A string that contains the path of a registry key.  \n  \n### Return Value  \n A string that contains the path of the default registry location.  \n  \n### Remarks  \n All methods of the [CWinAppEx Class](../../mfc/reference/cwinappex-class.md) that access the registry start in a default location. Use this method to change that default registry location. Use [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) to retrieve the default registry location.  \n  \n##  <a name=\"cwinappex__showpopupmenu\"></a>  CWinAppEx::ShowPopupMenu  \n Displays a popup menu.  \n  \n```  \nvirtual BOOL ShowPopupMenu(\n    UINT uiMenuResId,  \n    const CPoint& point,  \n    CWnd* pWnd);\n```  \n  \n### Parameters  \n [in] `uiMenuResId`  \n A menu resource ID.  \n  \n [in] `point`  \n A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) that specifies the position of the menu in screen coordinates.  \n  \n [in] `pWnd`  \n A pointer to the window that owns the popup menu.  \n  \n### Return Value  \n Nonzero if the popup menu is displayed successfully; 0 otherwise.  \n  \n### Remarks  \n This method displays the menu associated with `uiMenuResId`.  \n  \n To support popup menus, you must have a [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) object. If you have not initialized the `CContextMenuManager` object, `ShowPopupMenu` will fail.  \n  \n##  <a name=\"cwinappex__storewindowplacement\"></a>  CWinAppEx::StoreWindowPlacement  \n Called by the framework to write the size and location of the main frame window to the registry.  \n  \n```  \nvirtual BOOL StoreWindowPlacement(\n    const CRect& rectNormalPosition,  \n    int nFlags,  \n    int nShowCmd);\n```  \n  \n### Parameters  \n [in] `nFlags`  \n Flags that control the position of the minimized window and how the operating system switches between a minimized window and a restored window.  \n  \n [in] `nShowCmd`  \n An integer that specifies the show state of the window. For more information about possible values, see [CWnd::ShowWindow](../../mfc/reference/cwnd-class.md#cwnd__showwindow).  \n  \n [in] `rectNormalPosition`  \n A rectangle that contains the coordinates of the main frame window when it is in the restored state.  \n  \n### Return Value  \n Nonzero if successful; 0 otherwise.  \n  \n### Remarks  \n By default, MFC automatically saves the position and state of the main frame window before the application exits. This information is stored in the Windows registry under the WindowPlacement key in the default registry location for your application. For more information about the default registry location of your application, see [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase).  \n  \n Override this method if you want to store additional information about the main frame window.  \n  \n##  <a name=\"cwinappex__writebinary\"></a>  CWinAppEx::WriteBinary  \n Writes binary data to the registry.  \n  \n```  \nBOOL WriteBinary(\n    LPCTSTR lpszEntry,  \n    LPBYTE pData,  \n    UINT nBytes);\n```  \n  \n### Parameters  \n [in] `lpszEntry`  \n A string that contains the name of a registry key.  \n  \n [in] `pData`  \n The data to store.  \n  \n [in] `nBytes`  \n The size of `pData` in bytes.  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise `FALSE`.  \n  \n### Remarks  \n The `lpszEntry` parameter is the name of a registry entry that is located under the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n If the key specified by `lpszEntry` does not exist, this method will create it.  \n  \n##  <a name=\"cwinappex__writeint\"></a>  CWinAppEx::WriteInt  \n Writes numeric data to the registry.  \n  \n```  \nBOOL WriteInt(\n    LPCTSTR lpszEntry,  \n    int nValue);\n```  \n  \n### Parameters  \n [in] `lpszEntry`  \n A string that contains the name of a registry key.  \n  \n [in] `nValue`  \n The data to store.  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise `FALSE`.  \n  \n### Remarks  \n The `lpszEntry` parameter is the name of a registry entry located under the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n If the key specified by `lpszEntry` does not exist, this method will create it.  \n  \n##  <a name=\"cwinappex__writeobject\"></a>  CWinAppEx::WriteObject  \n Writes data derived from the [CObject Class](../../mfc/reference/cobject-class.md) to the registry.  \n  \n```  \nBOOL WriteObject(\n    LPCTSTR lpszEntry,  \n    CObject& obj);\n```  \n  \n### Parameters  \n [in] `lpszEntry`  \n A string that contains the value to set.  \n  \n [in] `obj`  \n A reference to `CObject` data that the method will store.  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise `FALSE`.  \n  \n### Remarks  \n This method writes the `obj` data to the specified value under the default registry key. Use [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) to determine the current registry key.  \n  \n##  <a name=\"cwinappex__writesectionbinary\"></a>  CWinAppEx::WriteSectionBinary  \n Writes binary data to a value in the registry.  \n  \n```  \nBOOL WriteSectionBinary(\n    LPCTSTR lpszSubSection,  \n    LPCTSTR lpszEntry,  \n    LPBYTE pData,  \n    UINT nBytes);\n```  \n  \n### Parameters  \n [in] `lpszSubSection`  \n A string that contains the name of a registry key  \n  \n [in] `lpszEntry`  \n A string that contains the value to set.  \n  \n [in] `pData`  \n The data to write to the registry.  \n  \n [in] `nBytes`  \n The size of `pData` in bytes.  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise `FALSE`.  \n  \n### Remarks  \n The `lpszSubSection` parameter is not the absolute path for a registry entry. It is a relative path that is appended to the end of the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n If the key specified by `lpszEntry` does not exist, this method will create it.  \n  \n##  <a name=\"cwinappex__writesectionint\"></a>  CWinAppEx::WriteSectionInt  \n Writes numeric data to the registry.  \n  \n```  \nBOOL WriteSectionInt(\n    LPCTSTR lpszSubSection,  \n    LPCTSTR lpszEntry,  \n    int nValue);\n```  \n  \n### Parameters  \n [in] `lpszSubSection`  \n A string that contains the relative path of a registry key.  \n  \n [in] `lpszEntry`  \n A string that contains the value to set.  \n  \n [in] `nValue`  \n The data to write to the registry.  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise `FALSE`.  \n  \n### Remarks  \n The `lpszSubSection` parameter is not an absolute path for a registry entry. It is a relative path that is appended to the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n If the key specified by `lpszEntry` does not exist, this method will create it.  \n  \n##  <a name=\"cwinappex__writesectionobject\"></a>  CWinAppEx::WriteSectionObject  \n Writes data derived from the [CObject Class](../../mfc/reference/cobject-class.md) to a specific registry value.  \n  \n```  \nBOOL WriteSectionObject(\n    LPCTSTR lpszSubSection,  \n    LPCTSTR lpszEntry,  \n    CObject& obj);\n```  \n  \n### Parameters  \n [in] `lpszSubSection`  \n A string that contains the name of a registry key.  \n  \n [in] `lpszEntry`  \n A string that contains the name of the value to set.  \n  \n [in] `obj`  \n The data to store.  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise `FALSE`.  \n  \n### Remarks  \n The `lpszSubSection` parameter is not an absolute path for a registry entry. It is a relative path that is appended to the end of the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase), respectively.  \n  \n If the value specified by `lpszEntry` does not exist under the registry key specified by `lpszSubSection`, this method will create that value.  \n  \n##  <a name=\"cwinappex__writesectionstring\"></a>  CWinAppEx::WriteSectionString  \n Writes string data to a value in the registry.  \n  \n```  \nBOOL WriteSectionString(\n    LPCTSTR lpszSubSection,  \n    LPCTSTR lpszEntry,  \n    LPCTSTR lpszValue);\n```  \n  \n### Parameters  \n [in] `lpszSubSection`  \n A string that contains the name of a registry key.  \n  \n [in] `lpszEntry`  \n A string that contains the value to set.  \n  \n [in] `lpszValue`  \n The string data to write to the registry.  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise `FALSE`.  \n  \n### Remarks  \n The `lpszSubSection` parameter is not an absolute path for a registry entry. It is a relative path that is appended to the end of the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase), respectively.  \n  \n If the value specified by `lpszEntry` does not exist under `lpszSubSection`, this method will create it.  \n  \n##  <a name=\"cwinappex__writestring\"></a>  CWinAppEx::WriteString  \n Writes string data to the registry.  \n  \n```  \nBOOL WriteString(\n    LPCTSTR lpszEntry,  \n    LPCTSTR lpszValue);\n```  \n  \n### Parameters  \n [in] `lpszEntry`  \n A string that contains the name of a registry key.  \n  \n [in] `lpszValue`  \n The data to store.  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise `FALSE`.  \n  \n### Remarks  \n The `lpszEntry` parameter is the name of a registry entry located under the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](#cwinappex__setregistrybase) respectively.  \n  \n If the key specified by `lspzEntry` does not exist, this method will create it.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CWinApp Class](../../mfc/reference/cwinapp-class.md)   \n [CMouseManager Class](../../mfc/reference/cmousemanager-class.md)   \n [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md)   \n [CKeyboardManager Class](../../mfc/reference/ckeyboardmanager-class.md)   \n [CUserToolsManager Class](../../mfc/reference/cusertoolsmanager-class.md)\n"}