{"nodes":[{"pos":[12,55],"content":"CAnimationBaseObject Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAnimationBaseObject Class | Microsoft Docs","pos":[0,43]}]},{"content":"CAnimationBaseObject Class","pos":[684,710]},{"content":"The base class for all animation objects.","pos":[711,752]},{"content":"Syntax","pos":[761,767]},{"content":"Members","pos":[838,845]},{"content":"Public Constructors","pos":[855,874]},{"content":"Name","pos":[881,885]},{"content":"Description","pos":[886,897]},{"content":"CAnimationBaseObject::CAnimationBaseObject","pos":[936,978]},{"content":"Overloaded.","pos":[1025,1036]},{"content":"Constructs an animation object.","pos":[1037,1068]},{"content":"CAnimationBaseObject::~CAnimationBaseObject","pos":[1074,1117]},{"content":"The destructor.","pos":[1165,1180]},{"content":"Called when an animation object is being destroyed.","pos":[1181,1232]},{"content":"Public Methods","pos":[1243,1257]},{"content":"Name","pos":[1264,1268]},{"content":"Description","pos":[1269,1280]},{"content":"CAnimationBaseObject::ApplyTransitions","pos":[1319,1357]},{"content":"Adds transitions to storyboard with encapsulated animation variable.","pos":[1400,1468]},{"content":"CAnimationBaseObject::ClearTransitions","pos":[1474,1512]},{"content":"Removes all related transitions.","pos":[1555,1587]},{"content":"CAnimationBaseObject::ContainsVariable","pos":[1593,1631]},{"content":"Determines whether an animation object contains a particular animation variable.","pos":[1674,1754]},{"content":"CAnimationBaseObject::CreateTransitions","pos":[1760,1799]},{"content":"Creates transitions associated with an animation object.","pos":[1843,1899]},{"content":"CAnimationBaseObject::DetachFromController","pos":[1905,1947]},{"content":"Detaches an animation object from parent animation controller.","pos":[1994,2056]},{"content":"CAnimationBaseObject::EnableIntegerValueChangedEvent","pos":[2062,2114]},{"content":"Sets up Integer Value Changed event handler.","pos":[2171,2215]},{"content":"CAnimationBaseObject::EnableValueChangedEvent","pos":[2221,2266]},{"content":"Sets up Value Changed event handler.","pos":[2316,2352]},{"content":"CAnimationBaseObject::GetAutodestroyTransitions","pos":[2358,2405]},{"content":"Tells whether related transition are destroyed automatically.","pos":[2457,2518]},{"content":"CAnimationBaseObject::GetGroupID","pos":[2524,2556]},{"content":"Returns current Group ID.","pos":[2593,2618]},{"content":"CAnimationBaseObject::GetObjectID","pos":[2624,2657]},{"content":"Returns current Object ID.","pos":[2695,2721]},{"content":"CAnimationBaseObject::GetUserData","pos":[2727,2760]},{"content":"Returns user defined data.","pos":[2798,2824]},{"content":"CAnimationBaseObject::SetAutodestroyTransitions","pos":[2830,2877]},{"content":"Sets a flag that orders to automatically destroy transitions.","pos":[2929,2990]},{"content":"CAnimationBaseObject::SetID","pos":[2996,3023]},{"content":"Sets new IDs.","pos":[3055,3068]},{"content":"CAnimationBaseObject::SetUserData","pos":[3074,3107]},{"content":"Sets user-defined data.","pos":[3145,3168]},{"content":"Protected Methods","pos":[3179,3196]},{"content":"Name","pos":[3203,3207]},{"content":"Description","pos":[3208,3219]},{"content":"CAnimationBaseObject::GetAnimationVariableList","pos":[3258,3304]},{"content":"Collects pointers to contained animation variables.","pos":[3355,3406]},{"content":"CAnimationBaseObject::SetParentAnimationObjects","pos":[3412,3459]},{"content":"Establishes relationship between animation variables, contained in an animation object, and their container.","pos":[3511,3619]},{"content":"Protected Data Members","pos":[3630,3652]},{"content":"Name","pos":[3659,3663]},{"content":"Description","pos":[3664,3675]},{"content":"CAnimationBaseObject::m_bAutodestroyTransitions","pos":[3714,3761]},{"content":"Specifies whether related transitions should be automatically destroyed.","pos":[3813,3885]},{"content":"CAnimationBaseObject::m_dwUserData","pos":[3891,3925]},{"content":"Stores user-defined data.","pos":[3964,3989]},{"content":"CAnimationBaseObject::m_nGroupID","pos":[3995,4027]},{"content":"Specifies the Group ID of the animation object.","pos":[4064,4111]},{"content":"CAnimationBaseObject::m_nObjectID","pos":[4117,4150]},{"content":"Specifes the Object ID of the animation object.","pos":[4188,4235]},{"content":"CAnimationBaseObject::m_pParentController","pos":[4241,4282]},{"content":"A pointer to the parent animation controller.","pos":[4328,4373]},{"content":"Remarks","pos":[4383,4390]},{"content":"This class implements basic methods for all animation objects.","pos":[4394,4456]},{"content":"An animation object can represent a value, point, size, rectangle or color in an application, as well as any custom entity.","pos":[4457,4580]},{"content":"Animation objects are stored in animation groups (see CAnimationGroup).","pos":[4581,4652]},{"content":"Each group can be animated separately and can be treated as an analogue of storyboard.","pos":[4653,4739]},{"content":"An animation object encapsulates one or more animation variables (see CAnimationVariable), depending on its logical representation.","pos":[4740,4871]},{"content":"For example, CAnimationRect contains four animation variables - one variable for each side of rectangle.","pos":[4872,4976]},{"content":"Each animation object class exposes overloaded AddTransition method, which should be used to apply transitions to encapsulated animation variables.","pos":[4977,5124]},{"content":"An animation object can be identified by Object ID (optionally) and by Group ID.","pos":[5125,5205]},{"content":"A Group ID is necessary in order to place an animation object to correct group, but if a Group ID is not specified, an object is placed in the default group with ID 0.","pos":[5206,5373]},{"content":"If you call SetID with different GroupID, an animation object will be moved to another group (a new group is created if necessary).","pos":[5374,5505]},{"content":"Inheritance Hierarchy","pos":[5514,5535]},{"content":"CObject","pos":[5540,5547]},{"content":"CAnimationBaseObject","pos":[5594,5614]},{"content":"Requirements","pos":[5675,5687]},{"pos":[5691,5727],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxanimationcontroller.h","source":"**Header:** afxanimationcontroller.h"},{"pos":[5801,5844],"content":"CAnimationBaseObject::~CAnimationBaseObject"},{"content":"The destructor.","pos":[5848,5863]},{"content":"Called when an animation object is being destroyed.","pos":[5864,5915]},{"pos":[6028,6066],"content":"CAnimationBaseObject::ApplyTransitions"},{"content":"Adds transitions to storyboard with encapsulated animation variable.","pos":[6070,6138]},{"content":"Parameters","pos":[6267,6277]},{"content":"A pointer to a storyboard.","pos":[6298,6324]},{"content":"With FALSE this method adds only those transitions that do not depend on keyframes.","pos":[6355,6438]},{"content":"Return Value","pos":[6448,6460]},{"content":"TRUE if transitions were added successfully.","pos":[6464,6508]},{"content":"Remarks","pos":[6518,6525]},{"content":"Adds related transitions, that have been added with AddTransition (overloaded methods in derived classes), to storyboard.","pos":[6529,6650]},{"pos":[6719,6761],"content":"CAnimationBaseObject::CAnimationBaseObject"},{"content":"Constructs an animation object.","pos":[6765,6796]},{"content":"Parameters","pos":[6957,6967]},{"content":"Specifies Group ID.","pos":[6985,7004]},{"content":"Specifies Object ID.","pos":[7026,7046]},{"content":"User-defined data, which can be associated with animation object and retrieved later at runtime.","pos":[7069,7165]},{"content":"Remarks","pos":[7175,7182]},{"content":"Constructs an animation objects and assigns default Object ID (0) and Group ID (0).","pos":[7186,7269]},{"pos":[7334,7372],"content":"CAnimationBaseObject::ClearTransitions"},{"content":"Removes all related transitions.","pos":[7376,7408]},{"content":"Parameters","pos":[7483,7493]},{"content":"Specifies whether to destroy transition objects automatically, or just remove them from the related list.","pos":[7515,7620]},{"content":"Remarks","pos":[7630,7637]},{"content":"Removes all related transitions and destroys them if bAutodestroy or m_bAutodestroyTransitions flag is TRUE.","pos":[7641,7749]},{"content":"Transitions should be destroyed automatically only if they are not allocated on the stack.","pos":[7750,7840]},{"content":"If the above flags are FALSE, transitions are just removed from the internal list of related transitions.","pos":[7841,7946]},{"pos":[8011,8049],"content":"CAnimationBaseObject::ContainsVariable"},{"content":"Determines whether an animation object contains a particular animation variable.","pos":[8053,8133]},{"content":"Parameters","pos":[8222,8232]},{"content":"A pointer to animation variable.","pos":[8251,8283]},{"content":"Return Value","pos":[8293,8305]},{"content":"TRUE if the animation variable is contained in the animation object; otherwise FALSE.","pos":[8309,8394]},{"content":"Remarks","pos":[8404,8411]},{"content":"This method can be used to determine whether an animation variable specified by pVariable is contained within an animation object.","pos":[8415,8545]},{"content":"An animation object, depending on its type, may contain several animation variables.","pos":[8546,8630]},{"content":"For example, CAnimationColor contains three variables, one for each color component (red, green and blue).","pos":[8631,8737]},{"content":"When a value of animation variable has changed, Windows Animation API sends ValueChanged or IntegerValueChanged events (if enabled), and the parameter of this event is a pointer to interface IUIAnimationVariable of animation variable.","pos":[8738,8972]},{"content":"This method helps to obtain a pointer to animation from a pointer to contained COM object.","pos":[8973,9063]},{"pos":[9129,9168],"content":"CAnimationBaseObject::CreateTransitions"},{"content":"Creates transitions associated with an animation object.","pos":[9172,9228]},{"content":"Return Value","pos":[9279,9291]},{"content":"TRUE if transitions were created successfully; otherwise FALSE.","pos":[9295,9358]},{"content":"Remarks","pos":[9368,9375]},{"content":"Loops over list of animation variables encapsulated in a derived animation object and creates transitions associated with each animation variable.","pos":[9379,9525]},{"pos":[9594,9636],"content":"CAnimationBaseObject::DetachFromController"},{"content":"Detaches an animation object from parent animation controller.","pos":[9640,9702]},{"content":"Remarks","pos":[9756,9763]},{"content":"This method is used internally.","pos":[9767,9798]},{"pos":[9877,9929],"content":"CAnimationBaseObject::EnableIntegerValueChangedEvent"},{"content":"Sets up Integer Value Changed event handler.","pos":[9933,9977]},{"content":"Parameters","pos":[10107,10117]},{"content":"A pointer to a parent controller.","pos":[10138,10171]},{"content":"Specifies whether to enable, or disable Integer Value Changed event.","pos":[10191,10259]},{"content":"Remarks","pos":[10269,10276]},{"content":"If the Integer Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationIntegerValueChanged method, which should be overridden in a CAnimationController-derived class.","pos":[10280,10492]},{"content":"This method is called every time the animation integer value has changed.","pos":[10493,10566]},{"pos":[10638,10683],"content":"CAnimationBaseObject::EnableValueChangedEvent"},{"content":"Sets up Value Changed event handler.","pos":[10687,10723]},{"content":"Parameters","pos":[10846,10856]},{"content":"A pointer to a parent controller.","pos":[10877,10910]},{"content":"Specifies whether to enable, or disable Value Changed event.","pos":[10930,10990]},{"content":"Remarks","pos":[11000,11007]},{"content":"If the Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationValueChanged method, which should be overridden in a CAnimationController-derived class.","pos":[11011,11208]},{"content":"This method is called every time the animation value has changed.","pos":[11209,11274]},{"pos":[11347,11393],"content":"CAnimationBaseObject::GetAnimationVariableList"},{"content":"Collects pointers to contained animation variables.","pos":[11397,11448]},{"content":"Parameters","pos":[11582,11592]},{"content":"A list that must be filled with animation variables contained in an animation object.","pos":[11605,11690]},{"content":"Remarks","pos":[11700,11707]},{"content":"This is a pure virtual method that must be overridden in a derived class.","pos":[11711,11784]},{"content":"An animation object, depending on its type, contains one or more animation variables.","pos":[11785,11870]},{"content":"For example, CAnimationPoint contains two variables, for X and Y coordinates respectively.","pos":[11871,11961]},{"content":"The base class CAnimationBaseObject implements some generic methods, which act on a list of animation variables: ApplyTransitions, ClearTransitions, EnableValueChangedEvent, EnableIntegerValueChangedEvent.","pos":[11962,12167]},{"content":"These methods call GetAnimationVariableList, which is filled in a derived class with actual animation variables contained in a particular animation object, then loop over the list and perform necessary actions.","pos":[12168,12378]},{"content":"If you create a custom animation object, you must add to lst all animation variables contained in that object.","pos":[12379,12489]},{"pos":[12563,12610],"content":"CAnimationBaseObject::GetAutodestroyTransitions"},{"content":"Tells whether related transition are destroyed automatically.","pos":[12614,12675]},{"content":"Return Value","pos":[12743,12755]},{"content":"If TRUE, related transitions are destroyed automatically; if FALSE, transition objects should be deallocated by calling application.","pos":[12759,12891]},{"content":"Remarks","pos":[12901,12908]},{"content":"By default this flag is TRUE.","pos":[12912,12941]},{"content":"Set this flag only if you allocated transition on the stack and/or transitions should be deallocated by the calling application.","pos":[12942,13070]},{"pos":[13129,13161],"content":"CAnimationBaseObject::GetGroupID"},{"content":"Returns current Group ID.","pos":[13165,13190]},{"content":"Return Value","pos":[13245,13257]},{"content":"Current Group ID.","pos":[13261,13278]},{"content":"Remarks","pos":[13288,13295]},{"content":"Use this method to retrieve Group ID.","pos":[13299,13336]},{"content":"It's 0 if Group ID has not been set explicitly in constructor or with SetID.","pos":[13337,13413]},{"pos":[13473,13506],"content":"CAnimationBaseObject::GetObjectID"},{"content":"Returns current Object ID.","pos":[13510,13536]},{"content":"Return Value","pos":[13592,13604]},{"content":"Current Object ID.","pos":[13608,13626]},{"content":"Remarks","pos":[13636,13643]},{"content":"Use this method to retrieve Object ID.","pos":[13647,13685]},{"content":"It's 0 if Object ID has not been set explicitly in constructor or with SetID.","pos":[13686,13763]},{"pos":[13823,13856],"content":"CAnimationBaseObject::GetUserData"},{"content":"Returns user defined data.","pos":[13860,13886]},{"content":"Return Value","pos":[13941,13953]},{"content":"A value of custom data.","pos":[13957,13980]},{"content":"Remarks","pos":[13990,13997]},{"content":"Call this method to retrieve the custom data at runtime.","pos":[14001,14057]},{"content":"The returned value will be 0 if it was not explicitly initialized in constructor or with SetUserData.","pos":[14058,14159]},{"pos":[14233,14280],"content":"CAnimationBaseObject::m_bAutodestroyTransitions"},{"content":"Specifies whether related transitions should be automatically destroyed.","pos":[14284,14356]},{"pos":[14466,14500],"content":"CAnimationBaseObject::m_dwUserData"},{"content":"Stores user-defined data.","pos":[14504,14529]},{"pos":[14625,14657],"content":"CAnimationBaseObject::m_nGroupID"},{"content":"Specifies the Group ID of the animation object.","pos":[14661,14708]},{"pos":[14804,14837],"content":"CAnimationBaseObject::m_nObjectID"},{"content":"Specifes the Object ID of the animation object.","pos":[14841,14888]},{"pos":[14993,15034],"content":"CAnimationBaseObject::m_pParentController"},{"content":"A pointer to the parent animation controller.","pos":[15038,15083]},{"pos":[15217,15264],"content":"CAnimationBaseObject::SetAutodestroyTransitions"},{"content":"Sets a flag that orders to automatically destroy transitions.","pos":[15268,15329]},{"content":"Parameters","pos":[15399,15409]},{"content":"Specifies the auto destroy flag.","pos":[15425,15457]},{"content":"Remarks","pos":[15467,15474]},{"content":"Set this flag only if you allocated transition objects using operator new.","pos":[15478,15552]},{"content":"If for some reason transition objects are allocated on the stack, the auto destroy flag should be FALSE.","pos":[15553,15657]},{"content":"By default this flag is TRUE.","pos":[15658,15687]},{"pos":[15741,15768],"content":"CAnimationBaseObject::SetID"},{"content":"Sets new IDs.","pos":[15772,15785]},{"content":"Parameters","pos":[15872,15882]},{"content":"Specifies new Object ID.","pos":[15901,15925]},{"content":"Specifies new Group ID.","pos":[15946,15969]},{"content":"Remarks","pos":[15979,15986]},{"content":"Allows to change Object ID and Group ID.","pos":[15990,16030]},{"content":"If the new Group ID differs from the current ID, an animation object is moved to another group (a new group will be created, if necessary).","pos":[16031,16170]},{"pos":[16244,16291],"content":"CAnimationBaseObject::SetParentAnimationObjects"},{"content":"Establishes relationship between animation variables, contained in an animation object, and their container.","pos":[16295,16403]},{"content":"Remarks","pos":[16470,16477]},{"content":"This is a helper that can be used to establish relationship between animation variables, contained in an animation object, and their container.","pos":[16481,16624]},{"content":"It loops over animation variables and sets a back pointer to a parent animation object to each animation variable.","pos":[16625,16739]},{"content":"In the current implementation the actual relationship is established in CAnimationBaseObject::ApplyTransitions, therefore back pointers are not set until you call CAnimationGroup::Animate.","pos":[16740,16928]},{"content":"Knowing the relationship may be helpful when you processing events and need to get a parent animation object from CAnimationVariable (use CAnimationVariable::GetParentAnimationObject).","pos":[16929,17113]},{"pos":[17173,17206],"content":"CAnimationBaseObject::SetUserData"},{"content":"Sets user-defined data.","pos":[17210,17233]},{"content":"Parameters","pos":[17295,17305]},{"content":"Specifies the custom data.","pos":[17325,17351]},{"content":"Remarks","pos":[17361,17368]},{"content":"Use this method to associate a custom data with an animation object.","pos":[17372,17440]},{"content":"This data may be retrieved later at runtime by GetUserData.","pos":[17441,17500]},{"content":"See Also","pos":[17509,17517]},{"content":"Classes","pos":[17522,17529]}],"content":"---\ntitle: \"CAnimationBaseObject Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"afxanimationcontroller/CAnimationBaseObject\"\n  - \"CAnimationBaseObject\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAnimationBaseObject class\"\nms.assetid: 76b25917-940e-4eba-940f-31d270702603\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAnimationBaseObject Class\nThe base class for all animation objects.  \n  \n## Syntax  \n  \n```  \nclass CAnimationBaseObject : public CObject;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationBaseObject::CAnimationBaseObject](#canimationbaseobject__canimationbaseobject)|Overloaded. Constructs an animation object.|  \n|[CAnimationBaseObject::~CAnimationBaseObject](#canimationbaseobject__~canimationbaseobject)|The destructor. Called when an animation object is being destroyed.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationBaseObject::ApplyTransitions](#canimationbaseobject__applytransitions)|Adds transitions to storyboard with encapsulated animation variable.|  \n|[CAnimationBaseObject::ClearTransitions](#canimationbaseobject__cleartransitions)|Removes all related transitions.|  \n|[CAnimationBaseObject::ContainsVariable](#canimationbaseobject__containsvariable)|Determines whether an animation object contains a particular animation variable.|  \n|[CAnimationBaseObject::CreateTransitions](#canimationbaseobject__createtransitions)|Creates transitions associated with an animation object.|  \n|[CAnimationBaseObject::DetachFromController](#canimationbaseobject__detachfromcontroller)|Detaches an animation object from parent animation controller.|  \n|[CAnimationBaseObject::EnableIntegerValueChangedEvent](#canimationbaseobject__enableintegervaluechangedevent)|Sets up Integer Value Changed event handler.|  \n|[CAnimationBaseObject::EnableValueChangedEvent](#canimationbaseobject__enablevaluechangedevent)|Sets up Value Changed event handler.|  \n|[CAnimationBaseObject::GetAutodestroyTransitions](#canimationbaseobject__getautodestroytransitions)|Tells whether related transition are destroyed automatically.|  \n|[CAnimationBaseObject::GetGroupID](#canimationbaseobject__getgroupid)|Returns current Group ID.|  \n|[CAnimationBaseObject::GetObjectID](#canimationbaseobject__getobjectid)|Returns current Object ID.|  \n|[CAnimationBaseObject::GetUserData](#canimationbaseobject__getuserdata)|Returns user defined data.|  \n|[CAnimationBaseObject::SetAutodestroyTransitions](#canimationbaseobject__setautodestroytransitions)|Sets a flag that orders to automatically destroy transitions.|  \n|[CAnimationBaseObject::SetID](#canimationbaseobject__setid)|Sets new IDs.|  \n|[CAnimationBaseObject::SetUserData](#canimationbaseobject__setuserdata)|Sets user-defined data.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationBaseObject::GetAnimationVariableList](#canimationbaseobject__getanimationvariablelist)|Collects pointers to contained animation variables.|  \n|[CAnimationBaseObject::SetParentAnimationObjects](#canimationbaseobject__setparentanimationobjects)|Establishes relationship between animation variables, contained in an animation object, and their container.|  \n  \n### Protected Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationBaseObject::m_bAutodestroyTransitions](#canimationbaseobject__m_bautodestroytransitions)|Specifies whether related transitions should be automatically destroyed.|  \n|[CAnimationBaseObject::m_dwUserData](#canimationbaseobject__m_dwuserdata)|Stores user-defined data.|  \n|[CAnimationBaseObject::m_nGroupID](#canimationbaseobject__m_ngroupid)|Specifies the Group ID of the animation object.|  \n|[CAnimationBaseObject::m_nObjectID](#canimationbaseobject__m_nobjectid)|Specifes the Object ID of the animation object.|  \n|[CAnimationBaseObject::m_pParentController](#canimationbaseobject__m_pparentcontroller)|A pointer to the parent animation controller.|  \n  \n## Remarks  \n This class implements basic methods for all animation objects. An animation object can represent a value, point, size, rectangle or color in an application, as well as any custom entity. Animation objects are stored in animation groups (see CAnimationGroup). Each group can be animated separately and can be treated as an analogue of storyboard. An animation object encapsulates one or more animation variables (see CAnimationVariable), depending on its logical representation. For example, CAnimationRect contains four animation variables - one variable for each side of rectangle. Each animation object class exposes overloaded AddTransition method, which should be used to apply transitions to encapsulated animation variables. An animation object can be identified by Object ID (optionally) and by Group ID. A Group ID is necessary in order to place an animation object to correct group, but if a Group ID is not specified, an object is placed in the default group with ID 0. If you call SetID with different GroupID, an animation object will be moved to another group (a new group is created if necessary).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CAnimationBaseObject](../../mfc/reference/canimationbaseobject-class.md)  \n  \n## Requirements  \n **Header:** afxanimationcontroller.h  \n  \n##  <a name=\"canimationbaseobject___dtorcanimationbaseobject\"></a>  CAnimationBaseObject::~CAnimationBaseObject  \n The destructor. Called when an animation object is being destroyed.  \n  \n```  \nvirtual ~CAnimationBaseObject();\n```  \n  \n##  <a name=\"canimationbaseobject__applytransitions\"></a>  CAnimationBaseObject::ApplyTransitions  \n Adds transitions to storyboard with encapsulated animation variable.  \n  \n```  \nvirtual BOOL ApplyTransitions(\n    IUIAnimationStoryboard* pStoryboard,  \n    BOOL bDependOnKeyframes);\n```  \n  \n### Parameters  \n `pStoryboard`  \n A pointer to a storyboard.  \n  \n `bDependOnKeyframes`  \n With FALSE this method adds only those transitions that do not depend on keyframes.  \n  \n### Return Value  \n TRUE if transitions were added successfully.  \n  \n### Remarks  \n Adds related transitions, that have been added with AddTransition (overloaded methods in derived classes), to storyboard.  \n  \n##  <a name=\"canimationbaseobject__canimationbaseobject\"></a>  CAnimationBaseObject::CAnimationBaseObject  \n Constructs an animation object.  \n  \n```  \nCAnimationBaseObject();\n\n \nCAnimationBaseObject(\n    UINT32 nGroupID,  \n    UINT32 nObjectID = (UINT32)-1,  \n    DWORD dwUserData = 0);\n```  \n  \n### Parameters  \n `nGroupID`  \n Specifies Group ID.  \n  \n `nObjectID`  \n Specifies Object ID.  \n  \n `dwUserData`  \n User-defined data, which can be associated with animation object and retrieved later at runtime.  \n  \n### Remarks  \n Constructs an animation objects and assigns default Object ID (0) and Group ID (0).  \n  \n##  <a name=\"canimationbaseobject__cleartransitions\"></a>  CAnimationBaseObject::ClearTransitions  \n Removes all related transitions.  \n  \n```  \nvirtual void ClearTransitions(BOOL bAutodestroy);\n```  \n  \n### Parameters  \n `bAutodestroy`  \n Specifies whether to destroy transition objects automatically, or just remove them from the related list.  \n  \n### Remarks  \n Removes all related transitions and destroys them if bAutodestroy or m_bAutodestroyTransitions flag is TRUE. Transitions should be destroyed automatically only if they are not allocated on the stack. If the above flags are FALSE, transitions are just removed from the internal list of related transitions.  \n  \n##  <a name=\"canimationbaseobject__containsvariable\"></a>  CAnimationBaseObject::ContainsVariable  \n Determines whether an animation object contains a particular animation variable.  \n  \n```  \nvirtual BOOL ContainsVariable(IUIAnimationVariable* pVariable);\n```  \n  \n### Parameters  \n `pVariable`  \n A pointer to animation variable.  \n  \n### Return Value  \n TRUE if the animation variable is contained in the animation object; otherwise FALSE.  \n  \n### Remarks  \n This method can be used to determine whether an animation variable specified by pVariable is contained within an animation object. An animation object, depending on its type, may contain several animation variables. For example, CAnimationColor contains three variables, one for each color component (red, green and blue). When a value of animation variable has changed, Windows Animation API sends ValueChanged or IntegerValueChanged events (if enabled), and the parameter of this event is a pointer to interface IUIAnimationVariable of animation variable. This method helps to obtain a pointer to animation from a pointer to contained COM object.  \n  \n##  <a name=\"canimationbaseobject__createtransitions\"></a>  CAnimationBaseObject::CreateTransitions  \n Creates transitions associated with an animation object.  \n  \n```  \nBOOL CreateTransitions();\n```  \n  \n### Return Value  \n TRUE if transitions were created successfully; otherwise FALSE.  \n  \n### Remarks  \n Loops over list of animation variables encapsulated in a derived animation object and creates transitions associated with each animation variable.  \n  \n##  <a name=\"canimationbaseobject__detachfromcontroller\"></a>  CAnimationBaseObject::DetachFromController  \n Detaches an animation object from parent animation controller.  \n  \n```  \nvoid DetachFromController();\n```  \n  \n### Remarks  \n This method is used internally.  \n  \n##  <a name=\"canimationbaseobject__enableintegervaluechangedevent\"></a>  CAnimationBaseObject::EnableIntegerValueChangedEvent  \n Sets up Integer Value Changed event handler.  \n  \n```  \nvirtual void EnableIntegerValueChangedEvent(\n    CAnimationController* pController,  \n    BOOL bEnable);\n```  \n  \n### Parameters  \n `pController`  \n A pointer to a parent controller.  \n  \n `bEnable`  \n Specifies whether to enable, or disable Integer Value Changed event.  \n  \n### Remarks  \n If the Integer Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationIntegerValueChanged method, which should be overridden in a CAnimationController-derived class. This method is called every time the animation integer value has changed.  \n  \n##  <a name=\"canimationbaseobject__enablevaluechangedevent\"></a>  CAnimationBaseObject::EnableValueChangedEvent  \n Sets up Value Changed event handler.  \n  \n```  \nvirtual void EnableValueChangedEvent(\n    CAnimationController* pController,  \n    BOOL bEnable);\n```  \n  \n### Parameters  \n `pController`  \n A pointer to a parent controller.  \n  \n `bEnable`  \n Specifies whether to enable, or disable Value Changed event.  \n  \n### Remarks  \n If the Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationValueChanged method, which should be overridden in a CAnimationController-derived class. This method is called every time the animation value has changed.  \n  \n##  <a name=\"canimationbaseobject__getanimationvariablelist\"></a>  CAnimationBaseObject::GetAnimationVariableList  \n Collects pointers to contained animation variables.  \n  \n```  \nvirtual void GetAnimationVariableList(\n    CList<CAnimationVariable*, \n    CAnimationVariable*>& lst) = 0;  \n```  \n  \n### Parameters  \n `lst`  \n A list that must be filled with animation variables contained in an animation object.  \n  \n### Remarks  \n This is a pure virtual method that must be overridden in a derived class. An animation object, depending on its type, contains one or more animation variables. For example, CAnimationPoint contains two variables, for X and Y coordinates respectively. The base class CAnimationBaseObject implements some generic methods, which act on a list of animation variables: ApplyTransitions, ClearTransitions, EnableValueChangedEvent, EnableIntegerValueChangedEvent. These methods call GetAnimationVariableList, which is filled in a derived class with actual animation variables contained in a particular animation object, then loop over the list and perform necessary actions. If you create a custom animation object, you must add to lst all animation variables contained in that object.  \n  \n##  <a name=\"canimationbaseobject__getautodestroytransitions\"></a>  CAnimationBaseObject::GetAutodestroyTransitions  \n Tells whether related transition are destroyed automatically.  \n  \n```  \nBOOL GetAutodestroyTransitions() const;\n\n \n```  \n  \n### Return Value  \n If TRUE, related transitions are destroyed automatically; if FALSE, transition objects should be deallocated by calling application.  \n  \n### Remarks  \n By default this flag is TRUE. Set this flag only if you allocated transition on the stack and/or transitions should be deallocated by the calling application.  \n  \n##  <a name=\"canimationbaseobject__getgroupid\"></a>  CAnimationBaseObject::GetGroupID  \n Returns current Group ID.  \n  \n```  \nUINT32 GetGroupID() const;\n\n \n```  \n  \n### Return Value  \n Current Group ID.  \n  \n### Remarks  \n Use this method to retrieve Group ID. It's 0 if Group ID has not been set explicitly in constructor or with SetID.  \n  \n##  <a name=\"canimationbaseobject__getobjectid\"></a>  CAnimationBaseObject::GetObjectID  \n Returns current Object ID.  \n  \n```  \nUINT32 GetObjectID() const;\n\n \n```  \n  \n### Return Value  \n Current Object ID.  \n  \n### Remarks  \n Use this method to retrieve Object ID. It's 0 if Object ID has not been set explicitly in constructor or with SetID.  \n  \n##  <a name=\"canimationbaseobject__getuserdata\"></a>  CAnimationBaseObject::GetUserData  \n Returns user defined data.  \n  \n```  \nDWORD GetUserData() const;\n\n \n```  \n  \n### Return Value  \n A value of custom data.  \n  \n### Remarks  \n Call this method to retrieve the custom data at runtime. The returned value will be 0 if it was not explicitly initialized in constructor or with SetUserData.  \n  \n##  <a name=\"canimationbaseobject__m_bautodestroytransitions\"></a>  CAnimationBaseObject::m_bAutodestroyTransitions  \n Specifies whether related transitions should be automatically destroyed.  \n  \n```  \nBOOL m_bAutodestroyTransitions;  \n```  \n  \n##  <a name=\"canimationbaseobject__m_dwuserdata\"></a>  CAnimationBaseObject::m_dwUserData  \n Stores user-defined data.  \n  \n```  \nDWORD m_dwUserData;  \n```  \n  \n##  <a name=\"canimationbaseobject__m_ngroupid\"></a>  CAnimationBaseObject::m_nGroupID  \n Specifies the Group ID of the animation object.  \n  \n```  \nUINT32 m_nGroupID;  \n```  \n  \n##  <a name=\"canimationbaseobject__m_nobjectid\"></a>  CAnimationBaseObject::m_nObjectID  \n Specifes the Object ID of the animation object.  \n  \n```  \nUINT32 m_nObjectID;  \n```  \n  \n##  <a name=\"canimationbaseobject__m_pparentcontroller\"></a>  CAnimationBaseObject::m_pParentController  \n A pointer to the parent animation controller.  \n  \n```  \nCAnimationController* m_pParentController;  \n```  \n  \n##  <a name=\"canimationbaseobject__setautodestroytransitions\"></a>  CAnimationBaseObject::SetAutodestroyTransitions  \n Sets a flag that orders to automatically destroy transitions.  \n  \n```  \nvoid SetAutodestroyTransitions(BOOL bValue);\n```  \n  \n### Parameters  \n `bValue`  \n Specifies the auto destroy flag.  \n  \n### Remarks  \n Set this flag only if you allocated transition objects using operator new. If for some reason transition objects are allocated on the stack, the auto destroy flag should be FALSE. By default this flag is TRUE.  \n  \n##  <a name=\"canimationbaseobject__setid\"></a>  CAnimationBaseObject::SetID  \n Sets new IDs.  \n  \n```  \nvoid SetID(\n    UINT32 nObjectID,  \n    UINT32 nGroupID = 0);\n```  \n  \n### Parameters  \n `nObjectID`  \n Specifies new Object ID.  \n  \n `nGroupID`  \n Specifies new Group ID.  \n  \n### Remarks  \n Allows to change Object ID and Group ID. If the new Group ID differs from the current ID, an animation object is moved to another group (a new group will be created, if necessary).  \n  \n##  <a name=\"canimationbaseobject__setparentanimationobjects\"></a>  CAnimationBaseObject::SetParentAnimationObjects  \n Establishes relationship between animation variables, contained in an animation object, and their container.  \n  \n```  \nvirtual void SetParentAnimationObjects();\n```  \n  \n### Remarks  \n This is a helper that can be used to establish relationship between animation variables, contained in an animation object, and their container. It loops over animation variables and sets a back pointer to a parent animation object to each animation variable. In the current implementation the actual relationship is established in CAnimationBaseObject::ApplyTransitions, therefore back pointers are not set until you call CAnimationGroup::Animate. Knowing the relationship may be helpful when you processing events and need to get a parent animation object from CAnimationVariable (use CAnimationVariable::GetParentAnimationObject).  \n  \n##  <a name=\"canimationbaseobject__setuserdata\"></a>  CAnimationBaseObject::SetUserData  \n Sets user-defined data.  \n  \n```  \nvoid SetUserData (DWORD dwUserData);\n```  \n  \n### Parameters  \n `dwUserData`  \n Specifies the custom data.  \n  \n### Remarks  \n Use this method to associate a custom data with an animation object. This data may be retrieved later at runtime by GetUserData.  \n  \n## See Also  \n [Classes](../../mfc/reference/mfc-classes.md)\n"}