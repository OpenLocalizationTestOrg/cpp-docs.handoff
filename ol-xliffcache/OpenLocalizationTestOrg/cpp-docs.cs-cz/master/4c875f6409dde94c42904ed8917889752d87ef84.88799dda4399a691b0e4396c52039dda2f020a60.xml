{"nodes":[{"pos":[12,43],"content":"CHeapPtr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CHeapPtr Class | Microsoft Docs","pos":[0,31]}]},{"content":"CHeapPtr Class","pos":[637,651]},{"content":"A smart pointer class for managing heap pointers.","pos":[652,701]},{"pos":[709,819],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[828,834]},{"content":"Parameters","pos":[966,976]},{"content":"The object type to be stored on the heap.","pos":[987,1028]},{"content":"The memory allocation class to use.","pos":[1050,1085]},{"content":"Members","pos":[1094,1101]},{"content":"Public Constructors","pos":[1111,1130]},{"content":"Name","pos":[1137,1141]},{"content":"Description","pos":[1142,1153]},{"content":"CHeapPtr::CHeapPtr","pos":[1192,1210]},{"content":"The constructor.","pos":[1233,1249]},{"content":"Public Methods","pos":[1260,1274]},{"content":"Name","pos":[1281,1285]},{"content":"Description","pos":[1286,1297]},{"content":"CHeapPtr::Allocate","pos":[1336,1354]},{"content":"Call this method to allocate memory on the heap to store objects.","pos":[1377,1442]},{"content":"CHeapPtr::Reallocate","pos":[1448,1468]},{"content":"Call this method to reallocate the memory on the heap.","pos":[1493,1547]},{"content":"Public Operators","pos":[1558,1574]},{"content":"Name","pos":[1581,1585]},{"content":"Description","pos":[1586,1597]},{"content":"CHeapPtr::operator =","pos":[1636,1656]},{"content":"The assignment operator.","pos":[1682,1706]},{"content":"Remarks","pos":[1716,1723]},{"content":"is derived from <bpt id=\"p1\">[</bpt>CHeapPtrBase<ept id=\"p1\">](../../atl/reference/cheapptrbase-class.md)</ept> and by default uses the CRT routines (in <bpt id=\"p2\">[</bpt>CCRTAllocator<ept id=\"p2\">](../../atl/reference/ccrtallocator-class.md)</ept>) to allocate and free memory.","pos":[1738,1942],"source":" is derived from [CHeapPtrBase](../../atl/reference/cheapptrbase-class.md) and by default uses the CRT routines (in [CCRTAllocator](../../atl/reference/ccrtallocator-class.md)) to allocate and free memory."},{"content":"The class <bpt id=\"p1\">[</bpt>CHeapPtrList<ept id=\"p1\">](../../atl/reference/cheapptrlist-class.md)</ept> may be used to construct a list of heap pointers.","pos":[1943,2060],"source":" The class [CHeapPtrList](../../atl/reference/cheapptrlist-class.md) may be used to construct a list of heap pointers."},{"content":"See also <bpt id=\"p1\">[</bpt>CComHeapPtr<ept id=\"p1\">](../../atl/reference/ccomheapptr-class.md)</ept>, which uses COM memory allocation routines.","pos":[2061,2169],"source":" See also [CComHeapPtr](../../atl/reference/ccomheapptr-class.md), which uses COM memory allocation routines."},{"content":"Inheritance Hierarchy","pos":[2178,2199]},{"content":"CHeapPtrBase","pos":[2204,2216]},{"content":"Requirements","pos":[2286,2298]},{"pos":[2302,2323],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcore.h","source":"**Header:** atlcore.h"},{"pos":[2368,2386],"content":"CHeapPtr::Allocate"},{"content":"Call this method to allocate memory on the heap to store objects.","pos":[2390,2455]},{"content":"Parameters","pos":[2523,2533]},{"content":"The number of elements used to calculate the amount of memory to allocate.","pos":[2552,2626]},{"content":"The default value is 1.","pos":[2627,2650]},{"content":"Return Value","pos":[2660,2672]},{"content":"Returns true if the memory was successfully allocated, false on failure.","pos":[2676,2748]},{"content":"Remarks","pos":[2758,2765]},{"pos":[2769,2903],"content":"The allocator routines are used to reserve enough memory on the heap to store <bpt id=\"p1\">*</bpt>nElement<ept id=\"p1\">*</ept> objects of a type defined in the constructor.","source":"The allocator routines are used to reserve enough memory on the heap to store *nElement* objects of a type defined in the constructor."},{"content":"Example","pos":[2913,2920]},{"pos":[2935,2955],"content":"NVC_ATL_Utilities#77"},{"pos":[3050,3068],"content":"CHeapPtr::CHeapPtr"},{"content":"The constructor.","pos":[3072,3088]},{"content":"Parameters","pos":[3221,3231]},{"content":"An existing heap pointer or <ph id=\"ph1\">`CHeapPtr`</ph>.","pos":[3242,3281],"source":" An existing heap pointer or `CHeapPtr`."},{"content":"Remarks","pos":[3291,3298]},{"content":"The heap pointer can optionally be created using an existing pointer, or a <ph id=\"ph1\">`CHeapPtr`</ph> object.","pos":[3302,3395],"source":"The heap pointer can optionally be created using an existing pointer, or a `CHeapPtr` object."},{"content":"If so, the new <ph id=\"ph1\">`CHeapPtr`</ph> object assumes responsibility for managing the new pointer and resources.","pos":[3396,3495],"source":" If so, the new `CHeapPtr` object assumes responsibility for managing the new pointer and resources."},{"content":"Example","pos":[3505,3512]},{"pos":[3527,3547],"content":"NVC_ATL_Utilities#78"},{"pos":[3645,3665],"content":"CHeapPtr::operator ="},{"content":"Assignment operator.","pos":[3669,3689]},{"content":"Parameters","pos":[3792,3802]},{"content":"An existing <ph id=\"ph1\">`CHeapPtr`</ph> object.","pos":[3813,3843],"source":" An existing `CHeapPtr` object."},{"content":"Return Value","pos":[3853,3865]},{"pos":[3869,3915],"content":"Returns a reference to the updated <ph id=\"ph1\">`CHeapPtr`</ph>.","source":"Returns a reference to the updated `CHeapPtr`."},{"content":"Example","pos":[3925,3932]},{"pos":[3947,3967],"content":"NVC_ATL_Utilities#80"},{"pos":[4064,4084],"content":"CHeapPtr::Reallocate"},{"content":"Call this method to reallocate the memory on the heap.","pos":[4088,4142]},{"content":"Parameters","pos":[4211,4221]},{"content":"The new number of elements used to calculate the amount of memory to allocate.","pos":[4240,4318]},{"content":"Return Value","pos":[4328,4340]},{"content":"Returns true if the memory was successfully allocated, false on failure.","pos":[4344,4416]},{"content":"Example","pos":[4426,4433]},{"pos":[4448,4468],"content":"NVC_ATL_Utilities#79"},{"content":"See Also","pos":[4527,4535]},{"content":"CHeapPtrBase Class","pos":[4540,4558]},{"content":"CCRTAllocator Class","pos":[4608,4627]},{"content":"Class Overview","pos":[4678,4692]}],"content":"---\ntitle: \"CHeapPtr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CHeapPtr\"\n  - \"CHeapPtr\"\n  - \"ATL.CHeapPtr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CHeapPtr class\"\nms.assetid: e5c5bfd4-9bf1-4164-8a83-8155fe253454\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CHeapPtr Class\nA smart pointer class for managing heap pointers.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\ntemplate<\ntypename\nT,\nclass\nAllocator\n= CCRTAllocator\n> class CHeapPtr :\npublic CHeapPtrBase<\nT,\nAllocator>\n```  \n  \n#### Parameters  \n `T`  \n The object type to be stored on the heap.  \n  \n `Allocator`  \n The memory allocation class to use.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHeapPtr::CHeapPtr](#cheapptr__cheapptr)|The constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHeapPtr::Allocate](#cheapptr__allocate)|Call this method to allocate memory on the heap to store objects.|  \n|[CHeapPtr::Reallocate](#cheapptr__reallocate)|Call this method to reallocate the memory on the heap.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHeapPtr::operator =](#cheapptr__operator_eq)|The assignment operator.|  \n  \n## Remarks  \n `CHeapPtr` is derived from [CHeapPtrBase](../../atl/reference/cheapptrbase-class.md) and by default uses the CRT routines (in [CCRTAllocator](../../atl/reference/ccrtallocator-class.md)) to allocate and free memory. The class [CHeapPtrList](../../atl/reference/cheapptrlist-class.md) may be used to construct a list of heap pointers. See also [CComHeapPtr](../../atl/reference/ccomheapptr-class.md), which uses COM memory allocation routines.  \n  \n## Inheritance Hierarchy  \n [CHeapPtrBase](../../atl/reference/cheapptrbase-class.md)  \n  \n `CHeapPtr`  \n  \n## Requirements  \n **Header:** atlcore.h  \n  \n##  <a name=\"cheapptr__allocate\"></a>  CHeapPtr::Allocate  \n Call this method to allocate memory on the heap to store objects.  \n  \n```\nbool Allocate(size_t\nnElements = 1) throw();\n```  \n  \n### Parameters  \n `nElements`  \n The number of elements used to calculate the amount of memory to allocate. The default value is 1.  \n  \n### Return Value  \n Returns true if the memory was successfully allocated, false on failure.  \n  \n### Remarks  \n The allocator routines are used to reserve enough memory on the heap to store *nElement* objects of a type defined in the constructor.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#77](../../atl/codesnippet/cpp/cheapptr-class_1.cpp)]  \n  \n##  <a name=\"cheapptr__cheapptr\"></a>  CHeapPtr::CHeapPtr  \n The constructor.  \n  \n```\nCHeapPtr() throw();\n\nexplicit CHeapPtr(\n    T* p) throw();\n\nCHeapPtr(\n    CHeapPtr<T, Allocator>& p) throw();\n```  \n  \n### Parameters  \n `p`  \n An existing heap pointer or `CHeapPtr`.  \n  \n### Remarks  \n The heap pointer can optionally be created using an existing pointer, or a `CHeapPtr` object. If so, the new `CHeapPtr` object assumes responsibility for managing the new pointer and resources.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#78](../../atl/codesnippet/cpp/cheapptr-class_2.cpp)]  \n  \n##  <a name=\"cheapptr__operator_eq\"></a>  CHeapPtr::operator =  \n Assignment operator.  \n  \n```\nCHeapPtr<T,\n    Allocator>& operator=(\n    CHeapPtr<T,\n Allocator>& p) throw();\n```  \n  \n### Parameters  \n `p`  \n An existing `CHeapPtr` object.  \n  \n### Return Value  \n Returns a reference to the updated `CHeapPtr`.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#80](../../atl/codesnippet/cpp/cheapptr-class_3.cpp)]  \n  \n##  <a name=\"cheapptr__reallocate\"></a>  CHeapPtr::Reallocate  \n Call this method to reallocate the memory on the heap.  \n  \n```\nbool Reallocate(size_t    nElements) throw();\n```  \n  \n### Parameters  \n `nElements`  \n The new number of elements used to calculate the amount of memory to allocate.  \n  \n### Return Value  \n Returns true if the memory was successfully allocated, false on failure.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#79](../../atl/codesnippet/cpp/cheapptr-class_4.cpp)]  \n  \n## See Also  \n [CHeapPtrBase Class](../../atl/reference/cheapptrbase-class.md)   \n [CCRTAllocator Class](../../atl/reference/ccrtallocator-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}