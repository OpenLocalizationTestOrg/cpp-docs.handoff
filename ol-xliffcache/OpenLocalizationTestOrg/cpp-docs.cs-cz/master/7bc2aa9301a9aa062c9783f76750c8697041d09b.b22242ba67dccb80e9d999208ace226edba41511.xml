{"nodes":[{"pos":[12,55],"content":"ATL HTTP Utility Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ATL HTTP Utility Functions | Microsoft Docs","pos":[0,43]}]},{"pos":[279,305],"content":"ATL HTTP Utility Functions","linkify":"ATL HTTP Utility Functions","nodes":[{"content":"ATL HTTP Utility Functions","pos":[0,26]}]},{"content":"These functions support manipulation of URLs.","pos":[307,352]},{"pos":[369,410],"content":"<bpt id=\"p1\">[</bpt>AtlCanonicalizeUrl<ept id=\"p1\">](#atlcanonicalizeurl)</ept>","source":"[AtlCanonicalizeUrl](#atlcanonicalizeurl)"},{"content":"Canonicalizes a URL, which includes converting unsafe characters and spaces into escape sequences.","pos":[411,509]},{"pos":[514,545],"content":"<bpt id=\"p1\">[</bpt>AtlCombineUrl<ept id=\"p1\">](#atlcombineurl)</ept>","source":"[AtlCombineUrl](#atlcombineurl)"},{"content":"Combines a base URL and a relative URL into a single, canonical URL.","pos":[546,614]},{"pos":[619,648],"content":"<bpt id=\"p1\">[</bpt>AtlEscapeUrl<ept id=\"p1\">](#atlescapeurl)</ept>","source":"[AtlEscapeUrl](#atlescapeurl)"},{"content":"Converts all unsafe characters to escape sequences.","pos":[649,700]},{"pos":[705,750],"content":"<bpt id=\"p1\">[</bpt>AtlGetDefaultUrlPort<ept id=\"p1\">](#atlgetdefaulturlport)</ept>","source":"[AtlGetDefaultUrlPort](#atlgetdefaulturlport)"},{"content":"Gets the default port number associated with a particular Internet protocol or scheme.","pos":[751,837]},{"pos":[842,883],"content":"<bpt id=\"p1\">[</bpt>AtlIsUnsafeUrlChar<ept id=\"p1\">](#atlisunsafeurlchar)</ept>","source":"[AtlIsUnsafeUrlChar](#atlisunsafeurlchar)"},{"content":"Determines whether a character is safe for use in a URL.","pos":[884,940]},{"pos":[945,978],"content":"<bpt id=\"p1\">[</bpt>AtlUnescapeUrl<ept id=\"p1\">](#atlunescapeurl)</ept>","source":"[AtlUnescapeUrl](#atlunescapeurl)"},{"content":"Converts escaped characters back to their original values.","pos":[979,1037]},{"pos":[1042,1065],"content":"<bpt id=\"p1\">[</bpt>RGBToHtml<ept id=\"p1\">](#rgbtohtml)</ept>","source":"[RGBToHtml](#rgbtohtml)"},{"pos":[1066,1205],"content":"Converts a <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value to the HTML text corresponding to that color value.","source":"Converts a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value to the HTML text corresponding to that color value."},{"pos":[1208,1253],"content":"<bpt id=\"p1\">[</bpt>SystemTimeToHttpDate<ept id=\"p1\">](#systemtimetohttpdate)</ept>","source":"[SystemTimeToHttpDate](#systemtimetohttpdate)"},{"content":"Call this function to convert a system time to a string in a format suitable for using in HTTP headers.","pos":[1254,1357]},{"pos":[1364,1416],"content":"<bpt id=\"p1\">&lt;a name=\"atlcanonicalizeurl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlCanonicalizeUrl","linkify":"<a name=\"atlcanonicalizeurl\"></a> AtlCanonicalizeUrl","source":"<a name=\"atlcanonicalizeurl\"></a> AtlCanonicalizeUrl"},{"content":"Call this function to canonicalize a URL, which includes converting unsafe characters and spaces into escape sequences.","pos":[1417,1536]},{"pos":[1546,1552],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1721,1731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The URL to be canonicalized.","pos":[1746,1774]},{"content":"Caller-allocated buffer to receive the canonicalized URL.","pos":[1802,1859]},{"content":"Pointer to a variable that contains the length in characters of <ph id=\"ph1\">`szCanonicalized`</ph>.","pos":[1884,1966],"source":" Pointer to a variable that contains the length in characters of `szCanonicalized`."},{"content":"If the function succeeds, the variable receives the number of characters written to the buffer not including the terminating null character.","pos":[1967,2107]},{"content":"If the function fails, the variable receives the required length in bytes of the buffer including space for the terminating null character.","pos":[2108,2247]},{"content":"Flags controlling the behavior of this function.","pos":[2267,2315]},{"content":"See <bpt id=\"p1\">[</bpt>ATL_URL Flags<ept id=\"p1\">](http://msdn.microsoft.com/library/76e8cc5c-4e17-4eb1-ac29-a94d5256c4a7)</ept>.","pos":[2316,2408],"source":" See [ATL_URL Flags](http://msdn.microsoft.com/library/76e8cc5c-4e17-4eb1-ac29-a94d5256c4a7)."},{"pos":[2418,2430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2434,2484],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[2494,2501],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2505,2693],"content":"Behaves like the current version of <bpt id=\"p1\">[</bpt>InternetCanonicalizeUrl<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa384342)</ept> but does not require WinInet or Internet Explorer to be installed.","source":"Behaves like the current version of [InternetCanonicalizeUrl](http://msdn.microsoft.com/library/windows/desktop/aa384342) but does not require WinInet or Internet Explorer to be installed."},{"pos":[2703,2715],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2719,2740],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[2750,2758],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2762,2847],"content":"<bpt id=\"p1\">[</bpt>InternetCanonicalizeUrl<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa384342)</ept>","source":"[InternetCanonicalizeUrl](http://msdn.microsoft.com/library/windows/desktop/aa384342)"},{"pos":[2853,2895],"content":"<bpt id=\"p1\">&lt;a name=\"atlcombineurl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlCombineUrl","linkify":"<a name=\"atlcombineurl\"></a> AtlCombineUrl","source":"<a name=\"atlcombineurl\"></a> AtlCombineUrl"},{"content":"Call this function to combine a base URL and a relative URL into a single, canonical URL.","pos":[2897,2986]},{"pos":[2996,3002],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3191,3201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>szBaseUrl<ept id=\"p1\">*</ept>","pos":[3205,3216],"source":"*szBaseUrl*"},{"content":"The base URL.","pos":[3220,3233]},{"content":"<bpt id=\"p1\">*</bpt>szRelativeUrl<ept id=\"p1\">*</ept>","pos":[3240,3255],"source":"*szRelativeUrl*"},{"content":"The URL relative to the base URL.","pos":[3259,3292]},{"content":"Caller-allocated buffer to receive the canonicalized URL.","pos":[3313,3370]},{"content":"Pointer to a variable that contains the length in characters of <ph id=\"ph1\">`szBuffer`</ph>.","pos":[3395,3470],"source":" Pointer to a variable that contains the length in characters of `szBuffer`."},{"content":"If the function succeeds, the variable receives the number of characters written to the buffer not including the terminating null character.","pos":[3471,3611]},{"content":"If the function fails, the variable receives the required length in bytes of the buffer including space for the terminating null character.","pos":[3612,3751]},{"content":"Flags controlling the behavior of this function.","pos":[3771,3819]},{"content":"See <bpt id=\"p1\">[</bpt>ATL_URL Flags<ept id=\"p1\">](http://msdn.microsoft.com/library/76e8cc5c-4e17-4eb1-ac29-a94d5256c4a7)</ept>.","pos":[3820,3912],"source":" See [ATL_URL Flags](http://msdn.microsoft.com/library/76e8cc5c-4e17-4eb1-ac29-a94d5256c4a7)."},{"pos":[3922,3934],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3938,3988],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[3998,4005],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4009,4192],"content":"Behaves like the current version of <bpt id=\"p1\">[</bpt>InternetCombineUrl<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa384355)</ept> but does not require WinInet or Internet Explorer to be installed.","source":"Behaves like the current version of [InternetCombineUrl](http://msdn.microsoft.com/library/windows/desktop/aa384355) but does not require WinInet or Internet Explorer to be installed."},{"pos":[4202,4214],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4218,4239],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[4247,4287],"content":"<bpt id=\"p1\">&lt;a name=\"atlescapeurl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlEscapeUrl","linkify":"<a name=\"atlescapeurl\"></a> AtlEscapeUrl","source":"<a name=\"atlescapeurl\"></a> AtlEscapeUrl"},{"content":"Call this function to convert all unsafe characters to escape sequences.","pos":[4289,4361]},{"pos":[4371,4377],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[4722,4732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The URL to be converted.","pos":[4754,4778]},{"content":"Caller-allocated buffer to which the converted URL will be written.","pos":[4804,4871]},{"content":"Pointer to a DWORD variable.","pos":[4893,4921]},{"content":"If the function succeeds, <ph id=\"ph1\">`pdwStrLen`</ph> receives the number of characters written to the buffer, not including the terminating null character.","pos":[4922,5062],"source":" If the function succeeds, `pdwStrLen` receives the number of characters written to the buffer, not including the terminating null character."},{"content":"If the function fails, the variable receives the required length in bytes of the buffer including space for the terminating null character.","pos":[5063,5202]},{"content":"When using the wide character version of this method, <ph id=\"ph1\">`pdwStrLen`</ph> receives the number of characters required, not the number of bytes.","pos":[5203,5337],"source":" When using the wide character version of this method, `pdwStrLen` receives the number of characters required, not the number of bytes."},{"content":"The size of the buffer <ph id=\"ph1\">`lpszStringOut`</ph>.","pos":[5361,5400],"source":" The size of the buffer `lpszStringOut`."},{"content":"Flags controlling the behavior of this function.","pos":[5420,5468]},{"content":"See <bpt id=\"p1\">[</bpt>ATL_URL Flags<ept id=\"p1\">](http://msdn.microsoft.com/library/76e8cc5c-4e17-4eb1-ac29-a94d5256c4a7)</ept>.","pos":[5469,5561],"source":" See [ATL_URL Flags](http://msdn.microsoft.com/library/76e8cc5c-4e17-4eb1-ac29-a94d5256c4a7)."},{"pos":[5571,5583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5587,5637],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[5647,5659],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5663,5684],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"content":"Call this function to get the default port number associated with a particular Internet protocol or scheme.","pos":[5730,5837]},{"pos":[5847,5853],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[5956,5966],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>m_nScheme<ept id=\"p1\">*</ept>","pos":[5970,5981],"source":"*m_nScheme*"},{"content":"The <bpt id=\"p1\">[</bpt>ATL_URL_SCHEME<ept id=\"p1\">](atl-url-scheme-enum.md)</ept> value identifying the scheme for which you want to obtain the port number.","pos":[5985,6104],"source":" The [ATL_URL_SCHEME](atl-url-scheme-enum.md) value identifying the scheme for which you want to obtain the port number."},{"pos":[6114,6126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6130,6279],"content":"The <bpt id=\"p1\">[</bpt>ATL_URL_PORT<ept id=\"p1\">](atl-typedefs.md#atl_url_port)</ept> associated with the specified scheme or ATL_URL_INVALID_PORT_NUMBER if the scheme is not recognized.","source":"The [ATL_URL_PORT](atl-typedefs.md#atl_url_port) associated with the specified scheme or ATL_URL_INVALID_PORT_NUMBER if the scheme is not recognized."},{"pos":[6289,6301],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6305,6326],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[6335,6387],"content":"<bpt id=\"p1\">&lt;a name=\"atlisunsafeurlchar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlIsUnsafeUrlChar","linkify":"<a name=\"atlisunsafeurlchar\"></a> AtlIsUnsafeUrlChar","source":"<a name=\"atlisunsafeurlchar\"></a> AtlIsUnsafeUrlChar"},{"content":"Call this function to find out whether a character is safe for use in a URL.","pos":[6389,6465]},{"pos":[6474,6480],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[6558,6568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The character to be tested for safety.","pos":[6582,6620]},{"pos":[6630,6642],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6646,6717],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the input character is unsafe, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> otherwise.","source":"Returns **TRUE** if the input character is unsafe, **FALSE** otherwise."},{"pos":[6727,6734],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6738,6877],"content":"Characters that should not be used in URLs can be tested using this function and converted using <bpt id=\"p1\">[</bpt>AtlCanonicalizeUrl<ept id=\"p1\">](#atlcanonicalizeurl)</ept>.","source":"Characters that should not be used in URLs can be tested using this function and converted using [AtlCanonicalizeUrl](#atlcanonicalizeurl)."},{"pos":[6887,6899],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6903,6924],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[6932,6976],"content":"<bpt id=\"p1\">&lt;a name=\"atlunescapeurl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlUnescapeUrl","linkify":"<a name=\"atlunescapeurl\"></a> AtlUnescapeUrl","source":"<a name=\"atlunescapeurl\"></a> AtlUnescapeUrl"},{"content":"Call this function to convert escaped characters back to their original values.","pos":[6978,7057]},{"pos":[7067,7073],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[7373,7383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The URL to be converted.","pos":[7405,7429]},{"content":"Caller-allocated buffer to which the converted URL will be written.","pos":[7455,7522]},{"content":"Pointer to a DWORD variable.","pos":[7544,7572]},{"content":"If the function succeeds, the variable receives the number of characters written to the buffer not including the terminating null character.","pos":[7573,7713]},{"content":"If the function fails, the variable receives the required length in bytes of the buffer including space for the terminating null character.","pos":[7714,7853]},{"content":"The size of the buffer <ph id=\"ph1\">`lpszStringOut`</ph>.","pos":[7877,7916],"source":" The size of the buffer `lpszStringOut`."},{"pos":[7926,7938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7942,7992],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[8002,8009],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8013,8086],"content":"Reverses the conversion process applied by <bpt id=\"p1\">[</bpt>AtlEscapeUrl<ept id=\"p1\">](#atlescapeurl)</ept>.","source":"Reverses the conversion process applied by [AtlEscapeUrl](#atlescapeurl)."},{"pos":[8096,8108],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[8112,8133],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[8142,8176],"content":"<bpt id=\"p1\">&lt;a name=\"rgbtohtml\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> RGBToHtml","linkify":"<a name=\"rgbtohtml\"></a> RGBToHtml","source":"<a name=\"rgbtohtml\"></a> RGBToHtml"},{"pos":[8177,8316],"content":"Converts a <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value to the HTML text corresponding to that color value.","source":"Converts a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value to the HTML text corresponding to that color value."},{"pos":[8326,8332],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[8442,8452],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An RGB color value.","pos":[8467,8486]},{"content":"Caller-allocated buffer to receive the text for the HTML color value.","pos":[8504,8573]},{"content":"The buffer must have space for at least 8 characters including space for the null terminator).","pos":[8574,8668]},{"content":"<bpt id=\"p1\">*</bpt>nBuffer<ept id=\"p1\">*</ept>","pos":[8675,8684],"source":"*nBuffer*"},{"content":"The size in bytes of the buffer (including space for the null terminator).","pos":[8688,8762]},{"pos":[8772,8784],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8788,8838],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[8848,8855],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An HTML color value is a pound sign followed by a 6-digit hexadecimal value using 2 digits for each of the red, green, and blue components of the color (for example, #FFFFFF is white).","pos":[8859,9043]},{"pos":[9053,9065],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[9069,9090],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[9095,9151],"content":"<bpt id=\"p1\">&lt;a name=\"systemtimetohttpdate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> SystemTimeToHttpDate","linkify":"<a name=\"systemtimetohttpdate\"></a> SystemTimeToHttpDate","source":"<a name=\"systemtimetohttpdate\"></a> SystemTimeToHttpDate"},{"content":"Call this function to convert a system time to a string in a format suitable for using in HTTP headers.","pos":[9152,9255]},{"pos":[9265,9271],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[9384,9394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The system time to be obtained as an HTTP format string.","pos":[9406,9462]},{"content":"<bpt id=\"p1\">*</bpt>strTime<ept id=\"p1\">*</ept>","pos":[9469,9478],"source":"*strTime*"},{"content":"A reference to a string variable to receive the HTTP date time as defined in RFC 2616 (<bpt id=\"p1\">[</bpt>http://www.ietf.org/rfc/rfc2616.txt<ept id=\"p1\">](http://www.ietf.org/rfc/rfc2616.txt)</ept>) and RFC 1123 (<bpt id=\"p2\">[</bpt>http://www.ietf.org/rfc/rfc1123.txt<ept id=\"p2\">](http://www.ietf.org/rfc/rfc1123.txt)</ept>).","pos":[9482,9735],"source":" A reference to a string variable to receive the HTTP date time as defined in RFC 2616 ([http://www.ietf.org/rfc/rfc2616.txt](http://www.ietf.org/rfc/rfc2616.txt)) and RFC 1123 ([http://www.ietf.org/rfc/rfc1123.txt](http://www.ietf.org/rfc/rfc1123.txt))."},{"pos":[9745,9757],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[9761,9782],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[9789,9797],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Concepts<ept id=\"p1\">](../../atl/active-template-library-atl-concepts.md)</ept><ph id=\"ph1\"> </ph>","pos":[9801,9863],"source":"[Concepts](../../atl/active-template-library-atl-concepts.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ATL COM Desktop Components<ept id=\"p1\">](../../atl/atl-com-desktop-components.md)</ept>","pos":[9866,9936],"source":" [ATL COM Desktop Components](../../atl/atl-com-desktop-components.md)"}],"content":"---\ntitle: \"ATL HTTP Utility Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 4db57ef2-31fa-4696-bbeb-79a9035033ed\ncaps.latest.revision: 4\nauthor: \"mikeblome\"\nms.author: \"mblome\"\n---\n# ATL HTTP Utility Functions\n\nThese functions support manipulation of URLs.\n\n|||  \n|-|-|  \n|[AtlCanonicalizeUrl](#atlcanonicalizeurl)|Canonicalizes a URL, which includes converting unsafe characters and spaces into escape sequences.|  \n|[AtlCombineUrl](#atlcombineurl)|Combines a base URL and a relative URL into a single, canonical URL.|  \n|[AtlEscapeUrl](#atlescapeurl)|Converts all unsafe characters to escape sequences.|  \n|[AtlGetDefaultUrlPort](#atlgetdefaulturlport)|Gets the default port number associated with a particular Internet protocol or scheme.|  \n|[AtlIsUnsafeUrlChar](#atlisunsafeurlchar)|Determines whether a character is safe for use in a URL.|  \n|[AtlUnescapeUrl](#atlunescapeurl)|Converts escaped characters back to their original values.|  \n|[RGBToHtml](#rgbtohtml)|Converts a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value to the HTML text corresponding to that color value.|\n|[SystemTimeToHttpDate](#systemtimetohttpdate)|Call this function to convert a system time to a string in a format suitable for using in HTTP headers.|\n\n\n## <a name=\"atlcanonicalizeurl\"></a> AtlCanonicalizeUrl\nCall this function to canonicalize a URL, which includes converting unsafe characters and spaces into escape sequences.  \n  \n### Syntax  \n  \n```    \ninline BOOL AtlCanonicalizeUrl(  \n   LPCTSTR szUrl,  \n   LPTSTR szCanonicalized,  \n   DWORD* pdwMaxLength,  \n   DWORD dwFlags = 0) throw();  \n```  \n  \n### Parameters  \n `szUrl`  \n The URL to be canonicalized.  \n  \n `szCanonicalized`  \n Caller-allocated buffer to receive the canonicalized URL.  \n  \n `pdwMaxLength`  \n Pointer to a variable that contains the length in characters of `szCanonicalized`. If the function succeeds, the variable receives the number of characters written to the buffer not including the terminating null character. If the function fails, the variable receives the required length in bytes of the buffer including space for the terminating null character.  \n  \n `dwFlags`  \n Flags controlling the behavior of this function. See [ATL_URL Flags](http://msdn.microsoft.com/library/76e8cc5c-4e17-4eb1-ac29-a94d5256c4a7).  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n Behaves like the current version of [InternetCanonicalizeUrl](http://msdn.microsoft.com/library/windows/desktop/aa384342) but does not require WinInet or Internet Explorer to be installed.  \n  \n### Requirements  \n **Header:** atlutil.h  \n  \n### See Also  \n [InternetCanonicalizeUrl](http://msdn.microsoft.com/library/windows/desktop/aa384342)\n\n ## <a name=\"atlcombineurl\"></a> AtlCombineUrl\n Call this function to combine a base URL and a relative URL into a single, canonical URL.  \n  \n### Syntax  \n  \n```    \ninline BOOL AtlCombineUrl(  \n   LPCTSTR szBaseUrl,  \n   LPCTSTR szRelativeUrl,  \n   LPTSTR szBuffer,  \n   DWORD* pdwMaxLength,  \n   DWORD dwFlags = 0) throw();  \n```  \n  \n### Parameters  \n *szBaseUrl*  \n The base URL.  \n  \n *szRelativeUrl*  \n The URL relative to the base URL.  \n  \n `szBuffer`  \n Caller-allocated buffer to receive the canonicalized URL.  \n  \n `pdwMaxLength`  \n Pointer to a variable that contains the length in characters of `szBuffer`. If the function succeeds, the variable receives the number of characters written to the buffer not including the terminating null character. If the function fails, the variable receives the required length in bytes of the buffer including space for the terminating null character.  \n  \n `dwFlags`  \n Flags controlling the behavior of this function. See [ATL_URL Flags](http://msdn.microsoft.com/library/76e8cc5c-4e17-4eb1-ac29-a94d5256c4a7).  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n Behaves like the current version of [InternetCombineUrl](http://msdn.microsoft.com/library/windows/desktop/aa384355) but does not require WinInet or Internet Explorer to be installed.  \n  \n### Requirements  \n **Header:** atlutil.h  \n\n ## <a name=\"atlescapeurl\"></a> AtlEscapeUrl\n Call this function to convert all unsafe characters to escape sequences.  \n  \n### Syntax  \n  \n```    \ninline BOOL AtlEscapeUrl(  \n   LPCSTR szStringIn,  \n   LPSTR szStringOut,  \n   DWORD* pdwStrLen,  \n   DWORD dwMaxLength,  \n   DWORD dwFlags = 0) throw();  \n   \ninline BOOL AtlEscapeUrl(  \n   LPCWSTR szStringIn,  \n   LPWSTR szStringOut,  \n   DWORD* pdwStrLen,  \n   DWORD dwMaxLength,  \n   DWORD dwFlags = 0) throw();  \n```  \n  \n### Parameters  \n `lpszStringIn`  \n The URL to be converted.  \n  \n `lpszStringOut`  \n Caller-allocated buffer to which the converted URL will be written.  \n  \n `pdwStrLen`  \n Pointer to a DWORD variable. If the function succeeds, `pdwStrLen` receives the number of characters written to the buffer, not including the terminating null character. If the function fails, the variable receives the required length in bytes of the buffer including space for the terminating null character. When using the wide character version of this method, `pdwStrLen` receives the number of characters required, not the number of bytes.  \n  \n `dwMaxLength`  \n The size of the buffer `lpszStringOut`.  \n  \n `dwFlags`  \n Flags controlling the behavior of this function. See [ATL_URL Flags](http://msdn.microsoft.com/library/76e8cc5c-4e17-4eb1-ac29-a94d5256c4a7).  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Requirements  \n **Header:** atlutil.h  \n\n ## <a name=\"atlgetdefaulturlport\"></a> \n Call this function to get the default port number associated with a particular Internet protocol or scheme.  \n  \n### Syntax  \n  \n```  \ninline ATL_URL_PORT AtlGetDefaultUrlPort(ATL_URL_SCHEME m_nScheme) throw();  \n```  \n  \n### Parameters  \n *m_nScheme*  \n The [ATL_URL_SCHEME](atl-url-scheme-enum.md) value identifying the scheme for which you want to obtain the port number.  \n  \n### Return Value  \n The [ATL_URL_PORT](atl-typedefs.md#atl_url_port) associated with the specified scheme or ATL_URL_INVALID_PORT_NUMBER if the scheme is not recognized.  \n  \n### Requirements  \n **Header:** atlutil.h  \n \n ## <a name=\"atlisunsafeurlchar\"></a> AtlIsUnsafeUrlChar\n Call this function to find out whether a character is safe for use in a URL.  \n  \n## Syntax  \n  \n```  \ninline BOOL AtlIsUnsafeUrlChar(char chIn) throw();  \n```  \n  \n### Parameters  \n `chIn`  \n The character to be tested for safety.  \n  \n### Return Value  \n Returns **TRUE** if the input character is unsafe, **FALSE** otherwise.  \n  \n### Remarks  \n Characters that should not be used in URLs can be tested using this function and converted using [AtlCanonicalizeUrl](#atlcanonicalizeurl).  \n  \n### Requirements  \n **Header:** atlutil.h  \n\n ## <a name=\"atlunescapeurl\"></a> AtlUnescapeUrl\n Call this function to convert escaped characters back to their original values.  \n  \n### Syntax  \n  \n```    \ninline BOOL AtlUnescapeUrl(  \n   LPCSTR szStringIn,  \n   LPSTR szStringOut,  \n   LPDWORD pdwStrLen,  \n   DWORD dwMaxLength) throw();  \n\ninline BOOL AtlUnescapeUrl(  \n   LPCWSTR szStringIn,  \n   LPWSTR szStringOut,  \n   LPDWORD pdwStrLen,  \n   DWORD dwMaxLength) throw();  \n```  \n  \n### Parameters  \n `lpszStringIn`  \n The URL to be converted.  \n  \n `lpszStringOut`  \n Caller-allocated buffer to which the converted URL will be written.  \n  \n `pdwStrLen`  \n Pointer to a DWORD variable. If the function succeeds, the variable receives the number of characters written to the buffer not including the terminating null character. If the function fails, the variable receives the required length in bytes of the buffer including space for the terminating null character.  \n  \n `dwMaxLength`  \n The size of the buffer `lpszStringOut`.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n Reverses the conversion process applied by [AtlEscapeUrl](#atlescapeurl).  \n  \n### Requirements  \n **Header:** atlutil.h  \n \n ## <a name=\"rgbtohtml\"></a> RGBToHtml\nConverts a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value to the HTML text corresponding to that color value.  \n  \n### Syntax  \n  \n```  \nbool inline RGBToHtml(  \n   COLORREF color,  \n   LPTSTR pbOut,  \n   long nBuffer);  \n```  \n  \n### Parameters  \n `color`  \n An RGB color value.  \n  \n `pbOut`  \n Caller-allocated buffer to receive the text for the HTML color value. The buffer must have space for at least 8 characters including space for the null terminator).  \n  \n *nBuffer*  \n The size in bytes of the buffer (including space for the null terminator).  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n An HTML color value is a pound sign followed by a 6-digit hexadecimal value using 2 digits for each of the red, green, and blue components of the color (for example, #FFFFFF is white).  \n  \n### Requirements  \n **Header:** atlutil.h\n\n## <a name=\"systemtimetohttpdate\"></a> SystemTimeToHttpDate\nCall this function to convert a system time to a string in a format suitable for using in HTTP headers.  \n  \n### Syntax  \n  \n```  \ninline void SystemTimeToHttpDate( \n   const SYSTEMTIME& st,  \n   CStringA & strTime);  \n```  \n  \n### Parameters  \n `st`  \n The system time to be obtained as an HTTP format string.  \n  \n *strTime*  \n A reference to a string variable to receive the HTTP date time as defined in RFC 2616 ([http://www.ietf.org/rfc/rfc2616.txt](http://www.ietf.org/rfc/rfc2616.txt)) and RFC 1123 ([http://www.ietf.org/rfc/rfc1123.txt](http://www.ietf.org/rfc/rfc1123.txt)).  \n  \n### Requirements  \n **Header:** atlutil.h\n  \n## See Also  \n [Concepts](../../atl/active-template-library-atl-concepts.md)   \n [ATL COM Desktop Components](../../atl/atl-com-desktop-components.md)   \n\n"}