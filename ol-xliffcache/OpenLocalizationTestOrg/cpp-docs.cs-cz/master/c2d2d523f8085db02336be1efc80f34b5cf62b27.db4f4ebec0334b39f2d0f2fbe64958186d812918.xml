{"nodes":[{"pos":[12,55],"content":"&lt;valarray&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>valarray<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,43],"source":"&lt;valarray&gt; operators | Microsoft Docs"}]},{"pos":[257,283],"content":"&lt;valarray&gt; operators","linkify":"&lt;valarray&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>valarray<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,26],"source":"&lt;valarray&gt; operators"}]},{"pos":[302,329],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[330,356],"content":"<bpt id=\"p1\">[</bpt>operator%<ept id=\"p1\">](#operator_mod)</ept>","source":"[operator%](#operator_mod)"},{"pos":[357,388],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;amp;</ph><ept id=\"p1\">](#operator_amp_)</ept>","source":"[operator&amp;](#operator_amp_)"},{"pos":[393,434],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;amp;</ph><ph id=\"ph2\">&amp;amp;</ph><ept id=\"p1\">](#operator_amp__amp_)</ept>","source":"[operator&amp;&amp;](#operator_amp__amp_)"},{"pos":[435,464],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt_)</ept>","source":"[operator&gt;](#operator_gt_)"},{"pos":[465,502],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt__gt_)</ept>","source":"[operator&gt;&gt;](#operator_gt__gt_)"},{"pos":[507,540],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_gt__eq)</ept>","source":"[operator&gt;=](#operator_gt__eq)"},{"pos":[541,570],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_)</ept>","source":"[operator&lt;](#operator_lt_)"},{"pos":[571,608],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt__lt_)</ept>","source":"[operator&lt;&lt;](#operator_lt__lt_)"},{"pos":[613,646],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_lt__eq)</ept>","source":"[operator&lt;=](#operator_lt__eq)"},{"pos":[647,674],"content":"<bpt id=\"p1\">[</bpt>operator*<ept id=\"p1\">](#operator_star)</ept>","source":"[operator*](#operator_star)"},{"pos":[675,701],"content":"<bpt id=\"p1\">[</bpt>operator+<ept id=\"p1\">](#operator_add)</ept>","source":"[operator+](#operator_add)"},{"pos":[706,729],"content":"<bpt id=\"p1\">[</bpt>operator-<ept id=\"p1\">](#operator-)</ept>","source":"[operator-](#operator-)"},{"pos":[730,753],"content":"<bpt id=\"p1\">[</bpt>operator/<ept id=\"p1\">](#operator_)</ept>","source":"[operator/](#operator_)"},{"pos":[754,783],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[788,814],"content":"<bpt id=\"p1\">[</bpt>operator^<ept id=\"p1\">](#operator_xor)</ept>","source":"[operator^](#operator_xor)"},{"content":"[operator","pos":[815,824]},{"content":"](#operator_or)","pos":[825,840]},{"content":"[operator","pos":[841,850]},{"content":"](#operator_lor)","pos":[852,868]},{"pos":[879,918],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"content":"Tests whether the corresponding elements of two equally sized valarrays are unequal or whether all the elements of a valarray are unequal a specified value.","pos":[922,1078]},{"pos":[1448,1458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose elements are to be tested for inequality.","pos":[1473,1551]},{"content":"The second of the two valarrays whose elements are to be tested for inequality.","pos":[1570,1649]},{"pos":[1659,1671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A valarray of Boolean values, each of which is:","pos":[1675,1722]},{"pos":[1730,1781],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the corresponding elements are unequal.","source":"**true** if the corresponding elements are unequal."},{"pos":[1789,1845],"content":"<bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> if the corresponding elements are not unequal.","source":"**false** if the corresponding elements are not unequal."},{"pos":[1855,1862],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1866,2046],"content":"The first template operator returns an object of class <bpt id=\"p1\">[</bpt>valarray<ph id=\"ph1\">\\&lt;</ph>bool&gt;<ept id=\"p1\">](../standard-library/valarray-bool-class.md)</ept>, each of whose elements <ph id=\"ph2\">`I`</ph> is <ph id=\"ph3\">` left`</ph>[ <ph id=\"ph4\">`I`</ph>] != <ph id=\"ph5\">` right`</ph>[ <ph id=\"ph6\">`I`</ph>].","source":"The first template operator returns an object of class [valarray\\<bool>](../standard-library/valarray-bool-class.md), each of whose elements `I` is ` left`[ `I`] != ` right`[ `I`]."},{"pos":[2053,2129],"content":"The second template operator stores in element <bpt id=\"p1\">*</bpt>I  left<ept id=\"p1\">*</ept>[ <ph id=\"ph1\">`I`</ph>] != _ <bpt id=\"p2\">*</bpt>Right<ept id=\"p2\">*</ept>.","source":"The second template operator stores in element *I  left*[ `I`] != _ *Right*."},{"pos":[2136,2210],"content":"The third template operator stores in element <bpt id=\"p1\">*</bpt>I  left<ept id=\"p1\">*</ept> != <ph id=\"ph1\">` right`</ph>[ <ph id=\"ph2\">`I`</ph>].","source":"The third template operator stores in element *I  left* != ` right`[ `I`]."},{"pos":[2220,2227],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3476,3514],"content":"<bpt id=\"p1\">&lt;a name=\"operator_mod\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator%","linkify":"<a name=\"operator_mod\"></a>  operator%","source":"<a name=\"operator_mod\"></a>  operator%"},{"content":"Obtains the remainder of dividing the corresponding elements of two equally sized valarrays or of dividing a valarray by a specified value or of dividing a specified value by a valarray.","pos":[3518,3704]},{"pos":[4071,4081],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A value or valarray that serves as the dividend into which another value or valarray is to be divided.","pos":[4096,4198]},{"content":"A value or valarray that serves as the divisor and that divides another value or valarray.","pos":[4217,4307]},{"pos":[4317,4329],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4333,4422],"content":"A valarray whose elements are the element-wise remainders of <ph id=\"ph1\">` left`</ph> divided by <ph id=\"ph2\">` right.`</ph>","source":"A valarray whose elements are the element-wise remainders of ` left` divided by ` right.`"},{"pos":[4432,4439],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5652,5695],"content":"<bpt id=\"p1\">&lt;a name=\"operator_amp_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;amp;</ph>","linkify":"<a name=\"operator_amp_\"></a>  operator&amp;","source":"<a name=\"operator_amp_\"></a>  operator&amp;"},{"pos":[5699,5853],"content":"Obtains the bitwise <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type.","source":"Obtains the bitwise **AND** between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type."},{"pos":[6220,6230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose respective elements are to be combined with the bitwise <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> or a specified value of the element type to be combined bitwise with each element of a valarray.","pos":[6245,6442],"source":" The first of the two valarrays whose respective elements are to be combined with the bitwise **AND** or a specified value of the element type to be combined bitwise with each element of a valarray."},{"content":"The second of the two valarrays whose respective elements are to be combined with the bitwise <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> or a specified value of the element type to be combined bitwise with each element of a valarray.","pos":[6461,6659],"source":" The second of the two valarrays whose respective elements are to be combined with the bitwise **AND** or a specified value of the element type to be combined bitwise with each element of a valarray."},{"pos":[6669,6681],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6685,6797],"content":"A valarray whose elements are the element-wise combination of the bitwise AND operation of <ph id=\"ph1\">` left`</ph> and <ph id=\"ph2\">` right.`</ph>","source":"A valarray whose elements are the element-wise combination of the bitwise AND operation of ` left` and ` right.`"},{"pos":[6807,6814],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6818,7015],"content":"A bitwise operation can only be used to manipulate bits in <ph id=\"ph1\">`char`</ph> and <ph id=\"ph2\">`int`</ph> data types and variants and not on <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>longdouble<ept id=\"p3\">**</ept>, <ph id=\"ph3\">`void``bool`</ph> or other, more complex data types.","source":"A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, **longdouble**, `void``bool` or other, more complex data types."},{"content":"The bitwise <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> has the same truth table as the logical <bpt id=\"p2\">**</bpt>AND<ept id=\"p2\">**</ept> but applies to the data type on the level of the individual bits.","pos":[7022,7155],"source":"The bitwise **AND** has the same truth table as the logical **AND** but applies to the data type on the level of the individual bits."},{"content":"The <bpt id=\"p1\">[</bpt>operator&amp;&amp;<ept id=\"p1\">](../standard-library/valarray-operators.md#operator_amp__amp_)</ept> applies on an element level, counting all nonzero values as true, and the result is a valarray of Boolean values.","pos":[7156,7348],"source":" The [operator&&](../standard-library/valarray-operators.md#operator_amp__amp_) applies on an element level, counting all nonzero values as true, and the result is a valarray of Boolean values."},{"content":"The bitwise <bpt id=\"p1\">**</bpt>ANDoperator&amp;<ept id=\"p1\">**</ept>, by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation.","pos":[7349,7492],"source":" The bitwise **ANDoperator&**, by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation."},{"pos":[7502,7509],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8749,8802],"content":"<bpt id=\"p1\">&lt;a name=\"operator_amp__amp_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;amp;</ph><ph id=\"ph2\">&amp;amp;</ph>","linkify":"<a name=\"operator_amp__amp_\"></a>  operator&amp;&amp;","source":"<a name=\"operator_amp__amp_\"></a>  operator&amp;&amp;"},{"pos":[8806,8971],"content":"Obtains the logical <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the valarray's element type.","source":"Obtains the logical **AND** between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the valarray's element type."},{"pos":[9341,9351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose respective elements are to be combined with the logical <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> or a specified value of the element type to be combined with each element of a valarray.","pos":[9366,9555],"source":" The first of the two valarrays whose respective elements are to be combined with the logical **AND** or a specified value of the element type to be combined with each element of a valarray."},{"content":"The second of the two valarrays whose respective elements are to be combined with the logical <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> or a specified value of the element type to be combined with each element of a valarray.","pos":[9574,9764],"source":" The second of the two valarrays whose respective elements are to be combined with the logical **AND** or a specified value of the element type to be combined with each element of a valarray."},{"pos":[9774,9786],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9790,9927],"content":"A valarray whose elements are of type bool and are the element-wise combination of the logical <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> operation of <ph id=\"ph1\">` left`</ph> and <ph id=\"ph2\">` right.`</ph>","source":"A valarray whose elements are of type bool and are the element-wise combination of the logical **AND** operation of ` left` and ` right.`"},{"pos":[9937,9944],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The logical <bpt id=\"p1\">**</bpt>ANDoperator&amp;&amp;<ept id=\"p1\">**</ept> applies on an element level, counting all nonzero values as true, and the result is a valarray of Boolean values.","pos":[9948,10091],"source":"The logical **ANDoperator&&** applies on an element level, counting all nonzero values as true, and the result is a valarray of Boolean values."},{"content":"The bitwise version of <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept>, <bpt id=\"p2\">[</bpt>operator&amp;,<ept id=\"p2\">](../standard-library/valarray-operators.md#operator_amp_)</ept>, by contrast, can result in a valarray of values other than 0 or 1, depending on the outcome of the bitwise operation.","pos":[10092,10312],"source":" The bitwise version of **AND**, [operator&,](../standard-library/valarray-operators.md#operator_amp_), by contrast, can result in a valarray of values other than 0 or 1, depending on the outcome of the bitwise operation."},{"pos":[10322,10329],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11575,11616],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt_\"></a>  operator&gt;","source":"<a name=\"operator_gt_\"></a>  operator&gt;"},{"content":"Tests whether the elements of one valarray are greater than the elements of an equally sized valarray or whether all the elements of a valarray are greater or less than a specified value.","pos":[11620,11807]},{"pos":[12174,12184],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.","pos":[12199,12332]},{"content":"The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.","pos":[12351,12485]},{"pos":[12495,12507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A valarray of Boolean values, each of which is:","pos":[12511,12558]},{"pos":[12566,12667],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">` left`</ph> element or value is greater than the corresponding <ph id=\"ph2\">` right`</ph> element or value.","source":"**true** if the ` left` element or value is greater than the corresponding ` right` element or value."},{"pos":[12675,12781],"content":"<bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">` left`</ph> element or value is not greater than the corresponding <ph id=\"ph2\">` right`</ph> element or value.","source":"**false** if the ` left` element or value is not greater than the corresponding ` right` element or value."},{"pos":[12791,12798],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the number of elements in two valarrays is not equal, the result is undefined.","pos":[12802,12883]},{"pos":[12893,12900],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14158,14203],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_gt__eq\"></a>  operator&gt;=","source":"<a name=\"operator_gt__eq\"></a>  operator&gt;="},{"content":"Tests whether the elements of one valarray are greater than or equal to the elements of an equally sized valarray or whether all the elements of a valarray are greater than or equal to or less than or equal to a specified value.","pos":[14207,14435]},{"pos":[14805,14815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.","pos":[14830,14963]},{"content":"The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.","pos":[14982,15116]},{"pos":[15126,15138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A valarray of Boolean values, each of which is:","pos":[15142,15189]},{"pos":[15197,15310],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">` left`</ph> element or value is greater than or equal to the corresponding <ph id=\"ph2\">` right`</ph> element or value.","source":"**true** if the ` left` element or value is greater than or equal to the corresponding ` right` element or value."},{"pos":[15318,15417],"content":"<bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">` left`</ph> element or value is less than the corresponding <ph id=\"ph2\">` right`</ph> element or value.","source":"**false** if the ` left` element or value is less than the corresponding ` right` element or value."},{"pos":[15427,15434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the number of elements in two valarrays is not equal, the result is undefined.","pos":[15438,15519]},{"pos":[15529,15536],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16792,16841],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt__gt_\"></a>  operator&gt;&gt;","source":"<a name=\"operator_gt__gt_\"></a>  operator&gt;&gt;"},{"content":"Right-shifts the bits for each element of a valarray a specified number of positions or by an element-wise amount specified by a second valarray.","pos":[16845,16990]},{"pos":[17360,17370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value to be shifted or the valarray whose elements are to be shifted.","pos":[17385,17458]},{"content":"The value indicating the amount of right shift or valarray whose elements indicate the element-wise amount of right shift.","pos":[17477,17599]},{"pos":[17609,17621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A valarray whose elements have been shifted right by the specified amount.","pos":[17625,17699]},{"pos":[17709,17716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Signed numbers have their signs preserved.","pos":[17720,17762]},{"pos":[17772,17779],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18995,19036],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_\"></a>  operator&lt;","source":"<a name=\"operator_lt_\"></a>  operator&lt;"},{"content":"Tests whether the elements of one valarray are less than the elements of an equally sized valarray or whether all the elements of a valarray are greater or less than a specified value.","pos":[19040,19224]},{"pos":[19591,19601],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.","pos":[19616,19749]},{"content":"The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.","pos":[19768,19902]},{"pos":[19912,19924],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A valarray of Boolean values, each of which is:","pos":[19928,19975]},{"pos":[19983,20081],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">` left`</ph> element or value is less than the corresponding <ph id=\"ph2\">` right`</ph> element or value.","source":"**true** if the ` left` element or value is less than the corresponding ` right` element or value."},{"pos":[20089,20192],"content":"<bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">` left`</ph> element or value is not less than the corresponding <ph id=\"ph2\">` right`</ph> element or value.","source":"**false** if the ` left` element or value is not less than the corresponding ` right` element or value."},{"pos":[20202,20209],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the number of elements two valarrays is not equal, the result is undefined.","pos":[20213,20291]},{"pos":[20301,20308],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21553,21598],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_lt__eq\"></a>  operator&lt;=","source":"<a name=\"operator_lt__eq\"></a>  operator&lt;="},{"content":"Tests whether the elements of one valarray are less than or equal to the elements of an equally sized valarray or whether all the elements of a valarray are greater than or equal to or less than or equal to a specified value.","pos":[21602,21827]},{"pos":[22197,22207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.","pos":[22222,22355]},{"content":"The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.","pos":[22374,22508]},{"pos":[22518,22530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A valarray of Boolean values, each of which is:","pos":[22534,22581]},{"pos":[22589,22699],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">` left`</ph> element or value is less than or equal to the corresponding <ph id=\"ph2\">` right`</ph> element or value.","source":"**true** if the ` left` element or value is less than or equal to the corresponding ` right` element or value."},{"pos":[22707,22809],"content":"<bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">` left`</ph> element or value is greater than the corresponding <ph id=\"ph2\">` right`</ph> element or value.","source":"**false** if the ` left` element or value is greater than the corresponding ` right` element or value."},{"pos":[22819,22826],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the number of elements two valarrays is not equal, the result is undefined.","pos":[22830,22908]},{"pos":[22918,22925],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24175,24224],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt__lt_\"></a>  operator&lt;&lt;","source":"<a name=\"operator_lt__lt_\"></a>  operator&lt;&lt;"},{"content":"Left shifts the bits for each element of a valarray a specified number of positions or by an element-wise amount specified by a second valarray.","pos":[24228,24372]},{"pos":[24742,24752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value to be shifted or the valarray whose elements are to be shifted.","pos":[24767,24840]},{"content":"The value indicating the amount of left shift or valarray whose elements indicate the element-wise amount of left shift.","pos":[24859,24979]},{"pos":[24989,25001],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A valarray whose elements have been shifted left by the specified amount.","pos":[25005,25078]},{"pos":[25088,25095],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Signed numbers have their signs preserved.","pos":[25099,25141]},{"pos":[25151,25158],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26364,26403],"content":"<bpt id=\"p1\">&lt;a name=\"operator_star\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator*","linkify":"<a name=\"operator_star\"></a>  operator*","source":"<a name=\"operator_star\"></a>  operator*"},{"content":"Obtains the element-wise product between corresponding elements of two equally sized valarrays or of between a valarray a specified value.","pos":[26407,26545]},{"pos":[26912,26922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose elements are to be multiplied or a specified value to be multiplied with each element of a valarray.","pos":[26937,27074]},{"content":"The second of the two valarrays whose elements are to be multiplied or a specified value to be multiplied with each element of a valarray.","pos":[27093,27231]},{"pos":[27241,27253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27257,27336],"content":"A valarray whose elements are the element-wise product of <ph id=\"ph1\">` left`</ph> and <ph id=\"ph2\">` right.`</ph>","source":"A valarray whose elements are the element-wise product of ` left` and ` right.`"},{"pos":[27346,27353],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28562,28600],"content":"<bpt id=\"p1\">&lt;a name=\"operator_add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator+","linkify":"<a name=\"operator_add\"></a>  operator+","source":"<a name=\"operator_add\"></a>  operator+"},{"content":"Obtains the element-wise sum between corresponding elements of two equally sized valarrays or of between a valarray a specified value.","pos":[28604,28738]},{"pos":[29105,29115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose elements are to be added or a specified value to be added with each element of a valarray.","pos":[29130,29257]},{"content":"The second of the two valarrays whose elements are to be added or a specified value to be added with each element of a valarray.","pos":[29276,29404]},{"pos":[29414,29426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29430,29505],"content":"A valarray whose elements are the element-wise sum of <ph id=\"ph1\">` left`</ph> and <ph id=\"ph2\">` right.`</ph>","source":"A valarray whose elements are the element-wise sum of ` left` and ` right.`"},{"pos":[29515,29522],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30706,30741],"content":"<bpt id=\"p1\">&lt;a name=\"operator-\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator-","linkify":"<a name=\"operator-\"></a>  operator-","source":"<a name=\"operator-\"></a>  operator-"},{"content":"Obtains the element-wise difference between corresponding elements of two equally sized valarrays or of between a valarray a specified value.","pos":[30745,30886]},{"pos":[31253,31263],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A value or valarray that serves as the minuend from which other values or valarrays are to be subtracted in forming the difference.","pos":[31278,31409]},{"content":"A value or valarray that serves as the subtrahend that is to be subtracted from other values or valarrays in forming the difference.","pos":[31428,31560]},{"pos":[31570,31582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31586,31668],"content":"A valarray whose elements are the element-wise difference of <ph id=\"ph1\">` left`</ph> and <ph id=\"ph2\">` right.`</ph>","source":"A valarray whose elements are the element-wise difference of ` left` and ` right.`"},{"pos":[31678,31685],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The arithmetic terminology used in describing a subtraction:","pos":[31689,31749]},{"content":"difference = minuend - subtrahend","pos":[31756,31789]},{"pos":[31799,31806],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33009,33044],"content":"<bpt id=\"p1\">&lt;a name=\"operator_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator/","linkify":"<a name=\"operator_\"></a>  operator/","source":"<a name=\"operator_\"></a>  operator/"},{"content":"Obtains the element-wise quotient between corresponding elements of two equally sized valarrays or of between a valarray a specified value.","pos":[33048,33187]},{"pos":[33554,33564],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A value or valarray that serves as the dividend into which another value or valarray is to be divided in forming the quotient.","pos":[33579,33705]},{"content":"A value or valarray that serves as the divisor and that divides another value or valarray in forming the quotient.","pos":[33724,33838]},{"pos":[33848,33860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33864,33951],"content":"A valarray whose elements are the element-wise quotient of <ph id=\"ph1\">` left`</ph> divided by <ph id=\"ph2\">` right.`</ph>","source":"A valarray whose elements are the element-wise quotient of ` left` divided by ` right.`"},{"pos":[33961,33968],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The arithmetic terminology used in describing a division:","pos":[33972,34029]},{"content":"quotient = dividend / divisor","pos":[34036,34065]},{"pos":[34075,34082],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[35308,35349],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"content":"Tests whether the corresponding elements of two equally sized valarrays are equal or whether all the elements of a valarray are equal a specified value.","pos":[35353,35505]},{"pos":[35875,35885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose elements are to be tested for equality.","pos":[35900,35976]},{"content":"The second of the two valarrays whose elements are to be tested for equality.","pos":[35995,36072]},{"pos":[36082,36094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A valarray of Boolean values, each of which is:","pos":[36098,36145]},{"pos":[36153,36202],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the corresponding elements are equal.","source":"**true** if the corresponding elements are equal."},{"pos":[36210,36264],"content":"<bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> if the corresponding elements are not equal.","source":"**false** if the corresponding elements are not equal."},{"pos":[36274,36281],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first template operator returns an object of class <bpt id=\"p1\">[</bpt>valarray<ph id=\"ph1\">\\&lt;</ph>bool&gt;<ept id=\"p1\">](../standard-library/valarray-bool-class.md)</ept>, each of whose elements <ph id=\"ph2\">`I`</ph> is _ <bpt id=\"p2\">*</bpt>Left<ept id=\"p2\">*</ept>[ <ph id=\"ph3\">`I`</ph>] == <ph id=\"ph4\">\\_</ph> <bpt id=\"p3\">*</bpt>Right<ept id=\"p3\">*</ept>[ <ph id=\"ph5\">`I`</ph>].","pos":[36285,36468],"source":"The first template operator returns an object of class [valarray\\<bool>](../standard-library/valarray-bool-class.md), each of whose elements `I` is _ *Left*[ `I`] == \\_ *Right*[ `I`]."},{"content":"The second template operator stores in element <ph id=\"ph1\">`I`` left`</ph>[ <ph id=\"ph2\">`I`</ph>] == <ph id=\"ph3\">\\_</ph> <bpt id=\"p1\">*</bpt>Right<ept id=\"p1\">*</ept>.","pos":[36469,36547],"source":" The second template operator stores in element `I`` left`[ `I`] == \\_ *Right*."},{"content":"The third template operator stores in element <ph id=\"ph1\">`I`` left`</ph><ph id=\"ph2\"> == </ph><ph id=\"ph3\">` right`</ph>[ <ph id=\"ph4\">`I`</ph>].","pos":[36548,36623],"source":" The third template operator stores in element `I`` left` == ` right`[ `I`]."},{"pos":[36633,36640],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[37886,37924],"content":"<bpt id=\"p1\">&lt;a name=\"operator_xor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator^","linkify":"<a name=\"operator_xor\"></a>  operator^","source":"<a name=\"operator_xor\"></a>  operator^"},{"pos":[37928,38100],"content":"Obtains the bitwise exclusive <ph id=\"ph1\">`OR`</ph> ( <bpt id=\"p1\">**</bpt>XOR<ept id=\"p1\">**</ept>) between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type.","source":"Obtains the bitwise exclusive `OR` ( **XOR**) between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type."},{"pos":[38467,38477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose respective elements are to be combined with the bitwise <bpt id=\"p1\">**</bpt>XOR<ept id=\"p1\">**</ept> or a specified value of the element type to be combined bitwise with each element of a valarray.","pos":[38492,38689],"source":" The first of the two valarrays whose respective elements are to be combined with the bitwise **XOR** or a specified value of the element type to be combined bitwise with each element of a valarray."},{"content":"The second of the two valarrays whose respective elements are to be combined with the bitwise <bpt id=\"p1\">**</bpt>XOR<ept id=\"p1\">**</ept> or a specified value of the element type to be combined bitwise with each element of a valarray.","pos":[38708,38906],"source":" The second of the two valarrays whose respective elements are to be combined with the bitwise **XOR** or a specified value of the element type to be combined bitwise with each element of a valarray."},{"pos":[38916,38928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38932,39048],"content":"A valarray whose elements are the element-wise combination of the bitwise <bpt id=\"p1\">**</bpt>XOR<ept id=\"p1\">**</ept> operation of <ph id=\"ph1\">` left`</ph> and <ph id=\"ph2\">` right.`</ph>","source":"A valarray whose elements are the element-wise combination of the bitwise **XOR** operation of ` left` and ` right.`"},{"pos":[39058,39065],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39069,39265],"content":"A bitwise operation can only be used to manipulate bits in <ph id=\"ph1\">`char`</ph> and <ph id=\"ph2\">`int`</ph> data types and variants and not on <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>, <ph id=\"ph3\">`long double`</ph>, <ph id=\"ph4\">`void``bool`</ph> or other, more complex data types.","source":"A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, `long double`, `void``bool` or other, more complex data types."},{"pos":[39272,39489],"content":"The bitwise exclusive <ph id=\"ph1\">`OR`</ph> ( <bpt id=\"p1\">**</bpt>XOR<ept id=\"p1\">**</ept>) has the following semantics: Given bits <bpt id=\"p2\">*</bpt>b<ept id=\"p2\">*</ept>1 and <bpt id=\"p3\">*</bpt>b<ept id=\"p3\">*</ept>2, <bpt id=\"p4\">*</bpt>b<ept id=\"p4\">*</ept>1 <bpt id=\"p5\">**</bpt>XOR<ept id=\"p5\">**</ept> <bpt id=\"p6\">*</bpt>b<ept id=\"p6\">*</ept>2 is <bpt id=\"p7\">**</bpt>true<ept id=\"p7\">**</ept> if exactly one of the bits is true; <bpt id=\"p8\">**</bpt>false<ept id=\"p8\">**</ept> if both bits are false or if both bits are true.","source":"The bitwise exclusive `OR` ( **XOR**) has the following semantics: Given bits *b*1 and *b*2, *b*1 **XOR** *b*2 is **true** if exactly one of the bits is true; **false** if both bits are false or if both bits are true."},{"pos":[39499,39506],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[40880,40922],"content":"<bpt id=\"p1\">&lt;a name=\"operator_or\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator&amp;#124;","linkify":"<a name=\"operator_or\"></a>  operator&#124;","source":"<a name=\"operator_or\"></a>  operator&#124;"},{"pos":[40926,41077],"content":"Obtains the bitwise <ph id=\"ph1\">`OR`</ph> between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type.","source":"Obtains the bitwise `OR` between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type."},{"pos":[41444,41454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose respective elements are to be combined with the bitwise <ph id=\"ph1\">`OR`</ph> or a specified value of the element type to be combined bitwise with each element of a valarray.","pos":[41469,41663],"source":" The first of the two valarrays whose respective elements are to be combined with the bitwise `OR` or a specified value of the element type to be combined bitwise with each element of a valarray."},{"content":"The second of the two valarrays whose respective elements are to be combined with the bitwise <ph id=\"ph1\">`OR`</ph> or a specified value of the element type to be combined bitwise with each element of a valarray.","pos":[41682,41877],"source":" The second of the two valarrays whose respective elements are to be combined with the bitwise `OR` or a specified value of the element type to be combined bitwise with each element of a valarray."},{"pos":[41887,41899],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41903,42016],"content":"A valarray whose elements are the element-wise combination of the bitwise <ph id=\"ph1\">`OR`</ph> operation of <ph id=\"ph2\">` left`</ph> and <ph id=\"ph3\">` right.`</ph>","source":"A valarray whose elements are the element-wise combination of the bitwise `OR` operation of ` left` and ` right.`"},{"pos":[42026,42033],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[42037,42236],"content":"A bitwise operation can only be used to manipulate bits in <ph id=\"ph1\">`char`</ph> and <ph id=\"ph2\">`int`</ph> data types and variants and not on <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>longdouble<ept id=\"p3\">**</ept>, <ph id=\"ph3\">`void`</ph>, <ph id=\"ph4\">`bool`</ph> or other, more complex data types.","source":"A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, **longdouble**, `void`, `bool` or other, more complex data types."},{"content":"The bitwise OR has the same truth table as the logical <ph id=\"ph1\">`OR`</ph>, but applies to the data type on the level of the individual bits.","pos":[42243,42369],"source":"The bitwise OR has the same truth table as the logical `OR`, but applies to the data type on the level of the individual bits."},{"content":"Given bits <bpt id=\"p1\">*</bpt>b<ept id=\"p1\">*</ept>1 and <bpt id=\"p2\">*</bpt>b<ept id=\"p2\">*</ept>2, <bpt id=\"p3\">*</bpt>b<ept id=\"p3\">*</ept>1 <ph id=\"ph1\">`OR`</ph> <bpt id=\"p4\">*</bpt>b<ept id=\"p4\">*</ept>2 is <bpt id=\"p5\">**</bpt>true<ept id=\"p5\">**</ept> if at least one of the bits is true or <bpt id=\"p6\">**</bpt>false<ept id=\"p6\">**</ept> if both bits are false.","pos":[42370,42495],"source":" Given bits *b*1 and *b*2, *b*1 `OR` *b*2 is **true** if at least one of the bits is true or **false** if both bits are false."},{"content":"The logical <ph id=\"ph1\">`OR`</ph><bpt id=\"p1\">[</bpt>operator&amp;#124;&amp;#124;<ept id=\"p1\">](../standard-library/valarray-operators.md#operator_lor)</ept> applies on an element level, counting all nonzero values as <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>, and the result is a valarray of Boolean values.","pos":[42496,42708],"source":" The logical `OR`[operator&#124;&#124;](../standard-library/valarray-operators.md#operator_lor) applies on an element level, counting all nonzero values as **true**, and the result is a valarray of Boolean values."},{"content":"The bitwise OR <ph id=\"ph1\">`operator|`</ph>, by contrast, can result in a valarray of values other than 0 or 1, depending on the outcome of the bitwise operation.","pos":[42709,42854],"source":" The bitwise OR `operator|`, by contrast, can result in a valarray of values other than 0 or 1, depending on the outcome of the bitwise operation."},{"pos":[42864,42871],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[44237,44286],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator&amp;#124;&amp;#124;","linkify":"<a name=\"operator_lor\"></a>  operator&#124;&#124;","source":"<a name=\"operator_lor\"></a>  operator&#124;&#124;"},{"pos":[44290,44450],"content":"Obtains the logical <ph id=\"ph1\">`OR`</ph> between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the valarray element type.","source":"Obtains the logical `OR` between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the valarray element type."},{"pos":[44820,44830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two valarrays whose respective elements are to be combined with the logical <ph id=\"ph1\">`OR`</ph> or a specified value of the element type to be combined with each element of a valarray.","pos":[44845,45031],"source":" The first of the two valarrays whose respective elements are to be combined with the logical `OR` or a specified value of the element type to be combined with each element of a valarray."},{"content":"The second of the two valarrays whose respective elements are to be combined with the logical <ph id=\"ph1\">`OR`</ph> or a specified value of the element type to be combined with each element of a valarray.","pos":[45050,45237],"source":" The second of the two valarrays whose respective elements are to be combined with the logical `OR` or a specified value of the element type to be combined with each element of a valarray."},{"pos":[45247,45259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45263,45397],"content":"A valarray whose elements are of type <ph id=\"ph1\">`bool`</ph> and are the element-wise combination of the logical OR operation of <ph id=\"ph2\">` left`</ph> and <ph id=\"ph3\">` right.`</ph>","source":"A valarray whose elements are of type `bool` and are the element-wise combination of the logical OR operation of ` left` and ` right.`"},{"pos":[45407,45414],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The logical <ph id=\"ph1\">`OR``operator||`</ph> applies on an element level, counting all nonzero values as <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>, and the result is a valarray of Boolean values.","pos":[45418,45564],"source":"The logical `OR``operator||` applies on an element level, counting all nonzero values as **true**, and the result is a valarray of Boolean values."},{"content":"The bitwise version of <ph id=\"ph1\">`OR`</ph>, <bpt id=\"p1\">[</bpt>operator&amp;#124;<ept id=\"p1\">](../standard-library/valarray-operators.md#operator_or)</ept> by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation.","pos":[45565,45779],"source":" The bitwise version of `OR`, [operator&#124;](../standard-library/valarray-operators.md#operator_or) by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation."},{"pos":[45789,45796],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[47166,47174],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[47178,47224],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>valarray&gt;<ept id=\"p1\">](../standard-library/valarray.md)</ept>","source":"[\\<valarray>](../standard-library/valarray.md)"}],"content":"---\ntitle: \"&lt;valarray&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 8a53562c-90ab-4eb3-85d3-ada5259d90b0\ncaps.latest.revision: 8\nmanager: \"ghogen\"\n---\n# &lt;valarray&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator%](#operator_mod)|[operator&amp;](#operator_amp_)|  \n|[operator&amp;&amp;](#operator_amp__amp_)|[operator&gt;](#operator_gt_)|[operator&gt;&gt;](#operator_gt__gt_)|  \n|[operator&gt;=](#operator_gt__eq)|[operator&lt;](#operator_lt_)|[operator&lt;&lt;](#operator_lt__lt_)|  \n|[operator&lt;=](#operator_lt__eq)|[operator*](#operator_star)|[operator+](#operator_add)|  \n|[operator-](#operator-)|[operator/](#operator_)|[operator==](#operator_eq_eq)|  \n|[operator^](#operator_xor)|[operator|](#operator_or)|[operator||](#operator_lor)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests whether the corresponding elements of two equally sized valarrays are unequal or whether all the elements of a valarray are unequal a specified value.  \n  \n```  \ntemplate <class Type>  \nvalarray<bool>  \noperator!=(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator!=(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator!=(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose elements are to be tested for inequality.  \n  \n ` right`  \n The second of the two valarrays whose elements are to be tested for inequality.  \n  \n### Return Value  \n A valarray of Boolean values, each of which is:  \n  \n- **true** if the corresponding elements are unequal.  \n  \n- **false** if the corresponding elements are not unequal.  \n  \n### Remarks  \n The first template operator returns an object of class [valarray\\<bool>](../standard-library/valarray-bool-class.md), each of whose elements `I` is ` left`[ `I`] != ` right`[ `I`].  \n  \n The second template operator stores in element *I  left*[ `I`] != _ *Right*.  \n  \n The third template operator stores in element *I  left* != ` right`[ `I`].  \n  \n### Example  \n  \n```cpp  \n// valarray_op_ne.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   valarray<bool> vaNE ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  -i;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i;  \n   for ( i = 0 ; i < 10 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL != vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the not equal comparison test is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 0 1 -2 3 -4 5 -6 7 -8 9 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 8 9 ).  \nThe element-by-element result of the not equal comparison test is the  \n valarray: ( 0 0 1 0 1 0 1 0 1 0 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_mod\"></a>  operator%  \n Obtains the remainder of dividing the corresponding elements of two equally sized valarrays or of dividing a valarray by a specified value or of dividing a specified value by a valarray.  \n  \n```  \ntemplate <class Type>  \nvalarray<Type>  \noperator%(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator%(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator%(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n A value or valarray that serves as the dividend into which another value or valarray is to be divided.  \n  \n ` right`  \n A value or valarray that serves as the divisor and that divides another value or valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise remainders of ` left` divided by ` right.`  \n  \n### Example  \n  \n```cpp  \n// valarray_op_rem.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 6 ), vaR ( 6 );  \n   valarray<int> vaREM ( 6 );  \n   for ( i = 0 ; i < 6 ; i += 2 )  \n      vaL [ i ] =  53;  \n   for ( i = 1 ; i < 6 ; i += 2 )  \n      vaL [ i ] =  -67;  \n   for ( i = 0 ; i < 6 ; i++ )  \n      vaR [ i ] =  3*i+1;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for ( i = 0 ; i < 6 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 6 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaREM = ( vaL % vaR );  \n   cout << \"The remainders from the element-by-element \"  \n        << \"division is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 6 ; i++ )  \n         cout << vaREM [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 53 -67 53 -67 53 -67 ).  \nThe initial Right valarray is: ( 1 4 7 10 13 16 ).  \nThe remainders from the element-by-element division is the  \n valarray: ( 0 -3 4 -7 1 -3 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_amp_\"></a>  operator&amp;  \n Obtains the bitwise **AND** between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type.  \n  \n```  \ntemplate <class Type>  \nvalarray<Type>  \noperator&(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator&(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator&(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose respective elements are to be combined with the bitwise **AND** or a specified value of the element type to be combined bitwise with each element of a valarray.  \n  \n ` right`  \n The second of the two valarrays whose respective elements are to be combined with the bitwise **AND** or a specified value of the element type to be combined bitwise with each element of a valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise combination of the bitwise AND operation of ` left` and ` right.`  \n  \n### Remarks  \n A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, **longdouble**, `void``bool` or other, more complex data types.  \n  \n The bitwise **AND** has the same truth table as the logical **AND** but applies to the data type on the level of the individual bits. The [operator&&](../standard-library/valarray-operators.md#operator_amp__amp_) applies on an element level, counting all nonzero values as true, and the result is a valarray of Boolean values. The bitwise **ANDoperator&**, by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_bitand.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   valarray<int> vaBWA ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  0;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i+1;  \n   for ( i = 0 ; i < 10 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial Left valarray is:  ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaBWA = ( vaL & vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the bitwise operator & is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaBWA [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is:  ( 0 2 0 4 0 6 0 8 0 10 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 8 9 ).  \nThe element-by-element result of the bitwise operator & is the  \n valarray: ( 0 0 0 0 0 4 0 0 0 8 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_amp__amp_\"></a>  operator&amp;&amp;  \n Obtains the logical **AND** between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the valarray's element type.  \n  \n```  \ntemplate <class Type>  \nvalarray<bool>  \noperator&&(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator&&(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator&&(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose respective elements are to be combined with the logical **AND** or a specified value of the element type to be combined with each element of a valarray.  \n  \n ` right`  \n The second of the two valarrays whose respective elements are to be combined with the logical **AND** or a specified value of the element type to be combined with each element of a valarray.  \n  \n### Return Value  \n A valarray whose elements are of type bool and are the element-wise combination of the logical **AND** operation of ` left` and ` right.`  \n  \n### Remarks  \n The logical **ANDoperator&&** applies on an element level, counting all nonzero values as true, and the result is a valarray of Boolean values. The bitwise version of **AND**, [operator&,](../standard-library/valarray-operators.md#operator_amp_), by contrast, can result in a valarray of values other than 0 or 1, depending on the outcome of the bitwise operation.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_logand.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   valarray<bool> vaLAA ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  0;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i-1;  \n   for ( i = 0 ; i < 10 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial Left valarray is:  ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaLAA = ( vaL && vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the logical AND operator&& is the\\n valarray: ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaLAA [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is:  ( 0 0 0 2 0 4 0 6 0 8 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 8 9 ).  \nThe element-by-element result of the logical AND operator&& is the  \n valarray: ( 0 0 0 1 0 1 0 1 0 1 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Tests whether the elements of one valarray are greater than the elements of an equally sized valarray or whether all the elements of a valarray are greater or less than a specified value.  \n  \n```  \ntemplate <class Type>  \nvalarray<bool>  \noperator>(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator>(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator>(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.  \n  \n ` right`  \n The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.  \n  \n### Return Value  \n A valarray of Boolean values, each of which is:  \n  \n- **true** if the ` left` element or value is greater than the corresponding ` right` element or value.  \n  \n- **false** if the ` left` element or value is not greater than the corresponding ` right` element or value.  \n  \n### Remarks  \n If the number of elements in two valarrays is not equal, the result is undefined.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_gt.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   valarray<bool> vaNE ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  -i;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i;  \n   for ( i = 0 ; i < 10 ; i++ )  \n      vaR [ i ] =  i - 1;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL > vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the greater than comparison test is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 0 1 -2 3 -4 5 -6 7 -8 9 ).  \nThe initial Right valarray is: ( -1 0 1 2 3 4 5 6 7 8 ).  \nThe element-by-element result of the greater than comparison test is the  \n valarray: ( 1 1 0 1 0 1 0 1 0 1 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Tests whether the elements of one valarray are greater than or equal to the elements of an equally sized valarray or whether all the elements of a valarray are greater than or equal to or less than or equal to a specified value.  \n  \n```  \ntemplate <class Type>  \nvalarray<bool>  \noperator>=(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator>=(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator>=(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.  \n  \n ` right`  \n The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.  \n  \n### Return Value  \n A valarray of Boolean values, each of which is:  \n  \n- **true** if the ` left` element or value is greater than or equal to the corresponding ` right` element or value.  \n  \n- **false** if the ` left` element or value is less than the corresponding ` right` element or value.  \n  \n### Remarks  \n If the number of elements in two valarrays is not equal, the result is undefined.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_ge.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   valarray<bool> vaNE ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  -i;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i;  \n   for ( i = 0 ; i < 10 ; i++ )  \n      vaR [ i ] =  i - 1;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL >= vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the greater than or equal test is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 0 1 -2 3 -4 5 -6 7 -8 9 ).  \nThe initial Right valarray is: ( -1 0 1 2 3 4 5 6 7 8 ).  \nThe element-by-element result of the greater than or equal test is the  \n valarray: ( 1 1 0 1 0 1 0 1 0 1 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_gt__gt_\"></a>  operator&gt;&gt;  \n Right-shifts the bits for each element of a valarray a specified number of positions or by an element-wise amount specified by a second valarray.  \n  \n```  \ntemplate <class Type>  \nvalarray<Type>  \noperator>>(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator>>(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator>>(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The value to be shifted or the valarray whose elements are to be shifted.  \n  \n ` right`  \n The value indicating the amount of right shift or valarray whose elements indicate the element-wise amount of right shift.  \n  \n### Return Value  \n A valarray whose elements have been shifted right by the specified amount.  \n  \n### Remarks  \n Signed numbers have their signs preserved.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_rs.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 8 ), vaR ( 8 );  \n   valarray<int> vaNE ( 8 );  \n   for ( i = 0 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  64;  \n   for ( i = 1 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  -64;  \n   for ( i = 0 ; i < 8 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL >> vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the right shift is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 64 -64 64 -64 64 -64 64 -64 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 ).  \nThe element-by-element result of the right shift is the  \n valarray: ( 64 -32 16 -8 4 -2 1 -1 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Tests whether the elements of one valarray are less than the elements of an equally sized valarray or whether all the elements of a valarray are greater or less than a specified value.  \n  \n```  \ntemplate <class Type>  \nvalarray<bool>  \noperator<(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator<(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator<(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.  \n  \n ` right`  \n The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.  \n  \n### Return Value  \n A valarray of Boolean values, each of which is:  \n  \n- **true** if the ` left` element or value is less than the corresponding ` right` element or value.  \n  \n- **false** if the ` left` element or value is not less than the corresponding ` right` element or value.  \n  \n### Remarks  \n If the number of elements two valarrays is not equal, the result is undefined.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_lt.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   valarray<bool> vaNE ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  -i;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i;  \n   for ( i = 0 ; i < 10 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL < vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the less-than comparson test is the\\n valarray: ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 0 1 -2 3 -4 5 -6 7 -8 9 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 8 9 ).  \nThe element-by-element result of the less-than comparson test is the  \n valarray: ( 0 0 1 0 1 0 1 0 1 0 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Tests whether the elements of one valarray are less than or equal to the elements of an equally sized valarray or whether all the elements of a valarray are greater than or equal to or less than or equal to a specified value.  \n  \n```  \ntemplate <class Type>  \nvalarray<bool>  \noperator<=(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator<=(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator<=(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.  \n  \n ` right`  \n The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.  \n  \n### Return Value  \n A valarray of Boolean values, each of which is:  \n  \n- **true** if the ` left` element or value is less than or equal to the corresponding ` right` element or value.  \n  \n- **false** if the ` left` element or value is greater than the corresponding ` right` element or value.  \n  \n### Remarks  \n If the number of elements two valarrays is not equal, the result is undefined.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_le.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   valarray<bool> vaNE ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  -i;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i;  \n   for ( i = 0 ; i < 10 ; i++ )  \n      vaR [ i ] =  i - 1;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL <= vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the less than or equal test is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 0 1 -2 3 -4 5 -6 7 -8 9 ).  \nThe initial Right valarray is: ( -1 0 1 2 3 4 5 6 7 8 ).  \nThe element-by-element result of the less than or equal test is the  \n valarray: ( 0 0 1 0 1 0 1 0 1 0 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_lt__lt_\"></a>  operator&lt;&lt;  \n Left shifts the bits for each element of a valarray a specified number of positions or by an element-wise amount specified by a second valarray.  \n  \n```  \ntemplate <class Type>  \nvalarray<Type>  \noperator<<(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator<<(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator<<(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The value to be shifted or the valarray whose elements are to be shifted.  \n  \n ` right`  \n The value indicating the amount of left shift or valarray whose elements indicate the element-wise amount of left shift.  \n  \n### Return Value  \n A valarray whose elements have been shifted left by the specified amount.  \n  \n### Remarks  \n Signed numbers have their signs preserved.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_ls.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 8 ), vaR ( 8 );  \n   valarray<int> vaNE ( 8 );  \n   for ( i = 0 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  1;  \n   for ( i = 1 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  -1;  \n   for ( i = 0 ; i < 8 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL << vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the left shift is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 1 -1 1 -1 1 -1 1 -1 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 ).  \nThe element-by-element result of the left shift is the  \n valarray: ( 1 -2 4 -8 16 -32 64 -128 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_star\"></a>  operator*  \n Obtains the element-wise product between corresponding elements of two equally sized valarrays or of between a valarray a specified value.  \n  \n```  \ntemplate <class Type>  \nvalarray<Type>  \noperator*(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator*(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator*(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose elements are to be multiplied or a specified value to be multiplied with each element of a valarray.  \n  \n ` right`  \n The second of the two valarrays whose elements are to be multiplied or a specified value to be multiplied with each element of a valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise product of ` left` and ` right.`  \n  \n### Example  \n  \n```cpp  \n// valarray_op_eprod.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 8 ), vaR ( 8 );  \n   valarray<int> vaNE ( 8 );  \n   for ( i = 0 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  2;  \n   for ( i = 1 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  -1;  \n   for ( i = 0 ; i < 8 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for (i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for (i = 0 ; i < 8 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL * vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the multiplication is the\\n valarray: ( \";  \n      for (i = 0 ; i < 8 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 2 -1 2 -1 2 -1 2 -1 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 ).  \nThe element-by-element result of the multiplication is the  \n valarray: ( 0 -1 4 -3 8 -5 12 -7 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_add\"></a>  operator+  \n Obtains the element-wise sum between corresponding elements of two equally sized valarrays or of between a valarray a specified value.  \n  \n```  \ntemplate <class Type>  \nvalarray<Type>  \noperator+(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator+(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator+(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose elements are to be added or a specified value to be added with each element of a valarray.  \n  \n ` right`  \n The second of the two valarrays whose elements are to be added or a specified value to be added with each element of a valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise sum of ` left` and ` right.`  \n  \n### Example  \n  \n```cpp  \n// valarray_op_esum.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 8 ), vaR ( 8 );  \n   valarray<int> vaNE ( 8 );  \n   for ( i = 0 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  2;  \n   for ( i = 1 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  -1;  \n   for ( i = 0 ; i < 8 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL + vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the sum is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 2 -1 2 -1 2 -1 2 -1 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 ).  \nThe element-by-element result of the sum is the  \n valarray: ( 2 0 4 2 6 4 8 6 ).  \n*\\  \n```  \n  \n##  <a name=\"operator-\"></a>  operator-  \n Obtains the element-wise difference between corresponding elements of two equally sized valarrays or of between a valarray a specified value.  \n  \n```  \ntemplate <class Type>  \nvalarray<Type>  \noperator-(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator-(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator-(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n A value or valarray that serves as the minuend from which other values or valarrays are to be subtracted in forming the difference.  \n  \n ` right`  \n A value or valarray that serves as the subtrahend that is to be subtracted from other values or valarrays in forming the difference.  \n  \n### Return Value  \n A valarray whose elements are the element-wise difference of ` left` and ` right.`  \n  \n### Remarks  \n The arithmetic terminology used in describing a subtraction:  \n  \n difference = minuend - subtrahend  \n  \n### Example  \n  \n```cpp  \n// valarray_op_ediff.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 8 ), vaR ( 8 );  \n   valarray<int> vaNE ( 8 );  \n   for ( i = 0 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  10;  \n   for ( i = 1 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  0;  \n   for ( i = 0 ; i < 8 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL - vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the difference is the\\n valarray: ( \";  \n      for (i = 0 ; i < 8 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 10 0 10 0 10 0 10 0 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 ).  \nThe element-by-element result of the difference is the  \n valarray: ( 10 -1 8 -3 6 -5 4 -7 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_\"></a>  operator/  \n Obtains the element-wise quotient between corresponding elements of two equally sized valarrays or of between a valarray a specified value.  \n  \n```  \ntemplate <class Type>  \nvalarray<Type>  \noperator/(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator/(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator/(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n A value or valarray that serves as the dividend into which another value or valarray is to be divided in forming the quotient.  \n  \n ` right`  \n A value or valarray that serves as the divisor and that divides another value or valarray in forming the quotient.  \n  \n### Return Value  \n A valarray whose elements are the element-wise quotient of ` left` divided by ` right.`  \n  \n### Remarks  \n The arithmetic terminology used in describing a division:  \n  \n quotient = dividend / divisor  \n  \n### Example  \n  \n```cpp  \n// valarray_op_equo.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<double> vaL ( 6 ), vaR ( 6 );  \n   valarray<double> vaNE ( 6 );  \n   for ( i = 0 ; i < 6 ; i += 2 )  \n      vaL [ i ] =  100;  \n   for ( i = 1 ; i < 6 ; i += 2 )  \n      vaL [ i ] =  -100;  \n   for ( i = 0 ; i < 6 ; i++ )  \n      vaR [ i ] =  2*i;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for ( i = 0 ; i < 6 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 6 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL / vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the quotient is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 6 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 100 -100 100 -100 100 -100 ).  \nThe initial Right valarray is: ( 0 2 4 6 8 10 ).  \nThe element-by-element result of the quotient is the  \n valarray: ( 1.#INF -50 25 -16.6667 12.5 -10 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests whether the corresponding elements of two equally sized valarrays are equal or whether all the elements of a valarray are equal a specified value.  \n  \n```  \ntemplate <class Type>  \nvalarray<bool>  \noperator==(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator==(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator==(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose elements are to be tested for equality.  \n  \n ` right`  \n The second of the two valarrays whose elements are to be tested for equality.  \n  \n### Return Value  \n A valarray of Boolean values, each of which is:  \n  \n- **true** if the corresponding elements are equal.  \n  \n- **false** if the corresponding elements are not equal.  \n  \n### Remarks  \n The first template operator returns an object of class [valarray\\<bool>](../standard-library/valarray-bool-class.md), each of whose elements `I` is _ *Left*[ `I`] == \\_ *Right*[ `I`]. The second template operator stores in element `I`` left`[ `I`] == \\_ *Right*. The third template operator stores in element `I`` left` == ` right`[ `I`].  \n  \n### Example  \n  \n```cpp  \n// valarray_op_eq.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   valarray<bool> vaNE ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  -i;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i;  \n   for ( i = 0 ; i < 10 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial Left valarray is: ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNE = ( vaL == vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the equality comparison test is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaNE [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is: ( 0 1 -2 3 -4 5 -6 7 -8 9 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 8 9 ).  \nThe element-by-element result of the equality comparison test is the  \n valarray: ( 1 1 0 1 0 1 0 1 0 1 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_xor\"></a>  operator^  \n Obtains the bitwise exclusive `OR` ( **XOR**) between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type.  \n  \n```  \ntemplate <class Type>  \nvalarray<Type>  \noperator^(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator^(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator^(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose respective elements are to be combined with the bitwise **XOR** or a specified value of the element type to be combined bitwise with each element of a valarray.  \n  \n ` right`  \n The second of the two valarrays whose respective elements are to be combined with the bitwise **XOR** or a specified value of the element type to be combined bitwise with each element of a valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise combination of the bitwise **XOR** operation of ` left` and ` right.`  \n  \n### Remarks  \n A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, `long double`, `void``bool` or other, more complex data types.  \n  \n The bitwise exclusive `OR` ( **XOR**) has the following semantics: Given bits *b*1 and *b*2, *b*1 **XOR** *b*2 is **true** if exactly one of the bits is true; **false** if both bits are false or if both bits are true.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_xor.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   valarray<int> vaLAA ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  1;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  0;  \n   for ( i = 0 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i;  \n   for ( i = 1 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i-1;  \n   for ( i = 2 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i-1;  \n  \n   cout << \"The initial Left valarray is:  ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaLAA = ( vaL ^ vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the bitwise XOR operator^ is the\\n valarray: ( \";  \n           for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaLAA [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is:  ( 1 0 1 0 1 0 1 0 1 0 ).  \nThe initial Right valarray is: ( 0 0 1 3 3 4 6 6 7 9 ).  \nThe element-by-element result of the bitwise XOR operator^ is the  \n valarray: ( 1 0 0 3 2 4 7 6 6 9 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_or\"></a>  operator&#124;  \n Obtains the bitwise `OR` between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type.  \n  \n```  \ntemplate <class Type>  \nvalarray<Type>  \noperator|(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator|(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<Type>  \noperator|(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose respective elements are to be combined with the bitwise `OR` or a specified value of the element type to be combined bitwise with each element of a valarray.  \n  \n ` right`  \n The second of the two valarrays whose respective elements are to be combined with the bitwise `OR` or a specified value of the element type to be combined bitwise with each element of a valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise combination of the bitwise `OR` operation of ` left` and ` right.`  \n  \n### Remarks  \n A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, **longdouble**, `void`, `bool` or other, more complex data types.  \n  \n The bitwise OR has the same truth table as the logical `OR`, but applies to the data type on the level of the individual bits. Given bits *b*1 and *b*2, *b*1 `OR` *b*2 is **true** if at least one of the bits is true or **false** if both bits are false. The logical `OR`[operator&#124;&#124;](../standard-library/valarray-operators.md#operator_lor) applies on an element level, counting all nonzero values as **true**, and the result is a valarray of Boolean values. The bitwise OR `operator|`, by contrast, can result in a valarray of values other than 0 or 1, depending on the outcome of the bitwise operation.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_bitor.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   valarray<int> vaLAA ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  1;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  0;  \n   for ( i = 0 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i;  \n   for ( i = 1 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i-1;  \n   for ( i = 2 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i-1;  \n  \n   cout << \"The initial Left valarray is:  ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaLAA = ( vaL | vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the bitwise OR operator| is the\\n valarray: ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaLAA [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is:  ( 1 0 1 0 1 0 1 0 1 0 ).  \nThe initial Right valarray is: ( 0 0 1 3 3 4 6 6 7 9 ).  \nThe element-by-element result of the bitwise OR operator| is the  \n valarray: ( 1 0 1 3 3 4 7 6 7 9 ).  \n*\\  \n```  \n  \n##  <a name=\"operator_lor\"></a>  operator&#124;&#124;  \n Obtains the logical `OR` between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the valarray element type.  \n  \n```  \ntemplate <class Type>  \nvalarray<bool>  \noperator||(\n    const valarray<Type>& left,  \n    const valarray<Type>& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator||(\n    const valarray<Type>& left,  \n    const Type& right);\n\ntemplate <class Type>  \nvalarray<bool>  \noperator||(\n    const Type& left,  \n    const valarray<Type>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two valarrays whose respective elements are to be combined with the logical `OR` or a specified value of the element type to be combined with each element of a valarray.  \n  \n ` right`  \n The second of the two valarrays whose respective elements are to be combined with the logical `OR` or a specified value of the element type to be combined with each element of a valarray.  \n  \n### Return Value  \n A valarray whose elements are of type `bool` and are the element-wise combination of the logical OR operation of ` left` and ` right.`  \n  \n### Remarks  \n The logical `OR``operator||` applies on an element level, counting all nonzero values as **true**, and the result is a valarray of Boolean values. The bitwise version of `OR`, [operator&#124;](../standard-library/valarray-operators.md#operator_or) by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_logor.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   valarray<bool> vaLOR ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  0;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i-1;  \n   for ( i = 0 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i;  \n   for ( i = 1 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  0;  \n   for ( i = 2 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  0;  \n  \n   cout << \"The initial Left valarray is:  ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaLOR = ( vaL || vaR );  \n   cout << \"The element-by-element result of \"  \n        << \"the logical OR operator|| is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaLOR [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial Left valarray is:  ( 0 0 0 2 0 4 0 6 0 8 ).  \nThe initial Right valarray is: ( 0 0 0 3 0 0 6 0 0 9 ).  \nThe element-by-element result of the logical OR operator|| is the  \n valarray: ( 0 0 0 1 0 1 1 1 0 1 ).  \n*\\  \n```  \n  \n## See Also  \n [\\<valarray>](../standard-library/valarray.md)\n\n"}