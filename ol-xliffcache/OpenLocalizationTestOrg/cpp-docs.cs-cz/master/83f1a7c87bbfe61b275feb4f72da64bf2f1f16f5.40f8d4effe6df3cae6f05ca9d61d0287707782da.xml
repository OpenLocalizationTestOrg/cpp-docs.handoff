{"nodes":[{"pos":[12,88],"content":"How to: Use Regular Expressions to Rearrange Data (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Use Regular Expressions to Rearrange Data (C++-CLI) | Microsoft Docs","pos":[0,76]}]},{"content":"How to: Use Regular Expressions to Rearrange Data (C++/CLI)","pos":[670,729]},{"content":"The following code example demonstrates how the .NET Framework regular expression support can be used to rearrange, or reformat data.","pos":[730,863]},{"content":"The following code example uses the &lt;xref:System.Text.RegularExpressions.Regex&gt; and &lt;xref:System.Text.RegularExpressions.Match&gt; classes to extract first and last names from a string and then display these name elements in reverse order.","pos":[864,1100],"source":" The following code example uses the <xref:System.Text.RegularExpressions.Regex> and <xref:System.Text.RegularExpressions.Match> classes to extract first and last names from a string and then display these name elements in reverse order."},{"content":"The &lt;xref:System.Text.RegularExpressions.Regex&gt; class is used to construct a regular expression that describes the current format of the data.","pos":[1107,1249],"source":"The <xref:System.Text.RegularExpressions.Regex> class is used to construct a regular expression that describes the current format of the data."},{"content":"The two names are assumed to be separated by a comma and can use any amount of white-space around the comma.","pos":[1250,1358]},{"content":"The &lt;xref:System.Text.RegularExpressions.Match&gt; method is then used to analyze each string.","pos":[1359,1450],"source":" The <xref:System.Text.RegularExpressions.Match> method is then used to analyze each string."},{"content":"If successful, first and last names are retrieved from the &lt;xref:System.Text.RegularExpressions.Match&gt; object and displayed.","pos":[1451,1575],"source":" If successful, first and last names are retrieved from the <xref:System.Text.RegularExpressions.Match> object and displayed."},{"content":"Example","pos":[1584,1591]},{"content":"See Also","pos":[2420,2428]},{"content":".NET Framework Regular Expressions","pos":[2433,2467]},{"content":".NET Programming with C++/CLI (Visual C++)","pos":[2546,2588]}],"content":"---\ntitle: \"How to: Use Regular Expressions to Rearrange Data (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"regular expressions [C++], rearranging data\"\n  - \"data [C++], rearranging\"\nms.assetid: 5f91e777-9471-424e-ba75-dca3d1b49e42\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Use Regular Expressions to Rearrange Data (C++/CLI)\nThe following code example demonstrates how the .NET Framework regular expression support can be used to rearrange, or reformat data. The following code example uses the <xref:System.Text.RegularExpressions.Regex> and <xref:System.Text.RegularExpressions.Match> classes to extract first and last names from a string and then display these name elements in reverse order.  \n  \n The <xref:System.Text.RegularExpressions.Regex> class is used to construct a regular expression that describes the current format of the data. The two names are assumed to be separated by a comma and can use any amount of white-space around the comma. The <xref:System.Text.RegularExpressions.Match> method is then used to analyze each string. If successful, first and last names are retrieved from the <xref:System.Text.RegularExpressions.Match> object and displayed.  \n  \n## Example  \n  \n```  \n// regex_reorder.cpp  \n// compile with: /clr  \n#using <System.dll>  \nusing namespace System;  \nusing namespace Text::RegularExpressions;  \n  \nint main()  \n{  \n   array<String^>^ name =   \n   {  \n      \"Abolrous, Sam\",   \n      \"Berg,Matt\",   \n      \"Berry , Jo\",  \n      \"www.contoso.com\"  \n   };  \n  \n   Regex^ reg = gcnew Regex(\"(?<last>\\\\w*)\\\\s*,\\\\s*(?<first>\\\\w*)\");  \n  \n   for ( int i=0; i < name->Length; i++ )  \n   {  \n      Console::Write( \"{0,-20}\", name[i] );  \n      Match^ m = reg->Match( name[i] );  \n      if ( m->Success )  \n      {  \n         String^ first = m->Groups[\"first\"]->Value;  \n         String^ last = m->Groups[\"last\"]->Value;  \n         Console::WriteLine(\"{0} {1}\", first, last);  \n      }  \n      else  \n         Console::WriteLine(\"(invalid)\");  \n   }  \n   return 0;  \n}  \n```  \n  \n## See Also  \n [.NET Framework Regular Expressions](http://msdn.microsoft.com/Library/521b3f6d-f869-42e1-93e5-158c54a6895d)   \n [.NET Programming with C++/CLI (Visual C++)](../dotnet/dotnet-programming-with-cpp-cli-visual-cpp.md)"}