{"nodes":[{"pos":[12,46],"content":"CSharedFile Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CSharedFile Class | Microsoft Docs","pos":[0,34]}]},{"pos":[652,669],"content":"CSharedFile Class","linkify":"CSharedFile Class","nodes":[{"content":"CSharedFile Class","pos":[0,17]}]},{"pos":[670,772],"content":"The <bpt id=\"p1\">[</bpt>CMemFile<ept id=\"p1\">](../../mfc/reference/cmemfile-class.md)</ept>-derived class that supports shared memory files.","source":"The [CMemFile](../../mfc/reference/cmemfile-class.md)-derived class that supports shared memory files."},{"pos":[781,787],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[849,856],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[866,885],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[892,896]},{"content":"Description","pos":[897,908]},{"pos":[946,999],"content":"<bpt id=\"p1\">[</bpt>CSharedFile::CSharedFile<ept id=\"p1\">](#csharedfile__csharedfile)</ept>","source":"[CSharedFile::CSharedFile](#csharedfile__csharedfile)"},{"pos":[1000,1034],"content":"Constructs a <ph id=\"ph1\">`CSharedFile`</ph> object.","source":"Constructs a `CSharedFile` object."},{"pos":[1045,1059],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1066,1070]},{"content":"Description","pos":[1071,1082]},{"pos":[1120,1163],"content":"<bpt id=\"p1\">[</bpt>CSharedFile::Detach<ept id=\"p1\">](#csharedfile__detach)</ept>","source":"[CSharedFile::Detach](#csharedfile__detach)"},{"content":"Closes the shared memory file and returns the handle of its memory block.","pos":[1164,1237]},{"pos":[1242,1291],"content":"<bpt id=\"p1\">[</bpt>CSharedFile::SetHandle<ept id=\"p1\">](#csharedfile__sethandle)</ept>","source":"[CSharedFile::SetHandle](#csharedfile__sethandle)"},{"content":"Attaches the shared memory file to a memory block.","pos":[1292,1342]},{"pos":[1352,1359],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Memory files behave like disk files except that the file is stored in RAM rather than on disk.","pos":[1363,1457]},{"content":"A memory file is useful for fast temporary storage or for transferring raw bytes or serialized objects between independent processes.","pos":[1458,1591]},{"content":"Shared memory files differ from other memory files in that memory for them is allocated with the <bpt id=\"p1\">[</bpt>GlobalAlloc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa366574)</ept> Windows function.","pos":[1598,1786],"source":"Shared memory files differ from other memory files in that memory for them is allocated with the [GlobalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366574) Windows function."},{"content":"The <ph id=\"ph1\">`CSharedFile`</ph> class stores data in a globally allocated memory block (created using <bpt id=\"p1\">**</bpt>GlobalAlloc<ept id=\"p1\">**</ept>), and this memory block can be shared using DDE, the Clipboard, or other OLE/COM uniform data transfer operations, for example, using <ph id=\"ph2\">`IDataObject`</ph>.","pos":[1787,2039],"source":" The `CSharedFile` class stores data in a globally allocated memory block (created using **GlobalAlloc**), and this memory block can be shared using DDE, the Clipboard, or other OLE/COM uniform data transfer operations, for example, using `IDataObject`."},{"content":"<bpt id=\"p1\">**</bpt>GlobalAlloc<ept id=\"p1\">**</ept> returns an <ph id=\"ph1\">`HGLOBAL`</ph> handle rather than a pointer to memory, such as the pointer returned by <bpt id=\"p2\">[</bpt>malloc<ept id=\"p2\">](../../c-runtime-library/reference/malloc.md)</ept>.","pos":[2046,2209],"source":"**GlobalAlloc** returns an `HGLOBAL` handle rather than a pointer to memory, such as the pointer returned by [malloc](../../c-runtime-library/reference/malloc.md)."},{"content":"The <ph id=\"ph1\">`HGLOBAL`</ph> handle is needed in certain applications.","pos":[2210,2265],"source":" The `HGLOBAL` handle is needed in certain applications."},{"content":"For example, to put data on the Clipboard you need an <ph id=\"ph1\">`HGLOBAL`</ph> handle.","pos":[2266,2337],"source":" For example, to put data on the Clipboard you need an `HGLOBAL` handle."},{"pos":[2344,2466],"content":"Please note that <ph id=\"ph1\">`CSharedFile`</ph> does not use memory-mapped files, and the data cannot be directly shared between processes.","source":"Please note that `CSharedFile` does not use memory-mapped files, and the data cannot be directly shared between processes."},{"content":"<ph id=\"ph1\">`CSharedFile`</ph> objects can automatically allocate their own memory or you can attach your own memory block to the <ph id=\"ph2\">`CSharedFile`</ph> object by calling <bpt id=\"p1\">[</bpt>CSharedFile::SetHandle<ept id=\"p1\">](#csharedfile__sethandle)</ept>.","pos":[2473,2668],"source":"`CSharedFile` objects can automatically allocate their own memory or you can attach your own memory block to the `CSharedFile` object by calling [CSharedFile::SetHandle](#csharedfile__sethandle)."},{"content":"In either case, memory for growing the memory file automatically is allocated in <ph id=\"ph1\">`nGrowBytes`</ph>-sized increments if <ph id=\"ph2\">`nGrowBytes`</ph> is not zero.","pos":[2669,2808],"source":" In either case, memory for growing the memory file automatically is allocated in `nGrowBytes`-sized increments if `nGrowBytes` is not zero."},{"pos":[2815,2993],"content":"For more information, see the article <bpt id=\"p1\">[</bpt>Files in MFC<ept id=\"p1\">](../../mfc/files-in-mfc.md)</ept> and <bpt id=\"p2\">[</bpt>File Handling<ept id=\"p2\">](../../c-runtime-library/file-handling.md)</ept> in the <bpt id=\"p3\">*</bpt>Run-Time Library Reference<ept id=\"p3\">*</ept>.","source":"For more information, see the article [Files in MFC](../../mfc/files-in-mfc.md) and [File Handling](../../c-runtime-library/file-handling.md) in the *Run-Time Library Reference*."},{"pos":[3002,3023],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3027,3074],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3081,3124],"content":"<bpt id=\"p1\">[</bpt>CFile<ept id=\"p1\">](../../mfc/reference/cfile-class.md)</ept>","source":"[CFile](../../mfc/reference/cfile-class.md)"},{"pos":[3131,3180],"content":"<bpt id=\"p1\">[</bpt>CMemFile<ept id=\"p1\">](../../mfc/reference/cmemfile-class.md)</ept>","source":"[CMemFile](../../mfc/reference/cmemfile-class.md)"},{"pos":[3209,3221],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3225,3245],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxadv.h","source":"**Header:** afxadv.h"},{"pos":[3255,3320],"content":"<bpt id=\"p1\">&lt;a name=\"csharedfile__csharedfile\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSharedFile::CSharedFile","linkify":"<a name=\"csharedfile__csharedfile\"></a>  CSharedFile::CSharedFile","source":"<a name=\"csharedfile__csharedfile\"></a>  CSharedFile::CSharedFile"},{"pos":[3324,3386],"content":"Constructs a <ph id=\"ph1\">`CSharedFile`</ph> object and allocates memory for it.","source":"Constructs a `CSharedFile` object and allocates memory for it."},{"pos":[3509,3519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nAllocFlags<ept id=\"p1\">*</ept>","pos":[3523,3536],"source":"*nAllocFlags*"},{"content":"Flags indicating how memory is to be allocated.","pos":[3540,3587]},{"content":"See <bpt id=\"p1\">[</bpt>GlobalAlloc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa366574)</ept> for a list of valid flag values.","pos":[3588,3698],"source":" See [GlobalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366574) for a list of valid flag values."},{"content":"The memory allocation increment in bytes.","pos":[3721,3762]},{"pos":[3772,3827],"content":"<bpt id=\"p1\">&lt;a name=\"csharedfile__detach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSharedFile::Detach","linkify":"<a name=\"csharedfile__detach\"></a>  CSharedFile::Detach","source":"<a name=\"csharedfile__detach\"></a>  CSharedFile::Detach"},{"content":"Call this function to close the memory file and detach it from the memory block.","pos":[3831,3911]},{"pos":[3954,3966],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle of the memory block that contains the contents of the memory file.","pos":[3970,4047]},{"pos":[4057,4064],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4068,4175],"content":"You can reopen it by calling <bpt id=\"p1\">[</bpt>SetHandle<ept id=\"p1\">](#csharedfile__sethandle)</ept>, using the handle returned by <bpt id=\"p2\">**</bpt>Detach<ept id=\"p2\">**</ept>.","source":"You can reopen it by calling [SetHandle](#csharedfile__sethandle), using the handle returned by **Detach**."},{"pos":[4185,4246],"content":"<bpt id=\"p1\">&lt;a name=\"csharedfile__sethandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSharedFile::SetHandle","linkify":"<a name=\"csharedfile__sethandle\"></a>  CSharedFile::SetHandle","source":"<a name=\"csharedfile__sethandle\"></a>  CSharedFile::SetHandle"},{"pos":[4250,4332],"content":"Call this function to attach a block of global memory to the <ph id=\"ph1\">`CSharedFile`</ph> object.","source":"Call this function to attach a block of global memory to the `CSharedFile` object."},{"pos":[4431,4441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>hGlobalMemory<ept id=\"p1\">*</ept>","pos":[4445,4460],"source":"*hGlobalMemory*"},{"content":"Handle to the global memory to be attached to the <ph id=\"ph1\">`CSharedFile`</ph>.","pos":[4464,4528],"source":" Handle to the global memory to be attached to the `CSharedFile`."},{"content":"Specifies whether the memory block is allowed to grow.","pos":[4551,4605]},{"pos":[4615,4622],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4626,4818],"content":"If <ph id=\"ph1\">`bAllowGrow`</ph> is nonzero, the size of the memory block is increased as necessary, for example, if an attempt is made to write more bytes to the file than were allocated for the memory block.","source":"If `bAllowGrow` is nonzero, the size of the memory block is increased as necessary, for example, if an attempt is made to write more bytes to the file than were allocated for the memory block."},{"pos":[4827,4835],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CMemFile Class<ept id=\"p1\">](../../mfc/reference/cmemfile-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[4839,4895],"source":"[CMemFile Class](../../mfc/reference/cmemfile-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[4898,4947],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMemFile Class<ept id=\"p1\">](../../mfc/reference/cmemfile-class.md)</ept>","pos":[4950,5006],"source":" [CMemFile Class](../../mfc/reference/cmemfile-class.md)"}],"content":"---\ntitle: \"CSharedFile Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CSharedFile\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"memory files\"\n  - \"CSharedFile class\"\n  - \"shared memory files\"\nms.assetid: 5d000422-9ede-4318-a8c9-f7412b674f39\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CSharedFile Class\nThe [CMemFile](../../mfc/reference/cmemfile-class.md)-derived class that supports shared memory files.  \n  \n## Syntax  \n  \n```  \nclass CSharedFile : public CMemFile  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSharedFile::CSharedFile](#csharedfile__csharedfile)|Constructs a `CSharedFile` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSharedFile::Detach](#csharedfile__detach)|Closes the shared memory file and returns the handle of its memory block.|  \n|[CSharedFile::SetHandle](#csharedfile__sethandle)|Attaches the shared memory file to a memory block.|  \n  \n## Remarks  \n Memory files behave like disk files except that the file is stored in RAM rather than on disk. A memory file is useful for fast temporary storage or for transferring raw bytes or serialized objects between independent processes.  \n  \n Shared memory files differ from other memory files in that memory for them is allocated with the [GlobalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366574) Windows function. The `CSharedFile` class stores data in a globally allocated memory block (created using **GlobalAlloc**), and this memory block can be shared using DDE, the Clipboard, or other OLE/COM uniform data transfer operations, for example, using `IDataObject`.  \n  \n **GlobalAlloc** returns an `HGLOBAL` handle rather than a pointer to memory, such as the pointer returned by [malloc](../../c-runtime-library/reference/malloc.md). The `HGLOBAL` handle is needed in certain applications. For example, to put data on the Clipboard you need an `HGLOBAL` handle.  \n  \n Please note that `CSharedFile` does not use memory-mapped files, and the data cannot be directly shared between processes.  \n  \n `CSharedFile` objects can automatically allocate their own memory or you can attach your own memory block to the `CSharedFile` object by calling [CSharedFile::SetHandle](#csharedfile__sethandle). In either case, memory for growing the memory file automatically is allocated in `nGrowBytes`-sized increments if `nGrowBytes` is not zero.  \n  \n For more information, see the article [Files in MFC](../../mfc/files-in-mfc.md) and [File Handling](../../c-runtime-library/file-handling.md) in the *Run-Time Library Reference*.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CFile](../../mfc/reference/cfile-class.md)  \n  \n [CMemFile](../../mfc/reference/cmemfile-class.md)  \n  \n `CSharedFile`  \n  \n## Requirements  \n **Header:** afxadv.h  \n  \n##  <a name=\"csharedfile__csharedfile\"></a>  CSharedFile::CSharedFile  \n Constructs a `CSharedFile` object and allocates memory for it.  \n  \n```  \nCSharedFile(\n    UINT nAllocFlags = GMEM_DDESHARE | GMEM_MOVEABLE,  \n    UINT nGrowBytes = 4096);\n```  \n  \n### Parameters  \n *nAllocFlags*  \n Flags indicating how memory is to be allocated. See [GlobalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366574) for a list of valid flag values.  \n  \n `nGrowBytes`  \n The memory allocation increment in bytes.  \n  \n##  <a name=\"csharedfile__detach\"></a>  CSharedFile::Detach  \n Call this function to close the memory file and detach it from the memory block.  \n  \n```  \nHGLOBAL Detach();\n```  \n  \n### Return Value  \n The handle of the memory block that contains the contents of the memory file.  \n  \n### Remarks  \n You can reopen it by calling [SetHandle](#csharedfile__sethandle), using the handle returned by **Detach**.  \n  \n##  <a name=\"csharedfile__sethandle\"></a>  CSharedFile::SetHandle  \n Call this function to attach a block of global memory to the `CSharedFile` object.  \n  \n```  \nvoid SetHandle(\n    HGLOBAL hGlobalMemory,  \n    BOOL bAllowGrow = TRUE);\n```  \n  \n### Parameters  \n *hGlobalMemory*  \n Handle to the global memory to be attached to the `CSharedFile`.  \n  \n `bAllowGrow`  \n Specifies whether the memory block is allowed to grow.  \n  \n### Remarks  \n If `bAllowGrow` is nonzero, the size of the memory block is increased as necessary, for example, if an attempt is made to write more bytes to the file than were allocated for the memory block.  \n  \n## See Also  \n [CMemFile Class](../../mfc/reference/cmemfile-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CMemFile Class](../../mfc/reference/cmemfile-class.md)\n"}