{"nodes":[{"pos":[12,83],"content":"vfprintf_s, _vfprintf_s_l, vfwprintf_s, _vfwprintf_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vfprintf_s, _vfprintf_s_l, vfwprintf_s, _vfwprintf_s_l | Microsoft Docs","pos":[0,71]}]},{"content":"vfprintf_s, _vfprintf_s_l, vfwprintf_s, _vfwprintf_s_l","pos":[1276,1330]},{"content":"Write formatted output using a pointer to a list of arguments.","pos":[1331,1393]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>vfprintf, _vfprintf_l, vfwprintf, _vfwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/vfprintf-vfprintf-l-vfwprintf-vfwprintf-l.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1394,1676],"source":" These are versions of [vfprintf, _vfprintf_l, vfwprintf, _vfwprintf_l](../../c-runtime-library/reference/vfprintf-vfprintf-l-vfwprintf-vfwprintf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1685,1691]},{"content":"Parameters","pos":[2127,2137]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[2153,2181],"source":" Pointer to `FILE` structure."},{"content":"Format specification.","pos":[2200,2221]},{"content":"Pointer to list of arguments.","pos":[2240,2269]},{"content":"The locale to use.","pos":[2288,2306]},{"pos":[2313,2448],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"content":"Return Value","pos":[2457,2469]},{"content":"and <ph id=\"ph1\">`vfwprintf_s`</ph> return the number of characters written, not including the terminating null character, or a negative value if an output error occurs.","pos":[2486,2637],"source":" and `vfwprintf_s` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs."},{"content":"If either <ph id=\"ph1\">`stream`</ph> or <ph id=\"ph2\">`format`</ph> is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2638,2882],"source":" If either `stream` or `format` is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2883,2972],"source":" If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`."},{"pos":[2979,3147],"content":"For information on these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[3156,3163]},{"pos":[3167,3279],"content":"Each of these functions takes a pointer to an argument list, then formats and writes the given data to <ph id=\"ph1\">`stream`</ph>.","source":"Each of these functions takes a pointer to an argument list, then formats and writes the given data to `stream`."},{"pos":[3286,3439],"content":"These functions differ from the non-secure versions only in that the secure versions check that the <ph id=\"ph1\">`format`</ph> string contains valid formatting characters.","source":"These functions differ from the non-secure versions only in that the secure versions check that the `format` string contains valid formatting characters."},{"content":"is the wide-character version of <ph id=\"ph1\">`vfprintf_s`</ph>; the two functions behave identically if the stream is opened in ANSI mode.","pos":[3460,3581],"source":" is the wide-character version of `vfprintf_s`; the two functions behave identically if the stream is opened in ANSI mode."},{"content":"doesn't currently support output into a UNICODE stream.","pos":[3595,3650]},{"pos":[3657,3813],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[3821,4001],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[13,178],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[1,51],"source":" Ensure that `format` is not a user-defined string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[52,165],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"content":"Generic-Text Routine Mappings","pos":[4011,4040]},{"content":"TCHAR.H routine","pos":[4047,4062]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[4063,4091],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4092,4105]},{"content":"_UNICODE defined","pos":[4106,4122]},{"content":"Requirements","pos":[4369,4381]},{"content":"Routine","pos":[4388,4395]},{"content":"Required header","pos":[4396,4411]},{"content":"Optional headers","pos":[4412,4428]},{"pos":[4508,4511],"content":", _"},{"content":"stdio.h&gt; and <ph id=\"ph1\">\\&lt;</ph>stdarg.h&gt;","pos":[4528,4552],"source":"stdio.h> and \\<stdarg.h>"},{"content":"varargs.h&gt;*","pos":[4555,4566],"source":"varargs.h>*"},{"pos":[4584,4587],"content":", _"},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;, and <ph id=\"ph2\">\\&lt;</ph>stdarg.h&gt;","pos":[4605,4644],"source":"stdio.h> or \\<wchar.h>, and \\<stdarg.h>"},{"content":"varargs.h&gt;*","pos":[4647,4658],"source":"varargs.h>*"},{"content":"Required for UNIX V compatibility.","pos":[4669,4703]},{"pos":[4710,4834],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":".NET Framework Equivalent","pos":[4843,4868]},{"content":"Not applicable.","pos":[4872,4887]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4888,4935],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4936,5061],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[5070,5078]},{"content":"Stream I/O","pos":[5083,5093]},{"content":"vprintf Functions","pos":[5139,5156]},{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l","pos":[5209,5251]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[5334,5372]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l","pos":[5451,5508],"source":"sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l"},{"content":"va_arg, va_copy, va_end, va_start","pos":[5602,5635]}],"content":"---\ntitle: \"vfprintf_s, _vfprintf_s_l, vfwprintf_s, _vfwprintf_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"vfwprintf_s\"\n  - \"_vfprintf_s_l\"\n  - \"vfprintf_s\"\n  - \"_vfwprintf_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_vftprintf_s\"\n  - \"vfwprintf_s\"\n  - \"vfprintf_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"vfprintf_s_l function\"\n  - \"vfwprintf_s_l function\"\n  - \"vfwprintf_s function\"\n  - \"_vfprintf_s_l function\"\n  - \"_vfwprintf_s_l function\"\n  - \"vftprintf_s_l function\"\n  - \"vfprintf_s function\"\n  - \"_vftprintf_s_l function\"\n  - \"formatted text [C++]\"\n  - \"_vftprintf_s function\"\nms.assetid: eab6f563-46e2-4806-963f-2b23f339ecdc\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vfprintf_s, _vfprintf_s_l, vfwprintf_s, _vfwprintf_s_l\nWrite formatted output using a pointer to a list of arguments. These are versions of [vfprintf, _vfprintf_l, vfwprintf, _vfwprintf_l](../../c-runtime-library/reference/vfprintf-vfprintf-l-vfwprintf-vfwprintf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nint vfprintf_s(  \n   FILE *stream,  \n   const char *format,  \n   va_list argptr   \n);  \nint _vfprintf_s_l(  \n   FILE *stream,  \n   const char *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \nint vfwprintf_s(  \n   FILE *stream,  \n   const wchar_t *format,  \n   va_list argptr   \n);  \nint _vfwprintf_s_l(  \n   FILE *stream,  \n   const wchar_t *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n `format`  \n Format specification.  \n  \n `argptr`  \n Pointer to list of arguments.  \n  \n `locale`  \n The locale to use.  \n  \n For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Return Value  \n `vfprintf_s` and `vfwprintf_s` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs. If either `stream` or `format` is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`.  \n  \n For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each of these functions takes a pointer to an argument list, then formats and writes the given data to `stream`.  \n  \n These functions differ from the non-secure versions only in that the secure versions check that the `format` string contains valid formatting characters.  \n  \n `vfwprintf_s` is the wide-character version of `vfprintf_s`; the two functions behave identically if the stream is opened in ANSI mode. `vfprintf_s` doesn't currently support output into a UNICODE stream.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vftprintf_s`|`vfprintf_s`|`vfprintf_s`|`vfwprintf_s`|  \n|`_vftprintf_s_l`|`_vfprintf_s_l`|`_vfprintf_s_l`|`_vfwprintf_s_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`vfprintf_s`, _`vfprintf_s_l`|\\<stdio.h> and \\<stdarg.h>|\\<varargs.h>*|  \n|`vfwprintf_s`, _`vfwprintf_s_l`|\\<stdio.h> or \\<wchar.h>, and \\<stdarg.h>|\\<varargs.h>*|  \n  \n \\* Required for UNIX V compatibility.  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)"}