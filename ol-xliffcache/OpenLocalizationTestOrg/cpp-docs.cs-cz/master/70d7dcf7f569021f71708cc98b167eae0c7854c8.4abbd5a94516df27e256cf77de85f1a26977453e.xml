{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 1) C4378 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 1) C4378 | Microsoft Docs","pos":[0,49]}]},{"pos":[609,641],"content":"Compiler Warning (level 1) C4378","linkify":"Compiler Warning (level 1) C4378","nodes":[{"content":"Compiler Warning (level 1) C4378","pos":[0,32]}]},{"content":"Must obtain function pointers to run initializers; consider System::ModuleHandle::ResolveMethodHandle","pos":[642,743]},{"content":"Under <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>, initializer symbols contain function tokens, not functions pointers.","pos":[750,834],"source":"Under **/clr**, initializer symbols contain function tokens, not functions pointers."},{"content":"You need to convert tokens to pointers using &lt;xref:System.ModuleHandle.ResolveMethodHandle%2A&gt;.","pos":[836,931],"source":"  You need to convert tokens to pointers using <xref:System.ModuleHandle.ResolveMethodHandle%2A>."},{"pos":[940,947],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates C4378.","pos":[951,988]},{"pos":[1729,1736],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample shows how to resolve C4378.","pos":[1740,1788]}],"content":"---\ntitle: \"Compiler Warning (level 1) C4378 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4378\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4378\"\nms.assetid: d08e11ef-891a-4752-9a5e-360e7394acf7\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 1) C4378\nMust obtain function pointers to run initializers; consider System::ModuleHandle::ResolveMethodHandle  \n  \n Under **/clr**, initializer symbols contain function tokens, not functions pointers.  You need to convert tokens to pointers using <xref:System.ModuleHandle.ResolveMethodHandle%2A>.  \n  \n## Example  \n The following sample generates C4378.  \n  \n```  \n// C4378.cpp  \n// compile with: /W1 /clr /c  \ntypedef void (__cdecl *PF)(void);  \nint cxpf = 0;   // number of destructors to call  \nPF pfx[200];   // ptrs to those dtors, watch for overflow  \n  \nint myexit (PF pf) {  \n   pfx[cxpf++] = pf;  \n   return 0;  \n}  \n  \nstruct A {  \n   A() {}  \n   ~A() {}  \n};  \n  \nA aaaa;   \n  \n#pragma data_seg(\".mine$a\")  \nPF InitSegStart = (PF)1;  \n#pragma data_seg(\".mine$z\")  \nPF InitSegEnd = (PF)1;  \n#pragma data_seg()  \n  \nvoid InitializeObjects () {  \n   PF *x = &InitSegStart;  \n   for (++x ; x < &InitSegEnd ; ++x)  \n      if (*x)  \n         (*x)();  \n}  \n  \n#pragma init_seg(\".mine$m\",myexit)   // C4378  \nA bbbb;   // crash  \n  \nint main () {  \n   InitializeObjects();  \n}  \n```  \n  \n## Example  \n The following sample shows how to resolve C4378.  \n  \n```  \n// C4378_b.cpp  \n// compile with: /clr  \n#pragma warning(disable:4378)  \nusing namespace System;  \ntypedef void (__cdecl *PF)(void);  \ntypedef void (__clrcall * CLRPF)(void);  \n  \nint cxpf = 0;  // number of destructors we need to call  \nPF pfx[200];   // ptrs to those dtors. Watch out for overflow!  \n  \nref class TypeClassHolder {  \npublic:  \n   static TypeClassHolder ^typeClass = gcnew TypeClassHolder();  \n};  \n  \nCLRPF FuncTokenToFuncPtr(PF tknFunc) {  \n   ModuleHandle type =   \n      Type::GetTypeFromHandle(Type::GetTypeHandle(TypeClassHolder::typeClass))->Module->ModuleHandle;  \n   return (CLRPF)type.ResolveMethodHandle((int)(size_t)(tknFunc)).GetFunctionPointer().ToPointer();  \n}  \n  \nint myexit (PF pf) {  \n   pfx[cxpf++] = pf;  \n   return 0;  \n}  \n  \nstruct A {  \n   A() {}  \n   ~A() {}  \n};  \n  \nA aaaa;   \n  \n#pragma data_seg(\".mine$a\")  \nPF InitSegStart = (PF)1;  \n#pragma data_seg(\".mine$z\")  \nPF InitSegEnd = (PF)1;  \n#pragma data_seg()  \n  \nvoid InitializeObjects () {  \n   PF *x = &InitSegStart;  \n   for (++x ; x < &InitSegEnd ; ++x)  \n      if(*x) {  \n         CLRPF realppfunc;  \n         realppfunc = FuncTokenToFuncPtr(*x);  \n         (realppfunc)();  \n      }  \n}  \n  \n#pragma init_seg(\".mine$m\",myexit)  \nA bbbb; // constructor call succeeds  \n  \nint main () {  \n   InitializeObjects();  \n}  \n```"}