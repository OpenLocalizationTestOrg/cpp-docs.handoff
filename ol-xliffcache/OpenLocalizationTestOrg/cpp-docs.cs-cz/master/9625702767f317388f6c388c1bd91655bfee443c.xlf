<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9625702767f317388f6c388c1bd91655bfee443c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\exported-dll-function-entry-points.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7b022c19a10ff8b5358002d78bbafc4b05dc80b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05785bb383f5de9596cb9b50dfd74c64d974c0e5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exported DLL Function Entry Points | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exported DLL Function Entry Points</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For exported functions of a DLL, use the <bpt id="p1">[</bpt>AFX_MANAGE_STATE<ept id="p1">](http://msdn.microsoft.com/library/620cb840-4227-4a75-b36d-f7d507f44606)</ept> macro to maintain the proper global state when switching from the DLL module to the calling application's DLL.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When called, this macro sets <ph id="ph1">`pModuleState`</ph>, a pointer to an <ph id="ph2">`AFX_MODULE_STATE`</ph> structure containing global data for the module, as the effective module state for the remainder of the containing scope of the function.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Upon leaving the scope containing the macro, the previous effective module state is automatically restored.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This switching is achieved by constructing an instance of an <bpt id="p1">**</bpt>AFX_MODULE_STATE<ept id="p1">**</ept> class on the stack.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In its constructor, this class obtains a pointer to the current module state and stores it in a member variable, and then sets <ph id="ph1">`pModuleState`</ph> as the new effective module state.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In its destructor, this class restores the pointer stored in its member variable as the effective module state.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you have an exported function, such as one that launches a dialog box in your DLL, you need to add the following code to the beginning of the function:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>NVC_MFCConnectionPoints#6</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This swaps the current module state with the state returned from <bpt id="p1">[</bpt>AfxGetStaticModuleState<ept id="p1">](http://msdn.microsoft.com/library/8b6c7c95-9d57-4337-9378-9b65e60d5c3b)</ept> until the end of the current scope.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Problems with resources in DLLs will occur if the <ph id="ph1">`AFX_MANAGE_STATE`</ph> macro is not used.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By default, MFC uses the resource handle of the main application to load the resource template.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This template is actually stored in the DLL.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The root cause is that MFC's module state information has not been switched by the <ph id="ph1">`AFX_MANAGE_STATE`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The resource handle is recovered from MFC's module state.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Not switching the module state causes the wrong resource handle to be used.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>does not need to be put into every function in the DLL.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`InitInstance`</ph> can be called by the MFC code in the application without <ph id="ph2">`AFX_MANAGE_STATE`</ph> because MFC automatically shifts the module state before <ph id="ph3">`InitInstance`</ph> and then switches it back after <ph id="ph4">`InitInstance`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The same is true for all message-map handlers.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Regular DLLs actually have a special master window procedure that automatically switches the module state before routing any message.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Managing the State Data of MFC Modules</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>