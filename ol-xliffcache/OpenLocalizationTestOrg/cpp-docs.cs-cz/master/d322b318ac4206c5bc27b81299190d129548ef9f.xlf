<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d322b318ac4206c5bc27b81299190d129548ef9f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\map-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3061744ac2aa87c7f7bc672e06be5a4b0aa5364a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc2ef065b52179efebf0bd089a3bf6a897749320</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>map<ph id="ph1">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>map<ph id="ph1">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>swap (map)</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>swap (multimap)</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>swap  (map)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two maps.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The map providing the elements to be swapped, or the map whose elements are to be exchanged with those of the map <ph id="ph1">` left`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The map whose elements are to be exchanged with those of the map <ph id="ph1">` right`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The template function is an algorithm specialized on the container class map to execute the member function <ph id="ph1">` left.`</ph><bpt id="p1">[</bpt>swap<ept id="p1">](../standard-library/map-class.md#map__swap)</ept><bpt id="p2">*</bpt>( right<ept id="p2">*</ept>).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is an instance of the partial ordering of function templates by the compiler.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The general version of the template function, <bpt id="p1">**</bpt>template<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph> <bpt id="p2">**</bpt>class T<ept id="p2">**</ept><ph id="ph2">&gt; </ph><bpt id="p3">**</bpt>void swap<ept id="p3">**</ept>( <bpt id="p4">**</bpt>T&amp;<ept id="p4">**</ept>, <bpt id="p5">**</bpt>T&amp;<ept id="p5">**</ept>), in the algorithm class works by assignment and is a slow operation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The specialized version in each container is much faster as it can work with the internal representation of the container class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See the code example for member function <bpt id="p1">[</bpt>map::swap<ept id="p1">](../standard-library/map-class.md#map__swap)</ept> for an example that uses the template version of <ph id="ph1">`swap`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>swap  (multimap)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two multimaps.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The multimap providing the elements to be swapped, or the multimap whose elements are to be exchanged with those of the multimap <ph id="ph1">` left`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The multimap whose elements are to be exchanged with those of the multimap <ph id="ph1">` right`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The template function is an algorithm specialized on the container class map to execute on the container class multimap to execute the member function <ph id="ph1">` left.`</ph><bpt id="p1">[</bpt>swap<ept id="p1">](../standard-library/multimap-class.md#multimap__swap)</ept> ( <ph id="ph2">` right`</ph>).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is an instance of the partial ordering of function templates by the compiler.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The general version of the template function, <bpt id="p1">**</bpt>template<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph> <bpt id="p2">**</bpt>class T<ept id="p2">**</ept><ph id="ph2">&gt; </ph><bpt id="p3">**</bpt>void swap<ept id="p3">**</ept>( <bpt id="p4">**</bpt>T&amp;<ept id="p4">**</ept>, <bpt id="p5">**</bpt>T&amp;<ept id="p5">**</ept>), in the algorithm class works by assignment and is a slow operation.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The specialized version in each container is much faster as it can work with the internal representation of the container class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See the code example for member function <bpt id="p1">[</bpt>multimap::swap<ept id="p1">](../standard-library/multimap-class.md#multimap__swap)</ept> for an example that uses the template version of <ph id="ph1">`swap`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>map&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>