{"nodes":[{"pos":[12,62],"content":"CMFCToolBarsCustomizeDialog Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCToolBarsCustomizeDialog Class | Microsoft Docs","pos":[0,50]}]},{"pos":[655,688],"content":"CMFCToolBarsCustomizeDialog Class","linkify":"CMFCToolBarsCustomizeDialog Class","nodes":[{"content":"CMFCToolBarsCustomizeDialog Class","pos":[0,33]}]},{"content":"A modeless tab dialog box ( <bpt id=\"p1\">[</bpt>CPropertySheet Class<ept id=\"p1\">](../../mfc/reference/cpropertysheet-class.md)</ept>) that enables the user to customize the toolbars, menus, keyboard shortcuts, user-defined tools, and visual style in an application.","pos":[689,917],"source":"A modeless tab dialog box ( [CPropertySheet Class](../../mfc/reference/cpropertysheet-class.md)) that enables the user to customize the toolbars, menus, keyboard shortcuts, user-defined tools, and visual style in an application."},{"content":"Typically, the user accesses this dialog box by selecting <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Tools<ept id=\"p2\">**</ept> menu.","pos":[918,1014],"source":" Typically, the user accesses this dialog box by selecting **Customize** from the **Tools** menu."},{"pos":[1021,1143],"content":"The <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box has six tabs: <bpt id=\"p2\">**</bpt>Commands<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Toolbars<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Tools<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>Keyboard<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>Menu<ept id=\"p6\">**</ept>, and <bpt id=\"p7\">**</bpt>Options<ept id=\"p7\">**</ept>.","source":"The **Customize** dialog box has six tabs: **Commands**, **Toolbars**, **Tools**, **Keyboard**, **Menu**, and **Options**."},{"pos":[1152,1158],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1242,1249],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1259,1278],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1285,1289]},{"content":"Description","pos":[1290,1301]},{"pos":[1339,1456],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::CMFCToolBarsCustomizeDialog<ept id=\"p1\">](#cmfctoolbarscustomizedialog__cmfctoolbarscustomizedialog)</ept>","source":"[CMFCToolBarsCustomizeDialog::CMFCToolBarsCustomizeDialog](#cmfctoolbarscustomizedialog__cmfctoolbarscustomizedialog)"},{"pos":[1457,1507],"content":"Constructs a <ph id=\"ph1\">`CMFCToolBarsCustomizeDialog`</ph> object.","source":"Constructs a `CMFCToolBarsCustomizeDialog` object."},{"content":"Destructor.","pos":[1572,1583]},{"pos":[1594,1608],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1615,1619]},{"content":"Description","pos":[1620,1631]},{"pos":[1669,1782],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addbutton)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton)"},{"pos":[1783,1858],"content":"Inserts a toolbar button into the list of commands on the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> page","source":"Inserts a toolbar button into the list of commands on the **Commands** page"},{"pos":[1863,1972],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddMenu<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addmenu)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::AddMenu](#cmfctoolbarscustomizedialog__addmenu)"},{"pos":[1973,2175],"content":"Loads a menu from the resources and calls <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddMenuCommands<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addmenucommands)</ept> to add that menu to the list of commands on the <bpt id=\"p2\">**</bpt>Commands<ept id=\"p2\">**</ept> page.","source":"Loads a menu from the resources and calls [CMFCToolBarsCustomizeDialog::AddMenuCommands](#cmfctoolbarscustomizedialog__addmenucommands) to add that menu to the list of commands on the **Commands** page."},{"pos":[2180,2305],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddMenuCommands<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addmenucommands)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::AddMenuCommands](#cmfctoolbarscustomizedialog__addmenucommands)"},{"pos":[2306,2508],"content":"Loads a menu from the resources and calls <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddMenuCommands<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addmenucommands)</ept> to add that menu to the list of commands on the <bpt id=\"p2\">**</bpt>Commands<ept id=\"p2\">**</ept> page.","source":"Loads a menu from the resources and calls [CMFCToolBarsCustomizeDialog::AddMenuCommands](#cmfctoolbarscustomizedialog__addmenucommands) to add that menu to the list of commands on the **Commands** page."},{"pos":[2513,2628],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddToolBar<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addtoolbar)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::AddToolBar](#cmfctoolbarscustomizedialog__addtoolbar)"},{"content":"Loads a toolbar from the resources.","pos":[2629,2664]},{"content":"Then, for each command in the menu calls the <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addbutton)</ept> method to insert a button in the list of commands on the <bpt id=\"p2\">**</bpt>Commands<ept id=\"p2\">**</ept> page under the specified category.","pos":[2665,2896],"source":" Then, for each command in the menu calls the [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method to insert a button in the list of commands on the **Commands** page under the specified category."},{"pos":[2901,3008],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::Create<ept id=\"p1\">](#cmfctoolbarscustomizedialog__create)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::Create](#cmfctoolbarscustomizedialog__create)"},{"pos":[3009,3051],"content":"Displays the <bpt id=\"p1\">**</bpt>Customization<ept id=\"p1\">**</ept> dialog box.","source":"Displays the **Customization** dialog box."},{"content":"Reserved for future use.","pos":[3099,3123]},{"pos":[3128,3273],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::EnableUserDefinedToolbars<ept id=\"p1\">](#cmfctoolbarscustomizedialog__enableuserdefinedtoolbars)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::EnableUserDefinedToolbars](#cmfctoolbarscustomizedialog__enableuserdefinedtoolbars)"},{"pos":[3274,3354],"content":"Enables or disables creating new toolbars by using the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","source":"Enables or disables creating new toolbars by using the **Customize** dialog box."},{"pos":[3359,3460],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::FillAllCommandsList<ept id=\"p1\">](#cmfctoolbarscustomizedialog__fillallcommandslist)</ept>","source":"[CMFCToolBarsCustomizeDialog::FillAllCommandsList](#cmfctoolbarscustomizedialog__fillallcommandslist)"},{"pos":[3461,3553],"content":"Populates the provided <ph id=\"ph1\">`CListBox`</ph> object with the commands in the <bpt id=\"p1\">**</bpt>All Commands<ept id=\"p1\">**</ept> category.","source":"Populates the provided `CListBox` object with the commands in the **All Commands** category."},{"pos":[3558,3665],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::FillCategoriesComboBox<ept id=\"p1\">](#cmfctoolbarscustomizedialog__fillcategoriescombobox)</ept>","source":"[CMFCToolBarsCustomizeDialog::FillCategoriesComboBox](#cmfctoolbarscustomizedialog__fillcategoriescombobox)"},{"pos":[3666,3779],"content":"Populates the provided <ph id=\"ph1\">`CComboBox`</ph> object with the name of each command category in the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","source":"Populates the provided `CComboBox` object with the name of each command category in the **Customize** dialog box."},{"pos":[3784,3889],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::FillCategoriesListBox<ept id=\"p1\">](#cmfctoolbarscustomizedialog__fillcategorieslistbox)</ept>","source":"[CMFCToolBarsCustomizeDialog::FillCategoriesListBox](#cmfctoolbarscustomizedialog__fillcategorieslistbox)"},{"pos":[3890,4002],"content":"Populates the provided <ph id=\"ph1\">`CListBox`</ph> object with the name of each command category in the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","source":"Populates the provided `CListBox` object with the name of each command category in the **Customize** dialog box."},{"pos":[4007,4098],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::GetCommandName<ept id=\"p1\">](#cmfctoolbarscustomizedialog__getcommandname)</ept>","source":"[CMFCToolBarsCustomizeDialog::GetCommandName](#cmfctoolbarscustomizedialog__getcommandname)"},{"content":"Retrieves the name that is associated with the given command ID.","pos":[4099,4163]},{"pos":[4168,4267],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::GetCountInCategory<ept id=\"p1\">](#cmfctoolbarscustomizedialog__getcountincategory)</ept>","source":"[CMFCToolBarsCustomizeDialog::GetCountInCategory](#cmfctoolbarscustomizedialog__getcountincategory)"},{"content":"Retrieves the number of items in the provided list that have a given text label.","pos":[4268,4348]},{"pos":[4353,4432],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::GetFlags<ept id=\"p1\">](#cmfctoolbarscustomizedialog__getflags)</ept>","source":"[CMFCToolBarsCustomizeDialog::GetFlags](#cmfctoolbarscustomizedialog__getflags)"},{"content":"Retrieves the set of flags that affect the behavior of the dialog box.","pos":[4433,4503]},{"pos":[4552,4712],"content":"Used by the framework to obtain a pointer to the <bpt id=\"p1\">[</bpt>CRuntimeClass<ept id=\"p1\">](../../mfc/reference/cruntimeclass-structure.md)</ept> object that is associated with this class type.","source":"Used by the framework to obtain a pointer to the [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) object that is associated with this class type."},{"pos":[4717,4856],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::OnEditToolbarMenuImage<ept id=\"p1\">](#cmfctoolbarscustomizedialog__onedittoolbarmenuimage)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::OnEditToolbarMenuImage](#cmfctoolbarscustomizedialog__onedittoolbarmenuimage)"},{"content":"Starts an image editor so that a user can customize a toolbar button or menu item icon.","pos":[4857,4944]},{"pos":[4949,5036],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::OnInitDialog<ept id=\"p1\">](#cmfctoolbarscustomizedialog__oninitdialog)</ept>","source":"[CMFCToolBarsCustomizeDialog::OnInitDialog](#cmfctoolbarscustomizedialog__oninitdialog)"},{"content":"Overrides to augment property sheet initialization.","pos":[5037,5088]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPropertySheet::OnInitDialog<ept id=\"p1\">](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog)</ept>.)","pos":[5089,5206],"source":" (Overrides [CPropertySheet::OnInitDialog](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog).)"},{"pos":[5211,5300],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::PostNcDestroy<ept id=\"p1\">](#cmfctoolbarscustomizedialog__postncdestroy)</ept>","source":"[CMFCToolBarsCustomizeDialog::PostNcDestroy](#cmfctoolbarscustomizedialog__postncdestroy)"},{"content":"Called by the framework after the window has been destroyed.","pos":[5301,5361]},{"content":"(Overrides <ph id=\"ph1\">`CPropertySheet::PostNcDestroy`</ph>.)","pos":[5362,5406],"source":" (Overrides `CPropertySheet::PostNcDestroy`.)"},{"pos":[5411,5530],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::RemoveButton<ept id=\"p1\">](#cmfctoolbarscustomizedialog__removebutton)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::RemoveButton](#cmfctoolbarscustomizedialog__removebutton)"},{"content":"Removes the button with the specified command ID from the specified category, or from all categories.","pos":[5531,5632]},{"pos":[5637,5760],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::RenameCategory<ept id=\"p1\">](#cmfctoolbarscustomizedialog__renamecategory)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::RenameCategory](#cmfctoolbarscustomizedialog__renamecategory)"},{"pos":[5761,5834],"content":"Renames a category in the list box of categories on the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> tab.","source":"Renames a category in the list box of categories on the **Commands** tab."},{"pos":[5839,5960],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::ReplaceButton<ept id=\"p1\">](#cmfctoolbarscustomizedialog__replacebutton)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::ReplaceButton](#cmfctoolbarscustomizedialog__replacebutton)"},{"pos":[5961,6060],"content":"Replaces a button in the list of commands on the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> tab with a new toolbar button object.","source":"Replaces a button in the list of commands on the **Commands** tab with a new toolbar button object."},{"pos":[6065,6190],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::SetUserCategory<ept id=\"p1\">](#cmfctoolbarscustomizedialog__setusercategory)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::SetUserCategory](#cmfctoolbarscustomizedialog__setusercategory)"},{"pos":[6191,6280],"content":"Adds a category to the list of categories that will be displayed on the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> tab.","source":"Adds a category to the list of categories that will be displayed on the **Commands** tab."},{"pos":[6291,6308],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[6315,6319]},{"content":"Description","pos":[6320,6331]},{"pos":[6369,6500],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::CheckToolsValidity<ept id=\"p1\">](#cmfctoolbarscustomizedialog__checktoolsvalidity)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::CheckToolsValidity](#cmfctoolbarscustomizedialog__checktoolsvalidity)"},{"content":"Called by the framework to determine whether the list of user-defined tools is valid.","pos":[6501,6586]},{"pos":[6591,6720],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::OnAfterChangeTool<ept id=\"p1\">](#cmfctoolbarscustomizedialog__onafterchangetool)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::OnAfterChangeTool](#cmfctoolbarscustomizedialog__onafterchangetool)"},{"content":"Called by the framework when the properties of a user-defined tool change.","pos":[6721,6795]},{"pos":[6800,6917],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::OnAssignKey<ept id=\"p1\">](#cmfctoolbarscustomizedialog__onassignkey)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::OnAssignKey](#cmfctoolbarscustomizedialog__onassignkey)"},{"content":"Determines whether a specified keyboard shortcut can be assigned to an action.","pos":[6918,6996]},{"pos":[7001,7132],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::OnBeforeChangeTool<ept id=\"p1\">](#cmfctoolbarscustomizedialog__onbeforechangetool)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::OnBeforeChangeTool](#cmfctoolbarscustomizedialog__onbeforechangetool)"},{"content":"Determines whether a user-defined tool can be changed.","pos":[7133,7187]},{"pos":[7192,7317],"content":"<ph id=\"ph1\">`CMFCToolBarsCustomizeDialog::`</ph> <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::OnInitToolsPage<ept id=\"p1\">](#cmfctoolbarscustomizedialog__oninittoolspage)</ept>","source":"`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::OnInitToolsPage](#cmfctoolbarscustomizedialog__oninittoolspage)"},{"pos":[7318,7395],"content":"Called by the framework when the user chooses the <bpt id=\"p1\">**</bpt>Tools<ept id=\"p1\">**</ept> tab is requested.","source":"Called by the framework when the user chooses the **Tools** tab is requested."},{"pos":[7405,7412],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7416,7599],"content":"To display the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box, create a <ph id=\"ph1\">`CMFCToolBarsCustomizeDialog`</ph> object and call the <bpt id=\"p2\">[</bpt>CMFCToolBarsCustomizeDialog::Create<ept id=\"p2\">](#cmfctoolbarscustomizedialog__create)</ept> method.","source":"To display the **Customize** dialog box, create a `CMFCToolBarsCustomizeDialog` object and call the [CMFCToolBarsCustomizeDialog::Create](#cmfctoolbarscustomizedialog__create) method."},{"pos":[7606,7736],"content":"While the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box is active, the application works in a special mode that limits the user to customization tasks.","source":"While the **Customize** dialog box is active, the application works in a special mode that limits the user to customization tasks."},{"pos":[7745,7752],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to use various methods in the <ph id=\"ph1\">`CMFCToolBarsCustomizeDialog`</ph> class.","pos":[7756,7861],"source":"The following example demonstrates how to use various methods in the `CMFCToolBarsCustomizeDialog` class."},{"content":"The example shows how to replace a toolbar button in the list box of commands on the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> page, enable creating new toolbars by using the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> dialog box, and display the <bpt id=\"p3\">**</bpt>Customization<ept id=\"p3\">**</ept> dialog box.","pos":[7862,8079],"source":" The example shows how to replace a toolbar button in the list box of commands on the **Commands** page, enable creating new toolbars by using the **Customize** dialog box, and display the **Customization** dialog box."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>IE Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[8080,8159],"source":" This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md)."},{"pos":[8166,8272],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_IEDemo#4<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_IEDemo#4](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_1.cpp)]"},{"pos":[8281,8302],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[8306,8353],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[8360,8413],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[8420,8461],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[8468,8529],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet<ept id=\"p1\">](../../mfc/reference/cpropertysheet-class.md)</ept>","source":"[CPropertySheet](../../mfc/reference/cpropertysheet-class.md)"},{"pos":[8536,8623],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog<ept id=\"p1\">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept>","source":"[CMFCToolBarsCustomizeDialog](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)"},{"pos":[8632,8644],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[8648,8688],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxToolBarsCustomizeDialog.h","source":"**Header:** afxToolBarsCustomizeDialog.h"},{"pos":[8698,8791],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__addbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::AddButton","linkify":"<a name=\"cmfctoolbarscustomizedialog__addbutton\"></a>  CMFCToolBarsCustomizeDialog::AddButton","source":"<a name=\"cmfctoolbarscustomizedialog__addbutton\"></a>  CMFCToolBarsCustomizeDialog::AddButton"},{"pos":[8795,8871],"content":"Inserts a toolbar button into the list of commands on the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> page.","source":"Inserts a toolbar button into the list of commands on the **Commands** page."},{"pos":[9114,9124],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiCategoryId`</ph>","pos":[9128,9147],"source":"[in] `uiCategoryId`"},{"content":"Specifies the category ID into which to insert the button.","pos":[9151,9209]},{"content":"[in] <ph id=\"ph1\">`button`</ph>","pos":[9216,9229],"source":"[in] `button`"},{"content":"Specifies the button to insert.","pos":[9233,9264]},{"content":"[in] <ph id=\"ph1\">`iInsertBefore`</ph>","pos":[9271,9291],"source":"[in] `iInsertBefore`"},{"content":"Specifies the zero-based index of a toolbar button before which the button is inserted.","pos":[9295,9382]},{"content":"[in] <ph id=\"ph1\">`lpszCategory`</ph>","pos":[9389,9408],"source":"[in] `lpszCategory`"},{"content":"Specifies the category string to insert the button.","pos":[9412,9463]},{"pos":[9473,9480],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9484,9751],"content":"The <ph id=\"ph1\">`AddButton`</ph> method ignores buttons that have the standard command IDs (such as ID_FILE_MRU_FILE1), commands that are not permitted (see <bpt id=\"p1\">[</bpt>CMFCToolBar::IsCommandPermitted<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__iscommandpermitted)</ept>) and dummy buttons.","source":"The `AddButton` method ignores buttons that have the standard command IDs (such as ID_FILE_MRU_FILE1), commands that are not permitted (see [CMFCToolBar::IsCommandPermitted](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__iscommandpermitted)) and dummy buttons."},{"content":"This method creates a new object of the same type as <ph id=\"ph1\">`button`</ph> (usually a <bpt id=\"p1\">[</bpt>CMFCToolBarButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept>) by using the runtime class of the button.","pos":[9758,9947],"source":"This method creates a new object of the same type as `button` (usually a [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md)) by using the runtime class of the button."},{"content":"It then calls <bpt id=\"p1\">[</bpt>CMFCToolBarButton::CopyFrom<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom)</ept> to copy the data members of button, and inserts the copy into the specified category.","pos":[9948,10153],"source":" It then calls [CMFCToolBarButton::CopyFrom](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom) to copy the data members of button, and inserts the copy into the specified category."},{"pos":[10160,10245],"content":"When the new button is inserted, it receives the <ph id=\"ph1\">`OnAddToCustomizePage`</ph> notification.","source":"When the new button is inserted, it receives the `OnAddToCustomizePage` notification."},{"pos":[10252,10394],"content":"If <ph id=\"ph1\">`iInsertBefore`</ph> is -1, the button is appended to the list of categories; otherwise it is inserted before the item with the specified index.","source":"If `iInsertBefore` is -1, the button is appended to the list of categories; otherwise it is inserted before the item with the specified index."},{"pos":[10404,10411],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`AddButton`</ph> method of the <ph id=\"ph2\">`CMFCToolBarsCustomizeDialog`</ph> class.","pos":[10415,10527],"source":"The following example demonstrates how to use the `AddButton` method of the `CMFCToolBarsCustomizeDialog` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Slider sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[10528,10606],"source":" This code snippet is part of the [Slider sample](../../visual-cpp-samples.md)."},{"pos":[10613,10719],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Slider#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Slider#1](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_2.cpp)]"},{"pos":[10729,10818],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__addmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::AddMenu","linkify":"<a name=\"cmfctoolbarscustomizedialog__addmenu\"></a>  CMFCToolBarsCustomizeDialog::AddMenu","source":"<a name=\"cmfctoolbarscustomizedialog__addmenu\"></a>  CMFCToolBarsCustomizeDialog::AddMenu"},{"pos":[10822,11024],"content":"Loads a menu from the resources and calls <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddMenuCommands<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addmenucommands)</ept> to add that menu to the list of commands on the <bpt id=\"p2\">**</bpt>Commands<ept id=\"p2\">**</ept> page.","source":"Loads a menu from the resources and calls [CMFCToolBarsCustomizeDialog::AddMenuCommands](#cmfctoolbarscustomizedialog__addmenucommands) to add that menu to the list of commands on the **Commands** page."},{"pos":[11081,11091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiMenuResId`</ph>","pos":[11095,11113],"source":"[in] `uiMenuResId`"},{"content":"Specifies the resource ID of a menu to load.","pos":[11117,11161]},{"pos":[11171,11183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11187,11246],"content":"<ph id=\"ph1\">`TRUE`</ph> if a menu was added successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if a menu was added successfully; otherwise `FALSE`."},{"pos":[11256,11263],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In the call to <ph id=\"ph1\">`AddMenuCommands`</ph>, <ph id=\"ph2\">`bPopup`</ph> is <ph id=\"ph3\">`FALSE`</ph>.","pos":[11267,11321],"source":"In the call to `AddMenuCommands`, `bPopup` is `FALSE`."},{"content":"As a result, that method does not add menu items that contain submenus to the list of commands.","pos":[11322,11417]},{"content":"This method does add the menu items in the submenus to the list of commands.","pos":[11418,11494]},{"pos":[11504,11609],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__addmenucommands\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::AddMenuCommands","linkify":"<a name=\"cmfctoolbarscustomizedialog__addmenucommands\"></a>  CMFCToolBarsCustomizeDialog::AddMenuCommands","source":"<a name=\"cmfctoolbarscustomizedialog__addmenucommands\"></a>  CMFCToolBarsCustomizeDialog::AddMenuCommands"},{"pos":[11613,11722],"content":"Adds items to the list of commands in the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> page to represent all the items in the specified menu.","source":"Adds items to the list of commands in the **Commands** page to represent all the items in the specified menu."},{"pos":[11879,11889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pMenu`</ph>","pos":[11893,11905],"source":"[in] `pMenu`"},{"content":"A pointer to the CMenu object to add.","pos":[11909,11946]},{"content":"[in] <ph id=\"ph1\">`bPopup`</ph>","pos":[11953,11966],"source":"[in] `bPopup`"},{"content":"Specifies whether to insert the popup menu items to the list of commands.","pos":[11970,12043]},{"content":"[in] <ph id=\"ph1\">`lpszCategory`</ph>","pos":[12050,12069],"source":"[in] `lpszCategory`"},{"content":"The name of the category to insert the menu.","pos":[12073,12117]},{"content":"[in] <ph id=\"ph1\">`lpszMenuPath`</ph>","pos":[12124,12143],"source":"[in] `lpszMenuPath`"},{"content":"A prefix that is added to the name when the command is shown in the <bpt id=\"p1\">**</bpt>All Categories<ept id=\"p1\">**</ept> list.","pos":[12147,12239],"source":" A prefix that is added to the name when the command is shown in the **All Categories** list."},{"pos":[12249,12256],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`AddMenuCommands`</ph> method loops over all menu items of <ph id=\"ph2\">`pMenu`</ph>.","pos":[12260,12326],"source":"The `AddMenuCommands` method loops over all menu items of `pMenu`."},{"content":"For each menu item that does not contain a submenu, this method creates a <bpt id=\"p1\">[</bpt>CMFCToolBarButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object and calls the <bpt id=\"p2\">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id=\"p2\">](#cmfctoolbarscustomizedialog__addbutton)</ept> method to add the menu item as a toolbar button to the list of commands on the <bpt id=\"p3\">**</bpt>Commands<ept id=\"p3\">**</ept> page.","pos":[12327,12675],"source":" For each menu item that does not contain a submenu, this method creates a [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object and calls the [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method to add the menu item as a toolbar button to the list of commands on the **Commands** page."},{"content":"Separators are ignored in this process.","pos":[12676,12715]},{"content":"If <ph id=\"ph1\">`bPopup`</ph> is <ph id=\"ph2\">`TRUE`</ph>, for each menu item that contains a submenu this method creates a <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept> object and inserts it into the list of commands by calling <ph id=\"ph3\">`AddButton`</ph>.","pos":[12722,12963],"source":"If `bPopup` is `TRUE`, for each menu item that contains a submenu this method creates a [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md) object and inserts it into the list of commands by calling `AddButton`."},{"content":"Otherwise menu items that contain submenus are not displayed in the list of commands.","pos":[12964,13049]},{"content":"In either case, when <ph id=\"ph1\">`AddMenuCommands`</ph> encounters a menu item with a submenu it calls itself recursively, passing a pointer to the submenu as the <ph id=\"ph2\">`pMenu`</ph> parameter and appending the label of the submenu to <ph id=\"ph3\">`lpszMenuPath`</ph>.","pos":[13050,13271],"source":" In either case, when `AddMenuCommands` encounters a menu item with a submenu it calls itself recursively, passing a pointer to the submenu as the `pMenu` parameter and appending the label of the submenu to `lpszMenuPath`."},{"pos":[13281,13376],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__addtoolbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::AddToolBar","linkify":"<a name=\"cmfctoolbarscustomizedialog__addtoolbar\"></a>  CMFCToolBarsCustomizeDialog::AddToolBar","source":"<a name=\"cmfctoolbarscustomizedialog__addtoolbar\"></a>  CMFCToolBarsCustomizeDialog::AddToolBar"},{"content":"Loads a toolbar from the resources.","pos":[13380,13415]},{"content":"Then, for each command in the menu calls the <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addbutton)</ept> method to insert a button in the list of commands on the <bpt id=\"p2\">**</bpt>Commands<ept id=\"p2\">**</ept> page under the specified category.","pos":[13416,13647],"source":" Then, for each command in the menu calls the [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method to insert a button in the list of commands on the **Commands** page under the specified category."},{"pos":[13812,13822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiCategoryId`</ph>","pos":[13826,13845],"source":"[in] `uiCategoryId`"},{"content":"Specifies the resource ID of the category to add the toolbar to.","pos":[13849,13913]},{"content":"[in] <ph id=\"ph1\">`uiToolbarResId`</ph>","pos":[13920,13941],"source":"[in] `uiToolbarResId`"},{"content":"Specifies the resource ID of a toolbar whose commands are inserted into the list of commands.","pos":[13945,14038]},{"content":"[in] <ph id=\"ph1\">`lpszCategory`</ph>","pos":[14045,14064],"source":"[in] `lpszCategory`"},{"content":"Specifies the name of the category to which to add the toolbar.","pos":[14068,14131]},{"pos":[14141,14153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14157,14211],"content":"<ph id=\"ph1\">`TRUE`</ph> if the method is successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the method is successful; otherwise `FALSE`."},{"pos":[14221,14228],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`AddToolBar`</ph> method in the <ph id=\"ph2\">`CMFCToolBarsCustomizeDialog`</ph> class.","pos":[14232,14345],"source":"The following example demonstrates how to use the `AddToolBar` method in the `CMFCToolBarsCustomizeDialog` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Word Pad sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[14346,14426],"source":" This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md)."},{"pos":[14433,14541],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_WordPad#11<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_WordPad#11](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_3.cpp)]"},{"pos":[14551,14558],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The control that is used to represent each command is a <bpt id=\"p1\">[</bpt>CMFCToolBarButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object.","pos":[14562,14699],"source":"The control that is used to represent each command is a [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object."},{"content":"After you add the toolbar, you can replace the button with a control of a derived type by calling <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::ReplaceButton<ept id=\"p1\">](#cmfctoolbarscustomizedialog__replacebutton)</ept>.","pos":[14700,14888],"source":" After you add the toolbar, you can replace the button with a control of a derived type by calling [CMFCToolBarsCustomizeDialog::ReplaceButton](#cmfctoolbarscustomizedialog__replacebutton)."},{"pos":[14898,15009],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__checktoolsvalidity\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::CheckToolsValidity","linkify":"<a name=\"cmfctoolbarscustomizedialog__checktoolsvalidity\"></a>  CMFCToolBarsCustomizeDialog::CheckToolsValidity","source":"<a name=\"cmfctoolbarscustomizedialog__checktoolsvalidity\"></a>  CMFCToolBarsCustomizeDialog::CheckToolsValidity"},{"content":"Verifies the validity of the list of user tools.","pos":[15013,15061]},{"pos":[15144,15154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lstTools`</ph>","pos":[15158,15173],"source":"[in] `lstTools`"},{"content":"The list of user-defined tools to check.","pos":[15177,15217]},{"pos":[15227,15239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns <ph id=\"ph1\">`TRUE`</ph> if the list of user-defined tools is valid; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[15243,15320],"source":"Returns `TRUE` if the list of user-defined tools is valid; otherwise `FALSE`."},{"content":"The default implementation always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[15321,15370],"source":" The default implementation always returns `TRUE`."},{"pos":[15380,15387],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15391,15603],"content":"The framework calls this method to verify the validity of objects that represent user-defined tools returned by <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::CheckToolsValidity<ept id=\"p1\">](#cmfctoolbarscustomizedialog__checktoolsvalidity)</ept>.","source":"The framework calls this method to verify the validity of objects that represent user-defined tools returned by [CMFCToolBarsCustomizeDialog::CheckToolsValidity](#cmfctoolbarscustomizedialog__checktoolsvalidity)."},{"content":"Override the <ph id=\"ph1\">`CheckToolsValidity`</ph> method in a class derived from <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog<ept id=\"p1\">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept> if you want to validate the user tools before the user closes the dialog box.","pos":[15610,15840],"source":"Override the `CheckToolsValidity` method in a class derived from [CMFCToolBarsCustomizeDialog](../../mfc/reference/cmfctoolbarscustomizedialog-class.md) if you want to validate the user tools before the user closes the dialog box."},{"content":"If this method returns <ph id=\"ph1\">`FALSE`</ph> when the user clicks either the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button in the upper-right corner of the dialog box or the button labeled <bpt id=\"p2\">**</bpt>Close<ept id=\"p2\">**</ept> in the lower-right corner of the dialog box, the dialog box displays the <bpt id=\"p3\">**</bpt>Tools<ept id=\"p3\">**</ept> tab instead of closing.","pos":[15841,16103],"source":" If this method returns `FALSE` when the user clicks either the **Close** button in the upper-right corner of the dialog box or the button labeled **Close** in the lower-right corner of the dialog box, the dialog box displays the **Tools** tab instead of closing."},{"content":"If this method returns <ph id=\"ph1\">`FALSE`</ph> when the user clicks a tab to navigate away from the <bpt id=\"p1\">**</bpt>Tools<ept id=\"p1\">**</ept> tab, the navigation does not occur.","pos":[16104,16233],"source":" If this method returns `FALSE` when the user clicks a tab to navigate away from the **Tools** tab, the navigation does not occur."},{"content":"You should display an appropriate message box to inform the user of the problem that caused validation to fail.","pos":[16234,16345]},{"pos":[16355,16484],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__cmfctoolbarscustomizedialog\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::CMFCToolBarsCustomizeDialog","linkify":"<a name=\"cmfctoolbarscustomizedialog__cmfctoolbarscustomizedialog\"></a>  CMFCToolBarsCustomizeDialog::CMFCToolBarsCustomizeDialog","source":"<a name=\"cmfctoolbarscustomizedialog__cmfctoolbarscustomizedialog\"></a>  CMFCToolBarsCustomizeDialog::CMFCToolBarsCustomizeDialog"},{"pos":[16488,16538],"content":"Constructs a <ph id=\"ph1\">`CMFCToolBarsCustomizeDialog`</ph> object.","source":"Constructs a `CMFCToolBarsCustomizeDialog` object."},{"pos":[16869,16879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWndParentFrame`</ph>","pos":[16883,16905],"source":"[in] `pWndParentFrame`"},{"content":"A pointer to the parent frame.","pos":[16909,16939]},{"content":"This parameter must not be <ph id=\"ph1\">`NULL`</ph>.","pos":[16940,16974],"source":" This parameter must not be `NULL`."},{"content":"[in] <ph id=\"ph1\">`bAutoSetFromMenus`</ph>","pos":[16981,17005],"source":"[in] `bAutoSetFromMenus`"},{"content":"A Boolean value that specifies whether to add the menu commands from all menus to the list of commands on the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> page.","pos":[17009,17137],"source":" A Boolean value that specifies whether to add the menu commands from all menus to the list of commands on the **Commands** page."},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the menu commands are added.","pos":[17138,17195],"source":" If this parameter is `TRUE`, the menu commands are added."},{"content":"Otherwise, the menu commands are not added.","pos":[17196,17239]},{"content":"[in] <ph id=\"ph1\">`uiFlags`</ph>","pos":[17246,17260],"source":"[in] `uiFlags`"},{"content":"A combination of flags that affect the behavior of the dialog box.","pos":[17264,17330]},{"content":"This parameter can be one or more of the following values:","pos":[17331,17389]},{"pos":[17675,17786],"content":"[in] `plistCustomPages`  \nA pointer to a list of `CRuntimeClass` objects that specify additional custom pages.","leadings":[""," "],"nodes":[{"content":"[in] <ph id=\"ph1\">`plistCustomPages`</ph>","pos":[0,23],"source":"[in] `plistCustomPages`"},{"content":"A pointer to a list of <ph id=\"ph1\">`CRuntimeClass`</ph> objects that specify additional custom pages.","pos":[26,110],"source":"A pointer to a list of `CRuntimeClass` objects that specify additional custom pages."}]},{"pos":[17796,17803],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`plistCustomPages`</ph> parameter refers to the list of <ph id=\"ph2\">`CRuntimeClass`</ph> objects that specify additional custom pages.","pos":[17807,17923],"source":"The `plistCustomPages` parameter refers to the list of `CRuntimeClass` objects that specify additional custom pages."},{"content":"The constructor adds more pages to the dialog box by using the <bpt id=\"p1\">[</bpt>CRuntimeClass::CreateObject<ept id=\"p1\">](../../mfc/reference/cruntimeclass-structure.md#cruntimeclass__createobject)</ept> method.","pos":[17924,18100],"source":" The constructor adds more pages to the dialog box by using the [CRuntimeClass::CreateObject](../../mfc/reference/cruntimeclass-structure.md#cruntimeclass__createobject) method."},{"content":"See the CustomPages sample for an example that adds more pages to the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","pos":[18101,18196],"source":" See the CustomPages sample for an example that adds more pages to the **Customize** dialog box."},{"pos":[18203,18371],"content":"For more information about the values that you can pass in the <ph id=\"ph1\">`uiFlags`</ph> parameter, see <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::GetFlags<ept id=\"p1\">](#cmfctoolbarscustomizedialog__getflags)</ept>.","source":"For more information about the values that you can pass in the `uiFlags` parameter, see [CMFCToolBarsCustomizeDialog::GetFlags](#cmfctoolbarscustomizedialog__getflags)."},{"pos":[18381,18388],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to construct an object of the <ph id=\"ph1\">`CMFCToolBarsCustomizeDialog`</ph> class.","pos":[18392,18497],"source":"The following example demonstrates how to construct an object of the `CMFCToolBarsCustomizeDialog` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Custom Pages sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[18498,18582],"source":" This code snippet is part of the [Custom Pages sample](../../visual-cpp-samples.md)."},{"pos":[18589,18700],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CustomPages#3<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CustomPages#3](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_4.cpp)]"},{"pos":[18710,18797],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::Create","linkify":"<a name=\"cmfctoolbarscustomizedialog__create\"></a>  CMFCToolBarsCustomizeDialog::Create","source":"<a name=\"cmfctoolbarscustomizedialog__create\"></a>  CMFCToolBarsCustomizeDialog::Create"},{"pos":[18801,18843],"content":"Displays the <bpt id=\"p1\">**</bpt>Customization<ept id=\"p1\">**</ept> dialog box.","source":"Displays the **Customization** dialog box."},{"pos":[18891,18903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18907,18993],"content":"<ph id=\"ph1\">`TRUE`</ph> if the customization property sheet is created successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the customization property sheet is created successfully; otherwise `FALSE`."},{"pos":[19003,19010],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19014,19081],"content":"Call the <ph id=\"ph1\">`Create`</ph> method only after you fully initialize the class.","source":"Call the `Create` method only after you fully initialize the class."},{"pos":[19091,19216],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__enableuserdefinedtoolbars\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::EnableUserDefinedToolbars","linkify":"<a name=\"cmfctoolbarscustomizedialog__enableuserdefinedtoolbars\"></a>  CMFCToolBarsCustomizeDialog::EnableUserDefinedToolbars","source":"<a name=\"cmfctoolbarscustomizedialog__enableuserdefinedtoolbars\"></a>  CMFCToolBarsCustomizeDialog::EnableUserDefinedToolbars"},{"pos":[19220,19300],"content":"Enables or disables creating new toolbars by using the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","source":"Enables or disables creating new toolbars by using the **Customize** dialog box."},{"pos":[19376,19386],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[19390,19404],"source":"[in] `bEnable`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to enable the user-defined toolbars; <ph id=\"ph2\">`FALSE`</ph> to disable the toolbars.","pos":[19407,19484],"source":" `TRUE` to enable the user-defined toolbars; `FALSE` to disable the toolbars."},{"pos":[19494,19501],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19505,19615],"content":"If <ph id=\"ph1\">`bEnable`</ph> is <ph id=\"ph2\">`TRUE`</ph>, the <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Rename<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Delete<ept id=\"p3\">**</ept> buttons are displayed on the <bpt id=\"p4\">**</bpt>Toolbars<ept id=\"p4\">**</ept> page.","source":"If `bEnable` is `TRUE`, the **New**, **Rename** and **Delete** buttons are displayed on the **Toolbars** page."},{"pos":[19622,19734],"content":"By default, or if <ph id=\"ph1\">`bEnable`</ph> is <ph id=\"ph2\">`FALSE`</ph>, these buttons are not displayed and the user cannot define new toolbars.","source":"By default, or if `bEnable` is `FALSE`, these buttons are not displayed and the user cannot define new toolbars."},{"pos":[19744,19857],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__fillallcommandslist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::FillAllCommandsList","linkify":"<a name=\"cmfctoolbarscustomizedialog__fillallcommandslist\"></a>  CMFCToolBarsCustomizeDialog::FillAllCommandsList","source":"<a name=\"cmfctoolbarscustomizedialog__fillallcommandslist\"></a>  CMFCToolBarsCustomizeDialog::FillAllCommandsList"},{"pos":[19861,19953],"content":"Populates the provided <ph id=\"ph1\">`CListBox`</ph> object with the commands in the <bpt id=\"p1\">**</bpt>All Commands<ept id=\"p1\">**</ept> category.","source":"Populates the provided `CListBox` object with the commands in the **All Commands** category."},{"pos":[20050,20060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`wndListOfCommands`</ph>","pos":[20064,20089],"source":"[out] `wndListOfCommands`"},{"content":"A reference to the <ph id=\"ph1\">`CListBox`</ph> object to populate.","pos":[20093,20142],"source":" A reference to the `CListBox` object to populate."},{"pos":[20152,20159],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">**</bpt>All Commands<ept id=\"p1\">**</ept> category contains the commands of all categories.","pos":[20163,20233],"source":"The **All Commands** category contains the commands of all categories."},{"content":"The <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addbutton)</ept> method adds the command that is associated with the provided button to the <bpt id=\"p2\">**</bpt>All Commands<ept id=\"p2\">**</ept> category for you.","pos":[20234,20429],"source":" The [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method adds the command that is associated with the provided button to the **All Commands** category for you."},{"pos":[20436,20574],"content":"This method clears the contents of the provided <ph id=\"ph1\">`CListBox`</ph> object before populating it with the commands in the <bpt id=\"p1\">**</bpt>All Commands<ept id=\"p1\">**</ept> category.","source":"This method clears the contents of the provided `CListBox` object before populating it with the commands in the **All Commands** category."},{"pos":[20581,20676],"content":"The <ph id=\"ph1\">`CMFCMousePropertyPage`</ph> class uses this method to populate the double-click event list box.","source":"The `CMFCMousePropertyPage` class uses this method to populate the double-click event list box."},{"pos":[20686,20805],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__fillcategoriescombobox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::FillCategoriesComboBox","linkify":"<a name=\"cmfctoolbarscustomizedialog__fillcategoriescombobox\"></a>  CMFCToolBarsCustomizeDialog::FillCategoriesComboBox","source":"<a name=\"cmfctoolbarscustomizedialog__fillcategoriescombobox\"></a>  CMFCToolBarsCustomizeDialog::FillCategoriesComboBox"},{"pos":[20809,20922],"content":"Populates the provided <ph id=\"ph1\">`CComboBox`</ph> object with the name of each command category in the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","source":"Populates the provided `CComboBox` object with the name of each command category in the **Customize** dialog box."},{"pos":[21043,21053],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`wndCategory`</ph>","pos":[21057,21076],"source":"[out] `wndCategory`"},{"content":"A reference to the <ph id=\"ph1\">`CComboBox`</ph> object to populate.","pos":[21080,21130],"source":" A reference to the `CComboBox` object to populate."},{"content":"[in] <ph id=\"ph1\">`bAddEmpty`</ph>","pos":[21137,21153],"source":"[in] `bAddEmpty`"},{"content":"A Boolean value that specifies whether to add categories to the combo box that do not have commands.","pos":[21157,21257]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, empty categories are added to the combo box.","pos":[21258,21331],"source":" If this parameter is `TRUE`, empty categories are added to the combo box."},{"content":"Otherwise, empty categories are not added.","pos":[21332,21374]},{"pos":[21384,21391],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21395,21588],"content":"This method is like the <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::FillCategoriesListBox<ept id=\"p1\">](#cmfctoolbarscustomizedialog__fillcategorieslistbox)</ept> method except that this method works with a <ph id=\"ph1\">`CComboBox`</ph> object.","source":"This method is like the [CMFCToolBarsCustomizeDialog::FillCategoriesListBox](#cmfctoolbarscustomizedialog__fillcategorieslistbox) method except that this method works with a `CComboBox` object."},{"content":"This method does not clear the contents of the <ph id=\"ph1\">`CComboBox`</ph> object before populating it.","pos":[21595,21682],"source":"This method does not clear the contents of the `CComboBox` object before populating it."},{"content":"It guarantees that the <bpt id=\"p1\">**</bpt>All Commands<ept id=\"p1\">**</ept> category is the final item in the combo box.","pos":[21683,21767],"source":" It guarantees that the **All Commands** category is the final item in the combo box."},{"content":"You can add new command categories by using the <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addbutton)</ept> method.","pos":[21774,21911],"source":"You can add new command categories by using the [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method."},{"content":"You can change the name of an existing category by using the <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::RenameCategory<ept id=\"p1\">](#cmfctoolbarscustomizedialog__renamecategory)</ept> method.","pos":[21912,22072],"source":" You can change the name of an existing category by using the [CMFCToolBarsCustomizeDialog::RenameCategory](#cmfctoolbarscustomizedialog__renamecategory) method."},{"pos":[22079,22197],"content":"The <ph id=\"ph1\">`CMFCToolBarsKeyboardPropertyPage`</ph> and <ph id=\"ph2\">`CMFCKeyMapDialog`</ph> classes use this method to categorize keyboard mappings.","source":"The `CMFCToolBarsKeyboardPropertyPage` and `CMFCKeyMapDialog` classes use this method to categorize keyboard mappings."},{"pos":[22207,22324],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__fillcategorieslistbox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::FillCategoriesListBox","linkify":"<a name=\"cmfctoolbarscustomizedialog__fillcategorieslistbox\"></a>  CMFCToolBarsCustomizeDialog::FillCategoriesListBox","source":"<a name=\"cmfctoolbarscustomizedialog__fillcategorieslistbox\"></a>  CMFCToolBarsCustomizeDialog::FillCategoriesListBox"},{"pos":[22328,22440],"content":"Populates the provided <ph id=\"ph1\">`CListBox`</ph> object with the name of each command category in the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","source":"Populates the provided `CListBox` object with the name of each command category in the **Customize** dialog box."},{"pos":[22559,22569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`wndCategory`</ph>","pos":[22573,22592],"source":"[out] `wndCategory`"},{"content":"A reference to the <ph id=\"ph1\">`CListBox`</ph> object to populate.","pos":[22596,22645],"source":" A reference to the `CListBox` object to populate."},{"content":"[in] <ph id=\"ph1\">`bAddEmpty`</ph>","pos":[22652,22668],"source":"[in] `bAddEmpty`"},{"content":"A Boolean value that specifies whether to add categories to the list box that do not have commands.","pos":[22672,22771]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, empty categories are added to the list box.","pos":[22772,22844],"source":" If this parameter is `TRUE`, empty categories are added to the list box."},{"content":"Otherwise, empty categories are not added.","pos":[22845,22887]},{"pos":[22897,22904],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22908,23102],"content":"This method is like the <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::FillCategoriesComboBox<ept id=\"p1\">](#cmfctoolbarscustomizedialog__fillcategoriescombobox)</ept> method except that this method works with a <ph id=\"ph1\">`CListBox`</ph> object.","source":"This method is like the [CMFCToolBarsCustomizeDialog::FillCategoriesComboBox](#cmfctoolbarscustomizedialog__fillcategoriescombobox) method except that this method works with a `CListBox` object."},{"content":"This method does not clear the contents of the <ph id=\"ph1\">`CListBox`</ph> object before populating it.","pos":[23109,23195],"source":"This method does not clear the contents of the `CListBox` object before populating it."},{"content":"It guarantees that the <bpt id=\"p1\">**</bpt>All Commands<ept id=\"p1\">**</ept> category is the final item in the list box.","pos":[23196,23279],"source":" It guarantees that the **All Commands** category is the final item in the list box."},{"content":"You can add new command categories by using the <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addbutton)</ept> method.","pos":[23286,23423],"source":"You can add new command categories by using the [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method."},{"content":"You can change the name of an existing category by using the <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::RenameCategory<ept id=\"p1\">](#cmfctoolbarscustomizedialog__renamecategory)</ept> method.","pos":[23424,23584],"source":" You can change the name of an existing category by using the [CMFCToolBarsCustomizeDialog::RenameCategory](#cmfctoolbarscustomizedialog__renamecategory) method."},{"pos":[23591,23728],"content":"The <ph id=\"ph1\">`CMFCToolBarsCommandsPropertyPage`</ph> class uses this method to show the list of commands that is associated with each command category.","source":"The `CMFCToolBarsCommandsPropertyPage` class uses this method to show the list of commands that is associated with each command category."},{"pos":[23738,23841],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__getcommandname\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::GetCommandName","linkify":"<a name=\"cmfctoolbarscustomizedialog__getcommandname\"></a>  CMFCToolBarsCustomizeDialog::GetCommandName","source":"<a name=\"cmfctoolbarscustomizedialog__getcommandname\"></a>  CMFCToolBarsCustomizeDialog::GetCommandName"},{"content":"Retrieves the name that is associated with the given command ID.","pos":[23845,23909]},{"pos":[23979,23989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiCmd`</ph>","pos":[23993,24005],"source":"[in] `uiCmd`"},{"content":"The ID of the command to retrieve.","pos":[24009,24043]},{"pos":[24053,24065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24069,24164],"content":"The name that is associated with the given command ID, or <ph id=\"ph1\">`NULL`</ph> if the command does not exist.","source":"The name that is associated with the given command ID, or `NULL` if the command does not exist."},{"pos":[24174,24285],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__getcountincategory\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::GetCountInCategory","linkify":"<a name=\"cmfctoolbarscustomizedialog__getcountincategory\"></a>  CMFCToolBarsCustomizeDialog::GetCountInCategory","source":"<a name=\"cmfctoolbarscustomizedialog__getcountincategory\"></a>  CMFCToolBarsCustomizeDialog::GetCountInCategory"},{"content":"Retrieves the number of items in the provided list that have a given text label.","pos":[24289,24369]},{"pos":[24488,24498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszItemName`</ph>","pos":[24502,24521],"source":"[in] `lpszItemName`"},{"content":"The text label to match.","pos":[24525,24549]},{"content":"[in] <ph id=\"ph1\">`lstCommands`</ph>","pos":[24556,24574],"source":"[in] `lstCommands`"},{"content":"A reference to a list that contains <ph id=\"ph1\">`CMFCToolBarButton`</ph> objects.","pos":[24578,24642],"source":" A reference to a list that contains `CMFCToolBarButton` objects."},{"pos":[24652,24664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24668,24748],"content":"The number of items in the provided list whose text label equals <ph id=\"ph1\">`lpszItemName`</ph>.","source":"The number of items in the provided list whose text label equals `lpszItemName`."},{"pos":[24758,24765],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each element in the provided object list must be of type <ph id=\"ph1\">`CMFCToolBarButton`</ph>.","pos":[24769,24846],"source":"Each element in the provided object list must be of type `CMFCToolBarButton`."},{"content":"This method compares <ph id=\"ph1\">`lpszItemName`</ph> with the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_strText<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__m_strtext)</ept> data member.","pos":[24847,25012],"source":" This method compares `lpszItemName` with the [CMFCToolBarButton::m_strText](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__m_strtext) data member."},{"pos":[25022,25113],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__getflags\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::GetFlags","linkify":"<a name=\"cmfctoolbarscustomizedialog__getflags\"></a>  CMFCToolBarsCustomizeDialog::GetFlags","source":"<a name=\"cmfctoolbarscustomizedialog__getflags\"></a>  CMFCToolBarsCustomizeDialog::GetFlags"},{"content":"Retrieves the set of flags that affect the behavior of the dialog box.","pos":[25117,25187]},{"pos":[25238,25250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The set of flags that affect the behavior of the dialog box.","pos":[25254,25314]},{"pos":[25324,25331],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method retrieves the value of the <ph id=\"ph1\">`uiFlags`</ph> parameter that is passed to the constructor.","pos":[25335,25428],"source":"This method retrieves the value of the `uiFlags` parameter that is passed to the constructor."},{"content":"The return value can be one or more of the following values:","pos":[25429,25489]},{"content":"Allows the user to specify the shadow appearance of the menu.","pos":[25528,25589]},{"content":"Allows the user to specify whether text labels are shown underneath the toolbar button images.","pos":[25627,25721]},{"content":"Allows the user to specify the menu animation style.","pos":[25763,25815]},{"content":"Removes the help button from the customization dialog box.","pos":[25848,25906]},{"content":"Enables the <ph id=\"ph1\">`WS_EX_CONTEXTHELP`</ph> visual style.","pos":[25945,25990],"source":" Enables the `WS_EX_CONTEXTHELP` visual style."},{"content":"Removes the <bpt id=\"p1\">**</bpt>Tools<ept id=\"p1\">**</ept> page from the customization dialog box.","pos":[26024,26085],"source":" Removes the **Tools** page from the customization dialog box."},{"content":"This flag is valid if your application uses the <ph id=\"ph1\">`CUserToolsManager`</ph> class.","pos":[26086,26160],"source":" This flag is valid if your application uses the `CUserToolsManager` class."},{"content":"Allows button captions to contain the ampersand ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;</ph><ept id=\"p1\">**</ept>) character.","pos":[26197,26264],"source":" Allows button captions to contain the ampersand ( **&**) character."},{"content":"Removes the <bpt id=\"p1\">**</bpt>Large Icons<ept id=\"p1\">**</ept> option from the customization dialog box.","pos":[26305,26374],"source":" Removes the **Large Icons** option from the customization dialog box."},{"pos":[26381,26522],"content":"For more information about the <ph id=\"ph1\">`WS_EX_CONTEXTHELP`</ph> visual style, see <bpt id=\"p1\">[</bpt>Extended Window Styles<ept id=\"p1\">](../../mfc/reference/extended-window-styles.md)</ept>.","source":"For more information about the `WS_EX_CONTEXTHELP` visual style, see [Extended Window Styles](../../mfc/reference/extended-window-styles.md)."},{"pos":[26532,26641],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__onafterchangetool\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::OnAfterChangeTool","linkify":"<a name=\"cmfctoolbarscustomizedialog__onafterchangetool\"></a>  CMFCToolBarsCustomizeDialog::OnAfterChangeTool","source":"<a name=\"cmfctoolbarscustomizedialog__onafterchangetool\"></a>  CMFCToolBarsCustomizeDialog::OnAfterChangeTool"},{"content":"Responds to a change in a user tool immediately after it occurs.","pos":[26645,26709]},{"pos":[26787,26797],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in, out] <ph id=\"ph1\">`pSelTool`</ph>","pos":[26801,26821],"source":"[in, out] `pSelTool`"},{"content":"A pointer to the user tool object that has been changed.","pos":[26825,26881]},{"pos":[26891,26898],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework when a user changes the properties of a user-defined tool.","pos":[26902,26999]},{"content":"The default implementation does nothing.","pos":[27000,27040]},{"content":"Override this method in a class derived from <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog<ept id=\"p1\">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept> to perform processing after a change to a user tool occurs.","pos":[27041,27233],"source":" Override this method in a class derived from [CMFCToolBarsCustomizeDialog](../../mfc/reference/cmfctoolbarscustomizedialog-class.md) to perform processing after a change to a user tool occurs."},{"pos":[27243,27340],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__onassignkey\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::OnAssignKey","linkify":"<a name=\"cmfctoolbarscustomizedialog__onassignkey\"></a>  CMFCToolBarsCustomizeDialog::OnAssignKey","source":"<a name=\"cmfctoolbarscustomizedialog__onassignkey\"></a>  CMFCToolBarsCustomizeDialog::OnAssignKey"},{"content":"Validates keyboard shortcuts as a user defines them.","pos":[27344,27396]},{"pos":[27462,27472],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in, out] <ph id=\"ph1\">`pAccel`</ph>","pos":[27476,27494],"source":"[in, out] `pAccel`"},{"content":"Pointer to the proposed keyboard assigment that is expressed as an <bpt id=\"p1\">[</bpt>ACCEL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646340)</ept> struct.","pos":[27498,27640],"source":" Pointer to the proposed keyboard assigment that is expressed as an [ACCEL](http://msdn.microsoft.com/library/windows/desktop/ms646340) struct."},{"pos":[27650,27662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if the key can be assigned, or <ph id=\"ph2\">`FALSE`</ph> if the key cannot be assigned.","pos":[27666,27742],"source":"`TRUE` if the key can be assigned, or `FALSE` if the key cannot be assigned."},{"content":"The default implementation always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[27743,27792],"source":" The default implementation always returns `TRUE`."},{"pos":[27802,27809],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to perform extra processing when a user assigns a new keyboard shortcut, or to validate keyboard shortcuts as the user defines them.","pos":[27813,27985]},{"content":"To prevent a shortcut from being assigned, return <ph id=\"ph1\">`FALSE`</ph>.","pos":[27986,28044],"source":" To prevent a shortcut from being assigned, return `FALSE`."},{"content":"You should also display a message box or otherwise inform the user of the reason why the keyboard shortcut was rejected.","pos":[28045,28165]},{"pos":[28175,28286],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__onbeforechangetool\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::OnBeforeChangeTool","linkify":"<a name=\"cmfctoolbarscustomizedialog__onbeforechangetool\"></a>  CMFCToolBarsCustomizeDialog::OnBeforeChangeTool","source":"<a name=\"cmfctoolbarscustomizedialog__onbeforechangetool\"></a>  CMFCToolBarsCustomizeDialog::OnBeforeChangeTool"},{"content":"Performs custom processing when a change to a user tool when the user is about to apply a change.","pos":[28290,28387]},{"pos":[28466,28476],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in, out] <ph id=\"ph1\">`pSelTool`</ph>","pos":[28480,28500],"source":"[in, out] `pSelTool`"},{"content":"A pointer to the user tool object that is about to be replaced.","pos":[28504,28567]},{"pos":[28577,28584],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework when the properties of a user-defined tool is about to change.","pos":[28588,28689]},{"content":"The default implementation does nothing.","pos":[28690,28730]},{"content":"Override the <ph id=\"ph1\">`OnBeforeChangeTool`</ph> method in a class derived from <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog<ept id=\"p1\">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept> if you want to perform processing before a change to a user tool occurs, such as releasing resources that <ph id=\"ph2\">`pSelTool`</ph> uses.","pos":[28731,29006],"source":" Override the `OnBeforeChangeTool` method in a class derived from [CMFCToolBarsCustomizeDialog](../../mfc/reference/cmfctoolbarscustomizedialog-class.md) if you want to perform processing before a change to a user tool occurs, such as releasing resources that `pSelTool` uses."},{"pos":[29016,29135],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__onedittoolbarmenuimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::OnEditToolbarMenuImage","linkify":"<a name=\"cmfctoolbarscustomizedialog__onedittoolbarmenuimage\"></a>  CMFCToolBarsCustomizeDialog::OnEditToolbarMenuImage","source":"<a name=\"cmfctoolbarscustomizedialog__onedittoolbarmenuimage\"></a>  CMFCToolBarsCustomizeDialog::OnEditToolbarMenuImage"},{"content":"Starts an image editor so that a user can customize a toolbar button or menu item icon.","pos":[29139,29226]},{"pos":[29359,29369],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWndParent`</ph>","pos":[29373,29390],"source":"[in] `pWndParent`"},{"content":"A pointer to the parent window.","pos":[29394,29425]},{"content":"[in] <ph id=\"ph1\">`bitmap`</ph>","pos":[29432,29445],"source":"[in] `bitmap`"},{"content":"A reference to a bitmap object to be edited.","pos":[29449,29493]},{"content":"[in] <ph id=\"ph1\">`nBitsPerPixel`</ph>","pos":[29500,29520],"source":"[in] `nBitsPerPixel`"},{"content":"Bitmap color resolution, in bits per pixel.","pos":[29524,29567]},{"pos":[29577,29589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if a change is being committed; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[29593,29650],"source":"`TRUE` if a change is being committed; otherwise `FALSE`."},{"content":"The default implementation displays a dialog box and returns <ph id=\"ph1\">`TRUE`</ph> if the user clicks <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>, or <ph id=\"ph2\">`FALSE`</ph> if the user clicks <bpt id=\"p2\">**</bpt>Cancel<ept id=\"p2\">**</ept> or the <bpt id=\"p3\">**</bpt>Close<ept id=\"p3\">**</ept> button.","pos":[29651,29811],"source":" The default implementation displays a dialog box and returns `TRUE` if the user clicks **OK**, or `FALSE` if the user clicks **Cancel** or the **Close** button."},{"pos":[29821,29828],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework when the user runs the image editor.","pos":[29832,29907]},{"content":"The default implementation displays <bpt id=\"p1\">[</bpt>CMFCImageEditorDialog Class<ept id=\"p1\">](../../mfc/reference/cmfcimageeditordialog-class.md)</ept> dialog box.","pos":[29908,30037],"source":" The default implementation displays [CMFCImageEditorDialog Class](../../mfc/reference/cmfcimageeditordialog-class.md) dialog box."},{"content":"Override <ph id=\"ph1\">`OnEditToolbarMenuImage`</ph> in a derived class to use a custom image editor.","pos":[30038,30120],"source":" Override `OnEditToolbarMenuImage` in a derived class to use a custom image editor."},{"pos":[30130,30229],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__oninitdialog\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::OnInitDialog","linkify":"<a name=\"cmfctoolbarscustomizedialog__oninitdialog\"></a>  CMFCToolBarsCustomizeDialog::OnInitDialog","source":"<a name=\"cmfctoolbarscustomizedialog__oninitdialog\"></a>  CMFCToolBarsCustomizeDialog::OnInitDialog"},{"content":"Overrides to augment property sheet initialization.","pos":[30233,30284]},{"pos":[30338,30350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30354,30492],"content":"The result of calling the <bpt id=\"p1\">[</bpt>CPropertySheet::OnInitDialog<ept id=\"p1\">](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog)</ept> method.","source":"The result of calling the [CPropertySheet::OnInitDialog](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog) method."},{"pos":[30502,30509],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30513,30848],"content":"This method extends the base class implementation, <bpt id=\"p1\">[</bpt>CPropertySheet::OnInitDialog<ept id=\"p1\">](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog)</ept>, by displaying the <bpt id=\"p2\">**</bpt>Close<ept id=\"p2\">**</ept> button, by making sure that the dialog box fits the current screen size, and by moving the <bpt id=\"p3\">**</bpt>Help<ept id=\"p3\">**</ept> button to the lower-left corner of the dialog box.","source":"This method extends the base class implementation, [CPropertySheet::OnInitDialog](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog), by displaying the **Close** button, by making sure that the dialog box fits the current screen size, and by moving the **Help** button to the lower-left corner of the dialog box."},{"pos":[30858,30963],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__oninittoolspage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::OnInitToolsPage","linkify":"<a name=\"cmfctoolbarscustomizedialog__oninittoolspage\"></a>  CMFCToolBarsCustomizeDialog::OnInitToolsPage","source":"<a name=\"cmfctoolbarscustomizedialog__oninittoolspage\"></a>  CMFCToolBarsCustomizeDialog::OnInitToolsPage"},{"pos":[30967,31062],"content":"Handles the notification from the framework that the <bpt id=\"p1\">**</bpt>Tools<ept id=\"p1\">**</ept> page is about to be initialized.","source":"Handles the notification from the framework that the **Tools** page is about to be initialized."},{"pos":[31119,31126],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation does nothing.","pos":[31130,31170]},{"content":"Override this method in a derived class to process this notification.","pos":[31171,31240]},{"pos":[31250,31351],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__postncdestroy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::PostNcDestroy","linkify":"<a name=\"cmfctoolbarscustomizedialog__postncdestroy\"></a>  CMFCToolBarsCustomizeDialog::PostNcDestroy","source":"<a name=\"cmfctoolbarscustomizedialog__postncdestroy\"></a>  CMFCToolBarsCustomizeDialog::PostNcDestroy"},{"content":"Called by the framework after the window has been destroyed.","pos":[31355,31415]},{"pos":[31470,31477],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31481,31615],"content":"This method extends the base class implementation, <ph id=\"ph1\">`CPropertySheet::PostNcDestroy`</ph>, by restoring the application to the previous mode.","source":"This method extends the base class implementation, `CPropertySheet::PostNcDestroy`, by restoring the application to the previous mode."},{"pos":[31622,31792],"content":"The <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::Create<ept id=\"p1\">](#cmfctoolbarscustomizedialog__create)</ept> method puts the application in a special mode that limits the user to customization tasks.","source":"The [CMFCToolBarsCustomizeDialog::Create](#cmfctoolbarscustomizedialog__create) method puts the application in a special mode that limits the user to customization tasks."},{"pos":[31802,31901],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__removebutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::RemoveButton","linkify":"<a name=\"cmfctoolbarscustomizedialog__removebutton\"></a>  CMFCToolBarsCustomizeDialog::RemoveButton","source":"<a name=\"cmfctoolbarscustomizedialog__removebutton\"></a>  CMFCToolBarsCustomizeDialog::RemoveButton"},{"content":"Removes the button with the specified command ID from the specified category, or from all categories.","pos":[31905,32006]},{"pos":[32159,32169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiCategoryId`</ph>","pos":[32173,32192],"source":"[in] `uiCategoryId`"},{"content":"Specifies the category ID from which to remove the button.","pos":[32196,32254]},{"content":"[in] <ph id=\"ph1\">`uiCmdId`</ph>","pos":[32261,32275],"source":"[in] `uiCmdId`"},{"content":"Specifies the command ID of the button.","pos":[32279,32318]},{"content":"[in] <ph id=\"ph1\">`lpszCategory`</ph>","pos":[32325,32344],"source":"[in] `lpszCategory`"},{"content":"Specifies the name of the category from which to remove the button.","pos":[32348,32415]},{"pos":[32425,32437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the removed button, or -1 if the specified command ID was not found in the specified category.","pos":[32441,32559]},{"content":"If <ph id=\"ph1\">`uiCategoryId`</ph> is -1, the return value is 0.","pos":[32560,32607],"source":" If `uiCategoryId` is -1, the return value is 0."},{"pos":[32617,32624],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32628,32736],"content":"To remove a button from all categories, call the first overload of this method and set <ph id=\"ph1\">`uiCategoryId`</ph> to -1.","source":"To remove a button from all categories, call the first overload of this method and set `uiCategoryId` to -1."},{"pos":[32746,32849],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__renamecategory\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::RenameCategory","linkify":"<a name=\"cmfctoolbarscustomizedialog__renamecategory\"></a>  CMFCToolBarsCustomizeDialog::RenameCategory","source":"<a name=\"cmfctoolbarscustomizedialog__renamecategory\"></a>  CMFCToolBarsCustomizeDialog::RenameCategory"},{"pos":[32853,32927],"content":"Renames a category in the list box of categories on the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> page.","source":"Renames a category in the list box of categories on the **Commands** page."},{"pos":[33034,33044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszCategoryOld`</ph>","pos":[33048,33070],"source":"[in] `lpszCategoryOld`"},{"content":"The category name to change.","pos":[33074,33102]},{"content":"[in] <ph id=\"ph1\">`lpszCategoryNew`</ph>","pos":[33109,33131],"source":"[in] `lpszCategoryNew`"},{"content":"The new category name.","pos":[33135,33157]},{"pos":[33167,33179],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33183,33238],"content":"<ph id=\"ph1\">`TRUE`</ph> if the method was successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the method was successful; otherwise `FALSE`."},{"pos":[33248,33255],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The category name must be unique.","pos":[33259,33292]},{"pos":[33302,33403],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__replacebutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::ReplaceButton","linkify":"<a name=\"cmfctoolbarscustomizedialog__replacebutton\"></a>  CMFCToolBarsCustomizeDialog::ReplaceButton","source":"<a name=\"cmfctoolbarscustomizedialog__replacebutton\"></a>  CMFCToolBarsCustomizeDialog::ReplaceButton"},{"pos":[33407,33486],"content":"Replaces a toolbar button in the list box of commands on the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> page.","source":"Replaces a toolbar button in the list box of commands on the **Commands** page."},{"pos":[33587,33597],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiCmd`</ph>","pos":[33601,33613],"source":"[in] `uiCmd`"},{"content":"Specifies the command of the button to be replaced.","pos":[33617,33668]},{"content":"[in] <ph id=\"ph1\">`button`</ph>","pos":[33675,33688],"source":"[in] `button`"},{"content":"A <ph id=\"ph1\">`const`</ph> reference to the toolbar button object that replaces the old button.","pos":[33692,33770],"source":" A `const` reference to the toolbar button object that replaces the old button."},{"pos":[33780,33787],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::AddMenu<ept id=\"p1\">](#cmfctoolbarscustomizedialog__addmenu)</ept>, <bpt id=\"p2\">[</bpt>CMFCToolBarsCustomizeDialog::AddMenuCommands<ept id=\"p2\">](#cmfctoolbarscustomizedialog__addmenucommands)</ept>, or <bpt id=\"p3\">[</bpt>CMFCToolBarsCustomizeDialog::AddToolBar<ept id=\"p3\">](#cmfctoolbarscustomizedialog__addtoolbar)</ept> adds a command to the <bpt id=\"p4\">**</bpt>Commands<ept id=\"p4\">**</ept> page, that command is in the form of a <bpt id=\"p5\">[</bpt>CMFCToolBarButton Class<ept id=\"p5\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object (or a <bpt id=\"p6\">[</bpt>CMFCToolBarMenuButton Class<ept id=\"p6\">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept> object for a menu item that contains a submenu added by <ph id=\"ph1\">`AddMenuCommands`</ph>).","pos":[33791,34375],"source":"When [CMFCToolBarsCustomizeDialog::AddMenu](#cmfctoolbarscustomizedialog__addmenu), [CMFCToolBarsCustomizeDialog::AddMenuCommands](#cmfctoolbarscustomizedialog__addmenucommands), or [CMFCToolBarsCustomizeDialog::AddToolBar](#cmfctoolbarscustomizedialog__addtoolbar) adds a command to the **Commands** page, that command is in the form of a [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object (or a [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md) object for a menu item that contains a submenu added by `AddMenuCommands`)."},{"content":"The framework also calls these three methods to add commands automatically.","pos":[34376,34451]},{"content":"If you want a command to be represented by a derived type instead, call <ph id=\"ph1\">`ReplaceButton`</ph> and pass in a button of the derived type.","pos":[34452,34581],"source":" If you want a command to be represented by a derived type instead, call `ReplaceButton` and pass in a button of the derived type."},{"pos":[34591,34598],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`ReplaceButton`</ph> method in the <ph id=\"ph2\">`CMFCToolBarsCustomizeDialog`</ph> class.","pos":[34602,34718],"source":"The following example demonstrates how to use the `ReplaceButton` method in the `CMFCToolBarsCustomizeDialog` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Visual Studio Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[34719,34809],"source":" This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md)."},{"pos":[34816,34923],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_VisualStudioDemo#34<ept id=\"p2\">](../../mfc/codesnippet/cpp/cmfctoolbarscustomizedialog-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_VisualStudioDemo#34](../../mfc/codesnippet/cpp/cmfctoolbarscustomizedialog-class_5.cpp)]"},{"pos":[34933,35038],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarscustomizedialog__setusercategory\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarsCustomizeDialog::SetUserCategory","linkify":"<a name=\"cmfctoolbarscustomizedialog__setusercategory\"></a>  CMFCToolBarsCustomizeDialog::SetUserCategory","source":"<a name=\"cmfctoolbarscustomizedialog__setusercategory\"></a>  CMFCToolBarsCustomizeDialog::SetUserCategory"},{"content":"Specifies which category in the list of categories on the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> page is the user category.","pos":[35042,35139],"source":"Specifies which category in the list of categories on the **Commands** page is the user category."},{"content":"You must call this function before you call <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::Create<ept id=\"p1\">](#cmfctoolbarscustomizedialog__create)</ept>.","pos":[35140,35260],"source":" You must call this function before you call [CMFCToolBarsCustomizeDialog::Create](#cmfctoolbarscustomizedialog__create)."},{"pos":[35329,35339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszCategory`</ph>","pos":[35343,35362],"source":"[in] `lpszCategory`"},{"content":"The name of the category.","pos":[35366,35391]},{"pos":[35401,35413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35417,35471],"content":"<ph id=\"ph1\">`TRUE`</ph> if the method is successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the method is successful; otherwise `FALSE`."},{"pos":[35481,35488],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user category setting is not currently used by the framework.","pos":[35492,35557]},{"pos":[35566,35574],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[35578,35626],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[35629,35676],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CPropertySheet Class<ept id=\"p1\">](../../mfc/reference/cpropertysheet-class.md)</ept>","pos":[35679,35747],"source":" [CPropertySheet Class](../../mfc/reference/cpropertysheet-class.md)"}],"content":"---\ntitle: \"CMFCToolBarsCustomizeDialog Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCToolBarsCustomizeDialog\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCToolBarsCustomizeDialog class\"\nms.assetid: 78e2cddd-4f13-4097-afc3-1ad646a113f1\ncaps.latest.revision: 28\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCToolBarsCustomizeDialog Class\nA modeless tab dialog box ( [CPropertySheet Class](../../mfc/reference/cpropertysheet-class.md)) that enables the user to customize the toolbars, menus, keyboard shortcuts, user-defined tools, and visual style in an application. Typically, the user accesses this dialog box by selecting **Customize** from the **Tools** menu.  \n  \n The **Customize** dialog box has six tabs: **Commands**, **Toolbars**, **Tools**, **Keyboard**, **Menu**, and **Options**.  \n  \n## Syntax  \n  \n```  \nclass CMFCToolBarsCustomizeDialog : public CPropertySheet  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarsCustomizeDialog::CMFCToolBarsCustomizeDialog](#cmfctoolbarscustomizedialog__cmfctoolbarscustomizedialog)|Constructs a `CMFCToolBarsCustomizeDialog` object.|  \n|`CMFCToolBarsCustomizeDialog::~CMFCToolBarsCustomizeDialog`|Destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton)|Inserts a toolbar button into the list of commands on the **Commands** page|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::AddMenu](#cmfctoolbarscustomizedialog__addmenu)|Loads a menu from the resources and calls [CMFCToolBarsCustomizeDialog::AddMenuCommands](#cmfctoolbarscustomizedialog__addmenucommands) to add that menu to the list of commands on the **Commands** page.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::AddMenuCommands](#cmfctoolbarscustomizedialog__addmenucommands)|Loads a menu from the resources and calls [CMFCToolBarsCustomizeDialog::AddMenuCommands](#cmfctoolbarscustomizedialog__addmenucommands) to add that menu to the list of commands on the **Commands** page.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::AddToolBar](#cmfctoolbarscustomizedialog__addtoolbar)|Loads a toolbar from the resources. Then, for each command in the menu calls the [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method to insert a button in the list of commands on the **Commands** page under the specified category.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::Create](#cmfctoolbarscustomizedialog__create)|Displays the **Customization** dialog box.|  \n|`CMFCToolBarsCustomizeDialog::EnableTools`|Reserved for future use.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::EnableUserDefinedToolbars](#cmfctoolbarscustomizedialog__enableuserdefinedtoolbars)|Enables or disables creating new toolbars by using the **Customize** dialog box.|  \n|[CMFCToolBarsCustomizeDialog::FillAllCommandsList](#cmfctoolbarscustomizedialog__fillallcommandslist)|Populates the provided `CListBox` object with the commands in the **All Commands** category.|  \n|[CMFCToolBarsCustomizeDialog::FillCategoriesComboBox](#cmfctoolbarscustomizedialog__fillcategoriescombobox)|Populates the provided `CComboBox` object with the name of each command category in the **Customize** dialog box.|  \n|[CMFCToolBarsCustomizeDialog::FillCategoriesListBox](#cmfctoolbarscustomizedialog__fillcategorieslistbox)|Populates the provided `CListBox` object with the name of each command category in the **Customize** dialog box.|  \n|[CMFCToolBarsCustomizeDialog::GetCommandName](#cmfctoolbarscustomizedialog__getcommandname)|Retrieves the name that is associated with the given command ID.|  \n|[CMFCToolBarsCustomizeDialog::GetCountInCategory](#cmfctoolbarscustomizedialog__getcountincategory)|Retrieves the number of items in the provided list that have a given text label.|  \n|[CMFCToolBarsCustomizeDialog::GetFlags](#cmfctoolbarscustomizedialog__getflags)|Retrieves the set of flags that affect the behavior of the dialog box.|  \n|`CMFCToolBarsCustomizeDialog::GetThisClass`|Used by the framework to obtain a pointer to the [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) object that is associated with this class type.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::OnEditToolbarMenuImage](#cmfctoolbarscustomizedialog__onedittoolbarmenuimage)|Starts an image editor so that a user can customize a toolbar button or menu item icon.|  \n|[CMFCToolBarsCustomizeDialog::OnInitDialog](#cmfctoolbarscustomizedialog__oninitdialog)|Overrides to augment property sheet initialization. (Overrides [CPropertySheet::OnInitDialog](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog).)|  \n|[CMFCToolBarsCustomizeDialog::PostNcDestroy](#cmfctoolbarscustomizedialog__postncdestroy)|Called by the framework after the window has been destroyed. (Overrides `CPropertySheet::PostNcDestroy`.)|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::RemoveButton](#cmfctoolbarscustomizedialog__removebutton)|Removes the button with the specified command ID from the specified category, or from all categories.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::RenameCategory](#cmfctoolbarscustomizedialog__renamecategory)|Renames a category in the list box of categories on the **Commands** tab.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::ReplaceButton](#cmfctoolbarscustomizedialog__replacebutton)|Replaces a button in the list of commands on the **Commands** tab with a new toolbar button object.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::SetUserCategory](#cmfctoolbarscustomizedialog__setusercategory)|Adds a category to the list of categories that will be displayed on the **Commands** tab.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::CheckToolsValidity](#cmfctoolbarscustomizedialog__checktoolsvalidity)|Called by the framework to determine whether the list of user-defined tools is valid.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::OnAfterChangeTool](#cmfctoolbarscustomizedialog__onafterchangetool)|Called by the framework when the properties of a user-defined tool change.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::OnAssignKey](#cmfctoolbarscustomizedialog__onassignkey)|Determines whether a specified keyboard shortcut can be assigned to an action.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::OnBeforeChangeTool](#cmfctoolbarscustomizedialog__onbeforechangetool)|Determines whether a user-defined tool can be changed.|  \n|`CMFCToolBarsCustomizeDialog::` [CMFCToolBarsCustomizeDialog::OnInitToolsPage](#cmfctoolbarscustomizedialog__oninittoolspage)|Called by the framework when the user chooses the **Tools** tab is requested.|  \n  \n## Remarks  \n To display the **Customize** dialog box, create a `CMFCToolBarsCustomizeDialog` object and call the [CMFCToolBarsCustomizeDialog::Create](#cmfctoolbarscustomizedialog__create) method.  \n  \n While the **Customize** dialog box is active, the application works in a special mode that limits the user to customization tasks.  \n  \n## Example  \n The following example demonstrates how to use various methods in the `CMFCToolBarsCustomizeDialog` class. The example shows how to replace a toolbar button in the list box of commands on the **Commands** page, enable creating new toolbars by using the **Customize** dialog box, and display the **Customization** dialog box. This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_IEDemo#4](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CPropertySheet](../../mfc/reference/cpropertysheet-class.md)  \n  \n [CMFCToolBarsCustomizeDialog](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)  \n  \n## Requirements  \n **Header:** afxToolBarsCustomizeDialog.h  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__addbutton\"></a>  CMFCToolBarsCustomizeDialog::AddButton  \n Inserts a toolbar button into the list of commands on the **Commands** page.  \n  \n```  \nvoid AddButton(\n    UINT uiCategoryId,  \n    const CMFCToolBarButton& button,  \n    int iInsertBefore=-1);\n\nvoid AddButton(\n    LPCTSTR lpszCategory,  \n    const CMFCToolBarButton& button,  \n    int iInsertBefore=-1);\n```  \n  \n### Parameters  \n [in] `uiCategoryId`  \n Specifies the category ID into which to insert the button.  \n  \n [in] `button`  \n Specifies the button to insert.  \n  \n [in] `iInsertBefore`  \n Specifies the zero-based index of a toolbar button before which the button is inserted.  \n  \n [in] `lpszCategory`  \n Specifies the category string to insert the button.  \n  \n### Remarks  \n The `AddButton` method ignores buttons that have the standard command IDs (such as ID_FILE_MRU_FILE1), commands that are not permitted (see [CMFCToolBar::IsCommandPermitted](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__iscommandpermitted)) and dummy buttons.  \n  \n This method creates a new object of the same type as `button` (usually a [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md)) by using the runtime class of the button. It then calls [CMFCToolBarButton::CopyFrom](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom) to copy the data members of button, and inserts the copy into the specified category.  \n  \n When the new button is inserted, it receives the `OnAddToCustomizePage` notification.  \n  \n If `iInsertBefore` is -1, the button is appended to the list of categories; otherwise it is inserted before the item with the specified index.  \n  \n### Example  \n The following example demonstrates how to use the `AddButton` method of the `CMFCToolBarsCustomizeDialog` class. This code snippet is part of the [Slider sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_Slider#1](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_2.cpp)]  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__addmenu\"></a>  CMFCToolBarsCustomizeDialog::AddMenu  \n Loads a menu from the resources and calls [CMFCToolBarsCustomizeDialog::AddMenuCommands](#cmfctoolbarscustomizedialog__addmenucommands) to add that menu to the list of commands on the **Commands** page.  \n  \n```  \nBOOL AddMenu(UINT uiMenuResId);\n```  \n  \n### Parameters  \n [in] `uiMenuResId`  \n Specifies the resource ID of a menu to load.  \n  \n### Return Value  \n `TRUE` if a menu was added successfully; otherwise `FALSE`.  \n  \n### Remarks  \n In the call to `AddMenuCommands`, `bPopup` is `FALSE`. As a result, that method does not add menu items that contain submenus to the list of commands. This method does add the menu items in the submenus to the list of commands.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__addmenucommands\"></a>  CMFCToolBarsCustomizeDialog::AddMenuCommands  \n Adds items to the list of commands in the **Commands** page to represent all the items in the specified menu.  \n  \n```  \nvoid AddMenuCommands(\n    const CMenu* pMenu,  \n    BOOL bPopup,  \n    LPCTSTR lpszCategory=NULL,  \n    LPCTSTR lpszMenuPath=NULL);\n```  \n  \n### Parameters  \n [in] `pMenu`  \n A pointer to the CMenu object to add.  \n  \n [in] `bPopup`  \n Specifies whether to insert the popup menu items to the list of commands.  \n  \n [in] `lpszCategory`  \n The name of the category to insert the menu.  \n  \n [in] `lpszMenuPath`  \n A prefix that is added to the name when the command is shown in the **All Categories** list.  \n  \n### Remarks  \n The `AddMenuCommands` method loops over all menu items of `pMenu`. For each menu item that does not contain a submenu, this method creates a [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object and calls the [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method to add the menu item as a toolbar button to the list of commands on the **Commands** page. Separators are ignored in this process.  \n  \n If `bPopup` is `TRUE`, for each menu item that contains a submenu this method creates a [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md) object and inserts it into the list of commands by calling `AddButton`. Otherwise menu items that contain submenus are not displayed in the list of commands. In either case, when `AddMenuCommands` encounters a menu item with a submenu it calls itself recursively, passing a pointer to the submenu as the `pMenu` parameter and appending the label of the submenu to `lpszMenuPath`.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__addtoolbar\"></a>  CMFCToolBarsCustomizeDialog::AddToolBar  \n Loads a toolbar from the resources. Then, for each command in the menu calls the [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method to insert a button in the list of commands on the **Commands** page under the specified category.  \n  \n```  \nBOOL AddToolBar(\n    UINT uiCategoryId,  \n    UINT uiToolbarResId);\n\nBOOL AddToolBar(\n    LPCTSTR lpszCategory,  \n    UINT uiToolbarResId);\n```  \n  \n### Parameters  \n [in] `uiCategoryId`  \n Specifies the resource ID of the category to add the toolbar to.  \n  \n [in] `uiToolbarResId`  \n Specifies the resource ID of a toolbar whose commands are inserted into the list of commands.  \n  \n [in] `lpszCategory`  \n Specifies the name of the category to which to add the toolbar.  \n  \n### Return Value  \n `TRUE` if the method is successful; otherwise `FALSE`.  \n  \n### Example  \n The following example demonstrates how to use the `AddToolBar` method in the `CMFCToolBarsCustomizeDialog` class. This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_WordPad#11](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_3.cpp)]  \n  \n### Remarks  \n The control that is used to represent each command is a [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object. After you add the toolbar, you can replace the button with a control of a derived type by calling [CMFCToolBarsCustomizeDialog::ReplaceButton](#cmfctoolbarscustomizedialog__replacebutton).  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__checktoolsvalidity\"></a>  CMFCToolBarsCustomizeDialog::CheckToolsValidity  \n Verifies the validity of the list of user tools.  \n  \n```  \nvirtual BOOL CheckToolsValidity(const CObList& lstTools);\n```  \n  \n### Parameters  \n [in] `lstTools`  \n The list of user-defined tools to check.  \n  \n### Return Value  \n Returns `TRUE` if the list of user-defined tools is valid; otherwise `FALSE`. The default implementation always returns `TRUE`.  \n  \n### Remarks  \n The framework calls this method to verify the validity of objects that represent user-defined tools returned by [CMFCToolBarsCustomizeDialog::CheckToolsValidity](#cmfctoolbarscustomizedialog__checktoolsvalidity).  \n  \n Override the `CheckToolsValidity` method in a class derived from [CMFCToolBarsCustomizeDialog](../../mfc/reference/cmfctoolbarscustomizedialog-class.md) if you want to validate the user tools before the user closes the dialog box. If this method returns `FALSE` when the user clicks either the **Close** button in the upper-right corner of the dialog box or the button labeled **Close** in the lower-right corner of the dialog box, the dialog box displays the **Tools** tab instead of closing. If this method returns `FALSE` when the user clicks a tab to navigate away from the **Tools** tab, the navigation does not occur. You should display an appropriate message box to inform the user of the problem that caused validation to fail.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__cmfctoolbarscustomizedialog\"></a>  CMFCToolBarsCustomizeDialog::CMFCToolBarsCustomizeDialog  \n Constructs a `CMFCToolBarsCustomizeDialog` object.  \n  \n```  \nCMFCToolBarsCustomizeDialog(\n    CFrameWnd* pWndParentFrame,  \n    BOOL bAutoSetFromMenus = FALSE,  \n    UINT uiFlags = (AFX_CUSTOMIZE_MENU_SHADOWS | AFX_CUSTOMIZE_TEXT_LABELS | AFX_CUSTOMIZE_MENU_ANIMATIONS | AFX_CUSTOMIZE_NOHELP),  \n    CList <CRuntimeClass*, CRuntimeClass*>* p listCustomPages = NULL);\n```  \n  \n### Parameters  \n [in] `pWndParentFrame`  \n A pointer to the parent frame. This parameter must not be `NULL`.  \n  \n [in] `bAutoSetFromMenus`  \n A Boolean value that specifies whether to add the menu commands from all menus to the list of commands on the **Commands** page. If this parameter is `TRUE`, the menu commands are added. Otherwise, the menu commands are not added.  \n  \n [in] `uiFlags`  \n A combination of flags that affect the behavior of the dialog box. This parameter can be one or more of the following values:  \n  \n- `AFX_CUSTOMIZE_MENU_SHADOWS`  \n  \n- `AFX_CUSTOMIZE_TEXT_LABELS`  \n  \n- `AFX_CUSTOMIZE_MENU_ANIMATIONS`  \n  \n- `AFX_CUSTOMIZE_NOHELP`  \n  \n- `AFX_CUSTOMIZE_CONTEXT_HELP`  \n  \n- `AFX_CUSTOMIZE_NOTOOLS`  \n  \n- `AFX_CUSTOMIZE_MENUAMPERS`  \n  \n- `AFX_CUSTOMIZE_NO_LARGE_ICONS`  \n  \n [in] `plistCustomPages`  \n A pointer to a list of `CRuntimeClass` objects that specify additional custom pages.  \n  \n### Remarks  \n The `plistCustomPages` parameter refers to the list of `CRuntimeClass` objects that specify additional custom pages. The constructor adds more pages to the dialog box by using the [CRuntimeClass::CreateObject](../../mfc/reference/cruntimeclass-structure.md#cruntimeclass__createobject) method. See the CustomPages sample for an example that adds more pages to the **Customize** dialog box.  \n  \n For more information about the values that you can pass in the `uiFlags` parameter, see [CMFCToolBarsCustomizeDialog::GetFlags](#cmfctoolbarscustomizedialog__getflags).  \n  \n### Example  \n The following example demonstrates how to construct an object of the `CMFCToolBarsCustomizeDialog` class. This code snippet is part of the [Custom Pages sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_CustomPages#3](../../mfc/reference/codesnippet/cpp/cmfctoolbarscustomizedialog-class_4.cpp)]  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__create\"></a>  CMFCToolBarsCustomizeDialog::Create  \n Displays the **Customization** dialog box.  \n  \n```  \nvirtual BOOL Create();\n```  \n  \n### Return Value  \n `TRUE` if the customization property sheet is created successfully; otherwise `FALSE`.  \n  \n### Remarks  \n Call the `Create` method only after you fully initialize the class.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__enableuserdefinedtoolbars\"></a>  CMFCToolBarsCustomizeDialog::EnableUserDefinedToolbars  \n Enables or disables creating new toolbars by using the **Customize** dialog box.  \n  \n```  \nvoid EnableUserDefinedToolbars(BOOL bEnable=TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the user-defined toolbars; `FALSE` to disable the toolbars.  \n  \n### Remarks  \n If `bEnable` is `TRUE`, the **New**, **Rename** and **Delete** buttons are displayed on the **Toolbars** page.  \n  \n By default, or if `bEnable` is `FALSE`, these buttons are not displayed and the user cannot define new toolbars.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__fillallcommandslist\"></a>  CMFCToolBarsCustomizeDialog::FillAllCommandsList  \n Populates the provided `CListBox` object with the commands in the **All Commands** category.  \n  \n```  \nvirtual void FillAllCommandsList(CListBox& wndListOfCommands) const;\n\n \n```  \n  \n### Parameters  \n [out] `wndListOfCommands`  \n A reference to the `CListBox` object to populate.  \n  \n### Remarks  \n The **All Commands** category contains the commands of all categories. The [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method adds the command that is associated with the provided button to the **All Commands** category for you.  \n  \n This method clears the contents of the provided `CListBox` object before populating it with the commands in the **All Commands** category.  \n  \n The `CMFCMousePropertyPage` class uses this method to populate the double-click event list box.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__fillcategoriescombobox\"></a>  CMFCToolBarsCustomizeDialog::FillCategoriesComboBox  \n Populates the provided `CComboBox` object with the name of each command category in the **Customize** dialog box.  \n  \n```  \nvoid FillCategoriesComboBox(\n    CComboBox& wndCategory,  \n    BOOL bAddEmpty = TRUE) const;\n\n \n```  \n  \n### Parameters  \n [out] `wndCategory`  \n A reference to the `CComboBox` object to populate.  \n  \n [in] `bAddEmpty`  \n A Boolean value that specifies whether to add categories to the combo box that do not have commands. If this parameter is `TRUE`, empty categories are added to the combo box. Otherwise, empty categories are not added.  \n  \n### Remarks  \n This method is like the [CMFCToolBarsCustomizeDialog::FillCategoriesListBox](#cmfctoolbarscustomizedialog__fillcategorieslistbox) method except that this method works with a `CComboBox` object.  \n  \n This method does not clear the contents of the `CComboBox` object before populating it. It guarantees that the **All Commands** category is the final item in the combo box.  \n  \n You can add new command categories by using the [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method. You can change the name of an existing category by using the [CMFCToolBarsCustomizeDialog::RenameCategory](#cmfctoolbarscustomizedialog__renamecategory) method.  \n  \n The `CMFCToolBarsKeyboardPropertyPage` and `CMFCKeyMapDialog` classes use this method to categorize keyboard mappings.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__fillcategorieslistbox\"></a>  CMFCToolBarsCustomizeDialog::FillCategoriesListBox  \n Populates the provided `CListBox` object with the name of each command category in the **Customize** dialog box.  \n  \n```  \nvoid FillCategoriesListBox(\n    CListBox& wndCategory,  \n    BOOL bAddEmpty = TRUE) const;\n\n \n```  \n  \n### Parameters  \n [out] `wndCategory`  \n A reference to the `CListBox` object to populate.  \n  \n [in] `bAddEmpty`  \n A Boolean value that specifies whether to add categories to the list box that do not have commands. If this parameter is `TRUE`, empty categories are added to the list box. Otherwise, empty categories are not added.  \n  \n### Remarks  \n This method is like the [CMFCToolBarsCustomizeDialog::FillCategoriesComboBox](#cmfctoolbarscustomizedialog__fillcategoriescombobox) method except that this method works with a `CListBox` object.  \n  \n This method does not clear the contents of the `CListBox` object before populating it. It guarantees that the **All Commands** category is the final item in the list box.  \n  \n You can add new command categories by using the [CMFCToolBarsCustomizeDialog::AddButton](#cmfctoolbarscustomizedialog__addbutton) method. You can change the name of an existing category by using the [CMFCToolBarsCustomizeDialog::RenameCategory](#cmfctoolbarscustomizedialog__renamecategory) method.  \n  \n The `CMFCToolBarsCommandsPropertyPage` class uses this method to show the list of commands that is associated with each command category.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__getcommandname\"></a>  CMFCToolBarsCustomizeDialog::GetCommandName  \n Retrieves the name that is associated with the given command ID.  \n  \n```  \nLPCTSTR GetCommandName(UINT uiCmd) const;\n\n \n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The ID of the command to retrieve.  \n  \n### Return Value  \n The name that is associated with the given command ID, or `NULL` if the command does not exist.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__getcountincategory\"></a>  CMFCToolBarsCustomizeDialog::GetCountInCategory  \n Retrieves the number of items in the provided list that have a given text label.  \n  \n```  \nint GetCountInCategory(\n    LPCTSTR lpszItemName,  \n    const CObList& lstCommands) const;\n\n \n```  \n  \n### Parameters  \n [in] `lpszItemName`  \n The text label to match.  \n  \n [in] `lstCommands`  \n A reference to a list that contains `CMFCToolBarButton` objects.  \n  \n### Return Value  \n The number of items in the provided list whose text label equals `lpszItemName`.  \n  \n### Remarks  \n Each element in the provided object list must be of type `CMFCToolBarButton`. This method compares `lpszItemName` with the [CMFCToolBarButton::m_strText](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__m_strtext) data member.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__getflags\"></a>  CMFCToolBarsCustomizeDialog::GetFlags  \n Retrieves the set of flags that affect the behavior of the dialog box.  \n  \n```  \nUINT GetFlags() const;\n\n \n```  \n  \n### Return Value  \n The set of flags that affect the behavior of the dialog box.  \n  \n### Remarks  \n This method retrieves the value of the `uiFlags` parameter that is passed to the constructor. The return value can be one or more of the following values:  \n  \n `AFX_CUSTOMIZE_MENU_SHADOWS`  \n Allows the user to specify the shadow appearance of the menu.  \n  \n `AFX_CUSTOMIZE_TEXT_LABELS`  \n Allows the user to specify whether text labels are shown underneath the toolbar button images.  \n  \n `AFX_CUSTOMIZE_MENU_ANIMATIONS`  \n Allows the user to specify the menu animation style.  \n  \n `AFX_CUSTOMIZE_NOHELP`  \n Removes the help button from the customization dialog box.  \n  \n `AFX_CUSTOMIZE_CONTEXT_HELP`  \n Enables the `WS_EX_CONTEXTHELP` visual style.  \n  \n `AFX_CUSTOMIZE_NOTOOLS`  \n Removes the **Tools** page from the customization dialog box. This flag is valid if your application uses the `CUserToolsManager` class.  \n  \n `AFX_CUSTOMIZE_MENUAMPERS`  \n Allows button captions to contain the ampersand ( **&**) character.  \n  \n `AFX_CUSTOMIZE_NO_LARGE_ICONS`  \n Removes the **Large Icons** option from the customization dialog box.  \n  \n For more information about the `WS_EX_CONTEXTHELP` visual style, see [Extended Window Styles](../../mfc/reference/extended-window-styles.md).  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__onafterchangetool\"></a>  CMFCToolBarsCustomizeDialog::OnAfterChangeTool  \n Responds to a change in a user tool immediately after it occurs.  \n  \n```  \nvirtual void OnAfterChangeTool(CUserTool* pSelTool);\n```  \n  \n### Parameters  \n [in, out] `pSelTool`  \n A pointer to the user tool object that has been changed.  \n  \n### Remarks  \n This method is called by the framework when a user changes the properties of a user-defined tool. The default implementation does nothing. Override this method in a class derived from [CMFCToolBarsCustomizeDialog](../../mfc/reference/cmfctoolbarscustomizedialog-class.md) to perform processing after a change to a user tool occurs.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__onassignkey\"></a>  CMFCToolBarsCustomizeDialog::OnAssignKey  \n Validates keyboard shortcuts as a user defines them.  \n  \n```  \nvirtual BOOL OnAssignKey(ACCEL* pAccel);\n```  \n  \n### Parameters  \n [in, out] `pAccel`  \n Pointer to the proposed keyboard assigment that is expressed as an [ACCEL](http://msdn.microsoft.com/library/windows/desktop/ms646340) struct.  \n  \n### Return Value  \n `TRUE` if the key can be assigned, or `FALSE` if the key cannot be assigned. The default implementation always returns `TRUE`.  \n  \n### Remarks  \n Override this method in a derived class to perform extra processing when a user assigns a new keyboard shortcut, or to validate keyboard shortcuts as the user defines them. To prevent a shortcut from being assigned, return `FALSE`. You should also display a message box or otherwise inform the user of the reason why the keyboard shortcut was rejected.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__onbeforechangetool\"></a>  CMFCToolBarsCustomizeDialog::OnBeforeChangeTool  \n Performs custom processing when a change to a user tool when the user is about to apply a change.  \n  \n```  \nvirtual void OnBeforeChangeTool(CUserTool* pSelTool);\n```  \n  \n### Parameters  \n [in, out] `pSelTool`  \n A pointer to the user tool object that is about to be replaced.  \n  \n### Remarks  \n This method is called by the framework when the properties of a user-defined tool is about to change. The default implementation does nothing. Override the `OnBeforeChangeTool` method in a class derived from [CMFCToolBarsCustomizeDialog](../../mfc/reference/cmfctoolbarscustomizedialog-class.md) if you want to perform processing before a change to a user tool occurs, such as releasing resources that `pSelTool` uses.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__onedittoolbarmenuimage\"></a>  CMFCToolBarsCustomizeDialog::OnEditToolbarMenuImage  \n Starts an image editor so that a user can customize a toolbar button or menu item icon.  \n  \n```  \nvirtual BOOL OnEditToolbarMenuImage(\n    CWnd* pWndParent,  \n    CBitmap& bitmap,  \n    int nBitsPerPixel);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n A pointer to the parent window.  \n  \n [in] `bitmap`  \n A reference to a bitmap object to be edited.  \n  \n [in] `nBitsPerPixel`  \n Bitmap color resolution, in bits per pixel.  \n  \n### Return Value  \n `TRUE` if a change is being committed; otherwise `FALSE`. The default implementation displays a dialog box and returns `TRUE` if the user clicks **OK**, or `FALSE` if the user clicks **Cancel** or the **Close** button.  \n  \n### Remarks  \n This method is called by the framework when the user runs the image editor. The default implementation displays [CMFCImageEditorDialog Class](../../mfc/reference/cmfcimageeditordialog-class.md) dialog box. Override `OnEditToolbarMenuImage` in a derived class to use a custom image editor.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__oninitdialog\"></a>  CMFCToolBarsCustomizeDialog::OnInitDialog  \n Overrides to augment property sheet initialization.  \n  \n```  \nvirtual BOOL OnInitDialog();\n```  \n  \n### Return Value  \n The result of calling the [CPropertySheet::OnInitDialog](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog) method.  \n  \n### Remarks  \n This method extends the base class implementation, [CPropertySheet::OnInitDialog](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog), by displaying the **Close** button, by making sure that the dialog box fits the current screen size, and by moving the **Help** button to the lower-left corner of the dialog box.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__oninittoolspage\"></a>  CMFCToolBarsCustomizeDialog::OnInitToolsPage  \n Handles the notification from the framework that the **Tools** page is about to be initialized.  \n  \n```  \nvirtual void OnInitToolsPage();\n```  \n  \n### Remarks  \n The default implementation does nothing. Override this method in a derived class to process this notification.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__postncdestroy\"></a>  CMFCToolBarsCustomizeDialog::PostNcDestroy  \n Called by the framework after the window has been destroyed.  \n  \n```  \nvirtual void PostNcDestroy();\n```  \n  \n### Remarks  \n This method extends the base class implementation, `CPropertySheet::PostNcDestroy`, by restoring the application to the previous mode.  \n  \n The [CMFCToolBarsCustomizeDialog::Create](#cmfctoolbarscustomizedialog__create) method puts the application in a special mode that limits the user to customization tasks.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__removebutton\"></a>  CMFCToolBarsCustomizeDialog::RemoveButton  \n Removes the button with the specified command ID from the specified category, or from all categories.  \n  \n```  \nint RemoveButton(\n    UINT uiCategoryId,  \n    UINT uiCmdId);\n\nint RemoveButton(\n    LPCTSTR lpszCategory,  \n    UINT uiCmdId);\n```  \n  \n### Parameters  \n [in] `uiCategoryId`  \n Specifies the category ID from which to remove the button.  \n  \n [in] `uiCmdId`  \n Specifies the command ID of the button.  \n  \n [in] `lpszCategory`  \n Specifies the name of the category from which to remove the button.  \n  \n### Return Value  \n The zero-based index of the removed button, or -1 if the specified command ID was not found in the specified category. If `uiCategoryId` is -1, the return value is 0.  \n  \n### Remarks  \n To remove a button from all categories, call the first overload of this method and set `uiCategoryId` to -1.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__renamecategory\"></a>  CMFCToolBarsCustomizeDialog::RenameCategory  \n Renames a category in the list box of categories on the **Commands** page.  \n  \n```  \nBOOL RenameCategory(\n    LPCTSTR lpszCategoryOld,  \n    LPCTSTR lpszCategoryNew);\n```  \n  \n### Parameters  \n [in] `lpszCategoryOld`  \n The category name to change.  \n  \n [in] `lpszCategoryNew`  \n The new category name.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise `FALSE`.  \n  \n### Remarks  \n The category name must be unique.  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__replacebutton\"></a>  CMFCToolBarsCustomizeDialog::ReplaceButton  \n Replaces a toolbar button in the list box of commands on the **Commands** page.  \n  \n```  \nvoid ReplaceButton(\n    UINT uiCmd,  \n    const CMFCToolBarButton& button);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n Specifies the command of the button to be replaced.  \n  \n [in] `button`  \n A `const` reference to the toolbar button object that replaces the old button.  \n  \n### Remarks  \n When [CMFCToolBarsCustomizeDialog::AddMenu](#cmfctoolbarscustomizedialog__addmenu), [CMFCToolBarsCustomizeDialog::AddMenuCommands](#cmfctoolbarscustomizedialog__addmenucommands), or [CMFCToolBarsCustomizeDialog::AddToolBar](#cmfctoolbarscustomizedialog__addtoolbar) adds a command to the **Commands** page, that command is in the form of a [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object (or a [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md) object for a menu item that contains a submenu added by `AddMenuCommands`). The framework also calls these three methods to add commands automatically. If you want a command to be represented by a derived type instead, call `ReplaceButton` and pass in a button of the derived type.  \n  \n### Example  \n The following example demonstrates how to use the `ReplaceButton` method in the `CMFCToolBarsCustomizeDialog` class. This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_VisualStudioDemo#34](../../mfc/codesnippet/cpp/cmfctoolbarscustomizedialog-class_5.cpp)]  \n  \n##  <a name=\"cmfctoolbarscustomizedialog__setusercategory\"></a>  CMFCToolBarsCustomizeDialog::SetUserCategory  \n Specifies which category in the list of categories on the **Commands** page is the user category. You must call this function before you call [CMFCToolBarsCustomizeDialog::Create](#cmfctoolbarscustomizedialog__create).  \n  \n```  \nBOOL SetUserCategory(LPCTSTR lpszCategory);\n```  \n  \n### Parameters  \n [in] `lpszCategory`  \n The name of the category.  \n  \n### Return Value  \n `TRUE` if the method is successful; otherwise `FALSE`.  \n  \n### Remarks  \n The user category setting is not currently used by the framework.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CPropertySheet Class](../../mfc/reference/cpropertysheet-class.md)\n"}