{"nodes":[{"pos":[12,64],"content":"concurrent_unordered_multiset Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"concurrent_unordered_multiset Class | Microsoft Docs","pos":[0,52]}]},{"pos":[697,732],"content":"concurrent_unordered_multiset Class","linkify":"concurrent_unordered_multiset Class","nodes":[{"content":"concurrent_unordered_multiset Class","pos":[0,35]}]},{"pos":[733,1012],"content":"The <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> class is an concurrency-safe container that controls a varying-length sequence of elements of type K. The sequence is represented in a way that enables concurrency-safe append, element access, iterator access and iterator traversal operations.","source":"The `concurrent_unordered_multiset` class is an concurrency-safe container that controls a varying-length sequence of elements of type K. The sequence is represented in a way that enables concurrency-safe append, element access, iterator access and iterator traversal operations."},{"pos":[1021,1027],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1515,1525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key type.","pos":[1536,1549]},{"content":"The hash function object type.","pos":[1569,1599]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`std::tr1::hash&lt;``K``&gt;`</ph>.","pos":[1600,1675],"source":" This argument is optional and the default value is `std::tr1::hash<``K``>`."},{"content":"The equality comparison function object type.","pos":[1700,1745]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`std::equal_to&lt;``K``&gt;`</ph>.","pos":[1746,1820],"source":" This argument is optional and the default value is `std::equal_to<``K``>`."},{"content":"The type that represents the stored allocator object that encapsulates details about the allocation and deallocation of memory for the concurrent vector.","pos":[1848,2001]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`std::allocator&lt;``K``&gt;`</ph>.","pos":[2002,2077],"source":" This argument is optional and the default value is `std::allocator<``K``>`."},{"pos":[2086,2093],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[2103,2118],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[2125,2129]},{"content":"Description","pos":[2130,2141]},{"content":"The type of an allocator for managing storage.","pos":[2196,2242]},{"content":"The type of a constant iterator for the controlled sequence.","pos":[2264,2324]},{"content":"The type of a constant bucket iterator for the controlled sequence.","pos":[2352,2419]},{"content":"The type of a constant pointer to an element.","pos":[2440,2485]},{"content":"The type of a constant reference to an element.","pos":[2508,2555]},{"content":"The type of a signed distance between two elements.","pos":[2578,2629]},{"content":"The type of the hash function.","pos":[2643,2673]},{"content":"The type of an iterator for the controlled sequence.","pos":[2689,2741]},{"content":"The type of the comparison function.","pos":[2758,2794]},{"content":"The type of an ordering key.","pos":[2810,2838]},{"content":"The type of a bucket iterator for the controlled sequence.","pos":[2860,2918]},{"content":"The type of a pointer to an element.","pos":[2933,2969]},{"content":"The type of a reference to an element.","pos":[2986,3024]},{"content":"The type of an unsigned distance between two elements.","pos":[3041,3095]},{"content":"The type of an element.","pos":[3113,3136]},{"pos":[3147,3166],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[3173,3177]},{"content":"Description","pos":[3178,3189]},{"pos":[3227,3308],"content":"<bpt id=\"p1\">[</bpt>concurrent_unordered_multiset::concurrent_unordered_multiset Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[concurrent_unordered_multiset::concurrent_unordered_multiset Constructor](#ctor)"},{"content":"Overloaded.","pos":[3309,3320]},{"content":"Constructs a concurrent unordered multiset.","pos":[3321,3364]},{"pos":[3375,3389],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[3396,3400]},{"content":"Description","pos":[3401,3412]},{"pos":[3450,3519],"content":"<bpt id=\"p1\">[</bpt>concurrent_unordered_multiset::hash_function Method<ept id=\"p1\">](#hash_function)</ept>","source":"[concurrent_unordered_multiset::hash_function Method](#hash_function)"},{"content":"Returns the stored hash function object.","pos":[3520,3560]},{"pos":[3565,3620],"content":"<bpt id=\"p1\">[</bpt>concurrent_unordered_multiset::insert Method<ept id=\"p1\">](#insert)</ept>","source":"[concurrent_unordered_multiset::insert Method](#insert)"},{"content":"Overloaded.","pos":[3621,3632]},{"content":"Adds elements to the <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> object.","pos":[3633,3693],"source":" Adds elements to the `concurrent_unordered_multiset` object."},{"pos":[3698,3753],"content":"<bpt id=\"p1\">[</bpt>concurrent_unordered_multiset::key_eq Method<ept id=\"p1\">](#key_eq)</ept>","source":"[concurrent_unordered_multiset::key_eq Method](#key_eq)"},{"content":"The stored equality comparison function object.","pos":[3754,3801]},{"pos":[3806,3857],"content":"<bpt id=\"p1\">[</bpt>concurrent_unordered_multiset::swap Method<ept id=\"p1\">](#swap)</ept>","source":"[concurrent_unordered_multiset::swap Method](#swap)"},{"content":"Swaps the contents of two <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> objects.","pos":[3858,3924],"source":"Swaps the contents of two `concurrent_unordered_multiset` objects."},{"content":"This method is not concurrency-safe.","pos":[3925,3961]},{"pos":[3966,4033],"content":"<bpt id=\"p1\">[</bpt>concurrent_unordered_multiset::unsafe_erase Method<ept id=\"p1\">](#unsafe_erase)</ept>","source":"[concurrent_unordered_multiset::unsafe_erase Method](#unsafe_erase)"},{"content":"Overloaded.","pos":[4034,4045]},{"content":"Removes elements from the <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> at specified positions.","pos":[4046,4127],"source":" Removes elements from the `concurrent_unordered_multiset` at specified positions."},{"content":"This method is not concurrency-safe.","pos":[4128,4164]},{"pos":[4175,4191],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[4198,4202]},{"content":"Description","pos":[4203,4214]},{"pos":[4252,4317],"content":"<bpt id=\"p1\">[</bpt>concurrent_unordered_multiset::operator= Operator<ept id=\"p1\">](#operator_eq)</ept>","source":"[concurrent_unordered_multiset::operator= Operator](#operator_eq)"},{"content":"Overloaded.","pos":[4318,4329]},{"content":"Assigns the contents of another <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> object to this one.","pos":[4330,4413],"source":" Assigns the contents of another `concurrent_unordered_multiset` object to this one."},{"content":"This method is not concurrency-safe.","pos":[4414,4450]},{"pos":[4460,4467],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4471,4641],"content":"For detailed information on the <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> class, see <bpt id=\"p1\">[</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../../parallel/concrt/parallel-containers-and-objects.md)</ept>.","source":"For detailed information on the `concurrent_unordered_multiset` class, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)."},{"pos":[4650,4671],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4756,4768],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4772,4810],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concurrent_unordered_set.h","source":"**Header:** concurrent_unordered_set.h"},{"pos":[4817,4843],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[4853,4918],"content":"<bpt id=\"p1\">&lt;a name=\"begin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::begin Method","linkify":"<a name=\"begin\"></a>  concurrent_unordered_multiset::begin Method","source":"<a name=\"begin\"></a>  concurrent_unordered_multiset::begin Method"},{"content":"Returns an iterator pointing to the first element in the concurrent container.","pos":[4922,5000]},{"content":"This method is concurrency safe.","pos":[5001,5033]},{"pos":[5105,5117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An iterator to the first element in the concurrent container.","pos":[5121,5182]},{"pos":[5192,5259],"content":"<bpt id=\"p1\">&lt;a name=\"cbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::cbegin Method","linkify":"<a name=\"cbegin\"></a>  concurrent_unordered_multiset::cbegin Method","source":"<a name=\"cbegin\"></a>  concurrent_unordered_multiset::cbegin Method"},{"content":"Returns a const iterator pointing to the first element in the concurrent container.","pos":[5263,5346]},{"content":"This method is concurrency safe.","pos":[5347,5379]},{"pos":[5433,5445],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A const iterator to the first element in the concurrent container.","pos":[5449,5515]},{"pos":[5525,5588],"content":"<bpt id=\"p1\">&lt;a name=\"cend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::cend Method","linkify":"<a name=\"cend\"></a>  concurrent_unordered_multiset::cend Method","source":"<a name=\"cend\"></a>  concurrent_unordered_multiset::cend Method"},{"content":"Returns a const iterator pointing to the location succeeding the last element in the concurrent container.","pos":[5592,5698]},{"content":"This method is concurrency safe.","pos":[5699,5731]},{"pos":[5783,5795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A const iterator to the location succeeding the last element in the concurrent container.","pos":[5799,5888]},{"pos":[5898,5963],"content":"<bpt id=\"p1\">&lt;a name=\"clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::clear Method","linkify":"<a name=\"clear\"></a>  concurrent_unordered_multiset::clear Method","source":"<a name=\"clear\"></a>  concurrent_unordered_multiset::clear Method"},{"content":"Erases all the elements in the concurrent container.","pos":[5967,6019]},{"content":"This function is not concurrency safe.","pos":[6020,6058]},{"pos":[6095,6188],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::concurrent_unordered_multiset Constructor","linkify":"<a name=\"ctor\"></a>  concurrent_unordered_multiset::concurrent_unordered_multiset Constructor","source":"<a name=\"ctor\"></a>  concurrent_unordered_multiset::concurrent_unordered_multiset Constructor"},{"content":"Constructs a concurrent unordered multiset.","pos":[6192,6235]},{"pos":[7109,7119],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the input iterator.","pos":[7138,7169]},{"content":"The initial number of buckets for this unordered multiset.","pos":[7200,7258]},{"content":"The hash function for this unordered multiset.","pos":[7278,7324]},{"content":"The equality comparison function for this unordered multiset.","pos":[7349,7410]},{"content":"The allocator for this unordered multiset.","pos":[7433,7475]},{"content":"The source <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> object to move elements from.","pos":[7514,7586],"source":" The source `concurrent_unordered_multiset` object to move elements from."},{"pos":[7596,7603],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7607,7701],"content":"All constructors store an allocator object <ph id=\"ph1\">`_Allocator`</ph> and initialize the unordered multiset.","source":"All constructors store an allocator object `_Allocator` and initialize the unordered multiset."},{"content":"The first constructor specifies an empty initial multiset and explicitly specifies the number of buckets, hash function, equality function and allocator type to be used.","pos":[7708,7877]},{"content":"The second constructor specifies an allocator for the unordered multiset.","pos":[7884,7957]},{"pos":[7964,8054],"content":"The third constructor specifies values supplied by the iterator range [ <ph id=\"ph1\">`_Begin`</ph>, <ph id=\"ph2\">`_End`</ph>).","source":"The third constructor specifies values supplied by the iterator range [ `_Begin`, `_End`)."},{"pos":[8061,8155],"content":"The fourth and fifth constructors specify a copy of the concurrent unordered multiset <ph id=\"ph1\">`_Uset`</ph>.","source":"The fourth and fifth constructors specify a copy of the concurrent unordered multiset `_Uset`."},{"pos":[8162,8245],"content":"The last constructor specifies a move of the concurrent unordered multiset <ph id=\"ph1\">`_Uset`</ph>.","source":"The last constructor specifies a move of the concurrent unordered multiset `_Uset`."},{"pos":[8255,8320],"content":"<bpt id=\"p1\">&lt;a name=\"count\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::count Method","linkify":"<a name=\"count\"></a>  concurrent_unordered_multiset::count Method","source":"<a name=\"count\"></a>  concurrent_unordered_multiset::count Method"},{"content":"Counts the number of elements matching a specified key.","pos":[8324,8379]},{"content":"This function is concurrency safe.","pos":[8380,8414]},{"pos":[8482,8492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key to search for.","pos":[8506,8528]},{"pos":[8538,8550],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of times number of times the key appears in the container.","pos":[8554,8623]},{"pos":[8633,8698],"content":"<bpt id=\"p1\">&lt;a name=\"empty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::empty Method","linkify":"<a name=\"empty\"></a>  concurrent_unordered_multiset::empty Method","source":"<a name=\"empty\"></a>  concurrent_unordered_multiset::empty Method"},{"content":"Tests whether no elements are present.","pos":[8702,8740]},{"content":"This method is concurrency safe.","pos":[8741,8773]},{"pos":[8816,8828],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8832,8895],"content":"<ph id=\"ph1\">`true`</ph> if the concurrent container is empty, <ph id=\"ph2\">`false`</ph> otherwise.","source":"`true` if the concurrent container is empty, `false` otherwise."},{"pos":[8905,8912],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In the presence of concurrent inserts, whether or not the concurrent container is empty may change immediately after calling this function, before the return value is even read.","pos":[8916,9093]},{"pos":[9103,9164],"content":"<bpt id=\"p1\">&lt;a name=\"end\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::end Method","linkify":"<a name=\"end\"></a>  concurrent_unordered_multiset::end Method","source":"<a name=\"end\"></a>  concurrent_unordered_multiset::end Method"},{"content":"Returns an iterator pointing to the location succeeding the last element in the concurrent container.","pos":[9168,9269]},{"content":"This method is concurrency safe.","pos":[9270,9302]},{"pos":[9370,9382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An iterator to the location succeeding the last element in the concurrent container.","pos":[9386,9470]},{"pos":[9480,9557],"content":"<bpt id=\"p1\">&lt;a name=\"equal_range\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::equal_range Method","linkify":"<a name=\"equal_range\"></a>  concurrent_unordered_multiset::equal_range Method","source":"<a name=\"equal_range\"></a>  concurrent_unordered_multiset::equal_range Method"},{"content":"Finds a range that matches a specified key.","pos":[9561,9604]},{"content":"This function is concurrency safe.","pos":[9605,9639]},{"pos":[9829,9839],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key value to search for.","pos":[9853,9881]},{"pos":[9891,9903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9907,10104],"content":"A <bpt id=\"p1\">[</bpt>pair<ept id=\"p1\">](http://msdn.microsoft.com/en-us/32e72d66-3020-4cb9-92c3-f7a5fa7998ff)</ept> where the first element is an iterator to the beginning and the second element is an iterator to the end of the range.","source":"A [pair](http://msdn.microsoft.com/en-us/32e72d66-3020-4cb9-92c3-f7a5fa7998ff) where the first element is an iterator to the beginning and the second element is an iterator to the end of the range."},{"pos":[10114,10121],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It is possible for concurrent inserts to cause additional keys to be inserted after the begin iterator and before the end iterator.","pos":[10125,10256]},{"pos":[10266,10329],"content":"<bpt id=\"p1\">&lt;a name=\"find\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::find Method","linkify":"<a name=\"find\"></a>  concurrent_unordered_multiset::find Method","source":"<a name=\"find\"></a>  concurrent_unordered_multiset::find Method"},{"content":"Finds an element that matches a specified key.","pos":[10333,10379]},{"content":"This function is concurrency safe.","pos":[10380,10414]},{"pos":[10524,10534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key value to search for.","pos":[10548,10576]},{"pos":[10586,10598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10602,10745],"content":"An iterator pointing to the location of the the first element that matched the key provided, or the iterator <ph id=\"ph1\">`end()`</ph> if no such element exists.","source":"An iterator pointing to the location of the the first element that matched the key provided, or the iterator `end()` if no such element exists."},{"pos":[10755,10836],"content":"<bpt id=\"p1\">&lt;a name=\"get_allocator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::get_allocator Method","linkify":"<a name=\"get_allocator\"></a>  concurrent_unordered_multiset::get_allocator Method","source":"<a name=\"get_allocator\"></a>  concurrent_unordered_multiset::get_allocator Method"},{"content":"Returns the stored allocator object for this concurrent container.","pos":[10840,10906]},{"content":"This method is concurrency safe.","pos":[10907,10939]},{"pos":[11000,11012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The stored allocator object for this concurrent container.","pos":[11016,11074]},{"pos":[11084,11165],"content":"<bpt id=\"p1\">&lt;a name=\"hash_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::hash_function Method","linkify":"<a name=\"hash_function\"></a>  concurrent_unordered_multiset::hash_function Method","source":"<a name=\"hash_function\"></a>  concurrent_unordered_multiset::hash_function Method"},{"content":"Returns the stored hash function object.","pos":[11169,11209]},{"pos":[11262,11274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The stored hash function object.","pos":[11278,11310]},{"pos":[11320,11387],"content":"<bpt id=\"p1\">&lt;a name=\"insert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::insert Method","linkify":"<a name=\"insert\"></a>  concurrent_unordered_multiset::insert Method","source":"<a name=\"insert\"></a>  concurrent_unordered_multiset::insert Method"},{"pos":[11391,11451],"content":"Adds elements to the <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> object.","source":"Adds elements to the `concurrent_unordered_multiset` object."},{"pos":[11937,11947],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The iterator type used for insertion.","pos":[11966,12003]},{"content":"The type of the value inserted.","pos":[12017,12048]},{"content":"The value to be inserted.","pos":[12066,12091]},{"content":"The starting location to search for an insertion point.","pos":[12110,12165]},{"content":"The beginning of the range to insert.","pos":[12183,12220]},{"content":"The end of the range to insert.","pos":[12237,12268]},{"pos":[12278,12290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An iterator pointing to the insertion location.","pos":[12294,12341]},{"pos":[12351,12358],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12362,12507],"content":"The first member function inserts the element <ph id=\"ph1\">`value`</ph> in the controlled sequence, then returns the iterator that designates the inserted element.","source":"The first member function inserts the element `value` in the controlled sequence, then returns the iterator that designates the inserted element."},{"pos":[12514,12667],"content":"The second member function returns insert( <ph id=\"ph1\">`value`</ph>), using <ph id=\"ph2\">`_Where`</ph> as a starting place within the controlled sequence to search for the insertion point.","source":"The second member function returns insert( `value`), using `_Where` as a starting place within the controlled sequence to search for the insertion point."},{"pos":[12674,12773],"content":"The third member function inserts the sequence of element values from the range [ <ph id=\"ph1\">`first`</ph>, <ph id=\"ph2\">`last`</ph>).","source":"The third member function inserts the sequence of element values from the range [ `first`, `last`)."},{"pos":[12780,12904],"content":"The last two member functions behave the same as the first two, except that <ph id=\"ph1\">`value`</ph> is used to construct the inserted value.","source":"The last two member functions behave the same as the first two, except that `value` is used to construct the inserted value."},{"pos":[12914,12981],"content":"<bpt id=\"p1\">&lt;a name=\"key_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::key_eq Method","linkify":"<a name=\"key_eq\"></a>  concurrent_unordered_multiset::key_eq Method","source":"<a name=\"key_eq\"></a>  concurrent_unordered_multiset::key_eq Method"},{"content":"The stored equality comparison function object.","pos":[12985,13032]},{"pos":[13081,13093],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The stored equality comparison function object.","pos":[13097,13144]},{"pos":[13154,13231],"content":"<bpt id=\"p1\">&lt;a name=\"load_factor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::load_factor Method","linkify":"<a name=\"load_factor\"></a>  concurrent_unordered_multiset::load_factor Method","source":"<a name=\"load_factor\"></a>  concurrent_unordered_multiset::load_factor Method"},{"content":"Computes and returns the current load factor of the container.","pos":[13235,13297]},{"content":"The load factor is the number of elements in the container divided by the number of buckets.","pos":[13298,13390]},{"pos":[13440,13452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The load factor for the container.","pos":[13456,13490]},{"pos":[13500,13585],"content":"<bpt id=\"p1\">&lt;a name=\"max_load_factor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::max_load_factor Method","linkify":"<a name=\"max_load_factor\"></a>  concurrent_unordered_multiset::max_load_factor Method","source":"<a name=\"max_load_factor\"></a>  concurrent_unordered_multiset::max_load_factor Method"},{"content":"Gets or sets the maximum load factor of the container.","pos":[13589,13643]},{"content":"The maximum load factor is the largest number of elements than can be in any bucket before the container grows its internal table.","pos":[13644,13774]},{"pos":[13866,13876],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[13899,13911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first member function returns the stored maximum load factor.","pos":[13915,13980]},{"content":"The second member function does not return a value but throws an <bpt id=\"p1\">[</bpt>out_of_range<ept id=\"p1\">](../../../standard-library/out-of-range-class.md)</ept> exception if the supplied load factor is invalid..","pos":[13981,14160],"source":" The second member function does not return a value but throws an [out_of_range](../../../standard-library/out-of-range-class.md) exception if the supplied load factor is invalid.."},{"pos":[14170,14241],"content":"<bpt id=\"p1\">&lt;a name=\"max_size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::max_size Method","linkify":"<a name=\"max_size\"></a>  concurrent_unordered_multiset::max_size Method","source":"<a name=\"max_size\"></a>  concurrent_unordered_multiset::max_size Method"},{"content":"Returns the maximum size of the concurrent container, determined by the allocator.","pos":[14245,14327]},{"content":"This method is concurrency safe.","pos":[14328,14360]},{"pos":[14411,14423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The maximum number of elements that can be inserted into this concurrent container.","pos":[14427,14510]},{"pos":[14520,14527],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This upper bound value may actually be higher than what the container can actually hold.","pos":[14531,14619]},{"pos":[14629,14706],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::operator= Operator","linkify":"<a name=\"operator_eq\"></a>  concurrent_unordered_multiset::operator= Operator","source":"<a name=\"operator_eq\"></a>  concurrent_unordered_multiset::operator= Operator"},{"content":"Assigns the contents of another <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> object to this one.","pos":[14710,14793],"source":"Assigns the contents of another `concurrent_unordered_multiset` object to this one."},{"content":"This method is not concurrency-safe.","pos":[14794,14830]},{"pos":[15023,15033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The source <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> object.","pos":[15048,15098],"source":" The source `concurrent_unordered_multiset` object."},{"pos":[15108,15120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15124,15183],"content":"A reference to this <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> object.","source":"A reference to this `concurrent_unordered_multiset` object."},{"pos":[15193,15200],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15204,15374],"content":"After erasing any existing elements in a concurrent unordered multiset, <ph id=\"ph1\">`operator=`</ph> either copies or moves the contents of <ph id=\"ph2\">`_Uset`</ph> into the concurrent unordered multiset.","source":"After erasing any existing elements in a concurrent unordered multiset, `operator=` either copies or moves the contents of `_Uset` into the concurrent unordered multiset."},{"pos":[15384,15451],"content":"<bpt id=\"p1\">&lt;a name=\"rehash\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::rehash Method","linkify":"<a name=\"rehash\"></a>  concurrent_unordered_multiset::rehash Method","source":"<a name=\"rehash\"></a>  concurrent_unordered_multiset::rehash Method"},{"content":"Rebuilds the hash table.","pos":[15455,15479]},{"pos":[15535,15545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The desired number of buckets.","pos":[15563,15593]},{"pos":[15603,15610],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function alters the number of buckets to be at least <ph id=\"ph1\">`_Buckets`</ph> and rebuilds the hash table as needed.","pos":[15614,15727],"source":"The member function alters the number of buckets to be at least `_Buckets` and rebuilds the hash table as needed."},{"content":"The number of buckets must be a power of 2.","pos":[15728,15771]},{"content":"If not a power of 2, it will be rounded up to the next largest power of 2.","pos":[15772,15846]},{"pos":[15853,16033],"content":"It throws an <bpt id=\"p1\">[</bpt>out_of_range<ept id=\"p1\">](../../../standard-library/out-of-range-class.md)</ept> exception if the number of buckets is invalid (either 0 or greater than the maximum number of buckets).","source":"It throws an [out_of_range](../../../standard-library/out-of-range-class.md) exception if the number of buckets is invalid (either 0 or greater than the maximum number of buckets)."},{"pos":[16043,16106],"content":"<bpt id=\"p1\">&lt;a name=\"size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::size Method","linkify":"<a name=\"size\"></a>  concurrent_unordered_multiset::size Method","source":"<a name=\"size\"></a>  concurrent_unordered_multiset::size Method"},{"content":"Returns the number of elements in this concurrent container.","pos":[16110,16170]},{"content":"This method is concurrency safe.","pos":[16171,16203]},{"pos":[16250,16262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of items in the container.","pos":[16266,16303]},{"pos":[16313,16320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In the presence of concurrent inserts, the number of elements in the concurrent container may change immediately after calling this function, before the return value is even read.","pos":[16324,16503]},{"pos":[16513,16576],"content":"<bpt id=\"p1\">&lt;a name=\"swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::swap Method","linkify":"<a name=\"swap\"></a>  concurrent_unordered_multiset::swap Method","source":"<a name=\"swap\"></a>  concurrent_unordered_multiset::swap Method"},{"content":"Swaps the contents of two <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> objects.","pos":[16580,16646],"source":"Swaps the contents of two `concurrent_unordered_multiset` objects."},{"content":"This method is not concurrency-safe.","pos":[16647,16683]},{"pos":[16755,16765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> object to swap with.","pos":[16780,16836],"source":" The `concurrent_unordered_multiset` object to swap with."},{"pos":[16846,16925],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_begin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::unsafe_begin Method","linkify":"<a name=\"unsafe_begin\"></a>  concurrent_unordered_multiset::unsafe_begin Method","source":"<a name=\"unsafe_begin\"></a>  concurrent_unordered_multiset::unsafe_begin Method"},{"content":"Returns an iterator to the first element in this container for a specific bucket.","pos":[16929,17010]},{"pos":[17142,17152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The bucket index.","pos":[17169,17186]},{"pos":[17196,17208],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An iterator pointing to the beginning of the bucket.","pos":[17212,17264]},{"pos":[17274,17355],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_bucket\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::unsafe_bucket Method","linkify":"<a name=\"unsafe_bucket\"></a>  concurrent_unordered_multiset::unsafe_bucket Method","source":"<a name=\"unsafe_bucket\"></a>  concurrent_unordered_multiset::unsafe_bucket Method"},{"content":"Returns the bucket index that a specific key maps to in this container.","pos":[17359,17430]},{"pos":[17506,17516],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element key being searched for.","pos":[17530,17565]},{"pos":[17575,17587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The bucket index for the key in this container.","pos":[17591,17638]},{"pos":[17648,17741],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_bucket_count\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::unsafe_bucket_count Method","linkify":"<a name=\"unsafe_bucket_count\"></a>  concurrent_unordered_multiset::unsafe_bucket_count Method","source":"<a name=\"unsafe_bucket_count\"></a>  concurrent_unordered_multiset::unsafe_bucket_count Method"},{"content":"Returns the current number of buckets in this container.","pos":[17745,17801]},{"pos":[17863,17875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current number of buckets in this container.","pos":[17879,17927]},{"pos":[17937,18028],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_bucket_size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::unsafe_bucket_size Method","linkify":"<a name=\"unsafe_bucket_size\"></a>  concurrent_unordered_multiset::unsafe_bucket_size Method","source":"<a name=\"unsafe_bucket_size\"></a>  concurrent_unordered_multiset::unsafe_bucket_size Method"},{"content":"Returns the number of items in a specific bucket of this container.","pos":[18032,18099]},{"pos":[18171,18181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The bucket to search for.","pos":[18198,18223]},{"pos":[18233,18245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current number of buckets in this container.","pos":[18249,18297]},{"pos":[18307,18388],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_cbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::unsafe_cbegin Method","linkify":"<a name=\"unsafe_cbegin\"></a>  concurrent_unordered_multiset::unsafe_cbegin Method","source":"<a name=\"unsafe_cbegin\"></a>  concurrent_unordered_multiset::unsafe_cbegin Method"},{"content":"Returns an iterator to the first element in this container for a specific bucket.","pos":[18392,18473]},{"pos":[18557,18567],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The bucket index.","pos":[18584,18601]},{"pos":[18611,18623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An iterator pointing to the beginning of the bucket.","pos":[18627,18679]},{"pos":[18689,18766],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_cend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::unsafe_cend Method","linkify":"<a name=\"unsafe_cend\"></a>  concurrent_unordered_multiset::unsafe_cend Method","source":"<a name=\"unsafe_cend\"></a>  concurrent_unordered_multiset::unsafe_cend Method"},{"content":"Returns an iterator to the location succeeding the last element in a specific bucket.","pos":[18770,18855]},{"pos":[18937,18947],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The bucket index.","pos":[18964,18981]},{"pos":[18991,19003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An iterator pointing to the beginning of the bucket.","pos":[19007,19059]},{"pos":[19069,19144],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_end\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::unsafe_end Method","linkify":"<a name=\"unsafe_end\"></a>  concurrent_unordered_multiset::unsafe_end Method","source":"<a name=\"unsafe_end\"></a>  concurrent_unordered_multiset::unsafe_end Method"},{"content":"Returns an iterator to the last element in this container for a specific bucket.","pos":[19148,19228]},{"pos":[19356,19366],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The bucket index.","pos":[19383,19400]},{"pos":[19410,19422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An iterator pointing to the end of the bucket.","pos":[19426,19472]},{"pos":[19482,19561],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_erase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::unsafe_erase Method","linkify":"<a name=\"unsafe_erase\"></a>  concurrent_unordered_multiset::unsafe_erase Method","source":"<a name=\"unsafe_erase\"></a>  concurrent_unordered_multiset::unsafe_erase Method"},{"content":"Removes elements from the <ph id=\"ph1\">`concurrent_unordered_multiset`</ph> at specified positions.","pos":[19565,19646],"source":"Removes elements from the `concurrent_unordered_multiset` at specified positions."},{"content":"This method is not concurrency-safe.","pos":[19647,19683]},{"pos":[19885,19895],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The iterator position to erase from.","pos":[19911,19947]},{"content":"The key value to erase.","pos":[19985,20008]},{"pos":[20018,20030],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first two member functions return an iterator that designates the first element remaining beyond any elements removed, or <bpt id=\"p1\">[</bpt>concurrent_unordered_multiset::end Method<ept id=\"p1\">](#end)</ept>() if no such element exists.","pos":[20034,20238],"source":"The first two member functions return an iterator that designates the first element remaining beyond any elements removed, or [concurrent_unordered_multiset::end Method](#end)() if no such element exists."},{"content":"The third member function returns the number of elements it removes.","pos":[20239,20307]},{"pos":[20317,20324],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first member function removes the element pointed to by <ph id=\"ph1\">`_Where`</ph>.","pos":[20328,20397],"source":"The first member function removes the element pointed to by `_Where`."},{"content":"The second member function removes the elements in the range [ <ph id=\"ph1\">`_Begin`</ph>, <ph id=\"ph2\">`_End`</ph>).","pos":[20398,20479],"source":" The second member function removes the elements in the range [ `_Begin`, `_End`)."},{"pos":[20486,20631],"content":"The third member function removes the elements in the range delimited by <bpt id=\"p1\">[</bpt>concurrent_unordered_multiset::equal_range Method<ept id=\"p1\">](#equal_range)</ept>(KVal).","source":"The third member function removes the elements in the range delimited by [concurrent_unordered_multiset::equal_range Method](#equal_range)(KVal)."},{"pos":[20641,20742],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_max_bucket_count\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_unordered_multiset::unsafe_max_bucket_count Method","linkify":"<a name=\"unsafe_max_bucket_count\"></a>  concurrent_unordered_multiset::unsafe_max_bucket_count Method","source":"<a name=\"unsafe_max_bucket_count\"></a>  concurrent_unordered_multiset::unsafe_max_bucket_count Method"},{"content":"Returns the maximum number of buckets in this container.","pos":[20746,20802]},{"pos":[20868,20880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The maximum number of buckets in this container.","pos":[20884,20932]},{"pos":[20941,20949],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[20953,21003],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../../parallel/concrt/parallel-containers-and-objects.md)</ept>","pos":[21006,21101],"source":" [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)"}],"content":"---\ntitle: \"concurrent_unordered_multiset Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concurrent_unordered_set/concurrency::concurrent_unordered_multiset\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"concurrent_unordered_multiset class\"\nms.assetid: 219d7d67-1ff0-45f4-9400-e9cc272991a4\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# concurrent_unordered_multiset Class\nThe `concurrent_unordered_multiset` class is an concurrency-safe container that controls a varying-length sequence of elements of type K. The sequence is represented in a way that enables concurrency-safe append, element access, iterator access and iterator traversal operations.  \n  \n## Syntax  \n  \n```\ntemplate <typename K,\n    typename _Hasher = std::tr1::hash<K>,\n    typename key_equality = std::equal_to<K>,\n    typename _Allocator_type = std::allocator<K>\n>,\n    typename key_equality = std::equal_to<K>,\n    typename _Allocator_type = std::allocator<K>> class concurrent_unordered_multiset : public details::_Concurrent_hash<details::_Concurrent_unordered_set_traits<K,\n    details::_Hash_compare<K,\n _Hasher,\n    key_equality>,\n _Allocator_type,\n    true>>;\n```   \n  \n#### Parameters  \n `K`  \n The key type.  \n  \n `_Hasher`  \n The hash function object type. This argument is optional and the default value is `std::tr1::hash<``K``>`.  \n  \n `key_equality`  \n The equality comparison function object type. This argument is optional and the default value is `std::equal_to<``K``>`.  \n  \n `_Allocator_type`  \n The type that represents the stored allocator object that encapsulates details about the allocation and deallocation of memory for the concurrent vector. This argument is optional and the default value is `std::allocator<``K``>`.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`allocator_type`|The type of an allocator for managing storage.|  \n|`const_iterator`|The type of a constant iterator for the controlled sequence.|  \n|`const_local_iterator`|The type of a constant bucket iterator for the controlled sequence.|  \n|`const_pointer`|The type of a constant pointer to an element.|  \n|`const_reference`|The type of a constant reference to an element.|  \n|`difference_type`|The type of a signed distance between two elements.|  \n|`hasher`|The type of the hash function.|  \n|`iterator`|The type of an iterator for the controlled sequence.|  \n|`key_equal`|The type of the comparison function.|  \n|`key_type`|The type of an ordering key.|  \n|`local_iterator`|The type of a bucket iterator for the controlled sequence.|  \n|`pointer`|The type of a pointer to an element.|  \n|`reference`|The type of a reference to an element.|  \n|`size_type`|The type of an unsigned distance between two elements.|  \n|`value_type`|The type of an element.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_unordered_multiset::concurrent_unordered_multiset Constructor](#ctor)|Overloaded. Constructs a concurrent unordered multiset.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_unordered_multiset::hash_function Method](#hash_function)|Returns the stored hash function object.|  \n|[concurrent_unordered_multiset::insert Method](#insert)|Overloaded. Adds elements to the `concurrent_unordered_multiset` object.|  \n|[concurrent_unordered_multiset::key_eq Method](#key_eq)|The stored equality comparison function object.|  \n|[concurrent_unordered_multiset::swap Method](#swap)|Swaps the contents of two `concurrent_unordered_multiset` objects. This method is not concurrency-safe.|  \n|[concurrent_unordered_multiset::unsafe_erase Method](#unsafe_erase)|Overloaded. Removes elements from the `concurrent_unordered_multiset` at specified positions. This method is not concurrency-safe.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_unordered_multiset::operator= Operator](#operator_eq)|Overloaded. Assigns the contents of another `concurrent_unordered_multiset` object to this one. This method is not concurrency-safe.|  \n  \n## Remarks  \n For detailed information on the `concurrent_unordered_multiset` class, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md).  \n  \n## Inheritance Hierarchy  \n `_Traits`  \n  \n `_Concurrent_hash`  \n  \n `concurrent_unordered_multiset`  \n  \n## Requirements  \n **Header:** concurrent_unordered_set.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"begin\"></a>  concurrent_unordered_multiset::begin Method  \n Returns an iterator pointing to the first element in the concurrent container. This method is concurrency safe.  \n  \n```\niterator begin();\n\nconst_iterator begin() const;\n```  \n  \n### Return Value  \n An iterator to the first element in the concurrent container.  \n  \n##  <a name=\"cbegin\"></a>  concurrent_unordered_multiset::cbegin Method  \n Returns a const iterator pointing to the first element in the concurrent container. This method is concurrency safe.  \n  \n```\nconst_iterator cbegin() const;\n```  \n  \n### Return Value  \n A const iterator to the first element in the concurrent container.  \n  \n##  <a name=\"cend\"></a>  concurrent_unordered_multiset::cend Method  \n Returns a const iterator pointing to the location succeeding the last element in the concurrent container. This method is concurrency safe.  \n  \n```\nconst_iterator cend() const;\n```  \n  \n### Return Value  \n A const iterator to the location succeeding the last element in the concurrent container.  \n  \n##  <a name=\"clear\"></a>  concurrent_unordered_multiset::clear Method  \n Erases all the elements in the concurrent container. This function is not concurrency safe.  \n  \n```\nvoid clear();\n```  \n  \n##  <a name=\"ctor\"></a>  concurrent_unordered_multiset::concurrent_unordered_multiset Constructor  \n Constructs a concurrent unordered multiset.  \n  \n```\nexplicit concurrent_unordered_multiset(\n    size_type _Number_of_buckets = 8,\n    const hasher& _Hasher = hasher(),\n    const key_equal& key_equality = key_equal(),\n    const allocator_type& _Allocator = allocator_type());\n\nconcurrent_unordered_multiset(\n    const allocator_type& _Allocator);\n\ntemplate <typename _Iterator>\nconcurrent_unordered_multiset(_Iterator first,\n    _Iterator last,\n    size_type _Number_of_buckets = 8,\n    const hasher& _Hasher = hasher(),\n    const key_equal& key_equality = key_equal(),\n    const allocator_type& _Allocator = allocator_type());\n\nconcurrent_unordered_multiset(\n    const concurrent_unordered_multiset& _Uset);\n\nconcurrent_unordered_multiset(\n    const concurrent_unordered_multiset& _Uset,\n    const allocator_type& _Allocator);\n\nconcurrent_unordered_multiset(\n    concurrent_unordered_multiset&& _Uset);\n```  \n  \n### Parameters  \n `_Iterator`  \n The type of the input iterator.  \n  \n `_Number_of_buckets`  \n The initial number of buckets for this unordered multiset.  \n  \n `_Hasher`  \n The hash function for this unordered multiset.  \n  \n `key_equality`  \n The equality comparison function for this unordered multiset.  \n  \n `_Allocator`  \n The allocator for this unordered multiset.  \n  \n `first`  \n `last`  \n `_Uset`  \n The source `concurrent_unordered_multiset` object to move elements from.  \n  \n### Remarks  \n All constructors store an allocator object `_Allocator` and initialize the unordered multiset.  \n  \n The first constructor specifies an empty initial multiset and explicitly specifies the number of buckets, hash function, equality function and allocator type to be used.  \n  \n The second constructor specifies an allocator for the unordered multiset.  \n  \n The third constructor specifies values supplied by the iterator range [ `_Begin`, `_End`).  \n  \n The fourth and fifth constructors specify a copy of the concurrent unordered multiset `_Uset`.  \n  \n The last constructor specifies a move of the concurrent unordered multiset `_Uset`.  \n  \n##  <a name=\"count\"></a>  concurrent_unordered_multiset::count Method  \n Counts the number of elements matching a specified key. This function is concurrency safe.  \n  \n```\nsize_type count(const key_type& KVal) const;\n```  \n  \n### Parameters  \n `KVal`  \n The key to search for.  \n  \n### Return Value  \n The number of times number of times the key appears in the container.  \n  \n##  <a name=\"empty\"></a>  concurrent_unordered_multiset::empty Method  \n Tests whether no elements are present. This method is concurrency safe.  \n  \n```\nbool empty() const;\n```  \n  \n### Return Value  \n `true` if the concurrent container is empty, `false` otherwise.  \n  \n### Remarks  \n In the presence of concurrent inserts, whether or not the concurrent container is empty may change immediately after calling this function, before the return value is even read.  \n  \n##  <a name=\"end\"></a>  concurrent_unordered_multiset::end Method  \n Returns an iterator pointing to the location succeeding the last element in the concurrent container. This method is concurrency safe.  \n  \n```\niterator end();\n\nconst_iterator end() const;\n```  \n  \n### Return Value  \n An iterator to the location succeeding the last element in the concurrent container.  \n  \n##  <a name=\"equal_range\"></a>  concurrent_unordered_multiset::equal_range Method  \n Finds a range that matches a specified key. This function is concurrency safe.  \n  \n```\nstd::pair<iterator,\n    iterator> equal_range(\n    const key_type& KVal);\n\nstd::pair<const_iterator,\n    const_iterator> equal_range(\n    const key_type& KVal) const;\n```  \n  \n### Parameters  \n `KVal`  \n The key value to search for.  \n  \n### Return Value  \n A [pair](http://msdn.microsoft.com/en-us/32e72d66-3020-4cb9-92c3-f7a5fa7998ff) where the first element is an iterator to the beginning and the second element is an iterator to the end of the range.  \n  \n### Remarks  \n It is possible for concurrent inserts to cause additional keys to be inserted after the begin iterator and before the end iterator.  \n  \n##  <a name=\"find\"></a>  concurrent_unordered_multiset::find Method  \n Finds an element that matches a specified key. This function is concurrency safe.  \n  \n```\niterator find(const key_type& KVal);\n\nconst_iterator find(const key_type& KVal) const;\n```  \n  \n### Parameters  \n `KVal`  \n The key value to search for.  \n  \n### Return Value  \n An iterator pointing to the location of the the first element that matched the key provided, or the iterator `end()` if no such element exists.  \n  \n##  <a name=\"get_allocator\"></a>  concurrent_unordered_multiset::get_allocator Method  \n Returns the stored allocator object for this concurrent container. This method is concurrency safe.  \n  \n```\nallocator_type get_allocator() const;\n```  \n  \n### Return Value  \n The stored allocator object for this concurrent container.  \n  \n##  <a name=\"hash_function\"></a>  concurrent_unordered_multiset::hash_function Method  \n Returns the stored hash function object.  \n  \n```\nhasher hash_function() const;\n```  \n  \n### Return Value  \n The stored hash function object.  \n  \n##  <a name=\"insert\"></a>  concurrent_unordered_multiset::insert Method  \n Adds elements to the `concurrent_unordered_multiset` object.  \n  \n```\niterator insert(\n    const value_type& value);\n\niterator insert(\n    const_iterator _Where,\n    const value_type& value);\n\ntemplate<class _Iterator>\nvoid insert(_Iterator first,\n    _Iterator last);\n\ntemplate<class V>\niterator insert(\n    V&& value);\n\ntemplate<class V>\ntypename std::tr1::enable_if<!std::tr1::is_same<const_iterator,\n    typename std::tr1::remove_reference<V>::type>::value,\n    iterator>::type insert(\n    const_iterator _Where,\n    V&& value);\n```  \n  \n### Parameters  \n `_Iterator`  \n The iterator type used for insertion.  \n  \n `V`  \n The type of the value inserted.  \n  \n `value`  \n The value to be inserted.  \n  \n `_Where`  \n The starting location to search for an insertion point.  \n  \n `first`  \n The beginning of the range to insert.  \n  \n `last`  \n The end of the range to insert.  \n  \n### Return Value  \n An iterator pointing to the insertion location.  \n  \n### Remarks  \n The first member function inserts the element `value` in the controlled sequence, then returns the iterator that designates the inserted element.  \n  \n The second member function returns insert( `value`), using `_Where` as a starting place within the controlled sequence to search for the insertion point.  \n  \n The third member function inserts the sequence of element values from the range [ `first`, `last`).  \n  \n The last two member functions behave the same as the first two, except that `value` is used to construct the inserted value.  \n  \n##  <a name=\"key_eq\"></a>  concurrent_unordered_multiset::key_eq Method  \n The stored equality comparison function object.  \n  \n```\nkey_equal key_eq() const;\n```  \n  \n### Return Value  \n The stored equality comparison function object.  \n  \n##  <a name=\"load_factor\"></a>  concurrent_unordered_multiset::load_factor Method  \n Computes and returns the current load factor of the container. The load factor is the number of elements in the container divided by the number of buckets.  \n  \n```\nfloat load_factor() const;\n```  \n  \n### Return Value  \n The load factor for the container.  \n  \n##  <a name=\"max_load_factor\"></a>  concurrent_unordered_multiset::max_load_factor Method  \n Gets or sets the maximum load factor of the container. The maximum load factor is the largest number of elements than can be in any bucket before the container grows its internal table.  \n  \n```\nfloat max_load_factor() const;\n\nvoid max_load_factor(float _Newmax);\n```  \n  \n### Parameters  \n `_Newmax`  \n  \n### Return Value  \n The first member function returns the stored maximum load factor. The second member function does not return a value but throws an [out_of_range](../../../standard-library/out-of-range-class.md) exception if the supplied load factor is invalid..  \n  \n##  <a name=\"max_size\"></a>  concurrent_unordered_multiset::max_size Method  \n Returns the maximum size of the concurrent container, determined by the allocator. This method is concurrency safe.  \n  \n```\nsize_type max_size() const;\n```  \n  \n### Return Value  \n The maximum number of elements that can be inserted into this concurrent container.  \n  \n### Remarks  \n This upper bound value may actually be higher than what the container can actually hold.  \n  \n##  <a name=\"operator_eq\"></a>  concurrent_unordered_multiset::operator= Operator  \n Assigns the contents of another `concurrent_unordered_multiset` object to this one. This method is not concurrency-safe.  \n  \n```\nconcurrent_unordered_multiset& operator= (const concurrent_unordered_multiset& _Uset);\n\nconcurrent_unordered_multiset& operator= (concurrent_unordered_multiset&& _Uset);\n```  \n  \n### Parameters  \n `_Uset`  \n The source `concurrent_unordered_multiset` object.  \n  \n### Return Value  \n A reference to this `concurrent_unordered_multiset` object.  \n  \n### Remarks  \n After erasing any existing elements in a concurrent unordered multiset, `operator=` either copies or moves the contents of `_Uset` into the concurrent unordered multiset.  \n  \n##  <a name=\"rehash\"></a>  concurrent_unordered_multiset::rehash Method  \n Rebuilds the hash table.  \n  \n```\nvoid rehash(size_type _Buckets);\n```  \n  \n### Parameters  \n `_Buckets`  \n The desired number of buckets.  \n  \n### Remarks  \n The member function alters the number of buckets to be at least `_Buckets` and rebuilds the hash table as needed. The number of buckets must be a power of 2. If not a power of 2, it will be rounded up to the next largest power of 2.  \n  \n It throws an [out_of_range](../../../standard-library/out-of-range-class.md) exception if the number of buckets is invalid (either 0 or greater than the maximum number of buckets).  \n  \n##  <a name=\"size\"></a>  concurrent_unordered_multiset::size Method  \n Returns the number of elements in this concurrent container. This method is concurrency safe.  \n  \n```\nsize_type size() const;\n```  \n  \n### Return Value  \n The number of items in the container.  \n  \n### Remarks  \n In the presence of concurrent inserts, the number of elements in the concurrent container may change immediately after calling this function, before the return value is even read.  \n  \n##  <a name=\"swap\"></a>  concurrent_unordered_multiset::swap Method  \n Swaps the contents of two `concurrent_unordered_multiset` objects. This method is not concurrency-safe.  \n  \n```\nvoid swap(concurrent_unordered_multiset& _Uset);\n```  \n  \n### Parameters  \n `_Uset`  \n The `concurrent_unordered_multiset` object to swap with.  \n  \n##  <a name=\"unsafe_begin\"></a>  concurrent_unordered_multiset::unsafe_begin Method  \n Returns an iterator to the first element in this container for a specific bucket.  \n  \n```\nlocal_iterator unsafe_begin(size_type _Bucket);\n\nconst_local_iterator unsafe_begin(size_type _Bucket) const;\n```  \n  \n### Parameters  \n `_Bucket`  \n The bucket index.  \n  \n### Return Value  \n An iterator pointing to the beginning of the bucket.  \n  \n##  <a name=\"unsafe_bucket\"></a>  concurrent_unordered_multiset::unsafe_bucket Method  \n Returns the bucket index that a specific key maps to in this container.  \n  \n```\nsize_type unsafe_bucket(const key_type& KVal) const;\n```  \n  \n### Parameters  \n `KVal`  \n The element key being searched for.  \n  \n### Return Value  \n The bucket index for the key in this container.  \n  \n##  <a name=\"unsafe_bucket_count\"></a>  concurrent_unordered_multiset::unsafe_bucket_count Method  \n Returns the current number of buckets in this container.  \n  \n```\nsize_type unsafe_bucket_count() const;\n```  \n  \n### Return Value  \n The current number of buckets in this container.  \n  \n##  <a name=\"unsafe_bucket_size\"></a>  concurrent_unordered_multiset::unsafe_bucket_size Method  \n Returns the number of items in a specific bucket of this container.  \n  \n```\nsize_type unsafe_bucket_size(size_type _Bucket);\n```  \n  \n### Parameters  \n `_Bucket`  \n The bucket to search for.  \n  \n### Return Value  \n The current number of buckets in this container.  \n  \n##  <a name=\"unsafe_cbegin\"></a>  concurrent_unordered_multiset::unsafe_cbegin Method  \n Returns an iterator to the first element in this container for a specific bucket.  \n  \n```\nconst_local_iterator unsafe_cbegin(size_type _Bucket) const;\n```  \n  \n### Parameters  \n `_Bucket`  \n The bucket index.  \n  \n### Return Value  \n An iterator pointing to the beginning of the bucket.  \n  \n##  <a name=\"unsafe_cend\"></a>  concurrent_unordered_multiset::unsafe_cend Method  \n Returns an iterator to the location succeeding the last element in a specific bucket.  \n  \n```\nconst_local_iterator unsafe_cend(size_type _Bucket) const;\n```  \n  \n### Parameters  \n `_Bucket`  \n The bucket index.  \n  \n### Return Value  \n An iterator pointing to the beginning of the bucket.  \n  \n##  <a name=\"unsafe_end\"></a>  concurrent_unordered_multiset::unsafe_end Method  \n Returns an iterator to the last element in this container for a specific bucket.  \n  \n```\nlocal_iterator unsafe_end(size_type _Bucket);\n\nconst_local_iterator unsafe_end(size_type _Bucket) const;\n```  \n  \n### Parameters  \n `_Bucket`  \n The bucket index.  \n  \n### Return Value  \n An iterator pointing to the end of the bucket.  \n  \n##  <a name=\"unsafe_erase\"></a>  concurrent_unordered_multiset::unsafe_erase Method  \n Removes elements from the `concurrent_unordered_multiset` at specified positions. This method is not concurrency-safe.  \n  \n```\niterator unsafe_erase(\n    const_iterator _Where);\n\niterator unsafe_erase(\n    const_iterator first,\n    const_iterator last);\n\nsize_type unsafe_erase(\n    const key_type& KVal);\n```  \n  \n### Parameters  \n `_Where`  \n The iterator position to erase from.  \n  \n `first`  \n `last`  \n `KVal`  \n The key value to erase.  \n  \n### Return Value  \n The first two member functions return an iterator that designates the first element remaining beyond any elements removed, or [concurrent_unordered_multiset::end Method](#end)() if no such element exists. The third member function returns the number of elements it removes.  \n  \n### Remarks  \n The first member function removes the element pointed to by `_Where`. The second member function removes the elements in the range [ `_Begin`, `_End`).  \n  \n The third member function removes the elements in the range delimited by [concurrent_unordered_multiset::equal_range Method](#equal_range)(KVal).  \n  \n##  <a name=\"unsafe_max_bucket_count\"></a>  concurrent_unordered_multiset::unsafe_max_bucket_count Method  \n Returns the maximum number of buckets in this container.  \n  \n```\nsize_type unsafe_max_bucket_count() const;\n```  \n  \n### Return Value  \n The maximum number of buckets in this container.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)\n\n\n\n"}