{"nodes":[{"pos":[12,56],"content":"Bitwise AND Operator: &amp; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Bitwise AND Operator: <ph id=\"ph1\">&amp;amp;</ph> | Microsoft Docs","pos":[0,44],"source":"Bitwise AND Operator: &amp; | Microsoft Docs"}]},{"content":"Bitwise AND Operator:","pos":[689,710]},{"content":"Syntax","pos":[720,726]},{"content":"Remarks","pos":[788,795]},{"content":"The expressions may be other and-expressions, or (subject to the type restrictions mentioned below) equality expressions, relational expressions, additive expressions, multiplicative expressions, pointer to member expressions, cast expressions, unary expressions, postfix expressions, or primary expressions.","pos":[799,1107]},{"content":"The bitwise AND operator (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;</ph><ept id=\"p1\">**</ept>) compares each bit of the first operand to the corresponding bit of the second operand.","pos":[1114,1233],"source":"The bitwise AND operator (**&**) compares each bit of the first operand to the corresponding bit of the second operand."},{"content":"If both bits are 1, the corresponding result bit is set to 1.","pos":[1234,1295]},{"content":"Otherwise, the corresponding result bit is set to 0.","pos":[1296,1348]},{"content":"Both operands to the bitwise AND operator must be of integral types.","pos":[1355,1423]},{"content":"The usual arithmetic conversions covered in <bpt id=\"p1\">[</bpt>Standard Conversions<ept id=\"p1\">](standard-conversions.md)</ept>, are applied to the operands.","pos":[1424,1545],"source":" The usual arithmetic conversions covered in [Standard Conversions](standard-conversions.md), are applied to the operands."},{"content":"Operator Keyword for &amp;","pos":[1554,1576],"source":"Operator Keyword for &"},{"content":"The <ph id=\"ph1\">`bitand`</ph> operator is the text equivalent of <bpt id=\"p1\">**</bpt><ph id=\"ph2\">&amp;</ph><ept id=\"p1\">**</ept>.","pos":[1580,1634],"source":"The `bitand` operator is the text equivalent of **&**."},{"content":"There are two ways to access the <ph id=\"ph1\">`bitand`</ph> operator in your programs: include the header file <ph id=\"ph2\">`iso646.h`</ph>, or compile with the <bpt id=\"p1\">[</bpt>/Za<ept id=\"p1\">](../build/reference/za-ze-disable-language-extensions.md)</ept> (Disable language extensions) compiler option.","pos":[1635,1869],"source":" There are two ways to access the `bitand` operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option."},{"content":"Example","pos":[1878,1885]},{"content":"See Also","pos":[2257,2265]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[2270,2322]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[2384,2436]},{"content":"C Bitwise Operators","pos":[2506,2525]}],"content":"---\ntitle: \"Bitwise AND Operator: &amp; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"bitand\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"AND operator\"\n  - \"bitwise operators, AND operator\"\n  - \"& operator, bitwise operators\"\nms.assetid: 76f40de3-c417-47b9-8a77-532f3fc990a5\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Bitwise AND Operator: &amp;\n## Syntax  \n  \n```  \n  \nexpression   \n&  \n expression  \n  \n```  \n  \n## Remarks  \n The expressions may be other and-expressions, or (subject to the type restrictions mentioned below) equality expressions, relational expressions, additive expressions, multiplicative expressions, pointer to member expressions, cast expressions, unary expressions, postfix expressions, or primary expressions.  \n  \n The bitwise AND operator (**&**) compares each bit of the first operand to the corresponding bit of the second operand. If both bits are 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.  \n  \n Both operands to the bitwise AND operator must be of integral types. The usual arithmetic conversions covered in [Standard Conversions](standard-conversions.md), are applied to the operands.  \n  \n## Operator Keyword for &  \n The `bitand` operator is the text equivalent of **&**. There are two ways to access the `bitand` operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option.  \n  \n## Example  \n  \n```  \n// expre_Bitwise_AND_Operator.cpp  \n// compile with: /EHsc  \n// Demonstrate bitwise AND  \n#include <iostream>  \nusing namespace std;  \nint main() {  \n   unsigned short a = 0xFFFF;      // pattern 1111 ...  \n   unsigned short b = 0xAAAA;      // pattern 1010 ...  \n  \n   cout  << hex << ( a & b ) << endl;   // prints \"aaaa\", pattern 1010 ...  \n}  \n```  \n  \n## See Also  \n [C++ Built-in Operators, Precedence and Associativity](cpp-built-in-operators-precedence-and-associativity.md)  \n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)   \n [C Bitwise Operators](../c-language/c-bitwise-operators.md)"}