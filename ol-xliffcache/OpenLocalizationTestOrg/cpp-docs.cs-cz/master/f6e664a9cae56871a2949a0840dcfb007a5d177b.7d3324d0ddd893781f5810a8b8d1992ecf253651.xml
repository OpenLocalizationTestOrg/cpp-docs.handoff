{"nodes":[{"pos":[12,67],"content":"Storing Strings in the OLE DB Provider | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Storing Strings in the OLE DB Provider | Microsoft Docs","pos":[0,55]}]},{"content":"Storing Strings in the OLE DB Provider","pos":[597,635]},{"content":"In MyProviderRS.h, the ATL OLE DB Provider Wizard creates a default user record called <ph id=\"ph1\">`CWindowsFile`</ph>.","pos":[636,738],"source":"In MyProviderRS.h, the ATL OLE DB Provider Wizard creates a default user record called `CWindowsFile`."},{"content":"To handle the two strings, either modify <ph id=\"ph1\">`CWindowsFile`</ph> or add your own user record as shown in the following code:","pos":[739,854],"source":" To handle the two strings, either modify `CWindowsFile` or add your own user record as shown in the following code:"},{"content":"The data members <ph id=\"ph1\">`szCommand`</ph> and <ph id=\"ph2\">`szText`</ph> represent the two strings, with <ph id=\"ph3\">`szCommand2`</ph> and <ph id=\"ph4\">`szText2`</ph> providing additional columns if needed.","pos":[1809,1949],"source":"The data members `szCommand` and `szText` represent the two strings, with `szCommand2` and `szText2` providing additional columns if needed."},{"content":"The data member <ph id=\"ph1\">`dwBookmark`</ph> is not needed for this simple read-only provider but is used later to add an <ph id=\"ph2\">`IRowsetLocate`</ph> interface; see <bpt id=\"p1\">[</bpt>Enhancing the Simple Read Only Provider<ept id=\"p1\">](../../data/oledb/enhancing-the-simple-read-only-provider.md)</ept>.","pos":[1950,2190],"source":" The data member `dwBookmark` is not needed for this simple read-only provider but is used later to add an `IRowsetLocate` interface; see [Enhancing the Simple Read Only Provider](../../data/oledb/enhancing-the-simple-read-only-provider.md)."},{"content":"The <ph id=\"ph1\">`==`</ph> operator compares instances (implementing this operator is optional).","pos":[2191,2269],"source":" The `==` operator compares instances (implementing this operator is optional)."},{"content":"When this is done, your provider should be ready to compile and run.","pos":[2276,2344]},{"content":"To test the provider, you need a consumer with matching functionality.","pos":[2345,2415]},{"content":"<bpt id=\"p1\">[</bpt>Implementing a Simple Consumer<ept id=\"p1\">](../../data/oledb/implementing-a-simple-consumer.md)</ept> shows how to create such a test consumer.","pos":[2416,2542],"source":"[Implementing a Simple Consumer](../../data/oledb/implementing-a-simple-consumer.md) shows how to create such a test consumer."},{"content":"Run the test consumer with the provider.","pos":[2543,2583]},{"content":"Verify that the test consumer retrieves the proper strings from the provider when you click the <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> button in the <bpt id=\"p2\">**</bpt>Test Consumer<ept id=\"p2\">**</ept> dialog box.","pos":[2584,2731],"source":" Verify that the test consumer retrieves the proper strings from the provider when you click the **Run** button in the **Test Consumer** dialog box."},{"content":"When you have successfully tested your provider, you might want to enhance its functionality by implementing additional interfaces.","pos":[2738,2869]},{"content":"An example is shown in <bpt id=\"p1\">[</bpt>Enhancing the Simple Read-Only Provider<ept id=\"p1\">](../../data/oledb/enhancing-the-simple-read-only-provider.md)</ept>.","pos":[2870,2996],"source":" An example is shown in [Enhancing the Simple Read-Only Provider](../../data/oledb/enhancing-the-simple-read-only-provider.md)."},{"content":"See Also","pos":[3005,3013]},{"content":"Implementing the Simple Read-Only Provider","pos":[3018,3060]}],"content":"---\ntitle: \"Storing Strings in the OLE DB Provider | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"user records, editing\"\nms.assetid: 36cb9635-067c-4cad-8f85-962f28026f6a\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Storing Strings in the OLE DB Provider\nIn MyProviderRS.h, the ATL OLE DB Provider Wizard creates a default user record called `CWindowsFile`. To handle the two strings, either modify `CWindowsFile` or add your own user record as shown in the following code:  \n  \n```  \n////////////////////////////////////////////////////////////////////////  \nclass CAgentMan:   \n   public WIN32_FIND_DATA  \n   DWORD dwBookmark;              // Add this  \n   TCHAR szCommand[256];          // Add this  \n   TCHAR szText[256];             // Add this  \n   TCHAR szCommand2[256];         // Add this  \n   TCHAR szText2[256];            // Add this  \n  \n{  \npublic:  \nBEGIN_PROVIDER_COLUMN_MAP()  \n   PROVIDER_COLUMN_ENTRY_STR(OLESTR(\"Command\"), 1, 256, GUID_NULL, CAgentMan, szCommand)  \n   PROVIDER_COLUMN_ENTRY_STR(OLESTR(\"Text\"), 2, 256, GUID_NULL, CAgentMan, szText)   \n   PROVIDER_COLUMN_ENTRY_STR(OLESTR(\"Command2\"), 3, 256, GUID_NULL, CAgentMan, szCommand2)  \n   PROVIDER_COLUMN_ENTRY_STR(OLESTR(\"Text2\"),4, 256, GUID_NULL, CAgentMan, szText2)  \nEND_PROVIDER_COLUMN_MAP()  \n   bool operator==(const CAgentMan& am) // This is optional   \n   {  \n      return (lstrcmpi(cFileName, wf.cFileName) == 0);  \n   }  \n};  \n```  \n  \n The data members `szCommand` and `szText` represent the two strings, with `szCommand2` and `szText2` providing additional columns if needed. The data member `dwBookmark` is not needed for this simple read-only provider but is used later to add an `IRowsetLocate` interface; see [Enhancing the Simple Read Only Provider](../../data/oledb/enhancing-the-simple-read-only-provider.md). The `==` operator compares instances (implementing this operator is optional).  \n  \n When this is done, your provider should be ready to compile and run. To test the provider, you need a consumer with matching functionality. [Implementing a Simple Consumer](../../data/oledb/implementing-a-simple-consumer.md) shows how to create such a test consumer. Run the test consumer with the provider. Verify that the test consumer retrieves the proper strings from the provider when you click the **Run** button in the **Test Consumer** dialog box.  \n  \n When you have successfully tested your provider, you might want to enhance its functionality by implementing additional interfaces. An example is shown in [Enhancing the Simple Read-Only Provider](../../data/oledb/enhancing-the-simple-read-only-provider.md).  \n  \n## See Also  \n [Implementing the Simple Read-Only Provider](../../data/oledb/implementing-the-simple-read-only-provider.md)"}