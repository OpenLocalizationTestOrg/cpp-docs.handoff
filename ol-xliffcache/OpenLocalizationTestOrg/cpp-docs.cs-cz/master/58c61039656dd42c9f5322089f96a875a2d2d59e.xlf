<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58c61039656dd42c9f5322089f96a875a2d2d59e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\codecvt-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecbbec3021704aa702c2b4d163f5d159eb73153f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1fc320beda28f6f7228990000413a84f2a3dec1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>codecvt Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>codecvt Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A template class that describes an object that can serve as a locale facet.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It is able to control conversions between a sequence of values used to encode characters within the program and a sequence of values used to encode characters outside the program.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type used within a program to encode characters.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A type used to encode characters outside a program.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A type that can be used to represent intermediate states of a conversion between internal and external types of character representations.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The template class describes an object that can serve as a <bpt id="p1">[</bpt>locale facet<ept id="p1">](../standard-library/locale-class.md#facet_class)</ept>, to control conversions between a sequence of values of type <ph id="ph1">`CharType`</ph> and a sequence of values of type <ph id="ph2">`Byte`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph1">`StateType`</ph> characterizes the transformation -- and an object of class <ph id="ph2">`StateType`</ph> stores any necessary state information during a conversion.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The internal encoding uses a representation with a fixed number of bytes per character, usually either type <ph id="ph1">`char`</ph> or type <ph id="ph2">`wchar_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As with any locale facet, the static object <ph id="ph1">`id`</ph> has an initial stored value of zero.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The first attempt to access its stored value stores a unique positive value in <ph id="ph1">`id`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The template versions of <bpt id="p1">[</bpt>do_in<ept id="p1">](#codecvt__do_in)</ept> and <bpt id="p2">[</bpt>do_out<ept id="p2">](#codecvt__do_out)</ept> always return <ph id="ph1">`codecvt_base::noconv`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Standard C++ Library defines several explicit specializations:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>converts between <ph id="ph1">`wchar_t`</ph> and <ph id="ph2">`char`</ph> sequences.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>converts between <ph id="ph1">`char16_t`</ph> sequences encoded as UTF-16 and <ph id="ph2">`char`</ph> sequences encoded as UTF-8.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>converts between <ph id="ph1">`char32_t`</ph> sequences encoded as UTF-32 (UCS-4) and <ph id="ph2">`char`</ph> sequences encoded as UTF-8.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>codecvt</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The constructor for objects of class <ph id="ph1">`codecvt`</ph> that serves as a locale facet to handle conversions.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>extern_type</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A character type that is used for external representations.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>intern_type</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A character type that is used for internal representations.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>state_type</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A character type that is used to represent intermediate states during conversions between internal and external representations.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>always_noconv</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Tests whether no conversions need be done.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>do_always_noconv</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A virtual function called to test whether no conversions need be done.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>do_encoding</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A virtual function that tests if the encoding of the <ph id="ph1">`Byte`</ph> stream is state dependent, whether the ratio between the <ph id="ph2">`Byte`</ph>s used and the <ph id="ph3">`CharType`</ph>s produced is constant, and, if so, determines the value of that ratio.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>do_in</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert a sequence of internal <ph id="ph1">`Byte`</ph>s to a sequence of external <ph id="ph2">`CharType`</ph>s.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>do_length</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A virtual function that determines how many <ph id="ph1">`Byte`</ph>s from a given sequence of external <ph id="ph2">`Byte`</ph>s produce not more than a given number of internal <ph id="ph3">`CharType`</ph>s and returns that number of <ph id="ph4">`Byte`</ph>s.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>do_max_length</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A virtual function that returns the maximum number of external Bytes necessary to produce one internal <ph id="ph1">`CharType`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>do_out</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert a sequence of internal <ph id="ph1">`CharType`</ph>s to a sequence of external Bytes.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>do_unshift</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A virtual function called to provide the <ph id="ph1">`Byte`</ph>s needed in a state-dependent conversion to complete the last character in a sequence of <ph id="ph2">`Byte`</ph>s.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>encoding</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Tests if the encoding of the <ph id="ph1">`Byte`</ph> stream is state dependent, whether the ratio between the <ph id="ph2">`Byte`</ph>s used and the <ph id="ph3">`CharType`</ph>s produced is constant, and, if so, determines the value of that ratio.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>in</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Converts an external representation of a sequence of <ph id="ph1">`Byte`</ph>s to an internal representation of a sequence of <ph id="ph2">`CharType`</ph>s.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>length</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Determines how many <ph id="ph1">`Byte`</ph>s from a given sequence of external <ph id="ph2">`Byte`</ph>s produce not more than a given number of internal <ph id="ph3">`CharType`</ph>s and returns that number of <ph id="ph4">`Byte`</ph>s.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>max_length</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of external <ph id="ph1">`Byte`</ph>s necessary to produce one internal <ph id="ph2">`CharType`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>out</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Converts a sequence of internal <ph id="ph1">`CharType`</ph>s to a sequence of external <ph id="ph2">`Byte`</ph>s.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>unshift</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Provides the external <ph id="ph1">`Byte`</ph>s needed in a state-dependent conversion to complete the last character in the sequence of <ph id="ph2">`Byte`</ph>s.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>locale&gt;</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>codecvt::always_noconv</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Tests whether no conversions need be done.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A Boolean value that is <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if no conversions need be done; <bpt id="p2">**</bpt>false<ept id="p2">**</ept> is at least one needs to be done.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_always_noconv<ept id="p1">](#codecvt__do_always_noconv)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>codecvt::codecvt</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The constructor for objects of class codecvt that serves as a locale facet to handle conversions.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Integer value used to specify the type of memory management for the object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The possible values for the <ph id="ph1">`_Refs`</ph> parameter and their significance are:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>0: The lifetime of the object is managed by the locales that contain it.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>1: The lifetime of the object must be manually managed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>0: These values are not defined.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The constructor initializes its <ph id="ph1">`locale::facet`</ph> base object with <bpt id="p1">**</bpt>locale::<ept id="p1">**</ept><bpt id="p2">[</bpt>facet<ept id="p2">](../standard-library/locale-class.md#facet_class)</ept>( <ph id="ph2">`_Refs`</ph>) <bpt id="p3">*</bpt>.<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>codecvt::do_always_noconv</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A virtual function called to test whether no conversions need be done.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The protected virtual member function returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> only if every call to <bpt id="p2">[</bpt>do_in<ept id="p2">](#codecvt__do_in)</ept> or <bpt id="p3">[</bpt>do_out<ept id="p3">](#codecvt__do_out)</ept> returns <bpt id="p4">**</bpt>noconv<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The template version always returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>always_noconv<ept id="p1">](#codecvt__always_noconv)</ept>, which calls <ph id="ph1">`do_always_noconv`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>codecvt::do_encoding</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A virtual function that tests if the encoding of the <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept> stream is state dependent, whether the ratio between the <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept>s used and the <bpt id="p3">**</bpt>CharType<ept id="p3">**</ept>s produced is constant and, if so, determines the value of that ratio.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The protected virtual member function returns:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>–1, if the encoding of sequences of type <ph id="ph1">`extern_type`</ph> is state dependent.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>0, if the encoding involves sequences of varying lengths.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>N<ept id="p1">*</ept>, if the encoding involves only sequences of length <bpt id="p2">*</bpt>N<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>encoding<ept id="p1">](#codecvt__encoding)</ept>, which calls <ph id="ph1">`do_encoding`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>codecvt::do_in</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert a sequence of external <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>s to a sequence of internal <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept>s.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The conversion state that is maintained between calls to the member function.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Pointer to the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Pointer beyond the end of the converted sequence, to the first unconverted character.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the converted sequence.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Pointer to the end of the converted sequence.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept> that comes after the last converted <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept>, to the first unaltered character in the destination sequence.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A return that indicates the success, partial success, or failure of the operation.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The function returns:</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::error<ept id="p1">**</ept> if the source sequence is ill formed.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>if the function performs no conversion.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::ok<ept id="p1">**</ept> if the conversion succeeds.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::partial<ept id="p1">**</ept> if the source is insufficient or if the destination is not large enough, for the conversion to succeed.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>must represent the initial conversion state at the beginning of a new source sequence.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The function alters its stored value as needed to reflect the current state of a successful conversion.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Its stored value is otherwise unspecified.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>in<ept id="p1">](#codecvt__in)</ept>, which calls <ph id="ph1">`do_in`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>codecvt::do_length</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A virtual function that determines how many <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>s from a given sequence of external <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept>s produce not more than a given number of internal <bpt id="p3">**</bpt>CharType<ept id="p3">**</ept>s and returns that number of <bpt id="p4">**</bpt>Byte<ept id="p4">**</ept>s.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The conversion state that is maintained between calls to the member function.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the external sequence.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Pointer to the end of the external sequence.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The maximum number of <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>s that can be returned by the member function.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>An integer that represents a count of the maximum number of conversions, not greater than <ph id="ph1">`_Len2`</ph>, defined by the external source sequence at [ <ph id="ph2">` first1`</ph>, <ph id="ph3">` last1`</ph>).</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The protected virtual member function effectively calls <ph id="ph1">`do_in`</ph>( <ph id="ph2">`_State`</ph>, <ph id="ph3">` first1`</ph>, <ph id="ph4">` last1`</ph>, <ph id="ph5">` next1`</ph>, <ph id="ph6">`_Buf`</ph>, <ph id="ph7">`_Buf` + `_Len2`</ph>, <ph id="ph8">` next2`</ph>) for <ph id="ph9">`_State`</ph> (a copy of state), some buffer <ph id="ph10">`_Buf`</ph>, and pointers <ph id="ph11">` next1`</ph>and <ph id="ph12">` next2`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>It then returns <ph id="ph1">` next2`</ph> – <bpt id="p1">**</bpt>buf<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Thus, it counts the maximum number of conversions, not greater than <ph id="ph1">`_Len2`</ph>, defined by the source sequence at [ <ph id="ph2">` first1`</ph>, <ph id="ph3">` last1`</ph>).</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The template version always returns the lesser of <ph id="ph1">` last1`</ph> – <ph id="ph2">` first1`</ph> and <ph id="ph3">`_Len2`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>length<ept id="p1">](#codecvt__length)</ept>, which calls <bpt id="p2">**</bpt>do_length<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>codecvt::do_max_length</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A virtual function that returns the maximum number of external <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>s necessary to produce one internal <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The maximum number of <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>s necessary to produce one <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The protected virtual member function returns the largest permissible value that can be returned by <bpt id="p1">[</bpt>do_length<ept id="p1">](#codecvt__do_length)</ept>( <ph id="ph1">` first1`</ph>, <ph id="ph2">` last1`</ph>, 1) for arbitrary valid values of <ph id="ph3">` first1`</ph> and <ph id="ph4">` last1`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>max_length<ept id="p1">](#codecvt__max_length)</ept>, which calls <ph id="ph1">`do_max_length`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>codecvt::do_out</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert a sequence of internal <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>s to a sequence of external <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept>s.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The conversion state that is maintained between calls to the member function.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Pointer to the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Reference to a pointer to the first unconverted <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>, after the last <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept> converted.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the converted sequence.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Pointer to the end of the converted sequence.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Reference to a pointer to the first unconverted <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>, after the last <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept> converted.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The function returns:</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::error<ept id="p1">**</ept> if the source sequence is ill formed.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>if the function performs no conversion.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::ok<ept id="p1">**</ept> if the conversion succeeds.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::partial<ept id="p1">**</ept> if the source is insufficient or if the destination is not large enough for the conversion to succeed.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>must represent the initial conversion state at the beginning of a new source sequence.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The function alters its stored value as needed to reflect the current state of a successful conversion.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Its stored value is otherwise unspecified.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>out<ept id="p1">](#codecvt__out)</ept>, which calls <ph id="ph1">`do_out`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>codecvt::do_unshift</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A virtual function called to provide the <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>s needed in a state-dependent conversion to complete the last character in a sequence of <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept>s.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The conversion state that is maintained between calls to the member function.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Pointer to the first position in the destination range.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Pointer to the last position in the destination range.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Pointer to the first unaltered element in the destination sequence.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The function returns:</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::error<ept id="p1">**</ept> if _ <bpt id="p2">*</bpt>State<ept id="p2">*</ept> represents an invalid state</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>if the function performs no conversion</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::ok<ept id="p1">**</ept> if the conversion succeeds</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::partial<ept id="p1">**</ept> if the destination is not large enough for the conversion to succeed</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to convert the source element <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>(0) to a destination sequence that it stores within [ <ph id="ph1">` first2`</ph>, <ph id="ph2">` last2`</ph>), except for the terminating element <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept>(0).</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>It always stores in <ph id="ph1">` next2`</ph> a pointer to the first unaltered element in the destination sequence.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>_ <bpt id="p1">*</bpt>State<ept id="p1">*</ept> must represent the initial conversion state at the beginning of a new source sequence.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The function alters its stored value as needed to reflect the current state of a successful conversion.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Typically, converting the source element <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>(0) leaves the current state in the initial conversion state.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>unshift<ept id="p1">](#codecvt__unshift)</ept>, which calls <ph id="ph1">`do_unshift`</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>codecvt::encoding</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Tests if the encoding of the <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept> stream is state dependent, whether the ratio between the <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept>s used and the <bpt id="p3">**</bpt>CharType<ept id="p3">**</ept>s produced is constant, and, if so, determines the value of that ratio.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>If the return value is positive then that value is the constant number of <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept> characters required to produce the <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept> character.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The protected virtual member function returns:</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>–1, if the encoding of sequences of type <ph id="ph1">`extern_type`</ph> is state dependent.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>0, if the encoding involves sequences of varying lengths.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>N<ept id="p1">*</ept>, if the encoding involves only sequences of length <bpt id="p2">*</bpt>N.<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_encoding<ept id="p1">](#codecvt__do_encoding)</ept>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>codecvt::extern_type</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>A character type that is used for external representations.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>codecvt::in</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Converts an external representation of a sequence of <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>s to an internal representation of a sequence of <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept>s.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The conversion state that is maintained between calls to the member function.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Pointer to the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Pointer beyond the end of the converted sequence to the first unconverted character.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the converted sequence.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Pointer to the end of the converted sequence.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept> that comes after the last converted <bpt id="p2">**</bpt>Chartype<ept id="p2">**</ept> to the first unaltered character in the destination sequence.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A return that indicates the success, partial success or failure of the operation.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The function returns:</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::error<ept id="p1">**</ept> if the source sequence is ill formed.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>if the function performs no conversion.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::ok<ept id="p1">**</ept> if the conversion succeeds.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::partial<ept id="p1">**</ept> if the source is insufficient or if the destination is not large enough for the conversion to succeed.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>must represent the initial conversion state at the beginning of a new source sequence.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The function alters its stored value, as needed, to reflect the current state of a successful conversion.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>After a partial conversion, <ph id="ph1">`_State`</ph> must be set so as to allow the conversion to resume when new characters arrive.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_in<ept id="p1">](#codecvt__do_in)</ept>( <ph id="ph1">`_State`</ph>, _ <bpt id="p2">*</bpt>First1,  last1,  next1, First2, _Llast2,  next2<ept id="p2">*</ept>).</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>codecvt::intern_type</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A character type that is used for internal representations.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>codecvt::length</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Determines how many <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>s from a given sequence of external <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept>s produce not more than a given number of internal <bpt id="p3">**</bpt>CharType<ept id="p3">**</ept>s and returns that number of <bpt id="p4">**</bpt>Byte<ept id="p4">**</ept>s.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The conversion state that is maintained between calls to the member function.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the external sequence.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Pointer to the end of the external sequence.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The maximum number of Bytes that can be returned by the member function.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>An integer that represents a count of the maximum number of conversions, not greater than <ph id="ph1">`_Len2`</ph>, defined by the external source sequence at [ <ph id="ph2">` first1`</ph>, <ph id="ph3">` last1`</ph>).</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_length<ept id="p1">](#codecvt__do_length)</ept>( <bpt id="p2">*</bpt>_State,  first1<ept id="p2">*</ept>, <ph id="ph1">` last1`</ph>, <ph id="ph2">`_Len2`</ph>).</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>codecvt::max_length</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of external <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>s necessary to produce one internal <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The maximum number of <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>s necessary to produce one <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_max_length<ept id="p1">](#codecvt__do_max_length)</ept>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>codecvt::out</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Converts a sequence of internal <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>s to a sequence of external <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept>s.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The conversion state that is maintained between calls to the member function.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Pointer to the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Reference to a pointer to the first unconverted <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept> after the last <bpt id="p2">**</bpt>CharType<ept id="p2">**</ept> converted.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the converted sequence.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Pointer to the end of the converted sequence.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Reference to a pointer to the first unconverted <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept> after the last converted <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_out<ept id="p1">](#codecvt__do_out)</ept>( <ph id="ph1">`_State`</ph>, <ph id="ph2">` first1`</ph>, <ph id="ph3">` last1`</ph>, <ph id="ph4">` next1`</ph>, <ph id="ph5">` first2`</ph>, <ph id="ph6">` last2`</ph>, <ph id="ph7">` next2`</ph>).</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>codecvt::do_out<ept id="p1">](#codecvt__do_out)</ept>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>codecvt::state_type</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>A character type that is used to represent intermediate states during conversions between internal and external representations.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>StateType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>codecvt::unshift</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Provides the <bpt id="p1">**</bpt>Byte<ept id="p1">**</ept>s needed in a state-dependent conversion to complete the last character in a sequence of <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept>s.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The conversion state that is maintained between calls to the member function.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Pointer to the first position in the destination range.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Pointer to the last position in the destination range.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Pointer to the first unaltered element in the destination sequence.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The function returns:</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::error<ept id="p1">**</ept> if state represents an invalid state.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>if the function performs no conversion.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::ok<ept id="p1">**</ept> if the conversion succeeds.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>codecvt_base::partial<ept id="p1">**</ept> if the destination is not large enough for the conversion to succeed.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to convert the source element <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>(0) to a destination sequence that it stores within [ <ph id="ph1">` first2`</ph>, <ph id="ph2">` last2`</ph>), except for the terminating element <bpt id="p2">**</bpt>Byte<ept id="p2">**</ept>(0).</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>It always stores in <ph id="ph1">` next2`</ph> a pointer to the first unaltered element in the destination sequence.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>must represent the initial conversion state at the beginning of a new source sequence.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The function alters its stored value, as needed, to reflect the current state of a successful conversion.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Typically, converting the source element <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>(0) leaves the current state in the initial conversion state.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_unshift<ept id="p1">](#codecvt__do_unshift)</ept>( <ph id="ph1">`_State`</ph>, <ph id="ph2">` first2`</ph>, <ph id="ph3">` last2`</ph>, <ph id="ph4">` next2`</ph> ).</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>locale&gt;</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Code Pages</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Locale Names, Languages, and Country/Region Strings</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>