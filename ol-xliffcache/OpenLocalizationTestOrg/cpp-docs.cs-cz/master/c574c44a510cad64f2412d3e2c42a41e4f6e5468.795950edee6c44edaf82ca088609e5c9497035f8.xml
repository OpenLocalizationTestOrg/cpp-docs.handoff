{"nodes":[{"pos":[12,46],"content":"Function Call (C) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Function Call (C) | Microsoft Docs","pos":[0,34]}]},{"content":"Function Call (C)","pos":[640,657]},{"content":"A \"function call\" is an expression that includes the name of the function being called or the value of a function pointer and, optionally, the arguments being passed to the function.","pos":[658,840]},{"content":"Syntax","pos":[849,855]},{"content":"<bpt id=\"p1\">*</bpt>postfix-expression<ept id=\"p1\">*</ept>:","pos":[859,880],"source":"*postfix-expression*:"},{"content":"<bpt id=\"p1\"> *</bpt>postfix-expression<ept id=\"p1\">*</ept>  <bpt id=\"p2\">**</bpt>(<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>argument-expression-list<ept id=\"p3\">*</ept> opt<bpt id=\"p4\">**</bpt>)<ept id=\"p4\">**</ept>","pos":[883,948],"source":" *postfix-expression*  **(**  *argument-expression-list* opt**)**"},{"content":"<bpt id=\"p1\">*</bpt>argument-expression-list<ept id=\"p1\">*</ept>:","pos":[955,982],"source":"*argument-expression-list*:"},{"content":"assignment-expression","pos":[987,1008]},{"pos":[1016,1074],"content":"<bpt id=\"p1\">*</bpt>argument-expression-list<ept id=\"p1\">*</ept>  <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>assignment-expression<ept id=\"p3\">*</ept>","source":"*argument-expression-list*  **,**  *assignment-expression*"},{"content":"The <bpt id=\"p1\">*</bpt>postfix-expression<ept id=\"p1\">*</ept> must evaluate to a function address (for example, a function identifier or the value of a function pointer), and <bpt id=\"p2\">*</bpt>argument-expression-list<ept id=\"p2\">*</ept> is a list of expressions (separated by commas) whose values (the \"arguments\") are passed to the function.","pos":[1081,1351],"source":"The *postfix-expression* must evaluate to a function address (for example, a function identifier or the value of a function pointer), and *argument-expression-list* is a list of expressions (separated by commas) whose values (the \"arguments\") are passed to the function."},{"content":"The <bpt id=\"p1\">*</bpt>argument-expression-list<ept id=\"p1\">*</ept> argument can be empty.","pos":[1352,1405],"source":" The *argument-expression-list* argument can be empty."},{"content":"A function-call expression has the value and type of the function's return value.","pos":[1412,1493]},{"content":"A function cannot return an object of array type.","pos":[1494,1543]},{"content":"If the function's return type is <ph id=\"ph1\">`void`</ph> (that is, the function has been declared never to return a value), the function-call expression also has <ph id=\"ph2\">`void`</ph> type.","pos":[1544,1701],"source":" If the function's return type is `void` (that is, the function has been declared never to return a value), the function-call expression also has `void` type."},{"content":"(See <bpt id=\"p1\">[</bpt>Function Calls<ept id=\"p1\">](../c-language/function-calls.md)</ept> for more information.)","pos":[1702,1779],"source":" (See [Function Calls](../c-language/function-calls.md) for more information.)"},{"content":"See Also","pos":[1788,1796]},{"content":"Function Call Operator: ()","pos":[1801,1827]}],"content":"---\ntitle: \"Function Call (C) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"function calls, C functions\"\n  - \"functions [C], calling\"\n  - \"function calls\"\nms.assetid: 35c66719-3f15-4d3b-97da-4e19dc97b308\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Function Call (C)\nA \"function call\" is an expression that includes the name of the function being called or the value of a function pointer and, optionally, the arguments being passed to the function.  \n  \n## Syntax  \n *postfix-expression*:  \n *postfix-expression*  **(**  *argument-expression-list* opt**)**  \n  \n *argument-expression-list*:  \n *assignment-expression*  \n  \n *argument-expression-list*  **,**  *assignment-expression*  \n  \n The *postfix-expression* must evaluate to a function address (for example, a function identifier or the value of a function pointer), and *argument-expression-list* is a list of expressions (separated by commas) whose values (the \"arguments\") are passed to the function. The *argument-expression-list* argument can be empty.  \n  \n A function-call expression has the value and type of the function's return value. A function cannot return an object of array type. If the function's return type is `void` (that is, the function has been declared never to return a value), the function-call expression also has `void` type. (See [Function Calls](../c-language/function-calls.md) for more information.)  \n  \n## See Also  \n [Function Call Operator: ()](../cpp/function-call-operator-parens.md)"}