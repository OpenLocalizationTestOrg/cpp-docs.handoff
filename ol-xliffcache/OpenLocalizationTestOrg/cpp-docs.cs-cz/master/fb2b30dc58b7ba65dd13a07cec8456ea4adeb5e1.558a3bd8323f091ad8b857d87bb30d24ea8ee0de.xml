{"nodes":[{"pos":[12,50],"content":"&lt;set&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>set<ph id=\"ph2\">&amp;gt;</ph> functions | Microsoft Docs","pos":[0,38],"source":"&lt;set&gt; functions | Microsoft Docs"}]},{"pos":[252,273],"content":"&lt;set&gt; functions","linkify":"&lt;set&gt; functions","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>set<ph id=\"ph2\">&amp;gt;</ph> functions","pos":[0,21],"source":"&lt;set&gt; functions"}]},{"pos":[289,308],"content":"<bpt id=\"p1\">[</bpt>swap (map)<ept id=\"p1\">](#swap)</ept>","source":"[swap (map)](#swap)"},{"pos":[309,342],"content":"<bpt id=\"p1\">[</bpt>swap (multiset)<ept id=\"p1\">](#swap_multiset)</ept>","source":"[swap (multiset)](#swap_multiset)"},{"pos":[353,385],"content":"<bpt id=\"p1\">&lt;a name=\"swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  swap  (map)","linkify":"<a name=\"swap\"></a>  swap  (map)","source":"<a name=\"swap\"></a>  swap  (map)"},{"content":"Exchanges the elements of two sets.","pos":[387,422]},{"pos":[581,591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The set providing the elements to be swapped, or the set whose elements are to be exchanged with those of the set <ph id=\"ph1\">`left`</ph>.","pos":[606,727],"source":" The set providing the elements to be swapped, or the set whose elements are to be exchanged with those of the set `left`."},{"content":"The set whose elements are to be exchanged with those of the set <ph id=\"ph1\">`right`</ph>.","pos":[744,817],"source":" The set whose elements are to be exchanged with those of the set `right`."},{"pos":[827,834],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function is an algorithm specialized on the container class set to execute the member function <ph id=\"ph1\">`left``.`</ph><bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](../standard-library/set-class.md#set__swap)</ept>( <ph id=\"ph2\">`right`</ph>).","pos":[838,1016],"source":"The template function is an algorithm specialized on the container class set to execute the member function `left``.`[swap](../standard-library/set-class.md#set__swap)( `right`)."},{"content":"This is an instance of the partial ordering of function templates by the compiler.","pos":[1017,1099]},{"content":"When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function.","pos":[1100,1306]},{"content":"The general version of the template function","pos":[1307,1351]},{"pos":[1358,1414],"content":"<ph id=\"ph1\">`template`</ph> <ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>classT<ept id=\"p1\">**</ept><ph id=\"ph3\">&gt; </ph><bpt id=\"p2\">**</bpt>void swap<ept id=\"p2\">**</ept>( <bpt id=\"p3\">**</bpt>T&amp;<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>T&amp;<ept id=\"p4\">**</ept>)","source":"`template` \\< **classT**> **void swap**( **T&**, **T&**)"},{"content":"in the algorithm class works by assignment and is a slow operation.","pos":[1421,1488]},{"content":"The specialized version in each container is much faster as it can work with the internal representation of the container class.","pos":[1489,1617]},{"pos":[1627,1634],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1639,1797],"content":"See the code example for the member class <bpt id=\"p1\">[</bpt>set::swap<ept id=\"p1\">](../standard-library/set-class.md#set__swap)</ept> for an example of the use of the template version of <ph id=\"ph1\">`swap`</ph>.","source":"See the code example for the member class [set::swap](../standard-library/set-class.md#set__swap) for an example of the use of the template version of `swap`."},{"pos":[1807,1853],"content":"<bpt id=\"p1\">&lt;a name=\"swap_multiset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  swap  (multiset)","linkify":"<a name=\"swap_multiset\"></a>  swap  (multiset)","source":"<a name=\"swap_multiset\"></a>  swap  (multiset)"},{"content":"Exchanges the elements of two multisets.","pos":[1855,1895]},{"pos":[2064,2074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The multiset providing the elements to be swapped, or the multiset whose elements are to be exchanged with those of the multiset <ph id=\"ph1\">`left`</ph>.","pos":[2089,2225],"source":" The multiset providing the elements to be swapped, or the multiset whose elements are to be exchanged with those of the multiset `left`."},{"content":"The multiset whose elements are to be exchanged with those of the multiset <ph id=\"ph1\">`right`</ph>.","pos":[2242,2325],"source":" The multiset whose elements are to be exchanged with those of the multiset `right`."},{"pos":[2335,2342],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function is an algorithm specialized on the container class multiset to execute the member function <ph id=\"ph1\">`left``.`</ph><bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](../standard-library/multiset-class.md#multiset__swap)</ept>( <ph id=\"ph2\">`right`</ph>).","pos":[2346,2539],"source":"The template function is an algorithm specialized on the container class multiset to execute the member function `left``.`[swap](../standard-library/multiset-class.md#multiset__swap)( `right`)."},{"content":"This is an instance of the partial ordering of function templates by the compiler.","pos":[2540,2622]},{"content":"When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function.","pos":[2623,2829]},{"content":"The general version of the template function","pos":[2830,2874]},{"pos":[2881,2937],"content":"<ph id=\"ph1\">`template`</ph> <ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>classT<ept id=\"p1\">**</ept><ph id=\"ph3\">&gt; </ph><bpt id=\"p2\">**</bpt>void swap<ept id=\"p2\">**</ept>( <bpt id=\"p3\">**</bpt>T&amp;<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>T&amp;<ept id=\"p4\">**</ept>)","source":"`template` \\< **classT**> **void swap**( **T&**, **T&**)"},{"content":"in the algorithm class works by assignment and is a slow operation.","pos":[2944,3011]},{"content":"The specialized version in each container is much faster as it can work with the internal representation of the container class.","pos":[3012,3140]},{"pos":[3150,3157],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3162,3334],"content":"See the code example for the member class <bpt id=\"p1\">[</bpt>multiset::swap<ept id=\"p1\">](../standard-library/multiset-class.md#multiset__swap)</ept>for an example of the use of the template version of <ph id=\"ph1\">`swap`</ph>.","source":"See the code example for the member class [multiset::swap](../standard-library/multiset-class.md#multiset__swap)for an example of the use of the template version of `swap`."},{"pos":[3343,3351],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3355,3391],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>set&gt;<ept id=\"p1\">](../standard-library/set.md)</ept>","source":"[\\<set>](../standard-library/set.md)"}],"content":"---\ntitle: \"&lt;set&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: d1277d14-8502-46c0-b820-bcda820f9406\ncaps.latest.revision: 7\nmanager: \"ghogen\"\n---\n# &lt;set&gt; functions\n|||  \n|-|-|  \n|[swap (map)](#swap)|[swap (multiset)](#swap_multiset)|  \n  \n##  <a name=\"swap\"></a>  swap  (map)\n Exchanges the elements of two sets.  \n  \n```\ntemplate <class Key, class Traits, class Allocator>  \nvoid swap(set<Key, Traits, Allocator>& left, set<Key, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `right`  \n The set providing the elements to be swapped, or the set whose elements are to be exchanged with those of the set `left`.  \n  \n `left`  \n The set whose elements are to be exchanged with those of the set `right`.  \n  \n### Remarks  \n The template function is an algorithm specialized on the container class set to execute the member function `left``.`[swap](../standard-library/set-class.md#set__swap)( `right`). This is an instance of the partial ordering of function templates by the compiler. When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function. The general version of the template function  \n  \n `template` \\< **classT**> **void swap**( **T&**, **T&**)  \n  \n in the algorithm class works by assignment and is a slow operation. The specialized version in each container is much faster as it can work with the internal representation of the container class.  \n  \n### Example  \n  See the code example for the member class [set::swap](../standard-library/set-class.md#set__swap) for an example of the use of the template version of `swap`.  \n  \n##  <a name=\"swap_multiset\"></a>  swap  (multiset)\n Exchanges the elements of two multisets.  \n  \n```\ntemplate <class Key, class Traits, class Allocator>  \nvoid swap(multiset<Key, Traits, Allocator>& left, multiset<Key, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `right`  \n The multiset providing the elements to be swapped, or the multiset whose elements are to be exchanged with those of the multiset `left`.  \n  \n `left`  \n The multiset whose elements are to be exchanged with those of the multiset `right`.  \n  \n### Remarks  \n The template function is an algorithm specialized on the container class multiset to execute the member function `left``.`[swap](../standard-library/multiset-class.md#multiset__swap)( `right`). This is an instance of the partial ordering of function templates by the compiler. When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function. The general version of the template function  \n  \n `template` \\< **classT**> **void swap**( **T&**, **T&**)  \n  \n in the algorithm class works by assignment and is a slow operation. The specialized version in each container is much faster as it can work with the internal representation of the container class.  \n  \n### Example  \n  See the code example for the member class [multiset::swap](../standard-library/multiset-class.md#multiset__swap)for an example of the use of the template version of `swap`.  \n  \n## See Also  \n [\\<set>](../standard-library/set.md)\n\n\n\n"}