{"nodes":[{"pos":[12,43],"content":"valarray Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"valarray Class | Microsoft Docs","pos":[0,31]}]},{"pos":[664,678],"content":"valarray Class","linkify":"valarray Class","nodes":[{"content":"valarray Class","pos":[0,14]}]},{"pos":[679,905],"content":"The template class describes an object that controls a sequence of elements of type <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> that are stored as an array, designed for performing high-speed mathematical operations, and optimized for computational performance.","source":"The template class describes an object that controls a sequence of elements of type **Type** that are stored as an array, designed for performing high-speed mathematical operations, and optimized for computational performance."},{"pos":[914,921],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The class is a representation of the mathematical concept of an ordered set of values and the elements are numbered sequentially from zero.","pos":[925,1064]},{"content":"The class is described as a near container because it supports some, but not all, of the capabilities that first-class sequence containers, such as <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept>, support.","pos":[1065,1268],"source":" The class is described as a near container because it supports some, but not all, of the capabilities that first-class sequence containers, such as [vector](../standard-library/vector-class.md), support."},{"content":"It differs from template class vector in two important ways:","pos":[1269,1329]},{"pos":[1339,1517],"content":"It defines numerous arithmetic operations between corresponding elements of <bpt id=\"p1\">**</bpt>valarray<ph id=\"ph1\">\\&lt;</ph>Type&gt;<ept id=\"p1\">**</ept> objects of the same type and length, such as <bpt id=\"p2\">*</bpt>xarr<ept id=\"p2\">*</ept> = cos( <bpt id=\"p3\">*</bpt>yarr<ept id=\"p3\">*</ept>) + sin( <bpt id=\"p4\">*</bpt>zarr<ept id=\"p4\">*</ept>).","source":"It defines numerous arithmetic operations between corresponding elements of **valarray\\<Type>** objects of the same type and length, such as *xarr* = cos( *yarr*) + sin( *zarr*)."},{"pos":[1527,1671],"content":"It defines a variety of interesting ways to subscript a <bpt id=\"p1\">**</bpt>valarray<ph id=\"ph1\">\\&lt;</ph>Type&gt;<ept id=\"p1\">**</ept> object, by overloading <bpt id=\"p2\">[</bpt>operator&amp;#91;&amp;#93;<ept id=\"p2\">](#valarray__operator_at)</ept>.","source":"It defines a variety of interesting ways to subscript a **valarray\\<Type>** object, by overloading [operator&#91;&#93;](#valarray__operator_at)."},{"pos":[1678,1706],"content":"An object of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>:","source":"An object of class **Type**:"},{"content":"Has a public default constructor, destructor, copy constructor, and assignment operator, with conventional behavior.","pos":[1716,1832]},{"content":"Defines the arithmetic operators and math functions, as needed, that are defined for the floating-point types, with conventional behavior.","pos":[1842,1980]},{"content":"In particular, no subtle differences may exist between copy construction and default construction followed by assignment.","pos":[1987,2108]},{"content":"None of the operations on objects of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> may throw exceptions.","pos":[2109,2182],"source":" None of the operations on objects of class **Type** may throw exceptions."},{"pos":[2192,2204],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[2225,2256],"content":"<bpt id=\"p1\">[</bpt>valarray<ept id=\"p1\">](#valarray__valarray)</ept>","source":"[valarray](#valarray__valarray)"},{"pos":[2257,2404],"content":"Constructs a <ph id=\"ph1\">`valarray`</ph> of a specific size or with elements of a specific value or as a copy of another <ph id=\"ph2\">`valarray`</ph> or subset of another <ph id=\"ph3\">`valarray`</ph>.","source":"Constructs a `valarray` of a specific size or with elements of a specific value or as a copy of another `valarray` or subset of another `valarray`."},{"pos":[2415,2423],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[2444,2479],"content":"<bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#valarray__value_type)</ept>","source":"[value_type](#valarray__value_type)"},{"pos":[2480,2546],"content":"A type that represents the type of element stored in a <ph id=\"ph1\">`valarray`</ph>.","source":"A type that represents the type of element stored in a `valarray`."},{"pos":[2557,2573],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[2594,2619],"content":"<bpt id=\"p1\">[</bpt>apply<ept id=\"p1\">](#valarray__apply)</ept>","source":"[apply](#valarray__apply)"},{"pos":[2620,2681],"content":"Applies a specified function to each element of a <ph id=\"ph1\">`valarray`</ph>.","source":"Applies a specified function to each element of a `valarray`."},{"pos":[2686,2713],"content":"<bpt id=\"p1\">[</bpt>cshift<ept id=\"p1\">](#valarray__cshift)</ept>","source":"[cshift](#valarray__cshift)"},{"pos":[2714,2800],"content":"Cyclically shifts all the elements in a <ph id=\"ph1\">`valarray`</ph> by a specified number of positions.","source":"Cyclically shifts all the elements in a `valarray` by a specified number of positions."},{"pos":[2805,2828],"content":"<bpt id=\"p1\">[</bpt>free<ept id=\"p1\">](#valarray__free)</ept>","source":"[free](#valarray__free)"},{"pos":[2829,2869],"content":"Frees the memory used by the <ph id=\"ph1\">`valarray`</ph>.","source":"Frees the memory used by the `valarray`."},{"pos":[2874,2895],"content":"<bpt id=\"p1\">[</bpt>max<ept id=\"p1\">](#valarray__max)</ept>","source":"[max](#valarray__max)"},{"pos":[2896,2938],"content":"Finds the largest element in a <ph id=\"ph1\">`valarray`</ph>.","source":"Finds the largest element in a `valarray`."},{"pos":[2943,2964],"content":"<bpt id=\"p1\">[</bpt>min<ept id=\"p1\">](#valarray__min)</ept>","source":"[min](#valarray__min)"},{"pos":[2965,3008],"content":"Finds the smallest element in a <ph id=\"ph1\">`valarray`</ph>.","source":"Finds the smallest element in a `valarray`."},{"pos":[3013,3040],"content":"<bpt id=\"p1\">[</bpt>resize<ept id=\"p1\">](#valarray__resize)</ept>","source":"[resize](#valarray__resize)"},{"pos":[3041,3151],"content":"Changes the number of elements in a <ph id=\"ph1\">`valarray`</ph> to a specified number, adding or removing elements as required.","source":"Changes the number of elements in a `valarray` to a specified number, adding or removing elements as required."},{"pos":[3156,3181],"content":"<bpt id=\"p1\">[</bpt>shift<ept id=\"p1\">](#valarray__shift)</ept>","source":"[shift](#valarray__shift)"},{"pos":[3182,3257],"content":"Shifts all the elements in a <ph id=\"ph1\">`valarray`</ph> by a specified number of positions.","source":"Shifts all the elements in a `valarray` by a specified number of positions."},{"pos":[3262,3285],"content":"<bpt id=\"p1\">[</bpt>size<ept id=\"p1\">](#valarray__size)</ept>","source":"[size](#valarray__size)"},{"pos":[3286,3331],"content":"Finds the number of elements in a <ph id=\"ph1\">`valarray`</ph>.","source":"Finds the number of elements in a `valarray`."},{"pos":[3336,3357],"content":"<bpt id=\"p1\">[</bpt>sum<ept id=\"p1\">](#valarray__sum)</ept>","source":"[sum](#valarray__sum)"},{"pos":[3358,3431],"content":"Determines the sum of all the elements in a <ph id=\"ph1\">`valarray`</ph> of nonzero length.","source":"Determines the sum of all the elements in a `valarray` of nonzero length."},{"pos":[3436,3459],"content":"<bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](#valarray__swap)</ept>","source":"[swap](#valarray__swap)"},{"pos":[3471,3480],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[3501,3537],"content":"<bpt id=\"p1\">[</bpt>operator!<ept id=\"p1\">](#valarray__operator_not)</ept>","source":"[operator!](#valarray__operator_not)"},{"pos":[3538,3625],"content":"A unary operator that obtains the logical <ph id=\"ph1\">`NOT`</ph> values of each element in a <ph id=\"ph2\">`valarray`</ph>.","source":"A unary operator that obtains the logical `NOT` values of each element in a `valarray`."},{"pos":[3630,3670],"content":"<bpt id=\"p1\">[</bpt>operator%=<ept id=\"p1\">](#valarray__operator_mod_eq)</ept>","source":"[operator%=](#valarray__operator_mod_eq)"},{"pos":[3671,3810],"content":"Obtains the remainder of dividing the elements of an array element-wise either by a specified <ph id=\"ph1\">`valarray`</ph> or by a value of the element type.","source":"Obtains the remainder of dividing the elements of an array element-wise either by a specified `valarray` or by a value of the element type."},{"pos":[3815,3856],"content":"<bpt id=\"p1\">[</bpt>operator&amp;=<ept id=\"p1\">](#valarray__operator_amp__eq)</ept>","source":"[operator&=](#valarray__operator_amp__eq)"},{"pos":[3857,4008],"content":"Obtains the bitwise <ph id=\"ph1\">`AND`</ph> of elements in an array either with the corresponding elements in a specified <ph id=\"ph2\">`valarray`</ph> or with a value of the element type.","source":"Obtains the bitwise `AND` of elements in an array either with the corresponding elements in a specified `valarray` or with a value of the element type."},{"pos":[4013,4058],"content":"<bpt id=\"p1\">[</bpt>operator&gt;&gt;=<ept id=\"p1\">](#valarray__operator_gt__gt__eq)</ept>","source":"[operator>>=](#valarray__operator_gt__gt__eq)"},{"pos":[4059,4216],"content":"Right-shifts the bits for each element of a <ph id=\"ph1\">`valarray`</ph> operand a specified number of positions or by an element-wise amount specified by a second <ph id=\"ph2\">`valarray`</ph>.","source":"Right-shifts the bits for each element of a `valarray` operand a specified number of positions or by an element-wise amount specified by a second `valarray`."},{"pos":[4221,4266],"content":"<bpt id=\"p1\">[</bpt>operator&lt;&lt;=<ept id=\"p1\">](#valarray__operator_lt__lt__eq)</ept>","source":"[operator<<=](#valarray__operator_lt__lt__eq)"},{"pos":[4267,4423],"content":"Left-shifts the bits for each element of a <ph id=\"ph1\">`valarray`</ph> operand a specified number of positions or by an element-wise amount specified by a second <ph id=\"ph2\">`valarray`</ph>.","source":"Left-shifts the bits for each element of a `valarray` operand a specified number of positions or by an element-wise amount specified by a second `valarray`."},{"pos":[4428,4469],"content":"<bpt id=\"p1\">[</bpt>operator*=<ept id=\"p1\">](#valarray__operator_star_eq)</ept>","source":"[operator*=](#valarray__operator_star_eq)"},{"pos":[4470,4591],"content":"Multiplies the elements of a specified <ph id=\"ph1\">`valarray`</ph> or a value of the element type, element-wise, to an operand <ph id=\"ph2\">`valarray`</ph>.","source":"Multiplies the elements of a specified `valarray` or a value of the element type, element-wise, to an operand `valarray`."},{"pos":[4596,4632],"content":"<bpt id=\"p1\">[</bpt>operator+<ept id=\"p1\">](#valarray__operator_add)</ept>","source":"[operator+](#valarray__operator_add)"},{"pos":[4633,4702],"content":"A unary operator that applies a plus to each element in a <ph id=\"ph1\">`valarray`</ph>.","source":"A unary operator that applies a plus to each element in a `valarray`."},{"pos":[4707,4747],"content":"<bpt id=\"p1\">[</bpt>operator+=<ept id=\"p1\">](#valarray__operator_add_eq)</ept>","source":"[operator+=](#valarray__operator_add_eq)"},{"pos":[4748,4863],"content":"Adds the elements of a specified <ph id=\"ph1\">`valarray`</ph> or a value of the element type, element-wise, to an operand <ph id=\"ph2\">`valarray`</ph>.","source":"Adds the elements of a specified `valarray` or a value of the element type, element-wise, to an operand `valarray`."},{"pos":[4868,4901],"content":"<bpt id=\"p1\">[</bpt>operator-<ept id=\"p1\">](#valarray__operator-)</ept>","source":"[operator-](#valarray__operator-)"},{"pos":[4902,4972],"content":"A unary operator that applies a minus to each element in a <ph id=\"ph1\">`valarray`</ph>.","source":"A unary operator that applies a minus to each element in a `valarray`."},{"pos":[4977,5014],"content":"<bpt id=\"p1\">[</bpt>operator-=<ept id=\"p1\">](#valarray__operator-_eq)</ept>","source":"[operator-=](#valarray__operator-_eq)"},{"pos":[5015,5137],"content":"Subtracts the elements of a specified <ph id=\"ph1\">`valarray`</ph> or a value of the element type, element-wise, from an operand <ph id=\"ph2\">`valarray`</ph>.","source":"Subtracts the elements of a specified `valarray` or a value of the element type, element-wise, from an operand `valarray`."},{"pos":[5142,5179],"content":"<bpt id=\"p1\">[</bpt>operator/=<ept id=\"p1\">](#valarray__operator__eq)</ept>","source":"[operator/=](#valarray__operator__eq)"},{"pos":[5180,5296],"content":"Divides an operand <ph id=\"ph1\">`valarray`</ph> element-wise by the elements of a specified <ph id=\"ph2\">`valarray`</ph> or a value of the element type.","source":"Divides an operand `valarray` element-wise by the elements of a specified `valarray` or a value of the element type."},{"pos":[5301,5336],"content":"<bpt id=\"p1\">[</bpt>operator=<ept id=\"p1\">](#valarray__operator_eq)</ept>","source":"[operator=](#valarray__operator_eq)"},{"pos":[5337,5522],"content":"Assigns elements to a <ph id=\"ph1\">`valarray`</ph> whose values are specified either directly or as part of some other <ph id=\"ph2\">`valarray`</ph> or by a <ph id=\"ph3\">`slice_array`</ph>, <ph id=\"ph4\">`gslice_array`</ph>, <ph id=\"ph5\">`mask_array`</ph>, or <ph id=\"ph6\">`indirect_array`</ph>.","source":"Assigns elements to a `valarray` whose values are specified either directly or as part of some other `valarray` or by a `slice_array`, `gslice_array`, `mask_array`, or `indirect_array`."},{"pos":[5527,5571],"content":"<bpt id=\"p1\">[</bpt>operator&amp;#91;&amp;#93;<ept id=\"p1\">](#valarray__operator_at)</ept>","source":"[operator&#91;&#93;](#valarray__operator_at)"},{"content":"Returns a reference to an element or its value at specified index or a specified subset.","pos":[5572,5660]},{"pos":[5665,5705],"content":"<bpt id=\"p1\">[</bpt>operator^=<ept id=\"p1\">](#valarray__operator_xor_eq)</ept>","source":"[operator^=](#valarray__operator_xor_eq)"},{"pos":[5706,5846],"content":"Obtains the element-wise exclusive logical or operator ( <ph id=\"ph1\">`XOR`</ph>) of an array with either a specified valarray or a value of the element type.","source":"Obtains the element-wise exclusive logical or operator ( `XOR`) of an array with either a specified valarray or a value of the element type."},{"pos":[5851,5895],"content":"<bpt id=\"p1\">[</bpt>operator&amp;#124;=<ept id=\"p1\">](#valarray__operator_or_eq)</ept>","source":"[operator&#124;=](#valarray__operator_or_eq)"},{"pos":[5896,6046],"content":"Obtains the bitwise <ph id=\"ph1\">`OR`</ph> of elements in an array either with the corresponding elements in a specified <ph id=\"ph2\">`valarray`</ph> or with a value of the element type.","source":"Obtains the bitwise `OR` of elements in an array either with the corresponding elements in a specified `valarray` or with a value of the element type."},{"pos":[6051,6088],"content":"<bpt id=\"p1\">[</bpt>operator~<ept id=\"p1\">](#valarray__operator_dtor)</ept>","source":"[operator~](#valarray__operator_dtor)"},{"pos":[6089,6176],"content":"A unary operator that obtains the bitwise <ph id=\"ph1\">`NOT`</ph> values of each element in a <ph id=\"ph2\">`valarray`</ph>.","source":"A unary operator that obtains the bitwise `NOT` values of each element in a `valarray`."},{"pos":[6186,6198],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6202,6225],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>valarray&gt;","source":"**Header:** \\<valarray>"},{"pos":[6232,6250],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[6260,6307],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__apply\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::apply","linkify":"<a name=\"valarray__apply\"></a>  valarray::apply","source":"<a name=\"valarray__apply\"></a>  valarray::apply"},{"content":"Applies a specified function to each element of a valarray.","pos":[6311,6370]},{"pos":[6494,6504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>_Func(Type)<ept id=\"p1\">*</ept>","pos":[6508,6521],"source":"*_Func(Type)*"},{"content":"The function object to be applied to each element of the operand valarray.","pos":[6525,6599]},{"content":"<bpt id=\"p1\">*</bpt>_Func(const Type&amp;)<ept id=\"p1\">*</ept>","pos":[6606,6626],"source":"*_Func(const Type&)*"},{"content":"The function object for const to be applied to each element of the operand valarray.","pos":[6630,6714]},{"pos":[6724,6736],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6740,6844],"content":"A valarray whose elements have had <ph id=\"ph1\">`_Func`</ph> applied element-wise to the elements of the operand valarray.","source":"A valarray whose elements have had `_Func` applied element-wise to the elements of the operand valarray."},{"pos":[6854,6861],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6865,7069],"content":"The member function returns an object of class <bpt id=\"p1\">[</bpt>valarray<ept id=\"p1\">](../standard-library/valarray-class.md)</ept><bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\&lt;</ph>Type&gt;<ept id=\"p2\">**</ept>, of length <bpt id=\"p3\">[</bpt>size<ept id=\"p3\">](#valarray__size)</ept>, each of whose elements <ph id=\"ph2\">`I`</ph> is <bpt id=\"p4\">**</bpt>func<ept id=\"p4\">**</ept>(( <bpt id=\"p5\">**</bpt><ph id=\"ph3\">\\*</ph>this<ept id=\"p5\">**</ept>)[ <ph id=\"ph4\">`I`</ph>]).","source":"The member function returns an object of class [valarray](../standard-library/valarray-class.md)**\\<Type>**, of length [size](#valarray__size), each of whose elements `I` is **func**(( **\\*this**)[ `I`])."},{"pos":[7079,7086],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8167,8216],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__cshift\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::cshift","linkify":"<a name=\"valarray__cshift\"></a>  valarray::cshift","source":"<a name=\"valarray__cshift\"></a>  valarray::cshift"},{"content":"Cyclically shifts all the elements in a valarray by a specified number of positions.","pos":[8220,8304]},{"pos":[8369,8379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of places the elements are to be shifted forward.","pos":[8395,8455]},{"pos":[8465,8477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8481,8663],"content":"A new valarray in which all the elements have been moved <ph id=\"ph1\">` count`</ph> positions cyclically toward the front of the valarray, left with respect to their positions in the operand valarray.","source":"A new valarray in which all the elements have been moved ` count` positions cyclically toward the front of the valarray, left with respect to their positions in the operand valarray."},{"pos":[8673,8680],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8684,8765],"content":"A positive value of <ph id=\"ph1\">` count`</ph> shifts the elements cyclically left <ph id=\"ph2\">` count`</ph> places.","source":"A positive value of ` count` shifts the elements cyclically left ` count` places."},{"pos":[8772,8854],"content":"A negative value of <ph id=\"ph1\">` count`</ph> shifts the elements cyclically right <ph id=\"ph2\">` count`</ph> places.","source":"A negative value of ` count` shifts the elements cyclically right ` count` places."},{"pos":[8864,8871],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10295,10340],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__free\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::free","linkify":"<a name=\"valarray__free\"></a>  valarray::free","source":"<a name=\"valarray__free\"></a>  valarray::free"},{"content":"Frees the memory used by the valarray.","pos":[10344,10382]},{"pos":[10420,10427],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This nonstandard function is equivalent to assigning an empty valarray.","pos":[10431,10502]},{"content":"For example:","pos":[10503,10515]},{"pos":[10605,10648],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__max\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::max","linkify":"<a name=\"valarray__max\"></a>  valarray::max","source":"<a name=\"valarray__max\"></a>  valarray::max"},{"content":"Finds the largest element in a valarray.","pos":[10652,10692]},{"pos":[10735,10747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The maximum value of the elements in the operand valarray.","pos":[10751,10809]},{"pos":[10819,10826],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10830,11017],"content":"The member function compares values by applying <bpt id=\"p1\">**</bpt>operator<ph id=\"ph1\">\\&lt;</ph><ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>operator&gt;<ept id=\"p2\">**</ept> between pairs of elements of class <bpt id=\"p3\">**</bpt>Type<ept id=\"p3\">**</ept>, for which operators must be provided for the element <bpt id=\"p4\">**</bpt>Type<ept id=\"p4\">**</ept>.","source":"The member function compares values by applying **operator\\<** or **operator>** between pairs of elements of class **Type**, for which operators must be provided for the element **Type**."},{"pos":[11027,11034],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11847,11890],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__min\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::min","linkify":"<a name=\"valarray__min\"></a>  valarray::min","source":"<a name=\"valarray__min\"></a>  valarray::min"},{"content":"Finds the smallest element in a valarray.","pos":[11894,11935]},{"pos":[11978,11990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The minimum value of the elements in the operand valarray.","pos":[11994,12052]},{"pos":[12062,12069],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12073,12260],"content":"The member function compares values by applying <bpt id=\"p1\">**</bpt>operator<ph id=\"ph1\">\\&lt;</ph><ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>operator&gt;<ept id=\"p2\">**</ept> between pairs of elements of class <bpt id=\"p3\">**</bpt>Type<ept id=\"p3\">**</ept>, for which operators must be provided for the element <bpt id=\"p4\">**</bpt>Type<ept id=\"p4\">**</ept>.","source":"The member function compares values by applying **operator\\<** or **operator>** between pairs of elements of class **Type**, for which operators must be provided for the element **Type**."},{"pos":[12270,12277],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13092,13150],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_not\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator!","linkify":"<a name=\"valarray__operator_not\"></a>  valarray::operator!","source":"<a name=\"valarray__operator_not\"></a>  valarray::operator!"},{"pos":[13154,13241],"content":"A unary operator that obtains the logical <bpt id=\"p1\">**</bpt>NOT<ept id=\"p1\">**</ept> values of each element in a valarray.","source":"A unary operator that obtains the logical **NOT** values of each element in a valarray."},{"pos":[13300,13312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The valarray of Boolean values that are the negation of the element values of the operand valarray.","pos":[13316,13415]},{"pos":[13425,13432],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The logical operation <bpt id=\"p1\">**</bpt>NOT<ept id=\"p1\">**</ept> negates the elements because it converts all zeros into ones and regards all nonzero values as ones and converts them into zeros.","pos":[13436,13595],"source":"The logical operation **NOT** negates the elements because it converts all zeros into ones and regards all nonzero values as ones and converts them into zeros."},{"content":"The returned valarray of Boolean values is of the same size as the operand valarray.","pos":[13596,13680]},{"pos":[13687,13887],"content":"There is also a bitwise <bpt id=\"p1\">**</bpt>NOT<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>valarray::operator~<ept id=\"p2\">](#valarray__operator_dtor)</ept> that negates on the level of individual bits within the binary representation of <ph id=\"ph1\">`char`</ph> and <ph id=\"ph2\">`int`</ph> elements of a valarray.","source":"There is also a bitwise **NOT**[valarray::operator~](#valarray__operator_dtor) that negates on the level of individual bits within the binary representation of `char` and `int` elements of a valarray."},{"pos":[13897,13904],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14848,14910],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_mod_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator%=","linkify":"<a name=\"valarray__operator_mod_eq\"></a>  valarray::operator%=","source":"<a name=\"valarray__operator_mod_eq\"></a>  valarray::operator%="},{"content":"Obtains the remainder of dividing the elements of an array element-wise either by a specified valarray or by a value of the element type.","pos":[14914,15051]},{"pos":[15181,15191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The valarray or value of an element type identical to that of the operand valarray that is to divide, element-wise, the operand valarray.","pos":[15207,15344]},{"pos":[15354,15366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15370,15481],"content":"A valarray whose elements are the remainder from the element-wise division of the operand valarray by <ph id=\"ph1\">` right.`</ph>","source":"A valarray whose elements are the remainder from the element-wise division of the operand valarray by ` right.`"},{"pos":[15491,15498],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16664,16731],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_amp__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator<ph id=\"ph1\">&amp;amp;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"valarray__operator_amp__eq\"></a>  valarray::operator&amp;=","source":"<a name=\"valarray__operator_amp__eq\"></a>  valarray::operator&amp;="},{"pos":[16735,16886],"content":"Obtains the bitwise <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> of elements in an array either with the corresponding elements in a specified valarray or with a value of the element type.","source":"Obtains the bitwise **AND** of elements in an array either with the corresponding elements in a specified valarray or with a value of the element type."},{"pos":[17016,17026],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the logical <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> with the operand valarray.","pos":[17042,17212],"source":" The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the logical **AND** with the operand valarray."},{"pos":[17222,17234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17238,17337],"content":"A valarray whose elements are the element-wise logical <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> of the operand valarray by <ph id=\"ph1\">` right.`</ph>","source":"A valarray whose elements are the element-wise logical **AND** of the operand valarray by ` right.`"},{"pos":[17347,17354],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17358,17558],"content":"A bitwise operation can only be used to manipulate bits in <ph id=\"ph1\">`char`</ph> and <ph id=\"ph2\">`int`</ph> data types and variants and not on <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>longdouble<ept id=\"p3\">**</ept>, <ph id=\"ph3\">`void`</ph>, <ph id=\"ph4\">`bool`</ph>, or other, more complex data types.","source":"A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, **longdouble**, `void`, `bool`, or other, more complex data types."},{"content":"The bitwise AND has the same truth table as the logical <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> but applies to the data type on the level of the individual bits.","pos":[17565,17694],"source":"The bitwise AND has the same truth table as the logical **AND** but applies to the data type on the level of the individual bits."},{"content":"Given bits <bpt id=\"p1\">*</bpt>b<ept id=\"p1\">*</ept>1 and <bpt id=\"p2\">*</bpt>b<ept id=\"p2\">*</ept>2, <bpt id=\"p3\">*</bpt>b<ept id=\"p3\">*</ept>1 <bpt id=\"p4\">**</bpt>AND<ept id=\"p4\">**</ept> <bpt id=\"p5\">*</bpt>b<ept id=\"p5\">*</ept>2 is <bpt id=\"p6\">**</bpt>true<ept id=\"p6\">**</ept> if both bits are true; <bpt id=\"p7\">**</bpt>false<ept id=\"p7\">**</ept> if at least one is false.","pos":[17695,17809],"source":" Given bits *b*1 and *b*2, *b*1 **AND** *b*2 is **true** if both bits are true; **false** if at least one is false."},{"pos":[17819,17826],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19023,19096],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_gt__gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">&amp;gt;</ph><ph id=\"ph3\">=</ph>","linkify":"<a name=\"valarray__operator_gt__gt__eq\"></a>  valarray::operator&gt;&gt;=","source":"<a name=\"valarray__operator_gt__gt__eq\"></a>  valarray::operator&gt;&gt;="},{"content":"Right-shifts the bits for each element of a valarray operand a specified number of positions or by an element-wise amount specified by a second valarray.","pos":[19100,19253]},{"pos":[19385,19395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value indicating the amount of right shift or valarray whose elements indicate the element-wise amount of right shift.","pos":[19411,19533]},{"pos":[19543,19555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19559,19642],"content":"A valarray whose elements have been shifted right the amount specified in <ph id=\"ph1\">` right`</ph>.","source":"A valarray whose elements have been shifted right the amount specified in ` right`."},{"pos":[19652,19659],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Signed numbers have their signs preserved.","pos":[19663,19705]},{"pos":[19715,19722],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20894,20967],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_lt__lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph><ph id=\"ph3\">=</ph>","linkify":"<a name=\"valarray__operator_lt__lt__eq\"></a>  valarray::operator&lt;&lt;=","source":"<a name=\"valarray__operator_lt__lt__eq\"></a>  valarray::operator&lt;&lt;="},{"content":"Left-shifts the bits for each element of a valarray operand a specified number of positions or by an element-wise amount specified by a second valarray.","pos":[20971,21123]},{"pos":[21255,21265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value indicating the amount of left shift or valarray whose elements indicate the element-wise amount of left shift.","pos":[21281,21401]},{"pos":[21411,21423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21427,21509],"content":"A valarray whose elements have been shifted left the amount specified in <ph id=\"ph1\">` right`</ph>.","source":"A valarray whose elements have been shifted left the amount specified in ` right`."},{"pos":[21519,21526],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Signed numbers have their signs preserved.","pos":[21530,21572]},{"pos":[21582,21589],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22798,22861],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_star_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator*=","linkify":"<a name=\"valarray__operator_star_eq\"></a>  valarray::operator*=","source":"<a name=\"valarray__operator_star_eq\"></a>  valarray::operator*="},{"content":"Multiplies the elements of a specified valarray or a value of the element type, element-wise, to an operand valarray.","pos":[22865,22982]},{"pos":[23112,23122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The valarray or value of an element type identical to that of the operand valarray that is to multiply, element-wise, the operand valarray.","pos":[23138,23277]},{"pos":[23287,23299],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23303,23395],"content":"A valarray whose elements are the element-wise product of the operand valarray and <ph id=\"ph1\">` right.`</ph>","source":"A valarray whose elements are the element-wise product of the operand valarray and ` right.`"},{"pos":[23405,23412],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24572,24630],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator+","linkify":"<a name=\"valarray__operator_add\"></a>  valarray::operator+","source":"<a name=\"valarray__operator_add\"></a>  valarray::operator+"},{"content":"A unary operator that applies a plus to each element in a valarray.","pos":[24634,24701]},{"pos":[24760,24772],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A valarray whose elements are plus those of the operand array.","pos":[24776,24838]},{"pos":[24848,24855],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25786,25848],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_add_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator+=","linkify":"<a name=\"valarray__operator_add_eq\"></a>  valarray::operator+=","source":"<a name=\"valarray__operator_add_eq\"></a>  valarray::operator+="},{"content":"Adds the elements of a specified valarray or a value of the element type, element-wise, to an operand valarray.","pos":[25852,25963]},{"pos":[26093,26103],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The valarray or value of an element type identical to that of the operand valarray that is to be added, element-wise, to the operand valarray.","pos":[26119,26261]},{"pos":[26271,26283],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26287,26375],"content":"A valarray whose elements are the element-wise sum of the operand valarray and <ph id=\"ph1\">` right.`</ph>","source":"A valarray whose elements are the element-wise sum of the operand valarray and ` right.`"},{"pos":[26385,26392],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27523,27578],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator-\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator-","linkify":"<a name=\"valarray__operator-\"></a>  valarray::operator-","source":"<a name=\"valarray__operator-\"></a>  valarray::operator-"},{"content":"A unary operator that applies a minus to each element in a valarray.","pos":[27582,27650]},{"pos":[27709,27721],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A valarray whose elements are minus those of the operand array.","pos":[27725,27788]},{"pos":[27798,27805],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28740,28799],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator-_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator-=","linkify":"<a name=\"valarray__operator-_eq\"></a>  valarray::operator-=","source":"<a name=\"valarray__operator-_eq\"></a>  valarray::operator-="},{"content":"Subtracts the elements of a specified valarray or a value of the element type, element-wise, from an operand valarray.","pos":[28803,28921]},{"pos":[29051,29061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The valarray or value of an element type identical to that of the operand valarray that is to be subtracted, element-wise, from the operand valarray.","pos":[29077,29226]},{"pos":[29236,29248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29252,29347],"content":"A valarray whose elements are the element-wise difference of the operand valarray and <ph id=\"ph1\">` right.`</ph>","source":"A valarray whose elements are the element-wise difference of the operand valarray and ` right.`"},{"pos":[29357,29364],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30516,30575],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator/=","linkify":"<a name=\"valarray__operator__eq\"></a>  valarray::operator/=","source":"<a name=\"valarray__operator__eq\"></a>  valarray::operator/="},{"content":"Divides an operand valarray element-wise by the elements of a specified valarray or a value of the element type.","pos":[30579,30691]},{"pos":[30821,30831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The valarray or value of an element type identical to that of the operand valarray that is to be divided, element-wise, into the operand valarray.","pos":[30847,30993]},{"pos":[31003,31015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31019,31119],"content":"A valarray whose elements are the element-wise quotient of the operand valarray divided by <ph id=\"ph1\">` right.`</ph>","source":"A valarray whose elements are the element-wise quotient of the operand valarray divided by ` right.`"},{"pos":[31129,31136],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[32304,32361],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator=","linkify":"<a name=\"valarray__operator_eq\"></a>  valarray::operator=","source":"<a name=\"valarray__operator_eq\"></a>  valarray::operator="},{"content":"Assigns elements to a valarray whose values are specified either directly or as part of some other valarray or by a slice_array, gslice_array, mask_array, or indirect_array.","pos":[32365,32538]},{"pos":[32981,32991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The valarray to be copied into the operand valarray.","pos":[33007,33059]},{"content":"The value to be assigned to the elements of the operand valarray.","pos":[33076,33141]},{"content":"The slice_array to be copied into the operand valarray.","pos":[33165,33220]},{"content":"The gslice_array to be copied into the operand valarray.","pos":[33245,33301]},{"content":"The mask_array to be copied into the operand valarray.","pos":[33324,33378]},{"content":"The indirect_array to be copied into the operand valarray.","pos":[33400,33458]},{"pos":[33468,33480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33484,33594],"content":"The first member operator replaces the controlled sequence with a copy of the sequence controlled by <ph id=\"ph1\">` right`</ph>.","source":"The first member operator replaces the controlled sequence with a copy of the sequence controlled by ` right`."},{"pos":[33601,33747],"content":"The second member operator is the same as the first, but with an <bpt id=\"p1\">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id=\"p1\">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.","source":"The second member operator is the same as the first, but with an [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md)."},{"pos":[33754,33851],"content":"The third member operator replaces each element of the controlled sequence with a copy of <ph id=\"ph1\">` val`</ph>.","source":"The third member operator replaces each element of the controlled sequence with a copy of ` val`."},{"pos":[33858,34041],"content":"The remaining member operators replace those elements of the controlled sequence selected by their arguments, which are generated only by <bpt id=\"p1\">[</bpt>operator&amp;#91;&amp;#93;<ept id=\"p1\">](#valarray__operator_at)</ept>.","source":"The remaining member operators replace those elements of the controlled sequence selected by their arguments, which are generated only by [operator&#91;&#93;](#valarray__operator_at)."},{"content":"If the value of a member in the replacement controlled sequence depends on a member in the initial controlled sequence, the result is undefined.","pos":[34048,34192]},{"pos":[34202,34209],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the length of the controlled sequence changes, the result is generally undefined.","pos":[34213,34297]},{"content":"In this implementation, however, the effect is merely to invalidate any pointers or references to elements in the controlled sequence.","pos":[34298,34432]},{"pos":[34442,34449],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[35766,35824],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator[]","linkify":"<a name=\"valarray__operator_at\"></a>  valarray::operator[]","source":"<a name=\"valarray__operator_at\"></a>  valarray::operator[]"},{"content":"Returns a reference to an element or its value at specified index or a specified subset.","pos":[35828,35916]},{"pos":[36507,36517],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the element to be assigned a value.","pos":[36531,36579]},{"content":"A slice_array of a valarray that specifies a subset to be selected or returned to a new valarray.","pos":[36603,36700]},{"content":"A gslice_array of a valarray that specifies a subset to be selected or returned to a new valarray.","pos":[36725,36823]},{"content":"<bpt id=\"p1\">*</bpt>_Boolarray<ept id=\"p1\">*</ept>","pos":[36830,36842],"source":"*_Boolarray*"},{"content":"A bool_array of a valarray that specifies a subset to be selected or returned to a new valarray.","pos":[36846,36942]},{"content":"An indirect_array of a valarray that specifies a subset to be selected or returned to a new valarray.","pos":[36964,37065]},{"pos":[37075,37087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to an element or its value at specified index or a specified subset.","pos":[37091,37171]},{"pos":[37181,37188],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member operator is overloaded to provide several ways to select sequences of elements from among those controlled by <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p1\">*</ept><bpt id=\"p2\">**</bpt>this<ept id=\"p2\">**</ept>.","pos":[37192,37326],"source":"The member operator is overloaded to provide several ways to select sequences of elements from among those controlled by *\\****this**."},{"content":"The first group of five member operators work in conjunction with various overloads of <bpt id=\"p1\">[</bpt>operator=<ept id=\"p1\">](#valarray__operator_eq)</ept> (and other assigning operators) to allow selective replacement (slicing) of the controlled sequence.","pos":[37327,37550],"source":" The first group of five member operators work in conjunction with various overloads of [operator=](#valarray__operator_eq) (and other assigning operators) to allow selective replacement (slicing) of the controlled sequence."},{"content":"The selected elements must exist.","pos":[37551,37584]},{"content":"When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element outside the bounds of the valarray.","pos":[37591,37724]},{"content":"See <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept> for more information.","pos":[37726,37813],"source":"  See [Checked Iterators](../standard-library/checked-iterators.md) for more information."},{"pos":[37823,37830],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[37835,38047],"content":"See the examples for <bpt id=\"p1\">[</bpt>slice::slice<ept id=\"p1\">](../standard-library/slice-class.md#slice__slice)</ept> and <bpt id=\"p2\">[</bpt>gslice::gslice<ept id=\"p2\">](../standard-library/gslice-class.md#gslice__gslice)</ept> for an example of how to declare and use the operator.","source":"See the examples for [slice::slice](../standard-library/slice-class.md#slice__slice) and [gslice::gslice](../standard-library/gslice-class.md#gslice__gslice) for an example of how to declare and use the operator."},{"pos":[38057,38119],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_xor_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator^=","linkify":"<a name=\"valarray__operator_xor_eq\"></a>  valarray::operator^=","source":"<a name=\"valarray__operator_xor_eq\"></a>  valarray::operator^="},{"pos":[38123,38265],"content":"Obtains the element-wise exclusive logical or operator ( <bpt id=\"p1\">**</bpt>XOR<ept id=\"p1\">**</ept>) of an array with either a specified valarray or a value of the element type.","source":"Obtains the element-wise exclusive logical or operator ( **XOR**) of an array with either a specified valarray or a value of the element type."},{"pos":[38395,38405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the exclusive logical <bpt id=\"p1\">**</bpt>XOR<ept id=\"p1\">**</ept> with the operand valarray.","pos":[38421,38601],"source":" The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the exclusive logical **XOR** with the operand valarray."},{"pos":[38611,38623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38627,38738],"content":"A valarray whose elements are the element-wise, exclusive logical <bpt id=\"p1\">**</bpt>XOR<ept id=\"p1\">**</ept> of the operand valarray and <ph id=\"ph1\">` right.`</ph>","source":"A valarray whose elements are the element-wise, exclusive logical **XOR** of the operand valarray and ` right.`"},{"pos":[38748,38755],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38759,39004],"content":"The exclusive logical or, referred to as <bpt id=\"p1\">**</bpt>XOR<ept id=\"p1\">**</ept>, has the following semantics: Given elements <bpt id=\"p2\">*</bpt>e<ept id=\"p2\">*</ept>1 and <bpt id=\"p3\">*</bpt>e<ept id=\"p3\">*</ept>2, <bpt id=\"p4\">*</bpt>e<ept id=\"p4\">*</ept>1 <bpt id=\"p5\">**</bpt>XOR<ept id=\"p5\">**</ept> <bpt id=\"p6\">*</bpt>e<ept id=\"p6\">*</ept>2 is <bpt id=\"p7\">**</bpt>true<ept id=\"p7\">**</ept> if exactly one of the elements is true; <bpt id=\"p8\">**</bpt>false<ept id=\"p8\">**</ept> if both elements are false or if both elements are true.","source":"The exclusive logical or, referred to as **XOR**, has the following semantics: Given elements *e*1 and *e*2, *e*1 **XOR** *e*2 is **true** if exactly one of the elements is true; **false** if both elements are false or if both elements are true."},{"pos":[39014,39021],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[40337,40403],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_or_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator&amp;#124;=","linkify":"<a name=\"valarray__operator_or_eq\"></a>  valarray::operator&#124;=","source":"<a name=\"valarray__operator_or_eq\"></a>  valarray::operator&#124;="},{"pos":[40407,40555],"content":"Obtains the bitwise <ph id=\"ph1\">`OR`</ph> of elements in an array either with the corresponding elements in a specified valarray or with a value of the element type.","source":"Obtains the bitwise `OR` of elements in an array either with the corresponding elements in a specified valarray or with a value of the element type."},{"pos":[40685,40695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the bitwise <ph id=\"ph1\">`OR`</ph> with the operand valarray.","pos":[40711,40878],"source":" The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the bitwise `OR` with the operand valarray."},{"pos":[40888,40900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40904,41000],"content":"A valarray whose elements are the element-wise bitwise <ph id=\"ph1\">`OR`</ph> of the operand valarray by <ph id=\"ph2\">` right.`</ph>","source":"A valarray whose elements are the element-wise bitwise `OR` of the operand valarray by ` right.`"},{"pos":[41010,41017],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41021,41221],"content":"A bitwise operation can only be used to manipulate bits in <ph id=\"ph1\">`char`</ph> and <ph id=\"ph2\">`int`</ph> data types and variants and not on <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>longdouble<ept id=\"p3\">**</ept>, <ph id=\"ph3\">`void`</ph>, <ph id=\"ph4\">`bool`</ph>, or other, more complex data types.","source":"A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, **longdouble**, `void`, `bool`, or other, more complex data types."},{"content":"The bitwise <ph id=\"ph1\">`OR`</ph> has the same truth table as the logical <ph id=\"ph2\">`OR`</ph> but applies to the data type on the level of the individual bits.","pos":[41228,41355],"source":"The bitwise `OR` has the same truth table as the logical `OR` but applies to the data type on the level of the individual bits."},{"content":"Given bits <bpt id=\"p1\">*</bpt>b<ept id=\"p1\">*</ept>1 and <bpt id=\"p2\">*</bpt>b<ept id=\"p2\">*</ept>2, <bpt id=\"p3\">*</bpt>b<ept id=\"p3\">*</ept>1 <ph id=\"ph1\">`OR`</ph> <bpt id=\"p4\">*</bpt>b<ept id=\"p4\">*</ept>2 is <bpt id=\"p5\">**</bpt>true<ept id=\"p5\">**</ept> if at least one of the bits is true; <bpt id=\"p6\">**</bpt>false<ept id=\"p6\">**</ept> if both bits are false.","pos":[41356,41479],"source":" Given bits *b*1 and *b*2, *b*1 `OR` *b*2 is **true** if at least one of the bits is true; **false** if both bits are false."},{"pos":[41489,41496],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42831,42890],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__operator_dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::operator~","linkify":"<a name=\"valarray__operator_dtor\"></a>  valarray::operator~","source":"<a name=\"valarray__operator_dtor\"></a>  valarray::operator~"},{"pos":[42894,42981],"content":"A unary operator that obtains the bitwise <bpt id=\"p1\">**</bpt>NOT<ept id=\"p1\">**</ept> values of each element in a valarray.","source":"A unary operator that obtains the bitwise **NOT** values of each element in a valarray."},{"pos":[43040,43052],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43056,43162],"content":"The valarray of Boolean values that are the bitwise <bpt id=\"p1\">**</bpt>NOT<ept id=\"p1\">**</ept> of the element values of the operand valarray.","source":"The valarray of Boolean values that are the bitwise **NOT** of the element values of the operand valarray."},{"pos":[43172,43179],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43183,43382],"content":"A bitwise operation can only be used to manipulate bits in <ph id=\"ph1\">`char`</ph> and <ph id=\"ph2\">`int`</ph> data types and variants and not on <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>longdouble<ept id=\"p3\">**</ept>, <ph id=\"ph3\">`void`</ph>, <ph id=\"ph4\">`bool`</ph> or other, more complex data types.","source":"A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, **longdouble**, `void`, `bool` or other, more complex data types."},{"content":"The bitwise <bpt id=\"p1\">**</bpt>NOT<ept id=\"p1\">**</ept> has the same truth table as the logical <bpt id=\"p2\">**</bpt>NOT<ept id=\"p2\">**</ept> but applies to the data type on the level of the individual bits.","pos":[43389,43522],"source":"The bitwise **NOT** has the same truth table as the logical **NOT** but applies to the data type on the level of the individual bits."},{"content":"Given bit <bpt id=\"p1\">*</bpt>b<ept id=\"p1\">*</ept>, ~ <bpt id=\"p2\">*</bpt>b<ept id=\"p2\">*</ept> is true if <bpt id=\"p3\">*</bpt>b<ept id=\"p3\">*</ept> is false and false if <bpt id=\"p4\">*</bpt>b<ept id=\"p4\">*</ept> is true.","pos":[43523,43593],"source":" Given bit *b*, ~ *b* is true if *b* is false and false if *b* is true."},{"content":"The logical <bpt id=\"p1\">**</bpt>NOT<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>operator!<ept id=\"p2\">](#valarray__operator_not)</ept>","pos":[43594,43649],"source":" The logical **NOT**[operator!](#valarray__operator_not)"},{"content":"applies on an element level, counting all nonzero values as <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>, and the result is a valarray of Boolean values.","pos":[43650,43767],"source":" applies on an element level, counting all nonzero values as **true**, and the result is a valarray of Boolean values."},{"content":"The bitwise <bpt id=\"p1\">**</bpt>NOToperator~<ept id=\"p1\">**</ept>, by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation.","pos":[43768,43911],"source":" The bitwise **NOToperator~**, by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation."},{"pos":[43921,43928],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[46370,46419],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__resize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::resize","linkify":"<a name=\"valarray__resize\"></a>  valarray::resize","source":"<a name=\"valarray__resize\"></a>  valarray::resize"},{"content":"Changes the number of elements in a valarray to a specified number.","pos":[46423,46490]},{"pos":[46609,46619],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of elements in the resized valarray.","pos":[46637,46684]},{"content":"The value to be given to the elements of the resized valarray.","pos":[46701,46763]},{"pos":[46773,46780],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first member function initializes elements with their default constructor.","pos":[46784,46862]},{"content":"Any pointers or references to elements in the controlled sequence are invalidated.","pos":[46869,46951]},{"pos":[46961,46968],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of the valarray::resize member function.","pos":[46973,47056]},{"pos":[48199,48246],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__shift\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::shift","linkify":"<a name=\"valarray__shift\"></a>  valarray::shift","source":"<a name=\"valarray__shift\"></a>  valarray::shift"},{"content":"Shifts all the elements in a valarray by a specified number of places.","pos":[48250,48320]},{"pos":[48384,48394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of places the elements are to be shifted forward.","pos":[48410,48470]},{"pos":[48480,48492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48496,48667],"content":"A new valarray in which all the elements have been moved <ph id=\"ph1\">` count`</ph> positions toward the front of the valarray, left with respect to their positions in the operand valarray.","source":"A new valarray in which all the elements have been moved ` count` positions toward the front of the valarray, left with respect to their positions in the operand valarray."},{"pos":[48677,48684],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[48688,48774],"content":"A positive value of <ph id=\"ph1\">` count`</ph> shifts the elements left <ph id=\"ph2\">` count`</ph> places, with zero fill.","source":"A positive value of ` count` shifts the elements left ` count` places, with zero fill."},{"pos":[48781,48868],"content":"A negative value of <ph id=\"ph1\">` count`</ph> shifts the elements right <ph id=\"ph2\">` count`</ph> places, with zero fill.","source":"A negative value of ` count` shifts the elements right ` count` places, with zero fill."},{"pos":[48878,48885],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[50336,50381],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::size","linkify":"<a name=\"valarray__size\"></a>  valarray::size","source":"<a name=\"valarray__size\"></a>  valarray::size"},{"content":"Finds the number of elements in a valarray.","pos":[50385,50428]},{"pos":[50474,50486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of elements in the operand valarray.","pos":[50490,50537]},{"pos":[50547,50554],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of the valarray::size member function.","pos":[50559,50640]},{"pos":[52466,52509],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__sum\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::sum","linkify":"<a name=\"valarray__sum\"></a>  valarray::sum","source":"<a name=\"valarray__sum\"></a>  valarray::sum"},{"content":"Determines the sum of all the elements in a valarray of nonzero length.","pos":[52513,52584]},{"pos":[52627,52639],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The sum of the elements of the operand valarray.","pos":[52643,52691]},{"pos":[52701,52708],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52712,52938],"content":"If the length is greater than one, the member function adds values to the sum by applying <ph id=\"ph1\">`operator+=`</ph> between pairs of elements of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>, which operator, consequently, needs be provided for elements of type <bpt id=\"p2\">**</bpt>Type<ept id=\"p2\">**</ept>.","source":"If the length is greater than one, the member function adds values to the sum by applying `operator+=` between pairs of elements of class **Type**, which operator, consequently, needs be provided for elements of type **Type**."},{"pos":[52948,52955],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[53647,53692],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::swap","linkify":"<a name=\"valarray__swap\"></a>  valarray::swap","source":"<a name=\"valarray__swap\"></a>  valarray::swap"},{"pos":[53696,53738],"content":"Exchanges the elements of two <ph id=\"ph1\">`valarray`</ph>s.","source":"Exchanges the elements of two `valarray`s."},{"pos":[53791,53801],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[53808,53817]},{"content":"Description","pos":[53818,53829]},{"pos":[53881,53931],"content":"A <ph id=\"ph1\">`valarray`</ph> providing the elements to be swapped.","source":"A `valarray` providing the elements to be swapped."},{"pos":[53942,53949],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function swaps the controlled sequences between <ph id=\"ph1\">`*this`</ph> and <ph id=\"ph2\">` right`</ph>.","pos":[53953,54033],"source":"The member function swaps the controlled sequences between `*this` and ` right`."},{"content":"It does so in constant time, it throws no exceptions, and it invalidates no references, pointers, or iterators that designate elements in the two controlled sequences.","pos":[54034,54201]},{"pos":[54211,54264],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__valarray\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::valarray","linkify":"<a name=\"valarray__valarray\"></a>  valarray::valarray","source":"<a name=\"valarray__valarray\"></a>  valarray::valarray"},{"content":"Constructs a valarray of a specific size or with elements of a specific value or as a copy of another valarray or subset of another valarray.","pos":[54268,54409]},{"pos":[54937,54947],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of elements to be in the valarray.","pos":[54962,55007]},{"content":"The value to be used in initializing the elements in the valarray.","pos":[55023,55089]},{"content":"Pointer to the values to be used to initialize the elements in the valarray.","pos":[55105,55181]},{"content":"An existing valarray to initialize the new valarray.","pos":[55199,55251]},{"content":"A slice_array whose element values are to be used in initializing the elements of the valarray being constructed.","pos":[55274,55387]},{"content":"A gslice_array whose element values are to be used in initializing the elements of the valarray being constructed.","pos":[55411,55525]},{"content":"A mask_array whose element values are to be used in initializing the elements of the valarray being constructed.","pos":[55547,55659]},{"content":"A indirect_array whose element values are to be used in initializing the elements of the valarray being constructed.","pos":[55680,55796]},{"content":"The initializer_list containing the elements to copy.","pos":[55814,55867]},{"pos":[55877,55884],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first (default) constructor initializes the object to an empty array.","pos":[55888,55961]},{"content":"The next three constructors each initialize the object to an array of <ph id=\"ph1\">`Count`</ph> elements as follows:","pos":[55962,56060],"source":" The next three constructors each initialize the object to an array of `Count` elements as follows:"},{"pos":[56070,56166],"content":"For explicit <ph id=\"ph1\">`valarray(size_t Count)`</ph>, each element is initialized with the default constructor.","source":"For explicit `valarray(size_t Count)`, each element is initialized with the default constructor."},{"pos":[56176,56255],"content":"For <ph id=\"ph1\">`valarray(const Type&amp; Val, Count)`</ph>, each element is initialized with <ph id=\"ph2\">`Val`</ph>.","source":"For `valarray(const Type& Val, Count)`, each element is initialized with `Val`."},{"pos":[56265,56365],"content":"For <ph id=\"ph1\">`valarray(const Type* Ptr, Count)`</ph>, the element at position <ph id=\"ph2\">`I`</ph> is initialized with <ph id=\"ph3\">`Ptr`</ph>[ <ph id=\"ph4\">`I`</ph>].","source":"For `valarray(const Type* Ptr, Count)`, the element at position `I` is initialized with `Ptr`[ `I`]."},{"content":"Each remaining constructor initializes the object to a valarray<ph id=\"ph1\">\\&lt;</ph>Type&gt; object determined by the subset specified in the argument.","pos":[56372,56501],"source":"Each remaining constructor initializes the object to a valarray\\<Type> object determined by the subset specified in the argument."},{"pos":[56508,56655],"content":"The last constructor is the same as the next to last, but with an <bpt id=\"p1\">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id=\"p1\">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.","source":"The last constructor is the same as the next to last, but with an [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md)."},{"pos":[56665,56672],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[57767,57824],"content":"<bpt id=\"p1\">&lt;a name=\"valarray__value_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  valarray::value_type","linkify":"<a name=\"valarray__value_type\"></a>  valarray::value_type","source":"<a name=\"valarray__value_type\"></a>  valarray::value_type"},{"content":"A type that represents the type of element stored in a valarray.","pos":[57828,57892]},{"pos":[57944,57951],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[57955,58013],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **Type**."},{"pos":[58023,58030],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[59067,59075],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[59079,59188],"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept>","source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)"}],"content":"---\ntitle: \"valarray Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"valarray\"\n  - \"std.valarray\"\n  - \"std::valarray\"\n  - \"valarray/std::valarray\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"valarray class\"\nms.assetid: 19b862f9-5d09-4003-8844-6ddd02c1a3a7\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# valarray Class\nThe template class describes an object that controls a sequence of elements of type **Type** that are stored as an array, designed for performing high-speed mathematical operations, and optimized for computational performance.  \n  \n## Remarks  \n The class is a representation of the mathematical concept of an ordered set of values and the elements are numbered sequentially from zero. The class is described as a near container because it supports some, but not all, of the capabilities that first-class sequence containers, such as [vector](../standard-library/vector-class.md), support. It differs from template class vector in two important ways:  \n  \n-   It defines numerous arithmetic operations between corresponding elements of **valarray\\<Type>** objects of the same type and length, such as *xarr* = cos( *yarr*) + sin( *zarr*).  \n  \n-   It defines a variety of interesting ways to subscript a **valarray\\<Type>** object, by overloading [operator&#91;&#93;](#valarray__operator_at).  \n  \n An object of class **Type**:  \n  \n-   Has a public default constructor, destructor, copy constructor, and assignment operator, with conventional behavior.  \n  \n-   Defines the arithmetic operators and math functions, as needed, that are defined for the floating-point types, with conventional behavior.  \n  \n In particular, no subtle differences may exist between copy construction and default construction followed by assignment. None of the operations on objects of class **Type** may throw exceptions.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[valarray](#valarray__valarray)|Constructs a `valarray` of a specific size or with elements of a specific value or as a copy of another `valarray` or subset of another `valarray`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[value_type](#valarray__value_type)|A type that represents the type of element stored in a `valarray`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[apply](#valarray__apply)|Applies a specified function to each element of a `valarray`.|  \n|[cshift](#valarray__cshift)|Cyclically shifts all the elements in a `valarray` by a specified number of positions.|  \n|[free](#valarray__free)|Frees the memory used by the `valarray`.|  \n|[max](#valarray__max)|Finds the largest element in a `valarray`.|  \n|[min](#valarray__min)|Finds the smallest element in a `valarray`.|  \n|[resize](#valarray__resize)|Changes the number of elements in a `valarray` to a specified number, adding or removing elements as required.|  \n|[shift](#valarray__shift)|Shifts all the elements in a `valarray` by a specified number of positions.|  \n|[size](#valarray__size)|Finds the number of elements in a `valarray`.|  \n|[sum](#valarray__sum)|Determines the sum of all the elements in a `valarray` of nonzero length.|  \n|[swap](#valarray__swap)||  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator!](#valarray__operator_not)|A unary operator that obtains the logical `NOT` values of each element in a `valarray`.|  \n|[operator%=](#valarray__operator_mod_eq)|Obtains the remainder of dividing the elements of an array element-wise either by a specified `valarray` or by a value of the element type.|  \n|[operator&=](#valarray__operator_amp__eq)|Obtains the bitwise `AND` of elements in an array either with the corresponding elements in a specified `valarray` or with a value of the element type.|  \n|[operator>>=](#valarray__operator_gt__gt__eq)|Right-shifts the bits for each element of a `valarray` operand a specified number of positions or by an element-wise amount specified by a second `valarray`.|  \n|[operator<<=](#valarray__operator_lt__lt__eq)|Left-shifts the bits for each element of a `valarray` operand a specified number of positions or by an element-wise amount specified by a second `valarray`.|  \n|[operator*=](#valarray__operator_star_eq)|Multiplies the elements of a specified `valarray` or a value of the element type, element-wise, to an operand `valarray`.|  \n|[operator+](#valarray__operator_add)|A unary operator that applies a plus to each element in a `valarray`.|  \n|[operator+=](#valarray__operator_add_eq)|Adds the elements of a specified `valarray` or a value of the element type, element-wise, to an operand `valarray`.|  \n|[operator-](#valarray__operator-)|A unary operator that applies a minus to each element in a `valarray`.|  \n|[operator-=](#valarray__operator-_eq)|Subtracts the elements of a specified `valarray` or a value of the element type, element-wise, from an operand `valarray`.|  \n|[operator/=](#valarray__operator__eq)|Divides an operand `valarray` element-wise by the elements of a specified `valarray` or a value of the element type.|  \n|[operator=](#valarray__operator_eq)|Assigns elements to a `valarray` whose values are specified either directly or as part of some other `valarray` or by a `slice_array`, `gslice_array`, `mask_array`, or `indirect_array`.|  \n|[operator&#91;&#93;](#valarray__operator_at)|Returns a reference to an element or its value at specified index or a specified subset.|  \n|[operator^=](#valarray__operator_xor_eq)|Obtains the element-wise exclusive logical or operator ( `XOR`) of an array with either a specified valarray or a value of the element type.|  \n|[operator&#124;=](#valarray__operator_or_eq)|Obtains the bitwise `OR` of elements in an array either with the corresponding elements in a specified `valarray` or with a value of the element type.|  \n|[operator~](#valarray__operator_dtor)|A unary operator that obtains the bitwise `NOT` values of each element in a `valarray`.|  \n  \n## Requirements  \n **Header:** \\<valarray>  \n  \n **Namespace:** std  \n  \n##  <a name=\"valarray__apply\"></a>  valarray::apply  \n Applies a specified function to each element of a valarray.  \n  \n```  \nvalarray<Type> apply(Type _Func(Type)) const;\n\nvalarray<Type> apply(Type _Func(constType&)) const;\n```  \n  \n### Parameters  \n *_Func(Type)*  \n The function object to be applied to each element of the operand valarray.  \n  \n *_Func(const Type&)*  \n The function object for const to be applied to each element of the operand valarray.  \n  \n### Return Value  \n A valarray whose elements have had `_Func` applied element-wise to the elements of the operand valarray.  \n  \n### Remarks  \n The member function returns an object of class [valarray](../standard-library/valarray-class.md)**\\<Type>**, of length [size](#valarray__size), each of whose elements `I` is **func**(( **\\*this**)[ `I`]).  \n  \n### Example  \n  \n```cpp  \n// valarray_apply.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint __cdecl MyApplyFunc( int n )  \n{  \n   return n*2;  \n}  \n  \nint main( int argc, char* argv[] )  \n{  \n   valarray<int> vaR(10), vaApplied(10);  \n   int i;  \n  \n   for ( i = 0; i < 10; i += 3 )  \n      vaR[i] = i;  \n  \n   for ( i = 1; i < 10; i += 3 )  \n      vaR[i] = 0;  \n  \n   for ( i = 2; i < 10; i += 3 )  \n      vaR[i] = -i;  \n  \n   cout << \"The initial Right valarray is: (\";  \n   for   ( i=0; i < 10; ++i )  \n      cout << \" \" << vaR[i];  \n   cout << \" )\" << endl;  \n  \n   vaApplied = vaR.apply( MyApplyFunc );  \n  \n   cout << \"The element-by-element result of \"  \n       << \"applying MyApplyFunc to vaR is the\\nvalarray: ( \";  \n   for ( i = 0; i < 10; ++i )  \n      cout << \" \" << vaApplied[i];  \n   cout << \" )\" << endl;  \n}  \n\\* Output:   \nThe initial Right valarray is: ( 0 0 -2 3 0 -5 6 0 -8 9 )  \nThe element-by-element result of applying MyApplyFunc to vaR is the  \nvalarray: (  0 0 -4 6 0 -10 12 0 -16 18 )  \n*\\  \n```  \n  \n##  <a name=\"valarray__cshift\"></a>  valarray::cshift  \n Cyclically shifts all the elements in a valarray by a specified number of positions.  \n  \n```  \nvalarray<Type> cshift(int count) const;\n```  \n  \n### Parameters  \n ` count`  \n The number of places the elements are to be shifted forward.  \n  \n### Return Value  \n A new valarray in which all the elements have been moved ` count` positions cyclically toward the front of the valarray, left with respect to their positions in the operand valarray.  \n  \n### Remarks  \n A positive value of ` count` shifts the elements cyclically left ` count` places.  \n  \n A negative value of ` count` shifts the elements cyclically right ` count` places.  \n  \n### Example  \n  \n```cpp  \n// valarray_cshift.cpp  \n// compile with: /EHsc  \n  \n#include <valarray>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    int i;  \n  \n    valarray<int> va1(10), va2(10);  \n    for (i = 0; i < 10; i+=1)  \n        va1[i] = i;  \n    for (i = 0; i < 10; i+=1)  \n        va2[i] = 10 - i;  \n  \n    cout << \"The operand valarray va1 is: (\";  \n    for (i = 0; i < 10; i++)  \n        cout << \" \" << va1[i];  \n    cout << \")\" << endl;  \n  \n    // A positive parameter shifts elements right  \n    va1 = va1.cshift(4);  \n    cout << \"The cyclically shifted valarray va1 is:\\nva1.cshift (4) = (\";  \n    for (i = 0; i < 10; i++)  \n        cout << \" \" << va1[i];  \n    cout << \")\" << endl;  \n  \n    cout << \"The operand valarray va2 is: (\";  \n    for (i = 0; i < 10; i++)  \n        cout << \" \" << va2[i];  \n    cout << \")\" << endl;  \n  \n    // A negative parameter shifts elements left  \n    va2 = va2.cshift(-4);  \n    cout << \"The cyclically shifted valarray va2 is:\\nva2.shift (-4) = (\";  \n    for (i = 0; i < 10; i++)  \n        cout << \" \" << va2[i];  \n    cout << \")\" << endl;  \n}  \n\\* Output:   \nThe operand valarray va1 is: ( 0 1 2 3 4 5 6 7 8 9)  \nThe cyclically shifted valarray va1 is:  \nva1.cshift (4) = ( 4 5 6 7 8 9 0 1 2 3)  \nThe operand valarray va2 is: ( 10 9 8 7 6 5 4 3 2 1)  \nThe cyclically shifted valarray va2 is:  \nva2.shift (-4) = ( 4 3 2 1 10 9 8 7 6 5)  \n*\\  \n```  \n  \n##  <a name=\"valarray__free\"></a>  valarray::free  \n Frees the memory used by the valarray.  \n  \n```  \nvoid free();\n```  \n  \n### Remarks  \n This nonstandard function is equivalent to assigning an empty valarray. For example:  \n  \n```  \nvalarray<T> v;  \nv = valarray<T>();\n\n// equivalent to v.free()  \n```  \n  \n##  <a name=\"valarray__max\"></a>  valarray::max  \n Finds the largest element in a valarray.  \n  \n```  \nType max() const;\n```  \n  \n### Return Value  \n The maximum value of the elements in the operand valarray.  \n  \n### Remarks  \n The member function compares values by applying **operator\\<** or **operator>** between pairs of elements of class **Type**, for which operators must be provided for the element **Type**.  \n  \n### Example  \n  \n```cpp  \n// valarray_max.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i, MaxValue;  \n  \n   valarray<int> vaR ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i;  \n   for ( i = 1 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  2*i - 1;  \n   for ( i = 2 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  10 - i;  \n  \n   cout << \"The operand valarray is: ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   MaxValue = vaR.max (  );  \n   cout << \"The largest element in the valarray is: \"  \n        << MaxValue  << \".\" << endl;  \n}  \n\\* Output:   \nThe operand valarray is: ( 0 1 8 3 7 5 6 13 2 9 ).  \nThe largest element in the valarray is: 13.  \n*\\  \n```  \n  \n##  <a name=\"valarray__min\"></a>  valarray::min  \n Finds the smallest element in a valarray.  \n  \n```  \nType min() const;\n```  \n  \n### Return Value  \n The minimum value of the elements in the operand valarray.  \n  \n### Remarks  \n The member function compares values by applying **operator\\<** or **operator>** between pairs of elements of class **Type**, for which operators must be provided for the element **Type**.  \n  \n### Example  \n  \n```cpp  \n// valarray_min.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i, MinValue;  \n  \n   valarray<int> vaR ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  -i;  \n   for ( i = 1 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  2*i;  \n   for ( i = 2 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  5 - i;  \n  \n   cout << \"The operand valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   MinValue = vaR.min ( );  \n   cout << \"The smallest element in the valarray is: \"  \n        << MinValue  << \".\" << endl;  \n}  \n\\* Output:   \nThe operand valarray is: ( 0 2 3 -3 8 0 -6 14 -3 -9 ).  \nThe smallest element in the valarray is: -9.  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_not\"></a>  valarray::operator!  \n A unary operator that obtains the logical **NOT** values of each element in a valarray.  \n  \n```  \nvalarray<bool> operator!() const;\n```  \n  \n### Return Value  \n The valarray of Boolean values that are the negation of the element values of the operand valarray.  \n  \n### Remarks  \n The logical operation **NOT** negates the elements because it converts all zeros into ones and regards all nonzero values as ones and converts them into zeros. The returned valarray of Boolean values is of the same size as the operand valarray.  \n  \n There is also a bitwise **NOT**[valarray::operator~](#valarray__operator_dtor) that negates on the level of individual bits within the binary representation of `char` and `int` elements of a valarray.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_lognot.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 );  \n   valarray<bool> vaNOT ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  0;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i-1;  \n  \n   cout << \"The initial valarray is:  ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNOT = !vaL;  \n   cout << \"The element-by-element result of \"  \n        << \"the logical NOT operator! is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaNOT [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial valarray is:  ( 0 0 0 2 0 4 0 6 0 8 ).  \nThe element-by-element result of the logical NOT operator! is the  \n valarray: ( 1 1 1 0 1 0 1 0 1 0 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_mod_eq\"></a>  valarray::operator%=  \n Obtains the remainder of dividing the elements of an array element-wise either by a specified valarray or by a value of the element type.  \n  \n```  \nvalarray<Type>& operator%=(const valarray<Type>& right);\n\nvalarray<Type>& operator%=(const Type& right);\n```  \n  \n### Parameters  \n ` right`  \n The valarray or value of an element type identical to that of the operand valarray that is to divide, element-wise, the operand valarray.  \n  \n### Return Value  \n A valarray whose elements are the remainder from the element-wise division of the operand valarray by ` right.`  \n  \n### Example  \n  \n```cpp  \n// valarray_class_op_rem.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 6 ), vaR ( 6 );  \n   for ( i = 0 ; i < 6 ; i += 2 )  \n      vaL [ i ] =  53;  \n   for ( i = 1 ; i < 6 ; i += 2 )  \n      vaL [ i ] =  -67;  \n   for ( i = 0 ; i < 6 ; i++ )  \n      vaR [ i ] =  3*i+1;  \n  \n   cout << \"The initial valarray is: ( \";  \n      for ( i = 0 ; i < 6 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial  right valarray is: ( \";  \n      for ( i = 0 ; i < 6 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaL %= vaR;  \n   cout << \"The remainders from the element-by-element \"  \n        << \"division is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 6 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial valarray is: ( 53 -67 53 -67 53 -67 ).  \nThe initial  right valarray is: ( 1 4 7 10 13 16 ).  \nThe remainders from the element-by-element division is the  \n valarray: ( 0 -3 4 -7 1 -3 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_amp__eq\"></a>  valarray::operator&amp;=  \n Obtains the bitwise **AND** of elements in an array either with the corresponding elements in a specified valarray or with a value of the element type.  \n  \n```  \nvalarray<Type>& operator&=(const valarray<Type>& right);\n\nvalarray<Type>& operator&=(const Type& right);\n```  \n  \n### Parameters  \n ` right`  \n The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the logical **AND** with the operand valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise logical **AND** of the operand valarray by ` right.`  \n  \n### Remarks  \n A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, **longdouble**, `void`, `bool`, or other, more complex data types.  \n  \n The bitwise AND has the same truth table as the logical **AND** but applies to the data type on the level of the individual bits. Given bits *b*1 and *b*2, *b*1 **AND** *b*2 is **true** if both bits are true; **false** if at least one is false.  \n  \n### Example  \n  \n```cpp  \n// valarray_class_op_bitand.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  0;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i-1;  \n   for ( i = 0 ; i < 10 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial valarray is:  ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaL &= vaR;  \n   cout << \"The element-by-element result of \"  \n        << \"the logical AND operator&= is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial valarray is:  ( 0 0 0 2 0 4 0 6 0 8 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 8 9 ).  \nThe element-by-element result of the logical AND operator&= is the  \n valarray: ( 0 0 0 2 0 4 0 6 0 8 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_gt__gt__eq\"></a>  valarray::operator&gt;&gt;=  \n Right-shifts the bits for each element of a valarray operand a specified number of positions or by an element-wise amount specified by a second valarray.  \n  \n```  \nvalarray<Type>& operator>>=(const valarray<Type>& right);\n\nvalarray<Type>& operator>>=(const Type& right);\n```  \n  \n### Parameters  \n ` right`  \n The value indicating the amount of right shift or valarray whose elements indicate the element-wise amount of right shift.  \n  \n### Return Value  \n A valarray whose elements have been shifted right the amount specified in ` right`.  \n  \n### Remarks  \n Signed numbers have their signs preserved.  \n  \n### Example  \n  \n```cpp  \n// valarray_class_op_rs.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 8 ), vaR ( 8 );  \n   for ( i = 0 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  64;  \n   for ( i = 1 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  -64;  \n   for ( i = 0 ; i < 8 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial operand valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The  right valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaL >>= vaR;  \n   cout << \"The element-by-element result of \"  \n        << \"the right shift is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial operand valarray is: ( 64 -64 64 -64 64 -64 64 -64 ).  \nThe  right valarray is: ( 0 1 2 3 4 5 6 7 ).  \nThe element-by-element result of the right shift is the  \n valarray: ( 64 -32 16 -8 4 -2 1 -1 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_lt__lt__eq\"></a>  valarray::operator&lt;&lt;=  \n Left-shifts the bits for each element of a valarray operand a specified number of positions or by an element-wise amount specified by a second valarray.  \n  \n```  \nvalarray<Type>& operator<<=(const valarray<Type>& right);\n\nvalarray<Type>& operator<<=(const Type& right);\n```  \n  \n### Parameters  \n ` right`  \n The value indicating the amount of left shift or valarray whose elements indicate the element-wise amount of left shift.  \n  \n### Return Value  \n A valarray whose elements have been shifted left the amount specified in ` right`.  \n  \n### Remarks  \n Signed numbers have their signs preserved.  \n  \n### Example  \n  \n```cpp  \n// valarray_class_op_ls.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 8 ), vaR ( 8 );  \n   for ( i = 0 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  1;  \n   for ( i = 1 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  -1;  \n   for ( i = 0 ; i < 8 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial operand valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The  right valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaL <<= vaR;  \n   cout << \"The element-by-element result of \"  \n        << \"the left shift\\n on the operand array is the valarray:\\n ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial operand valarray is: ( 1 -1 1 -1 1 -1 1 -1 ).  \nThe  right valarray is: ( 0 1 2 3 4 5 6 7 ).  \nThe element-by-element result of the left shift  \n on the operand array is the valarray:  \n ( 1 -2 4 -8 16 -32 64 -128 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_star_eq\"></a>  valarray::operator*=  \n Multiplies the elements of a specified valarray or a value of the element type, element-wise, to an operand valarray.  \n  \n```  \nvalarray<Type>& operator*=(const valarray<Type>& right);\n\nvalarray<Type>& operator*=(const Type& right);\n```  \n  \n### Parameters  \n ` right`  \n The valarray or value of an element type identical to that of the operand valarray that is to multiply, element-wise, the operand valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise product of the operand valarray and ` right.`  \n  \n### Example  \n  \n```cpp  \n// valarray_op_emult.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 8 ), vaR ( 8 );  \n   for ( i = 0 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  2;  \n   for ( i = 1 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  -1;  \n   for ( i = 0 ; i < 8 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaL *= vaR;  \n   cout << \"The element-by-element result of \"  \n        << \"the multiplication is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial valarray is: ( 2 -1 2 -1 2 -1 2 -1 ).  \nThe initial Right valarray is: ( 0 1 2 3 4 5 6 7 ).  \nThe element-by-element result of the multiplication is the  \n valarray: ( 0 -1 4 -3 8 -5 12 -7 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_add\"></a>  valarray::operator+  \n A unary operator that applies a plus to each element in a valarray.  \n  \n```  \nvalarray<Type> operator+() const;\n```  \n  \n### Return Value  \n A valarray whose elements are plus those of the operand array.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_eplus.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 );  \n   valarray<int> vaPLUS ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  -i;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i-1;  \n  \n   cout << \"The initial valarray is:  ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaPLUS = +vaL;  \n   cout << \"The element-by-element result of \"  \n        << \"the operator+ is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaPLUS [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial valarray is:  ( 0 0 -2 2 -4 4 -6 6 -8 8 ).  \nThe element-by-element result of the operator+ is the  \n valarray: ( 0 0 -2 2 -4 4 -6 6 -8 8 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_add_eq\"></a>  valarray::operator+=  \n Adds the elements of a specified valarray or a value of the element type, element-wise, to an operand valarray.  \n  \n```  \nvalarray<Type>& operator+=(const valarray<Type>& right);\n\nvalarray<Type>& operator+=(const Type& right);\n```  \n  \n### Parameters  \n ` right`  \n The valarray or value of an element type identical to that of the operand valarray that is to be added, element-wise, to the operand valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise sum of the operand valarray and ` right.`  \n  \n### Example  \n  \n```cpp  \n// valarray_op_eadd.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 8 ), vaR ( 8 );  \n   for ( i = 0 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  2;  \n   for ( i = 1 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  -1;  \n   for ( i = 0 ; i < 8 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial valarray is: ( \";  \n      for (i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial  right valarray is: ( \";  \n      for (i = 0 ; i < 8 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaL += vaR;  \n   cout << \"The element-by-element result of \"  \n        << \"the sum is the\\n valarray: ( \";  \n      for (i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial valarray is: ( 2 -1 2 -1 2 -1 2 -1 ).  \nThe initial  right valarray is: ( 0 1 2 3 4 5 6 7 ).  \nThe element-by-element result of the sum is the  \n valarray: ( 2 0 4 2 6 4 8 6 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator-\"></a>  valarray::operator-  \n A unary operator that applies a minus to each element in a valarray.  \n  \n```  \nvalarray<Type> operator-() const;\n```  \n  \n### Return Value  \n A valarray whose elements are minus those of the operand array.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_eminus.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 );  \n   valarray<int> vaMINUS ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  -i;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  i-1;  \n  \n   cout << \"The initial valarray is:  ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaMINUS = -vaL;  \n   cout << \"The element-by-element result of \"  \n        << \"the operator+ is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaMINUS [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial valarray is:  ( 0 0 -2 2 -4 4 -6 6 -8 8 ).  \nThe element-by-element result of the operator+ is the  \n valarray: ( 0 0 2 -2 4 -4 6 -6 8 -8 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator-_eq\"></a>  valarray::operator-=  \n Subtracts the elements of a specified valarray or a value of the element type, element-wise, from an operand valarray.  \n  \n```  \nvalarray<Type>& operator-=(const valarray<Type>& right);\n\nvalarray<Type>& operator-=(const Type& right);\n```  \n  \n### Parameters  \n ` right`  \n The valarray or value of an element type identical to that of the operand valarray that is to be subtracted, element-wise, from the operand valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise difference of the operand valarray and ` right.`  \n  \n### Example  \n  \n```cpp  \n// valarray_op_esub.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 8 ), vaR ( 8 );  \n   for ( i = 0 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  10;  \n   for ( i = 1 ; i < 8 ; i += 2 )  \n      vaL [ i ] =  0;  \n   for ( i = 0 ; i < 8 ; i++ )  \n      vaR [ i ] =  i;  \n  \n   cout << \"The initial valarray is: ( \";  \n      for (i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial  right valarray is: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaL -= vaR;  \n   cout << \"The element-by-element result of \"  \n        << \"the difference is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 8 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial valarray is: ( 10 0 10 0 10 0 10 0 ).  \nThe initial  right valarray is: ( 0 1 2 3 4 5 6 7 ).  \nThe element-by-element result of the difference is the  \n valarray: ( 10 -1 8 -3 6 -5 4 -7 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator__eq\"></a>  valarray::operator/=  \n Divides an operand valarray element-wise by the elements of a specified valarray or a value of the element type.  \n  \n```  \nvalarray<Type>& operator/=(const valarray<Type>& right);\n\nvalarray<Type>& operator/=(const Type& right);\n```  \n  \n### Parameters  \n ` right`  \n The valarray or value of an element type identical to that of the operand valarray that is to be divided, element-wise, into the operand valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise quotient of the operand valarray divided by ` right.`  \n  \n### Example  \n  \n```cpp  \n// valarray_op_ediv.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<double> vaL ( 6 ), vaR ( 6 );  \n   for ( i = 0 ; i < 6 ; i += 2 )  \n      vaL [ i ] =  100;  \n   for ( i = 1 ; i < 6 ; i += 2 )  \n      vaL [ i ] =  -100;  \n   for ( i = 0 ; i < 6 ; i++ )  \n      vaR [ i ] =  2*i;  \n  \n   cout << \"The initial valarray is: ( \";  \n      for (i = 0 ; i < 6 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The initial Right valarray is: ( \";  \n      for (i = 0 ; i < 6 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaL /= vaR;  \n   cout << \"The element-by-element result of \"  \n        << \"the quotient is the\\n valarray: ( \";  \n      for (i = 0 ; i < 6 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial valarray is: ( 100 -100 100 -100 100 -100 ).  \nThe initial Right valarray is: ( 0 2 4 6 8 10 ).  \nThe element-by-element result of the quotient is the  \n valarray: ( 1.#INF -50 25 -16.6667 12.5 -10 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_eq\"></a>  valarray::operator=  \n Assigns elements to a valarray whose values are specified either directly or as part of some other valarray or by a slice_array, gslice_array, mask_array, or indirect_array.  \n  \n```  \nvalarray<Type>& operator=(const valarray<Type>& right);\n\nvalarray<Type>& operator=(valarray<Type>&& right);\n\nvalarray<Type>& operator=(const Type& val);\n\nvalarray<Type>& operator=(const slice_array<Type>& _Slicearray);\n\nvalarray<Type>& operator=(const gslice_array<Type>& _Gslicearray);\n\nvalarray<Type>& operator=(const mask_array<Type>& _Maskarray);\n\nvalarray<Type>& operator=(const indirect_array<Type>& _Indarray);\n```  \n  \n### Parameters  \n ` right`  \n The valarray to be copied into the operand valarray.  \n  \n ` val`  \n The value to be assigned to the elements of the operand valarray.  \n  \n `_Slicearray`  \n The slice_array to be copied into the operand valarray.  \n  \n `_Gslicearray`  \n The gslice_array to be copied into the operand valarray.  \n  \n `_Maskarray`  \n The mask_array to be copied into the operand valarray.  \n  \n `_Indarray`  \n The indirect_array to be copied into the operand valarray.  \n  \n### Return Value  \n The first member operator replaces the controlled sequence with a copy of the sequence controlled by ` right`.  \n  \n The second member operator is the same as the first, but with an [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md).  \n  \n The third member operator replaces each element of the controlled sequence with a copy of ` val`.  \n  \n The remaining member operators replace those elements of the controlled sequence selected by their arguments, which are generated only by [operator&#91;&#93;](#valarray__operator_at).  \n  \n If the value of a member in the replacement controlled sequence depends on a member in the initial controlled sequence, the result is undefined.  \n  \n### Remarks  \n If the length of the controlled sequence changes, the result is generally undefined. In this implementation, however, the effect is merely to invalidate any pointers or references to elements in the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_assign.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> va ( 10 ), vaR ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 1 )  \n      va [ i ] = i;  \n   for ( i = 0 ; i < 10 ; i+=1 )  \n      vaR [ i ] = 10 -  i;  \n  \n   cout << \"The operand valarray va is:\";  \n   for ( i = 0 ; i < 10 ; i++ )  \n      cout << \" \" << va [ i ];  \n   cout << endl;  \n  \n   cout << \"The operand valarray vaR is:\";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << \" \" << vaR [ i ];  \n   cout << endl;  \n  \n   // Assigning vaR to va with the first member functon  \n   va = vaR;  \n   cout << \"The reassigned valarray va is:\";  \n   for ( i = 0 ; i < 10 ; i++ )  \n      cout << \" \" << va [ i ];  \n   cout << endl;  \n  \n   // Assigning elements of value 10 to va  \n   // with the second member functon  \n   va = 10;  \n   cout << \"The reassigned valarray va is:\";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << \" \" << va [ i ];  \n   cout << endl;  \n}  \n\\* Output:   \nThe operand valarray va is: 0 1 2 3 4 5 6 7 8 9  \nThe operand valarray vaR is: 10 9 8 7 6 5 4 3 2 1  \nThe reassigned valarray va is: 10 9 8 7 6 5 4 3 2 1  \nThe reassigned valarray va is: 10 10 10 10 10 10 10 10 10 10  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_at\"></a>  valarray::operator[]  \n Returns a reference to an element or its value at specified index or a specified subset.  \n  \n```  \nType& operator[](size_t _Off);\n\nslice_array<Type> operator[](slice _Slicearray);\n\ngslice_array<Type> operator[](const gslice& _Gslicearray);\n\nmask_array<Type> operator[](const valarray<bool>& _Boolarray);\n\nindirect_array<Type> operator[](const valarray<size_t>& _Indarray);\n\nType operator[](size_t _Off) const;\n\n \nvalarray<Type> operator[](slice _Slice) const;\n\n \nvalarray<Type> operator[](const gslice& _Gslicearray) const;\n\n \nvalarray<Type> operator[](const valarray<bool>& _Boolarray) const;\n\n \nvalarray<Type> operator[](const valarray<size_t>& _Indarray) const;\n```  \n  \n### Parameters  \n `_Off`  \n The index of the element to be assigned a value.  \n  \n `_Slicearray`  \n A slice_array of a valarray that specifies a subset to be selected or returned to a new valarray.  \n  \n `_Gslicearray`  \n A gslice_array of a valarray that specifies a subset to be selected or returned to a new valarray.  \n  \n *_Boolarray*  \n A bool_array of a valarray that specifies a subset to be selected or returned to a new valarray.  \n  \n `_Indarray`  \n An indirect_array of a valarray that specifies a subset to be selected or returned to a new valarray.  \n  \n### Return Value  \n A reference to an element or its value at specified index or a specified subset.  \n  \n### Remarks  \n The member operator is overloaded to provide several ways to select sequences of elements from among those controlled by *\\****this**. The first group of five member operators work in conjunction with various overloads of [operator=](#valarray__operator_eq) (and other assigning operators) to allow selective replacement (slicing) of the controlled sequence. The selected elements must exist.  \n  \n When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element outside the bounds of the valarray.  See [Checked Iterators](../standard-library/checked-iterators.md) for more information.  \n  \n### Example  \n  See the examples for [slice::slice](../standard-library/slice-class.md#slice__slice) and [gslice::gslice](../standard-library/gslice-class.md#gslice__gslice) for an example of how to declare and use the operator.  \n  \n##  <a name=\"valarray__operator_xor_eq\"></a>  valarray::operator^=  \n Obtains the element-wise exclusive logical or operator ( **XOR**) of an array with either a specified valarray or a value of the element type.  \n  \n```  \nvalarray<Type>& operator|=(const valarray<Type>& right);\n\nvalarray<Type>& operator|=(const Type& right);\n```  \n  \n### Parameters  \n ` right`  \n The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the exclusive logical **XOR** with the operand valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise, exclusive logical **XOR** of the operand valarray and ` right.`  \n  \n### Remarks  \n The exclusive logical or, referred to as **XOR**, has the following semantics: Given elements *e*1 and *e*2, *e*1 **XOR** *e*2 is **true** if exactly one of the elements is true; **false** if both elements are false or if both elements are true.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_exor.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  1;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  0;  \n   for ( i = 0 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i;  \n   for ( i = 1 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i-1;  \n   for ( i = 2 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i-1;  \n  \n   cout << \"The initial operand valarray is:  ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The  right valarray is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaL ^= vaR;  \n   cout << \"The element-by-element result of \"  \n        << \"the bitwise XOR operator^= is the\\n valarray: ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial operand valarray is:  ( 1 0 1 0 1 0 1 0 1 0 ).  \nThe  right valarray is: ( 0 0 1 3 3 4 6 6 7 9 ).  \nThe element-by-element result of the bitwise XOR operator^= is the  \n valarray: ( 1 0 0 3 2 4 7 6 6 9 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_or_eq\"></a>  valarray::operator&#124;=  \n Obtains the bitwise `OR` of elements in an array either with the corresponding elements in a specified valarray or with a value of the element type.  \n  \n```  \nvalarray<Type>& operator|=(const valarray<Type>& right);\n\nvalarray<Type>& operator|=(const Type& right);\n```  \n  \n### Parameters  \n ` right`  \n The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the bitwise `OR` with the operand valarray.  \n  \n### Return Value  \n A valarray whose elements are the element-wise bitwise `OR` of the operand valarray by ` right.`  \n  \n### Remarks  \n A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, **longdouble**, `void`, `bool`, or other, more complex data types.  \n  \n The bitwise `OR` has the same truth table as the logical `OR` but applies to the data type on the level of the individual bits. Given bits *b*1 and *b*2, *b*1 `OR` *b*2 is **true** if at least one of the bits is true; **false** if both bits are false.  \n  \n### Example  \n  \n```cpp  \n// valarray_class_op_bitor.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> vaL ( 10 ), vaR ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  1;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL [ i ] =  0;  \n   for ( i = 0 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i;  \n   for ( i = 1 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i-1;  \n   for ( i = 2 ; i < 10 ; i += 3 )  \n      vaR [ i ] =  i-1;  \n  \n   cout << \"The initial operand valarray is:\\n ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The  right valarray is:\\n ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaR [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaL |= vaR;  \n   cout << \"The element-by-element result of \"  \n        << \"the logical OR\\n operator|= is the valarray:\\n ( \";  \n      for (i = 0 ; i < 10 ; i++ )  \n         cout << vaL [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial operand valarray is:  \n ( 1 0 1 0 1 0 1 0 1 0 ).  \nThe  right valarray is:  \n ( 0 0 1 3 3 4 6 6 7 9 ).  \nThe element-by-element result of the logical OR  \n operator|= is the valarray:  \n ( 1 0 1 3 3 4 7 6 7 9 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__operator_dtor\"></a>  valarray::operator~  \n A unary operator that obtains the bitwise **NOT** values of each element in a valarray.  \n  \n```  \nvalarray<Type> operator~() const;\n```  \n  \n### Return Value  \n The valarray of Boolean values that are the bitwise **NOT** of the element values of the operand valarray.  \n  \n### Remarks  \n A bitwise operation can only be used to manipulate bits in `char` and `int` data types and variants and not on **float**, **double**, **longdouble**, `void`, `bool` or other, more complex data types.  \n  \n The bitwise **NOT** has the same truth table as the logical **NOT** but applies to the data type on the level of the individual bits. Given bit *b*, ~ *b* is true if *b* is false and false if *b* is true. The logical **NOT**[operator!](#valarray__operator_not) applies on an element level, counting all nonzero values as **true**, and the result is a valarray of Boolean values. The bitwise **NOToperator~**, by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation.  \n  \n### Example  \n  \n```cpp  \n// valarray_op_bitnot.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<unsigned short int> vaL1 ( 10 );  \n   valarray<unsigned short int> vaNOT1 ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL1 [ i ] =  i;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL1 [ i ] =  5*i;  \n  \n   cout << \"The initial valarray <unsigned short int> is:  ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL1 [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNOT1 = ~vaL1;  \n   cout << \"The element-by-element result of \"  \n        << \"the bitwise NOT operator~ is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaNOT1 [ i ] << \" \";  \n   cout << \").\" << endl << endl;  \n  \n   valarray<int> vaL2 ( 10 );  \n   valarray<int> vaNOT2 ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      vaL2 [ i ] =  i;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      vaL2 [ i ] =  -2 * i;  \n  \n   cout << \"The initial valarray <int> is:  ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaL2 [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   vaNOT2 = ~vaL2;  \n   cout << \"The element-by-element result of \"  \n        << \"the bitwise NOT operator~ is the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaNOT2 [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   // The negative numbers are represented using  \n   // the two's complement approach, so adding one  \n   // to the flipped bits returns the negative elements  \n   vaNOT2 = vaNOT2 + 1;  \n   cout << \"The element-by-element result of \"  \n        << \"adding one\\n is the negative of the \"  \n        << \"original elements the\\n valarray: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << vaNOT2 [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial valarray <unsigned short int> is:  ( 0 5 2 15 4 25 6 35 8 45 ).  \nThe element-by-element result of the bitwise NOT operator~ is the  \n valarray: ( 65535 65530 65533 65520 65531 65510 65529 65500 65527 65490 ).  \n  \nThe initial valarray <int> is:  ( 0 -2 2 -6 4 -10 6 -14 8 -18 ).  \nThe element-by-element result of the bitwise NOT operator~ is the  \n valarray: ( -1 1 -3 5 -5 9 -7 13 -9 17 ).  \nThe element-by-element result of adding one  \n is the negative of the original elements the  \n valarray: ( 0 2 -2 6 -4 10 -6 14 -8 18 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__resize\"></a>  valarray::resize  \n Changes the number of elements in a valarray to a specified number.  \n  \n```  \nvoid resize(\n    size_t _Newsize);\n\nvoid resize(\n    size_t _Newsize,   \n    const Type val);\n```  \n  \n### Parameters  \n `_Newsize`  \n The number of elements in the resized valarray.  \n  \n ` val`  \n The value to be given to the elements of the resized valarray.  \n  \n### Remarks  \n The first member function initializes elements with their default constructor.  \n  \n Any pointers or references to elements in the controlled sequence are invalidated.  \n  \n### Example  \n  The following example demonstrates the use of the valarray::resize member function.  \n  \n```  \n// valarray_resize.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    int i;  \n    size_t size1, sizeNew;  \n  \n    valarray<int> va1(10);  \n    for (i = 0; i < 10; i+=1)  \n        va1[i] = i;  \n  \n    cout << \"The valarray contains ( \";  \n        for (i = 0; i < 10; i++)  \n            cout << va1[i] << \" \";  \n    cout << \").\" << endl;  \n  \n    size1 = va1.size();  \n    cout << \"The number of elements in the valarray is: \"  \n         << size1  << \".\" <<endl << endl;  \n  \n    va1.resize(15, 10);  \n  \n    cout << \"The valarray contains ( \";  \n        for (i = 0; i < 15; i++)  \n            cout << va1[i] << \" \";  \n    cout << \").\" << endl;  \n    sizeNew = va1.size();  \n    cout << \"The number of elements in the resized valarray is: \"  \n         << sizeNew  << \".\" <<endl << endl;  \n}  \n\\* Output:   \nThe valarray contains ( 0 1 2 3 4 5 6 7 8 9 ).  \nThe number of elements in the valarray is: 10.  \n  \nThe valarray contains ( 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 ).  \nThe number of elements in the resized valarray is: 15.  \n*\\  \n```  \n  \n##  <a name=\"valarray__shift\"></a>  valarray::shift  \n Shifts all the elements in a valarray by a specified number of places.  \n  \n```  \nvalarray<Type> shift(int count) const;\n```  \n  \n### Parameters  \n ` count`  \n The number of places the elements are to be shifted forward.  \n  \n### Return Value  \n A new valarray in which all the elements have been moved ` count` positions toward the front of the valarray, left with respect to their positions in the operand valarray.  \n  \n### Remarks  \n A positive value of ` count` shifts the elements left ` count` places, with zero fill.  \n  \n A negative value of ` count` shifts the elements right ` count` places, with zero fill.  \n  \n### Example  \n  \n```cpp  \n// valarray_shift.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   valarray<int> va1 ( 10 ), va2 ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 1 )  \n      va1 [ i ] =  i;  \n   for ( i = 0 ; i < 10 ; i += 1 )  \n      va2 [ i ] = 10 -  i;  \n  \n   cout << \"The operand valarray va1(10) is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << va1 [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   // A positive parameter shifts elements left  \n   va1 = va1.shift ( 4 );  \n   cout << \"The shifted valarray va1 is: va1.shift (4) = ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << va1 [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   cout << \"The operand valarray va2(10) is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << va2 [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   // A negative parameter shifts elements right  \n   va2 = va2.shift ( - 4 );  \n   cout << \"The shifted valarray va2 is: va2.shift (-4) = ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << va2 [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe operand valarray va1(10) is: ( 0 1 2 3 4 5 6 7 8 9 ).  \nThe shifted valarray va1 is: va1.shift (4) = ( 4 5 6 7 8 9 0 0 0 0 ).  \nThe operand valarray va2(10) is: ( 10 9 8 7 6 5 4 3 2 1 ).  \nThe shifted valarray va2 is: va2.shift (-4) = ( 0 0 0 0 10 9 8 7 6 5 ).  \n*\\  \n```  \n  \n##  <a name=\"valarray__size\"></a>  valarray::size  \n Finds the number of elements in a valarray.  \n  \n```  \nsize_t size() const;\n```  \n  \n### Return Value  \n The number of elements in the operand valarray.  \n  \n### Example  \n  The following example demonstrates the use of the valarray::size member function.  \n  \n```  \n// valarray_size.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    int i;  \n    size_t size1, size2;  \n  \n    valarray<int> va1(10), va2(12);  \n    for (i = 0; i < 10; i += 1)  \n        va1[i] =  i;  \n    for (i = 0; i < 10; i += 1)  \n        va2[i] =  i;  \n  \n    cout << \"The operand valarray va1(10) is: ( \";  \n        for (i = 0; i < 10; i++)  \n            cout << va1[i] << \" \";  \n    cout << \").\" << endl;  \n  \n    size1 = va1.size();  \n    cout << \"The number of elements in the valarray va1 is: va1.size = \"  \n         << size1  << \".\" <<endl << endl;  \n  \n    cout << \"The operand valarray va2(12) is: ( \";  \n        for (i = 0; i < 10; i++)  \n            cout << va2[i] << \" \";  \n    cout << \").\" << endl;  \n  \n    size2 = va2.size();  \n    cout << \"The number of elements in the valarray va2 is: va2.size = \"  \n         << size2  << \".\" << endl << endl;  \n  \n    // Initializing two more elements to va2  \n    va2[10] = 10;  \n    va2[11] = 11;  \n    cout << \"After initializing two more elements,\\n \"  \n         << \"the operand valarray va2(12) is now: ( \";  \n        for (i = 0; i < 12; i++)  \n            cout << va2[i] << \" \";  \n    cout << \").\" << endl;  \n    cout << \"The number of elements in the valarray va2 is still: \"  \n         << size2  << \".\" << endl;  \n}  \n\\* Output:   \nThe operand valarray va1(10) is: ( 0 1 2 3 4 5 6 7 8 9 ).  \nThe number of elements in the valarray va1 is: va1.size = 10.  \n  \nThe operand valarray va2(12) is: ( 0 1 2 3 4 5 6 7 8 9 ).  \nThe number of elements in the valarray va2 is: va2.size = 12.  \n  \nAfter initializing two more elements,  \n the operand valarray va2(12) is now: ( 0 1 2 3 4 5 6 7 8 9 10 11 ).  \nThe number of elements in the valarray va2 is still: 12.  \n*\\  \n```  \n  \n##  <a name=\"valarray__sum\"></a>  valarray::sum  \n Determines the sum of all the elements in a valarray of nonzero length.  \n  \n```  \nType sum() const;\n```  \n  \n### Return Value  \n The sum of the elements of the operand valarray.  \n  \n### Remarks  \n If the length is greater than one, the member function adds values to the sum by applying `operator+=` between pairs of elements of class **Type**, which operator, consequently, needs be provided for elements of type **Type**.  \n  \n### Example  \n  \n```cpp  \n// valarray_sum.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n   int sumva = 0;  \n  \n   valarray<int> va ( 10 );  \n   for ( i = 0 ; i < 10 ; i+=1 )  \n      va [ i ] =  i;  \n  \n   cout << \"The operand valarray va (10) is: ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << va [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   sumva = va.sum ( );  \n   cout << \"The sum of elements in the valarray is: \"  \n        << sumva  << \".\" <<endl;  \n}  \n\\* Output:   \nThe operand valarray va (10) is: ( 0 1 2 3 4 5 6 7 8 9 ).  \nThe sum of elements in the valarray is: 45.  \n*\\  \n```  \n  \n##  <a name=\"valarray__swap\"></a>  valarray::swap  \n Exchanges the elements of two `valarray`s.  \n  \n```  \nvoid swap(valarray& right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|` right`|A `valarray` providing the elements to be swapped.|  \n  \n### Remarks  \n The member function swaps the controlled sequences between `*this` and ` right`. It does so in constant time, it throws no exceptions, and it invalidates no references, pointers, or iterators that designate elements in the two controlled sequences.  \n  \n##  <a name=\"valarray__valarray\"></a>  valarray::valarray  \n Constructs a valarray of a specific size or with elements of a specific value or as a copy of another valarray or subset of another valarray.  \n  \n```  \nvalarray();\n\nexplicit valarray(\n    size_t Count);\n\nvalarray(\n    const Type& Val,   \n    size_t Count);\n\nvalarray(\n    const Type* Ptr,   \n    size_t Count);\n\nvalarray(\n    const valarray<Type>& Right);\n\nvalarray(\n    const slice_array<Type>& SliceArray);\n\nvalarray(\n    const gslice_array<Type>& GsliceArray);\n\nvalarray(\n    const mask_array<Type>& MaskArray);\n\nvalarray(\n    const indirect_array<Type>& IndArray);\n\nvalarray(\n    valarray<Type>&& Right);\n\nvalarray(\n    initializer_list<Type> IList);\n```  \n  \n### Parameters  \n `Count`  \n The number of elements to be in the valarray.  \n  \n `Val`  \n The value to be used in initializing the elements in the valarray.  \n  \n `Ptr`  \n Pointer to the values to be used to initialize the elements in the valarray.  \n  \n `Right`  \n An existing valarray to initialize the new valarray.  \n  \n `SliceArray`  \n A slice_array whose element values are to be used in initializing the elements of the valarray being constructed.  \n  \n `GsliceArray`  \n A gslice_array whose element values are to be used in initializing the elements of the valarray being constructed.  \n  \n `MaskArray`  \n A mask_array whose element values are to be used in initializing the elements of the valarray being constructed.  \n  \n `IndArray`  \n A indirect_array whose element values are to be used in initializing the elements of the valarray being constructed.  \n  \n `IList`  \n The initializer_list containing the elements to copy.  \n  \n### Remarks  \n The first (default) constructor initializes the object to an empty array. The next three constructors each initialize the object to an array of `Count` elements as follows:  \n  \n-   For explicit `valarray(size_t Count)`, each element is initialized with the default constructor.  \n  \n-   For `valarray(const Type& Val, Count)`, each element is initialized with `Val`.  \n  \n-   For `valarray(const Type* Ptr, Count)`, the element at position `I` is initialized with `Ptr`[ `I`].  \n  \n Each remaining constructor initializes the object to a valarray\\<Type> object determined by the subset specified in the argument.  \n  \n The last constructor is the same as the next to last, but with an [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md).  \n  \n### Example  \n  \n```cpp  \n// valarray_ctor.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    int i;  \n  \n    // The second member function  \n    valarray<int> va(10);  \n    for (auto i : va){  \n        va[i] = 2 * (i + 1);  \n    }  \n  \n    cout << \"The operand valarray va is:\\n(\";  \n    for (auto i : va) {  \n        cout << \" \" << va[i];  \n    }  \n    cout << \" )\" << endl;  \n  \n    slice Slice(2, 4, 3);  \n  \n    // The fifth member function  \n    valarray<int> vaSlice = va[Slice];  \n  \n    cout << \"The new valarray initialized from the slice is vaSlice =\"  \n        << \"\\nva[slice( 2, 4, 3)] = (\";  \n    for (int i = 0; i < 3; i++) {  \n        cout << \" \" << vaSlice[i];  \n    }  \n    cout << \" )\" << endl;  \n  \n    valarray<int> va2{{ 1, 2, 3, 4 }};  \n    for (auto& v : va2){  \n        cout << v << \" \";  \n    }  \n    cout << endl;  \n}  \n  \n```  \n  \n```Output  \nThe operand valarray va is:( 0 2 2 2 2 2 2 2 2 2 )The new valarray initialized from the slice is vaSlice =va[slice( 2, 4, 3)] = ( 0 0 0 )1 2 3 4  \n```  \n  \n##  <a name=\"valarray__value_type\"></a>  valarray::value_type  \n A type that represents the type of element stored in a valarray.  \n  \n```  \ntypedef Type value_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **Type**.  \n  \n### Example  \n  \n```cpp  \n// valarray_value_type.cpp  \n// compile with: /EHsc  \n#include <valarray>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n   valarray<int> va ( 10 );  \n   for ( i = 0 ; i < 10 ; i += 2 )  \n      va [ i ] =  i;  \n   for ( i = 1 ; i < 10 ; i += 2 )  \n      va [ i ] =  -1;  \n  \n   cout << \"The initial operand valarray is:  ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << va [ i ] << \" \";  \n   cout << \").\" << endl;  \n  \n   // value_type declaration and initialization:  \n   valarray<int>::value_type Right = 10;  \n  \n   cout << \"The decalared value_type Right is: \"   \n           << Right << endl;  \n   va *= Right;  \n   cout << \"The resulting valarray is:  ( \";  \n      for ( i = 0 ; i < 10 ; i++ )  \n         cout << va [ i ] << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe initial operand valarray is:  ( 0 -1 2 -1 4 -1 6 -1 8 -1 ).  \nThe decalared value_type Right is: 10  \nThe resulting valarray is:  ( 0 -10 20 -10 40 -10 60 -10 80 -10 ).  \n*\\  \n```  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}