{"nodes":[{"pos":[12,47],"content":"Size Specification | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Size Specification | Microsoft Docs","pos":[0,35]}]},{"content":"Size Specification","pos":[789,807]},{"content":"In a format specification, the fourth field is an argument length modifier for the conversion specifier.","pos":[808,912]},{"content":"The <ph id=\"ph1\">`size`</ph> field prefixes to the <ph id=\"ph2\">`type`</ph> field—<ph id=\"ph3\">`h`</ph>, <ph id=\"ph4\">`l`</ph>, <ph id=\"ph5\">`w`</ph>, <ph id=\"ph6\">`I`</ph>, <ph id=\"ph7\">`I32`</ph>, <ph id=\"ph8\">`I64`</ph>, and <ph id=\"ph9\">`ll`</ph>—specify the \"size\" of the corresponding argument—long or short, 32-bit or 64-bit, single-byte character or wide character—depending on the conversion specifier that they modify.","pos":[913,1179],"source":" The `size` field prefixes to the `type` field—`h`, `l`, `w`, `I`, `I32`, `I64`, and `ll`—specify the \"size\" of the corresponding argument—long or short, 32-bit or 64-bit, single-byte character or wide character—depending on the conversion specifier that they modify."},{"content":"These size prefixes are used with <ph id=\"ph1\">`type`</ph> characters in the <ph id=\"ph2\">`printf`</ph> and <ph id=\"ph3\">`wprintf`</ph> families of functions to specify the interpretation of argument lengths, as shown in the following table.","pos":[1180,1367],"source":" These size prefixes are used with `type` characters in the `printf` and `wprintf` families of functions to specify the interpretation of argument lengths, as shown in the following table."},{"content":"The <ph id=\"ph1\">`size`</ph> field is optional for some argument types.","pos":[1368,1421],"source":" The `size` field is optional for some argument types."},{"content":"When no size prefix is specified, the formatter consumes integer arguments—for example, signed or unsigned <ph id=\"ph1\">`char`</ph>, <ph id=\"ph2\">`short`</ph>, <ph id=\"ph3\">`int`</ph>, <ph id=\"ph4\">`long`</ph>, and enumeration types—as 32-bit <ph id=\"ph5\">`int`</ph> types, and floating-point arguments are consumed as 64-bit <ph id=\"ph6\">`double`</ph> types.","pos":[1422,1673],"source":" When no size prefix is specified, the formatter consumes integer arguments—for example, signed or unsigned `char`, `short`, `int`, `long`, and enumeration types—as 32-bit `int` types, and floating-point arguments are consumed as 64-bit `double` types."},{"content":"This matches the default argument promotion rules for variable argument lists.","pos":[1674,1752]},{"content":"For more information about argument promotion, see Ellipses and Default Arguments in <bpt id=\"p1\">[</bpt>Postfix expressions<ept id=\"p1\">](../cpp/postfix-expressions.md)</ept>.","pos":[1753,1891],"source":" For more information about argument promotion, see Ellipses and Default Arguments in [Postfix expressions](../cpp/postfix-expressions.md)."},{"content":"On both 32-bit and 64-bit systems, the format specification of a 64-bit integer argument must include a size prefix of <ph id=\"ph1\">`ll`</ph> or <ph id=\"ph2\">`I64`</ph>.","pos":[1892,2025],"source":" On both 32-bit and 64-bit systems, the format specification of a 64-bit integer argument must include a size prefix of `ll` or `I64`."},{"content":"Otherwise, the behavior of the formatter is undefined.","pos":[2026,2080]},{"content":"Some types are different sizes in 32-bit and 64-bit code.","pos":[2087,2144]},{"content":"For example, <ph id=\"ph1\">`size_t`</ph> is 32 bits long in code compiled for x86, and 64 bits in code compiled for x64.","pos":[2145,2246],"source":" For example, `size_t` is 32 bits long in code compiled for x86, and 64 bits in code compiled for x64."},{"content":"To create platform-agnostic formatting code for variable-width types, you can use a variable-width argument length modifier.","pos":[2247,2371]},{"content":"Alternatively, use a 64-bit argument length modifier and explicitly promote the variable-width argument type to 64 bits.","pos":[2372,2492]},{"content":"The Microsoft-specific <ph id=\"ph1\">`I`</ph> argument length modifier handles variable-width integer arguments.","pos":[2493,2586],"source":" The Microsoft-specific `I` argument length modifier handles variable-width integer arguments."},{"pos":[2594,2974],"content":"[!NOTE]\n The `I`, `I32`, and `I64` length modifier prefixes are Microsoft extensions and are not ANSI-compatible. The `h` prefix when it's used with data of type `char`, the `w` prefix when it's used with data of type `wchar_t`, and the `l` prefix when it's used with data of type `double` are Microsoft extensions. The `hh`, `j`, `z`, and `t` length prefixes are not supported.","leadings":["","> "],"nodes":[{"content":" The `I`, `I32`, and `I64` length modifier prefixes are Microsoft extensions and are not ANSI-compatible. The `h` prefix when it's used with data of type `char`, the `w` prefix when it's used with data of type `wchar_t`, and the `l` prefix when it's used with data of type `double` are Microsoft extensions. The `hh`, `j`, `z`, and `t` length prefixes are not supported.","pos":[8,378],"nodes":[{"content":"The <ph id=\"ph1\">`I`</ph>, <ph id=\"ph2\">`I32`</ph>, and <ph id=\"ph3\">`I64`</ph> length modifier prefixes are Microsoft extensions and are not ANSI-compatible.","pos":[1,105],"source":" The `I`, `I32`, and `I64` length modifier prefixes are Microsoft extensions and are not ANSI-compatible."},{"content":"The <ph id=\"ph1\">`h`</ph> prefix when it's used with data of type <ph id=\"ph2\">`char`</ph>, the <ph id=\"ph3\">`w`</ph> prefix when it's used with data of type <ph id=\"ph4\">`wchar_t`</ph>, and the <ph id=\"ph5\">`l`</ph> prefix when it's used with data of type <ph id=\"ph6\">`double`</ph> are Microsoft extensions.","pos":[106,307],"source":" The `h` prefix when it's used with data of type `char`, the `w` prefix when it's used with data of type `wchar_t`, and the `l` prefix when it's used with data of type `double` are Microsoft extensions."},{"content":"The <ph id=\"ph1\">`hh`</ph>, <ph id=\"ph2\">`j`</ph>, <ph id=\"ph3\">`z`</ph>, and <ph id=\"ph4\">`t`</ph> length prefixes are not supported.","pos":[308,370],"source":" The `hh`, `j`, `z`, and `t` length prefixes are not supported."}]}]},{"content":"Size Prefixes for printf and wprintf Format-Type Specifiers","pos":[2984,3043]},{"content":"To specify","pos":[3050,3060]},{"content":"Use prefix","pos":[3061,3071]},{"content":"With type specifier","pos":[3072,3091]},{"pos":[3175,3188],"content":"(lowercase L)"},{"pos":[3192,3211],"content":", <ph id=\"ph1\">`i`</ph>, <ph id=\"ph2\">`o`</ph>, <ph id=\"ph3\">`x`</ph>, or","source":", `i`, `o`, `x`, or "},{"pos":[3247,3261],"content":", <ph id=\"ph1\">`u`</ph>, <ph id=\"ph2\">`x`</ph>, or","source":", `u`, `x`, or "},{"pos":[3290,3309],"content":", <ph id=\"ph1\">`i`</ph>, <ph id=\"ph2\">`o`</ph>, <ph id=\"ph3\">`x`</ph>, or","source":", `i`, `o`, `x`, or "},{"pos":[3337,3356],"content":", <ph id=\"ph1\">`i`</ph>, <ph id=\"ph2\">`o`</ph>, <ph id=\"ph3\">`x`</ph>, or","source":", `i`, `o`, `x`, or "},{"pos":[3393,3407],"content":", <ph id=\"ph1\">`u`</ph>, <ph id=\"ph2\">`x`</ph>, or","source":", `u`, `x`, or "},{"pos":[3435,3454],"content":", <ph id=\"ph1\">`i`</ph>, <ph id=\"ph2\">`o`</ph>, <ph id=\"ph3\">`x`</ph>, or","source":", `i`, `o`, `x`, or "},{"pos":[3491,3505],"content":", <ph id=\"ph1\">`u`</ph>, <ph id=\"ph2\">`x`</ph>, or","source":", `u`, `x`, or "},{"pos":[3533,3552],"content":", <ph id=\"ph1\">`i`</ph>, <ph id=\"ph2\">`o`</ph>, <ph id=\"ph3\">`x`</ph>, or","source":", `i`, `o`, `x`, or "},{"pos":[3589,3603],"content":", <ph id=\"ph1\">`u`</ph>, <ph id=\"ph2\">`x`</ph>, or","source":", `u`, `x`, or "},{"pos":[3624,3695],"content":"(that is, <ph id=\"ph1\">`__int32`</ph> on 32-bit platforms, <ph id=\"ph2\">`__int64`</ph> on 64-bit platforms)","source":" (that is, `__int32` on 32-bit platforms, `__int64` on 64-bit platforms)"},{"pos":[3703,3722],"content":", <ph id=\"ph1\">`i`</ph>, <ph id=\"ph2\">`o`</ph>, <ph id=\"ph3\">`x`</ph>, or","source":", `i`, `o`, `x`, or "},{"pos":[3740,3829],"content":"(that is, <ph id=\"ph1\">`unsigned __int32`</ph> on 32-bit platforms, <ph id=\"ph2\">`unsigned __int64`</ph> on 64-bit platforms)","source":" (that is, `unsigned __int32` on 32-bit platforms, `unsigned __int64` on 64-bit platforms)"},{"pos":[3837,3851],"content":", <ph id=\"ph1\">`u`</ph>, <ph id=\"ph2\">`x`</ph>, or","source":", `u`, `x`, or "},{"pos":[3874,4026],"content":"(In <ph id=\"ph1\">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph>, although <ph id=\"ph2\">`long double`</ph> is a distinct type, it has the same internal representation as <ph id=\"ph3\">`double`</ph>.)","source":" (In [!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)], although `long double` is a distinct type, it has the same internal representation as `double`.)"},{"pos":[4031,4033],"content":"or"},{"pos":[4041,4070],"content":", <ph id=\"ph1\">`A`</ph>, <ph id=\"ph2\">`e`</ph>, <ph id=\"ph3\">`E`</ph>, <ph id=\"ph4\">`f`</ph>, <ph id=\"ph5\">`g`</ph>, or","source":", `A`, `e`, `E`, `f`, `g`, or "},{"content":"Single-byte character with <ph id=\"ph1\">`printf`</ph> and <ph id=\"ph2\">`wprintf`</ph> functions.","pos":[4079,4139],"source":"Single-byte character with `printf` and `wprintf` functions."},{"content":"(An <ph id=\"ph1\">`hc`</ph> or <ph id=\"ph2\">`hC`</ph> type specifier is synonymous with <ph id=\"ph3\">`c`</ph> in <ph id=\"ph4\">`printf`</ph> functions and with <ph id=\"ph5\">`C`</ph> in <ph id=\"ph6\">`wprintf`</ph> functions.)","pos":[4140,4254],"source":" (An `hc` or `hC` type specifier is synonymous with `c` in `printf` functions and with `C` in `wprintf` functions.)"},{"pos":[4263,4265],"content":"or"},{"content":"Wide character with <ph id=\"ph1\">`printf`</ph> and <ph id=\"ph2\">`wprintf`</ph> functions.","pos":[4274,4327],"source":"Wide character with `printf` and `wprintf` functions."},{"content":"(An <ph id=\"ph1\">`lc`</ph>, <ph id=\"ph2\">`lC`</ph>, <ph id=\"ph3\">`wc`</ph> or <ph id=\"ph4\">`wC`</ph> type specifier is synonymous with <ph id=\"ph5\">`C`</ph> in <ph id=\"ph6\">`printf`</ph> functions and with <ph id=\"ph7\">`c`</ph> in <ph id=\"ph8\">`wprintf`</ph> functions.)","pos":[4328,4454],"source":" (An `lc`, `lC`, `wc` or `wC` type specifier is synonymous with `C` in `printf` functions and with `c` in `wprintf` functions.)"},{"pos":[4459,4461],"content":"or"},{"pos":[4470,4472],"content":"or"},{"content":"Single-byte character string with <ph id=\"ph1\">`printf`</ph> and <ph id=\"ph2\">`wprintf`</ph> functions.","pos":[4481,4548],"source":"Single-byte character string with `printf` and `wprintf` functions."},{"content":"(An <ph id=\"ph1\">`hs`</ph> or <ph id=\"ph2\">`hS`</ph> type specifier is synonymous with <ph id=\"ph3\">`s`</ph> in <ph id=\"ph4\">`printf`</ph> functions and with <ph id=\"ph5\">`S`</ph> in <ph id=\"ph6\">`wprintf`</ph> functions.)","pos":[4549,4663],"source":" (An `hs` or `hS` type specifier is synonymous with `s` in `printf` functions and with `S` in `wprintf` functions.)"},{"pos":[4671,4680],"content":", <ph id=\"ph1\">`S`</ph>, or","source":", `S`, or "},{"content":"Wide-character string with <ph id=\"ph1\">`printf`</ph> and <ph id=\"ph2\">`wprintf`</ph> functions.","pos":[4689,4749],"source":"Wide-character string with `printf` and `wprintf` functions."},{"content":"(An <ph id=\"ph1\">`ls`</ph>, <ph id=\"ph2\">`lS`</ph>, <ph id=\"ph3\">`ws`</ph> or <ph id=\"ph4\">`wS`</ph> type specifier is synonymous with <ph id=\"ph5\">`S`</ph> in <ph id=\"ph6\">`printf`</ph> functions and with <ph id=\"ph7\">`s`</ph> in <ph id=\"ph8\">`wprintf`</ph> functions.)","pos":[4750,4876],"source":" (An `ls`, `lS`, `ws` or `wS` type specifier is synonymous with `S` in `printf` functions and with `s` in `wprintf` functions.)"},{"pos":[4881,4883],"content":"or"},{"pos":[4891,4900],"content":", <ph id=\"ph1\">`S`</ph>, or","source":", `S`, or "},{"content":"See Also","pos":[4914,4922]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[4927,4965]},{"content":"Format Specification Syntax: printf and wprintf Functions","pos":[5041,5098]},{"content":"Flag Directives","pos":[5187,5202]},{"content":"printf Width Specification","pos":[5250,5276]},{"content":"Precision Specification","pos":[5335,5358]},{"content":"printf Type Field Characters","pos":[5414,5442]}],"content":"---\ntitle: \"Size Specification | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napilocation: \n  - \"msvcr120.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr100.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"size\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"printf function, format specification fields\"\nms.assetid: 525dc5d8-e70a-4797-a6a0-ec504a27355c\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Size Specification\nIn a format specification, the fourth field is an argument length modifier for the conversion specifier. The `size` field prefixes to the `type` field—`h`, `l`, `w`, `I`, `I32`, `I64`, and `ll`—specify the \"size\" of the corresponding argument—long or short, 32-bit or 64-bit, single-byte character or wide character—depending on the conversion specifier that they modify. These size prefixes are used with `type` characters in the `printf` and `wprintf` families of functions to specify the interpretation of argument lengths, as shown in the following table. The `size` field is optional for some argument types. When no size prefix is specified, the formatter consumes integer arguments—for example, signed or unsigned `char`, `short`, `int`, `long`, and enumeration types—as 32-bit `int` types, and floating-point arguments are consumed as 64-bit `double` types. This matches the default argument promotion rules for variable argument lists. For more information about argument promotion, see Ellipses and Default Arguments in [Postfix expressions](../cpp/postfix-expressions.md). On both 32-bit and 64-bit systems, the format specification of a 64-bit integer argument must include a size prefix of `ll` or `I64`. Otherwise, the behavior of the formatter is undefined.  \n  \n Some types are different sizes in 32-bit and 64-bit code. For example, `size_t` is 32 bits long in code compiled for x86, and 64 bits in code compiled for x64. To create platform-agnostic formatting code for variable-width types, you can use a variable-width argument length modifier. Alternatively, use a 64-bit argument length modifier and explicitly promote the variable-width argument type to 64 bits. The Microsoft-specific `I` argument length modifier handles variable-width integer arguments.  \n  \n> [!NOTE]\n>  The `I`, `I32`, and `I64` length modifier prefixes are Microsoft extensions and are not ANSI-compatible. The `h` prefix when it's used with data of type `char`, the `w` prefix when it's used with data of type `wchar_t`, and the `l` prefix when it's used with data of type `double` are Microsoft extensions. The `hh`, `j`, `z`, and `t` length prefixes are not supported.  \n  \n### Size Prefixes for printf and wprintf Format-Type Specifiers  \n  \n|To specify|Use prefix|With type specifier|  \n|----------------|----------------|-------------------------|  \n|`long int`|`l` (lowercase L)|`d`, `i`, `o`, `x`, or `X`|  \n|`long unsigned int`|`l`|`o`, `u`, `x`, or `X`|  \n|`long long`|`ll`|`d`, `i`, `o`, `x`, or `X`|  \n|`short int`|`h`|`d`, `i`, `o`, `x`, or `X`|  \n|`short unsigned int`|`h`|`o`, `u`, `x`, or `X`|  \n|`__int32`|`I32`|`d`, `i`, `o`, `x`, or `X`|  \n|`unsigned __int32`|`I32`|`o`, `u`, `x`, or `X`|  \n|`__int64`|`I64`|`d`, `i`, `o`, `x`, or `X`|  \n|`unsigned __int64`|`I64`|`o`, `u`, `x`, or `X`|  \n|`ptrdiff_t` (that is, `__int32` on 32-bit platforms, `__int64` on 64-bit platforms)|`I`|`d`, `i`, `o`, `x`, or `X`|  \n|`size_t` (that is, `unsigned __int32` on 32-bit platforms, `unsigned __int64` on 64-bit platforms)|`I`|`o`, `u`, `x`, or `X`|  \n|`long double` (In [!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)], although `long double` is a distinct type, it has the same internal representation as `double`.)|`l` or `L`|`a`, `A`, `e`, `E`, `f`, `g`, or `G`|  \n|Single-byte character with `printf` and `wprintf` functions. (An `hc` or `hC` type specifier is synonymous with `c` in `printf` functions and with `C` in `wprintf` functions.)|`h`|`c` or `C`|  \n|Wide character with `printf` and `wprintf` functions. (An `lc`, `lC`, `wc` or `wC` type specifier is synonymous with `C` in `printf` functions and with `c` in `wprintf` functions.)|`l` or `w`|`c` or `C`|  \n|Single-byte character string with `printf` and `wprintf` functions. (An `hs` or `hS` type specifier is synonymous with `s` in `printf` functions and with `S` in `wprintf` functions.)|`h`|`s`, `S`, or `Z`|  \n|Wide-character string with `printf` and `wprintf` functions. (An `ls`, `lS`, `ws` or `wS` type specifier is synonymous with `S` in `printf` functions and with `s` in `wprintf` functions.)|`l` or `w`|`s`, `S`, or `Z`|  \n  \n## See Also  \n [printf, _printf_l, wprintf, _wprintf_l](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [Format Specification Syntax: printf and wprintf Functions](../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)   \n [Flag Directives](../c-runtime-library/flag-directives.md)   \n [printf Width Specification](../c-runtime-library/printf-width-specification.md)   \n [Precision Specification](../c-runtime-library/precision-specification.md)   \n [printf Type Field Characters](../c-runtime-library/printf-type-field-characters.md)"}