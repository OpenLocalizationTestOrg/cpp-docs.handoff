{"nodes":[{"pos":[12,70],"content":"_InterlockedDecrement Intrinsic Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_InterlockedDecrement Intrinsic Functions | Microsoft Docs","pos":[0,58]}]},{"content":"_InterlockedDecrement Intrinsic Functions","pos":[2084,2125]},{"content":"Microsoft Specific","pos":[2128,2146]},{"pos":[2155,2335],"content":"Provides compiler intrinsic support for the Win32 <ph id=\"ph1\">[!INCLUDE[winSDK](../atl/includes/winsdk_md.md)]</ph> <bpt id=\"p1\">[</bpt>InterlockedDecrement<ept id=\"p1\">](http://msdn.microsoft.com/library/ms683580.aspx)</ept> function.","source":"Provides compiler intrinsic support for the Win32 [!INCLUDE[winSDK](../atl/includes/winsdk_md.md)] [InterlockedDecrement](http://msdn.microsoft.com/library/ms683580.aspx) function."},{"content":"Syntax","pos":[2344,2350]},{"content":"Parameters","pos":[3130,3140]},{"content":"[in, out]","pos":[3144,3153]},{"content":"Pointer to the variable to be decremented.","pos":[3168,3210]},{"content":"Return Value","pos":[3219,3231]},{"content":"The return value is the resulting decremented value.","pos":[3235,3287]},{"content":"Requirements","pos":[3296,3308]},{"content":"Intrinsic","pos":[3315,3324]},{"content":"Architecture","pos":[3325,3337]},{"pos":[3404,3432],"content":", <ph id=\"ph1\">`_InterlockedDecrement16`</ph>,","source":", `_InterlockedDecrement16`, "},{"pos":[3459,3468],"content":"x86, ARM,"},{"pos":[3564,3806],"content":", <ph id=\"ph1\">`_InterlockedDecrement_rel`</ph>, <ph id=\"ph2\">`_InterlockedDecrement_nf`</ph>, <ph id=\"ph3\">`_InterlockedDecrement16_acq`</ph>, <ph id=\"ph4\">`_InterlockedDecrement16_rel`</ph>, <ph id=\"ph5\">`_InterlockedDecrement16_nf`</ph>, <ph id=\"ph6\">`_InterlockedDecrement64_acq`</ph>, <ph id=\"ph7\">`_InterlockedDecrement64_rel`</ph>, <ph id=\"ph8\">`_InterlockedDecrement64_nf`</ph>,","source":", `_InterlockedDecrement_rel`, `_InterlockedDecrement_nf`, `_InterlockedDecrement16_acq`, `_InterlockedDecrement16_rel`, `_InterlockedDecrement16_nf`, `_InterlockedDecrement64_acq`, `_InterlockedDecrement64_rel`, `_InterlockedDecrement64_nf`,"},{"content":"ARM","pos":[3807,3810]},{"pos":[3818,3845],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Remarks","pos":[3854,3861]},{"pos":[3865,4036],"content":"There are several variations on <ph id=\"ph1\">`_InterlockedDecrement`</ph> that vary based on the data types they involve and whether processor-specific acquire or release semantics is used.","source":"There are several variations on `_InterlockedDecrement` that vary based on the data types they involve and whether processor-specific acquire or release semantics is used."},{"pos":[4043,4245],"content":"While the <ph id=\"ph1\">`_InterlockedDecrement`</ph> function operates on 32-bit integer values, <ph id=\"ph2\">`_InterlockedDecrement16`</ph> operates on 16-bit integer values and <ph id=\"ph3\">`_InterlockedDecrement64`</ph> operates on 64-bit integer values.","source":"While the `_InterlockedDecrement` function operates on 32-bit integer values, `_InterlockedDecrement16` operates on 16-bit integer values and `_InterlockedDecrement64` operates on 64-bit integer values."},{"content":"On ARM platforms, use the intrinsics with <ph id=\"ph1\">`_acq`</ph> and <ph id=\"ph2\">`_rel`</ph> suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section.","pos":[4252,4419],"source":"On ARM platforms, use the intrinsics with `_acq` and `_rel` suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section."},{"content":"The intrinsics with an <ph id=\"ph1\">`_nf`</ph> (\"no fence\") suffix do not act as a memory barrier.","pos":[4420,4500],"source":" The intrinsics with an `_nf` (\"no fence\") suffix do not act as a memory barrier."},{"content":"The variable pointed to by the <ph id=\"ph1\">`lpAddend`</ph> parameter must be aligned on a 32-bit boundary; otherwise, this function fails on multiprocessor x86 systems and any non-x86 systems.","pos":[4507,4682],"source":"The variable pointed to by the `lpAddend` parameter must be aligned on a 32-bit boundary; otherwise, this function fails on multiprocessor x86 systems and any non-x86 systems."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>align<ept id=\"p1\">](../cpp/align-cpp.md)</ept>.","pos":[4683,4738],"source":" For more information, see [align](../cpp/align-cpp.md)."},{"content":"These routines are only available as intrinsics.","pos":[4745,4793]},{"content":"Example","pos":[4802,4809]},{"content":"See Also","pos":[6522,6530]},{"content":"Compiler Intrinsics","pos":[6535,6554]},{"content":"Keywords","pos":[6599,6607]},{"content":"Conflicts with the x86 Compiler","pos":[6638,6669]}],"content":"---\ntitle: \"_InterlockedDecrement Intrinsic Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_InterlockedDecrement16_rel_cpp\"\n  - \"_InterlockedDecrement16_acq_cpp\"\n  - \"_InterlockedDecrement16_rel\"\n  - \"_InterlockedDecrement64_acq\"\n  - \"_InterlockedDecrement_nf\"\n  - \"_InterlockedDecrement16_nf\"\n  - \"_InterlockedDecrement64_rel_cpp\"\n  - \"_InterlockedDecrement_rel_cpp\"\n  - \"_InterlockedDecrement16_acq\"\n  - \"_InterlockedDecrement64_acq_cpp\"\n  - \"_InterlockedDecrement_rel\"\n  - \"_InterlockedDecrement64_nf\"\n  - \"_InterlockedDecrement16_cpp\"\n  - \"_InterlockedDecrement64\"\n  - \"_InterlockedDecrement_cpp\"\n  - \"_InterlockedDecrement64_rel\"\n  - \"_InterlockedDecrement16\"\n  - \"_InterlockedDecrement\"\n  - \"_InterlockedDecrement64_cpp\"\n  - \"_InterlockedDecrement_acq\"\n  - \"_InterlockedDecrement_acq_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"InterlockedDecrement64_rel intrinsic\"\n  - \"InterlockedDecrement64 intrinsic\"\n  - \"_InterlockedDecrement16 intrinsic\"\n  - \"_InterlockedDecrement16_acq intrinsic\"\n  - \"_InterlockedDecrement intrinsic\"\n  - \"_InterlockedDecrement_nf intrinsic\"\n  - \"_InterlockedDecrement_acq intrinsic\"\n  - \"_InterlockedDecrement64_rel intrinsic\"\n  - \"_InterlockedDecrement16_rel intrinsic\"\n  - \"InterlockedDecrement intrinsic\"\n  - \"InterlockedDecrement16 intrinsic\"\n  - \"_InterlockedDecrement16_nf intrinsic\"\n  - \"InterlockedDecrement64_acq intrinsic\"\n  - \"_InterlockedDecrement_rel intrinsic\"\n  - \"InterlockedDecrement_acq intrinsic\"\n  - \"_InterlockedDecrement64_acq intrinsic\"\n  - \"_InterlockedDecrement64 intrinsic\"\n  - \"_InterlockedDecrement64_nf intrinsic\"\n  - \"InterlockedDecrement_rel intrinsic\"\nms.assetid: 5268fce3-86b5-4b2b-b96c-2e531a3fb9b5\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _InterlockedDecrement Intrinsic Functions\n**Microsoft Specific**  \n  \n Provides compiler intrinsic support for the Win32 [!INCLUDE[winSDK](../atl/includes/winsdk_md.md)] [InterlockedDecrement](http://msdn.microsoft.com/library/ms683580.aspx) function.  \n  \n## Syntax  \n  \n```  \nlong _InterlockedDecrement(  \n   long * lpAddend  \n);  \nlong _InterlockedDecrement_acq(  \n   long * lpAddend  \n);  \nlong _InterlockedDecrement_rel(  \n   long * lpAddend  \n);  \nlong _InterlockedDecrement_nf(  \n   long * lpAddend  \n);  \nshort _InterlockedDecrement16(  \n   short * lpAddend  \n);  \nshort _InterlockedDecrement16_acq(  \n   short * lpAddend  \n);  \nshort _InterlockedDecrement16_rel(  \n   short * lpAddend  \n);  \nshort _InterlockedDecrement16_nf(  \n   short * lpAddend  \n);  \n__int64 _InterlockedDecrement64(  \n   __int64 * lpAddend  \n);  \n__int64 _InterlockedDecrement64_acq(  \n   __int64 * lpAddend  \n);  \n__int64 _InterlockedDecrement64_rel(  \n   __int64 * lpAddend  \n);   \n__int64 _InterlockedDecrement64_nf(  \n   __int64 * lpAddend  \n);  \n```  \n  \n#### Parameters  \n [in, out] `lpAddend`  \n Pointer to the variable to be decremented.  \n  \n## Return Value  \n The return value is the resulting decremented value.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`_InterlockedDecrement`, `_InterlockedDecrement16`, `_InterlockedDecrement64`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n|`_InterlockedDecrement_acq`, `_InterlockedDecrement_rel`, `_InterlockedDecrement_nf`, `_InterlockedDecrement16_acq`, `_InterlockedDecrement16_rel`, `_InterlockedDecrement16_nf`, `_InterlockedDecrement64_acq`, `_InterlockedDecrement64_rel`, `_InterlockedDecrement64_nf`,|ARM|  \n  \n **Header file** \\<intrin.h>  \n  \n## Remarks  \n There are several variations on `_InterlockedDecrement` that vary based on the data types they involve and whether processor-specific acquire or release semantics is used.  \n  \n While the `_InterlockedDecrement` function operates on 32-bit integer values, `_InterlockedDecrement16` operates on 16-bit integer values and `_InterlockedDecrement64` operates on 64-bit integer values.  \n  \n On ARM platforms, use the intrinsics with `_acq` and `_rel` suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section. The intrinsics with an `_nf` (\"no fence\") suffix do not act as a memory barrier.  \n  \n The variable pointed to by the `lpAddend` parameter must be aligned on a 32-bit boundary; otherwise, this function fails on multiprocessor x86 systems and any non-x86 systems. For more information, see [align](../cpp/align-cpp.md).  \n  \n These routines are only available as intrinsics.  \n  \n## Example  \n  \n```  \n// compiler_intrinsics_interlocked.cpp  \n// compile with: /Oi  \n#define _CRT_RAND_S  \n  \n#include <cstdlib>  \n#include <cstdio>  \n#include <process.h>  \n#include <windows.h>  \n  \n// To declare an interlocked function for use as an intrinsic,  \n// include intrin.h and put the function in a #pragma intrinsic   \n// statement.  \n#include <intrin.h>  \n  \n#pragma intrinsic (_InterlockedIncrement)  \n  \n// Data to protect with the interlocked functions.  \nvolatile LONG data = 1;  \n  \nvoid __cdecl SimpleThread(void* pParam);  \n  \nconst int THREAD_COUNT = 6;  \n  \nint main() {  \n   DWORD num;  \n   HANDLE threads[THREAD_COUNT];  \n   int args[THREAD_COUNT];  \n   int i;  \n  \n   for (i = 0; i < THREAD_COUNT; i++) {  \n     args[i] = i + 1;  \n     threads[i] = reinterpret_cast<HANDLE>(_beginthread(SimpleThread, 0,   \n                           args + i));  \n      if (threads[i] == reinterpret_cast<HANDLE>(-1))  \n         // error creating threads  \n         break;  \n   }  \n  \n   WaitForMultipleObjects(i, threads, true, INFINITE);  \n}  \n  \n// Code for our simple thread  \nvoid __cdecl SimpleThread(void* pParam) {  \n   int threadNum = *((int*)pParam);  \n   int counter;  \n   unsigned int randomValue;  \n   unsigned int time;  \n   errno_t err = rand_s(&randomValue);  \n  \n   if (err == 0) {  \n      time = (unsigned int) ((double) randomValue / (double) UINT_MAX * 500);  \n      while (data < 100) {  \n         if (data < 100) {  \n            _InterlockedIncrement(&data);  \n            printf_s(\"Thread %d: %d\\n\", threadNum, data);  \n         }  \n  \n         Sleep(time);   // wait up to half of a second  \n      }  \n   }  \n  \n   printf_s(\"Thread %d complete: %d\\n\", threadNum, data);  \n}  \n```  \n  \n## See Also  \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [Conflicts with the x86 Compiler](../build/conflicts-with-the-x86-compiler.md)"}