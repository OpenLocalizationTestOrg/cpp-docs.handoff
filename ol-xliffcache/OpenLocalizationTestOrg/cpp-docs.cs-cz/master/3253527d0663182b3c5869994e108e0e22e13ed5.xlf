<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3253527d0663182b3c5869994e108e0e22e13ed5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn001-window-class-registration.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa86254e5221c84df463b117454c6e10c1e1d90e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c9e867db202587d59687ae034b76e2682b7cd19</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN001: Window Class Registration | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN001: Window Class Registration</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This note describes the MFC routines that register the special <bpt id="p1">[</bpt>WNDCLASS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept>es needed by Microsoft Windows.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Specific <ph id="ph1">`WNDCLASS`</ph> attributes used by MFC and Windows are discussed.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Problem</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The attributes of a <bpt id="p1">[</bpt>CWnd<ept id="p1">](../mfc/reference/cwnd-class.md)</ept> object, like an <ph id="ph1">`HWND`</ph> handle in Windows, are stored in two places: the window object and the <ph id="ph2">`WNDCLASS`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The name of the <ph id="ph1">`WNDCLASS`</ph> is passed to general window creation functions such as <bpt id="p1">[</bpt>CWnd::Create<ept id="p1">](../mfc/reference/cwnd-class.md#cwnd__create)</ept> and <bpt id="p2">[</bpt>CFrameWnd::Create<ept id="p2">](../mfc/reference/cframewnd-class.md#cframewnd__create)</ept> in the <ph id="ph2">`lpszClassName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`WNDCLASS`</ph> must be registered through one of four means:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Implicitly by using a MFC provided <ph id="ph1">`WNDCLASS`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Implicitly by subclassing a Windows control (or some other control).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Explicitly by calling the MFC <bpt id="p1">[</bpt>AfxRegisterWndClass<ept id="p1">](../mfc/reference/application-information-and-management.md#afxregisterwndclass)</ept> or <bpt id="p2">[</bpt>AfxRegisterClass<ept id="p2">](../mfc/reference/application-information-and-management.md#afxregisterclass)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Explicitly by calling the Windows routine <bpt id="p1">[</bpt>RegisterClass<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633586)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>WNDCLASS Fields</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WNDCLASS`</ph> structure consists of various fields that describe a window class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following table shows the fields and specifies how they are used in an MFC application:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Field</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>window proc, must be an</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>not used (should be zero)</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>not used (should be zero)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>automatically filled with <bpt id="p1">[</bpt>AfxGetInstanceHandle<ept id="p1">](../mfc/reference/application-information-and-management.md#afxgetinstancehandle)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>icon for frame windows, see below</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>cursor for when mouse is over window, see below</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>background color, see below</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>not used (should be NULL)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>class name, see below</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Provided WNDCLASSes</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Earlier versions of MFC (before MFC 4.0), provided several predefined Window classes.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These Window classes are no longer provided by default.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Applications should use <ph id="ph1">`AfxRegisterWndClass`</ph> with the appropriate parameters.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the application provides a resource with the specified resource ID (for example, AFX_IDI_STD_FRAME), MFC will use that resource.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Otherwise it will use the default resource.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For the icon, the standard application icon is used, and for the cursor, the standard arrow cursor is used.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Two icons support MDI applications with single document types: one icon for the main application, the other icon for iconic document/MDIChild windows.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For multiple document types with different icons, you must register additional <ph id="ph1">`WNDCLASS`</ph>es or use the <bpt id="p1">[</bpt>CFrameWnd::LoadFrame<ept id="p1">](../mfc/reference/cframewnd-class.md#cframewnd__loadframe)</ept> function.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>will register a <ph id="ph1">`WNDCLASS`</ph> using the icon ID you specify as the first parameter and the following standard attributes:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>class style : CS_DBLCLKS &amp;#124; CS_HREDRAW &amp;#124; CS_VREDRAW;</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>icon AFX_IDI_STD_FRAME</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>arrow cursor</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>COLOR_WINDOW background color</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The values for background color and cursor for the <bpt id="p1">[</bpt>CMDIFrameWnd<ept id="p1">](../mfc/reference/cmdiframewnd-class.md)</ept> are not used since the client area of the <ph id="ph1">`CMDIFrameWnd`</ph> is completely covered by the <bpt id="p2">**</bpt>MDICLIENT<ept id="p2">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Microsoft does not encourage subclassing the <bpt id="p1">**</bpt>MDICLIENT<ept id="p1">**</ept> window so use the standard colors and cursor types when possible.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Subclassing and Superclassing Controls</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you subclass or superclass a Windows control (for example, <bpt id="p1">[</bpt>CButton<ept id="p1">](../mfc/reference/cbutton-class.md)</ept>) then your class automatically gets the <ph id="ph1">`WNDCLASS`</ph> attributes provided in the Windows implementation of that control.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The AfxRegisterWndClass Function</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>MFC provides a helper function for registering a window class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Given a set of attributes (window class style, cursor, background brush, and icon), a synthetic name is generated, and the resulting window class is registered.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example,</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This function returns a temporary string of the generated registered window class name.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information about this function, see <bpt id="p1">[</bpt>AfxRegisterWndClass<ept id="p1">](../mfc/reference/application-information-and-management.md#afxregisterwndclass)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The returned string is a temporary pointer to a static string buffer.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It is valid until the next call to <ph id="ph1">`AfxRegisterWndClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you want to keep this string around, store it in a <bpt id="p1">[</bpt>CString<ept id="p1">](../atl-mfc-shared/using-cstring.md)</ept> variable, as in this example:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>will throw a <bpt id="p1">[</bpt>CResourceException<ept id="p1">](../mfc/reference/cresourceexception-class.md)</ept> if the window class failed to register (either because of bad parameters, or out of Windows memory).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The RegisterClass and AfxRegisterClass Functions</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you want to do anything more sophisticated than what <ph id="ph1">`AfxRegisterWndClass`</ph> provides, you can call the Windows API <ph id="ph2">`RegisterClass`</ph> or the MFC function <ph id="ph3">`AfxRegisterClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph>, <bpt id="p1">[</bpt>CFrameWnd<ept id="p1">](../mfc/reference/cframewnd-class.md)</ept> and <bpt id="p2">[</bpt>CMDIChildWnd<ept id="p2">](../mfc/reference/cmdichildwnd-class.md)</ept> <ph id="ph2">`Create`</ph> functions take a <ph id="ph3">`lpszClassName`</ph> string name for the window class as the first parameter.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can use any registered window class name, regardless of the method you used to register it.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>It is important to use <ph id="ph1">`AfxRegisterClass`</ph> (or <ph id="ph2">`AfxRegisterWndClass`</ph>) in a DLL on Win32.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Win32 does not automatically unregister classes registered by a DLL, so you must explicitly unregister classes when the DLL is terminated.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>By using <ph id="ph1">`AfxRegisterClass`</ph> instead of <ph id="ph2">`RegisterClass`</ph> this is handled automatically for you.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>maintains a list of unique classes registered by your DLL and will automatically unregister them when the DLL terminates.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When you use <ph id="ph1">`RegisterClass`</ph> in a DLL, you must ensure that all classes are unregistered when the DLL is terminated (in your <bpt id="p1">[</bpt>DllMain<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682583)</ept> function).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Failure to do so might cause <ph id="ph1">`RegisterClass`</ph> to fail unexpectedly when another client application tries to use your DLL.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>