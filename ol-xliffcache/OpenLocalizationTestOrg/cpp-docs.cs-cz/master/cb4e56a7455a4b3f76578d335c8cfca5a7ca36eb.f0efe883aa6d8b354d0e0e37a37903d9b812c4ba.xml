{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 1) C4436 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 1) C4436 | Microsoft Docs","pos":[0,49]}]},{"content":"Compiler Warning (level 1) C4436","pos":[549,581]},{"content":"dynamic_cast from virtual base 'class1' to 'class2' in constructor or destructor could fail with partially-constructed object        Compile with /vd2 or define 'class2' with #pragma vtordisp(2) in effect","pos":[582,786]},{"pos":[793,884],"content":"The compiler has encountered a <ph id=\"ph1\">`dynamic_cast`</ph> operation with the following characteristics.","source":"The compiler has encountered a `dynamic_cast` operation with the following characteristics."},{"content":"The cast is from a base class pointer to a derived class pointer.","pos":[894,959]},{"content":"The derived class virtually inherits the base class.","pos":[969,1021]},{"pos":[1031,1103],"content":"The derived class does not have a <ph id=\"ph1\">`vtordisp`</ph> field for the virtual base.","source":"The derived class does not have a `vtordisp` field for the virtual base."},{"content":"The cast is found in a constructor or destructor of the derived class, or some class which further inherits from the derived class.","pos":[1113,1244]},{"content":"The warning indicates the <ph id=\"ph1\">`dynamic_cast`</ph> might not perform correctly, if it is operating on a partially-constructed object.","pos":[1251,1374],"source":"The warning indicates the `dynamic_cast` might not perform correctly, if it is operating on a partially-constructed object."},{"content":"That happens if the derived constructor/destructor is operating on a sub-object of some further derived object.","pos":[1376,1487]},{"content":"If the derived class named in the warning is never further derived, the warning can be ignored.","pos":[1489,1584]},{"content":"Example","pos":[1593,1600]},{"pos":[1604,1730],"content":"The following sample generates C4436 and demonstrates the code generation issue that arises from the missing <ph id=\"ph1\">`vtordisp`</ph> field.","source":"The following sample generates C4436 and demonstrates the code generation issue that arises from the missing `vtordisp` field."},{"content":"See Also","pos":[2426,2434]},{"content":"dynamic_cast Operator","pos":[2439,2460]},{"content":"vtordisp","pos":[2503,2511]},{"content":"Compiler Warning (level 4) C4437","pos":[2550,2582]}],"content":"---\ntitle: \"Compiler Warning (level 1) C4436 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\ndev_langs: \n  - \"C++\"\nms.assetid: 2b54a1fc-c9c6-4cc9-90be-faa44fc715d5\ncaps.latest.revision: 2\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 1) C4436\ndynamic_cast from virtual base 'class1' to 'class2' in constructor or destructor could fail with partially-constructed object        Compile with /vd2 or define 'class2' with #pragma vtordisp(2) in effect  \n  \n The compiler has encountered a `dynamic_cast` operation with the following characteristics.  \n  \n-   The cast is from a base class pointer to a derived class pointer.  \n  \n-   The derived class virtually inherits the base class.  \n  \n-   The derived class does not have a `vtordisp` field for the virtual base.  \n  \n-   The cast is found in a constructor or destructor of the derived class, or some class which further inherits from the derived class.  \n  \n The warning indicates the `dynamic_cast` might not perform correctly, if it is operating on a partially-constructed object.  That happens if the derived constructor/destructor is operating on a sub-object of some further derived object.  If the derived class named in the warning is never further derived, the warning can be ignored.  \n  \n## Example  \n The following sample generates C4436 and demonstrates the code generation issue that arises from the missing `vtordisp` field.  \n  \n```cpp  \n// C4436.cpp  \n// To see the warning and runtime assert, compile with: /W1  \n// To eliminate the warning and assert, compile with: /W1 /vd2  \n//       or compile with: /W1 /DFIX  \n#include <cassert>  \n  \nstruct A  \n{  \npublic:  \n    virtual ~A() {}  \n};  \n  \n#if defined(FIX)  \n#pragma vtordisp(push, 2)  \n#endif  \nstruct B : virtual A  \n{  \n    B()  \n    {  \n        A* a = static_cast<A*>(this);  \n        B* b = dynamic_cast<B*>(a);     // C4436  \n        assert(this == b);              // assert unless compiled with /vd2  \n    }  \n};  \n#if defined(FIX)  \n#pragma vtordisp(pop)  \n#endif  \n  \nstruct C : B  \n{  \n    int i;  \n};  \n  \nint main()  \n{  \n    C c;  \n}  \n```  \n  \n## See Also  \n [dynamic_cast Operator](../../cpp/dynamic-cast-operator.md)   \n [vtordisp](../../preprocessor/vtordisp.md)   \n [Compiler Warning (level 4) C4437](../../error-messages/compiler-warnings/compiler-warning-level-4-c4437.md)"}