{"nodes":[{"pos":[12,62],"content":"A.12   Using the atomic Directive | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"A.12   Using the atomic Directive | Microsoft Docs","pos":[0,50]}]},{"content":"A.12   Using the atomic Directive","pos":[542,575]},{"pos":[576,795],"content":"The following example avoids race conditions (simultaneous updates of an element of <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> by multiple threads) by using the <ph id=\"ph1\">`atomic`</ph> directive (<bpt id=\"p2\">[</bpt>Section 2.6.4<ept id=\"p2\">](../../parallel/openmp/2-6-4-atomic-construct.md)</ept> on page 19):","source":"The following example avoids race conditions (simultaneous updates of an element of *x* by multiple threads) by using the `atomic` directive ([Section 2.6.4](../../parallel/openmp/2-6-4-atomic-construct.md) on page 19):"},{"content":"The advantage of using the <ph id=\"ph1\">`atomic`</ph> directive in this example is that it allows updates of two different elements of x to occur in parallel.","pos":[1006,1146],"source":"The advantage of using the `atomic` directive in this example is that it allows updates of two different elements of x to occur in parallel."},{"content":"If a <ph id=\"ph1\">`critical`</ph> directive  (<bpt id=\"p1\">[</bpt>Section 2.6.2<ept id=\"p1\">](../../parallel/openmp/2-6-2-critical-construct.md)</ept> on page 18) were used instead, then all updates to elements of <bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept> would be executed serially (though not in any guaranteed order).","pos":[1147,1373],"source":" If a `critical` directive  ([Section 2.6.2](../../parallel/openmp/2-6-2-critical-construct.md) on page 18) were used instead, then all updates to elements of *x* would be executed serially (though not in any guaranteed order)."},{"content":"Note that the <ph id=\"ph1\">`atomic`</ph> directive applies only to the C or C++ statement immediately following it.","pos":[1380,1477],"source":"Note that the `atomic` directive applies only to the C or C++ statement immediately following it."},{"content":"As a result, elements of <bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept> are not updated atomically in this example.","pos":[1479,1551],"source":"  As a result, elements of *y* are not updated atomically in this example."}],"content":"---\ntitle: \"A.12   Using the atomic Directive | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: d3ba3c87-413d-4efa-8a45-8a7f28ab0164\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# A.12   Using the atomic Directive\nThe following example avoids race conditions (simultaneous updates of an element of *x* by multiple threads) by using the `atomic` directive ([Section 2.6.4](../../parallel/openmp/2-6-4-atomic-construct.md) on page 19):  \n  \n```  \n#pragma omp parallel for shared(x, y, index, n)  \n    for (i=0; i<n; i++)   \n    {  \n        #pragma omp atomic  \n            x[index[i]] += work1(i);  \n        y[i] += work2(i);  \n    }  \n```  \n  \n The advantage of using the `atomic` directive in this example is that it allows updates of two different elements of x to occur in parallel. If a `critical` directive  ([Section 2.6.2](../../parallel/openmp/2-6-2-critical-construct.md) on page 18) were used instead, then all updates to elements of *x* would be executed serially (though not in any guaranteed order).  \n  \n Note that the `atomic` directive applies only to the C or C++ statement immediately following it.  As a result, elements of *y* are not updated atomically in this example."}