<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c96d397cf7aba03485312dbe75006cb5edf11b64</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\how-to-use-a-message-block-filter.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1eb254095ed8c7521fff371e8e9920ce571414d6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5562b7fc3d2cd46af7fe7a557bd5d0d35aec30da</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use a Message Block Filter | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use a Message Block Filter</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document demonstrates how to use a filter function to enable an asynchronous message block to accept or reject a message on the basis of the payload of that message.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you create a message block object such as a <bpt id="p1">[</bpt>concurrency::unbounded_buffer<ept id="p1">](reference/unbounded-buffer-class.md)</ept>, a <bpt id="p2">[</bpt>concurrency::call<ept id="p2">](../../parallel/concrt/reference/call-class.md)</ept>, or a <bpt id="p3">[</bpt>concurrency::transformer<ept id="p3">](../../parallel/concrt/reference/transformer-class.md)</ept>, you can supply a <bpt id="p4">*</bpt>filter function<ept id="p4">*</ept> that determines whether the message block accepts or rejects a message.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A filter function is a useful way to guarantee that a message block receives only certain values.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Filter functions are important because they enable you to connect message blocks to form <bpt id="p1">*</bpt>dataflow networks<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In a dataflow network, message blocks control the flow of data by processing only those messages that meet specific criteria.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Compare this to the control-flow model, where the flow of data is regulated by using control structures such as conditional statements, loops, and so on.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This document provides a basic example of how to use a message filter.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For additional examples that use message filters and the dataflow model to connect message blocks, see <bpt id="p1">[</bpt>Walkthrough: Creating a Dataflow Agent<ept id="p1">](../../parallel/concrt/walkthrough-creating-a-dataflow-agent.md)</ept> and <bpt id="p2">[</bpt>Walkthrough: Creating an Image-Processing Network<ept id="p2">](../../parallel/concrt/walkthrough-creating-an-image-processing-network.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Consider the following function, <ph id="ph1">`count_primes`</ph>, which illustrates the basic usage of a message block that does not filter incoming messages.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The message block appends prime numbers to a <bpt id="p1">[</bpt>std::vector<ept id="p1">](../../standard-library/vector-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`count_primes`</ph> function sends several numbers to the message block, receives the output values from the message block, and prints those numbers that are prime to the console.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>concrt-primes-filter#1</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`transformer`</ph> object processes all input values; however, it requires only those values that are prime.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Although the application could be written so that the message sender sends only prime numbers, the requirements of the message receiver cannot always be known.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following function, <ph id="ph1">`count_primes_filter`</ph>, performs the same task as the <ph id="ph2">`count_primes`</ph> function.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`transformer`</ph> object in this version uses a filter function to accept only those values that are prime.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The function that performs the action only receives prime numbers; therefore, it does not have to call the <ph id="ph1">`is_prime`</ph> function.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`transformer`</ph> object receives only prime numbers, the <ph id="ph2">`transformer`</ph> object itself can hold the prime numbers.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In other words, the <ph id="ph1">`transformer`</ph> object in this example is not required to add the prime numbers to the <ph id="ph2">`vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>concrt-primes-filter#2</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`transformer`</ph> object now processes only those values that are prime.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the previous example, <ph id="ph1">`transformer`</ph> object processes all messages.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Therefore, the previous example must receive the same number of messages that it sends.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This example uses the result of the <bpt id="p1">[</bpt>concurrency::send<ept id="p1">](reference/concurrency-namespace-functions.md#send)</ept> function to determine how many messages to receive from the <ph id="ph1">`transformer`</ph> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`send`</ph> function returns <ph id="ph2">`true`</ph> when the message buffer accepts the message and <ph id="ph3">`false`</ph> when the message buffer rejects the message.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Therefore, the number of times that the message buffer accepts the message matches the count of prime numbers.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following code shows the complete example.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The example calls both the <ph id="ph1">`count_primes`</ph> function and the <ph id="ph2">`count_primes_filter`</ph> function.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>concrt-primes-filter#3</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`primes-filter.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc primes-filter.cpp</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A filter function can be a lambda function, a function pointer, or a function object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Every filter function takes one of the following forms:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To eliminate the unnecessary copying of data, use the second form when you have an aggregate type that is transmitted by value.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents Library</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Dataflow Agent</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating an Image-Processing Network</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>transformer Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>