{"nodes":[{"pos":[12,65],"content":"-Zc:wchar_t (wchar_t Is Native Type) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-Zc:wchar_t (wchar_t Is Native Type) | Microsoft Docs","pos":[0,53]}]},{"content":"/Zc:wchar_t (wchar_t Is Native Type)","pos":[875,911]},{"content":"Parse <ph id=\"ph1\">`wchar_t`</ph> as a built-in type according to the C++ standard.","pos":[912,977],"source":"Parse `wchar_t` as a built-in type according to the C++ standard."},{"content":"By default, <bpt id=\"p1\">**</bpt>/Zc:wchar_t<ept id=\"p1\">**</ept> is on.","pos":[978,1012],"source":" By default, **/Zc:wchar_t** is on."},{"content":"Syntax","pos":[1021,1027]},{"content":"Remarks","pos":[1068,1075]},{"content":"If <bpt id=\"p1\">**</bpt>/Zc:wchar_t<ept id=\"p1\">**</ept> is on, <ph id=\"ph1\">`wchar_t`</ph> maps to the Microsoft-specific native type <ph id=\"ph2\">`__wchar_t`</ph>.","pos":[1079,1170],"source":"If **/Zc:wchar_t** is on, `wchar_t` maps to the Microsoft-specific native type `__wchar_t`."},{"content":"If <bpt id=\"p1\">**</bpt>/Zc:wchar_t-<ept id=\"p1\">**</ept> (with a minus sign) is specified, <ph id=\"ph1\">`wchar_t`</ph> maps to a <ph id=\"ph2\">`typedef`</ph> for <ph id=\"ph3\">`unsigned short`</ph>.","pos":[1171,1276],"source":" If **/Zc:wchar_t-** (with a minus sign) is specified, `wchar_t` maps to a `typedef` for `unsigned short`."},{"content":"(In Visual C++ 6.0 and earlier, <ph id=\"ph1\">`wchar_t`</ph> was not implemented as a built-in type, but was declared in wchar.h as a <ph id=\"ph2\">`typedef`</ph> for <ph id=\"ph3\">`unsigned short`</ph>.) We do not recommend <bpt id=\"p1\">**</bpt>/Zc:wchar_t-<ept id=\"p1\">**</ept> because the C++ standard requires that <ph id=\"ph4\">`wchar_t`</ph> be a built-in type.","pos":[1277,1530],"source":" (In Visual C++ 6.0 and earlier, `wchar_t` was not implemented as a built-in type, but was declared in wchar.h as a `typedef` for `unsigned short`.) We do not recommend **/Zc:wchar_t-** because the C++ standard requires that `wchar_t` be a built-in type."},{"content":"Using the <ph id=\"ph1\">`typedef`</ph> version can cause portability problems.","pos":[1531,1590],"source":" Using the `typedef` version can cause portability problems."},{"content":"If you upgrade from earlier versions of Visual C++ and encounter compiler error <bpt id=\"p1\">[</bpt>C2664<ept id=\"p1\">](../../error-messages/compiler-errors-2/compiler-error-c2664.md)</ept> because the code is trying to implicitly convert a <ph id=\"ph1\">`wchar_t`</ph> to <ph id=\"ph2\">`unsigned short`</ph>, we recommend that you change the code to fix the error, instead of setting <bpt id=\"p2\">**</bpt>/Zc:wchar_t-<ept id=\"p2\">**</ept>.","pos":[1591,1917],"source":" If you upgrade from earlier versions of Visual C++ and encounter compiler error [C2664](../../error-messages/compiler-errors-2/compiler-error-c2664.md) because the code is trying to implicitly convert a `wchar_t` to `unsigned short`, we recommend that you change the code to fix the error, instead of setting **/Zc:wchar_t-**."},{"content":"Microsoft implements <ph id=\"ph1\">`wchar_t`</ph> as a two-byte unsigned value.","pos":[1924,1984],"source":"Microsoft implements `wchar_t` as a two-byte unsigned value."},{"content":"For more information about <ph id=\"ph1\">`wchar_t`</ph>, see <bpt id=\"p1\">[</bpt>Data Type Ranges<ept id=\"p1\">](../../cpp/data-type-ranges.md)</ept> and <bpt id=\"p2\">[</bpt>Fundamental Types<ept id=\"p2\">](../../cpp/fundamental-types-cpp.md)</ept>.","pos":[1985,2137],"source":" For more information about `wchar_t`, see [Data Type Ranges](../../cpp/data-type-ranges.md) and [Fundamental Types](../../cpp/fundamental-types-cpp.md)."},{"content":"If you write new code that has to interoperate with older code that still uses the <ph id=\"ph1\">`typedef`</ph> version of <ph id=\"ph2\">`wchar_t`</ph>, you can provide overloads for both the <ph id=\"ph3\">`unsigned short`</ph> and <ph id=\"ph4\">`__wchar_t`</ph> variations of <ph id=\"ph5\">`wchar_t`</ph>, so that your code can be linked with code compiled with <bpt id=\"p1\">**</bpt>/Zc:wchar_t<ept id=\"p1\">**</ept> or code compiled without it.","pos":[2144,2456],"source":"If you write new code that has to interoperate with older code that still uses the `typedef` version of `wchar_t`, you can provide overloads for both the `unsigned short` and `__wchar_t` variations of `wchar_t`, so that your code can be linked with code compiled with **/Zc:wchar_t** or code compiled without it."},{"content":"Otherwise, you would have to provide two different builds of the library—one with and one without <bpt id=\"p1\">**</bpt>/Zc:wchar_t<ept id=\"p1\">**</ept> enabled.","pos":[2457,2579],"source":" Otherwise, you would have to provide two different builds of the library—one with and one without **/Zc:wchar_t** enabled."},{"content":"Even in this case, we recommend that you build the older code by using the same compiler that you use to compile the new code.","pos":[2580,2706]},{"content":"Never mix binaries compiled with different compilers.","pos":[2707,2760]},{"content":"When <bpt id=\"p1\">**</bpt>/Zc:wchar_t<ept id=\"p1\">**</ept> is specified, <bpt id=\"p2\">**</bpt>_WCHAR_T_DEFINED<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>_NATIVE_WCHAR_T_DEFINED<ept id=\"p3\">**</ept> symbols are defined.","pos":[2767,2875],"source":"When **/Zc:wchar_t** is specified, **_WCHAR_T_DEFINED** and **_NATIVE_WCHAR_T_DEFINED** symbols are defined."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Predefined Macros<ept id=\"p1\">](../../preprocessor/predefined-macros.md)</ept>.","pos":[2876,2963],"source":" For more information, see [Predefined Macros](../../preprocessor/predefined-macros.md)."},{"content":"If your code uses the compiler COM global functions, because <bpt id=\"p1\">**</bpt>/Zc:wchar_t<ept id=\"p1\">**</ept> is now on by default, we recommend that you change explicit references to comsupp.lib—from the <bpt id=\"p2\">[</bpt>comment pragma<ept id=\"p2\">](../../preprocessor/comment-c-cpp.md)</ept> or on the command line—to either comsuppw.lib or comsuppwd.lib.","pos":[2970,3259],"source":"If your code uses the compiler COM global functions, because **/Zc:wchar_t** is now on by default, we recommend that you change explicit references to comsupp.lib—from the [comment pragma](../../preprocessor/comment-c-cpp.md) or on the command line—to either comsuppw.lib or comsuppwd.lib."},{"content":"(If you must compile with <bpt id=\"p1\">**</bpt>/Zc:wchar_t-<ept id=\"p1\">**</ept>, use comsupp.lib.) If you include the comdef.h header file, the correct library is specified for you.","pos":[3260,3404],"source":" (If you must compile with **/Zc:wchar_t-**, use comsupp.lib.) If you include the comdef.h header file, the correct library is specified for you."},{"content":"For information about compiler COM support, see <bpt id=\"p1\">[</bpt>Compiler COM Support<ept id=\"p1\">](../../cpp/compiler-com-support.md)</ept>.","pos":[3405,3511],"source":" For information about compiler COM support, see [Compiler COM Support](../../cpp/compiler-com-support.md)."},{"content":"The <ph id=\"ph1\">`wchar_t`</ph> type is not supported when you compile C code.","pos":[3518,3578],"source":"The `wchar_t` type is not supported when you compile C code."},{"content":"For more information about conformance issues with Visual C++, see <bpt id=\"p1\">[</bpt>Nonstandard Behavior<ept id=\"p1\">](../../cpp/nonstandard-behavior.md)</ept>.","pos":[3579,3704],"source":" For more information about conformance issues with Visual C++, see [Nonstandard Behavior](../../cpp/nonstandard-behavior.md)."},{"content":"To set this compiler option in the Visual Studio development environment","pos":[3714,3786]},{"content":"Open the project's <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","pos":[3796,3845],"source":"Open the project's **Property Pages** dialog box."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Working with Project Properties<ept id=\"p1\">](../../ide/working-with-project-properties.md)</ept>.","pos":[3846,3943],"source":" For details, see [Working with Project Properties](../../ide/working-with-project-properties.md)."},{"pos":[3953,4048],"content":"In the left pane, expand <bpt id=\"p1\">**</bpt>Configuration Properties<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>C/C++<ept id=\"p2\">**</ept>, and then select <bpt id=\"p3\">**</bpt>Language<ept id=\"p3\">**</ept>.","source":"In the left pane, expand **Configuration Properties**, **C/C++**, and then select **Language**."},{"pos":[4058,4113],"content":"Modify the <bpt id=\"p1\">**</bpt>Treat wchar_t as Built-in Type<ept id=\"p1\">**</ept> property.","source":"Modify the **Treat wchar_t as Built-in Type** property."},{"content":"To set this compiler option programmatically","pos":[4123,4167]},{"content":"See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.TreatWChar_tAsBuiltInType%2A&gt;.","pos":[4177,4273],"source":"See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.TreatWChar_tAsBuiltInType%2A>."},{"content":"See Also","pos":[4282,4290]},{"content":"/Zc (Conformance)","pos":[4295,4312]}],"content":"---\ntitle: \"-Zc:wchar_t (wchar_t Is Native Type) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"VC.Project.VCCLWCECompilerTool.TreatWChar_tAsBuiltInType\"\n  - \"VC.Project.VCCLCompilerTool.TreatWChar_tAsBuiltInType\"\n  - \"/Zc:wchar_t\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"/Zc compiler options [C++]\"\n  - \"-Zc compiler options [C++]\"\n  - \"wchar_t type\"\n  - \"Conformance compiler options\"\n  - \"Zc compiler options [C++]\"\nms.assetid: b0de5a84-da72-4e5a-9a4e-541099f939e0\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /Zc:wchar_t (wchar_t Is Native Type)\nParse `wchar_t` as a built-in type according to the C++ standard. By default, **/Zc:wchar_t** is on.  \n  \n## Syntax  \n  \n```  \n/Zc:wchar_t[-]  \n```  \n  \n## Remarks  \n If **/Zc:wchar_t** is on, `wchar_t` maps to the Microsoft-specific native type `__wchar_t`. If **/Zc:wchar_t-** (with a minus sign) is specified, `wchar_t` maps to a `typedef` for `unsigned short`. (In Visual C++ 6.0 and earlier, `wchar_t` was not implemented as a built-in type, but was declared in wchar.h as a `typedef` for `unsigned short`.) We do not recommend **/Zc:wchar_t-** because the C++ standard requires that `wchar_t` be a built-in type. Using the `typedef` version can cause portability problems. If you upgrade from earlier versions of Visual C++ and encounter compiler error [C2664](../../error-messages/compiler-errors-2/compiler-error-c2664.md) because the code is trying to implicitly convert a `wchar_t` to `unsigned short`, we recommend that you change the code to fix the error, instead of setting **/Zc:wchar_t-**.  \n  \n Microsoft implements `wchar_t` as a two-byte unsigned value. For more information about `wchar_t`, see [Data Type Ranges](../../cpp/data-type-ranges.md) and [Fundamental Types](../../cpp/fundamental-types-cpp.md).  \n  \n If you write new code that has to interoperate with older code that still uses the `typedef` version of `wchar_t`, you can provide overloads for both the `unsigned short` and `__wchar_t` variations of `wchar_t`, so that your code can be linked with code compiled with **/Zc:wchar_t** or code compiled without it. Otherwise, you would have to provide two different builds of the library—one with and one without **/Zc:wchar_t** enabled. Even in this case, we recommend that you build the older code by using the same compiler that you use to compile the new code. Never mix binaries compiled with different compilers.  \n  \n When **/Zc:wchar_t** is specified, **_WCHAR_T_DEFINED** and **_NATIVE_WCHAR_T_DEFINED** symbols are defined. For more information, see [Predefined Macros](../../preprocessor/predefined-macros.md).  \n  \n If your code uses the compiler COM global functions, because **/Zc:wchar_t** is now on by default, we recommend that you change explicit references to comsupp.lib—from the [comment pragma](../../preprocessor/comment-c-cpp.md) or on the command line—to either comsuppw.lib or comsuppwd.lib. (If you must compile with **/Zc:wchar_t-**, use comsupp.lib.) If you include the comdef.h header file, the correct library is specified for you. For information about compiler COM support, see [Compiler COM Support](../../cpp/compiler-com-support.md).  \n  \n The `wchar_t` type is not supported when you compile C code. For more information about conformance issues with Visual C++, see [Nonstandard Behavior](../../cpp/nonstandard-behavior.md).  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open the project's **Property Pages** dialog box. For details, see [Working with Project Properties](../../ide/working-with-project-properties.md).  \n  \n2.  In the left pane, expand **Configuration Properties**, **C/C++**, and then select **Language**.  \n  \n3.  Modify the **Treat wchar_t as Built-in Type** property.  \n  \n### To set this compiler option programmatically  \n  \n-   See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.TreatWChar_tAsBuiltInType%2A>.  \n  \n## See Also  \n [/Zc (Conformance)](../../build/reference/zc-conformance.md)"}