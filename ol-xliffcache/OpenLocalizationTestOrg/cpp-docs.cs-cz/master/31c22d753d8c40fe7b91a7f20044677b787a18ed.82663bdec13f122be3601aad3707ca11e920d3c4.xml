{"nodes":[{"pos":[12,90],"content":"How to: Convert from a STL-CLR Container to a .NET Collection | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Convert from a STL-CLR Container to a .NET Collection | Microsoft Docs","pos":[0,78]}]},{"content":"How to: Convert from a STL/CLR Container to a .NET Collection","pos":[675,736]},{"content":"This topic shows how to convert STL/CLR containers to their equivalent .NET collections.","pos":[737,825]},{"content":"As an example, we show how to convert a STL/CLR <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../dotnet/vector-stl-clr.md)</ept> to a .NET &lt;xref:System.Collections.Generic.ICollection%601&gt; and how to convert a STL/CLR <bpt id=\"p2\">[</bpt>map<ept id=\"p2\">](../dotnet/map-stl-clr.md)</ept> to a .NET &lt;xref:System.Collections.Generic.IDictionary%602&gt;, but the procedure is similar for all collections and containers.","pos":[826,1158],"source":" As an example, we show how to convert a STL/CLR [vector](../dotnet/vector-stl-clr.md) to a .NET <xref:System.Collections.Generic.ICollection%601> and how to convert a STL/CLR [map](../dotnet/map-stl-clr.md) to a .NET <xref:System.Collections.Generic.IDictionary%602>, but the procedure is similar for all collections and containers."},{"content":"To create a collection from a container","pos":[1168,1207]},{"content":"Use one of the following methods:","pos":[1217,1250]},{"content":"To convert part of a container, call the <bpt id=\"p1\">[</bpt>make_collection<ept id=\"p1\">](../dotnet/make-collection-stl-clr.md)</ept> function, and pass the begin iterator and end iterator of the STL/CLR container to be copied into the .NET collection.","pos":[1264,1479],"source":"To convert part of a container, call the [make_collection](../dotnet/make-collection-stl-clr.md) function, and pass the begin iterator and end iterator of the STL/CLR container to be copied into the .NET collection."},{"content":"This template function takes an STL/CLR iterator as a template argument.","pos":[1480,1552]},{"content":"The first example demonstrates this method.","pos":[1553,1596]},{"content":"To convert an entire container, cast the container to an appropriate .NET collection interface or interface collection.","pos":[1610,1729]},{"content":"The second example demonstrates this method.","pos":[1730,1774]},{"content":"Example","pos":[1783,1790]},{"content":"In this example, we create a STL/CLR <ph id=\"ph1\">`vector`</ph> and add 5 elements to it.","pos":[1794,1865],"source":"In this example, we create a STL/CLR `vector` and add 5 elements to it."},{"content":"Then, we create a .NET collection by calling the <ph id=\"ph1\">`make_collection`</ph> function.","pos":[1866,1942],"source":" Then, we create a .NET collection by calling the `make_collection` function."},{"content":"Finally, we display the contents of the newly created collection.","pos":[1943,2008]},{"content":"Example","pos":[3038,3045]},{"content":"In this example, we create a STL/CLR <ph id=\"ph1\">`map`</ph> and add 5 elements to it.","pos":[3049,3117],"source":"In this example, we create a STL/CLR `map` and add 5 elements to it."},{"content":"Then, we create a .NET &lt;xref:System.Collections.Generic.IDictionary%602&gt; and assign the <ph id=\"ph1\">`map`</ph> directly to it.","pos":[3118,3227],"source":" Then, we create a .NET <xref:System.Collections.Generic.IDictionary%602> and assign the `map` directly to it."},{"content":"Finally, we display the contents of the newly created collection.","pos":[3228,3293]},{"content":"See Also","pos":[4436,4444]},{"content":"STL/CLR Library Reference","pos":[4449,4474]},{"content":"How to: Convert from a .NET Collection to a STL/CLR Container","pos":[4521,4582]},{"content":"range_adapter (STL/CLR)","pos":[4666,4689]}],"content":"---\ntitle: \"How to: Convert from a STL-CLR Container to a .NET Collection | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"STL/CLR Containers [STL/CLR]\"\n  - \"STL/CLR, converting to .NET collections\"\nms.assetid: 70b2dfd9-869c-4e0f-9a29-b1ee0cb0d107\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Convert from a STL/CLR Container to a .NET Collection\nThis topic shows how to convert STL/CLR containers to their equivalent .NET collections. As an example, we show how to convert a STL/CLR [vector](../dotnet/vector-stl-clr.md) to a .NET <xref:System.Collections.Generic.ICollection%601> and how to convert a STL/CLR [map](../dotnet/map-stl-clr.md) to a .NET <xref:System.Collections.Generic.IDictionary%602>, but the procedure is similar for all collections and containers.  \n  \n### To create a collection from a container  \n  \n1.  Use one of the following methods:  \n  \n    -   To convert part of a container, call the [make_collection](../dotnet/make-collection-stl-clr.md) function, and pass the begin iterator and end iterator of the STL/CLR container to be copied into the .NET collection. This template function takes an STL/CLR iterator as a template argument. The first example demonstrates this method.  \n  \n    -   To convert an entire container, cast the container to an appropriate .NET collection interface or interface collection. The second example demonstrates this method.  \n  \n## Example  \n In this example, we create a STL/CLR `vector` and add 5 elements to it. Then, we create a .NET collection by calling the `make_collection` function. Finally, we display the contents of the newly created collection.  \n  \n```  \n// cliext_convert_vector_to_icollection.cpp  \n// compile with: /clr  \n  \n#include <cliext/adapter>  \n#include <cliext/vector>  \n  \nusing namespace cliext;  \nusing namespace System;  \nusing namespace System::Collections::Generic;  \n  \nint main(array<System::String ^> ^args)  \n{  \n    cliext::vector<int> primeNumbersCont;  \n    primeNumbersCont.push_back(2);  \n    primeNumbersCont.push_back(3);  \n    primeNumbersCont.push_back(5);  \n    primeNumbersCont.push_back(7);  \n    primeNumbersCont.push_back(11);  \n  \n    System::Collections::Generic::ICollection<int> ^iColl =  \n        make_collection<cliext::vector<int>::iterator>(  \n            primeNumbersCont.begin() + 1,  \n            primeNumbersCont.end() - 1);  \n  \n    Console::WriteLine(\"The contents of the System::Collections::Generic::ICollection are:\");  \n    for each (int i in iColl)  \n    {  \n        Console::WriteLine(i);  \n    }  \n}  \n```  \n  \n```Output  \nThe contents of the System::Collections::Generic::ICollection are:  \n3  \n5  \n7  \n```  \n  \n## Example  \n In this example, we create a STL/CLR `map` and add 5 elements to it. Then, we create a .NET <xref:System.Collections.Generic.IDictionary%602> and assign the `map` directly to it. Finally, we display the contents of the newly created collection.  \n  \n```  \n// cliext_convert_map_to_idictionary.cpp  \n// compile with: /clr  \n  \n#include <cliext/adapter>  \n#include <cliext/map>  \n  \nusing namespace cliext;  \nusing namespace System;  \nusing namespace System::Collections::Generic;  \n  \nint main(array<System::String ^> ^args)  \n{  \n    cliext::map<float, int> ^aMap = gcnew cliext::map<float, int>;  \n    aMap->insert(cliext::make_pair<float, int>(42.0, 42));  \n    aMap->insert(cliext::make_pair<float, int>(13.0, 13));  \n    aMap->insert(cliext::make_pair<float, int>(74.0, 74));  \n    aMap->insert(cliext::make_pair<float, int>(22.0, 22));  \n    aMap->insert(cliext::make_pair<float, int>(0.0, 0));  \n  \n    System::Collections::Generic::IDictionary<float, int> ^iDict = aMap;  \n  \n    Console::WriteLine(\"The contents of the IDictionary are:\");  \n    for each (KeyValuePair<float, int> ^kvp in iDict)  \n    {  \n        Console::WriteLine(\"Key: {0:F} Value: {1}\", kvp->Key, kvp->Value);  \n    }  \n}  \n```  \n  \n```Output  \nThe contents of the IDictionary are:  \nKey: 0.00 Value: 0  \nKey: 13.00 Value: 13  \nKey: 22.00 Value: 22  \nKey: 42.00 Value: 42  \nKey: 74.00 Value: 74  \n```  \n  \n## See Also  \n [STL/CLR Library Reference](../dotnet/stl-clr-library-reference.md)   \n [How to: Convert from a .NET Collection to a STL/CLR Container](../dotnet/how-to-convert-from-a-dotnet-collection-to-a-stl-clr-container.md)   \n [range_adapter (STL/CLR)](../dotnet/range-adapter-stl-clr.md)"}