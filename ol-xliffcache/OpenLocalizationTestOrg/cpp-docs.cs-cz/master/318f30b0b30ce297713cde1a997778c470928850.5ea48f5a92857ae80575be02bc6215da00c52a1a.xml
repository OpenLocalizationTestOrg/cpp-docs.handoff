{"nodes":[{"pos":[12,46],"content":"CFontHolder Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CFontHolder Class | Microsoft Docs","pos":[0,34]}]},{"pos":[656,673],"content":"CFontHolder Class","linkify":"CFontHolder Class","nodes":[{"content":"CFontHolder Class","pos":[0,17]}]},{"pos":[674,795],"content":"Implements the stock Font property and encapsulates the functionality of a Windows font object and the <ph id=\"ph1\">`IFont`</ph> interface.","source":"Implements the stock Font property and encapsulates the functionality of a Windows font object and the `IFont` interface."},{"pos":[804,810],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[854,861],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[871,890],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[897,901]},{"content":"Description","pos":[902,913]},{"pos":[951,1004],"content":"<bpt id=\"p1\">[</bpt>CFontHolder::CFontHolder<ept id=\"p1\">](#cfontholder__cfontholder)</ept>","source":"[CFontHolder::CFontHolder](#cfontholder__cfontholder)"},{"pos":[1005,1039],"content":"Constructs a <ph id=\"ph1\">`CFontHolder`</ph> object.","source":"Constructs a `CFontHolder` object."},{"pos":[1050,1064],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1071,1075]},{"content":"Description","pos":[1076,1087]},{"pos":[1125,1188],"content":"<bpt id=\"p1\">[</bpt>CFontHolder::GetDisplayString<ept id=\"p1\">](#cfontholder__getdisplaystring)</ept>","source":"[CFontHolder::GetDisplayString](#cfontholder__getdisplaystring)"},{"content":"Retrieves the string displayed in a container's property browser.","pos":[1189,1254]},{"pos":[1259,1320],"content":"<bpt id=\"p1\">[</bpt>CFontHolder::GetFontDispatch<ept id=\"p1\">](#cfontholder__getfontdispatch)</ept>","source":"[CFontHolder::GetFontDispatch](#cfontholder__getfontdispatch)"},{"pos":[1321,1362],"content":"Returns the font's <ph id=\"ph1\">`IDispatch`</ph> interface.","source":"Returns the font's `IDispatch` interface."},{"pos":[1367,1424],"content":"<bpt id=\"p1\">[</bpt>CFontHolder::GetFontHandle<ept id=\"p1\">](#cfontholder__getfonthandle)</ept>","source":"[CFontHolder::GetFontHandle](#cfontholder__getfonthandle)"},{"content":"Returns a handle to a Windows font.","pos":[1425,1460]},{"pos":[1465,1524],"content":"<bpt id=\"p1\">[</bpt>CFontHolder::InitializeFont<ept id=\"p1\">](#cfontholder__initializefont)</ept>","source":"[CFontHolder::InitializeFont](#cfontholder__initializefont)"},{"pos":[1525,1560],"content":"Initializes a <ph id=\"ph1\">`CFontHolder`</ph> object.","source":"Initializes a `CFontHolder` object."},{"pos":[1565,1628],"content":"<bpt id=\"p1\">[</bpt>CFontHolder::QueryTextMetrics<ept id=\"p1\">](#cfontholder__querytextmetrics)</ept>","source":"[CFontHolder::QueryTextMetrics](#cfontholder__querytextmetrics)"},{"content":"Retrieves information for the related font.","pos":[1629,1672]},{"pos":[1677,1730],"content":"<bpt id=\"p1\">[</bpt>CFontHolder::ReleaseFont<ept id=\"p1\">](#cfontholder__releasefont)</ept>","source":"[CFontHolder::ReleaseFont](#cfontholder__releasefont)"},{"pos":[1731,1820],"content":"Disconnects the <ph id=\"ph1\">`CFontHolder`</ph> object from the <ph id=\"ph2\">`IFont`</ph> and <ph id=\"ph3\">`IFontNotification`</ph> interfaces.","source":"Disconnects the `CFontHolder` object from the `IFont` and `IFontNotification` interfaces."},{"pos":[1825,1868],"content":"<bpt id=\"p1\">[</bpt>CFontHolder::Select<ept id=\"p1\">](#cfontholder__select)</ept>","source":"[CFontHolder::Select](#cfontholder__select)"},{"content":"Selects a font resource into a device context.","pos":[1869,1915]},{"pos":[1920,1965],"content":"<bpt id=\"p1\">[</bpt>CFontHolder::SetFont<ept id=\"p1\">](#cfontholder__setfont)</ept>","source":"[CFontHolder::SetFont](#cfontholder__setfont)"},{"pos":[1966,2024],"content":"Connects the <ph id=\"ph1\">`CFontHolder`</ph> object to an <ph id=\"ph2\">`IFont`</ph> interface.","source":"Connects the `CFontHolder` object to an `IFont` interface."},{"pos":[2035,2054],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[2061,2065]},{"content":"Description","pos":[2066,2077]},{"pos":[2115,2160],"content":"<bpt id=\"p1\">[</bpt>CFontHolder::m_pFont<ept id=\"p1\">](#cfontholder__m_pfont)</ept>","source":"[CFontHolder::m_pFont](#cfontholder__m_pfont)"},{"pos":[2161,2219],"content":"A pointer to the <ph id=\"ph1\">`CFontHolder`</ph> object's <ph id=\"ph2\">`IFont`</ph> interface.","source":"A pointer to the `CFontHolder` object's `IFont` interface."},{"pos":[2229,2236],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2240,2281],"content":"<ph id=\"ph1\">`CFontHolder`</ph> does not have a base class.","source":"`CFontHolder` does not have a base class."},{"content":"Use this class to implement custom font properties for your control.","pos":[2288,2356]},{"content":"For information on creating such properties, see the article <bpt id=\"p1\">[</bpt>ActiveX Controls: Using Fonts<ept id=\"p1\">](../../mfc/mfc-activex-controls-using-fonts.md)</ept>.","pos":[2357,2497],"source":" For information on creating such properties, see the article [ActiveX Controls: Using Fonts](../../mfc/mfc-activex-controls-using-fonts.md)."},{"pos":[2506,2527],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2553,2565],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2569,2589],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxctl.h","source":"**Header:** afxctl.h"},{"pos":[2599,2664],"content":"<bpt id=\"p1\">&lt;a name=\"cfontholder__cfontholder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFontHolder::CFontHolder","linkify":"<a name=\"cfontholder__cfontholder\"></a>  CFontHolder::CFontHolder","source":"<a name=\"cfontholder__cfontholder\"></a>  CFontHolder::CFontHolder"},{"pos":[2668,2702],"content":"Constructs a <ph id=\"ph1\">`CFontHolder`</ph> object.","source":"Constructs a `CFontHolder` object."},{"pos":[2779,2789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pNotify<ept id=\"p1\">*</ept>","pos":[2793,2802],"source":"*pNotify*"},{"content":"Pointer to the font's <ph id=\"ph1\">`IPropertyNotifySink`</ph> interface.","pos":[2806,2860],"source":" Pointer to the font's `IPropertyNotifySink` interface."},{"pos":[2870,2877],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2881,2963],"content":"You must call <ph id=\"ph1\">`InitializeFont`</ph> to initialize the resulting object before using it.","source":"You must call `InitializeFont` to initialize the resulting object before using it."},{"pos":[2973,3048],"content":"<bpt id=\"p1\">&lt;a name=\"cfontholder__getdisplaystring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFontHolder::GetDisplayString","linkify":"<a name=\"cfontholder__getdisplaystring\"></a>  CFontHolder::GetDisplayString","source":"<a name=\"cfontholder__getdisplaystring\"></a>  CFontHolder::GetDisplayString"},{"content":"Retrieves a string that can be displayed in a container's property browser.","pos":[3052,3127]},{"pos":[3194,3204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Reference to the <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> that is to hold the display string.","pos":[3222,3334],"source":" Reference to the [CString](../../atl-mfc-shared/reference/cstringt-class.md) that is to hold the display string."},{"pos":[3344,3356],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the string is successfully retrieved; otherwise 0.","pos":[3360,3421]},{"pos":[3431,3504],"content":"<bpt id=\"p1\">&lt;a name=\"cfontholder__getfontdispatch\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFontHolder::GetFontDispatch","linkify":"<a name=\"cfontholder__getfontdispatch\"></a>  CFontHolder::GetFontDispatch","source":"<a name=\"cfontholder__getfontdispatch\"></a>  CFontHolder::GetFontDispatch"},{"content":"Call this function to retrieve a pointer to the font's dispatch interface.","pos":[3508,3582]},{"pos":[3637,3649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the <ph id=\"ph1\">`CFontHolder`</ph> object's <bpt id=\"p1\">**</bpt>IFontDisp<ept id=\"p1\">**</ept> interface.","pos":[3653,3717],"source":"A pointer to the `CFontHolder` object's **IFontDisp** interface."},{"content":"Note that the function that calls <ph id=\"ph1\">`GetFontDispatch`</ph> must call <ph id=\"ph2\">`IUnknown::Release`</ph> on this interface pointer when done with it.","pos":[3718,3844],"source":" Note that the function that calls `GetFontDispatch` must call `IUnknown::Release` on this interface pointer when done with it."},{"pos":[3854,3861],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3865,3920],"content":"Call <ph id=\"ph1\">`InitializeFont`</ph> before calling <ph id=\"ph2\">`GetFontDispatch`</ph>.","source":"Call `InitializeFont` before calling `GetFontDispatch`."},{"pos":[3930,3999],"content":"<bpt id=\"p1\">&lt;a name=\"cfontholder__getfonthandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFontHolder::GetFontHandle","linkify":"<a name=\"cfontholder__getfonthandle\"></a>  CFontHolder::GetFontHandle","source":"<a name=\"cfontholder__getfonthandle\"></a>  CFontHolder::GetFontHandle"},{"content":"Call this function to get a handle to a Windows font.","pos":[4003,4056]},{"pos":[4172,4182],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Height, in logical units, of the rectangle in which the control is drawn.","pos":[4201,4274]},{"content":"Height, in <ph id=\"ph1\">`MM_HIMETRIC`</ph> units, of the control.","pos":[4297,4344],"source":" Height, in `MM_HIMETRIC` units, of the control."},{"pos":[4354,4366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4370,4418],"content":"A handle to the Font object; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A handle to the Font object; otherwise **NULL**."},{"pos":[4428,4435],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4439,4604],"content":"The ratio of <ph id=\"ph1\">`cyLogical`</ph> and <ph id=\"ph2\">`cyHimetric`</ph> is used to calculate the proper display size, in logical units, for the font's point size expressed in <ph id=\"ph3\">`MM_HIMETRIC`</ph> units:","source":"The ratio of `cyLogical` and `cyHimetric` is used to calculate the proper display size, in logical units, for the font's point size expressed in `MM_HIMETRIC` units:"},{"pos":[4611,4667],"content":"Display size = ( <ph id=\"ph1\">`cyLogical`</ph><ph id=\"ph2\"> / </ph><ph id=\"ph3\">`cyHimetric`</ph>) X font size","source":"Display size = ( `cyLogical` / `cyHimetric`) X font size"},{"content":"The version with no parameters returns a handle to a font sized correctly for the screen.","pos":[4674,4763]},{"pos":[4773,4844],"content":"<bpt id=\"p1\">&lt;a name=\"cfontholder__initializefont\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFontHolder::InitializeFont","linkify":"<a name=\"cfontholder__initializefont\"></a>  CFontHolder::InitializeFont","source":"<a name=\"cfontholder__initializefont\"></a>  CFontHolder::InitializeFont"},{"pos":[4848,4883],"content":"Initializes a <ph id=\"ph1\">`CFontHolder`</ph> object.","source":"Initializes a `CFontHolder` object."},{"pos":[5010,5020],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to a font description structure ( <bpt id=\"p1\">[</bpt>FONTDESC<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692782)</ept>) that specifies the font's characteristics.","pos":[5039,5195],"source":" Pointer to a font description structure ( [FONTDESC](http://msdn.microsoft.com/library/windows/desktop/ms692782)) that specifies the font's characteristics."},{"content":"Pointer to the container's ambient Font property.","pos":[5224,5273]},{"pos":[5283,5290],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5294,5453],"content":"If <ph id=\"ph1\">`pFontDispAmbient`</ph> is not <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the <ph id=\"ph2\">`CFontHolder`</ph> object is connected to a clone of the <ph id=\"ph3\">`IFont`</ph> interface used by the container's ambient Font property.","source":"If `pFontDispAmbient` is not **NULL**, the `CFontHolder` object is connected to a clone of the `IFont` interface used by the container's ambient Font property."},{"pos":[5460,5642],"content":"If <ph id=\"ph1\">`pFontDispAmbient`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, a new Font object is created either from the font description pointed to by <ph id=\"ph2\">`pFontDesc`</ph> or, if <ph id=\"ph3\">`pFontDesc`</ph> is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>, from a default description.","source":"If `pFontDispAmbient` is **NULL**, a new Font object is created either from the font description pointed to by `pFontDesc` or, if `pFontDesc` is **NULL**, from a default description."},{"pos":[5649,5710],"content":"Call this function after constructing a <ph id=\"ph1\">`CFontHolder`</ph> object.","source":"Call this function after constructing a `CFontHolder` object."},{"pos":[5720,5777],"content":"<bpt id=\"p1\">&lt;a name=\"cfontholder__m_pfont\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFontHolder::m_pFont","linkify":"<a name=\"cfontholder__m_pfont\"></a>  CFontHolder::m_pFont","source":"<a name=\"cfontholder__m_pfont\"></a>  CFontHolder::m_pFont"},{"pos":[5781,5839],"content":"A pointer to the <ph id=\"ph1\">`CFontHolder`</ph> object's <ph id=\"ph2\">`IFont`</ph> interface.","source":"A pointer to the `CFontHolder` object's `IFont` interface."},{"pos":[5882,5957],"content":"<bpt id=\"p1\">&lt;a name=\"cfontholder__querytextmetrics\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFontHolder::QueryTextMetrics","linkify":"<a name=\"cfontholder__querytextmetrics\"></a>  CFontHolder::QueryTextMetrics","source":"<a name=\"cfontholder__querytextmetrics\"></a>  CFontHolder::QueryTextMetrics"},{"pos":[5961,6044],"content":"Retrieves information on the physical font represented by the <ph id=\"ph1\">`CFontHolder`</ph> object.","source":"Retrieves information on the physical font represented by the `CFontHolder` object."},{"pos":[6111,6121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>TEXTMETRIC<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145132)</ept> structure that will receive the information.","pos":[6135,6267],"source":" A pointer to a [TEXTMETRIC](http://msdn.microsoft.com/library/windows/desktop/dd145132) structure that will receive the information."},{"pos":[6277,6342],"content":"<bpt id=\"p1\">&lt;a name=\"cfontholder__releasefont\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFontHolder::ReleaseFont","linkify":"<a name=\"cfontholder__releasefont\"></a>  CFontHolder::ReleaseFont","source":"<a name=\"cfontholder__releasefont\"></a>  CFontHolder::ReleaseFont"},{"pos":[6346,6424],"content":"This function disconnects the <ph id=\"ph1\">`CFontHolder`</ph> object from its <ph id=\"ph2\">`IFont`</ph> interface.","source":"This function disconnects the `CFontHolder` object from its `IFont` interface."},{"pos":[6469,6524],"content":"<bpt id=\"p1\">&lt;a name=\"cfontholder__select\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFontHolder::Select","linkify":"<a name=\"cfontholder__select\"></a>  CFontHolder::Select","source":"<a name=\"cfontholder__select\"></a>  CFontHolder::Select"},{"content":"Call this function to select your control's font into the specified device context.","pos":[6528,6611]},{"pos":[6711,6721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Device context into which the font is selected.","pos":[6734,6781]},{"content":"Height, in logical units, of the rectangle in which the control is drawn.","pos":[6803,6876]},{"content":"Height, in <ph id=\"ph1\">`MM_HIMETRIC`</ph> units, of the control.","pos":[6899,6946],"source":" Height, in `MM_HIMETRIC` units, of the control."},{"pos":[6956,6968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the font that is being replaced.","pos":[6972,7017]},{"pos":[7027,7034],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7038,7151],"content":"See <bpt id=\"p1\">[</bpt>GetFontHandle<ept id=\"p1\">](#cfontholder__getfonthandle)</ept> for a discussion of the <ph id=\"ph1\">`cyLogical`</ph> and <ph id=\"ph2\">`cyHimetric`</ph> parameters.","source":"See [GetFontHandle](#cfontholder__getfonthandle) for a discussion of the `cyLogical` and `cyHimetric` parameters."},{"pos":[7161,7218],"content":"<bpt id=\"p1\">&lt;a name=\"cfontholder__setfont\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFontHolder::SetFont","linkify":"<a name=\"cfontholder__setfont\"></a>  CFontHolder::SetFont","source":"<a name=\"cfontholder__setfont\"></a>  CFontHolder::SetFont"},{"pos":[7222,7311],"content":"Releases any existing font and connects the <ph id=\"ph1\">`CFontHolder`</ph> object to an <ph id=\"ph2\">`IFont`</ph> interface.","source":"Releases any existing font and connects the `CFontHolder` object to an `IFont` interface."},{"pos":[7367,7377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pNewFont<ept id=\"p1\">*</ept>","pos":[7381,7391],"source":"*pNewFont*"},{"content":"Pointer to the new <ph id=\"ph1\">`IFont`</ph> interface.","pos":[7395,7432],"source":" Pointer to the new `IFont` interface."},{"pos":[7441,7449],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[7453,7501],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CPropExchange Class<ept id=\"p1\">](../../mfc/reference/cpropexchange-class.md)</ept>","pos":[7504,7570],"source":" [CPropExchange Class](../../mfc/reference/cpropexchange-class.md)"}],"content":"---\ntitle: \"CFontHolder Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CFontHolder\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"custom fonts\"\n  - \"CFontHolder class\"\n  - \"fonts, ActiveX controls\"\nms.assetid: 728ab472-0c97-440d-889f-1324c6e1b6b8\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CFontHolder Class\nImplements the stock Font property and encapsulates the functionality of a Windows font object and the `IFont` interface.  \n  \n## Syntax  \n  \n```  \nclass CFontHolder  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFontHolder::CFontHolder](#cfontholder__cfontholder)|Constructs a `CFontHolder` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFontHolder::GetDisplayString](#cfontholder__getdisplaystring)|Retrieves the string displayed in a container's property browser.|  \n|[CFontHolder::GetFontDispatch](#cfontholder__getfontdispatch)|Returns the font's `IDispatch` interface.|  \n|[CFontHolder::GetFontHandle](#cfontholder__getfonthandle)|Returns a handle to a Windows font.|  \n|[CFontHolder::InitializeFont](#cfontholder__initializefont)|Initializes a `CFontHolder` object.|  \n|[CFontHolder::QueryTextMetrics](#cfontholder__querytextmetrics)|Retrieves information for the related font.|  \n|[CFontHolder::ReleaseFont](#cfontholder__releasefont)|Disconnects the `CFontHolder` object from the `IFont` and `IFontNotification` interfaces.|  \n|[CFontHolder::Select](#cfontholder__select)|Selects a font resource into a device context.|  \n|[CFontHolder::SetFont](#cfontholder__setfont)|Connects the `CFontHolder` object to an `IFont` interface.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFontHolder::m_pFont](#cfontholder__m_pfont)|A pointer to the `CFontHolder` object's `IFont` interface.|  \n  \n## Remarks  \n `CFontHolder` does not have a base class.  \n  \n Use this class to implement custom font properties for your control. For information on creating such properties, see the article [ActiveX Controls: Using Fonts](../../mfc/mfc-activex-controls-using-fonts.md).  \n  \n## Inheritance Hierarchy  \n `CFontHolder`  \n  \n## Requirements  \n **Header:** afxctl.h  \n  \n##  <a name=\"cfontholder__cfontholder\"></a>  CFontHolder::CFontHolder  \n Constructs a `CFontHolder` object.  \n  \n```  \nexplicit CFontHolder(LPPROPERTYNOTIFYSINK pNotify);\n```  \n  \n### Parameters  \n *pNotify*  \n Pointer to the font's `IPropertyNotifySink` interface.  \n  \n### Remarks  \n You must call `InitializeFont` to initialize the resulting object before using it.  \n  \n##  <a name=\"cfontholder__getdisplaystring\"></a>  CFontHolder::GetDisplayString  \n Retrieves a string that can be displayed in a container's property browser.  \n  \n```  \nBOOL GetDisplayString(CString& strValue);\n```  \n  \n### Parameters  \n `strValue`  \n Reference to the [CString](../../atl-mfc-shared/reference/cstringt-class.md) that is to hold the display string.  \n  \n### Return Value  \n Nonzero if the string is successfully retrieved; otherwise 0.  \n  \n##  <a name=\"cfontholder__getfontdispatch\"></a>  CFontHolder::GetFontDispatch  \n Call this function to retrieve a pointer to the font's dispatch interface.  \n  \n```  \nLPFONTDISP GetFontDispatch();\n```  \n  \n### Return Value  \n A pointer to the `CFontHolder` object's **IFontDisp** interface. Note that the function that calls `GetFontDispatch` must call `IUnknown::Release` on this interface pointer when done with it.  \n  \n### Remarks  \n Call `InitializeFont` before calling `GetFontDispatch`.  \n  \n##  <a name=\"cfontholder__getfonthandle\"></a>  CFontHolder::GetFontHandle  \n Call this function to get a handle to a Windows font.  \n  \n```  \nHFONT GetFontHandle();\n\n \nHFONT GetFontHandle(\n    long cyLogical,  \n    long cyHimetric);\n```  \n  \n### Parameters  \n `cyLogical`  \n Height, in logical units, of the rectangle in which the control is drawn.  \n  \n `cyHimetric`  \n Height, in `MM_HIMETRIC` units, of the control.  \n  \n### Return Value  \n A handle to the Font object; otherwise **NULL**.  \n  \n### Remarks  \n The ratio of `cyLogical` and `cyHimetric` is used to calculate the proper display size, in logical units, for the font's point size expressed in `MM_HIMETRIC` units:  \n  \n Display size = ( `cyLogical` / `cyHimetric`) X font size  \n  \n The version with no parameters returns a handle to a font sized correctly for the screen.  \n  \n##  <a name=\"cfontholder__initializefont\"></a>  CFontHolder::InitializeFont  \n Initializes a `CFontHolder` object.  \n  \n```  \nvoid InitializeFont(\n    const FONTDESC* pFontDesc = NULL,  \n    LPDISPATCH pFontDispAmbient = NULL);\n```  \n  \n### Parameters  \n `pFontDesc`  \n Pointer to a font description structure ( [FONTDESC](http://msdn.microsoft.com/library/windows/desktop/ms692782)) that specifies the font's characteristics.  \n  \n `pFontDispAmbient`  \n Pointer to the container's ambient Font property.  \n  \n### Remarks  \n If `pFontDispAmbient` is not **NULL**, the `CFontHolder` object is connected to a clone of the `IFont` interface used by the container's ambient Font property.  \n  \n If `pFontDispAmbient` is **NULL**, a new Font object is created either from the font description pointed to by `pFontDesc` or, if `pFontDesc` is **NULL**, from a default description.  \n  \n Call this function after constructing a `CFontHolder` object.  \n  \n##  <a name=\"cfontholder__m_pfont\"></a>  CFontHolder::m_pFont  \n A pointer to the `CFontHolder` object's `IFont` interface.  \n  \n```  \nLPFONT m_pFont;  \n```  \n  \n##  <a name=\"cfontholder__querytextmetrics\"></a>  CFontHolder::QueryTextMetrics  \n Retrieves information on the physical font represented by the `CFontHolder` object.  \n  \n```  \nvoid QueryTextMetrics(LPTEXTMETRIC lptm);\n```  \n  \n### Parameters  \n `lptm`  \n A pointer to a [TEXTMETRIC](http://msdn.microsoft.com/library/windows/desktop/dd145132) structure that will receive the information.  \n  \n##  <a name=\"cfontholder__releasefont\"></a>  CFontHolder::ReleaseFont  \n This function disconnects the `CFontHolder` object from its `IFont` interface.  \n  \n```  \nvoid ReleaseFont();\n```  \n  \n##  <a name=\"cfontholder__select\"></a>  CFontHolder::Select  \n Call this function to select your control's font into the specified device context.  \n  \n```  \nCFont* Select(\n    CDC* pDC,  \n    long cyLogical,  \n    long cyHimetric);\n```  \n  \n### Parameters  \n `pDC`  \n Device context into which the font is selected.  \n  \n `cyLogical`  \n Height, in logical units, of the rectangle in which the control is drawn.  \n  \n `cyHimetric`  \n Height, in `MM_HIMETRIC` units, of the control.  \n  \n### Return Value  \n A pointer to the font that is being replaced.  \n  \n### Remarks  \n See [GetFontHandle](#cfontholder__getfonthandle) for a discussion of the `cyLogical` and `cyHimetric` parameters.  \n  \n##  <a name=\"cfontholder__setfont\"></a>  CFontHolder::SetFont  \n Releases any existing font and connects the `CFontHolder` object to an `IFont` interface.  \n  \n```  \nvoid SetFont(LPFONT pNewFont);\n```  \n  \n### Parameters  \n *pNewFont*  \n Pointer to the new `IFont` interface.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CPropExchange Class](../../mfc/reference/cpropexchange-class.md)\n"}