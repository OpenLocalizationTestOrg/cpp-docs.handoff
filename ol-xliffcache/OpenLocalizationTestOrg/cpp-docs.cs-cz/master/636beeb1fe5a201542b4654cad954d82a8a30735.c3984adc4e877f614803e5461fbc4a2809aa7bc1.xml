{"nodes":[{"pos":[12,44],"content":"CFileTime Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CFileTime Class | Microsoft Docs","pos":[0,32]}]},{"content":"CFileTime Class","pos":[674,689]},{"content":"This class provides methods for managing the date and time values associated with a file.","pos":[690,779]},{"content":"Syntax","pos":[788,794]},{"content":"Members","pos":[851,858]},{"content":"Public Constructors","pos":[868,887]},{"content":"Name","pos":[894,898]},{"content":"Description","pos":[899,910]},{"content":"CFileTime::CFileTime","pos":[949,969]},{"content":"The constructor.","pos":[994,1010]},{"content":"Public Methods","pos":[1021,1035]},{"content":"Name","pos":[1042,1046]},{"content":"Description","pos":[1047,1058]},{"content":"CFileTime::GetCurrentTime","pos":[1097,1122]},{"pos":[1152,1260],"content":"Call this static function to retrieve a <ph id=\"ph1\">`CFileTime`</ph> object that represents the current system date and time.","source":"Call this static function to retrieve a `CFileTime` object that represents the current system date and time."},{"content":"CFileTime::GetTime","pos":[1266,1284]},{"pos":[1307,1373],"content":"Call this method to retrieve the time from the <ph id=\"ph1\">`CFileTime`</ph> object.","source":"Call this method to retrieve the time from the `CFileTime` object."},{"content":"CFileTime::LocalToUTC","pos":[1379,1400]},{"content":"Call this method to convert a local file time to a file time based on the Coordinated Universal Time (UTC).","pos":[1426,1533]},{"content":"CFileTime::SetTime","pos":[1539,1557]},{"pos":[1580,1655],"content":"Call this method to set the date and time stored by the <ph id=\"ph1\">`CFileTime`</ph> object.","source":"Call this method to set the date and time stored by the `CFileTime` object."},{"content":"CFileTime::UTCToLocal","pos":[1661,1682]},{"content":"Call this method to convert time based on the Coordinated Universal Time (UTC) to local file time.","pos":[1708,1806]},{"content":"Public Operators","pos":[1817,1833]},{"content":"Name","pos":[1840,1844]},{"content":"Description","pos":[1845,1856]},{"content":"CFileTime::operator -","pos":[1895,1916]},{"pos":[1942,2030],"content":"This operator is used to perform subtraction on a <ph id=\"ph1\">`CFileTime`</ph> or <ph id=\"ph2\">`CFileTimeSpan`</ph> object.","source":"This operator is used to perform subtraction on a `CFileTime` or `CFileTimeSpan` object."},{"content":"CFileTime::operator !=","pos":[2036,2058]},{"pos":[2087,2149],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects for inequality.","source":"This operator compares two `CFileTime` objects for inequality."},{"content":"CFileTime::operator +","pos":[2155,2176]},{"pos":[2205,2275],"content":"This operator is used to perform addition on a <ph id=\"ph1\">`CFileTimeSpan`</ph> object.","source":"This operator is used to perform addition on a `CFileTimeSpan` object."},{"content":"CFileTime::operator +=","pos":[2281,2303]},{"pos":[2335,2449],"content":"This operator is used to perform addition on a <ph id=\"ph1\">`CFileTimeSpan`</ph> object and assign the result to the current object.","source":"This operator is used to perform addition on a `CFileTimeSpan` object and assign the result to the current object."},{"content":"CFileTime::operator","pos":[2455,2474]},{"pos":[2508,2579],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects to determine the lesser.","source":"This operator compares two `CFileTime` objects to determine the lesser."},{"content":"CFileTime::operator","pos":[2585,2604]},{"pos":[2642,2725],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects to determine equality or the lesser.","source":"This operator compares two `CFileTime` objects to determine equality or the lesser."},{"content":"CFileTime::operator =","pos":[2731,2752]},{"content":"The assignment operator.","pos":[2780,2804]},{"content":"CFileTime::operator -=","pos":[2810,2832]},{"pos":[2861,2978],"content":"This operator is used to perform subtraction on a <ph id=\"ph1\">`CFileTimeSpan`</ph> object and assign the result to the current object.","source":"This operator is used to perform subtraction on a `CFileTimeSpan` object and assign the result to the current object."},{"content":"CFileTime::operator ==","pos":[2984,3006]},{"pos":[3037,3097],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects for equality.","source":"This operator compares two `CFileTime` objects for equality."},{"content":"CFileTime::operator","pos":[3103,3122]},{"pos":[3156,3227],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects to determine the larger.","source":"This operator compares two `CFileTime` objects to determine the larger."},{"content":"CFileTime::operator","pos":[3233,3252]},{"pos":[3290,3373],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects to determine equality or the larger.","source":"This operator compares two `CFileTime` objects to determine equality or the larger."},{"content":"Public Constants","pos":[3384,3400]},{"content":"Name","pos":[3407,3411]},{"content":"Description","pos":[3412,3423]},{"content":"CFileTime::Day","pos":[3462,3476]},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one day.","pos":[3495,3584]},{"content":"CFileTime::Hour","pos":[3590,3605]},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one hour.","pos":[3625,3715]},{"content":"CFileTime::Millisecond","pos":[3721,3743]},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one millisecond.","pos":[3770,3867]},{"content":"CFileTime::Minute","pos":[3873,3890]},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one minute.","pos":[3912,4004]},{"content":"CFileTime::Second","pos":[4010,4027]},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one second.","pos":[4049,4141]},{"content":"CFileTime::Week","pos":[4147,4162]},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one week.","pos":[4182,4272]},{"content":"Remarks","pos":[4282,4289]},{"content":"This class provides methods for managing the date and time values associated with the creation, access and modification of files.","pos":[4293,4422]},{"content":"The methods and data of this class are frequently used in conjunction with <ph id=\"ph1\">`CFileTimeSpan`</ph> objects, which deal with relative time values.","pos":[4423,4560],"source":" The methods and data of this class are frequently used in conjunction with `CFileTimeSpan` objects, which deal with relative time values."},{"content":"The date and time value is stored as a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601.","pos":[4567,4693]},{"content":"This is the Coordinated Universal Time (UTC) format.","pos":[4694,4746]},{"content":"The following static const member variables are provided to simplify calculations:","pos":[4753,4835]},{"content":"Member variable","pos":[4842,4857]},{"content":"Number of 100-nanosecond intervals","pos":[4858,4892]},{"content":"Millisecond","pos":[4965,4976]},{"content":"10,000","pos":[4977,4983]},{"content":"Second","pos":[4988,4994]},{"content":"Millisecond * 1,000","pos":[4995,5014]},{"content":"Minute","pos":[5019,5025]},{"content":"Second * 60","pos":[5026,5037]},{"content":"Hour","pos":[5042,5046]},{"content":"Minute * 60","pos":[5047,5058]},{"content":"Day","pos":[5063,5066]},{"content":"Hour * 24","pos":[5067,5076]},{"content":"Week","pos":[5081,5085]},{"content":"Day * 7","pos":[5086,5093]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> Not all file systems can record creation and last access time and not all file systems record them in the same manner.","pos":[5101,5228],"source":"**Note** Not all file systems can record creation and last access time and not all file systems record them in the same manner."},{"content":"For example, on the Windows NT FAT file system, create time has a resolution of 10 milliseconds, write time has a resolution of 2 seconds, and access time has a resolution of 1 day (the access date).","pos":[5229,5428]},{"content":"On NTFS, access time has a resolution of 1 hour.","pos":[5429,5477]},{"content":"Furthermore, FAT records times on disk in local time, but NTFS records times on disk in UTC.","pos":[5478,5570]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Times<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724290)</ept>.","pos":[5571,5670],"source":" For more information, see [File Times](http://msdn.microsoft.com/library/windows/desktop/ms724290)."},{"content":"Inheritance Hierarchy","pos":[5679,5700]},{"content":"Requirements","pos":[5741,5753]},{"pos":[5757,5778],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atltime.h","source":"**Header:** atltime.h"},{"pos":[5825,5845],"content":"CFileTime::CFileTime"},{"content":"The constructor.","pos":[5849,5865]},{"content":"Parameters","pos":[5986,5996]},{"content":"A <bpt id=\"p1\">[</bpt>FILETIME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724284)</ept> structure.","pos":[6008,6091],"source":" A [FILETIME](http://msdn.microsoft.com/library/windows/desktop/ms724284) structure."},{"content":"The date and time expressed as a 64-bit value.","pos":[6109,6155]},{"content":"Remarks","pos":[6165,6172]},{"content":"The <ph id=\"ph1\">`CFileTime`</ph> object can be created using an existing date and time from a <ph id=\"ph2\">`FILETIME`</ph> structure, or expressed as a 64-bit value (in local or Coordinated Universal Time (UTC) time formats).","pos":[6176,6366],"source":"The `CFileTime` object can be created using an existing date and time from a `FILETIME` structure, or expressed as a 64-bit value (in local or Coordinated Universal Time (UTC) time formats)."},{"content":"The default constructor sets the time to 0.","pos":[6367,6410]},{"pos":[6451,6465],"content":"CFileTime::Day"},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one day.","pos":[6469,6558]},{"content":"Example","pos":[6620,6627]},{"pos":[6631,6701],"content":"See the example for <bpt id=\"p1\">[</bpt>CFileTime::Millisecond<ept id=\"p1\">](#cfiletime__millisecond)</ept>.","source":"See the example for [CFileTime::Millisecond](#cfiletime__millisecond)."},{"pos":[6753,6778],"content":"CFileTime::GetCurrentTime"},{"pos":[6782,6890],"content":"Call this static function to retrieve a <ph id=\"ph1\">`CFileTime`</ph> object that represents the current system date and time.","source":"Call this static function to retrieve a `CFileTime` object that represents the current system date and time."},{"content":"Return Value","pos":[6956,6968]},{"content":"Returns the current system date and time in Coordinated Universal Time (UTC) format.","pos":[6972,7056]},{"content":"Example","pos":[7066,7073]},{"pos":[7088,7103],"content":"NVC_MFCFiles#41"},{"pos":[7220,7238],"content":"CFileTime::GetTime"},{"pos":[7242,7308],"content":"Call this method to retrieve the time from the <ph id=\"ph1\">`CFileTime`</ph> object.","source":"Call this method to retrieve the time from the `CFileTime` object."},{"content":"Return Value","pos":[7366,7378]},{"content":"Returns the date and time as a 64-bit number, which may be in either local or Coordinated Universal Time (UTC) format.","pos":[7382,7500]},{"pos":[7542,7557],"content":"CFileTime::Hour"},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one hour.","pos":[7561,7651]},{"content":"Example","pos":[7716,7723]},{"pos":[7727,7797],"content":"See the example for <bpt id=\"p1\">[</bpt>CFileTime::Millisecond<ept id=\"p1\">](#cfiletime__millisecond)</ept>.","source":"See the example for [CFileTime::Millisecond](#cfiletime__millisecond)."},{"pos":[7845,7866],"content":"CFileTime::LocalToUTC"},{"content":"Call this method to convert a local file time to a file time based on the Coordinated Universal Time (UTC).","pos":[7870,7977]},{"content":"Return Value","pos":[8038,8050]},{"pos":[8054,8117],"content":"Returns a <ph id=\"ph1\">`CFileTime`</ph> object containing the time in UTC format.","source":"Returns a `CFileTime` object containing the time in UTC format."},{"content":"Example","pos":[8127,8134]},{"pos":[8138,8206],"content":"See the example for <bpt id=\"p1\">[</bpt>CFileTime::UTCToLocal<ept id=\"p1\">](#cfiletime__utctolocal)</ept>.","source":"See the example for [CFileTime::UTCToLocal](#cfiletime__utctolocal)."},{"pos":[8255,8277],"content":"CFileTime::Millisecond"},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one millisecond.","pos":[8281,8378]},{"content":"Example","pos":[8445,8452]},{"pos":[8467,8482],"content":"NVC_MFCFiles#44"},{"pos":[8598,8615],"content":"CFileTime::Minute"},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one minute.","pos":[8619,8711]},{"content":"Example","pos":[8778,8785]},{"pos":[8789,8859],"content":"See the example for <bpt id=\"p1\">[</bpt>CFileTime::Millisecond<ept id=\"p1\">](#cfiletime__millisecond)</ept>.","source":"See the example for [CFileTime::Millisecond](#cfiletime__millisecond)."},{"pos":[8907,8928],"content":"CFileTime::operator -"},{"pos":[8932,9020],"content":"This operator is used to perform subtraction on a <ph id=\"ph1\">`CFileTime`</ph> or <ph id=\"ph2\">`CFileTimeSpan`</ph> object.","source":"This operator is used to perform subtraction on a `CFileTime` or `CFileTimeSpan` object."},{"content":"Parameters","pos":[9152,9162]},{"content":"A <ph id=\"ph1\">`CFileTimeSpan`</ph> object.","pos":[9176,9201],"source":" A `CFileTimeSpan` object."},{"content":"A <ph id=\"ph1\">`CFileTime`</ph> object.","pos":[9216,9237],"source":" A `CFileTime` object."},{"content":"Return Value","pos":[9247,9259]},{"pos":[9263,9391],"content":"Returns a <ph id=\"ph1\">`CFileTime`</ph> object or a <ph id=\"ph2\">`CFileTimeSpan`</ph> object representing the result of the time difference between the two objects.","source":"Returns a `CFileTime` object or a `CFileTimeSpan` object representing the result of the time difference between the two objects."},{"pos":[9442,9464],"content":"CFileTime::operator !="},{"pos":[9468,9530],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects for inequality.","source":"This operator compares two `CFileTime` objects for inequality."},{"content":"Parameters","pos":[9598,9608]},{"content":"The <ph id=\"ph1\">`CFileTime`</ph> object to be compared.","pos":[9620,9658],"source":" The `CFileTime` object to be compared."},{"content":"Return Value","pos":[9668,9680]},{"pos":[9684,9788],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the item being compared is not equal to the <ph id=\"ph1\">`CFileTime`</ph> object, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"Returns **true** if the item being compared is not equal to the `CFileTime` object, otherwise **false**."},{"pos":[9839,9860],"content":"CFileTime::operator +"},{"pos":[9864,9934],"content":"This operator is used to perform addition on a <ph id=\"ph1\">`CFileTimeSpan`</ph> object.","source":"This operator is used to perform addition on a `CFileTimeSpan` object."},{"content":"Parameters","pos":[10012,10022]},{"content":"A <ph id=\"ph1\">`CFileTimeSpan`</ph> object.","pos":[10036,10061],"source":" A `CFileTimeSpan` object."},{"content":"Return Value","pos":[10071,10083]},{"pos":[10087,10182],"content":"Returns a <ph id=\"ph1\">`CFileTime`</ph> object representing the result of the original time plus a relative time.","source":"Returns a `CFileTime` object representing the result of the original time plus a relative time."},{"pos":[10236,10258],"content":"CFileTime::operator +="},{"pos":[10262,10376],"content":"This operator is used to perform addition on a <ph id=\"ph1\">`CFileTimeSpan`</ph> object and assign the result to the current object.","source":"This operator is used to perform addition on a `CFileTimeSpan` object and assign the result to the current object."},{"content":"Parameters","pos":[10450,10460]},{"content":"A <ph id=\"ph1\">`CFileTimeSpan`</ph> object.","pos":[10474,10499],"source":" A `CFileTimeSpan` object."},{"content":"Return Value","pos":[10509,10521]},{"pos":[10525,10631],"content":"Returns the updated <ph id=\"ph1\">`CFileTime`</ph> object, representing the result of the original time plus a relative time.","source":"Returns the updated `CFileTime` object, representing the result of the original time plus a relative time."},{"pos":[10682,10701],"content":"CFileTime::operator"},{"pos":[10710,10781],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects to determine the lesser.","source":"This operator compares two `CFileTime` objects to determine the lesser."},{"content":"Parameters","pos":[10848,10858]},{"content":"The <ph id=\"ph1\">`CFileTime`</ph> object to be compared.","pos":[10870,10908],"source":" The `CFileTime` object to be compared."},{"content":"Return Value","pos":[10918,10930]},{"pos":[10934,11034],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the first object is less (earlier in time) than the second, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> otherwise.","source":"Returns **true** if the first object is less (earlier in time) than the second, **false** otherwise."},{"content":"Example","pos":[11044,11051]},{"pos":[11066,11081],"content":"NVC_MFCFiles#43"},{"pos":[11207,11226],"content":"CFileTime::operator"},{"pos":[11236,11319],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects to determine equality or the lesser.","source":"This operator compares two `CFileTime` objects to determine equality or the lesser."},{"content":"Parameters","pos":[11387,11397]},{"content":"The <ph id=\"ph1\">`CFileTime`</ph> object to be compared.","pos":[11409,11447],"source":" The `CFileTime` object to be compared."},{"content":"Return Value","pos":[11457,11469]},{"pos":[11473,11585],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the first object is less than (earlier in time) or equal to the second, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"Returns **true** if the first object is less than (earlier in time) or equal to the second, otherwise **false**."},{"pos":[11635,11656],"content":"CFileTime::operator ="},{"content":"The assignment operator.","pos":[11660,11684]},{"content":"Parameters","pos":[11757,11767]},{"content":"A <ph id=\"ph1\">`CFileTime`</ph> object containing the new time and date.","pos":[11779,11833],"source":" A `CFileTime` object containing the new time and date."},{"content":"Return Value","pos":[11843,11855]},{"pos":[11859,11898],"content":"Returns the updated <ph id=\"ph1\">`CFileTime`</ph> object.","source":"Returns the updated `CFileTime` object."},{"pos":[11949,11971],"content":"CFileTime::operator -="},{"pos":[11975,12092],"content":"This operator is used to perform subtraction on a <ph id=\"ph1\">`CFileTimeSpan`</ph> object and assign the result to the current object.","source":"This operator is used to perform subtraction on a `CFileTimeSpan` object and assign the result to the current object."},{"content":"Parameters","pos":[12166,12176]},{"content":"A <ph id=\"ph1\">`CFileTimeSpan`</ph> object containing the relative time to subtract.","pos":[12190,12256],"source":" A `CFileTimeSpan` object containing the relative time to subtract."},{"content":"Return Value","pos":[12266,12278]},{"pos":[12282,12321],"content":"Returns the updated <ph id=\"ph1\">`CFileTime`</ph> object.","source":"Returns the updated `CFileTime` object."},{"pos":[12374,12396],"content":"CFileTime::operator =="},{"pos":[12400,12460],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects for equality.","source":"This operator compares two `CFileTime` objects for equality."},{"content":"Parameters","pos":[12528,12538]},{"content":"The <ph id=\"ph1\">`CFileTime`</ph> object to compare.","pos":[12550,12584],"source":" The `CFileTime` object to compare."},{"content":"Return Value","pos":[12594,12606]},{"pos":[12610,12673],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the objects are equal, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"Returns **true** if the objects are equal, otherwise **false**."},{"pos":[12724,12743],"content":"CFileTime::operator"},{"pos":[12752,12823],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects to determine the larger.","source":"This operator compares two `CFileTime` objects to determine the larger."},{"content":"Parameters","pos":[12890,12900]},{"content":"The <ph id=\"ph1\">`CFileTime`</ph> object to be compared.","pos":[12912,12950],"source":" The `CFileTime` object to be compared."},{"content":"Return Value","pos":[12960,12972]},{"pos":[12976,13082],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the first object is greater than (later in time) than the second, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"Returns **true** if the first object is greater than (later in time) than the second, otherwise **false**."},{"pos":[13136,13155],"content":"CFileTime::operator"},{"pos":[13165,13248],"content":"This operator compares two <ph id=\"ph1\">`CFileTime`</ph> objects to determine equality or the larger.","source":"This operator compares two `CFileTime` objects to determine equality or the larger."},{"content":"Parameters","pos":[13316,13326]},{"content":"The <ph id=\"ph1\">`CFileTime`</ph> object to be compared.","pos":[13338,13376],"source":" The `CFileTime` object to be compared."},{"content":"Return Value","pos":[13386,13398]},{"pos":[13402,13515],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the first object is greater than (later in time) or equal to the second, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"Returns **true** if the first object is greater than (later in time) or equal to the second, otherwise **false**."},{"pos":[13559,13576],"content":"CFileTime::Second"},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one day.","pos":[13580,13669]},{"content":"Example","pos":[13743,13750]},{"pos":[13754,13824],"content":"See the example for <bpt id=\"p1\">[</bpt>CFileTime::Millisecond<ept id=\"p1\">](#cfiletime__millisecond)</ept>.","source":"See the example for [CFileTime::Millisecond](#cfiletime__millisecond)."},{"pos":[13869,13887],"content":"CFileTime::SetTime"},{"pos":[13891,13966],"content":"Call this method to set the date and time stored by the <ph id=\"ph1\">`CFileTime`</ph> object.","source":"Call this method to set the date and time stored by the `CFileTime` object."},{"content":"Parameters","pos":[14028,14038]},{"content":"The 64-bit value representing the date and time, in either local or Coordinated Universal Time (UTC) format.","pos":[14053,14161]},{"pos":[14209,14230],"content":"CFileTime::UTCToLocal"},{"content":"Call this method to convert time based on the Coordinated Universal Time (UTC) to local file time.","pos":[14234,14332]},{"content":"Return Value","pos":[14393,14405]},{"pos":[14409,14484],"content":"Returns a <ph id=\"ph1\">`CFileTime`</ph> object containing the time in local file time format.","source":"Returns a `CFileTime` object containing the time in local file time format."},{"content":"Example","pos":[14494,14501]},{"pos":[14516,14531],"content":"NVC_MFCFiles#42"},{"pos":[14645,14660],"content":"CFileTime::Week"},{"content":"A static data member storing the number of 100-nanosecond intervals that make up one week.","pos":[14664,14754]},{"content":"Example","pos":[14815,14822]},{"pos":[14826,14896],"content":"See the example for <bpt id=\"p1\">[</bpt>CFileTime::Millisecond<ept id=\"p1\">](#cfiletime__millisecond)</ept>.","source":"See the example for [CFileTime::Millisecond](#cfiletime__millisecond)."},{"content":"See Also","pos":[14905,14913]},{"content":"FILETIME","pos":[14918,14926]},{"content":"CFileTimeSpan Class","pos":[14993,15012]},{"content":"Hierarchy Chart","pos":[15074,15089]},{"content":"ATL/MFC Shared Classes","pos":[15126,15148]}],"content":"---\ntitle: \"CFileTime Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CFileTime\"\n  - \"CFileTime\"\n  - \"ATL.CFileTime\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CFileTime class\"\n  - \"shared classes, CFileTime\"\nms.assetid: 1a358a65-1383-4124-b0d4-59b026e6860f\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CFileTime Class\nThis class provides methods for managing the date and time values associated with a file.  \n  \n## Syntax  \n  \n```\nclass CFileTime :  public FILETIME\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFileTime::CFileTime](#cfiletime__cfiletime)|The constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFileTime::GetCurrentTime](#cfiletime__getcurrenttime)|Call this static function to retrieve a `CFileTime` object that represents the current system date and time.|  \n|[CFileTime::GetTime](#cfiletime__gettime)|Call this method to retrieve the time from the `CFileTime` object.|  \n|[CFileTime::LocalToUTC](#cfiletime__localtoutc)|Call this method to convert a local file time to a file time based on the Coordinated Universal Time (UTC).|  \n|[CFileTime::SetTime](#cfiletime__settime)|Call this method to set the date and time stored by the `CFileTime` object.|  \n|[CFileTime::UTCToLocal](#cfiletime__utctolocal)|Call this method to convert time based on the Coordinated Universal Time (UTC) to local file time.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFileTime::operator -](#cfiletime__operator_-)|This operator is used to perform subtraction on a `CFileTime` or `CFileTimeSpan` object.|  \n|[CFileTime::operator !=](#cfiletime__operator__neq)|This operator compares two `CFileTime` objects for inequality.|  \n|[CFileTime::operator +](#cfiletime__operator__add)|This operator is used to perform addition on a `CFileTimeSpan` object.|  \n|[CFileTime::operator +=](#cfiletime__operator__add_eq)|This operator is used to perform addition on a `CFileTimeSpan` object and assign the result to the current object.|  \n|[CFileTime::operator &lt;](#cfiletime__operator__lt_)|This operator compares two `CFileTime` objects to determine the lesser.|  \n|[CFileTime::operator &lt;=](#cfiletime__operator__lt__eq)|This operator compares two `CFileTime` objects to determine equality or the lesser.|  \n|[CFileTime::operator =](#cfiletime__operator__eq)|The assignment operator.|  \n|[CFileTime::operator -=](#cfiletime__operator_-_eq)|This operator is used to perform subtraction on a `CFileTimeSpan` object and assign the result to the current object.|  \n|[CFileTime::operator ==](#cfiletime__operator__eq_eq)|This operator compares two `CFileTime` objects for equality.|  \n|[CFileTime::operator &gt;](#cfiletime__operator__gt_)|This operator compares two `CFileTime` objects to determine the larger.|  \n|[CFileTime::operator &gt;=](#cfiletime__operator__gt__eq)|This operator compares two `CFileTime` objects to determine equality or the larger.|  \n  \n### Public Constants  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFileTime::Day](#cfiletime__day)|A static data member storing the number of 100-nanosecond intervals that make up one day.|  \n|[CFileTime::Hour](#cfiletime__hour)|A static data member storing the number of 100-nanosecond intervals that make up one hour.|  \n|[CFileTime::Millisecond](#cfiletime__millisecond)|A static data member storing the number of 100-nanosecond intervals that make up one millisecond.|  \n|[CFileTime::Minute](#cfiletime__minute)|A static data member storing the number of 100-nanosecond intervals that make up one minute.|  \n|[CFileTime::Second](#cfiletime__second)|A static data member storing the number of 100-nanosecond intervals that make up one second.|  \n|[CFileTime::Week](#cfiletime__week)|A static data member storing the number of 100-nanosecond intervals that make up one week.|  \n  \n## Remarks  \n This class provides methods for managing the date and time values associated with the creation, access and modification of files. The methods and data of this class are frequently used in conjunction with `CFileTimeSpan` objects, which deal with relative time values.  \n  \n The date and time value is stored as a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601. This is the Coordinated Universal Time (UTC) format.  \n  \n The following static const member variables are provided to simplify calculations:  \n  \n|Member variable|Number of 100-nanosecond intervals|  \n|---------------------|-----------------------------------------|  \n|Millisecond|10,000|  \n|Second|Millisecond * 1,000|  \n|Minute|Second * 60|  \n|Hour|Minute * 60|  \n|Day|Hour * 24|  \n|Week|Day * 7|  \n  \n **Note** Not all file systems can record creation and last access time and not all file systems record them in the same manner. For example, on the Windows NT FAT file system, create time has a resolution of 10 milliseconds, write time has a resolution of 2 seconds, and access time has a resolution of 1 day (the access date). On NTFS, access time has a resolution of 1 hour. Furthermore, FAT records times on disk in local time, but NTFS records times on disk in UTC. For more information, see [File Times](http://msdn.microsoft.com/library/windows/desktop/ms724290).  \n  \n## Inheritance Hierarchy  \n `FILETIME`  \n  \n `CFileTime`  \n  \n## Requirements  \n **Header:** atltime.h  \n  \n##  <a name=\"cfiletime__cfiletime\"></a>  CFileTime::CFileTime  \n The constructor.  \n  \n```\nCFileTime() throw();\n\nCFileTime(const FILETIME& ft) throw();\n\nCFileTime(ULONGLONG nTime) throw();\n```  \n  \n### Parameters  \n `ft`  \n A [FILETIME](http://msdn.microsoft.com/library/windows/desktop/ms724284) structure.  \n  \n `nTime`  \n The date and time expressed as a 64-bit value.  \n  \n### Remarks  \n The `CFileTime` object can be created using an existing date and time from a `FILETIME` structure, or expressed as a 64-bit value (in local or Coordinated Universal Time (UTC) time formats). The default constructor sets the time to 0.  \n  \n##  <a name=\"cfiletime__day\"></a>  CFileTime::Day  \n A static data member storing the number of 100-nanosecond intervals that make up one day.  \n  \n```\nstatic const ULONGLONG Day = Hour* 24;\n```  \n  \n### Example  \n See the example for [CFileTime::Millisecond](#cfiletime__millisecond).  \n  \n##  <a name=\"cfiletime__getcurrenttime\"></a>  CFileTime::GetCurrentTime  \n Call this static function to retrieve a `CFileTime` object that represents the current system date and time.  \n  \n```\nstatic CFileTime GetCurrentTime() throw();\n```  \n  \n### Return Value  \n Returns the current system date and time in Coordinated Universal Time (UTC) format.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#41](../../atl-mfc-shared/reference/codesnippet/cpp/cfiletime-class_1.cpp)]  \n  \n##  <a name=\"cfiletime__gettime\"></a>  CFileTime::GetTime  \n Call this method to retrieve the time from the `CFileTime` object.  \n  \n```\nULONGLONG GetTime() const throw();\n```  \n  \n### Return Value  \n Returns the date and time as a 64-bit number, which may be in either local or Coordinated Universal Time (UTC) format.  \n  \n##  <a name=\"cfiletime__hour\"></a>  CFileTime::Hour  \n A static data member storing the number of 100-nanosecond intervals that make up one hour.  \n  \n```\nstatic const ULONGLONG Hour = Minute* 60;\n```  \n  \n### Example  \n See the example for [CFileTime::Millisecond](#cfiletime__millisecond).  \n  \n##  <a name=\"cfiletime__localtoutc\"></a>  CFileTime::LocalToUTC  \n Call this method to convert a local file time to a file time based on the Coordinated Universal Time (UTC).  \n  \n```\nCFileTime LocalToUTC() const throw();\n```  \n  \n### Return Value  \n Returns a `CFileTime` object containing the time in UTC format.  \n  \n### Example  \n See the example for [CFileTime::UTCToLocal](#cfiletime__utctolocal).  \n  \n##  <a name=\"cfiletime__millisecond\"></a>  CFileTime::Millisecond  \n A static data member storing the number of 100-nanosecond intervals that make up one millisecond.  \n  \n```\nstatic const ULONGLONG Millisecond = 10000;\n```  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#44](../../atl-mfc-shared/reference/codesnippet/cpp/cfiletime-class_2.cpp)]  \n  \n##  <a name=\"cfiletime__minute\"></a>  CFileTime::Minute  \n A static data member storing the number of 100-nanosecond intervals that make up one minute.  \n  \n```\nstatic const ULONGLONG Minute = Second* 60;\n```  \n  \n### Example  \n See the example for [CFileTime::Millisecond](#cfiletime__millisecond).  \n  \n##  <a name=\"cfiletime__operator_-\"></a>  CFileTime::operator -  \n This operator is used to perform subtraction on a `CFileTime` or `CFileTimeSpan` object.  \n  \n```\nCFileTime operator-(CFileTimeSpan span) const throw();\n\nCFileTimeSpan operator-(CFileTime ft) const throw();\n```  \n  \n### Parameters  \n `span`  \n A `CFileTimeSpan` object.  \n  \n `ft`  \n A `CFileTime` object.  \n  \n### Return Value  \n Returns a `CFileTime` object or a `CFileTimeSpan` object representing the result of the time difference between the two objects.  \n  \n##  <a name=\"cfiletime__operator__neq\"></a>  CFileTime::operator !=  \n This operator compares two `CFileTime` objects for inequality.  \n  \n```\nbool operator!=(CFileTime ft) const throw();\n```  \n  \n### Parameters  \n `ft`  \n The `CFileTime` object to be compared.  \n  \n### Return Value  \n Returns **true** if the item being compared is not equal to the `CFileTime` object, otherwise **false**.  \n  \n##  <a name=\"cfiletime__operator__add\"></a>  CFileTime::operator +  \n This operator is used to perform addition on a `CFileTimeSpan` object.  \n  \n```\nCFileTime operator+(CFileTimeSpan span) const throw();\n```  \n  \n### Parameters  \n `span`  \n A `CFileTimeSpan` object.  \n  \n### Return Value  \n Returns a `CFileTime` object representing the result of the original time plus a relative time.  \n  \n##  <a name=\"cfiletime__operator__add_eq\"></a>  CFileTime::operator +=  \n This operator is used to perform addition on a `CFileTimeSpan` object and assign the result to the current object.  \n  \n```\nCFileTime& operator+=(CFileTimeSpan span) throw();\n```  \n  \n### Parameters  \n `span`  \n A `CFileTimeSpan` object.  \n  \n### Return Value  \n Returns the updated `CFileTime` object, representing the result of the original time plus a relative time.  \n  \n##  <a name=\"cfiletime__operator__lt_\"></a>  CFileTime::operator &lt;  \n This operator compares two `CFileTime` objects to determine the lesser.  \n  \n```\nbool operator<(CFileTime ft) const throw();\n```  \n  \n### Parameters  \n `ft`  \n The `CFileTime` object to be compared.  \n  \n### Return Value  \n Returns **true** if the first object is less (earlier in time) than the second, **false** otherwise.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#43](../../atl-mfc-shared/reference/codesnippet/cpp/cfiletime-class_3.cpp)]  \n  \n##  <a name=\"cfiletime__operator__lt__eq\"></a>  CFileTime::operator &lt;=  \n This operator compares two `CFileTime` objects to determine equality or the lesser.  \n  \n```\nbool operator<=(CFileTime ft) const throw();\n```  \n  \n### Parameters  \n `ft`  \n The `CFileTime` object to be compared.  \n  \n### Return Value  \n Returns **true** if the first object is less than (earlier in time) or equal to the second, otherwise **false**.  \n  \n##  <a name=\"cfiletime__operator__eq\"></a>  CFileTime::operator =  \n The assignment operator.  \n  \n```\nCFileTime& operator=(const FILETIME& ft) throw();\n```  \n  \n### Parameters  \n `ft`  \n A `CFileTime` object containing the new time and date.  \n  \n### Return Value  \n Returns the updated `CFileTime` object.  \n  \n##  <a name=\"cfiletime__operator_-_eq\"></a>  CFileTime::operator -=  \n This operator is used to perform subtraction on a `CFileTimeSpan` object and assign the result to the current object.  \n  \n```\nCFileTime& operator-=(CFileTimeSpan span) throw();\n```  \n  \n### Parameters  \n `span`  \n A `CFileTimeSpan` object containing the relative time to subtract.  \n  \n### Return Value  \n Returns the updated `CFileTime` object.  \n  \n##  <a name=\"cfiletime__operator__eq_eq\"></a>  CFileTime::operator ==  \n This operator compares two `CFileTime` objects for equality.  \n  \n```\nbool operator==(CFileTime ft) const throw();\n```  \n  \n### Parameters  \n `ft`  \n The `CFileTime` object to compare.  \n  \n### Return Value  \n Returns **true** if the objects are equal, otherwise **false**.  \n  \n##  <a name=\"cfiletime__operator__gt_\"></a>  CFileTime::operator &gt;  \n This operator compares two `CFileTime` objects to determine the larger.  \n  \n```\nbool operator>(CFileTime ft) const throw();\n```  \n  \n### Parameters  \n `ft`  \n The `CFileTime` object to be compared.  \n  \n### Return Value  \n Returns **true** if the first object is greater than (later in time) than the second, otherwise **false**.  \n  \n##  <a name=\"cfiletime__operator__gt__eq\"></a>  CFileTime::operator &gt;=  \n This operator compares two `CFileTime` objects to determine equality or the larger.  \n  \n```\nbool operator>=(CFileTime ft) const throw();\n```  \n  \n### Parameters  \n `ft`  \n The `CFileTime` object to be compared.  \n  \n### Return Value  \n Returns **true** if the first object is greater than (later in time) or equal to the second, otherwise **false**.  \n  \n##  <a name=\"cfiletime__second\"></a>  CFileTime::Second  \n A static data member storing the number of 100-nanosecond intervals that make up one day.  \n  \n```\nstatic const ULONGLONG Second = Millisecond* 1000;\n```  \n  \n### Example  \n See the example for [CFileTime::Millisecond](#cfiletime__millisecond).  \n  \n##  <a name=\"cfiletime__settime\"></a>  CFileTime::SetTime  \n Call this method to set the date and time stored by the `CFileTime` object.  \n  \n```\nvoid SetTime(ULONGLONG nTime) throw();\n```  \n  \n### Parameters  \n `nTime`  \n The 64-bit value representing the date and time, in either local or Coordinated Universal Time (UTC) format.  \n  \n##  <a name=\"cfiletime__utctolocal\"></a>  CFileTime::UTCToLocal  \n Call this method to convert time based on the Coordinated Universal Time (UTC) to local file time.  \n  \n```\nCFileTime UTCToLocal() const throw();\n```  \n  \n### Return Value  \n Returns a `CFileTime` object containing the time in local file time format.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#42](../../atl-mfc-shared/reference/codesnippet/cpp/cfiletime-class_4.cpp)]  \n  \n##  <a name=\"cfiletime__week\"></a>  CFileTime::Week  \n A static data member storing the number of 100-nanosecond intervals that make up one week.  \n  \n```\nstatic const ULONGLONG Week = Day* 7;\n```  \n  \n### Example  \n See the example for [CFileTime::Millisecond](#cfiletime__millisecond).  \n  \n## See Also  \n [FILETIME](http://msdn.microsoft.com/library/windows/desktop/ms724284)   \n [CFileTimeSpan Class](../../atl-mfc-shared/reference/cfiletimespan-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [ATL/MFC Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md)\n\n\n"}