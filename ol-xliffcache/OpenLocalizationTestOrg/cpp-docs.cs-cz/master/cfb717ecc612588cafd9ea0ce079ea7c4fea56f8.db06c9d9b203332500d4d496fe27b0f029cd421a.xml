{"nodes":[{"pos":[12,59],"content":"operator&lt; (stack) (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"operator<ph id=\"ph1\">&amp;lt;</ph> (stack) (STL-CLR) | Microsoft Docs","pos":[0,47],"source":"operator&lt; (stack) (STL-CLR) | Microsoft Docs"}]},{"content":"operator<ph id=\"ph1\">&amp;lt;</ph> (stack) (STL/CLR)","pos":[642,672],"source":"operator&lt; (stack) (STL/CLR)"},{"content":"Stack less than comparison.","pos":[673,700]},{"content":"Syntax","pos":[709,715]},{"content":"Parameters","pos":[889,899]},{"content":"left","pos":[903,907]},{"content":"Left container to compare.","pos":[911,937]},{"content":"right","pos":[944,949]},{"content":"Right container to compare.","pos":[953,980]},{"content":"Remarks","pos":[989,996]},{"content":"The operator function returns true if, for the lowest position <ph id=\"ph1\">`i`</ph> for which <ph id=\"ph2\">`!(``right``[i] &lt;`</ph> <ph id=\"ph3\">`left``[i])`</ph> it is also true that <ph id=\"ph4\">`left``[i] &lt;`</ph> <ph id=\"ph5\">`right``[i]`</ph>.","pos":[1000,1157],"source":"The operator function returns true if, for the lowest position `i` for which `!(``right``[i] <` `left``[i])` it is also true that `left``[i] <` `right``[i]`."},{"content":"Otherwise, it returns <ph id=\"ph1\">`left``-&gt;`</ph><bpt id=\"p1\">[</bpt>stack::size (STL/CLR)<ept id=\"p1\">](../dotnet/stack-size-stl-clr.md)</ept><ph id=\"ph2\">`() &lt;`</ph> <ph id=\"ph3\">`right``-&gt;size()`</ph> You use it to test whether <ph id=\"ph4\">`left`</ph> is ordered before <ph id=\"ph5\">`right`</ph> when the two stacks are compared element by element.","pos":[1158,1383],"source":" Otherwise, it returns `left``->`[stack::size (STL/CLR)](../dotnet/stack-size-stl-clr.md)`() <` `right``->size()` You use it to test whether `left` is ordered before `right` when the two stacks are compared element by element."},{"content":"Example","pos":[1392,1399]},{"content":"Requirements","pos":[2427,2439]},{"pos":[2443,2470],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/stack&gt;","source":"**Header:** \\<cliext/stack>"},{"pos":[2477,2498],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2507,2515]},{"content":"stack (STL/CLR)","pos":[2520,2535]},{"content":"operator== (stack) (STL/CLR)","pos":[2570,2598]},{"content":"operator!= (stack) (STL/CLR)","pos":[2651,2679]},{"content":"operator&gt;= (stack) (STL/CLR)","pos":[2734,2762],"source":"operator>= (stack) (STL/CLR)"},{"content":"operator&gt; (stack) (STL/CLR)","pos":[2823,2850],"source":"operator> (stack) (STL/CLR)"},{"content":"operator&lt;= (stack) (STL/CLR)","pos":[2907,2935],"source":"operator<= (stack) (STL/CLR)"}],"content":"---\ntitle: \"operator&lt; (stack) (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::stack::operator<\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator< member [STL/CLR]\"\nms.assetid: 77f8dd42-89d1-4ce1-a7ec-04c3a45dd3ee\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# operator&lt; (stack) (STL/CLR)\nStack less than comparison.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Value,  \n    typename Container>  \n    bool operator<(stack<Value, Container>% left,  \n        stack<Value, Container>% right);  \n```  \n  \n#### Parameters  \n left  \n Left container to compare.  \n  \n right  \n Right container to compare.  \n  \n## Remarks  \n The operator function returns true if, for the lowest position `i` for which `!(``right``[i] <` `left``[i])` it is also true that `left``[i] <` `right``[i]`. Otherwise, it returns `left``->`[stack::size (STL/CLR)](../dotnet/stack-size-stl-clr.md)`() <` `right``->size()` You use it to test whether `left` is ordered before `right` when the two stacks are compared element by element.  \n  \n## Example  \n  \n```  \n// cliext_stack_operator_lt.cpp   \n// compile with: /clr   \n#include <cliext/stack>   \n  \ntypedef cliext::stack<wchar_t> Mystack;   \nint main()   \n    {   \n    Mystack c1;   \n    c1.push(L'a');   \n    c1.push(L'b');   \n    c1.push(L'c');   \n  \n// display contents \" a b c\"   \n    for each (wchar_t elem in c1.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// assign to a new container   \n    Mystack c2;   \n    c2.push(L'a');   \n    c2.push(L'b');   \n    c2.push(L'd');   \n  \n// display contents \" a b d\"   \n    for each (wchar_t elem in c2.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"[a b c] < [a b c] is {0}\",   \n        c1 < c1);   \n    System::Console::WriteLine(\"[a b c] < [a b d] is {0}\",   \n        c1 < c2);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \n a b d  \n[a b c] < [a b c] is False  \n[a b c] < [a b d] is True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/stack>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [stack (STL/CLR)](../dotnet/stack-stl-clr.md)   \n [operator== (stack) (STL/CLR)](../dotnet/operator-equality-stack-stl-clr.md)   \n [operator!= (stack) (STL/CLR)](../dotnet/operator-inequality-stack-stl-clr.md)   \n [operator>= (stack) (STL/CLR)](../dotnet/operator-greater-or-equal-stack-stl-clr.md)   \n [operator> (stack) (STL/CLR)](../dotnet/operator-greater-than-stack-stl-clr.md)   \n [operator<= (stack) (STL/CLR)](../dotnet/operator-less-or-equal-stack-stl-clr.md)"}