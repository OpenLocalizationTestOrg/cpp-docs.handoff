{"nodes":[{"pos":[12,40],"content":"User Record | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"User Record | Microsoft Docs","pos":[0,28]}]},{"content":"User Record","pos":[674,685]},{"content":"The user record provides the code and data structure that represents the column data for a rowset.","pos":[686,784]},{"content":"A user record can be created at compile time or at run time.","pos":[785,845]},{"content":"When you create a provider using the ATL OLE DB Provider Wizard, the wizard creates a default user record that looks like this (assuming you specified a provider name [short name] of \"MyProvider\"):","pos":[846,1043]},{"content":"The OLE DB provider templates handle all OLE DB specifics regarding interactions with the client.","pos":[1532,1629]},{"content":"To acquire the column data needed for a response, the provider calls the <ph id=\"ph1\">`GetColumnInfo`</ph> function, which you must place in the user record.","pos":[1630,1769],"source":" To acquire the column data needed for a response, the provider calls the `GetColumnInfo` function, which you must place in the user record."},{"content":"You can explicitly override <ph id=\"ph1\">`GetColumnInfo`</ph> in the user record, for example, by declaring it in the .h file as shown here:","pos":[1770,1892],"source":" You can explicitly override `GetColumnInfo` in the user record, for example, by declaring it in the .h file as shown here:"},{"content":"This is equivalent to:","pos":[1999,2021]},{"pos":[2190,2261],"content":"You must also implement <ph id=\"ph1\">`GetColumnInfo`</ph> in the user record's .cpp file.","source":"You must also implement `GetColumnInfo` in the user record's .cpp file."},{"pos":[2268,2342],"content":"The PROVIDER_COLUMN_MAP macros aid in creating a <ph id=\"ph1\">`GetColumnInfo`</ph> function:","source":"The PROVIDER_COLUMN_MAP macros aid in creating a `GetColumnInfo` function:"},{"pos":[2352,2460],"content":"BEGIN_PROVIDER_COLUMN_MAP defines the function prototype and a static array of <bpt id=\"p1\">**</bpt>ATLCOLUMNINFO<ept id=\"p1\">**</ept> structures.","source":"BEGIN_PROVIDER_COLUMN_MAP defines the function prototype and a static array of **ATLCOLUMNINFO** structures."},{"pos":[2470,2543],"content":"PROVIDER_COLUMN_ENTRY defines and initializes a single <bpt id=\"p1\">**</bpt>ATLCOLUMNINFO<ept id=\"p1\">**</ept>.","source":"PROVIDER_COLUMN_ENTRY defines and initializes a single **ATLCOLUMNINFO**."},{"content":"END_PROVIDER_COLUMN_MAP closes the array and the function.","pos":[2553,2611]},{"content":"It also places the array element count into the <ph id=\"ph1\">`pcCols`</ph> parameter.","pos":[2612,2679],"source":" It also places the array element count into the `pcCols` parameter."},{"content":"When a user record is created at run time, <bpt id=\"p1\">**</bpt>GetColumnInfo<ept id=\"p1\">**</ept> uses the <ph id=\"ph1\">`pThis`</ph> parameter to receive a pointer to a rowset or command instance.","pos":[2686,2827],"source":"When a user record is created at run time, **GetColumnInfo** uses the `pThis` parameter to receive a pointer to a rowset or command instance."},{"content":"Commands and rowsets must support the <ph id=\"ph1\">`IColumnsInfo`</ph> interface, so column information can be obtained from this pointer.","pos":[2828,2948],"source":" Commands and rowsets must support the `IColumnsInfo` interface, so column information can be obtained from this pointer."},{"pos":[2955,3044],"content":"<bpt id=\"p1\">**</bpt>CommandClass<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>RowsetClass<ept id=\"p2\">**</ept> are the command and rowset that use the user record.","source":"**CommandClass** and **RowsetClass** are the command and rowset that use the user record."},{"pos":[3051,3273],"content":"For a more detailed example of how to override <ph id=\"ph1\">`GetColumnInfo`</ph> in a user record, see <bpt id=\"p1\">[</bpt>Dynamically Determining Columns Returned to the Consumer<ept id=\"p1\">](../../data/oledb/dynamically-determining-columns-returned-to-the-consumer.md)</ept>.","source":"For a more detailed example of how to override `GetColumnInfo` in a user record, see [Dynamically Determining Columns Returned to the Consumer](../../data/oledb/dynamically-determining-columns-returned-to-the-consumer.md)."},{"content":"See Also","pos":[3282,3290]},{"content":"OLE DB Provider Template Architecture","pos":[3295,3332]}],"content":"---\ntitle: \"User Record | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"records, user\"\n  - \"OLE DB providers, user record\"\n  - \"user records\"\n  - \"user records, described\"\n  - \"rowsets, user record\"\nms.assetid: 9c0d2864-2738-4f62-a750-1016d9c3523f\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# User Record\nThe user record provides the code and data structure that represents the column data for a rowset. A user record can be created at compile time or at run time. When you create a provider using the ATL OLE DB Provider Wizard, the wizard creates a default user record that looks like this (assuming you specified a provider name [short name] of \"MyProvider\"):  \n  \n```  \nclass CWindowsFile:  \n   public WIN32_FIND_DATA  \n{  \npublic:  \n  \nBEGIN_PROVIDER_COLUMN_MAP(CMyProviderWindowsFile)  \n   PROVIDER_COLUMN_ENTRY(\"FileAttributes\", 1, dwFileAttributes)  \n   PROVIDER_COLUMN_ENTRY(\"FileSizeHigh\", 2, nFileSizeHigh)  \n   PROVIDER_COLUMN_ENTRY(\"FileSizeLow\", 3, nFileSizeLow)  \n   PROVIDER_COLUMN_ENTRY_STR(\"FileName\", 4, cFileName)  \n   PROVIDER_COLUMN_ENTRY_STR(\"AltFileName\", 5, cAlternateFileName)  \nEND_PROVIDER_COLUMN_MAP()  \n  \n};  \n```  \n  \n The OLE DB provider templates handle all OLE DB specifics regarding interactions with the client. To acquire the column data needed for a response, the provider calls the `GetColumnInfo` function, which you must place in the user record. You can explicitly override `GetColumnInfo` in the user record, for example, by declaring it in the .h file as shown here:  \n  \n```  \ntemplate <class T>  \nstatic ATLCOLUMNINFO* GetColumnInfo(T* pThis, ULONG* pcCols)   \n```  \n  \n This is equivalent to:  \n  \n```  \nstatic ATLCOLUMNINFO* GetColumnInfo(CommandClass* pThis, ULONG* pcCols)  \nstatic ATLCOLUMNINFO* GetColumnInfo(RowsetClass* pThis, ULONG* pcCols)  \n```  \n  \n You must also implement `GetColumnInfo` in the user record's .cpp file.  \n  \n The PROVIDER_COLUMN_MAP macros aid in creating a `GetColumnInfo` function:  \n  \n-   BEGIN_PROVIDER_COLUMN_MAP defines the function prototype and a static array of **ATLCOLUMNINFO** structures.  \n  \n-   PROVIDER_COLUMN_ENTRY defines and initializes a single **ATLCOLUMNINFO**.  \n  \n-   END_PROVIDER_COLUMN_MAP closes the array and the function. It also places the array element count into the `pcCols` parameter.  \n  \n When a user record is created at run time, **GetColumnInfo** uses the `pThis` parameter to receive a pointer to a rowset or command instance. Commands and rowsets must support the `IColumnsInfo` interface, so column information can be obtained from this pointer.  \n  \n **CommandClass** and **RowsetClass** are the command and rowset that use the user record.  \n  \n For a more detailed example of how to override `GetColumnInfo` in a user record, see [Dynamically Determining Columns Returned to the Consumer](../../data/oledb/dynamically-determining-columns-returned-to-the-consumer.md).  \n  \n## See Also  \n [OLE DB Provider Template Architecture](../../data/oledb/ole-db-provider-template-architecture.md)"}