<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">559a6bcc302c6ba97dd12ac2fe2b0ae66b9c5f1a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\multidimensional-arrays-c.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9a60237ec41f326731053081a5a563dadab365f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7be193ae2842aea0ae18b717f9a14a60ed55ff81</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Multidimensional Arrays (C) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Multidimensional Arrays (C)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A subscript expression can also have multiple subscripts, as follows:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Subscript expressions associate from left to right.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The leftmost subscript expression, <bpt id="p1">*</bpt>expression1<ept id="p1">*</ept><bpt id="p2">**</bpt>[<ept id="p2">**</ept><bpt id="p3">*</bpt>expression2<ept id="p3">*</ept><bpt id="p4">**</bpt>]<ept id="p4">**</ept>, is evaluated first.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The address that results from adding <bpt id="p1">*</bpt>expression1<ept id="p1">*</ept> and <bpt id="p2">*</bpt>expression2<ept id="p2">*</ept> forms a pointer expression; then <bpt id="p3">*</bpt>expression3<ept id="p3">*</ept> is added to this pointer expression to form a new pointer expression, and so on until the last subscript expression has been added.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The indirection operator (<bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>) is applied after the last subscripted expression is evaluated, unless the final pointer value addresses an array type (see examples below).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Expressions with multiple subscripts refer to elements of "multidimensional arrays."</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A multidimensional array is an array whose elements are arrays.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, the first element of a three-dimensional array is an array with two dimensions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For the following examples, an array named <ph id="ph1">`prop`</ph> is declared with three elements, each of which is a 4-by-6 array of <ph id="ph2">`int`</ph> values.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A reference to the <ph id="ph1">`prop`</ph> array looks like this:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The example above shows how to refer to the second individual <ph id="ph1">`int`</ph> element of <ph id="ph2">`prop`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Arrays are stored by row, so the last subscript varies most quickly; the expression <ph id="ph1">`prop[0][0][2]`</ph> refers to the next (third) element of the array, and so on.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This statement is a more complex reference to an individual element of <ph id="ph1">`prop`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The expression is evaluated as follows:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first subscript, <ph id="ph1">`2`</ph>, is multiplied by the size of a 4-by-6 <ph id="ph2">`int`</ph> array and added to the pointer value <ph id="ph3">`prop`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The result points to the third 4-by-6 array of <ph id="ph1">`prop`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The second subscript, <ph id="ph1">`1`</ph>, is multiplied by the size of the 6-element <ph id="ph2">`int`</ph> array and added to the address represented by <ph id="ph3">`prop[2]`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each element of the 6-element array is an <ph id="ph1">`int`</ph> value, so the final subscript, <ph id="ph2">`3`</ph>, is multiplied by the size of an <ph id="ph3">`int`</ph> before it is added to <ph id="ph4">`prop[2][1]`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The resulting pointer addresses the fourth element of the 6-element array.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The indirection operator is applied to the pointer value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The result is the <ph id="ph1">`int`</ph> element at that address.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These next two examples show cases where the indirection operator is not applied.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the first of these statements, the expression <ph id="ph1">`prop[2][1]`</ph> is a valid reference to the three-dimensional array <ph id="ph2">`prop`</ph>; it refers to a 6-element array (declared above).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Since the pointer value addresses an array, the indirection operator is not applied.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Similarly, the result of the expression <ph id="ph1">`prop[2]`</ph> in the second statement <ph id="ph2">`ipp = prop[2];`</ph> is a pointer value addressing a two-dimensional array.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Subscript Operator:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>