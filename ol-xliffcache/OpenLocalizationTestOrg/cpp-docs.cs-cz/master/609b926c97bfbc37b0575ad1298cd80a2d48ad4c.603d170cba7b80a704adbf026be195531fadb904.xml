{"nodes":[{"pos":[12,45],"content":"ftell, _ftelli64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ftell, _ftelli64 | Microsoft Docs","pos":[0,33]}]},{"pos":[1067,1083],"content":"ftell, _ftelli64","linkify":"ftell, _ftelli64","nodes":[{"content":"ftell, _ftelli64","pos":[0,16]}]},{"content":"Gets the current position of a file pointer.","pos":[1084,1128]},{"pos":[1137,1143],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1254,1264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Target <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1280,1304],"source":" Target `FILE` structure."},{"pos":[1313,1325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`ftell`</ph> and <ph id=\"ph2\">`_ftelli64`</ph> return the current file position.","pos":[1329,1386],"source":"`ftell` and `_ftelli64` return the current file position."},{"content":"The value returned by <ph id=\"ph1\">`ftell`</ph> and <ph id=\"ph2\">`_ftelli64`</ph> may not reflect the physical byte offset for streams opened in text mode, because text mode causes carriage return–linefeed translation.","pos":[1387,1569],"source":" The value returned by `ftell` and `_ftelli64` may not reflect the physical byte offset for streams opened in text mode, because text mode causes carriage return–linefeed translation."},{"content":"Use <ph id=\"ph1\">`ftell`</ph> with <ph id=\"ph2\">`fseek`</ph>or<ph id=\"ph3\">`_ftelli64`</ph>with<ph id=\"ph4\">`_fseeki64`</ph> to return to file locations correctly.","pos":[1570,1661],"source":" Use `ftell` with `fseek`or`_ftelli64`with`_fseeki64` to return to file locations correctly."},{"content":"On error, <ph id=\"ph1\">`ftell`</ph>and<ph id=\"ph2\">`_ftelli64`</ph> invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1662,1820],"source":" On error, `ftell`and`_ftelli64` invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return –1L and set <ph id=\"ph1\">`errno`</ph> to one of two constants, defined in ERRNO.H.","pos":[1821,1945],"source":" If execution is allowed to continue, these functions return –1L and set `errno` to one of two constants, defined in ERRNO.H."},{"content":"The <ph id=\"ph1\">`EBADF`</ph> constant means the <ph id=\"ph2\">`stream`</ph> argument is not a valid file pointer value or does not refer to an open file.","pos":[1946,2063],"source":" The `EBADF` constant means the `stream` argument is not a valid file pointer value or does not refer to an open file."},{"content":"<ph id=\"ph1\">`EINVAL`</ph> means an invalid <ph id=\"ph2\">`stream`</ph> argument was passed to the function.","pos":[2064,2135],"source":"`EINVAL` means an invalid `stream` argument was passed to the function."},{"content":"On devices incapable of seeking (such as terminals and printers), or when <ph id=\"ph1\">`stream`</ph> does not refer to an open file, the return value is undefined.","pos":[2136,2281],"source":" On devices incapable of seeking (such as terminals and printers), or when `stream` does not refer to an open file, the return value is undefined."},{"pos":[2288,2463],"content":"See <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> for more information on these, and other, return codes.","source":"See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on these, and other, return codes."},{"pos":[2472,2479],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`ftell`</ph> and <ph id=\"ph2\">`_ftelli64`</ph>functions retrieve the current position of the file pointer (if any) associated with <ph id=\"ph3\">`stream`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2483,2606],"source":"The `ftell` and `_ftelli64`functions retrieve the current position of the file pointer (if any) associated with `stream`*.*"},{"content":"The position is expressed as an offset relative to the beginning of the stream.","pos":[2607,2686]},{"content":"Note that when a file is opened for appending data, the current file position is determined by the last I/O operation, not by where the next write would occur.","pos":[2693,2852]},{"content":"For example, if a file is opened for an append and the last operation was a read, the file position is the point where the next read operation would start, not where the next write would start.","pos":[2853,3046]},{"content":"(When a file is opened for appending, the file position is moved to end of file before any write operation.) If no I/O operation has yet occurred on a file opened for appending, the file position is the beginning of the file.","pos":[3047,3272]},{"content":"In text mode, CTRL+Z is interpreted as an end-of-file character on input.","pos":[3279,3352]},{"content":"In files opened for reading/writing, <ph id=\"ph1\">`fopen`</ph> and all related routines check for a CTRL+Z at the end of the file and remove it if possible.","pos":[3353,3491],"source":" In files opened for reading/writing, `fopen` and all related routines check for a CTRL+Z at the end of the file and remove it if possible."},{"content":"This is done because using the combination of <ph id=\"ph1\">`ftell`</ph> and <ph id=\"ph2\">`fseek`</ph> or <ph id=\"ph3\">`_ftelli64`</ph> and <ph id=\"ph4\">`_fseeki64`</ph>, to move within a file that ends with a CTRL+Z may cause <ph id=\"ph5\">`ftell`</ph> or <ph id=\"ph6\">`_ftelli64`</ph> to behave improperly near the end of the file.","pos":[3492,3715],"source":" This is done because using the combination of `ftell` and `fseek` or `_ftelli64` and `_fseeki64`, to move within a file that ends with a CTRL+Z may cause `ftell` or `_ftelli64` to behave improperly near the end of the file."},{"content":"This function locks the calling thread during execution and is therefore thread-safe.","pos":[3722,3807]},{"content":"For a non-locking version, see <ph id=\"ph1\">`_ftell_nolock`</ph>.","pos":[3808,3855],"source":" For a non-locking version, see `_ftell_nolock`."},{"pos":[3864,3876],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[3883,3891]},{"content":"Required header","pos":[3892,3907]},{"content":"Optional headers","pos":[3908,3924]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[4001,4011],"source":"\\<stdio.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[4012,4022],"source":"\\<errno.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[4039,4049],"source":"\\<stdio.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[4050,4060],"source":"\\<errno.h>"},{"pos":[4068,4192],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4201,4208],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4995,5020],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5024,5135],"content":"<bpt id=\"p1\">[</bpt>System::IO::FileStream::Position<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.filestream.position.aspx)</ept>","source":"[System::IO::FileStream::Position](https://msdn.microsoft.com/en-us/library/system.io.filestream.position.aspx)"},{"pos":[5144,5152],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5156,5208],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fopen, _wfopen<ept id=\"p1\">](../../c-runtime-library/reference/fopen-wfopen.md)</ept><ph id=\"ph1\"> </ph>","pos":[5211,5280],"source":" [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fgetpos<ept id=\"p1\">](../../c-runtime-library/reference/fgetpos.md)</ept><ph id=\"ph1\"> </ph>","pos":[5283,5340],"source":" [fgetpos](../../c-runtime-library/reference/fgetpos.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fseek, _fseeki64<ept id=\"p1\">](../../c-runtime-library/reference/fseek-fseeki64.md)</ept><ph id=\"ph1\"> </ph>","pos":[5343,5416],"source":" [fseek, _fseeki64](../../c-runtime-library/reference/fseek-fseeki64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_lseek, _lseeki64<ept id=\"p1\">](../../c-runtime-library/reference/lseek-lseeki64.md)</ept>","pos":[5419,5492],"source":" [_lseek, _lseeki64](../../c-runtime-library/reference/lseek-lseeki64.md)"}],"content":"---\ntitle: \"ftell, _ftelli64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_ftelli64\"\n  - \"ftell\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_ftelli64\"\n  - \"ftell\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"ftell function\"\n  - \"ftelli64 function\"\n  - \"_ftelli64 function\"\n  - \"file pointers [C++], getting current position\"\n  - \"file pointers [C++]\"\nms.assetid: 40149cd8-65f2-42ff-b70c-68e3e918cdd7\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ftell, _ftelli64\nGets the current position of a file pointer.  \n  \n## Syntax  \n  \n```  \nlong ftell(   \n   FILE *stream   \n);  \n__int64 _ftelli64(   \n   FILE *stream   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Target `FILE` structure.  \n  \n## Return Value  \n `ftell` and `_ftelli64` return the current file position. The value returned by `ftell` and `_ftelli64` may not reflect the physical byte offset for streams opened in text mode, because text mode causes carriage return–linefeed translation. Use `ftell` with `fseek`or`_ftelli64`with`_fseeki64` to return to file locations correctly. On error, `ftell`and`_ftelli64` invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return –1L and set `errno` to one of two constants, defined in ERRNO.H. The `EBADF` constant means the `stream` argument is not a valid file pointer value or does not refer to an open file. `EINVAL` means an invalid `stream` argument was passed to the function. On devices incapable of seeking (such as terminals and printers), or when `stream` does not refer to an open file, the return value is undefined.  \n  \n See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on these, and other, return codes.  \n  \n## Remarks  \n The `ftell` and `_ftelli64`functions retrieve the current position of the file pointer (if any) associated with `stream`*.* The position is expressed as an offset relative to the beginning of the stream.  \n  \n Note that when a file is opened for appending data, the current file position is determined by the last I/O operation, not by where the next write would occur. For example, if a file is opened for an append and the last operation was a read, the file position is the point where the next read operation would start, not where the next write would start. (When a file is opened for appending, the file position is moved to end of file before any write operation.) If no I/O operation has yet occurred on a file opened for appending, the file position is the beginning of the file.  \n  \n In text mode, CTRL+Z is interpreted as an end-of-file character on input. In files opened for reading/writing, `fopen` and all related routines check for a CTRL+Z at the end of the file and remove it if possible. This is done because using the combination of `ftell` and `fseek` or `_ftelli64` and `_fseeki64`, to move within a file that ends with a CTRL+Z may cause `ftell` or `_ftelli64` to behave improperly near the end of the file.  \n  \n This function locks the calling thread during execution and is therefore thread-safe. For a non-locking version, see `_ftell_nolock`.  \n  \n## Requirements  \n  \n|Function|Required header|Optional headers|  \n|--------------|---------------------|----------------------|  \n|`ftell`|\\<stdio.h>|\\<errno.h>|  \n|`_ftelli64`|\\<stdio.h>|\\<errno.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_ftell.c  \n// This program opens a file named CRT_FTELL.C  \n// for reading and tries to read 100 characters. It  \n// then uses ftell to determine the position of the  \n// file pointer and displays this position.  \n  \n#include <stdio.h>  \n  \nFILE *stream;  \n  \nint main( void )  \n{  \n   long position;  \n   char list[100];  \n   if( fopen_s( &stream, \"crt_ftell.c\", \"rb\" ) == 0 )  \n   {  \n      // Move the pointer by reading data:   \n      fread( list, sizeof( char ), 100, stream );  \n      // Get position after read:   \n      position = ftell( stream );  \n      printf( \"Position after trying to read 100 bytes: %ld\\n\",  \n              position );  \n      fclose( stream );  \n   }  \n}  \n```  \n  \n```Output  \nPosition after trying to read 100 bytes: 100  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::FileStream::Position](https://msdn.microsoft.com/en-us/library/system.io.filestream.position.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md)   \n [fgetpos](../../c-runtime-library/reference/fgetpos.md)   \n [fseek, _fseeki64](../../c-runtime-library/reference/fseek-fseeki64.md)   \n [_lseek, _lseeki64](../../c-runtime-library/reference/lseek-lseeki64.md)"}