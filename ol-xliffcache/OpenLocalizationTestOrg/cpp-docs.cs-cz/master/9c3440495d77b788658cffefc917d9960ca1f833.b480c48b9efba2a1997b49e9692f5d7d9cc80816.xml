{"nodes":[{"pos":[12,49],"content":"&lt;memory&gt; enums | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"memory<ph id=\"ph1\">&amp;gt;</ph> enums | Microsoft Docs","pos":[4,37],"source":"memory&gt; enums | Microsoft Docs"}]},{"content":"memory<ph id=\"ph1\">&amp;gt;</ph> enums","pos":[256,272],"source":"memory&gt; enums"},{"content":"pointer_safety Enumeration","pos":[286,312]},{"pos":[396,422],"content":"pointer_safety Enumeration"},{"pos":[426,494],"content":"The enumeration of possible values returned by <ph id=\"ph1\">`get_pointer_safety`</ph>.","source":"The enumeration of possible values returned by `get_pointer_safety`."},{"pos":[500,564],"content":"class pointer_safety { relaxed, preferred, strict };","source":"class pointer_safety {\n   relaxed,\n   preferred,\n   strict\n   };"},{"content":"Remarks","pos":[574,581]},{"pos":[585,671],"content":"The scoped <ph id=\"ph1\">`enum`</ph> defines the values that can be returned by <ph id=\"ph2\">`get_pointer_safety``()`</ph>:","source":"The scoped `enum` defines the values that can be returned by `get_pointer_safety``()`:"},{"pos":[688,818],"content":"-- pointers not safely derived (obviously pointers to declared or allocated objects) are treated the same as those safely derived."},{"pos":[837,910],"content":"-- as before, but pointers not safely derived should not be dereferenced."},{"pos":[926,1012],"content":"-- pointers not safely derived might be treated differently than those safely derived."},{"content":"See Also","pos":[1021,1029]},{"content":"memory&gt;","pos":[1036,1043],"source":"memory>"}],"content":"---\ntitle: \"&lt;memory&gt; enums | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: b9be0a7b-0beb-40b2-8183-911de371c6b9\ncaps.latest.revision: 11\nmanager: \"ghogen\"\n---\n# &lt;memory&gt; enums\n||  \n|-|  \n|[pointer_safety Enumeration](#pointer_safety_enumeration)|  \n  \n##  <a name=\"pointer_safety_enumeration\"></a>  pointer_safety Enumeration  \n The enumeration of possible values returned by `get_pointer_safety`.  \n  \nclass pointer_safety {\n   relaxed,\n   preferred,\n   strict\n   };  \n  \n### Remarks  \n The scoped `enum` defines the values that can be returned by `get_pointer_safety``()`:  \n  \n `relaxed` -- pointers not safely derived (obviously pointers to declared or allocated objects) are treated the same as those safely derived.  \n  \n `preferred` -- as before, but pointers not safely derived should not be dereferenced.  \n  \n `strict` -- pointers not safely derived might be treated differently than those safely derived.  \n  \n## See Also  \n [\\<memory>](../standard-library/memory.md)\n\n\n\n"}