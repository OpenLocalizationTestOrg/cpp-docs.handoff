<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">deb05417c04eb6f22a255f702f3e6ae4e3363cba</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\ole-background-mfc-implementation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffcb56e41d2d5f656da0fcd21b50a5c6ce99e162</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f40ff0c5a38d6685e9dbaf139fbefd1f14bacce3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>OLE Background: MFC Implementation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>OLE Background: MFC Implementation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Because of the size and complexity of the raw OLE API, calling it directly to write OLE applications can be very time consuming.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The goal of the Microsoft Foundation Class Library implementation of OLE is to reduce the amount of work you have to do to write full-featured, OLE-capable applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article explains the parts of the OLE API that have not been implemented inside MFC.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The discussion also explains how what is implemented maps to the OLE section of the <ph id="ph1">[!INCLUDE[winSDK](../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Portions of OLE Not Implemented by the Class Library</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A few interfaces and features of OLE are not directly provided by MFC.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you want to use these features, you can call the OLE API directly.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>IMoniker Interface</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IMoniker`</ph> interface is implemented by the class library (for example, the <ph id="ph2">`COleServerItem`</ph> class) but has not previously been exposed to the programmer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about this interface, see OLE Moniker Implementations in the OLE section of the <ph id="ph1">[!INCLUDE[winSDK](../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, see also class <bpt id="p1">[</bpt>CMonikerFile<ept id="p1">](../mfc/reference/cmonikerfile-class.md)</ept> and <bpt id="p2">[</bpt>CAsyncMonikerFile<ept id="p2">](../mfc/reference/casyncmonikerfile-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>IUnknown and IMarshal Interfaces</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface is implemented by the class library but is not exposed to the programmer.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>IMarshal<ept id="p1">**</ept> interface is not implemented by the class library but is used internally.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Automation servers built using the class library already have marshaling capabilities built in.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Docfiles (Compound Files)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Compound files are partially supported by the class library.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>None of the functions that directly manipulate compound files beyond creation are supported.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>MFC uses class <bpt id="p1">**</bpt>COleFileStream<ept id="p1">**</ept> to support manipulation of streams with standard file functions.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Containers: Compound Files<ept id="p1">](../mfc/containers-compound-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In-Process Servers and Object Handlers</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In-process servers and object handlers allow implementation of visual editing data or full Component Object Model (COM) objects in a dynamic-link library (DLL).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To do this, you can implement your DLL by calling the OLE API directly.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, if you are writing an Automation server and your server has no user interface, you can use AppWizard to make your server an in-process server and put it completely into a DLL.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information about these topics, see <bpt id="p1">[</bpt>Automation Servers<ept id="p1">](../mfc/automation-servers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The easiest way to implement an Automation server is to place it in a DLL.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>MFC supports this approach.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information on how the Microsoft Foundation OLE classes implement OLE interfaces, see MFC Technical Notes <bpt id="p1">[</bpt>38<ept id="p1">](../mfc/tn038-mfc-ole-iunknown-implementation.md)</ept>, <bpt id="p2">[</bpt>39<ept id="p2">](../mfc/tn039-mfc-ole-automation-implementation.md)</ept>, and <bpt id="p3">[</bpt>40<ept id="p3">](../mfc/tn040-mfc-ole-in-place-resizing-and-zooming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>OLE Background</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>OLE Background: Implementation Strategies</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>