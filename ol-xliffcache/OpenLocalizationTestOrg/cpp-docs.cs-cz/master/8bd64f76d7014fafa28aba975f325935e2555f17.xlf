<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8bd64f76d7014fafa28aba975f325935e2555f17</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\preprocessor\pragma-directives-and-the-pragma-keyword.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15262e607b47877971db9f70d93b5ef01a17cda7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d739dd60a132070065854055a05fc58a274434f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Pragma Directives and the __Pragma Keyword | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Pragma Directives and the __Pragma Keyword</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Pragma directives specify machine- or operating-specific compiler features.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__pragma`</ph> keyword, which is specific to the Microsoft compiler, enables you to code pragma directives within macro definitions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each implementation of C and C++ supports some features unique to its host machine or operating system.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Some programs, for example, must exercise precise control over the memory areas where data is put or to control the way certain functions receive parameters.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#pragma`</ph> directives offer a way for each compiler to offer machine- and operating system-specific features while retaining overall compatibility with the C and C++ languages.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Pragmas are machine- or operating system-specific by definition, and are usually different for every compiler.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pragmas can be used in conditional statements, to provide new preprocessor functionality, or to provide implementation-defined information to the compiler.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`token-string`</ph> is a series of characters that gives a specific compiler instruction and arguments, if any.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The number sign (<bpt id="p1">**</bpt><ph id="ph1">#</ph><ept id="p1">**</ept>) must be the first non-white-space character on the line that contains the pragma; white-space characters can separate the number sign and the word "pragma".</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Following <ph id="ph1">`#pragma`</ph>, write any text that the translator can parse as preprocessing tokens.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The argument to <ph id="ph1">`#pragma`</ph> is subject to macro expansion.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the compiler finds a pragma that it does not recognize, it issues a warning and continues compilation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Microsoft C and C++ compilers recognize the following pragmas:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>alloc_text</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>auto_inline</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>bss_seg</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>check_stack</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>code_seg</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>comment</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>component</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>conform<ept id="p1">](../preprocessor/conform.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>const_seg</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>data_seg</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>deprecated</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>detect_mismatch</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>fenv_access</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>float_control</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>fp_contract</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>function</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>hdrstop</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>include_alias</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>init_seg<ept id="p1">](../preprocessor/init-seg.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>inline_depth</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>inline_recursion</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>intrinsic</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>loop<ept id="p1">](../preprocessor/loop.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>make_public</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>managed</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>message</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>omp</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>once</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>optimize</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>pack</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pointers_to_members<ept id="p1">](../preprocessor/pointers-to-members.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>pop_macro</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>push_macro</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>region, endregion</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>runtime_checks</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>section</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>setlocale</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>strict_gs_check</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>unmanaged</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>vtordisp<ept id="p1">](../preprocessor/vtordisp.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>warning</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Supported only by the C++ compiler.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Pragmas and Compiler Options</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Some pragmas provide the same functionality as compiler options.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When a pragma is encountered in source code, it overrides the behavior specified by the compiler option.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, if you specified <bpt id="p1">[</bpt>/Zp8<ept id="p1">](../build/reference/zp-struct-member-alignment.md)</ept>, you can override this compiler setting for specific sections of the code with <bpt id="p2">[</bpt>pack<ept id="p2">](../preprocessor/pack.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The __pragma() Keyword</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Microsoft specific</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The compiler also supports the <ph id="ph1">`__pragma`</ph> keyword, which has the same functionality as the <ph id="ph2">`#pragma`</ph> directive, but can be used inline in a macro definition.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#pragma`</ph> directive cannot be used in a macro definition because the compiler interprets the number sign character ('#') in the directive to be the <bpt id="p1">[</bpt>stringizing operator (#)<ept id="p1">](../preprocessor/stringizing-operator-hash.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how the <ph id="ph1">`__pragma`</ph> keyword can be used in a macro.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This code is excerpted from the mfcdual.h header in the ACDUAL sample in "Compiler COM Support Samples":</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>End Microsoft specific</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>C/C++ Preprocessor Reference</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>C Pragmas</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>