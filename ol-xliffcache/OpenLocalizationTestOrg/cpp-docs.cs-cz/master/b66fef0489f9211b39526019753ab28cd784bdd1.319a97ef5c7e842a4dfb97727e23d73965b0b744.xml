{"nodes":[{"pos":[12,65],"content":"Custom Controls in the Dialog Editor | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Custom Controls in the Dialog Editor | Microsoft Docs","pos":[0,53]}]},{"content":"Custom Controls in the Dialog Editor","pos":[811,847]},{"content":"The Dialog editor lets you use existing \"custom\" or \"user\" controls in a dialog box template.","pos":[848,941]},{"pos":[949,1172],"content":"[!NOTE]\n Custom controls in this sense are not to be confused with ActiveX controls. ActiveX controls were sometimes called OLE custom controls. Also, don't confuse these controls with the owner-drawn controls in Windows.","leadings":["","> "],"nodes":[{"content":" Custom controls in this sense are not to be confused with ActiveX controls. ActiveX controls were sometimes called OLE custom controls. Also, don't confuse these controls with the owner-drawn controls in Windows.","pos":[8,221],"nodes":[{"content":"Custom controls in this sense are not to be confused with ActiveX controls.","pos":[1,76]},{"content":"ActiveX controls were sometimes called OLE custom controls.","pos":[77,136]},{"content":"Also, don't confuse these controls with the owner-drawn controls in Windows.","pos":[137,213]}]}]},{"content":"This functionality is intended to let you use controls other than those supplied by Windows.","pos":[1179,1271]},{"content":"At run time, the control is associated with a window class (not the same as a C++ class).","pos":[1272,1361]},{"content":"A more common way to accomplish the same task is to install any control, such as a static control, in your dialog box.","pos":[1362,1480]},{"content":"Then at run time, in the <bpt id=\"p1\">[</bpt>OnInitDialog<ept id=\"p1\">](../mfc/reference/cdialog-class.md#cdialog__oninitdialog)</ept> function, remove that control and replace it with your own custom control.","pos":[1481,1652],"source":" Then at run time, in the [OnInitDialog](../mfc/reference/cdialog-class.md#cdialog__oninitdialog) function, remove that control and replace it with your own custom control."},{"content":"This is an old technique.","pos":[1659,1684]},{"content":"Today you are advised in most cases to write an ActiveX control or subclass a Windows common control.","pos":[1685,1786]},{"content":"For these custom controls, you are limited to:","pos":[1793,1839]},{"content":"Setting the location in the dialog box.","pos":[1849,1888]},{"content":"Typing a caption.","pos":[1898,1915]},{"content":"Identifying the name of the control's Windows class (your application code must register the control by this name).","pos":[1925,2040]},{"content":"Typing a 32-bit hexadecimal value that sets the control's style.","pos":[2050,2114]},{"content":"Setting the extended style.","pos":[2124,2151]},{"content":"For information on adding resources to managed projects, please see <bpt id=\"p1\">[</bpt>Resources in Applications<ept id=\"p1\">](http://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890)</ept> in the <bpt id=\"p2\">*</bpt>.NET Framework Developer's Guide.<ept id=\"p2\">*</ept>","pos":[2158,2368],"source":"For information on adding resources to managed projects, please see [Resources in Applications](http://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890) in the *.NET Framework Developer's Guide.*"},{"content":"For information on manually adding resource files to managed projects, accessing resources, displaying static resources, and assigning resources strings to properties, see <bpt id=\"p1\">[</bpt>Walkthrough: Localizing Windows Forms<ept id=\"p1\">](http://msdn.microsoft.com/en-us/9a96220d-a19b-4de0-9f48-01e5d82679e5)</ept> and <bpt id=\"p2\">[</bpt>Walkthrough: Using Resources for Localization with ASP.NET<ept id=\"p2\">](http://msdn.microsoft.com/library/bb4e5b44-e2b0-48ab-bbe9-609fb33900b6)</ept>.","pos":[2369,2788],"source":" For information on manually adding resource files to managed projects, accessing resources, displaying static resources, and assigning resources strings to properties, see [Walkthrough: Localizing Windows Forms](http://msdn.microsoft.com/en-us/9a96220d-a19b-4de0-9f48-01e5d82679e5) and [Walkthrough: Using Resources for Localization with ASP.NET](http://msdn.microsoft.com/library/bb4e5b44-e2b0-48ab-bbe9-609fb33900b6)."},{"content":"Requirements","pos":[2797,2809]},{"content":"Win32","pos":[2813,2818]},{"content":"See Also","pos":[2827,2835]},{"content":"Controls in Dialog Boxes","pos":[2840,2864]},{"content":"Controls","pos":[2907,2915]}],"content":"---\ntitle: \"Custom Controls in the Dialog Editor | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"Custom Control\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"controls [C++], templates\"\n  - \"custom controls [Visual Studio], dialog boxes\"\n  - \"custom controls [Visual Studio]\"\n  - \"dialog box controls, custom (user) controls\"\n  - \"Dialog editor, custom controls\"\nms.assetid: f494b314-4000-4bbe-bbd0-4b18fb71ede1\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Custom Controls in the Dialog Editor\nThe Dialog editor lets you use existing \"custom\" or \"user\" controls in a dialog box template.  \n  \n> [!NOTE]\n>  Custom controls in this sense are not to be confused with ActiveX controls. ActiveX controls were sometimes called OLE custom controls. Also, don't confuse these controls with the owner-drawn controls in Windows.  \n  \n This functionality is intended to let you use controls other than those supplied by Windows. At run time, the control is associated with a window class (not the same as a C++ class). A more common way to accomplish the same task is to install any control, such as a static control, in your dialog box. Then at run time, in the [OnInitDialog](../mfc/reference/cdialog-class.md#cdialog__oninitdialog) function, remove that control and replace it with your own custom control.  \n  \n This is an old technique. Today you are advised in most cases to write an ActiveX control or subclass a Windows common control.  \n  \n For these custom controls, you are limited to:  \n  \n-   Setting the location in the dialog box.  \n  \n-   Typing a caption.  \n  \n-   Identifying the name of the control's Windows class (your application code must register the control by this name).  \n  \n-   Typing a 32-bit hexadecimal value that sets the control's style.  \n  \n-   Setting the extended style.  \n  \n For information on adding resources to managed projects, please see [Resources in Applications](http://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890) in the *.NET Framework Developer's Guide.* For information on manually adding resource files to managed projects, accessing resources, displaying static resources, and assigning resources strings to properties, see [Walkthrough: Localizing Windows Forms](http://msdn.microsoft.com/en-us/9a96220d-a19b-4de0-9f48-01e5d82679e5) and [Walkthrough: Using Resources for Localization with ASP.NET](http://msdn.microsoft.com/library/bb4e5b44-e2b0-48ab-bbe9-609fb33900b6).  \n  \n## Requirements  \n Win32  \n  \n## See Also  \n [Controls in Dialog Boxes](../mfc/controls-in-dialog-boxes.md)   \n [Controls](../mfc/controls-mfc.md)\n\n"}