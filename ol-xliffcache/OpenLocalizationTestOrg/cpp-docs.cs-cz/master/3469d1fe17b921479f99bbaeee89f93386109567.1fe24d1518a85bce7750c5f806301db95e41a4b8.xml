{"nodes":[{"pos":[12,59],"content":"Run-Time Object Model Services | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Run-Time Object Model Services | Microsoft Docs","pos":[0,47]}]},{"content":"Run-Time Object Model Services","pos":[640,670]},{"content":"The classes <bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept> and <bpt id=\"p2\">[</bpt>CRuntimeClass<ept id=\"p2\">](../../mfc/reference/cruntimeclass-structure.md)</ept> encapsulate several object services, including access to run-time class information, serialization, and dynamic object creation.","pos":[671,927],"source":"The classes [CObject](../../mfc/reference/cobject-class.md) and [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) encapsulate several object services, including access to run-time class information, serialization, and dynamic object creation."},{"content":"All classes derived from <ph id=\"ph1\">`CObject`</ph> inherit this functionality.","pos":[928,990],"source":" All classes derived from `CObject` inherit this functionality."},{"content":"Access to run-time class information enables you to determine information about an object's class at run time.","pos":[997,1107]},{"content":"The ability to determine the class of an object at run time is useful when you need extra type-checking of function arguments and when you must write special-purpose code based on the class of an object.","pos":[1108,1311]},{"content":"Run-time class information is not supported directly by the C++ language.","pos":[1312,1385]},{"content":"Serialization is the process of writing or reading an object's contents to or from a file.","pos":[1392,1482]},{"content":"You can use serialization to store an object's contents even after the application exits.","pos":[1483,1572]},{"content":"The object can then be read from the file when the application is restarted.","pos":[1573,1649]},{"content":"Such data objects are said to be \"persistent.\"","pos":[1650,1696]},{"content":"Dynamic object creation enables you to create an object of a specified class at run time.","pos":[1703,1792]},{"content":"For example, document, view, and frame objects must support dynamic creation because the framework needs to create them dynamically.","pos":[1793,1925]},{"content":"The following table lists the MFC macros that support run-time class information, serialization, and dynamic creation.","pos":[1932,2050]},{"pos":[2057,2252],"content":"For more information on these run-time object services and serialization, see the article <bpt id=\"p1\">[</bpt>CObject Class: Accessing Run-Time Class Information<ept id=\"p1\">](../../mfc/accessing-run-time-class-information.md)</ept>.","source":"For more information on these run-time object services and serialization, see the article [CObject Class: Accessing Run-Time Class Information](../../mfc/accessing-run-time-class-information.md)."},{"content":"Run-Time Object Model Services Macros","pos":[2262,2299]},{"content":"DECLARE_DYNAMIC","pos":[2321,2336]},{"content":"Enables access to run-time class information (must be used in the class declaration).","pos":[2356,2441]},{"content":"DECLARE_DYNCREATE","pos":[2447,2464]},{"content":"Enables dynamic creation and access to run-time class information (must be used in the class declaration).","pos":[2486,2592]},{"content":"DECLARE_SERIAL","pos":[2598,2612]},{"content":"Enables serialization and access to run-time class information (must be used in the class declaration).","pos":[2631,2734]},{"content":"IMPLEMENT_DYNAMIC","pos":[2740,2757]},{"content":"Enables access to run-time class information (must be used in the class implementation).","pos":[2779,2867]},{"content":"IMPLEMENT_DYNCREATE","pos":[2873,2892]},{"content":"Enables dynamic creation and access to run-time information (must be used in the class implementation).","pos":[2916,3019]},{"content":"IMPLEMENT_SERIAL","pos":[3025,3041]},{"content":"Permits serialization and access to run-time class information (must be used in the class implementation).","pos":[3062,3168]},{"content":"RUNTIME_CLASS","pos":[3174,3187]},{"pos":[3205,3279],"content":"Returns the <ph id=\"ph1\">`CRuntimeClass`</ph> structure that corresponds to the named class.","source":"Returns the `CRuntimeClass` structure that corresponds to the named class."},{"content":"OLE frequently requires the dynamic creation of objects at run time.","pos":[3287,3355]},{"content":"For example, an OLE server application must be able to create OLE items dynamically in response to a request from a client.","pos":[3356,3479]},{"content":"Similarly, an automation server must be able to create items in response to requests from automation clients.","pos":[3480,3589]},{"content":"The Microsoft Foundation Class Library provides two macros specific to OLE.","pos":[3596,3671]},{"content":"Dynamic Creation of OLE Objects","pos":[3681,3712]},{"content":"DECLARE_OLECREATE","pos":[3734,3751]},{"content":"Enables objects to be created through OLE automation.","pos":[3773,3826]},{"content":"IMPLEMENT_OLECREATE","pos":[3832,3851]},{"content":"Enables objects to be created by the OLE system.","pos":[3875,3923]},{"pos":[3966,3981],"content":"DECLARE_DYNAMIC"},{"pos":[3985,4094],"content":"Adds the ability to access run-time information about an object's class when deriving a class from <ph id=\"ph1\">`CObject`</ph>.","source":"Adds the ability to access run-time information about an object's class when deriving a class from `CObject`."},{"content":"Parameters","pos":[4146,4156]},{"content":"class_name","pos":[4161,4171]},{"content":"The actual name of the class.","pos":[4176,4205]},{"content":"Remarks","pos":[4215,4222]},{"pos":[4226,4386],"content":"Add the <ph id=\"ph1\">`DECLARE_DYNAMIC`</ph> macro to the header (.h) module for the class, then include that module in all .cpp modules that need access to objects of this class.","source":"Add the `DECLARE_DYNAMIC` macro to the header (.h) module for the class, then include that module in all .cpp modules that need access to objects of this class."},{"pos":[4393,4609],"content":"If you use the <bpt id=\"p1\">**</bpt>DECLARE<ept id=\"p1\">**</ept>_ <bpt id=\"p2\">**</bpt>DYNAMIC<ept id=\"p2\">**</ept> and <ph id=\"ph1\">`IMPLEMENT_DYNAMIC`</ph> macros as described, you can then use the <ph id=\"ph2\">`RUNTIME_CLASS`</ph> macro and the <ph id=\"ph3\">`CObject::IsKindOf`</ph> function to determine the class of your objects at run time.","source":"If you use the **DECLARE**_ **DYNAMIC** and `IMPLEMENT_DYNAMIC` macros as described, you can then use the `RUNTIME_CLASS` macro and the `CObject::IsKindOf` function to determine the class of your objects at run time."},{"pos":[4616,4745],"content":"If <ph id=\"ph1\">`DECLARE_DYNAMIC`</ph> is included in the class declaration, then <ph id=\"ph2\">`IMPLEMENT_DYNAMIC`</ph> must be included in the class implementation.","source":"If `DECLARE_DYNAMIC` is included in the class declaration, then `IMPLEMENT_DYNAMIC` must be included in the class implementation."},{"pos":[4752,4860],"content":"For more information on the <ph id=\"ph1\">`DECLARE_DYNAMIC`</ph> macro, see <bpt id=\"p1\">[</bpt>CObject Class Topics<ept id=\"p1\">](../../mfc/using-cobject.md)</ept>.","source":"For more information on the `DECLARE_DYNAMIC` macro, see [CObject Class Topics](../../mfc/using-cobject.md)."},{"content":"Example","pos":[4870,4877]},{"pos":[4881,4941],"content":"See the example for <bpt id=\"p1\">[</bpt>IMPLEMENT_DYNAMIC<ept id=\"p1\">](#implement_dynamic)</ept>.","source":"See the example for [IMPLEMENT_DYNAMIC](#implement_dynamic)."},{"pos":[4985,5002],"content":"DECLARE_DYNCREATE"},{"pos":[5006,5089],"content":"Enables objects of <ph id=\"ph1\">`CObject`</ph>-derived classes to be created dynamically at run time.","source":"Enables objects of `CObject`-derived classes to be created dynamically at run time."},{"content":"Parameters","pos":[5145,5155]},{"content":"class_name","pos":[5160,5170]},{"content":"The actual name of the class.","pos":[5175,5204]},{"content":"Remarks","pos":[5214,5221]},{"content":"The framework uses this ability to create new objects dynamically.","pos":[5225,5291]},{"content":"For example, the new view created when you open a new document.","pos":[5292,5355]},{"content":"Document, view, and frame classes should support dynamic creation because the framework needs to create them dynamically.","pos":[5356,5477]},{"pos":[5484,5637],"content":"Add the <ph id=\"ph1\">`DECLARE_DYNCREATE`</ph> macro in the .h module for the class, then include that module in all .cpp modules that need access to objects of this class.","source":"Add the `DECLARE_DYNCREATE` macro in the .h module for the class, then include that module in all .cpp modules that need access to objects of this class."},{"pos":[5644,5777],"content":"If <ph id=\"ph1\">`DECLARE_DYNCREATE`</ph> is included in the class declaration, then <ph id=\"ph2\">`IMPLEMENT_DYNCREATE`</ph> must be included in the class implementation.","source":"If `DECLARE_DYNCREATE` is included in the class declaration, then `IMPLEMENT_DYNCREATE` must be included in the class implementation."},{"pos":[5784,5894],"content":"For more information on the <ph id=\"ph1\">`DECLARE_DYNCREATE`</ph> macro, see <bpt id=\"p1\">[</bpt>CObject Class Topics<ept id=\"p1\">](../../mfc/using-cobject.md)</ept>.","source":"For more information on the `DECLARE_DYNCREATE` macro, see [CObject Class Topics](../../mfc/using-cobject.md)."},{"pos":[5902,5995],"content":"[!NOTE]\n The `DECLARE_DYNCREATE` macro includes all the functionality of `DECLARE_DYNAMIC`.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">`DECLARE_DYNCREATE`</ph> macro includes all the functionality of <ph id=\"ph2\">`DECLARE_DYNAMIC`</ph>.","pos":[9,91],"source":" The `DECLARE_DYNCREATE` macro includes all the functionality of `DECLARE_DYNAMIC`."}]},{"content":"Example","pos":[6005,6012]},{"pos":[6016,6080],"content":"See the example for <bpt id=\"p1\">[</bpt>IMPLEMENT_DYNCREATE<ept id=\"p1\">](#implement_dyncreate)</ept>.","source":"See the example for [IMPLEMENT_DYNCREATE](#implement_dyncreate)."},{"pos":[6121,6135],"content":"DECLARE_SERIAL"},{"pos":[6139,6232],"content":"Generates the C++ header code necessary for a <ph id=\"ph1\">`CObject`</ph>-derived class that can be serialized.","source":"Generates the C++ header code necessary for a `CObject`-derived class that can be serialized."},{"content":"Parameters","pos":[6285,6295]},{"content":"class_name","pos":[6300,6310]},{"content":"The actual name of the class.","pos":[6315,6344]},{"content":"Remarks","pos":[6354,6361]},{"content":"Serialization is the process of writing or reading the contents of an object to and from a file.","pos":[6365,6461]},{"pos":[6468,6607],"content":"Use the <ph id=\"ph1\">`DECLARE_SERIAL`</ph> macro in an .h module, and then include that module in all .cpp modules that need access to objects of this class.","source":"Use the `DECLARE_SERIAL` macro in an .h module, and then include that module in all .cpp modules that need access to objects of this class."},{"pos":[6614,6741],"content":"If <ph id=\"ph1\">`DECLARE_SERIAL`</ph> is included in the class declaration, then <ph id=\"ph2\">`IMPLEMENT_SERIAL`</ph> must be included in the class implementation.","source":"If `DECLARE_SERIAL` is included in the class declaration, then `IMPLEMENT_SERIAL` must be included in the class implementation."},{"pos":[6748,6851],"content":"The <ph id=\"ph1\">`DECLARE_SERIAL`</ph> macro includes all the functionality of <ph id=\"ph2\">`DECLARE_DYNAMIC`</ph> and <ph id=\"ph3\">`DECLARE_DYNCREATE`</ph>.","source":"The `DECLARE_SERIAL` macro includes all the functionality of `DECLARE_DYNAMIC` and `DECLARE_DYNCREATE`."},{"content":"You can use the <bpt id=\"p1\">**</bpt>AFX_API<ept id=\"p1\">**</ept> macro to automatically export the <ph id=\"ph1\">`CArchive`</ph> extraction operator for classes that use the <ph id=\"ph2\">`DECLARE_SERIAL`</ph> and <ph id=\"ph3\">`IMPLEMENT_SERIAL`</ph> macros.","pos":[6858,7023],"source":"You can use the **AFX_API** macro to automatically export the `CArchive` extraction operator for classes that use the `DECLARE_SERIAL` and `IMPLEMENT_SERIAL` macros."},{"content":"Bracket the class declarations (located in the .h file) with the following code:","pos":[7024,7104]},{"pos":[7122,7145],"content":"NVC_MFCCObjectSample#20"},{"pos":[7216,7323],"content":"For more information on the <ph id=\"ph1\">`DECLARE_SERIAL`</ph> macro, see <bpt id=\"p1\">[</bpt>CObject Class Topics<ept id=\"p1\">](../../mfc/using-cobject.md)</ept>.","source":"For more information on the `DECLARE_SERIAL` macro, see [CObject Class Topics](../../mfc/using-cobject.md)."},{"content":"Example","pos":[7333,7340]},{"pos":[7355,7378],"content":"NVC_MFCCObjectSample#21"},{"pos":[7486,7503],"content":"IMPLEMENT_DYNAMIC"},{"pos":[7507,7651],"content":"Generates the C++ code necessary for a dynamic <ph id=\"ph1\">`CObject`</ph>-derived class with run-time access to the class name and position within the hierarchy.","source":"Generates the C++ code necessary for a dynamic `CObject`-derived class with run-time access to the class name and position within the hierarchy."},{"content":"Parameters","pos":[7723,7733]},{"content":"class_name","pos":[7738,7748]},{"content":"The actual name of the class.","pos":[7753,7782]},{"content":"The name of the base class.","pos":[7810,7837]},{"content":"Remarks","pos":[7847,7854]},{"pos":[7858,7960],"content":"Use the <ph id=\"ph1\">`IMPLEMENT_DYNAMIC`</ph> macro in a .cpp module, and then link the resulting object code only once.","source":"Use the `IMPLEMENT_DYNAMIC` macro in a .cpp module, and then link the resulting object code only once."},{"pos":[7967,8044],"content":"For more information, see <bpt id=\"p1\">[</bpt>CObject Class Topics<ept id=\"p1\">](../../mfc/using-cobject.md)</ept>.","source":"For more information, see [CObject Class Topics](../../mfc/using-cobject.md)."},{"content":"Example","pos":[8054,8061]},{"pos":[8076,8098],"content":"NVC_MFCCObjectSample#2"},{"pos":[8180,8202],"content":"NVC_MFCCObjectSample#3"},{"pos":[8314,8333],"content":"IMPLEMENT_DYNCREATE"},{"pos":[8337,8465],"content":"Enables objects of <ph id=\"ph1\">`CObject`</ph>-derived classes to be created dynamically at run time when used with the <ph id=\"ph2\">`DECLARE_DYNCREATE`</ph> macro.","source":"Enables objects of `CObject`-derived classes to be created dynamically at run time when used with the `DECLARE_DYNCREATE` macro."},{"content":"Parameters","pos":[8540,8550]},{"content":"class_name","pos":[8555,8565]},{"content":"The actual name of the class.","pos":[8570,8599]},{"content":"The actual name of the base class.","pos":[8627,8661]},{"content":"Remarks","pos":[8671,8678]},{"content":"The framework uses this ability to create new objects dynamically, for example, when it reads an object from disk during serialization.","pos":[8682,8817]},{"content":"Add the <ph id=\"ph1\">`IMPLEMENT_DYNCREATE`</ph> macro in the class implementation file.","pos":[8818,8887],"source":" Add the `IMPLEMENT_DYNCREATE` macro in the class implementation file."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CObject Class Topics<ept id=\"p1\">](../../mfc/using-cobject.md)</ept>.","pos":[8888,8965],"source":" For more information, see [CObject Class Topics](../../mfc/using-cobject.md)."},{"pos":[8972,9179],"content":"If you use the <ph id=\"ph1\">`DECLARE_DYNCREATE`</ph> and <ph id=\"ph2\">`IMPLEMENT_DYNCREATE`</ph> macros, you can then use the <ph id=\"ph3\">`RUNTIME_CLASS`</ph> macro and the <ph id=\"ph4\">`CObject::IsKindOf`</ph> member function to determine the class of your objects at run time.","source":"If you use the `DECLARE_DYNCREATE` and `IMPLEMENT_DYNCREATE` macros, you can then use the `RUNTIME_CLASS` macro and the `CObject::IsKindOf` member function to determine the class of your objects at run time."},{"pos":[9186,9319],"content":"If <ph id=\"ph1\">`DECLARE_DYNCREATE`</ph> is included in the class declaration, then <ph id=\"ph2\">`IMPLEMENT_DYNCREATE`</ph> must be included in the class implementation.","source":"If `DECLARE_DYNCREATE` is included in the class declaration, then `IMPLEMENT_DYNCREATE` must be included in the class implementation."},{"content":"Note that this macro definition will invoke the default constructor for your class.","pos":[9326,9409]},{"content":"If a non-trivial constructor is explicitly implemented by the class, it must also explicitly implement the default constructor as well.","pos":[9410,9545]},{"content":"The default constructor can be added to the class's <bpt id=\"p1\">**</bpt>private<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>protected<ept id=\"p2\">**</ept> member sections to prevent it from being called from outside the class implementation.","pos":[9546,9713],"source":" The default constructor can be added to the class's **private** or **protected** member sections to prevent it from being called from outside the class implementation."},{"content":"Example","pos":[9723,9730]},{"pos":[9745,9768],"content":"NVC_MFCCObjectSample#22"},{"pos":[9850,9873],"content":"NVC_MFCCObjectSample#23"},{"pos":[9982,9998],"content":"IMPLEMENT_SERIAL"},{"pos":[10002,10146],"content":"Generates the C++ code necessary for a dynamic <ph id=\"ph1\">`CObject`</ph>-derived class with run-time access to the class name and position within the hierarchy.","source":"Generates the C++ code necessary for a dynamic `CObject`-derived class with run-time access to the class name and position within the hierarchy."},{"content":"Parameters","pos":[10226,10236]},{"content":"class_name","pos":[10241,10251]},{"content":"The actual name of the class.","pos":[10256,10285]},{"content":"The name of the base class.","pos":[10313,10340]},{"content":"wSchema","pos":[10348,10355]},{"content":"A <bpt id=\"p1\">**</bpt>UINT<ept id=\"p1\">**</ept> \"version number\" that will be encoded in the archive to enable a deserializing program to identify and handle data created by earlier program versions.","pos":[10360,10522],"source":" A **UINT** \"version number\" that will be encoded in the archive to enable a deserializing program to identify and handle data created by earlier program versions."},{"content":"The class schema number must not be â€“1.","pos":[10523,10564]},{"content":"Remarks","pos":[10574,10581]},{"pos":[10585,10682],"content":"Use the <ph id=\"ph1\">`IMPLEMENT_SERIAL`</ph> macro in a .cpp module; then link the resulting object code only once.","source":"Use the `IMPLEMENT_SERIAL` macro in a .cpp module; then link the resulting object code only once."},{"content":"You can use the <bpt id=\"p1\">**</bpt>AFX_API<ept id=\"p1\">**</ept> macro to automatically export the <ph id=\"ph1\">`CArchive`</ph> extraction operator for classes that use the <ph id=\"ph2\">`DECLARE_SERIAL`</ph> and <ph id=\"ph3\">`IMPLEMENT_SERIAL`</ph> macros.","pos":[10689,10854],"source":"You can use the **AFX_API** macro to automatically export the `CArchive` extraction operator for classes that use the `DECLARE_SERIAL` and `IMPLEMENT_SERIAL` macros."},{"content":"Bracket the class declarations (located in the .h file) with the following code:","pos":[10855,10935]},{"pos":[10953,10976],"content":"NVC_MFCCObjectSample#20"},{"pos":[11047,11128],"content":"For more information, see the <bpt id=\"p1\">[</bpt>CObject Class Topics<ept id=\"p1\">](../../mfc/using-cobject.md)</ept>.","source":"For more information, see the [CObject Class Topics](../../mfc/using-cobject.md)."},{"content":"Example","pos":[11138,11145]},{"pos":[11160,11183],"content":"NVC_MFCCObjectSample#24"},{"pos":[11289,11302],"content":"RUNTIME_CLASS"},{"content":"Gets the run-time class structure from the name of a C++ class.","pos":[11306,11369]},{"content":"Parameters","pos":[11420,11430]},{"content":"class_name","pos":[11435,11445]},{"content":"The actual name of the class (not enclosed in quotation marks).","pos":[11450,11513]},{"content":"Remarks","pos":[11523,11530]},{"content":"returns a pointer to a <bpt id=\"p1\">[</bpt>CRuntimeClass<ept id=\"p1\">](../../mfc/reference/cruntimeclass-structure.md)</ept> structure for the class specified by <bpt id=\"p2\">*</bpt>class_name<ept id=\"p2\">*</ept>.","pos":[11550,11687],"source":" returns a pointer to a [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) structure for the class specified by *class_name*."},{"content":"Only <ph id=\"ph1\">`CObject`</ph>-derived classes declared with <ph id=\"ph2\">`DECLARE_DYNAMIC`</ph>, <ph id=\"ph3\">`DECLARE_DYNCREATE`</ph>, or <ph id=\"ph4\">`DECLARE_SERIAL`</ph> will return pointers to a <ph id=\"ph5\">`CRuntimeClass`</ph> structure.","pos":[11688,11845],"source":" Only `CObject`-derived classes declared with `DECLARE_DYNAMIC`, `DECLARE_DYNCREATE`, or `DECLARE_SERIAL` will return pointers to a `CRuntimeClass` structure."},{"pos":[11852,11929],"content":"For more information, see <bpt id=\"p1\">[</bpt>CObject Class Topics<ept id=\"p1\">](../../mfc/using-cobject.md)</ept>.","source":"For more information, see [CObject Class Topics](../../mfc/using-cobject.md)."},{"content":"Example","pos":[11939,11946]},{"pos":[11961,11984],"content":"NVC_MFCCObjectSample#25"},{"pos":[12094,12111],"content":"DECLARE_OLECREATE"},{"pos":[12115,12200],"content":"Enables objects of <ph id=\"ph1\">`CCmdTarget`</ph>-derived classes to be created through OLE automation.","source":"Enables objects of `CCmdTarget`-derived classes to be created through OLE automation."},{"content":"Parameters","pos":[12254,12264]},{"content":"class_name","pos":[12269,12279]},{"content":"The actual name of the class.","pos":[12284,12313]},{"content":"Remarks","pos":[12323,12330]},{"content":"This macro enables other OLE-enabled applications to create objects of this type.","pos":[12334,12415]},{"pos":[12422,12579],"content":"Add the <ph id=\"ph1\">`DECLARE_OLECREATE`</ph> macro in the .h module for the class, and then include that module in all .cpp modules that need access to objects of this class.","source":"Add the `DECLARE_OLECREATE` macro in the .h module for the class, and then include that module in all .cpp modules that need access to objects of this class."},{"content":"If <ph id=\"ph1\">`DECLARE_OLECREATE`</ph> is included in the class declaration, then <ph id=\"ph2\">`IMPLEMENT_OLECREATE`</ph> must be included in the class implementation.","pos":[12586,12719],"source":"If `DECLARE_OLECREATE` is included in the class declaration, then `IMPLEMENT_OLECREATE` must be included in the class implementation."},{"content":"A class declaration using <ph id=\"ph1\">`DECLARE_OLECREATE`</ph> must also use <ph id=\"ph2\">`DECLARE_DYNCREATE`</ph> or <ph id=\"ph3\">`DECLARE_SERIAL`</ph>.","pos":[12720,12820],"source":" A class declaration using `DECLARE_OLECREATE` must also use `DECLARE_DYNCREATE` or `DECLARE_SERIAL`."},{"pos":[12866,12885],"content":"IMPLEMENT_OLECREATE"},{"pos":[12889,13093],"content":"Either this macro or <bpt id=\"p1\">[</bpt>IMPLEMENT_OLECREATE_FLAGS<ept id=\"p1\">](http://msdn.microsoft.com/library/d1589f6a-5a69-4742-b07c-4c621cfd040d)</ept> must appear in the implementation file for any class that uses <ph id=\"ph1\">`DECLARE_OLECREATE`</ph>.","source":"Either this macro or [IMPLEMENT_OLECREATE_FLAGS](http://msdn.microsoft.com/library/d1589f6a-5a69-4742-b07c-4c621cfd040d) must appear in the implementation file for any class that uses `DECLARE_OLECREATE`."},{"content":"Parameters","pos":[13208,13218]},{"content":"class_name","pos":[13223,13233]},{"content":"The actual name of the class.","pos":[13238,13267]},{"content":"external_name","pos":[13275,13288]},{"content":"The object name exposed to other applications (enclosed in quotation marks).","pos":[13293,13369]},{"content":"<bpt id=\"p1\">*</bpt>l<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>w1<ept id=\"p2\">*</ept>, <bpt id=\"p3\">*</bpt>w2<ept id=\"p3\">*</ept>, <bpt id=\"p4\">*</bpt>b1<ept id=\"p4\">*</ept>, <bpt id=\"p5\">*</bpt>b2<ept id=\"p5\">*</ept>, <bpt id=\"p6\">*</bpt>b3<ept id=\"p6\">*</ept>, <bpt id=\"p7\">*</bpt>b4<ept id=\"p7\">*</ept>, <bpt id=\"p8\">*</bpt>b5<ept id=\"p8\">*</ept>, <bpt id=\"p9\">*</bpt>b6<ept id=\"p9\">*</ept>, <bpt id=\"p10\">*</bpt>b7<ept id=\"p10\">*</ept>, <bpt id=\"p11\">*</bpt>b8<ept id=\"p11\">*</ept>","pos":[13376,13439],"source":"*l*, *w1*, *w2*, *b1*, *b2*, *b3*, *b4*, *b5*, *b6*, *b7*, *b8*"},{"content":"Components of the class's <bpt id=\"p1\">**</bpt>CLSID<ept id=\"p1\">**</ept>.","pos":[13443,13479],"source":" Components of the class's **CLSID**."},{"content":"Remarks","pos":[13489,13496]},{"pos":[13504,13737],"content":"[!NOTE]\n If you use `IMPLEMENT_OLECREATE`, by default, you support only the single threading model. If you use `IMPLEMENT_OLECREATE_FLAGS`, you can specify which threading model your object supports by using the `nFlags` parameter.","leadings":["","> "],"nodes":[{"content":" If you use `IMPLEMENT_OLECREATE`, by default, you support only the single threading model. If you use `IMPLEMENT_OLECREATE_FLAGS`, you can specify which threading model your object supports by using the `nFlags` parameter.","pos":[8,231],"nodes":[{"content":"If you use <ph id=\"ph1\">`IMPLEMENT_OLECREATE`</ph>, by default, you support only the single threading model.","pos":[1,91],"source":" If you use `IMPLEMENT_OLECREATE`, by default, you support only the single threading model."},{"content":"If you use <ph id=\"ph1\">`IMPLEMENT_OLECREATE_FLAGS`</ph>, you can specify which threading model your object supports by using the <ph id=\"ph2\">`nFlags`</ph> parameter.","pos":[92,223],"source":" If you use `IMPLEMENT_OLECREATE_FLAGS`, you can specify which threading model your object supports by using the `nFlags` parameter."}]}]},{"content":"The external name is the identifier exposed to other applications.","pos":[13744,13810]},{"content":"Client applications use the external name to request an object of this class from an automation server.","pos":[13811,13914]},{"content":"The OLE class ID is a unique 128-bit identifier for the object.","pos":[13921,13984]},{"content":"It consists of one <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>, two <bpt id=\"p2\">**</bpt>WORD<ept id=\"p2\">**</ept>s, and eight <bpt id=\"p3\">**</bpt>BYTE<ept id=\"p3\">**</ept>s, as represented by <bpt id=\"p4\">*</bpt>l<ept id=\"p4\">*</ept>, <bpt id=\"p5\">*</bpt>w1<ept id=\"p5\">*</ept>, <bpt id=\"p6\">*</bpt>w2<ept id=\"p6\">*</ept>, and <bpt id=\"p7\">*</bpt>b1<ept id=\"p7\">*</ept> through <bpt id=\"p8\">*</bpt>b8<ept id=\"p8\">*</ept> in the syntax description.","pos":[13985,14133],"source":" It consists of one **long**, two **WORD**s, and eight **BYTE**s, as represented by *l*, *w1*, *w2*, and *b1* through *b8* in the syntax description."},{"content":"The Application Wizard and code wizards create unique OLE class IDs for you as required.","pos":[14134,14222]},{"content":"See Also","pos":[14231,14239]},{"content":"Macros and Globals","pos":[14244,14262]}],"content":"---\ntitle: \"Run-Time Object Model Services | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.mfc.macros\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"run-time object model services macros\"\nms.assetid: 4a3e79df-2ee3-43a4-8193-20298828de85\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Run-Time Object Model Services\nThe classes [CObject](../../mfc/reference/cobject-class.md) and [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) encapsulate several object services, including access to run-time class information, serialization, and dynamic object creation. All classes derived from `CObject` inherit this functionality.  \n  \n Access to run-time class information enables you to determine information about an object's class at run time. The ability to determine the class of an object at run time is useful when you need extra type-checking of function arguments and when you must write special-purpose code based on the class of an object. Run-time class information is not supported directly by the C++ language.  \n  \n Serialization is the process of writing or reading an object's contents to or from a file. You can use serialization to store an object's contents even after the application exits. The object can then be read from the file when the application is restarted. Such data objects are said to be \"persistent.\"  \n  \n Dynamic object creation enables you to create an object of a specified class at run time. For example, document, view, and frame objects must support dynamic creation because the framework needs to create them dynamically.  \n  \n The following table lists the MFC macros that support run-time class information, serialization, and dynamic creation.  \n  \n For more information on these run-time object services and serialization, see the article [CObject Class: Accessing Run-Time Class Information](../../mfc/accessing-run-time-class-information.md).  \n  \n### Run-Time Object Model Services Macros  \n  \n|||  \n|-|-|  \n|[DECLARE_DYNAMIC](#declare_dynamic)|Enables access to run-time class information (must be used in the class declaration).|  \n|[DECLARE_DYNCREATE](#declare_dyncreate)|Enables dynamic creation and access to run-time class information (must be used in the class declaration).|  \n|[DECLARE_SERIAL](#declare_serial)|Enables serialization and access to run-time class information (must be used in the class declaration).|  \n|[IMPLEMENT_DYNAMIC](#implement_dynamic)|Enables access to run-time class information (must be used in the class implementation).|  \n|[IMPLEMENT_DYNCREATE](#implement_dyncreate)|Enables dynamic creation and access to run-time information (must be used in the class implementation).|  \n|[IMPLEMENT_SERIAL](#implement_serial)|Permits serialization and access to run-time class information (must be used in the class implementation).|  \n|[RUNTIME_CLASS](#runtime_class)|Returns the `CRuntimeClass` structure that corresponds to the named class.|  \n  \n OLE frequently requires the dynamic creation of objects at run time. For example, an OLE server application must be able to create OLE items dynamically in response to a request from a client. Similarly, an automation server must be able to create items in response to requests from automation clients.  \n  \n The Microsoft Foundation Class Library provides two macros specific to OLE.  \n  \n### Dynamic Creation of OLE Objects  \n  \n|||  \n|-|-|  \n|[DECLARE_OLECREATE](#declare_olecreate)|Enables objects to be created through OLE automation.|  \n|[IMPLEMENT_OLECREATE](#implement_olecreate)|Enables objects to be created by the OLE system.|  \n  \n##  <a name=\"declare_dynamic\"></a>  DECLARE_DYNAMIC  \n Adds the ability to access run-time information about an object's class when deriving a class from `CObject`.  \n  \n```\nDECLARE_DYNAMIC(class_name) \n```  \n  \n### Parameters  \n *class_name*  \n The actual name of the class.  \n  \n### Remarks  \n Add the `DECLARE_DYNAMIC` macro to the header (.h) module for the class, then include that module in all .cpp modules that need access to objects of this class.  \n  \n If you use the **DECLARE**_ **DYNAMIC** and `IMPLEMENT_DYNAMIC` macros as described, you can then use the `RUNTIME_CLASS` macro and the `CObject::IsKindOf` function to determine the class of your objects at run time.  \n  \n If `DECLARE_DYNAMIC` is included in the class declaration, then `IMPLEMENT_DYNAMIC` must be included in the class implementation.  \n  \n For more information on the `DECLARE_DYNAMIC` macro, see [CObject Class Topics](../../mfc/using-cobject.md).  \n  \n### Example  \n See the example for [IMPLEMENT_DYNAMIC](#implement_dynamic).  \n  \n##  <a name=\"declare_dyncreate\"></a>  DECLARE_DYNCREATE  \n Enables objects of `CObject`-derived classes to be created dynamically at run time.  \n  \n```\nDECLARE_DYNCREATE(class_name)   \n```  \n  \n### Parameters  \n *class_name*  \n The actual name of the class.  \n  \n### Remarks  \n The framework uses this ability to create new objects dynamically. For example, the new view created when you open a new document. Document, view, and frame classes should support dynamic creation because the framework needs to create them dynamically.  \n  \n Add the `DECLARE_DYNCREATE` macro in the .h module for the class, then include that module in all .cpp modules that need access to objects of this class.  \n  \n If `DECLARE_DYNCREATE` is included in the class declaration, then `IMPLEMENT_DYNCREATE` must be included in the class implementation.  \n  \n For more information on the `DECLARE_DYNCREATE` macro, see [CObject Class Topics](../../mfc/using-cobject.md).  \n  \n> [!NOTE]\n>  The `DECLARE_DYNCREATE` macro includes all the functionality of `DECLARE_DYNAMIC`.  \n  \n### Example  \n See the example for [IMPLEMENT_DYNCREATE](#implement_dyncreate).  \n  \n##  <a name=\"declare_serial\"></a>  DECLARE_SERIAL  \n Generates the C++ header code necessary for a `CObject`-derived class that can be serialized.  \n  \n```\nDECLARE_SERIAL(class_name)   \n```  \n  \n### Parameters  \n *class_name*  \n The actual name of the class.  \n  \n### Remarks  \n Serialization is the process of writing or reading the contents of an object to and from a file.  \n  \n Use the `DECLARE_SERIAL` macro in an .h module, and then include that module in all .cpp modules that need access to objects of this class.  \n  \n If `DECLARE_SERIAL` is included in the class declaration, then `IMPLEMENT_SERIAL` must be included in the class implementation.  \n  \n The `DECLARE_SERIAL` macro includes all the functionality of `DECLARE_DYNAMIC` and `DECLARE_DYNCREATE`.  \n  \n You can use the **AFX_API** macro to automatically export the `CArchive` extraction operator for classes that use the `DECLARE_SERIAL` and `IMPLEMENT_SERIAL` macros. Bracket the class declarations (located in the .h file) with the following code:  \n  \n [!code-cpp[NVC_MFCCObjectSample#20](../../mfc/codesnippet/cpp/run-time-object-model-services_1.h)]  \n  \n For more information on the `DECLARE_SERIAL` macro, see [CObject Class Topics](../../mfc/using-cobject.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCCObjectSample#21](../../mfc/codesnippet/cpp/run-time-object-model-services_2.h)]  \n  \n##  <a name=\"implement_dynamic\"></a>  IMPLEMENT_DYNAMIC  \n Generates the C++ code necessary for a dynamic `CObject`-derived class with run-time access to the class name and position within the hierarchy.  \n  \n```\nIMPLEMENT_DYNAMIC(class_name, base_class_name)  \n```  \n  \n### Parameters  \n *class_name*  \n The actual name of the class.  \n  \n `base_class_name`  \n The name of the base class.  \n  \n### Remarks  \n Use the `IMPLEMENT_DYNAMIC` macro in a .cpp module, and then link the resulting object code only once.  \n  \n For more information, see [CObject Class Topics](../../mfc/using-cobject.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCCObjectSample#2](../../mfc/codesnippet/cpp/run-time-object-model-services_3.h)]  \n  \n [!code-cpp[NVC_MFCCObjectSample#3](../../mfc/codesnippet/cpp/run-time-object-model-services_4.cpp)]  \n  \n##  <a name=\"implement_dyncreate\"></a>  IMPLEMENT_DYNCREATE  \n Enables objects of `CObject`-derived classes to be created dynamically at run time when used with the `DECLARE_DYNCREATE` macro.  \n  \n```\nIMPLEMENT_DYNCREATE(class_name, base_class_name)   \n```  \n  \n### Parameters  \n *class_name*  \n The actual name of the class.  \n  \n `base_class_name`  \n The actual name of the base class.  \n  \n### Remarks  \n The framework uses this ability to create new objects dynamically, for example, when it reads an object from disk during serialization. Add the `IMPLEMENT_DYNCREATE` macro in the class implementation file. For more information, see [CObject Class Topics](../../mfc/using-cobject.md).  \n  \n If you use the `DECLARE_DYNCREATE` and `IMPLEMENT_DYNCREATE` macros, you can then use the `RUNTIME_CLASS` macro and the `CObject::IsKindOf` member function to determine the class of your objects at run time.  \n  \n If `DECLARE_DYNCREATE` is included in the class declaration, then `IMPLEMENT_DYNCREATE` must be included in the class implementation.  \n  \n Note that this macro definition will invoke the default constructor for your class. If a non-trivial constructor is explicitly implemented by the class, it must also explicitly implement the default constructor as well. The default constructor can be added to the class's **private** or **protected** member sections to prevent it from being called from outside the class implementation.  \n  \n### Example  \n [!code-cpp[NVC_MFCCObjectSample#22](../../mfc/codesnippet/cpp/run-time-object-model-services_5.h)]  \n  \n [!code-cpp[NVC_MFCCObjectSample#23](../../mfc/codesnippet/cpp/run-time-object-model-services_6.cpp)]  \n  \n##  <a name=\"implement_serial\"></a>  IMPLEMENT_SERIAL  \n Generates the C++ code necessary for a dynamic `CObject`-derived class with run-time access to the class name and position within the hierarchy.  \n  \n```\nIMPLEMENT_SERIAL(class_name, base_class_name, wSchema)  \n```  \n  \n### Parameters  \n *class_name*  \n The actual name of the class.  \n  \n `base_class_name`  \n The name of the base class.  \n  \n *wSchema*  \n A **UINT** \"version number\" that will be encoded in the archive to enable a deserializing program to identify and handle data created by earlier program versions. The class schema number must not be â€“1.  \n  \n### Remarks  \n Use the `IMPLEMENT_SERIAL` macro in a .cpp module; then link the resulting object code only once.  \n  \n You can use the **AFX_API** macro to automatically export the `CArchive` extraction operator for classes that use the `DECLARE_SERIAL` and `IMPLEMENT_SERIAL` macros. Bracket the class declarations (located in the .h file) with the following code:  \n  \n [!code-cpp[NVC_MFCCObjectSample#20](../../mfc/codesnippet/cpp/run-time-object-model-services_1.h)]  \n  \n For more information, see the [CObject Class Topics](../../mfc/using-cobject.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCCObjectSample#24](../../mfc/codesnippet/cpp/run-time-object-model-services_7.cpp)]  \n  \n##  <a name=\"runtime_class\"></a>  RUNTIME_CLASS  \n Gets the run-time class structure from the name of a C++ class.  \n  \n```\nRUNTIME_CLASS(class_name)  \n```  \n  \n### Parameters  \n *class_name*  \n The actual name of the class (not enclosed in quotation marks).  \n  \n### Remarks  \n `RUNTIME_CLASS` returns a pointer to a [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) structure for the class specified by *class_name*. Only `CObject`-derived classes declared with `DECLARE_DYNAMIC`, `DECLARE_DYNCREATE`, or `DECLARE_SERIAL` will return pointers to a `CRuntimeClass` structure.  \n  \n For more information, see [CObject Class Topics](../../mfc/using-cobject.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCCObjectSample#25](../../mfc/codesnippet/cpp/run-time-object-model-services_8.cpp)]  \n  \n##  <a name=\"declare_olecreate\"></a>  DECLARE_OLECREATE  \n Enables objects of `CCmdTarget`-derived classes to be created through OLE automation.  \n  \n```\nDECLARE_OLECREATE(class_name) \n```  \n  \n### Parameters  \n *class_name*  \n The actual name of the class.  \n  \n### Remarks  \n This macro enables other OLE-enabled applications to create objects of this type.  \n  \n Add the `DECLARE_OLECREATE` macro in the .h module for the class, and then include that module in all .cpp modules that need access to objects of this class.  \n  \n If `DECLARE_OLECREATE` is included in the class declaration, then `IMPLEMENT_OLECREATE` must be included in the class implementation. A class declaration using `DECLARE_OLECREATE` must also use `DECLARE_DYNCREATE` or `DECLARE_SERIAL`.  \n  \n##  <a name=\"implement_olecreate\"></a>  IMPLEMENT_OLECREATE  \n Either this macro or [IMPLEMENT_OLECREATE_FLAGS](http://msdn.microsoft.com/library/d1589f6a-5a69-4742-b07c-4c621cfd040d) must appear in the implementation file for any class that uses `DECLARE_OLECREATE`.  \n  \n```\nIMPLEMENT_OLECREATE(class_name, external_name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)  \n```  \n  \n### Parameters  \n *class_name*  \n The actual name of the class.  \n  \n *external_name*  \n The object name exposed to other applications (enclosed in quotation marks).  \n  \n *l*, *w1*, *w2*, *b1*, *b2*, *b3*, *b4*, *b5*, *b6*, *b7*, *b8*  \n Components of the class's **CLSID**.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  If you use `IMPLEMENT_OLECREATE`, by default, you support only the single threading model. If you use `IMPLEMENT_OLECREATE_FLAGS`, you can specify which threading model your object supports by using the `nFlags` parameter.  \n  \n The external name is the identifier exposed to other applications. Client applications use the external name to request an object of this class from an automation server.  \n  \n The OLE class ID is a unique 128-bit identifier for the object. It consists of one **long**, two **WORD**s, and eight **BYTE**s, as represented by *l*, *w1*, *w2*, and *b1* through *b8* in the syntax description. The Application Wizard and code wizards create unique OLE class IDs for you as required.  \n  \n## See Also  \n [Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)\n"}