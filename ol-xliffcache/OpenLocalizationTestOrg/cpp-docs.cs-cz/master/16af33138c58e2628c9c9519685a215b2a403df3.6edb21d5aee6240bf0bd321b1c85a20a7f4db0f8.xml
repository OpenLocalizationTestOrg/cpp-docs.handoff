{"nodes":[{"pos":[12,34],"content":"__ud2 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__ud2 | Microsoft Docs","pos":[0,22]}]},{"content":"__ud2","pos":[632,637]},{"content":"Microsoft Specific","pos":[640,658]},{"content":"Generates an undefined instruction.","pos":[667,702]},{"content":"Syntax","pos":[711,717]},{"content":"Remarks","pos":[757,764]},{"content":"The processor raises an invalid opcode exception if you execute an undefined instruction.","pos":[768,857]},{"content":"The <ph id=\"ph1\">`__ud2`</ph> function is equivalent to the <ph id=\"ph2\">`UD2`</ph> machine instruction, and is available only in kernel mode.","pos":[864,970],"source":"The `__ud2` function is equivalent to the `UD2` machine instruction, and is available only in kernel mode."},{"content":"For more information, search for the document, \"Intel Architecture Software Developer's Manual, Volume 2: Instruction Set Reference,\" at the <bpt id=\"p1\">[</bpt>Intel Corporation<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=127)</ept> site.","pos":[971,1181],"source":" For more information, search for the document, \"Intel Architecture Software Developer's Manual, Volume 2: Instruction Set Reference,\" at the [Intel Corporation](http://go.microsoft.com/fwlink/?LinkId=127) site."},{"content":"Requirements","pos":[1190,1202]},{"content":"Intrinsic","pos":[1209,1218]},{"content":"Architecture","pos":[1219,1231]},{"pos":[1283,1287],"content":"x86,"},{"pos":[1359,1386],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"END Microsoft Specific","pos":[1395,1417]},{"content":"Example","pos":[1426,1433]},{"content":"The following example executes an undefined instruction, which raises an exception.","pos":[1437,1520]},{"content":"The exception handler then changes the return code from zero to one.","pos":[1521,1589]},{"content":"See Also","pos":[2349,2357]},{"content":"Compiler Intrinsics","pos":[2362,2381]}],"content":"---\ntitle: \"__ud2 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"__ud2\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"UD2 instruction\"\n  - \"__ud2 intrinsic\"\nms.assetid: 0831cd5a-8b65-402e-bb57-11e1d5d7ffd2\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# __ud2\n**Microsoft Specific**  \n  \n Generates an undefined instruction.  \n  \n## Syntax  \n  \n```  \nvoid __ud2();  \n```  \n  \n## Remarks  \n The processor raises an invalid opcode exception if you execute an undefined instruction.  \n  \n The `__ud2` function is equivalent to the `UD2` machine instruction, and is available only in kernel mode. For more information, search for the document, \"Intel Architecture Software Developer's Manual, Volume 2: Instruction Set Reference,\" at the [Intel Corporation](http://go.microsoft.com/fwlink/?LinkId=127) site.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`__ud2`|x86, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n  \n **Header file** \\<intrin.h>  \n  \n## END Microsoft Specific  \n  \n## Example  \n The following example executes an undefined instruction, which raises an exception. The exception handler then changes the return code from zero to one.  \n  \n```  \n// __ud2_intrinsic.cpp  \n#include <stdio.h>  \n#include <intrin.h>  \n#include <excpt.h>  \n// compile with /EHa  \n  \nint main() {  \n  \n// Initialize the return code to 0.  \n int ret = 0;  \n  \n// Attempt to execute an undefined instruction.  \n  printf(\"Before __ud2(). Return code = %d.\\n\", ret);  \n  __try {   \n  __ud2();   \n  }  \n  \n// Catch any exceptions and set the return code to 1.  \n  __except(EXCEPTION_EXECUTE_HANDLER){  \n  printf(\"  In the exception handler.\\n\");  \n  ret = 1;  \n  }  \n  \n// Report the value of the return code.   \n  printf(\"After __ud2().  Return code = %d.\\n\", ret);  \n  return ret;  \n}  \n```  \n  \n```Output  \nBefore __ud2(). Return code = 0.  \n  In the exception handler.  \nAfter __ud2().  Return code = 1.  \n```  \n  \n## See Also  \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}