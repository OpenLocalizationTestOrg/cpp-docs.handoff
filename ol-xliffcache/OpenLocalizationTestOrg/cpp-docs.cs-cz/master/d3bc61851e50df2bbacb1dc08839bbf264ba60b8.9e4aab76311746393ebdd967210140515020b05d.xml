{"nodes":[{"pos":[12,86],"content":"Walkthrough: Connecting Using Tasks and XML HTTP Requests | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Walkthrough: Connecting Using Tasks and XML HTTP Requests | Microsoft Docs","pos":[0,74]}]},{"content":"Walkthrough: Connecting Using Tasks and XML HTTP Requests","pos":[747,804]},{"content":"This example shows how to use the <bpt id=\"p1\">[</bpt>IXMLHTTPRequest2<ept id=\"p1\">](http://msdn.microsoft.com/en-us/bbc11c4a-aecf-4d6d-8275-3e852e309908)</ept> and <bpt id=\"p2\">[</bpt>IXMLHTTPRequest2Callback<ept id=\"p2\">](http://msdn.microsoft.com/en-us/aa4b3f4c-6e28-458b-be25-6cce8865fc71)</ept> interfaces together with tasks to send HTTP GET and POST requests to a web service in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app.","pos":[805,1197],"source":"This example shows how to use the [IXMLHTTPRequest2](http://msdn.microsoft.com/en-us/bbc11c4a-aecf-4d6d-8275-3e852e309908) and [IXMLHTTPRequest2Callback](http://msdn.microsoft.com/en-us/aa4b3f4c-6e28-458b-be25-6cce8865fc71) interfaces together with tasks to send HTTP GET and POST requests to a web service in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app."},{"content":"By combining <ph id=\"ph1\">`IXMLHTTPRequest2`</ph> together with tasks, you can write code that composes with other tasks.","pos":[1198,1301],"source":" By combining `IXMLHTTPRequest2` together with tasks, you can write code that composes with other tasks."},{"content":"For example, you can use the download task as part of a chain of tasks.","pos":[1302,1373]},{"content":"The download task can also respond when work is canceled.","pos":[1374,1431]},{"pos":[1439,1743],"content":"[!TIP]\n You can also use the C++ REST SDK to perform HTTP requests from a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app using C++ app or from a desktop C++ app. For more info, see [C++ REST SDK (Codename \"Casablanca\")](../../cloud/cpp-rest-sdk-codename-casablanca.md).","leadings":["","> "],"nodes":[{"content":" You can also use the C++ REST SDK to perform HTTP requests from a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app using C++ app or from a desktop C++ app. For more info, see [C++ REST SDK (Codename \"Casablanca\")](../../cloud/cpp-rest-sdk-codename-casablanca.md).","pos":[7,302],"nodes":[{"content":"You can also use the C++ REST SDK to perform HTTP requests from a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app using C++ app or from a desktop C++ app.","pos":[1,187],"source":" You can also use the C++ REST SDK to perform HTTP requests from a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app using C++ app or from a desktop C++ app."},{"content":"For more info, see <bpt id=\"p1\">[</bpt>C++ REST SDK (Codename \"Casablanca\")<ept id=\"p1\">](../../cloud/cpp-rest-sdk-codename-casablanca.md)</ept>.","pos":[188,295],"source":" For more info, see [C++ REST SDK (Codename \"Casablanca\")](../../cloud/cpp-rest-sdk-codename-casablanca.md)."}]}]},{"content":"For more information about tasks, see <bpt id=\"p1\">[</bpt>Task Parallelism<ept id=\"p1\">](../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.","pos":[1750,1870],"source":"For more information about tasks, see [Task Parallelism](../../parallel/concrt/task-parallelism-concurrency-runtime.md)."},{"content":"For more information about how to use tasks in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app, see <bpt id=\"p1\">[</bpt>Asynchronous programming in C++<ept id=\"p1\">](http://msdn.microsoft.com/en-us/512700b7-7863-44cc-93a2-366938052f31)</ept> and <bpt id=\"p2\">[</bpt>Creating Asynchronous Operations in C++ for Windows Store Apps<ept id=\"p2\">](../../parallel/concrt/creating-asynchronous-operations-in-cpp-for-windows-store-apps.md)</ept>.","pos":[1871,2267],"source":" For more information about how to use tasks in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app, see [Asynchronous programming in C++](http://msdn.microsoft.com/en-us/512700b7-7863-44cc-93a2-366938052f31) and [Creating Asynchronous Operations in C++ for Windows Store Apps](../../parallel/concrt/creating-asynchronous-operations-in-cpp-for-windows-store-apps.md)."},{"content":"This document first shows how to create <ph id=\"ph1\">`HttpRequest`</ph> and its supporting classes.","pos":[2274,2355],"source":"This document first shows how to create `HttpRequest` and its supporting classes."},{"content":"It then shows how to use this class from a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app that uses C++ and XAML.","pos":[2356,2502],"source":" It then shows how to use this class from a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app that uses C++ and XAML."},{"content":"For a more complete example that uses the <ph id=\"ph1\">`HttpReader`</ph> class described in this document, see <bpt id=\"p1\">[</bpt>Developing Bing Maps Trip Optimizer, a Windows Store app in JavaScript and C++<ept id=\"p1\">](http://msdn.microsoft.com/library/974cf025-de1a-4299-b7dd-c6c7bf0e5d30)</ept>.","pos":[2509,2755],"source":"For a more complete example that uses the `HttpReader` class described in this document, see [Developing Bing Maps Trip Optimizer, a Windows Store app in JavaScript and C++](http://msdn.microsoft.com/library/974cf025-de1a-4299-b7dd-c6c7bf0e5d30)."},{"content":"For another example that uses <ph id=\"ph1\">`IXMLHTTPRequest2`</ph> but does not use tasks, see <bpt id=\"p1\">[</bpt>Quickstart: Connecting using XML HTTP Request (IXMLHTTPRequest2)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/cc7aed53-b2c5-4d83-b85d-cff2f5ba7b35)</ept>.","pos":[2756,2970],"source":" For another example that uses `IXMLHTTPRequest2` but does not use tasks, see [Quickstart: Connecting using XML HTTP Request (IXMLHTTPRequest2)](http://msdn.microsoft.com/en-us/cc7aed53-b2c5-4d83-b85d-cff2f5ba7b35)."},{"pos":[2978,3226],"content":"[!TIP]\n `IXMLHTTPRequest2` and `IXMLHTTPRequest2Callback` are the interfaces that we recommend for use in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app. You can also adapt this example for use in a desktop app.","leadings":["","> "],"nodes":[{"content":" and `IXMLHTTPRequest2Callback` are the interfaces that we recommend for use in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app. You can also adapt this example for use in a desktop app.","pos":[26,246],"nodes":[{"content":"and <ph id=\"ph1\">`IXMLHTTPRequest2Callback`</ph> are the interfaces that we recommend for use in a <ph id=\"ph2\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app.","pos":[1,162],"source":" and `IXMLHTTPRequest2Callback` are the interfaces that we recommend for use in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app."},{"content":"You can also adapt this example for use in a desktop app.","pos":[163,220]}]}]},{"content":"Prerequisites","pos":[3235,3248]},{"content":"Defining the HttpRequest, HttpRequestBuffersCallback, and HttpRequestStringCallback Classes","pos":[3257,3348]},{"content":"When you use the <ph id=\"ph1\">`IXMLHTTPRequest2`</ph> interface to create web requests over HTTP, you implement the <ph id=\"ph2\">`IXMLHTTPRequest2Callback`</ph> interface to receive the server response and react to other events.","pos":[3352,3544],"source":"When you use the `IXMLHTTPRequest2` interface to create web requests over HTTP, you implement the `IXMLHTTPRequest2Callback` interface to receive the server response and react to other events."},{"content":"This example defines the <ph id=\"ph1\">`HttpRequest`</ph> class to create web requests, and the <ph id=\"ph2\">`HttpRequestBuffersCallback`</ph> and <ph id=\"ph3\">`HttpRequestStringCallback`</ph> classes to process responses.","pos":[3545,3712],"source":" This example defines the `HttpRequest` class to create web requests, and the `HttpRequestBuffersCallback` and `HttpRequestStringCallback` classes to process responses."},{"content":"The <ph id=\"ph1\">`HttpRequestBuffersCallback`</ph> and <ph id=\"ph2\">`HttpRequestStringCallback`</ph> classes support the <ph id=\"ph3\">`HttpRequest`</ph> class; you work only with the <ph id=\"ph4\">`HttpRequest`</ph> class from application code.","pos":[3713,3884],"source":" The `HttpRequestBuffersCallback` and `HttpRequestStringCallback` classes support the `HttpRequest` class; you work only with the `HttpRequest` class from application code."},{"content":"The <ph id=\"ph1\">`GetAsync`</ph>, <ph id=\"ph2\">`PostAsync`</ph> methods of the <ph id=\"ph3\">`HttpRequest`</ph> class enable you to start HTTP GET and POST operations, respectively.","pos":[3891,4017],"source":"The `GetAsync`, `PostAsync` methods of the `HttpRequest` class enable you to start HTTP GET and POST operations, respectively."},{"content":"These methods use the <ph id=\"ph1\">`HttpRequestStringCallback`</ph> class to read the server response as a string.","pos":[4018,4114],"source":" These methods use the `HttpRequestStringCallback` class to read the server response as a string."},{"content":"The <ph id=\"ph1\">`SendAsync`</ph> and <ph id=\"ph2\">`ReadAsync`</ph> methods enable you to stream large content in chunks.","pos":[4115,4200],"source":" The `SendAsync` and `ReadAsync` methods enable you to stream large content in chunks."},{"content":"These methods each return <bpt id=\"p1\">[</bpt>concurrency::task<ept id=\"p1\">](../../parallel/concrt/reference/task-class.md)</ept> to represent the operation.","pos":[4201,4321],"source":" These methods each return [concurrency::task](../../parallel/concrt/reference/task-class.md) to represent the operation."},{"content":"The <ph id=\"ph1\">`GetAsync`</ph> and <ph id=\"ph2\">`PostAsync`</ph> methods produce <ph id=\"ph3\">`task&lt;std::wstring&gt;`</ph> value, where the <ph id=\"ph4\">`wstring`</ph> part represents the server’s response.","pos":[4322,4455],"source":" The `GetAsync` and `PostAsync` methods produce `task<std::wstring>` value, where the `wstring` part represents the server’s response."},{"content":"The <ph id=\"ph1\">`SendAsync`</ph> and <ph id=\"ph2\">`ReadAsync`</ph> methods produce <ph id=\"ph3\">`task&lt;void&gt;`</ph> values; these tasks complete when the send and read operations complete.","pos":[4456,4589],"source":" The `SendAsync` and `ReadAsync` methods produce `task<void>` values; these tasks complete when the send and read operations complete."},{"content":"Because the <ph id=\"ph1\">`IXMLHTTPRequest2`</ph> interfaces act asynchronously, this example uses <bpt id=\"p1\">[</bpt>concurrency::task_completion_event<ept id=\"p1\">](../../parallel/concrt/reference/task-completion-event-class.md)</ept> to create a task that completes after the callback object completes or cancels the download operation.","pos":[4596,4879],"source":"Because the `IXMLHTTPRequest2` interfaces act asynchronously, this example uses [concurrency::task_completion_event](../../parallel/concrt/reference/task-completion-event-class.md) to create a task that completes after the callback object completes or cancels the download operation."},{"content":"The <ph id=\"ph1\">`HttpRequest`</ph> class creates a task-based continuation from this task to set the final result.","pos":[4880,4977],"source":" The `HttpRequest` class creates a task-based continuation from this task to set the final result."},{"content":"The <ph id=\"ph1\">`HttpRequest`</ph> class uses a task-based continuation to ensure that the continuation task runs even if the previous task produces an error or is canceled.","pos":[4978,5134],"source":" The `HttpRequest` class uses a task-based continuation to ensure that the continuation task runs even if the previous task produces an error or is canceled."},{"content":"For more information about task-based continuations, see <bpt id=\"p1\">[</bpt>Task Parallelism<ept id=\"p1\">](../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>","pos":[5135,5273],"source":" For more information about task-based continuations, see [Task Parallelism](../../parallel/concrt/task-parallelism-concurrency-runtime.md)"},{"content":"&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD To support cancellation, the <ph id=\"ph1\">`HttpRequest`</ph>, <ph id=\"ph2\">`HttpRequestBuffersCallback`</ph>, and <ph id=\"ph3\">`HttpRequestStringCallback`</ph> classes use cancellation tokens.","pos":[5280,5432],"source":"<<<<<<< HEAD\n To support cancellation, the `HttpRequest`, `HttpRequestBuffersCallback`, and `HttpRequestStringCallback` classes use cancellation tokens."},{"content":"The <ph id=\"ph1\">`HttpRequestBuffersCallback`</ph> and <ph id=\"ph2\">`HttpRequestStringCallback`</ph> classes use the <bpt id=\"p1\">[</bpt>concurrency::cancellation_token::register_callback<ept id=\"p1\">](reference/cancellation-token-class.md#register_callback)</ept> method to enable the task completion event to respond to cancellation.","pos":[5433,5694],"source":" The `HttpRequestBuffersCallback` and `HttpRequestStringCallback` classes use the [concurrency::cancellation_token::register_callback](reference/cancellation-token-class.md#register_callback) method to enable the task completion event to respond to cancellation."},{"content":"This cancellation callback aborts the download.","pos":[5695,5742]},{"content":"For more info about cancellation, see <bpt id=\"p1\">[</bpt>Cancellation<ept id=\"p1\">](../../parallel/concrt/exception-handling-in-the-concurrency-runtime.md#cancellation)</ept>.","pos":[5743,5881],"source":" For more info about cancellation, see [Cancellation](../../parallel/concrt/exception-handling-in-the-concurrency-runtime.md#cancellation)."},{"content":"To support cancellation, the <ph id=\"ph1\">`HttpRequest`</ph>, <ph id=\"ph2\">`HttpRequestBuffersCallback`</ph>, and <ph id=\"ph3\">`HttpRequestStringCallback`</ph> classes use cancellation tokens.","pos":[5893,6031],"source":" To support cancellation, the `HttpRequest`, `HttpRequestBuffersCallback`, and `HttpRequestStringCallback` classes use cancellation tokens."},{"content":"The <ph id=\"ph1\">`HttpRequestBuffersCallback`</ph> and <ph id=\"ph2\">`HttpRequestStringCallback`</ph> classes use the <bpt id=\"p1\">[</bpt>concurrency::cancellation_token::register_callback<ept id=\"p1\">](reference/cancellation-token-class.md#register_callback_method)</ept> method to enable the task completion event to respond to cancellation.","pos":[6032,6300],"source":" The `HttpRequestBuffersCallback` and `HttpRequestStringCallback` classes use the [concurrency::cancellation_token::register_callback](reference/cancellation-token-class.md#register_callback_method) method to enable the task completion event to respond to cancellation."},{"content":"This cancellation callback aborts the download.","pos":[6301,6348]},{"content":"For more info about cancellation, see <bpt id=\"p1\">[</bpt>Cancellation<ept id=\"p1\">](../../parallel/concrt/exception-handling-in-the-concurrency-runtime.md#cancellation)</ept>.","pos":[6349,6487],"source":" For more info about cancellation, see [Cancellation](../../parallel/concrt/exception-handling-in-the-concurrency-runtime.md#cancellation)."},{"content":"master","pos":[6498,6504]},{"content":"To Define the HttpRequest Class","pos":[6515,6546]},{"content":"Use the Visual C++ <bpt id=\"p1\">**</bpt>Blank App (XAML)<ept id=\"p1\">**</ept> template to create a blank XAML app project.","pos":[6556,6640],"source":"Use the Visual C++ **Blank App (XAML)** template to create a blank XAML app project."},{"content":"This example names the project <ph id=\"ph1\">`UsingIXMLHTTPRequest2`</ph>.","pos":[6641,6696],"source":" This example names the project `UsingIXMLHTTPRequest2`."},{"content":"Add to the project a header file that is named HttpRequest.h and a source file that is named HttpRequest.cpp.","pos":[6706,6815]},{"content":"In pch.h, add this code:","pos":[6825,6849]},{"pos":[6871,6891],"content":"concrt-using-ixhr2#1"},{"content":"In HttpRequest.h, add this code:","pos":[7003,7035]},{"pos":[7057,7077],"content":"concrt-using-ixhr2#2"},{"content":"In HttpRequest.cpp, add this code:","pos":[7189,7223]},{"pos":[7245,7265],"content":"concrt-using-ixhr2#3"},{"pos":[7378,7490],"content":"Using the HttpRequest Class in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> App","source":"Using the HttpRequest Class in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] App"},{"content":"This section demonstrates how to use the <ph id=\"ph1\">`HttpRequest`</ph> class in a <ph id=\"ph2\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app.","pos":[7494,7640],"source":"This section demonstrates how to use the `HttpRequest` class in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app."},{"content":"The app provides an input box that defines a URL resource, and button commands that perform GET and POST operations, and a button command that cancels the current operation.","pos":[7641,7814]},{"content":"To Use the HttpRequest Class","pos":[7825,7853]},{"pos":[7863,8018],"content":"In MainPage.xaml, define the <bpt id=\"p1\">[</bpt>StackPanel<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept> element as follows.","source":"In MainPage.xaml, define the [StackPanel](http://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx) element as follows."},{"pos":[8040,8061],"content":"concrt-using-ixhr2#A1"},{"pos":[8177,8227],"content":"In MainPage.xaml.h, add this <ph id=\"ph1\">`#include`</ph> directive:","source":"In MainPage.xaml.h, add this `#include` directive:"},{"pos":[8249,8270],"content":"concrt-using-ixhr2#A2"},{"pos":[8382,8463],"content":"In MainPage.xaml.h, add these <ph id=\"ph1\">`private`</ph> member variables to the <ph id=\"ph2\">`MainPage`</ph> class:","source":"In MainPage.xaml.h, add these `private` member variables to the `MainPage` class:"},{"pos":[8485,8506],"content":"concrt-using-ixhr2#A3"},{"pos":[8618,8688],"content":"In MainPage.xaml.h, declare the <ph id=\"ph1\">`private`</ph> method <ph id=\"ph2\">`ProcessHttpRequest`</ph>:","source":"In MainPage.xaml.h, declare the `private` method `ProcessHttpRequest`:"},{"pos":[8710,8731],"content":"concrt-using-ixhr2#A4"},{"pos":[8843,8894],"content":"In MainPage.xaml.cpp, add these <ph id=\"ph1\">`using`</ph> statements:","source":"In MainPage.xaml.cpp, add these `using` statements:"},{"pos":[8916,8937],"content":"concrt-using-ixhr2#A5"},{"pos":[9051,9183],"content":"In MainPage.xaml.cpp, implement the <ph id=\"ph1\">`GetButton_Click`</ph>, <ph id=\"ph2\">`PostButton_Click`</ph>, and <ph id=\"ph3\">`CancelButton_Click`</ph> methods of the <ph id=\"ph4\">`MainPage`</ph> class.","source":"In MainPage.xaml.cpp, implement the `GetButton_Click`, `PostButton_Click`, and `CancelButton_Click` methods of the `MainPage` class."},{"pos":[9205,9226],"content":"concrt-using-ixhr2#A6"},{"pos":[9358,9570],"content":"If your app does not require support for cancellation, pass <bpt id=\"p1\">[</bpt>concurrency::cancellation_token::none<ept id=\"p1\">](reference/cancellation-token-class.md#none)</ept> to the <ph id=\"ph1\">`HttpRequest::GetAsync`</ph> and <ph id=\"ph2\">`HttpRequest::PostAsync`</ph> methods.","source":"If your app does not require support for cancellation, pass [concurrency::cancellation_token::none](reference/cancellation-token-class.md#none) to the `HttpRequest::GetAsync` and `HttpRequest::PostAsync` methods."},{"pos":[9582,9656],"content":"In MainPage.xaml.cpp, implement the <ph id=\"ph1\">`MainPage::ProcessHttpRequest`</ph> method.","source":"In MainPage.xaml.cpp, implement the `MainPage::ProcessHttpRequest` method."},{"pos":[9678,9699],"content":"concrt-using-ixhr2#A7"},{"pos":[9814,9908],"content":"In the project properties, under <bpt id=\"p1\">**</bpt>Linker<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Input<ept id=\"p2\">**</ept>, specify <ph id=\"ph1\">`shcore.lib`</ph> and <ph id=\"ph2\">`msxml6.lib`</ph>.","source":"In the project properties, under **Linker**, **Input**, specify `shcore.lib` and `msxml6.lib`."},{"content":"Here is the running app:","pos":[9915,9939]},{"content":"The running Windows Store app","pos":[9948,9977]},{"content":"Next Steps","pos":[10058,10068]},{"content":"Concurrency Runtime Walkthroughs","pos":[10073,10105]},{"content":"See Also","pos":[10174,10182]},{"content":"Task Parallelism","pos":[10187,10203]},{"content":"Cancellation in the PPL","pos":[10273,10296]},{"content":"Asynchronous programming in C++","pos":[10331,10362]},{"content":"Creating Asynchronous Operations in C++ for Windows Store Apps","pos":[10439,10501]},{"content":"Quickstart: Connecting using XML HTTP Request (IXMLHTTPRequest2)","pos":[10597,10661]},{"content":"task Class (Concurrency Runtime)","pos":[10738,10770]},{"content":"task_completion_event Class","pos":[10824,10851]}],"content":"---\ntitle: \"Walkthrough: Connecting Using Tasks and XML HTTP Requests | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"connecting to web services, Windows Store apps [C++]\"\n  - \"IXMLHTTPRequest2 and tasks, example\"\n  - \"IXHR2 and tasks, example\"\nms.assetid: e8e12d46-604c-42a7-abfd-b1d1bb2ed6b3\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Walkthrough: Connecting Using Tasks and XML HTTP Requests\nThis example shows how to use the [IXMLHTTPRequest2](http://msdn.microsoft.com/en-us/bbc11c4a-aecf-4d6d-8275-3e852e309908) and [IXMLHTTPRequest2Callback](http://msdn.microsoft.com/en-us/aa4b3f4c-6e28-458b-be25-6cce8865fc71) interfaces together with tasks to send HTTP GET and POST requests to a web service in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app. By combining `IXMLHTTPRequest2` together with tasks, you can write code that composes with other tasks. For example, you can use the download task as part of a chain of tasks. The download task can also respond when work is canceled.  \n  \n> [!TIP]\n>  You can also use the C++ REST SDK to perform HTTP requests from a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app using C++ app or from a desktop C++ app. For more info, see [C++ REST SDK (Codename \"Casablanca\")](../../cloud/cpp-rest-sdk-codename-casablanca.md).  \n  \n For more information about tasks, see [Task Parallelism](../../parallel/concrt/task-parallelism-concurrency-runtime.md). For more information about how to use tasks in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app, see [Asynchronous programming in C++](http://msdn.microsoft.com/en-us/512700b7-7863-44cc-93a2-366938052f31) and [Creating Asynchronous Operations in C++ for Windows Store Apps](../../parallel/concrt/creating-asynchronous-operations-in-cpp-for-windows-store-apps.md).  \n  \n This document first shows how to create `HttpRequest` and its supporting classes. It then shows how to use this class from a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app that uses C++ and XAML.  \n  \n For a more complete example that uses the `HttpReader` class described in this document, see [Developing Bing Maps Trip Optimizer, a Windows Store app in JavaScript and C++](http://msdn.microsoft.com/library/974cf025-de1a-4299-b7dd-c6c7bf0e5d30). For another example that uses `IXMLHTTPRequest2` but does not use tasks, see [Quickstart: Connecting using XML HTTP Request (IXMLHTTPRequest2)](http://msdn.microsoft.com/en-us/cc7aed53-b2c5-4d83-b85d-cff2f5ba7b35).  \n  \n> [!TIP]\n>  `IXMLHTTPRequest2` and `IXMLHTTPRequest2Callback` are the interfaces that we recommend for use in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app. You can also adapt this example for use in a desktop app.  \n  \n## Prerequisites  \n  \n## Defining the HttpRequest, HttpRequestBuffersCallback, and HttpRequestStringCallback Classes  \n When you use the `IXMLHTTPRequest2` interface to create web requests over HTTP, you implement the `IXMLHTTPRequest2Callback` interface to receive the server response and react to other events. This example defines the `HttpRequest` class to create web requests, and the `HttpRequestBuffersCallback` and `HttpRequestStringCallback` classes to process responses. The `HttpRequestBuffersCallback` and `HttpRequestStringCallback` classes support the `HttpRequest` class; you work only with the `HttpRequest` class from application code.  \n  \n The `GetAsync`, `PostAsync` methods of the `HttpRequest` class enable you to start HTTP GET and POST operations, respectively. These methods use the `HttpRequestStringCallback` class to read the server response as a string. The `SendAsync` and `ReadAsync` methods enable you to stream large content in chunks. These methods each return [concurrency::task](../../parallel/concrt/reference/task-class.md) to represent the operation. The `GetAsync` and `PostAsync` methods produce `task<std::wstring>` value, where the `wstring` part represents the server’s response. The `SendAsync` and `ReadAsync` methods produce `task<void>` values; these tasks complete when the send and read operations complete.  \n  \n Because the `IXMLHTTPRequest2` interfaces act asynchronously, this example uses [concurrency::task_completion_event](../../parallel/concrt/reference/task-completion-event-class.md) to create a task that completes after the callback object completes or cancels the download operation. The `HttpRequest` class creates a task-based continuation from this task to set the final result. The `HttpRequest` class uses a task-based continuation to ensure that the continuation task runs even if the previous task produces an error or is canceled. For more information about task-based continuations, see [Task Parallelism](../../parallel/concrt/task-parallelism-concurrency-runtime.md)  \n  \n\n<<<<<<< HEAD\n To support cancellation, the `HttpRequest`, `HttpRequestBuffersCallback`, and `HttpRequestStringCallback` classes use cancellation tokens. The `HttpRequestBuffersCallback` and `HttpRequestStringCallback` classes use the [concurrency::cancellation_token::register_callback](reference/cancellation-token-class.md#register_callback) method to enable the task completion event to respond to cancellation. This cancellation callback aborts the download. For more info about cancellation, see [Cancellation](../../parallel/concrt/exception-handling-in-the-concurrency-runtime.md#cancellation).  \n=======\n To support cancellation, the `HttpRequest`, `HttpRequestBuffersCallback`, and `HttpRequestStringCallback` classes use cancellation tokens. The `HttpRequestBuffersCallback` and `HttpRequestStringCallback` classes use the [concurrency::cancellation_token::register_callback](reference/cancellation-token-class.md#register_callback_method) method to enable the task completion event to respond to cancellation. This cancellation callback aborts the download. For more info about cancellation, see [Cancellation](../../parallel/concrt/exception-handling-in-the-concurrency-runtime.md#cancellation).  \n>>>>>>> master\n\n\n  \n#### To Define the HttpRequest Class  \n  \n1.  Use the Visual C++ **Blank App (XAML)** template to create a blank XAML app project. This example names the project `UsingIXMLHTTPRequest2`.  \n  \n2.  Add to the project a header file that is named HttpRequest.h and a source file that is named HttpRequest.cpp.  \n  \n3.  In pch.h, add this code:  \n  \n     [!code-cpp[concrt-using-ixhr2#1](../../parallel/concrt/codesnippet/cpp/walkthrough-connecting-using-tasks-and-xml-http-requests_1.h)]  \n  \n4.  In HttpRequest.h, add this code:  \n  \n     [!code-cpp[concrt-using-ixhr2#2](../../parallel/concrt/codesnippet/cpp/walkthrough-connecting-using-tasks-and-xml-http-requests_2.h)]  \n  \n5.  In HttpRequest.cpp, add this code:  \n  \n     [!code-cpp[concrt-using-ixhr2#3](../../parallel/concrt/codesnippet/cpp/walkthrough-connecting-using-tasks-and-xml-http-requests_3.cpp)]  \n  \n## Using the HttpRequest Class in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] App  \n This section demonstrates how to use the `HttpRequest` class in a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app. The app provides an input box that defines a URL resource, and button commands that perform GET and POST operations, and a button command that cancels the current operation.  \n  \n#### To Use the HttpRequest Class  \n  \n1.  In MainPage.xaml, define the [StackPanel](http://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx) element as follows.  \n  \n     [!code-xml[concrt-using-ixhr2#A1](../../parallel/concrt/codesnippet/xaml/walkthrough-connecting-using-tasks-and-xml-http-requests_4.xaml)]  \n  \n2.  In MainPage.xaml.h, add this `#include` directive:  \n  \n     [!code-cpp[concrt-using-ixhr2#A2](../../parallel/concrt/codesnippet/cpp/walkthrough-connecting-using-tasks-and-xml-http-requests_5.h)]  \n  \n3.  In MainPage.xaml.h, add these `private` member variables to the `MainPage` class:  \n  \n     [!code-cpp[concrt-using-ixhr2#A3](../../parallel/concrt/codesnippet/cpp/walkthrough-connecting-using-tasks-and-xml-http-requests_6.h)]  \n  \n4.  In MainPage.xaml.h, declare the `private` method `ProcessHttpRequest`:  \n  \n     [!code-cpp[concrt-using-ixhr2#A4](../../parallel/concrt/codesnippet/cpp/walkthrough-connecting-using-tasks-and-xml-http-requests_7.h)]  \n  \n5.  In MainPage.xaml.cpp, add these `using` statements:  \n  \n     [!code-cpp[concrt-using-ixhr2#A5](../../parallel/concrt/codesnippet/cpp/walkthrough-connecting-using-tasks-and-xml-http-requests_8.cpp)]  \n  \n6.  In MainPage.xaml.cpp, implement the `GetButton_Click`, `PostButton_Click`, and `CancelButton_Click` methods of the `MainPage` class.  \n  \n     [!code-cpp[concrt-using-ixhr2#A6](../../parallel/concrt/codesnippet/cpp/walkthrough-connecting-using-tasks-and-xml-http-requests_9.cpp)]  \n  \n    > [!TIP]\n\n\n    >  If your app does not require support for cancellation, pass [concurrency::cancellation_token::none](reference/cancellation-token-class.md#none) to the `HttpRequest::GetAsync` and `HttpRequest::PostAsync` methods.  \n\n\n  \n7.  In MainPage.xaml.cpp, implement the `MainPage::ProcessHttpRequest` method.  \n  \n     [!code-cpp[concrt-using-ixhr2#A7](../../parallel/concrt/codesnippet/cpp/walkthrough-connecting-using-tasks-and-xml-http-requests_10.cpp)]  \n  \n8.  In the project properties, under **Linker**, **Input**, specify `shcore.lib` and `msxml6.lib`.  \n  \n Here is the running app:  \n  \n ![The running Windows Store app](../../parallel/concrt/media/concrt_usingixhr2.png \"concrt_usingixhr2\")  \n  \n## Next Steps  \n [Concurrency Runtime Walkthroughs](../../parallel/concrt/concurrency-runtime-walkthroughs.md)  \n  \n## See Also  \n [Task Parallelism](../../parallel/concrt/task-parallelism-concurrency-runtime.md)   \n [Cancellation in the PPL](cancellation-in-the-ppl.md)   \n [Asynchronous programming in C++](http://msdn.microsoft.com/en-us/512700b7-7863-44cc-93a2-366938052f31)   \n [Creating Asynchronous Operations in C++ for Windows Store Apps](../../parallel/concrt/creating-asynchronous-operations-in-cpp-for-windows-store-apps.md)   \n [Quickstart: Connecting using XML HTTP Request (IXMLHTTPRequest2)](http://msdn.microsoft.com/en-us/cc7aed53-b2c5-4d83-b85d-cff2f5ba7b35)   \n [task Class (Concurrency Runtime)](../../parallel/concrt/reference/task-class.md)   \n [task_completion_event Class](../../parallel/concrt/reference/task-completion-event-class.md)\n"}