{"nodes":[{"pos":[12,49],"content":"Compiler Error C2552 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C2552 | Microsoft Docs","pos":[0,37]}]},{"content":"Compiler Error C2552","pos":[598,618]},{"content":"'identifier' : non-aggregates cannot be initialized with initializer list","pos":[619,692]},{"content":"The aggregate identifier was incorrectly initialized.","pos":[699,752]},{"pos":[759,837],"content":"<bpt id=\"p1\">[</bpt>Aggregates<ept id=\"p1\">](../../c-language/initializing-aggregate-types.md)</ept> are defined as:","source":"[Aggregates](../../c-language/initializing-aggregate-types.md) are defined as:"},{"content":"Arrays","pos":[847,853]},{"content":"Classes, structures, and unions that do not have:","pos":[863,912]},{"content":"Constructors","pos":[926,938]},{"content":"Private or protected members","pos":[952,980]},{"content":"Base classes","pos":[994,1006]},{"content":"Virtual functions","pos":[1020,1037]},{"content":"In addition, Visual C++ does not allow data types in an aggregate that contains constructors.","pos":[1044,1137]},{"content":"The following represent the reasons C2552 may fire when an aggregate initialization is attempted on a type:","pos":[1144,1251]},{"content":"The type has one or more user-defined constructors.","pos":[1261,1312]},{"content":"The type has one ore more non-static, private data members.","pos":[1322,1381]},{"content":"The type has one or more virtual functions.","pos":[1391,1434]},{"content":"The type has a base class.","pos":[1444,1470]},{"content":"The type is a ref class or CLR interface.","pos":[1480,1521]},{"content":"The type has a non-fixed dimension array (zero-array) whose elements have destructors.","pos":[1531,1617]},{"content":"The following sample generates C2552:","pos":[1624,1661]}],"content":"---\ntitle: \"Compiler Error C2552 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C2552\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C2552\"\nms.assetid: 0e0ab759-788a-4faf-9337-80d4b9e2e8c9\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error C2552\n'identifier' : non-aggregates cannot be initialized with initializer list  \n  \n The aggregate identifier was incorrectly initialized.  \n  \n [Aggregates](../../c-language/initializing-aggregate-types.md) are defined as:  \n  \n-   Arrays  \n  \n-   Classes, structures, and unions that do not have:  \n  \n    -   Constructors  \n  \n    -   Private or protected members  \n  \n    -   Base classes  \n  \n    -   Virtual functions  \n  \n In addition, Visual C++ does not allow data types in an aggregate that contains constructors.  \n  \n The following represent the reasons C2552 may fire when an aggregate initialization is attempted on a type:  \n  \n-   The type has one or more user-defined constructors.  \n  \n-   The type has one ore more non-static, private data members.  \n  \n-   The type has one or more virtual functions.  \n  \n-   The type has a base class.  \n  \n-   The type is a ref class or CLR interface.  \n  \n-   The type has a non-fixed dimension array (zero-array) whose elements have destructors.  \n  \n The following sample generates C2552:  \n  \n```  \n// C2552.cpp  \n// compile with: /clr  \n#include <string>  \nusing namespace std;  \n  \nstruct Pair_Incorrect {  \nprivate:  \n   string m_name;  \n   double m_val;  \n};  \n  \nstruct Pair_Correct1 {  \npublic:  \n   Pair_Correct1(string name, double val)  \n      : m_name(name), m_val(val) {}  \n  \nprivate:  \n   string m_name;  \n   double m_val;  \n};  \n  \nstruct Pair_Correct2 {  \npublic:  \n   string m_name;  \n   double m_val;  \n};  \n  \nint main() {  \n   // To fix, add a constructor to this class and use it for   \n   // initializing the data members, see Pair_Correct1 (below)  \n   // or  \n   // Do not have any private or protected non-static data members,   \n   // see Pair_Correct2 (below).  Pair_Correct2 is not recommended in   \n   // case your object model requires some non-static data members to   \n   // be private or protected  \n  \n   string name(\"John\");  \n   Pair_Incorrect pair1 = { name, 0.0 };   // C2552  \n  \n   // initialize a CLR immutable value type that has a constructor  \n   System::DateTime dt = {2001, 4, 12, 22, 16, 49, 844};   // C2552   \n  \n   Pair_Correct1 pair2( name, 0.0 );  \n   Pair_Correct1 pair3 = Pair_Correct1( name, 0.0 );  \n   Pair_Correct2 pair4 = { name, 0.0 };  \n   System::DateTime dt2(2001, 4, 12, 22, 16, 49, 844);  \n}  \n```"}