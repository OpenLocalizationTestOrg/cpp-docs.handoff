{"nodes":[{"pos":[12,49],"content":"is_convertible Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_convertible Class | Microsoft Docs","pos":[0,37]}]},{"content":"is_convertible Class","pos":[790,810]},{"content":"Tests if one type is convertible to another.","pos":[811,855]},{"content":"Syntax","pos":[864,870]},{"content":"Parameters","pos":[955,965]},{"content":"The type to convert from.","pos":[979,1004]},{"content":"The type to convert to.","pos":[1019,1042]},{"content":"Remarks","pos":[1051,1058]},{"pos":[1062,1199],"content":"An instance of the type predicate holds true if the expression <ph id=\"ph1\">`To to = from;`</ph>, where <ph id=\"ph2\">`from`</ph> is an object of type <ph id=\"ph3\">`From`</ph>, is well-formed.","source":"An instance of the type predicate holds true if the expression `To to = from;`, where `from` is an object of type `From`, is well-formed."},{"content":"Example","pos":[1208,1215]},{"content":"Requirements","pos":[2047,2059]},{"pos":[2063,2088],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[2095,2113],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[2122,2130]},{"content":"&lt;type_traits&gt;","pos":[2135,2148],"source":"<type_traits>"},{"content":"is_base_of Class","pos":[2191,2207]}],"content":"---\ntitle: \"is_convertible Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"is_convertible\"\n  - \"std.tr1.is_convertible\"\n  - \"std::tr1::is_convertible\"\n  - \"std.is_convertible\"\n  - \"std::is_convertible\"\n  - \"type_traits/std::is_convertible\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"is_convertible class [TR1]\"\n  - \"is_convertible\"\nms.assetid: 75614008-1894-42ea-bd57-974399628536\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_convertible Class\nTests if one type is convertible to another.  \n  \n## Syntax  \n  \n```  \ntemplate <class From, class To>  \nstruct is_convertible;  \n```  \n  \n#### Parameters  \n `From`  \n The type to convert from.  \n  \n `Ty`  \n The type to convert to.  \n  \n## Remarks  \n An instance of the type predicate holds true if the expression `To to = from;`, where `from` is an object of type `From`, is well-formed.  \n  \n## Example  \n  \n```cpp  \n// std_tr1__type_traits__is_convertible.cpp   \n// compile with: /EHsc   \n#include <type_traits>   \n#include <iostream>   \n  \nstruct trivial   \n    {   \n    int val;   \n    };   \n  \nint main()   \n    {   \n    std::cout << \"is_convertible<trivial, int> == \" << std::boolalpha   \n        << std::is_convertible<trivial, int>::value << std::endl;   \n    std::cout << \"is_convertible<trivial, trivial> == \" << std::boolalpha   \n        << std::is_convertible<trivial, trivial>::value << std::endl;   \n    std::cout << \"is_convertible<char, int> == \" << std::boolalpha   \n        << std::is_convertible<char, int>::value << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nis_convertible<trivial, int> == false  \nis_convertible<trivial, trivial> == true  \nis_convertible<char, int> == true  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)   \n [is_base_of Class](../standard-library/is-base-of-class.md)\n"}