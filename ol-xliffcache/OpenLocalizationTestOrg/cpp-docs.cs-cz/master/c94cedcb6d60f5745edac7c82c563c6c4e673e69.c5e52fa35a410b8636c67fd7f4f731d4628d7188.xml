{"nodes":[{"pos":[12,49],"content":"IEnumOnSTLImpl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IEnumOnSTLImpl Class | Microsoft Docs","pos":[0,37]}]},{"pos":[667,687],"content":"IEnumOnSTLImpl Class","linkify":"IEnumOnSTLImpl Class","nodes":[{"content":"IEnumOnSTLImpl Class","pos":[0,20]}]},{"content":"This class defines an enumerator interface based on an STL collection.","pos":[688,758]},{"pos":[767,773],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[928,938],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A COM enumerator ( <bpt id=\"p1\">[</bpt>IEnumXXXX<ept id=\"p1\">](https://msdn.microsoft.com/library/ms680089.aspx)</ept>) interface.","pos":[952,1044],"source":" A COM enumerator ( [IEnumXXXX](https://msdn.microsoft.com/library/ms680089.aspx)) interface."},{"content":"A pointer to the interface ID of the enumerator interface.","pos":[1061,1119]},{"content":"The type of item exposed by the enumerator interface.","pos":[1133,1186]},{"content":"A <bpt id=\"p1\">[</bpt>copy policy class<ept id=\"p1\">](../../atl/atl-copy-policy-classes.md)</ept>.","pos":[1203,1263],"source":" A [copy policy class](../../atl/atl-copy-policy-classes.md)."},{"content":"An STL container class.","pos":[1284,1307]},{"pos":[1316,1323],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1333,1347],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1354,1358]},{"content":"Description","pos":[1359,1370]},{"pos":[1408,1455],"content":"<bpt id=\"p1\">[</bpt>IEnumOnSTLImpl::Clone<ept id=\"p1\">](#ienumonstlimpl__clone)</ept>","source":"[IEnumOnSTLImpl::Clone](#ienumonstlimpl__clone)"},{"pos":[1456,1547],"content":"The implementation of <bpt id=\"p1\">[</bpt>IEnumXXXX::Clone<ept id=\"p1\">](https://msdn.microsoft.com/library/ms690336.aspx)</ept>.","source":"The implementation of [IEnumXXXX::Clone](https://msdn.microsoft.com/library/ms690336.aspx)."},{"pos":[1552,1597],"content":"<bpt id=\"p1\">[</bpt>IEnumOnSTLImpl::Init<ept id=\"p1\">](#ienumonstlimpl__init)</ept>","source":"[IEnumOnSTLImpl::Init](#ienumonstlimpl__init)"},{"content":"Initializes the enumerator.","pos":[1598,1625]},{"pos":[1630,1675],"content":"<bpt id=\"p1\">[</bpt>IEnumOnSTLImpl::Next<ept id=\"p1\">](#ienumonstlimpl__next)</ept>","source":"[IEnumOnSTLImpl::Next](#ienumonstlimpl__next)"},{"pos":[1676,1766],"content":"The implementation of <bpt id=\"p1\">[</bpt>IEnumXXXX::Next<ept id=\"p1\">](https://msdn.microsoft.com/library/ms695273.aspx)</ept>.","source":"The implementation of [IEnumXXXX::Next](https://msdn.microsoft.com/library/ms695273.aspx)."},{"pos":[1771,1818],"content":"<bpt id=\"p1\">[</bpt>IEnumOnSTLImpl::Reset<ept id=\"p1\">](#ienumonstlimpl__reset)</ept>","source":"[IEnumOnSTLImpl::Reset](#ienumonstlimpl__reset)"},{"pos":[1819,1910],"content":"The implementation of <bpt id=\"p1\">[</bpt>IEnumXXXX::Reset<ept id=\"p1\">](https://msdn.microsoft.com/library/ms693414.aspx)</ept>.","source":"The implementation of [IEnumXXXX::Reset](https://msdn.microsoft.com/library/ms693414.aspx)."},{"pos":[1915,1960],"content":"<bpt id=\"p1\">[</bpt>IEnumOnSTLImpl::Skip<ept id=\"p1\">](#ienumonstlimpl__skip)</ept>","source":"[IEnumOnSTLImpl::Skip](#ienumonstlimpl__skip)"},{"pos":[1961,2051],"content":"The implementation of <bpt id=\"p1\">[</bpt>IEnumXXXX::Skip<ept id=\"p1\">](https://msdn.microsoft.com/library/ms690392.aspx)</ept>.","source":"The implementation of [IEnumXXXX::Skip](https://msdn.microsoft.com/library/ms690392.aspx)."},{"pos":[2062,2081],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[2088,2092]},{"content":"Description","pos":[2093,2104]},{"pos":[2142,2191],"content":"<bpt id=\"p1\">[</bpt>IEnumOnSTLImpl::m_iter<ept id=\"p1\">](#ienumonstlimpl__m_iter)</ept>","source":"[IEnumOnSTLImpl::m_iter](#ienumonstlimpl__m_iter)"},{"content":"The iterator that represents the enumerator's current position within the collection.","pos":[2192,2277]},{"pos":[2282,2345],"content":"<bpt id=\"p1\">[</bpt>IEnumOnSTLImpl::m_pcollection<ept id=\"p1\">](#ienumonstlimpl__m_pcollection)</ept>","source":"[IEnumOnSTLImpl::m_pcollection](#ienumonstlimpl__m_pcollection)"},{"content":"A pointer to the STL container holding the items to be enumerated.","pos":[2346,2412]},{"pos":[2417,2468],"content":"<bpt id=\"p1\">[</bpt>IEnumOnSTLImpl::m_spUnk<ept id=\"p1\">](#ienumonstlimpl__m_spunk)</ept>","source":"[IEnumOnSTLImpl::m_spUnk](#ienumonstlimpl__m_spunk)"},{"pos":[2469,2533],"content":"The <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer of the object supplying the collection.","source":"The **IUnknown** pointer of the object supplying the collection."},{"pos":[2543,2550],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`IEnumOnSTLImpl`</ph> provides the implementation for a COM enumerator interface where the items being enumerated are stored in an STL-compatible container.","pos":[2554,2705],"source":"`IEnumOnSTLImpl` provides the implementation for a COM enumerator interface where the items being enumerated are stored in an STL-compatible container."},{"content":"This class is analogous to the <bpt id=\"p1\">[</bpt>CComEnumImpl<ept id=\"p1\">](../../atl/reference/ccomenumimpl-class.md)</ept> class, which provides an implementation for an enumerator interface based on an array.","pos":[2706,2881],"source":" This class is analogous to the [CComEnumImpl](../../atl/reference/ccomenumimpl-class.md) class, which provides an implementation for an enumerator interface based on an array."},{"pos":[2889,3066],"content":"[!NOTE]\n See [CComEnumImpl::Init](../../atl/reference/ccomenumimpl-class.md#ccomenumimpl__init) for details on further differences between `CComEnumImpl` and `IEnumOnSTLImpl`.","leadings":["","> "],"nodes":[{"content":"See <bpt id=\"p1\">[</bpt>CComEnumImpl::Init<ept id=\"p1\">](../../atl/reference/ccomenumimpl-class.md#ccomenumimpl__init)</ept> for details on further differences between <ph id=\"ph1\">`CComEnumImpl`</ph> and <ph id=\"ph2\">`IEnumOnSTLImpl`</ph>.","pos":[9,175],"source":" See [CComEnumImpl::Init](../../atl/reference/ccomenumimpl-class.md#ccomenumimpl__init) for details on further differences between `CComEnumImpl` and `IEnumOnSTLImpl`."}]},{"content":"Typically, you will <bpt id=\"p1\">*</bpt>not<ept id=\"p1\">*</ept> need to create your own enumerator class by deriving from this interface implementation.","pos":[3073,3187],"source":"Typically, you will *not* need to create your own enumerator class by deriving from this interface implementation."},{"content":"If you want to use an ATL-supplied enumerator based on an STL container, it is more common to create an instance of <bpt id=\"p1\">[</bpt>CComEnumOnSTL<ept id=\"p1\">](../../atl/reference/ccomenumonstl-class.md)</ept>, or to create a collection class that returns an enumerator by deriving from <bpt id=\"p2\">[</bpt>ICollectionOnSTLImpl<ept id=\"p2\">](../../atl/reference/icollectiononstlimpl-class.md)</ept>.","pos":[3188,3515],"source":" If you want to use an ATL-supplied enumerator based on an STL container, it is more common to create an instance of [CComEnumOnSTL](../../atl/reference/ccomenumonstl-class.md), or to create a collection class that returns an enumerator by deriving from [ICollectionOnSTLImpl](../../atl/reference/icollectiononstlimpl-class.md)."},{"content":"However, if you do need to provide a custom enumerator (for example, one that exposes interfaces in addition to the enumerator interface), you can derive from this class.","pos":[3522,3692]},{"content":"In this situation it is likely that you'll need to override the <bpt id=\"p1\">[</bpt>Clone<ept id=\"p1\">](#ienumonstlimpl__clone)</ept> method to provide your own implementation.","pos":[3693,3831],"source":" In this situation it is likely that you'll need to override the [Clone](#ienumonstlimpl__clone) method to provide your own implementation."},{"pos":[3840,3861],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3903,3915],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3919,3939],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcom.h","source":"**Header:** atlcom.h"},{"pos":[3949,4006],"content":"<bpt id=\"p1\">&lt;a name=\"ienumonstlimpl__init\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IEnumOnSTLImpl::Init","linkify":"<a name=\"ienumonstlimpl__init\"></a>  IEnumOnSTLImpl::Init","source":"<a name=\"ienumonstlimpl__init\"></a>  IEnumOnSTLImpl::Init"},{"content":"Initializes the enumerator.","pos":[4010,4037]},{"pos":[4131,4141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer of an object that must be kept alive during the lifetime of the enumerator.","pos":[4165,4270],"source":" [in] The **IUnknown** pointer of an object that must be kept alive during the lifetime of the enumerator."},{"content":"Pass <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no such object exists.","pos":[4271,4310],"source":" Pass **NULL** if no such object exists."},{"content":"A reference to the STL container that holds the items to be enumerated.","pos":[4333,4404]},{"pos":[4414,4426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4430,4457],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[4467,4474],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4478,4700],"content":"If you pass <ph id=\"ph1\">`Init`</ph> a reference to a collection held in another object, you can use the <ph id=\"ph2\">`pUnkForRelease`</ph> parameter to ensure that the object, and the collection it holds, is available for as long as the enumerator needs it.","source":"If you pass `Init` a reference to a collection held in another object, you can use the `pUnkForRelease` parameter to ensure that the object, and the collection it holds, is available for as long as the enumerator needs it."},{"content":"You must call this method before passing a pointer to the enumerator interface back to any clients.","pos":[4707,4806]},{"pos":[4816,4875],"content":"<bpt id=\"p1\">&lt;a name=\"ienumonstlimpl__clone\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IEnumOnSTLImpl::Clone","linkify":"<a name=\"ienumonstlimpl__clone\"></a>  IEnumOnSTLImpl::Clone","source":"<a name=\"ienumonstlimpl__clone\"></a>  IEnumOnSTLImpl::Clone"},{"pos":[4879,5187],"content":"This method provides the implementation of the <bpt id=\"p1\">[</bpt>IEnumXXXX::Clone<ept id=\"p1\">](https://msdn.microsoft.com/library/ms690336.aspx)</ept> method by creating an object of type <ph id=\"ph1\">`CComEnumOnSTL`</ph>, initializing it with the same collection and iterator used by the current object, and returning the interface on the newly created object.","source":"This method provides the implementation of the [IEnumXXXX::Clone](https://msdn.microsoft.com/library/ms690336.aspx) method by creating an object of type `CComEnumOnSTL`, initializing it with the same collection and iterator used by the current object, and returning the interface on the newly created object."},{"pos":[5243,5253],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] The enumerator interface on a newly created object cloned from the current enumerator.","pos":[5269,5361]},{"pos":[5371,5383],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5387,5414],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[5424,5487],"content":"<bpt id=\"p1\">&lt;a name=\"ienumonstlimpl__m_spunk\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IEnumOnSTLImpl::m_spUnk","linkify":"<a name=\"ienumonstlimpl__m_spunk\"></a>  IEnumOnSTLImpl::m_spUnk","source":"<a name=\"ienumonstlimpl__m_spunk\"></a>  IEnumOnSTLImpl::m_spUnk"},{"pos":[5491,5555],"content":"The <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer of the object supplying the collection.","source":"The **IUnknown** pointer of the object supplying the collection."},{"pos":[5605,5612],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5616,5797],"content":"This smart pointer maintains a reference on the object passed to <bpt id=\"p1\">[</bpt>IEnumOnSTLImpl::Init<ept id=\"p1\">](#ienumonstlimpl__init)</ept>, ensuring that it remains alive during the lifetime of the enumerator.","source":"This smart pointer maintains a reference on the object passed to [IEnumOnSTLImpl::Init](#ienumonstlimpl__init), ensuring that it remains alive during the lifetime of the enumerator."},{"pos":[5807,5882],"content":"<bpt id=\"p1\">&lt;a name=\"ienumonstlimpl__m_pcollection\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IEnumOnSTLImpl::m_pcollection","linkify":"<a name=\"ienumonstlimpl__m_pcollection\"></a>  IEnumOnSTLImpl::m_pcollection","source":"<a name=\"ienumonstlimpl__m_pcollection\"></a>  IEnumOnSTLImpl::m_pcollection"},{"content":"This member points to the collection that provides the data driving the implementation of the enumerator interface.","pos":[5886,6001]},{"pos":[6049,6056],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6060,6146],"content":"This member is initialized by a call to <bpt id=\"p1\">[</bpt>IEnumOnSTLImpl::Init<ept id=\"p1\">](#ienumonstlimpl__init)</ept>.","source":"This member is initialized by a call to [IEnumOnSTLImpl::Init](#ienumonstlimpl__init)."},{"pos":[6156,6217],"content":"<bpt id=\"p1\">&lt;a name=\"ienumonstlimpl__m_iter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IEnumOnSTLImpl::m_iter","linkify":"<a name=\"ienumonstlimpl__m_iter\"></a>  IEnumOnSTLImpl::m_iter","source":"<a name=\"ienumonstlimpl__m_iter\"></a>  IEnumOnSTLImpl::m_iter"},{"content":"This member holds the iterator used to mark the current position within the collection and navigate to subsequent elements.","pos":[6221,6344]},{"pos":[6394,6451],"content":"<bpt id=\"p1\">&lt;a name=\"ienumonstlimpl__next\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IEnumOnSTLImpl::Next","linkify":"<a name=\"ienumonstlimpl__next\"></a>  IEnumOnSTLImpl::Next","source":"<a name=\"ienumonstlimpl__next\"></a>  IEnumOnSTLImpl::Next"},{"pos":[6455,6577],"content":"This method provides the implementation of the <bpt id=\"p1\">[</bpt>IEnumXXXX::Next<ept id=\"p1\">](https://msdn.microsoft.com/library/ms695273.aspx)</ept> method.","source":"This method provides the implementation of the [IEnumXXXX::Next](https://msdn.microsoft.com/library/ms695273.aspx) method."},{"pos":[6668,6678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The number of elements requested.","pos":[6692,6730]},{"content":"[out] The array to be filled in with the elements.","pos":[6748,6798]},{"content":"[out] The number of elements actually returned in <ph id=\"ph1\">`rgelt`</ph>.","pos":[6823,6881],"source":" [out] The number of elements actually returned in `rgelt`."},{"content":"This can be less than <ph id=\"ph1\">`celt`</ph> if fewer than <ph id=\"ph2\">`celt`</ph> elements remain in the list.","pos":[6882,6960],"source":" This can be less than `celt` if fewer than `celt` elements remain in the list."},{"pos":[6970,6982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6986,7013],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[7023,7082],"content":"<bpt id=\"p1\">&lt;a name=\"ienumonstlimpl__reset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IEnumOnSTLImpl::Reset","linkify":"<a name=\"ienumonstlimpl__reset\"></a>  IEnumOnSTLImpl::Reset","source":"<a name=\"ienumonstlimpl__reset\"></a>  IEnumOnSTLImpl::Reset"},{"pos":[7086,7209],"content":"This method provides the implementation of the <bpt id=\"p1\">[</bpt>IEnumXXXX::Reset<ept id=\"p1\">](https://msdn.microsoft.com/library/ms693414.aspx)</ept> method.","source":"This method provides the implementation of the [IEnumXXXX::Reset](https://msdn.microsoft.com/library/ms693414.aspx) method."},{"pos":[7256,7268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7272,7299],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[7309,7366],"content":"<bpt id=\"p1\">&lt;a name=\"ienumonstlimpl__skip\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IEnumOnSTLImpl::Skip","linkify":"<a name=\"ienumonstlimpl__skip\"></a>  IEnumOnSTLImpl::Skip","source":"<a name=\"ienumonstlimpl__skip\"></a>  IEnumOnSTLImpl::Skip"},{"pos":[7370,7492],"content":"This method provides the implementation of the <bpt id=\"p1\">[</bpt>IEnumXXXX::Skip<ept id=\"p1\">](https://msdn.microsoft.com/library/ms690392.aspx)</ept> method.","source":"This method provides the implementation of the [IEnumXXXX::Skip](https://msdn.microsoft.com/library/ms690392.aspx) method."},{"pos":[7544,7554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The number of elements to skip.","pos":[7568,7604]},{"pos":[7614,7626],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7630,7657],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[7666,7674],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7678,7727],"content":"<bpt id=\"p1\">[</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept>","source":"[Class Overview](../../atl/atl-class-overview.md)"}],"content":"---\ntitle: \"IEnumOnSTLImpl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"IEnumOnSTLImpl\"\n  - \"ATL.IEnumOnSTLImpl\"\n  - \"ATL::IEnumOnSTLImpl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"IEnumOnSTLImpl class\"\nms.assetid: 1789e77b-88b8-447d-a490-806b918912ce\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IEnumOnSTLImpl Class\nThis class defines an enumerator interface based on an STL collection.  \n  \n## Syntax  \n  \n```\ntemplate <class Base,\n    const IID* piid, class T, class Copy, class CollType>  class ATL_NO_VTABLE IEnumOnSTLImpl :  public Base\n```  \n  \n#### Parameters  \n `Base`  \n A COM enumerator ( [IEnumXXXX](https://msdn.microsoft.com/library/ms680089.aspx)) interface.  \n  \n `piid`  \n A pointer to the interface ID of the enumerator interface.  \n  \n `T`  \n The type of item exposed by the enumerator interface.  \n  \n `Copy`  \n A [copy policy class](../../atl/atl-copy-policy-classes.md).  \n  \n `CollType`  \n An STL container class.  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IEnumOnSTLImpl::Clone](#ienumonstlimpl__clone)|The implementation of [IEnumXXXX::Clone](https://msdn.microsoft.com/library/ms690336.aspx).|  \n|[IEnumOnSTLImpl::Init](#ienumonstlimpl__init)|Initializes the enumerator.|  \n|[IEnumOnSTLImpl::Next](#ienumonstlimpl__next)|The implementation of [IEnumXXXX::Next](https://msdn.microsoft.com/library/ms695273.aspx).|  \n|[IEnumOnSTLImpl::Reset](#ienumonstlimpl__reset)|The implementation of [IEnumXXXX::Reset](https://msdn.microsoft.com/library/ms693414.aspx).|  \n|[IEnumOnSTLImpl::Skip](#ienumonstlimpl__skip)|The implementation of [IEnumXXXX::Skip](https://msdn.microsoft.com/library/ms690392.aspx).|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IEnumOnSTLImpl::m_iter](#ienumonstlimpl__m_iter)|The iterator that represents the enumerator's current position within the collection.|  \n|[IEnumOnSTLImpl::m_pcollection](#ienumonstlimpl__m_pcollection)|A pointer to the STL container holding the items to be enumerated.|  \n|[IEnumOnSTLImpl::m_spUnk](#ienumonstlimpl__m_spunk)|The **IUnknown** pointer of the object supplying the collection.|  \n  \n## Remarks  \n `IEnumOnSTLImpl` provides the implementation for a COM enumerator interface where the items being enumerated are stored in an STL-compatible container. This class is analogous to the [CComEnumImpl](../../atl/reference/ccomenumimpl-class.md) class, which provides an implementation for an enumerator interface based on an array.  \n  \n> [!NOTE]\n>  See [CComEnumImpl::Init](../../atl/reference/ccomenumimpl-class.md#ccomenumimpl__init) for details on further differences between `CComEnumImpl` and `IEnumOnSTLImpl`.  \n  \n Typically, you will *not* need to create your own enumerator class by deriving from this interface implementation. If you want to use an ATL-supplied enumerator based on an STL container, it is more common to create an instance of [CComEnumOnSTL](../../atl/reference/ccomenumonstl-class.md), or to create a collection class that returns an enumerator by deriving from [ICollectionOnSTLImpl](../../atl/reference/icollectiononstlimpl-class.md).  \n  \n However, if you do need to provide a custom enumerator (for example, one that exposes interfaces in addition to the enumerator interface), you can derive from this class. In this situation it is likely that you'll need to override the [Clone](#ienumonstlimpl__clone) method to provide your own implementation.  \n  \n## Inheritance Hierarchy  \n `Base`  \n  \n `IEnumOnSTLImpl`  \n  \n## Requirements  \n **Header:** atlcom.h  \n  \n##  <a name=\"ienumonstlimpl__init\"></a>  IEnumOnSTLImpl::Init  \n Initializes the enumerator.  \n  \n```\nHRESULT Init(\n    IUnknown* pUnkForRelease,\n    CollType& collection);\n```  \n  \n### Parameters  \n `pUnkForRelease`  \n [in] The **IUnknown** pointer of an object that must be kept alive during the lifetime of the enumerator. Pass **NULL** if no such object exists.  \n  \n `collection`  \n A reference to the STL container that holds the items to be enumerated.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n If you pass `Init` a reference to a collection held in another object, you can use the `pUnkForRelease` parameter to ensure that the object, and the collection it holds, is available for as long as the enumerator needs it.  \n  \n You must call this method before passing a pointer to the enumerator interface back to any clients.  \n  \n##  <a name=\"ienumonstlimpl__clone\"></a>  IEnumOnSTLImpl::Clone  \n This method provides the implementation of the [IEnumXXXX::Clone](https://msdn.microsoft.com/library/ms690336.aspx) method by creating an object of type `CComEnumOnSTL`, initializing it with the same collection and iterator used by the current object, and returning the interface on the newly created object.  \n  \n```\nSTDMETHOD(Clone)(Base** ppEnum);\n```  \n  \n### Parameters  \n `ppEnum`  \n [out] The enumerator interface on a newly created object cloned from the current enumerator.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"ienumonstlimpl__m_spunk\"></a>  IEnumOnSTLImpl::m_spUnk  \n The **IUnknown** pointer of the object supplying the collection.  \n  \n```\nCComPtr<IUnknown> m_spUnk;\n```  \n  \n### Remarks  \n This smart pointer maintains a reference on the object passed to [IEnumOnSTLImpl::Init](#ienumonstlimpl__init), ensuring that it remains alive during the lifetime of the enumerator.  \n  \n##  <a name=\"ienumonstlimpl__m_pcollection\"></a>  IEnumOnSTLImpl::m_pcollection  \n This member points to the collection that provides the data driving the implementation of the enumerator interface.  \n  \n```\nCollType* m_pcollection;\n```  \n  \n### Remarks  \n This member is initialized by a call to [IEnumOnSTLImpl::Init](#ienumonstlimpl__init).  \n  \n##  <a name=\"ienumonstlimpl__m_iter\"></a>  IEnumOnSTLImpl::m_iter  \n This member holds the iterator used to mark the current position within the collection and navigate to subsequent elements.  \n  \n```\nCollType::iterator m_iter;\n```  \n  \n##  <a name=\"ienumonstlimpl__next\"></a>  IEnumOnSTLImpl::Next  \n This method provides the implementation of the [IEnumXXXX::Next](https://msdn.microsoft.com/library/ms695273.aspx) method.  \n  \n```\nSTDMETHOD(Next)(ULONG celt,\n    T* rgelt,\n    ULONG* pceltFetched);\n```  \n  \n### Parameters  \n `celt`  \n [in] The number of elements requested.  \n  \n `rgelt`  \n [out] The array to be filled in with the elements.  \n  \n `pceltFetched`  \n [out] The number of elements actually returned in `rgelt`. This can be less than `celt` if fewer than `celt` elements remain in the list.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"ienumonstlimpl__reset\"></a>  IEnumOnSTLImpl::Reset  \n This method provides the implementation of the [IEnumXXXX::Reset](https://msdn.microsoft.com/library/ms693414.aspx) method.  \n  \n```\nSTDMETHOD(Reset)(void);\n```  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"ienumonstlimpl__skip\"></a>  IEnumOnSTLImpl::Skip  \n This method provides the implementation of the [IEnumXXXX::Skip](https://msdn.microsoft.com/library/ms690392.aspx) method.  \n  \n```\nSTDMETHOD(Skip)(ULONG celt);\n```  \n  \n### Parameters  \n `celt`  \n [in] The number of elements to skip.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)\n"}