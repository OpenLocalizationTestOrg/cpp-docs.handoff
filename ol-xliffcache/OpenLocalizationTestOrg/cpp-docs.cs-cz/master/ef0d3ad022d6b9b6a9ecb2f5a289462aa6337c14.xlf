<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef0d3ad022d6b9b6a9ecb2f5a289462aa6337c14</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\intrinsics\interlockedexchangepointer-intrinsic-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c308115d87e26bc8b6b005d23b9ea1362656eb5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f275f2450916e0104957cb1734f66eb1c95e4065</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangePointer Intrinsic Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangePointer Intrinsic Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Perform an atomic exchange operation, which copies the address passed in as the second argument to the first and returns the original address of the first.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[in, out]</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Pointer to the pointer to the value to exchange.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The function sets the value to <ph id="ph1">`Value`</ph> and returns its previous value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Value to be exchanged with the value pointed to by <ph id="ph1">`Target`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The function returns the initial value pointed to by <ph id="ph1">`Target`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Intrinsic</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Architecture</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Header</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>x86, ARM,</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>intrin.h&gt;</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`_InterlockedExchangePointer_rel`</ph>,</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>ARM</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>intrin.h&gt;</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>with HLE support</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>immintrin.h&gt;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>On the x86 architecture, <ph id="ph1">`_InterlockedExchangePointer`</ph> is a macro that calls <ph id="ph2">`_InterlockedExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>On a 64-bit system, the parameters are 64 bits and must be aligned on 64-bit boundaries; otherwise, the function fails.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>On a 32-bit system, the parameters are 32 bits and must be aligned on 32-bit boundaries.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>align<ept id="p1">](../cpp/align-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>On ARM platforms, use the intrinsics with <ph id="ph1">`_acq`</ph> and <ph id="ph2">`_rel`</ph> suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The intrinsic with an <ph id="ph1">`_nf`</ph> ("no fence") suffix does not act as a memory barrier.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>On Intel platforms that support Hardware Lock Elision (HLE) instructions, the intrinsics with <ph id="ph1">`_HLEAcquire`</ph> and <ph id="ph2">`_HLERelease`</ph> suffixes include a hint to the processor that can accelerate performance by eliminating a lock write step in hardware.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If these intrinsics are called on platforms that do not support HLE, the hint is ignored.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These routines are only available as intrinsics.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Compiler Intrinsics</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Conflicts with the x86 Compiler</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>