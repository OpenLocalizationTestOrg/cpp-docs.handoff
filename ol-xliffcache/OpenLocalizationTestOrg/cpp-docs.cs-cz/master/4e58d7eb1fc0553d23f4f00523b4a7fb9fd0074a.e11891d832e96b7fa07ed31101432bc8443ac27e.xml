{"nodes":[{"pos":[12,51],"content":"C Constant Expressions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C Constant Expressions | Microsoft Docs","pos":[0,39]}]},{"content":"C Constant Expressions","pos":[658,680]},{"content":"A constant expression is evaluated at compile time, not run time, and can be used in any place that a constant can be used.","pos":[681,804]},{"content":"The constant expression must evaluate to a constant that is in the range of representable values for that type.","pos":[805,916]},{"content":"The operands of a constant expression can be integer constants, character constants, floating-point constants, enumeration constants, type casts, <ph id=\"ph1\">`sizeof`</ph> expressions, and other constant expressions.","pos":[917,1116],"source":" The operands of a constant expression can be integer constants, character constants, floating-point constants, enumeration constants, type casts, `sizeof` expressions, and other constant expressions."},{"content":"Syntax","pos":[1125,1131]},{"content":"<bpt id=\"p1\">*</bpt>constant-expression<ept id=\"p1\">*</ept>:","pos":[1135,1157],"source":"*constant-expression*:"},{"content":"conditional-expression","pos":[1162,1184]},{"content":"<bpt id=\"p1\">*</bpt>conditional-expression<ept id=\"p1\">*</ept>:","pos":[1192,1217],"source":"*conditional-expression*:"},{"content":"logical-OR-expression","pos":[1222,1243]},{"content":"<bpt id=\"p1\">*</bpt>logical-OR-expression<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>?<ept id=\"p2\">**</ept>","pos":[1251,1280],"source":"*logical-OR-expression* **?**"},{"content":"<bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>:<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>conditional-expression<ept id=\"p3\">*</ept>","pos":[1282,1326],"source":"*expression* **:**  *conditional-expression*"},{"content":"<bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept>:","pos":[1333,1346],"source":"*expression*:"},{"content":"assignment-expression","pos":[1351,1372]},{"pos":[1380,1423],"content":"<bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>assignment-expression<ept id=\"p3\">*</ept>","source":"*expression* **,**  *assignment-expression*"},{"content":"<bpt id=\"p1\">*</bpt>assignment-expression<ept id=\"p1\">*</ept>:","pos":[1430,1454],"source":"*assignment-expression*:"},{"content":"conditional-expression","pos":[1459,1481]},{"content":"unary-expression assignment-operator assignment-expression","pos":[1490,1548]},{"content":"<bpt id=\"p1\">*</bpt>assignment-operator<ept id=\"p1\">*</ept>: one of","pos":[1556,1585],"source":"*assignment-operator*: one of"},{"content":"= /= %= += –= &lt;<ph id=\"ph1\">\\&lt;</ph>= &gt;&gt;= &amp;= ^= &amp;#124;=","pos":[1595,1631],"source":"= /= %= += –= <\\<= >>= &= ^= &#124;="},{"pos":[1640,1807],"content":"The nonterminals for struct declarator, enumerator, direct declarator, direct-abstract declarator, and labeled statement contain the <bpt id=\"p1\">*</bpt>constant-expression<ept id=\"p1\">*</ept> nonterminal.","source":"The nonterminals for struct declarator, enumerator, direct declarator, direct-abstract declarator, and labeled statement contain the *constant-expression* nonterminal."},{"pos":[1814,2013],"content":"An integral constant expression must be used to specify the size of a bit-field member of a structure, the value of an enumeration constant, the size of an array, or the value of a <bpt id=\"p1\">**</bpt>case<ept id=\"p1\">**</ept> constant.","source":"An integral constant expression must be used to specify the size of a bit-field member of a structure, the value of an enumeration constant, the size of an array, or the value of a **case** constant."},{"content":"Constant expressions used in preprocessor directives are subject to additional restrictions.","pos":[2020,2112]},{"content":"Consequently, they are known as \"restricted constant expressions.\"","pos":[2113,2179]},{"content":"A restricted constant expression cannot contain <ph id=\"ph1\">`sizeof`</ph> expressions, enumeration constants, type casts to any type, or floating-type constants.","pos":[2180,2324],"source":" A restricted constant expression cannot contain `sizeof` expressions, enumeration constants, type casts to any type, or floating-type constants."},{"content":"It can, however, contain the special constant expression <ph id=\"ph1\">`defined (`</ph><bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept><ph id=\"ph2\">`)`</ph>.","pos":[2325,2409],"source":" It can, however, contain the special constant expression `defined (`*identifier*`)`."},{"content":"See Also","pos":[2418,2426]},{"content":"Operands and Expressions","pos":[2431,2455]}],"content":"---\ntitle: \"C Constant Expressions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"constant expressions, syntax\"\n  - \"constant expressions\"\n  - \"expressions [C++], constant\"\nms.assetid: d48a6c47-e44c-4be2-9c8b-7944c7ef8de7\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C Constant Expressions\nA constant expression is evaluated at compile time, not run time, and can be used in any place that a constant can be used. The constant expression must evaluate to a constant that is in the range of representable values for that type. The operands of a constant expression can be integer constants, character constants, floating-point constants, enumeration constants, type casts, `sizeof` expressions, and other constant expressions.  \n  \n## Syntax  \n *constant-expression*:  \n *conditional-expression*  \n  \n *conditional-expression*:  \n *logical-OR-expression*  \n  \n *logical-OR-expression* **?**  *expression* **:**  *conditional-expression*  \n  \n *expression*:  \n *assignment-expression*  \n  \n *expression* **,**  *assignment-expression*  \n  \n *assignment-expression*:  \n *conditional-expression*  \n  \n *unary-expression assignment-operator assignment-expression*  \n  \n *assignment-operator*: one of  \n **= \\*= /= %= += –= <\\<= >>= &= ^= &#124;=**  \n  \n The nonterminals for struct declarator, enumerator, direct declarator, direct-abstract declarator, and labeled statement contain the *constant-expression* nonterminal.  \n  \n An integral constant expression must be used to specify the size of a bit-field member of a structure, the value of an enumeration constant, the size of an array, or the value of a **case** constant.  \n  \n Constant expressions used in preprocessor directives are subject to additional restrictions. Consequently, they are known as \"restricted constant expressions.\" A restricted constant expression cannot contain `sizeof` expressions, enumeration constants, type casts to any type, or floating-type constants. It can, however, contain the special constant expression `defined (`*identifier*`)`.  \n  \n## See Also  \n [Operands and Expressions](../c-language/operands-and-expressions.md)"}