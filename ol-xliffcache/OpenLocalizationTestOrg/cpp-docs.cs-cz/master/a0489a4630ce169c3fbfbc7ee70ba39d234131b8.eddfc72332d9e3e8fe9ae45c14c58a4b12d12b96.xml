{"nodes":[{"pos":[12,54],"content":"CComCriticalSection Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComCriticalSection Class | Microsoft Docs","pos":[0,42]}]},{"content":"CComCriticalSection Class","pos":[692,717]},{"content":"This class provides methods for obtaining and releasing ownership of a critical section object.","pos":[718,813]},{"content":"Syntax","pos":[822,828]},{"content":"Members","pos":[876,883]},{"content":"Public Constructors","pos":[893,912]},{"content":"Name","pos":[919,923]},{"content":"Description","pos":[924,935]},{"content":"CComCriticalSection::CComCriticalSection","pos":[974,1014]},{"content":"The constructor.","pos":[1059,1075]},{"content":"Public Methods","pos":[1086,1100]},{"content":"Name","pos":[1107,1111]},{"content":"Description","pos":[1112,1123]},{"content":"CComCriticalSection::Init","pos":[1162,1187]},{"content":"Creates and initializes a critical section object.","pos":[1217,1267]},{"content":"CComCriticalSection::Lock","pos":[1273,1298]},{"content":"Obtains ownership of the critical section object.","pos":[1328,1377]},{"content":"CComCriticalSection::Term","pos":[1383,1408]},{"content":"Releases system resources used by the critical section object.","pos":[1438,1500]},{"content":"CComCriticalSection::Unlock","pos":[1506,1533]},{"content":"Releases ownership of the critical section object.","pos":[1565,1615]},{"content":"Public Data Members","pos":[1626,1645]},{"content":"Name","pos":[1652,1656]},{"content":"Description","pos":[1657,1668]},{"content":"CComCriticalSection::m_sec","pos":[1707,1733]},{"pos":[1764,1794],"content":"A <bpt id=\"p1\">**</bpt>CRITICAL_SECTION<ept id=\"p1\">**</ept> object.","source":"A **CRITICAL_SECTION** object."},{"content":"Remarks","pos":[1804,1811]},{"pos":[1837,2014],"content":"is similar to class <bpt id=\"p1\">[</bpt>CComAutoCriticalSection<ept id=\"p1\">](../../atl/reference/ccomautocriticalsection-class.md)</ept>, except that you must explicitly initialize and release the critical section.","source":" is similar to class [CComAutoCriticalSection](../../atl/reference/ccomautocriticalsection-class.md), except that you must explicitly initialize and release the critical section."},{"content":"Typically, you use <ph id=\"ph1\">`CComCriticalSection`</ph> through the <ph id=\"ph2\">`typedef`</ph> name <bpt id=\"p1\">[</bpt>CriticalSection<ept id=\"p1\">](ccommultithreadmodel-class.md#ccommultithreadmodel__criticalsection)</ept>.","pos":[2021,2176],"source":"Typically, you use `CComCriticalSection` through the `typedef` name [CriticalSection](ccommultithreadmodel-class.md#ccommultithreadmodel__criticalsection)."},{"content":"This name references <ph id=\"ph1\">`CComCriticalSection`</ph> when <bpt id=\"p1\">[</bpt>CComMultiThreadModel<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md)</ept> is being used.","pos":[2177,2313],"source":" This name references `CComCriticalSection` when [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) is being used."},{"pos":[2321,2471],"content":"See <bpt id=\"p1\">[</bpt>CComCritSecLock Class<ept id=\"p1\">](../../atl/reference/ccomcritseclock-class.md)</ept> for a safer way to use this class than calling <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> directly.","source":"See [CComCritSecLock Class](../../atl/reference/ccomcritseclock-class.md) for a safer way to use this class than calling `Lock` and `Unlock` directly."},{"content":"Requirements","pos":[2480,2492]},{"pos":[2496,2517],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcore.h","source":"**Header:** atlcore.h"},{"pos":[2584,2624],"content":"CComCriticalSection::CComCriticalSection"},{"content":"The constructor.","pos":[2628,2644]},{"content":"Remarks","pos":[2698,2705]},{"pos":[2709,2780],"content":"Sets the <bpt id=\"p1\">[</bpt>m_sec<ept id=\"p1\">](#ccomcriticalsection__m_sec)</ept> data member to NULL <bpt id=\"p2\">**</bpt>.<ept id=\"p2\">**</ept>","source":"Sets the [m_sec](#ccomcriticalsection__m_sec) data member to NULL **.**"},{"pos":[2832,2857],"content":"CComCriticalSection::Init"},{"pos":[2861,3087],"content":"Calls the Win32 function <bpt id=\"p1\">[</bpt>InitializeCriticalSection<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683472)</ept>, which initializes the critical section object contained in the <bpt id=\"p2\">[</bpt>m_sec<ept id=\"p2\">](#ccomcriticalsection__m_sec)</ept> data member.","source":"Calls the Win32 function [InitializeCriticalSection](http://msdn.microsoft.com/library/windows/desktop/ms683472), which initializes the critical section object contained in the [m_sec](#ccomcriticalsection__m_sec) data member."},{"content":"Return Value","pos":[3134,3146]},{"pos":[3150,3220],"content":"Returns <ph id=\"ph1\">`S_OK`</ph> on success, <bpt id=\"p1\">**</bpt>E_OUTOFMEMORY<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>E_FAIL<ept id=\"p2\">**</ept> on failure.","source":"Returns `S_OK` on success, **E_OUTOFMEMORY** or **E_FAIL** on failure."},{"pos":[3272,3297],"content":"CComCriticalSection::Lock"},{"pos":[3301,3555],"content":"Calls the Win32 function <bpt id=\"p1\">[</bpt>EnterCriticalSection<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms682608)</ept>, which waits until the thread can take ownership of the critical section object contained in the <bpt id=\"p2\">[</bpt>m_sec<ept id=\"p2\">](#ccomcriticalsection__m_sec)</ept> data member.","source":"Calls the Win32 function [EnterCriticalSection](http://msdn.microsoft.com/library/windows/desktop/ms682608), which waits until the thread can take ownership of the critical section object contained in the [m_sec](#ccomcriticalsection__m_sec) data member."},{"content":"Return Value","pos":[3602,3614]},{"pos":[3618,3688],"content":"Returns <ph id=\"ph1\">`S_OK`</ph> on success, <bpt id=\"p1\">**</bpt>E_OUTOFMEMORY<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>E_FAIL<ept id=\"p2\">**</ept> on failure.","source":"Returns `S_OK` on success, **E_OUTOFMEMORY** or **E_FAIL** on failure."},{"content":"Remarks","pos":[3698,3705]},{"content":"The critical section object must first be initialized with a call to the <bpt id=\"p1\">[</bpt>Init<ept id=\"p1\">](#ccomcriticalsection__init)</ept> method.","pos":[3709,3824],"source":"The critical section object must first be initialized with a call to the [Init](#ccomcriticalsection__init) method."},{"content":"When the protected code has finished executing, the thread must call <bpt id=\"p1\">[</bpt>Unlock<ept id=\"p1\">](#ccomcriticalsection__unlock)</ept> to release ownership of the critical section.","pos":[3825,3978],"source":" When the protected code has finished executing, the thread must call [Unlock](#ccomcriticalsection__unlock) to release ownership of the critical section."},{"pos":[4031,4057],"content":"CComCriticalSection::m_sec"},{"pos":[4061,4146],"content":"Contains a critical section object that is used by all <ph id=\"ph1\">`CComCriticalSection`</ph> methods.","source":"Contains a critical section object that is used by all `CComCriticalSection` methods."},{"pos":[4235,4260],"content":"CComCriticalSection::Term"},{"pos":[4264,4505],"content":"Calls the Win32 function <bpt id=\"p1\">[</bpt>DeleteCriticalSection<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms682552)</ept>, which releases all resources used by the critical section object contained in the <bpt id=\"p2\">[</bpt>m_sec<ept id=\"p2\">](#ccomcriticalsection__m_sec)</ept> data member.","source":"Calls the Win32 function [DeleteCriticalSection](http://msdn.microsoft.com/library/windows/desktop/ms682552), which releases all resources used by the critical section object contained in the [m_sec](#ccomcriticalsection__m_sec) data member."},{"content":"Return Value","pos":[4552,4564]},{"pos":[4568,4583],"content":"Returns <ph id=\"ph1\">`S_OK`</ph>.","source":"Returns `S_OK`."},{"content":"Remarks","pos":[4593,4600]},{"pos":[4604,4696],"content":"Once <ph id=\"ph1\">`Term`</ph> has been called, the critical section can no longer be used for synchronization.","source":"Once `Term` has been called, the critical section can no longer be used for synchronization."},{"pos":[4750,4777],"content":"CComCriticalSection::Unlock"},{"pos":[4781,5012],"content":"Calls the Win32 function <bpt id=\"p1\">[</bpt>LeaveCriticalSection<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms684169)</ept>, which releases ownership of the critical section object contained in the <bpt id=\"p2\">[</bpt>m_sec<ept id=\"p2\">](#ccomcriticalsection__m_sec)</ept> data member.","source":"Calls the Win32 function [LeaveCriticalSection](http://msdn.microsoft.com/library/windows/desktop/ms684169), which releases ownership of the critical section object contained in the [m_sec](#ccomcriticalsection__m_sec) data member."},{"content":"Return Value","pos":[5061,5073]},{"pos":[5077,5092],"content":"Returns <ph id=\"ph1\">`S_OK`</ph>.","source":"Returns `S_OK`."},{"content":"Remarks","pos":[5102,5109]},{"content":"To first obtain ownership, the thread must call the <bpt id=\"p1\">[</bpt>Lock<ept id=\"p1\">](#ccomcriticalsection__lock)</ept> method.","pos":[5113,5207],"source":"To first obtain ownership, the thread must call the [Lock](#ccomcriticalsection__lock) method."},{"content":"Each call to <ph id=\"ph1\">`Lock`</ph> requires a corresponding call to <ph id=\"ph2\">`Unlock`</ph> to release ownership of the critical section.","pos":[5208,5315],"source":" Each call to `Lock` requires a corresponding call to `Unlock` to release ownership of the critical section."},{"content":"See Also","pos":[5324,5332]},{"content":"CComFakeCriticalSection Class","pos":[5337,5366]},{"content":"Class Overview","pos":[5427,5441]},{"content":"CComCritSecLock Class","pos":[5481,5502]}],"content":"---\ntitle: \"CComCriticalSection Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CComCriticalSection\"\n  - \"CComCriticalSection\"\n  - \"ATL::CComCriticalSection\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CComCriticalSection class\"\nms.assetid: 44e1edd2-90be-4bfe-9739-58e8b419e7d1\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComCriticalSection Class\nThis class provides methods for obtaining and releasing ownership of a critical section object.  \n  \n## Syntax  \n  \n```\nclass CComCriticalSection\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComCriticalSection::CComCriticalSection](#ccomcriticalsection__ccomcriticalsection)|The constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComCriticalSection::Init](#ccomcriticalsection__init)|Creates and initializes a critical section object.|  \n|[CComCriticalSection::Lock](#ccomcriticalsection__lock)|Obtains ownership of the critical section object.|  \n|[CComCriticalSection::Term](#ccomcriticalsection__term)|Releases system resources used by the critical section object.|  \n|[CComCriticalSection::Unlock](#ccomcriticalsection__unlock)|Releases ownership of the critical section object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComCriticalSection::m_sec](#ccomcriticalsection__m_sec)|A **CRITICAL_SECTION** object.|  \n  \n## Remarks  \n `CComCriticalSection` is similar to class [CComAutoCriticalSection](../../atl/reference/ccomautocriticalsection-class.md), except that you must explicitly initialize and release the critical section.  \n  \n Typically, you use `CComCriticalSection` through the `typedef` name [CriticalSection](ccommultithreadmodel-class.md#ccommultithreadmodel__criticalsection). This name references `CComCriticalSection` when [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) is being used.  \n\n  \n See [CComCritSecLock Class](../../atl/reference/ccomcritseclock-class.md) for a safer way to use this class than calling `Lock` and `Unlock` directly.  \n  \n## Requirements  \n **Header:** atlcore.h  \n  \n##  <a name=\"ccomcriticalsection__ccomcriticalsection\"></a>  CComCriticalSection::CComCriticalSection  \n The constructor.  \n  \n```\nCComCriticalSection() throw();\n```  \n  \n### Remarks  \n Sets the [m_sec](#ccomcriticalsection__m_sec) data member to NULL **.**  \n  \n##  <a name=\"ccomcriticalsection__init\"></a>  CComCriticalSection::Init  \n Calls the Win32 function [InitializeCriticalSection](http://msdn.microsoft.com/library/windows/desktop/ms683472), which initializes the critical section object contained in the [m_sec](#ccomcriticalsection__m_sec) data member.  \n  \n```\nHRESULT Init() throw();\n```  \n  \n### Return Value  \n Returns `S_OK` on success, **E_OUTOFMEMORY** or **E_FAIL** on failure.  \n  \n##  <a name=\"ccomcriticalsection__lock\"></a>  CComCriticalSection::Lock  \n Calls the Win32 function [EnterCriticalSection](http://msdn.microsoft.com/library/windows/desktop/ms682608), which waits until the thread can take ownership of the critical section object contained in the [m_sec](#ccomcriticalsection__m_sec) data member.  \n  \n```\nHRESULT Lock() throw();\n```  \n  \n### Return Value  \n Returns `S_OK` on success, **E_OUTOFMEMORY** or **E_FAIL** on failure.  \n  \n### Remarks  \n The critical section object must first be initialized with a call to the [Init](#ccomcriticalsection__init) method. When the protected code has finished executing, the thread must call [Unlock](#ccomcriticalsection__unlock) to release ownership of the critical section.  \n  \n##  <a name=\"ccomcriticalsection__m_sec\"></a>  CComCriticalSection::m_sec  \n Contains a critical section object that is used by all `CComCriticalSection` methods.  \n  \n```\nCRITICAL_SECTION m_sec;\n```  \n  \n##  <a name=\"ccomcriticalsection__term\"></a>  CComCriticalSection::Term  \n Calls the Win32 function [DeleteCriticalSection](http://msdn.microsoft.com/library/windows/desktop/ms682552), which releases all resources used by the critical section object contained in the [m_sec](#ccomcriticalsection__m_sec) data member.  \n  \n```\nHRESULT Term() throw();\n```  \n  \n### Return Value  \n Returns `S_OK`.  \n  \n### Remarks  \n Once `Term` has been called, the critical section can no longer be used for synchronization.  \n  \n##  <a name=\"ccomcriticalsection__unlock\"></a>  CComCriticalSection::Unlock  \n Calls the Win32 function [LeaveCriticalSection](http://msdn.microsoft.com/library/windows/desktop/ms684169), which releases ownership of the critical section object contained in the [m_sec](#ccomcriticalsection__m_sec) data member.  \n  \n```\nHRESULT Unlock() throw();\n```  \n  \n### Return Value  \n Returns `S_OK`.  \n  \n### Remarks  \n To first obtain ownership, the thread must call the [Lock](#ccomcriticalsection__lock) method. Each call to `Lock` requires a corresponding call to `Unlock` to release ownership of the critical section.  \n  \n## See Also  \n [CComFakeCriticalSection Class](../../atl/reference/ccomfakecriticalsection-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)   \n [CComCritSecLock Class](../../atl/reference/ccomcritseclock-class.md)\n"}