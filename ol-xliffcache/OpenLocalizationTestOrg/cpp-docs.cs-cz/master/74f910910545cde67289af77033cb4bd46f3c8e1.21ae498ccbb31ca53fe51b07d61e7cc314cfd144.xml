{"nodes":[{"pos":[12,35],"content":"_lfind | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_lfind | Microsoft Docs","pos":[0,23]}]},{"pos":[1042,1048],"content":"_lfind","linkify":"_lfind","nodes":[{"content":"_lfind","pos":[0,6]}]},{"content":"Performs a linear search for the specified key.","pos":[1049,1096]},{"content":"A more secure version of this function is available; see <bpt id=\"p1\">[</bpt>_lfind_s<ept id=\"p1\">](../../c-runtime-library/reference/lfind-s.md)</ept>.","pos":[1097,1211],"source":" A more secure version of this function is available; see [_lfind_s](../../c-runtime-library/reference/lfind-s.md)."},{"pos":[1220,1226],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1423,1433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Object to search for.","pos":[1446,1467]},{"content":"Pointer to the base of search data.","pos":[1484,1519]},{"content":"Number of array elements.","pos":[1535,1560]},{"content":"Width of array elements.","pos":[1578,1602]},{"content":"Pointer to comparison routine.","pos":[1622,1652]},{"content":"The first parameter is a pointer to key for search.","pos":[1653,1704]},{"content":"The second parameter is a pointer to array element to be compared with key.","pos":[1705,1780]},{"pos":[1789,1801],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the key is found, <ph id=\"ph1\">`_lfind`</ph> returns a pointer to the element of the array at <ph id=\"ph2\">`base`</ph> that matches <ph id=\"ph3\">`key`</ph>.","pos":[1805,1910],"source":"If the key is found, `_lfind` returns a pointer to the element of the array at `base` that matches `key`."},{"content":"If the key is not found, <ph id=\"ph1\">`_lfind`</ph> returns <ph id=\"ph2\">`NULL`</ph>.","pos":[1911,1960],"source":" If the key is not found, `_lfind` returns `NULL`."},{"pos":[1969,1976],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_lfind`</ph> function performs a linear search for the value <ph id=\"ph2\">`key`</ph> in an array of <ph id=\"ph3\">`num`</ph> elements, each of <ph id=\"ph4\">`width`</ph> bytes.","pos":[1980,2100],"source":"The `_lfind` function performs a linear search for the value `key` in an array of `num` elements, each of `width` bytes."},{"content":"Unlike <ph id=\"ph1\">`bsearch`</ph>, <ph id=\"ph2\">`_lfind`</ph> does not require the array to be sorted.","pos":[2101,2168],"source":" Unlike `bsearch`, `_lfind` does not require the array to be sorted."},{"content":"The <ph id=\"ph1\">`base`</ph> argument is a pointer to the base of the array to be searched.","pos":[2169,2242],"source":" The `base` argument is a pointer to the base of the array to be searched."},{"content":"The <ph id=\"ph1\">`compare`</ph> argument is a pointer to a user-supplied routine that compares two array elements and then returns a value specifying their relationship.","pos":[2243,2394],"source":" The `compare` argument is a pointer to a user-supplied routine that compares two array elements and then returns a value specifying their relationship."},{"content":"<ph id=\"ph1\">`_lfind`</ph> calls the <ph id=\"ph2\">`compare`</ph> routine one or more times during the search, passing pointers to two array elements on each call.","pos":[2395,2521],"source":"`_lfind` calls the `compare` routine one or more times during the search, passing pointers to two array elements on each call."},{"content":"The <ph id=\"ph1\">`compare`</ph> routine must compare the elements and then return nonzero (meaning the elements are different) or 0 (meaning the elements are identical).","pos":[2522,2673],"source":" The `compare` routine must compare the elements and then return nonzero (meaning the elements are different) or 0 (meaning the elements are identical)."},{"content":"This function validates its parameters.","pos":[2680,2719]},{"content":"If <ph id=\"ph1\">`compare`</ph>, <ph id=\"ph2\">`key`</ph> or <ph id=\"ph3\">`num`</ph> is <ph id=\"ph4\">`NULL`</ph>, or if <ph id=\"ph5\">`base`</ph> is NULL and *<ph id=\"ph6\">`num`</ph> is nonzero, or if <ph id=\"ph7\">`width`</ph> is less than zero, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2720,2967],"source":" If `compare`, `key` or `num` is `NULL`, or if `base` is NULL and *`num` is nonzero, or if `width` is less than zero, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and the function returns <ph id=\"ph3\">`NULL`</ph>.","pos":[2968,3064],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `NULL`."},{"pos":[3073,3085],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3092,3099]},{"content":"Required header","pos":[3100,3115]},{"content":"<ph id=\"ph1\">\\&lt;</ph>search.h&gt;","pos":[3169,3180],"source":"\\<search.h>"},{"pos":[3188,3306],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3315,3322],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4046,4071],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[4075,4202],"content":"<bpt id=\"p1\">[</bpt>System::Collections::ArrayList::Contains<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.collections.arraylist.contains.aspx)</ept>","source":"[System::Collections::ArrayList::Contains](https://msdn.microsoft.com/en-us/library/system.collections.arraylist.contains.aspx)"},{"pos":[4211,4219],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Searching and Sorting<ept id=\"p1\">](../../c-runtime-library/searching-and-sorting.md)</ept><ph id=\"ph1\"> </ph>","pos":[4223,4297],"source":"[Searching and Sorting](../../c-runtime-library/searching-and-sorting.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_lfind_s<ept id=\"p1\">](../../c-runtime-library/reference/lfind-s.md)</ept><ph id=\"ph1\"> </ph>","pos":[4300,4358],"source":" [_lfind_s](../../c-runtime-library/reference/lfind-s.md) "},{"content":"<bpt id=\"p1\"> [</bpt>bsearch<ept id=\"p1\">](../../c-runtime-library/reference/bsearch.md)</ept><ph id=\"ph1\"> </ph>","pos":[4361,4418],"source":" [bsearch](../../c-runtime-library/reference/bsearch.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_lsearch<ept id=\"p1\">](../../c-runtime-library/reference/lsearch.md)</ept><ph id=\"ph1\"> </ph>","pos":[4421,4479],"source":" [_lsearch](../../c-runtime-library/reference/lsearch.md) "},{"content":"<bpt id=\"p1\"> [</bpt>qsort<ept id=\"p1\">](../../c-runtime-library/reference/qsort.md)</ept>","pos":[4482,4534],"source":" [qsort](../../c-runtime-library/reference/qsort.md)"}],"content":"---\ntitle: \"_lfind | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_lfind\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-utility-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"lfind\"\n  - \"_lfind\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"linear searching\"\n  - \"lfind function\"\n  - \"arrays [CRT], searching\"\n  - \"searching, linear\"\n  - \"finding keys in arrays\"\n  - \"_lfind function\"\nms.assetid: a40ece70-1674-4b75-94bd-9f57cfff18f2\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _lfind\nPerforms a linear search for the specified key. A more secure version of this function is available; see [_lfind_s](../../c-runtime-library/reference/lfind-s.md).  \n  \n## Syntax  \n  \n```  \nvoid *_lfind(  \n   const void *key,  \n   const void *base,  \n   unsigned int *num,  \n   unsigned int width,  \n   int (__cdecl *compare)(const void *, const void *)  \n);  \n```  \n  \n#### Parameters  \n `key`  \n Object to search for.  \n  \n `base`  \n Pointer to the base of search data.  \n  \n `num`  \n Number of array elements.  \n  \n `width`  \n Width of array elements.  \n  \n `compare`  \n Pointer to comparison routine. The first parameter is a pointer to key for search. The second parameter is a pointer to array element to be compared with key.  \n  \n## Return Value  \n If the key is found, `_lfind` returns a pointer to the element of the array at `base` that matches `key`. If the key is not found, `_lfind` returns `NULL`.  \n  \n## Remarks  \n The `_lfind` function performs a linear search for the value `key` in an array of `num` elements, each of `width` bytes. Unlike `bsearch`, `_lfind` does not require the array to be sorted. The `base` argument is a pointer to the base of the array to be searched. The `compare` argument is a pointer to a user-supplied routine that compares two array elements and then returns a value specifying their relationship. `_lfind` calls the `compare` routine one or more times during the search, passing pointers to two array elements on each call. The `compare` routine must compare the elements and then return nonzero (meaning the elements are different) or 0 (meaning the elements are identical).  \n  \n This function validates its parameters. If `compare`, `key` or `num` is `NULL`, or if `base` is NULL and *`num` is nonzero, or if `width` is less than zero, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `NULL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_lfind`|\\<search.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_lfind.c  \n// This program uses _lfind to search a string array  \n// for an occurrence of \"hello\".  \n  \n#include <search.h>  \n#include <string.h>  \n#include <stdio.h>  \n  \nint compare(const void *arg1, const void *arg2 )  \n{  \n   return( _stricmp( * (char**)arg1, * (char**)arg2 ) );  \n}  \n  \nint main( )  \n{  \n   char *arr[] = {\"Hi\", \"Hello\", \"Bye\"};  \n   int n = sizeof(arr) / sizeof(char*);  \n   char **result;  \n   char *key = \"hello\";  \n  \n   result = (char **)_lfind( &key, arr,   \n                      &n, sizeof(char *), compare );  \n  \n   if( result )  \n      printf( \"%s found\\n\", *result );  \n   else  \n      printf( \"hello not found!\\n\" );  \n}  \n```  \n  \n```Output  \nHello found  \n```  \n  \n## .NET Framework Equivalent  \n [System::Collections::ArrayList::Contains](https://msdn.microsoft.com/en-us/library/system.collections.arraylist.contains.aspx)  \n  \n## See Also  \n [Searching and Sorting](../../c-runtime-library/searching-and-sorting.md)   \n [_lfind_s](../../c-runtime-library/reference/lfind-s.md)   \n [bsearch](../../c-runtime-library/reference/bsearch.md)   \n [_lsearch](../../c-runtime-library/reference/lsearch.md)   \n [qsort](../../c-runtime-library/reference/qsort.md)"}