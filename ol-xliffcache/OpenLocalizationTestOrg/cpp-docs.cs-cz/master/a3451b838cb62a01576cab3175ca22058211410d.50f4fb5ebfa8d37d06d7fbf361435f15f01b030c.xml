{"nodes":[{"pos":[12,60],"content":"ATL Collections and Enumerators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ATL Collections and Enumerators | Microsoft Docs","pos":[0,48]}]},{"content":"ATL Collections and Enumerators","pos":[681,712]},{"content":"A <ph id=\"ph1\">`collection`</ph> is a COM object that provides an interface that allows access to a group of data items (raw data or other objects).","pos":[713,843],"source":"A `collection` is a COM object that provides an interface that allows access to a group of data items (raw data or other objects)."},{"content":"An interface that follows the standards for providing access to a group of objects is known as a <bpt id=\"p1\">*</bpt>collection interface<ept id=\"p1\">*</ept>.","pos":[844,964],"source":" An interface that follows the standards for providing access to a group of objects is known as a *collection interface*."},{"content":"At a minimum, collection interfaces must provide a <bpt id=\"p1\">**</bpt>Count<ept id=\"p1\">**</ept> property that returns the number of items in the collection, an <bpt id=\"p2\">**</bpt>Item<ept id=\"p2\">**</ept> property that returns an item from the collection based on an index, and a <ph id=\"ph1\">`_NewEnum`</ph> property that returns an enumerator for the collection.","pos":[971,1246],"source":"At a minimum, collection interfaces must provide a **Count** property that returns the number of items in the collection, an **Item** property that returns an item from the collection based on an index, and a `_NewEnum` property that returns an enumerator for the collection."},{"content":"Optionally, collection interfaces can provide <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Remove<ept id=\"p2\">**</ept> methods to allow items to be inserted into or deleted from the collection, and a <bpt id=\"p3\">**</bpt>Clear<ept id=\"p3\">**</ept> method to remove all items.","pos":[1247,1434],"source":" Optionally, collection interfaces can provide **Add** and **Remove** methods to allow items to be inserted into or deleted from the collection, and a **Clear** method to remove all items."},{"content":"An <ph id=\"ph1\">`enumerator`</ph> is a COM object that provides an interface for iterating through items in a collection.","pos":[1441,1544],"source":"An `enumerator` is a COM object that provides an interface for iterating through items in a collection."},{"content":"Enumerator interfaces provide serial access to the elements of a collection via four required methods: <ph id=\"ph1\">`Next`</ph>, <bpt id=\"p1\">**</bpt>Skip<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Reset<ept id=\"p2\">**</ept>, and <ph id=\"ph2\">`Clone`</ph>.","pos":[1545,1689],"source":" Enumerator interfaces provide serial access to the elements of a collection via four required methods: `Next`, **Skip**, **Reset**, and `Clone`."},{"pos":[1696,1872],"content":"You can learn more about enumerator interfaces by reading about the archetypal (but entirely imaginary) <bpt id=\"p1\">[</bpt>IEnumXXXX<ept id=\"p1\">](https://msdn.microsoft.com/library/ms680089.aspx)</ept> interface.","source":"You can learn more about enumerator interfaces by reading about the archetypal (but entirely imaginary) [IEnumXXXX](https://msdn.microsoft.com/library/ms680089.aspx) interface."},{"content":"In This Section","pos":[1881,1896]},{"content":"ATL Collection and Enumerator Classes","pos":[1901,1938]},{"content":"Briefly describes and provides links to the ATL classes that will help you implement collections and enumerators.","pos":[1992,2105]},{"content":"Design Principles for Collection and Enumerator Interfaces","pos":[2113,2171]},{"content":"Discusses the different design principles behind each type of interface.","pos":[2246,2318]},{"content":"Implementing an STL-Based Collection","pos":[2326,2362]},{"content":"An extended example that walks you through the implementation of a Standard Template Library (STL)-based collection.","pos":[2415,2531]},{"content":"Related Sections","pos":[2540,2556]},{"content":"ATL","pos":[2561,2564]},{"content":"Provides links to conceptual topics on how to program using the Active Template Library.","pos":[2617,2705]},{"content":"ATLCollections Sample","pos":[2713,2734]},{"content":"A sample that demonstrates the use of <ph id=\"ph1\">`ICollectionOnSTLImpl`</ph> and <ph id=\"ph2\">`CComEnumOnSTL`</ph>, and the implementation of custom copy policy classes.","pos":[2765,2900],"source":" A sample that demonstrates the use of `ICollectionOnSTLImpl` and `CComEnumOnSTL`, and the implementation of custom copy policy classes."},{"content":"See Also","pos":[2909,2917]},{"content":"Concepts","pos":[2922,2930]}],"content":"---\ntitle: \"ATL Collections and Enumerators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"enumerator interfaces\"\n  - \"collections, ATL classes\"\n  - \"enumerators, ATL classes\"\n  - \"collection interfaces\"\nms.assetid: b2d37119-3ab2-4e0a-b65b-f377f07e4098\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ATL Collections and Enumerators\nA `collection` is a COM object that provides an interface that allows access to a group of data items (raw data or other objects). An interface that follows the standards for providing access to a group of objects is known as a *collection interface*.  \n  \n At a minimum, collection interfaces must provide a **Count** property that returns the number of items in the collection, an **Item** property that returns an item from the collection based on an index, and a `_NewEnum` property that returns an enumerator for the collection. Optionally, collection interfaces can provide **Add** and **Remove** methods to allow items to be inserted into or deleted from the collection, and a **Clear** method to remove all items.  \n  \n An `enumerator` is a COM object that provides an interface for iterating through items in a collection. Enumerator interfaces provide serial access to the elements of a collection via four required methods: `Next`, **Skip**, **Reset**, and `Clone`.  \n  \n You can learn more about enumerator interfaces by reading about the archetypal (but entirely imaginary) [IEnumXXXX](https://msdn.microsoft.com/library/ms680089.aspx) interface.  \n  \n## In This Section  \n [ATL Collection and Enumerator Classes](../atl/atl-collection-and-enumerator-classes.md)  \n Briefly describes and provides links to the ATL classes that will help you implement collections and enumerators.  \n  \n [Design Principles for Collection and Enumerator Interfaces](../atl/design-principles-for-collection-and-enumerator-interfaces.md)  \n Discusses the different design principles behind each type of interface.  \n  \n [Implementing an STL-Based Collection](../atl/implementing-an-stl-based-collection.md)  \n An extended example that walks you through the implementation of a Standard Template Library (STL)-based collection.  \n  \n## Related Sections  \n [ATL](../atl/active-template-library-atl-concepts.md)  \n Provides links to conceptual topics on how to program using the Active Template Library.  \n  \n [ATLCollections Sample](../visual-cpp-samples.md)  \n A sample that demonstrates the use of `ICollectionOnSTLImpl` and `CComEnumOnSTL`, and the implementation of custom copy policy classes.  \n  \n## See Also  \n [Concepts](../atl/active-template-library-atl-concepts.md)\n\n"}