{"nodes":[{"pos":[12,51],"content":"C Assignment Operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C Assignment Operators | Microsoft Docs","pos":[0,39]}]},{"content":"C Assignment Operators","pos":[1322,1344]},{"content":"An assignment operation assigns the value of the right-hand operand to the storage location named by the left-hand operand.","pos":[1345,1468]},{"content":"Therefore, the left-hand operand of an assignment operation must be a modifiable l-value.","pos":[1469,1558]},{"content":"After the assignment, an assignment expression has the value of the left operand but is not an l-value.","pos":[1559,1662]},{"content":"Syntax","pos":[1671,1677]},{"content":"<bpt id=\"p1\">*</bpt>assignment-expression<ept id=\"p1\">*</ept>:","pos":[1686,1710],"source":"*assignment-expression*:"},{"content":"conditional-expression","pos":[1715,1737]},{"content":"unary-expression assignment-operator assignment-expression","pos":[1746,1804]},{"content":"<bpt id=\"p1\">*</bpt>assignment-operator<ept id=\"p1\">*</ept>: one of","pos":[1812,1841],"source":"*assignment-operator*: one of"},{"content":"<bpt id=\"p1\"> **</bpt><ph id=\"ph1\">= \\*=</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`/=`</ph> <ph id=\"ph3\">`%=`</ph> <ph id=\"ph4\">`+=`</ph> <bpt id=\"p2\">**</bpt>–= &lt;<ph id=\"ph5\">\\&lt;</ph>= &gt;&gt;= &amp;=<ept id=\"p2\">**</ept>","pos":[1844,1888],"source":" **= \\*=** `/=` `%=` `+=` **–= <\\<= >>= &=**"},{"content":"The assignment operators in C can both transform and assign values in a single operation.","pos":[1905,1994]},{"content":"C provides the following assignment operators:","pos":[1995,2041]},{"content":"Operator","pos":[2048,2056]},{"content":"Operation Performed","pos":[2057,2076]},{"content":"Simple assignment","pos":[2132,2149]},{"content":"Multiplication assignment","pos":[2162,2187]},{"content":"Division assignment","pos":[2197,2216]},{"content":"Remainder assignment","pos":[2226,2246]},{"content":"Addition assignment","pos":[2256,2275]},{"content":"–=","pos":[2282,2284]},{"content":"Subtraction assignment","pos":[2287,2309]},{"content":"Left-shift assignment","pos":[2323,2344]},{"content":"Right-shift assignment","pos":[2357,2379]},{"content":"Bitwise-AND assignment","pos":[2391,2413]},{"content":"Bitwise-exclusive-OR assignment","pos":[2423,2454]},{"content":"Bitwise-inclusive-OR assignment","pos":[2469,2500]},{"content":"In assignment, the type of the right-hand value is converted to the type of the left-hand value, and the value is stored in the left operand after the assignment has taken place.","pos":[2508,2686]},{"content":"The left operand must not be an array, a function, or a constant.","pos":[2687,2752]},{"content":"The specific conversion path, which depends on the two types, is outlined in detail in <bpt id=\"p1\">[</bpt>Type Conversions<ept id=\"p1\">](../c-language/type-conversions-c.md)</ept>.","pos":[2753,2896],"source":" The specific conversion path, which depends on the two types, is outlined in detail in [Type Conversions](../c-language/type-conversions-c.md)."},{"content":"See Also","pos":[2905,2913]},{"content":"Assignment Operators","pos":[2918,2938]}],"content":"---\ntitle: \"C Assignment Operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"remainder assignment operator (%=)\"\n  - \"&= operator\"\n  - \"bitwise-AND assignment operator\"\n  - \"operators [C], assignment\"\n  - \"operators [C], shift\"\n  - \"^= operator, assignment operators\"\n  - \"+= operator\"\n  - \">>= operator\"\n  - \"|= operator\"\n  - \"division assignment operator\"\n  - \"subtraction operator\"\n  - \"right shift operators\"\n  - \"subtraction operator, C assignment operators\"\n  - \"= operator, assignment operators\"\n  - \"*= operator\"\n  - \">> operator\"\n  - \"%= operator\"\n  - \"assignment operators, C\"\n  - \"= operator\"\n  - \"assignment operators\"\n  - \"assignment conversions\"\n  - \"-= operator\"\n  - \"multiplication assignment operator (*=)\"\n  - \"shift operators, right\"\n  - \"/= operator\"\n  - \"operator >>=, C assignment operators\"\n  - \"<<= operator\"\nms.assetid: 11688dcb-c941-44e7-a636-3fc98e7dac40\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C Assignment Operators\nAn assignment operation assigns the value of the right-hand operand to the storage location named by the left-hand operand. Therefore, the left-hand operand of an assignment operation must be a modifiable l-value. After the assignment, an assignment expression has the value of the left operand but is not an l-value.  \n  \n **Syntax**  \n  \n *assignment-expression*:  \n *conditional-expression*  \n  \n *unary-expression assignment-operator assignment-expression*  \n  \n *assignment-operator*: one of  \n **= \\*=** `/=` `%=` `+=` **–= <\\<= >>= &=** `^=` `|=`  \n  \n The assignment operators in C can both transform and assign values in a single operation. C provides the following assignment operators:  \n  \n|Operator|Operation Performed|  \n|--------------|-------------------------|  \n|**=**|Simple assignment|  \n|**\\*=**|Multiplication assignment|  \n|`/=`|Division assignment|  \n|`%=`|Remainder assignment|  \n|`+=`|Addition assignment|  \n|**–=**|Subtraction assignment|  \n|**<\\<=**|Left-shift assignment|  \n|**>>=**|Right-shift assignment|  \n|**&=**|Bitwise-AND assignment|  \n|`^=`|Bitwise-exclusive-OR assignment|  \n|`&#124;=`|Bitwise-inclusive-OR assignment|  \n  \n In assignment, the type of the right-hand value is converted to the type of the left-hand value, and the value is stored in the left operand after the assignment has taken place. The left operand must not be an array, a function, or a constant. The specific conversion path, which depends on the two types, is outlined in detail in [Type Conversions](../c-language/type-conversions-c.md).  \n  \n## See Also  \n [Assignment Operators](../cpp/assignment-operators.md)"}