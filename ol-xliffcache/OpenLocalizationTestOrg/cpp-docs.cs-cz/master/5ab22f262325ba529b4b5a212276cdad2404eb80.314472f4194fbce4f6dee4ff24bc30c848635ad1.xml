{"nodes":[{"pos":[12,37],"content":"_heapmin | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_heapmin | Microsoft Docs","pos":[0,25]}]},{"pos":[1047,1055],"content":"_heapmin","linkify":"_heapmin","nodes":[{"content":"_heapmin","pos":[0,8]}]},{"content":"Releases unused heap memory to the operating system.","pos":[1056,1108]},{"pos":[1117,1123],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1171,1183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1187,1288],"content":"If successful, <ph id=\"ph1\">`_heapmin`</ph> returns 0; otherwise, the function returns –1 and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`ENOSYS`</ph>.","source":"If successful, `_heapmin` returns 0; otherwise, the function returns –1 and sets `errno` to `ENOSYS`."},{"pos":[1295,1471],"content":"For more information about this and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about this and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[1480,1487],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_heapmin`</ph> function minimizes the heap by releasing unused heap memory to the operating system.","pos":[1491,1590],"source":"The `_heapmin` function minimizes the heap by releasing unused heap memory to the operating system."},{"content":"If the operating system does not support <ph id=\"ph1\">`_heapmin`</ph>(for example, Windows 98), the function returns –1 and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`ENOSYS`</ph>.","pos":[1591,1722],"source":" If the operating system does not support `_heapmin`(for example, Windows 98), the function returns –1 and sets `errno` to `ENOSYS`."},{"pos":[1731,1743],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[1750,1757]},{"content":"Required header","pos":[1758,1773]},{"content":"Optional header","pos":[1774,1789]},{"content":"<ph id=\"ph1\">\\&lt;</ph>malloc.h&gt;","pos":[1867,1878],"source":"\\<malloc.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[1879,1889],"source":"\\<errno.h>"},{"pos":[1897,2015],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2024,2049],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[2053,2068]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2069,2116],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2117,2242],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[2251,2259],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Memory Allocation<ept id=\"p1\">](../../c-runtime-library/memory-allocation.md)</ept><ph id=\"ph1\"> </ph>","pos":[2263,2329],"source":"[Memory Allocation](../../c-runtime-library/memory-allocation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>free<ept id=\"p1\">](../../c-runtime-library/reference/free.md)</ept><ph id=\"ph1\"> </ph>","pos":[2332,2383],"source":" [free](../../c-runtime-library/reference/free.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_heapadd<ept id=\"p1\">](../../c-runtime-library/heapadd.md)</ept><ph id=\"ph1\"> </ph>","pos":[2386,2434],"source":" [_heapadd](../../c-runtime-library/heapadd.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_heapchk<ept id=\"p1\">](../../c-runtime-library/reference/heapchk.md)</ept><ph id=\"ph1\"> </ph>","pos":[2437,2495],"source":" [_heapchk](../../c-runtime-library/reference/heapchk.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_heapset<ept id=\"p1\">](../../c-runtime-library/heapset.md)</ept><ph id=\"ph1\"> </ph>","pos":[2498,2546],"source":" [_heapset](../../c-runtime-library/heapset.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_heapwalk<ept id=\"p1\">](../../c-runtime-library/reference/heapwalk.md)</ept><ph id=\"ph1\"> </ph>","pos":[2549,2609],"source":" [_heapwalk](../../c-runtime-library/reference/heapwalk.md) "},{"content":"<bpt id=\"p1\"> [</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept>","pos":[2612,2666],"source":" [malloc](../../c-runtime-library/reference/malloc.md)"}],"content":"---\ntitle: \"_heapmin | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_heapmin\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-heap-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_heapmin\"\n  - \"heapmin\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"heap memory\"\n  - \"minimizing heaps\"\n  - \"memory, releasing\"\n  - \"heaps, releasing unused memory\"\n  - \"_heapmin function\"\n  - \"heapmin function\"\nms.assetid: c0bccdf6-2d14-4d7b-a7ff-d6a17bdb410f\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _heapmin\nReleases unused heap memory to the operating system.  \n  \n## Syntax  \n  \n```  \nint _heapmin( void );  \n```  \n  \n## Return Value  \n If successful, `_heapmin` returns 0; otherwise, the function returns –1 and sets `errno` to `ENOSYS`.  \n  \n For more information about this and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_heapmin` function minimizes the heap by releasing unused heap memory to the operating system. If the operating system does not support `_heapmin`(for example, Windows 98), the function returns –1 and sets `errno` to `ENOSYS`.  \n  \n## Requirements  \n  \n|Routine|Required header|Optional header|  \n|-------------|---------------------|---------------------|  \n|`_heapmin`|\\<malloc.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../../c-runtime-library/memory-allocation.md)   \n [free](../../c-runtime-library/reference/free.md)   \n [_heapadd](../../c-runtime-library/heapadd.md)   \n [_heapchk](../../c-runtime-library/reference/heapchk.md)   \n [_heapset](../../c-runtime-library/heapset.md)   \n [_heapwalk](../../c-runtime-library/reference/heapwalk.md)   \n [malloc](../../c-runtime-library/reference/malloc.md)"}