{"nodes":[{"pos":[12,48],"content":"auto_gcroot::attach | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"auto_gcroot::attach | Microsoft Docs","pos":[0,36]}]},{"content":"auto_gcroot::attach","pos":[708,727]},{"pos":[728,762],"content":"Attach <ph id=\"ph1\">`auto_gcroot`</ph> to an object.","source":"Attach `auto_gcroot` to an object."},{"content":"Syntax","pos":[771,777]},{"content":"Parameters","pos":[1074,1084]},{"content":"The object to attach, or an <ph id=\"ph1\">`auto_gcroot`</ph> containing the object to attach.","pos":[1100,1174],"source":" The object to attach, or an `auto_gcroot` containing the object to attach."},{"content":"Return Value","pos":[1183,1195]},{"pos":[1199,1225],"content":"The current <ph id=\"ph1\">`auto_gcroot`</ph>.","source":"The current `auto_gcroot`."},{"content":"Remarks","pos":[1234,1241]},{"pos":[1245,1373],"content":"If <ph id=\"ph1\">`_right`</ph> is an <ph id=\"ph2\">`auto_gcroot`</ph>, it releases ownership of its object before the object is attached to the current <ph id=\"ph3\">`auto_gcroot`</ph>.","source":"If `_right` is an `auto_gcroot`, it releases ownership of its object before the object is attached to the current `auto_gcroot`."},{"content":"Example","pos":[1382,1389]},{"content":"Requirements","pos":[2918,2930]},{"pos":[2934,2972],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\auto_gcroot.h&gt;","source":"**Header file** \\<msclr\\auto_gcroot.h>"},{"pos":[2979,2998],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr","source":"**Namespace** msclr"},{"content":"See Also","pos":[3007,3015]},{"content":"auto_gcroot Members","pos":[3020,3039]},{"content":"auto_gcroot::operator=","pos":[3080,3102]},{"content":"auto_gcroot::release","pos":[3151,3171]}],"content":"---\ntitle: \"auto_gcroot::attach | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"auto_gcroot.attach\"\n  - \"auto_gcroot::attach\"\n  - \"msclr::auto_gcroot::attach\"\n  - \"msclr.auto_gcroot.attach\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"auto_gcroot::attach\"\nms.assetid: 996ede65-bcb5-41f2-bfbf-507f8a578241\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# auto_gcroot::attach\nAttach `auto_gcroot` to an object.  \n  \n## Syntax  \n  \n```  \nauto_gcroot<_element_type> & attach(  \n   _element_type _right  \n);  \nauto_gcroot<_element_type> & attach(  \n   auto_gcroot<_element_type> & _right  \n);  \ntemplate<typename _other_type>  \nauto_gcroot<_element_type> & attach(  \n   auto_gcroot<_other_type> & _right  \n);  \n```  \n  \n#### Parameters  \n `_right`  \n The object to attach, or an `auto_gcroot` containing the object to attach.  \n  \n## Return Value  \n The current `auto_gcroot`.  \n  \n## Remarks  \n If `_right` is an `auto_gcroot`, it releases ownership of its object before the object is attached to the current `auto_gcroot`.  \n  \n## Example  \n  \n```  \n// msl_auto_gcroot_attach.cpp  \n// compile with: /clr  \n#include <msclr\\auto_gcroot.h>  \n  \nusing namespace System;  \nusing namespace msclr;  \n  \nref class ClassA {  \nprotected:     \n   String^ m_s;  \npublic:  \n   ClassA( String^ s ) : m_s( s ) {  \n      Console::WriteLine( \"in ClassA constructor:\" + m_s );  \n   }  \n   ~ClassA() {  \n      Console::WriteLine( \"in ClassA destructor:\" + m_s );  \n   }  \n  \n   virtual void PrintHello() {  \n      Console::WriteLine( \"Hello from {0} A!\", m_s );  \n   }  \n};  \n  \nref class ClassB : ClassA {  \npublic:  \n   ClassB( String ^ s) : ClassA( s ) {}  \n   virtual void PrintHello() new {  \n      Console::WriteLine( \"Hello from {0} B!\", m_s );  \n   }  \n};  \n  \nint main() {  \n   auto_gcroot<ClassA^> a( gcnew ClassA( \"first\" ) );  \n   a->PrintHello();  \n   a.attach( gcnew ClassA( \"second\" ) ); // attach same type  \n   a->PrintHello();  \n   ClassA^ ha = gcnew ClassA( \"third\" );  \n   a.attach( ha ); // attach raw handle  \n   a->PrintHello();  \n   auto_gcroot<ClassB^> b( gcnew ClassB(\"fourth\") );  \n   b->PrintHello();  \n   a.attach( b ); // attach derived type  \n   a->PrintHello();  \n}  \n```  \n  \n```Output  \nin ClassA constructor:first  \nHello from first A!  \nin ClassA constructor:second  \nin ClassA destructor:first  \nHello from second A!  \nin ClassA constructor:third  \nin ClassA destructor:second  \nHello from third A!  \nin ClassA constructor:fourth  \nHello from fourth B!  \nin ClassA destructor:third  \nHello from fourth A!  \nin ClassA destructor:fourth  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\auto_gcroot.h>  \n  \n **Namespace** msclr  \n  \n## See Also  \n [auto_gcroot Members](../dotnet/auto-gcroot-members.md)   \n [auto_gcroot::operator=](../dotnet/auto-gcroot-operator-assign.md)   \n [auto_gcroot::release](../dotnet/auto-gcroot-release.md)"}