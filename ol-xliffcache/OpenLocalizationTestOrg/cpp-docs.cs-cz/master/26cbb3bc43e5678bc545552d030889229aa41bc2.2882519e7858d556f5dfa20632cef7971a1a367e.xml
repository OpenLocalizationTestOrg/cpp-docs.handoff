{"nodes":[{"pos":[12,52],"content":"CMFCToolBarButton Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCToolBarButton Class | Microsoft Docs","pos":[0,40]}]},{"pos":[625,648],"content":"CMFCToolBarButton Class","linkify":"CMFCToolBarButton Class","nodes":[{"content":"CMFCToolBarButton Class","pos":[0,23]}]},{"content":"Provides button functionality to toolbars.","pos":[649,691]},{"pos":[700,706],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[773,780],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[790,809],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[816,820]},{"content":"Description","pos":[821,832]},{"pos":[870,947],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::CMFCToolBarButton<ept id=\"p1\">](#cmfctoolbarbutton__cmfctoolbarbutton)</ept>","source":"[CMFCToolBarButton::CMFCToolBarButton](#cmfctoolbarbutton__cmfctoolbarbutton)"},{"pos":[948,1004],"content":"Constructs and initializes a <ph id=\"ph1\">`CMFCToolBarButton`</ph> object.","source":"Constructs and initializes a `CMFCToolBarButton` object."},{"content":"Destructor.","pos":[1049,1060]},{"pos":[1071,1085],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1092,1096]},{"content":"Description","pos":[1097,1108]},{"pos":[1146,1213],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::CanBeDropped<ept id=\"p1\">](#cmfctoolbarbutton__canbedropped)</ept>","source":"[CMFCToolBarButton::CanBeDropped](#cmfctoolbarbutton__canbedropped)"},{"content":"Specifies whether a user can position a button on a toolbar or menu during customization.","pos":[1214,1303]},{"pos":[1308,1373],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::CanBeStored<ept id=\"p1\">](#cmfctoolbarbutton__canbestored)</ept>","source":"[CMFCToolBarButton::CanBeStored](#cmfctoolbarbutton__canbestored)"},{"content":"Specifies whether the button can be stored.","pos":[1374,1417]},{"pos":[1422,1493],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::CanBeStretched<ept id=\"p1\">](#cmfctoolbarbutton__canbestretched)</ept>","source":"[CMFCToolBarButton::CanBeStretched](#cmfctoolbarbutton__canbestretched)"},{"content":"Specifies whether a user can stretch the button during customization.","pos":[1494,1563]},{"pos":[1568,1633],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::CompareWith<ept id=\"p1\">](#cmfctoolbarbutton__comparewith)</ept>","source":"[CMFCToolBarButton::CompareWith](#cmfctoolbarbutton__comparewith)"},{"pos":[1634,1702],"content":"Compares this instance with the provided <ph id=\"ph1\">`CMFCToolBarButton`</ph> object.","source":"Compares this instance with the provided `CMFCToolBarButton` object."},{"pos":[1707,1766],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::CopyFrom<ept id=\"p1\">](#cmfctoolbarbutton__copyfrom)</ept>","source":"[CMFCToolBarButton::CopyFrom](#cmfctoolbarbutton__copyfrom)"},{"content":"Copies the properties of another toolbar button to the current button.","pos":[1767,1837]},{"pos":[1842,1919],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::CreateFromOleData<ept id=\"p1\">](#cmfctoolbarbutton__createfromoledata)</ept>","source":"[CMFCToolBarButton::CreateFromOleData](#cmfctoolbarbutton__createfromoledata)"},{"pos":[1920,1999],"content":"Creates a <ph id=\"ph1\">`CMFCToolBarButton`</ph> object from the provided <ph id=\"ph2\">`COleDataObject`</ph> object.","source":"Creates a `CMFCToolBarButton` object from the provided `COleDataObject` object."},{"content":"Used by the framework to create a dynamic instance of this class type.","pos":[2038,2108]},{"pos":[2113,2180],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::EnableWindow<ept id=\"p1\">](#cmfctoolbarbutton__enablewindow)</ept>","source":"[CMFCToolBarButton::EnableWindow](#cmfctoolbarbutton__enablewindow)"},{"content":"Enables or disables mouse and keyboard input.","pos":[2181,2226]},{"pos":[2231,2310],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::ExportToMenuButton<ept id=\"p1\">](#cmfctoolbarbutton__exporttomenubutton)</ept>","source":"[CMFCToolBarButton::ExportToMenuButton](#cmfctoolbarbutton__exporttomenubutton)"},{"content":"Copies text from the toolbar button to a menu.","pos":[2311,2357]},{"pos":[2362,2441],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetClipboardFormat<ept id=\"p1\">](#cmfctoolbarbutton__getclipboardformat)</ept>","source":"[CMFCToolBarButton::GetClipboardFormat](#cmfctoolbarbutton__getclipboardformat)"},{"content":"Retrieves the global clipboard format for the application.","pos":[2442,2500]},{"pos":[2505,2562],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetHwnd<ept id=\"p1\">](#cmfctoolbarbutton__gethwnd)</ept>","source":"[CMFCToolBarButton::GetHwnd](#cmfctoolbarbutton__gethwnd)"},{"content":"Retrieves the window handle that is associated with the toolbar button.","pos":[2563,2634]},{"pos":[2639,2698],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetImage<ept id=\"p1\">](#cmfctoolbarbutton__getimage)</ept>","source":"[CMFCToolBarButton::GetImage](#cmfctoolbarbutton__getimage)"},{"content":"Retrieves the image index of the button.","pos":[2699,2739]},{"pos":[2744,2821],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetInvalidateRect<ept id=\"p1\">](#cmfctoolbarbutton__getinvalidaterect)</ept>","source":"[CMFCToolBarButton::GetInvalidateRect](#cmfctoolbarbutton__getinvalidaterect)"},{"content":"Retrieves the region of the client area of the button that must be redrawn.","pos":[2822,2897]},{"pos":[2902,2969],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetParentWnd<ept id=\"p1\">](#cmfctoolbarbutton__getparentwnd)</ept>","source":"[CMFCToolBarButton::GetParentWnd](#cmfctoolbarbutton__getparentwnd)"},{"content":"Retrieves the parent window of the button.","pos":[2970,3012]},{"pos":[3017,3100],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetProtectedCommands<ept id=\"p1\">](#cmfctoolbarbutton__getprotectedcommands)</ept>","source":"[CMFCToolBarButton::GetProtectedCommands](#cmfctoolbarbutton__getprotectedcommands)"},{"content":"Retrieves the list of commands that the user cannot customize.","pos":[3101,3163]},{"pos":[3168,3233],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetTextSize<ept id=\"p1\">](#cmfctoolbarbutton__gettextsize)</ept>","source":"[CMFCToolBarButton::GetTextSize](#cmfctoolbarbutton__gettextsize)"},{"content":"Retrieves the size of the button text.","pos":[3234,3272]},{"pos":[3277,3336],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::HasFocus<ept id=\"p1\">](#cmfctoolbarbutton__hasfocus)</ept>","source":"[CMFCToolBarButton::HasFocus](#cmfctoolbarbutton__hasfocus)"},{"content":"Determines whether the button has the current input focus.","pos":[3337,3395]},{"pos":[3400,3469],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::HaveHotBorder<ept id=\"p1\">](#cmfctoolbarbutton__havehotborder)</ept>","source":"[CMFCToolBarButton::HaveHotBorder](#cmfctoolbarbutton__havehotborder)"},{"content":"Determines whether a border of the button is displayed when a user selects the button.","pos":[3470,3556]},{"pos":[3561,3626],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsDrawImage<ept id=\"p1\">](#cmfctoolbarbutton__isdrawimage)</ept>","source":"[CMFCToolBarButton::IsDrawImage](#cmfctoolbarbutton__isdrawimage)"},{"content":"Determines whether an image is displayed on the button.","pos":[3627,3682]},{"pos":[3687,3750],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsDrawText<ept id=\"p1\">](#cmfctoolbarbutton__isdrawtext)</ept>","source":"[CMFCToolBarButton::IsDrawText](#cmfctoolbarbutton__isdrawtext)"},{"content":"Determines whether a text label is displayed on the button.","pos":[3751,3810]},{"pos":[3815,3884],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsDroppedDown<ept id=\"p1\">](#cmfctoolbarbutton__isdroppeddown)</ept>","source":"[CMFCToolBarButton::IsDroppedDown](#cmfctoolbarbutton__isdroppeddown)"},{"content":"Determines whether the button displays a submenu.","pos":[3885,3934]},{"pos":[3939,4002],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsEditable<ept id=\"p1\">](#cmfctoolbarbutton__iseditable)</ept>","source":"[CMFCToolBarButton::IsEditable](#cmfctoolbarbutton__iseditable)"},{"content":"Determines whether the button can be customized.","pos":[4003,4051]},{"pos":[4056,4121],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsExtraSize<ept id=\"p1\">](#cmfctoolbarbutton__isextrasize)</ept>","source":"[CMFCToolBarButton::IsExtraSize](#cmfctoolbarbutton__isextrasize)"},{"content":"Determines whether the button can be displayed with an extended border.","pos":[4122,4193]},{"pos":[4198,4269],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsFirstInGroup<ept id=\"p1\">](#cmfctoolbarbutton__isfirstingroup)</ept>","source":"[CMFCToolBarButton::IsFirstInGroup](#cmfctoolbarbutton__isfirstingroup)"},{"content":"Determines whether the button is in the first position in its button group.","pos":[4270,4345]},{"pos":[4350,4409],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsHidden<ept id=\"p1\">](#cmfctoolbarbutton__ishidden)</ept>","source":"[CMFCToolBarButton::IsHidden](#cmfctoolbarbutton__ishidden)"},{"content":"Determines whether the button is hidden.","pos":[4410,4450]},{"pos":[4455,4522],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsHorizontal<ept id=\"p1\">](#cmfctoolbarbutton__ishorizontal)</ept>","source":"[CMFCToolBarButton::IsHorizontal](#cmfctoolbarbutton__ishorizontal)"},{"content":"Determines whether the button is located on a horizontal toolbar.","pos":[4523,4588]},{"pos":[4593,4662],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsLastInGroup<ept id=\"p1\">](#cmfctoolbarbutton__islastingroup)</ept>","source":"[CMFCToolBarButton::IsLastInGroup](#cmfctoolbarbutton__islastingroup)"},{"content":"Specifies whether the button is in the last position in its button group.","pos":[4663,4736]},{"pos":[4741,4800],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsLocked<ept id=\"p1\">](#cmfctoolbarbutton__islocked)</ept>","source":"[CMFCToolBarButton::IsLocked](#cmfctoolbarbutton__islocked)"},{"content":"Determines whether the button is on a locked (non-customizable) toolbar.","pos":[4801,4873]},{"pos":[4878,4939],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsOwnerOf<ept id=\"p1\">](#cmfctoolbarbutton__isownerof)</ept>","source":"[CMFCToolBarButton::IsOwnerOf](#cmfctoolbarbutton__isownerof)"},{"content":"Determines whether the button is the owner of the provided window handle.","pos":[4940,5013]},{"pos":[5018,5079],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsVisible<ept id=\"p1\">](#cmfctoolbarbutton__isvisible)</ept>","source":"[CMFCToolBarButton::IsVisible](#cmfctoolbarbutton__isvisible)"},{"content":"Determines whether the toolbar button is visible.","pos":[5080,5129]},{"pos":[5134,5207],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsWindowVisible<ept id=\"p1\">](#cmfctoolbarbutton__iswindowvisible)</ept>","source":"[CMFCToolBarButton::IsWindowVisible](#cmfctoolbarbutton__iswindowvisible)"},{"content":"Determines whether the underlying window handle of the button is visible.","pos":[5208,5281]},{"pos":[5286,5355],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::NotifyCommand<ept id=\"p1\">](#cmfctoolbarbutton__notifycommand)</ept>","source":"[CMFCToolBarButton::NotifyCommand](#cmfctoolbarbutton__notifycommand)"},{"pos":[5356,5480],"content":"Specifies whether the button processes the <bpt id=\"p1\">[</bpt>WM_COMMAND<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message.","source":"Specifies whether the button processes the [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message."},{"pos":[5485,5568],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnAddToCustomizePage<ept id=\"p1\">](#cmfctoolbarbutton__onaddtocustomizepage)</ept>","source":"[CMFCToolBarButton::OnAddToCustomizePage](#cmfctoolbarbutton__onaddtocustomizepage)"},{"pos":[5569,5648],"content":"Called by the framework when the button is added to a <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","source":"Called by the framework when the button is added to a **Customize** dialog box."},{"pos":[5653,5720],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnBeforeDrag<ept id=\"p1\">](#cmfctoolbarbutton__onbeforedrag)</ept>","source":"[CMFCToolBarButton::OnBeforeDrag](#cmfctoolbarbutton__onbeforedrag)"},{"content":"Specifies whether the button can be dragged.","pos":[5721,5765]},{"pos":[5770,5837],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnBeforeDrop<ept id=\"p1\">](#cmfctoolbarbutton__onbeforedrop)</ept>","source":"[CMFCToolBarButton::OnBeforeDrop](#cmfctoolbarbutton__onbeforedrop)"},{"content":"Specifies whether a user can drop the button onto the target toolbar.","pos":[5838,5907]},{"pos":[5912,5985],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnCalculateSize<ept id=\"p1\">](#cmfctoolbarbutton__oncalculatesize)</ept>","source":"[CMFCToolBarButton::OnCalculateSize](#cmfctoolbarbutton__oncalculatesize)"},{"content":"Called by the framework to calculate the size of the button for the specified device context and docking state.","pos":[5986,6097]},{"pos":[6102,6169],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnCancelMode<ept id=\"p1\">](#cmfctoolbarbutton__oncancelmode)</ept>","source":"[CMFCToolBarButton::OnCancelMode](#cmfctoolbarbutton__oncancelmode)"},{"pos":[6170,6292],"content":"Called by the framework to handle the <bpt id=\"p1\">[</bpt>WM_CANCELMODE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632615)</ept> message.","source":"Called by the framework to handle the [WM_CANCELMODE](http://msdn.microsoft.com/library/windows/desktop/ms632615) message."},{"pos":[6297,6374],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id=\"p1\">](#cmfctoolbarbutton__onchangeparentwnd)</ept>","source":"[CMFCToolBarButton::OnChangeParentWnd](#cmfctoolbarbutton__onchangeparentwnd)"},{"content":"Called by the framework when the button is inserted into a new toolbar.","pos":[6375,6446]},{"pos":[6451,6508],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnClick<ept id=\"p1\">](#cmfctoolbarbutton__onclick)</ept>","source":"[CMFCToolBarButton::OnClick](#cmfctoolbarbutton__onclick)"},{"content":"Called by the framework when the user clicks the mouse button.","pos":[6509,6571]},{"pos":[6576,6637],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnClickUp<ept id=\"p1\">](#cmfctoolbarbutton__onclickup)</ept>","source":"[CMFCToolBarButton::OnClickUp](#cmfctoolbarbutton__onclickup)"},{"content":"Called by the framework when the user releases the mouse button.","pos":[6638,6702]},{"pos":[6707,6776],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnContextHelp<ept id=\"p1\">](#cmfctoolbarbutton__oncontexthelp)</ept>","source":"[CMFCToolBarButton::OnContextHelp](#cmfctoolbarbutton__oncontexthelp)"},{"pos":[6777,6860],"content":"Called by the framework when the parent toolbar handles a <ph id=\"ph1\">`WM_HELPHITTEST`</ph> message.","source":"Called by the framework when the parent toolbar handles a `WM_HELPHITTEST` message."},{"pos":[6865,6928],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnCtlColor<ept id=\"p1\">](#cmfctoolbarbutton__onctlcolor)</ept>","source":"[CMFCToolBarButton::OnCtlColor](#cmfctoolbarbutton__onctlcolor)"},{"pos":[6929,7009],"content":"Called by the framework when the parent toolbar handles a <ph id=\"ph1\">`WM_CTLCOLOR`</ph> message.","source":"Called by the framework when the parent toolbar handles a `WM_CTLCOLOR` message."},{"pos":[7014,7087],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnCustomizeMenu<ept id=\"p1\">](#cmfctoolbarbutton__oncustomizemenu)</ept>","source":"[CMFCToolBarButton::OnCustomizeMenu](#cmfctoolbarbutton__oncustomizemenu)"},{"content":"Allows the button to modify the provided menu when the application displays a shortcut menu on the parent toolbar.","pos":[7088,7202]},{"pos":[7207,7266],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnDblClk<ept id=\"p1\">](#cmfctoolbarbutton__ondblclk)</ept>","source":"[CMFCToolBarButton::OnDblClk](#cmfctoolbarbutton__ondblclk)"},{"pos":[7267,7412],"content":"Called by the framework when the parent toolbar handles a <bpt id=\"p1\">[</bpt>WM_LBUTTONDBLCLK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645606)</ept> message.","source":"Called by the framework when the parent toolbar handles a [WM_LBUTTONDBLCLK](http://msdn.microsoft.com/library/windows/desktop/ms645606) message."},{"pos":[7417,7472],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnDraw<ept id=\"p1\">](#cmfctoolbarbutton__ondraw)</ept>","source":"[CMFCToolBarButton::OnDraw](#cmfctoolbarbutton__ondraw)"},{"content":"Called by the framework to draw the button by using the specified styles and options.","pos":[7473,7558]},{"pos":[7563,7648],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnDrawOnCustomizeList<ept id=\"p1\">](#cmfctoolbarbutton__ondrawoncustomizelist)</ept>","source":"[CMFCToolBarButton::OnDrawOnCustomizeList](#cmfctoolbarbutton__ondrawoncustomizelist)"},{"pos":[7649,7749],"content":"Called by the framework to draw the button in the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> pane of the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> dialog box.","source":"Called by the framework to draw the button in the **Commands** pane of the **Customize** dialog box."},{"pos":[7754,7841],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnGetCustomToolTipText<ept id=\"p1\">](#cmfctoolbarbutton__ongetcustomtooltiptext)</ept>","source":"[CMFCToolBarButton::OnGetCustomToolTipText](#cmfctoolbarbutton__ongetcustomtooltiptext)"},{"content":"Called by the framework to retrieve the custom tooltip text for the button.","pos":[7842,7917]},{"pos":[7922,8005],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnGlobalFontsChanged<ept id=\"p1\">](#cmfctoolbarbutton__onglobalfontschanged)</ept>","source":"[CMFCToolBarButton::OnGlobalFontsChanged](#cmfctoolbarbutton__onglobalfontschanged)"},{"content":"Called by the framework when the global font has changed.","pos":[8006,8063]},{"pos":[8068,8123],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnMove<ept id=\"p1\">](#cmfctoolbarbutton__onmove)</ept>","source":"[CMFCToolBarButton::OnMove](#cmfctoolbarbutton__onmove)"},{"content":"Called by the framework when the parent toolbar moves.","pos":[8124,8178]},{"pos":[8183,8238],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnShow<ept id=\"p1\">](#cmfctoolbarbutton__onshow)</ept>","source":"[CMFCToolBarButton::OnShow](#cmfctoolbarbutton__onshow)"},{"content":"Called by the framework when the button becomes visible or invisible.","pos":[8239,8308]},{"pos":[8313,8368],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnSize<ept id=\"p1\">](#cmfctoolbarbutton__onsize)</ept>","source":"[CMFCToolBarButton::OnSize](#cmfctoolbarbutton__onsize)"},{"content":"Called by the framework when the parent toolbar changes its size or position and this change requires the button to change size.","pos":[8369,8497]},{"pos":[8502,8571],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnToolHitTest<ept id=\"p1\">](#cmfctoolbarbutton__ontoolhittest)</ept>","source":"[CMFCToolBarButton::OnToolHitTest](#cmfctoolbarbutton__ontoolhittest)"},{"content":"Called by the framework when the parent toolbar must determine whether a point is in the bounding rectangle of the button.","pos":[8572,8694]},{"pos":[8699,8772],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnUpdateToolTip<ept id=\"p1\">](#cmfctoolbarbutton__onupdatetooltip)</ept>","source":"[CMFCToolBarButton::OnUpdateToolTip](#cmfctoolbarbutton__onupdatetooltip)"},{"content":"Called by the framework when the parent toolbar updates its tooltip text.","pos":[8773,8846]},{"pos":[8851,8916],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::PrepareDrag<ept id=\"p1\">](#cmfctoolbarbutton__preparedrag)</ept>","source":"[CMFCToolBarButton::PrepareDrag](#cmfctoolbarbutton__preparedrag)"},{"content":"Called by the framework when the button is about to perform a drag-and-drop operation.","pos":[8917,9003]},{"pos":[9008,9059],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::Rect<ept id=\"p1\">](#cmfctoolbarbutton__rect)</ept>","source":"[CMFCToolBarButton::Rect](#cmfctoolbarbutton__rect)"},{"content":"Retrieves the bounding rectangle of the button.","pos":[9060,9107]},{"pos":[9112,9193],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::ResetImageToDefault<ept id=\"p1\">](#cmfctoolbarbutton__resetimagetodefault)</ept>","source":"[CMFCToolBarButton::ResetImageToDefault](#cmfctoolbarbutton__resetimagetodefault)"},{"content":"Sets to the default value the image that is associated with the button.","pos":[9194,9265]},{"pos":[9270,9337],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::SaveBarState<ept id=\"p1\">](#cmfctoolbarbutton__savebarstate)</ept>","source":"[CMFCToolBarButton::SaveBarState](#cmfctoolbarbutton__savebarstate)"},{"content":"Saves the state of the toolbar button.","pos":[9338,9376]},{"pos":[9381,9442],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::Serialize<ept id=\"p1\">](#cmfctoolbarbutton__serialize)</ept>","source":"[CMFCToolBarButton::Serialize](#cmfctoolbarbutton__serialize)"},{"content":"Reads this object from an archive or writes it to an archive.","pos":[9443,9504]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CObject::Serialize<ept id=\"p1\">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept>.)","pos":[9505,9595],"source":" (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)"},{"pos":[9600,9663],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetACCData<ept id=\"p1\">](#cmfctoolbarbutton__setaccdata)</ept>","source":"[CMFCToolBarButton::SetACCData](#cmfctoolbarbutton__setaccdata)"},{"pos":[9664,9763],"content":"Populates the provided <ph id=\"ph1\">`CAccessibilityData`</ph> object with accessibility data from the toolbar button.","source":"Populates the provided `CAccessibilityData` object with accessibility data from the toolbar button."},{"pos":[9768,9855],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetClipboardFormatName<ept id=\"p1\">](#cmfctoolbarbutton__setclipboardformatname)</ept>","source":"[CMFCToolBarButton::SetClipboardFormatName](#cmfctoolbarbutton__setclipboardformatname)"},{"content":"Renames the global clipboard format.","pos":[9856,9892]},{"pos":[9897,9956],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetImage<ept id=\"p1\">](#cmfctoolbarbutton__setimage)</ept>","source":"[CMFCToolBarButton::SetImage](#cmfctoolbarbutton__setimage)"},{"content":"Sets the image index of the button.","pos":[9957,9992]},{"pos":[9997,10080],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetProtectedCommands<ept id=\"p1\">](#cmfctoolbarbutton__setprotectedcommands)</ept>","source":"[CMFCToolBarButton::SetProtectedCommands](#cmfctoolbarbutton__setprotectedcommands)"},{"content":"Sets the list of commands that the user cannot customize.","pos":[10081,10138]},{"pos":[10143,10202],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetRadio<ept id=\"p1\">](#cmfctoolbarbutton__setradio)</ept>","source":"[CMFCToolBarButton::SetRadio](#cmfctoolbarbutton__setradio)"},{"content":"Called by the framework when a button changes its checked state.","pos":[10203,10267]},{"pos":[10272,10329],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetRect<ept id=\"p1\">](#cmfctoolbarbutton__setrect)</ept>","source":"[CMFCToolBarButton::SetRect](#cmfctoolbarbutton__setrect)"},{"content":"Sets the bounding rectangle of the button.","pos":[10330,10372]},{"pos":[10377,10436],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetStyle<ept id=\"p1\">](#cmfctoolbarbutton__setstyle)</ept>","source":"[CMFCToolBarButton::SetStyle](#cmfctoolbarbutton__setstyle)"},{"content":"Sets the style of the button.","pos":[10437,10466]},{"pos":[10471,10534],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetVisible<ept id=\"p1\">](#cmfctoolbarbutton__setvisible)</ept>","source":"[CMFCToolBarButton::SetVisible](#cmfctoolbarbutton__setvisible)"},{"content":"Specifies whether the button is visible.","pos":[10535,10575]},{"pos":[10580,10631],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::Show<ept id=\"p1\">](#cmfctoolbarbutton__show)</ept>","source":"[CMFCToolBarButton::Show](#cmfctoolbarbutton__show)"},{"content":"Shows or hides the button.","pos":[10632,10658]},{"pos":[10669,10681],"content":"Data Members","linkify":"Data Members","nodes":[{"content":"Data Members","pos":[0,12]}]},{"content":"Name","pos":[10688,10692]},{"content":"Description","pos":[10693,10704]},{"pos":[10742,10801],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_bImage<ept id=\"p1\">](#cmfctoolbarbutton__m_bimage)</ept>","source":"[CMFCToolBarButton::m_bImage](#cmfctoolbarbutton__m_bimage)"},{"content":"Specifies whether an image is displayed on the button.","pos":[10802,10856]},{"pos":[10861,10918],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_bText<ept id=\"p1\">](#cmfctoolbarbutton__m_btext)</ept>","source":"[CMFCToolBarButton::m_bText](#cmfctoolbarbutton__m_btext)"},{"content":"Specifies whether a text label is displayed on the button.","pos":[10919,10977]},{"pos":[10982,11049],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_bTextBelow<ept id=\"p1\">](#cmfctoolbarbutton__m_btextbelow)</ept>","source":"[CMFCToolBarButton::m_bTextBelow](#cmfctoolbarbutton__m_btextbelow)"},{"content":"Specifies whether the text label is displayed underneath the image on the button.","pos":[11050,11131]},{"pos":[11136,11205],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_bUserButton<ept id=\"p1\">](#cmfctoolbarbutton__m_buserbutton)</ept>","source":"[CMFCToolBarButton::m_bUserButton](#cmfctoolbarbutton__m_buserbutton)"},{"content":"Specifies whether the button has a user-defined image.","pos":[11206,11260]},{"pos":[11265,11332],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_bWholeText<ept id=\"p1\">](#cmfctoolbarbutton__m_bwholetext)</ept>","source":"[CMFCToolBarButton::m_bWholeText](#cmfctoolbarbutton__m_bwholetext)"},{"content":"Specifies whether the button displays its full text label even if it does not fit in the bounding rectangle.","pos":[11333,11441]},{"pos":[11446,11503],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_bWrap<ept id=\"p1\">](#cmfctoolbarbutton__m_bwrap)</ept>","source":"[CMFCToolBarButton::m_bWrap](#cmfctoolbarbutton__m_bwrap)"},{"content":"Specifies whether the button next to a separator will be put on the next row.","pos":[11504,11581]},{"pos":[11586,11651],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_bWrapText<ept id=\"p1\">](#cmfctoolbarbutton__m_bwraptext)</ept>","source":"[CMFCToolBarButton::m_bWrapText](#cmfctoolbarbutton__m_bwraptext)"},{"content":"Specifies whether multi-line text labels are enabled.","pos":[11652,11705]},{"pos":[11710,11763],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_nID<ept id=\"p1\">](#cmfctoolbarbutton__m_nid)</ept>","source":"[CMFCToolBarButton::m_nID](#cmfctoolbarbutton__m_nid)"},{"content":"The command ID of the button.","pos":[11764,11793]},{"pos":[11798,11857],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_nStyle<ept id=\"p1\">](#cmfctoolbarbutton__m_nstyle)</ept>","source":"[CMFCToolBarButton::m_nStyle](#cmfctoolbarbutton__m_nstyle)"},{"content":"The style of the button.","pos":[11858,11882]},{"pos":[11887,11948],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_strText<ept id=\"p1\">](#cmfctoolbarbutton__m_strtext)</ept>","source":"[CMFCToolBarButton::m_strText](#cmfctoolbarbutton__m_strtext)"},{"content":"The text label of the button.","pos":[11949,11978]},{"pos":[11988,11995],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A <ph id=\"ph1\">`CMFCToolbarButton`</ph> object is a control that resides on a toolbar.","pos":[11999,12067],"source":"A `CMFCToolbarButton` object is a control that resides on a toolbar."},{"content":"Its behavior resembles that of an ordinary button.","pos":[12068,12118]},{"content":"You can assign an image and a text label to this object.","pos":[12119,12175]},{"content":"A toolbar button can also have a command ID.","pos":[12176,12220]},{"content":"When the user clicks the toolbar button, the framework executes the command that this ID specifies.","pos":[12221,12320]},{"content":"Typically, toolbar buttons can be customized: the user can drag buttons from one toolbar to another, and copy, paste, delete, and edit text labels and images.","pos":[12327,12485]},{"content":"To prevent the user from customizing the toolbar, you can lock the toolbar in one of two ways.","pos":[12486,12580]},{"content":"Either set the <ph id=\"ph1\">`bLocked`</ph> flag to <ph id=\"ph2\">`TRUE`</ph> when you call <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__loadtoolbar)</ept>, or add the command ID of an individual button to the global list of protected commands by using the <bpt id=\"p2\">[</bpt>CMFCToolBarButton::SetProtectedCommands<ept id=\"p2\">](#cmfctoolbarbutton__setprotectedcommands)</ept> method.","pos":[12581,12921],"source":" Either set the `bLocked` flag to `TRUE` when you call [CMFCToolBar::LoadToolBar](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__loadtoolbar), or add the command ID of an individual button to the global list of protected commands by using the [CMFCToolBarButton::SetProtectedCommands](#cmfctoolbarbutton__setprotectedcommands) method."},{"content":"<ph id=\"ph1\">`CMFCToolBarButton`</ph> objects display images from the global collections of toolbar images in the application.","pos":[12928,13036],"source":"`CMFCToolBarButton` objects display images from the global collections of toolbar images in the application."},{"content":"These collections are maintained by the parent toolbar, <bpt id=\"p1\">[</bpt>CMFCToolBar Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept>.","pos":[13037,13155],"source":" These collections are maintained by the parent toolbar, [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CMFCToolBarImages Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept>.","pos":[13156,13256],"source":" For more information, see [CMFCToolBarImages Class](../../mfc/reference/cmfctoolbarimages-class.md)."},{"content":"When the user clicks a toolbar button, its parent toolbar processes the mouse message and communicates the appropriate actions to the button.","pos":[13263,13404]},{"content":"If the button has a valid command ID, the parent toolbar sends the <ph id=\"ph1\">`WM_COMMAND`</ph> message to the parent frame.","pos":[13405,13513],"source":" If the button has a valid command ID, the parent toolbar sends the `WM_COMMAND` message to the parent frame."},{"pos":[13520,13876],"content":"The <ph id=\"ph1\">`CMFCToolBarButton`</ph> class is the base class for other toolbar button classes, such as <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept>, <bpt id=\"p2\">[</bpt>CMFCToolBarEditBoxButton Class<ept id=\"p2\">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept>, and <bpt id=\"p3\">[</bpt>CMFCToolBarComboBoxButton Class<ept id=\"p3\">](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md)</ept>.","source":"The `CMFCToolBarButton` class is the base class for other toolbar button classes, such as [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md), [CMFCToolBarEditBoxButton Class](../../mfc/reference/cmfctoolbareditboxbutton-class.md), and [CMFCToolBarComboBoxButton Class](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md)."},{"pos":[13885,13892],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to configure a <ph id=\"ph1\">`CMFCToolBarButton`</ph> object by using various methods in the <ph id=\"ph2\">`CMFCToolBarButton`</ph> class.","pos":[13896,14035],"source":"The following example demonstrates how to configure a `CMFCToolBarButton` object by using various methods in the `CMFCToolBarButton` class."},{"content":"The example illustrates how to enable the mouse and keyboard input, set the image index of the button, set the bounding rectangle of the button, and make the button visible.","pos":[14036,14209]},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Tab Control sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[14210,14293],"source":" This code snippet is part of the [Tab Control sample](../../visual-cpp-samples.md)."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_TabControl#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmfctoolbarbutton-class_1.cpp)</ept><ept id=\"p1\">]</ept>","pos":[14300,14400],"source":"[!code-cpp[NVC_MFC_TabControl#1](../../mfc/reference/codesnippet/cpp/cmfctoolbarbutton-class_1.cpp)]"},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_TabControl#2<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmfctoolbarbutton-class_2.cpp)</ept><ept id=\"p1\">]</ept>","pos":[14403,14503],"source":"[!code-cpp[NVC_MFC_TabControl#2](../../mfc/reference/codesnippet/cpp/cmfctoolbarbutton-class_2.cpp)]"},{"pos":[14512,14533],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[14537,14584],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[14591,14658],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept>","source":"[CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)"},{"pos":[14667,14679],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[14683,14713],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxtoolbarbutton.h","source":"**Header:** afxtoolbarbutton.h"},{"pos":[14723,14802],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__canbedropped\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::CanBeDropped","linkify":"<a name=\"cmfctoolbarbutton__canbedropped\"></a>  CMFCToolBarButton::CanBeDropped","source":"<a name=\"cmfctoolbarbutton__canbedropped\"></a>  CMFCToolBarButton::CanBeDropped"},{"content":"Specifies whether a user can position a button on a toolbar or menu during customization.","pos":[14806,14895]},{"pos":[14970,14980],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pToolbar`</ph>","pos":[14984,14999],"source":"[in] `pToolbar`"},{"content":"Unused.","pos":[15003,15010]},{"pos":[15020,15032],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15036,15063],"content":"This method returns <ph id=\"ph1\">`TRUE`</ph>.","source":"This method returns `TRUE`."},{"pos":[15073,15080],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, a toolbar button can be dropped on every customizable (that is, non-locked) toolbar.","pos":[15084,15180]},{"content":"The default implementation of this method returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[15187,15244],"source":"The default implementation of this method returns `TRUE`."},{"content":"Override this method and return <ph id=\"ph1\">`FALSE`</ph> if you want to prevent the user from repositioning the button.","pos":[15245,15347],"source":" Override this method and return `FALSE` if you want to prevent the user from repositioning the button."},{"pos":[15357,15434],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__canbestored\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::CanBeStored","linkify":"<a name=\"cmfctoolbarbutton__canbestored\"></a>  CMFCToolBarButton::CanBeStored","source":"<a name=\"cmfctoolbarbutton__canbestored\"></a>  CMFCToolBarButton::CanBeStored"},{"content":"Determines whether the button can be stored.","pos":[15438,15482]},{"pos":[15544,15556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15560,15587],"content":"This method returns <ph id=\"ph1\">`TRUE`</ph>.","source":"This method returns `TRUE`."},{"pos":[15597,15604],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework uses this method to determine whether the button can participate in a drag-and-drop operation.","pos":[15608,15716]},{"content":"The default implementation returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[15723,15765],"source":"The default implementation returns `TRUE`."},{"content":"Override this method if your button cannot be stored as part of a drag-and-drop operation.","pos":[15766,15856]},{"content":"For more information about drag-and-drop operations, see <bpt id=\"p1\">[</bpt>Drag and Drop (OLE)<ept id=\"p1\">](../../mfc/drag-and-drop-ole.md)</ept>.","pos":[15857,15968],"source":" For more information about drag-and-drop operations, see [Drag and Drop (OLE)](../../mfc/drag-and-drop-ole.md)."},{"pos":[15978,16061],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__canbestretched\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::CanBeStretched","linkify":"<a name=\"cmfctoolbarbutton__canbestretched\"></a>  CMFCToolBarButton::CanBeStretched","source":"<a name=\"cmfctoolbarbutton__canbestretched\"></a>  CMFCToolBarButton::CanBeStretched"},{"content":"Specifies whether a user can stretch the button during customization.","pos":[16065,16134]},{"pos":[16199,16211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16215,16243],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph>.","source":"This method returns `FALSE`."},{"pos":[16253,16260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the framework to determine whether the button can be stretched in customization mode.","pos":[16264,16372]},{"content":"The default implementation of this method returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[16379,16437],"source":"The default implementation of this method returns `FALSE`."},{"content":"Override this method to return <ph id=\"ph1\">`TRUE`</ph> for a variable-width control such as a combo box or slider.","pos":[16438,16535],"source":" Override this method to return `TRUE` for a variable-width control such as a combo box or slider."},{"pos":[16542,16697],"content":"For more information about customization mode, see <bpt id=\"p1\">[</bpt>CMFCToolBar::SetCustomizeMode<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode)</ept>.","source":"For more information about customization mode, see [CMFCToolBar::SetCustomizeMode](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode)."},{"pos":[16707,16796],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__cmfctoolbarbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::CMFCToolBarButton","linkify":"<a name=\"cmfctoolbarbutton__cmfctoolbarbutton\"></a>  CMFCToolBarButton::CMFCToolBarButton","source":"<a name=\"cmfctoolbarbutton__cmfctoolbarbutton\"></a>  CMFCToolBarButton::CMFCToolBarButton"},{"pos":[16800,16856],"content":"Constructs and initializes a <ph id=\"ph1\">`CMFCToolBarButton`</ph> object.","source":"Constructs and initializes a `CMFCToolBarButton` object."},{"pos":[17019,17029],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiID`</ph>","pos":[17033,17044],"source":"[in] `uiID`"},{"content":"The command ID of the button.","pos":[17048,17077]},{"content":"[in] <ph id=\"ph1\">`iImage`</ph>","pos":[17084,17097],"source":"[in] `iImage`"},{"content":"The image index of the button in the collection of images.","pos":[17101,17159]},{"content":"[in] <ph id=\"ph1\">`lpszText`</ph>","pos":[17166,17181],"source":"[in] `lpszText`"},{"content":"The text label of the button.","pos":[17185,17214]},{"content":"Can be <ph id=\"ph1\">`NULL`</ph>.","pos":[17215,17229],"source":" Can be `NULL`."},{"content":"[in] <ph id=\"ph1\">`bUserButton`</ph>","pos":[17236,17254],"source":"[in] `bUserButton`"},{"content":"A Boolean value that determines whether the button is user-defined.","pos":[17258,17325]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the button is user-defined.","pos":[17326,17382],"source":" If this parameter is `TRUE`, the button is user-defined."},{"content":"Otherwise, the button image is loaded from a resource.","pos":[17383,17437]},{"content":"[in] <ph id=\"ph1\">`bLocked`</ph>","pos":[17444,17458],"source":"[in] `bLocked`"},{"content":"A Boolean value that determines whether the button can be customized.","pos":[17462,17531]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the button cannot be customized.","pos":[17532,17593],"source":" If this parameter is `TRUE`, the button cannot be customized."},{"content":"Otherwise, the button can be customized.","pos":[17594,17634]},{"pos":[17644,17721],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__comparewith\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::CompareWith","linkify":"<a name=\"cmfctoolbarbutton__comparewith\"></a>  CMFCToolBarButton::CompareWith","source":"<a name=\"cmfctoolbarbutton__comparewith\"></a>  CMFCToolBarButton::CompareWith"},{"pos":[17725,17793],"content":"Compares this instance with the provided <ph id=\"ph1\">`CMFCToolBarButton`</ph> object.","source":"Compares this instance with the provided `CMFCToolBarButton` object."},{"pos":[17885,17895],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`other`</ph>","pos":[17899,17911],"source":"[in] `other`"},{"content":"Reference to the object to compare with this instance.","pos":[17915,17969]},{"pos":[17979,17991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the provided object equals the value of this instance; otherwise, 0.","pos":[17995,18074]},{"pos":[18084,18091],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation determines whether the command ID of the provided object equals the command ID of this instance.","pos":[18095,18218]},{"content":"Override this method if you must perform additional processing to determine whether two <ph id=\"ph1\">`CMFCToolBarButton`</ph> objects are equal.","pos":[18219,18345],"source":" Override this method if you must perform additional processing to determine whether two `CMFCToolBarButton` objects are equal."},{"pos":[18355,18426],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__copyfrom\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::CopyFrom","linkify":"<a name=\"cmfctoolbarbutton__copyfrom\"></a>  CMFCToolBarButton::CopyFrom","source":"<a name=\"cmfctoolbarbutton__copyfrom\"></a>  CMFCToolBarButton::CopyFrom"},{"content":"Copies the properties of another toolbar button to the current button.","pos":[18430,18500]},{"pos":[18578,18588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`src`</ph>","pos":[18592,18602],"source":"[in] `src`"},{"content":"A reference to the source button from which to copy.","pos":[18606,18658]},{"pos":[18668,18675],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to copy another toolbar button to this toolbar button.","pos":[18679,18750]},{"pos":[18760,18849],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__createfromoledata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::CreateFromOleData","linkify":"<a name=\"cmfctoolbarbutton__createfromoledata\"></a>  CMFCToolBarButton::CreateFromOleData","source":"<a name=\"cmfctoolbarbutton__createfromoledata\"></a>  CMFCToolBarButton::CreateFromOleData"},{"pos":[18853,18932],"content":"Creates a <ph id=\"ph1\">`CMFCToolBarButton`</ph> object from the provided <ph id=\"ph2\">`COleDataObject`</ph> object.","source":"Creates a `CMFCToolBarButton` object from the provided `COleDataObject` object."},{"pos":[19041,19051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDataObject`</ph>","pos":[19055,19073],"source":"[in] `pDataObject`"},{"content":"The source OLE data object.","pos":[19077,19104]},{"pos":[19114,19126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19130,19169],"content":"The created <ph id=\"ph1\">`CMFCToolBarButton`</ph> object.","source":"The created `CMFCToolBarButton` object."},{"pos":[19179,19186],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the framework to perform data transfer in various formats.","pos":[19190,19271]},{"content":"For example, the <ph id=\"ph1\">`CMFCOutlookBarPane::OnDragOver`</ph> method uses this method to perform drag-and-drop operations.","pos":[19272,19382],"source":" For example, the `CMFCOutlookBarPane::OnDragOver` method uses this method to perform drag-and-drop operations."},{"pos":[19392,19471],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__enablewindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::EnableWindow","linkify":"<a name=\"cmfctoolbarbutton__enablewindow\"></a>  CMFCToolBarButton::EnableWindow","source":"<a name=\"cmfctoolbarbutton__enablewindow\"></a>  CMFCToolBarButton::EnableWindow"},{"content":"Enables or disables mouse and keyboard input.","pos":[19475,19520]},{"pos":[19593,19603],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[19607,19621],"source":"[in] `bEnable`"},{"content":"Set this parameter to <ph id=\"ph1\">`TRUE`</ph> to enable input, or to <ph id=\"ph2\">`FALSE`</ph> to disable input.","pos":[19625,19702],"source":" Set this parameter to `TRUE` to enable input, or to `FALSE` to disable input."},{"pos":[19712,19719],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method calls the <ph id=\"ph1\">`EnableWindow`</ph> function to enable or disable input.","pos":[19723,19796],"source":"This method calls the `EnableWindow` function to enable or disable input."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>EnableWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646291)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[19797,19957],"source":" For more information, see [EnableWindow](http://msdn.microsoft.com/library/windows/desktop/ms646291) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[19967,20058],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__exporttomenubutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::ExportToMenuButton","linkify":"<a name=\"cmfctoolbarbutton__exporttomenubutton\"></a>  CMFCToolBarButton::ExportToMenuButton","source":"<a name=\"cmfctoolbarbutton__exporttomenubutton\"></a>  CMFCToolBarButton::ExportToMenuButton"},{"content":"Copies text from the toolbar button to a menu.","pos":[20062,20108]},{"pos":[20210,20220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`menuButton`</ph>","pos":[20224,20241],"source":"[in] `menuButton`"},{"content":"A reference to the target menu button.","pos":[20245,20283]},{"pos":[20293,20305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20309,20336],"content":"This method returns <ph id=\"ph1\">`TRUE`</ph>.","source":"This method returns `TRUE`."},{"pos":[20346,20353],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to copy the text from a toolbar button to a menu button.","pos":[20357,20445]},{"content":"The default implementation copies the text label of the button.","pos":[20446,20509]},{"content":"If the text label is empty, this method copies the tooltip text of the button.","pos":[20510,20588]},{"content":"The default implementation of this method returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[20595,20652],"source":"The default implementation of this method returns `TRUE`."},{"content":"Override this method if you want to take additional actions when the framework converts an object that is derived from <bpt id=\"p1\">[</bpt>CMFCToolbarButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> to a menu button.","pos":[20653,20857],"source":" Override this method if you want to take additional actions when the framework converts an object that is derived from [CMFCToolbarButton](../../mfc/reference/cmfctoolbarbutton-class.md) to a menu button."},{"pos":[20867,20958],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__getclipboardformat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::GetClipboardFormat","linkify":"<a name=\"cmfctoolbarbutton__getclipboardformat\"></a>  CMFCToolBarButton::GetClipboardFormat","source":"<a name=\"cmfctoolbarbutton__getclipboardformat\"></a>  CMFCToolBarButton::GetClipboardFormat"},{"content":"Retrieves the global clipboard format for the application.","pos":[20962,21020]},{"pos":[21095,21107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21111,21161],"content":"The global <ph id=\"ph1\">`CLIPFORMAT`</ph> value for the application.","source":"The global `CLIPFORMAT` value for the application."},{"pos":[21171,21178],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to retrieve the clipboard format for OLE data transfer operations.","pos":[21182,21280]},{"content":"For example, the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::CreateFromOleData<ept id=\"p1\">](#cmfctoolbarbutton__createfromoledata)</ept> method uses this method to copy data from a source OLE data object.","pos":[21281,21443],"source":" For example, the [CMFCToolBarButton::CreateFromOleData](#cmfctoolbarbutton__createfromoledata) method uses this method to copy data from a source OLE data object."},{"content":"This method sets the global <ph id=\"ph1\">`CLIPFORMAT`</ph> value the first time this method is called.","pos":[21450,21534],"source":"This method sets the global `CLIPFORMAT` value the first time this method is called."},{"content":"All subsequent calls to this method return this value.","pos":[21535,21589]},{"pos":[21596,21765],"content":"To allow drag-and-drop operations to occur between applications, call the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetClipboardFormatName<ept id=\"p1\">](#cmfctoolbarbutton__setclipboardformatname)</ept> method.","source":"To allow drag-and-drop operations to occur between applications, call the [CMFCToolBarButton::SetClipboardFormatName](#cmfctoolbarbutton__setclipboardformatname) method."},{"pos":[21772,21858],"content":"For more information about clipboards in MFC, see <bpt id=\"p1\">[</bpt>Clipboard<ept id=\"p1\">](../../mfc/clipboard.md)</ept>.","source":"For more information about clipboards in MFC, see [Clipboard](../../mfc/clipboard.md)."},{"pos":[21868,21937],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__gethwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::GetHwnd","linkify":"<a name=\"cmfctoolbarbutton__gethwnd\"></a>  CMFCToolBarButton::GetHwnd","source":"<a name=\"cmfctoolbarbutton__gethwnd\"></a>  CMFCToolBarButton::GetHwnd"},{"content":"Retrieves the window handle that is associated with the toolbar button.","pos":[21941,22012]},{"pos":[22061,22073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22077,22202],"content":"The window handle that is associated with the toolbar button or <ph id=\"ph1\">`NULL`</ph> if the toolbar button has no associated window handle.","source":"The window handle that is associated with the toolbar button or `NULL` if the toolbar button has no associated window handle."},{"pos":[22212,22219],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method returns <ph id=\"ph1\">`NULL`</ph>.","pos":[22223,22280],"source":"The default implementation of this method returns `NULL`."},{"content":"Override this method to return the window handle of your specific control.","pos":[22281,22355]},{"pos":[22365,22436],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__getimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::GetImage","linkify":"<a name=\"cmfctoolbarbutton__getimage\"></a>  CMFCToolBarButton::GetImage","source":"<a name=\"cmfctoolbarbutton__getimage\"></a>  CMFCToolBarButton::GetImage"},{"content":"Retrieves the image index of the button.","pos":[22440,22480]},{"pos":[22530,22542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the image associated with this button.","pos":[22546,22597]},{"pos":[22607,22614],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the button has a user-defined image (that is, if <ph id=\"ph1\">`bUserButton`</ph> was <ph id=\"ph2\">`TRUE`</ph> in the constructor), the returned index specifies an image in the collection of user-defined images (see <bpt id=\"p1\">[</bpt>CMFCToolBar::GetUserImages<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getuserimages)</ept>).","pos":[22618,22899],"source":"If the button has a user-defined image (that is, if `bUserButton` was `TRUE` in the constructor), the returned index specifies an image in the collection of user-defined images (see [CMFCToolBar::GetUserImages](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getuserimages))."},{"content":"Otherwise, the index specifies an image in the collection of images that are loaded from a resource file (see <bpt id=\"p1\">[</bpt>CMFCToolBar::GetImages<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getimages)</ept>).","pos":[22900,23101],"source":" Otherwise, the index specifies an image in the collection of images that are loaded from a resource file (see [CMFCToolBar::GetImages](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getimages))."},{"content":"For more information about resource files, see <bpt id=\"p1\">[</bpt>Working with Resource Files<ept id=\"p1\">](../../mfc/working-with-resource-files.md)</ept>.","pos":[23102,23221],"source":" For more information about resource files, see [Working with Resource Files](../../mfc/working-with-resource-files.md)."},{"pos":[23231,23320],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__getinvalidaterect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::GetInvalidateRect","linkify":"<a name=\"cmfctoolbarbutton__getinvalidaterect\"></a>  CMFCToolBarButton::GetInvalidateRect","source":"<a name=\"cmfctoolbarbutton__getinvalidaterect\"></a>  CMFCToolBarButton::GetInvalidateRect"},{"content":"Retrieves the region of the client area of the button that must be redrawn.","pos":[23324,23399]},{"pos":[23474,23486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23490,23554],"content":"A <ph id=\"ph1\">`CRect`</ph> object that specifies the region that must be redrawn.","source":"A `CRect` object that specifies the region that must be redrawn."},{"pos":[23564,23571],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method returns the whole client area.","pos":[23575,23647]},{"content":"Override this method if you want a different area to be redrawn.","pos":[23648,23712]},{"pos":[23722,23801],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__getparentwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::GetParentWnd","linkify":"<a name=\"cmfctoolbarbutton__getparentwnd\"></a>  CMFCToolBarButton::GetParentWnd","source":"<a name=\"cmfctoolbarbutton__getparentwnd\"></a>  CMFCToolBarButton::GetParentWnd"},{"content":"Retrieves the parent window of the button.","pos":[23805,23847]},{"pos":[23903,23915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent window of the button.","pos":[23919,23951]},{"pos":[23961,24056],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__getprotectedcommands\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::GetProtectedCommands","linkify":"<a name=\"cmfctoolbarbutton__getprotectedcommands\"></a>  CMFCToolBarButton::GetProtectedCommands","source":"<a name=\"cmfctoolbarbutton__getprotectedcommands\"></a>  CMFCToolBarButton::GetProtectedCommands"},{"content":"Retrieves the list of commands that the user cannot customize.","pos":[24060,24122]},{"pos":[24202,24214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The list of protected commands.","pos":[24218,24249]},{"pos":[24259,24266],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In customization mode, the framework disables toolbar button commands that are protected.","pos":[24270,24359]},{"content":"The user cannot perform drag-and-drop and edit operations on disabled toolbar buttons.","pos":[24360,24446]},{"pos":[24453,24593],"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetProtectedCommands<ept id=\"p1\">](#cmfctoolbarbutton__setprotectedcommands)</ept> method to define the list of protected commands.","source":"Use the [CMFCToolBarButton::SetProtectedCommands](#cmfctoolbarbutton__setprotectedcommands) method to define the list of protected commands."},{"pos":[24603,24680],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__gettextsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::GetTextSize","linkify":"<a name=\"cmfctoolbarbutton__gettextsize\"></a>  CMFCToolBarButton::GetTextSize","source":"<a name=\"cmfctoolbarbutton__gettextsize\"></a>  CMFCToolBarButton::GetTextSize"},{"content":"Retrieves the size of the button text.","pos":[24684,24722]},{"pos":[24776,24788],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24792,24862],"content":"A <ph id=\"ph1\">`SIZE`</ph> object that contains the size, in pixels, of the button text.","source":"A `SIZE` object that contains the size, in pixels, of the button text."},{"pos":[24872,24943],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__hasfocus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::HasFocus","linkify":"<a name=\"cmfctoolbarbutton__hasfocus\"></a>  CMFCToolBarButton::HasFocus","source":"<a name=\"cmfctoolbarbutton__hasfocus\"></a>  CMFCToolBarButton::HasFocus"},{"content":"Determines whether the button has the current input focus.","pos":[24947,25005]},{"pos":[25064,25076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the button has the input focus; otherwise 0.","pos":[25080,25135]},{"pos":[25145,25152],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method returns nonzero if the button has the input focus or is a child or descendant window of the window that has the input focus.","pos":[25156,25322]},{"content":"You can override this function to customize this behavior.","pos":[25323,25381]},{"pos":[25391,25472],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__havehotborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::HaveHotBorder","linkify":"<a name=\"cmfctoolbarbutton__havehotborder\"></a>  CMFCToolBarButton::HaveHotBorder","source":"<a name=\"cmfctoolbarbutton__havehotborder\"></a>  CMFCToolBarButton::HaveHotBorder"},{"content":"Determines whether a border of the button is displayed when a user selects the button.","pos":[25476,25562]},{"pos":[25626,25638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25642,25669],"content":"This method returns <ph id=\"ph1\">`TRUE`</ph>.","source":"This method returns `TRUE`."},{"pos":[25679,25686],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to determine whether the toolbar button should display its border when a user selects it.","pos":[25690,25811]},{"content":"The default implementation returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[25818,25860],"source":"The default implementation returns `TRUE`."},{"content":"You can override this method to customize this behavior.","pos":[25861,25917]},{"pos":[25927,26004],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__isdrawimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsDrawImage","linkify":"<a name=\"cmfctoolbarbutton__isdrawimage\"></a>  CMFCToolBarButton::IsDrawImage","source":"<a name=\"cmfctoolbarbutton__isdrawimage\"></a>  CMFCToolBarButton::IsDrawImage"},{"content":"Determines whether an image is displayed on the button.","pos":[26008,26063]},{"pos":[26117,26129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if an image is displayed on the button; otherwise 0.","pos":[26133,26193]},{"pos":[26203,26210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26214,26446],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph> if the toolbar button has no associated image ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetImage<ept id=\"p1\">](#cmfctoolbarbutton__getimage)</ept> returns -1) or if <bpt id=\"p2\">[</bpt>CMFCToolBarButton::m_bImage<ept id=\"p2\">](#cmfctoolbarbutton__m_bimage)</ept> is set to <ph id=\"ph2\">`FALSE`</ph>.","source":"This method returns `FALSE` if the toolbar button has no associated image ( [CMFCToolBarButton::GetImage](#cmfctoolbarbutton__getimage) returns -1) or if [CMFCToolBarButton::m_bImage](#cmfctoolbarbutton__m_bimage) is set to `FALSE`."},{"pos":[26456,26531],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__isdrawtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsDrawText","linkify":"<a name=\"cmfctoolbarbutton__isdrawtext\"></a>  CMFCToolBarButton::IsDrawText","source":"<a name=\"cmfctoolbarbutton__isdrawtext\"></a>  CMFCToolBarButton::IsDrawText"},{"content":"Determines whether a text label is displayed on the button.","pos":[26535,26594]},{"pos":[26647,26659],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if a text label is displayed; otherwise 0.","pos":[26663,26713]},{"pos":[26723,26730],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26734,26966],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph> if the toolbar button has no associated text label ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_strText<ept id=\"p1\">](#cmfctoolbarbutton__m_strtext)</ept> is empty) or <bpt id=\"p2\">[</bpt>CMFCToolBarButton::m_bText<ept id=\"p2\">](#cmfctoolbarbutton__m_btext)</ept> is set to <ph id=\"ph2\">`FALSE`</ph>.","source":"This method returns `FALSE` if the toolbar button has no associated text label ( [CMFCToolBarButton::m_strText](#cmfctoolbarbutton__m_strtext) is empty) or [CMFCToolBarButton::m_bText](#cmfctoolbarbutton__m_btext) is set to `FALSE`."},{"pos":[26976,27057],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__isdroppeddown\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsDroppedDown","linkify":"<a name=\"cmfctoolbarbutton__isdroppeddown\"></a>  CMFCToolBarButton::IsDroppedDown","source":"<a name=\"cmfctoolbarbutton__isdroppeddown\"></a>  CMFCToolBarButton::IsDroppedDown"},{"content":"Determines whether the button displays a submenu.","pos":[27061,27110]},{"pos":[27174,27186],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27190,27218],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph>.","source":"This method returns `FALSE`."},{"pos":[27228,27235],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[27239,27297],"source":"The default implementation of this method returns `FALSE`."},{"content":"Override this method to return <ph id=\"ph1\">`TRUE`</ph> if your control displays a submenu.","pos":[27298,27371],"source":" Override this method to return `TRUE` if your control displays a submenu."},{"pos":[27381,27456],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__iseditable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsEditable","linkify":"<a name=\"cmfctoolbarbutton__iseditable\"></a>  CMFCToolBarButton::IsEditable","source":"<a name=\"cmfctoolbarbutton__iseditable\"></a>  CMFCToolBarButton::IsEditable"},{"content":"Determines whether the button can be customized.","pos":[27460,27508]},{"pos":[27569,27581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if a button can be customized by the user; otherwise 0.","pos":[27585,27648]},{"pos":[27658,27665],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to determine whether the user can customize the toolbar button by using drag-and-drop or edit operations.","pos":[27669,27806]},{"content":"The default implementation returns <ph id=\"ph1\">`FALSE`</ph> if the command ID of the button is a standard command (you can determine this by calling the <ph id=\"ph2\">`IsStandardCommand`</ph> function) or if the command ID is in the list of protected commands.","pos":[27813,28037],"source":"The default implementation returns `FALSE` if the command ID of the button is a standard command (you can determine this by calling the `IsStandardCommand` function) or if the command ID is in the list of protected commands."},{"content":"For more information about protected commands, see <bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetProtectedCommands<ept id=\"p1\">](#cmfctoolbarbutton__getprotectedcommands)</ept> and <bpt id=\"p2\">[</bpt>CMFCToolBarButton::SetProtectedCommands<ept id=\"p2\">](#cmfctoolbarbutton__setprotectedcommands)</ept>.","pos":[28038,28261],"source":" For more information about protected commands, see [CMFCToolBarButton::GetProtectedCommands](#cmfctoolbarbutton__getprotectedcommands) and [CMFCToolBarButton::SetProtectedCommands](#cmfctoolbarbutton__setprotectedcommands)."},{"content":"Override this method to customize its behavior.","pos":[28268,28315]},{"pos":[28325,28402],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__isextrasize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsExtraSize","linkify":"<a name=\"cmfctoolbarbutton__isextrasize\"></a>  CMFCToolBarButton::IsExtraSize","source":"<a name=\"cmfctoolbarbutton__isextrasize\"></a>  CMFCToolBarButton::IsExtraSize"},{"content":"Determines whether the button can be displayed with an extended border.","pos":[28406,28477]},{"pos":[28539,28551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the toolbar button can be displayed with an extended border; otherwise 0.","pos":[28555,28639]},{"pos":[28649,28656],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Several skins use extra size for the borders of toolbar buttons (for example, round buttons).","pos":[28660,28753]},{"content":"If the user moves this button from one toolbar to another, the framework calls the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id=\"p1\">](#cmfctoolbarbutton__onchangeparentwnd)</ept> method.","pos":[28760,28928],"source":"If the user moves this button from one toolbar to another, the framework calls the [CMFCToolBarButton::OnChangeParentWnd](#cmfctoolbarbutton__onchangeparentwnd) method."},{"content":"The <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id=\"p1\">](#cmfctoolbarbutton__onchangeparentwnd)</ept> method sets the extra size flag to that of the new parent toolbar (for more information, see <bpt id=\"p2\">[</bpt>CMFCToolBar::IsButtonExtraSizeAvailable<ept id=\"p2\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__isbuttonextrasizeavailable)</ept>).","pos":[28929,29229],"source":" The [CMFCToolBarButton::OnChangeParentWnd](#cmfctoolbarbutton__onchangeparentwnd) method sets the extra size flag to that of the new parent toolbar (for more information, see [CMFCToolBar::IsButtonExtraSizeAvailable](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__isbuttonextrasizeavailable))."},{"pos":[29239,29322],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__isfirstingroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsFirstInGroup","linkify":"<a name=\"cmfctoolbarbutton__isfirstingroup\"></a>  CMFCToolBarButton::IsFirstInGroup","source":"<a name=\"cmfctoolbarbutton__isfirstingroup\"></a>  CMFCToolBarButton::IsFirstInGroup"},{"content":"Determines whether the button is in the first position in its button group.","pos":[29326,29401]},{"pos":[29466,29478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29482,29562],"content":"<ph id=\"ph1\">`TRUE`</ph> if the button is the first button in its button group; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the button is the first button in its button group; otherwise `FALSE`."},{"pos":[29572,29579],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method defines a <bpt id=\"p1\">*</bpt>button group<ept id=\"p1\">*</ept> as a neighboring set of buttons that are positioned on the same row and are bounded by separators or the border of the toolbar.","pos":[29583,29747],"source":"This method defines a *button group* as a neighboring set of buttons that are positioned on the same row and are bounded by separators or the border of the toolbar."},{"content":"This method returns <ph id=\"ph1\">`FALSE`</ph> if the toolbar button refers to the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button.","pos":[29748,29833],"source":" This method returns `FALSE` if the toolbar button refers to the **Customize** button."},{"content":"For more information about the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button, see <bpt id=\"p2\">[</bpt>CMFCToolBar::GetCustomizeButton<ept id=\"p2\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcustomizebutton)</ept>.","pos":[29834,29999],"source":" For more information about the **Customize** button, see [CMFCToolBar::GetCustomizeButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcustomizebutton)."},{"pos":[30006,30168],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsLastInGroup<ept id=\"p1\">](#cmfctoolbarbutton__islastingroup)</ept> method to determine whether the button is in the last position in its button group.","source":"Call the [CMFCToolBarButton::IsLastInGroup](#cmfctoolbarbutton__islastingroup) method to determine whether the button is in the last position in its button group."},{"pos":[30178,30249],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__ishidden\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsHidden","linkify":"<a name=\"cmfctoolbarbutton__ishidden\"></a>  CMFCToolBarButton::IsHidden","source":"<a name=\"cmfctoolbarbutton__ishidden\"></a>  CMFCToolBarButton::IsHidden"},{"content":"Determines whether the button is hidden.","pos":[30253,30293]},{"pos":[30344,30356],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the button is hidden (invisible); otherwise 0.","pos":[30360,30417]},{"pos":[30427,30434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method when the parent toolbar is stretched to determine whether the toolbar button is visible.","pos":[30438,30558]},{"pos":[30565,30805],"content":"If you set the button to be invisible by using the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetVisible<ept id=\"p1\">](#cmfctoolbarbutton__setvisible)</ept> method, use <bpt id=\"p2\">[</bpt>CMFCToolBarButton::IsVisible<ept id=\"p2\">](#cmfctoolbarbutton__isvisible)</ept> to determine whether the toolbar button is visible.","source":"If you set the button to be invisible by using the [CMFCToolBarButton::SetVisible](#cmfctoolbarbutton__setvisible) method, use [CMFCToolBarButton::IsVisible](#cmfctoolbarbutton__isvisible) to determine whether the toolbar button is visible."},{"content":"By default, all toolbar buttons are visible.","pos":[30812,30856]},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::Show<ept id=\"p1\">](#cmfctoolbarbutton__show)</ept> method to hide or show toolbar buttons.","pos":[30857,30956],"source":" Use the [CMFCToolBarButton::Show](#cmfctoolbarbutton__show) method to hide or show toolbar buttons."},{"pos":[30966,31045],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__ishorizontal\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsHorizontal","linkify":"<a name=\"cmfctoolbarbutton__ishorizontal\"></a>  CMFCToolBarButton::IsHorizontal","source":"<a name=\"cmfctoolbarbutton__ishorizontal\"></a>  CMFCToolBarButton::IsHorizontal"},{"content":"Determines whether the button is located on a horizontal toolbar.","pos":[31049,31114]},{"pos":[31169,31181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if a toolbar button is located on a horizontal toolbar; otherwise 0.","pos":[31185,31261]},{"pos":[31271,31278],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to determine the layout of toolbar buttons.","pos":[31282,31357]},{"content":"This method returns the <ph id=\"ph1\">`m_bHorz`</ph> data member.","pos":[31364,31410],"source":"This method returns the `m_bHorz` data member."},{"content":"The default value of the <ph id=\"ph1\">`m_bHorz`</ph> data member is <ph id=\"ph2\">`TRUE`</ph>; it is reset on each call to the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnDraw<ept id=\"p1\">](#cmfctoolbarbutton__ondraw)</ept> method.","pos":[31411,31564],"source":" The default value of the `m_bHorz` data member is `TRUE`; it is reset on each call to the [CMFCToolBarButton::OnDraw](#cmfctoolbarbutton__ondraw) method."},{"pos":[31574,31655],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__islastingroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsLastInGroup","linkify":"<a name=\"cmfctoolbarbutton__islastingroup\"></a>  CMFCToolBarButton::IsLastInGroup","source":"<a name=\"cmfctoolbarbutton__islastingroup\"></a>  CMFCToolBarButton::IsLastInGroup"},{"content":"Specifies whether the button is in the last position in its button group.","pos":[31659,31732]},{"pos":[31796,31808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31812,31891],"content":"<ph id=\"ph1\">`TRUE`</ph> if the button is the last button in its button group; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the button is the last button in its button group; otherwise `FALSE`."},{"pos":[31901,31908],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method defines a <bpt id=\"p1\">*</bpt>button group<ept id=\"p1\">*</ept> as a neighboring set of buttons that are positioned on the same row and are bounded by separators or the border of the toolbar This method returns <ph id=\"ph1\">`FALSE`</ph> if the toolbar button has no parent toolbar or the toolbar button refers to the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> button.","pos":[31912,32205],"source":"This method defines a *button group* as a neighboring set of buttons that are positioned on the same row and are bounded by separators or the border of the toolbar This method returns `FALSE` if the toolbar button has no parent toolbar or the toolbar button refers to the **Customize** button."},{"content":"For more information about the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button, see <bpt id=\"p2\">[</bpt>CMFCToolBar::GetCustomizeButton<ept id=\"p2\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcustomizebutton)</ept>.","pos":[32206,32371],"source":" For more information about the **Customize** button, see [CMFCToolBar::GetCustomizeButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcustomizebutton)."},{"pos":[32378,32543],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsFirstInGroup<ept id=\"p1\">](#cmfctoolbarbutton__isfirstingroup)</ept> method to determine whether the button is in the first position in its button group.","source":"Call the [CMFCToolBarButton::IsFirstInGroup](#cmfctoolbarbutton__isfirstingroup) method to determine whether the button is in the first position in its button group."},{"pos":[32553,32624],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__islocked\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsLocked","linkify":"<a name=\"cmfctoolbarbutton__islocked\"></a>  CMFCToolBarButton::IsLocked","source":"<a name=\"cmfctoolbarbutton__islocked\"></a>  CMFCToolBarButton::IsLocked"},{"content":"Determines whether the button is on a locked (non-customizable) toolbar.","pos":[32628,32700]},{"pos":[32751,32763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the button is on a locked toolbar; otherwise 0.","pos":[32767,32825]},{"pos":[32835,32842],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to determine whether the user can customize the toolbar button by using drag-and-drop or edit operations.","pos":[32846,32983]},{"content":"Set the locked attribute on the parent toolbar by using the <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__loadtoolbar)</ept> method.","pos":[32984,33145],"source":" Set the locked attribute on the parent toolbar by using the [CMFCToolBar::LoadToolBar](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__loadtoolbar) method."},{"content":"The framework passes the value of this attribute to the constructor of each toolbar button ( <bpt id=\"p1\">[</bpt>CMFCToolbarButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept>) that it inserts into the parent toolbar.","pos":[33146,33348],"source":" The framework passes the value of this attribute to the constructor of each toolbar button ( [CMFCToolbarButton](../../mfc/reference/cmfctoolbarbutton-class.md)) that it inserts into the parent toolbar."},{"pos":[33358,33431],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__isownerof\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsOwnerOf","linkify":"<a name=\"cmfctoolbarbutton__isownerof\"></a>  CMFCToolBarButton::IsOwnerOf","source":"<a name=\"cmfctoolbarbutton__isownerof\"></a>  CMFCToolBarButton::IsOwnerOf"},{"content":"Determines whether the button is the owner of the provided window handle.","pos":[33435,33508]},{"pos":[33568,33578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hwnd`</ph>","pos":[33582,33593],"source":"[in] `hwnd`"},{"content":"A window handle.","pos":[33597,33613]},{"pos":[33623,33635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the button is the owner of the provided window handle; otherwise 0.","pos":[33639,33717]},{"pos":[33727,33734],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method returns nonzero if <ph id=\"ph1\">`hwnd`</ph> either refers to the direct window handle or is a child of the window handle that is associated with the button.","pos":[33738,33888],"source":"This method returns nonzero if `hwnd` either refers to the direct window handle or is a child of the window handle that is associated with the button."},{"content":"This method returns 0 if <ph id=\"ph1\">`hwnd`</ph> is <ph id=\"ph2\">`NULL`</ph>.","pos":[33889,33931],"source":" This method returns 0 if `hwnd` is `NULL`."},{"pos":[33941,34014],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__isvisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsVisible","linkify":"<a name=\"cmfctoolbarbutton__isvisible\"></a>  CMFCToolBarButton::IsVisible","source":"<a name=\"cmfctoolbarbutton__isvisible\"></a>  CMFCToolBarButton::IsVisible"},{"content":"Determines whether the toolbar button is visible.","pos":[34018,34067]},{"pos":[34119,34131],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the toolbar button is visible; otherwise 0.","pos":[34135,34189]},{"pos":[34199,34206],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can show or hide the toolbar button by using the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetVisible<ept id=\"p1\">](#cmfctoolbarbutton__setvisible)</ept> method.","pos":[34210,34334],"source":"You can show or hide the toolbar button by using the [CMFCToolBarButton::SetVisible](#cmfctoolbarbutton__setvisible) method."},{"content":"Call the <bpt id=\"p1\">[</bpt>CPane::AdjustSizeImmediate<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate)</ept> method on the parent toolbar after you call <bpt id=\"p2\">[</bpt>CMFCToolBarButton::SetVisible<ept id=\"p2\">](#cmfctoolbarbutton__setvisible)</ept> to recalculate the layout of a parent toolbar.","pos":[34335,34590],"source":" Call the [CPane::AdjustSizeImmediate](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate) method on the parent toolbar after you call [CMFCToolBarButton::SetVisible](#cmfctoolbarbutton__setvisible) to recalculate the layout of a parent toolbar."},{"pos":[34600,34685],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__iswindowvisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::IsWindowVisible","linkify":"<a name=\"cmfctoolbarbutton__iswindowvisible\"></a>  CMFCToolBarButton::IsWindowVisible","source":"<a name=\"cmfctoolbarbutton__iswindowvisible\"></a>  CMFCToolBarButton::IsWindowVisible"},{"content":"Determines whether the underlying window handle of the button is visible.","pos":[34689,34762]},{"pos":[34819,34831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the underlying window handle of the button is visible; otherwise 0.","pos":[34835,34913]},{"pos":[34923,34930],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method returns nonzero if the styles attribute of the underlying window handle contains the <ph id=\"ph1\">`WS_VISIBLE`</ph> style.","pos":[34934,35050],"source":"This method returns nonzero if the styles attribute of the underlying window handle contains the `WS_VISIBLE` style."},{"content":"This method returns <ph id=\"ph1\">`FALSE`</ph> if the underlying window handle of the button is <ph id=\"ph2\">`NULL`</ph>.","pos":[35051,35135],"source":" This method returns `FALSE` if the underlying window handle of the button is `NULL`."},{"pos":[35145,35216],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__m_bimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bImage","linkify":"<a name=\"cmfctoolbarbutton__m_bimage\"></a>  CMFCToolBarButton::m_bImage","source":"<a name=\"cmfctoolbarbutton__m_bimage\"></a>  CMFCToolBarButton::m_bImage"},{"content":"Specifies whether an image is displayed on the button.","pos":[35220,35274]},{"pos":[35316,35323],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this data member is set to <ph id=\"ph1\">`TRUE`</ph>, the framework displays the image that is associated with the toolbar button; otherwise the framework does not display the image.","pos":[35327,35493],"source":"If this data member is set to `TRUE`, the framework displays the image that is associated with the toolbar button; otherwise the framework does not display the image."},{"content":"This member affects the return value of the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_bImage<ept id=\"p1\">](#cmfctoolbarbutton__m_bimage)</ept> method.","pos":[35494,35605],"source":" This member affects the return value of the [CMFCToolBarButton::m_bImage](#cmfctoolbarbutton__m_bimage) method."},{"pos":[35615,35684],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__m_btext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bText","linkify":"<a name=\"cmfctoolbarbutton__m_btext\"></a>  CMFCToolBarButton::m_bText","source":"<a name=\"cmfctoolbarbutton__m_btext\"></a>  CMFCToolBarButton::m_bText"},{"content":"Specifies whether a text label is displayed on the button.","pos":[35688,35746]},{"pos":[35787,35794],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this data member is set to <ph id=\"ph1\">`TRUE`</ph>, the framework displays the text label of the toolbar button; otherwise the framework does not display the text label.","pos":[35798,35953],"source":"If this data member is set to `TRUE`, the framework displays the text label of the toolbar button; otherwise the framework does not display the text label."},{"content":"This member affects the return value of the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_bText<ept id=\"p1\">](#cmfctoolbarbutton__m_btext)</ept> method.","pos":[35954,36063],"source":" This member affects the return value of the [CMFCToolBarButton::m_bText](#cmfctoolbarbutton__m_btext) method."},{"pos":[36073,36152],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__m_btextbelow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bTextBelow","linkify":"<a name=\"cmfctoolbarbutton__m_btextbelow\"></a>  CMFCToolBarButton::m_bTextBelow","source":"<a name=\"cmfctoolbarbutton__m_btextbelow\"></a>  CMFCToolBarButton::m_bTextBelow"},{"content":"Specifies whether the text label is displayed underneath the image on the button.","pos":[36156,36237]},{"pos":[36283,36290],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this member variable is set to <ph id=\"ph1\">`TRUE`</ph>, the framework displays the text of the button underneath the image.","pos":[36294,36403],"source":"If this member variable is set to `TRUE`, the framework displays the text of the button underneath the image."},{"content":"The default value of this member is <ph id=\"ph1\">`FALSE`</ph>.","pos":[36404,36448],"source":" The default value of this member is `FALSE`."},{"pos":[36458,36539],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__m_buserbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bUserButton","linkify":"<a name=\"cmfctoolbarbutton__m_buserbutton\"></a>  CMFCToolBarButton::m_bUserButton","source":"<a name=\"cmfctoolbarbutton__m_buserbutton\"></a>  CMFCToolBarButton::m_bUserButton"},{"content":"Specifies whether the button has a user-defined image","pos":[36543,36596]},{"pos":[36643,36650],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36654,36748],"content":"This data member is set to <ph id=\"ph1\">`TRUE`</ph> when the button has a user-defined image associated with it.","source":"This data member is set to `TRUE` when the button has a user-defined image associated with it."},{"pos":[36758,36837],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__m_bwholetext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bWholeText","linkify":"<a name=\"cmfctoolbarbutton__m_bwholetext\"></a>  CMFCToolBarButton::m_bWholeText","source":"<a name=\"cmfctoolbarbutton__m_bwholetext\"></a>  CMFCToolBarButton::m_bWholeText"},{"content":"Specifies whether the button displays its full text label even if it does not fit in the bounding rectangle.","pos":[36841,36949]},{"pos":[36995,37002],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this data member is set to <ph id=\"ph1\">`TRUE`</ph>, the framework displays the full text label by enlarging the button.","pos":[37006,37111],"source":"If this data member is set to `TRUE`, the framework displays the full text label by enlarging the button."},{"content":"Otherwise, the framework truncates and appends an ellipsis ( <bpt id=\"p1\">**</bpt>...<ept id=\"p1\">**</ept>) to the text label.","pos":[37112,37200],"source":" Otherwise, the framework truncates and appends an ellipsis ( **...**) to the text label."},{"pos":[37210,37279],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__m_bwrap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bWrap","linkify":"<a name=\"cmfctoolbarbutton__m_bwrap\"></a>  CMFCToolBarButton::m_bWrap","source":"<a name=\"cmfctoolbarbutton__m_bwrap\"></a>  CMFCToolBarButton::m_bWrap"},{"content":"Specifies whether the button next to a separator will be put on the next row.","pos":[37283,37360]},{"pos":[37401,37408],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37412,37603],"content":"The framework sets this data member to <ph id=\"ph1\">`TRUE`</ph> when the toolbar button does not fit on the current row or when you specify a layout (for example, a specific number of toolbar buttons per row).","source":"The framework sets this data member to `TRUE` when the toolbar button does not fit on the current row or when you specify a layout (for example, a specific number of toolbar buttons per row)."},{"pos":[37610,37747],"content":"The framework places this button on the next row if this data member is set to <ph id=\"ph1\">`TRUE`</ph> and the toolbar is docked horizontally or floating.","source":"The framework places this button on the next row if this data member is set to `TRUE` and the toolbar is docked horizontally or floating."},{"pos":[37754,37803],"content":"The default value of this data member is <ph id=\"ph1\">`FALSE`</ph>.","source":"The default value of this data member is `FALSE`."},{"pos":[37813,37890],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__m_bwraptext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bWrapText","linkify":"<a name=\"cmfctoolbarbutton__m_bwraptext\"></a>  CMFCToolBarButton::m_bWrapText","source":"<a name=\"cmfctoolbarbutton__m_bwraptext\"></a>  CMFCToolBarButton::m_bWrapText"},{"content":"Specifies whether multi-line text labels are enabled.","pos":[37894,37947]},{"pos":[38015,38022],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38026,38156],"content":"If this static member variable is <ph id=\"ph1\">`TRUE`</ph>, the framework enables all toolbars to display multi-line text labels on toolbar buttons.","source":"If this static member variable is `TRUE`, the framework enables all toolbars to display multi-line text labels on toolbar buttons."},{"pos":[38163,38212],"content":"The default value of this data member is <ph id=\"ph1\">`FALSE`</ph>.","source":"The default value of this data member is `FALSE`."},{"pos":[38222,38287],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__m_nid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::m_nID","linkify":"<a name=\"cmfctoolbarbutton__m_nid\"></a>  CMFCToolBarButton::m_nID","source":"<a name=\"cmfctoolbarbutton__m_nid\"></a>  CMFCToolBarButton::m_nID"},{"content":"The command ID of the button.","pos":[38291,38320]},{"pos":[38359,38366],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A command ID of -1 indicates that the button is a separator.","pos":[38370,38430]},{"content":"All button separators have the <ph id=\"ph1\">`TBBS_SEPARATOR`</ph> style.","pos":[38431,38485],"source":" All button separators have the `TBBS_SEPARATOR` style."},{"content":"See <bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_nStyle<ept id=\"p1\">](#cmfctoolbarbutton__m_nstyle)</ept> for more information about button styles.","pos":[38486,38591],"source":" See [CMFCToolBarButton::m_nStyle](#cmfctoolbarbutton__m_nstyle) for more information about button styles."},{"pos":[38601,38672],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__m_nstyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::m_nStyle","linkify":"<a name=\"cmfctoolbarbutton__m_nstyle\"></a>  CMFCToolBarButton::m_nStyle","source":"<a name=\"cmfctoolbarbutton__m_nstyle\"></a>  CMFCToolBarButton::m_nStyle"},{"content":"The style of the button.","pos":[38676,38700]},{"pos":[38742,38749],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38753,38877],"content":"See <bpt id=\"p1\">[</bpt>ToolBar Control Styles<ept id=\"p1\">](../../mfc/reference/toolbar-control-styles.md)</ept> for the list of available toolbar button styles.","source":"See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for the list of available toolbar button styles."},{"pos":[38887,38960],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__m_strtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::m_strText","linkify":"<a name=\"cmfctoolbarbutton__m_strtext\"></a>  CMFCToolBarButton::m_strText","source":"<a name=\"cmfctoolbarbutton__m_strtext\"></a>  CMFCToolBarButton::m_strText"},{"content":"The text label of the button.","pos":[38964,38993]},{"pos":[39039,39046],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This data member contains the text label of the button.","pos":[39050,39105]},{"content":"The text label can be empty.","pos":[39106,39134]},{"pos":[39144,39225],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__notifycommand\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::NotifyCommand","linkify":"<a name=\"cmfctoolbarbutton__notifycommand\"></a>  CMFCToolBarButton::NotifyCommand","source":"<a name=\"cmfctoolbarbutton__notifycommand\"></a>  CMFCToolBarButton::NotifyCommand"},{"pos":[39229,39353],"content":"Specifies whether the button processes the <bpt id=\"p1\">[</bpt>WM_COMMAND<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message.","source":"Specifies whether the button processes the [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message."},{"pos":[39423,39433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iNotifyCode`</ph>","pos":[39437,39455],"source":"[in] `iNotifyCode`"},{"content":"The notification message that is associated with the command.","pos":[39459,39520]},{"pos":[39530,39542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39546,39574],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph>.","source":"This method returns `FALSE`."},{"pos":[39584,39591],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39595,39756],"content":"The framework calls this method when it is about to send a <bpt id=\"p1\">[</bpt>WM_COMMAND<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message to the parent window.","source":"The framework calls this method when it is about to send a [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message to the parent window."},{"content":"By default, this method returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[39763,39803],"source":"By default, this method returns `FALSE`."},{"content":"Override this method to return <ph id=\"ph1\">`TRUE`</ph> if you want to process the <ph id=\"ph2\">`WM_COMMAND`</ph> message or <ph id=\"ph3\">`FALSE`</ph> to indicate that the parent toolbar should handle the message.","pos":[39804,39963],"source":" Override this method to return `TRUE` if you want to process the `WM_COMMAND` message or `FALSE` to indicate that the parent toolbar should handle the message."},{"pos":[39973,40068],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onaddtocustomizepage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnAddToCustomizePage","linkify":"<a name=\"cmfctoolbarbutton__onaddtocustomizepage\"></a>  CMFCToolBarButton::OnAddToCustomizePage","source":"<a name=\"cmfctoolbarbutton__onaddtocustomizepage\"></a>  CMFCToolBarButton::OnAddToCustomizePage"},{"pos":[40072,40151],"content":"Called by the framework when the button is added to a <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","source":"Called by the framework when the button is added to a **Customize** dialog box."},{"pos":[40213,40220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method does nothing.","pos":[40224,40279]},{"content":"Override this method if you want to perform some action when the button is added to a <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","pos":[40280,40391],"source":" Override this method if you want to perform some action when the button is added to a **Customize** dialog box."},{"pos":[40401,40480],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onbeforedrag\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnBeforeDrag","linkify":"<a name=\"cmfctoolbarbutton__onbeforedrag\"></a>  CMFCToolBarButton::OnBeforeDrag","source":"<a name=\"cmfctoolbarbutton__onbeforedrag\"></a>  CMFCToolBarButton::OnBeforeDrag"},{"content":"Specifies whether the button can be dragged.","pos":[40484,40528]},{"pos":[40591,40603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40607,40662],"content":"<ph id=\"ph1\">`TRUE`</ph> if the button can be dragged; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the button can be dragged; otherwise `FALSE`."},{"pos":[40672,40679],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method before the user starts to drag the button.","pos":[40683,40757]},{"content":"The default implementation of this method returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[40764,40821],"source":"The default implementation of this method returns `TRUE`."},{"content":"Override this method to return <ph id=\"ph1\">`FALSE`</ph> to disable dragging of the button.","pos":[40822,40895],"source":" Override this method to return `FALSE` to disable dragging of the button."},{"pos":[40905,40984],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onbeforedrop\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnBeforeDrop","linkify":"<a name=\"cmfctoolbarbutton__onbeforedrop\"></a>  CMFCToolBarButton::OnBeforeDrop","source":"<a name=\"cmfctoolbarbutton__onbeforedrop\"></a>  CMFCToolBarButton::OnBeforeDrop"},{"content":"Specifies whether a user can drop the button onto the target toolbar.","pos":[40988,41057]},{"pos":[41131,41141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pTarget`</ph>","pos":[41145,41159],"source":"[in] `pTarget`"},{"content":"The target of the drag-and-drop operation.","pos":[41163,41205]},{"pos":[41215,41227],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41231,41319],"content":"<ph id=\"ph1\">`TRUE`</ph> if the button can be dropped onto the provided target toolbar; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the button can be dropped onto the provided target toolbar; otherwise `FALSE`."},{"pos":[41329,41336],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method before the button is dropped onto a toolbar.","pos":[41340,41416]},{"content":"The default implementation of this method returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[41423,41480],"source":"The default implementation of this method returns `TRUE`."},{"content":"Override this method to return <ph id=\"ph1\">`FALSE`</ph> to disable the drop operation on the specified target.","pos":[41481,41574],"source":" Override this method to return `FALSE` to disable the drop operation on the specified target."},{"pos":[41584,41669],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__oncalculatesize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnCalculateSize","linkify":"<a name=\"cmfctoolbarbutton__oncalculatesize\"></a>  CMFCToolBarButton::OnCalculateSize","source":"<a name=\"cmfctoolbarbutton__oncalculatesize\"></a>  CMFCToolBarButton::OnCalculateSize"},{"content":"Called by the framework to calculate the size of the button for the specified device context and docking state.","pos":[41673,41784]},{"pos":[41904,41914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[41918,41928],"source":"[in] `pDC`"},{"content":"The device context that displays the button.","pos":[41932,41976]},{"content":"[in] <ph id=\"ph1\">`sizeDefault`</ph>","pos":[41983,42001],"source":"[in] `sizeDefault`"},{"content":"The default size of the button.","pos":[42005,42036]},{"content":"[in] <ph id=\"ph1\">`bHorz`</ph>","pos":[42043,42055],"source":"[in] `bHorz`"},{"content":"The dock state of the parent toolbar.","pos":[42059,42096]},{"content":"This parameter is <ph id=\"ph1\">`TRUE`</ph> if the toolbar is docked horizontally or is floating, or <ph id=\"ph2\">`FALSE`</ph> if the toolbar is docked vertically.","pos":[42097,42223],"source":" This parameter is `TRUE` if the toolbar is docked horizontally or is floating, or `FALSE` if the toolbar is docked vertically."},{"pos":[42233,42245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42249,42322],"content":"A <ph id=\"ph1\">`SIZE`</ph> structure that contains the dimensions of the button, in pixels.","source":"A `SIZE` structure that contains the dimensions of the button, in pixels."},{"pos":[42332,42339],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to determine the size of the toolbar button for the specified device context and dock state.","pos":[42343,42467]},{"content":"The default implementation considers the text and image sizes (if they are displayed), the text and image positions (the text below or at the right-hand side of the image), and the toolbar dock state.","pos":[42474,42674]},{"content":"Override this method if you want to provide the size of a non-standard button (for example, an edit box button).","pos":[42681,42793]},{"pos":[42803,42882],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__oncancelmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnCancelMode","linkify":"<a name=\"cmfctoolbarbutton__oncancelmode\"></a>  CMFCToolBarButton::OnCancelMode","source":"<a name=\"cmfctoolbarbutton__oncancelmode\"></a>  CMFCToolBarButton::OnCancelMode"},{"pos":[42886,43008],"content":"Called by the framework to handle the <bpt id=\"p1\">[</bpt>WM_CANCELMODE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632615)</ept> message.","source":"Called by the framework to handle the [WM_CANCELMODE](http://msdn.microsoft.com/library/windows/desktop/ms632615) message."},{"pos":[43062,43069],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method does nothing.","pos":[43073,43128]},{"content":"Override this method if you want to handle the <bpt id=\"p1\">[</bpt>WM_CANCELMODE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632615)</ept> message.","pos":[43129,43260],"source":" Override this method if you want to handle the [WM_CANCELMODE](http://msdn.microsoft.com/library/windows/desktop/ms632615) message."},{"pos":[43270,43359],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onchangeparentwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnChangeParentWnd","linkify":"<a name=\"cmfctoolbarbutton__onchangeparentwnd\"></a>  CMFCToolBarButton::OnChangeParentWnd","source":"<a name=\"cmfctoolbarbutton__onchangeparentwnd\"></a>  CMFCToolBarButton::OnChangeParentWnd"},{"content":"Called by the framework when the button is inserted into a new toolbar.","pos":[43363,43434]},{"pos":[43509,43519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWndParent`</ph>","pos":[43523,43540],"source":"[in] `pWndParent`"},{"content":"The new parent window.","pos":[43544,43566]},{"pos":[43576,43583],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The button is inserted into a toolbar, for example, when the user drags it from one toolbar to another toolbar.","pos":[43587,43698]},{"content":"The default implementation of this method does nothing.","pos":[43705,43760]},{"pos":[43770,43839],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onclick\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnClick","linkify":"<a name=\"cmfctoolbarbutton__onclick\"></a>  CMFCToolBarButton::OnClick","source":"<a name=\"cmfctoolbarbutton__onclick\"></a>  CMFCToolBarButton::OnClick"},{"content":"Called by the framework when the user clicks the mouse button.","pos":[43843,43905]},{"pos":[43993,44003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[44007,44018],"source":"[in] `pWnd`"},{"content":"The parent window of the toolbar button.","pos":[44022,44062]},{"content":"[in] <ph id=\"ph1\">`bDelay`</ph>","pos":[44069,44082],"source":"[in] `bDelay`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the message should be handled with a delay.","pos":[44085,44139],"source":" `TRUE` if the message should be handled with a delay."},{"pos":[44149,44161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44165,44193],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph>.","source":"This method returns `FALSE`."},{"pos":[44203,44210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method when the user clicks the toolbar button.","pos":[44214,44286]},{"content":"The default implementation does nothing and returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[44293,44353],"source":"The default implementation does nothing and returns `FALSE`."},{"content":"Override this method to return a nonzero value if the button processes the click message.","pos":[44354,44443]},{"pos":[44453,44526],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onclickup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnClickUp","linkify":"<a name=\"cmfctoolbarbutton__onclickup\"></a>  CMFCToolBarButton::OnClickUp","source":"<a name=\"cmfctoolbarbutton__onclickup\"></a>  CMFCToolBarButton::OnClickUp"},{"content":"Called by the framework when the user releases the mouse button.","pos":[44530,44594]},{"pos":[44645,44657],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44661,44689],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph>.","source":"This method returns `FALSE`."},{"pos":[44699,44706],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method when the user releases the toolbar button.","pos":[44710,44784]},{"content":"The default implementation does nothing and returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[44791,44851],"source":"The default implementation does nothing and returns `FALSE`."},{"content":"Override this method to return a nonzero value if the button processes the click message.","pos":[44852,44941]},{"pos":[44951,45032],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__oncontexthelp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnContextHelp","linkify":"<a name=\"cmfctoolbarbutton__oncontexthelp\"></a>  CMFCToolBarButton::OnContextHelp","source":"<a name=\"cmfctoolbarbutton__oncontexthelp\"></a>  CMFCToolBarButton::OnContextHelp"},{"pos":[45036,45119],"content":"Called by the framework when the parent toolbar handles a <ph id=\"ph1\">`WM_HELPHITTEST`</ph> message.","source":"Called by the framework when the parent toolbar handles a `WM_HELPHITTEST` message."},{"pos":[45184,45194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[45198,45209],"source":"[in] `pWnd`"},{"content":"The parent window of the toolbar button.","pos":[45213,45253]},{"pos":[45263,45275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45279,45307],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph>.","source":"This method returns `FALSE`."},{"pos":[45317,45324],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method does nothing and returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[45328,45403],"source":"The default implementation of this method does nothing and returns `FALSE`."},{"content":"Override this method to return a nonzero value if the button processes the help message.","pos":[45404,45492]},{"pos":[45499,45651],"content":"For more information about the <ph id=\"ph1\">`WM_HELPHITTEST`</ph> message, see <bpt id=\"p1\">[</bpt>TN028: Context-Sensitive Help Support<ept id=\"p1\">](../../mfc/tn028-context-sensitive-help-support.md)</ept>.","source":"For more information about the `WM_HELPHITTEST` message, see [TN028: Context-Sensitive Help Support](../../mfc/tn028-context-sensitive-help-support.md)."},{"pos":[45661,45736],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onctlcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnCtlColor","linkify":"<a name=\"cmfctoolbarbutton__onctlcolor\"></a>  CMFCToolBarButton::OnCtlColor","source":"<a name=\"cmfctoolbarbutton__onctlcolor\"></a>  CMFCToolBarButton::OnCtlColor"},{"pos":[45740,45820],"content":"Called by the framework when the parent toolbar handles a <ph id=\"ph1\">`WM_CTLCOLOR`</ph> message.","source":"Called by the framework when the parent toolbar handles a `WM_CTLCOLOR` message."},{"pos":[45909,45919],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[45923,45933],"source":"[in] `pDC`"},{"content":"The device context that displays the button.","pos":[45937,45981]},{"content":"[in] <ph id=\"ph1\">`nCtlColor`</ph>","pos":[45988,46004],"source":"[in] `nCtlColor`"},{"content":"The specific color notification.","pos":[46008,46040]},{"pos":[46050,46062],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A handle to the brush object that the framework uses to paint the background of the button.","pos":[46066,46157]},{"pos":[46167,46174],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method when the parent toolbar processes the <ph id=\"ph1\">`WM_CTLCOLOR`</ph> message for a toolbar button that contains a Windows control.","pos":[46178,46323],"source":"The framework calls this method when the parent toolbar processes the `WM_CTLCOLOR` message for a toolbar button that contains a Windows control."},{"content":"The framework does not call this method if the toolbar button is windowless.","pos":[46324,46400]},{"content":"The framework calls this method when the toolbar framework is in customization mode and the toolbar button is unlocked.","pos":[46407,46526]},{"content":"For more information about customization mode, see <bpt id=\"p1\">[</bpt>CMFCToolBar::SetCustomizeMode<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode)</ept>.","pos":[46527,46682],"source":" For more information about customization mode, see [CMFCToolBar::SetCustomizeMode](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode)."},{"content":"For more information about locking toolbar buttons, see <bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsLocked<ept id=\"p1\">](#cmfctoolbarbutton__islocked)</ept>.","pos":[46683,46799],"source":" For more information about locking toolbar buttons, see [CMFCToolBarButton::IsLocked](#cmfctoolbarbutton__islocked)."},{"pos":[46806,46865],"content":"The default implementation does nothing and returns <ph id=\"ph1\">`NULL`</ph>.","source":"The default implementation does nothing and returns `NULL`."},{"pos":[46875,46960],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__oncustomizemenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnCustomizeMenu","linkify":"<a name=\"cmfctoolbarbutton__oncustomizemenu\"></a>  CMFCToolBarButton::OnCustomizeMenu","source":"<a name=\"cmfctoolbarbutton__oncustomizemenu\"></a>  CMFCToolBarButton::OnCustomizeMenu"},{"content":"Allows the button to modify the provided menu when the application displays a shortcut menu on the parent toolbar.","pos":[46964,47078]},{"pos":[47147,47157],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pMenu`</ph>","pos":[47161,47173],"source":"[in] `pMenu`"},{"content":"The menu to customize.","pos":[47177,47199]},{"pos":[47209,47221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47225,47253],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph>.","source":"This method returns `FALSE`."},{"pos":[47263,47270],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation does nothing and returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[47274,47334],"source":"The default implementation does nothing and returns `FALSE`."},{"content":"Override this method and return a nonzero value if you want to modify the contents of the provided menu.","pos":[47335,47439]},{"pos":[47449,47520],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__ondblclk\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnDblClk","linkify":"<a name=\"cmfctoolbarbutton__ondblclk\"></a>  CMFCToolBarButton::OnDblClk","source":"<a name=\"cmfctoolbarbutton__ondblclk\"></a>  CMFCToolBarButton::OnDblClk"},{"pos":[47524,47669],"content":"Called by the framework when the parent toolbar handles a <bpt id=\"p1\">[</bpt>WM_LBUTTONDBLCLK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645606)</ept> message.","source":"Called by the framework when the parent toolbar handles a [WM_LBUTTONDBLCLK](http://msdn.microsoft.com/library/windows/desktop/ms645606) message."},{"pos":[47729,47739],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[47743,47754],"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","source":"[in] `pWnd`"},{"content":"The parent window of the button.","pos":[47762,47794]},{"pos":[47804,47811],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47815,48003],"content":"This method is called by the <ph id=\"ph1\">`CMFCToolBar::OnLButtonDblClk`</ph> method when the parent toolbar handles a <bpt id=\"p1\">[</bpt>WM_LBUTTONDBLCLK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645606)</ept> message.","source":"This method is called by the `CMFCToolBar::OnLButtonDblClk` method when the parent toolbar handles a [WM_LBUTTONDBLCLK](http://msdn.microsoft.com/library/windows/desktop/ms645606) message."},{"content":"The default implementation of this method does nothing.","pos":[48010,48065]},{"pos":[48075,48142],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__ondraw\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnDraw","linkify":"<a name=\"cmfctoolbarbutton__ondraw\"></a>  CMFCToolBarButton::OnDraw","source":"<a name=\"cmfctoolbarbutton__ondraw\"></a>  CMFCToolBarButton::OnDraw"},{"content":"Called by the framework to draw the button by using the specified styles and options.","pos":[48146,48231]},{"pos":[48503,48513],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[48517,48527],"source":"[in] `pDC`"},{"content":"The device context that displays the button.","pos":[48531,48575]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[48582,48593],"source":"[in] `rect`"},{"content":"The bounding rectangle of the button.","pos":[48597,48634]},{"content":"[in] <ph id=\"ph1\">`pImages`</ph>","pos":[48641,48655],"source":"[in] `pImages`"},{"content":"The collection of toolbar images that is associated with the button.","pos":[48659,48727]},{"content":"[in] <ph id=\"ph1\">`bHorz`</ph>","pos":[48734,48746],"source":"[in] `bHorz`"},{"content":"The dock state of the parent toolbar.","pos":[48750,48787]},{"content":"This parameter is <ph id=\"ph1\">`TRUE`</ph> when the button is docked horizontally and <ph id=\"ph2\">`FALSE`</ph> when the button is docked vertically.","pos":[48788,48901],"source":" This parameter is `TRUE` when the button is docked horizontally and `FALSE` when the button is docked vertically."},{"content":"[in] <ph id=\"ph1\">`bCustomizeMode`</ph>","pos":[48908,48929],"source":"[in] `bCustomizeMode`"},{"content":"Specifies whether the toolbar is in customization mode.","pos":[48933,48988]},{"content":"This parameter is <ph id=\"ph1\">`TRUE`</ph> when the toolbar is in customization mode and <ph id=\"ph2\">`FALSE`</ph> when the toolbar is not in customization mode.","pos":[48989,49114],"source":" This parameter is `TRUE` when the toolbar is in customization mode and `FALSE` when the toolbar is not in customization mode."},{"content":"[in] <ph id=\"ph1\">`bHighlight`</ph>","pos":[49121,49138],"source":"[in] `bHighlight`"},{"content":"Specifies whether the button is highlighted.","pos":[49142,49186]},{"content":"This parameter is <ph id=\"ph1\">`TRUE`</ph> when the button is highlighted and <ph id=\"ph2\">`FALSE`</ph> when the button is not highlighted.","pos":[49187,49290],"source":" This parameter is `TRUE` when the button is highlighted and `FALSE` when the button is not highlighted."},{"content":"[in] <ph id=\"ph1\">`bDrawBorder`</ph>","pos":[49297,49315],"source":"[in] `bDrawBorder`"},{"content":"Specifies whether the button should display its border.","pos":[49319,49374]},{"content":"This parameter is <ph id=\"ph1\">`TRUE`</ph> when the button should display its border and <ph id=\"ph2\">`FALSE`</ph> when the button should not display its border.","pos":[49375,49500],"source":" This parameter is `TRUE` when the button should display its border and `FALSE` when the button should not display its border."},{"content":"[in] <ph id=\"ph1\">`bGrayDisabledButtons`</ph>","pos":[49507,49534],"source":"[in] `bGrayDisabledButtons`"},{"content":"Specifies whether to shade disabled buttons or use the disabled images collection.","pos":[49538,49620]},{"content":"This parameter is <ph id=\"ph1\">`TRUE`</ph> when disabled buttons should be shaded and <ph id=\"ph2\">`FALSE`</ph> when this method should use the disabled images collection.","pos":[49621,49756],"source":" This parameter is `TRUE` when disabled buttons should be shaded and `FALSE` when this method should use the disabled images collection."},{"pos":[49766,49773],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method to customize toolbar button drawing.","pos":[49777,49834]},{"pos":[49844,49941],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__ondrawoncustomizelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnDrawOnCustomizeList","linkify":"<a name=\"cmfctoolbarbutton__ondrawoncustomizelist\"></a>  CMFCToolBarButton::OnDrawOnCustomizeList","source":"<a name=\"cmfctoolbarbutton__ondrawoncustomizelist\"></a>  CMFCToolBarButton::OnDrawOnCustomizeList"},{"pos":[49945,50045],"content":"Called by the framework to draw the button in the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> pane of the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> dialog box.","source":"Called by the framework to draw the button in the **Commands** pane of the **Customize** dialog box."},{"pos":[50167,50177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[50181,50191],"source":"[in] `pDC`"},{"content":"The device context that displays the button.","pos":[50195,50239]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[50246,50257],"source":"[in] `rect`"},{"content":"The bounding rectangle of the button.","pos":[50261,50298]},{"content":"[in] <ph id=\"ph1\">`bSelected`</ph>","pos":[50305,50321],"source":"[in] `bSelected`"},{"content":"Specifies whether the button is selected.","pos":[50325,50366]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the button is selected.","pos":[50367,50419],"source":" If this parameter is `TRUE`, the button is selected."},{"content":"If this parameter is <ph id=\"ph1\">`FALSE`</ph>, the button is not selected.","pos":[50420,50477],"source":" If this parameter is `FALSE`, the button is not selected."},{"pos":[50487,50499],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width, in pixels, of the button on the specified device context.","pos":[50503,50571]},{"pos":[50581,50588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[50592,50736],"content":"This method is called by the customization dialog box ( <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> tab) when the button is about to display itself on the owner-draw list box.","source":"This method is called by the customization dialog box ( **Commands** tab) when the button is about to display itself on the owner-draw list box."},{"content":"The default implementation of this method displays the image and text label of the button if they are available.","pos":[50743,50855]},{"content":"If the text label of the button is not available, the method displays the tooltip text.","pos":[50856,50943]},{"content":"Override this method to perform custom drawing.","pos":[50950,50997]},{"pos":[51007,51106],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__ongetcustomtooltiptext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnGetCustomToolTipText","linkify":"<a name=\"cmfctoolbarbutton__ongetcustomtooltiptext\"></a>  CMFCToolBarButton::OnGetCustomToolTipText","source":"<a name=\"cmfctoolbarbutton__ongetcustomtooltiptext\"></a>  CMFCToolBarButton::OnGetCustomToolTipText"},{"content":"Called by the framework to retrieve the custom tooltip text for the button.","pos":[51110,51185]},{"pos":[51268,51278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`strToolTip`</ph>","pos":[51282,51300],"source":"[out] `strToolTip`"},{"content":"A <ph id=\"ph1\">`CString`</ph> object that receives the custom tooltip text.","pos":[51304,51361],"source":" A `CString` object that receives the custom tooltip text."},{"pos":[51371,51383],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51387,51415],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph>.","source":"This method returns `FALSE`."},{"pos":[51425,51432],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method when it displays the tooltip for the toolbar button.","pos":[51436,51520]},{"content":"If this method returns <ph id=\"ph1\">`FALSE`</ph>, the framework uses a default tooltip.","pos":[51521,51590],"source":" If this method returns `FALSE`, the framework uses a default tooltip."},{"content":"The default implementation does nothing and returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[51597,51657],"source":"The default implementation does nothing and returns `FALSE`."},{"content":"Override this method and return a nonzero value to provide custom tooltip text for the toolbar button.","pos":[51658,51760]},{"pos":[51770,51865],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onglobalfontschanged\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnGlobalFontsChanged","linkify":"<a name=\"cmfctoolbarbutton__onglobalfontschanged\"></a>  CMFCToolBarButton::OnGlobalFontsChanged","source":"<a name=\"cmfctoolbarbutton__onglobalfontschanged\"></a>  CMFCToolBarButton::OnGlobalFontsChanged"},{"content":"Called by the framework when the global font has changed.","pos":[51869,51926]},{"pos":[51988,51995],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method does nothing.","pos":[51999,52054]},{"content":"Override this method to update the font that is used to display the button text.","pos":[52055,52135]},{"pos":[52145,52212],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onmove\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnMove","linkify":"<a name=\"cmfctoolbarbutton__onmove\"></a>  CMFCToolBarButton::OnMove","source":"<a name=\"cmfctoolbarbutton__onmove\"></a>  CMFCToolBarButton::OnMove"},{"content":"Called by the framework when the parent toolbar moves.","pos":[52216,52270]},{"pos":[52318,52325],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method does nothing.","pos":[52329,52384]},{"content":"Override this method to reposition the button when the parent toolbar moves.","pos":[52385,52461]},{"pos":[52471,52538],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onshow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnShow","linkify":"<a name=\"cmfctoolbarbutton__onshow\"></a>  CMFCToolBarButton::OnShow","source":"<a name=\"cmfctoolbarbutton__onshow\"></a>  CMFCToolBarButton::OnShow"},{"content":"Called by the framework when the button becomes visible or invisible.","pos":[52542,52611]},{"pos":[52669,52679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[52683,52695],"source":"[in] `bShow`"},{"content":"Specifies whether the button is visible.","pos":[52699,52739]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the button is visible.","pos":[52740,52791],"source":" If this parameter is `TRUE`, the button is visible."},{"content":"Otherwise, the button is not visible.","pos":[52792,52829]},{"pos":[52839,52846],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method does nothing.","pos":[52850,52905]},{"content":"Override this method to update the visibility of the button.","pos":[52906,52966]},{"pos":[52976,53043],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnSize","linkify":"<a name=\"cmfctoolbarbutton__onsize\"></a>  CMFCToolBarButton::OnSize","source":"<a name=\"cmfctoolbarbutton__onsize\"></a>  CMFCToolBarButton::OnSize"},{"content":"Called by the framework when the parent toolbar changes its size or position and this change causes the button to change size.","pos":[53047,53173]},{"pos":[53230,53240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iSize`</ph>","pos":[53244,53256],"source":"[in] `iSize`"},{"content":"The new width of the button.","pos":[53260,53288]},{"pos":[53298,53305],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method does nothing.","pos":[53309,53364]},{"content":"Override this method to resize the button when the size or position of the parent toolbar changes.","pos":[53365,53463]},{"pos":[53473,53554],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__ontoolhittest\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnToolHitTest","linkify":"<a name=\"cmfctoolbarbutton__ontoolhittest\"></a>  CMFCToolBarButton::OnToolHitTest","source":"<a name=\"cmfctoolbarbutton__ontoolhittest\"></a>  CMFCToolBarButton::OnToolHitTest"},{"content":"Called by the framework when the parent toolbar must determine whether a point is in the bounding rectangle of the button.","pos":[53558,53680]},{"pos":[53777,53787],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[53791,53802],"source":"[in] `pWnd`"},{"content":"The parent window of the button.","pos":[53806,53838]},{"content":"Can be <ph id=\"ph1\">`NULL`</ph>.","pos":[53839,53853],"source":" Can be `NULL`."},{"content":"[in] <ph id=\"ph1\">`pTI`</ph>","pos":[53860,53870],"source":"[in] `pTI`"},{"content":"A <ph id=\"ph1\">`TOOLINFO`</ph> structure that contains information about a tool in a tooltip control.","pos":[53874,53957],"source":" A `TOOLINFO` structure that contains information about a tool in a tooltip control."},{"pos":[53967,53979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53983,54106],"content":"The result of <ph id=\"ph1\">`OnMenuButtonToolHitTest`</ph> if the button can retrieve a pointer to the parent frame window; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"The result of `OnMenuButtonToolHitTest` if the button can retrieve a pointer to the parent frame window; otherwise `FALSE`."},{"pos":[54116,54123],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method calls one of the following methods if it can convert the parent window to a valid frame object:","pos":[54127,54234]},{"pos":[54242,54368],"content":"<bpt id=\"p1\">[</bpt>CMDIFrameWndEx::OnMenuButtonToolHitTest<ept id=\"p1\">](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__onmenubuttontoolhittest)</ept>","source":"[CMDIFrameWndEx::OnMenuButtonToolHitTest](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__onmenubuttontoolhittest)"},{"pos":[54376,54493],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnMenuButtonToolHitTest<ept id=\"p1\">](../../mfc/reference/cframewndex-class.md#cframewndex__onmenubuttontoolhittest)</ept>","source":"[CFrameWndEx::OnMenuButtonToolHitTest](../../mfc/reference/cframewndex-class.md#cframewndex__onmenubuttontoolhittest)"},{"pos":[54501,54633],"content":"<bpt id=\"p1\">[</bpt>COleIPFrameWndEx::OnMenuButtonToolHitTest<ept id=\"p1\">](../../mfc/reference/coleipframewndex-class.md#coleipframewndex__onmenubuttontoolhittest)</ept>","source":"[COleIPFrameWndEx::OnMenuButtonToolHitTest](../../mfc/reference/coleipframewndex-class.md#coleipframewndex__onmenubuttontoolhittest)"},{"pos":[54643,54728],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__onupdatetooltip\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::OnUpdateToolTip","linkify":"<a name=\"cmfctoolbarbutton__onupdatetooltip\"></a>  CMFCToolBarButton::OnUpdateToolTip","source":"<a name=\"cmfctoolbarbutton__onupdatetooltip\"></a>  CMFCToolBarButton::OnUpdateToolTip"},{"content":"Called by the framework when the parent toolbar updates its tooltip text.","pos":[54732,54805]},{"pos":[54959,54969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWndParent`</ph>","pos":[54973,54990],"source":"[in] `pWndParent`"},{"content":"The parent window.","pos":[54994,55012]},{"content":"[in] <ph id=\"ph1\">`iButtonIndex`</ph>","pos":[55019,55038],"source":"[in] `iButtonIndex`"},{"content":"The zero-based index of the button in the parent button collection.","pos":[55042,55109]},{"content":"[in] <ph id=\"ph1\">`wndToolTip`</ph>","pos":[55116,55133],"source":"[in] `wndToolTip`"},{"content":"The control that displays the tooltip text.","pos":[55137,55180]},{"content":"[out] <ph id=\"ph1\">`str`</ph>","pos":[55187,55198],"source":"[out] `str`"},{"content":"A <ph id=\"ph1\">`CString`</ph> object that receives the updated tooltip text.","pos":[55202,55260],"source":" A `CString` object that receives the updated tooltip text."},{"pos":[55270,55282],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55286,55314],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph>.","source":"This method returns `FALSE`."},{"pos":[55324,55331],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method does nothing and returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[55335,55410],"source":"The default implementation of this method does nothing and returns `FALSE`."},{"content":"Override this method to return a nonzero value if you provide a tooltip text string.","pos":[55411,55495]},{"pos":[55505,55582],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__preparedrag\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::PrepareDrag","linkify":"<a name=\"cmfctoolbarbutton__preparedrag\"></a>  CMFCToolBarButton::PrepareDrag","source":"<a name=\"cmfctoolbarbutton__preparedrag\"></a>  CMFCToolBarButton::PrepareDrag"},{"content":"Called by the framework when the button is about to perform a drag-and-drop operation.","pos":[55586,55672]},{"pos":[55748,55758],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`srcItem`</ph>","pos":[55762,55776],"source":"[in] `srcItem`"},{"content":"A <ph id=\"ph1\">`COleDataSource`</ph> object that stores state information about the drag-and-drop operation.","pos":[55780,55870],"source":" A `COleDataSource` object that stores state information about the drag-and-drop operation."},{"pos":[55880,55892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55896,55948],"content":"<ph id=\"ph1\">`TRUE`</ph> if the operation succeeds; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the operation succeeds; otherwise `FALSE`."},{"pos":[55958,55965],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to prepare the toolbar button to store its state in the provided <ph id=\"ph1\">`COleDataSource`</ph> object.","pos":[55969,56090],"source":"The framework calls this method to prepare the toolbar button to store its state in the provided `COleDataSource` object."},{"content":"This method stores its state by serializing itself to a shared file and then passing that file to the <bpt id=\"p1\">[</bpt>COleDataSource::CacheGlobalData<ept id=\"p1\">](../../mfc/reference/coledatasource-class.md#coledatasource__cacheglobaldata)</ept> method.","pos":[56091,56311],"source":" This method stores its state by serializing itself to a shared file and then passing that file to the [COleDataSource::CacheGlobalData](../../mfc/reference/coledatasource-class.md#coledatasource__cacheglobaldata) method."},{"content":"For more information about toolbar button serialization, see <bpt id=\"p1\">[</bpt>CMFCToolBarButton::Serialize<ept id=\"p1\">](#cmfctoolbarbutton__serialize)</ept>.","pos":[56312,56435],"source":" For more information about toolbar button serialization, see [CMFCToolBarButton::Serialize](#cmfctoolbarbutton__serialize)."},{"content":"This method does nothing and returns <ph id=\"ph1\">`TRUE`</ph> if the button cannot be stored (the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::CanBeStored<ept id=\"p1\">](#cmfctoolbarbutton__canbestored)</ept> method returns <ph id=\"ph2\">`FALSE`</ph>).","pos":[56442,56612],"source":"This method does nothing and returns `TRUE` if the button cannot be stored (the [CMFCToolBarButton::CanBeStored](#cmfctoolbarbutton__canbestored) method returns `FALSE`)."},{"content":"It returns <ph id=\"ph1\">`FALSE`</ph> if an exception occurs during object serialization.","pos":[56613,56683],"source":" It returns `FALSE` if an exception occurs during object serialization."},{"pos":[56690,56805],"content":"For more information about OLE drag-and-drop operations, see <bpt id=\"p1\">[</bpt>Drag and Drop (OLE)<ept id=\"p1\">](../../mfc/drag-and-drop-ole.md)</ept>.","source":"For more information about OLE drag-and-drop operations, see [Drag and Drop (OLE)](../../mfc/drag-and-drop-ole.md)."},{"pos":[56815,56878],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__rect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::Rect","linkify":"<a name=\"cmfctoolbarbutton__rect\"></a>  CMFCToolBarButton::Rect","source":"<a name=\"cmfctoolbarbutton__rect\"></a>  CMFCToolBarButton::Rect"},{"content":"Retrieves the bounding rectangle of the button.","pos":[56882,56929]},{"pos":[56984,56996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57000,57066],"content":"A <ph id=\"ph1\">`CRect`</ph> object that contains the bounding rectangle of a button.","source":"A `CRect` object that contains the bounding rectangle of a button."},{"pos":[57076,57169],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__resetimagetodefault\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::ResetImageToDefault","linkify":"<a name=\"cmfctoolbarbutton__resetimagetodefault\"></a>  CMFCToolBarButton::ResetImageToDefault","source":"<a name=\"cmfctoolbarbutton__resetimagetodefault\"></a>  CMFCToolBarButton::ResetImageToDefault"},{"content":"Sets to the default value the image that is associated with the button.","pos":[57173,57244]},{"pos":[57305,57312],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method retrieves the default image from its parent toolbar by using the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetDefaultImage<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getdefaultimage)</ept> method.","pos":[57316,57502],"source":"This method retrieves the default image from its parent toolbar by using the [CMFCToolBar::GetDefaultImage](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getdefaultimage) method."},{"content":"If the button has no associated default image, this method sets the text label of the button according to its string resource by using the <bpt id=\"p1\">[</bpt>CStringT::LoadString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md#cstringt__loadstring)</ept> method.","pos":[57503,57743],"source":" If the button has no associated default image, this method sets the text label of the button according to its string resource by using the [CStringT::LoadString](../../atl-mfc-shared/reference/cstringt-class.md#cstringt__loadstring) method."},{"content":"For more information about string resources, see <bpt id=\"p1\">[</bpt>Working with Resource Files<ept id=\"p1\">](../../mfc/working-with-resource-files.md)</ept>.","pos":[57744,57865],"source":" For more information about string resources, see [Working with Resource Files](../../mfc/working-with-resource-files.md)."},{"content":"This method does nothing if the button has a user-defined image.","pos":[57872,57936]},{"pos":[57946,58025],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__savebarstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::SaveBarState","linkify":"<a name=\"cmfctoolbarbutton__savebarstate\"></a>  CMFCToolBarButton::SaveBarState","source":"<a name=\"cmfctoolbarbutton__savebarstate\"></a>  CMFCToolBarButton::SaveBarState"},{"content":"Saves the state of the toolbar button.","pos":[58029,58067]},{"pos":[58121,58128],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[58132,58252],"content":"The framework calls this method when it creates a <ph id=\"ph1\">`CMFCToolBarButton`</ph> object as the result of a drag-and-drop operation.","source":"The framework calls this method when it creates a `CMFCToolBarButton` object as the result of a drag-and-drop operation."},{"content":"The default implementation of this method does nothing.","pos":[58259,58314]},{"content":"Override this method to save the state of the toolbar button to an external data source.","pos":[58315,58403]},{"pos":[58413,58486],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__serialize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::Serialize","linkify":"<a name=\"cmfctoolbarbutton__serialize\"></a>  CMFCToolBarButton::Serialize","source":"<a name=\"cmfctoolbarbutton__serialize\"></a>  CMFCToolBarButton::Serialize"},{"content":"Reads this object from an archive or writes it to an archive.","pos":[58490,58551]},{"pos":[58614,58624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`ar`</ph>","pos":[58628,58637],"source":"[in] `ar`"},{"content":"The <ph id=\"ph1\">`CArchive`</ph> object from which or to which to serialize.","pos":[58641,58699],"source":" The `CArchive` object from which or to which to serialize."},{"pos":[58709,58716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method supports data transfer processes such as clipboard or drag-and-drop operations.","pos":[58720,58811]},{"content":"It reads or writes properties of the button such as the ID, text label, and image ID from or to the provided <ph id=\"ph1\">`CArchive`</ph> object.","pos":[58812,58939],"source":" It reads or writes properties of the button such as the ID, text label, and image ID from or to the provided `CArchive` object."},{"pos":[58946,59067],"content":"For serialization examples, see <bpt id=\"p1\">[</bpt>Serialization: Serializing an Object<ept id=\"p1\">](../../mfc/serialization-serializing-an-object.md)</ept>.","source":"For serialization examples, see [Serialization: Serializing an Object](../../mfc/serialization-serializing-an-object.md)."},{"pos":[59077,59152],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__setaccdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::SetACCData","linkify":"<a name=\"cmfctoolbarbutton__setaccdata\"></a>  CMFCToolBarButton::SetACCData","source":"<a name=\"cmfctoolbarbutton__setaccdata\"></a>  CMFCToolBarButton::SetACCData"},{"pos":[59156,59255],"content":"Populates the provided <ph id=\"ph1\">`CAccessibilityData`</ph> object with accessibility data from the toolbar button.","source":"Populates the provided `CAccessibilityData` object with accessibility data from the toolbar button."},{"pos":[59357,59367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pParent`</ph>","pos":[59371,59385],"source":"[in] `pParent`"},{"content":"The parent window of the toolbar button.","pos":[59389,59429]},{"content":"[in] <ph id=\"ph1\">`data`</ph>","pos":[59436,59447],"source":"[in] `data`"},{"content":"A <ph id=\"ph1\">`CAccessibilityData`</ph> object that is populated with the accessibility data of the toolbar button.","pos":[59451,59549],"source":" A `CAccessibilityData` object that is populated with the accessibility data of the toolbar button."},{"pos":[59559,59571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59575,59602],"content":"This method returns <ph id=\"ph1\">`TRUE`</ph>.","source":"This method returns `TRUE`."},{"pos":[59612,59619],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[59623,59721],"content":"Override this method to return <ph id=\"ph1\">`FALSE`</ph> if your toolbar button does not provide accessibility data.","source":"Override this method to return `FALSE` if your toolbar button does not provide accessibility data."},{"pos":[59731,59830],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__setclipboardformatname\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::SetClipboardFormatName","linkify":"<a name=\"cmfctoolbarbutton__setclipboardformatname\"></a>  CMFCToolBarButton::SetClipboardFormatName","source":"<a name=\"cmfctoolbarbutton__setclipboardformatname\"></a>  CMFCToolBarButton::SetClipboardFormatName"},{"content":"Renames the global clipboard format.","pos":[59834,59870]},{"pos":[59959,59969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszName`</ph>","pos":[59973,59988],"source":"[in] `lpszName`"},{"content":"The new name of the global clipboard format.","pos":[59992,60036]},{"content":"Cannot be <ph id=\"ph1\">`NULL`</ph>.","pos":[60037,60054],"source":" Cannot be `NULL`."},{"pos":[60064,60071],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method makes it possible for drag-and-drop operations to occur among multiple applications.","pos":[60075,60171]},{"content":"Each application must supply the same clipboard format name.","pos":[60172,60232]},{"pos":[60239,60372],"content":"You must call this method before the framework calls <bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetClipboardFormat<ept id=\"p1\">](#cmfctoolbarbutton__getclipboardformat)</ept>.","source":"You must call this method before the framework calls [CMFCToolBarButton::GetClipboardFormat](#cmfctoolbarbutton__getclipboardformat)."},{"pos":[60382,60453],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__setimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::SetImage","linkify":"<a name=\"cmfctoolbarbutton__setimage\"></a>  CMFCToolBarButton::SetImage","source":"<a name=\"cmfctoolbarbutton__setimage\"></a>  CMFCToolBarButton::SetImage"},{"content":"Sets the image index of the button.","pos":[60457,60492]},{"pos":[60552,60562],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iImage`</ph>","pos":[60566,60579],"source":"[in] `iImage`"},{"content":"The index of the image in the collection of toolbar images.","pos":[60583,60642]},{"pos":[60652,60659],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[60663,60758],"content":"If the toolbar button is a separator, <ph id=\"ph1\">`iImage`</ph> refers to the new width of the separator button.","source":"If the toolbar button is a separator, `iImage` refers to the new width of the separator button."},{"pos":[60765,60890],"content":"If <ph id=\"ph1\">`iImage`</ph> is less than zero, this method disables drawing of the image and enables drawing of the text label of the button.","source":"If `iImage` is less than zero, this method disables drawing of the image and enables drawing of the text label of the button."},{"pos":[60900,60995],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__setprotectedcommands\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::SetProtectedCommands","linkify":"<a name=\"cmfctoolbarbutton__setprotectedcommands\"></a>  CMFCToolBarButton::SetProtectedCommands","source":"<a name=\"cmfctoolbarbutton__setprotectedcommands\"></a>  CMFCToolBarButton::SetProtectedCommands"},{"content":"Sets the list of commands that the user cannot customize.","pos":[60999,61056]},{"pos":[61153,61163],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lstCmds`</ph>","pos":[61167,61181],"source":"[in] `lstCmds`"},{"content":"The list of protected commands.","pos":[61185,61216]},{"pos":[61226,61233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In customization mode, the framework disables toolbar button commands that are protected.","pos":[61237,61326]},{"content":"The user cannot perform drag-and-drop and edit operations on disabled toolbar buttons.","pos":[61327,61413]},{"pos":[61420,61562],"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetProtectedCommands<ept id=\"p1\">](#cmfctoolbarbutton__getprotectedcommands)</ept> method to retrieve the list of protected commands.","source":"Use the [CMFCToolBarButton::GetProtectedCommands](#cmfctoolbarbutton__getprotectedcommands) method to retrieve the list of protected commands."},{"pos":[61572,61643],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__setradio\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::SetRadio","linkify":"<a name=\"cmfctoolbarbutton__setradio\"></a>  CMFCToolBarButton::SetRadio","source":"<a name=\"cmfctoolbarbutton__setradio\"></a>  CMFCToolBarButton::SetRadio"},{"content":"Called by the framework when a button changes its checked state.","pos":[61647,61711]},{"pos":[61761,61768],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method does nothing.","pos":[61772,61827]},{"content":"Override this method to perform a custom action when the button changes its checked state.","pos":[61828,61918]},{"pos":[61928,61997],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__setrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::SetRect","linkify":"<a name=\"cmfctoolbarbutton__setrect\"></a>  CMFCToolBarButton::SetRect","source":"<a name=\"cmfctoolbarbutton__setrect\"></a>  CMFCToolBarButton::SetRect"},{"content":"Sets the bounding rectangle of the button.","pos":[62001,62043]},{"pos":[62100,62110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[62114,62125],"source":"[in] `rect`"},{"content":"The new bounding rectangle of the button.","pos":[62129,62170]},{"pos":[62180,62187],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[62191,62317],"content":"This method calls the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnMove<ept id=\"p1\">](#cmfctoolbarbutton__onmove)</ept> method after it sets the new bounding rectangle.","source":"This method calls the [CMFCToolBarButton::OnMove](#cmfctoolbarbutton__onmove) method after it sets the new bounding rectangle."},{"pos":[62327,62398],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__setstyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::SetStyle","linkify":"<a name=\"cmfctoolbarbutton__setstyle\"></a>  CMFCToolBarButton::SetStyle","source":"<a name=\"cmfctoolbarbutton__setstyle\"></a>  CMFCToolBarButton::SetStyle"},{"content":"Sets the style of the button.","pos":[62402,62431]},{"pos":[62492,62502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nStyle`</ph>","pos":[62506,62519],"source":"[in] `nStyle`"},{"content":"The new style of the button.","pos":[62523,62551]},{"pos":[62561,62568],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation sets the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_nStyle<ept id=\"p1\">](#cmfctoolbarbutton__m_nstyle)</ept> data member to <ph id=\"ph1\">`nStyle`</ph>.","pos":[62572,62692],"source":"The default implementation sets the [CMFCToolBarButton::m_nStyle](#cmfctoolbarbutton__m_nstyle) data member to `nStyle`."},{"content":"Override this method if you want to perform additional processing to handle the change in style.","pos":[62693,62789]},{"content":"See <bpt id=\"p1\">[</bpt>ToolBar Control Styles<ept id=\"p1\">](toolbar-control-styles.md)</ept> for a list of valid style flags.","pos":[62790,62878],"source":" See [ToolBar Control Styles](toolbar-control-styles.md) for a list of valid style flags."},{"pos":[62888,62963],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__setvisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::SetVisible","linkify":"<a name=\"cmfctoolbarbutton__setvisible\"></a>  CMFCToolBarButton::SetVisible","source":"<a name=\"cmfctoolbarbutton__setvisible\"></a>  CMFCToolBarButton::SetVisible"},{"content":"Specifies whether the button is visible.","pos":[62967,63007]},{"pos":[63066,63076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[63080,63092],"source":"[in] `bShow`"},{"content":"A Boolean value that specifies whether to show or hide the button.","pos":[63096,63162]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the button is shown.","pos":[63163,63212],"source":" If this parameter is `TRUE`, the button is shown."},{"content":"If the parameter is <ph id=\"ph1\">`FALSE`</ph>, the button is hidden.","pos":[63213,63263],"source":" If the parameter is `FALSE`, the button is hidden."},{"pos":[63273,63280],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this function to hide or show a particular toolbar button.","pos":[63284,63346]},{"content":"Call the <bpt id=\"p1\">[</bpt>CPane::AdjustSizeImmediate<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate)</ept> method after you call this method.","pos":[63347,63482],"source":" Call the [CPane::AdjustSizeImmediate](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate) method after you call this method."},{"pos":[63492,63555],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarbutton__show\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarButton::Show","linkify":"<a name=\"cmfctoolbarbutton__show\"></a>  CMFCToolBarButton::Show","source":"<a name=\"cmfctoolbarbutton__show\"></a>  CMFCToolBarButton::Show"},{"content":"Shows or hides the button.","pos":[63559,63585]},{"pos":[63633,63643],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[63647,63659],"source":"[in] `bShow`"},{"content":"A Boolean value that specifies whether to show or hide the button.","pos":[63663,63729]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the button is shown.","pos":[63730,63779],"source":" If this parameter is `TRUE`, the button is shown."},{"content":"If the parameter is <ph id=\"ph1\">`FALSE`</ph>, the button is hidden.","pos":[63780,63830],"source":" If the parameter is `FALSE`, the button is hidden."},{"pos":[63840,63847],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to update the visibility of toolbar buttons when their parent toolbar is resized.","pos":[63851,63964]},{"content":"The framework calls this method with <ph id=\"ph1\">`bShow`</ph> set to <ph id=\"ph2\">`FALSE`</ph> when the button no longer fits within the bounds of the toolbar.","pos":[63965,64089],"source":" The framework calls this method with `bShow` set to `FALSE` when the button no longer fits within the bounds of the toolbar."},{"content":"The framework calls this method with <ph id=\"ph1\">`bShow`</ph> set to <ph id=\"ph2\">`TRUE`</ph> when after resizing the button again fits within the bounds of the toolbar.","pos":[64090,64224],"source":" The framework calls this method with `bShow` set to `TRUE` when after resizing the button again fits within the bounds of the toolbar."},{"pos":[64231,64354],"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetVisible<ept id=\"p1\">](#cmfctoolbarbutton__setvisible)</ept> method to set the general visibility of the button.","source":"Use the [CMFCToolBarButton::SetVisible](#cmfctoolbarbutton__setvisible) method to set the general visibility of the button."},{"pos":[64361,64498],"content":"This method calls the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnShow<ept id=\"p1\">](#cmfctoolbarbutton__onshow)</ept> method after it updates the visibility state of the button.","source":"This method calls the [CMFCToolBarButton::OnShow](#cmfctoolbarbutton__onshow) method after it updates the visibility state of the button."},{"pos":[64507,64515],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[64519,64567],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[64570,64617],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCToolBar Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[64620,64683],"source":" [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCToolBarImages Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept>","pos":[64686,64760],"source":" [CMFCToolBarImages Class](../../mfc/reference/cmfctoolbarimages-class.md)"}],"content":"---\ntitle: \"CMFCToolBarButton Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCToolBarButton\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCToolBarButton class\"\nms.assetid: 8a6ecffb-86b0-4f5c-8211-a9146b463efd\ncaps.latest.revision: 34\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCToolBarButton Class\nProvides button functionality to toolbars.  \n  \n## Syntax  \n  \n```  \nclass CMFCToolBarButton : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarButton::CMFCToolBarButton](#cmfctoolbarbutton__cmfctoolbarbutton)|Constructs and initializes a `CMFCToolBarButton` object.|  \n|`CMFCToolBarButton::~CMFCToolBarButton`|Destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarButton::CanBeDropped](#cmfctoolbarbutton__canbedropped)|Specifies whether a user can position a button on a toolbar or menu during customization.|  \n|[CMFCToolBarButton::CanBeStored](#cmfctoolbarbutton__canbestored)|Specifies whether the button can be stored.|  \n|[CMFCToolBarButton::CanBeStretched](#cmfctoolbarbutton__canbestretched)|Specifies whether a user can stretch the button during customization.|  \n|[CMFCToolBarButton::CompareWith](#cmfctoolbarbutton__comparewith)|Compares this instance with the provided `CMFCToolBarButton` object.|  \n|[CMFCToolBarButton::CopyFrom](#cmfctoolbarbutton__copyfrom)|Copies the properties of another toolbar button to the current button.|  \n|[CMFCToolBarButton::CreateFromOleData](#cmfctoolbarbutton__createfromoledata)|Creates a `CMFCToolBarButton` object from the provided `COleDataObject` object.|  \n|`CMFCToolBarButton::CreateObject`|Used by the framework to create a dynamic instance of this class type.|  \n|[CMFCToolBarButton::EnableWindow](#cmfctoolbarbutton__enablewindow)|Enables or disables mouse and keyboard input.|  \n|[CMFCToolBarButton::ExportToMenuButton](#cmfctoolbarbutton__exporttomenubutton)|Copies text from the toolbar button to a menu.|  \n|[CMFCToolBarButton::GetClipboardFormat](#cmfctoolbarbutton__getclipboardformat)|Retrieves the global clipboard format for the application.|  \n|[CMFCToolBarButton::GetHwnd](#cmfctoolbarbutton__gethwnd)|Retrieves the window handle that is associated with the toolbar button.|  \n|[CMFCToolBarButton::GetImage](#cmfctoolbarbutton__getimage)|Retrieves the image index of the button.|  \n|[CMFCToolBarButton::GetInvalidateRect](#cmfctoolbarbutton__getinvalidaterect)|Retrieves the region of the client area of the button that must be redrawn.|  \n|[CMFCToolBarButton::GetParentWnd](#cmfctoolbarbutton__getparentwnd)|Retrieves the parent window of the button.|  \n|[CMFCToolBarButton::GetProtectedCommands](#cmfctoolbarbutton__getprotectedcommands)|Retrieves the list of commands that the user cannot customize.|  \n|[CMFCToolBarButton::GetTextSize](#cmfctoolbarbutton__gettextsize)|Retrieves the size of the button text.|  \n|[CMFCToolBarButton::HasFocus](#cmfctoolbarbutton__hasfocus)|Determines whether the button has the current input focus.|  \n|[CMFCToolBarButton::HaveHotBorder](#cmfctoolbarbutton__havehotborder)|Determines whether a border of the button is displayed when a user selects the button.|  \n|[CMFCToolBarButton::IsDrawImage](#cmfctoolbarbutton__isdrawimage)|Determines whether an image is displayed on the button.|  \n|[CMFCToolBarButton::IsDrawText](#cmfctoolbarbutton__isdrawtext)|Determines whether a text label is displayed on the button.|  \n|[CMFCToolBarButton::IsDroppedDown](#cmfctoolbarbutton__isdroppeddown)|Determines whether the button displays a submenu.|  \n|[CMFCToolBarButton::IsEditable](#cmfctoolbarbutton__iseditable)|Determines whether the button can be customized.|  \n|[CMFCToolBarButton::IsExtraSize](#cmfctoolbarbutton__isextrasize)|Determines whether the button can be displayed with an extended border.|  \n|[CMFCToolBarButton::IsFirstInGroup](#cmfctoolbarbutton__isfirstingroup)|Determines whether the button is in the first position in its button group.|  \n|[CMFCToolBarButton::IsHidden](#cmfctoolbarbutton__ishidden)|Determines whether the button is hidden.|  \n|[CMFCToolBarButton::IsHorizontal](#cmfctoolbarbutton__ishorizontal)|Determines whether the button is located on a horizontal toolbar.|  \n|[CMFCToolBarButton::IsLastInGroup](#cmfctoolbarbutton__islastingroup)|Specifies whether the button is in the last position in its button group.|  \n|[CMFCToolBarButton::IsLocked](#cmfctoolbarbutton__islocked)|Determines whether the button is on a locked (non-customizable) toolbar.|  \n|[CMFCToolBarButton::IsOwnerOf](#cmfctoolbarbutton__isownerof)|Determines whether the button is the owner of the provided window handle.|  \n|[CMFCToolBarButton::IsVisible](#cmfctoolbarbutton__isvisible)|Determines whether the toolbar button is visible.|  \n|[CMFCToolBarButton::IsWindowVisible](#cmfctoolbarbutton__iswindowvisible)|Determines whether the underlying window handle of the button is visible.|  \n|[CMFCToolBarButton::NotifyCommand](#cmfctoolbarbutton__notifycommand)|Specifies whether the button processes the [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message.|  \n|[CMFCToolBarButton::OnAddToCustomizePage](#cmfctoolbarbutton__onaddtocustomizepage)|Called by the framework when the button is added to a **Customize** dialog box.|  \n|[CMFCToolBarButton::OnBeforeDrag](#cmfctoolbarbutton__onbeforedrag)|Specifies whether the button can be dragged.|  \n|[CMFCToolBarButton::OnBeforeDrop](#cmfctoolbarbutton__onbeforedrop)|Specifies whether a user can drop the button onto the target toolbar.|  \n|[CMFCToolBarButton::OnCalculateSize](#cmfctoolbarbutton__oncalculatesize)|Called by the framework to calculate the size of the button for the specified device context and docking state.|  \n|[CMFCToolBarButton::OnCancelMode](#cmfctoolbarbutton__oncancelmode)|Called by the framework to handle the [WM_CANCELMODE](http://msdn.microsoft.com/library/windows/desktop/ms632615) message.|  \n|[CMFCToolBarButton::OnChangeParentWnd](#cmfctoolbarbutton__onchangeparentwnd)|Called by the framework when the button is inserted into a new toolbar.|  \n|[CMFCToolBarButton::OnClick](#cmfctoolbarbutton__onclick)|Called by the framework when the user clicks the mouse button.|  \n|[CMFCToolBarButton::OnClickUp](#cmfctoolbarbutton__onclickup)|Called by the framework when the user releases the mouse button.|  \n|[CMFCToolBarButton::OnContextHelp](#cmfctoolbarbutton__oncontexthelp)|Called by the framework when the parent toolbar handles a `WM_HELPHITTEST` message.|  \n|[CMFCToolBarButton::OnCtlColor](#cmfctoolbarbutton__onctlcolor)|Called by the framework when the parent toolbar handles a `WM_CTLCOLOR` message.|  \n|[CMFCToolBarButton::OnCustomizeMenu](#cmfctoolbarbutton__oncustomizemenu)|Allows the button to modify the provided menu when the application displays a shortcut menu on the parent toolbar.|  \n|[CMFCToolBarButton::OnDblClk](#cmfctoolbarbutton__ondblclk)|Called by the framework when the parent toolbar handles a [WM_LBUTTONDBLCLK](http://msdn.microsoft.com/library/windows/desktop/ms645606) message.|  \n|[CMFCToolBarButton::OnDraw](#cmfctoolbarbutton__ondraw)|Called by the framework to draw the button by using the specified styles and options.|  \n|[CMFCToolBarButton::OnDrawOnCustomizeList](#cmfctoolbarbutton__ondrawoncustomizelist)|Called by the framework to draw the button in the **Commands** pane of the **Customize** dialog box.|  \n|[CMFCToolBarButton::OnGetCustomToolTipText](#cmfctoolbarbutton__ongetcustomtooltiptext)|Called by the framework to retrieve the custom tooltip text for the button.|  \n|[CMFCToolBarButton::OnGlobalFontsChanged](#cmfctoolbarbutton__onglobalfontschanged)|Called by the framework when the global font has changed.|  \n|[CMFCToolBarButton::OnMove](#cmfctoolbarbutton__onmove)|Called by the framework when the parent toolbar moves.|  \n|[CMFCToolBarButton::OnShow](#cmfctoolbarbutton__onshow)|Called by the framework when the button becomes visible or invisible.|  \n|[CMFCToolBarButton::OnSize](#cmfctoolbarbutton__onsize)|Called by the framework when the parent toolbar changes its size or position and this change requires the button to change size.|  \n|[CMFCToolBarButton::OnToolHitTest](#cmfctoolbarbutton__ontoolhittest)|Called by the framework when the parent toolbar must determine whether a point is in the bounding rectangle of the button.|  \n|[CMFCToolBarButton::OnUpdateToolTip](#cmfctoolbarbutton__onupdatetooltip)|Called by the framework when the parent toolbar updates its tooltip text.|  \n|[CMFCToolBarButton::PrepareDrag](#cmfctoolbarbutton__preparedrag)|Called by the framework when the button is about to perform a drag-and-drop operation.|  \n|[CMFCToolBarButton::Rect](#cmfctoolbarbutton__rect)|Retrieves the bounding rectangle of the button.|  \n|[CMFCToolBarButton::ResetImageToDefault](#cmfctoolbarbutton__resetimagetodefault)|Sets to the default value the image that is associated with the button.|  \n|[CMFCToolBarButton::SaveBarState](#cmfctoolbarbutton__savebarstate)|Saves the state of the toolbar button.|  \n|[CMFCToolBarButton::Serialize](#cmfctoolbarbutton__serialize)|Reads this object from an archive or writes it to an archive. (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)|  \n|[CMFCToolBarButton::SetACCData](#cmfctoolbarbutton__setaccdata)|Populates the provided `CAccessibilityData` object with accessibility data from the toolbar button.|  \n|[CMFCToolBarButton::SetClipboardFormatName](#cmfctoolbarbutton__setclipboardformatname)|Renames the global clipboard format.|  \n|[CMFCToolBarButton::SetImage](#cmfctoolbarbutton__setimage)|Sets the image index of the button.|  \n|[CMFCToolBarButton::SetProtectedCommands](#cmfctoolbarbutton__setprotectedcommands)|Sets the list of commands that the user cannot customize.|  \n|[CMFCToolBarButton::SetRadio](#cmfctoolbarbutton__setradio)|Called by the framework when a button changes its checked state.|  \n|[CMFCToolBarButton::SetRect](#cmfctoolbarbutton__setrect)|Sets the bounding rectangle of the button.|  \n|[CMFCToolBarButton::SetStyle](#cmfctoolbarbutton__setstyle)|Sets the style of the button.|  \n|[CMFCToolBarButton::SetVisible](#cmfctoolbarbutton__setvisible)|Specifies whether the button is visible.|  \n|[CMFCToolBarButton::Show](#cmfctoolbarbutton__show)|Shows or hides the button.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarButton::m_bImage](#cmfctoolbarbutton__m_bimage)|Specifies whether an image is displayed on the button.|  \n|[CMFCToolBarButton::m_bText](#cmfctoolbarbutton__m_btext)|Specifies whether a text label is displayed on the button.|  \n|[CMFCToolBarButton::m_bTextBelow](#cmfctoolbarbutton__m_btextbelow)|Specifies whether the text label is displayed underneath the image on the button.|  \n|[CMFCToolBarButton::m_bUserButton](#cmfctoolbarbutton__m_buserbutton)|Specifies whether the button has a user-defined image.|  \n|[CMFCToolBarButton::m_bWholeText](#cmfctoolbarbutton__m_bwholetext)|Specifies whether the button displays its full text label even if it does not fit in the bounding rectangle.|  \n|[CMFCToolBarButton::m_bWrap](#cmfctoolbarbutton__m_bwrap)|Specifies whether the button next to a separator will be put on the next row.|  \n|[CMFCToolBarButton::m_bWrapText](#cmfctoolbarbutton__m_bwraptext)|Specifies whether multi-line text labels are enabled.|  \n|[CMFCToolBarButton::m_nID](#cmfctoolbarbutton__m_nid)|The command ID of the button.|  \n|[CMFCToolBarButton::m_nStyle](#cmfctoolbarbutton__m_nstyle)|The style of the button.|  \n|[CMFCToolBarButton::m_strText](#cmfctoolbarbutton__m_strtext)|The text label of the button.|  \n  \n## Remarks  \n A `CMFCToolbarButton` object is a control that resides on a toolbar. Its behavior resembles that of an ordinary button. You can assign an image and a text label to this object. A toolbar button can also have a command ID. When the user clicks the toolbar button, the framework executes the command that this ID specifies.  \n  \n Typically, toolbar buttons can be customized: the user can drag buttons from one toolbar to another, and copy, paste, delete, and edit text labels and images. To prevent the user from customizing the toolbar, you can lock the toolbar in one of two ways. Either set the `bLocked` flag to `TRUE` when you call [CMFCToolBar::LoadToolBar](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__loadtoolbar), or add the command ID of an individual button to the global list of protected commands by using the [CMFCToolBarButton::SetProtectedCommands](#cmfctoolbarbutton__setprotectedcommands) method.  \n  \n `CMFCToolBarButton` objects display images from the global collections of toolbar images in the application. These collections are maintained by the parent toolbar, [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md). For more information, see [CMFCToolBarImages Class](../../mfc/reference/cmfctoolbarimages-class.md).  \n  \n When the user clicks a toolbar button, its parent toolbar processes the mouse message and communicates the appropriate actions to the button. If the button has a valid command ID, the parent toolbar sends the `WM_COMMAND` message to the parent frame.  \n  \n The `CMFCToolBarButton` class is the base class for other toolbar button classes, such as [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md), [CMFCToolBarEditBoxButton Class](../../mfc/reference/cmfctoolbareditboxbutton-class.md), and [CMFCToolBarComboBoxButton Class](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md).  \n  \n## Example  \n The following example demonstrates how to configure a `CMFCToolBarButton` object by using various methods in the `CMFCToolBarButton` class. The example illustrates how to enable the mouse and keyboard input, set the image index of the button, set the bounding rectangle of the button, and make the button visible. This code snippet is part of the [Tab Control sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_TabControl#1](../../mfc/reference/codesnippet/cpp/cmfctoolbarbutton-class_1.cpp)]  \n[!code-cpp[NVC_MFC_TabControl#2](../../mfc/reference/codesnippet/cpp/cmfctoolbarbutton-class_2.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)  \n  \n## Requirements  \n **Header:** afxtoolbarbutton.h  \n  \n##  <a name=\"cmfctoolbarbutton__canbedropped\"></a>  CMFCToolBarButton::CanBeDropped  \n Specifies whether a user can position a button on a toolbar or menu during customization.  \n  \n```  \nvirtual BOOL CanBeDropped(CMFCToolBar* pToolbar);\n```  \n  \n### Parameters  \n [in] `pToolbar`  \n Unused.  \n  \n### Return Value  \n This method returns `TRUE`.  \n  \n### Remarks  \n By default, a toolbar button can be dropped on every customizable (that is, non-locked) toolbar.  \n  \n The default implementation of this method returns `TRUE`. Override this method and return `FALSE` if you want to prevent the user from repositioning the button.  \n  \n##  <a name=\"cmfctoolbarbutton__canbestored\"></a>  CMFCToolBarButton::CanBeStored  \n Determines whether the button can be stored.  \n  \n```  \nvirtual BOOL CanBeStored() const;\n\n \n```  \n  \n### Return Value  \n This method returns `TRUE`.  \n  \n### Remarks  \n The framework uses this method to determine whether the button can participate in a drag-and-drop operation.  \n  \n The default implementation returns `TRUE`. Override this method if your button cannot be stored as part of a drag-and-drop operation. For more information about drag-and-drop operations, see [Drag and Drop (OLE)](../../mfc/drag-and-drop-ole.md).  \n  \n##  <a name=\"cmfctoolbarbutton__canbestretched\"></a>  CMFCToolBarButton::CanBeStretched  \n Specifies whether a user can stretch the button during customization.  \n  \n```  \nvirtual BOOL CanBeStretched() const;\n\n \n```  \n  \n### Return Value  \n This method returns `FALSE`.  \n  \n### Remarks  \n This method is used by the framework to determine whether the button can be stretched in customization mode.  \n  \n The default implementation of this method returns `FALSE`. Override this method to return `TRUE` for a variable-width control such as a combo box or slider.  \n  \n For more information about customization mode, see [CMFCToolBar::SetCustomizeMode](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode).  \n  \n##  <a name=\"cmfctoolbarbutton__cmfctoolbarbutton\"></a>  CMFCToolBarButton::CMFCToolBarButton  \n Constructs and initializes a `CMFCToolBarButton` object.  \n  \n```  \nCMFCToolBarButton(\n    UINT uiID,  \n    int iImage,  \n    LPCTSTR lpszText=NULL,  \n    BOOL bUserButton=FALSE,  \n    BOOL bLocked=FALSE);\n```  \n  \n### Parameters  \n [in] `uiID`  \n The command ID of the button.  \n  \n [in] `iImage`  \n The image index of the button in the collection of images.  \n  \n [in] `lpszText`  \n The text label of the button. Can be `NULL`.  \n  \n [in] `bUserButton`  \n A Boolean value that determines whether the button is user-defined. If this parameter is `TRUE`, the button is user-defined. Otherwise, the button image is loaded from a resource.  \n  \n [in] `bLocked`  \n A Boolean value that determines whether the button can be customized. If this parameter is `TRUE`, the button cannot be customized. Otherwise, the button can be customized.  \n  \n##  <a name=\"cmfctoolbarbutton__comparewith\"></a>  CMFCToolBarButton::CompareWith  \n Compares this instance with the provided `CMFCToolBarButton` object.  \n  \n```  \nvirtual BOOL CompareWith(const CMFCToolBarButton& other) const;\n\n \n```  \n  \n### Parameters  \n [in] `other`  \n Reference to the object to compare with this instance.  \n  \n### Return Value  \n Nonzero if the provided object equals the value of this instance; otherwise, 0.  \n  \n### Remarks  \n The default implementation determines whether the command ID of the provided object equals the command ID of this instance. Override this method if you must perform additional processing to determine whether two `CMFCToolBarButton` objects are equal.  \n  \n##  <a name=\"cmfctoolbarbutton__copyfrom\"></a>  CMFCToolBarButton::CopyFrom  \n Copies the properties of another toolbar button to the current button.  \n  \n```  \nvirtual void CopyFrom(const CMFCToolBarButton& src);\n```  \n  \n### Parameters  \n [in] `src`  \n A reference to the source button from which to copy.  \n  \n### Remarks  \n Call this method to copy another toolbar button to this toolbar button.  \n  \n##  <a name=\"cmfctoolbarbutton__createfromoledata\"></a>  CMFCToolBarButton::CreateFromOleData  \n Creates a `CMFCToolBarButton` object from the provided `COleDataObject` object.  \n  \n```  \nstatic CMFCToolBarButton* __stdcall CreateFromOleData(COleDataObject* pDataObject);\n```  \n  \n### Parameters  \n [in] `pDataObject`  \n The source OLE data object.  \n  \n### Return Value  \n The created `CMFCToolBarButton` object.  \n  \n### Remarks  \n This method is used by the framework to perform data transfer in various formats. For example, the `CMFCOutlookBarPane::OnDragOver` method uses this method to perform drag-and-drop operations.  \n  \n##  <a name=\"cmfctoolbarbutton__enablewindow\"></a>  CMFCToolBarButton::EnableWindow  \n Enables or disables mouse and keyboard input.  \n  \n```  \nvirtual void EnableWindow(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n Set this parameter to `TRUE` to enable input, or to `FALSE` to disable input.  \n  \n### Remarks  \n This method calls the `EnableWindow` function to enable or disable input. For more information, see [EnableWindow](http://msdn.microsoft.com/library/windows/desktop/ms646291) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cmfctoolbarbutton__exporttomenubutton\"></a>  CMFCToolBarButton::ExportToMenuButton  \n Copies text from the toolbar button to a menu.  \n  \n```  \nvirtual BOOL ExportToMenuButton(CMFCToolBarMenuButton& menuButton) const;\n\n \n```  \n  \n### Parameters  \n [in] `menuButton`  \n A reference to the target menu button.  \n  \n### Return Value  \n This method returns `TRUE`.  \n  \n### Remarks  \n The framework calls this method to copy the text from a toolbar button to a menu button. The default implementation copies the text label of the button. If the text label is empty, this method copies the tooltip text of the button.  \n  \n The default implementation of this method returns `TRUE`. Override this method if you want to take additional actions when the framework converts an object that is derived from [CMFCToolbarButton](../../mfc/reference/cmfctoolbarbutton-class.md) to a menu button.  \n  \n##  <a name=\"cmfctoolbarbutton__getclipboardformat\"></a>  CMFCToolBarButton::GetClipboardFormat  \n Retrieves the global clipboard format for the application.  \n  \n```  \nstatic CLIPFORMAT __stdcall GetClipboardFormat();\n```  \n  \n### Return Value  \n The global `CLIPFORMAT` value for the application.  \n  \n### Remarks  \n The framework calls this method to retrieve the clipboard format for OLE data transfer operations. For example, the [CMFCToolBarButton::CreateFromOleData](#cmfctoolbarbutton__createfromoledata) method uses this method to copy data from a source OLE data object.  \n  \n This method sets the global `CLIPFORMAT` value the first time this method is called. All subsequent calls to this method return this value.  \n  \n To allow drag-and-drop operations to occur between applications, call the [CMFCToolBarButton::SetClipboardFormatName](#cmfctoolbarbutton__setclipboardformatname) method.  \n  \n For more information about clipboards in MFC, see [Clipboard](../../mfc/clipboard.md).  \n  \n##  <a name=\"cmfctoolbarbutton__gethwnd\"></a>  CMFCToolBarButton::GetHwnd  \n Retrieves the window handle that is associated with the toolbar button.  \n  \n```  \nvirtual HWND GetHwnd();\n```  \n  \n### Return Value  \n The window handle that is associated with the toolbar button or `NULL` if the toolbar button has no associated window handle.  \n  \n### Remarks  \n The default implementation of this method returns `NULL`. Override this method to return the window handle of your specific control.  \n  \n##  <a name=\"cmfctoolbarbutton__getimage\"></a>  CMFCToolBarButton::GetImage  \n Retrieves the image index of the button.  \n  \n```  \nint GetImage() const;\n\n \n```  \n  \n### Return Value  \n The index of the image associated with this button.  \n  \n### Remarks  \n If the button has a user-defined image (that is, if `bUserButton` was `TRUE` in the constructor), the returned index specifies an image in the collection of user-defined images (see [CMFCToolBar::GetUserImages](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getuserimages)). Otherwise, the index specifies an image in the collection of images that are loaded from a resource file (see [CMFCToolBar::GetImages](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getimages)). For more information about resource files, see [Working with Resource Files](../../mfc/working-with-resource-files.md).  \n  \n##  <a name=\"cmfctoolbarbutton__getinvalidaterect\"></a>  CMFCToolBarButton::GetInvalidateRect  \n Retrieves the region of the client area of the button that must be redrawn.  \n  \n```  \nvirtual const CRect GetInvalidateRect() const;\n\n \n```  \n  \n### Return Value  \n A `CRect` object that specifies the region that must be redrawn.  \n  \n### Remarks  \n The default implementation of this method returns the whole client area. Override this method if you want a different area to be redrawn.  \n  \n##  <a name=\"cmfctoolbarbutton__getparentwnd\"></a>  CMFCToolBarButton::GetParentWnd  \n Retrieves the parent window of the button.  \n  \n```  \nCWnd* GetParentWnd() const;\n\n \n```  \n  \n### Return Value  \n The parent window of the button.  \n  \n##  <a name=\"cmfctoolbarbutton__getprotectedcommands\"></a>  CMFCToolBarButton::GetProtectedCommands  \n Retrieves the list of commands that the user cannot customize.  \n  \n```  \nstatic const CList<UINT,UINT>& GetProtectedCommands();\n```  \n  \n### Return Value  \n The list of protected commands.  \n  \n### Remarks  \n In customization mode, the framework disables toolbar button commands that are protected. The user cannot perform drag-and-drop and edit operations on disabled toolbar buttons.  \n  \n Use the [CMFCToolBarButton::SetProtectedCommands](#cmfctoolbarbutton__setprotectedcommands) method to define the list of protected commands.  \n  \n##  <a name=\"cmfctoolbarbutton__gettextsize\"></a>  CMFCToolBarButton::GetTextSize  \n Retrieves the size of the button text.  \n  \n```  \nSIZE GetTextSize() const;\n\n \n```  \n  \n### Return Value  \n A `SIZE` object that contains the size, in pixels, of the button text.  \n  \n##  <a name=\"cmfctoolbarbutton__hasfocus\"></a>  CMFCToolBarButton::HasFocus  \n Determines whether the button has the current input focus.  \n  \n```  \nvirtual BOOL HasFocus() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the button has the input focus; otherwise 0.  \n  \n### Remarks  \n The default implementation of this method returns nonzero if the button has the input focus or is a child or descendant window of the window that has the input focus. You can override this function to customize this behavior.  \n  \n##  <a name=\"cmfctoolbarbutton__havehotborder\"></a>  CMFCToolBarButton::HaveHotBorder  \n Determines whether a border of the button is displayed when a user selects the button.  \n  \n```  \nvirtual BOOL HaveHotBorder() const;\n\n \n```  \n  \n### Return Value  \n This method returns `TRUE`.  \n  \n### Remarks  \n The framework calls this method to determine whether the toolbar button should display its border when a user selects it.  \n  \n The default implementation returns `TRUE`. You can override this method to customize this behavior.  \n  \n##  <a name=\"cmfctoolbarbutton__isdrawimage\"></a>  CMFCToolBarButton::IsDrawImage  \n Determines whether an image is displayed on the button.  \n  \n```  \nBOOL IsDrawImage() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if an image is displayed on the button; otherwise 0.  \n  \n### Remarks  \n This method returns `FALSE` if the toolbar button has no associated image ( [CMFCToolBarButton::GetImage](#cmfctoolbarbutton__getimage) returns -1) or if [CMFCToolBarButton::m_bImage](#cmfctoolbarbutton__m_bimage) is set to `FALSE`.  \n  \n##  <a name=\"cmfctoolbarbutton__isdrawtext\"></a>  CMFCToolBarButton::IsDrawText  \n Determines whether a text label is displayed on the button.  \n  \n```  \nBOOL IsDrawText() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if a text label is displayed; otherwise 0.  \n  \n### Remarks  \n This method returns `FALSE` if the toolbar button has no associated text label ( [CMFCToolBarButton::m_strText](#cmfctoolbarbutton__m_strtext) is empty) or [CMFCToolBarButton::m_bText](#cmfctoolbarbutton__m_btext) is set to `FALSE`.  \n  \n##  <a name=\"cmfctoolbarbutton__isdroppeddown\"></a>  CMFCToolBarButton::IsDroppedDown  \n Determines whether the button displays a submenu.  \n  \n```  \nvirtual BOOL IsDroppedDown() const;\n\n \n```  \n  \n### Return Value  \n This method returns `FALSE`.  \n  \n### Remarks  \n The default implementation of this method returns `FALSE`. Override this method to return `TRUE` if your control displays a submenu.  \n  \n##  <a name=\"cmfctoolbarbutton__iseditable\"></a>  CMFCToolBarButton::IsEditable  \n Determines whether the button can be customized.  \n  \n```  \nvirtual BOOL IsEditable() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if a button can be customized by the user; otherwise 0.  \n  \n### Remarks  \n The framework calls this method to determine whether the user can customize the toolbar button by using drag-and-drop or edit operations.  \n  \n The default implementation returns `FALSE` if the command ID of the button is a standard command (you can determine this by calling the `IsStandardCommand` function) or if the command ID is in the list of protected commands. For more information about protected commands, see [CMFCToolBarButton::GetProtectedCommands](#cmfctoolbarbutton__getprotectedcommands) and [CMFCToolBarButton::SetProtectedCommands](#cmfctoolbarbutton__setprotectedcommands).  \n  \n Override this method to customize its behavior.  \n  \n##  <a name=\"cmfctoolbarbutton__isextrasize\"></a>  CMFCToolBarButton::IsExtraSize  \n Determines whether the button can be displayed with an extended border.  \n  \n```  \nvirtual BOOL IsExtraSize() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the toolbar button can be displayed with an extended border; otherwise 0.  \n  \n### Remarks  \n Several skins use extra size for the borders of toolbar buttons (for example, round buttons).  \n  \n If the user moves this button from one toolbar to another, the framework calls the [CMFCToolBarButton::OnChangeParentWnd](#cmfctoolbarbutton__onchangeparentwnd) method. The [CMFCToolBarButton::OnChangeParentWnd](#cmfctoolbarbutton__onchangeparentwnd) method sets the extra size flag to that of the new parent toolbar (for more information, see [CMFCToolBar::IsButtonExtraSizeAvailable](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__isbuttonextrasizeavailable)).  \n  \n##  <a name=\"cmfctoolbarbutton__isfirstingroup\"></a>  CMFCToolBarButton::IsFirstInGroup  \n Determines whether the button is in the first position in its button group.  \n  \n```  \nvirtual BOOL IsFirstInGroup() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the button is the first button in its button group; otherwise `FALSE`.  \n  \n### Remarks  \n This method defines a *button group* as a neighboring set of buttons that are positioned on the same row and are bounded by separators or the border of the toolbar. This method returns `FALSE` if the toolbar button refers to the **Customize** button. For more information about the **Customize** button, see [CMFCToolBar::GetCustomizeButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcustomizebutton).  \n  \n Call the [CMFCToolBarButton::IsLastInGroup](#cmfctoolbarbutton__islastingroup) method to determine whether the button is in the last position in its button group.  \n  \n##  <a name=\"cmfctoolbarbutton__ishidden\"></a>  CMFCToolBarButton::IsHidden  \n Determines whether the button is hidden.  \n  \n```  \nBOOL IsHidden() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the button is hidden (invisible); otherwise 0.  \n  \n### Remarks  \n The framework calls this method when the parent toolbar is stretched to determine whether the toolbar button is visible.  \n  \n If you set the button to be invisible by using the [CMFCToolBarButton::SetVisible](#cmfctoolbarbutton__setvisible) method, use [CMFCToolBarButton::IsVisible](#cmfctoolbarbutton__isvisible) to determine whether the toolbar button is visible.  \n  \n By default, all toolbar buttons are visible. Use the [CMFCToolBarButton::Show](#cmfctoolbarbutton__show) method to hide or show toolbar buttons.  \n  \n##  <a name=\"cmfctoolbarbutton__ishorizontal\"></a>  CMFCToolBarButton::IsHorizontal  \n Determines whether the button is located on a horizontal toolbar.  \n  \n```  \nBOOL IsHorizontal() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if a toolbar button is located on a horizontal toolbar; otherwise 0.  \n  \n### Remarks  \n The framework calls this method to determine the layout of toolbar buttons.  \n  \n This method returns the `m_bHorz` data member. The default value of the `m_bHorz` data member is `TRUE`; it is reset on each call to the [CMFCToolBarButton::OnDraw](#cmfctoolbarbutton__ondraw) method.  \n  \n##  <a name=\"cmfctoolbarbutton__islastingroup\"></a>  CMFCToolBarButton::IsLastInGroup  \n Specifies whether the button is in the last position in its button group.  \n  \n```  \nvirtual BOOL IsLastInGroup() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the button is the last button in its button group; otherwise `FALSE`.  \n  \n### Remarks  \n This method defines a *button group* as a neighboring set of buttons that are positioned on the same row and are bounded by separators or the border of the toolbar This method returns `FALSE` if the toolbar button has no parent toolbar or the toolbar button refers to the **Customize** button. For more information about the **Customize** button, see [CMFCToolBar::GetCustomizeButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcustomizebutton).  \n  \n Call the [CMFCToolBarButton::IsFirstInGroup](#cmfctoolbarbutton__isfirstingroup) method to determine whether the button is in the first position in its button group.  \n  \n##  <a name=\"cmfctoolbarbutton__islocked\"></a>  CMFCToolBarButton::IsLocked  \n Determines whether the button is on a locked (non-customizable) toolbar.  \n  \n```  \nBOOL IsLocked() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the button is on a locked toolbar; otherwise 0.  \n  \n### Remarks  \n The framework calls this method to determine whether the user can customize the toolbar button by using drag-and-drop or edit operations. Set the locked attribute on the parent toolbar by using the [CMFCToolBar::LoadToolBar](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__loadtoolbar) method. The framework passes the value of this attribute to the constructor of each toolbar button ( [CMFCToolbarButton](../../mfc/reference/cmfctoolbarbutton-class.md)) that it inserts into the parent toolbar.  \n  \n##  <a name=\"cmfctoolbarbutton__isownerof\"></a>  CMFCToolBarButton::IsOwnerOf  \n Determines whether the button is the owner of the provided window handle.  \n  \n```  \nvirtual BOOL IsOwnerOf(HWND hwnd);\n```  \n  \n### Parameters  \n [in] `hwnd`  \n A window handle.  \n  \n### Return Value  \n Nonzero if the button is the owner of the provided window handle; otherwise 0.  \n  \n### Remarks  \n This method returns nonzero if `hwnd` either refers to the direct window handle or is a child of the window handle that is associated with the button. This method returns 0 if `hwnd` is `NULL`.  \n  \n##  <a name=\"cmfctoolbarbutton__isvisible\"></a>  CMFCToolBarButton::IsVisible  \n Determines whether the toolbar button is visible.  \n  \n```  \nBOOL IsVisible() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the toolbar button is visible; otherwise 0.  \n  \n### Remarks  \n You can show or hide the toolbar button by using the [CMFCToolBarButton::SetVisible](#cmfctoolbarbutton__setvisible) method. Call the [CPane::AdjustSizeImmediate](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate) method on the parent toolbar after you call [CMFCToolBarButton::SetVisible](#cmfctoolbarbutton__setvisible) to recalculate the layout of a parent toolbar.  \n  \n##  <a name=\"cmfctoolbarbutton__iswindowvisible\"></a>  CMFCToolBarButton::IsWindowVisible  \n Determines whether the underlying window handle of the button is visible.  \n  \n```  \nvirtual BOOL IsWindowVisible();\n```  \n  \n### Return Value  \n Nonzero if the underlying window handle of the button is visible; otherwise 0.  \n  \n### Remarks  \n This method returns nonzero if the styles attribute of the underlying window handle contains the `WS_VISIBLE` style. This method returns `FALSE` if the underlying window handle of the button is `NULL`.  \n  \n##  <a name=\"cmfctoolbarbutton__m_bimage\"></a>  CMFCToolBarButton::m_bImage  \n Specifies whether an image is displayed on the button.  \n  \n```  \nBOOL m_bImage;  \n```  \n  \n### Remarks  \n If this data member is set to `TRUE`, the framework displays the image that is associated with the toolbar button; otherwise the framework does not display the image. This member affects the return value of the [CMFCToolBarButton::m_bImage](#cmfctoolbarbutton__m_bimage) method.  \n  \n##  <a name=\"cmfctoolbarbutton__m_btext\"></a>  CMFCToolBarButton::m_bText  \n Specifies whether a text label is displayed on the button.  \n  \n```  \nBOOL m_bText;  \n```  \n  \n### Remarks  \n If this data member is set to `TRUE`, the framework displays the text label of the toolbar button; otherwise the framework does not display the text label. This member affects the return value of the [CMFCToolBarButton::m_bText](#cmfctoolbarbutton__m_btext) method.  \n  \n##  <a name=\"cmfctoolbarbutton__m_btextbelow\"></a>  CMFCToolBarButton::m_bTextBelow  \n Specifies whether the text label is displayed underneath the image on the button.  \n  \n```  \nBOOL m_bTextBelow;  \n```  \n  \n### Remarks  \n If this member variable is set to `TRUE`, the framework displays the text of the button underneath the image. The default value of this member is `FALSE`.  \n  \n##  <a name=\"cmfctoolbarbutton__m_buserbutton\"></a>  CMFCToolBarButton::m_bUserButton  \n Specifies whether the button has a user-defined image  \n  \n```  \nBOOL m_bUserButton;  \n```  \n  \n### Remarks  \n This data member is set to `TRUE` when the button has a user-defined image associated with it.  \n  \n##  <a name=\"cmfctoolbarbutton__m_bwholetext\"></a>  CMFCToolBarButton::m_bWholeText  \n Specifies whether the button displays its full text label even if it does not fit in the bounding rectangle.  \n  \n```  \nBOOL m_bWholeText;  \n```  \n  \n### Remarks  \n If this data member is set to `TRUE`, the framework displays the full text label by enlarging the button. Otherwise, the framework truncates and appends an ellipsis ( **...**) to the text label.  \n  \n##  <a name=\"cmfctoolbarbutton__m_bwrap\"></a>  CMFCToolBarButton::m_bWrap  \n Specifies whether the button next to a separator will be put on the next row.  \n  \n```  \nBOOL m_bWrap;  \n```  \n  \n### Remarks  \n The framework sets this data member to `TRUE` when the toolbar button does not fit on the current row or when you specify a layout (for example, a specific number of toolbar buttons per row).  \n  \n The framework places this button on the next row if this data member is set to `TRUE` and the toolbar is docked horizontally or floating.  \n  \n The default value of this data member is `FALSE`.  \n  \n##  <a name=\"cmfctoolbarbutton__m_bwraptext\"></a>  CMFCToolBarButton::m_bWrapText  \n Specifies whether multi-line text labels are enabled.  \n  \n```  \nAFX_IMPORT_DATA static BOOL m_bWrapText;  \n```  \n  \n### Remarks  \n If this static member variable is `TRUE`, the framework enables all toolbars to display multi-line text labels on toolbar buttons.  \n  \n The default value of this data member is `FALSE`.  \n  \n##  <a name=\"cmfctoolbarbutton__m_nid\"></a>  CMFCToolBarButton::m_nID  \n The command ID of the button.  \n  \n```  \nUINT m_nID;  \n```  \n  \n### Remarks  \n A command ID of -1 indicates that the button is a separator. All button separators have the `TBBS_SEPARATOR` style. See [CMFCToolBarButton::m_nStyle](#cmfctoolbarbutton__m_nstyle) for more information about button styles.  \n  \n##  <a name=\"cmfctoolbarbutton__m_nstyle\"></a>  CMFCToolBarButton::m_nStyle  \n The style of the button.  \n  \n```  \nUINT m_nStyle;  \n```  \n  \n### Remarks  \n See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for the list of available toolbar button styles.  \n  \n##  <a name=\"cmfctoolbarbutton__m_strtext\"></a>  CMFCToolBarButton::m_strText  \n The text label of the button.  \n  \n```  \nCString m_strText;  \n```  \n  \n### Remarks  \n This data member contains the text label of the button. The text label can be empty.  \n  \n##  <a name=\"cmfctoolbarbutton__notifycommand\"></a>  CMFCToolBarButton::NotifyCommand  \n Specifies whether the button processes the [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message.  \n  \n```  \nvirtual BOOL NotifyCommand(int iNotifyCode);\n```  \n  \n### Parameters  \n [in] `iNotifyCode`  \n The notification message that is associated with the command.  \n  \n### Return Value  \n This method returns `FALSE`.  \n  \n### Remarks  \n The framework calls this method when it is about to send a [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message to the parent window.  \n  \n By default, this method returns `FALSE`. Override this method to return `TRUE` if you want to process the `WM_COMMAND` message or `FALSE` to indicate that the parent toolbar should handle the message.  \n  \n##  <a name=\"cmfctoolbarbutton__onaddtocustomizepage\"></a>  CMFCToolBarButton::OnAddToCustomizePage  \n Called by the framework when the button is added to a **Customize** dialog box.  \n  \n```  \nvirtual void OnAddToCustomizePage();\n```  \n  \n### Remarks  \n The default implementation of this method does nothing. Override this method if you want to perform some action when the button is added to a **Customize** dialog box.  \n  \n##  <a name=\"cmfctoolbarbutton__onbeforedrag\"></a>  CMFCToolBarButton::OnBeforeDrag  \n Specifies whether the button can be dragged.  \n  \n```  \nvirtual BOOL OnBeforeDrag() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the button can be dragged; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method before the user starts to drag the button.  \n  \n The default implementation of this method returns `TRUE`. Override this method to return `FALSE` to disable dragging of the button.  \n  \n##  <a name=\"cmfctoolbarbutton__onbeforedrop\"></a>  CMFCToolBarButton::OnBeforeDrop  \n Specifies whether a user can drop the button onto the target toolbar.  \n  \n```  \nvirtual BOOL OnBeforeDrop(CMFCToolBar* pTarget);\n```  \n  \n### Parameters  \n [in] `pTarget`  \n The target of the drag-and-drop operation.  \n  \n### Return Value  \n `TRUE` if the button can be dropped onto the provided target toolbar; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method before the button is dropped onto a toolbar.  \n  \n The default implementation of this method returns `TRUE`. Override this method to return `FALSE` to disable the drop operation on the specified target.  \n  \n##  <a name=\"cmfctoolbarbutton__oncalculatesize\"></a>  CMFCToolBarButton::OnCalculateSize  \n Called by the framework to calculate the size of the button for the specified device context and docking state.  \n  \n```  \nvirtual SIZE OnCalculateSize(\n    CDC* pDC,  \n    const CSize& sizeDefault,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n [in] `pDC`  \n The device context that displays the button.  \n  \n [in] `sizeDefault`  \n The default size of the button.  \n  \n [in] `bHorz`  \n The dock state of the parent toolbar. This parameter is `TRUE` if the toolbar is docked horizontally or is floating, or `FALSE` if the toolbar is docked vertically.  \n  \n### Return Value  \n A `SIZE` structure that contains the dimensions of the button, in pixels.  \n  \n### Remarks  \n The framework calls this method to determine the size of the toolbar button for the specified device context and dock state.  \n  \n The default implementation considers the text and image sizes (if they are displayed), the text and image positions (the text below or at the right-hand side of the image), and the toolbar dock state.  \n  \n Override this method if you want to provide the size of a non-standard button (for example, an edit box button).  \n  \n##  <a name=\"cmfctoolbarbutton__oncancelmode\"></a>  CMFCToolBarButton::OnCancelMode  \n Called by the framework to handle the [WM_CANCELMODE](http://msdn.microsoft.com/library/windows/desktop/ms632615) message.  \n  \n```  \nvirtual void OnCancelMode();\n```  \n  \n### Remarks  \n The default implementation of this method does nothing. Override this method if you want to handle the [WM_CANCELMODE](http://msdn.microsoft.com/library/windows/desktop/ms632615) message.  \n  \n##  <a name=\"cmfctoolbarbutton__onchangeparentwnd\"></a>  CMFCToolBarButton::OnChangeParentWnd  \n Called by the framework when the button is inserted into a new toolbar.  \n  \n```  \nvirtual void OnChangeParentWnd(CWnd* pWndParent);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n The new parent window.  \n  \n### Remarks  \n The button is inserted into a toolbar, for example, when the user drags it from one toolbar to another toolbar.  \n  \n The default implementation of this method does nothing.  \n  \n##  <a name=\"cmfctoolbarbutton__onclick\"></a>  CMFCToolBarButton::OnClick  \n Called by the framework when the user clicks the mouse button.  \n  \n```  \nvirtual BOOL OnClick(\n    CWnd* pWnd,  \n    BOOL bDelay=TRUE);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n The parent window of the toolbar button.  \n  \n [in] `bDelay`  \n `TRUE` if the message should be handled with a delay.  \n  \n### Return Value  \n This method returns `FALSE`.  \n  \n### Remarks  \n The framework calls this method when the user clicks the toolbar button.  \n  \n The default implementation does nothing and returns `FALSE`. Override this method to return a nonzero value if the button processes the click message.  \n  \n##  <a name=\"cmfctoolbarbutton__onclickup\"></a>  CMFCToolBarButton::OnClickUp  \n Called by the framework when the user releases the mouse button.  \n  \n```  \nvirtual BOOL OnClickUp();\n```  \n  \n### Return Value  \n This method returns `FALSE`.  \n  \n### Remarks  \n The framework calls this method when the user releases the toolbar button.  \n  \n The default implementation does nothing and returns `FALSE`. Override this method to return a nonzero value if the button processes the click message.  \n  \n##  <a name=\"cmfctoolbarbutton__oncontexthelp\"></a>  CMFCToolBarButton::OnContextHelp  \n Called by the framework when the parent toolbar handles a `WM_HELPHITTEST` message.  \n  \n```  \nvirtual BOOL OnContextHelp(CWnd* pWnd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n The parent window of the toolbar button.  \n  \n### Return Value  \n This method returns `FALSE`.  \n  \n### Remarks  \n The default implementation of this method does nothing and returns `FALSE`. Override this method to return a nonzero value if the button processes the help message.  \n  \n For more information about the `WM_HELPHITTEST` message, see [TN028: Context-Sensitive Help Support](../../mfc/tn028-context-sensitive-help-support.md).  \n  \n##  <a name=\"cmfctoolbarbutton__onctlcolor\"></a>  CMFCToolBarButton::OnCtlColor  \n Called by the framework when the parent toolbar handles a `WM_CTLCOLOR` message.  \n  \n```  \nvirtual HBRUSH OnCtlColor(\n    CDC* pDC,  \n    UINT nCtlColor);\n```  \n  \n### Parameters  \n [in] `pDC`  \n The device context that displays the button.  \n  \n [in] `nCtlColor`  \n The specific color notification.  \n  \n### Return Value  \n A handle to the brush object that the framework uses to paint the background of the button.  \n  \n### Remarks  \n The framework calls this method when the parent toolbar processes the `WM_CTLCOLOR` message for a toolbar button that contains a Windows control. The framework does not call this method if the toolbar button is windowless.  \n  \n The framework calls this method when the toolbar framework is in customization mode and the toolbar button is unlocked. For more information about customization mode, see [CMFCToolBar::SetCustomizeMode](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode). For more information about locking toolbar buttons, see [CMFCToolBarButton::IsLocked](#cmfctoolbarbutton__islocked).  \n  \n The default implementation does nothing and returns `NULL`.  \n  \n##  <a name=\"cmfctoolbarbutton__oncustomizemenu\"></a>  CMFCToolBarButton::OnCustomizeMenu  \n Allows the button to modify the provided menu when the application displays a shortcut menu on the parent toolbar.  \n  \n```  \nvirtual BOOL OnCustomizeMenu(CMenu* pMenu);\n```  \n  \n### Parameters  \n [in] `pMenu`  \n The menu to customize.  \n  \n### Return Value  \n This method returns `FALSE`.  \n  \n### Remarks  \n The default implementation does nothing and returns `FALSE`. Override this method and return a nonzero value if you want to modify the contents of the provided menu.  \n  \n##  <a name=\"cmfctoolbarbutton__ondblclk\"></a>  CMFCToolBarButton::OnDblClk  \n Called by the framework when the parent toolbar handles a [WM_LBUTTONDBLCLK](http://msdn.microsoft.com/library/windows/desktop/ms645606) message.  \n  \n```  \nvirtual void OnDblClk(CWnd* pWnd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n -   The parent window of the button.  \n  \n### Remarks  \n This method is called by the `CMFCToolBar::OnLButtonDblClk` method when the parent toolbar handles a [WM_LBUTTONDBLCLK](http://msdn.microsoft.com/library/windows/desktop/ms645606) message.  \n  \n The default implementation of this method does nothing.  \n  \n##  <a name=\"cmfctoolbarbutton__ondraw\"></a>  CMFCToolBarButton::OnDraw  \n Called by the framework to draw the button by using the specified styles and options.  \n  \n```  \nvirtual void OnDraw(\n    CDC* pDC,  \n    const CRect& rect,  \n    CMFCToolBarImages* pImages,  \n    BOOL bHorz=TRUE,  \n    BOOL bCustomizeMode=FALSE,  \n    BOOL bHighlight=FALSE,  \n    BOOL bDrawBorder=TRUE,  \n    BOOL bGrayDisabledButtons=TRUE);\n```  \n  \n### Parameters  \n [in] `pDC`  \n The device context that displays the button.  \n  \n [in] `rect`  \n The bounding rectangle of the button.  \n  \n [in] `pImages`  \n The collection of toolbar images that is associated with the button.  \n  \n [in] `bHorz`  \n The dock state of the parent toolbar. This parameter is `TRUE` when the button is docked horizontally and `FALSE` when the button is docked vertically.  \n  \n [in] `bCustomizeMode`  \n Specifies whether the toolbar is in customization mode. This parameter is `TRUE` when the toolbar is in customization mode and `FALSE` when the toolbar is not in customization mode.  \n  \n [in] `bHighlight`  \n Specifies whether the button is highlighted. This parameter is `TRUE` when the button is highlighted and `FALSE` when the button is not highlighted.  \n  \n [in] `bDrawBorder`  \n Specifies whether the button should display its border. This parameter is `TRUE` when the button should display its border and `FALSE` when the button should not display its border.  \n  \n [in] `bGrayDisabledButtons`  \n Specifies whether to shade disabled buttons or use the disabled images collection. This parameter is `TRUE` when disabled buttons should be shaded and `FALSE` when this method should use the disabled images collection.  \n  \n### Remarks  \n Override this method to customize toolbar button drawing.  \n  \n##  <a name=\"cmfctoolbarbutton__ondrawoncustomizelist\"></a>  CMFCToolBarButton::OnDrawOnCustomizeList  \n Called by the framework to draw the button in the **Commands** pane of the **Customize** dialog box.  \n  \n```  \nvirtual int OnDrawOnCustomizeList(\n    CDC* pDC,  \n    const CRect& rect,  \n    BOOL bSelected);\n```  \n  \n### Parameters  \n [in] `pDC`  \n The device context that displays the button.  \n  \n [in] `rect`  \n The bounding rectangle of the button.  \n  \n [in] `bSelected`  \n Specifies whether the button is selected. If this parameter is `TRUE`, the button is selected. If this parameter is `FALSE`, the button is not selected.  \n  \n### Return Value  \n The width, in pixels, of the button on the specified device context.  \n  \n### Remarks  \n This method is called by the customization dialog box ( **Commands** tab) when the button is about to display itself on the owner-draw list box.  \n  \n The default implementation of this method displays the image and text label of the button if they are available. If the text label of the button is not available, the method displays the tooltip text.  \n  \n Override this method to perform custom drawing.  \n  \n##  <a name=\"cmfctoolbarbutton__ongetcustomtooltiptext\"></a>  CMFCToolBarButton::OnGetCustomToolTipText  \n Called by the framework to retrieve the custom tooltip text for the button.  \n  \n```  \nvirtual BOOL OnGetCustomToolTipText(CString& strToolTip);\n```  \n  \n### Parameters  \n [out] `strToolTip`  \n A `CString` object that receives the custom tooltip text.  \n  \n### Return Value  \n This method returns `FALSE`.  \n  \n### Remarks  \n The framework calls this method when it displays the tooltip for the toolbar button. If this method returns `FALSE`, the framework uses a default tooltip.  \n  \n The default implementation does nothing and returns `FALSE`. Override this method and return a nonzero value to provide custom tooltip text for the toolbar button.  \n  \n##  <a name=\"cmfctoolbarbutton__onglobalfontschanged\"></a>  CMFCToolBarButton::OnGlobalFontsChanged  \n Called by the framework when the global font has changed.  \n  \n```  \nvirtual void OnGlobalFontsChanged();\n```  \n  \n### Remarks  \n The default implementation of this method does nothing. Override this method to update the font that is used to display the button text.  \n  \n##  <a name=\"cmfctoolbarbutton__onmove\"></a>  CMFCToolBarButton::OnMove  \n Called by the framework when the parent toolbar moves.  \n  \n```  \nvirtual void OnMove();\n```  \n  \n### Remarks  \n The default implementation of this method does nothing. Override this method to reposition the button when the parent toolbar moves.  \n  \n##  <a name=\"cmfctoolbarbutton__onshow\"></a>  CMFCToolBarButton::OnShow  \n Called by the framework when the button becomes visible or invisible.  \n  \n```  \nvirtual void OnShow(BOOL bShow);\n```  \n  \n### Parameters  \n [in] `bShow`  \n Specifies whether the button is visible. If this parameter is `TRUE`, the button is visible. Otherwise, the button is not visible.  \n  \n### Remarks  \n The default implementation of this method does nothing. Override this method to update the visibility of the button.  \n  \n##  <a name=\"cmfctoolbarbutton__onsize\"></a>  CMFCToolBarButton::OnSize  \n Called by the framework when the parent toolbar changes its size or position and this change causes the button to change size.  \n  \n```  \nvirtual void OnSize(int iSize);\n```  \n  \n### Parameters  \n [in] `iSize`  \n The new width of the button.  \n  \n### Remarks  \n The default implementation of this method does nothing. Override this method to resize the button when the size or position of the parent toolbar changes.  \n  \n##  <a name=\"cmfctoolbarbutton__ontoolhittest\"></a>  CMFCToolBarButton::OnToolHitTest  \n Called by the framework when the parent toolbar must determine whether a point is in the bounding rectangle of the button.  \n  \n```  \nvirtual BOOL OnToolHitTest(\n    const CWnd* pWnd,  \n    TOOLINFO* pTI);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n The parent window of the button. Can be `NULL`.  \n  \n [in] `pTI`  \n A `TOOLINFO` structure that contains information about a tool in a tooltip control.  \n  \n### Return Value  \n The result of `OnMenuButtonToolHitTest` if the button can retrieve a pointer to the parent frame window; otherwise `FALSE`.  \n  \n### Remarks  \n This method calls one of the following methods if it can convert the parent window to a valid frame object:  \n  \n- [CMDIFrameWndEx::OnMenuButtonToolHitTest](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__onmenubuttontoolhittest)  \n  \n- [CFrameWndEx::OnMenuButtonToolHitTest](../../mfc/reference/cframewndex-class.md#cframewndex__onmenubuttontoolhittest)  \n  \n- [COleIPFrameWndEx::OnMenuButtonToolHitTest](../../mfc/reference/coleipframewndex-class.md#coleipframewndex__onmenubuttontoolhittest)  \n  \n##  <a name=\"cmfctoolbarbutton__onupdatetooltip\"></a>  CMFCToolBarButton::OnUpdateToolTip  \n Called by the framework when the parent toolbar updates its tooltip text.  \n  \n```  \nvirtual BOOL OnUpdateToolTip(\n    CWnd* pWndParent,  \n    int iButtonIndex,  \n    CToolTipCtrl& wndToolTip,  \n    CString& str);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n The parent window.  \n  \n [in] `iButtonIndex`  \n The zero-based index of the button in the parent button collection.  \n  \n [in] `wndToolTip`  \n The control that displays the tooltip text.  \n  \n [out] `str`  \n A `CString` object that receives the updated tooltip text.  \n  \n### Return Value  \n This method returns `FALSE`.  \n  \n### Remarks  \n The default implementation of this method does nothing and returns `FALSE`. Override this method to return a nonzero value if you provide a tooltip text string.  \n  \n##  <a name=\"cmfctoolbarbutton__preparedrag\"></a>  CMFCToolBarButton::PrepareDrag  \n Called by the framework when the button is about to perform a drag-and-drop operation.  \n  \n```  \nvirtual BOOL PrepareDrag(COleDataSource& srcItem);\n```  \n  \n### Parameters  \n [in] `srcItem`  \n A `COleDataSource` object that stores state information about the drag-and-drop operation.  \n  \n### Return Value  \n `TRUE` if the operation succeeds; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method to prepare the toolbar button to store its state in the provided `COleDataSource` object. This method stores its state by serializing itself to a shared file and then passing that file to the [COleDataSource::CacheGlobalData](../../mfc/reference/coledatasource-class.md#coledatasource__cacheglobaldata) method. For more information about toolbar button serialization, see [CMFCToolBarButton::Serialize](#cmfctoolbarbutton__serialize).  \n  \n This method does nothing and returns `TRUE` if the button cannot be stored (the [CMFCToolBarButton::CanBeStored](#cmfctoolbarbutton__canbestored) method returns `FALSE`). It returns `FALSE` if an exception occurs during object serialization.  \n  \n For more information about OLE drag-and-drop operations, see [Drag and Drop (OLE)](../../mfc/drag-and-drop-ole.md).  \n  \n##  <a name=\"cmfctoolbarbutton__rect\"></a>  CMFCToolBarButton::Rect  \n Retrieves the bounding rectangle of the button.  \n  \n```  \nconst CRect& Rect() const;\n\n \n```  \n  \n### Return Value  \n A `CRect` object that contains the bounding rectangle of a button.  \n  \n##  <a name=\"cmfctoolbarbutton__resetimagetodefault\"></a>  CMFCToolBarButton::ResetImageToDefault  \n Sets to the default value the image that is associated with the button.  \n  \n```  \nvirtual void ResetImageToDefault();\n```  \n  \n### Remarks  \n This method retrieves the default image from its parent toolbar by using the [CMFCToolBar::GetDefaultImage](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getdefaultimage) method. If the button has no associated default image, this method sets the text label of the button according to its string resource by using the [CStringT::LoadString](../../atl-mfc-shared/reference/cstringt-class.md#cstringt__loadstring) method. For more information about string resources, see [Working with Resource Files](../../mfc/working-with-resource-files.md).  \n  \n This method does nothing if the button has a user-defined image.  \n  \n##  <a name=\"cmfctoolbarbutton__savebarstate\"></a>  CMFCToolBarButton::SaveBarState  \n Saves the state of the toolbar button.  \n  \n```  \nvirtual void SaveBarState();\n```  \n  \n### Remarks  \n The framework calls this method when it creates a `CMFCToolBarButton` object as the result of a drag-and-drop operation.  \n  \n The default implementation of this method does nothing. Override this method to save the state of the toolbar button to an external data source.  \n  \n##  <a name=\"cmfctoolbarbutton__serialize\"></a>  CMFCToolBarButton::Serialize  \n Reads this object from an archive or writes it to an archive.  \n  \n```  \nvirtual void Serialize(CArchive& ar);\n```  \n  \n### Parameters  \n [in] `ar`  \n The `CArchive` object from which or to which to serialize.  \n  \n### Remarks  \n This method supports data transfer processes such as clipboard or drag-and-drop operations. It reads or writes properties of the button such as the ID, text label, and image ID from or to the provided `CArchive` object.  \n  \n For serialization examples, see [Serialization: Serializing an Object](../../mfc/serialization-serializing-an-object.md).  \n  \n##  <a name=\"cmfctoolbarbutton__setaccdata\"></a>  CMFCToolBarButton::SetACCData  \n Populates the provided `CAccessibilityData` object with accessibility data from the toolbar button.  \n  \n```  \nvirtual BOOL SetACCData(\n    CWnd* pParent,  \n    CAccessibilityData& data);\n```  \n  \n### Parameters  \n [in] `pParent`  \n The parent window of the toolbar button.  \n  \n [in] `data`  \n A `CAccessibilityData` object that is populated with the accessibility data of the toolbar button.  \n  \n### Return Value  \n This method returns `TRUE`.  \n  \n### Remarks  \n Override this method to return `FALSE` if your toolbar button does not provide accessibility data.  \n  \n##  <a name=\"cmfctoolbarbutton__setclipboardformatname\"></a>  CMFCToolBarButton::SetClipboardFormatName  \n Renames the global clipboard format.  \n  \n```  \nstatic void __stdcall SetClipboardFormatName(LPCTSTR lpszName);\n```  \n  \n### Parameters  \n [in] `lpszName`  \n The new name of the global clipboard format. Cannot be `NULL`.  \n  \n### Remarks  \n This method makes it possible for drag-and-drop operations to occur among multiple applications. Each application must supply the same clipboard format name.  \n  \n You must call this method before the framework calls [CMFCToolBarButton::GetClipboardFormat](#cmfctoolbarbutton__getclipboardformat).  \n  \n##  <a name=\"cmfctoolbarbutton__setimage\"></a>  CMFCToolBarButton::SetImage  \n Sets the image index of the button.  \n  \n```  \nvirtual void SetImage(int iImage);\n```  \n  \n### Parameters  \n [in] `iImage`  \n The index of the image in the collection of toolbar images.  \n  \n### Remarks  \n If the toolbar button is a separator, `iImage` refers to the new width of the separator button.  \n  \n If `iImage` is less than zero, this method disables drawing of the image and enables drawing of the text label of the button.  \n  \n##  <a name=\"cmfctoolbarbutton__setprotectedcommands\"></a>  CMFCToolBarButton::SetProtectedCommands  \n Sets the list of commands that the user cannot customize.  \n  \n```  \nstatic void SetProtectedCommands(\n    const CList<UINT,UINT>& lstCmds);\n```  \n  \n### Parameters  \n [in] `lstCmds`  \n The list of protected commands.  \n  \n### Remarks  \n In customization mode, the framework disables toolbar button commands that are protected. The user cannot perform drag-and-drop and edit operations on disabled toolbar buttons.  \n  \n Use the [CMFCToolBarButton::GetProtectedCommands](#cmfctoolbarbutton__getprotectedcommands) method to retrieve the list of protected commands.  \n  \n##  <a name=\"cmfctoolbarbutton__setradio\"></a>  CMFCToolBarButton::SetRadio  \n Called by the framework when a button changes its checked state.  \n  \n```  \nvirtual void SetRadio();\n```  \n  \n### Remarks  \n The default implementation of this method does nothing. Override this method to perform a custom action when the button changes its checked state.  \n  \n##  <a name=\"cmfctoolbarbutton__setrect\"></a>  CMFCToolBarButton::SetRect  \n Sets the bounding rectangle of the button.  \n  \n```  \nvoid SetRect(const CRect rect);\n```  \n  \n### Parameters  \n [in] `rect`  \n The new bounding rectangle of the button.  \n  \n### Remarks  \n This method calls the [CMFCToolBarButton::OnMove](#cmfctoolbarbutton__onmove) method after it sets the new bounding rectangle.  \n  \n##  <a name=\"cmfctoolbarbutton__setstyle\"></a>  CMFCToolBarButton::SetStyle  \n Sets the style of the button.  \n  \n```  \nvirtual void SetStyle(UINT nStyle);\n```  \n  \n### Parameters  \n [in] `nStyle`  \n The new style of the button.  \n  \n### Remarks  \n The default implementation sets the [CMFCToolBarButton::m_nStyle](#cmfctoolbarbutton__m_nstyle) data member to `nStyle`. Override this method if you want to perform additional processing to handle the change in style. See [ToolBar Control Styles](toolbar-control-styles.md) for a list of valid style flags.  \n  \n##  <a name=\"cmfctoolbarbutton__setvisible\"></a>  CMFCToolBarButton::SetVisible  \n Specifies whether the button is visible.  \n  \n```  \nvoid SetVisible(BOOL bShow=TRUE);\n```  \n  \n### Parameters  \n [in] `bShow`  \n A Boolean value that specifies whether to show or hide the button. If this parameter is `TRUE`, the button is shown. If the parameter is `FALSE`, the button is hidden.  \n  \n### Remarks  \n Use this function to hide or show a particular toolbar button. Call the [CPane::AdjustSizeImmediate](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate) method after you call this method.  \n  \n##  <a name=\"cmfctoolbarbutton__show\"></a>  CMFCToolBarButton::Show  \n Shows or hides the button.  \n  \n```  \nvoid Show(BOOL bShow);\n```  \n  \n### Parameters  \n [in] `bShow`  \n A Boolean value that specifies whether to show or hide the button. If this parameter is `TRUE`, the button is shown. If the parameter is `FALSE`, the button is hidden.  \n  \n### Remarks  \n The framework calls this method to update the visibility of toolbar buttons when their parent toolbar is resized. The framework calls this method with `bShow` set to `FALSE` when the button no longer fits within the bounds of the toolbar. The framework calls this method with `bShow` set to `TRUE` when after resizing the button again fits within the bounds of the toolbar.  \n  \n Use the [CMFCToolBarButton::SetVisible](#cmfctoolbarbutton__setvisible) method to set the general visibility of the button.  \n  \n This method calls the [CMFCToolBarButton::OnShow](#cmfctoolbarbutton__onshow) method after it updates the visibility state of the button.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md)   \n [CMFCToolBarImages Class](../../mfc/reference/cmfctoolbarimages-class.md)\n"}