{"nodes":[{"pos":[12,58],"content":"atol, _atol_l, _wtol, _wtol_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"atol, _atol_l, _wtol, _wtol_l | Microsoft Docs","pos":[0,46]}]},{"content":"atol, _atol_l, _wtol, _wtol_l","pos":[1368,1397]},{"content":"Convert a string to a long integer.","pos":[1398,1433]},{"content":"Syntax","pos":[1442,1448]},{"content":"Parameters","pos":[1691,1701]},{"content":"String to be converted.","pos":[1714,1737]},{"content":"Locale to use.","pos":[1756,1770]},{"content":"Return Value","pos":[1779,1791]},{"content":"Each function returns the <ph id=\"ph1\">`long`</ph> value produced by interpreting the input characters as a number.","pos":[1795,1892],"source":"Each function returns the `long` value produced by interpreting the input characters as a number."},{"content":"The return value is 0L for <ph id=\"ph1\">`atol`</ph> if the input cannot be converted to a value of that type.","pos":[1893,1984],"source":" The return value is 0L for `atol` if the input cannot be converted to a value of that type."},{"content":"In the case of overflow with large positive integral values, <ph id=\"ph1\">`atol`</ph> returns <ph id=\"ph2\">`LONG_MAX`</ph>; in the case of overflow with large negative integral values, <ph id=\"ph3\">`LONG_MIN`</ph> is returned.","pos":[1991,2163],"source":"In the case of overflow with large positive integral values, `atol` returns `LONG_MAX`; in the case of overflow with large negative integral values, `LONG_MIN` is returned."},{"content":"In all out-of-range cases, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`ERANGE`</ph>.","pos":[2164,2218],"source":" In all out-of-range cases, `errno` is set to `ERANGE`."},{"content":"If the parameter passed in is <ph id=\"ph1\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2219,2387],"source":" If the parameter passed in is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return 0.","pos":[2388,2478],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return 0."},{"content":"Remarks","pos":[2487,2494]},{"pos":[2498,2574],"content":"These functions convert a character string to a long integer value (<ph id=\"ph1\">`atol`</ph>).","source":"These functions convert a character string to a long integer value (`atol`)."},{"content":"The input string is a sequence of characters that can be interpreted as a numerical value of the specified type.","pos":[2581,2693]},{"content":"The function stops reading the input string at the first character that it cannot recognize as part of a number.","pos":[2694,2806]},{"content":"This character may be the <ph id=\"ph1\">`NULL`</ph> character ('\\0' or L'\\0') terminating the string.","pos":[2807,2889],"source":" This character may be the `NULL` character ('\\0' or L'\\0') terminating the string."},{"pos":[2896,2948],"content":"The <ph id=\"ph1\">`str`</ph> argument to <ph id=\"ph2\">`atol`</ph> has the following form:","source":"The `str` argument to `atol` has the following form:"},{"pos":[2955,2990],"content":"[<ph id=\"ph1\">`whitespace`</ph>] [<ph id=\"ph2\">`sign`</ph>] [<ph id=\"ph3\">`digits`</ph>]]","source":"[`whitespace`] [`sign`] [`digits`]]"},{"pos":[2997,3144],"content":"A <ph id=\"ph1\">`whitespace`</ph> consists of space or tab characters, which are ignored; <ph id=\"ph2\">`sign`</ph> is either plus (+) or minus (–); and <ph id=\"ph3\">`digits`</ph> are one or more digits.","source":"A `whitespace` consists of space or tab characters, which are ignored; `sign` is either plus (+) or minus (–); and `digits` are one or more digits."},{"pos":[3159,3227],"content":"is identical to <ph id=\"ph1\">`atol`</ph> except that it takes a wide character string.","source":" is identical to `atol` except that it takes a wide character string."},{"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current locale.","pos":[3234,3383],"source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[3384,3454],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"Generic-Text Routine Mappings","pos":[3464,3493]},{"content":"TCHAR.H routine","pos":[3500,3515]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3516,3544],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3545,3558]},{"content":"_UNICODE defined","pos":[3559,3575]},{"content":"Requirements","pos":[3762,3774]},{"content":"Routines","pos":[3781,3789]},{"content":"Required header","pos":[3790,3805]},{"content":"stdlib.h&gt;","pos":[3860,3869],"source":"stdlib.h>"},{"pos":[3883,3893],"content":", <ph id=\"ph1\">`_wtol`</ph>,","source":", `_wtol`, "},{"content":"stdlib.h&gt; and <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3906,3930],"source":"stdlib.h> and \\<wchar.h>"},{"content":"Example","pos":[3940,3947]},{"pos":[3951,4061],"content":"This program shows how numbers stored as strings can be converted to numeric values using the <ph id=\"ph1\">`atol`</ph> function.","source":"This program shows how numbers stored as strings can be converted to numeric values using the `atol` function."},{"content":".NET Framework Equivalent","pos":[5294,5319]},{"content":"System::Convert::ToInt32","pos":[5330,5354]},{"content":"System::Convert::ToUInt32","pos":[5436,5461]},{"content":"See Also","pos":[5542,5550]},{"content":"Data Conversion","pos":[5555,5570]},{"content":"Floating-Point Support","pos":[5621,5643]},{"content":"Locale","pos":[5701,5707]},{"content":"_ecvt","pos":[5749,5754]},{"content":"_fcvt","pos":[5804,5809]},{"content":"_gcvt","pos":[5859,5864]},{"content":"setlocale, _wsetlocale","pos":[5914,5936]},{"content":"_atodbl, _atodbl_l, _atoldbl, _atoldbl_l, _atoflt, _atoflt_l","pos":[6002,6062]}],"content":"---\ntitle: \"atol, _atol_l, _wtol, _wtol_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"atol\"\n  - \"_wtol_l\"\n  - \"_wtol\"\n  - \"_atol_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_atol_l\"\n  - \"_ttol_l\"\n  - \"_tstol_l\"\n  - \"_tstol\"\n  - \"_wtol\"\n  - \"_ttol\"\n  - \"_wtol_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"tstol function\"\n  - \"atol function\"\n  - \"ttol function\"\n  - \"_atol_l function\"\n  - \"_tstol_l function\"\n  - \"string conversion, to integers\"\n  - \"_tstol function\"\n  - \"_ttol function\"\n  - \"_ttol_l function\"\n  - \"atol_l function\"\n  - \"wtol_l function\"\n  - \"_wtol_l function\"\n  - \"wtol function\"\n  - \"_wtol function\"\nms.assetid: cedfc21c-2d64-4e9c-bd04-bdf60b12db46\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# atol, _atol_l, _wtol, _wtol_l\nConvert a string to a long integer.  \n  \n## Syntax  \n  \n```  \nlong atol(  \n   const char *str   \n);  \nlong _atol_l(  \n   const char *str,  \n   _locale_t locale  \n);  \nlong _wtol(  \n   const wchar_t *str   \n);  \nlong _wtol_l(  \n   const wchar_t *str,  \n   _locale_t locale  \n);  \n```  \n  \n#### Parameters  \n `str`  \n String to be converted.  \n  \n `locale`  \n Locale to use.  \n  \n## Return Value  \n Each function returns the `long` value produced by interpreting the input characters as a number. The return value is 0L for `atol` if the input cannot be converted to a value of that type.  \n  \n In the case of overflow with large positive integral values, `atol` returns `LONG_MAX`; in the case of overflow with large negative integral values, `LONG_MIN` is returned. In all out-of-range cases, `errno` is set to `ERANGE`. If the parameter passed in is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return 0.  \n  \n## Remarks  \n These functions convert a character string to a long integer value (`atol`).  \n  \n The input string is a sequence of characters that can be interpreted as a numerical value of the specified type. The function stops reading the input string at the first character that it cannot recognize as part of a number. This character may be the `NULL` character ('\\0' or L'\\0') terminating the string.  \n  \n The `str` argument to `atol` has the following form:  \n  \n [`whitespace`] [`sign`] [`digits`]]  \n  \n A `whitespace` consists of space or tab characters, which are ignored; `sign` is either plus (+) or minus (–); and `digits` are one or more digits.  \n  \n `_wtol` is identical to `atol` except that it takes a wide character string.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tstol`|`atol`|`atol`|`_wtol`|  \n|`_ttol`|`atol`|`atol`|`_wtol`|  \n  \n## Requirements  \n  \n|Routines|Required header|  \n|--------------|---------------------|  \n|`atol`|\\<stdlib.h>|  \n|`_atol_l`, `_wtol`, `_wtol_l`|\\<stdlib.h> and \\<wchar.h>|  \n  \n## Example  \n This program shows how numbers stored as strings can be converted to numeric values using the `atol` function.  \n  \n```  \n// crt_atol.c  \n// This program shows how numbers stored as  \n// strings can be converted to numeric values  \n// using the atol functions.  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <errno.h>  \n  \nint main( void )  \n{  \n    char    *str = NULL;  \n    long    value = 0;  \n  \n    // An example of the atol function  \n    // with leading and trailing white spaces.  \n    str = \"  -2309 \";  \n    value = atol( str );  \n    printf( \"Function: atol( \\\"%s\\\" ) = %d\\n\", str, value );  \n  \n    // Another example of the atol function   \n    // with an arbitrary decimal point.  \n    str = \"314127.64\";  \n    value = atol( str );  \n    printf( \"Function: atol( \\\"%s\\\" ) = %d\\n\", str, value );  \n  \n    // Another example of the atol function  \n    // with an overflow condition occurring.  \n    str = \"3336402735171707160320\";  \n    value = atol( str );  \n    printf( \"Function: atol( \\\"%s\\\" ) = %d\\n\", str, value );  \n    if (errno == ERANGE)  \n    {  \n       printf(\"Overflow condition occurred.\\n\");  \n    }  \n}  \n```  \n  \n```Output  \nFunction: atol( \"  -2309 \" ) = -2309  \nFunction: atol( \"314127.64\" ) = 314127  \nFunction: atol( \"3336402735171707160320\" ) = 2147483647  \nOverflow condition occurred.  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Convert::ToInt32](https://msdn.microsoft.com/en-us/library/system.convert.toint32.aspx)  \n  \n-   [System::Convert::ToUInt32](https://msdn.microsoft.com/en-us/library/system.convert.touint32.aspx)  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [_ecvt](../../c-runtime-library/reference/ecvt.md)   \n [_fcvt](../../c-runtime-library/reference/fcvt.md)   \n [_gcvt](../../c-runtime-library/reference/gcvt.md)   \n [setlocale, _wsetlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md)   \n [_atodbl, _atodbl_l, _atoldbl, _atoldbl_l, _atoflt, _atoflt_l](../../c-runtime-library/reference/atodbl-atodbl-l-atoldbl-atoldbl-l-atoflt-atoflt-l.md)"}