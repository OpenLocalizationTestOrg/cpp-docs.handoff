{"nodes":[{"pos":[12,64],"content":"Error Handling in Wizard HTML Files | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Error Handling in Wizard HTML Files | Microsoft Docs","pos":[0,52]}]},{"content":"Error Handling in Wizard HTML Files","pos":[635,670]},{"content":"When you create a wizard with a user interface, your project includes .htm files.","pos":[671,752]},{"content":"Use these files to customize your project.","pos":[753,795]},{"content":"See <bpt id=\"p1\">[</bpt>The HTML Files<ept id=\"p1\">](../ide/html-files.md)</ept> for more information.","pos":[796,860],"source":" See [The HTML Files](../ide/html-files.md) for more information."},{"content":"Your project should include error handling.","pos":[867,910]},{"content":"The following code provides you with an example of such code.","pos":[911,972]},{"content":"To handle errors in HTML","pos":[982,1006]},{"pos":[1016,1167],"content":"When you validate the fields, if you call a validation method in a DLL (which should set the error information), call <ph id=\"ph1\">`ReportError`</ph> with no parameters.","source":"When you validate the fields, if you call a validation method in a DLL (which should set the error information), call `ReportError` with no parameters."},{"pos":[1418,1571],"content":"When you validate fields, if you validate the field using only the HTML script, call <ph id=\"ph1\">`SetErrorInfo`</ph> first and then call <ph id=\"ph2\">`ReportError`</ph> with no parameters.","source":"When you validate fields, if you validate the field using only the HTML script, call `SetErrorInfo` first and then call `ReportError` with no parameters."},{"pos":[2246,2281],"content":"Call <ph id=\"ph1\">`ReportError`</ph> with parameters:","source":"Call `ReportError` with parameters:"},{"pos":[2624,2734],"content":"If you must go back to the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Add New Item<ept id=\"p2\">**</ept> dialog box, return <bpt id=\"p3\">**</bpt>VS_E_WIZBACKBUTTONPRESS<ept id=\"p3\">**</ept>:","source":"If you must go back to the **New Project** or **Add New Item** dialog box, return **VS_E_WIZBACKBUTTONPRESS**:"},{"content":"See Also","pos":[3106,3114]},{"content":"Files Created for Your Wizard","pos":[3119,3148]},{"content":"Customizing Your Wizard","pos":[3196,3219]}],"content":"---\ntitle: \"Error Handling in Wizard HTML Files | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"error handling, file error-checking\"\n  - \"HTML, error handling\"\nms.assetid: eb428a64-b681-4420-987d-92098bf98455\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Error Handling in Wizard HTML Files\nWhen you create a wizard with a user interface, your project includes .htm files. Use these files to customize your project. See [The HTML Files](../ide/html-files.md) for more information.  \n  \n Your project should include error handling. The following code provides you with an example of such code.  \n  \n### To handle errors in HTML  \n  \n1.  When you validate the fields, if you call a validation method in a DLL (which should set the error information), call `ReportError` with no parameters.  \n  \n    ```  \n    function ValidateInput()  \n    {  \n       if (!window.external.ValidateFile(HEADER_FILE.value))  \n       {  \n          ReportError();  \n          HEADER_FILE.focus();  \n          return false;  \n       }  \n    }  \n    ```  \n  \n2.  When you validate fields, if you validate the field using only the HTML script, call `SetErrorInfo` first and then call `ReportError` with no parameters.  \n  \n    ```  \n    function OnWhatever()  \n    {  \n       if (!ValidateInput())  \n          window.external.ReportErrror();  \n       ....  \n    }  \n  \n    function ValidateInput()  \n    {  \n       .....  \n  \n       if (HEADER_FILE.value == IMPL_FILE.value)  \n       {  \n          var L_ErrMsg_Text = \"Header and implementation files cannot have the same name.\";  \n          SetErrorInfo(L_ErrMsg_Text);  \n          bValid = false;  \n       }  \n       if (TYPE.value == \"\")  \n       {  \n          var L_ErrMsg4_Text = \"Type cannot be blank.\";  \n          SetErrorInfo(L_ErrMsg4_Text);  \n          bValid = false;  \n       }  \n       return bValid;  \n    }  \n    ```  \n  \n3.  Call `ReportError` with parameters:  \n  \n    ```  \n    function ValidateInput()  \n    {  \n       if (!IsListed(strType))  \n       {  \n          var L_Invalid2_Text = \"The variable type should be one of the types listed.\";  \n          window.external.ReportError(L_Invalid2_Text);  \n          VariableType.focus();  \n          return false;  \n       }  \n    }  \n    ```  \n  \n4.  If you must go back to the **New Project** or **Add New Item** dialog box, return **VS_E_WIZBACKBUTTONPRESS**:  \n  \n    ```  \n    try  \n    {  \n       oCM   = window.external.ProjectObject.CodeModel;  \n    }  \n    catch(e)  \n    {  \n       var L_NCBError_Text = \"Cannot access the Class View information   \n    file. Class View information will not be available.\";  \n       window.external.ReportError(L_NCBError_Text);  \n       return VS_E_WIZARDBACKBUTTONPRESS;  \n    ```  \n  \n## See Also  \n [Files Created for Your Wizard](../ide/files-created-for-your-wizard.md)   \n [Customizing Your Wizard](../ide/customizing-your-wizard.md)"}