<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad71eee60d2dd39ddfc861f6cbccc1d60e730dde</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\reverse-iterator-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecba9f22caede29ab809c1b86bae9670f1d5f4be</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6bb08a33e6abea908d59e71ceb89123a199105b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>reverse_iterator Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>reverse_iterator Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class is an iterator adaptor that describes a reverse iterator object that behaves like a random-access or bidirectional iterator, only in reverse.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It enables the backward traversal of a range.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>RandomIterator</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type that represents the iterator to be adapted to operate in reverse.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Existing Standard Template Library containers also define <ph id="ph1">`reverse_iterator`</ph> and <ph id="ph2">`const_reverse_iterator`</ph> types and have member functions <ph id="ph3">`rbegin`</ph> and <ph id="ph4">`rend`</ph> that return reverse iterators.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These iterators have overwrite semantics.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`reverse_iterator`</ph> adaptor supplements this functionality as offers insert semantics and can also be used with streams.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`reverse_iterator`</ph>s that require a bidirectional iterator must not call any of the member functions <ph id="ph2">`operator+=`</ph>, <ph id="ph3">`operator+`</ph>, <ph id="ph4">`operator-=`</ph>, <ph id="ph5">`operator-`</ph>, or <ph id="ph6">`operator[]`</ph>, which may only be used with random-access iterators.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the range of an iterator is [ <ph id="ph1">` first`</ph>,  last), where the square bracket on the left indicates the inclusion on <ph id="ph2">\_</ph> <bpt id="p1">*</bpt>First<ept id="p1">*</ept> and the parenthesis on the right indicates the inclusion of elements up to <ph id="ph3">\_</ph> <bpt id="p2">*</bpt>Left<ept id="p2">*</ept> but excluding <ph id="ph4">\_</ph> <bpt id="p3">*</bpt>Left<ept id="p3">*</ept> itself.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The same elements are included in the reversed sequence [ <bpt id="p1">**</bpt>rev<ept id="p1">**</ept> â€“ <ph id="ph1">` first`</ph>, <bpt id="p2">**</bpt>rev<ept id="p2">**</ept> â€“ <ph id="ph2">\_</ph> <bpt id="p3">*</bpt>Left<ept id="p3">*</ept>) so that if <ph id="ph3">\_</ph> <bpt id="p4">*</bpt>Left<ept id="p4">*</ept> is the one-past-the-end element in a sequence, then the first element <bpt id="p5">**</bpt>rev<ept id="p5">**</ept> â€“ <ph id="ph4">\_</ph> <bpt id="p6">*</bpt>First<ept id="p6">*</ept> in the reversed sequence points to <ph id="ph5">\*</ph>(<ph id="ph6">\_</ph> <bpt id="p7">*</bpt>Left<ept id="p7">*</ept> â€“ 1 ).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The identity which relates all reverse iterators to their underlying iterators is:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>( <bpt id="p1">**</bpt>reverse_iterator<ept id="p1">**</ept> ( <bpt id="p2">*</bpt>i<ept id="p2">*</ept> ) ) == &amp;<ph id="ph1">\*</ph>( <bpt id="p3">*</bpt>i<ept id="p3">*</ept> â€“ 1 ).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In practice, this means that in the reversed sequence the reverse_iterator will refer to the element one position beyond (to the right of) the element that the iterator had referred to in the original sequence.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the <ph id="ph1">`reverse_iterator`</ph> will address the element 4 in the reversed sequence (8, 6, 4, 2).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>reverse_iterator</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Constructs a default <ph id="ph1">`reverse_iterator`</ph> or a <ph id="ph2">`reverse_iterator`</ph> from an underlying iterator.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>difference_type</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A type that provides the difference between two <ph id="ph1">`reverse_iterator`</ph>s referring to elements within the same container.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>iterator_type</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A type that provides the underlying iterator for a <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>pointer</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to an element addressed by a <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>reference</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element addressed by a <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>base</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Recovers the underlying iterator from its <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>operator_star</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns the element that a <ph id="ph1">`reverse_iterator`</ph> addresses.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>operator+</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Adds an offset to an iterator and returns the new <ph id="ph1">`reverse_iterator`</ph> addressing the inserted element at the new offset position.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>operator++</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Increments the <ph id="ph1">`reverse_iterator`</ph> to the next element.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>operator+=</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Adds a specified offset from a <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>operator-</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Subtracts an offset from a <ph id="ph1">`reverse_iterator`</ph> and returns a <ph id="ph2">`reverse_iterator`</ph> addressing the element at the offset position.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>operator--</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Decrements the <ph id="ph1">`reverse_iterator`</ph> to the previous element.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>operator-=</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Subtracts a specified offset from a <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>operator-&gt;</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the element addressed by the <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>operator&amp;#91;&amp;#93;</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns a reference to an element offset from the element addressed by a <ph id="ph1">`reverse_iterator`</ph> by a specified number of positions.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>iterator&gt;</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>reverse_iterator::base</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Recovers the underlying iterator from its <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The iterator underlying the <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The identity that relates all reverse iterators to their underlying iterators is:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>( <ph id="ph1">`reverse_iterator`</ph> ( <bpt id="p1">*</bpt>i<ept id="p1">*</ept> ) ) == &amp;<ph id="ph2">\*</ph>( <bpt id="p2">*</bpt>i<ept id="p2">*</ept> â€“ 1 ).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In practice, this means that in the reversed sequence the <ph id="ph1">`reverse_iterator`</ph> will refer to the element one position beyond (to the right of) the element that the iterator had referred to in the original sequence.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the <ph id="ph1">`reverse_iterator`</ph> will address the element 4 in the reversed sequence (8, 6, 4, 2).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>reverse_iterator::difference_type</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A type that provides the difference between two <ph id="ph1">`reverse_iterator`</ph>s referring to elements within the same container.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`reverse_iterator`</ph> difference type is the same as the iterator difference type.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the iterator trait typename <ph id="ph1">`iterator_traits`\&lt;</ph> <bpt id="p1">**</bpt>RandomIterator<ept id="p1">**</ept><ph id="ph2">&gt; </ph><bpt id="p2">**</bpt>::pointer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>reverse_iterator::operator&amp;#91;&amp;#93;<ept id="p1">](#reverse_iterator__operator_at)</ept> for an example of how to declare and use <ph id="ph1">`difference_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>reverse_iterator::iterator_type</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A type that provides the underlying iterator for a <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`Iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>reverse_iterator::base<ept id="p1">](#reverse_iterator__base)</ept> for an example of how to declare and use <ph id="ph1">`iterator_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>reverse_iterator::operator*</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Returns the element that a reverse_iterator addresses.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The value of the elements addressed by the reverse_iterator.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The operator returns <ph id="ph1">\*</ph>( <bpt id="p1">**</bpt>current<ept id="p1">**</ept> â€“ 1).</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>reverse_iterator::operator+</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Adds an offset to an iterator and returns the new <ph id="ph1">`reverse_iterator`</ph> addressing the inserted element at the new offset position.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The offset to be added to the reverse iterator.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`reverse_iterator`</ph> addressing the offset element.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This member function may only be used if the <ph id="ph1">`reverse_iterator`</ph> satisfies the requirements for a random-access iterator.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>reverse_iterator::operator++</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Increments the reverse_iterator to the previous element.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The first operator returns the preincremented <ph id="ph1">`reverse_iterator`</ph> and the second, the postincrement operator, returns a copy of the incremented <ph id="ph2">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This member function may only be used if the <ph id="ph1">`reverse_iterator`</ph> satisfies the requirements for a bidirectional iterator.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>reverse_iterator::operator+=</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Adds a specified offset from a reverse_iterator.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The offset by which to increment the iterator.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A reference to the element addressed by the <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>reverse_iterator::operator-</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Subtracts an offset from a <ph id="ph1">`reverse_iterator`</ph> and returns a <ph id="ph2">`reverse_iterator`</ph> addressing the element at the offset position.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The offset to be subtracted from the reverse_iterator.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`reverse_iterator`</ph> addressing the offset element.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This member function may only be used if the <ph id="ph1">`reverse_iterator`</ph> satisfies the requirements for a random-access iterator.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>reverse_iterator::operator--</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Decrements the reverse_iterator to the previous element.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The first operator returns the predecremented <ph id="ph1">`reverse_iterator`</ph> and the second, the postdecrement operator, returns a copy of the decremented <ph id="ph2">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This member function may only be used if the <ph id="ph1">`reverse_iterator`</ph> satisfies the requirements for a bidirectional iterator.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>reverse_iterator::operator-=</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Subtracts a specified offset from a <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The offset to be subtracted from the <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This member function may only be used if the <ph id="ph1">`reverse_iterator`</ph> satisfies the requirements for a random-access iterator.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The operator evaluates <bpt id="p1">**</bpt>current<ept id="p1">**</ept> + _ <bpt id="p2">*</bpt>Off<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>then returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>reverse_iterator::operator-</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the element addressed by the <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A pointer to the element addressed by the <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The operator returns <bpt id="p1">**</bpt><ph id="ph1">&amp;\*\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>reverse_iterator::operator[]</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Returns a reference to an element offset from the element addressed by a <ph id="ph1">`reverse_iterator`</ph> by a specified number of positions.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The offset from the <ph id="ph1">`reverse_iterator`</ph> address.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The reference to the element offset.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The operator returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>( <bpt id="p2">**</bpt><ph id="ph2">\*</ph>this<ept id="p2">**</ept><ph id="ph3"> + `Off`</ph>).</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>reverse_iterator::pointer</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to an element addressed by a <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the iterator trait typename <ph id="ph1">`iterator_traits`\&lt;</ph> <bpt id="p1">*</bpt>RandomIterator<ept id="p1">*</ept><ph id="ph2">&gt; </ph><bpt id="p2">**</bpt>::pointer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>reverse_iterator::reference</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element addressed by a reverse_iterator.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the iterator trait typename <ph id="ph1">`iterator_traits`\&lt;</ph> <bpt id="p1">*</bpt>RandomIterator<ept id="p1">*</ept><ph id="ph2">&gt; </ph><bpt id="p2">**</bpt>::reference<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>reverse_iterator::operator&amp;#91;&amp;#93;<ept id="p1">](#reverse_iterator__operator_at)</ept> or <bpt id="p2">[</bpt>reverse_iterator::operator*<ept id="p2">](#reverse_iterator__operator_star)</ept> for examples of how to declare and use <bpt id="p3">**</bpt>reference<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>reverse_iterator::reverse_iterator</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Constructs a default <ph id="ph1">`reverse_iterator`</ph> or a <ph id="ph2">`reverse_iterator`</ph> from an underlying iterator.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The iterator that is to be adapted to a <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>A default <ph id="ph1">`reverse_iterator`</ph> or a <ph id="ph2">`reverse_iterator`</ph> adapting an underlying iterator.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The identity which relates all reverse iterators to their underlying iterators is:</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>( <ph id="ph1">`reverse_iterator`</ph> ( <bpt id="p1">*</bpt>i<ept id="p1">*</ept> ) ) == &amp;<ph id="ph2">\*</ph>( <bpt id="p2">*</bpt>i<ept id="p2">*</ept> â€“ 1 ).</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>In practice, this means that in the reversed sequence the reverse_iterator will refer to the element one position beyond (to the right of) the element that the iterator had referred to in the original sequence.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the <ph id="ph1">`reverse_iterator`</ph> will address the element 4 in the reversed sequence (8, 6, 4, 2).</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>iterator&gt;</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>