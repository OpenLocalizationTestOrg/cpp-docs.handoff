<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f06ec3dabcae36d90ab71e3e7d7f288179b3aa80</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\how-to-create-a-message-map-for-a-template-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47cc4b5b03f5fcef8730a0c21ff04b5d00dbd16c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79ffa53cde900313826e816129c5c6a8cab49b0e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Create a Message Map for a Template Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create a Message Map for a Template Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Message mapping in MFC provides an efficient way to direct Windows messages to an appropriate C++ object instance.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Examples of MFC message map targets include application classes, document and view classes, control classes, and so on.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Traditional MFC message maps are declared using the <bpt id="p1">[</bpt>BEGIN_MESSAGE_MAP<ept id="p1">](http://msdn.microsoft.com/library/d9201e18-04e0-4639-9810-f15768627fc2)</ept> macro to declare the start of the message map, a macro entry for each message-handler class method, and finally the <bpt id="p2">[</bpt>END_MESSAGE_MAP<ept id="p2">](http://msdn.microsoft.com/library/40f611f1-a3b4-4097-b683-091bf7cfab8b)</ept> macro to declare the end of the message map.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>One limitation with the <bpt id="p1">[</bpt>BEGIN_MESSAGE_MAP<ept id="p1">](http://msdn.microsoft.com/library/d9201e18-04e0-4639-9810-f15768627fc2)</ept> macro occurs when it is used in conjunction with a class containing template arguments.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When used with a template class, this macro will cause a compile-time error due to the missing template parameters during macro expansion.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>BEGIN_TEMPLATE_MESSAGE_MAP<ept id="p1">](http://msdn.microsoft.com/library/972e730b-5f7b-413b-938d-13a367db6a36)</ept> macro was designed to allow classes containing a single template argument to declare their own message maps.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Consider an example where the MFC <bpt id="p1">[</bpt>CListBox<ept id="p1">](../mfc/reference/clistbox-class.md)</ept> class is extended to provide synchronization with an external data source.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The fictitious <bpt id="p1">**</bpt>CSyncListBox<ept id="p1">**</ept> class is declared as follows:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CListBox#42</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CSyncListBox<ept id="p1">**</ept> class is templated on a single type that describes the data source it will synchronize with.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It also declares three methods that will participate in the message map of the class: <bpt id="p1">**</bpt>OnPaint<ept id="p1">**</ept>, <bpt id="p2">**</bpt>OnDestroy<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>OnSynchronize<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>OnSynchronize<ept id="p1">**</ept> method is implemented as follows:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CListBox#43</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The above implementation allows the <bpt id="p1">**</bpt>CSyncListBox<ept id="p1">**</ept> class to be specialized on any class type that implements the <bpt id="p2">**</bpt>GetCount<ept id="p2">**</ept> method, such as <bpt id="p3">**</bpt>CArray<ept id="p3">**</ept>, <bpt id="p4">**</bpt>CList<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>CMap<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>StringizeElement<ept id="p1">**</ept> function is a template function prototyped by the following:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CListBox#44</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Normally, the message map for this class would be defined as:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">**</bpt>LBN_SYNCHRONIZE<ept id="p1">**</ept> is a custom user message defined by the application, such as:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CListBox#45</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The above macro map will not compile, due to the fact that the template specification for the <bpt id="p1">**</bpt>CSyncListBox<ept id="p1">**</ept> class will be missing during macro expansion.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>BEGIN_TEMPLATE_MESSAGE_MAP<ept id="p1">**</ept> macro solves this by incorporating the specified template parameter into the expanded macro map.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The message map for this class becomes:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CListBox#46</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following demonstrates sample usage of the <bpt id="p1">**</bpt>CSyncListBox<ept id="p1">**</ept> class using a <bpt id="p2">**</bpt>CStringList<ept id="p2">**</ept> object:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CListBox#47</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To complete the test, the <bpt id="p1">**</bpt>StringizeElement<ept id="p1">**</ept> function must be specialized to work with the <bpt id="p2">**</bpt>CStringList<ept id="p2">**</ept> class:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CListBox#48</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>BEGIN_TEMPLATE_MESSAGE_MAP</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Message Handling and Mapping</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>