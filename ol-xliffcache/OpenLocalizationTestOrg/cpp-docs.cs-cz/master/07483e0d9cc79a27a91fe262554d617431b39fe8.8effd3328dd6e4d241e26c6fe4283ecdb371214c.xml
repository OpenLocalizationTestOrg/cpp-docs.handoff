{"nodes":[{"pos":[12,100],"content":"Walkthrough: Using the Concurrency Runtime in a COM-Enabled Application | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Walkthrough: Using the Concurrency Runtime in a COM-Enabled Application | Microsoft Docs","pos":[0,88]}]},{"content":"Walkthrough: Using the Concurrency Runtime in a COM-Enabled Application","pos":[713,784]},{"content":"This document demonstrates how to use the Concurrency Runtime in an application that uses the Component Object Model (COM).","pos":[785,908]},{"content":"Prerequisites","pos":[917,930]},{"content":"Read the following documents before you start this walkthrough:","pos":[934,997]},{"content":"Task Parallelism","pos":[1006,1022]},{"content":"Parallel Algorithms","pos":[1095,1114]},{"content":"Asynchronous Agents","pos":[1170,1189]},{"content":"Exception Handling","pos":[1245,1263]},{"pos":[1343,1470],"content":"For more information about COM, see <bpt id=\"p1\">[</bpt>Component Object Model (COM)<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms680573)</ept>.","source":"For more information about COM, see [Component Object Model (COM)](http://msdn.microsoft.com/library/windows/desktop/ms680573)."},{"content":"Managing the Lifetime of the COM Library","pos":[1479,1519]},{"content":"Although the use of COM with the Concurrency Runtime follows the same principles as any other concurrency mechanism, the following guidelines can help you use these libraries together effectively.","pos":[1523,1719]},{"pos":[1729,1856],"content":"A thread must call <bpt id=\"p1\">[</bpt>CoInitializeEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms695279)</ept> before it uses the COM library.","source":"A thread must call [CoInitializeEx](http://msdn.microsoft.com/library/windows/desktop/ms695279) before it uses the COM library."},{"pos":[1866,1972],"content":"A thread can call <ph id=\"ph1\">`CoInitializeEx`</ph> multiple times as long as it provides the same arguments to every call.","source":"A thread can call `CoInitializeEx` multiple times as long as it provides the same arguments to every call."},{"content":"For each call to <ph id=\"ph1\">`CoInitializeEx`</ph>, a thread must also call <bpt id=\"p1\">[</bpt>CoUninitialize<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms688715)</ept>.","pos":[1982,2118],"source":"For each call to `CoInitializeEx`, a thread must also call [CoUninitialize](http://msdn.microsoft.com/library/windows/desktop/ms688715)."},{"content":"In other words, calls to <ph id=\"ph1\">`CoInitializeEx`</ph> and <ph id=\"ph2\">`CoUninitialize`</ph> must be balanced.","pos":[2119,2199],"source":" In other words, calls to `CoInitializeEx` and `CoUninitialize` must be balanced."},{"pos":[2209,2373],"content":"To switch from one thread apartment to another, a thread must completely free the COM library before it calls <ph id=\"ph1\">`CoInitializeEx`</ph> with the new threading specification.","source":"To switch from one thread apartment to another, a thread must completely free the COM library before it calls `CoInitializeEx` with the new threading specification."},{"content":"Other COM principles apply when you use COM with the Concurrency Runtime.","pos":[2380,2453]},{"content":"For example, an application that creates an object in a single-threaded apartment (STA) and marshals that object to another apartment must also provide a message loop to process incoming messages.","pos":[2454,2650]},{"content":"Also remember that marshaling objects between apartments can decrease performance.","pos":[2651,2733]},{"content":"Using COM with the Parallel Patterns Library","pos":[2743,2787]},{"content":"When you use COM with a component in the Parallel Patterns Library (PPL), for example, a task group or parallel algorithm, call <ph id=\"ph1\">`CoInitializeEx`</ph> before you use the COM library during each task or iteration, and call <ph id=\"ph2\">`CoUninitialize`</ph> before each task or iteration finishes.","pos":[2791,3063],"source":"When you use COM with a component in the Parallel Patterns Library (PPL), for example, a task group or parallel algorithm, call `CoInitializeEx` before you use the COM library during each task or iteration, and call `CoUninitialize` before each task or iteration finishes."},{"content":"The following example shows how to manage the lifetime of the COM library with a <bpt id=\"p1\">[</bpt>concurrency::structured_task_group<ept id=\"p1\">](../../parallel/concrt/reference/structured-task-group-class.md)</ept> object.","pos":[3064,3253],"source":" The following example shows how to manage the lifetime of the COM library with a [concurrency::structured_task_group](../../parallel/concrt/reference/structured-task-group-class.md) object."},{"pos":[3271,3296],"content":"concrt-parallel-scripts#1"},{"content":"You must make sure that the COM library is correctly freed when a task or parallel algorithm is canceled or when the task body throws an exception.","pos":[3421,3568]},{"content":"To guarantee that the task calls <ph id=\"ph1\">`CoUninitialize`</ph> before it exits, use a <ph id=\"ph2\">`try-finally`</ph> block or the <bpt id=\"p1\">*</bpt>Resource Acquisition Is Initialization<ept id=\"p1\">*</ept> (RAII) pattern.","pos":[3569,3725],"source":" To guarantee that the task calls `CoUninitialize` before it exits, use a `try-finally` block or the *Resource Acquisition Is Initialization* (RAII) pattern."},{"content":"The following example uses a <ph id=\"ph1\">`try-finally`</ph> block to free the COM library when the task completes or is canceled, or when an exception is thrown.","pos":[3726,3870],"source":" The following example uses a `try-finally` block to free the COM library when the task completes or is canceled, or when an exception is thrown."},{"pos":[3888,3913],"content":"concrt-parallel-scripts#2"},{"pos":[4038,4183],"content":"The following example uses the RAII pattern to define the <ph id=\"ph1\">`CCoInitializer`</ph> class, which manages the lifetime of the COM library in a given scope.","source":"The following example uses the RAII pattern to define the `CCoInitializer` class, which manages the lifetime of the COM library in a given scope."},{"pos":[4201,4226],"content":"concrt-parallel-scripts#3"},{"pos":[4351,4460],"content":"You can use the <ph id=\"ph1\">`CCoInitializer`</ph> class to automatically free the COM library when the task exits, as follows.","source":"You can use the `CCoInitializer` class to automatically free the COM library when the task exits, as follows."},{"pos":[4478,4503],"content":"concrt-parallel-scripts#4"},{"pos":[4628,4754],"content":"For more information about cancellation in the Concurrency Runtime, see <bpt id=\"p1\">[</bpt>Cancellation in the PPL<ept id=\"p1\">](cancellation-in-the-ppl.md)</ept>.","source":"For more information about cancellation in the Concurrency Runtime, see [Cancellation in the PPL](cancellation-in-the-ppl.md)."},{"content":"Using COM with Asynchronous Agents","pos":[4764,4798]},{"content":"When you use COM with asynchronous agents, call <ph id=\"ph1\">`CoInitializeEx`</ph> before you use the COM library in the <bpt id=\"p1\">[</bpt>concurrency::agent::run<ept id=\"p1\">](reference/agent-class.md#run)</ept> method for your agent.","pos":[4803,4984],"source":"When you use COM with asynchronous agents, call `CoInitializeEx` before you use the COM library in the [concurrency::agent::run](reference/agent-class.md#run) method for your agent."},{"content":"Then call <ph id=\"ph1\">`CoUninitialize`</ph> before the <ph id=\"ph2\">`run`</ph> method returns.","pos":[4985,5044],"source":" Then call `CoUninitialize` before the `run` method returns."},{"content":"Do not use COM management routines in the constructor or destructor of your agent, and do not override the <bpt id=\"p1\">[</bpt>concurrency::agent::start<ept id=\"p1\">](reference/agent-class.md#start)</ept> or <bpt id=\"p2\">[</bpt>concurrency::agent::done<ept id=\"p2\">](reference/agent-class.md#done)</ept> methods because these methods are called from a different thread than the <ph id=\"ph1\">`run`</ph> method.","pos":[5045,5360],"source":" Do not use COM management routines in the constructor or destructor of your agent, and do not override the [concurrency::agent::start](reference/agent-class.md#start) or [concurrency::agent::done](reference/agent-class.md#done) methods because these methods are called from a different thread than the `run` method."},{"pos":[5368,5485],"content":"The following example shows a basic agent class, named <ph id=\"ph1\">`CCoAgent`</ph>, which manages the COM library in the <ph id=\"ph2\">`run`</ph> method.","source":"The following example shows a basic agent class, named `CCoAgent`, which manages the COM library in the `run` method."},{"pos":[5503,5528],"content":"concrt-parallel-scripts#5"},{"content":"A complete example is provided later in this walkthrough.","pos":[5653,5710]},{"content":"Using COM with Lightweight Tasks","pos":[5720,5752]},{"content":"The document <bpt id=\"p1\">[</bpt>Task Scheduler<ept id=\"p1\">](../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept> describes the role of lightweight tasks in the Concurrency Runtime.","pos":[5756,5914],"source":"The document [Task Scheduler](../../parallel/concrt/task-scheduler-concurrency-runtime.md) describes the role of lightweight tasks in the Concurrency Runtime."},{"content":"You can use COM with a lightweight task just as you would with any thread routine that you pass to the <ph id=\"ph1\">`CreateThread`</ph> function in the Windows API.","pos":[5915,6061],"source":" You can use COM with a lightweight task just as you would with any thread routine that you pass to the `CreateThread` function in the Windows API."},{"content":"This is shown in the following example.","pos":[6062,6101]},{"pos":[6119,6144],"content":"concrt-parallel-scripts#6"},{"content":"An Example of a COM-Enabled Application","pos":[6271,6310]},{"content":"This section shows a complete COM-enabled application that uses the <ph id=\"ph1\">`IScriptControl`</ph> interface to execute a script that computes the n<ph id=\"ph2\">&lt;sup&gt;</ph>th<ph id=\"ph3\">&lt;/sup&gt;</ph> Fibonacci number.","pos":[6314,6479],"source":"This section shows a complete COM-enabled application that uses the `IScriptControl` interface to execute a script that computes the n<sup>th</sup> Fibonacci number."},{"content":"This example first calls the script from the main thread, and then uses the PPL and agents to call the script concurrently.","pos":[6480,6603]},{"pos":[6610,6726],"content":"Consider the following helper function, <ph id=\"ph1\">`RunScriptProcedure`</ph>, which calls a procedure in an <ph id=\"ph2\">`IScriptControl`</ph> object.","source":"Consider the following helper function, `RunScriptProcedure`, which calls a procedure in an `IScriptControl` object."},{"pos":[6744,6769],"content":"concrt-parallel-scripts#7"},{"pos":[6894,7093],"content":"The <ph id=\"ph1\">`wmain`</ph> function creates an <ph id=\"ph2\">`IScriptControl`</ph> object, adds script code to it that computes the n<ph id=\"ph3\">&lt;sup&gt;</ph>th<ph id=\"ph4\">&lt;/sup&gt;</ph> Fibonacci number, and then calls the <ph id=\"ph5\">`RunScriptProcedure`</ph> function to run that script.","source":"The `wmain` function creates an `IScriptControl` object, adds script code to it that computes the n<sup>th</sup> Fibonacci number, and then calls the `RunScriptProcedure` function to run that script."},{"pos":[7111,7136],"content":"concrt-parallel-scripts#8"},{"content":"Calling the Script from the PPL","pos":[7264,7295]},{"content":"The following function, <ph id=\"ph1\">`ParallelFibonacci`</ph>, uses the <bpt id=\"p1\">[</bpt>concurrency::parallel_for<ept id=\"p1\">](reference/concurrency-namespace-functions.md#parallel_for)</ept> algorithm to call the script in parallel.","pos":[7300,7482],"source":"The following function, `ParallelFibonacci`, uses the [concurrency::parallel_for](reference/concurrency-namespace-functions.md#parallel_for) algorithm to call the script in parallel."},{"content":"This function uses the <ph id=\"ph1\">`CCoInitializer`</ph> class to manage the lifetime of the COM library during every iteration of the task.","pos":[7483,7606],"source":" This function uses the `CCoInitializer` class to manage the lifetime of the COM library during every iteration of the task."},{"pos":[7625,7650],"content":"concrt-parallel-scripts#9"},{"pos":[7775,7892],"content":"To use the <ph id=\"ph1\">`ParallelFibonacci`</ph> function with the example, add the following code before the <ph id=\"ph2\">`wmain`</ph> function returns.","source":"To use the `ParallelFibonacci` function with the example, add the following code before the `wmain` function returns."},{"pos":[7910,7936],"content":"concrt-parallel-scripts#10"},{"content":"Calling the Script from an Agent","pos":[8065,8097]},{"content":"The following example shows the <ph id=\"ph1\">`FibonacciScriptAgent`</ph> class, which calls a script procedure to compute the n<ph id=\"ph2\">&lt;sup&gt;</ph>th<ph id=\"ph3\">&lt;/sup&gt;</ph> Fibonacci number.","pos":[8101,8241],"source":"The following example shows the `FibonacciScriptAgent` class, which calls a script procedure to compute the n<sup>th</sup> Fibonacci number."},{"content":"The <ph id=\"ph1\">`FibonacciScriptAgent`</ph> class uses message passing to receive, from the main program, input values to the script function.","pos":[8242,8367],"source":" The `FibonacciScriptAgent` class uses message passing to receive, from the main program, input values to the script function."},{"content":"The <ph id=\"ph1\">`run`</ph> method manages the lifetime of the COM library throughout the task.","pos":[8368,8445],"source":" The `run` method manages the lifetime of the COM library throughout the task."},{"pos":[8463,8489],"content":"concrt-parallel-scripts#11"},{"pos":[8615,8775],"content":"The following function, <ph id=\"ph1\">`AgentFibonacci`</ph>, creates several <ph id=\"ph2\">`FibonacciScriptAgent`</ph> objects and uses message passing to send several input values to those objects.","source":"The following function, `AgentFibonacci`, creates several `FibonacciScriptAgent` objects and uses message passing to send several input values to those objects."},{"pos":[8793,8819],"content":"concrt-parallel-scripts#12"},{"pos":[8945,9059],"content":"To use the <ph id=\"ph1\">`AgentFibonacci`</ph> function with the example, add the following code before the <ph id=\"ph2\">`wmain`</ph> function returns.","source":"To use the `AgentFibonacci` function with the example, add the following code before the `wmain` function returns."},{"pos":[9077,9103],"content":"concrt-parallel-scripts#13"},{"content":"The Complete Example","pos":[9232,9252]},{"content":"The following code shows the complete example, which uses parallel algorithms and asynchronous agents to call a script procedure that computes Fibonacci numbers.","pos":[9256,9417]},{"pos":[9435,9461],"content":"concrt-parallel-scripts#14"},{"content":"The example produces the following sample output.","pos":[9587,9636]},{"content":"Compiling the Code","pos":[9971,9989]},{"pos":[9993,10191],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`parallel-scripts.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `parallel-scripts.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe /EHsc parallel-scripts.cpp /link ole32.lib","pos":[10200,10249]},{"content":"See Also","pos":[10260,10268]},{"content":"Concurrency Runtime Walkthroughs","pos":[10273,10305]},{"content":"Task Parallelism","pos":[10371,10387]},{"content":"Parallel Algorithms","pos":[10457,10476]},{"content":"Asynchronous Agents","pos":[10529,10548]},{"content":"Exception Handling","pos":[10601,10619]},{"content":"Cancellation in the PPL","pos":[10698,10721]},{"content":"Task Scheduler","pos":[10756,10770]}],"content":"---\ntitle: \"Walkthrough: Using the Concurrency Runtime in a COM-Enabled Application | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Concurrency Runtime, use with COM\"\n  - \"COM, use with the Concurrency Runtime\"\nms.assetid: a7c798b8-0fc8-4bee-972f-22ef158f7f48\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Walkthrough: Using the Concurrency Runtime in a COM-Enabled Application\nThis document demonstrates how to use the Concurrency Runtime in an application that uses the Component Object Model (COM).  \n  \n## Prerequisites  \n Read the following documents before you start this walkthrough:  \n  \n- [Task Parallelism](../../parallel/concrt/task-parallelism-concurrency-runtime.md)  \n  \n- [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md)  \n  \n- [Asynchronous Agents](../../parallel/concrt/asynchronous-agents.md)  \n  \n- [Exception Handling](../../parallel/concrt/exception-handling-in-the-concurrency-runtime.md)  \n  \n For more information about COM, see [Component Object Model (COM)](http://msdn.microsoft.com/library/windows/desktop/ms680573).  \n  \n## Managing the Lifetime of the COM Library  \n Although the use of COM with the Concurrency Runtime follows the same principles as any other concurrency mechanism, the following guidelines can help you use these libraries together effectively.  \n  \n-   A thread must call [CoInitializeEx](http://msdn.microsoft.com/library/windows/desktop/ms695279) before it uses the COM library.  \n  \n-   A thread can call `CoInitializeEx` multiple times as long as it provides the same arguments to every call.  \n  \n-   For each call to `CoInitializeEx`, a thread must also call [CoUninitialize](http://msdn.microsoft.com/library/windows/desktop/ms688715). In other words, calls to `CoInitializeEx` and `CoUninitialize` must be balanced.  \n  \n-   To switch from one thread apartment to another, a thread must completely free the COM library before it calls `CoInitializeEx` with the new threading specification.  \n  \n Other COM principles apply when you use COM with the Concurrency Runtime. For example, an application that creates an object in a single-threaded apartment (STA) and marshals that object to another apartment must also provide a message loop to process incoming messages. Also remember that marshaling objects between apartments can decrease performance.  \n  \n### Using COM with the Parallel Patterns Library  \n When you use COM with a component in the Parallel Patterns Library (PPL), for example, a task group or parallel algorithm, call `CoInitializeEx` before you use the COM library during each task or iteration, and call `CoUninitialize` before each task or iteration finishes. The following example shows how to manage the lifetime of the COM library with a [concurrency::structured_task_group](../../parallel/concrt/reference/structured-task-group-class.md) object.  \n  \n [!code-cpp[concrt-parallel-scripts#1](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_1.cpp)]  \n  \n You must make sure that the COM library is correctly freed when a task or parallel algorithm is canceled or when the task body throws an exception. To guarantee that the task calls `CoUninitialize` before it exits, use a `try-finally` block or the *Resource Acquisition Is Initialization* (RAII) pattern. The following example uses a `try-finally` block to free the COM library when the task completes or is canceled, or when an exception is thrown.  \n  \n [!code-cpp[concrt-parallel-scripts#2](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_2.cpp)]  \n  \n The following example uses the RAII pattern to define the `CCoInitializer` class, which manages the lifetime of the COM library in a given scope.  \n  \n [!code-cpp[concrt-parallel-scripts#3](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_3.cpp)]  \n  \n You can use the `CCoInitializer` class to automatically free the COM library when the task exits, as follows.  \n  \n [!code-cpp[concrt-parallel-scripts#4](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_4.cpp)]  \n  \n For more information about cancellation in the Concurrency Runtime, see [Cancellation in the PPL](cancellation-in-the-ppl.md).  \n  \n### Using COM with Asynchronous Agents  \n\n When you use COM with asynchronous agents, call `CoInitializeEx` before you use the COM library in the [concurrency::agent::run](reference/agent-class.md#run) method for your agent. Then call `CoUninitialize` before the `run` method returns. Do not use COM management routines in the constructor or destructor of your agent, and do not override the [concurrency::agent::start](reference/agent-class.md#start) or [concurrency::agent::done](reference/agent-class.md#done) methods because these methods are called from a different thread than the `run` method.  \n\n  \n The following example shows a basic agent class, named `CCoAgent`, which manages the COM library in the `run` method.  \n  \n [!code-cpp[concrt-parallel-scripts#5](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_5.cpp)]  \n  \n A complete example is provided later in this walkthrough.  \n  \n### Using COM with Lightweight Tasks  \n The document [Task Scheduler](../../parallel/concrt/task-scheduler-concurrency-runtime.md) describes the role of lightweight tasks in the Concurrency Runtime. You can use COM with a lightweight task just as you would with any thread routine that you pass to the `CreateThread` function in the Windows API. This is shown in the following example.  \n  \n [!code-cpp[concrt-parallel-scripts#6](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_6.cpp)]  \n  \n## An Example of a COM-Enabled Application  \n This section shows a complete COM-enabled application that uses the `IScriptControl` interface to execute a script that computes the n<sup>th</sup> Fibonacci number. This example first calls the script from the main thread, and then uses the PPL and agents to call the script concurrently.  \n  \n Consider the following helper function, `RunScriptProcedure`, which calls a procedure in an `IScriptControl` object.  \n  \n [!code-cpp[concrt-parallel-scripts#7](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_7.cpp)]  \n  \n The `wmain` function creates an `IScriptControl` object, adds script code to it that computes the n<sup>th</sup> Fibonacci number, and then calls the `RunScriptProcedure` function to run that script.  \n  \n [!code-cpp[concrt-parallel-scripts#8](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_8.cpp)]  \n  \n### Calling the Script from the PPL  \n\n The following function, `ParallelFibonacci`, uses the [concurrency::parallel_for](reference/concurrency-namespace-functions.md#parallel_for) algorithm to call the script in parallel. This function uses the `CCoInitializer` class to manage the lifetime of the COM library during every iteration of the task.  \n\n  \n [!code-cpp[concrt-parallel-scripts#9](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_9.cpp)]  \n  \n To use the `ParallelFibonacci` function with the example, add the following code before the `wmain` function returns.  \n  \n [!code-cpp[concrt-parallel-scripts#10](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_10.cpp)]  \n  \n### Calling the Script from an Agent  \n The following example shows the `FibonacciScriptAgent` class, which calls a script procedure to compute the n<sup>th</sup> Fibonacci number. The `FibonacciScriptAgent` class uses message passing to receive, from the main program, input values to the script function. The `run` method manages the lifetime of the COM library throughout the task.  \n  \n [!code-cpp[concrt-parallel-scripts#11](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_11.cpp)]  \n  \n The following function, `AgentFibonacci`, creates several `FibonacciScriptAgent` objects and uses message passing to send several input values to those objects.  \n  \n [!code-cpp[concrt-parallel-scripts#12](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_12.cpp)]  \n  \n To use the `AgentFibonacci` function with the example, add the following code before the `wmain` function returns.  \n  \n [!code-cpp[concrt-parallel-scripts#13](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_13.cpp)]  \n  \n### The Complete Example  \n The following code shows the complete example, which uses parallel algorithms and asynchronous agents to call a script procedure that computes Fibonacci numbers.  \n  \n [!code-cpp[concrt-parallel-scripts#14](../../parallel/concrt/codesnippet/cpp/walkthrough-using-the-concurrency-runtime-in-a-com-enabled-application_14.cpp)]  \n  \n The example produces the following sample output.  \n  \n```Output  \nMain Thread:  \nfib(15) = 610  \n \nParallel Fibonacci:  \nfib(15) = 610  \nfib(10) = 55  \nfib(16) = 987  \nfib(18) = 2584  \nfib(11) = 89  \nfib(17) = 1597  \nfib(19) = 4181  \nfib(12) = 144  \nfib(13) = 233  \nfib(14) = 377  \n \nAgent Fibonacci:  \nfib(30) = 832040  \nfib(22) = 17711  \nfib(10) = 55  \nfib(12) = 144  \n```  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `parallel-scripts.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe /EHsc parallel-scripts.cpp /link ole32.lib**  \n  \n## See Also  \n [Concurrency Runtime Walkthroughs](../../parallel/concrt/concurrency-runtime-walkthroughs.md)   \n [Task Parallelism](../../parallel/concrt/task-parallelism-concurrency-runtime.md)   \n [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md)   \n [Asynchronous Agents](../../parallel/concrt/asynchronous-agents.md)   \n [Exception Handling](../../parallel/concrt/exception-handling-in-the-concurrency-runtime.md)   \n [Cancellation in the PPL](cancellation-in-the-ppl.md)   \n [Task Scheduler](../../parallel/concrt/task-scheduler-concurrency-runtime.md)\n\n"}