{"nodes":[{"pos":[12,46],"content":"COleVariant Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"COleVariant Class | Microsoft Docs","pos":[0,34]}]},{"content":"COleVariant Class","pos":[665,682]},{"pos":[683,790],"content":"Encapsulates the <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> data type.","source":"Encapsulates the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) data type."},{"content":"Syntax","pos":[799,805]},{"content":"Members","pos":[869,876]},{"content":"Public Constructors","pos":[886,905]},{"content":"Name","pos":[912,916]},{"content":"Description","pos":[917,928]},{"content":"COleVariant::COleVariant","pos":[967,991]},{"pos":[1020,1054],"content":"Constructs a <ph id=\"ph1\">`COleVariant`</ph> object.","source":"Constructs a `COleVariant` object."},{"content":"Public Methods","pos":[1065,1079]},{"content":"Name","pos":[1086,1090]},{"content":"Description","pos":[1091,1102]},{"content":"COleVariant::Attach","pos":[1141,1160]},{"pos":[1184,1226],"content":"Attaches a <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> to a <ph id=\"ph1\">`COleVariant`</ph>.","source":"Attaches a **VARIANT** to a `COleVariant`."},{"content":"COleVariant::ChangeType","pos":[1232,1255]},{"pos":[1283,1337],"content":"Changes the variant type of this <ph id=\"ph1\">`COleVariant`</ph> object.","source":"Changes the variant type of this `COleVariant` object."},{"content":"COleVariant::Clear","pos":[1343,1361]},{"pos":[1384,1417],"content":"Clears this <ph id=\"ph1\">`COleVariant`</ph> object.","source":"Clears this `COleVariant` object."},{"content":"COleVariant::Detach","pos":[1423,1442]},{"pos":[1466,1538],"content":"Detaches a <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> from a <ph id=\"ph1\">`COleVariant`</ph> and returns the <bpt id=\"p2\">**</bpt>VARIANT<ept id=\"p2\">**</ept>.","source":"Detaches a **VARIANT** from a `COleVariant` and returns the **VARIANT**."},{"content":"COleVariant::GetByteArrayFromVariantArray","pos":[1544,1585]},{"content":"Retrieves a byte array from an existing variant array.","pos":[1631,1685]},{"content":"COleVariant::SetString","pos":[1691,1713]},{"content":"Sets the string to a particular type, typically ANSI.","pos":[1740,1793]},{"content":"Public Operators","pos":[1804,1820]},{"content":"Name","pos":[1827,1831]},{"content":"Description","pos":[1832,1843]},{"content":"COleVariant::operator LPCVARIANT","pos":[1882,1914]},{"pos":[1951,2003],"content":"Converts a <ph id=\"ph1\">`COleVariant`</ph> value into an <ph id=\"ph2\">`LPCVARIANT`</ph>.","source":"Converts a `COleVariant` value into an `LPCVARIANT`."},{"content":"COleVariant::operator LPVARIANT","pos":[2009,2040]},{"pos":[2076,2128],"content":"Converts a <ph id=\"ph1\">`COleVariant`</ph> object into an <ph id=\"ph2\">`LPVARIANT`</ph>.","source":"Converts a `COleVariant` object into an `LPVARIANT`."},{"content":"COleVariant::operator =","pos":[2134,2157]},{"pos":[2187,2216],"content":"Copies a <ph id=\"ph1\">`COleVariant`</ph> value.","source":"Copies a `COleVariant` value."},{"content":"COleVariant::operator ==","pos":[2222,2246]},{"pos":[2279,2313],"content":"Compares two <ph id=\"ph1\">`COleVariant`</ph> values.","source":"Compares two `COleVariant` values."},{"content":"COleVariant::operator <ph id=\"ph1\">&amp;lt;&amp;lt;</ph>,","pos":[2319,2350],"source":"COleVariant::operator &lt;&lt;, "},{"pos":[2403,2515],"content":"Outputs a <ph id=\"ph1\">`COleVariant`</ph> value to <ph id=\"ph2\">`CArchive`</ph> or <ph id=\"ph3\">`CDumpContext`</ph> and inputs a <ph id=\"ph4\">`COleVariant`</ph> object from <ph id=\"ph5\">`CArchive`</ph>.","source":"Outputs a `COleVariant` value to `CArchive` or `CDumpContext` and inputs a `COleVariant` object from `CArchive`."},{"content":"Remarks","pos":[2525,2532]},{"content":"This data type is used in OLE automation.","pos":[2536,2577]},{"content":"Specifically, the <bpt id=\"p1\">[</bpt>DISPPARAMS<ept id=\"p1\">](http://msdn.microsoft.com/en-us/a16e5a21-766e-4287-b039-13429aa78f8b)</ept> structure contains a pointer to an array of <bpt id=\"p2\">**</bpt>VARIANT<ept id=\"p2\">**</ept> structures.","pos":[2578,2746],"source":" Specifically, the [DISPPARAMS](http://msdn.microsoft.com/en-us/a16e5a21-766e-4287-b039-13429aa78f8b) structure contains a pointer to an array of **VARIANT** structures."},{"content":"A <bpt id=\"p1\">**</bpt>DISPPARAMS<ept id=\"p1\">**</ept> structure is used to pass parameters to <bpt id=\"p2\">[</bpt>IDispatch::Invoke<ept id=\"p2\">](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d)</ept>.","pos":[2747,2894],"source":" A **DISPPARAMS** structure is used to pass parameters to [IDispatch::Invoke](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d)."},{"pos":[2902,3151],"content":"[!NOTE]\n This class is derived from the **VARIANT** structure. This means you can pass a `COleVariant` in a parameter that calls for a **VARIANT** and that the data members of the **VARIANT** structure are accessible data members of `COleVariant`.","leadings":["","> "],"nodes":[{"content":" This class is derived from the **VARIANT** structure. This means you can pass a `COleVariant` in a parameter that calls for a **VARIANT** and that the data members of the **VARIANT** structure are accessible data members of `COleVariant`.","pos":[8,247],"nodes":[{"content":"This class is derived from the <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> structure.","pos":[1,54],"source":" This class is derived from the **VARIANT** structure."},{"content":"This means you can pass a <ph id=\"ph1\">`COleVariant`</ph> in a parameter that calls for a <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> and that the data members of the <bpt id=\"p2\">**</bpt>VARIANT<ept id=\"p2\">**</ept> structure are accessible data members of <ph id=\"ph2\">`COleVariant`</ph>.","pos":[55,239],"source":" This means you can pass a `COleVariant` in a parameter that calls for a **VARIANT** and that the data members of the **VARIANT** structure are accessible data members of `COleVariant`."}]}]},{"content":"The two related MFC classes <bpt id=\"p1\">[</bpt>COleCurrency<ept id=\"p1\">](../../mfc/reference/colecurrency-class.md)</ept> and <bpt id=\"p2\">[</bpt>COleDateTime<ept id=\"p2\">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept> encapsulate the variant data types <bpt id=\"p3\">**</bpt>CURRENCY<ept id=\"p3\">**</ept> ( <ph id=\"ph1\">`VT_CY`</ph>) and <bpt id=\"p4\">**</bpt>DATE<ept id=\"p4\">**</ept> ( <ph id=\"ph2\">`VT_DATE`</ph>).","pos":[3158,3402],"source":"The two related MFC classes [COleCurrency](../../mfc/reference/colecurrency-class.md) and [COleDateTime](../../atl-mfc-shared/reference/coledatetime-class.md) encapsulate the variant data types **CURRENCY** ( `VT_CY`) and **DATE** ( `VT_DATE`)."},{"content":"The <ph id=\"ph1\">`COleVariant`</ph> class is used extensively in the DAO classes; see these classes for typical usage of this class, for example <bpt id=\"p1\">[</bpt>CDaoQueryDef<ept id=\"p1\">](../../mfc/reference/cdaoquerydef-class.md)</ept> and <bpt id=\"p2\">[</bpt>CDaoRecordset<ept id=\"p2\">](../../mfc/reference/cdaorecordset-class.md)</ept>.","pos":[3403,3652],"source":" The `COleVariant` class is used extensively in the DAO classes; see these classes for typical usage of this class, for example [CDaoQueryDef](../../mfc/reference/cdaoquerydef-class.md) and [CDaoRecordset](../../mfc/reference/cdaorecordset-class.md)."},{"pos":[3659,4097],"content":"For more information, see the <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept>, <bpt id=\"p2\">[</bpt>CURRENCY<ept id=\"p2\">](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e)</ept>, <bpt id=\"p3\">[</bpt>DISPPARAMS<ept id=\"p3\">](http://msdn.microsoft.com/en-us/a16e5a21-766e-4287-b039-13429aa78f8b)</ept>, and <bpt id=\"p4\">[</bpt>IDispatch::Invoke<ept id=\"p4\">](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d)</ept> entries in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118), [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e), [DISPPARAMS](http://msdn.microsoft.com/en-us/a16e5a21-766e-4287-b039-13429aa78f8b), and [IDispatch::Invoke](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[4104,4279],"content":"For more information on the <ph id=\"ph1\">`COleVariant`</ph> class and its use in OLE automation, see \"Passing Parameters in OLE Automation\" in the article <bpt id=\"p1\">[</bpt>Automation<ept id=\"p1\">](../../mfc/automation.md)</ept>.","source":"For more information on the `COleVariant` class and its use in OLE automation, see \"Passing Parameters in OLE Automation\" in the article [Automation](../../mfc/automation.md)."},{"content":"Inheritance Hierarchy","pos":[4288,4309]},{"content":"Requirements","pos":[4354,4366]},{"pos":[4370,4391],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxdisp.h","source":"**Header:** afxdisp.h"},{"pos":[4437,4456],"content":"COleVariant::Attach"},{"pos":[4460,4622],"content":"Call this function to attach the given <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> object to the current <ph id=\"ph1\">`COleVariant`</ph> object.","source":"Call this function to attach the given [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) object to the current `COleVariant` object."},{"content":"Parameters","pos":[4677,4687]},{"content":"varSrc","pos":[4692,4698]},{"content":"An existing <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> object to be attached to the current <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[4703,4785],"source":" An existing **VARIANT** object to be attached to the current `COleVariant` object."},{"content":"Remarks","pos":[4795,4802]},{"pos":[4806,4935],"content":"This function sets the <bpt id=\"p1\">[</bpt>VARTYPE<ept id=\"p1\">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> of <bpt id=\"p2\">*</bpt>varSrc<ept id=\"p2\">*</ept> to <ph id=\"ph1\">`VT_EMPTY`</ph>.","source":"This function sets the [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) of *varSrc* to `VT_EMPTY`."},{"pos":[4942,5203],"content":"For more information, see the <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> and <bpt id=\"p2\">[</bpt>VARTYPE<ept id=\"p2\">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> entries in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) and [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[5254,5278],"content":"COleVariant::COleVariant"},{"pos":[5282,5316],"content":"Constructs a <ph id=\"ph1\">`COleVariant`</ph> object.","source":"Constructs a `COleVariant` object."},{"content":"Parameters","pos":[6081,6091]},{"content":"varSrc","pos":[6096,6102]},{"content":"An existing <ph id=\"ph1\">`COleVariant`</ph> or <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> object to be copied into the new <ph id=\"ph2\">`COleVariant`</ph> object.","pos":[6107,6202],"source":" An existing `COleVariant` or **VARIANT** object to be copied into the new `COleVariant` object."},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> object that will be copied into the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[6219,6307],"source":" A pointer to a **VARIANT** object that will be copied into the new `COleVariant` object."},{"content":"A null-terminated string to be copied into the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[6327,6399],"source":" A null-terminated string to be copied into the new `COleVariant` object."},{"content":"The <ph id=\"ph1\">`VARTYPE`</ph> for the new <ph id=\"ph2\">`COleVariant`</ph> object.","pos":[6417,6464],"source":" The `VARTYPE` for the new `COleVariant` object."},{"content":"A <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object to be copied into the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[6483,6599],"source":" A [CString](../../atl-mfc-shared/reference/cstringt-class.md) object to be copied into the new `COleVariant` object."},{"content":",","pos":[6612,6613]},{"content":"A numerical value to be copied into the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[6624,6689],"source":" A numerical value to be copied into the new `COleVariant` object."},{"content":"The <ph id=\"ph1\">`VARTYPE`</ph> for the new <ph id=\"ph2\">`COleVariant`</ph> object.","pos":[6707,6754],"source":" The `VARTYPE` for the new `COleVariant` object."},{"content":"A <bpt id=\"p1\">[</bpt>COleCurrency<ept id=\"p1\">](../../mfc/reference/colecurrency-class.md)</ept> object to be copied into the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[6773,6887],"source":" A [COleCurrency](../../mfc/reference/colecurrency-class.md) object to be copied into the new `COleVariant` object."},{"content":",","pos":[6902,6903]},{"content":"A numerical value to be copied into the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[6916,6981],"source":" A numerical value to be copied into the new `COleVariant` object."},{"content":"A <bpt id=\"p1\">[</bpt>COleDateTime<ept id=\"p1\">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept> object to be copied into the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[7001,7126],"source":" A [COleDateTime](../../atl-mfc-shared/reference/coledatetime-class.md) object to be copied into the new `COleVariant` object."},{"content":"A <bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept> object to be copied into the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[7145,7255],"source":" A [CByteArray](../../mfc/reference/cbytearray-class.md) object to be copied into the new `COleVariant` object."},{"content":"A <bpt id=\"p1\">[</bpt>CLongBinary<ept id=\"p1\">](../../mfc/reference/clongbinary-class.md)</ept> object to be copied into the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[7273,7385],"source":" A [CLongBinary](../../mfc/reference/clongbinary-class.md) object to be copied into the new `COleVariant` object."},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>ITEMIDLIST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773321)</ept> structure to be copied into the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[7402,7547],"source":" A pointer to a [ITEMIDLIST](http://msdn.microsoft.com/library/windows/desktop/bb773321) structure to be copied into the new `COleVariant` object."},{"content":"Remarks","pos":[7557,7564]},{"content":"All these constructors create new <ph id=\"ph1\">`COleVariant`</ph> objects initialized to the specified value.","pos":[7568,7659],"source":"All these constructors create new `COleVariant` objects initialized to the specified value."},{"content":"A brief description of each of these constructors follows.","pos":[7660,7718]},{"pos":[7726,7795],"content":"<bpt id=\"p1\">**</bpt>COleVariant( )<ept id=\"p1\">**</ept> Creates an empty <ph id=\"ph1\">`COleVariant`</ph> object, <ph id=\"ph2\">`VT_EMPTY`</ph>.","source":"**COleVariant( )** Creates an empty `COleVariant` object, `VT_EMPTY`."},{"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>varSrc<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> Copies an existing <bpt id=\"p4\">**</bpt>VARIANT<ept id=\"p4\">**</ept> or <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[7803,7890],"source":"**COleVariant(** *varSrc* **)** Copies an existing **VARIANT** or `COleVariant` object."},{"content":"The variant type is retained.","pos":[7891,7920]},{"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`pSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies an existing <bpt id=\"p3\">**</bpt>VARIANT<ept id=\"p3\">**</ept> or <ph id=\"ph2\">`COleVariant`</ph> object.","pos":[7928,8013],"source":"**COleVariant(** `pSrc` **)** Copies an existing **VARIANT** or `COleVariant` object."},{"content":"The variant type is retained.","pos":[8014,8043]},{"pos":[8051,8141],"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lpszSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a string into the new object, <ph id=\"ph2\">`VT_BSTR`</ph> (UNICODE).","source":"**COleVariant(** `lpszSrc` **)** Copies a string into the new object, `VT_BSTR` (UNICODE)."},{"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lpszSrc`</ph> <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept> <ph id=\"ph2\">`vtSrc`</ph> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> Copies a string into the new object.","pos":[8149,8232],"source":"**COleVariant(** `lpszSrc` **,** `vtSrc` **)** Copies a string into the new object."},{"content":"The parameter <ph id=\"ph1\">`vtSrc`</ph> must be <ph id=\"ph2\">`VT_BSTR`</ph> (UNICODE) or <ph id=\"ph3\">`VT_BSTRT`</ph> (ANSI).","pos":[8233,8304],"source":" The parameter `vtSrc` must be `VT_BSTR` (UNICODE) or `VT_BSTRT` (ANSI)."},{"pos":[8312,8403],"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`strSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a string into the new object, <bpt id=\"p3\">**</bpt>VT_BSTR<ept id=\"p3\">**</ept> (UNICODE).","source":"**COleVariant(** `strSrc` **)** Copies a string into the new object, **VT_BSTR** (UNICODE)."},{"pos":[8411,8495],"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies an 8-bit integer into the new object, <ph id=\"ph2\">`VT_UI1`</ph>.","source":"**COleVariant(** `nSrc` **)** Copies an 8-bit integer into the new object, `VT_UI1`."},{"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nSrc`</ph> <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept> <ph id=\"ph2\">`vtSrc`</ph> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> Copies a 16-bit integer (or Boolean value) into the new object.","pos":[8503,8610],"source":"**COleVariant(** `nSrc` **,** `vtSrc` **)** Copies a 16-bit integer (or Boolean value) into the new object."},{"content":"The parameter <ph id=\"ph1\">`vtSrc`</ph> must be <ph id=\"ph2\">`VT_I2`</ph> or <ph id=\"ph3\">`VT_BOOL`</ph>.","pos":[8611,8662],"source":" The parameter `vtSrc` must be `VT_I2` or `VT_BOOL`."},{"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lSrc`</ph> <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept> <ph id=\"ph2\">`vtSrc`</ph> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> Copies a 32-bit integer (or <ph id=\"ph3\">`SCODE`</ph> value) into the new object.","pos":[8670,8777],"source":"**COleVariant(** `lSrc` **,** `vtSrc` **)** Copies a 32-bit integer (or `SCODE` value) into the new object."},{"content":"The parameter <ph id=\"ph1\">`vtSrc`</ph> must be <ph id=\"ph2\">`VT_I4`</ph>, <ph id=\"ph3\">`VT_ERROR`</ph>, or <ph id=\"ph4\">`VT_BOOL`</ph>.","pos":[8778,8842],"source":" The parameter `vtSrc` must be `VT_I4`, `VT_ERROR`, or `VT_BOOL`."},{"pos":[8850,8943],"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`curSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a <bpt id=\"p3\">**</bpt>COleCurrency<ept id=\"p3\">**</ept> value into the new object, <ph id=\"ph2\">`VT_CY`</ph>.","source":"**COleVariant(** `curSrc` **)** Copies a **COleCurrency** value into the new object, `VT_CY`."},{"pos":[8951,9049],"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`fltSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a 32-bit floating-point value into the new object, <ph id=\"ph2\">`VT_R4`</ph>.","source":"**COleVariant(** `fltSrc` **)** Copies a 32-bit floating-point value into the new object, `VT_R4`."},{"pos":[9057,9155],"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`dblSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a 64-bit floating-point value into the new object, <ph id=\"ph2\">`VT_R8`</ph>.","source":"**COleVariant(** `dblSrc` **)** Copies a 64-bit floating-point value into the new object, `VT_R8`."},{"pos":[9163,9257],"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`timeSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a <ph id=\"ph2\">`COleDateTime`</ph> value into the new object, <ph id=\"ph3\">`VT_DATE`</ph>.","source":"**COleVariant(** `timeSrc` **)** Copies a `COleDateTime` value into the new object, `VT_DATE`."},{"pos":[9265,9358],"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`arrSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a <ph id=\"ph2\">`CByteArray`</ph> object into the new object, <ph id=\"ph3\">`VT_EMPTY`</ph>.","source":"**COleVariant(** `arrSrc` **)** Copies a `CByteArray` object into the new object, `VT_EMPTY`."},{"pos":[9366,9459],"content":"<bpt id=\"p1\">**</bpt>COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lbSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a <ph id=\"ph2\">`CLongBinary`</ph> object into the new object, <ph id=\"ph3\">`VT_EMPTY`</ph>.","source":"**COleVariant(** `lbSrc` **)** Copies a `CLongBinary` object into the new object, `VT_EMPTY`."},{"pos":[9466,9653],"content":"For more information on <ph id=\"ph1\">`SCODE`</ph>, see <bpt id=\"p1\">[</bpt>Structure of COM Error Codes<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms690088)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information on `SCODE`, see [Structure of COM Error Codes](http://msdn.microsoft.com/library/windows/desktop/ms690088) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[9703,9726],"content":"COleVariant::ChangeType"},{"pos":[9730,9794],"content":"Converts the type of variant value in this <ph id=\"ph1\">`COleVariant`</ph> object.","source":"Converts the type of variant value in this `COleVariant` object."},{"content":"Parameters","pos":[9887,9897]},{"content":"The <bpt id=\"p1\">[</bpt>VARTYPE<ept id=\"p1\">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> for this <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[9914,10028],"source":" The [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) for this `COleVariant` object."},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> object to be converted.","pos":[10045,10165],"source":" A pointer to the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) object to be converted."},{"content":"If this value is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, this <ph id=\"ph1\">`COleVariant`</ph> object is used as the source for the conversion.","pos":[10166,10260],"source":" If this value is **NULL**, this `COleVariant` object is used as the source for the conversion."},{"content":"Remarks","pos":[10270,10277]},{"pos":[10281,10634],"content":"For more information, see the <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept>, <bpt id=\"p2\">[</bpt>VARTYPE<ept id=\"p2\">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept>, and <bpt id=\"p3\">[</bpt>VariantChangeType<ept id=\"p3\">](http://msdn.microsoft.com/en-us/48a51e32-95d7-4eeb-8106-f5043ffa2fd1)</ept> entries in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118), [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4), and [VariantChangeType](http://msdn.microsoft.com/en-us/48a51e32-95d7-4eeb-8106-f5043ffa2fd1) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[10679,10697],"content":"COleVariant::Clear"},{"pos":[10701,10724],"content":"Clears the <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","source":"Clears the **VARIANT**."},{"content":"Remarks","pos":[10763,10770]},{"content":"This sets the <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept> for this object to <ph id=\"ph1\">`VT_EMPTY`</ph>.","pos":[10774,10830],"source":"This sets the **VARTYPE** for this object to `VT_EMPTY`."},{"content":"The <ph id=\"ph1\">`COleVariant`</ph> destructor calls this function.","pos":[10831,10880],"source":" The `COleVariant` destructor calls this function."},{"pos":[10887,11025],"content":"For more information, see the <ph id=\"ph1\">`VARIANT`</ph>, <ph id=\"ph2\">`VARTYPE`</ph>, and <ph id=\"ph3\">`VariantClear`</ph> entries in the <ph id=\"ph4\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the `VARIANT`, `VARTYPE`, and `VariantClear` entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[11071,11090],"content":"COleVariant::Detach"},{"pos":[11094,11236],"content":"Detaches the underlying <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> object from this <ph id=\"ph1\">`COleVariant`</ph> object.","source":"Detaches the underlying [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) object from this `COleVariant` object."},{"content":"Remarks","pos":[11279,11286]},{"pos":[11290,11437],"content":"This function sets the <bpt id=\"p1\">[</bpt>VARTYPE<ept id=\"p1\">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> for this <ph id=\"ph1\">`COleVariant`</ph> object to <ph id=\"ph2\">`VT_EMPTY`</ph>.","source":"This function sets the [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) for this `COleVariant` object to `VT_EMPTY`."},{"pos":[11445,11580],"content":"[!NOTE]\n After calling **Detach**, it is the caller's responsibility to call **VariantClear** on the resulting **VARIANT** structure.","leadings":["","> "],"nodes":[{"content":"After calling <bpt id=\"p1\">**</bpt>Detach<ept id=\"p1\">**</ept>, it is the caller's responsibility to call <bpt id=\"p2\">**</bpt>VariantClear<ept id=\"p2\">**</ept> on the resulting <bpt id=\"p3\">**</bpt>VARIANT<ept id=\"p3\">**</ept> structure.","pos":[9,133],"source":" After calling **Detach**, it is the caller's responsibility to call **VariantClear** on the resulting **VARIANT** structure."}]},{"pos":[11587,11935],"content":"For more information, see the <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept>, <bpt id=\"p2\">[</bpt>VARTYPE<ept id=\"p2\">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept>, and <bpt id=\"p3\">[</bpt>VariantClear<ept id=\"p3\">](http://msdn.microsoft.com/en-us/28741d81-8404-4f85-95d3-5c209ec13835)</ept> entries in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118), [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4), and [VariantClear](http://msdn.microsoft.com/en-us/28741d81-8404-4f85-95d3-5c209ec13835) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[12003,12044],"content":"COleVariant::GetByteArrayFromVariantArray"},{"content":"Retrieves a byte array from an existing variant array","pos":[12048,12101]},{"content":"Parameters","pos":[12180,12190]},{"content":"A reference to an existing <bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept> object.","pos":[12205,12293],"source":" A reference to an existing [CByteArray](../../mfc/reference/cbytearray-class.md) object."},{"pos":[12352,12384],"content":"COleVariant::operator LPCVARIANT"},{"pos":[12388,12493],"content":"This casting operator returns a <ph id=\"ph1\">`VARIANT`</ph> structure whose value is copied from this <ph id=\"ph2\">`COleVariant`</ph> object.","source":"This casting operator returns a `VARIANT` structure whose value is copied from this `COleVariant` object."},{"content":"Remarks","pos":[12550,12557]},{"pos":[12615,12646],"content":"COleVariant::operator LPVARIANT"},{"pos":[12650,12752],"content":"Call this casting operator to access the underlying <ph id=\"ph1\">`VARIANT`</ph> structure for this <ph id=\"ph2\">`COleVariant`</ph> object.","source":"Call this casting operator to access the underlying `VARIANT` structure for this `COleVariant` object."},{"content":"Remarks","pos":[12800,12807]},{"pos":[12815,12978],"content":"[!CAUTION]\n Changing the value in the **VARIANT** structure accessed by the pointer returned by this function will change the value of this `COleVariant` object.","leadings":["","> "],"nodes":[{"content":"Changing the value in the <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> structure accessed by the pointer returned by this function will change the value of this <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[12,161],"source":" Changing the value in the **VARIANT** structure accessed by the pointer returned by this function will change the value of this `COleVariant` object."}]},{"pos":[13030,13053],"content":"COleVariant::operator ="},{"pos":[13057,13148],"content":"These overloaded assignment operators copy the source value into this <ph id=\"ph1\">`COleVariant`</ph> object.","source":"These overloaded assignment operators copy the source value into this `COleVariant` object."},{"content":"Remarks","pos":[13917,13924]},{"content":"A brief description of each operator follows:","pos":[13928,13973]},{"pos":[13981,14083],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>varSrc<ept id=\"p2\">*</ept><bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> Copies an existing <bpt id=\"p4\">**</bpt>VARIANT<ept id=\"p4\">**</ept> or <ph id=\"ph1\">`COleVariant`</ph> object into this object.","source":"**operator =(** *varSrc***)** Copies an existing **VARIANT** or `COleVariant` object into this object."},{"pos":[14091,14186],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`pSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies the <bpt id=\"p3\">**</bpt>VARIANT<ept id=\"p3\">**</ept> object accessed by <ph id=\"ph2\">`pSrc`</ph> into this object.","source":"**operator =(** `pSrc` **)** Copies the **VARIANT** object accessed by `pSrc` into this object."},{"pos":[14194,14313],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lpszSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a null-terminated string into this object and sets the <bpt id=\"p3\">**</bpt>VARTYPE<ept id=\"p3\">**</ept> to <ph id=\"ph2\">`VT_BSTR`</ph>.","source":"**operator =(** `lpszSrc` **)** Copies a null-terminated string into this object and sets the **VARTYPE** to `VT_BSTR`."},{"pos":[14321,14483],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`strSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a <bpt id=\"p3\">[</bpt>CString<ept id=\"p3\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object into this object and sets the <bpt id=\"p4\">**</bpt>VARTYPE<ept id=\"p4\">**</ept> to <ph id=\"ph2\">`VT_BSTR`</ph>.","source":"**operator =(** `strSrc` **)** Copies a [CString](../../atl-mfc-shared/reference/cstringt-class.md) object into this object and sets the **VARTYPE** to `VT_BSTR`."},{"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies an 8- or 16-bit integer value into this object.","pos":[14491,14574],"source":"**operator =(** `nSrc` **)** Copies an 8- or 16-bit integer value into this object."},{"content":"If <ph id=\"ph1\">`nSrc`</ph> is an 8-bit value, the <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept> of this is set to <ph id=\"ph2\">`VT_UI1`</ph>.","pos":[14575,14647],"source":" If `nSrc` is an 8-bit value, the **VARTYPE** of this is set to `VT_UI1`."},{"content":"If <ph id=\"ph1\">`nSrc`</ph> is a 16-bit value and the <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept> of this is <ph id=\"ph2\">`VT_BOOL`</ph>, it is kept; otherwise, it is set to <ph id=\"ph3\">`VT_I2`</ph>.","pos":[14648,14762],"source":" If `nSrc` is a 16-bit value and the **VARTYPE** of this is `VT_BOOL`, it is kept; otherwise, it is set to `VT_I2`."},{"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a 32-bit integer value into this object.","pos":[14770,14846],"source":"**operator =(** `lSrc` **)** Copies a 32-bit integer value into this object."},{"content":"If the <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept> of this is <ph id=\"ph1\">`VT_ERROR`</ph>, it is kept; otherwise, it is set to <ph id=\"ph2\">`VT_I4`</ph>.","pos":[14847,14933],"source":" If the **VARTYPE** of this is `VT_ERROR`, it is kept; otherwise, it is set to `VT_I4`."},{"pos":[14941,15099],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`curSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a <bpt id=\"p3\">[</bpt>COleCurrency<ept id=\"p3\">](../../mfc/reference/colecurrency-class.md)</ept> object into this object and sets the <bpt id=\"p4\">**</bpt>VARTYPE<ept id=\"p4\">**</ept> to <ph id=\"ph2\">`VT_CY`</ph>.","source":"**operator =(** `curSrc` **)** Copies a [COleCurrency](../../mfc/reference/colecurrency-class.md) object into this object and sets the **VARTYPE** to `VT_CY`."},{"pos":[15107,15228],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`fltSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a 32-bit floating-point value into this object and sets the <bpt id=\"p3\">**</bpt>VARTYPE<ept id=\"p3\">**</ept> to <ph id=\"ph2\">`VT_R4`</ph>.","source":"**operator =(** `fltSrc` **)** Copies a 32-bit floating-point value into this object and sets the **VARTYPE** to `VT_R4`."},{"pos":[15236,15357],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`dblSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a 64-bit floating-point value into this object and sets the <bpt id=\"p3\">**</bpt>VARTYPE<ept id=\"p3\">**</ept> to <ph id=\"ph2\">`VT_R8`</ph>.","source":"**operator =(** `dblSrc` **)** Copies a 64-bit floating-point value into this object and sets the **VARTYPE** to `VT_R8`."},{"pos":[15365,15537],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`dateSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a <bpt id=\"p3\">[</bpt>COleDateTime<ept id=\"p3\">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept> object into this object and sets the <bpt id=\"p4\">**</bpt>VARTYPE<ept id=\"p4\">**</ept> to <ph id=\"ph2\">`VT_DATE`</ph>.","source":"**operator =(** `dateSrc` **)** Copies a [COleDateTime](../../atl-mfc-shared/reference/coledatetime-class.md) object into this object and sets the **VARTYPE** to `VT_DATE`."},{"pos":[15545,15677],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`arrSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a <bpt id=\"p3\">[</bpt>CByteArray<ept id=\"p3\">](../../mfc/reference/cbytearray-class.md)</ept> object into this <ph id=\"ph2\">`COleVariant`</ph> object.","source":"**operator =(** `arrSrc` **)** Copies a [CByteArray](../../mfc/reference/cbytearray-class.md) object into this `COleVariant` object."},{"pos":[15685,15818],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lbSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies a <bpt id=\"p3\">[</bpt>CLongBinary<ept id=\"p3\">](../../mfc/reference/clongbinary-class.md)</ept> object into this <ph id=\"ph2\">`COleVariant`</ph> object.","source":"**operator =(** `lbSrc` **)** Copies a [CLongBinary](../../mfc/reference/clongbinary-class.md) object into this `COleVariant` object."},{"pos":[15825,16086],"content":"For more information, see the <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> and <bpt id=\"p2\">[</bpt>VARTYPE<ept id=\"p2\">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> entries in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) and [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[16141,16165],"content":"COleVariant::operator =="},{"content":"This operator compares two variant values and returns nonzero if they are equal; otherwise 0.","pos":[16169,16262]},{"pos":[16437,16468],"content":"COleVariant::operator <ph id=\"ph1\">&amp;lt;&amp;lt;</ph>,","source":"  COleVariant::operator &lt;&lt;, "},{"pos":[16481,16595],"content":"Outputs a <ph id=\"ph1\">`COleVariant`</ph> value to <ph id=\"ph2\">`CArchive`</ph> or <bpt id=\"p1\">**</bpt>CdumpContext<ept id=\"p1\">**</ept> and inputs a <ph id=\"ph3\">`COleVariant`</ph> object from <ph id=\"ph4\">`CArchive`</ph>.","source":"Outputs a `COleVariant` value to `CArchive` or **CdumpContext** and inputs a `COleVariant` object from `CArchive`."},{"content":"Remarks","pos":[16877,16884]},{"content":"The <ph id=\"ph1\">`COleVariant`</ph> insertion ( <bpt id=\"p1\">**</bpt><ph id=\"ph2\">&lt;\\&lt;</ph><ept id=\"p1\">**</ept>) operator supports diagnostic dumping and storing to an archive.","pos":[16888,16990],"source":"The `COleVariant` insertion ( **<\\<**) operator supports diagnostic dumping and storing to an archive."},{"content":"The extraction ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&gt;&gt;</ph><ept id=\"p1\">**</ept>) operator supports loading from an archive.","pos":[16991,17058],"source":" The extraction ( **>>**) operator supports loading from an archive."},{"pos":[17107,17129],"content":"COleVariant::SetString"},{"content":"Sets the string to a particular type.","pos":[17133,17170]},{"content":"Parameters","pos":[17254,17264]},{"content":"A null-terminated string to be copied into the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[17281,17353],"source":" A null-terminated string to be copied into the new `COleVariant` object."},{"content":"VtSrc","pos":[17361,17366]},{"content":"The <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept> for the new <ph id=\"ph1\">`COleVariant`</ph> object.","pos":[17371,17420],"source":" The **VARTYPE** for the new `COleVariant` object."},{"content":"Remarks","pos":[17430,17437]},{"content":"The parameter <ph id=\"ph1\">`vtSrc`</ph> must be <ph id=\"ph2\">`VT_BSTR`</ph> (UNICODE) or <ph id=\"ph3\">`VT_BSTRT`</ph> (ANSI).","pos":[17441,17512],"source":"The parameter `vtSrc` must be `VT_BSTR` (UNICODE) or `VT_BSTRT` (ANSI)."},{"content":"is typically used to set strings to ANSI, since the default for the <bpt id=\"p1\">[</bpt>COleVariant::COleVariant<ept id=\"p1\">](#colevariant__colevariant)</ept> constructor with a string or string pointer parameter and no <bpt id=\"p2\">**</bpt>VARTYPE<ept id=\"p2\">**</ept> is UNICODE.","pos":[17525,17731],"source":" is typically used to set strings to ANSI, since the default for the [COleVariant::COleVariant](#colevariant__colevariant) constructor with a string or string pointer parameter and no **VARTYPE** is UNICODE."},{"content":"A DAO recordset in a non-UNICODE build expects strings to be ANSI.","pos":[17738,17804]},{"content":"Thus, for DAO functions that use <ph id=\"ph1\">`COleVariant`</ph> objects, if you are not creating a UNICODE recordset, you must use the <bpt id=\"p1\">**</bpt>COleVariant::COleVariant(<ept id=\"p1\">**</ept> <ph id=\"ph2\">`lpszSrc`</ph><bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept> <ph id=\"ph3\">`vtSrc`</ph> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> form of constructor with <ph id=\"ph4\">`vtSrc`</ph> set to <ph id=\"ph5\">`VT_BSTRT`</ph> (ANSI) or use <ph id=\"ph6\">`SetString`</ph> with <ph id=\"ph7\">`vtSrc`</ph> set to <ph id=\"ph8\">`VT_BSTRT`</ph> to make ANSI strings.","pos":[17805,18111],"source":" Thus, for DAO functions that use `COleVariant` objects, if you are not creating a UNICODE recordset, you must use the **COleVariant::COleVariant(** `lpszSrc`**,** `vtSrc` **)** form of constructor with `vtSrc` set to `VT_BSTRT` (ANSI) or use `SetString` with `vtSrc` set to `VT_BSTRT` to make ANSI strings."},{"content":"For example, the <ph id=\"ph1\">`CDaoRecordset`</ph> functions <bpt id=\"p1\">[</bpt>CDaoRecordset::Seek<ept id=\"p1\">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__seek)</ept> and <bpt id=\"p2\">[</bpt>CDaoRecordset::SetFieldValue<ept id=\"p2\">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__setfieldvalue)</ept> use <ph id=\"ph2\">`COleVariant`</ph> objects as parameters.","pos":[18112,18389],"source":" For example, the `CDaoRecordset` functions [CDaoRecordset::Seek](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__seek) and [CDaoRecordset::SetFieldValue](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__setfieldvalue) use `COleVariant` objects as parameters."},{"content":"These objects must be ANSI if the DAO recordset is not UNICODE.","pos":[18390,18453]},{"content":"See Also","pos":[18462,18470]},{"content":"Hierarchy Chart","pos":[18475,18490]}],"content":"---\ntitle: \"COleVariant Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"COleVariant\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Automation, parameter types\"\n  - \"COleVariant class\"\n  - \"VARIANT data type\"\nms.assetid: e1b5cd4a-b066-4b9b-b48b-6215ed52d998\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# COleVariant Class\nEncapsulates the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) data type.  \n  \n## Syntax  \n  \n```  \nclass COleVariant : public tagVARIANT  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleVariant::COleVariant](#colevariant__colevariant)|Constructs a `COleVariant` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleVariant::Attach](#colevariant__attach)|Attaches a **VARIANT** to a `COleVariant`.|  \n|[COleVariant::ChangeType](#colevariant__changetype)|Changes the variant type of this `COleVariant` object.|  \n|[COleVariant::Clear](#colevariant__clear)|Clears this `COleVariant` object.|  \n|[COleVariant::Detach](#colevariant__detach)|Detaches a **VARIANT** from a `COleVariant` and returns the **VARIANT**.|  \n|[COleVariant::GetByteArrayFromVariantArray](#colevariant__getbytearrayfromvariantarray)|Retrieves a byte array from an existing variant array.|  \n|[COleVariant::SetString](#colevariant__setstring)|Sets the string to a particular type, typically ANSI.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleVariant::operator LPCVARIANT](#colevariant__operator_lpcvariant)|Converts a `COleVariant` value into an `LPCVARIANT`.|  \n|[COleVariant::operator LPVARIANT](#colevariant__operator_lpvariant)|Converts a `COleVariant` object into an `LPVARIANT`.|  \n|[COleVariant::operator =](#colevariant__operator__eq)|Copies a `COleVariant` value.|  \n|[COleVariant::operator ==](#colevariant__operator__eq_eq)|Compares two `COleVariant` values.|  \n|[COleVariant::operator &lt;&lt;, &gt;&gt;](#colevariant__operator__lt__lt___gt__gt_)|Outputs a `COleVariant` value to `CArchive` or `CDumpContext` and inputs a `COleVariant` object from `CArchive`.|  \n  \n## Remarks  \n This data type is used in OLE automation. Specifically, the [DISPPARAMS](http://msdn.microsoft.com/en-us/a16e5a21-766e-4287-b039-13429aa78f8b) structure contains a pointer to an array of **VARIANT** structures. A **DISPPARAMS** structure is used to pass parameters to [IDispatch::Invoke](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d).  \n  \n> [!NOTE]\n>  This class is derived from the **VARIANT** structure. This means you can pass a `COleVariant` in a parameter that calls for a **VARIANT** and that the data members of the **VARIANT** structure are accessible data members of `COleVariant`.  \n  \n The two related MFC classes [COleCurrency](../../mfc/reference/colecurrency-class.md) and [COleDateTime](../../atl-mfc-shared/reference/coledatetime-class.md) encapsulate the variant data types **CURRENCY** ( `VT_CY`) and **DATE** ( `VT_DATE`). The `COleVariant` class is used extensively in the DAO classes; see these classes for typical usage of this class, for example [CDaoQueryDef](../../mfc/reference/cdaoquerydef-class.md) and [CDaoRecordset](../../mfc/reference/cdaorecordset-class.md).  \n  \n For more information, see the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118), [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e), [DISPPARAMS](http://msdn.microsoft.com/en-us/a16e5a21-766e-4287-b039-13429aa78f8b), and [IDispatch::Invoke](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n For more information on the `COleVariant` class and its use in OLE automation, see \"Passing Parameters in OLE Automation\" in the article [Automation](../../mfc/automation.md).  \n  \n## Inheritance Hierarchy  \n `tagVARIANT`  \n  \n `COleVariant`  \n  \n## Requirements  \n **Header:** afxdisp.h  \n  \n##  <a name=\"colevariant__attach\"></a>  COleVariant::Attach  \n Call this function to attach the given [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) object to the current `COleVariant` object.  \n  \n```  \nvoid Attach(VARIANT& varSrc);\n```  \n  \n### Parameters  \n *varSrc*  \n An existing **VARIANT** object to be attached to the current `COleVariant` object.  \n  \n### Remarks  \n This function sets the [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) of *varSrc* to `VT_EMPTY`.  \n  \n For more information, see the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) and [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"colevariant__colevariant\"></a>  COleVariant::COleVariant  \n Constructs a `COleVariant` object.  \n  \n```  \nCOleVariant();\n\n \nCOleVariant(\n    const VARIANT& varSrc);\n\n \nCOleVariant(\n    const COleVariant& varSrc);\n\n \nCOleVariant(\n    LPCVARIANT pSrc);\n\n \nCOleVariant(\n    LPCTSTR lpszSrc);\n\n \nCOleVariant(\n    LPCTSTR lpszSrc,  \n    VARTYPE vtSrc);\n\n \nCOleVariant(\n    CString& strSrc);\n\n \nCOleVariant(\n    BYTE nSrc);\n\n \nCOleVariant(\n    short nSrc,  \n    VARTYPE vtSrc = VT_I2);\n\n \nCOleVariant(\n    long lSrc,  \n    VARTYPE vtSrc = VT_I4);\n\n \nCOleVariant(\n    const COleCurrency& curSrc);\n\n \nCOleVariant(\n    float fltSrc);\n\n \nCOleVariant(\n    double dblSrc);\n\n \nCOleVariant(\n    const COleDateTime& timeSrc);\n\n \nCOleVariant(\n    const CByteArray& arrSrc);\n\n \nCOleVariant(\n    const CLongBinary& lbSrc);\n\n \nCOleVariant(\n    LPCITEMIDLIST pidl);\n```  \n  \n### Parameters  \n *varSrc*  \n An existing `COleVariant` or **VARIANT** object to be copied into the new `COleVariant` object.  \n  \n `pSrc`  \n A pointer to a **VARIANT** object that will be copied into the new `COleVariant` object.  \n  \n `lpszSrc`  \n A null-terminated string to be copied into the new `COleVariant` object.  \n  \n `vtSrc`  \n The `VARTYPE` for the new `COleVariant` object.  \n  \n `strSrc`  \n A [CString](../../atl-mfc-shared/reference/cstringt-class.md) object to be copied into the new `COleVariant` object.  \n  \n `nSrc`, `lSrc`  \n A numerical value to be copied into the new `COleVariant` object.  \n  \n `vtSrc`  \n The `VARTYPE` for the new `COleVariant` object.  \n  \n `curSrc`  \n A [COleCurrency](../../mfc/reference/colecurrency-class.md) object to be copied into the new `COleVariant` object.  \n  \n `fltSrc`, `dblSrc`  \n A numerical value to be copied into the new `COleVariant` object.  \n  \n `timeSrc`  \n A [COleDateTime](../../atl-mfc-shared/reference/coledatetime-class.md) object to be copied into the new `COleVariant` object.  \n  \n `arrSrc`  \n A [CByteArray](../../mfc/reference/cbytearray-class.md) object to be copied into the new `COleVariant` object.  \n  \n `lbSrc`  \n A [CLongBinary](../../mfc/reference/clongbinary-class.md) object to be copied into the new `COleVariant` object.  \n  \n `pidl`  \n A pointer to a [ITEMIDLIST](http://msdn.microsoft.com/library/windows/desktop/bb773321) structure to be copied into the new `COleVariant` object.  \n  \n### Remarks  \n All these constructors create new `COleVariant` objects initialized to the specified value. A brief description of each of these constructors follows.  \n  \n- **COleVariant( )** Creates an empty `COleVariant` object, `VT_EMPTY`.  \n  \n- **COleVariant(** *varSrc* **)** Copies an existing **VARIANT** or `COleVariant` object. The variant type is retained.  \n  \n- **COleVariant(** `pSrc` **)** Copies an existing **VARIANT** or `COleVariant` object. The variant type is retained.  \n  \n- **COleVariant(** `lpszSrc` **)** Copies a string into the new object, `VT_BSTR` (UNICODE).  \n  \n- **COleVariant(** `lpszSrc` **,** `vtSrc` **)** Copies a string into the new object. The parameter `vtSrc` must be `VT_BSTR` (UNICODE) or `VT_BSTRT` (ANSI).  \n  \n- **COleVariant(** `strSrc` **)** Copies a string into the new object, **VT_BSTR** (UNICODE).  \n  \n- **COleVariant(** `nSrc` **)** Copies an 8-bit integer into the new object, `VT_UI1`.  \n  \n- **COleVariant(** `nSrc` **,** `vtSrc` **)** Copies a 16-bit integer (or Boolean value) into the new object. The parameter `vtSrc` must be `VT_I2` or `VT_BOOL`.  \n  \n- **COleVariant(** `lSrc` **,** `vtSrc` **)** Copies a 32-bit integer (or `SCODE` value) into the new object. The parameter `vtSrc` must be `VT_I4`, `VT_ERROR`, or `VT_BOOL`.  \n  \n- **COleVariant(** `curSrc` **)** Copies a **COleCurrency** value into the new object, `VT_CY`.  \n  \n- **COleVariant(** `fltSrc` **)** Copies a 32-bit floating-point value into the new object, `VT_R4`.  \n  \n- **COleVariant(** `dblSrc` **)** Copies a 64-bit floating-point value into the new object, `VT_R8`.  \n  \n- **COleVariant(** `timeSrc` **)** Copies a `COleDateTime` value into the new object, `VT_DATE`.  \n  \n- **COleVariant(** `arrSrc` **)** Copies a `CByteArray` object into the new object, `VT_EMPTY`.  \n  \n- **COleVariant(** `lbSrc` **)** Copies a `CLongBinary` object into the new object, `VT_EMPTY`.  \n  \n For more information on `SCODE`, see [Structure of COM Error Codes](http://msdn.microsoft.com/library/windows/desktop/ms690088) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"colevariant__changetype\"></a>  COleVariant::ChangeType  \n Converts the type of variant value in this `COleVariant` object.  \n  \n```  \nvoid ChangeType(\n    VARTYPE vartype,  \n    LPVARIANT pSrc = NULL);\n```  \n  \n### Parameters  \n `vartype`  \n The [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) for this `COleVariant` object.  \n  \n `pSrc`  \n A pointer to the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) object to be converted. If this value is **NULL**, this `COleVariant` object is used as the source for the conversion.  \n  \n### Remarks  \n For more information, see the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118), [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4), and [VariantChangeType](http://msdn.microsoft.com/en-us/48a51e32-95d7-4eeb-8106-f5043ffa2fd1) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"colevariant__clear\"></a>  COleVariant::Clear  \n Clears the **VARIANT**.  \n  \n```  \nvoid Clear();\n```  \n  \n### Remarks  \n This sets the **VARTYPE** for this object to `VT_EMPTY`. The `COleVariant` destructor calls this function.  \n  \n For more information, see the `VARIANT`, `VARTYPE`, and `VariantClear` entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"colevariant__detach\"></a>  COleVariant::Detach  \n Detaches the underlying [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) object from this `COleVariant` object.  \n  \n```  \nVARIANT Detach();\n```  \n  \n### Remarks  \n This function sets the [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) for this `COleVariant` object to `VT_EMPTY`.  \n  \n> [!NOTE]\n>  After calling **Detach**, it is the caller's responsibility to call **VariantClear** on the resulting **VARIANT** structure.  \n  \n For more information, see the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118), [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4), and [VariantClear](http://msdn.microsoft.com/en-us/28741d81-8404-4f85-95d3-5c209ec13835) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"colevariant__getbytearrayfromvariantarray\"></a>  COleVariant::GetByteArrayFromVariantArray  \n Retrieves a byte array from an existing variant array  \n  \n```  \nvoid GetByteArrayFromVariantArray(CByteArray& bytes);\n```  \n  \n### Parameters  \n `bytes`  \n A reference to an existing [CByteArray](../../mfc/reference/cbytearray-class.md) object.  \n  \n##  <a name=\"colevariant__operator_lpcvariant\"></a>  COleVariant::operator LPCVARIANT  \n This casting operator returns a `VARIANT` structure whose value is copied from this `COleVariant` object.  \n  \n```  \noperator LPCVARIANT() const;\n\n \n```  \n  \n### Remarks  \n  \n##  <a name=\"colevariant__operator_lpvariant\"></a>  COleVariant::operator LPVARIANT  \n Call this casting operator to access the underlying `VARIANT` structure for this `COleVariant` object.  \n  \n```  \noperator LPVARIANT();\n```   \n  \n### Remarks  \n  \n> [!CAUTION]\n>  Changing the value in the **VARIANT** structure accessed by the pointer returned by this function will change the value of this `COleVariant` object.  \n  \n##  <a name=\"colevariant__operator__eq\"></a>  COleVariant::operator =  \n These overloaded assignment operators copy the source value into this `COleVariant` object.  \n  \n```  \nconst COleVariant& operator=(const VARIANT& varSrc);\n\n \nconst COleVariant& operator=(LPCVARIANT pSrc);\n\n \nconst COleVariant& operator=(const COleVariant& varSrc);\n\n \nconst COleVariant& operator=(const LPCTSTR lpszSrc);\n\n \nconst COleVariant& operator=(const CString& strSrc);\n\n \nconst COleVariant& operator=(BYTE nSrc);\n\n \nconst COleVariant& operator=(short nSrc);\n\n \nconst COleVariant& operator=(long lSrc);\n\n \nconst COleVariant& operator=(const COleCurrency& curSrc);\n\n \nconst COleVariant& operator=(float fltSrc);\n\n \nconst COleVariant& operator=(double dblSrc);\n\n \nconst COleVariant& operator=(const COleDateTime& dateSrc);\n\n \nconst COleVariant& operator=(const CByteArray& arrSrc);\n\n \nconst COleVariant& operator=(const CLongBinary& lbSrc);\n```  \n  \n### Remarks  \n A brief description of each operator follows:  \n  \n- **operator =(** *varSrc***)** Copies an existing **VARIANT** or `COleVariant` object into this object.  \n  \n- **operator =(** `pSrc` **)** Copies the **VARIANT** object accessed by `pSrc` into this object.  \n  \n- **operator =(** `lpszSrc` **)** Copies a null-terminated string into this object and sets the **VARTYPE** to `VT_BSTR`.  \n  \n- **operator =(** `strSrc` **)** Copies a [CString](../../atl-mfc-shared/reference/cstringt-class.md) object into this object and sets the **VARTYPE** to `VT_BSTR`.  \n  \n- **operator =(** `nSrc` **)** Copies an 8- or 16-bit integer value into this object. If `nSrc` is an 8-bit value, the **VARTYPE** of this is set to `VT_UI1`. If `nSrc` is a 16-bit value and the **VARTYPE** of this is `VT_BOOL`, it is kept; otherwise, it is set to `VT_I2`.  \n  \n- **operator =(** `lSrc` **)** Copies a 32-bit integer value into this object. If the **VARTYPE** of this is `VT_ERROR`, it is kept; otherwise, it is set to `VT_I4`.  \n  \n- **operator =(** `curSrc` **)** Copies a [COleCurrency](../../mfc/reference/colecurrency-class.md) object into this object and sets the **VARTYPE** to `VT_CY`.  \n  \n- **operator =(** `fltSrc` **)** Copies a 32-bit floating-point value into this object and sets the **VARTYPE** to `VT_R4`.  \n  \n- **operator =(** `dblSrc` **)** Copies a 64-bit floating-point value into this object and sets the **VARTYPE** to `VT_R8`.  \n  \n- **operator =(** `dateSrc` **)** Copies a [COleDateTime](../../atl-mfc-shared/reference/coledatetime-class.md) object into this object and sets the **VARTYPE** to `VT_DATE`.  \n  \n- **operator =(** `arrSrc` **)** Copies a [CByteArray](../../mfc/reference/cbytearray-class.md) object into this `COleVariant` object.  \n  \n- **operator =(** `lbSrc` **)** Copies a [CLongBinary](../../mfc/reference/clongbinary-class.md) object into this `COleVariant` object.  \n  \n For more information, see the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) and [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"colevariant__operator__eq_eq\"></a>  COleVariant::operator ==  \n This operator compares two variant values and returns nonzero if they are equal; otherwise 0.  \n  \n```  \nBOOL operator==(const VARIANT& varSrc) const;\n\n \n \nBOOL operator==(LPCVARIANT pSrc) const;\n\n \n```  \n  \n##  <a name=\"colevariant__operator__lt__lt___gt__gt_\"></a>  COleVariant::operator &lt;&lt;, &gt;&gt;  \n Outputs a `COleVariant` value to `CArchive` or **CdumpContext** and inputs a `COleVariant` object from `CArchive`.  \n  \n```  \nfriend CDumpContext& AFXAPI operator<<(\n    CDumpContext& dc,  \n    OleVariant varSrc);\n\n \nfriend CArchive& AFXAPI operator<<(\n    CArchive& ar,  \n    COleVariant varSrc);\n\n \nfriend CArchive& AFXAPI operator>>(\n    CArchive& ar,  \n    COleVariant& varSrc);\n```  \n  \n### Remarks  \n The `COleVariant` insertion ( **<\\<**) operator supports diagnostic dumping and storing to an archive. The extraction ( **>>**) operator supports loading from an archive.  \n  \n##  <a name=\"colevariant__setstring\"></a>  COleVariant::SetString  \n Sets the string to a particular type.  \n  \n```  \nvoid SetString(\n    LPCTSTR lpszSrc,  \n    VARTYPE vtSrc);\n```  \n  \n### Parameters  \n `lpszSrc`  \n A null-terminated string to be copied into the new `COleVariant` object.  \n  \n *VtSrc*  \n The **VARTYPE** for the new `COleVariant` object.  \n  \n### Remarks  \n The parameter `vtSrc` must be `VT_BSTR` (UNICODE) or `VT_BSTRT` (ANSI). `SetString` is typically used to set strings to ANSI, since the default for the [COleVariant::COleVariant](#colevariant__colevariant) constructor with a string or string pointer parameter and no **VARTYPE** is UNICODE.  \n  \n A DAO recordset in a non-UNICODE build expects strings to be ANSI. Thus, for DAO functions that use `COleVariant` objects, if you are not creating a UNICODE recordset, you must use the **COleVariant::COleVariant(** `lpszSrc`**,** `vtSrc` **)** form of constructor with `vtSrc` set to `VT_BSTRT` (ANSI) or use `SetString` with `vtSrc` set to `VT_BSTRT` to make ANSI strings. For example, the `CDaoRecordset` functions [CDaoRecordset::Seek](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__seek) and [CDaoRecordset::SetFieldValue](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__setfieldvalue) use `COleVariant` objects as parameters. These objects must be ANSI if the DAO recordset is not UNICODE.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}