{"nodes":[{"pos":[12,35],"content":"_CIpow | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CIpow | Microsoft Docs","pos":[0,23]}]},{"content":"_CIpow","pos":[842,848]},{"pos":[849,925],"content":"Calculates <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> raised to the <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> power based on the top values in the stack.","source":"Calculates *x* raised to the *y* power based on the top values in the stack."},{"content":"Syntax","pos":[934,940]},{"content":"Remarks","pos":[989,996]},{"content":"This version of the <ph id=\"ph1\">`pow`</ph> function has a specialized calling convention that the compiler understands.","pos":[1000,1102],"source":"This version of the `pow` function has a specialized calling convention that the compiler understands."},{"content":"It speeds up the execution because it prevents copies from being generated and helps with register allocation.","pos":[1103,1213]},{"content":"The resulting value is pushed onto the top of the stack.","pos":[1220,1276]},{"content":"Requirements","pos":[1285,1297]},{"pos":[1301,1318],"content":"<bpt id=\"p1\">**</bpt>Platform:<ept id=\"p1\">**</ept> x86","source":"**Platform:** x86"},{"content":"See Also","pos":[1327,1335]},{"content":"Alphabetical Function Reference","pos":[1340,1371]},{"content":"pow, powf, powl","pos":[1449,1464]}],"content":"---\ntitle: \"_CIpow | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CIpow\"\napilocation: \n  - \"msvcr100.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcrt.dll\"\n  - \"msvcr90.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"CIpow\"\n  - \"_CIpow\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CIpow intrinsic\"\n  - \"_CIpow intrinsic\"\nms.assetid: 477aaf0c-ac58-4252-89dd-9f3e35d47536\ncaps.latest.revision: 5\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _CIpow\nCalculates *x* raised to the *y* power based on the top values in the stack.  \n  \n## Syntax  \n  \n```  \nvoid __cdecl _CIpow();  \n```  \n  \n## Remarks  \n This version of the `pow` function has a specialized calling convention that the compiler understands. It speeds up the execution because it prevents copies from being generated and helps with register allocation.  \n  \n The resulting value is pushed onto the top of the stack.  \n  \n## Requirements  \n **Platform:** x86  \n  \n## See Also  \n [Alphabetical Function Reference](../c-runtime-library/reference/crt-alphabetical-function-reference.md)   \n [pow, powf, powl](../c-runtime-library/reference/pow-powf-powl.md)"}