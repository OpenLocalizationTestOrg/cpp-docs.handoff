{"nodes":[{"pos":[12,52],"content":"&lt;stack&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>stack<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,40],"source":"&lt;stack&gt; operators | Microsoft Docs"}]},{"pos":[255,278],"content":"&lt;stack&gt; operators","linkify":"&lt;stack&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>stack<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,23],"source":"&lt;stack&gt; operators"}]},{"pos":[297,324],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[325,354],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt_)</ept>","source":"[operator&gt;](#operator_gt_)"},{"pos":[355,388],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_gt__eq)</ept>","source":"[operator&gt;=](#operator_gt__eq)"},{"pos":[393,422],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_)</ept>","source":"[operator&lt;](#operator_lt_)"},{"pos":[423,456],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_lt__eq)</ept>","source":"[operator&lt;=](#operator_lt__eq)"},{"pos":[457,486],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[497,536],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"content":"Tests if the stack object on the left side of the operator is not equal to stack object on the right side.","pos":[540,646]},{"pos":[764,774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[789,817],"source":" An object of type **stack**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[836,864],"source":" An object of type **stack**."},{"pos":[874,886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[890,978],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the stacks or stacks are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if stacks or stacks are equal.","source":"**true** if the stacks or stacks are not equal; **false** if stacks or stacks are equal."},{"pos":[988,995],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between stacks objects is based on a pairwise comparison of their elements.","pos":[999,1089]},{"content":"Two stacks are equal if they have the same number of elements and their respective elements have the same values.","pos":[1090,1203]},{"content":"Otherwise, they are unequal.","pos":[1204,1232]},{"pos":[1242,1249],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2168,2209],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_\"></a>  operator&lt;","source":"<a name=\"operator_lt_\"></a>  operator&lt;"},{"content":"Tests if the stack object on the left side of the operator is less than the stack object on the right side.","pos":[2213,2320]},{"pos":[2436,2446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[2461,2489],"source":" An object of type **stack**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[2508,2536],"source":" An object of type **stack**."},{"pos":[2546,2558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2562,2712],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the stack on the left side of the operator is less than and not equal to the stack on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the stack on the left side of the operator is less than and not equal to the stack on the right side of the operator; otherwise **false**."},{"pos":[2722,2729],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between stack objects is based on a pairwise comparison of their elements.","pos":[2733,2822]},{"content":"The less-than relationship between two stack objects is based on a comparison of the first pair of unequal elements.","pos":[2823,2939]},{"pos":[2949,2956],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4369,4414],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_lt__eq\"></a>  operator&lt;=","source":"<a name=\"operator_lt__eq\"></a>  operator&lt;="},{"content":"Tests if the stack object on the left side of the operator is less than or equal to the stack object on the right side.","pos":[4418,4537]},{"pos":[4654,4664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[4679,4707],"source":" An object of type **stack**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[4726,4754],"source":" An object of type **stack**."},{"pos":[4764,4776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4780,4925],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the stack on the left side of the operator is less than or equal to the stack on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the stack on the left side of the operator is less than or equal to the stack on the right side of the operator; otherwise **false**."},{"pos":[4935,4942],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between stack objects is based on a pairwise comparison of their elements.","pos":[4946,5035]},{"content":"The less than or equal to relationship between two stack objects is based on a comparison of the first pair of unequal elements.","pos":[5036,5164]},{"pos":[5174,5181],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6118,6159],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"content":"Tests if the stack object on the left side of the operator is equal to stack object on the right side.","pos":[6163,6265]},{"pos":[6382,6392],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[6407,6435],"source":" An object of type **stack**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[6454,6482],"source":" An object of type **stack**."},{"pos":[6492,6504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6508,6596],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the stacks or stacks are equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if stacks or stacks are not equal.","source":"**true** if the stacks or stacks are equal; **false** if stacks or stacks are not equal."},{"pos":[6606,6613],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between stack objects is based on a pairwise comparison of their elements.","pos":[6617,6706]},{"content":"Two stacks are equal if they have the same number of elements and their respective elements have the same values.","pos":[6707,6820]},{"content":"Otherwise, they are unequal.","pos":[6821,6849]},{"pos":[6859,6866],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7784,7825],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt_\"></a>  operator&gt;","source":"<a name=\"operator_gt_\"></a>  operator&gt;"},{"content":"Tests if the stack object on the left side of the operator is greater than the stack object on the right side.","pos":[7829,7939]},{"pos":[8055,8065],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[8080,8108],"source":" An object of type **stack**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[8127,8155],"source":" An object of type **stack**."},{"pos":[8165,8177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8181,8334],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the stack on the left side of the operator is greater than and not equal to the stack on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the stack on the left side of the operator is greater than and not equal to the stack on the right side of the operator; otherwise **false**."},{"pos":[8344,8351],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between stack objects is based on a pairwise comparison of their elements.","pos":[8355,8444]},{"content":"The greater-than relationship between two stack objects is based on a comparison of the first pair of unequal elements.","pos":[8445,8564]},{"pos":[8574,8581],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9539,9584],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_gt__eq\"></a>  operator&gt;=","source":"<a name=\"operator_gt__eq\"></a>  operator&gt;="},{"content":"Tests if the stack object on the left side of the operator is greater than or equal to the stack object on the right side.","pos":[9588,9710]},{"pos":[9827,9837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[9852,9880],"source":" An object of type **stack**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>stack<ept id=\"p1\">**</ept>.","pos":[9899,9927],"source":" An object of type **stack**."},{"pos":[9937,9949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9953,10095],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the stack on the left side of the operator is strictly less than the stack on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the stack on the left side of the operator is strictly less than the stack on the right side of the operator; otherwise **false**."},{"pos":[10105,10112],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between stack objects is based on a pairwise comparison of their elements.","pos":[10116,10205]},{"content":"The greater than or equal to relationship between two stack objects is based on a comparison of the first pair of unequal elements.","pos":[10206,10337]},{"pos":[10347,10354],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11309,11317],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[11321,11361],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>stack&gt;<ept id=\"p1\">](../standard-library/stack.md)</ept>","source":"[\\<stack>](../standard-library/stack.md)"}],"content":"---\ntitle: \"&lt;stack&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 9c1fc282-2f61-4727-9e80-84ea5d4934a2\ncaps.latest.revision: 13\nmanager: \"ghogen\"\n---\n# &lt;stack&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests if the stack object on the left side of the operator is not equal to stack object on the right side.  \n  \n```  \nbool operator!=(const stack <Type, Container>& left, const stack <Type, Container>& right,);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **stack**.  \n  \n ` right`  \n An object of type **stack**.  \n  \n### Return Value  \n **true** if the stacks or stacks are not equal; **false** if stacks or stacks are equal.  \n  \n### Remarks  \n The comparison between stacks objects is based on a pairwise comparison of their elements. Two stacks are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// stack_op_me.cpp  \n// compile with: /EHsc  \n#include <stack>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Declares stacks with vector base containers  \n   stack <int, vector<int> > s1, s2, s3;  \n  \n   // The following would have cause an error because stacks with  \n   // different base containers are not equality comparable  \n   // stack <int, list<int> >  s3;  \n  \n   s1.push( 1 );  \n   s2.push( 2 );  \n   s3.push( 1 );  \n  \n   if ( s1 != s2 )  \n      cout << \"The stacks s1 and s2 are not equal.\" << endl;  \n   else  \n      cout << \"The stacks s1 and s2 are equal.\" << endl;  \n  \n   if ( s1 != s3 )  \n      cout << \"The stacks s1 and s3 are not equal.\" << endl;  \n   else  \n      cout << \"The stacks s1 and s3 are equal.\" << endl;  \n}  \n```  \n  \n```Output  \nThe stacks s1 and s2 are not equal.  \nThe stacks s1 and s3 are equal.  \n```  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Tests if the stack object on the left side of the operator is less than the stack object on the right side.  \n  \n```  \nbool operator<(const stack <Type, Container>& left, const stack <Type, Container>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **stack**.  \n  \n ` right`  \n An object of type **stack**.  \n  \n### Return Value  \n **true** if the stack on the left side of the operator is less than and not equal to the stack on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between stack objects is based on a pairwise comparison of their elements. The less-than relationship between two stack objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// stack_op_lt.cpp  \n// compile with: /EHsc  \n#include <stack>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Declares stacks with list base container  \n   stack <int, list<int> > s1, s2, s3;  \n  \n   s1.push( 2 );  \n   s1.push( 4 );  \n   s1.push( 6 );  \n   s1.push( 8 );  \n   s2.push( 5 );  \n   s2.push( 10 );  \n   s3.push( 2 );  \n   s3.push( 4 );  \n   s3.push( 6 );  \n   s3.push( 8 );  \n  \n   if ( s1 >= s2 )  \n      cout << \"The stack s1 is greater than or equal to \"  \n           << \"the stack s2.\" << endl;  \n   else  \n      cout << \"The stack s1 is less than \"  \n           << \"the stack s2.\" << endl;  \n  \n   if ( s1>= s3 )  \n      cout << \"The stack s1 is greater than or equal to \"  \n           << \"the stack s3.\" << endl;  \n   else  \n      cout << \"The stack s1 is less than \"  \n           << \"the stack s3.\" << endl;  \n  \n   // to print out the stack s1 ( by unstacking the elements):  \n   stack <int>::size_type i_size_s1 = s1.size( );  \n   cout << \"The stack s1 from the top down is: ( \";  \n   unsigned int i;  \n   for ( i = 1 ; i <= i_size_s1 ; i++ )  \n   {  \n      cout << s1.top( ) << \" \";  \n      s1.pop( );  \n   }  \n   cout << \").\" << endl;  \n}  \n```  \n  \n```Output  \nThe stack s1 is less than the stack s2.  \nThe stack s1 is greater than or equal to the stack s3.  \nThe stack s1 from the top down is: ( 8 6 4 2 ).  \n```  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Tests if the stack object on the left side of the operator is less than or equal to the stack object on the right side.  \n  \n```  \nbool operator<=(const stack <Type, Container>& left, const stack <Type, Container>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **stack**.  \n  \n ` right`  \n An object of type **stack**.  \n  \n### Return Value  \n **true** if the stack on the left side of the operator is less than or equal to the stack on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between stack objects is based on a pairwise comparison of their elements. The less than or equal to relationship between two stack objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// stack_op_le.cpp  \n// compile with: /EHsc  \n#include <stack>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Declares stacks with default deque base container  \n   stack <int> s1, s2, s3;  \n  \n   s1.push( 5 );  \n   s1.push( 10 );  \n   s2.push( 1 );  \n   s2.push( 2 );  \n   s3.push( 5 );  \n   s3.push( 10 );  \n  \n   if ( s1 <= s2 )  \n      cout << \"The stack s1 is less than or equal to \"  \n           << \"the stack s2.\" << endl;  \n   else  \n      cout << \"The stack s1 is greater than \"  \n           << \"the stack s2.\" << endl;  \n  \n   if ( s1 <= s3 )  \n      cout << \"The stack s1 is less than or equal to \"  \n           << \"the stack s3.\" << endl;  \n   else  \n      cout << \"The stack s1 is greater than \"  \n           << \"the stack s3.\" << endl;  \n}  \n```  \n  \n```Output  \nThe stack s1 is greater than the stack s2.  \nThe stack s1 is less than or equal to the stack s3.  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests if the stack object on the left side of the operator is equal to stack object on the right side.  \n  \n```  \nbool operator==(const stack <Type, Container>& left, const stack <Type, Container>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **stack**.  \n  \n ` right`  \n An object of type **stack**.  \n  \n### Return Value  \n **true** if the stacks or stacks are equal; **false** if stacks or stacks are not equal.  \n  \n### Remarks  \n The comparison between stack objects is based on a pairwise comparison of their elements. Two stacks are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// stack_op_eq.cpp  \n// compile with: /EHsc  \n#include <stack>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Declares stacks with vector base containers  \n   stack <int, vector<int> > s1, s2, s3;  \n  \n   // The following would have cause an error because stacks with  \n   // different base containers are not equality comparable  \n   // stack <int, list<int> > s3;  \n  \n   s1.push( 1 );  \n   s2.push( 2 );  \n   s3.push( 1 );  \n  \n   if ( s1 == s2 )  \n      cout << \"The stacks s1 and s2 are equal.\" << endl;  \n   else  \n      cout << \"The stacks s1 and s2 are not equal.\" << endl;  \n  \n   if ( s1 == s3 )  \n      cout << \"The stacks s1 and s3 are equal.\" << endl;  \n   else  \n      cout << \"The stacks s1 and s3 are not equal.\" << endl;  \n}  \n```  \n  \n```Output  \nThe stacks s1 and s2 are not equal.  \nThe stacks s1 and s3 are equal.  \n```  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Tests if the stack object on the left side of the operator is greater than the stack object on the right side.  \n  \n```  \nbool operator>(const stack <Type, Container>& left, const stack <Type, Container>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **stack**.  \n  \n ` right`  \n An object of type **stack**.  \n  \n### Return Value  \n **true** if the stack on the left side of the operator is greater than and not equal to the stack on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between stack objects is based on a pairwise comparison of their elements. The greater-than relationship between two stack objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// stack_op_gt.cpp  \n// compile with: /EHsc  \n#include <stack>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Declares stacks with list base container  \n   stack <int, list<int> > s1, s2, s3;  \n  \n   s1.push( 1 );  \n   s1.push( 2 );  \n   s1.push( 3 );  \n   s2.push( 5 );  \n   s2.push( 10 );  \n   s3.push( 1 );  \n   s3.push( 2 );  \n  \n   if ( s1 > s2 )  \n      cout << \"The stack s1 is greater than \"  \n           << \"the stack s2.\" << endl;  \n   else  \n      cout << \"The stack s1 is not greater than \"  \n           << \"the stack s2.\" << endl;  \n  \n   if ( s1> s3 )  \n      cout << \"The stack s1 is greater than \"  \n           << \"the stack s3.\" << endl;  \n   else  \n      cout << \"The stack s1 is not greater than \"  \n           << \"the stack s3.\" << endl;  \n}  \n```  \n  \n```Output  \nThe stack s1 is not greater than the stack s2.  \nThe stack s1 is greater than the stack s3.  \n```  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Tests if the stack object on the left side of the operator is greater than or equal to the stack object on the right side.  \n  \n```  \nbool operator>=(const stack <Type, Container>& left, const stack <Type, Container>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **stack**.  \n  \n ` right`  \n An object of type **stack**.  \n  \n### Return Value  \n **true** if the stack on the left side of the operator is strictly less than the stack on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between stack objects is based on a pairwise comparison of their elements. The greater than or equal to relationship between two stack objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// stack_op_ge.cpp  \n// compile with: /EHsc  \n#include <stack>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Declares stacks with list base container  \n   stack <int, list<int> > s1, s2, s3;  \n  \n   s1.push( 1 );  \n   s1.push( 2 );  \n   s2.push( 5 );  \n   s2.push( 10 );  \n   s3.push( 1 );  \n   s3.push( 2 );  \n  \n   if ( s1 >= s2 )  \n      cout << \"The stack s1 is greater than or equal to \"  \n           << \"the stack s2.\" << endl;  \n   else  \n      cout << \"The stack s1 is less than \"  \n           << \"the stack s2.\" << endl;  \n  \n   if ( s1>= s3 )  \n      cout << \"The stack s1 is greater than or equal to \"  \n           << \"the stack s3.\" << endl;  \n   else  \n      cout << \"The stack s1 is less than \"  \n           << \"the stack s3.\" << endl;  \n}  \n```  \n  \n```Output  \nThe stack s1 is less than the stack s2.  \nThe stack s1 is greater than or equal to the stack s3.  \n```  \n  \n## See Also  \n [\\<stack>](../standard-library/stack.md)\n\n"}