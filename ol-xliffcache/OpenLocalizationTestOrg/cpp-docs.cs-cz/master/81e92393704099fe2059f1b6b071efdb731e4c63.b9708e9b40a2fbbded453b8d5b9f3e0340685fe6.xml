{"nodes":[{"pos":[12,53],"content":"CAtlServiceModuleT Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAtlServiceModuleT Class | Microsoft Docs","pos":[0,41]}]},{"content":"CAtlServiceModuleT Class","pos":[687,711]},{"content":"This class implements a service.","pos":[712,744]},{"pos":[752,862],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[871,877]},{"content":"Parameters","pos":[1010,1020]},{"content":"Your class derived from <ph id=\"ph1\">`CAtlServiceModuleT`</ph>.","pos":[1031,1076],"source":" Your class derived from `CAtlServiceModuleT`."},{"content":"nServiceNameID","pos":[1084,1098]},{"content":"The resource identifier of the service.","pos":[1103,1142]},{"content":"Members","pos":[1151,1158]},{"content":"Public Constructors","pos":[1168,1187]},{"content":"Name","pos":[1194,1198]},{"content":"Description","pos":[1199,1210]},{"content":"CAtlServiceModuleT::CAtlServiceModuleT","pos":[1249,1287]},{"content":"The constructor.","pos":[1330,1346]},{"content":"Public Methods","pos":[1357,1371]},{"content":"Name","pos":[1378,1382]},{"content":"Description","pos":[1383,1394]},{"content":"CAtlServiceModuleT::Handler","pos":[1433,1460]},{"content":"The handler routine for the service.","pos":[1492,1528]},{"content":"CAtlServiceModuleT::InitializeSecurity","pos":[1534,1572]},{"content":"Provides the default security settings for the service.","pos":[1615,1670]},{"content":"CAtlServiceModuleT::Install","pos":[1676,1703]},{"content":"Installs and creates the service.","pos":[1735,1768]},{"content":"CAtlServiceModuleT::IsInstalled","pos":[1774,1805]},{"content":"Confirms that the service has been installed.","pos":[1841,1886]},{"content":"CAtlServiceModuleT::LogEvent","pos":[1892,1920]},{"content":"Writes to the event log.","pos":[1953,1977]},{"content":"CAtlServiceModuleT::OnContinue","pos":[1983,2013]},{"content":"Override this method to continue the service.","pos":[2048,2093]},{"content":"CAtlServiceModuleT::OnInterrogate","pos":[2099,2132]},{"content":"Override this method to interrogate the service.","pos":[2170,2218]},{"content":"CAtlServiceModuleT::OnPause","pos":[2224,2251]},{"content":"Override this method to pause the service.","pos":[2283,2325]},{"content":"CAtlServiceModuleT::OnShutdown","pos":[2331,2361]},{"content":"Override this method to shut down the service","pos":[2396,2441]},{"content":"CAtlServiceModuleT::OnStop","pos":[2447,2473]},{"content":"Override this method to stop the service","pos":[2504,2544]},{"content":"CAtlServiceModuleT::OnUnknownRequest","pos":[2550,2586]},{"content":"Override this method to handle unknown requests to the service","pos":[2627,2689]},{"content":"CAtlServiceModuleT::ParseCommandLine","pos":[2695,2731]},{"content":"Parses the command line and performs registration if necessary.","pos":[2772,2835]},{"content":"CAtlServiceModuleT::PreMessageLoop","pos":[2841,2875]},{"content":"This method is called immediately before entering the message loop.","pos":[2914,2981]},{"content":"CAtlServiceModuleT::RegisterAppId","pos":[2987,3020]},{"content":"Registers the service in the registry.","pos":[3058,3096]},{"content":"CAtlServiceModuleT::Run","pos":[3102,3125]},{"content":"Runs the service.","pos":[3153,3170]},{"content":"CAtlServiceModuleT::ServiceMain","pos":[3176,3207]},{"content":"The method called by the Service Control Manager.","pos":[3243,3292]},{"content":"CAtlServiceModuleT::SetServiceStatus","pos":[3298,3334]},{"content":"Updates the service status.","pos":[3375,3402]},{"content":"CAtlServiceModuleT::Start","pos":[3408,3433]},{"pos":[3463,3527],"content":"Called by <ph id=\"ph1\">`CAtlServiceModuleT::WinMain`</ph> when the service starts.","source":"Called by `CAtlServiceModuleT::WinMain` when the service starts."},{"content":"CAtlServiceModuleT::Uninstall","pos":[3533,3562]},{"content":"Stops and removes the service.","pos":[3596,3626]},{"content":"CAtlServiceModuleT::Unlock","pos":[3632,3658]},{"content":"Decrements the service's lock count.","pos":[3689,3725]},{"content":"CAtlServiceModuleT::UnregisterAppId","pos":[3731,3766]},{"content":"Removes the service from the registry.","pos":[3806,3844]},{"content":"CAtlServiceModuleT::WinMain","pos":[3850,3877]},{"content":"This method implements the code required to run the service.","pos":[3909,3969]},{"content":"Public Data Members","pos":[3980,3999]},{"content":"Name","pos":[4006,4010]},{"content":"Description","pos":[4011,4022]},{"content":"CAtlServiceModuleT::m_bService","pos":[4061,4091]},{"content":"Flag indicating the program is running as a service.","pos":[4126,4178]},{"content":"CAtlServiceModuleT::m_dwThreadID","pos":[4184,4216]},{"content":"Member variable storing the thread identifier.","pos":[4253,4299]},{"content":"CAtlServiceModuleT::m_hServiceStatus","pos":[4305,4341]},{"content":"Member variable storing a handle to the status information structure for the current service.","pos":[4382,4475]},{"content":"CAtlServiceModuleT::m_status","pos":[4481,4509]},{"content":"Member variable storing the status information structure for the current service.","pos":[4542,4623]},{"content":"CAtlServiceModuleT::m_szServiceName","pos":[4629,4664]},{"content":"The name of the service being registered.","pos":[4704,4745]},{"content":"Remarks","pos":[4755,4762]},{"content":", derived from <bpt id=\"p1\">[</bpt>CAtlExeModuleT<ept id=\"p1\">](../../atl/reference/catlexemodulet-class.md)</ept>, implements a ATL Service module.","pos":[4786,4896],"source":", derived from [CAtlExeModuleT](../../atl/reference/catlexemodulet-class.md), implements a ATL Service module."},{"content":"provides methods for command-line processing, installation, registering, and removal.","pos":[4918,5003]},{"content":"If extra functionality is required, these and other methods can be overridden.","pos":[5004,5082]},{"content":"This class replaces the obsolete <bpt id=\"p1\">[</bpt>CComModule Class<ept id=\"p1\">](../../atl/reference/ccommodule-class.md)</ept> used in earlier versions of ATL.","pos":[5089,5214],"source":"This class replaces the obsolete [CComModule Class](../../atl/reference/ccommodule-class.md) used in earlier versions of ATL."},{"content":"See <bpt id=\"p1\">[</bpt>ATL Module Classes<ept id=\"p1\">](../../atl/atl-module-classes.md)</ept> for more details.","pos":[5215,5290],"source":" See [ATL Module Classes](../../atl/atl-module-classes.md) for more details."},{"content":"Inheritance Hierarchy","pos":[5299,5320]},{"content":"_ATL_MODULE","pos":[5325,5336]},{"content":"CAtlModule","pos":[5374,5384]},{"content":"CAtlModuleT","pos":[5434,5445]},{"content":"CAtlExeModuleT","pos":[5496,5510]},{"content":"Requirements","pos":[5592,5604]},{"pos":[5608,5629],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlbase.h","source":"**Header:** atlbase.h"},{"pos":[5694,5732],"content":"CAtlServiceModuleT::CAtlServiceModuleT"},{"content":"The constructor.","pos":[5736,5752]},{"content":"Remarks","pos":[5805,5812]},{"content":"Initializes the data members and sets the initial service status.","pos":[5816,5881]},{"pos":[5935,5962],"content":"CAtlServiceModuleT::Handler"},{"content":"The handler routine for the service.","pos":[5966,6002]},{"content":"Parameters","pos":[6063,6073]},{"content":"dwOpcode","pos":[6078,6086]},{"content":"A switch that defines the handler operation.","pos":[6091,6135]},{"content":"For details, see the Remarks.","pos":[6136,6165]},{"content":"Remarks","pos":[6175,6182]},{"content":"This is the code that the Service Control Manager (SCM) calls to retrieve the status of the service and issue instructions such as stop or pause.","pos":[6186,6331]},{"content":"The SCM passes an operation code, shown below, to <ph id=\"ph1\">`Handler`</ph> to indicate what the service should do.","pos":[6332,6431],"source":" The SCM passes an operation code, shown below, to `Handler` to indicate what the service should do."},{"content":"Operation code","pos":[6438,6452]},{"content":"Meaning","pos":[6453,6460]},{"content":"SERVICE_CONTROL_STOP","pos":[6504,6524]},{"content":"Stops the service.","pos":[6525,6543]},{"content":"Override the method <bpt id=\"p1\">[</bpt>CAtlServiceModuleT::OnStop<ept id=\"p1\">](#catlservicemodulet__onstop)</ept> in atlbase.h to change the behavior.","pos":[6544,6658],"source":" Override the method [CAtlServiceModuleT::OnStop](#catlservicemodulet__onstop) in atlbase.h to change the behavior."},{"content":"SERVICE_CONTROL_PAUSE","pos":[6663,6684]},{"content":"User implemented.","pos":[6685,6702]},{"content":"Override the empty method <bpt id=\"p1\">[</bpt>CAtlServiceModuleT::OnPause<ept id=\"p1\">](#catlservicemodulet__onpause)</ept> in atlbase.h to pause the service.","pos":[6703,6823],"source":" Override the empty method [CAtlServiceModuleT::OnPause](#catlservicemodulet__onpause) in atlbase.h to pause the service."},{"content":"SERVICE_CONTROL_CONTINUE","pos":[6828,6852]},{"content":"User implemented.","pos":[6853,6870]},{"content":"Override the empty method <bpt id=\"p1\">[</bpt>CAtlServiceModuleT::OnContinue<ept id=\"p1\">](#catlservicemodulet__oncontinue)</ept> in atlbase.h to continue the service.","pos":[6871,7000],"source":" Override the empty method [CAtlServiceModuleT::OnContinue](#catlservicemodulet__oncontinue) in atlbase.h to continue the service."},{"content":"SERVICE_CONTROL_INTERROGATE","pos":[7005,7032]},{"content":"User implemented.","pos":[7033,7050]},{"content":"Override the empty method <bpt id=\"p1\">[</bpt>CAtlServiceModuleT::OnInterrogate<ept id=\"p1\">](#catlservicemodulet__oninterrogate)</ept> in atlbase.h to interrogate the service.","pos":[7051,7189],"source":" Override the empty method [CAtlServiceModuleT::OnInterrogate](#catlservicemodulet__oninterrogate) in atlbase.h to interrogate the service."},{"content":"SERVICE_CONTROL_SHUTDOWN","pos":[7194,7218]},{"content":"User implemented.","pos":[7219,7236]},{"content":"Override the empty method <bpt id=\"p1\">[</bpt>CAtlServiceModuleT::OnShutdown<ept id=\"p1\">](#catlservicemodulet__onshutdown)</ept> in atlbase.h to shutdown the service.","pos":[7237,7366],"source":" Override the empty method [CAtlServiceModuleT::OnShutdown](#catlservicemodulet__onshutdown) in atlbase.h to shutdown the service."},{"pos":[7374,7513],"content":"If the operation code isn't recognized, the method <bpt id=\"p1\">[</bpt>CAtlServiceModuleT::OnUnknownRequest<ept id=\"p1\">](#catlservicemodulet__onunknownrequest)</ept> is called.","source":"If the operation code isn't recognized, the method [CAtlServiceModuleT::OnUnknownRequest](#catlservicemodulet__onunknownrequest) is called."},{"content":"A default ATL-generated service only handles the stop instruction.","pos":[7520,7586]},{"content":"If the SCM passes the stop instruction, the service tells the SCM that the program is about to stop.","pos":[7587,7687]},{"content":"The service then calls <ph id=\"ph1\">`PostThreadMessage`</ph> to post a quit message to itself.","pos":[7688,7764],"source":" The service then calls `PostThreadMessage` to post a quit message to itself."},{"content":"This terminates the message loop and the service will ultimately close.","pos":[7765,7836]},{"pos":[7901,7939],"content":"CAtlServiceModuleT::InitializeSecurity"},{"content":"Provides the default security settings for the service.","pos":[7943,7998]},{"content":"Return Value","pos":[8059,8071]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[8075,8131]},{"content":"Remarks","pos":[8141,8148]},{"content":"In Visual Studio .NET 2003, this method is not implemented in the base class.","pos":[8152,8229]},{"content":"The Visual Studio project wizard includes this method in the generated code, but a compilation error will occur if a project created in an earlier version of Visual C++ is compiled using ATL 7.1.","pos":[8230,8425]},{"content":"Any class that derives from <ph id=\"ph1\">`CAtlServiceModuleT`</ph> must implement this method in the derived class.","pos":[8426,8523],"source":" Any class that derives from `CAtlServiceModuleT` must implement this method in the derived class."},{"pos":[8530,8696],"content":"Use PKT-level authentication, impersonation level of RPC_C_IMP_LEVEL_IDENTIFY and an appropriate non-null security descriptor in the call to <bpt id=\"p1\">**</bpt>CoInitializeSecurity<ept id=\"p1\">**</ept>.","source":"Use PKT-level authentication, impersonation level of RPC_C_IMP_LEVEL_IDENTIFY and an appropriate non-null security descriptor in the call to **CoInitializeSecurity**."},{"content":"For wizard-generated nonattributed service projects, this would be in","pos":[8703,8772]},{"pos":[8790,8807],"content":"NVC_ATL_Service#1"},{"content":"For attributed service projects, this would be in","pos":[8884,8933]},{"pos":[8951,8974],"content":"NVC_ATL_ServiceAttrib#1"},{"pos":[9098,9125],"content":"CAtlServiceModuleT::Install"},{"content":"Installs and creates the service.","pos":[9129,9162]},{"content":"Return Value","pos":[9209,9221]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[9225,9267]},{"content":"Remarks","pos":[9277,9284]},{"content":"Installs the service into the Service Control Manager (SCM) database and then creates the service object.","pos":[9288,9393]},{"content":"If the service could not be created, a message box is displayed and the method returns FALSE.","pos":[9394,9487]},{"pos":[9545,9576],"content":"CAtlServiceModuleT::IsInstalled"},{"content":"Confirms that the service has been installed.","pos":[9580,9625]},{"content":"Return Value","pos":[9676,9688]},{"content":"Returns TRUE if the service is installed, FALSE otherwise.","pos":[9692,9750]},{"pos":[9805,9833],"content":"CAtlServiceModuleT::LogEvent"},{"content":"Writes to the event log.","pos":[9837,9861]},{"content":"Parameters","pos":[9940,9950]},{"content":"The string to write to the event log.","pos":[9969,10006]},{"content":"...","pos":[10013,10016]},{"content":"Optional extra strings to be written to the event log.","pos":[10020,10074]},{"content":"Remarks","pos":[10084,10091]},{"content":"This method writes details out to an event log, using the function <bpt id=\"p1\">[</bpt>ReportEvent<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa363679)</ept>.","pos":[10095,10236],"source":"This method writes details out to an event log, using the function [ReportEvent](http://msdn.microsoft.com/library/windows/desktop/aa363679)."},{"content":"If no service is running, the string is sent to the console.","pos":[10237,10297]},{"pos":[10354,10384],"content":"CAtlServiceModuleT::m_bService"},{"content":"Flag indicating the program is running as a service.","pos":[10388,10440]},{"content":"Remarks","pos":[10480,10487]},{"content":"Used to distinguish a Service EXE from an Application EXE.","pos":[10491,10549]},{"pos":[10608,10640],"content":"CAtlServiceModuleT::m_dwThreadID"},{"content":"Member variable storing the thread identifier of the Service.","pos":[10644,10705]},{"content":"Remarks","pos":[10748,10755]},{"content":"This variable stores the thread identifier of the current thread.","pos":[10759,10824]},{"pos":[10887,10923],"content":"CAtlServiceModuleT::m_hServiceStatus"},{"content":"Member variable storing a handle to the status information structure for the current service.","pos":[10927,11020]},{"content":"Remarks","pos":[11083,11090]},{"pos":[11094,11222],"content":"The <bpt id=\"p1\">[</bpt>SERVICE_STATUS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms685996)</ept> structure contains information about a service.","source":"The [SERVICE_STATUS](http://msdn.microsoft.com/library/windows/desktop/ms685996) structure contains information about a service."},{"pos":[11277,11305],"content":"CAtlServiceModuleT::m_status"},{"content":"Member variable storing the status information structure for the current service.","pos":[11309,11390]},{"content":"Remarks","pos":[11438,11445]},{"pos":[11449,11577],"content":"The <bpt id=\"p1\">[</bpt>SERVICE_STATUS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms685996)</ept> structure contains information about a service.","source":"The [SERVICE_STATUS](http://msdn.microsoft.com/library/windows/desktop/ms685996) structure contains information about a service."},{"pos":[11639,11674],"content":"CAtlServiceModuleT::m_szServiceName"},{"content":"The name of the service being registered.","pos":[11678,11719]},{"content":"Remarks","pos":[11771,11778]},{"content":"A null-terminated string which stores the name of the service.","pos":[11782,11844]},{"pos":[11901,11931],"content":"CAtlServiceModuleT::OnContinue"},{"content":"Override this method to continue the service.","pos":[11935,11980]},{"pos":[12080,12113],"content":"CAtlServiceModuleT::OnInterrogate"},{"content":"Override this method to interrogate the service.","pos":[12117,12165]},{"pos":[12262,12289],"content":"CAtlServiceModuleT::OnPause"},{"content":"Override this method to pause the service.","pos":[12293,12335]},{"pos":[12429,12459],"content":"CAtlServiceModuleT::OnShutdown"},{"content":"Override this method to shut down the service.","pos":[12463,12509]},{"pos":[12602,12628],"content":"CAtlServiceModuleT::OnStop"},{"content":"Override this method to stop the service.","pos":[12632,12673]},{"pos":[12772,12808],"content":"CAtlServiceModuleT::OnUnknownRequest"},{"content":"Override this method to handle unknown requests to the service.","pos":[12812,12875]},{"content":"Parameters","pos":[12950,12960]},{"content":"dwOpcode","pos":[12969,12977]},{"content":"Reserved.","pos":[12986,12995]},{"pos":[13058,13094],"content":"CAtlServiceModuleT::ParseCommandLine"},{"content":"Parses the command line and performs registration if necessary.","pos":[13098,13161]},{"content":"Parameters","pos":[13258,13268]},{"content":"The command line.","pos":[13287,13304]},{"content":"The HRESULT corresponding to the registration (if it took place).","pos":[13326,13391]},{"content":"Return Value","pos":[13401,13413]},{"content":"Returns true on success, or false if the RGS file supplied in the command line could not be registered.","pos":[13417,13520]},{"content":"Remarks","pos":[13530,13537]},{"content":"Parses the command line and registers or unregisters the supplied RGS file if necessary.","pos":[13541,13629]},{"content":"This method calls <bpt id=\"p1\">[</bpt>CAtlExeModuleT::ParseCommandLine<ept id=\"p1\">](../../atl/reference/catlexemodulet-class.md#catlexemodulet__parsecommandline)</ept> to check for <bpt id=\"p2\">**</bpt>/RegServer<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>/UnregServer<ept id=\"p3\">**</ept>.","pos":[13630,13810],"source":" This method calls [CAtlExeModuleT::ParseCommandLine](../../atl/reference/catlexemodulet-class.md#catlexemodulet__parsecommandline) to check for **/RegServer** and **/UnregServer**."},{"content":"Adding the argument <bpt id=\"p1\">**</bpt>-/Service<ept id=\"p1\">**</ept> will register the service.","pos":[13811,13871],"source":" Adding the argument **-/Service** will register the service."},{"pos":[13932,13966],"content":"CAtlServiceModuleT::PreMessageLoop"},{"content":"This method is called immediately before entering the message loop.","pos":[13970,14037]},{"content":"Parameters","pos":[14106,14116]},{"content":"This parameter is passed to <bpt id=\"p1\">[</bpt>CAtlExeModuleT::PreMessageLoop<ept id=\"p1\">](../../atl/reference/catlexemodulet-class.md#catlexemodulet__premessageloop)</ept>.","pos":[14134,14271],"source":" This parameter is passed to [CAtlExeModuleT::PreMessageLoop](../../atl/reference/catlexemodulet-class.md#catlexemodulet__premessageloop)."},{"content":"Return Value","pos":[14281,14293]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[14297,14353]},{"content":"Remarks","pos":[14363,14370]},{"content":"Override this method to add custom initialization code for the Service.","pos":[14374,14445]},{"pos":[14505,14538],"content":"CAtlServiceModuleT::RegisterAppId"},{"content":"Registers the service in the registry.","pos":[14542,14580]},{"content":"Parameters","pos":[14664,14674]},{"content":"bService","pos":[14679,14687]},{"content":"Must be true to register as a service.","pos":[14692,14730]},{"content":"Return Value","pos":[14740,14752]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[14756,14812]},{"pos":[14862,14885],"content":"CAtlServiceModuleT::Run"},{"content":"Runs the service.","pos":[14889,14906]},{"content":"Parameters","pos":[14974,14984]},{"content":"Specifies how the window is to be shown.","pos":[15002,15042]},{"content":"This parameter can be one of the values discussed in the <bpt id=\"p1\">[</bpt>WinMain<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633559)</ept> section.","pos":[15043,15178],"source":" This parameter can be one of the values discussed in the [WinMain](http://msdn.microsoft.com/library/windows/desktop/ms633559) section."},{"content":"The default value is SW_HIDE.","pos":[15179,15208]},{"content":"Return Value","pos":[15218,15230]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[15234,15290]},{"content":"Remarks","pos":[15300,15307]},{"pos":[15311,15645],"content":"After being called, <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> calls <bpt id=\"p2\">[</bpt>CAtlServiceModuleT::PreMessageLoop<ept id=\"p2\">](#catlservicemodulet__premessageloop)</ept>, <bpt id=\"p3\">[</bpt>CAtlExeModuleT::RunMessageLoop<ept id=\"p3\">](../../atl/reference/catlexemodulet-class.md#catlexemodulet__runmessageloop)</ept>, and <bpt id=\"p4\">[</bpt>CAtlExeModuleT::PostMessageLoop<ept id=\"p4\">](../../atl/reference/catlexemodulet-class.md#catlexemodulet__postmessageloop)</ept>.","source":"After being called, **Run** calls [CAtlServiceModuleT::PreMessageLoop](#catlservicemodulet__premessageloop), [CAtlExeModuleT::RunMessageLoop](../../atl/reference/catlexemodulet-class.md#catlexemodulet__runmessageloop), and [CAtlExeModuleT::PostMessageLoop](../../atl/reference/catlexemodulet-class.md#catlexemodulet__postmessageloop)."},{"pos":[15703,15734],"content":"CAtlServiceModuleT::ServiceMain"},{"content":"This method is called by the Service Control Manager.","pos":[15738,15791]},{"content":"Parameters","pos":[15876,15886]},{"content":"dwArgc","pos":[15891,15897]},{"content":"The argc argument.","pos":[15902,15920]},{"content":"lpszArgv","pos":[15928,15936]},{"content":"The argv argument.","pos":[15941,15959]},{"content":"Remarks","pos":[15969,15976]},{"pos":[15980,16131],"content":"The Service Control Manager (SCM) calls <ph id=\"ph1\">`ServiceMain`</ph> when you open the Services application in the Control Panel, select the service, and click Start.","source":"The Service Control Manager (SCM) calls `ServiceMain` when you open the Services application in the Control Panel, select the service, and click Start."},{"content":"After the SCM calls <ph id=\"ph1\">`ServiceMain`</ph>, a service must give the SCM a handler function.","pos":[16138,16220],"source":"After the SCM calls `ServiceMain`, a service must give the SCM a handler function."},{"content":"This function lets the SCM obtain the service's status and pass specific instructions (such as pausing or stopping).","pos":[16221,16337]},{"content":"Subsequently, <bpt id=\"p1\">[</bpt>CAtlServiceModuleT::Run<ept id=\"p1\">](#catlservicemodulet__run)</ept> is called to perform the main work of the service.","pos":[16338,16454],"source":" Subsequently, [CAtlServiceModuleT::Run](#catlservicemodulet__run) is called to perform the main work of the service."},{"content":"<bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> continues to execute until the service is stopped.","pos":[16455,16513],"source":"**Run** continues to execute until the service is stopped."},{"pos":[16576,16612],"content":"CAtlServiceModuleT::SetServiceStatus"},{"content":"This method updates the service status.","pos":[16616,16655]},{"content":"Parameters","pos":[16724,16734]},{"content":"The new status.","pos":[16751,16766]},{"content":"See <bpt id=\"p1\">[</bpt>SetServiceStatus<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686241)</ept> for possible values.","pos":[16767,16870],"source":" See [SetServiceStatus](http://msdn.microsoft.com/library/windows/desktop/ms686241) for possible values."},{"content":"Remarks","pos":[16880,16887]},{"content":"Updates the Service Control Manager's status information for the service.","pos":[16891,16964]},{"content":"It is called by <bpt id=\"p1\">[</bpt>CAtlServiceModuleT::Run<ept id=\"p1\">](#catlservicemodulet__run)</ept>, <bpt id=\"p2\">[</bpt>CAtlServiceModuleT::ServiceMain<ept id=\"p2\">](#catlservicemodulet__servicemain)</ept> and other handler methods.","pos":[16965,17128],"source":" It is called by [CAtlServiceModuleT::Run](#catlservicemodulet__run), [CAtlServiceModuleT::ServiceMain](#catlservicemodulet__servicemain) and other handler methods."},{"content":"The status is also stored in the member variable <bpt id=\"p1\">[</bpt>CAtlServiceModuleT::m_status<ept id=\"p1\">](#catlservicemodulet__m_status)</ept>.","pos":[17129,17240],"source":" The status is also stored in the member variable [CAtlServiceModuleT::m_status](#catlservicemodulet__m_status)."},{"pos":[17292,17317],"content":"CAtlServiceModuleT::Start"},{"pos":[17321,17385],"content":"Called by <ph id=\"ph1\">`CAtlServiceModuleT::WinMain`</ph> when the service starts.","source":"Called by `CAtlServiceModuleT::WinMain` when the service starts."},{"content":"Parameters","pos":[17445,17455]},{"content":"Specifies how the window is to be shown.","pos":[17473,17513]},{"content":"This parameter can be one of the values discussed in the <bpt id=\"p1\">[</bpt>WinMain<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633559)</ept> section.","pos":[17514,17649],"source":" This parameter can be one of the values discussed in the [WinMain](http://msdn.microsoft.com/library/windows/desktop/ms633559) section."},{"content":"Return Value","pos":[17659,17671]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[17675,17731]},{"content":"Remarks","pos":[17741,17748]},{"content":"The <bpt id=\"p1\">[</bpt>CAtlServiceModuleT::WinMain<ept id=\"p1\">](#catlservicemodulet__winmain)</ept> method handles both registration and installation, as well as tasks involved in removing registry entries and uninstalling the module.","pos":[17752,17950],"source":"The [CAtlServiceModuleT::WinMain](#catlservicemodulet__winmain) method handles both registration and installation, as well as tasks involved in removing registry entries and uninstalling the module."},{"content":"When the service is run, <ph id=\"ph1\">`WinMain`</ph> calls <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>.","pos":[17951,18002],"source":" When the service is run, `WinMain` calls **Start**."},{"pos":[18058,18087],"content":"CAtlServiceModuleT::Uninstall"},{"content":"Stops and removes the service.","pos":[18091,18121]},{"content":"Return Value","pos":[18170,18182]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[18186,18228]},{"content":"Remarks","pos":[18238,18245]},{"content":"Stops the service from running and removes it from the Service Control Manager database.","pos":[18249,18337]},{"pos":[18390,18416],"content":"CAtlServiceModuleT::Unlock"},{"content":"Decrements the service's lock count.","pos":[18420,18456]},{"content":"Return Value","pos":[18502,18514]},{"content":"Returns the lock count, which may be useful for diagnostics and debugging.","pos":[18518,18592]},{"pos":[18654,18689],"content":"CAtlServiceModuleT::UnregisterAppId"},{"content":"Removes the service from the registry.","pos":[18693,18731]},{"content":"Return Value","pos":[18789,18801]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[18805,18861]},{"pos":[18915,18942],"content":"CAtlServiceModuleT::WinMain"},{"content":"This method implements the code required to start the service.","pos":[18946,19008]},{"content":"Parameters","pos":[19066,19076]},{"content":"Specifies how the window is to be shown.","pos":[19094,19134]},{"content":"This parameter can be one of the values discussed in the <bpt id=\"p1\">[</bpt>WinMain<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633559)</ept> section.","pos":[19135,19270],"source":" This parameter can be one of the values discussed in the [WinMain](http://msdn.microsoft.com/library/windows/desktop/ms633559) section."},{"content":"Return Value","pos":[19280,19292]},{"content":"Returns the service's return value.","pos":[19296,19331]},{"content":"Remarks","pos":[19341,19348]},{"pos":[19352,19568],"content":"This method processes the command line (with <bpt id=\"p1\">[</bpt>CAtlServiceModuleT::ParseCommandLine<ept id=\"p1\">](#catlservicemodulet__parsecommandline)</ept>) and then starts the service (using <bpt id=\"p2\">[</bpt>CAtlServiceModuleT::Start<ept id=\"p2\">](#catlservicemodulet__start)</ept>).","source":"This method processes the command line (with [CAtlServiceModuleT::ParseCommandLine](#catlservicemodulet__parsecommandline)) and then starts the service (using [CAtlServiceModuleT::Start](#catlservicemodulet__start))."},{"content":"See Also","pos":[19577,19585]},{"content":"CAtlExeModuleT Class","pos":[19590,19610]},{"content":"Class Overview","pos":[19662,19676]}],"content":"---\ntitle: \"CAtlServiceModuleT Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CAtlServiceModuleT\"\n  - \"ATL.CAtlServiceModuleT\"\n  - \"CAtlServiceModuleT\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAtlServiceModuleT class\"\nms.assetid: 8fc753ce-4a50-402b-9b4a-0a4ce5dd496c\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAtlServiceModuleT Class\nThis class implements a service.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\ntemplate <class T,  UINT nServiceNameID>  class ATL_NO_VTABLE CAtlServiceModuleT :  public CAtlExeModuleT<T>\n```  \n  \n#### Parameters  \n `T`  \n Your class derived from `CAtlServiceModuleT`.  \n  \n *nServiceNameID*  \n The resource identifier of the service.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlServiceModuleT::CAtlServiceModuleT](#catlservicemodulet__catlservicemodulet)|The constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlServiceModuleT::Handler](#catlservicemodulet__handler)|The handler routine for the service.|  \n|[CAtlServiceModuleT::InitializeSecurity](#catlservicemodulet__initializesecurity)|Provides the default security settings for the service.|  \n|[CAtlServiceModuleT::Install](#catlservicemodulet__install)|Installs and creates the service.|  \n|[CAtlServiceModuleT::IsInstalled](#catlservicemodulet__isinstalled)|Confirms that the service has been installed.|  \n|[CAtlServiceModuleT::LogEvent](#catlservicemodulet__logevent)|Writes to the event log.|  \n|[CAtlServiceModuleT::OnContinue](#catlservicemodulet__oncontinue)|Override this method to continue the service.|  \n|[CAtlServiceModuleT::OnInterrogate](#catlservicemodulet__oninterrogate)|Override this method to interrogate the service.|  \n|[CAtlServiceModuleT::OnPause](#catlservicemodulet__onpause)|Override this method to pause the service.|  \n|[CAtlServiceModuleT::OnShutdown](#catlservicemodulet__onshutdown)|Override this method to shut down the service|  \n|[CAtlServiceModuleT::OnStop](#catlservicemodulet__onstop)|Override this method to stop the service|  \n|[CAtlServiceModuleT::OnUnknownRequest](#catlservicemodulet__onunknownrequest)|Override this method to handle unknown requests to the service|  \n|[CAtlServiceModuleT::ParseCommandLine](#catlservicemodulet__parsecommandline)|Parses the command line and performs registration if necessary.|  \n|[CAtlServiceModuleT::PreMessageLoop](#catlservicemodulet__premessageloop)|This method is called immediately before entering the message loop.|  \n|[CAtlServiceModuleT::RegisterAppId](#catlservicemodulet__registerappid)|Registers the service in the registry.|  \n|[CAtlServiceModuleT::Run](#catlservicemodulet__run)|Runs the service.|  \n|[CAtlServiceModuleT::ServiceMain](#catlservicemodulet__servicemain)|The method called by the Service Control Manager.|  \n|[CAtlServiceModuleT::SetServiceStatus](#catlservicemodulet__setservicestatus)|Updates the service status.|  \n|[CAtlServiceModuleT::Start](#catlservicemodulet__start)|Called by `CAtlServiceModuleT::WinMain` when the service starts.|  \n|[CAtlServiceModuleT::Uninstall](#catlservicemodulet__uninstall)|Stops and removes the service.|  \n|[CAtlServiceModuleT::Unlock](#catlservicemodulet__unlock)|Decrements the service's lock count.|  \n|[CAtlServiceModuleT::UnregisterAppId](#catlservicemodulet__unregisterappid)|Removes the service from the registry.|  \n|[CAtlServiceModuleT::WinMain](#catlservicemodulet__winmain)|This method implements the code required to run the service.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlServiceModuleT::m_bService](#catlservicemodulet__m_bservice)|Flag indicating the program is running as a service.|  \n|[CAtlServiceModuleT::m_dwThreadID](#catlservicemodulet__m_dwthreadid)|Member variable storing the thread identifier.|  \n|[CAtlServiceModuleT::m_hServiceStatus](#catlservicemodulet__m_hservicestatus)|Member variable storing a handle to the status information structure for the current service.|  \n|[CAtlServiceModuleT::m_status](#catlservicemodulet__m_status)|Member variable storing the status information structure for the current service.|  \n|[CAtlServiceModuleT::m_szServiceName](#catlservicemodulet__m_szservicename)|The name of the service being registered.|  \n  \n## Remarks  \n `CAtlServiceModuleT`, derived from [CAtlExeModuleT](../../atl/reference/catlexemodulet-class.md), implements a ATL Service module. `CAtlServiceModuleT` provides methods for command-line processing, installation, registering, and removal. If extra functionality is required, these and other methods can be overridden.  \n  \n This class replaces the obsolete [CComModule Class](../../atl/reference/ccommodule-class.md) used in earlier versions of ATL. See [ATL Module Classes](../../atl/atl-module-classes.md) for more details.  \n  \n## Inheritance Hierarchy  \n [_ATL_MODULE](atl-typedefs.md#_atl_module)  \n  \n [CAtlModule](../../atl/reference/catlmodule-class.md)  \n  \n [CAtlModuleT](../../atl/reference/catlmodulet-class.md)  \n  \n [CAtlExeModuleT](../../atl/reference/catlexemodulet-class.md)  \n  \n `CAtlServiceModuleT`  \n  \n## Requirements  \n **Header:** atlbase.h  \n  \n##  <a name=\"catlservicemodulet__catlservicemodulet\"></a>  CAtlServiceModuleT::CAtlServiceModuleT  \n The constructor.  \n  \n```\nCAtlServiceModuleT() throw();\n```  \n  \n### Remarks  \n Initializes the data members and sets the initial service status.  \n  \n##  <a name=\"catlservicemodulet__handler\"></a>  CAtlServiceModuleT::Handler  \n The handler routine for the service.  \n  \n```\nvoid Handler(DWORD dwOpcode) throw();\n```  \n  \n### Parameters  \n *dwOpcode*  \n A switch that defines the handler operation. For details, see the Remarks.  \n  \n### Remarks  \n This is the code that the Service Control Manager (SCM) calls to retrieve the status of the service and issue instructions such as stop or pause. The SCM passes an operation code, shown below, to `Handler` to indicate what the service should do.  \n  \n|Operation code|Meaning|  \n|--------------------|-------------|  \n|SERVICE_CONTROL_STOP|Stops the service. Override the method [CAtlServiceModuleT::OnStop](#catlservicemodulet__onstop) in atlbase.h to change the behavior.|  \n|SERVICE_CONTROL_PAUSE|User implemented. Override the empty method [CAtlServiceModuleT::OnPause](#catlservicemodulet__onpause) in atlbase.h to pause the service.|  \n|SERVICE_CONTROL_CONTINUE|User implemented. Override the empty method [CAtlServiceModuleT::OnContinue](#catlservicemodulet__oncontinue) in atlbase.h to continue the service.|  \n|SERVICE_CONTROL_INTERROGATE|User implemented. Override the empty method [CAtlServiceModuleT::OnInterrogate](#catlservicemodulet__oninterrogate) in atlbase.h to interrogate the service.|  \n|SERVICE_CONTROL_SHUTDOWN|User implemented. Override the empty method [CAtlServiceModuleT::OnShutdown](#catlservicemodulet__onshutdown) in atlbase.h to shutdown the service.|  \n  \n If the operation code isn't recognized, the method [CAtlServiceModuleT::OnUnknownRequest](#catlservicemodulet__onunknownrequest) is called.  \n  \n A default ATL-generated service only handles the stop instruction. If the SCM passes the stop instruction, the service tells the SCM that the program is about to stop. The service then calls `PostThreadMessage` to post a quit message to itself. This terminates the message loop and the service will ultimately close.  \n  \n##  <a name=\"catlservicemodulet__initializesecurity\"></a>  CAtlServiceModuleT::InitializeSecurity  \n Provides the default security settings for the service.  \n  \n```\nHRESULT InitializeSecurity() throw();\n```  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n In Visual Studio .NET 2003, this method is not implemented in the base class. The Visual Studio project wizard includes this method in the generated code, but a compilation error will occur if a project created in an earlier version of Visual C++ is compiled using ATL 7.1. Any class that derives from `CAtlServiceModuleT` must implement this method in the derived class.  \n  \n Use PKT-level authentication, impersonation level of RPC_C_IMP_LEVEL_IDENTIFY and an appropriate non-null security descriptor in the call to **CoInitializeSecurity**.  \n  \n For wizard-generated nonattributed service projects, this would be in  \n  \n [!code-cpp[NVC_ATL_Service#1](../../atl/reference/codesnippet/cpp/catlservicemodulet-class_1.cpp)]  \n  \n For attributed service projects, this would be in  \n  \n [!code-cpp[NVC_ATL_ServiceAttrib#1](../../atl/reference/codesnippet/cpp/catlservicemodulet-class_2.cpp)]  \n  \n##  <a name=\"catlservicemodulet__install\"></a>  CAtlServiceModuleT::Install  \n Installs and creates the service.  \n  \n```\nBOOL Install() throw();\n```  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n Installs the service into the Service Control Manager (SCM) database and then creates the service object. If the service could not be created, a message box is displayed and the method returns FALSE.  \n  \n##  <a name=\"catlservicemodulet__isinstalled\"></a>  CAtlServiceModuleT::IsInstalled  \n Confirms that the service has been installed.  \n  \n```\nBOOL IsInstalled() throw();\n```  \n  \n### Return Value  \n Returns TRUE if the service is installed, FALSE otherwise.  \n  \n##  <a name=\"catlservicemodulet__logevent\"></a>  CAtlServiceModuleT::LogEvent  \n Writes to the event log.  \n  \n```\nvoid __cdecl LogEvent(LPCTSTR pszFormat,\n ...) throw();\n```  \n  \n### Parameters  \n `pszFormat`  \n The string to write to the event log.  \n  \n ...  \n Optional extra strings to be written to the event log.  \n  \n### Remarks  \n This method writes details out to an event log, using the function [ReportEvent](http://msdn.microsoft.com/library/windows/desktop/aa363679). If no service is running, the string is sent to the console.  \n  \n##  <a name=\"catlservicemodulet__m_bservice\"></a>  CAtlServiceModuleT::m_bService  \n Flag indicating the program is running as a service.  \n  \n```\nBOOL m_bService;\n```  \n  \n### Remarks  \n Used to distinguish a Service EXE from an Application EXE.  \n  \n##  <a name=\"catlservicemodulet__m_dwthreadid\"></a>  CAtlServiceModuleT::m_dwThreadID  \n Member variable storing the thread identifier of the Service.  \n  \n```\nDWORD m_dwThreadID;\n```  \n  \n### Remarks  \n This variable stores the thread identifier of the current thread.  \n  \n##  <a name=\"catlservicemodulet__m_hservicestatus\"></a>  CAtlServiceModuleT::m_hServiceStatus  \n Member variable storing a handle to the status information structure for the current service.  \n  \n```\nSERVICE_STATUS_HANDLE m_hServiceStatus;\n```  \n  \n### Remarks  \n The [SERVICE_STATUS](http://msdn.microsoft.com/library/windows/desktop/ms685996) structure contains information about a service.  \n  \n##  <a name=\"catlservicemodulet__m_status\"></a>  CAtlServiceModuleT::m_status  \n Member variable storing the status information structure for the current service.  \n  \n```\nSERVICE_STATUS m_status;\n```  \n  \n### Remarks  \n The [SERVICE_STATUS](http://msdn.microsoft.com/library/windows/desktop/ms685996) structure contains information about a service.  \n  \n##  <a name=\"catlservicemodulet__m_szservicename\"></a>  CAtlServiceModuleT::m_szServiceName  \n The name of the service being registered.  \n  \n```\nTCHAR [256] m_szServiceName;\n```  \n  \n### Remarks  \n A null-terminated string which stores the name of the service.  \n  \n##  <a name=\"catlservicemodulet__oncontinue\"></a>  CAtlServiceModuleT::OnContinue  \n Override this method to continue the service.  \n  \n```\nvoid OnContinue() throw();\n```  \n  \n##  <a name=\"catlservicemodulet__oninterrogate\"></a>  CAtlServiceModuleT::OnInterrogate  \n Override this method to interrogate the service.  \n  \n```\nvoid OnInterrogate() throw();\n```  \n  \n##  <a name=\"catlservicemodulet__onpause\"></a>  CAtlServiceModuleT::OnPause  \n Override this method to pause the service.  \n  \n```\nvoid OnPause() throw();\n```  \n  \n##  <a name=\"catlservicemodulet__onshutdown\"></a>  CAtlServiceModuleT::OnShutdown  \n Override this method to shut down the service.  \n  \n```\nvoid OnShutdown() throw();\n```  \n  \n##  <a name=\"catlservicemodulet__onstop\"></a>  CAtlServiceModuleT::OnStop  \n Override this method to stop the service.  \n  \n```\nvoid OnStop() throw();\n```  \n  \n##  <a name=\"catlservicemodulet__onunknownrequest\"></a>  CAtlServiceModuleT::OnUnknownRequest  \n Override this method to handle unknown requests to the service.  \n  \n```\nvoid OnUnknownRequest(DWORD /* dwOpcode*/) throw();\n```  \n  \n### Parameters  \n */\\* dwOpcode \\*/*  \n Reserved.  \n  \n##  <a name=\"catlservicemodulet__parsecommandline\"></a>  CAtlServiceModuleT::ParseCommandLine  \n Parses the command line and performs registration if necessary.  \n  \n```\nbool ParseCommandLine(LPCTSTR lpCmdLine,\n    HRESULT* pnRetCode) throw();\n```  \n  \n### Parameters  \n `lpCmdLine`  \n The command line.  \n  \n `pnRetCode`  \n The HRESULT corresponding to the registration (if it took place).  \n  \n### Return Value  \n Returns true on success, or false if the RGS file supplied in the command line could not be registered.  \n  \n### Remarks  \n Parses the command line and registers or unregisters the supplied RGS file if necessary. This method calls [CAtlExeModuleT::ParseCommandLine](../../atl/reference/catlexemodulet-class.md#catlexemodulet__parsecommandline) to check for **/RegServer** and **/UnregServer**. Adding the argument **-/Service** will register the service.  \n  \n##  <a name=\"catlservicemodulet__premessageloop\"></a>  CAtlServiceModuleT::PreMessageLoop  \n This method is called immediately before entering the message loop.  \n  \n```\nHRESULT PreMessageLoop(int nShowCmd) throw();\n```  \n  \n### Parameters  \n `nShowCmd`  \n This parameter is passed to [CAtlExeModuleT::PreMessageLoop](../../atl/reference/catlexemodulet-class.md#catlexemodulet__premessageloop).  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n Override this method to add custom initialization code for the Service.  \n  \n##  <a name=\"catlservicemodulet__registerappid\"></a>  CAtlServiceModuleT::RegisterAppId  \n Registers the service in the registry.  \n  \n```\ninline HRESULT RegisterAppId(bool bService = false) throw();\n```  \n  \n### Parameters  \n *bService*  \n Must be true to register as a service.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"catlservicemodulet__run\"></a>  CAtlServiceModuleT::Run  \n Runs the service.  \n  \n```\nHRESULT Run(int nShowCmd = SW_HIDE) throw();\n```  \n  \n### Parameters  \n `nShowCmd`  \n Specifies how the window is to be shown. This parameter can be one of the values discussed in the [WinMain](http://msdn.microsoft.com/library/windows/desktop/ms633559) section. The default value is SW_HIDE.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n After being called, **Run** calls [CAtlServiceModuleT::PreMessageLoop](#catlservicemodulet__premessageloop), [CAtlExeModuleT::RunMessageLoop](../../atl/reference/catlexemodulet-class.md#catlexemodulet__runmessageloop), and [CAtlExeModuleT::PostMessageLoop](../../atl/reference/catlexemodulet-class.md#catlexemodulet__postmessageloop).  \n  \n##  <a name=\"catlservicemodulet__servicemain\"></a>  CAtlServiceModuleT::ServiceMain  \n This method is called by the Service Control Manager.  \n  \n```\nvoid ServiceMain(DWORD dwArgc,\n    LPTSTR* lpszArgv) throw();\n```  \n  \n### Parameters  \n *dwArgc*  \n The argc argument.  \n  \n *lpszArgv*  \n The argv argument.  \n  \n### Remarks  \n The Service Control Manager (SCM) calls `ServiceMain` when you open the Services application in the Control Panel, select the service, and click Start.  \n  \n After the SCM calls `ServiceMain`, a service must give the SCM a handler function. This function lets the SCM obtain the service's status and pass specific instructions (such as pausing or stopping). Subsequently, [CAtlServiceModuleT::Run](#catlservicemodulet__run) is called to perform the main work of the service. **Run** continues to execute until the service is stopped.  \n  \n##  <a name=\"catlservicemodulet__setservicestatus\"></a>  CAtlServiceModuleT::SetServiceStatus  \n This method updates the service status.  \n  \n```\nvoid SetServiceStatus(DWORD dwState) throw();\n```  \n  \n### Parameters  \n `dwState`  \n The new status. See [SetServiceStatus](http://msdn.microsoft.com/library/windows/desktop/ms686241) for possible values.  \n  \n### Remarks  \n Updates the Service Control Manager's status information for the service. It is called by [CAtlServiceModuleT::Run](#catlservicemodulet__run), [CAtlServiceModuleT::ServiceMain](#catlservicemodulet__servicemain) and other handler methods. The status is also stored in the member variable [CAtlServiceModuleT::m_status](#catlservicemodulet__m_status).  \n  \n##  <a name=\"catlservicemodulet__start\"></a>  CAtlServiceModuleT::Start  \n Called by `CAtlServiceModuleT::WinMain` when the service starts.  \n  \n```\nHRESULT Start(int nShowCmd) throw();\n```  \n  \n### Parameters  \n `nShowCmd`  \n Specifies how the window is to be shown. This parameter can be one of the values discussed in the [WinMain](http://msdn.microsoft.com/library/windows/desktop/ms633559) section.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n The [CAtlServiceModuleT::WinMain](#catlservicemodulet__winmain) method handles both registration and installation, as well as tasks involved in removing registry entries and uninstalling the module. When the service is run, `WinMain` calls **Start**.  \n  \n##  <a name=\"catlservicemodulet__uninstall\"></a>  CAtlServiceModuleT::Uninstall  \n Stops and removes the service.  \n  \n```\nBOOL Uninstall() throw();\n```  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n Stops the service from running and removes it from the Service Control Manager database.  \n  \n##  <a name=\"catlservicemodulet__unlock\"></a>  CAtlServiceModuleT::Unlock  \n Decrements the service's lock count.  \n  \n```\nLONG Unlock() throw();\n```  \n  \n### Return Value  \n Returns the lock count, which may be useful for diagnostics and debugging.  \n  \n##  <a name=\"catlservicemodulet__unregisterappid\"></a>  CAtlServiceModuleT::UnregisterAppId  \n Removes the service from the registry.  \n  \n```\nHRESULT UnregisterAppId() throw();\n```  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"catlservicemodulet__winmain\"></a>  CAtlServiceModuleT::WinMain  \n This method implements the code required to start the service.  \n  \n```\nint WinMain(int nShowCmd) throw();\n```  \n  \n### Parameters  \n `nShowCmd`  \n Specifies how the window is to be shown. This parameter can be one of the values discussed in the [WinMain](http://msdn.microsoft.com/library/windows/desktop/ms633559) section.  \n  \n### Return Value  \n Returns the service's return value.  \n  \n### Remarks  \n This method processes the command line (with [CAtlServiceModuleT::ParseCommandLine](#catlservicemodulet__parsecommandline)) and then starts the service (using [CAtlServiceModuleT::Start](#catlservicemodulet__start)).  \n  \n## See Also  \n [CAtlExeModuleT Class](../../atl/reference/catlexemodulet-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}