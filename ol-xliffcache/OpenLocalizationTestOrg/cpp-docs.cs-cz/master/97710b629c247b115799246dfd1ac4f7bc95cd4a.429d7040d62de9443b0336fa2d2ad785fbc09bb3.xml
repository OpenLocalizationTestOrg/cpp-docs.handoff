{"nodes":[{"pos":[12,48],"content":"_CrtDumpMemoryLeaks | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CrtDumpMemoryLeaks | Microsoft Docs","pos":[0,36]}]},{"content":"_CrtDumpMemoryLeaks","pos":[1240,1259]},{"content":"Dumps all the memory blocks in the debug heap when a memory leak has occurred (debug version only).","pos":[1260,1359]},{"content":"Syntax","pos":[1368,1374]},{"content":"Return Value","pos":[1436,1448]},{"content":"returns TRUE if a memory leak is found.","pos":[1474,1513]},{"content":"Otherwise, the function returns FALSE.","pos":[1514,1552]},{"content":"Remarks","pos":[1561,1568]},{"content":"The <ph id=\"ph1\">`_CrtDumpMemoryLeaks`</ph> function determines whether a memory leak has occurred since the start of program execution.","pos":[1572,1690],"source":"The `_CrtDumpMemoryLeaks` function determines whether a memory leak has occurred since the start of program execution."},{"content":"When a leak is found, the debug header information for all the objects in the heap is dumped in a user-readable form.","pos":[1691,1808]},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id=\"ph1\">`_CrtDumpMemoryLeaks`</ph> are removed during preprocessing.","pos":[1809,1937],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtDumpMemoryLeaks` are removed during preprocessing."},{"content":"is frequently called at the end of program execution to verify that all memory allocated by the application has been freed.","pos":[1966,2089]},{"content":"The function can be called automatically at program termination by turning on the <ph id=\"ph1\">`_CRTDBG_LEAK_CHECK_DF`</ph> bit field of the <bpt id=\"p1\">[</bpt>_crtDbgFlag<ept id=\"p1\">](../../c-runtime-library/crtdbgflag.md)</ept> flag using the <bpt id=\"p2\">[</bpt>_CrtSetDbgFlag<ept id=\"p2\">](../../c-runtime-library/reference/crtsetdbgflag.md)</ept> function.","pos":[2090,2359],"source":" The function can be called automatically at program termination by turning on the `_CRTDBG_LEAK_CHECK_DF` bit field of the [_crtDbgFlag](../../c-runtime-library/crtdbgflag.md) flag using the [_CrtSetDbgFlag](../../c-runtime-library/reference/crtsetdbgflag.md) function."},{"content":"calls <bpt id=\"p1\">[</bpt>_CrtMemCheckpoint<ept id=\"p1\">](../../c-runtime-library/reference/crtmemcheckpoint.md)</ept> to obtain the current state of the heap and then scans the state for blocks that have not been freed.","pos":[2388,2570],"source":" calls [_CrtMemCheckpoint](../../c-runtime-library/reference/crtmemcheckpoint.md) to obtain the current state of the heap and then scans the state for blocks that have not been freed."},{"content":"When an unfreed block is encountered, <ph id=\"ph1\">`_CrtDumpMemoryLeaks`</ph> calls <bpt id=\"p1\">[</bpt>_CrtMemDumpAllObjectsSince<ept id=\"p1\">](../../c-runtime-library/reference/crtmemdumpallobjectssince.md)</ept> to dump information for all the objects allocated in the heap from the start of program execution.","pos":[2571,2828],"source":" When an unfreed block is encountered, `_CrtDumpMemoryLeaks` calls [_CrtMemDumpAllObjectsSince](../../c-runtime-library/reference/crtmemdumpallobjectssince.md) to dump information for all the objects allocated in the heap from the start of program execution."},{"content":"By default, internal C run-time blocks (<ph id=\"ph1\">`_CRT_BLOCK`</ph>) are not included in memory dump operations.","pos":[2835,2932],"source":"By default, internal C run-time blocks (`_CRT_BLOCK`) are not included in memory dump operations."},{"content":"The <bpt id=\"p1\">[</bpt>_CrtSetDbgFlag<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdbgflag.md)</ept> function can be used to turn on the <ph id=\"ph1\">`_CRTDBG_CHECK_CRT_DF`</ph> bit of <ph id=\"ph2\">`_crtDbgFlag`</ph> to include these blocks in the leak detection process.","pos":[2933,3140],"source":" The [_CrtSetDbgFlag](../../c-runtime-library/reference/crtsetdbgflag.md) function can be used to turn on the `_CRTDBG_CHECK_CRT_DF` bit of `_crtDbgFlag` to include these blocks in the leak detection process."},{"content":"For more information about heap state functions and the <ph id=\"ph1\">`_CrtMemState`</ph> structure, see <bpt id=\"p1\">[</bpt>Heap State Reporting Functions<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3147,3313],"source":"For more information about heap state functions and the `_CrtMemState` structure, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3314,3514],"source":" For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"Requirements","pos":[3523,3535]},{"content":"Routine","pos":[3542,3549]},{"content":"Required header","pos":[3550,3565]},{"content":"crtdbg.h&gt;","pos":[3634,3643],"source":"crtdbg.h>"},{"pos":[3651,3769],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[3778,3787]},{"pos":[3791,3886],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"content":"Example","pos":[3895,3902]},{"pos":[3906,4041],"content":"For a sample of how to use <ph id=\"ph1\">`_CrtDumpMemoryLeaks`</ph>, see <bpt id=\"p1\">[</bpt>crt_dbg1<ept id=\"p1\">](http://msdn.microsoft.com/en-us/17b4b20c-e849-48f5-8eb5-dca6509cbaf9)</ept>.","source":"For a sample of how to use `_CrtDumpMemoryLeaks`, see [crt_dbg1](http://msdn.microsoft.com/en-us/17b4b20c-e849-48f5-8eb5-dca6509cbaf9)."},{"content":".NET Framework Equivalent","pos":[4050,4075]},{"content":"Not applicable.","pos":[4079,4094]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4095,4142],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4143,4268],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[4277,4285]},{"content":"Debug Routines","pos":[4290,4304]}],"content":"---\ntitle: \"_CrtDumpMemoryLeaks | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CrtDumpMemoryLeaks\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"CRTDBG_LEAK_CHECK_DF\"\n  - \"CRTDBG_CHECK_CRT_DF\"\n  - \"_CRTDBG_LEAK_CHECK_DF\"\n  - \"CrtDumpMemoryLeaks\"\n  - \"_CrtDumpMemoryLeaks\"\n  - \"_CRTDBG_CHECK_CRT_DF\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"CrtDumpMemoryLeaks function\"\n  - \"CRTDBG_LEAK_CHECK_DF macro\"\n  - \"_CRTDBG_LEAK_CHECK_DF macro\"\n  - \"_CrtDumpMemoryLeaks function\"\n  - \"CRTDBG_CHECK_CRT_DF macro\"\n  - \"_CRTDBG_CHECK_CRT_DF macro\"\nms.assetid: 71b2eab4-7f55-44e8-a55a-bfea4f32d34c\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _CrtDumpMemoryLeaks\nDumps all the memory blocks in the debug heap when a memory leak has occurred (debug version only).  \n  \n## Syntax  \n  \n```  \n  \nint _CrtDumpMemoryLeaks( void );  \n```  \n  \n## Return Value  \n `_CrtDumpMemoryLeaks` returns TRUE if a memory leak is found. Otherwise, the function returns FALSE.  \n  \n## Remarks  \n The `_CrtDumpMemoryLeaks` function determines whether a memory leak has occurred since the start of program execution. When a leak is found, the debug header information for all the objects in the heap is dumped in a user-readable form. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtDumpMemoryLeaks` are removed during preprocessing.  \n  \n `_CrtDumpMemoryLeaks` is frequently called at the end of program execution to verify that all memory allocated by the application has been freed. The function can be called automatically at program termination by turning on the `_CRTDBG_LEAK_CHECK_DF` bit field of the [_crtDbgFlag](../../c-runtime-library/crtdbgflag.md) flag using the [_CrtSetDbgFlag](../../c-runtime-library/reference/crtsetdbgflag.md) function.  \n  \n `_CrtDumpMemoryLeaks` calls [_CrtMemCheckpoint](../../c-runtime-library/reference/crtmemcheckpoint.md) to obtain the current state of the heap and then scans the state for blocks that have not been freed. When an unfreed block is encountered, `_CrtDumpMemoryLeaks` calls [_CrtMemDumpAllObjectsSince](../../c-runtime-library/reference/crtmemdumpallobjectssince.md) to dump information for all the objects allocated in the heap from the start of program execution.  \n  \n By default, internal C run-time blocks (`_CRT_BLOCK`) are not included in memory dump operations. The [_CrtSetDbgFlag](../../c-runtime-library/reference/crtsetdbgflag.md) function can be used to turn on the `_CRTDBG_CHECK_CRT_DF` bit of `_crtDbgFlag` to include these blocks in the leak detection process.  \n  \n For more information about heap state functions and the `_CrtMemState` structure, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details). For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_CrtDumpMemoryLeaks`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## Example  \n For a sample of how to use `_CrtDumpMemoryLeaks`, see [crt_dbg1](http://msdn.microsoft.com/en-us/17b4b20c-e849-48f5-8eb5-dca6509cbaf9).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)"}