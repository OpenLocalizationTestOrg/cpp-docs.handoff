{"nodes":[{"pos":[12,49],"content":"Using exit or return | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using exit or return | Microsoft Docs","pos":[0,37]}]},{"content":"Using exit or return","pos":[665,685]},{"content":"When you call <bpt id=\"p1\">**</bpt>exit<ept id=\"p1\">**</ept> or execute a <ph id=\"ph1\">`return`</ph> statement from <bpt id=\"p2\">**</bpt>main<ept id=\"p2\">**</ept>, static objects are destroyed in the reverse order of their initialization.","pos":[686,830],"source":"When you call **exit** or execute a `return` statement from **main**, static objects are destroyed in the reverse order of their initialization."},{"content":"The following example shows how such initialization and cleanup works.","pos":[831,901]},{"content":"Example","pos":[910,917]},{"content":"In the preceding example, the static objects <ph id=\"ph1\">`sd1`</ph> and <ph id=\"ph2\">`sd2`</ph> are created and initialized before entry to <ph id=\"ph3\">`main`</ph>.","pos":[1829,1941],"source":"In the preceding example, the static objects `sd1` and `sd2` are created and initialized before entry to `main`."},{"content":"After this program terminates using the <ph id=\"ph1\">`return`</ph> statement, first <ph id=\"ph2\">`sd2`</ph> is destroyed and then <ph id=\"ph3\">`sd1`</ph>.","pos":[1942,2042],"source":" After this program terminates using the `return` statement, first `sd2` is destroyed and then `sd1`."},{"content":"The destructor for the <ph id=\"ph1\">`ShowData`</ph> class closes the files associated with these static objects.","pos":[2043,2137],"source":" The destructor for the `ShowData` class closes the files associated with these static objects."},{"pos":[2145,2287],"content":"Another way to write this code is to declare the <ph id=\"ph1\">`ShowData`</ph> objects with block scope, allowing them to be destroyed when they go out of scope:","source":"Another way to write this code is to declare the `ShowData` objects with block scope, allowing them to be destroyed when they go out of scope:"},{"content":"See Also","pos":[2464,2472]},{"content":"Additional Termination Considerations","pos":[2477,2514]}],"content":"---\ntitle: \"Using exit or return | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"Exit\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"exit function\"\n  - \"return keyword [C++], using for program termination\"\nms.assetid: b5136c5c-2505-4229-8691-2a1d6a98760b\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using exit or return\nWhen you call **exit** or execute a `return` statement from **main**, static objects are destroyed in the reverse order of their initialization. The following example shows how such initialization and cleanup works.  \n  \n## Example  \n  \n```  \n// using_exit_or_return1.cpp  \n#include <stdio.h>  \nclass ShowData {  \npublic:  \n   // Constructor opens a file.  \n   ShowData( const char *szDev ) {  \n   errno_t err;  \n      err = fopen_s(&OutputDev, szDev, \"w\" );  \n   }  \n  \n   // Destructor closes the file.  \n   ~ShowData() { fclose( OutputDev ); }  \n  \n   // Disp function shows a string on the output device.  \n   void Disp( char *szData ) {   \n      fputs( szData, OutputDev );  \n   }  \nprivate:  \n   FILE *OutputDev;  \n};  \n  \n//  Define a static object of type ShowData. The output device  \n//   selected is \"CON\" -- the standard output device.  \nShowData sd1 = \"CON\";  \n  \n//  Define another static object of type ShowData. The output  \n//   is directed to a file called \"HELLO.DAT\"  \nShowData sd2 = \"hello.dat\";  \n  \nint main() {  \n   sd1.Disp( \"hello to default device\\n\" );  \n   sd2.Disp( \"hello to file hello.dat\\n\" );  \n}  \n```  \n  \n In the preceding example, the static objects `sd1` and `sd2` are created and initialized before entry to `main`. After this program terminates using the `return` statement, first `sd2` is destroyed and then `sd1`. The destructor for the `ShowData` class closes the files associated with these static objects.   \n  \n Another way to write this code is to declare the `ShowData` objects with block scope, allowing them to be destroyed when they go out of scope:  \n  \n```  \nint main() {  \n   ShowData sd1, sd2( \"hello.dat\" );  \n  \n   sd1.Disp( \"hello to default device\\n\" );  \n   sd2.Disp( \"hello to file hello.dat\\n\" );  \n}  \n```  \n  \n## See Also  \n [Additional Termination Considerations](../cpp/additional-termination-considerations.md)"}