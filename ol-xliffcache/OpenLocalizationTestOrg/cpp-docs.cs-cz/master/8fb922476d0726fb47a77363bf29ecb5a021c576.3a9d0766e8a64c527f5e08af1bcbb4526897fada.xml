{"nodes":[{"pos":[12,43],"content":"Pointers (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Pointers (C++) | Microsoft Docs","pos":[0,31]}]},{"content":"Pointers (C++)","pos":[658,672]},{"content":"Pointers are declared using the following sequence.","pos":[673,724]},{"content":"where any valid pointer declarator may be used for <ph id=\"ph1\">`declarator`</ph>.","pos":[837,901],"source":"where any valid pointer declarator may be used for `declarator`."},{"content":"The syntax for a simple pointer declarator is as follows:","pos":[903,960]},{"content":"The declaration specifiers:","pos":[1031,1058]},{"content":"An optional storage class specifier.","pos":[1068,1104]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Specifiers<ept id=\"p1\">](../cpp/specifiers.md)</ept>.","pos":[1105,1166],"source":" For more information, see [Specifiers](../cpp/specifiers.md)."},{"pos":[1176,1270],"content":"An optional <ph id=\"ph1\">`const`</ph> or <ph id=\"ph2\">`volatile`</ph> keyword applying to the type of the object to be pointed to.","source":"An optional `const` or `volatile` keyword applying to the type of the object to be pointed to."},{"content":"The type specifier: the name of a type representing the type of the object to be pointed to.","pos":[1280,1372]},{"content":"The declarator:","pos":[1382,1397]},{"content":"An optional Microsoft specific modifier.","pos":[1407,1447]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Microsoft-Specific Modifiers<ept id=\"p1\">](../cpp/microsoft-specific-modifiers.md)</ept>.","pos":[1448,1545],"source":" For more information, see [Microsoft-Specific Modifiers](../cpp/microsoft-specific-modifiers.md)."},{"pos":[1555,1572],"content":"The <ph id=\"ph1\">`*`</ph> operator.","source":"The `*` operator."},{"pos":[1582,1655],"content":"An optional <ph id=\"ph1\">`const`</ph> or <ph id=\"ph2\">`volatile`</ph> keyword applying to the pointer itself.","source":"An optional `const` or `volatile` keyword applying to the pointer itself."},{"content":"The identifier.","pos":[1665,1680]},{"content":"An optional initializer.","pos":[1690,1714]},{"content":"The declarator for a pointer to function looks like this:","pos":[1721,1778]},{"content":"For an array of pointers, the syntax looks like this:","pos":[1913,1966]},{"content":"However, pointer declarators can be more complex.","pos":[2034,2083]},{"content":"For more information,see <bpt id=\"p1\">[</bpt>Declarators<ept id=\"p1\">](http://msdn.microsoft.com/en-us/8a7b9b51-92bd-4ac0-b3fe-0c4abe771838)</ept>.","pos":[2084,2193],"source":" For more information,see [Declarators](http://msdn.microsoft.com/en-us/8a7b9b51-92bd-4ac0-b3fe-0c4abe771838)."},{"content":"Multiple declarators and their initializers may appear together in a single declaration in a comma separated list following the declaration specifier.","pos":[2203,2353]},{"content":"A simple example of a pointer declaration is:","pos":[2360,2405]},{"pos":[2440,2522],"content":"The preceding declaration specifies that <ph id=\"ph1\">`pch`</ph> points to an object of type <ph id=\"ph2\">`char`</ph>.","source":"The preceding declaration specifies that `pch` points to an object of type `char`."},{"content":"A more complex example is","pos":[2529,2554]},{"pos":[2611,2747],"content":"The preceding declaration specifies that <ph id=\"ph1\">`ptr`</ph> is a constant pointer to an object of type <ph id=\"ph2\">`unsigned`</ph> <ph id=\"ph3\">`int`</ph> with static storage duration.","source":"The preceding declaration specifies that `ptr` is a constant pointer to an object of type `unsigned` `int` with static storage duration."},{"content":"The next example shows how multiple pointers are declared and initialized:","pos":[2754,2828]},{"content":"In the preceding example, pointers p and q both point to objects of type <ph id=\"ph1\">`int`</ph> and are initialized to the addresses of i and j respectively.","pos":[2881,3021],"source":"In the preceding example, pointers p and q both point to objects of type `int` and are initialized to the addresses of i and j respectively."},{"content":"The storage class specifier <ph id=\"ph1\">`static`</ph> applies to both pointers.","pos":[3023,3085],"source":"  The storage class specifier `static` applies to both pointers."},{"content":"Example","pos":[3094,3101]},{"content":"Example","pos":[5606,5613]},{"content":"Another example illustrates the use of pointers in data structures; in this case, a linked list.","pos":[5617,5713]},{"content":"See Also","pos":[7276,7284]},{"content":"Indirection Operator: *","pos":[7289,7312]},{"content":"Address-of Operator: &amp;","pos":[7356,7378],"source":"Address-of Operator: &"}],"content":"---\ntitle: \"Pointers (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"declarators, pointers\"\n  - \"declarations, pointers\"\n  - \"pointers\"\n  - \"pointers, declarations\"\nms.assetid: 595387c5-8e58-4670-848f-344c7caf985e\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Pointers (C++)\nPointers are declared using the following sequence.  \n  \n```  \n[storage-class-specifiers] [cv-qualifiers] type-specifiers   \n[ms-modifier] declarator ;  \n```  \n  \n where any valid pointer declarator may be used for `declarator`.  The syntax for a simple pointer declarator is as follows:  \n  \n```  \n* [cv-qualifiers] identifier [= expression]  \n```  \n  \n 1. The declaration specifiers:  \n  \n-   An optional storage class specifier. For more information, see [Specifiers](../cpp/specifiers.md).  \n  \n-   An optional `const` or `volatile` keyword applying to the type of the object to be pointed to.  \n  \n-   The type specifier: the name of a type representing the type of the object to be pointed to.  \n  \n 2. The declarator:  \n  \n-   An optional Microsoft specific modifier. For more information, see [Microsoft-Specific Modifiers](../cpp/microsoft-specific-modifiers.md).  \n  \n-   The `*` operator.  \n  \n-   An optional `const` or `volatile` keyword applying to the pointer itself.  \n  \n-   The identifier.  \n  \n-   An optional initializer.  \n  \n The declarator for a pointer to function looks like this:  \n  \n```  \n(* [cv-qualifiers] identifier )( argument-list ) [cv-qualifers]  \n[exception specification] [= expression];  \n```  \n  \n-   For an array of pointers, the syntax looks like this:  \n  \n```  \n* identifier [ [ constant-expression ] ]  \n```  \n  \n-   However, pointer declarators can be more complex. For more information,see [Declarators](http://msdn.microsoft.com/en-us/8a7b9b51-92bd-4ac0-b3fe-0c4abe771838).  \n  \n-   Multiple declarators and their initializers may appear together in a single declaration in a comma separated list following the declaration specifier.  \n  \n A simple example of a pointer declaration is:  \n  \n```  \nchar *pch;  \n```  \n  \n The preceding declaration specifies that `pch` points to an object of type `char`.  \n  \n A more complex example is  \n  \n```  \nstatic unsigned int * const ptr;  \n```  \n  \n The preceding declaration specifies that `ptr` is a constant pointer to an object of type `unsigned` `int` with static storage duration.  \n  \n The next example shows how multiple pointers are declared and initialized:  \n  \n```  \nstatic int *p = &i, *q = &j;  \n```  \n  \n In the preceding example, pointers p and q both point to objects of type `int` and are initialized to the addresses of i and j respectively.  The storage class specifier `static` applies to both pointers.  \n  \n## Example  \n  \n```  \n// pointer.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nint main() {  \n   int i = 1, j = 2; // local variables on the stack  \n   int *p;  \n  \n   // a pointer may be assigned to \"point to\" the value of  \n   // another variable using the & (address of) operator  \n   p = & j;   \n  \n   // since j was on the stack, this address will be somewhere  \n   // on the stack.  Pointers are printed in hex format using  \n   // %p and conventionally marked with 0x.    \n   printf_s(\"0x%p\\n\",  p);  \n  \n   // The * (indirection operator) can be read as \"the value  \n   // pointed to by\".  \n   // Since p is pointing to j, this should print \"2\"  \n   printf_s(\"0x%p %d\\n\",  p, *p);  \n  \n   // changing j will change the result of the indirection  \n   // operator on p.  \n   j = 7;  \n   printf_s(\"0x%p %d\\n\",  p, *p );  \n  \n   // The value of j can also be changed through the pointer  \n   // by making an assignment to the dereferenced pointer  \n   *p = 10;  \n   printf_s(\"j is %d\\n\", j); // j is now 10  \n  \n   // allocate memory on the heap for an integer,  \n   // initialize to 5  \n   p = new int(5);  \n  \n   // print the pointer and the object pointed to  \n   // the address will be somewhere on the heap  \n   printf_s(\"0x%p %d\\n\",  p, *p);  \n  \n   // free the memory pointed to by p  \n   delete p;  \n  \n   // At this point, dereferencing p with *p would trigger  \n   // a runtime access violation.  \n  \n   // Pointer arithmetic may be done with an array declared  \n   // on the stack or allocated on the heap with new.  \n   // The increment operator takes into account the size   \n   // of the objects pointed to.  \n   p = new int[5];  \n   for (i = 0; i < 5; i++, p++) {  \n      *p = i * 10;  \n      printf_s(\"0x%p %d\\n\", p, *p);  \n   }  \n  \n   // A common expression seen is dereferencing in combination  \n   // with increment or decrement operators, as shown here.  \n   // The indirection operator * takes precedence over the   \n   // increment operator ++.   \n   // These are particularly useful in manipulating char arrays.  \n   char s1[4] = \"cat\";  \n   char s2[4] = \"dog\";  \n   char* p1 = s1;  \n   char* p2 = s2;  \n  \n   // the following is a string copy operation  \n   while (*p1++ = *p2++);  \n  \n   // s2 was copied into s1, so now they are both equal to \"dog\"  \n   printf_s(\"%s %s\", s1, s2);  \n}  \n```  \n  \n```Output  \n0x0012FEC8  \n0x0012FEC8 2  \n0x0012FEC8 7  \nj is 10  \n0x00320850 5  \n0x00320850 0  \n0x00320854 10  \n0x00320858 20  \n0x0032085C 30  \n0x00320860 40  \ndog dog  \n```  \n  \n## Example  \n Another example illustrates the use of pointers in data structures; in this case, a linked list.  \n  \n```  \n// pointer_linkedlist.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nstruct NewNode {  \n   NewNode() : node(0){}  \n   int i;  \n   NewNode * node;  \n};  \n  \nvoid WalkList(NewNode * ptr) {  \n   if (ptr != 0) {  \n      int i = 1;  \n      while (ptr->node != 0 ) {  \n         cout << \"node \" << i++ << \" = \" << ptr->i << endl;  \n         ptr = ptr->node;  \n      }  \n      cout << \"node \" << i++ << \" = \" << ptr->i << endl;  \n   }  \n}  \n  \nvoid AddNode(NewNode ** ptr) {  \n   NewNode * walker = 0;  \n   NewNode * MyNewNode = new NewNode;  \n   cout << \"enter a number: \" << endl;  \n   cin >> MyNewNode->i;  \n  \n   if (*ptr == 0)  \n      *ptr = MyNewNode;  \n   else  {  \n      walker = *ptr;  \n      while (walker->node != 0)  \n         walker = walker->node;  \n  \n      walker->node = MyNewNode;  \n   }  \n}  \n  \nint main() {  \n   char ans = ' ';  \n   NewNode * ptr = 0;  \n   do {  \n      cout << \"a (add node)  d (display list)  q (quit)\" << endl;  \n      cin >> ans;  \n      switch (ans) {  \n      case 'a':  \n         AddNode(&ptr);  \n         break;  \n      case 'd':  \n         WalkList(ptr);  \n         break;  \n      }  \n   } while (ans != 'q');  \n}  \n```  \n  \n```Output  \n  \n      a  \n45  \nd  \na  \n789  \nd  \nqa (add node)  d (display list)  q (quit)  \nenter a number:   \na (add node)  d (display list)  q (quit)  \nnode 1 = 45  \na (add node)  d (display list)  q (quit)  \nenter a number:   \na (add node)  d (display list)  q (quit)  \nnode 1 = 45  \nnode 2 = 789  \na (add node)  d (display list)  q (quit)  \n```  \n  \n## See Also  \n [Indirection Operator: *](../cpp/indirection-operator-star.md)   \n [Address-of Operator: &](../cpp/address-of-operator-amp.md)"}