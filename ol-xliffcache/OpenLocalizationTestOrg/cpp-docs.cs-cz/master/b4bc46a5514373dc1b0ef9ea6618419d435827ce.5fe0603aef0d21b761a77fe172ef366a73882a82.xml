{"nodes":[{"pos":[12,90],"content":"How to: Convert from a .NET Collection to a STL-CLR Container | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Convert from a .NET Collection to a STL-CLR Container | Microsoft Docs","pos":[0,78]}]},{"content":"How to: Convert from a .NET Collection to a STL/CLR Container","pos":[677,738]},{"content":"This topic shows how to convert .NET collections to their equivalent STL/CLR containers.","pos":[739,827]},{"content":"As an example we show how to convert a .NET &lt;xref:System.Collections.Generic.List%601&gt; to a STL/CLR <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../dotnet/vector-stl-clr.md)</ept> and how to convert a .NET &lt;xref:System.Collections.Generic.Dictionary%602&gt; to a STL/CLR <bpt id=\"p2\">[</bpt>map<ept id=\"p2\">](../dotnet/map-stl-clr.md)</ept>, but the procedure is similar for all collections and containers.","pos":[828,1151],"source":" As an example we show how to convert a .NET <xref:System.Collections.Generic.List%601> to a STL/CLR [vector](../dotnet/vector-stl-clr.md) and how to convert a .NET <xref:System.Collections.Generic.Dictionary%602> to a STL/CLR [map](../dotnet/map-stl-clr.md), but the procedure is similar for all collections and containers."},{"content":"To create a container from a collection","pos":[1161,1200]},{"content":"To convert an entire collection, create a STL/CLR container and pass the collection to the constructor.","pos":[1210,1313]},{"content":"The first example demonstrates this procedure.","pos":[1324,1370]},{"content":"-OR-","pos":[1377,1381]},{"content":"Create a generic STL/CLR container by creating a <bpt id=\"p1\">[</bpt>collection_adapter<ept id=\"p1\">](../dotnet/collection-adapter-stl-clr.md)</ept> object.","pos":[1391,1509],"source":"Create a generic STL/CLR container by creating a [collection_adapter](../dotnet/collection-adapter-stl-clr.md) object."},{"content":"This template class takes a .NET collection interface as an argument.","pos":[1510,1579]},{"content":"To verify which interfaces are supported, see <bpt id=\"p1\">[</bpt>collection_adapter (STL/CLR)<ept id=\"p1\">](../dotnet/collection-adapter-stl-clr.md)</ept>.","pos":[1580,1698],"source":" To verify which interfaces are supported, see [collection_adapter (STL/CLR)](../dotnet/collection-adapter-stl-clr.md)."},{"content":"Copy the contents of the .NET collection to the container.","pos":[1708,1766]},{"content":"This can be done by using a STL/CLR <bpt id=\"p1\">[</bpt>algorithm<ept id=\"p1\">](../dotnet/algorithm-stl-clr.md)</ept>, or by iterating over the .NET collection and inserting a copy of each element into the STL/CLR container.","pos":[1767,1953],"source":" This can be done by using a STL/CLR [algorithm](../dotnet/algorithm-stl-clr.md), or by iterating over the .NET collection and inserting a copy of each element into the STL/CLR container."},{"content":"The second example demonstrates this procedure.","pos":[1964,2011]},{"content":"Example","pos":[2020,2027]},{"content":"In this example, we create a generic &lt;xref:System.Collections.Generic.List%601&gt; and add 5 elements to it.","pos":[2031,2136],"source":"In this example, we create a generic <xref:System.Collections.Generic.List%601> and add 5 elements to it."},{"content":"Then, we create a <ph id=\"ph1\">`vector`</ph> using the constructor that takes a &lt;xref:System.Collections.Generic.IEnumerable%601&gt; as an argument.","pos":[2137,2264],"source":" Then, we create a `vector` using the constructor that takes a <xref:System.Collections.Generic.IEnumerable%601> as an argument."},{"content":"Example","pos":[3261,3268]},{"content":"In this example, we create a generic &lt;xref:System.Collections.Generic.Dictionary%602&gt; and add 5 elements to it.","pos":[3272,3383],"source":"In this example, we create a generic <xref:System.Collections.Generic.Dictionary%602> and add 5 elements to it."},{"content":"Then, we create a <ph id=\"ph1\">`collection_adapter`</ph> to wrap the &lt;xref:System.Collections.Generic.Dictionary%602&gt; as a simple STL/CLR container.","pos":[3384,3514],"source":" Then, we create a `collection_adapter` to wrap the <xref:System.Collections.Generic.Dictionary%602> as a simple STL/CLR container."},{"content":"Finally, we create a <ph id=\"ph1\">`map`</ph> and copy the contents of the &lt;xref:System.Collections.Generic.Dictionary%602&gt; to the <ph id=\"ph2\">`map`</ph> by iterating over the <ph id=\"ph3\">`collection_adapter`</ph>.","pos":[3515,3676],"source":" Finally, we create a `map` and copy the contents of the <xref:System.Collections.Generic.Dictionary%602> to the `map` by iterating over the `collection_adapter`."},{"content":"During this process, we create a new pair by using the <ph id=\"ph1\">`make_pair`</ph> function, and insert the new pair directly into the <ph id=\"ph2\">`map`</ph>.","pos":[3677,3802],"source":" During this process, we create a new pair by using the `make_pair` function, and insert the new pair directly into the `map`."},{"content":"See Also","pos":[5196,5204]},{"content":"STL/CLR Library Reference","pos":[5209,5234]},{"content":"adapter (STL/CLR)","pos":[5281,5298]},{"content":"How to: Convert from a STL/CLR Container to a .NET Collection","pos":[5335,5396]}],"content":"---\ntitle: \"How to: Convert from a .NET Collection to a STL-CLR Container | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"STL/CLR, converting from .NET collections\"\n  - \"STL/CLR Containers [STL/CLR]\"\nms.assetid: bb927c48-78e8-4150-bd0b-787c651f4a87\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Convert from a .NET Collection to a STL/CLR Container\nThis topic shows how to convert .NET collections to their equivalent STL/CLR containers. As an example we show how to convert a .NET <xref:System.Collections.Generic.List%601> to a STL/CLR [vector](../dotnet/vector-stl-clr.md) and how to convert a .NET <xref:System.Collections.Generic.Dictionary%602> to a STL/CLR [map](../dotnet/map-stl-clr.md), but the procedure is similar for all collections and containers.  \n  \n### To create a container from a collection  \n  \n1.  To convert an entire collection, create a STL/CLR container and pass the collection to the constructor.  \n  \n     The first example demonstrates this procedure.  \n  \n -OR-  \n  \n1.  Create a generic STL/CLR container by creating a [collection_adapter](../dotnet/collection-adapter-stl-clr.md) object. This template class takes a .NET collection interface as an argument. To verify which interfaces are supported, see [collection_adapter (STL/CLR)](../dotnet/collection-adapter-stl-clr.md).  \n  \n2.  Copy the contents of the .NET collection to the container. This can be done by using a STL/CLR [algorithm](../dotnet/algorithm-stl-clr.md), or by iterating over the .NET collection and inserting a copy of each element into the STL/CLR container.  \n  \n     The second example demonstrates this procedure.  \n  \n## Example  \n In this example, we create a generic <xref:System.Collections.Generic.List%601> and add 5 elements to it. Then, we create a `vector` using the constructor that takes a <xref:System.Collections.Generic.IEnumerable%601> as an argument.  \n  \n```  \n// cliext_convert_list_to_vector.cpp  \n// compile with: /clr  \n  \n#include <cliext/adapter>  \n#include <cliext/algorithm>  \n#include <cliext/vector>  \n  \nusing namespace System;  \nusing namespace System::Collections;  \nusing namespace System::Collections::Generic;  \n  \nint main(array<System::String ^> ^args)  \n{  \n    List<int> ^primeNumbersColl = gcnew List<int>();  \n    primeNumbersColl->Add(2);  \n    primeNumbersColl->Add(3);  \n    primeNumbersColl->Add(5);  \n    primeNumbersColl->Add(7);  \n    primeNumbersColl->Add(11);  \n  \n    cliext::vector<int> ^primeNumbersCont =  \n        gcnew cliext::vector<int>(primeNumbersColl);  \n  \n    Console::WriteLine(\"The contents of the cliext::vector are:\");  \n    cliext::vector<int>::const_iterator it;  \n    for (it = primeNumbersCont->begin(); it != primeNumbersCont->end(); it++)  \n    {  \n        Console::WriteLine(*it);  \n    }  \n}  \n```  \n  \n```Output  \nThe contents of the cliext::vector are:  \n2  \n3  \n5  \n7  \n11  \n```  \n  \n## Example  \n In this example, we create a generic <xref:System.Collections.Generic.Dictionary%602> and add 5 elements to it. Then, we create a `collection_adapter` to wrap the <xref:System.Collections.Generic.Dictionary%602> as a simple STL/CLR container. Finally, we create a `map` and copy the contents of the <xref:System.Collections.Generic.Dictionary%602> to the `map` by iterating over the `collection_adapter`. During this process, we create a new pair by using the `make_pair` function, and insert the new pair directly into the `map`.  \n  \n```  \n// cliext_convert_dictionary_to_map.cpp  \n// compile with: /clr  \n  \n#include <cliext/adapter>  \n#include <cliext/algorithm>  \n#include <cliext/map>  \n  \nusing namespace System;  \nusing namespace System::Collections;  \nusing namespace System::Collections::Generic;  \n  \nint main(array<System::String ^> ^args)  \n{  \n    System::Collections::Generic::Dictionary<float, int> ^dict =  \n        gcnew System::Collections::Generic::Dictionary<float, int>();  \n    dict->Add(42.0, 42);  \n    dict->Add(13.0, 13);  \n    dict->Add(74.0, 74);  \n    dict->Add(22.0, 22);  \n    dict->Add(0.0, 0);  \n  \n    cliext::collection_adapter<System::Collections::Generic::IDictionary<float, int>> dictAdapter(dict);  \n    cliext::map<float, int> aMap;  \n    for each (KeyValuePair<float, int> ^kvp in dictAdapter)  \n    {  \n        cliext::pair<float, int> aPair = cliext::make_pair(kvp->Key, kvp->Value);  \n        aMap.insert(aPair);  \n    }  \n  \n    Console::WriteLine(\"The contents of the cliext::map are:\");  \n    cliext::map<float, int>::const_iterator it;  \n    for (it = aMap.begin(); it != aMap.end(); it++)  \n    {  \n        Console::WriteLine(\"Key: {0:F} Value: {1}\", it->first, it->second);  \n    }  \n}  \n```  \n  \n```Output  \nThe contents of the cliext::map are:  \nKey: 0.00 Value: 0  \nKey: 13.00 Value: 13  \nKey: 22.00 Value: 22  \nKey: 42.00 Value: 42  \nKey: 74.00 Value: 74  \n```  \n  \n## See Also  \n [STL/CLR Library Reference](../dotnet/stl-clr-library-reference.md)   \n [adapter (STL/CLR)](../dotnet/adapter-stl-clr.md)   \n [How to: Convert from a STL/CLR Container to a .NET Collection](../dotnet/how-to-convert-from-a-stl-clr-container-to-a-dotnet-collection.md)"}