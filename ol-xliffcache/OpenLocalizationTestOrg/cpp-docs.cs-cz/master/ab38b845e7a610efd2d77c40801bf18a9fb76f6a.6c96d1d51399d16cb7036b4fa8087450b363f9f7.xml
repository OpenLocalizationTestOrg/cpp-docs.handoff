{"nodes":[{"pos":[12,57],"content":"&lt;filesystem&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"filesystem<ph id=\"ph1\">&amp;gt;</ph> operators | Microsoft Docs","pos":[4,45],"source":"filesystem&gt; operators | Microsoft Docs"}]},{"content":"filesystem<ph id=\"ph1\">&amp;gt;</ph> operators","pos":[1513,1537],"source":"filesystem&gt; operators"},{"content":"The operators perform a lexical comparison of two paths as strings.","pos":[1538,1605]},{"content":"Use the <bpt id=\"p1\">**</bpt>equivalent<ept id=\"p1\">**</ept> function to determine whether two paths (for example a relative path and an absolute path) refer to the same file or directory on disk.","pos":[1606,1764],"source":" Use the **equivalent** function to determine whether two paths (for example a relative path and an absolute path) refer to the same file or directory on disk."},{"pos":[1866,1970],"content":"For more information, see <bpt id=\"p1\">[</bpt>File System Navigation (C++)<ept id=\"p1\">](../standard-library/file-system-navigation.md)</ept>.","source":"For more information, see [File System Navigation (C++)](../standard-library/file-system-navigation.md)."},{"content":"operator==","pos":[1979,1989]},{"content":"The function returns left.native() == right.native().","pos":[2076,2129]},{"content":"operator!=","pos":[2138,2148]},{"content":"The function returns !(left == right).","pos":[2235,2273]},{"content":"operator&lt;","pos":[2282,2291],"source":"operator<"},{"content":"The function returns left.native() &lt; right.native().","pos":[2377,2429],"source":"The function returns left.native() < right.native()."},{"content":"operator&lt;=","pos":[2438,2448],"source":"operator<="},{"content":"The function returns !(right <ph id=\"ph1\">\\&lt;</ph> left).","pos":[2535,2573],"source":"The function returns !(right \\< left)."},{"content":"operator&gt;","pos":[2582,2591],"source":"operator>"},{"content":"The function returns right <ph id=\"ph1\">\\&lt;</ph> left.","pos":[2677,2712],"source":"The function returns right \\< left."},{"content":"operator&gt;=","pos":[2721,2731],"source":"operator>="},{"content":"The function returns !(left &lt; right).","pos":[2818,2855],"source":"The function returns !(left < right)."},{"content":"operator/","pos":[2864,2873]},{"content":"The function executes:","pos":[2948,2970]},{"content":"operator&lt;&lt;","pos":[3070,3080],"source":"operator<<"},{"content":"The function returns os &lt;&lt; pval.string<ph id=\"ph1\">\\&lt;</ph>Elem, Traits&gt;().","pos":[3232,3288],"source":"The function returns os << pval.string\\<Elem, Traits>()."},{"content":"operator&gt;&gt;","pos":[3297,3307],"source":"operator>>"},{"content":"The function executes:","pos":[3459,3481]},{"content":"See Also","pos":[3578,3586]},{"content":"path Class (C++ Standard Template Library)","pos":[3591,3633]},{"content":"File System Navigation (C++)","pos":[3675,3703]},{"content":"filesystem&gt;","pos":[3759,3770],"source":"filesystem>"}],"content":"---\ntitle: \"&lt;filesystem&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"FILESYSTEM/std::experimental::filesystem::operator==\"\n  - \"std::experimental::filesystem::operator==\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator!=\"\n  - \"std::experimental::filesystem::operator!=\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator<\"\n  - \"std::experimental::filesystem::operator<\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator<=\"\n  - \"std::experimental::filesystem::operator<=\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator>\"\n  - \"std::experimental::filesystem::operator>\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator>=\"\n  - \"std::experimental::filesystem::operator>=\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator/\"\n  - \"std::experimental::filesystem::operator/\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator<<\"\n  - \"std::experimental::filesystem::operator<<\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator>>\"\n  - \"std::experimental::filesystem::operator>>\"\ndev_langs: \n  - \"C++\"\nms.assetid: 102c4833-aa3b-41a8-8998-f5003c546bfd\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;filesystem&gt; operators\nThe operators perform a lexical comparison of two paths as strings. Use the **equivalent** function to determine whether two paths (for example a relative path and an absolute path) refer to the same file or directory on disk.  \n  \n```  \nC:\\root> D:\\root: false  \nC:\\root> C:\\root\\sub: false  \nC:\\root> C:\\roo: true  \n```  \n  \n For more information, see [File System Navigation (C++)](../standard-library/file-system-navigation.md).  \n  \n## operator==  \n  \n```  \nbool operator==(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns left.native() == right.native().  \n  \n## operator!=  \n  \n```  \nbool operator!=(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns !(left == right).  \n  \n## operator<  \n  \n```  \nbool operator<(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns left.native() < right.native().  \n  \n## operator<=  \n  \n```  \nbool operator<=(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns !(right \\< left).  \n  \n## operator>  \n  \n```  \nbool operator>(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns right \\< left.  \n  \n## operator>=  \n  \n```  \nbool operator>=(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns !(left < right).  \n  \n## operator/  \n  \n```  \npath operator/(const path& left, const path& right);\n```  \n  \n The function executes:  \n  \n```  \nbasic_string<Elem, Traits> str;  \npath ans = left;  \nreturn (ans /= right);\n```  \n  \n## operator<<  \n  \n```  \ntemplate <class Elem, class Traits>  \nbasic_ostream<Elem, Traits>& operator<<(basic_ostream<Elem, Traits>& os, const path& pval);\n```  \n  \n The function returns os << pval.string\\<Elem, Traits>().  \n  \n## operator>>  \n  \n```  \ntemplate <class Elem, class Traits>  \nbasic_istream<Elem, Traits>& operator<<(basic_istream<Elem, Traits>& is, const path& pval);\n```  \n  \n The function executes:  \n  \n```  \nbasic_string<Elem, Traits> str;  \nis>> str;  \npval = str;  \nreturn (is);\n```  \n  \n## See Also  \n [path Class (C++ Standard Template Library)](../standard-library/path-class.md)   \n [File System Navigation (C++)](../standard-library/file-system-navigation.md)   \n [\\<filesystem>](../standard-library/filesystem.md)\n\n"}