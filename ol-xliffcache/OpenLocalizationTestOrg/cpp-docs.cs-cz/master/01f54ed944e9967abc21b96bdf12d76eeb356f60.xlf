<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01f54ed944e9967abc21b96bdf12d76eeb356f60</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmfctoolbar-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d96f147d5f26a957bae36984492085347f615292</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e06a044ce545ca3be99c092021ad2fe3ec362049</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMFCToolBar Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMFCToolBar Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMFCToolBar`</ph> class resembles <bpt id="p1">[</bpt>CToolBar Class<ept id="p1">](../../mfc/reference/ctoolbar-class.md)</ept>, but provides additional support for user interface features.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These include flat toolbars, toolbars with hot images, large icons, pager buttons, locked toolbars, rebar controls, text under images, background images, and tabbed toolbars.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMFCToolBar`</ph> class also contains built-in support for user customization of toolbars and menus, drag-and-drop between toolbars and menus, combo box buttons, edit box buttons, color pickers, and roll-up buttons.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Default constructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Destructor.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AddBasicCommand</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Adds a menu command to the list of commands that are always displayed when a user opens a menu.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AddCommandUsage</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Increments by one the counter that is associated with the given command.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AddToolBarForImageCollection</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Adds images from the user interface resources to the collection of images in the application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AdjustLayout</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Recalculates the size and position of a toolbar.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CBasePane::AdjustLayout<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__adjustlayout)</ept>).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AdjustSize</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Recalculates the size of the toolbar.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AllowChangeTextLabels</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Specifies whether text labels can be shown under images on the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AreTextLabels</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Specifies whether text labels under images are currently displayed on the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AutoGrayInactiveImages</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Enable or disables the automatic generation of inactive button images.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::ButtonToIndex</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns the index of a specified <bpt id="p1">[</bpt>CMFCToolBarButton Class<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object in this toolbar.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CalcFixedLayout</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Calculates the horizontal size of the toolbar.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CBasePane::CalcFixedLayout<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__calcfixedlayout)</ept>.)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CalcSize</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Called by the framework as part of the layout calculation process.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CPane::CalcSize<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__calcsize)</ept>.)</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CanHandleSiblings</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar and its sibling are positioned on the same pane.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CleanUpImages</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Frees the system resources allocated for toolbar images.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CleanUpLockedImages</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Frees the system resources allocated for locked toolbar images.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CanBeClosed</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can close the toolbar.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CBasePane::CanBeClosed<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__canbeclosed)</ept>.)</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CanBeRestored</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Determines whether the system can restore a toolbar to its original state after customization.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CanFocus</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane can receive focus.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CBasePane::CanFocus<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__canfocus)</ept>.)</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CanHandleSiblings</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar and its sibling are positioned on the same pane.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CommandToIndex</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns the index of the button in the toolbar with a specified command ID.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::Create</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CMFCToolBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CreateEx</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CMFCToolBar`</ph> object that uses additional style options, such as large icons.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::Deactivate</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Deactivates the toolbar.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableCustomizeButton</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Enables or disables the <bpt id="p1">**</bpt>Add or Remove Buttons<ept id="p1">**</ept> button that appears on the end of the toolbar.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableDocking</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Enables docking of the pane to the main frame.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CBasePane::EnableDocking<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept>.)</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableLargeIcons</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Enables or disables large icons on toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableQuickCustomization</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Enables or disables the quick customization of toolbars so that the user can press the <bpt id="p1">**</bpt>Alt<ept id="p1">**</ept> key and drag a button to a new location.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableReflections</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Enables or disables command reflection.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableTextLabels</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Enables or disables text labels under toolbar button images.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::FromHandlePermanent</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the <ph id="ph1">`CMFCToolBar`</ph> object that contains the given window handle.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetAllButtons</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Returns a read-only list of buttons in a toolbar.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetAllToolbars</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Returns a read-only list of all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetBasicCommands</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Returns a read-only list of the basic commands defined in the application.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetButton</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <ph id="ph1">`CMFCToolBarButton`</ph> object that has a specified toolbar button index.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetButtonInfo</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Returns the command ID, style, and image index of the button at a specified index.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetButtonSize</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns the dimensions of each button on the toolbar.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetButtonStyle</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Returns the current style of the toolbar button that is located at the specified index.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetButtonText</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returns the text label of a button that has a specified index.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetColdImages</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of cold toolbar button images in the application.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetColumnWidth</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Returns the width of the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetCommandButtons</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Returns a list of buttons that have a specified command ID from all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetCount</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Returns the number of buttons and separators on the toolbar.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetCustomizeButton</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the <ph id="ph1">`CMFCCustomizeButton`</ph> object that is associated with the toolbar.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetDefaultImage</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Returns the index of the default image for a toolbar button with a specified command ID.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetDisabledImages</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of images that are used for disabled toolbar buttons in the application.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetDisabledMenuImages</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of images that are used for disabled menu buttons in the application.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetDroppedDownMenu</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the menu button object that is currently displaying its sub-menu.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetGrayDisabledButtons</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Specifies whether the images of disabled buttons are dimmed versions of the regular button images, or taken from the collection of disabled button images.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetHighlightedButton</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the toolbar button that is currently highlighted.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetHotBorder</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar buttons are hot-tracked.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetHotTextColor</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Returns the text color of the highlighted toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetHwndLastFocus</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Returns a handle to the window that had the input focus just before the toolbar did.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetIgnoreSetText</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Specifies whether calls to set button labels are ignored.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetImageSize</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Returns the current size of toolbar button images.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetImages</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of default button images in the application.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetImagesOffset</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Returns the index offset used to find the toolbar button images for this toolbar in the global list of toolbar button images.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetInvalidateItemRect</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Retrieves the region of the client area that must be redrawn for the button at the given index.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetItemID</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Returns the command ID of the toolbar button at a specified index.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetItemRect</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Returns the bounding rectangle of the button at a specified index.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLargeColdImages</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of large cold toolbar button images in the application.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLargeDisabledImages</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of large disabled toolbar button images in the application.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLargeImages</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of large toolbar button images in the application.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLockedColdImages</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of locked cold images in the toolbar.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLockedDisabledImages</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of locked disabled images in the toolbar.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLockedImages</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of locked button images in the toolbar.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLockedImageSize</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Returns the default size of locked toolbar images.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLockedMenuImages</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of locked toolbar menu images in the toolbar.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetMenuButtonSize</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Returns the size of menu buttons in the application.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetMenuImageSize</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Returns the size of menu button images in the application.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetMenuImages</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of menu button images in the application.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetOrigButtons</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Retrieves the collection of non-customized buttons of the toolbar.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetOrigResetButtons</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Retrieves the collection of non-customized reset buttons of the toolbar.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetResourceID</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Retrieves the resource ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetRouteCommandsViaFrame</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Determines which object, the parent frame or the owner, sends commands to the toolbar.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetRowHeight</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Returns the height of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetShowTooltips</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Specifies whether tool tips are displayed for toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetSiblingToolBar</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Retrieves the sibling of the toolbar.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetUserImages</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of user-defined toolbar button images in the application.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::HitTest</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Returns the index of the toolbar button that is located at the specified position.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::InsertButton</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Inserts a button into the toolbar.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::InsertSeparator</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Inserts a separator into the toolbar.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::InvalidateButton</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Invalidates the client area of the toolbar button that exists at the provided index.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsAddRemoveQuickCustomize</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Determines whether a user can add or remove toolbar buttons by using the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> menu option.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsAltCustomizeMode</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Specifies whether <bpt id="p1">*</bpt>quick customization<ept id="p1">*</ept> is being used to drag a button.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsAutoGrayInactiveImages</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Specifies whether the automatic generation of inactive (non-highlighted) button images is enabled.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsBasicCommand</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Determines whether a command is on the list of basic commands.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsButtonExtraSizeAvailable</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar can display buttons that have extended borders.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsButtonHighlighted</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Determines whether a button on the toolbar is highlighted.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsCommandPermitted</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Determines whether a command is permitted.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsCommandRarelyUsed</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Determines whether a command is rarely used (see <bpt id="p1">[</bpt>CMFCToolBar::SetCommandUsageOptions<ept id="p1">](#cmfctoolbar__setcommandusageoptions)</ept>).</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsCustomizeMode</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Specifies whether the toolbar framework is in customization mode.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsDragButton</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Determines whether a toolbar button is being dragged.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsExistCustomizeButton</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar contains the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsFloating</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar is floating.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsLargeIcons</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Specifies whether toolbars in the application currently display large icons.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsLastCommandFromButton</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Determines whether the most recently executed command was sent from the specified toolbar button.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsLocked</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar is locked.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsOneRowWithSibling</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar and its sibling toolbar are positioned on the same row.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsUserDefined</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Specifies whether the toolbar is user-defined.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadBitmap</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Loads toolbar images from application resources.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadBitmapEx</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Loads toolbar images from application resources.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Includes large images.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadParameters</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Loads global toolbar options from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadState</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Loads the toolbar state information from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CPane::LoadState<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__loadstate)</ept>.)</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadToolBar</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Loads the toolbar from application resources.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadToolBarEx</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Loads the toolbar from application resources by using the <ph id="ph1">`CMFCToolBarInfo`</ph> helper class to enable the application to use large images.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnChangeHot</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Called by the framework when a user selects a button on the toolbar.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnFillBackground</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Called by the framework from <bpt id="p1">[</bpt>CBasePane::DoPaint<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__dopaint)</ept> to fill the toolbar background.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnReset</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Restores the toolbar to its original state.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnSetAccData</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CBasePane::OnSetAccData<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__onsetaccdata)</ept>.)</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnSetDefaultButtonText</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Restores the text of a toolbar button to its default state.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::RemoveAllButtons</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Removes all buttons from the toolbar.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::RemoveButton</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Removes the button with the specified index from the toolbar.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::RemoveStateFromRegistry</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Deletes the state information for the toolbar from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::ReplaceButton</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Replaces a toolbar button with another toolbar button.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::ResetAll</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Restores all toolbars to their original states.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::ResetAllImages</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Clears all toolbar image collections in the application.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::RestoreOriginalState</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Restores the original state of a toolbar.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SaveState</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Saves the state information for the toolbar in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CPane::SaveState<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__savestate)</ept>.)</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>(Overrides <ph id="ph1">`CBasePane::Serialize`</ph>.)</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetBasicCommands</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Sets the list of commands that are always displayed when a user opens a menu.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetButtonInfo</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Sets the command ID, style, and image ID of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetButtonStyle</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Sets the style of the toolbar button at the given index.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetButtonText</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Sets the text label of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetButtons</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Sets the buttons for the toolbar.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetCommandUsageOptions</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Specifies when rarely used commands do not appear in the menu of the application.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetCustomizeMode</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Enables or disables customization mode for all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetGrayDisabledButtons</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Specifies whether the disabled buttons on the toolbar are dimmed or if disabled images are used for the disabled buttons.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetHeight</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Sets the height of the toolbar.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetHotBorder</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Specifies whether toolbar buttons are hot-tracked.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetHotTextColor</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Sets the text color for hot toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetLargeIcons</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Specifies whether toolbar buttons display large icons.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetLockedSizes</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Sets the sizes of locked buttons and locked images on the toolbar.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetMenuSizes</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Sets the size of toolbar menu buttons and their images.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetNonPermittedCommands</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Sets the list of commands that cannot be executed by the user.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetOneRowWithSibling</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Positions the toolbar and its sibling on the same row.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetPermament</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can close the toolbar.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetRouteCommandsViaFrame</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Specifies whether the parent frame or the owner sends commands to the toolbar.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetShowTooltips</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Specifies whether the framework displays tool tips.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetSiblingToolBar</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Specifies the sibling of the toolbar.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetSizes</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Specifies the sizes of buttons and images on all toolbars.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetToolBarBtnText</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Specifies properties of a button on the toolbar.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetTwoRowsWithSibling</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Positions the toolbar and its sibling on separate rows.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetUserImages</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Sets the collection of user-defined images in the application.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::StretchPane</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Stretches the toolbar vertically or horizontally.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CBasePane::StretchPane<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__stretchpane)</ept>.)</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::TranslateChar</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Executes a button command if the specified key code corresponds to a valid keyboard shortcut.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::UpdateButton</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Updates the state of the specified button.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::WrapToolBar</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Repositions toolbar buttons within the given dimensions.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AllowShowOnList</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar is displayed in the list on the <bpt id="p1">**</bpt>Toolbars<ept id="p1">**</ept> pane of the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CalcMaxButtonHeight</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Calculates the maximum height of a button in the toolbar.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::DoPaint</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Repaints a toolbar.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::DrawButton</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Repaints a toolbar button.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::DrawSeparator</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Repaints a separator on a toolbar.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnUserToolTip</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Called by the framework when the tooltip for a button is about to be displayed.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Data Members</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::m_bDontScaleImages</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Specifies whether to scale or not toolbar images in high DPI mode.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::m_dblLargeImageRatio</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Specifies the ratio between the dimension (height or width) of large images and the dimension of regular images.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>To incorporate a <ph id="ph1">`CMFCToolBar`</ph> object into your application, follow these steps:</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`CMFCToolBar`</ph> object to the main frame window.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>When you process the <ph id="ph1">`WM_CREATE`</ph> message for the main frame window, call either <bpt id="p1">[</bpt>CMFCToolBar::Create<ept id="p1">](#cmfctoolbar__create)</ept> or <bpt id="p2">[</bpt>CMFCToolBar::CreateEx<ept id="p2">](#cmfctoolbar__createex)</ept> to create the toolbar and specify its style.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CBasePane::EnableDocking<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept> to specify the docking style.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>To insert a special button, such as a combo box or drop-down toolbar, reserve a dummy button in the parent resource, and replace the dummy button at runtime by using <bpt id="p1">[</bpt>CMFCToolBar::ReplaceButton<ept id="p1">](#cmfctoolbar__replacebutton)</ept>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Walkthrough: Putting Controls On Toolbars<ept id="p1">](../walkthrough-putting-controls-on-toolbars.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>is the base class for the MFC Library classes <bpt id="p1">[</bpt>CMFCMenuBar Class<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept>, <bpt id="p2">[</bpt>CMFCPopupMenuBar Class<ept id="p2">](../../mfc/reference/cmfcpopupmenubar-class.md)</ept>, and <bpt id="p3">[</bpt>CMFCDropDownToolBar Class<ept id="p3">](../../mfc/reference/cmfcdropdowntoolbar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use various methods in the <ph id="ph1">`CMFCToolBar`</ph> class.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The example shows how to set the text of the window label of the tool bar, set the borders, set the style of the pane, and enable the <bpt id="p1">**</bpt>Add or Remove Buttons<ept id="p1">**</ept> button that appears on the end of the toolbar.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>IE Demo sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#6</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#8</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxtoolbar.h</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>CBasePane</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>CPane</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>CMFCBaseToolBar</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>CMFCToolBar</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AddBasicCommand</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Adds a menu command to the list of commands that are always displayed when a user opens a menu.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Specifies the command to add.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>A basic command is always displayed when the menu is opened.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>This method is meaningful when the user chooses to view recently used commands.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBar::SetBasicCommands<ept id="p1">](#cmfctoolbar__setbasiccommands)</ept> method to set the list of commands that are always displayed when a user opens a menu.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBar::GetBasicCommands<ept id="p1">](#cmfctoolbar__getbasiccommands)</ept> method to retrieve the list of basic commands that is used by your application.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AddCommandUsage</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Increments by one the counter that is associated with the given command.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Specifies the command counter to increment.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the user selects a menu item.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The framework uses command counters to display recently used menu items.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>This method increments the command counter by using the <bpt id="p1">[</bpt>CMFCCmdUsageCount::AddCmd<ept id="p1">](../../mfc/reference/cmfccmdusagecount-class.md#cmfccmdusagecount__addcmd)</ept> method.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AddToolBarForImageCollection</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Adds images from the user interface resources to the collection of images in the application.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Resource ID of a toolbar with images to load.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Resource ID of a bitmap with toolbar images.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Resource ID of a bitmap with "cold" toolbar images.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Resource ID of a bitmap with menu images.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Resource ID of a bitmap with disabled toolbar images.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Resource ID of a bitmap with disabled menu images.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>if the method succeeds; <ph id="ph1">`FALSE`</ph> if <ph id="ph2">`uiResID`</ph> or <ph id="ph3">`uiBmpResID`</ph> do not specify valid resources, or another error occurs.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Call this method to load a bitmap with toolbar images and add it to the collection of toolbar images.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>This method creates a temporary toolbar object and calls <bpt id="p1">[</bpt>CMFCToolBar::LoadToolBar<ept id="p1">](#cmfctoolbar__loadtoolbar)</ept>.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AdjustLayout</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Recalculates the size and position of a toolbar.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Call this method when the toolbar has been created to recalculate its size and position.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The framework calls this method every time that the layout of the toolbar must be changed.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>For example, the layout must change when the user moves another control bar, resizes an application window, or customizes the toolbar.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Override this method to provide your own dynamic layout in classes that you derive from <bpt id="p1">[</bpt>CMFCToolar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AdjustSize</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Recalculates the size of the toolbar.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>This method makes sure that the toolbar fits in the bounds of the parent frame.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>This method does nothing if the toolbar has no parent frame.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCToolBar::AdjustLayout<ept id="p1">](#cmfctoolbar__adjustlayout)</ept> method calls this method to recalculate the size if the parent of the toolbar is not a <ph id="ph1">`CMFCReBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AllowChangeTextLabels</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Specifies whether text labels can be shown under images on the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>if it is allowed to display text labels below images; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>This method is called by the customization dialog box to determine whether to enable a <bpt id="p1">**</bpt>Show text labels<ept id="p1">**</ept> check-box on the <bpt id="p2">**</bpt>Toolbars<ept id="p2">**</ept> page for the selected toolbar.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Override this method in an object derived from <bpt id="p1">[</bpt>CMFCToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept> and return <ph id="ph1">`FALSE`</ph> when you do not want the user to decide whether text labels are displayed on toolbar buttons under the images.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AllowShowOnList</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar is displayed in the list of toolbars on the <bpt id="p1">**</bpt>Toolbars<ept id="p1">**</ept> pane of the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>if the toolbar object can be displayed in the list box on the toolbar customization page; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>This method is called by the framework to determine whether the list on the toolbar customization page should include a particular object derived from <bpt id="p1">[</bpt>CMFCToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The default implementation always returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Override this method when you do not want a toolbar to appear in the toolbars list in the customization dialog box.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AreTextLabels</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Specifies whether text labels under images are currently displayed on the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>if the toolbar buttons display text labels below images; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CMFCToolBar::EnableTextLabels<ept id="p1">](#cmfctoolbar__enabletextlabels)</ept> to specify whether the text is displayed.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::AllowChangeTextLabels<ept id="p1">](#cmfctoolbar__allowchangetextlabels)</ept> to specify whether the user can change this setting in the customization dialog box.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::AutoGrayInactiveImages</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Enable or disables the automatic generation of inactive button images.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to dim inactive images.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, inactive images are dimmed.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Otherwise, inactive images are not dimmed.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Specifies the luminance percentage for inactive images.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bEnable`</ph> is <ph id="ph2">`FALSE`</ph>, this value is ignored.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to redraw all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, this method redraws all toolbars.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bEnable`</ph> is <ph id="ph2">`TRUE`</ph>, the framework uses <ph id="ph3">`nGrayImagePercentage`</ph> to generate inactive images from the regular images.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Otherwise, you must provide the set of inactive images by using the <bpt id="p1">[</bpt>CMFCToolBar::GetColdImages<ept id="p1">](#cmfctoolbar__getcoldimages)</ept> method.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>By default, this option is disabled.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`nGrayImagePercentage`</ph> parameter, see <bpt id="p1">[</bpt>CMFCToolBarImages::GrayImages<ept id="p1">](../../mfc/reference/cmfctoolbarimages-class.md#cmfctoolbarimages__grayimages)</ept>.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::ButtonToIndex</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Returns the index of a specified <bpt id="p1">[</bpt>CMFCToolBarButton Class<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object in this toolbar.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>A pointer to the toolbar button object.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Index of <ph id="ph1">`pButton`</ph> in the internal list of toolbar buttons; or -1 if the specified button is not on this toolbar.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CalcFixedLayout</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Calculates the horizontal size of the toolbar.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>to stretch the toolbar to the size of the parent frame.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>to orient the toolbar horizontally; <ph id="ph1">`FALSE`</ph> to orient the toolbar vertically.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSize`</ph> object that specifies the size of the toolbar.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>This method calculates the size of the toolbar by using the <ph id="ph1">`CMFCToolBar::CalcLayout`</ph> method.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>It passes the <ph id="ph1">`LM_STRETCH`</ph> flag for the <ph id="ph2">`dwMode`</ph> parameter if <ph id="ph3">`bStretch`</ph> is <ph id="ph4">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>It passes the <ph id="ph1">`LM_HORZ`</ph> flag if <ph id="ph2">`bHorz`</ph> is <ph id="ph3">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>See the VisualStudioDemo sample for an example that uses this method.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CalcMaxButtonHeight</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Calculates the maximum height of buttons in the toolbar.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>The maximum height of buttons.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>This method calculates the maximum height among all toolbar buttons on the toolbar.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The height may vary depending on factors such as the current toolbar docking state.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Override this method in a class derived from <bpt id="p1">[</bpt>CMFCToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept> to provide your own height calculation.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CalcSize</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Called by the framework as part of the layout calculation process.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>to specify that the toolbar is docked vertically; <ph id="ph1">`FALSE`</ph> to specify that the toolbar is docked horizontally.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSize`</ph> object that specifies the overall size of the buttons on the toolbar.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>This method considers the attributes that affect the size of each button, such as the area of the text label and the border size.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>If the toolbar contains no buttons, this method returns the reserved size of a single button by using the <bpt id="p1">[</bpt>CMFCToolBar::GetButtonSize<ept id="p1">](#cmfctoolbar__getbuttonsize)</ept> method.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CanBeClosed</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can close the toolbar.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>if the toolbar can be closed by the user; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>The framework calls this method to determine whether the user can close a toolbar.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>If the method returns <ph id="ph1">`TRUE`</ph>, the framework enables the SC_CLOSE command in the system menu of the toolbar and the user can close the toolbar by using a check box in the list of toolbars in the customization dialog box.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Override this method in a class derived from <bpt id="p1">[</bpt>CMFCToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept> to make toolbar objects that cannot be closed by the user.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CanBeRestored</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Determines whether the system can restore a toolbar to its original state after customization.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>if the toolbar can be restored from the application resources; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The framework calls this method to determine whether a toolbar can be returned to its original state after customization.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>The original state is loaded from the application resources.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CanBeRestored`</ph> returns <ph id="ph2">`TRUE`</ph>, the <bpt id="p1">**</bpt>Toolbars<ept id="p1">**</ept> page of the customization dialog box enables the <bpt id="p2">**</bpt>Reset<ept id="p2">**</ept> button for the selected toolbar.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`TRUE`</ph> if the original resource ID of the toolbar when it was loaded is non-zero.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Usually, only user-defined toolbars cannot be restored.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>You can override the <ph id="ph1">`CanBeRestored`</ph> method to customize this behavior in derived classes.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CanFocus</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane can receive focus.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>This method overrides the base class implementation, <bpt id="p1">[</bpt>CBasePane::CanFocus<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__canfocus)</ept>, because toolbar objects cannot receive focus.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CanHandleSiblings</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar and its sibling are positioned on the same pane.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>if the toolbar has a sibling and the toolbar and its sibling are positioned on the same pane; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>The internal CMFCCustomizeButton::CreatePopupMenu method calls this method to determine how to show the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> pop-up menu.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>If this method returns <ph id="ph1">`TRUE`</ph>, the framework displays the <bpt id="p1">**</bpt>Show Buttons on One Row<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Show Buttons on Two Rows<ept id="p2">**</ept> buttons.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>You typically do not have to use this method.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>To enable the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button that appears on the toolbar, call the <bpt id="p2">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id="p2">](#cmfctoolbar__enablecustomizebutton)</ept> method.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>To enable the <bpt id="p1">**</bpt>Show Buttons on One Row<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Show Buttons on Two Rows<ept id="p2">**</ept> buttons, call <bpt id="p3">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id="p3">](#cmfctoolbar__setsiblingtoolbar)</ept>.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CleanUpImages</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Frees the system resources allocated for toolbar images.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>The framework calls this method when an application shuts down.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CleanUpLockedImages</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Frees the system resources allocated for locked toolbar images.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Call this method when the visual style of your application changes.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>See the VisualStudioDemo sample for an example that uses this method.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CommandToIndex</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Returns the index of the button in the toolbar with a specified command ID.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Specifies the command ID.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>Specifies the initial index to start from.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Zero-based index of the toolbar button if the method was successful; -1 if there is no button with the specified ID.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CMFCToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept> object maintains an internal list of the buttons on the toolbar.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the index of a button in the list given the command ID of the button.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`iIndex`</ph> is greater than 0, this method ignores any button on the toolbar that has an index less than <ph id="ph2">`iIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::Create</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CMFCToolBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>A pointer to the parent window of the toolbar.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>The toolbar style.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Toolbar Control and Button Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for the list of styles.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>The ID of the child window of the toolbar.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>if this method succeeds; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>This method creates a control bar and attaches it to the toolbar.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>It creates the control bar with the <ph id="ph1">`TBSTYLE_FLAT`</ph> style.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::CreateEx<ept id="p1">](#cmfctoolbar__createex)</ept> if you want a different control bar style.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::CreateEx</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CMFCToolBar`</ph> object that uses additional style options, such as large icons.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>A pointer to the parent window of the toolbar.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Additional styles for creating the embedded control bar object.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>The toolbar style.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Toolbar Control and Button Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept> for a list of appropriate styles.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> object that specifies the widths of the toolbar window borders.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>The ID of the child window of the toolbar.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Nonzero if this method succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>This method creates a control bar and attaches it to the toolbar.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Call this method instead of <bpt id="p1">[</bpt>CMFCToolBar::Create<ept id="p1">](#cmfctoolbar__create)</ept> when you want to provide specific styles.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>For example, set <ph id="ph1">`dwCtrlStyle`</ph> to <ph id="ph2">`TBSTYLE_FLAT | TBSTYLE_TRANSPARENT`</ph> to create a toolbar that resembles the toolbars that are used by Internet Explorer 4.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the <ph id="ph1">`CreateEx`</ph> method of the <ph id="ph2">`CMFCToolBar`</ph> class.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>IE Demo sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#6</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#7</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::Deactivate</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Deactivates the toolbar.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>This method deactivates the toolbar by removing the focus from the highlighted toolbar button.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the toolbar loses focus or is destroyed.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::DoPaint</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Repaints a toolbar.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>A pointer to a device context.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>This method is called by the framework when a part of the toolbar must be repainted.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Override this method to customize the appearance of an object derived from <bpt id="p1">[</bpt>CMFCToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::DrawButton</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Repaints a toolbar button.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>A pointer to a device context.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>A pointer to a button to draw.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>A pointer to the toolbar images.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>if the button is highlighted; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>if disabled buttons are dimmed; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>if the button was repainted; <ph id="ph1">`FALSE`</ph> if the button is hidden.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCToolBar::DrawButton<ept id="p1">](#cmfctoolbar__drawbutton)</ept> method calls this method when a toolbar button must be repainted.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Override this method if you want to customize the appearance of buttons on your toolbar.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::DrawSeparator</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Repaints a separator on a toolbar.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>A pointer to a device context.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>The bounding rectangle of the location where the separator is drawn, in pixels.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>if the separator is horizontal, <ph id="ph1">`FALSE`</ph> if the separator is vertical.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBar::DoPaint<ept id="p1">](#cmfctoolbar__dopaint)</ept> calls this method for each <bpt id="p2">[</bpt>CMFCToolBar::DrawSeparator<ept id="p2">](#cmfctoolbar__drawseparator)</ept> object that has the <ph id="ph1">`TBBS_SEPARATOR`</ph> style, instead of calling <bpt id="p3">[</bpt>CMFCToolBar::DrawButton<ept id="p3">](#cmfctoolbar__drawbutton)</ept> for those buttons.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Override this method in a class derived from <bpt id="p1">[</bpt>CMFCToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept> to customize the appearance of separators on the toolbar.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>The default implementation calls <bpt id="p1">[</bpt>CMFCVisualManager::OnDrawSeparator<ept id="p1">](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondrawseparator)</ept> to draw a separator whose appearance is determined by the current visual manager.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableCustomizeButton</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Enables or disables the Customize button that appears on the toolbar.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Enables or disables the Customize button.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>The command ID of the Customize button.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>The text label of the Customize button.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>The resource string ID of the Customize button label.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Enables or disables the <bpt id="p1">**</bpt>Add or Remove Buttons<ept id="p1">**</ept> option on the menu that drops down from the button.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`iCustomizeCmd`</ph> is -1, the framework displays the Customize button when multiple toolbar buttons do not fit in the toolbar area.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>The button displays a double left-pointing arrow, or chevron, which indicates that there are more buttons.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`iCustomizeCmd`</ph> specifies a valid command ID, and <ph id="ph2">`bEnable`</ph> is <ph id="ph3">`TRUE`</ph>, the Customize button is always displayed.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>The button has a small down arrow and opens a menu that contains a command.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>This command uses the text label specified by <ph id="ph1">`strCustomizeText`</ph>.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bQuickCustomize`</ph> is also <ph id="ph2">`TRUE`</ph>, the menu displays the <bpt id="p1">**</bpt>Add or Remove Buttons<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>The framework dynamically adds to the menu any buttons that do not fit in the toolbar area before the item that is specified by <ph id="ph1">`iCustomizeCmd`</ph>.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>The chevron is displayed next to the down arrow.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableDocking</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Enables docking of the pane to the main frame.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Specifies the docking alignment to enable.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>This method extends the base class implementation, <bpt id="p1">[</bpt>CBasePane::EnableDocking<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept>, by setting the <ph id="ph1">`CBasePane::m_dwControlBarStyle`</ph> data member to <ph id="ph2">`AFX_CBRS_FLOAT`</ph>.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>This method then passes <ph id="ph1">`dwAlignment`</ph> to the base class implementation.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableLargeIcons</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Enables or disables large icons on toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>to enable large icons, <ph id="ph1">`FALSE`</ph> to disable large icons.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>By default, large icons are enabled.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableQuickCustomization</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Enables or disables the quick customization of toolbars so that the user can press the <bpt id="p1">**</bpt>Alt<ept id="p1">**</ept> key and drag a button to a new location.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>to enable quick customization, <ph id="ph1">`FALSE`</ph> to disable quick customization.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableReflections</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Enables or disables command reflection.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>to enable command reflection; <ph id="ph1">`FALSE`</ph> to disable command reflection.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Call this method to enable command reflection for toolbar buttons that contain embedded controls, such as combo boxes.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>For more information about command reflection, see <bpt id="p1">[</bpt>TN062: Message Reflection for Windows Controls<ept id="p1">](../../mfc/tn062-message-reflection-for-windows-controls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::EnableTextLabels</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Enables or disables text labels under toolbar button images.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>if text labels appear under toolbar button images; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>If text labels are enabled, all buttons on the toolbar are enlarged to provide space for the labels to be displayed under the images.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>The customization dialog box has a <bpt id="p1">**</bpt>Show text label<ept id="p1">**</ept> check-box on the <bpt id="p2">**</bpt>Toolbars<ept id="p2">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>When the user selects a toolbar and checks this option, the framework calls <ph id="ph1">`EnableTextLabels`</ph> for the selected toolbar.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>You can disable the check-box for an object derived from <bpt id="p1">[</bpt>CMFCToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept> by returning <ph id="ph1">`FALSE`</ph> from <bpt id="p2">[</bpt>CMFCToolBar::AllowChangeTextLabels<ept id="p2">](#cmfctoolbar__allowchangetextlabels)</ept> .</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::FromHandlePermanent</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the <ph id="ph1">`CMFCToolBar`</ph> object that contains the given window handle.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>The window handle to look for.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CMFCToolBar`</ph> object that contains the given window handle, or <ph id="ph2">`NULL`</ph> if no corresponding <ph id="ph3">`CMFCToolBar`</ph> object exists.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>This shared method examines each toolbar in the application for the <ph id="ph1">`CMFCToolBar`</ph> object that contains the given window handle.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetAllButtons</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Returns a read-only list of buttons in a toolbar.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>A constant reference to a <bpt id="p1">[</bpt>CObList Class<ept id="p1">](../../mfc/reference/coblist-class.md)</ept> object, which contains a collection of <bpt id="p2">[</bpt>CMFCToolBarButton Class<ept id="p2">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetAllToolbars</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Returns a read-only list of all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>A const reference to a <bpt id="p1">[</bpt>CObList Class<ept id="p1">](../../mfc/reference/coblist-class.md)</ept> object that contains a collection of <bpt id="p2">[</bpt>CMFCToolbar<ept id="p2">](../../mfc/reference/cmfctoolbar-class.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetBasicCommands</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Returns a read-only list of the basic commands defined in the application.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>A const reference to a <bpt id="p1">[</bpt>CList Class<ept id="p1">](../../mfc/reference/clist-class.md)</ept> object that contains a collection of basic commands.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Add basic commands by calling <bpt id="p1">[</bpt>CMFCToolBar::AddBasicCommand<ept id="p1">](#cmfctoolbar__addbasiccommand)</ept> or <bpt id="p2">[</bpt>CMFCToolBar::SetBasicCommands<ept id="p2">](#cmfctoolbar__setbasiccommands)</ept>.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetButton</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">[</bpt>CMFCToolBarButton Class<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object at a specified index.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Specifies the index of the button to return.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>A pointer to the toolbar button if it exists; or <ph id="ph1">`NULL`</ph> if there is no such button.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetButtonInfo</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Returns the command ID, style, and image index of the button at a specified index.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Specifies the index of the button in the list of buttons on the toolbar.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>The command ID of a button.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>The style of the button.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>The index of the image for the button.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetButtonInfo`</ph> method finds a toolbar button at the specified index and retrieves the command ID, style and image index of the button.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>If the button at the specified index does not exist, the framework sets <ph id="ph1">`nID`</ph> and <ph id="ph2">`nStyle`</ph> to 0, and <ph id="ph3">`iImage`</ph> to -1 when the method returns.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetButtonSize</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Returns the dimensions of each button on the toolbar.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CSize Class<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> object that specifies the dimensions of each button on the toolbar.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::SetSizes<ept id="p1">](#cmfctoolbar__setsizes)</ept> or <bpt id="p2">[</bpt>CMFCToolBar::SetLockedSizes<ept id="p2">](#cmfctoolbar__setlockedsizes)</ept> to set the dimensions of each button on the toolbar.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetButtonStyle</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Returns the current style of the toolbar button that is located at the specified index.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Specifies the index of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>A value that specifies the style of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ToolBar Control Styles<ept id="p1">](../../mfc/reference/toolbar-control-styles.md)</ept> for a list of possible styles.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::SetButtonStyle<ept id="p1">](#cmfctoolbar__setbuttonstyle)</ept> to set the style of a toolbar button</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetButtonText</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Returns the text label of a button that has a specified index.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>The index of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>The label text of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>The label text of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::SetButtonText<ept id="p1">](#cmfctoolbar__setbuttontext)</ept> or <bpt id="p2">[</bpt>CMFCToolBar::SetToolBarBtnText<ept id="p2">](#cmfctoolbar__settoolbarbtntext)</ept> to set the text label.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetColdImages</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of cold toolbar button images in the application.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of cold toolbar button images.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Cold images are the images that are used when the user is not interacting with the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::LoadBitmapEx<ept id="p1">](#cmfctoolbar__loadbitmapex)</ept> or <bpt id="p2">[</bpt>CMFCToolBar::LoadBitmap<ept id="p2">](#cmfctoolbar__loadbitmap)</ept> to load the cold images.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetColumnWidth</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Returns the width of the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>A value that specifies the width of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>The framework calls this method to calculate toolbar layout.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to specify a different column width for your toolbar.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetCommandButtons</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Returns a list of buttons that have a specified command ID from all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>The command ID of the buttons.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CObList Class<ept id="p1">](../../mfc/reference/coblist-class.md)</ept> object that receives the list of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>The number of buttons that have the specified command ID.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetCount</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Returns the number of buttons and separators on the toolbar.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>The number of buttons and separators on the toolbar.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetCustomizeButton</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the <ph id="ph1">`CMFCCustomizeButton`</ph> object that is associated with the toolbar.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CMFCCustomizeButton`</ph> object that is associated with the toolbar.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>This method retrieves the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button that appears at the end of the toolbar.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id="p1">](#cmfctoolbar__enablecustomizebutton)</ept> method to add the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> button to your toolbar.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>You can call the <bpt id="p1">[</bpt>CMFCToolBar::IsExistCustomizeButton<ept id="p1">](#cmfctoolbar__isexistcustomizebutton)</ept> method to determine whether the toolbar contains a valid <ph id="ph1">`CMFCCustomizeButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetDefaultImage</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>Returns the index of the default image for a toolbar button with a specified command ID.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>Specifies the command ID of the button.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>The index of the toolbar image in the shared list of images.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>Use this shared method to retrieve the index of the default image for a toolbar button with the specified command ID.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>The return value is an index into the shared collection of toolbar button images for all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::GetImages<ept id="p1">](#cmfctoolbar__getimages)</ept> method to obtain a pointer to this collection.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetDisabledImages</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of images that are used for disabled toolbar buttons in the application.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of disabled toolbar button images.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Load the disabled toolbar button images by using the <bpt id="p1">[</bpt>CMFCToolBarEditBoxButton Class<ept id="p1">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept> and <bpt id="p2">[</bpt>CMFCToolBar::LoadBitmap<ept id="p2">](#cmfctoolbar__loadbitmap)</ept> methods.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetDisabledMenuImages</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of images that are used for disabled menu buttons in the application.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of disabled menu images.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Load the disabled images by using the <bpt id="p1">[</bpt>CMFCToolBarEditBoxButton Class<ept id="p1">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept> method.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetDroppedDownMenu</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the menu button object that is currently displaying its sub-menu.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Receives the index of the button in the collection of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>A pointer to the menu button object that is displaying its sub-menu or <ph id="ph1">`NULL`</ph> if no menu is displaying its sub-menu.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>If this method returns a non- <ph id="ph1">`NULL`</ph> value and <ph id="ph2">`pIndex`</ph> is not <ph id="ph3">`NULL`</ph>, the value pointed to by <ph id="ph4">`pIndex`</ph> is set to the index of the menu button in the collection of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetGrayDisabledButtons</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Specifies whether the images of disabled buttons are dimmed versions of the regular button images, or taken from the collection of disabled button images.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>to dim the images of disabled buttons; <ph id="ph1">`FALSE`</ph>to obtain images from the collection of disabled images.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CMFCToolBar::SetGrayDisabledButtons<ept id="p1">](#cmfctoolbar__setgraydisabledbuttons)</ept> to switch between dimmed images and the images from the collection of disabled images.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetHighlightedButton</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the toolbar button that is currently highlighted.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>A pointer to a toolbar button object; or <ph id="ph1">`NULL`</ph> if no button is highlighted.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>A toolbar button is highlighted if it has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>A toolbar button is also highlighted if the toolbar buttons are hot-tracked in this application (for more information, see <bpt id="p1">[</bpt>CMFCToolBar::GetHotBorder<ept id="p1">](#cmfctoolbar__gethotborder)</ept> and <bpt id="p2">[</bpt>CMFCToolBar::SetHotBorder<ept id="p2">](#cmfctoolbar__sethotborder)</ept>) and the mouse is pointing at it when no toolbar button or menu item has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetHotBorder</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar buttons are <bpt id="p1">*</bpt>hot-tracked<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>If a button is hot-tracked, it is highlighted when the mouse moves across it.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>if the toolbar buttons are hot-tracked; otherwise, <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>By default, toolbar buttons are hot-tracked.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetHotTextColor</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>Returns the text color of the highlighted toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>COLORREF<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value that represent the current highlighted text color.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::SetHotTextColor<ept id="p1">](#cmfctoolbar__sethottextcolor)</ept> to set a new text color for highlighted toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetHwndLastFocus</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>Returns a handle to the window that had the input focus just before the toolbar did.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>A handle to window that is not derived from <bpt id="p1">[</bpt>CMFCBaseToolBar Class<ept id="p1">](../../mfc/reference/cmfcbasetoolbar-class.md)</ept>, which previously had the input focus; or <ph id="ph1">`NULL`</ph> if there is no such window.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>When a <bpt id="p1">[</bpt>CMFCToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept> control receives the input focus, it stores a handle to the window that lost the focus so that it can restore it later.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetIgnoreSetText</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>Specifies whether calls to set button labels are ignored.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>if calls to set button labels are ignored; otherwise, <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetImages</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of default button images in the application.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>CMFCToolBarImages Class<ept id="p1">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> object that contains the collection of default images for all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>This shared method provides access to the collection of all default toolbar images for the application.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::LoadBitmap<ept id="p1">](#cmfctoolbar__loadbitmap)</ept> method to add images to the collection.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetImageSize</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>Returns the current size of toolbar button images.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CSize Class<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> object that represents the current size of toolbar button images.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetImagesOffset</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>Returns the index offset used to find the toolbar button images for this toolbar in the global list of toolbar button images.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>The index offset of the toolbar images.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>All toolbar default images are stored in the global <bpt id="p1">[</bpt>CMFCToolBarImages Class<ept id="p1">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> list.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>The images for each button in the toolbar are stored consecutively in that list.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>To compute the index of the image, add the index of the button in the toolbar to the offset of the beginning of the list of images for that toolbar button.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::ButtonToIndex<ept id="p1">](#cmfctoolbar__buttontoindex)</ept> to obtain the index of a toolbar button given a pointer to the button.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::GetImages<ept id="p1">](#cmfctoolbar__getimages)</ept> to obtain a pointer to the collection of toolbar images.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetInvalidateItemRect</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>Retrieves the region of the client area that must be redrawn for the button at the given index.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>The index of the button for which to retrieve the client area.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`RECT`</ph> object that receives the region of the client area.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpRect`</ph> parameter must not be <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>If no button exists at the provided index, <ph id="ph1">`lpRect`</ph> receives a <ph id="ph2">`RECT`</ph> object that is initialized to zero.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetItemID</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>Returns the command ID of the toolbar button at a specified index.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>Specifies the index of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>The command ID of the toolbar button; or zero if the button with the specified index does not exist.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetItemRect</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>Returns the bounding rectangle of the button at a specified index.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>Specifies the index of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>A pointer to <ph id="ph1">`CRect`</ph> object that receives the coordinates of the image bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CRect`</ph> object to which <ph id="ph2">`lpRect`</ph> points is set to 0 if a button at the specified index does not exist.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the <ph id="ph1">`GetItemRect`</ph> method of the <ph id="ph2">`CMFCToolBar`</ph> class.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>IE Demo sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#6</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#9</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLargeColdImages</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of large cold toolbar button images in the application.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of large cold images.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>Cold images are the images that are used when the user is not interacting with the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::LoadBitmapEx<ept id="p1">](#cmfctoolbar__loadbitmapex)</ept> to load the large cold images.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLargeDisabledImages</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of large disabled toolbar button images in the application.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of large disabled toolbar button images.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>Large images are large versions of the regular toolbar button images.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::LoadBitmapEx<ept id="p1">](#cmfctoolbar__loadbitmapex)</ept> or <bpt id="p2">[</bpt>CMFCToolBar::LoadBitmap<ept id="p2">](#cmfctoolbar__loadbitmap)</ept> to load the large images.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLargeImages</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of large toolbar button images in the application.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of large toolbar button images.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>Large images are large versions of the regular toolbar button images.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::LoadBitmapEx<ept id="p1">](#cmfctoolbar__loadbitmapex)</ept> to load the large images.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLockedColdImages</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of locked cold images in the toolbar.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of locked cold images, or <ph id="ph1">`NULL`</ph> if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Cold images are the images that are used when the user is not interacting with the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`NULL`</ph> if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>This method also generates an assertion failure in Debug builds if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>For more information about locked toolbars, see <bpt id="p1">[</bpt>CMFCToolBar::IsLocked<ept id="p1">](#cmfctoolbar__islocked)</ept>.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::LoadBitmapEx<ept id="p1">](#cmfctoolbar__loadbitmapex)</ept> method to load the locked cold images.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLockedDisabledImages</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of locked disabled images in the toolbar.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of locked disabled images, or <ph id="ph1">`NULL`</ph> if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Disabled images are the images that the framework uses when a button has the <ph id="ph1">`TBBS_DISABLED`</ph> style.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`NULL`</ph> if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>This method also generates an assertion failure in Debug builds if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>For more information about locked toolbars, see <bpt id="p1">[</bpt>CMFCToolBar::IsLocked<ept id="p1">](#cmfctoolbar__islocked)</ept>.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::LoadBitmapEx<ept id="p1">](#cmfctoolbar__loadbitmapex)</ept> method to load the locked disabled images.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLockedImages</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of locked button images in the toolbar.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of locked toolbar button images, or <ph id="ph1">`NULL`</ph> if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`NULL`</ph> if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>This method also generates an assertion failure in Debug builds if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>For more information about locked toolbars, see <bpt id="p1">[</bpt>CMFCToolBar::IsLocked<ept id="p1">](#cmfctoolbar__islocked)</ept>.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLockedImageSize</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>Returns the default size of locked toolbar images.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSize`</ph> structure that specifies the size of locked toolbar images or an empty <ph id="ph2">`CSize`</ph> structure if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">`CSize`</ph> structure with zero width and zero height if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>This method also generates an assertion failure in Debug builds if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>For more information about locked toolbars, see <bpt id="p1">[</bpt>CMFCToolBar::IsLocked<ept id="p1">](#cmfctoolbar__islocked)</ept>.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::SetLockedSizes<ept id="p1">](#cmfctoolbar__setlockedsizes)</ept> method to specify the locked image size.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetLockedMenuImages</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of locked toolbar menu images in the toolbar.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of locked toolbar menu images, or <ph id="ph1">`NULL`</ph> if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>Locked images are versions of the regular toolbar menu images that the framework uses when the user cannot customize the toolbar.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`NULL`</ph> if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>This method also generates an assertion failure in Debug builds if the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>For more information about locked toolbars, see <bpt id="p1">[</bpt>CMFCToolBar::IsLocked<ept id="p1">](#cmfctoolbar__islocked)</ept>.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::LoadBitmapEx<ept id="p1">](#cmfctoolbar__loadbitmapex)</ept> method to load the locked menu images.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetMenuButtonSize</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>Returns the size of menu buttons in the application.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSize`</ph> object that represents the size of menu buttons, in pixels.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>The size of menu buttons on toolbars is maintained as a global variable and can be retrieved by this static method.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::SetMenuSizes<ept id="p1">](#cmfctoolbar__setmenusizes)</ept> to set this global variable.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetMenuImages</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of menu button images in the application.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of menu images.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::LoadBitmapEx<ept id="p1">](#cmfctoolbar__loadbitmapex)</ept> method to load the menu images.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::SetMenuSizes<ept id="p1">](#cmfctoolbar__setmenusizes)</ept> method to set the size of buttons and their images.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetMenuImageSize</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>Returns the size of menu button images in the application.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSize`</ph> object that represents the size of menu images.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>This method returns the size of images on toolbar menu buttons that is maintained as a global variable.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::SetMenuSizes<ept id="p1">](#cmfctoolbar__setmenusizes)</ept> to set this global variable.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetOrigButtons</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>Retrieves the collection of non-customized buttons of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>A reference to the list of non-customized buttons of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>The framework creates a copy of toolbar buttons before they are customized by the user.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCToolBar::SetButtons<ept id="p1">](#cmfctoolbar__setbuttons)</ept> method adds a copy of each button in the provided array to the list of original buttons.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCToolBar::RestoreOriginalState<ept id="p1">](#cmfctoolbar__restoreoriginalstate)</ept> method restores the original state of the toolbar by loading it from the resource file.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>To set the list of original buttons for your toolbar, call the <bpt id="p1">[</bpt>CMFCToolBar::SetOrigButtons<ept id="p1">](#cmfctoolbar__setorigbuttons)</ept> method.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetOrigResetButtons</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>Retrieves the collection of non-customized reset buttons of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>A reference to the list of non-customized reset buttons of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>When the user clicks the <bpt id="p1">**</bpt>Reset<ept id="p1">**</ept> button during customization mode, the framework uses this method to restore buttons that were removed from the toolbar.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCToolBar::SetButtons<ept id="p1">](#cmfctoolbar__setbuttons)</ept> method adds a copy of each toolbar button to the list of original reset buttons after it calls the <bpt id="p2">[</bpt>CMFCToolBar::OnReset<ept id="p2">](#cmfctoolbar__onreset)</ept> method.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>You can override the <bpt id="p1">[</bpt>CMFCToolBar::OnReset<ept id="p1">](#cmfctoolbar__onreset)</ept> method to customize the appearance of buttons after the user presses the <bpt id="p2">**</bpt>Reset<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetResourceID</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>Retrieves the resource ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>The resource ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::LoadToolBarEx<ept id="p1">](#cmfctoolbar__loadtoolbarex)</ept> method to set the resource ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetRouteCommandsViaFrame</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>Determines which object, the parent frame or the owner, sends commands to the toolbar.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>Nonzero if the parent frame sends commands to the toolbar; 0 if the owner sends commands to the toolbar.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>By default, the parent frame sends commands to the toolbar.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::SetRouteCommandsViaFrame<ept id="p1">](#cmfctoolbar__setroutecommandsviaframe)</ept> to change this behavior.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>If this method returns a nonzero value, you can retrieve a pointer to the parent frame object by using the <ph id="ph1">`CMFCToolBar::GetCommandTarget`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>See the VisualStudioDemo sample for an example that uses this method.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetRowHeight</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>Returns the height of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>The height of toolbar buttons, in pixels.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>The framework calls this method to calculate toolbar layout.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to specify a different height for your toolbar.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetShowTooltips</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>Specifies whether tool tips are displayed for toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>if tool tips are shown for toolbar buttons; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>By default tool tips are shown.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>You can change this static flag by calling <bpt id="p1">[</bpt>CMFCToolBar::SetShowTooltips<ept id="p1">](#cmfctoolbar__setshowtooltips)</ept>.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetSiblingToolBar</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>Retrieves the sibling of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>A pointer to the sibling toolbar.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>For more information about how to enable the <bpt id="p1">**</bpt>Show Buttons on One Row<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Show Buttons on Two Rows<ept id="p2">**</ept> buttons, see <bpt id="p3">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id="p3">](#cmfctoolbar__setsiblingtoolbar)</ept>.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::GetUserImages</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the collection of user-defined toolbar button images in the application.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of user-defined toolbar button images for all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::SetUserImages<ept id="p1">](#cmfctoolbar__setuserimages)</ept> method to set the collection of user-defined images in the application.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::HitTest</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>Returns the index of the toolbar button that is located at the specified position.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>The point to be tested, in client coordinates.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>The index of the button that is located at the specified position, or -1 if there is no such button or the button is a separator.</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::InsertButton</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>Inserts a button into the toolbar.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>Specifies the button to insert.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based position to insert the button at.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>The position at which the button was inserted or -1 if an error occurs.</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`iInsertAt`</ph> is -1, this method adds the button to the end of the list of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::InsertSeparator<ept id="p1">](#cmfctoolbar__insertseparator)</ept> method to insert a separator into the toolbar.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::InsertSeparator</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>Inserts a separator into the toolbar.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based position to insert the separator at.</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>This parameter must be larger than 0.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>The position at which the separator was inserted or -1 if an error occurs.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>Call this method to insert a separator between two existing buttons.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`iInsertAt`</ph> is -1, this method adds the separator to the end of the list of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>You cannot use this method to add a separator to an empty toolbar.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::InsertButton<ept id="p1">](#cmfctoolbar__insertbutton)</ept> method to insert a button into the toolbar.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::InvalidateButton</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>Invalidates the client area of the toolbar button that exists at the provided index.</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>The zero-based index of the button in the toolbar.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CMFCToolBarButton`</ph> object that exists at the provided index or <ph id="ph2">`NULL`</ph> if no such object exists.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it updates the client area that is associated with a toolbar button.</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>It calls the <bpt id="p1">[</bpt>CWnd::InvalidateRect<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__invalidaterect)</ept> method with the client rectangle of the <ph id="ph1">`CMFCToolBarButton`</ph> object that exists at the provided index.</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsAddRemoveQuickCustomize</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>Determines whether a user can add or remove toolbar buttons by using the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> menu option.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>if a user can use the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> menu option to modify the toolbar; otherwise, <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsAltCustomizeMode</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>Specifies whether <bpt id="p1">*</bpt>quick customization<ept id="p1">*</ept> is being used to drag a button.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>When quick customization is enabled, a user can press and hold the Alt key and drag a button to a new location.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>if quick customization is being used to drag a button; otherwise, <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsAutoGrayInactiveImages</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source>Specifies whether the automatic generation of inactive (non-highlighted) button images is enabled.</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>if the option to automatically dim inactive images is enabled; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>You can enable or disable automatic dimming of inactive images by calling <bpt id="p1">[</bpt>CMFCToolBar::AutoGrayInactiveImages<ept id="p1">](#cmfctoolbar__autograyinactiveimages)</ept>.</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsBasicCommand</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>Determines whether a command is on the list of basic commands.</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>Specifies the command to check.</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source>if the specified command belongs to the list of basic commands; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>This static method determines whether the command specified by <ph id="ph1">`uiCmd`</ph> belongs to the global list of basic commands.</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>You can change the list of basic commands by calling <bpt id="p1">[</bpt>CMFCToolBar::AddBasicCommand<ept id="p1">](#cmfctoolbar__addbasiccommand)</ept> or <bpt id="p2">[</bpt>CMFCToolBar::SetBasicCommands<ept id="p2">](#cmfctoolbar__setbasiccommands)</ept>.</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsButtonExtraSizeAvailable</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar can display buttons that have extended borders.</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>if the bar can display buttons with the extra border size; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source>The toolbar object returns <ph id="ph1">`TRUE`</ph> if it can display buttons that have extended borders.</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source>A toolbar button calls this method when it handles the <bpt id="p1">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd)</ept> notification and will set its internal extra border size flag accordingly.</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source>This internal flag may be retrieved later by calling <bpt id="p1">[</bpt>CMFCToolBarButton::IsExtraSize<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__isextrasize)</ept>.</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source>Override this method in a class derived from <bpt id="p1">[</bpt>CMFCToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept> and return <ph id="ph1">`TRUE`</ph> if your bar can display the toolbar buttons with the extra border size and return <ph id="ph2">`FALSE`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsButtonHighlighted</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>Determines whether the specified button is highlighted.</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>Specifies the index of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>if the specified button is highlighted; otherwise, <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsCommandPermitted</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>Determines whether a command is permitted.</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve">
          <source>Specifies the command to check.</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>if the specified command is permitted; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source>This static method determines whether the command specified by <ph id="ph1">`uiCmd`</ph> belongs to the global list of non-permitted commands.</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>You can change the list of non-permitted commands by calling <bpt id="p1">[</bpt>CMFCToolBar::SetNonPermittedCommands<ept id="p1">](#cmfctoolbar__setnonpermittedcommands)</ept>.</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsCommandRarelyUsed</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source>Determines whether a command is rarely used.</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>Specifies the command to check.</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>if the specified command is rarely used; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsCommandRarelyUsed`</ph> method returns <ph id="ph2">`FALSE`</ph> when one or more of the following conditions occur:</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve">
          <source>The specified command belongs to the list of basic commands</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source>The specified command is one of the standard commands</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve">
          <source>The framework is in customization mode</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve">
          <source>The list of basic commands is empty</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve">
          <source>More than 20% of command calls are calls to the specified command.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsCustomizeMode</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source>Specifies whether the toolbar framework is in customization mode.</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source>if the framework is in customization mode; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>You can toggle customization mode by calling <bpt id="p1">[</bpt>CMFCToolBar::SetCustomizeMode<ept id="p1">](#cmfctoolbar__setcustomizemode)</ept>.</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>The framework changes the mode when the user invokes the customization dialog box ( <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog Class<ept id="p1">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsDragButton</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>Determines whether a toolbar button is being dragged.</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>Pointer to a toolbar button.</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>if the specified button is being dragged; otherwise, <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsExistCustomizeButton</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar contains the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve">
          <source>if the toolbar contains the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>If this method returns <ph id="ph1">`TRUE`</ph>, the <bpt id="p1">[</bpt>CMFCToolBar::GetCustomizeButton<ept id="p1">](#cmfctoolbar__getcustomizebutton)</ept> method returns a pointer to the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> button that appears at the end of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id="p1">](#cmfctoolbar__enablecustomizebutton)</ept> method to add the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> button to your toolbar.</source>
        </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsFloating</source>
        </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar is floating.</source>
        </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve">
          <source>if the toolbar is floating; otherwise, <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsLargeIcons</source>
        </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve">
          <source>Specifies whether toolbars in the application currently display large icons.</source>
        </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve">
          <source>if the application is using large icons; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CMFCToolBar::SetLargeIcons<ept id="p1">](#cmfctoolbar__setlargeicons)</ept> to toggle between large icons and regular icons.</source>
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source>The framework automatically changes the mode when the user toggles the <bpt id="p1">**</bpt>Large icons<ept id="p1">**</ept> check-box on the <bpt id="p2">**</bpt>Options<ept id="p2">**</ept> page of the <bpt id="p3">**</bpt>Customization<ept id="p3">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsLastCommandFromButton</source>
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>Determines whether the most recently executed command was sent from the specified toolbar button.</source>
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source>Pointer to button.</source>
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>if the last command was sent from the button that <ph id="ph1">`pButton`</ph> specifies; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source>This method obtains a pointer to a <bpt id="p1">[</bpt>MSG Structure<ept id="p1">](../../mfc/reference/msg-structure1.md)</ept> by calling <ph id="ph1">`CWnd::GetCurrentMessage`</ph>.</source>
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>It then compares the <ph id="ph1">`HWND`</ph> of the button with the <ph id="ph2">`MSG::lParam`</ph> and <ph id="ph3">`MSG::hwnd`</ph> members to determine whether the button was the source of the command.</source>
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsLocked</source>
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar is locked.</source>
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source>if the toolbar is locked; otherwise, <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`TRUE`</ph> when the user cannot perform customization tasks such as repositioning toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve">
          <source>Locked toolbars use separate image lists.</source>
        </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve">
          <source>For more information about these image lists, see <bpt id="p1">[</bpt>CMFCToolBar::LoadBitmapEx<ept id="p1">](#cmfctoolbar__loadbitmapex)</ept>.</source>
        </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsOneRowWithSibling</source>
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar and its sibling toolbar are positioned on the same row.</source>
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve">
          <source>if the toolbar and its sibling are positioned on the same row; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCCustomizeButton::CreatePopupMenu<ept id="p1">](http://msdn.microsoft.com/en-us/e501083e-f78e-4d8d-900c-40bd6e2bb7f8)</ept> method calls this method to determine how to show the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> pop-up menu.</source>
        </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>If this method returns <ph id="ph1">`TRUE`</ph>, the framework displays the <bpt id="p1">**</bpt>Show Buttons on One Row<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source>Otherwise, the framework displays the <bpt id="p1">**</bpt>Show Buttons on Two Rows<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve">
          <source>You typically do not have to use this method.</source>
        </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source>To enable the <bpt id="p1">**</bpt>Show Buttons on One Row<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Show Buttons on Two Rows<ept id="p2">**</ept> buttons, call <bpt id="p3">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id="p3">](#cmfctoolbar__setsiblingtoolbar)</ept>.</source>
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsResourceChanged</source>
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsSibling</source>
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::IsUserDefined</source>
        </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve">
          <source>Specifies whether the toolbar is user-defined.</source>
        </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve">
          <source>if the toolbar was created by the user; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadBitmap</source>
        </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve">
          <source>Loads toolbar images from application resources.</source>
        </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source>The resource ID of the bitmap that refers to the hot toolbar images.</source>
        </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source>The resource ID of the bitmap that refers to the cold toolbar images.</source>
        </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source>The resource ID of the bitmap that refers to the regular menu images.</source>
        </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>to lock the toolbar; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve">
          <source>The resource ID of the bitmap that refers to the disabled toolbar images.</source>
        </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve">
          <source>The resource ID of the bitmap that refers to the disabled menu images.</source>
        </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve">
          <source>Nonzero if the method succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCToolBar::LoadToolBarEx<ept id="p1">](#cmfctoolbar__loadtoolbarex)</ept> method calls this method to load the images that are associated with the toolbar.</source>
        </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>Override this method to perform custom loading of image resources.</source>
        </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`LoadBitmapEx`</ph> method to load additional images after you create the toolbar.</source>
        </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadBitmapEx</source>
        </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadLargeIconsState</source>
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadParameters</source>
        </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve">
          <source>Loads global toolbar options from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source>Specifies the relative path of the Windows registry key.</source>
        </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>Nonzero if the method succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source>This method loads global parameters such as the menu animation type, the menu shadow style, and whether to display large icons from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CWinAppEx::LoadState<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate)</ept> method calls this method as a part of the initialization process of the application.</source>
        </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadState</source>
        </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source>Loads the toolbar state information from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve">
          <source>Specifies the relative path of the Windows registry key.</source>
        </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source>Specifies the control ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve">
          <source>Specifies the resource ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve">
          <source>Nonzero if the method succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source>The framework calls this method as a part of the initialization process of the application.</source>
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CWinAppEx::LoadState<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate)</ept>.</source>
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadToolBar</source>
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source>Loads the toolbar from application resources.</source>
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>The resource ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>The resource ID of the bitmap that refers to the cold toolbar images.</source>
        </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve">
          <source>The resource ID of the bitmap that refers to the regular menu images.</source>
        </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether the toolbar is locked or not.</source>
        </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the toolbar is locked.</source>
        </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>Otherwise, the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve">
          <source>The resource ID of the bitmap that refers to the disabled toolbar images.</source>
        </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source>The resource ID of the bitmap that refers to the disabled menu images.</source>
        </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>The resource ID of the bitmap that refers to the hot toolbar images.</source>
        </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>Nonzero if the method succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve">
          <source>The framework calls this method during initialization to load the images that are associated with the toolbar.</source>
        </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the <ph id="ph1">`LoadToolBar`</ph> method in the <ph id="ph2">`CMFCToolBar`</ph> class.</source>
        </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>IE Demo sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#6</source>
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#7</source>
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::LoadToolBarEx</source>
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>Loads the toolbar from application resources by using the <ph id="ph1">`CMFCToolBarInfo`</ph> helper class to enable the application to use large images.</source>
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source>The resource ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CMFCToolBarInfo`</ph> object that contains the resource IDs for the toolbar images.</source>
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether the toolbar is locked or not.</source>
        </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the toolbar is locked.</source>
        </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve">
          <source>Otherwise, the toolbar is not locked.</source>
        </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve">
          <source>Nonzero if the method succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source>Call this method to load toolbar images from the application resources.</source>
        </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::m_dblLargeImageRatio</source>
        </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>Specifies the ratio between the dimension (height or width) of large images and the dimension of regular images.</source>
        </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source>The default ratio is 2.</source>
        </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source>You can change this value to make large toolbar images larger or smaller.</source>
        </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source>The framework uses this data member when you do not specify a set of large images.</source>
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve">
          <source>For example, if you provide only the set of small images with size 16x16 and want the large images to have the size 24x24, set this data member to 1.5.</source>
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::NextMenu</source>
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnBeforeRemoveButton</source>
        </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnChangeHot</source>
        </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve">
          <source>Called by the framework when a user selects a button on the toolbar.</source>
        </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve">
          <source>Specifies the index of the toolbar button that is selected; or -1 if no toolbar button is selected.</source>
        </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source>Override this method to process notifications that the user selected a button on a toolbar.</source>
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnChangeVisualManager</source>
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnFillBackground</source>
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>Called by the framework from <bpt id="p1">[</bpt>CBasePane::DoPaint<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__dopaint)</ept> to fill the toolbar background.</source>
        </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source>A pointer to a device context.</source>
        </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBar::DoPaint<ept id="p1">](#cmfctoolbar__dopaint)</ept> calls this method when the background of a toolbar has been filled.</source>
        </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve">
          <source>Override this method to draw custom background in derived classes.</source>
        </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnGlobalFontsChanged</source>
        </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnReset</source>
        </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve">
          <source>Restores the toolbar to its original state.</source>
        </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve">
          <source>Override this method to handle notification about a toolbar reset.</source>
        </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnReset`</ph> in a class derived from <bpt id="p1">[</bpt>CMFCToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept> when the toolbar has dummy buttons that must be replaced when the toolbar returns to its original state.</source>
        </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnSetAccData</source>
        </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnSetDefaultButtonText</source>
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source>Restores the text of a toolbar button to its default state.</source>
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source>Points to a button, whose text is being set.</source>
        </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve">
          <source>ifthe text was successfully restored; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve">
          <source>Override this method to process notifications that the text of a toolbar button is being changed to its default.</source>
        </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve">
          <source>The default implementation loads the text of a button from the application resources.</source>
        </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::OnUserToolTip</source>
        </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve">
          <source>Called by the framework when the tooltip for a button is about to be displayed.</source>
        </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve">
          <source>Points to a toolbar button for which a tooltip is to be displayed.</source>
        </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`CString`</ph> object that receives the text of the tooltip.</source>
        </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`strTTText`</ph> was populated with tooltip text; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the tooltip for a toolbar button is about to be displayed.</source>
        </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`OnUserToolTip`</ph> returns <ph id="ph2">`TRUE`</ph>, the framework displays a tooltip which contains the text returned by <ph id="ph3">`OnUserToolTip`</ph> in <ph id="ph4">`strTTText`</ph>.</source>
        </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve">
          <source>Otherwise, the tooltip contains the button text.</source>
        </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnUserToolTip`</ph> to customize tool tips of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve">
          <source>The default implementation calls <bpt id="p1">[</bpt>CMFCToolBar::OnUserToolTip<ept id="p1">](#cmfctoolbar__onusertooltip)</ept> to obtain the tooltip text.</source>
        </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::PrevMenu</source>
        </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::ProcessCommand</source>
        </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>Posts a <ph id="ph1">`WM_COMMAND`</ph> message to the window that owns the toolbar.</source>
        </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve">
          <source>Pointer to a button on the toolbar.</source>
        </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve">
          <source>This method should always return <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve">
          <source>MFC uses <ph id="ph1">`FALSE`</ph> values internally.</source>
        </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve">
          <source>This method posts a <ph id="ph1">`WM_COMMAND`</ph> message to the window that owns the toolbar by calling <bpt id="p1">[</bpt>CWnd::PostMessage<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__postmessage)</ept> and passing the command ID of the specified button as the <ph id="ph2">`wParam`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>ON_COMMAND<ept id="p1">](http://msdn.microsoft.com/library/f24f8bda-2cf4-49d5-aa3d-6f2e6bb003f2)</ept> macro to map the <ph id="ph1">`WM_COMMAND`</ph> message to a member function.</source>
        </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::RemoveAllButtons</source>
        </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve">
          <source>Removes all buttons and separators from the toolbar.</source>
        </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it recreates or destroys a toolbar.</source>
        </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::RemoveButton</source>
        </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve">
          <source>Removes from the toolbar the button that has the specified index.</source>
        </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the button to remove.</source>
        </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve">
          <source>if the method succeeds, or <ph id="ph1">`FALSE`</ph> if the specified index is invalid or the index refers to the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source>This method updates additional toolbar attributes that are affected by the removal of the button.</source>
        </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>For example, this method removes nonessential separators from the toolbar and rebuilds the table of shortcut keys.</source>
        </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button, see <bpt id="p2">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id="p2">](#cmfctoolbar__enablecustomizebutton)</ept>.</source>
        </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::RemoveStateFromRegistry</source>
        </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve">
          <source>Deletes the state information for the toolbar from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve">
          <source>Specifies the registry key where the state information is located.</source>
        </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>The control ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>The resource ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>If this parameter is -1, this method uses the <bpt id="p1">[</bpt>CWnd::GetDlgCtrlID<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__getdlgctrlid)</ept> method to retrieve the resource ID.</source>
        </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve">
          <source>Nonzero if the method succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it deletes a user-defined toolbar.</source>
        </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve">
          <source>Override this method if you store additional state information in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::ReplaceButton</source>
        </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source>Replaces a toolbar button with another toolbar button.</source>
        </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source>The command ID of the button to replace.</source>
        </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source>A reference to the <ph id="ph1">`CMFCToolBarButton`</ph> to insert.</source>
        </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to replace all buttons that have the command ID specified by <ph id="ph1">`uiCmd`</ph>.</source>
        </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, all buttons that have the specified command ID are replaced.</source>
        </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source>Otherwise, the first button is replaced.</source>
        </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source>The number of buttons that are replaced.</source>
        </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve">
          <source>This method returns 0 if a button with the specified command ID does not exist on the toolbar.</source>
        </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve">
          <source>Call this method when you want to add toolbar buttons that cannot be loaded from resources.</source>
        </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve">
          <source>You can create a placeholder button at design-time and replace that button with a custom button when you initialize the toolbar.</source>
        </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve">
          <source>See the VisualStudioDemo sample for an example that uses this method.</source>
        </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the <ph id="ph1">`ReplaceButton`</ph> method in the <ph id="ph2">`CMFCToolBar`</ph> class.</source>
        </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>IE Demo sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#6</source>
        </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#10</source>
        </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::ResetAll</source>
        </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source>Restores all toolbars to their original states.</source>
        </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source>This method calls the <bpt id="p1">[</bpt>CMFCToolBar::RestoreOriginalState<ept id="p1">](#cmfctoolbar__restoreoriginalstate)</ept> method on each toolbar in the application that can be restored.</source>
        </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">[</bpt>CMFCToolBar::CanBeRestored<ept id="p1">](#cmfctoolbar__canberestored)</ept> method to determine whether a toolbar can be restored.</source>
        </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::ResetAllImages</source>
        </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve">
          <source>Clears all toolbar image collections in the application.</source>
        </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve">
          <source>This method clears the image collections that are initialized by the <bpt id="p1">[</bpt>CMFCToolBar::LoadToolBar<ept id="p1">](#cmfctoolbar__loadtoolbar)</ept> and <bpt id="p2">[</bpt>CMFCToolBar::LoadBitmap<ept id="p2">](#cmfctoolbar__loadbitmap)</ept> methods.</source>
        </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::ResetImages</source>
        </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::RestoreFocus</source>
        </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::RestoreOriginalState</source>
        </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve">
          <source>Restores the original state of a toolbar.</source>
        </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source>if the method succeeds, or <ph id="ph1">`FALSE`</ph> if the method fails or the toolbar is user-defined.</source>
        </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>This method loads the toolbar from the resource file by using the <bpt id="p1">[</bpt>CMFCToolBar::LoadToolBar<ept id="p1">](#cmfctoolbar__loadtoolbar)</ept> method.</source>
        </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the user chooses the <bpt id="p1">**</bpt>Reset All<ept id="p1">**</ept> button on the <bpt id="p2">**</bpt>Toolbars<ept id="p2">**</ept> page of a customization dialog box.</source>
        </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SaveParameters</source>
        </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SaveState</source>
        </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve">
          <source>Saves the state information for the toolbar in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve">
          <source>Specifies the relative path of the Windows registry key.</source>
        </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source>The control ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve">
          <source>The resource ID of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve">
          <source>Nonzero if the method succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it saves the application state to the registry.</source>
        </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CWinAppEx::SaveState<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__savestate)</ept>.</source>
        </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetBasicCommands</source>
        </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve">
          <source>Sets the list of commands that are always displayed when a user opens a menu.</source>
        </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CList`</ph> object that contains a collection of commands.</source>
        </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve">
          <source>A basic command is always displayed when the menu is opened.</source>
        </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve">
          <source>This method is meaningful when the user chooses to view recently used commands.</source>
        </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBar::AddBasicCommand<ept id="p1">](#cmfctoolbar__addbasiccommand)</ept> method to add a command to the list of basic commands.</source>
        </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBar::GetBasicCommands<ept id="p1">](#cmfctoolbar__getbasiccommands)</ept> method to retrieve the list of basic commands that is used by your application.</source>
        </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve">
          <source>See the Explorer sample for an example that uses this method.</source>
        </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetButtonInfo</source>
        </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>Sets the command ID, style, and image ID of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve">
          <source>The zero-based index of the button whose properties are set.</source>
        </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve">
          <source>The command ID of the button.</source>
        </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve">
          <source>The style of the button.</source>
        </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ToolBar Control Styles<ept id="p1">](../../mfc/reference/toolbar-control-styles.md)</ept> for the list of available toolbar button styles.</source>
        </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve">
          <source>The zero-based image index of the button (that is, the index in the collection of toolbar images).</source>
        </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve">
          <source>Call this method to set the properties of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve">
          <source>In Debug builds, this method generates an assertion failure if the index that is specified by <ph id="ph1">`nIndex`</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::SetButtonStyle<ept id="p1">](#cmfctoolbar__setbuttonstyle)</ept> method to set only the style of the button.</source>
        </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetButtons</source>
        </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve">
          <source>Sets the buttons for the toolbar.</source>
        </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source>A pointer to the array of command IDs of the buttons to insert.</source>
        </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve">
          <source>The number of items in <ph id="ph1">`lpIDArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to associate the existing button images with the inserted buttons.</source>
        </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the images are remapped.</source>
        </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve">
          <source>Nonzero if the method succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve">
          <source>Call this method to remove existing buttons from a toolbar and insert a collection of new buttons.</source>
        </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve">
          <source>This method adds the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button to the toolbar and sends the <ph id="ph1">`AFX_WM_RESETTOOLBAR`</ph> message to the parent window of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button, see <bpt id="p2">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id="p2">](#cmfctoolbar__enablecustomizebutton)</ept>.</source>
        </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetButtonStyle</source>
        </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source>Sets the style of the toolbar button at the given index.</source>
        </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve">
          <source>The zero-based index of the toolbar button whose style is to be set.</source>
        </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve">
          <source>The style of the button.</source>
        </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ToolBar Control Styles<ept id="p1">](../../mfc/reference/toolbar-control-styles.md)</ept> for the list of available toolbar button styles.</source>
        </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve">
          <source>This method removes the <ph id="ph1">`TBBS_PRESSED`</ph> style if <ph id="ph2">`nStyle`</ph> is <ph id="ph3">`TBBS_DISABLED`</ph> because the user cannot click a disabled button.</source>
        </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetButtonText</source>
        </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve">
          <source>Sets the text label of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve">
          <source>The index of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve">
          <source>The text label of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve">
          <source>Must be non- <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve">
          <source>if the method succeeds; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph> if the provided index does not refer to a valid toolbar button.</source>
        </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetCommandUsageOptions</source>
        </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve">
          <source>Specifies when rarely used commands do not appear in the menu of the application.</source>
        </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve">
          <source>Specifies the number of times that commands must be executed before the framework shows only the basic and recently-used commands.</source>
        </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve">
          <source>The percentage of times that a command must be executed to be considered a recently-used command.</source>
        </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`nMinUsagePercentage`</ph> is equal to or larger than 100; otherwise <ph id="ph2">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve">
          <source>Call this method to customize the algorithm that the framework uses to determine how basic and recently used menu items appear.</source>
        </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve">
          <source>For more information about basic commands, see <bpt id="p1">[</bpt>CMFCToolBar::AddBasicCommand<ept id="p1">](#cmfctoolbar__addbasiccommand)</ept>.</source>
        </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve">
          <source>This class uses the <ph id="ph1">`CMFCCmdUsageCount`</ph> class to track the usage count of commands.</source>
        </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve">
          <source>For more information about this class, see <bpt id="p1">[</bpt>CMFCCmdUsageCount Class<ept id="p1">](../../mfc/reference/cmfccmdusagecount-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetCustomizeMode</source>
        </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve">
          <source>Enables or disables customization mode for all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to enable or disable customization mode.</source>
        </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve">
          <source>Set this parameter to <ph id="ph1">`TRUE`</ph> to enable customization mode or <ph id="ph2">`FALSE`</ph> to disable it.</source>
        </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve">
          <source>if calling this method changes the customization mode; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve">
          <source>This method adjusts the layout of and redraws each toolbar in the application.</source>
        </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::IsCustomizeMode<ept id="p1">](#cmfctoolbar__iscustomizemode)</ept> method to determine whether the application is in customization mode,</source>
        </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetGrayDisabledButtons</source>
        </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve">
          <source>Specifies whether unavailable buttons on the toolbar are dimmed, or whether button-unavailable images are used.</source>
        </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies how to display unavailable buttons.</source>
        </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the framework dims the buttons.</source>
        </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve">
          <source>Otherwise, the framework uses the collection of button-unavailable images.</source>
        </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve">
          <source>By default, unavailable buttons are dimmed.</source>
        </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetHeight</source>
        </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve">
          <source>Sets the height of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve">
          <source>The height of the toolbar, in pixels.</source>
        </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve">
          <source>This method redraws the toolbar after it sets the height.</source>
        </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetHelpMode</source>
        </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetHot</source>
        </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetHotBorder</source>
        </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve">
          <source>Specifies whether toolbar buttons are hot-tracked.</source>
        </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to hot-track toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the toolbar hot-tracks its buttons.</source>
        </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve">
          <source>Otherwise, the toolbar does not hot-track its buttons.</source>
        </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve">
          <source>If a button is hot-tracked, the framework highlights the button when the mouse moves across it.</source>
        </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve">
          <source>By default, each toolbar hot-tracks its buttons.</source>
        </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::GetHotBorder<ept id="p1">](#cmfctoolbar__gethotborder)</ept> method to determine whether the toolbar hot-tracks its buttons.</source>
        </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetHotTextColor</source>
        </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve">
          <source>Sets the text color for hot toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve">
          <source>Specifies the text color for toolbar buttons that are hot-tracked.</source>
        </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve">
          <source>For more information about hot-tracked toolbar buttons, see <bpt id="p1">[</bpt>CMFCToolBar::GetHotBorder<ept id="p1">](#cmfctoolbar__gethotborder)</ept> and <bpt id="p2">[</bpt>CMFCToolBar::SetHotBorder<ept id="p2">](#cmfctoolbar__sethotborder)</ept>.</source>
        </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetIgnoreSetText</source>
        </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetLargeIcons</source>
        </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve">
          <source>Specifies whether toolbar buttons display large icons.</source>
        </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies which icons to use.</source>
        </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the framework displays large icons.</source>
        </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve">
          <source>Otherwise, the framework displays regular icons.</source>
        </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the user changes the state of the <bpt id="p1">**</bpt>Large Icons<ept id="p1">**</ept> check box in the <bpt id="p2">**</bpt>Options<ept id="p2">**</ept> tab of the <bpt id="p3">**</bpt>Customize<ept id="p3">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve">
          <source>This method resizes all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve">
          <source>By default, the framework displays regular icons.</source>
        </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box, see <bpt id="p2">[</bpt>CMFCToolBarsCustomizeDialog Class<ept id="p2">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetLockedSizes</source>
        </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve">
          <source>Sets the sizes of locked buttons and locked images on the toolbar.</source>
        </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve">
          <source>Specifies the size of locked toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve">
          <source>Specifies the size of locked toolbar images.</source>
        </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve">
          <source>Specifies whether to scale or not locked toolbar images in high DPI mode.</source>
        </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve">
          <source>The default size of locked buttons is 23x22 pixels.</source>
        </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve">
          <source>The default size of locked images is 16x15 pixels.</source>
        </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::GetLockedImageSize<ept id="p1">](#cmfctoolbar__getlockedimagesize)</ept> method to retrieve the size of locked images.</source>
        </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::GetButtonSize<ept id="p1">](#cmfctoolbar__getbuttonsize)</ept> method to retrieve the size of locked toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetMaskMode</source>
        </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetMenuSizes</source>
        </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve">
          <source>Sets the size of toolbar menu buttons and their images.</source>
        </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve">
          <source>Specifies the size of toolbar buttons, in pixels.</source>
        </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve">
          <source>Specifies the size of toolbar images, in pixels.</source>
        </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve">
          <source>By default, menu buttons and their images have an undefined size.</source>
        </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::GetMenuButtonSize<ept id="p1">](#cmfctoolbar__getmenubuttonsize)</ept> method to determine the size of menu buttons and the <bpt id="p2">[</bpt>CMFCToolBar::GetMenuImageSize<ept id="p2">](#cmfctoolbar__getmenuimagesize)</ept> method to determine the size of menu button images.</source>
        </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve">
          <source>See the IEDemo and MSMoneyDemo samples for examples that use this method.</source>
        </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetNonPermittedCommands</source>
        </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve">
          <source>Sets the list of commands that cannot be executed by the user.</source>
        </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CList`</ph> object that contains the commands that cannot be executed by the user.</source>
        </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve">
          <source>Call this method to prevent the user from selecting certain commands.</source>
        </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve">
          <source>For example, you might want to prevent the user from selecting certain commands for security reasons.</source>
        </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve">
          <source>See the MDITabsDemo and MenuSubSet samples for examples that use this method.</source>
        </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve">
          <source>This method clears the previous list of non-permitted commands.</source>
        </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve">
          <source>By default, the list of non-permitted commands is empty.</source>
        </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetOneRowWithSibling</source>
        </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve">
          <source>Positions the toolbar and its sibling on the same row.</source>
        </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the user clicks the <bpt id="p1">**</bpt>Show Buttons on One Row<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id="p1">](#cmfctoolbar__setsiblingtoolbar)</ept> method to enable the <bpt id="p2">**</bpt>Show Buttons on One Row<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Show Buttons on Two Rows<ept id="p3">**</ept> buttons.</source>
        </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id="p1">](#cmfctoolbar__setsiblingtoolbar)</ept> for this toolbar, the sibling toolbar is moved to the row of this toolbar.</source>
        </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve">
          <source>Otherwise, this toolbar is moved to the row of the sibling.</source>
        </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve">
          <source>The framework calls the <bpt id="p1">[</bpt>CMFCToolBar::SetTwoRowsWithSibling<ept id="p1">](#cmfctoolbar__settworowswithsibling)</ept> method when the user clicks the <bpt id="p2">**</bpt>Show Buttons on Two Rows<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetOrigButtons</source>
        </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetPermament</source>
        </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can close the toolbar.</source>
        </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether a user can close the toolbar.</source>
        </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, a user cannot close the toolbar.</source>
        </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve">
          <source>Otherwise, a user can close the toolbar.</source>
        </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve">
          <source>By default, a user can close each toolbar.</source>
        </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::CanBeClosed<ept id="p1">](#cmfctoolbar__canbeclosed)</ept> method to determine whether a user can close the toolbar.</source>
        </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetRouteCommandsViaFrame</source>
        </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve">
          <source>Specifies whether the parent frame or the owner sends commands to the toolbar.</source>
        </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the parent frame sends commands to the toolbar.</source>
        </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve">
          <source>Otherwise, the owner sends commands to the toolbar.</source>
        </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve">
          <source>By default, the parent frame sends commands to the toolbar.</source>
        </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::GetRouteCommandsViaFrame<ept id="p1">](#cmfctoolbar__getroutecommandsviaframe)</ept> method to determine whether the parent frame or the owner sends commands to the toolbar.</source>
        </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetShowTooltips</source>
        </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve">
          <source>Specifies whether the framework displays tool tips.</source>
        </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the framework shows tool tips.</source>
        </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve">
          <source>Otherwise, the framework hides tool tips.</source>
        </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve">
          <source>By default, the framework shows tool tips.</source>
        </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::GetShowTooltips<ept id="p1">](#cmfctoolbar__getshowtooltips)</ept> method to determine whether the framework shows tool tips.</source>
        </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetSiblingToolBar</source>
        </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve">
          <source>Specifies the sibling of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve">
          <source>A pointer to the sibling toolbar.</source>
        </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve">
          <source>This method enables the <bpt id="p1">**</bpt>Show Buttons on One Row<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Show Buttons on Two Rows<ept id="p2">**</ept> buttons that are shown when the user displays the <bpt id="p3">**</bpt>Customize<ept id="p3">**</ept> pop-up menu.</source>
        </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve">
          <source>Call this method when you want to enable the user to specify whether related toolbars appear on the same row or on different rows.</source>
        </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve">
          <source>Call this method after you enable the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button that appears on the toolbar.</source>
        </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve">
          <source>To enable the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button, call the <bpt id="p2">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id="p2">](#cmfctoolbar__enablecustomizebutton)</ept> method.</source>
        </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve">
          <source>To retrieve the sibling of a toolbar, call <bpt id="p1">[</bpt>CMFCToolBar::GetSiblingToolBar<ept id="p1">](#cmfctoolbar__getsiblingtoolbar)</ept>.</source>
        </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetSizes</source>
        </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve">
          <source>Specifies the sizes of buttons and images on all toolbars.</source>
        </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve">
          <source>The size of toolbar buttons, in pixels.</source>
        </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve">
          <source>The size of toolbar button images, in pixels.</source>
        </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve">
          <source>The default size of toolbar buttons is 23x22 pixels.</source>
        </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve">
          <source>The default size of toolbar button images is 16x15 pixels.</source>
        </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::GetImageSize<ept id="p1">](#cmfctoolbar__getimagesize)</ept> method to retrieve the size of toolbar button images.</source>
        </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::GetButtonSize<ept id="p1">](#cmfctoolbar__getbuttonsize)</ept> method to retrieve the size of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetToolBarBtnText</source>
        </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve">
          <source>Specifies properties of a button on the toolbar.</source>
        </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve">
          <source>The zero-based index of the toolbar button in the list of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve">
          <source>Specifies the text label of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the framework shows the text label.</source>
        </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve">
          <source>Otherwise, the framework hides the text label.</source>
        </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the framework shows the toolbar button image.</source>
        </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve">
          <source>Otherwise, the framework hides the toolbar button image.</source>
        </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve">
          <source>By default, the framework shows the images of toolbar buttons but does not show the text label of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve">
          <source>In Debug builds, this method generates an assertion failure if <ph id="ph1">`nBtnIndex`</ph> does not refer to a valid toolbar button or the toolbar button is a separator.</source>
        </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetTwoRowsWithSibling</source>
        </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve">
          <source>Positions the toolbar and its sibling on separate rows.</source>
        </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the user clicks the <bpt id="p1">**</bpt>Show Buttons on Two Rows<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id="p1">](#cmfctoolbar__setsiblingtoolbar)</ept> method to enable the <bpt id="p2">**</bpt>Show Buttons on One Row<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Show Buttons on Two Rows<ept id="p3">**</ept> buttons.</source>
        </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id="p1">](#cmfctoolbar__setsiblingtoolbar)</ept> for this toolbar, the sibling toolbar is moved to a separate row.</source>
        </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve">
          <source>Otherwise, this toolbar is moved to a separate row.</source>
        </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve">
          <source>The framework calls the <bpt id="p1">[</bpt>CMFCToolBar::SetOneRowWithSibling<ept id="p1">](#cmfctoolbar__setonerowwithsibling)</ept> method when the user clicks the <bpt id="p2">**</bpt>Show Buttons on One Row<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::SetUserImages</source>
        </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve">
          <source>Sets the collection of user-defined images in the application.</source>
        </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve">
          <source>A pointer to the collection of user-defined images.</source>
        </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve">
          <source>Nonzero if the method succeeds; otherwise 0 if the specified <ph id="ph1">`CMFCToolBarImages`</ph> object is not valid or has an image size that differs from the default image size of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve">
          <source>The framework uses user-defined images to draw toolbar buttons that are customized by the user.</source>
        </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve">
          <source>The image list specified by <ph id="ph1">`pUserImages`</ph> is shared among all toolbars in the application.</source>
        </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve">
          <source>This method generates an assertion failure in Debug builds if the specified <ph id="ph1">`CMFCToolBarImages`</ph> object is not valid or has an image size that differs from the default image size of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve">
          <source>The OutlookDemo, ToolTipDemo, and VisualStudioDemo samples use this method to set the global collection of user-defined images.</source>
        </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve">
          <source>They load the file that is named UserImages.bmp, which is located in the working directory of the application.</source>
        </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBar::GetUserImages<ept id="p1">](#cmfctoolbar__getuserimages)</ept> method to retrieve the collection of user-defined images in the application.</source>
        </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::StretchPane</source>
        </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve">
          <source>Stretches the toolbar vertically or horizontally, and repositions the buttons if necessary.</source>
        </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve">
          <source>The amount, in pixels, by which to stretch the pane.</source>
        </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, stretches the pane vertically.</source>
        </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`FALSE`</ph>, stretches the pane horizontally.</source>
        </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSize`</ph> object that specifies the size of the toolbar client area.</source>
        </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve">
          <source>This method calls <bpt id="p1">[</bpt>CMFCToolBar::WrapToolBar<ept id="p1">](#cmfctoolbar__wraptoolbar)</ept> to reposition the buttons within the stretched toolbar.</source>
        </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve">
          <source>The return value is determined by calling <bpt id="p1">[</bpt>CMFCToolBar::CalcSize<ept id="p1">](#cmfctoolbar__calcsize)</ept>.</source>
        </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::TranslateChar</source>
        </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve">
          <source>Executes a button command if the specified key code corresponds to a valid keyboard shortcut.</source>
        </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve">
          <source>Specifies a virtual key code.</source>
        </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve">
          <source>For a list of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve">
          <source>if the specified key code is either unprintable or does not correspond to a valid keyboard shortcut; <ph id="ph1">`TRUE`</ph> if the specified key code corresponds to a drop-down menu option; otherwise, the return value from <bpt id="p1">[</bpt>CMFCToolBar::ProcessCommand<ept id="p1">](#cmfctoolbar__processcommand)</ept>.</source>
        </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a key is pressed together with the Alt key.</source>
        </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::UpdateButton</source>
        </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve">
          <source>Updates the state of the specified button.</source>
        </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the button to update.</source>
        </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::WrapToolBar</source>
        </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve">
          <source>Repositions toolbar buttons within the given dimensions.</source>
        </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve">
          <source>Maximum width of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve">
          <source>Maximum height of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve">
          <source>Not used if the toolbar is floating.</source>
        </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve">
          <source>Pointer to a device context.</source>
        </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve">
          <source>If NULL, the device context for the toolbar is used.</source>
        </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve">
          <source>Button width.</source>
        </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve">
          <source>If -1, the current width is used.</source>
        </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve">
          <source>[in] m</source>
        </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve">
          <source>Button height.</source>
        </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve">
          <source>If -1, the current height is used.</source>
        </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve">
          <source>The number of rows of buttons on the toolbar.</source>
        </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve">
          <source>This method repositions buttons within the toolbar, wrapping buttons to additional rows if necessary.</source>
        </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::m_bDontScaleImages</source>
        </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve">
          <source>Specifies whether or not to scale toolbar images in high DPI mode.</source>
        </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar Class</source>
        </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve">
          <source>CMFCPopupMenuBar Class</source>
        </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve">
          <source>CMFCDropDownToolBar Class</source>
        </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve">
          <source>Walkthrough: Putting Controls On Toolbars</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>