{"nodes":[{"pos":[12,40],"content":"ptr::Detach | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ptr::Detach | Microsoft Docs","pos":[0,28]}]},{"content":"ptr::Detach","pos":[668,679]},{"content":"Gives up ownership of the COM object, returning a pointer to the object.","pos":[680,752]},{"content":"Syntax","pos":[761,767]},{"content":"Return Value","pos":[821,833]},{"content":"The pointer to the COM object.","pos":[837,867]},{"content":"If no object is owned, NULL is returned.","pos":[874,914]},{"content":"Exceptions","pos":[923,933]},{"pos":[937,1125],"content":"Internally, <ph id=\"ph1\">`QueryInterface`</ph> is called on the owned COM object and any error <ph id=\"ph2\">`HRESULT`</ph> is converted to an exception by &lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;.","source":"Internally, `QueryInterface` is called on the owned COM object and any error `HRESULT` is converted to an exception by <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>."},{"content":"Remarks","pos":[1134,1141]},{"content":"first adds a reference to the COM object on behalf of the caller and then releases all references owned by the <ph id=\"ph1\">`com::ptr`</ph>.","pos":[1154,1276],"source":" first adds a reference to the COM object on behalf of the caller and then releases all references owned by the `com::ptr`."},{"content":"The caller must ultimately release the returned object to destroy it.","pos":[1278,1347]},{"content":"Example","pos":[1356,1363]},{"content":"This example implements a CLR class that uses a <ph id=\"ph1\">`com::ptr`</ph> to wrap its private member <ph id=\"ph2\">`IXMLDOMDocument`</ph> object.","pos":[1367,1478],"source":"This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object."},{"content":"The <ph id=\"ph1\">`DetachDocument`</ph> member function calls <ph id=\"ph2\">`Detach`</ph> to give up ownership of the COM object and return a pointer to the caller.","pos":[1480,1606],"source":"  The `DetachDocument` member function calls `Detach` to give up ownership of the COM object and return a pointer to the caller."},{"content":"Requirements","pos":[3828,3840]},{"pos":[3844,3878],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\com\\ptr.h&gt;","source":"**Header file** \\<msclr\\com\\ptr.h>"},{"pos":[3885,3909],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr::com","source":"**Namespace** msclr::com"},{"content":"See Also","pos":[3918,3926]},{"content":"ptr Members","pos":[3931,3942]},{"content":"ptr::Release","pos":[3975,3987]},{"content":"ptr::Attach","pos":[4020,4031]}],"content":"---\ntitle: \"ptr::Detach | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ptr.Detach\"\n  - \"msclr.com.ptr.Detach\"\n  - \"ptr::Detach\"\n  - \"msclr::com::ptr::Detach\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ptr::Detach\"\nms.assetid: 23370c8a-8f79-4880-9fa1-46e110c1a92c\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ptr::Detach\nGives up ownership of the COM object, returning a pointer to the object.  \n  \n## Syntax  \n  \n```  \n_interface_type * Detach();  \n```  \n  \n## Return Value  \n The pointer to the COM object.  \n  \n If no object is owned, NULL is returned.  \n  \n## Exceptions  \n Internally, `QueryInterface` is called on the owned COM object and any error `HRESULT` is converted to an exception by <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>.  \n  \n## Remarks  \n `Detach` first adds a reference to the COM object on behalf of the caller and then releases all references owned by the `com::ptr`.  The caller must ultimately release the returned object to destroy it.  \n  \n## Example  \n This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object.  The `DetachDocument` member function calls `Detach` to give up ownership of the COM object and return a pointer to the caller.  \n  \n```  \n// comptr_detach.cpp  \n// compile with: /clr /link msxml2.lib  \n#include <msxml2.h>  \n#include <msclr\\com\\ptr.h>  \n  \n#import <msxml3.dll> raw_interfaces_only  \n  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \nusing namespace msclr;  \n  \n// a ref class that uses a com::ptr to contain an   \n// IXMLDOMDocument object  \nref class XmlDocument {  \npublic:  \n   // construct the internal com::ptr with a null interface  \n   // and use CreateInstance to fill it  \n   XmlDocument(String^ progid) {  \n      m_ptrDoc.CreateInstance(progid);     \n   }  \n  \n   // detach the COM object and return it  \n   // this releases the internal reference to the object  \n   IXMLDOMDocument* DetachDocument() {  \n      return m_ptrDoc.Detach();  \n   }  \n  \n   // note that the destructor will call the com::ptr destructor  \n   // and automatically release the reference to the COM object  \n  \nprivate:  \n   com::ptr<IXMLDOMDocument> m_ptrDoc;  \n};  \n  \n// unmanaged function that loads XML into a raw XML DOM Document object  \nHRESULT LoadXml(IXMLDOMDocument* pDoc, BSTR bstrXml) {  \n   HRESULT hr = S_OK;  \n   VARIANT_BOOL bSuccess;  \n   hr = pDoc->loadXML(bstrXml, &bSuccess);  \n   if (S_OK == hr && !bSuccess) {  \n      hr = E_FAIL;  \n   }  \n   return hr;  \n}  \n  \n// use the ref class to handle an XML DOM Document object  \nint main() {  \n   IXMLDOMDocument* pDoc = NULL;  \n   BSTR bstrXml = NULL;  \n  \n   try {  \n      // create the class from a progid string  \n      XmlDocument doc(\"Msxml2.DOMDocument.3.0\");  \n  \n      bstrXml = ::SysAllocString(L\"<word>persnickety</word>\");  \n      if (NULL == bstrXml) {  \n         throw gcnew OutOfMemoryException(\"bstrXml\");  \n      }  \n      // detach the document object from the ref class  \n      pDoc = doc.DetachDocument();  \n      // use unmanaged function and raw object to load xml  \n      Marshal::ThrowExceptionForHR(LoadXml(pDoc, bstrXml));  \n      // release document object as the ref class no longer owns it  \n      pDoc->Release();  \n      pDoc = NULL;  \n   }  \n   catch (Exception^ e) {  \n      Console::WriteLine(e);     \n   }  \n   finally {  \n      if (NULL != pDoc) {  \n         pDoc->Release();  \n      }  \n  \n   }  \n}  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\com\\ptr.h>  \n  \n **Namespace** msclr::com  \n  \n## See Also  \n [ptr Members](../dotnet/ptr-members.md)   \n [ptr::Release](../dotnet/ptr-release.md)   \n [ptr::Attach](../dotnet/ptr-attach.md)"}