<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7a7044c382741585da9f145c5a93415cd7bd369</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\how-to-interface-between-exceptional-and-non-exceptional-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b406acfc05bb862244f12de74a1d32a6d0a3b9fa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95f0933027161950e3f042e33ef396079239ed1e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Interface Between Exceptional and Non-Exceptional Code | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Interface Between Exceptional and Non-Exceptional Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes how to implement consistent exception-handling in a C++ module, and also how to translate those exceptions to and from error codes at the exception boundaries.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sometimes a C++ module has to interface with code that doesn't use exceptions (non-exceptional code).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Such an interface is known as an <bpt id="p1">*</bpt>exception boundary<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, you may want to call the Win32 function <ph id="ph1">`CreateFile`</ph> in your C++ program.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>doesn't throw exceptions; instead it sets error codes that can be retrieved by the <ph id="ph1">`GetLastError`</ph> function.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If your C++ program is non-trivial, then in it you probably prefer to have a consistent exception-based error-handling policy.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>And you probably don't want to abandon exceptions just because you interface with non-exceptional code, and neither do you want to mix exception-based and non-exception-based error policies in your C++ module.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Calling Non-Exceptional Functions from C++</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you call a non-exceptional function from C++, the idea is to wrap that function in a C++ function that detects any errors and then possibly throws an exception.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you design such a wrapper function, first decide which type of exception guarantee to provide:  no-throw, strong, or basic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Second, design the function so that all resources, for example, file handles, are correctly released if an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Typically, this means that you use smart pointers or similar resource managers to own the resources.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about design considerations, see <bpt id="p1">[</bpt>How to: Design for Exception Safety<ept id="p1">](../cpp/how-to-design-for-exception-safety.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows C++ functions that use the Win32 <ph id="ph1">`CreateFile`</ph> and <ph id="ph2">`ReadFile`</ph> functions internally to open and read two files.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`File`</ph> class is a resource acquisition is initialization (RAII) wrapper for the file handles.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Its constructor detects a "file not found" condition and throws an exception to propagate the error up the call stack of the C++ module (in this example, the <ph id="ph1">`main()`</ph> function).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If an exception is thrown after a <ph id="ph1">`File`</ph> object is fully constructed, the destructor automatically calls <ph id="ph2">`CloseHandle`</ph> to release the file handle.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(If you prefer, you can use the Active Template Library (ATL) <ph id="ph1">`CHandle`</ph> class for this same purpose, or a <ph id="ph2">`unique_ptr`</ph> together with a custom deleter.) The functions that call Win32 and CRT APIs detect errors and then throw C++ exceptions using the locally-defined <ph id="ph3">`ThrowLastErrorIf`</ph> function, which in turn uses the <ph id="ph4">`Win32Exception`</ph> class, derived from the <ph id="ph5">`runtime_error`</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>All functions in this example provide a strong exception guarantee; if an exception is thrown at any point in these functions, no resources are leaked and no program state is modified.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Calling Exceptional Code from Non-Exceptional Code</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>C++ functions that are declared as "extern C" can be called by C programs.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C++ COM servers can be consumed by code written in any of a number of different languages.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When you implement public exception-aware functions in C++ to be called by non-exceptional code, the C++ function must not allow any exceptions to propagate back to the caller.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Therefore, the C++ function must specifically catch every exception that it knows how to handle and, if appropriate, convert the exception to an error code that the caller understands.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If not all potential exceptions are known, the C++ function should have a <ph id="ph1">`catch(â€¦)`</ph> block as the last handler.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In such a case, it's best to report a fatal error to the caller, because your program might be in an unknown state.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example shows a function that assumes that any exception that might be thrown is either a Win32Exception or an exception type derived from <ph id="ph1">`std::exception`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The function catches any exception of these types and propagates the error information as a Win32 error code to the caller.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When you convert from exceptions to error codes, one potential issue is that error codes often don't contain the richness of information that an exception can store.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To address this, you can provide a <ph id="ph1">`catch`</ph> block for each specific exception type that might be thrown, and perform logging to record the details of the exception before it is converted to an error code.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This approach can create a lot of code repetition if multiple functions all use the same set of <ph id="ph1">`catch`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A good way to avoid code repetition is by refactoring those blocks into one private utility function that implements the <ph id="ph1">`try`</ph> and <ph id="ph2">`catch`</ph> blocks and accepts a function object that is invoked in the <ph id="ph3">`try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In each public function, pass the code to the utility function as a lambda expression.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example shows how to write the lambda expression that defines the functor.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When a functor is defined "inline" by using a lambda expression, it is often easier to read than it would be if it were written as a named function object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information about lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../cpp/lambda-expressions-in-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Errors and Exception Handling</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>How to: Design for Exception Safety</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>