{"nodes":[{"pos":[12,49],"content":"allocator_base Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"allocator_base Class | Microsoft Docs","pos":[0,37]}]},{"pos":[908,928],"content":"allocator_base Class","linkify":"allocator_base Class","nodes":[{"content":"allocator_base Class","pos":[0,20]}]},{"content":"Defines the base class and common functions needed to create a user-defined allocator from a synchronization filter.","pos":[929,1045]},{"pos":[1054,1060],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1141,1151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1158,1167]},{"content":"Description","pos":[1168,1179]},{"content":"The type of elements allocated by the allocator.","pos":[1229,1277]},{"pos":[1289,1616],"content":"The synchronization policy for the allocator, which is <bpt id=\"p1\">[</bpt>sync_none Class<ept id=\"p1\">](../standard-library/sync-none-class.md)</ept>, <bpt id=\"p2\">[</bpt>sync_per_container Class<ept id=\"p2\">](../standard-library/sync-per-container-class.md)</ept>, <bpt id=\"p3\">[</bpt>sync_per_thread Class<ept id=\"p3\">](../standard-library/sync-per-thread-class.md)</ept>, or <bpt id=\"p4\">[</bpt>sync_shared Class<ept id=\"p4\">](../standard-library/sync-shared-class.md)</ept>.","source":"The synchronization policy for the allocator, which is [sync_none Class](../standard-library/sync-none-class.md), [sync_per_container Class](../standard-library/sync-per-container-class.md), [sync_per_thread Class](../standard-library/sync-per-thread-class.md), or [sync_shared Class](../standard-library/sync-shared-class.md)."},{"pos":[1627,1639],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[1660,1709],"content":"<bpt id=\"p1\">[</bpt>allocator_base<ept id=\"p1\">](#allocator_base__allocator_base)</ept>","source":"[allocator_base](#allocator_base__allocator_base)"},{"pos":[1710,1756],"content":"Constructs an object of type <ph id=\"ph1\">`allocator_base`</ph>.","source":"Constructs an object of type `allocator_base`."},{"pos":[1767,1775],"content":"TypeDefs","linkify":"TypeDefs","nodes":[{"content":"TypeDefs","pos":[0,8]}]},{"pos":[1796,1843],"content":"<bpt id=\"p1\">[</bpt>const_pointer<ept id=\"p1\">](#allocator_base__const_pointer)</ept>","source":"[const_pointer](#allocator_base__const_pointer)"},{"content":"A type that provides a constant pointer to the type of object managed by the allocator.","pos":[1844,1931]},{"pos":[1936,1987],"content":"<bpt id=\"p1\">[</bpt>const_reference<ept id=\"p1\">](#allocator_base__const_reference)</ept>","source":"[const_reference](#allocator_base__const_reference)"},{"content":"A type that provides a constant reference to type of object managed by the allocator.","pos":[1988,2073]},{"pos":[2078,2129],"content":"<bpt id=\"p1\">[</bpt>difference_type<ept id=\"p1\">](#allocator_base__difference_type)</ept>","source":"[difference_type](#allocator_base__difference_type)"},{"content":"A signed integral type that can represent the difference between values of pointers to the type of object managed by the allocator.","pos":[2130,2261]},{"pos":[2266,2301],"content":"<bpt id=\"p1\">[</bpt>pointer<ept id=\"p1\">](#allocator_base__pointer)</ept>","source":"[pointer](#allocator_base__pointer)"},{"content":"A type that provides a pointer to the type of object managed by the allocator.","pos":[2302,2380]},{"pos":[2385,2424],"content":"<bpt id=\"p1\">[</bpt>reference<ept id=\"p1\">](#allocator_base__reference)</ept>","source":"[reference](#allocator_base__reference)"},{"content":"A type that provides a reference to the type of object managed by the allocator.","pos":[2425,2505]},{"pos":[2510,2549],"content":"<bpt id=\"p1\">[</bpt>size_type<ept id=\"p1\">](#allocator_base__size_type)</ept>","source":"[size_type](#allocator_base__size_type)"},{"pos":[2550,2685],"content":"An unsigned integral type that can represent the length of any sequence that an object of template class <ph id=\"ph1\">`allocator_base`</ph> can allocate.","source":"An unsigned integral type that can represent the length of any sequence that an object of template class `allocator_base` can allocate."},{"pos":[2690,2731],"content":"<bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#allocator_base__value_type)</ept>","source":"[value_type](#allocator_base__value_type)"},{"content":"A type that is managed by the allocator.","pos":[2732,2772]},{"pos":[2783,2799],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[2820,2861],"content":"<bpt id=\"p1\">[</bpt>_Charalloc<ept id=\"p1\">](#allocator_base___charalloc)</ept>","source":"[_Charalloc](#allocator_base___charalloc)"},{"pos":[2862,2908],"content":"Allocates storage for an array of type <ph id=\"ph1\">`char`</ph>.","source":"Allocates storage for an array of type `char`."},{"pos":[2913,2958],"content":"<bpt id=\"p1\">[</bpt>_Chardealloc<ept id=\"p1\">](#allocator_base___chardealloc)</ept>","source":"[_Chardealloc](#allocator_base___chardealloc)"},{"pos":[2959,3022],"content":"Frees storage for the array containing elements of type <ph id=\"ph1\">`char`</ph>.","source":"Frees storage for the array containing elements of type `char`."},{"pos":[3027,3062],"content":"<bpt id=\"p1\">[</bpt>address<ept id=\"p1\">](#allocator_base__address)</ept>","source":"[address](#allocator_base__address)"},{"content":"Finds the address of an object whose value is specified.","pos":[3063,3119]},{"pos":[3124,3161],"content":"<bpt id=\"p1\">[</bpt>allocate<ept id=\"p1\">](#allocator_base__allocate)</ept>","source":"[allocate](#allocator_base__allocate)"},{"content":"Allocates a block of memory large enough to store at least some specified number of elements.","pos":[3162,3255]},{"pos":[3260,3299],"content":"<bpt id=\"p1\">[</bpt>construct<ept id=\"p1\">](#allocator_base__construct)</ept>","source":"[construct](#allocator_base__construct)"},{"content":"Constructs a specific type of object at a specified address that is initialized with a specified value.","pos":[3300,3403]},{"pos":[3408,3449],"content":"<bpt id=\"p1\">[</bpt>deallocate<ept id=\"p1\">](#allocator_base__deallocate)</ept>","source":"[deallocate](#allocator_base__deallocate)"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[3450,3533]},{"pos":[3538,3573],"content":"<bpt id=\"p1\">[</bpt>destroy<ept id=\"p1\">](#allocator_base__destroy)</ept>","source":"[destroy](#allocator_base__destroy)"},{"content":"Calls an objects destructor without deallocating the memory where the object was stored.","pos":[3574,3662]},{"pos":[3667,3704],"content":"<bpt id=\"p1\">[</bpt>max_size<ept id=\"p1\">](#allocator_base__max_size)</ept>","source":"[max_size](#allocator_base__max_size)"},{"pos":[3705,3841],"content":"Returns the number of elements of type <ph id=\"ph1\">`Type`</ph> that could be allocated by an object of class allocator before the free memory is used up.","source":"Returns the number of elements of type `Type` that could be allocated by an object of class allocator before the free memory is used up."},{"pos":[3851,3863],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3867,3892],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[3899,3920],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[3930,3999],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base___charalloc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::_Charalloc","linkify":"<a name=\"allocator_base___charalloc\"></a>  allocator_base::_Charalloc","source":"<a name=\"allocator_base___charalloc\"></a>  allocator_base::_Charalloc"},{"pos":[4003,4049],"content":"Allocates storage for an array of type <ph id=\"ph1\">`char`</ph>.","source":"Allocates storage for an array of type `char`."},{"pos":[4107,4117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[4124,4133]},{"content":"Description","pos":[4134,4145]},{"content":"The number of elements in the array to be allocated.","pos":[4196,4248]},{"pos":[4259,4271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the allocated object.","pos":[4275,4309]},{"pos":[4319,4326],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is used by containers when compiled with a compiler that cannot compile rebind.","pos":[4330,4430]},{"content":"It implements <ph id=\"ph1\">`_Charalloc`</ph> for the user-defined allocator by returning the result of a call to the <ph id=\"ph2\">`allocate`</ph> function of the synchronization filter.","pos":[4431,4580],"source":" It implements `_Charalloc` for the user-defined allocator by returning the result of a call to the `allocate` function of the synchronization filter."},{"pos":[4590,4663],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base___chardealloc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::_Chardealloc","linkify":"<a name=\"allocator_base___chardealloc\"></a>  allocator_base::_Chardealloc","source":"<a name=\"allocator_base___chardealloc\"></a>  allocator_base::_Chardealloc"},{"pos":[4667,4730],"content":"Frees storage for the array containing elements of type <ph id=\"ph1\">`char`</ph>.","source":"Frees storage for the array containing elements of type `char`."},{"pos":[4800,4810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[4817,4826]},{"content":"Description","pos":[4827,4838]},{"content":"A pointer to the first object to be deallocated from storage.","pos":[4887,4948]},{"content":"The number of objects to be deallocated from storage.","pos":[4961,5014]},{"pos":[5025,5032],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is used by containers when compiled with a compiler that cannot compile rebind.","pos":[5036,5136]},{"content":"It implements <ph id=\"ph1\">`_Chardealloc`</ph> for the user-defined allocator by calling the <ph id=\"ph2\">`deallocate`</ph> function of the synchronization filter.","pos":[5137,5264],"source":" It implements `_Chardealloc` for the user-defined allocator by calling the `deallocate` function of the synchronization filter."},{"content":"The pointer ptr must have been earlier returned by a call to <ph id=\"ph1\">`_Charalloc`</ph> for an allocator object that compares equal to <ph id=\"ph2\">`*this`</ph>, allocating an array object of the same size and type.","pos":[5265,5448],"source":" The pointer ptr must have been earlier returned by a call to `_Charalloc` for an allocator object that compares equal to `*this`, allocating an array object of the same size and type."},{"content":"<ph id=\"ph1\">`_Chardealloc`</ph> never throws an exception.","pos":[5449,5490],"source":"`_Chardealloc` never throws an exception."},{"pos":[5500,5563],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__address\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::address","linkify":"<a name=\"allocator_base__address\"></a>  allocator_base::address","source":"<a name=\"allocator_base__address\"></a>  allocator_base::address"},{"content":"Finds the address of an object whose value is specified.","pos":[5567,5623]},{"pos":[5723,5733],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The const or nonconst value of the object whose address is being searched for.","pos":[5746,5824]},{"pos":[5834,5846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A const or nonconst pointer to the object found of, respectively, const or nonconst value.","pos":[5850,5940]},{"pos":[5950,5957],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5961,6048],"content":"This member function is implemented for the user-defined allocator by returning <ph id=\"ph1\">`&amp;val`</ph>.","source":"This member function is implemented for the user-defined allocator by returning `&val`."},{"pos":[6058,6123],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__allocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::allocate","linkify":"<a name=\"allocator_base__allocate\"></a>  allocator_base::allocate","source":"<a name=\"allocator_base__allocate\"></a>  allocator_base::allocate"},{"content":"Allocates a block of memory large enough to store at least some specified number of elements.","pos":[6127,6220]},{"pos":[6359,6369],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6376,6385]},{"content":"Description","pos":[6386,6397]},{"content":"The number of elements in the array to be allocated.","pos":[6446,6498]},{"content":"This parameter is ignored.","pos":[6511,6537]},{"pos":[6548,6560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the allocated object.","pos":[6564,6598]},{"pos":[6608,6615],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6619,6926],"content":"The member function implements memory allocation for the user-defined allocator by returning the result of a call to the <ph id=\"ph1\">`allocate`</ph> function of the synchronization filter of type Type <ph id=\"ph2\">`*`</ph> if <ph id=\"ph3\">`_Nx == 1`</ph>, otherwise by returning the result of a call to <ph id=\"ph4\">`operator new(_Nx * sizeof(Type))`</ph> cast to type Type <ph id=\"ph5\">`*`</ph>.","source":"The member function implements memory allocation for the user-defined allocator by returning the result of a call to the `allocate` function of the synchronization filter of type Type `*` if `_Nx == 1`, otherwise by returning the result of a call to `operator new(_Nx * sizeof(Type))` cast to type Type `*`."},{"pos":[6936,7013],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__allocator_base\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::allocator_base","linkify":"<a name=\"allocator_base__allocator_base\"></a>  allocator_base::allocator_base","source":"<a name=\"allocator_base__allocator_base\"></a>  allocator_base::allocator_base"},{"pos":[7017,7063],"content":"Constructs an object of type <ph id=\"ph1\">`allocator_base`</ph>.","source":"Constructs an object of type `allocator_base`."},{"pos":[7188,7198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[7205,7214]},{"content":"Description","pos":[7215,7226]},{"content":"The allocator object to be copied.","pos":[7277,7311]},{"pos":[7322,7329],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first constructor constructs an <bpt id=\"p1\">[</bpt>allocator_base<ept id=\"p1\">](../standard-library/allocator-base-class.md)</ept> instance.","pos":[7333,7440],"source":"The first constructor constructs an [allocator_base](../standard-library/allocator-base-class.md) instance."},{"content":"The second constructor constructs an <ph id=\"ph1\">`allocator_base`</ph> instance such that for any <ph id=\"ph2\">`allocator_base&lt;Type, _Sync&gt;`</ph> instance <ph id=\"ph3\">`a`</ph>, <ph id=\"ph4\">`allocator_base&lt;Type, Sync&gt;(allocator_base&lt;Other, Sync&gt;(a)) == a`</ph>.","pos":[7441,7632],"source":" The second constructor constructs an `allocator_base` instance such that for any `allocator_base<Type, _Sync>` instance `a`, `allocator_base<Type, Sync>(allocator_base<Other, Sync>(a)) == a`."},{"pos":[7642,7717],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__const_pointer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::const_pointer","linkify":"<a name=\"allocator_base__const_pointer\"></a>  allocator_base::const_pointer","source":"<a name=\"allocator_base__const_pointer\"></a>  allocator_base::const_pointer"},{"content":"A type that provides a constant pointer to the type of object managed by the allocator.","pos":[7721,7808]},{"pos":[7866,7945],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__const_reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::const_reference","linkify":"<a name=\"allocator_base__const_reference\"></a>  allocator_base::const_reference","source":"<a name=\"allocator_base__const_reference\"></a>  allocator_base::const_reference"},{"content":"A type that provides a constant reference to type of object managed by the allocator.","pos":[7949,8034]},{"pos":[8094,8161],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__construct\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::construct","linkify":"<a name=\"allocator_base__construct\"></a>  allocator_base::construct","source":"<a name=\"allocator_base__construct\"></a>  allocator_base::construct"},{"content":"Constructs a specific type of object at a specified address that is initialized with a specified value.","pos":[8165,8268]},{"pos":[8337,8347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[8354,8363]},{"content":"Description","pos":[8364,8375]},{"content":"A pointer to the location where the object is to be constructed.","pos":[8424,8488]},{"content":"The value with which the object being constructed is to be initialized.","pos":[8499,8570]},{"pos":[8581,8588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8592,8697],"content":"This member function is implemented for the user-defined allocator by calling <ph id=\"ph1\">`new((void*)ptr Type(val)`</ph>.","source":"This member function is implemented for the user-defined allocator by calling `new((void*)ptr Type(val)`."},{"pos":[8707,8776],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__deallocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::deallocate","linkify":"<a name=\"allocator_base__deallocate\"></a>  allocator_base::deallocate","source":"<a name=\"allocator_base__deallocate\"></a>  allocator_base::deallocate"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[8780,8863]},{"pos":[8931,8941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[8948,8957]},{"content":"Description","pos":[8958,8969]},{"content":"A pointer to the first object to be deallocated from storage.","pos":[9018,9079]},{"content":"The number of objects to be deallocated from storage.","pos":[9090,9143]},{"pos":[9154,9161],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9165,9363],"content":"This member function is implemented for the user-defined allocator by calling <ph id=\"ph1\">`deallocate(ptr)`</ph> on the synchronization filter <ph id=\"ph2\">`Sync`</ph> if <ph id=\"ph3\">`_Nx == 1`</ph>, otherwise by calling <ph id=\"ph4\">`operator delete(_Nx * ptr)`</ph>.","source":"This member function is implemented for the user-defined allocator by calling `deallocate(ptr)` on the synchronization filter `Sync` if `_Nx == 1`, otherwise by calling `operator delete(_Nx * ptr)`."},{"pos":[9373,9436],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__destroy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::destroy","linkify":"<a name=\"allocator_base__destroy\"></a>  allocator_base::destroy","source":"<a name=\"allocator_base__destroy\"></a>  allocator_base::destroy"},{"content":"Calls an objects destructor without deallocating the memory where the object was stored.","pos":[9440,9528]},{"pos":[9578,9588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[9595,9604]},{"content":"Description","pos":[9605,9616]},{"content":"A pointer designating the address of the object to be destroyed.","pos":[9665,9729]},{"pos":[9740,9747],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9751,9844],"content":"This member function is implemented for the user-defined allocator by calling <ph id=\"ph1\">`ptr-&gt;~Type()`</ph>.","source":"This member function is implemented for the user-defined allocator by calling `ptr->~Type()`."},{"pos":[9854,9933],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__difference_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::difference_type","linkify":"<a name=\"allocator_base__difference_type\"></a>  allocator_base::difference_type","source":"<a name=\"allocator_base__difference_type\"></a>  allocator_base::difference_type"},{"content":"A signed integral type that can represent the difference between values of pointers to the type of object managed by the allocator.","pos":[9937,10068]},{"pos":[10131,10196],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__max_size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::max_size","linkify":"<a name=\"allocator_base__max_size\"></a>  allocator_base::max_size","source":"<a name=\"allocator_base__max_size\"></a>  allocator_base::max_size"},{"pos":[10200,10336],"content":"Returns the number of elements of type <ph id=\"ph1\">`Type`</ph> that could be allocated by an object of class allocator before the free memory is used up.","source":"Returns the number of elements of type `Type` that could be allocated by an object of class allocator before the free memory is used up."},{"pos":[10387,10399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of elements that could be allocated.","pos":[10403,10450]},{"pos":[10460,10467],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10471,10629],"content":"This member function is implemented for the user-defined allocator by returning <ph id=\"ph1\">`(size_t)-1 / sizeof(Type)`</ph> if <ph id=\"ph2\">`0 &lt; (size_t)-1 / sizeof(Type)`</ph>, otherwise <ph id=\"ph3\">`1`</ph>.","source":"This member function is implemented for the user-defined allocator by returning `(size_t)-1 / sizeof(Type)` if `0 < (size_t)-1 / sizeof(Type)`, otherwise `1`."},{"pos":[10639,10702],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__pointer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::pointer","linkify":"<a name=\"allocator_base__pointer\"></a>  allocator_base::pointer","source":"<a name=\"allocator_base__pointer\"></a>  allocator_base::pointer"},{"content":"A type that provides a pointer to the type of object managed by the allocator.","pos":[10706,10784]},{"pos":[10830,10897],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::reference","linkify":"<a name=\"allocator_base__reference\"></a>  allocator_base::reference","source":"<a name=\"allocator_base__reference\"></a>  allocator_base::reference"},{"content":"A type that provides a reference to the type of object managed by the allocator.","pos":[10901,10981]},{"pos":[11029,11096],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__size_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::size_type","linkify":"<a name=\"allocator_base__size_type\"></a>  allocator_base::size_type","source":"<a name=\"allocator_base__size_type\"></a>  allocator_base::size_type"},{"pos":[11100,11235],"content":"An unsigned integral type that can represent the length of any sequence that an object of template class <ph id=\"ph1\">`allocator_base`</ph> can allocate.","source":"An unsigned integral type that can represent the length of any sequence that an object of template class `allocator_base` can allocate."},{"pos":[11289,11358],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_base__value_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_base::value_type","linkify":"<a name=\"allocator_base__value_type\"></a>  allocator_base::value_type","source":"<a name=\"allocator_base__value_type\"></a>  allocator_base::value_type"},{"content":"A type that is managed by the allocator.","pos":[11362,11402]},{"pos":[11449,11457],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[11461,11518],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>allocators&gt;<ept id=\"p1\">](../standard-library/allocators-header.md)</ept>","source":"[\\<allocators>](../standard-library/allocators-header.md)"}],"content":"---\ntitle: \"allocator_base Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"allocators.allocator_base\"\n  - \"stdext.allocators.allocator_base\"\n  - \"allocator_base\"\n  - \"allocators/stdext::allocator_base\"\n  - \"stdext::allocator_base\"\n  - \"stdext::allocators::allocator_base\"\n  - \"allocators/stdext::allocators::allocator_base\"\n  - \"allocators::allocator_base\"\n  - \"stdext.allocator_base\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"allocator_base class\"\nms.assetid: f920b45f-2a88-4bb0-8ead-b6126b426ed4\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# allocator_base Class\nDefines the base class and common functions needed to create a user-defined allocator from a synchronization filter.  \n  \n## Syntax  \n  \n```\ntemplate <class Type, class Sync>  \nclass allocator_base\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Type`|The type of elements allocated by the allocator.|  \n|`Sync`|The synchronization policy for the allocator, which is [sync_none Class](../standard-library/sync-none-class.md), [sync_per_container Class](../standard-library/sync-per-container-class.md), [sync_per_thread Class](../standard-library/sync-per-thread-class.md), or [sync_shared Class](../standard-library/sync-shared-class.md).|  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[allocator_base](#allocator_base__allocator_base)|Constructs an object of type `allocator_base`.|  \n  \n### TypeDefs  \n  \n|||  \n|-|-|  \n|[const_pointer](#allocator_base__const_pointer)|A type that provides a constant pointer to the type of object managed by the allocator.|  \n|[const_reference](#allocator_base__const_reference)|A type that provides a constant reference to type of object managed by the allocator.|  \n|[difference_type](#allocator_base__difference_type)|A signed integral type that can represent the difference between values of pointers to the type of object managed by the allocator.|  \n|[pointer](#allocator_base__pointer)|A type that provides a pointer to the type of object managed by the allocator.|  \n|[reference](#allocator_base__reference)|A type that provides a reference to the type of object managed by the allocator.|  \n|[size_type](#allocator_base__size_type)|An unsigned integral type that can represent the length of any sequence that an object of template class `allocator_base` can allocate.|  \n|[value_type](#allocator_base__value_type)|A type that is managed by the allocator.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[_Charalloc](#allocator_base___charalloc)|Allocates storage for an array of type `char`.|  \n|[_Chardealloc](#allocator_base___chardealloc)|Frees storage for the array containing elements of type `char`.|  \n|[address](#allocator_base__address)|Finds the address of an object whose value is specified.|  \n|[allocate](#allocator_base__allocate)|Allocates a block of memory large enough to store at least some specified number of elements.|  \n|[construct](#allocator_base__construct)|Constructs a specific type of object at a specified address that is initialized with a specified value.|  \n|[deallocate](#allocator_base__deallocate)|Frees a specified number of objects from storage beginning at a specified position.|  \n|[destroy](#allocator_base__destroy)|Calls an objects destructor without deallocating the memory where the object was stored.|  \n|[max_size](#allocator_base__max_size)|Returns the number of elements of type `Type` that could be allocated by an object of class allocator before the free memory is used up.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"allocator_base___charalloc\"></a>  allocator_base::_Charalloc  \n Allocates storage for an array of type `char`.  \n  \n```\nchar *_Charalloc(size_type count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`count`|The number of elements in the array to be allocated.|  \n  \n### Return Value  \n A pointer to the allocated object.  \n  \n### Remarks  \n This member function is used by containers when compiled with a compiler that cannot compile rebind. It implements `_Charalloc` for the user-defined allocator by returning the result of a call to the `allocate` function of the synchronization filter.  \n  \n##  <a name=\"allocator_base___chardealloc\"></a>  allocator_base::_Chardealloc  \n Frees storage for the array containing elements of type `char`.  \n  \n```\nvoid _Chardealloc(void* ptr, size_type count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer to the first object to be deallocated from storage.|  \n|`count`|The number of objects to be deallocated from storage.|  \n  \n### Remarks  \n This member function is used by containers when compiled with a compiler that cannot compile rebind. It implements `_Chardealloc` for the user-defined allocator by calling the `deallocate` function of the synchronization filter. The pointer ptr must have been earlier returned by a call to `_Charalloc` for an allocator object that compares equal to `*this`, allocating an array object of the same size and type. `_Chardealloc` never throws an exception.  \n  \n##  <a name=\"allocator_base__address\"></a>  allocator_base::address  \n Finds the address of an object whose value is specified.  \n  \n```\npointer address(reference val);\n\nconst_pointer address(const_reference val);\n```  \n  \n### Parameters  \n `val`  \n The const or nonconst value of the object whose address is being searched for.  \n  \n### Return Value  \n A const or nonconst pointer to the object found of, respectively, const or nonconst value.  \n  \n### Remarks  \n This member function is implemented for the user-defined allocator by returning `&val`.  \n  \n##  <a name=\"allocator_base__allocate\"></a>  allocator_base::allocate  \n Allocates a block of memory large enough to store at least some specified number of elements.  \n  \n```\ntemplate <class Other>  \npointer allocate(size_type _Nx, const Other* _Hint = 0);\n\npointer allocate(size_type _Nx);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_Nx`|The number of elements in the array to be allocated.|  \n|`_Hint`|This parameter is ignored.|  \n  \n### Return Value  \n A pointer to the allocated object.  \n  \n### Remarks  \n The member function implements memory allocation for the user-defined allocator by returning the result of a call to the `allocate` function of the synchronization filter of type Type `*` if `_Nx == 1`, otherwise by returning the result of a call to `operator new(_Nx * sizeof(Type))` cast to type Type `*`.  \n  \n##  <a name=\"allocator_base__allocator_base\"></a>  allocator_base::allocator_base  \n Constructs an object of type `allocator_base`.  \n  \n```\nallocator_base();\n\ntemplate <class Other>  \nallocator_base(const allocator_base<Other, Sync>& right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`right`|The allocator object to be copied.|  \n  \n### Remarks  \n The first constructor constructs an [allocator_base](../standard-library/allocator-base-class.md) instance. The second constructor constructs an `allocator_base` instance such that for any `allocator_base<Type, _Sync>` instance `a`, `allocator_base<Type, Sync>(allocator_base<Other, Sync>(a)) == a`.  \n  \n##  <a name=\"allocator_base__const_pointer\"></a>  allocator_base::const_pointer  \n A type that provides a constant pointer to the type of object managed by the allocator.  \n  \n```\ntypedef const Type *const_pointer;\n```  \n  \n##  <a name=\"allocator_base__const_reference\"></a>  allocator_base::const_reference  \n A type that provides a constant reference to type of object managed by the allocator.  \n  \n```\ntypedef const Type& const_reference;\n```  \n  \n##  <a name=\"allocator_base__construct\"></a>  allocator_base::construct  \n Constructs a specific type of object at a specified address that is initialized with a specified value.  \n  \n```\nvoid construct(pointer ptr, const Type& val);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer to the location where the object is to be constructed.|  \n|`val`|The value with which the object being constructed is to be initialized.|  \n  \n### Remarks  \n This member function is implemented for the user-defined allocator by calling `new((void*)ptr Type(val)`.  \n  \n##  <a name=\"allocator_base__deallocate\"></a>  allocator_base::deallocate  \n Frees a specified number of objects from storage beginning at a specified position.  \n  \n```\nvoid deallocate(pointer ptr, size_type _Nx);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer to the first object to be deallocated from storage.|  \n|`_Nx`|The number of objects to be deallocated from storage.|  \n  \n### Remarks  \n This member function is implemented for the user-defined allocator by calling `deallocate(ptr)` on the synchronization filter `Sync` if `_Nx == 1`, otherwise by calling `operator delete(_Nx * ptr)`.  \n  \n##  <a name=\"allocator_base__destroy\"></a>  allocator_base::destroy  \n Calls an objects destructor without deallocating the memory where the object was stored.  \n  \n```\nvoid destroy(pointer ptr);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer designating the address of the object to be destroyed.|  \n  \n### Remarks  \n This member function is implemented for the user-defined allocator by calling `ptr->~Type()`.  \n  \n##  <a name=\"allocator_base__difference_type\"></a>  allocator_base::difference_type  \n A signed integral type that can represent the difference between values of pointers to the type of object managed by the allocator.  \n  \n```\ntypedef std::ptrdiff_t difference_type;\n```  \n  \n##  <a name=\"allocator_base__max_size\"></a>  allocator_base::max_size  \n Returns the number of elements of type `Type` that could be allocated by an object of class allocator before the free memory is used up.  \n  \n```\nsize_type max_size() const;\n```  \n  \n### Return Value  \n The number of elements that could be allocated.  \n  \n### Remarks  \n This member function is implemented for the user-defined allocator by returning `(size_t)-1 / sizeof(Type)` if `0 < (size_t)-1 / sizeof(Type)`, otherwise `1`.  \n  \n##  <a name=\"allocator_base__pointer\"></a>  allocator_base::pointer  \n A type that provides a pointer to the type of object managed by the allocator.  \n  \n```\ntypedef Type *pointer;\n```  \n  \n##  <a name=\"allocator_base__reference\"></a>  allocator_base::reference  \n A type that provides a reference to the type of object managed by the allocator.  \n  \n```\ntypedef Type& reference;\n```  \n  \n##  <a name=\"allocator_base__size_type\"></a>  allocator_base::size_type  \n An unsigned integral type that can represent the length of any sequence that an object of template class `allocator_base` can allocate.  \n  \n```\ntypedef std::size_t size_type;\n```  \n  \n##  <a name=\"allocator_base__value_type\"></a>  allocator_base::value_type  \n A type that is managed by the allocator.  \n  \n```\ntypedef Type value_type;\n```  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}