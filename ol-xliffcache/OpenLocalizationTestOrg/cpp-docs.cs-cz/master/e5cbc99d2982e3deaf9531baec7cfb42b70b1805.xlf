<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5cbc99d2982e3deaf9531baec7cfb42b70b1805</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\unhook.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87f40d18b7359a0a2e18fea2213de4031a9dd417</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">747d95ffd4bde4cdccef7a7029177b7f49a4114a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__unhook | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__unhook</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Dissociates a handler method from an event.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">&amp;</ph><ept id="p1">**</ept> <bpt id="p2">*</bpt>SourceClass<ept id="p2">*</ept> <ph id="ph2">`::`</ph> <bpt id="p3">*</bpt>EventMethod<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A pointer to the event method from which you unhook the event handler method:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Native C++ events: <bpt id="p1">*</bpt>SourceClass<ept id="p1">*</ept> is the event source class and <bpt id="p2">*</bpt>EventMethod<ept id="p2">*</ept> is the event.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>COM events: <bpt id="p1">*</bpt>SourceClass<ept id="p1">*</ept> is the event source interface and <bpt id="p2">*</bpt>EventMethod<ept id="p2">*</ept> is one of its methods.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Managed events: <bpt id="p1">*</bpt>SourceClass<ept id="p1">*</ept> is the event source class and <bpt id="p2">*</bpt>EventMethod<ept id="p2">*</ept> is the event.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The interface name being unhooked from <ph id="ph1">`receiver`</ph>, only for COM event receivers in which the <bpt id="p1">*</bpt>layout_dependent<ept id="p1">*</ept> parameter of the <bpt id="p2">[</bpt>event_receiver<ept id="p2">](../windows/event-receiver.md)</ept> attribute is <bpt id="p3">**</bpt>true<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>source</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A pointer to an instance of the event source.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Depending on the code <ph id="ph1">`type`</ph> specified in <bpt id="p1">**</bpt>event_receiver<ept id="p1">**</ept>, <bpt id="p2">*</bpt>source<ept id="p2">*</ept> can be one of the following:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A native event source object pointer.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept>-based pointer (COM source).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A managed object pointer (for managed events).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">&amp;</ph><ept id="p1">**</ept> <bpt id="p2">*</bpt>ReceiverClass<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A pointer to the event handler method to be unhooked from an event.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The handler is specified as a method of a class or a reference to the same; if you do not specify the class name, <ph id="ph1">`__unhook`</ph> assumes the class to be that in which it is called.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Native C++ events: <bpt id="p1">*</bpt>ReceiverClass<ept id="p1">*</ept> is the event receiver class and <ph id="ph1">`HandlerMethod`</ph> is the handler.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>COM events: <bpt id="p1">*</bpt>ReceiverClass<ept id="p1">*</ept> is the event receiver interface and <ph id="ph1">`HandlerMethod`</ph> is one of its handlers.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Managed events: <bpt id="p1">*</bpt>ReceiverClass<ept id="p1">*</ept> is the event receiver class and <ph id="ph1">`HandlerMethod`</ph> is the handler.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A pointer to an instance of the event receiver class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you do not specify a receiver, the default is the receiver class or structure in which <ph id="ph1">`__unhook`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Can be use in any function scope, including main, outside the event receiver class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Use the intrinsic function <ph id="ph1">`__unhook`</ph> in an event receiver to dissociate or "unhook" a handler method from an event method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>There are three forms of <ph id="ph1">`__unhook`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can use the first (four-argument) form in most cases.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can use the second (two-argument) form of <ph id="ph1">`__unhook`</ph> only for a COM event receiver; this unhooks the entire event interface.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can use the third (one-argument) form to unhook all delegates from the specified source.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A nonzero return value indicates that an error has occurred (managed events will throw an exception).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`__unhook`</ph> on an event and event handler that are not already hooked, it will have no effect.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>At compile time, the compiler verifies that the event exists and does parameter type checking with the specified handler.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>With the exception of COM events, <ph id="ph1">`__hook`</ph> and <ph id="ph2">`__unhook`</ph> can be called outside the event receiver.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An alternative to using <ph id="ph1">`__unhook`</ph> is to use the -= operator.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For information on coding managed events in the new syntax, see <bpt id="p1">[</bpt>event<ept id="p1">](../windows/event-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A templated class or struct cannot contain events.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Event Handling in Native C++<ept id="p1">](../cpp/event-handling-in-native-cpp.md)</ept> and <bpt id="p2">[</bpt>Event Handling in COM<ept id="p2">](../cpp/event-handling-in-com.md)</ept> for samples.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>event_source</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>event_receiver</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>__event</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>__hook</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>__raise</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>