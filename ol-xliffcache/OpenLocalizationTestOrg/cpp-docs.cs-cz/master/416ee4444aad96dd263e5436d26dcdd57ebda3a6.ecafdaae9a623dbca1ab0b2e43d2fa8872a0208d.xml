{"nodes":[{"pos":[12,49],"content":"Argument Definitions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Argument Definitions | Microsoft Docs","pos":[0,37]}]},{"content":"Argument Definitions","pos":[695,715]},{"content":"The arguments in the prototype","pos":[716,746]},{"content":"allow convenient command-line parsing of arguments and, optionally, access to environment variables.","pos":[886,986]},{"content":"The argument definitions are as follows:","pos":[987,1027]},{"content":"An integer that contains the count of arguments that follow in <ph id=\"ph1\">`argv`</ph>.","pos":[1044,1114],"source":" An integer that contains the count of arguments that follow in `argv`."},{"content":"The <ph id=\"ph1\">`argc`</ph> parameter is always greater than or equal to 1.","pos":[1115,1173],"source":" The `argc` parameter is always greater than or equal to 1."},{"content":"An array of null-terminated strings representing command-line arguments entered by the user of the program.","pos":[1190,1297]},{"content":"By convention, <ph id=\"ph1\">`argv`</ph><bpt id=\"p1\">**</bpt>[0]<ept id=\"p1\">**</ept> is the command with which the program is invoked, <ph id=\"ph2\">`argv`</ph><bpt id=\"p2\">**</bpt>[1]<ept id=\"p2\">**</ept> is the first command-line argument, and so on, until <ph id=\"ph3\">`argv`</ph><bpt id=\"p3\">**</bpt>[<ept id=\"p3\">**</ept><ph id=\"ph4\">`argc`</ph><bpt id=\"p4\">**</bpt>]<ept id=\"p4\">**</ept>, which is always <bpt id=\"p5\">**</bpt>NULL<ept id=\"p5\">**</ept>.","pos":[1298,1493],"source":" By convention, `argv`**[0]** is the command with which the program is invoked, `argv`**[1]** is the first command-line argument, and so on, until `argv`**[**`argc`**]**, which is always **NULL**."},{"content":"See <bpt id=\"p1\">[</bpt>Customizing Command Line Processing<ept id=\"p1\">](../cpp/customizing-cpp-command-line-processing.md)</ept> for information on suppressing command-line processing.","pos":[1494,1642],"source":" See [Customizing Command Line Processing](../cpp/customizing-cpp-command-line-processing.md) for information on suppressing command-line processing."},{"pos":[1649,1752],"content":"The first command-line argument is always <ph id=\"ph1\">`argv`</ph><bpt id=\"p1\">**</bpt>[1]<ept id=\"p1\">**</ept> and the last one is <ph id=\"ph2\">`argv`</ph><bpt id=\"p2\">**</bpt>[<ept id=\"p2\">**</ept><ph id=\"ph3\">`argc`</ph> – 1<bpt id=\"p3\">**</bpt>]<ept id=\"p3\">**</ept>.","source":"The first command-line argument is always `argv`**[1]** and the last one is `argv`**[**`argc` – 1**]**."},{"pos":[1760,2262],"content":"[!NOTE]\n By convention, `argv`**[0]** is the command with which the program is invoked.  However, it is possible to spawn a process using [CreateProcess](http://msdn.microsoft.com/library/windows/desktop/ms683197) and if you use both the first and second arguments (`lpApplicationName` and `lpCommandLine`), `argv`**[0]** may not be the executable name; use [GetModuleFileName](http://msdn.microsoft.com/library/windows/desktop/ms683197) to retrieve the executable name, and its fully-qualified path.","leadings":["","> "],"nodes":[{"content":" By convention, `argv`**[0]** is the command with which the program is invoked.  However, it is possible to spawn a process using [CreateProcess](http://msdn.microsoft.com/library/windows/desktop/ms683197) and if you use both the first and second arguments (`lpApplicationName` and `lpCommandLine`), `argv`**[0]** may not be the executable name; use [GetModuleFileName](http://msdn.microsoft.com/library/windows/desktop/ms683197) to retrieve the executable name, and its fully-qualified path.","pos":[8,500],"nodes":[{"content":"By convention, <ph id=\"ph1\">`argv`</ph><bpt id=\"p1\">**</bpt>[0]<ept id=\"p1\">**</ept> is the command with which the program is invoked.","pos":[1,79],"source":" By convention, `argv`**[0]** is the command with which the program is invoked."},{"content":"However, it is possible to spawn a process using <bpt id=\"p1\">[</bpt>CreateProcess<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683197)</ept> and if you use both the first and second arguments (<ph id=\"ph1\">`lpApplicationName`</ph> and <ph id=\"ph2\">`lpCommandLine`</ph>), <ph id=\"ph3\">`argv`</ph><bpt id=\"p2\">**</bpt>[0]<ept id=\"p2\">**</ept> may not be the executable name; use <bpt id=\"p3\">[</bpt>GetModuleFileName<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms683197)</ept> to retrieve the executable name, and its fully-qualified path.","pos":[81,492],"source":"  However, it is possible to spawn a process using [CreateProcess](http://msdn.microsoft.com/library/windows/desktop/ms683197) and if you use both the first and second arguments (`lpApplicationName` and `lpCommandLine`), `argv`**[0]** may not be the executable name; use [GetModuleFileName](http://msdn.microsoft.com/library/windows/desktop/ms683197) to retrieve the executable name, and its fully-qualified path."}]}]},{"content":"Microsoft Specific","pos":[2271,2289]},{"content":"The <ph id=\"ph1\">`envp`</ph> array, which is a common extension in many UNIX systems, is used in Microsoft C++.","pos":[2303,2396],"source":" The `envp` array, which is a common extension in many UNIX systems, is used in Microsoft C++."},{"content":"It is an array of strings representing the variables set in the user's environment.","pos":[2397,2480]},{"content":"This array is terminated by a <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> entry.","pos":[2481,2526],"source":" This array is terminated by a **NULL** entry."},{"content":"It can be declared as an array of pointers to <bpt id=\"p1\">**</bpt>char (char<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\*</ph>envp[ ]<bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> or as a pointer to pointers to <bpt id=\"p3\">**</bpt>char (char<ept id=\"p3\">**</ept> <ph id=\"ph2\">\\*\\*</ph>envp<bpt id=\"p4\">**</bpt>)<ept id=\"p4\">**</ept>.","pos":[2527,2663],"source":" It can be declared as an array of pointers to **char (char** \\*envp[ ]**)** or as a pointer to pointers to **char (char** \\*\\*envp**)**."},{"content":"If your program uses <bpt id=\"p1\">**</bpt>wmain<ept id=\"p1\">**</ept> instead of <bpt id=\"p2\">**</bpt>main<ept id=\"p2\">**</ept>, use the <ph id=\"ph1\">`wchar_t`</ph> data type instead of <ph id=\"ph2\">`char`</ph>.","pos":[2664,2762],"source":" If your program uses **wmain** instead of **main**, use the `wchar_t` data type instead of `char`."},{"content":"The environment block passed to <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>wmain<ept id=\"p2\">**</ept> is a \"frozen\" copy of the current environment.","pos":[2763,2864],"source":" The environment block passed to **main** and **wmain** is a \"frozen\" copy of the current environment."},{"content":"If you subsequently change the environment via a call to <bpt id=\"p1\">**</bpt>putenv<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`_wputenv`</ph>, the current environment (as returned by <ph id=\"ph2\">`getenv`/`_wgetenv`</ph> and the <ph id=\"ph3\">`_environ`/ `_wenviron`</ph> variable) will change, but the block pointed to by envp will not change.","pos":[2865,3112],"source":" If you subsequently change the environment via a call to **putenv** or `_wputenv`, the current environment (as returned by `getenv`/`_wgetenv` and the `_environ`/ `_wenviron` variable) will change, but the block pointed to by envp will not change."},{"content":"See <bpt id=\"p1\">[</bpt>Customizing Command Line Processing<ept id=\"p1\">](../cpp/customizing-cpp-command-line-processing.md)</ept> for information on suppressing environment processing.","pos":[3113,3260],"source":" See [Customizing Command Line Processing](../cpp/customizing-cpp-command-line-processing.md) for information on suppressing environment processing."},{"content":"This argument is ANSI compatible in C, but not in C++.","pos":[3261,3315]},{"content":"END Microsoft Specific","pos":[3324,3346]},{"content":"Example","pos":[3355,3362]},{"pos":[3366,3458],"content":"The following example shows how to use the <ph id=\"ph1\">`argc`</ph>, <ph id=\"ph2\">`argv`</ph>, and <ph id=\"ph3\">`envp`</ph> arguments to <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept>:","source":"The following example shows how to use the `argc`, `argv`, and `envp` arguments to **main**:"},{"content":"See Also","pos":[4124,4132]},{"content":"main: Program Startup","pos":[4137,4158]}],"content":"---\ntitle: \"Argument Definitions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"envp argument\"\n  - \"main function, arguments\"\n  - \"arguments [C++], for main function\"\n  - \"argv argument\"\n  - \"argc argument\"\nms.assetid: 6148cbf3-ebe8-44f2-b277-de4b723991c7\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Argument Definitions\nThe arguments in the prototype  \n  \n```  \n  \nint main( int  \nargc[ ,char*argv[] [,char*envp[] ] ] );intwmain(intargc[ ,wchar_t*argv[] [,wchar_t*envp[] ] ] );  \n```  \n  \n allow convenient command-line parsing of arguments and, optionally, access to environment variables. The argument definitions are as follows:  \n  \n `argc`  \n An integer that contains the count of arguments that follow in `argv`. The `argc` parameter is always greater than or equal to 1.  \n  \n `argv`  \n An array of null-terminated strings representing command-line arguments entered by the user of the program. By convention, `argv`**[0]** is the command with which the program is invoked, `argv`**[1]** is the first command-line argument, and so on, until `argv`**[**`argc`**]**, which is always **NULL**. See [Customizing Command Line Processing](../cpp/customizing-cpp-command-line-processing.md) for information on suppressing command-line processing.  \n  \n The first command-line argument is always `argv`**[1]** and the last one is `argv`**[**`argc` – 1**]**.  \n  \n> [!NOTE]\n>  By convention, `argv`**[0]** is the command with which the program is invoked.  However, it is possible to spawn a process using [CreateProcess](http://msdn.microsoft.com/library/windows/desktop/ms683197) and if you use both the first and second arguments (`lpApplicationName` and `lpCommandLine`), `argv`**[0]** may not be the executable name; use [GetModuleFileName](http://msdn.microsoft.com/library/windows/desktop/ms683197) to retrieve the executable name, and its fully-qualified path.  \n  \n## Microsoft Specific  \n `envp`  \n The `envp` array, which is a common extension in many UNIX systems, is used in Microsoft C++. It is an array of strings representing the variables set in the user's environment. This array is terminated by a **NULL** entry. It can be declared as an array of pointers to **char (char** \\*envp[ ]**)** or as a pointer to pointers to **char (char** \\*\\*envp**)**. If your program uses **wmain** instead of **main**, use the `wchar_t` data type instead of `char`. The environment block passed to **main** and **wmain** is a \"frozen\" copy of the current environment. If you subsequently change the environment via a call to **putenv** or `_wputenv`, the current environment (as returned by `getenv`/`_wgetenv` and the `_environ`/ `_wenviron` variable) will change, but the block pointed to by envp will not change. See [Customizing Command Line Processing](../cpp/customizing-cpp-command-line-processing.md) for information on suppressing environment processing. This argument is ANSI compatible in C, but not in C++.  \n  \n## END Microsoft Specific  \n  \n## Example  \n The following example shows how to use the `argc`, `argv`, and `envp` arguments to **main**:  \n  \n```  \n// argument_definitions.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <string.h>  \n  \nusing namespace std;  \nint main( int argc, char *argv[], char *envp[] ) {  \n    int iNumberLines = 0;    // Default is no line numbers.  \n  \n    // If /n is passed to the .exe, display numbered listing  \n    // of environment variables.  \n  \n    if ( (argc == 2) && _stricmp( argv[1], \"/n\" ) == 0 )  \n         iNumberLines = 1;  \n  \n    // Walk through list of strings until a NULL is encountered.  \n    for( int i = 0; envp[i] != NULL; ++i ) {  \n        if( iNumberLines )  \n            cout << i << \": \" << envp[i] << \"\\n\";  \n    }  \n}  \n```  \n  \n## See Also  \n [main: Program Startup](../cpp/main-program-startup.md)"}