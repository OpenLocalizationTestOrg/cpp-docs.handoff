{"nodes":[{"pos":[12,42],"content":"_mm_stream_sd | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_mm_stream_sd | Microsoft Docs","pos":[0,30]}]},{"content":"_mm_stream_sd","pos":[661,674]},{"content":"Microsoft Specific","pos":[677,695]},{"content":"Writes 64-bit data to a memory location without polluting the caches.","pos":[704,773]},{"content":"Syntax","pos":[782,788]},{"content":"Parameters","pos":[881,891]},{"content":"[out]","pos":[895,900]},{"content":"A pointer to the location where the source data will be written.","pos":[911,975]},{"content":"[in]","pos":[982,986]},{"content":"A 128-bit value containing the <ph id=\"ph1\">`double`</ph> value to be written in its bottom 64 bits..","pos":[999,1082],"source":" A 128-bit value containing the `double` value to be written in its bottom 64 bits.."},{"content":"Return Value","pos":[1091,1103]},{"content":"None.","pos":[1107,1112]},{"content":"Requirements","pos":[1121,1133]},{"content":"Intrinsic","pos":[1140,1149]},{"content":"Architecture","pos":[1150,1162]},{"content":"SSE4a","pos":[1222,1227]},{"pos":[1235,1262],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Remarks","pos":[1271,1278]},{"content":"This intrinsic generates the <ph id=\"ph1\">`movntsd`</ph> instruction.","pos":[1282,1333],"source":"This intrinsic generates the `movntsd` instruction."},{"content":"To determine hardware support for this instruction, call the <ph id=\"ph1\">`__cpuid`</ph> intrinsic with <ph id=\"ph2\">`InfoType=0x80000001`</ph> and check bit 6 of <ph id=\"ph3\">`CPUInfo[2] (ECX)`</ph>.","pos":[1334,1480],"source":" To determine hardware support for this instruction, call the `__cpuid` intrinsic with `InfoType=0x80000001` and check bit 6 of `CPUInfo[2] (ECX)`."},{"content":"This bit is 1 if the hardware supports this instruction, and 0 otherwise.","pos":[1481,1554]},{"pos":[1561,1708],"content":"If you run code that uses the <ph id=\"ph1\">`_mm_stream_sd`</ph> intrinsic on hardware that does not support the <ph id=\"ph2\">`movntsd`</ph> instruction, the results are unpredictable.","source":"If you run code that uses the `_mm_stream_sd` intrinsic on hardware that does not support the `movntsd` instruction, the results are unpredictable."},{"content":"Example","pos":[1717,1724]},{"content":"END Microsoft Specific","pos":[2158,2180]},{"content":"Copyright 2007 by Advanced Micro Devices, Inc. All rights reserved.","pos":[2184,2251]},{"content":"Reproduced with permission from Advanced Micro Devices, Inc.","pos":[2252,2312]},{"content":"See Also","pos":[2321,2329]},{"content":"_mm_stream_ss","pos":[2334,2347]},{"content":"_mm_store_sd","pos":[2385,2397]},{"content":"_mm_sfence","pos":[2474,2484]},{"content":"Streaming SIMD Extensions that Support the Cache","pos":[2561,2609]},{"content":"Compiler Intrinsics","pos":[2686,2705]}],"content":"---\ntitle: \"_mm_stream_sd | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_mm_stream_sd\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_mm_stream_sd intrinsic\"\n  - \"movntsd instruction\"\nms.assetid: 2b4bea5e-e64e-45fa-9afc-88a2e4b82cfc\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _mm_stream_sd\n**Microsoft Specific**  \n  \n Writes 64-bit data to a memory location without polluting the caches.  \n  \n## Syntax  \n  \n```  \nvoid _mm_stream_sd(  \n   double * Dest,  \n   __m128d Source  \n);  \n```  \n  \n#### Parameters  \n [out] `Dest`  \n A pointer to the location where the source data will be written.  \n  \n [in] `Source`  \n A 128-bit value containing the `double` value to be written in its bottom 64 bits..  \n  \n## Return Value  \n None.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`_mm_stream_sd`|SSE4a|  \n  \n **Header file** \\<intrin.h>  \n  \n## Remarks  \n This intrinsic generates the `movntsd` instruction. To determine hardware support for this instruction, call the `__cpuid` intrinsic with `InfoType=0x80000001` and check bit 6 of `CPUInfo[2] (ECX)`. This bit is 1 if the hardware supports this instruction, and 0 otherwise.  \n  \n If you run code that uses the `_mm_stream_sd` intrinsic on hardware that does not support the `movntsd` instruction, the results are unpredictable.  \n  \n## Example  \n  \n```  \n// Compile this sample with: /EHsc  \n#include <iostream>  \n#include <intrin.h>  \nusing namespace std;  \n  \nint main()  \n{  \n    __m128d vals;  \n    double d[2];  \n  \n    d[0] = -1.;  \n    d[1] = -2.;  \n    vals.m128d_f64[0] = 0.;  \n    vals.m128d_f64[1] = 1.;  \n    _mm_stream_sd(&d[1], vals);  \n    cout << \"d[0] = \" << d[0] << \", d[1] = \" << d[1] << endl;  \n}  \n  \n```  \n  \n```Output  \nd[0] = -1, d[1] = 1  \n```  \n  \n## END Microsoft Specific  \n Copyright 2007 by Advanced Micro Devices, Inc. All rights reserved. Reproduced with permission from Advanced Micro Devices, Inc.  \n  \n## See Also  \n [_mm_stream_ss](../intrinsics/mm-stream-ss.md)   \n [_mm_store_sd](http://msdn.microsoft.com/en-us/8e672d0d-0a96-45b9-a783-392a2457de42)   \n [_mm_sfence](http://msdn.microsoft.com/en-us/b6c0d18e-3628-4318-826b-45f66782e870)   \n [Streaming SIMD Extensions that Support the Cache](http://msdn.microsoft.com/en-us/8f03493a-d5f5-4457-892e-0b6540494872)   \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}