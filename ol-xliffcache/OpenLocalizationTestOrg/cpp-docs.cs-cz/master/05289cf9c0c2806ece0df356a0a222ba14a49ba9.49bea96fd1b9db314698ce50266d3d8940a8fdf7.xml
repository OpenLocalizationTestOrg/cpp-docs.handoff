{"nodes":[{"pos":[12,49],"content":"CPaneContainer Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CPaneContainer Class | Microsoft Docs","pos":[0,37]}]},{"content":"CPaneContainer Class","pos":[616,636]},{"content":"The <ph id=\"ph1\">`CPaneContainer`</ph> class is a basic component of the docking model implemented by MFC.","pos":[637,725],"source":"The `CPaneContainer` class is a basic component of the docking model implemented by MFC."},{"content":"An object of this class stores pointers to two docking panes or to two instances of <ph id=\"ph1\">`CPaneContainer.`</ph> It also stores a pointer to the divider that separates the panes (or the containers).","pos":[726,913],"source":" An object of this class stores pointers to two docking panes or to two instances of `CPaneContainer.` It also stores a pointer to the divider that separates the panes (or the containers)."},{"content":"By nesting containers inside containers, the framework can build a binary tree that represents complex docking layouts.","pos":[914,1033]},{"content":"The root of the binary tree is stored in a <bpt id=\"p1\">[</bpt>CPaneContainerManager<ept id=\"p1\">](../../mfc/reference/cpanecontainermanager-class.md)</ept> object.","pos":[1034,1160],"source":" The root of the binary tree is stored in a [CPaneContainerManager](../../mfc/reference/cpanecontainermanager-class.md) object."},{"content":"Syntax","pos":[1169,1175]},{"content":"Members","pos":[1241,1248]},{"content":"Public Constructors","pos":[1258,1277]},{"content":"Name","pos":[1284,1288]},{"content":"Description","pos":[1289,1300]},{"content":"CPaneContainer::CPaneContainer","pos":[1339,1369]},{"content":"Default constructor.","pos":[1404,1424]},{"content":"Public Methods","pos":[1435,1449]},{"content":"Name","pos":[1456,1460]},{"content":"Description","pos":[1461,1472]},{"content":"CPaneContainer::AddPane","pos":[1511,1534]},{"content":"CPaneContainer::AddRef","pos":[1568,1590]},{"content":"CPaneContainer::AddSubPaneContainer","pos":[1623,1658]},{"content":"CPaneContainer::CalcAvailablePaneSpace","pos":[1704,1742]},{"content":"CPaneContainer::CalcAvailableSpace","pos":[1791,1825]},{"content":"CPaneContainer::CalculateRecentSize","pos":[1870,1905]},{"content":"CPaneContainer::CheckPaneDividerVisibility","pos":[1951,1993]},{"content":"CPaneContainer::Copy","pos":[2046,2066]},{"content":"CPaneContainer::DeletePane","pos":[2097,2123]},{"content":"CPaneContainer::FindSubPaneContainer","pos":[2160,2196]},{"content":"CPaneContainer::FindTabbedPane","pos":[2243,2273]},{"content":"CPaneContainer::GetAssociatedSiblingPaneIDs","pos":[2314,2357]},{"content":"CPaneContainer::GetLeftPane","pos":[2411,2438]},{"content":"CPaneContainer::GetLeftPaneContainer","pos":[2476,2512]},{"content":"CPaneContainer::GetMinSize","pos":[2559,2585]},{"content":"CPaneContainer::GetMinSizeLeft","pos":[2622,2652]},{"content":"CPaneContainer::GetMinSizeRight","pos":[2693,2724]},{"content":"CPaneContainer::GetNodeCount","pos":[2766,2794]},{"content":"CPaneContainer::GetPaneDivider","pos":[2833,2863]},{"content":"CPaneContainer::GetParentPaneContainer","pos":[2904,2942]},{"content":"CPaneContainer::GetRecentPaneDividerRect","pos":[2991,3031]},{"content":"CPaneContainer::GetRecentPaneDividerStyle","pos":[3082,3123]},{"content":"CPaneContainer::GetRecentPercent","pos":[3175,3207]},{"content":"CPaneContainer::GetRefCount","pos":[3250,3277]},{"content":"CPaneContainer::GetResizeStep","pos":[3315,3344]},{"content":"CPaneContainer::GetRightPane","pos":[3384,3412]},{"content":"CPaneContainer::GetRightPaneContainer","pos":[3451,3488]},{"content":"CPaneContainer::GetTotalReferenceCount","pos":[3536,3574]},{"content":"CPaneContainer::GetWindowRect","pos":[3623,3652]},{"content":"CPaneContainer::IsDisposed","pos":[3692,3718]},{"content":"CPaneContainer::IsEmpty","pos":[3755,3778]},{"content":"CPaneContainer::IsLeftPane","pos":[3812,3838]},{"content":"CPaneContainer::IsLeftPaneContainer","pos":[3875,3910]},{"content":"CPaneContainer::IsLeftPartEmpty","pos":[3956,3987]},{"content":"CPaneContainer::IsRightPartEmpty","pos":[4029,4061]},{"content":"CPaneContainer::IsVisible","pos":[4104,4129]},{"content":"CPaneContainer::Move","pos":[4165,4185]},{"content":"CPaneContainer::OnDeleteHidePane","pos":[4216,4248]},{"content":"CPaneContainer::OnMoveInternalPaneDivider","pos":[4291,4332]},{"content":"CPaneContainer::OnShowPane","pos":[4384,4410]},{"content":"CPaneContainer::Release","pos":[4447,4470]},{"content":"CPaneContainer::ReleaseEmptyPaneContainer","pos":[4504,4545]},{"content":"CPaneContainer::RemoveNonValidPanes","pos":[4597,4632]},{"content":"CPaneContainer::RemovePane","pos":[4678,4704]},{"content":"CPaneContainer::Resize","pos":[4741,4763]},{"content":"CPaneContainer::ResizePane","pos":[4796,4822]},{"content":"CPaneContainer::ResizePartOfPaneContainer","pos":[4859,4900]},{"content":"CPaneContainer::Serialize","pos":[4952,4977]},{"content":"Reads or writes this object from or to an archive.","pos":[5007,5057]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CObject::Serialize<ept id=\"p1\">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept>.)","pos":[5058,5148],"source":" (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)"},{"content":"CPaneContainer::SetPane","pos":[5154,5177]},{"content":"CPaneContainer::SetPaneContainer","pos":[5211,5243]},{"content":"CPaneContainer::SetPaneDivider","pos":[5286,5316]},{"content":"CPaneContainer::SetParentPaneContainer","pos":[5357,5395]},{"content":"CPaneContainer::SetRecentPercent","pos":[5444,5476]},{"content":"CPaneContainer::SetUpByID","pos":[5519,5544]},{"content":"CPaneContainer::StoreRecentDockSiteInfo","pos":[5580,5619]},{"content":"CPaneContainer::StretchPaneContainer","pos":[5669,5705]},{"content":"Remarks","pos":[5757,5764]},{"pos":[5785,5836],"content":"objects are created automatically by the framework."},{"content":"Example","pos":[5845,5852]},{"content":"The following example demonstrates how to construct an instance of the <ph id=\"ph1\">`CPaneContainer`</ph> class.","pos":[5856,5950],"source":"The following example demonstrates how to construct an instance of the `CPaneContainer` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Set Pane Size sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[5951,6036],"source":" This code snippet is part of the [Set Pane Size sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_SetPaneSize#2","pos":[6054,6075]},{"content":"NVC_MFC_SetPaneSize#1","pos":[6153,6174]},{"content":"Inheritance Hierarchy","pos":[6249,6270]},{"content":"CObject","pos":[6275,6282]},{"content":"CPaneContainer","pos":[6329,6343]},{"content":"Requirements","pos":[6398,6410]},{"pos":[6414,6444],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxpanecontainer.h","source":"**Header:** afxpanecontainer.h"},{"pos":[6494,6517],"content":"CPaneContainer::AddPane"},{"content":"Parameters","pos":[6690,6700]},{"pos":[6704,6708],"content":"[in]"},{"content":"Return Value","pos":[6725,6737]},{"content":"Remarks","pos":[6747,6754]},{"pos":[6803,6825],"content":"CPaneContainer::AddRef"},{"content":"Remarks","pos":[6968,6975]},{"pos":[7037,7072],"content":"CPaneContainer::AddSubPaneContainer"},{"content":"Parameters","pos":[7285,7295]},{"content":"[in]","pos":[7299,7303]},{"content":"[in]","pos":[7320,7324]},{"content":"Return Value","pos":[7350,7362]},{"content":"Remarks","pos":[7372,7379]},{"pos":[7444,7482],"content":"CPaneContainer::CalcAvailablePaneSpace"},{"content":"Parameters","pos":[7746,7756]},{"content":"[in]","pos":[7760,7764]},{"content":"[in]","pos":[7786,7790]},{"content":"[in]","pos":[7801,7805]},{"content":"[in]","pos":[7822,7826]},{"content":"Return Value","pos":[7847,7859]},{"content":"Remarks","pos":[7869,7876]},{"pos":[7937,7971],"content":"CPaneContainer::CalcAvailableSpace"},{"content":"Parameters","pos":[8178,8188]},{"content":"[in]","pos":[8192,8196]},{"content":"[in]","pos":[8214,8218]},{"content":"Return Value","pos":[8239,8251]},{"content":"Remarks","pos":[8261,8268]},{"pos":[8330,8365],"content":"CPaneContainer::CalculateRecentSize"},{"content":"Remarks","pos":[8521,8528]},{"pos":[8597,8639],"content":"CPaneContainer::CheckPaneDividerVisibility"},{"content":"Remarks","pos":[8802,8809]},{"pos":[8856,8876],"content":"CPaneContainer::Copy"},{"content":"Parameters","pos":[9068,9078]},{"pos":[9082,9086],"content":"[in]"},{"content":"Return Value","pos":[9115,9127]},{"content":"Remarks","pos":[9137,9144]},{"pos":[9201,9231],"content":"CPaneContainer::CPaneContainer"},{"content":"Parameters","pos":[9533,9543]},{"content":"[in]","pos":[9547,9551]},{"content":"[in]","pos":[9566,9570]},{"content":"[in]","pos":[9585,9589]},{"content":"[in]","pos":[9605,9609]},{"content":"Remarks","pos":[9629,9636]},{"pos":[9689,9715],"content":"CPaneContainer::DeletePane"},{"content":"Parameters","pos":[9926,9936]},{"content":"[in]","pos":[9940,9944]},{"content":"[in]","pos":[9955,9959]},{"content":"Remarks","pos":[9979,9986]},{"pos":[10049,10085],"content":"CPaneContainer::FindSubPaneContainer"},{"content":"Parameters","pos":[10317,10327]},{"content":"[in]","pos":[10331,10335]},{"content":"[in]","pos":[10349,10353]},{"content":"Return Value","pos":[10378,10390]},{"content":"Remarks","pos":[10400,10407]},{"pos":[10464,10494],"content":"CPaneContainer::FindTabbedPane"},{"content":"Parameters","pos":[10663,10673]},{"pos":[10677,10681],"content":"[in]"},{"content":"Return Value","pos":[10697,10709]},{"content":"Remarks","pos":[10719,10726]},{"pos":[10796,10839],"content":"CPaneContainer::GetAssociatedSiblingPaneIDs"},{"content":"Parameters","pos":[11041,11051]},{"pos":[11055,11059],"content":"[in]"},{"content":"Return Value","pos":[11076,11088]},{"content":"Remarks","pos":[11098,11105]},{"pos":[11159,11186],"content":"CPaneContainer::GetLeftPane"},{"content":"Return Value","pos":[11359,11371]},{"content":"Remarks","pos":[11381,11388]},{"pos":[11451,11487],"content":"CPaneContainer::GetLeftPaneContainer"},{"content":"Return Value","pos":[11670,11682]},{"content":"Remarks","pos":[11692,11699]},{"pos":[11752,11778],"content":"CPaneContainer::GetMinSize"},{"content":"Parameters","pos":[11953,11963]},{"pos":[11967,11971],"content":"[in]"},{"content":"Remarks","pos":[11988,11995]},{"pos":[12052,12082],"content":"CPaneContainer::GetMinSizeLeft"},{"content":"Parameters","pos":[12261,12271]},{"pos":[12275,12279],"content":"[in]"},{"content":"Remarks","pos":[12296,12303]},{"pos":[12361,12392],"content":"CPaneContainer::GetMinSizeRight"},{"content":"Parameters","pos":[12572,12582]},{"pos":[12586,12590],"content":"[in]"},{"content":"Remarks","pos":[12607,12614]},{"pos":[12669,12697],"content":"CPaneContainer::GetNodeCount"},{"content":"Return Value","pos":[12854,12866]},{"content":"Remarks","pos":[12876,12883]},{"pos":[12940,12970],"content":"CPaneContainer::GetPaneDivider"},{"content":"Return Value","pos":[13145,13157]},{"content":"Remarks","pos":[13167,13174]},{"pos":[13239,13277],"content":"CPaneContainer::GetParentPaneContainer"},{"content":"Return Value","pos":[13456,13468]},{"content":"Remarks","pos":[13478,13485]},{"pos":[13552,13592],"content":"CPaneContainer::GetRecentPaneDividerRect"},{"content":"Return Value","pos":[13763,13775]},{"content":"Remarks","pos":[13785,13792]},{"pos":[13860,13901],"content":"CPaneContainer::GetRecentPaneDividerStyle"},{"content":"Return Value","pos":[14073,14085]},{"content":"Remarks","pos":[14095,14102]},{"pos":[14161,14193],"content":"CPaneContainer::GetRecentPercent"},{"content":"Return Value","pos":[14345,14357]},{"content":"Remarks","pos":[14367,14374]},{"pos":[14428,14455],"content":"CPaneContainer::GetRefCount"},{"content":"Return Value","pos":[14603,14615]},{"content":"Remarks","pos":[14625,14632]},{"pos":[14688,14717],"content":"CPaneContainer::GetResizeStep"},{"content":"Return Value","pos":[14883,14895]},{"content":"Remarks","pos":[14905,14912]},{"pos":[14967,14995],"content":"CPaneContainer::GetRightPane"},{"content":"Return Value","pos":[15169,15181]},{"content":"Remarks","pos":[15191,15198]},{"pos":[15262,15299],"content":"CPaneContainer::GetRightPaneContainer"},{"content":"Return Value","pos":[15483,15495]},{"content":"Remarks","pos":[15505,15512]},{"pos":[15577,15615],"content":"CPaneContainer::GetTotalReferenceCount"},{"content":"Return Value","pos":[15782,15794]},{"content":"Remarks","pos":[15804,15811]},{"pos":[15867,15896],"content":"CPaneContainer::GetWindowRect"},{"content":"Parameters","pos":[16117,16127]},{"content":"[in]","pos":[16131,16135]},{"content":"[in]","pos":[16146,16150]},{"content":"Remarks","pos":[16180,16187]},{"pos":[16240,16266],"content":"CPaneContainer::IsDisposed"},{"content":"Return Value","pos":[16422,16434]},{"content":"Remarks","pos":[16444,16451]},{"pos":[16501,16524],"content":"CPaneContainer::IsEmpty"},{"content":"Return Value","pos":[16677,16689]},{"content":"Remarks","pos":[16699,16706]},{"pos":[16759,16785],"content":"CPaneContainer::IsLeftPane"},{"content":"Parameters","pos":[16960,16970]},{"pos":[16974,16978],"content":"[in]"},{"content":"Return Value","pos":[16995,17007]},{"content":"Remarks","pos":[17017,17024]},{"pos":[17086,17121],"content":"CPaneContainer::IsLeftPaneContainer"},{"content":"Return Value","pos":[17286,17298]},{"content":"Remarks","pos":[17308,17315]},{"pos":[17373,17404],"content":"CPaneContainer::IsLeftPartEmpty"},{"content":"Parameters","pos":[17594,17604]},{"pos":[17608,17612],"content":"[in]"},{"content":"Return Value","pos":[17641,17653]},{"content":"Remarks","pos":[17663,17670]},{"pos":[17729,17761],"content":"CPaneContainer::IsRightPartEmpty"},{"content":"Parameters","pos":[17952,17962]},{"pos":[17966,17970],"content":"[in]"},{"content":"Return Value","pos":[17999,18011]},{"content":"Remarks","pos":[18021,18028]},{"pos":[18080,18105],"content":"CPaneContainer::IsVisible"},{"content":"Return Value","pos":[18260,18272]},{"content":"Remarks","pos":[18282,18289]},{"pos":[18336,18356],"content":"CPaneContainer::Move"},{"content":"Parameters","pos":[18524,18534]},{"pos":[18538,18542],"content":"[in]"},{"content":"Remarks","pos":[18567,18574]},{"pos":[18633,18665],"content":"CPaneContainer::OnDeleteHidePane"},{"content":"Parameters","pos":[18860,18870]},{"content":"[in]","pos":[18874,18878]},{"content":"[in]","pos":[18889,18893]},{"content":"Remarks","pos":[18911,18918]},{"pos":[18986,19027],"content":"CPaneContainer::OnMoveInternalPaneDivider"},{"content":"Parameters","pos":[19230,19240]},{"content":"[in]","pos":[19244,19248]},{"content":"[in]","pos":[19262,19266]},{"content":"Return Value","pos":[19283,19295]},{"content":"Remarks","pos":[19305,19312]},{"pos":[19365,19391],"content":"CPaneContainer::OnShowPane"},{"content":"Parameters","pos":[19588,19598]},{"content":"[in]","pos":[19602,19606]},{"content":"[in]","pos":[19617,19621]},{"content":"Remarks","pos":[19639,19646]},{"pos":[19696,19719],"content":"CPaneContainer::Release"},{"content":"Return Value","pos":[19864,19876]},{"content":"Remarks","pos":[19886,19893]},{"pos":[19961,20002],"content":"CPaneContainer::ReleaseEmptyPaneContainer"},{"content":"Remarks","pos":[20164,20171]},{"pos":[20233,20268],"content":"CPaneContainer::RemoveNonValidPanes"},{"content":"Remarks","pos":[20424,20431]},{"pos":[20484,20510],"content":"CPaneContainer::RemovePane"},{"content":"Parameters","pos":[20684,20694]},{"pos":[20698,20702],"content":"[in]"},{"content":"Remarks","pos":[20719,20726]},{"pos":[20775,20797],"content":"CPaneContainer::Resize"},{"content":"Parameters","pos":[21009,21019]},{"content":"[in]","pos":[21023,21027]},{"content":"[in]","pos":[21038,21042]},{"content":"[in]","pos":[21053,21057]},{"content":"Remarks","pos":[21077,21084]},{"pos":[21137,21163],"content":"CPaneContainer::ResizePane"},{"content":"Parameters","pos":[21444,21454]},{"content":"[in]","pos":[21458,21462]},{"content":"[in]","pos":[21476,21480]},{"content":"[in]","pos":[21491,21495]},{"content":"[in]","pos":[21512,21516]},{"content":"[in]","pos":[21528,21532]},{"content":"[in]","pos":[21547,21551]},{"content":"Remarks","pos":[21568,21575]},{"pos":[21643,21684],"content":"CPaneContainer::ResizePartOfPaneContainer"},{"content":"Parameters","pos":[21910,21920]},{"content":"[in]","pos":[21924,21928]},{"content":"[in]","pos":[21942,21946]},{"content":"[in]","pos":[21962,21966]},{"content":"Remarks","pos":[21983,21990]},{"pos":[22042,22067],"content":"CPaneContainer::Serialize"},{"content":"Parameters","pos":[22225,22235]},{"pos":[22239,22243],"content":"[in]"},{"content":"Remarks","pos":[22258,22265]},{"pos":[22315,22338],"content":"CPaneContainer::SetPane"},{"content":"Parameters","pos":[22524,22534]},{"content":"[in]","pos":[22538,22542]},{"content":"[in]","pos":[22553,22557]},{"content":"Remarks","pos":[22575,22582]},{"pos":[22641,22673],"content":"CPaneContainer::SetPaneContainer"},{"content":"Parameters","pos":[22875,22885]},{"content":"[in]","pos":[22889,22893]},{"content":"[in]","pos":[22910,22914]},{"content":"Remarks","pos":[22932,22939]},{"pos":[22996,23026],"content":"CPaneContainer::SetPaneDivider"},{"content":"Parameters","pos":[23198,23208]},{"pos":[23212,23216],"content":"[in]"},{"content":"Remarks","pos":[23236,23243]},{"pos":[23308,23346],"content":"CPaneContainer::SetParentPaneContainer"},{"content":"Parameters","pos":[23522,23532]},{"pos":[23536,23540],"content":"[in]"},{"content":"Remarks","pos":[23554,23561]},{"pos":[23620,23652],"content":"CPaneContainer::SetRecentPercent"},{"content":"Parameters","pos":[23823,23833]},{"pos":[23837,23841],"content":"[in]"},{"content":"Remarks","pos":[23868,23875]},{"pos":[23927,23952],"content":"CPaneContainer::SetUpByID"},{"content":"Parameters","pos":[24138,24148]},{"content":"[in]","pos":[24152,24156]},{"content":"[in]","pos":[24166,24170]},{"content":"Return Value","pos":[24187,24199]},{"content":"Remarks","pos":[24209,24216]},{"pos":[24282,24321],"content":"CPaneContainer::StoreRecentDockSiteInfo"},{"content":"Parameters","pos":[24508,24518]},{"pos":[24522,24526],"content":"[in]"},{"content":"Remarks","pos":[24543,24550]},{"pos":[24613,24649],"content":"CPaneContainer::StretchPaneContainer"},{"content":"Parameters","pos":[24917,24927]},{"content":"[in]","pos":[24931,24935]},{"content":"[in]","pos":[24949,24953]},{"content":"[in]","pos":[24972,24976]},{"content":"[in]","pos":[24991,24995]},{"content":"[in]","pos":[25013,25017]},{"content":"Return Value","pos":[25034,25046]},{"content":"Remarks","pos":[25056,25063]},{"content":"See Also","pos":[25072,25080]},{"content":"Hierarchy Chart","pos":[25085,25100]},{"content":"Classes","pos":[25137,25144]},{"content":"CObject Class","pos":[25187,25200]},{"content":"CPaneContainerManager Class","pos":[25245,25272]}],"content":"---\ntitle: \"CPaneContainer Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CPaneContainer\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CPaneContainer class\"\nms.assetid: beb79e08-f611-4d66-ba04-053baa79bf86\ncaps.latest.revision: 32\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CPaneContainer Class\nThe `CPaneContainer` class is a basic component of the docking model implemented by MFC. An object of this class stores pointers to two docking panes or to two instances of `CPaneContainer.` It also stores a pointer to the divider that separates the panes (or the containers). By nesting containers inside containers, the framework can build a binary tree that represents complex docking layouts. The root of the binary tree is stored in a [CPaneContainerManager](../../mfc/reference/cpanecontainermanager-class.md) object.  \n  \n## Syntax  \n  \n```  \nclass CPaneContainer : public CObject    \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneContainer::CPaneContainer](#cpanecontainer__cpanecontainer)|Default constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneContainer::AddPane](#cpanecontainer__addpane)||  \n|[CPaneContainer::AddRef](#cpanecontainer__addref)||  \n|[CPaneContainer::AddSubPaneContainer](#cpanecontainer__addsubpanecontainer)||  \n|[CPaneContainer::CalcAvailablePaneSpace](#cpanecontainer__calcavailablepanespace)||  \n|[CPaneContainer::CalcAvailableSpace](#cpanecontainer__calcavailablespace)||  \n|[CPaneContainer::CalculateRecentSize](#cpanecontainer__calculaterecentsize)||  \n|[CPaneContainer::CheckPaneDividerVisibility](#cpanecontainer__checkpanedividervisibility)||  \n|[CPaneContainer::Copy](#cpanecontainer__copy)||  \n|[CPaneContainer::DeletePane](#cpanecontainer__deletepane)||  \n|[CPaneContainer::FindSubPaneContainer](#cpanecontainer__findsubpanecontainer)||  \n|[CPaneContainer::FindTabbedPane](#cpanecontainer__findtabbedpane)||  \n|[CPaneContainer::GetAssociatedSiblingPaneIDs](#cpanecontainer__getassociatedsiblingpaneids)||  \n|[CPaneContainer::GetLeftPane](#cpanecontainer__getleftpane)||  \n|[CPaneContainer::GetLeftPaneContainer](#cpanecontainer__getleftpanecontainer)||  \n|[CPaneContainer::GetMinSize](#cpanecontainer__getminsize)||  \n|[CPaneContainer::GetMinSizeLeft](#cpanecontainer__getminsizeleft)||  \n|[CPaneContainer::GetMinSizeRight](#cpanecontainer__getminsizeright)||  \n|[CPaneContainer::GetNodeCount](#cpanecontainer__getnodecount)||  \n|[CPaneContainer::GetPaneDivider](#cpanecontainer__getpanedivider)||  \n|[CPaneContainer::GetParentPaneContainer](#cpanecontainer__getparentpanecontainer)||  \n|[CPaneContainer::GetRecentPaneDividerRect](#cpanecontainer__getrecentpanedividerrect)||  \n|[CPaneContainer::GetRecentPaneDividerStyle](#cpanecontainer__getrecentpanedividerstyle)||  \n|[CPaneContainer::GetRecentPercent](#cpanecontainer__getrecentpercent)||  \n|[CPaneContainer::GetRefCount](#cpanecontainer__getrefcount)||  \n|[CPaneContainer::GetResizeStep](#cpanecontainer__getresizestep)||  \n|[CPaneContainer::GetRightPane](#cpanecontainer__getrightpane)||  \n|[CPaneContainer::GetRightPaneContainer](#cpanecontainer__getrightpanecontainer)||  \n|[CPaneContainer::GetTotalReferenceCount](#cpanecontainer__gettotalreferencecount)||  \n|[CPaneContainer::GetWindowRect](#cpanecontainer__getwindowrect)||  \n|[CPaneContainer::IsDisposed](#cpanecontainer__isdisposed)||  \n|[CPaneContainer::IsEmpty](#cpanecontainer__isempty)||  \n|[CPaneContainer::IsLeftPane](#cpanecontainer__isleftpane)||  \n|[CPaneContainer::IsLeftPaneContainer](#cpanecontainer__isleftpanecontainer)||  \n|[CPaneContainer::IsLeftPartEmpty](#cpanecontainer__isleftpartempty)||  \n|[CPaneContainer::IsRightPartEmpty](#cpanecontainer__isrightpartempty)||  \n|[CPaneContainer::IsVisible](#cpanecontainer__isvisible)||  \n|[CPaneContainer::Move](#cpanecontainer__move)||  \n|[CPaneContainer::OnDeleteHidePane](#cpanecontainer__ondeletehidepane)||  \n|[CPaneContainer::OnMoveInternalPaneDivider](#cpanecontainer__onmoveinternalpanedivider)||  \n|[CPaneContainer::OnShowPane](#cpanecontainer__onshowpane)||  \n|[CPaneContainer::Release](#cpanecontainer__release)||  \n|[CPaneContainer::ReleaseEmptyPaneContainer](#cpanecontainer__releaseemptypanecontainer)||  \n|[CPaneContainer::RemoveNonValidPanes](#cpanecontainer__removenonvalidpanes)||  \n|[CPaneContainer::RemovePane](#cpanecontainer__removepane)||  \n|[CPaneContainer::Resize](#cpanecontainer__resize)||  \n|[CPaneContainer::ResizePane](#cpanecontainer__resizepane)||  \n|[CPaneContainer::ResizePartOfPaneContainer](#cpanecontainer__resizepartofpanecontainer)||  \n|[CPaneContainer::Serialize](#cpanecontainer__serialize)|Reads or writes this object from or to an archive. (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)|  \n|[CPaneContainer::SetPane](#cpanecontainer__setpane)||  \n|[CPaneContainer::SetPaneContainer](#cpanecontainer__setpanecontainer)||  \n|[CPaneContainer::SetPaneDivider](#cpanecontainer__setpanedivider)||  \n|[CPaneContainer::SetParentPaneContainer](#cpanecontainer__setparentpanecontainer)||  \n|[CPaneContainer::SetRecentPercent](#cpanecontainer__setrecentpercent)||  \n|[CPaneContainer::SetUpByID](#cpanecontainer__setupbyid)||  \n|[CPaneContainer::StoreRecentDockSiteInfo](#cpanecontainer__storerecentdocksiteinfo)||  \n|[CPaneContainer::StretchPaneContainer](#cpanecontainer__stretchpanecontainer)||  \n  \n### Remarks  \n `CPaneContainer` objects are created automatically by the framework.  \n  \n## Example  \n The following example demonstrates how to construct an instance of the `CPaneContainer` class. This code snippet is part of the [Set Pane Size sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_SetPaneSize#2](../../mfc/reference/codesnippet/cpp/cpanecontainer-class_1.h)]  \n[!code-cpp[NVC_MFC_SetPaneSize#1](../../mfc/reference/codesnippet/cpp/cpanecontainer-class_2.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CPaneContainer](../../mfc/reference/cpanecontainer-class.md)  \n  \n## Requirements  \n **Header:** afxpanecontainer.h  \n  \n##  <a name=\"cpanecontainer__addpane\"></a>  CPaneContainer::AddPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCDockablePane* AddPane(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__addref\"></a>  CPaneContainer::AddRef  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid AddRef();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__addsubpanecontainer\"></a>  CPaneContainer::AddSubPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL AddSubPaneContainer(\n    CPaneContainer* pContainer,  \n    BOOL bRightNodeNew);\n```  \n  \n### Parameters  \n [in] `pContainer`  \n [in] `bRightNodeNew`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__calcavailablepanespace\"></a>  CPaneContainer::CalcAvailablePaneSpace  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int CalcAvailablePaneSpace(\n    int nRequiredOffset,  \n    CPane* pBar,  \n    CPaneContainer* pContainer,  \n    BOOL bLeftBar);\n```  \n  \n### Parameters  \n [in] `nRequiredOffset`  \n [in] `pBar`  \n [in] `pContainer`  \n [in] `bLeftBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__calcavailablespace\"></a>  CPaneContainer::CalcAvailableSpace  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CSize CalcAvailableSpace(\n    CSize sizeStretch,  \n    BOOL bLeftBar);\n```  \n  \n### Parameters  \n [in] `sizeStretch`  \n [in] `bLeftBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__calculaterecentsize\"></a>  CPaneContainer::CalculateRecentSize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid CalculateRecentSize();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__checkpanedividervisibility\"></a>  CPaneContainer::CheckPaneDividerVisibility  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid CheckPaneDividerVisibility();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__copy\"></a>  CPaneContainer::Copy  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CPaneContainer* Copy(CPaneContainer* pParentContainer);\n```  \n  \n### Parameters  \n [in] `pParentContainer`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__cpanecontainer\"></a>  CPaneContainer::CPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCPaneContainer(\n    CPaneContainerManager* pManager = NULL,  \n    CDockablePane* pLeftBar = NULL,  \n    CDockablePane* pRightBar = NULL,  \n    CPaneDivider* pSlider = NULL);\n```  \n  \n### Parameters  \n [in] `pManager`  \n [in] `pLeftBar`  \n [in] `pRightBar`  \n [in] `pSlider`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__deletepane\"></a>  CPaneContainer::DeletePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void DeletePane(\n    CDockablePane* pBar,  \n    BC_FIND_CRITERIA barType);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `barType`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__findsubpanecontainer\"></a>  CPaneContainer::FindSubPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCPaneContainer* FindSubPaneContainer(\n    const CObject* pObject,  \n    BC_FIND_CRITERIA findCriteria);\n```  \n  \n### Parameters  \n [in] `pObject`  \n [in] `findCriteria`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__findtabbedpane\"></a>  CPaneContainer::FindTabbedPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCDockablePane* FindTabbedPane(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getassociatedsiblingpaneids\"></a>  CPaneContainer::GetAssociatedSiblingPaneIDs  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCList<UINT, UINT>* GetAssociatedSiblingPaneIDs(\n    CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getleftpane\"></a>  CPaneContainer::GetLeftPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nconst CDockablePane* GetLeftPane() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getleftpanecontainer\"></a>  CPaneContainer::GetLeftPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nconst CPaneContainer* GetLeftPaneContainer() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getminsize\"></a>  CPaneContainer::GetMinSize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void GetMinSize(CSize& size) const;\n\n \n```  \n  \n### Parameters  \n [in] `size`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getminsizeleft\"></a>  CPaneContainer::GetMinSizeLeft  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void GetMinSizeLeft(CSize& size) const;\n\n \n```  \n  \n### Parameters  \n [in] `size`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getminsizeright\"></a>  CPaneContainer::GetMinSizeRight  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void GetMinSizeRight(CSize& size) const;\n\n \n```  \n  \n### Parameters  \n [in] `size`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getnodecount\"></a>  CPaneContainer::GetNodeCount  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetNodeCount() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getpanedivider\"></a>  CPaneContainer::GetPaneDivider  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nconst CPaneDivider* GetPaneDivider() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getparentpanecontainer\"></a>  CPaneContainer::GetParentPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCPaneContainer* GetParentPaneContainer() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getrecentpanedividerrect\"></a>  CPaneContainer::GetRecentPaneDividerRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCRect GetRecentPaneDividerRect() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getrecentpanedividerstyle\"></a>  CPaneContainer::GetRecentPaneDividerStyle  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nDWORD GetRecentPaneDividerStyle() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getrecentpercent\"></a>  CPaneContainer::GetRecentPercent  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetRecentPercent();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getrefcount\"></a>  CPaneContainer::GetRefCount  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nLONG GetRefCount();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getresizestep\"></a>  CPaneContainer::GetResizeStep  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetResizeStep() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getrightpane\"></a>  CPaneContainer::GetRightPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nconst CDockablePane* GetRightPane() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getrightpanecontainer\"></a>  CPaneContainer::GetRightPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nconst CPaneContainer* GetRightPaneContainer() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__gettotalreferencecount\"></a>  CPaneContainer::GetTotalReferenceCount  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetTotalReferenceCount() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__getwindowrect\"></a>  CPaneContainer::GetWindowRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void GetWindowRect(\n    CRect& rect,  \n    BOOL bIgnoreVisibility = FALSE) const;\n\n \n```  \n  \n### Parameters  \n [in] `rect`  \n [in] `bIgnoreVisibility`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__isdisposed\"></a>  CPaneContainer::IsDisposed  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsDisposed() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__isempty\"></a>  CPaneContainer::IsEmpty  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsEmpty() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__isleftpane\"></a>  CPaneContainer::IsLeftPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsLeftPane(CDockablePane* pBar) const;\n\n \n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__isleftpanecontainer\"></a>  CPaneContainer::IsLeftPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsLeftPaneContainer() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__isleftpartempty\"></a>  CPaneContainer::IsLeftPartEmpty  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsLeftPartEmpty(BOOL bCheckVisibility = FALSE) const;\n\n \n```  \n  \n### Parameters  \n [in] `bCheckVisibility`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__isrightpartempty\"></a>  CPaneContainer::IsRightPartEmpty  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsRightPartEmpty(BOOL bCheckVisibility = FALSE) const;\n\n \n```  \n  \n### Parameters  \n [in] `bCheckVisibility`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__isvisible\"></a>  CPaneContainer::IsVisible  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsVisible() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__move\"></a>  CPaneContainer::Move  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void Move(CPoint ptNewLeftTop);\n```  \n  \n### Parameters  \n [in] `ptNewLeftTop`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__ondeletehidepane\"></a>  CPaneContainer::OnDeleteHidePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid OnDeleteHidePane(\n    CDockablePane* pBar,  \n    BOOL bHide);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bHide`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__onmoveinternalpanedivider\"></a>  CPaneContainer::OnMoveInternalPaneDivider  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int OnMoveInternalPaneDivider(\n    int nOffset,  \n    HDWP& hdwp);\n```  \n  \n### Parameters  \n [in] `nOffset`  \n [in] `hdwp`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__onshowpane\"></a>  CPaneContainer::OnShowPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnShowPane(\n    CDockablePane* pBar,  \n    BOOL bShow);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bShow`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__release\"></a>  CPaneContainer::Release  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nDWORD Release();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__releaseemptypanecontainer\"></a>  CPaneContainer::ReleaseEmptyPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid ReleaseEmptyPaneContainer();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__removenonvalidpanes\"></a>  CPaneContainer::RemoveNonValidPanes  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid RemoveNonValidPanes();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__removepane\"></a>  CPaneContainer::RemovePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void RemovePane(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__resize\"></a>  CPaneContainer::Resize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void Resize(\n    CRect rect,  \n    HDWP& hdwp,  \n    BOOL bRedraw = FALSE);\n```  \n  \n### Parameters  \n [in] `rect`  \n [in] `hdwp`  \n [in] `bRedraw`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__resizepane\"></a>  CPaneContainer::ResizePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void ResizePane(\n    int nOffset,  \n    CPane* pBar,  \n    CPaneContainer* pContainer,  \n    BOOL bHorz,  \n    BOOL bLeftBar,  \n    HDWP& hdwp);\n```  \n  \n### Parameters  \n [in] `nOffset`  \n [in] `pBar`  \n [in] `pContainer`  \n [in] `bHorz`  \n [in] `bLeftBar`  \n [in] `hdwp`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__resizepartofpanecontainer\"></a>  CPaneContainer::ResizePartOfPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void ResizePartOfPaneContainer(\n    int nOffset,  \n    BOOL bLeftPart,  \n    HDWP& hdwp);\n```  \n  \n### Parameters  \n [in] `nOffset`  \n [in] `bLeftPart`  \n [in] `hdwp`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__serialize\"></a>  CPaneContainer::Serialize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid Serialize(CArchive& ar);\n```  \n  \n### Parameters  \n [in] `ar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__setpane\"></a>  CPaneContainer::SetPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetPane(\n    CDockablePane* pBar,  \n    BOOL bLeft);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bLeft`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__setpanecontainer\"></a>  CPaneContainer::SetPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetPaneContainer(\n    CPaneContainer* pContainer,  \n    BOOL bLeft);\n```  \n  \n### Parameters  \n [in] `pContainer`  \n [in] `bLeft`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__setpanedivider\"></a>  CPaneContainer::SetPaneDivider  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetPaneDivider(CPaneDivider* pSlider);\n```  \n  \n### Parameters  \n [in] `pSlider`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__setparentpanecontainer\"></a>  CPaneContainer::SetParentPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetParentPaneContainer(CPaneContainer* p);\n```  \n  \n### Parameters  \n [in] `p`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__setrecentpercent\"></a>  CPaneContainer::SetRecentPercent  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetRecentPercent(int nRecentPercent);\n```  \n  \n### Parameters  \n [in] `nRecentPercent`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__setupbyid\"></a>  CPaneContainer::SetUpByID  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL SetUpByID(\n    UINT nID,  \n    CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `nID`  \n [in] `pBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__storerecentdocksiteinfo\"></a>  CPaneContainer::StoreRecentDockSiteInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void StoreRecentDockSiteInfo(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanecontainer__stretchpanecontainer\"></a>  CPaneContainer::StretchPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int StretchPaneContainer(\n    int nOffset,  \n    BOOL bStretchHorz,  \n    BOOL bLeftBar,  \n    BOOL bMoveSlider,  \n    HDWP& hdwp);\n```  \n  \n### Parameters  \n [in] `nOffset`  \n [in] `bStretchHorz`  \n [in] `bLeftBar`  \n [in] `bMoveSlider`  \n [in] `hdwp`  \n  \n### Return Value  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md)\n"}