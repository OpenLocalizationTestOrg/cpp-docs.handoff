{"nodes":[{"pos":[12,66],"content":"Customizing C Command-Line Processing | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Customizing C Command-Line Processing | Microsoft Docs","pos":[0,54]}]},{"content":"Customizing C Command-Line Processing","pos":[893,930]},{"content":"If your program does not take command-line arguments, you can save a small amount of space by suppressing use of the library routine that performs command-line processing.","pos":[931,1102]},{"content":"This routine is called <bpt id=\"p1\">**</bpt>_setargv<ept id=\"p1\">**</ept> (or <bpt id=\"p2\">**</bpt>_wsetargv<ept id=\"p2\">**</ept> in the wide-character environment), as described in <bpt id=\"p3\">[</bpt>Expanding Wildcard Arguments<ept id=\"p3\">](../c-language/expanding-wildcard-arguments.md)</ept>.","pos":[1103,1287],"source":" This routine is called **_setargv** (or **_wsetargv** in the wide-character environment), as described in [Expanding Wildcard Arguments](../c-language/expanding-wildcard-arguments.md)."},{"content":"To suppress its use, define a routine that does nothing in the file containing the <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> function and name it <bpt id=\"p2\">**</bpt>_setargv<ept id=\"p2\">**</ept> (or <bpt id=\"p3\">**</bpt>_wsetargv<ept id=\"p3\">**</ept> in the wide-character environment).","pos":[1288,1467],"source":" To suppress its use, define a routine that does nothing in the file containing the **main** function and name it **_setargv** (or **_wsetargv** in the wide-character environment)."},{"content":"The call to <bpt id=\"p1\">**</bpt>_setargv<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>_wsetargv<ept id=\"p2\">**</ept> is then satisfied by your definition of <bpt id=\"p3\">**</bpt>_setargv<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>_wsetargv<ept id=\"p4\">**</ept> , and the library version is not loaded.","pos":[1468,1620],"source":" The call to **_setargv** or **_wsetargv** is then satisfied by your definition of **_setargv** or **_wsetargv** , and the library version is not loaded."},{"pos":[1627,1839],"content":"Similarly, if you never access the environment table through the <ph id=\"ph1\">`envp`</ph> argument, you can provide your own empty routine to be used in place of <bpt id=\"p1\">**</bpt>_setenvp<ept id=\"p1\">**</ept> (or <bpt id=\"p2\">**</bpt>_wsetenvp<ept id=\"p2\">**</ept>), the environment-processing routine.","source":"Similarly, if you never access the environment table through the `envp` argument, you can provide your own empty routine to be used in place of **_setenvp** (or **_wsetenvp**), the environment-processing routine."},{"pos":[1846,2106],"content":"If your program makes calls to the <bpt id=\"p1\">**</bpt>_spawn<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>_exec<ept id=\"p2\">**</ept> family of routines in the C run-time library, you should not suppress the environment-processing routine, since this routine is used to pass an environment from the spawning process to the new process.","source":"If your program makes calls to the **_spawn** or **_exec** family of routines in the C run-time library, you should not suppress the environment-processing routine, since this routine is used to pass an environment from the spawning process to the new process."},{"content":"See Also","pos":[2115,2123]},{"content":"main Function and Program Execution","pos":[2128,2163]}],"content":"---\ntitle: \"Customizing C Command-Line Processing | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_spawn functions\"\n  - \"command line, processing\"\n  - \"command-line processing\"\n  - \"startup code, customizing command-line processing\"\n  - \"environment, environment-processing routine\"\n  - \"_setargv function\"\n  - \"command line, processing arguments\"\n  - \"suppressing environment processing\"\n  - \"_exec function\"\nms.assetid: c20fa11d-b35b-4f3e-93b6-2cd5a1c3c993\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Customizing C Command-Line Processing\nIf your program does not take command-line arguments, you can save a small amount of space by suppressing use of the library routine that performs command-line processing. This routine is called **_setargv** (or **_wsetargv** in the wide-character environment), as described in [Expanding Wildcard Arguments](../c-language/expanding-wildcard-arguments.md). To suppress its use, define a routine that does nothing in the file containing the **main** function and name it **_setargv** (or **_wsetargv** in the wide-character environment). The call to **_setargv** or **_wsetargv** is then satisfied by your definition of **_setargv** or **_wsetargv** , and the library version is not loaded.  \n  \n Similarly, if you never access the environment table through the `envp` argument, you can provide your own empty routine to be used in place of **_setenvp** (or **_wsetenvp**), the environment-processing routine.  \n  \n If your program makes calls to the **_spawn** or **_exec** family of routines in the C run-time library, you should not suppress the environment-processing routine, since this routine is used to pass an environment from the spawning process to the new process.  \n  \n## See Also  \n [main Function and Program Execution](../c-language/main-function-and-program-execution.md)"}