{"nodes":[{"pos":[12,52],"content":"map::key_comp (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"map::key_comp (STL-CLR) | Microsoft Docs","pos":[0,40]}]},{"content":"map::key_comp (STL/CLR)","pos":[631,654]},{"content":"Copies the ordering delegate for two keys.","pos":[655,697]},{"content":"Syntax","pos":[706,712]},{"content":"Remarks","pos":[762,769]},{"content":"The member function returns the ordering delegate used to order the controlled sequence.","pos":[773,861]},{"content":"You use it to compare two keys.","pos":[862,893]},{"content":"Example","pos":[902,909]},{"content":"Requirements","pos":[2105,2117]},{"pos":[2121,2146],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/map&gt;","source":"**Header:** \\<cliext/map>"},{"pos":[2153,2174],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2183,2191]},{"content":"map (STL/CLR)","pos":[2196,2209]},{"content":"map::key_compare (STL/CLR)","pos":[2242,2268]},{"content":"map::key_type (STL/CLR)","pos":[2313,2336]}],"content":"---\ntitle: \"map::key_comp (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::map::key_comp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"key_comp member [STL/CLR]\"\nms.assetid: 42607057-d0d7-48b9-aadf-f3336fcc50b4\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# map::key_comp (STL/CLR)\nCopies the ordering delegate for two keys.  \n  \n## Syntax  \n  \n```  \nkey_compare^key_comp();  \n```  \n  \n## Remarks  \n The member function returns the ordering delegate used to order the controlled sequence. You use it to compare two keys.  \n  \n## Example  \n  \n```  \n// cliext_map_key_comp.cpp   \n// compile with: /clr   \n#include <cliext/map>   \n  \ntypedef cliext::map<wchar_t, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n    Mymap::key_compare^ kcomp = c1.key_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        kcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        kcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        kcomp(L'b', L'a'));   \n    System::Console::WriteLine();   \n  \n// test a different ordering rule   \n    Mymap c2 = cliext::greater<wchar_t>();   \n    kcomp = c2.key_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        kcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        kcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        kcomp(L'b', L'a'));   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ncompare(L'a', L'a') = False  \ncompare(L'a', L'b') = True  \ncompare(L'b', L'a') = False  \n  \ncompare(L'a', L'a') = False  \ncompare(L'a', L'b') = False  \ncompare(L'b', L'a') = True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [map (STL/CLR)](../dotnet/map-stl-clr.md)   \n [map::key_compare (STL/CLR)](../dotnet/map-key-compare-stl-clr.md)   \n [map::key_type (STL/CLR)](../dotnet/map-key-type-stl-clr.md)"}