{"nodes":[{"pos":[12,55],"content":"&lt;hash_map&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_map<ph id=\"ph1\">&amp;gt;</ph> functions | Microsoft Docs","pos":[4,43],"source":"hash_map&gt; functions | Microsoft Docs"}]},{"content":"hash_map<ph id=\"ph1\">&amp;gt;</ph> functions","pos":[261,283],"source":"hash_map&gt; functions"},{"content":"swap","pos":[300,304]},{"content":"swap (hash_map)","pos":[314,329]},{"pos":[391,406],"content":"swap (hash_map)"},{"pos":[414,532],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_map Class](../standard-library/unordered-map-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_map Class](../standard-library/unordered-map-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_map Class<ept id=\"p1\">](../standard-library/unordered-map-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_map Class](../standard-library/unordered-map-class.md)."}]}]},{"content":"Exchanges the elements of two hash_maps.","pos":[539,579]},{"content":"Parameters","pos":[716,726]},{"content":"The hash_map whose elements are to be exchanged with those of the map <ph id=\"ph1\">`left`</ph>.","pos":[741,818],"source":" The hash_map whose elements are to be exchanged with those of the map `left`."},{"content":"The hash_map whose elements are to be exchanged with those of the map <ph id=\"ph1\">`right`</ph>.","pos":[835,913],"source":" The hash_map whose elements are to be exchanged with those of the map `right`."},{"content":"Remarks","pos":[923,930]},{"content":"The template function is an algorithm specialized on the container class hash_map to execute the member function <ph id=\"ph1\">`left.`</ph><bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__swap)</ept><bpt id=\"p2\">*</bpt>(right<ept id=\"p2\">*</ept>).","pos":[934,1126],"source":"The template function is an algorithm specialized on the container class hash_map to execute the member function `left.`[swap](../standard-library/basic-ios-class.md#basic_ios__swap)*(right*)."},{"content":"This is an instance of the partial ordering of function templates by the compiler.","pos":[1127,1209]},{"content":"When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function.","pos":[1210,1416]},{"content":"The general version of the template function, <bpt id=\"p1\">**</bpt>template <ph id=\"ph1\">\\&lt;</ph>class T&gt; void swap(T&amp;, T&amp;)<ept id=\"p1\">**</ept>, in the algorithm header file works by assignment and is a slow operation.","pos":[1417,1579],"source":" The general version of the template function, **template \\<class T> void swap(T&, T&)**, in the algorithm header file works by assignment and is a slow operation."},{"content":"The specialized version in each container is much faster as it can work with the internal representation of the container class.","pos":[1580,1708]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[1715,1953],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[1954,2043],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[2074,2078],"content":"swap"},{"pos":[2086,2214],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Exchanges the elements of two hash_multimaps.","pos":[2221,2266]},{"content":"Parameters","pos":[2413,2423]},{"content":"The hash_multimap whose elements are to be exchanged with those of the map <ph id=\"ph1\">`left`</ph>.","pos":[2438,2520],"source":" The hash_multimap whose elements are to be exchanged with those of the map `left`."},{"content":"The hash_multimap whose elements are to be exchanged with those of the map <ph id=\"ph1\">`right`</ph>.","pos":[2537,2620],"source":" The hash_multimap whose elements are to be exchanged with those of the map `right`."},{"content":"Remarks","pos":[2630,2637]},{"content":"The template function is an algorithm specialized on the container class hash_multimap to execute the member function <ph id=\"ph1\">`left.`</ph><bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](../standard-library/hash-multimap-class.md#hash_multimap__swap)</ept><bpt id=\"p2\">*</bpt>(right<ept id=\"p2\">*</ept><ph id=\"ph2\">`)`</ph>.","pos":[2641,2848],"source":"The template function is an algorithm specialized on the container class hash_multimap to execute the member function `left.`[swap](../standard-library/hash-multimap-class.md#hash_multimap__swap)*(right*`)`."},{"content":"This is an instance of the partial ordering of function templates by the compiler.","pos":[2849,2931]},{"content":"When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function.","pos":[2932,3138]},{"content":"The general version of the template function, <bpt id=\"p1\">**</bpt>template <ph id=\"ph1\">\\&lt;</ph>class T&gt; void swap(T&amp;, T&amp;)<ept id=\"p1\">**</ept>, in the algorithm header file works by assignment and is a slow operation.","pos":[3139,3301],"source":" The general version of the template function, **template \\<class T> void swap(T&, T&)**, in the algorithm header file works by assignment and is a slow operation."},{"content":"The specialized version in each container is much faster as it can work with the internal representation of the container class.","pos":[3302,3430]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[3437,3675],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[3676,3765],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"content":"See Also","pos":[3774,3782]},{"content":"&lt;hash_map&gt;","pos":[3787,3797],"source":"<hash_map>"}],"content":"---\ntitle: \"&lt;hash_map&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 28748cd0-71f7-41b9-b068-579183645fba\ncaps.latest.revision: 9\nmanager: \"ghogen\"\n---\n# &lt;hash_map&gt; functions\n|||  \n|-|-|  \n|[swap](#swap)|[swap (hash_map)](#swap__hash_map_)|  \n  \n##  <a name=\"swap__hash_map_\"></a>  swap (hash_map)  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_map Class](../standard-library/unordered-map-class.md).  \n  \n Exchanges the elements of two hash_maps.  \n  \n```\nvoid swap(\n    hash_map <Key, Type, Traits, Alloctor>& left,\n    hash_map <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `right`  \n The hash_map whose elements are to be exchanged with those of the map `left`.  \n  \n `left`  \n The hash_map whose elements are to be exchanged with those of the map `right`.  \n  \n### Remarks  \n The template function is an algorithm specialized on the container class hash_map to execute the member function `left.`[swap](../standard-library/basic-ios-class.md#basic_ios__swap)*(right*). This is an instance of the partial ordering of function templates by the compiler. When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function. The general version of the template function, **template \\<class T> void swap(T&, T&)**, in the algorithm header file works by assignment and is a slow operation. The specialized version in each container is much faster as it can work with the internal representation of the container class.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n##  <a name=\"swap\"></a>  swap  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Exchanges the elements of two hash_multimaps.  \n  \n```\nvoid swap(\n    hash_multimap <Key, Type, Traits, Alloctor>& left,\n    hash_multimap <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `right`  \n The hash_multimap whose elements are to be exchanged with those of the map `left`.  \n  \n `left`  \n The hash_multimap whose elements are to be exchanged with those of the map `right`.  \n  \n### Remarks  \n The template function is an algorithm specialized on the container class hash_multimap to execute the member function `left.`[swap](../standard-library/hash-multimap-class.md#hash_multimap__swap)*(right*`)`. This is an instance of the partial ordering of function templates by the compiler. When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function. The general version of the template function, **template \\<class T> void swap(T&, T&)**, in the algorithm header file works by assignment and is a slow operation. The specialized version in each container is much faster as it can work with the internal representation of the container class.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n## See Also  \n [<hash_map>](../standard-library/hash-map.md)\n\n\n\n"}