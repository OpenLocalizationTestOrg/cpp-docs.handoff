{"nodes":[{"pos":[12,56],"content":"forward_iterator_tag Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"forward_iterator_tag Struct | Microsoft Docs","pos":[0,44]}]},{"pos":[771,798],"content":"forward_iterator_tag Struct","linkify":"forward_iterator_tag Struct","nodes":[{"content":"forward_iterator_tag Struct","pos":[0,27]}]},{"pos":[799,905],"content":"A class that provides a return type for <bpt id=\"p1\">**</bpt>iterator_category<ept id=\"p1\">**</ept> function that represents a forward iterator.","source":"A class that provides a return type for **iterator_category** function that represents a forward iterator."},{"pos":[914,920],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1005,1012],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The category tag classes are used as compile tags for algorithm selection.","pos":[1016,1090]},{"content":"The template function needs to find out what is the most specific category of its iterator argument so that it can use the most efficient algorithm at compile time.","pos":[1091,1255]},{"content":"For every iterator of type <ph id=\"ph1\">`Iterator`</ph>, <ph id=\"ph2\">`iterator_traits`</ph><ph id=\"ph3\">&lt; </ph><ph id=\"ph4\">`Iterator`</ph><ph id=\"ph5\">&gt; </ph><bpt id=\"p1\">**</bpt>::iterator_category<ept id=\"p1\">**</ept> must be defined to be the most specific category tag that describes the iterator's behavior.","pos":[1256,1442],"source":" For every iterator of type `Iterator`, `iterator_traits`< `Iterator`> **::iterator_category** must be defined to be the most specific category tag that describes the iterator's behavior."},{"pos":[1449,1593],"content":"The type is the same as <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>Iter<ept id=\"p2\">**</ept><ph id=\"ph2\">&gt; </ph><bpt id=\"p3\">**</bpt>::iterator_category<ept id=\"p3\">**</ept> when <bpt id=\"p4\">**</bpt>Iter<ept id=\"p4\">**</ept> describes an object that can serve as a forward iterator.","source":"The type is the same as **iterator**\\< **Iter**> **::iterator_category** when **Iter** describes an object that can serve as a forward iterator."},{"pos":[1602,1609],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1613,1823],"content":"See <bpt id=\"p1\">[</bpt>iterator_traits<ept id=\"p1\">](../standard-library/iterator-traits-struct.md)</ept> or <bpt id=\"p2\">[</bpt>random_access_iterator_tag<ept id=\"p2\">](../standard-library/random-access-iterator-tag-struct.md)</ept> for an example of how to use the <bpt id=\"p3\">**</bpt>iterator_tag<ept id=\"p3\">**</ept>s.","source":"See [iterator_traits](../standard-library/iterator-traits-struct.md) or [random_access_iterator_tag](../standard-library/random-access-iterator-tag-struct.md) for an example of how to use the **iterator_tag**s."},{"pos":[1832,1844],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1848,1871],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[1878,1896],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1905,1913],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>input_iterator_tag Struct<ept id=\"p1\">](../standard-library/input-iterator-tag-struct.md)</ept><ph id=\"ph1\"> </ph>","pos":[1917,1995],"source":"[input_iterator_tag Struct](../standard-library/input-iterator-tag-struct.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[1998,2109],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[2112,2200],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"forward_iterator_tag Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.forward_iterator_tag\"\n  - \"forward_iterator_tag\"\n  - \"std::forward_iterator_tag\"\n  - \"xutility/std::forward_iterator_tag\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"forward_iterator_tag struct\"\n  - \"forward_iterator_tag class\"\nms.assetid: 68b633ac-b135-4e9e-837d-14248a262ec5\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# forward_iterator_tag Struct\nA class that provides a return type for **iterator_category** function that represents a forward iterator.  \n  \n## Syntax  \n  \n```\nstruct forward_iterator_tag    : public input_iterator_tag {};\n```  \n  \n## Remarks  \n The category tag classes are used as compile tags for algorithm selection. The template function needs to find out what is the most specific category of its iterator argument so that it can use the most efficient algorithm at compile time. For every iterator of type `Iterator`, `iterator_traits`< `Iterator`> **::iterator_category** must be defined to be the most specific category tag that describes the iterator's behavior.  \n  \n The type is the same as **iterator**\\< **Iter**> **::iterator_category** when **Iter** describes an object that can serve as a forward iterator.  \n  \n## Example  \n See [iterator_traits](../standard-library/iterator-traits-struct.md) or [random_access_iterator_tag](../standard-library/random-access-iterator-tag-struct.md) for an example of how to use the **iterator_tag**s.  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n## See Also  \n [input_iterator_tag Struct](../standard-library/input-iterator-tag-struct.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}