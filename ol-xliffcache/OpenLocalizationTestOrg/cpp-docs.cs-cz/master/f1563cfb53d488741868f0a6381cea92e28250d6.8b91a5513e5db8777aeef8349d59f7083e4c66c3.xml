{"nodes":[{"pos":[12,37],"content":"_locking | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_locking | Microsoft Docs","pos":[0,25]}]},{"pos":[1024,1032],"content":"_locking","linkify":"_locking","nodes":[{"content":"_locking","pos":[0,8]}]},{"content":"Locks or unlocks bytes of a file.","pos":[1033,1066]},{"pos":[1075,1081],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1183,1193],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"File descriptor.","pos":[1205,1221]},{"content":"<bpt id=\"p1\">*</bpt>mode<ept id=\"p1\">*</ept>","pos":[1228,1234],"source":"*mode*"},{"content":"Locking action to perform.","pos":[1238,1264]},{"content":"<bpt id=\"p1\">*</bpt>nbytes<ept id=\"p1\">*</ept>","pos":[1271,1279],"source":"*nbytes*"},{"content":"Number of bytes to lock.","pos":[1283,1307]},{"pos":[1316,1328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`_locking`</ph> returns 0 if successful.","pos":[1332,1367],"source":"`_locking` returns 0 if successful."},{"content":"A return value of –1 indicates failure, in which case <bpt id=\"p1\">[</bpt>errno<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> is set to one of the following values.","pos":[1368,1536],"source":" A return value of –1 indicates failure, in which case [errno](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) is set to one of the following values."},{"content":"Locking violation (file already locked or unlocked).","pos":[1555,1607]},{"content":"Invalid file descriptor.","pos":[1625,1649]},{"content":"Locking violation.","pos":[1671,1689]},{"content":"Returned when the <ph id=\"ph1\">`_LK_LOCK`</ph> or <ph id=\"ph2\">`_LK_RLCK`</ph> flag is specified and the file cannot be locked after 10 attempts.","pos":[1690,1799],"source":" Returned when the `_LK_LOCK` or `_LK_RLCK` flag is specified and the file cannot be locked after 10 attempts."},{"content":"An invalid argument was given to <ph id=\"ph1\">`_locking`</ph>.","pos":[1818,1862],"source":" An invalid argument was given to `_locking`."},{"pos":[1869,2077],"content":"If the failure is due to a bad parameter, such as an invalid file descriptor, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","source":"If the failure is due to a bad parameter, such as an invalid file descriptor, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"pos":[2086,2093],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_locking`</ph> function locks or unlocks <bpt id=\"p1\">*</bpt>nbytes<ept id=\"p1\">*</ept> bytes of the file specified by <ph id=\"ph2\">`fd`</ph>.","pos":[2097,2183],"source":"The `_locking` function locks or unlocks *nbytes* bytes of the file specified by `fd`."},{"content":"Locking bytes in a file prevents access to those bytes by other processes.","pos":[2184,2258]},{"content":"All locking or unlocking begins at the current position of the file pointer and proceeds for the next <bpt id=\"p1\">*</bpt>nbytes<ept id=\"p1\">*</ept> bytes.","pos":[2259,2376],"source":" All locking or unlocking begins at the current position of the file pointer and proceeds for the next *nbytes* bytes."},{"content":"It is possible to lock bytes past end of file.","pos":[2377,2423]},{"pos":[2430,2517],"content":"<bpt id=\"p1\">*</bpt>mode<ept id=\"p1\">*</ept> must be one of the following manifest constants, which are defined in Locking.h.","source":"*mode* must be one of the following manifest constants, which are defined in Locking.h."},{"content":"Locks the specified bytes.","pos":[2538,2564]},{"content":"If the bytes cannot be locked, the program immediately tries again after 1 second.","pos":[2565,2647]},{"content":"If, after 10 attempts, the bytes cannot be locked, the constant returns an error.","pos":[2648,2729]},{"content":"Locks the specified bytes.","pos":[2751,2777]},{"content":"If the bytes cannot be locked, the constant returns an error.","pos":[2778,2839]},{"content":"Same as <ph id=\"ph1\">`_LK_NBLCK`</ph>.","pos":[2862,2882],"source":" Same as `_LK_NBLCK`."},{"content":"Same as <ph id=\"ph1\">`_LK_LOCK`</ph>.","pos":[2903,2922],"source":" Same as `_LK_LOCK`."},{"content":"Unlocks the specified bytes, which must have been previously locked.","pos":[2944,3012]},{"content":"Multiple regions of a file that do not overlap can be locked.","pos":[3019,3080]},{"content":"A region being unlocked must have been previously locked.","pos":[3081,3138]},{"content":"<ph id=\"ph1\">`_locking`</ph> does not merge adjacent regions; if two locked regions are adjacent, each region must be unlocked separately.","pos":[3139,3259],"source":"`_locking` does not merge adjacent regions; if two locked regions are adjacent, each region must be unlocked separately."},{"content":"Regions should be locked only briefly and should be unlocked before closing a file or exiting the program.","pos":[3260,3366]},{"pos":[3375,3387],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3394,3401]},{"content":"Required header","pos":[3402,3417]},{"content":"Optional header","pos":[3418,3433]},{"content":"<ph id=\"ph1\">\\&lt;</ph>io.h&gt; and <ph id=\"ph2\">\\&lt;</ph>sys/locking.h&gt;","pos":[3511,3539],"source":"\\<io.h> and \\<sys/locking.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[3540,3550],"source":"\\<errno.h>"},{"pos":[3558,3676],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3685,3694],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[3698,3790],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[3799,3806],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5153,5175],"content":"Input: crt_locking.txt","linkify":"Input: crt_locking.txt","nodes":[{"content":"Input: crt_locking.txt","pos":[0,22]}]},{"pos":[5253,5266],"content":"Sample Output","linkify":"Sample Output","nodes":[{"content":"Sample Output","pos":[0,13]}]},{"pos":[5436,5461],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5465,5568],"content":"<bpt id=\"p1\">[</bpt>System::IO::FileStream::Lock<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.filestream.lock.aspx)</ept>","source":"[System::IO::FileStream::Lock](https://msdn.microsoft.com/en-us/library/system.io.filestream.lock.aspx)"},{"pos":[5577,5585],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>File Handling<ept id=\"p1\">](../../c-runtime-library/file-handling.md)</ept><ph id=\"ph1\"> </ph>","pos":[5589,5647],"source":"[File Handling](../../c-runtime-library/file-handling.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_creat, _wcreat<ept id=\"p1\">](../../c-runtime-library/reference/creat-wcreat.md)</ept><ph id=\"ph1\"> </ph>","pos":[5650,5720],"source":" [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_open, _wopen<ept id=\"p1\">](../../c-runtime-library/reference/open-wopen.md)</ept>","pos":[5723,5788],"source":" [_open, _wopen](../../c-runtime-library/reference/open-wopen.md)"}],"content":"---\ntitle: \"_locking | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_locking\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_locking\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"locking function\"\n  - \"bytes [C++], locking file\"\n  - \"files [C++], locking bytes\"\n  - \"files [C++], locking\"\n  - \"_locking function\"\nms.assetid: 099aaac1-d4ca-4827-aed6-24dff9844150\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _locking\nLocks or unlocks bytes of a file.  \n  \n## Syntax  \n  \n```  \n  \n      int _locking(  \n   int fd,  \n   int mode,  \n   long nbytes   \n);  \n```  \n  \n#### Parameters  \n `fd`  \n File descriptor.  \n  \n *mode*  \n Locking action to perform.  \n  \n *nbytes*  \n Number of bytes to lock.  \n  \n## Return Value  \n `_locking` returns 0 if successful. A return value of –1 indicates failure, in which case [errno](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) is set to one of the following values.  \n  \n `EACCES`  \n Locking violation (file already locked or unlocked).  \n  \n `EBADF`  \n Invalid file descriptor.  \n  \n `EDEADLOCK`  \n Locking violation. Returned when the `_LK_LOCK` or `_LK_RLCK` flag is specified and the file cannot be locked after 10 attempts.  \n  \n `EINVAL`  \n An invalid argument was given to `_locking`.  \n  \n If the failure is due to a bad parameter, such as an invalid file descriptor, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md).  \n  \n## Remarks  \n The `_locking` function locks or unlocks *nbytes* bytes of the file specified by `fd`. Locking bytes in a file prevents access to those bytes by other processes. All locking or unlocking begins at the current position of the file pointer and proceeds for the next *nbytes* bytes. It is possible to lock bytes past end of file.  \n  \n *mode* must be one of the following manifest constants, which are defined in Locking.h.  \n  \n `_LK_LOCK`  \n Locks the specified bytes. If the bytes cannot be locked, the program immediately tries again after 1 second. If, after 10 attempts, the bytes cannot be locked, the constant returns an error.  \n  \n `_LK_NBLCK`  \n Locks the specified bytes. If the bytes cannot be locked, the constant returns an error.  \n  \n `_LK_NBRLCK`  \n Same as `_LK_NBLCK`.  \n  \n `_LK_RLCK`  \n Same as `_LK_LOCK`.  \n  \n `_LK_UNLCK`  \n Unlocks the specified bytes, which must have been previously locked.  \n  \n Multiple regions of a file that do not overlap can be locked. A region being unlocked must have been previously locked. `_locking` does not merge adjacent regions; if two locked regions are adjacent, each region must be unlocked separately. Regions should be locked only briefly and should be unlocked before closing a file or exiting the program.  \n  \n## Requirements  \n  \n|Routine|Required header|Optional header|  \n|-------------|---------------------|---------------------|  \n|`_locking`|\\<io.h> and \\<sys/locking.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_locking.c  \n/* This program opens a file with sharing. It locks  \n * some bytes before reading them, then unlocks them. Note that the  \n * program works correctly only if the file exists.  \n */  \n  \n#include <sys/types.h>  \n#include <sys/stat.h>  \n#include <sys/locking.h>  \n#include <share.h>  \n#include <fcntl.h>  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <io.h>  \n  \nint main( void )  \n{  \n   int  fh, numread;  \n   char buffer[40];  \n  \n   /* Quit if can't open file or system doesn't   \n    * support sharing.   \n    */  \n   errno_t err = _sopen_s( &fh, \"crt_locking.txt\", _O_RDONLY, _SH_DENYNO,   \n                          _S_IREAD | _S_IWRITE );  \n   printf( \"%d %d\\n\", err, fh );  \n   if( err != 0 )  \n      exit( 1 );  \n  \n   /* Lock some bytes and read them. Then unlock. */  \n   if( _locking( fh, LK_NBLCK, 30L ) != -1 )  \n   {  \n      long lseek_ret;  \n      printf( \"No one can change these bytes while I'm reading them\\n\" );  \n      numread = _read( fh, buffer, 30 );  \n      buffer[30] = '\\0';  \n      printf( \"%d bytes read: %.30s\\n\", numread, buffer );  \n      lseek_ret = _lseek( fh, 0L, SEEK_SET );  \n      _locking( fh, LK_UNLCK, 30L );  \n      printf( \"Now I'm done. Do what you will with them\\n\" );  \n   }  \n   else  \n      perror( \"Locking failed\\n\" );  \n  \n   _close( fh );  \n}  \n```  \n  \n## Input: crt_locking.txt  \n  \n```  \nThe first thirty bytes of this file will be locked.  \n```  \n  \n## Sample Output  \n  \n```  \nNo one can change these bytes while I'm reading them  \n30 bytes read: The first thirty bytes of this  \nNow I'm done. Do what you will with them  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::FileStream::Lock](https://msdn.microsoft.com/en-us/library/system.io.filestream.lock.aspx)  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md)   \n [_open, _wopen](../../c-runtime-library/reference/open-wopen.md)"}