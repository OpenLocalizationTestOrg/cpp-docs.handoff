<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a02efdf155193b5e1e7e794f45310b10f5790ee5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\ctypedptrarray-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e561376cb3bbf47c5e74b984ea5a14e55b307f4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0520aed8a318077a2aa409430779e8eb2f0f2fce</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides a type-safe "wrapper" for objects of class <ph id="ph1">`CPtrArray`</ph> or <ph id="ph2">`CObArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Base class of the typed pointer array class; must be an array class ( <ph id="ph1">`CObArray`</ph> or <ph id="ph2">`CPtrArray`</ph>).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Type of the elements stored in the base-class array.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::Add</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Adds a new element to the end of an array.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Grows the array if necessary</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::Append</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Adds the contents of one array to the end of another.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Grows the array if necessary</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::Copy</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Copies another array to the array; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::ElementAt</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns a temporary reference to the element pointer within the array.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::GetAt</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns the value at a given index.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::InsertAt</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Inserts an element (or all the elements in another array) at a specified index.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::SetAt</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Sets the value for a given index; array not allowed to grow.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::SetAtGrow</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Sets the value for a given index; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::operator [ ]</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Sets or gets the element at the specified index.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When you use <ph id="ph1">`CTypedPtrArray`</ph> rather than <ph id="ph2">`CPtrArray`</ph> or <ph id="ph3">`CObArray`</ph>, the C++ type-checking facility helps eliminate errors caused by mismatched pointer types.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`CTypedPtrArray`</ph> wrapper performs much of the casting that would be required if you used <ph id="ph2">`CObArray`</ph> or <ph id="ph3">`CPtrArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Because all <ph id="ph1">`CTypedPtrArray`</ph> functions are inline, use of this template does not significantly affect the size or speed of your code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CTypedPtrArray`</ph>, see the articles <bpt id="p1">[</bpt>Collections<ept id="p1">](../../mfc/collections.md)</ept> and <bpt id="p2">[</bpt>Template-Based Classes<ept id="p2">](../../mfc/template-based-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxtempl.h</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::Add</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This member function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::Add<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of element to be added to the array.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The element to be added to this array.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The index of the added element.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more detailed remarks, see <bpt id="p1">[</bpt>CObArray::Add<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__add)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::Append</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This member function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::Append<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Base class of the typed pointer array class; must be an array class ( <bpt id="p1">[</bpt>CObArray<ept id="p1">](../../mfc/reference/cobarray-class.md)</ept> or <bpt id="p2">[</bpt>CPtrArray<ept id="p2">](../../mfc/reference/cptrarray-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Type of the elements stored in the base-class array.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>src</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Source of the elements to be appended to an array.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The index of the first appended element.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more detailed remarks, see <bpt id="p1">[</bpt>CObArray::Append<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__append)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::Copy</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This member function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::Copy<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Base class of the typed pointer array class; must be an array class ( <bpt id="p1">[</bpt>CObArray<ept id="p1">](../../mfc/reference/cobarray-class.md)</ept> or <bpt id="p2">[</bpt>CPtrArray<ept id="p2">](../../mfc/reference/cptrarray-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Type of the elements stored in the base-class array.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>src</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Source of the elements to be copied to an array.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more detailed remarks, see <bpt id="p1">[</bpt>CObArray::Copy<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__copy)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::ElementAt</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This inline function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::ElementAt<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements stored in this array.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>An integer index that is greater than or equal to 0 and less than or equal to the value returned by <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::GetUpperBound<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A temporary reference to the element at the location specified by <ph id="ph1">`nIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This element is of the type specified by the template parameter <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more detailed remarks, see <bpt id="p1">[</bpt>CObArray::ElementAt<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__elementat)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::GetAt</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This inline function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::GetAt<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements stored in the array.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>An integer index that is greater than or equal to 0 and less than or equal to the value returned by <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::GetUpperBound<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A copy of the element at the location specified by <ph id="ph1">`nIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This element is of the type specified by the template parameter <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For more detailed remarks, see <bpt id="p1">[</bpt>CObArray::GetAt<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__getat)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::InsertAt</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This member function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::InsertAt<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>An integer index that may be greater than the value returned by <bpt id="p1">[</bpt>CObArray::GetUpperBound<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__getupperbound)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Type of the elements stored in the base-class array.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The object pointer to be placed in this array.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`newElement`</ph> of value <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is allowed.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The number of times this element should be inserted (defaults to 1).</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>An integer index that may be greater than the value returned by <ph id="ph1">`CObArray::GetUpperBound`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Base class of the typed pointer array class; must be an array class ( <bpt id="p1">[</bpt>CObArray<ept id="p1">](../../mfc/reference/cobarray-class.md)</ept> or <bpt id="p2">[</bpt>CPtrArray<ept id="p2">](../../mfc/reference/cptrarray-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Another array that contains elements to be added to this array.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For more detailed remarks, see <bpt id="p1">[</bpt>CObArray::InsertAt<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__insertat)</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::operator [ ]</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>These inline operators call <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::operator [ ]<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements stored in the array.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An integer index that is greater than or equal to 0 and less than or equal to the value returned by <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::GetUpperBound<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The first operator, called for arrays that are not <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, can be used on either the right (r-value) or the left (l-value) of an assignment statement.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The second, invoked for <bpt id="p1">**</bpt>const<ept id="p1">**</ept> arrays, can be used only on the right.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The Debug version of the library asserts if the subscript (either on the left or right side of an assignment statement) is out of bounds.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::SetAt</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This member function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::SetAt<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>An integer index that is greater than or equal to 0 and less than or equal to the value returned by <bpt id="p1">[</bpt>CObArray::GetUpperBound<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__getupperbound)</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Type of the elements stored in the base-class array.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>ptr</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A pointer to the element to be inserted in the array at the nIndex.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>A NULL value is allowed.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For more detailed remarks, see <bpt id="p1">[</bpt>CObArray::SetAt<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__setat)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>CTypedPtrArray::SetAtGrow</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This member function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::SetAtGrow<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>An integer index that is greater than or equal to 0.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Type of the elements stored in the base-class array.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The object pointer to be added to this array.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> value is allowed.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more detailed remarks, see <bpt id="p1">[</bpt>CObArray::SetAtGrow<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__setatgrow)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>MFC Sample COLLECT</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>CPtrArray Class</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>CObArray Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>