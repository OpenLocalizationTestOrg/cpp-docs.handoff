{"nodes":[{"pos":[12,71],"content":"Allocating and Releasing Memory for a BSTR | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Allocating and Releasing Memory for a BSTR | Microsoft Docs","pos":[0,59]}]},{"content":"Allocating and Releasing Memory for a BSTR","pos":[804,846]},{"content":"When you create <ph id=\"ph1\">`BSTR`</ph>s and pass them between COM objects, you must take care in treating the memory they use in order to avoid memory leaks.","pos":[847,988],"source":"When you create `BSTR`s and pass them between COM objects, you must take care in treating the memory they use in order to avoid memory leaks."},{"content":"When a <ph id=\"ph1\">`BSTR`</ph> stays within an interface, you must free its memory when you are done with it.","pos":[989,1081],"source":" When a `BSTR` stays within an interface, you must free its memory when you are done with it."},{"content":"However, when a <ph id=\"ph1\">`BSTR`</ph> passes out of an interface, the receiving object takes responsibility for its memory management.","pos":[1082,1201],"source":" However, when a `BSTR` passes out of an interface, the receiving object takes responsibility for its memory management."},{"pos":[1208,1303],"content":"In general, the rules for allocating and releasing memory allocated for <ph id=\"ph1\">`BSTR`</ph>s are as follows:","source":"In general, the rules for allocating and releasing memory allocated for `BSTR`s are as follows:"},{"content":"When you call into a function that expects a <ph id=\"ph1\">`BSTR`</ph> argument, you must allocate the memory for the <ph id=\"ph2\">`BSTR`</ph> before the call and release it afterwards.","pos":[1313,1461],"source":"When you call into a function that expects a `BSTR` argument, you must allocate the memory for the `BSTR` before the call and release it afterwards."},{"content":"For example:","pos":[1462,1474]},{"pos":[1496,1520],"content":"NVC_ATLMFC_Utilities#192"},{"pos":[1628,1652],"content":"NVC_ATLMFC_Utilities#193"},{"content":"When you call into a function that returns a <ph id=\"ph1\">`BSTR`</ph>, you must free the string yourself.","pos":[1748,1835],"source":"When you call into a function that returns a `BSTR`, you must free the string yourself."},{"content":"For example:","pos":[1836,1848]},{"pos":[1870,1894],"content":"NVC_ATLMFC_Utilities#194"},{"pos":[2002,2026],"content":"NVC_ATLMFC_Utilities#195"},{"content":"When you implement a function that returns a <ph id=\"ph1\">`BSTR`</ph>, allocate the string but do not free it.","pos":[2122,2214],"source":"When you implement a function that returns a `BSTR`, allocate the string but do not free it."},{"content":"The receiving the function releases the memory.","pos":[2215,2262]},{"content":"For example:","pos":[2263,2275]},{"pos":[2297,2321],"content":"NVC_ATLMFC_Utilities#196"},{"content":"See Also","pos":[2416,2424]},{"content":"Strings (ATL/MFC)","pos":[2429,2446]},{"content":"CStringT::AllocSysString","pos":[2491,2515]},{"content":"SysAllocString","pos":[2594,2608]},{"content":"SysFreeString","pos":[2685,2698]}],"content":"---\ntitle: \"Allocating and Releasing Memory for a BSTR | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"bstr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"BSTRs, memory allocation\"\n  - \"memory deallocation, string memory\"\n  - \"memory [C++], releasing\"\n  - \"memory allocation, BSTRs\"\n  - \"memory deallocation, BSTR memory\"\n  - \"strings [C++], releasing\"\nms.assetid: 98041e29-3442-4a02-b425-7a4a13e9cc84\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Allocating and Releasing Memory for a BSTR\nWhen you create `BSTR`s and pass them between COM objects, you must take care in treating the memory they use in order to avoid memory leaks. When a `BSTR` stays within an interface, you must free its memory when you are done with it. However, when a `BSTR` passes out of an interface, the receiving object takes responsibility for its memory management.  \n  \n In general, the rules for allocating and releasing memory allocated for `BSTR`s are as follows:  \n  \n-   When you call into a function that expects a `BSTR` argument, you must allocate the memory for the `BSTR` before the call and release it afterwards. For example:  \n  \n     [!code-cpp[NVC_ATLMFC_Utilities#192](../atl-mfc-shared/codesnippet/cpp/allocating-and-releasing-memory-for-a-bstr_1.cpp)]  \n  \n     [!code-cpp[NVC_ATLMFC_Utilities#193](../atl-mfc-shared/codesnippet/cpp/allocating-and-releasing-memory-for-a-bstr_2.cpp)]  \n  \n-   When you call into a function that returns a `BSTR`, you must free the string yourself. For example:  \n  \n     [!code-cpp[NVC_ATLMFC_Utilities#194](../atl-mfc-shared/codesnippet/cpp/allocating-and-releasing-memory-for-a-bstr_3.cpp)]  \n  \n     [!code-cpp[NVC_ATLMFC_Utilities#195](../atl-mfc-shared/codesnippet/cpp/allocating-and-releasing-memory-for-a-bstr_4.cpp)]  \n  \n-   When you implement a function that returns a `BSTR`, allocate the string but do not free it. The receiving the function releases the memory. For example:  \n  \n     [!code-cpp[NVC_ATLMFC_Utilities#196](../atl-mfc-shared/codesnippet/cpp/allocating-and-releasing-memory-for-a-bstr_5.cpp)]  \n  \n## See Also  \n [Strings (ATL/MFC)](../atl-mfc-shared/strings-atl-mfc.md)   \n [CStringT::AllocSysString](../atl-mfc-shared/reference/cstringt-class.md#cstringt__allocsysstring)   \n [SysAllocString](http://msdn.microsoft.com/en-us/9e0437a2-9b4a-4576-88b0-5cb9d08ca29b)   \n [SysFreeString](http://msdn.microsoft.com/en-us/8f230ee3-5f6e-4cb9-a910-9c90b754dcd3)\n\n"}