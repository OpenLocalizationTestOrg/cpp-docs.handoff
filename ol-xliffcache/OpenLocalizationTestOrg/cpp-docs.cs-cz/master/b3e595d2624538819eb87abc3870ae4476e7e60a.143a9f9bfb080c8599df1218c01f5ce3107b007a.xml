{"nodes":[{"pos":[12,44],"content":"queue (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"queue (STL-CLR) | Microsoft Docs","pos":[0,32]}]},{"content":"queue (STL/CLR)","pos":[680,695]},{"content":"The template class describes an object that controls a varying-length sequence of elements that has first-in first-out access.","pos":[696,822]},{"content":"You use the container adapter <ph id=\"ph1\">`queue`</ph> to manage an underlying container as a queue.","pos":[823,906],"source":" You use the container adapter `queue` to manage an underlying container as a queue."},{"content":"In the description below, <ph id=\"ph1\">`GValue`</ph> is the same as <ph id=\"ph2\">`Value`</ph> unless the latter is a ref type, in which case it is <ph id=\"ph3\">`Value^`</ph>.","pos":[913,1033],"source":"In the description below, `GValue` is the same as `Value` unless the latter is a ref type, in which case it is `Value^`."},{"content":"Similarly, <ph id=\"ph1\">`GContainer`</ph> is the same as <ph id=\"ph2\">`Container`</ph> unless the latter is a ref type, in which case it is <ph id=\"ph3\">`Container^`</ph>.","pos":[1034,1151],"source":" Similarly, `GContainer` is the same as `Container` unless the latter is a ref type, in which case it is `Container^`."},{"content":"Syntax","pos":[1160,1166]},{"content":"Parameters","pos":[1400,1410]},{"content":"Value","pos":[1414,1419]},{"content":"The type of an element in the controlled sequence.","pos":[1423,1473]},{"content":"Container","pos":[1480,1489]},{"content":"The type of the underlying container.","pos":[1493,1530]},{"content":"Members","pos":[1539,1546]},{"content":"Type Definition","pos":[1553,1568]},{"content":"Description","pos":[1569,1580]},{"content":"queue::const_reference (STL/CLR)","pos":[1630,1662]},{"content":"The type of a constant reference to an element.","pos":[1708,1755]},{"content":"queue::container_type (STL/CLR)","pos":[1761,1792]},{"content":"The type of the underlying container.","pos":[1837,1874]},{"content":"queue::difference_type (STL/CLR)","pos":[1880,1912]},{"content":"The type of a signed distance between two elements.","pos":[1958,2009]},{"content":"queue::generic_container (STL/CLR)","pos":[2015,2049]},{"content":"The type of the generic interface for the container adapter.","pos":[2097,2157]},{"content":"queue::generic_value (STL/CLR)","pos":[2163,2193]},{"content":"The type of an element for the generic interface for the container adapter.","pos":[2237,2312]},{"content":"queue::reference (STL/CLR)","pos":[2318,2344]},{"content":"The type of a reference to an element.","pos":[2384,2422]},{"content":"queue::size_type (STL/CLR)","pos":[2428,2454]},{"content":"The type of a signed distance between two elements.","pos":[2494,2545]},{"content":"queue::value_type (STL/CLR)","pos":[2551,2578]},{"content":"The type of an element.","pos":[2619,2642]},{"content":"Member Function","pos":[2650,2665]},{"content":"Description","pos":[2666,2677]},{"content":"queue::assign (STL/CLR)","pos":[2727,2750]},{"content":"Replaces all elements.","pos":[2787,2809]},{"content":"queue::back (STL/CLR)","pos":[2815,2836]},{"content":"Accesses the last element.","pos":[2871,2897]},{"content":"queue::empty (STL/CLR)","pos":[2903,2925]},{"content":"Tests whether no elements are present.","pos":[2961,2999]},{"content":"queue::front (STL/CLR)","pos":[3005,3027]},{"content":"Accesses the first element.","pos":[3063,3090]},{"content":"queue::get_container (STL/CLR)","pos":[3096,3126]},{"content":"Accesses the underlying container.","pos":[3170,3204]},{"content":"queue::pop (STL/CLR)","pos":[3210,3230]},{"content":"Removes the first element.","pos":[3264,3290]},{"content":"queue::push (STL/CLR)","pos":[3296,3317]},{"content":"Adds a new last element.","pos":[3352,3376]},{"content":"queue::queue (STL/CLR)","pos":[3382,3404]},{"content":"Constructs a container object.","pos":[3440,3470]},{"content":"queue::size (STL/CLR)","pos":[3476,3497]},{"content":"Counts the number of elements.","pos":[3532,3562]},{"content":"queue::to_array (STL/CLR)","pos":[3568,3593]},{"content":"Copies the controlled sequence to a new array.","pos":[3632,3678]},{"content":"Property","pos":[3686,3694]},{"content":"Description","pos":[3695,3706]},{"content":"queue::back_item (STL/CLR)","pos":[3749,3775]},{"content":"Accesses the last element.","pos":[3815,3841]},{"content":"queue::front_item (STL/CLR)","pos":[3847,3874]},{"content":"Accesses the first element.","pos":[3915,3942]},{"content":"Operator","pos":[3950,3958]},{"content":"Description","pos":[3959,3970]},{"content":"queue::operator= (STL/CLR)","pos":[4013,4039]},{"content":"Replaces the controlled sequence.","pos":[4085,4118]},{"content":"operator!= (queue) (STL/CLR)","pos":[4124,4152]},{"pos":[4202,4272],"content":"Determines if a <ph id=\"ph1\">`queue`</ph> object is not equal to another <ph id=\"ph2\">`queue`</ph> object.","source":"Determines if a `queue` object is not equal to another `queue` object."},{"content":"operator&lt; (queue) (STL/CLR)","pos":[4278,4305],"source":"operator< (queue) (STL/CLR)"},{"pos":[4354,4421],"content":"Determines if a <ph id=\"ph1\">`queue`</ph> object is less than another <ph id=\"ph2\">`queue`</ph> object.","source":"Determines if a `queue` object is less than another `queue` object."},{"content":"operator&lt;= (queue) (STL/CLR)","pos":[4427,4455],"source":"operator<= (queue) (STL/CLR)"},{"pos":[4508,4587],"content":"Determines if a <ph id=\"ph1\">`queue`</ph> object is less than or equal to another <ph id=\"ph2\">`queue`</ph> object.","source":"Determines if a `queue` object is less than or equal to another `queue` object."},{"content":"operator== (queue) (STL/CLR)","pos":[4593,4621]},{"pos":[4669,4735],"content":"Determines if a <ph id=\"ph1\">`queue`</ph> object is equal to another <ph id=\"ph2\">`queue`</ph> object.","source":"Determines if a `queue` object is equal to another `queue` object."},{"content":"operator&gt; (queue) (STL/CLR)","pos":[4741,4768],"source":"operator> (queue) (STL/CLR)"},{"pos":[4820,4890],"content":"Determines if a <ph id=\"ph1\">`queue`</ph> object is greater than another <ph id=\"ph2\">`queue`</ph> object.","source":"Determines if a `queue` object is greater than another `queue` object."},{"content":"operator&gt;= (queue) (STL/CLR)","pos":[4896,4924],"source":"operator>= (queue) (STL/CLR)"},{"pos":[4980,5062],"content":"Determines if a <ph id=\"ph1\">`queue`</ph> object is greater than or equal to another <ph id=\"ph2\">`queue`</ph> object.","source":"Determines if a `queue` object is greater than or equal to another `queue` object."},{"content":"Interfaces","pos":[5072,5082]},{"content":"Interface","pos":[5089,5098]},{"content":"Description","pos":[5099,5110]},{"content":"&lt;xref:System.ICloneable&gt;","pos":[5153,5177],"source":"<xref:System.ICloneable>"},{"content":"Duplicate an object.","pos":[5178,5198]},{"content":"IQueue<ph id=\"ph1\">\\&lt;</ph>Value, Container&gt;","pos":[5203,5228],"source":"IQueue\\<Value, Container>"},{"content":"Maintain generic container adapter.","pos":[5229,5264]},{"content":"Remarks","pos":[5274,5281]},{"content":"The object allocates and frees storage for the sequence it controls through an underlying container, of type <ph id=\"ph1\">`Container`</ph>, that stores <ph id=\"ph2\">`Value`</ph> elements and grows on demand.","pos":[5285,5456],"source":"The object allocates and frees storage for the sequence it controls through an underlying container, of type `Container`, that stores `Value` elements and grows on demand."},{"content":"The object restricts access to just pushing the first element and popping the last element, implementing a first-in first-out queue (also known as a FIFO queue, or simply a queue).","pos":[5457,5637]},{"content":"Requirements","pos":[5646,5658]},{"pos":[5662,5689],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/queue&gt;","source":"**Header:** \\<cliext/queue>"},{"pos":[5696,5717],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[5726,5734]},{"content":"deque (STL/CLR)","pos":[5739,5754]},{"content":"list (STL/CLR)","pos":[5789,5803]},{"content":"priority_queue (STL/CLR)","pos":[5837,5861]},{"content":"stack (STL/CLR)","pos":[5905,5920]},{"content":"vector (STL/CLR)","pos":[5955,5971]},{"content":"STL/CLR Library Reference","pos":[6007,6032]}],"content":"---\ntitle: \"queue (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::queue\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"<queue> header [STL/CLR]\"\n  - \"queue class [STL/CLR]\"\n  - \"<cliext/queue> header [STL/CLR]\"\nms.assetid: 9ea7dec3-ea98-48ff-87d0-a5afc924aaf2\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# queue (STL/CLR)\nThe template class describes an object that controls a varying-length sequence of elements that has first-in first-out access. You use the container adapter `queue` to manage an underlying container as a queue.  \n  \n In the description below, `GValue` is the same as `Value` unless the latter is a ref type, in which case it is `Value^`. Similarly, `GContainer` is the same as `Container` unless the latter is a ref type, in which case it is `Container^`.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Value,  \n    typename Container>  \n    ref class queue  \n        :   public  \n        System::ICloneable,  \n        Microsoft::VisualC::StlClr::IQueue<GValue, GContainer>  \n    { ..... };  \n```  \n  \n#### Parameters  \n Value  \n The type of an element in the controlled sequence.  \n  \n Container  \n The type of the underlying container.  \n  \n## Members  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|[queue::const_reference (STL/CLR)](../dotnet/queue-const-reference-stl-clr.md)|The type of a constant reference to an element.|  \n|[queue::container_type (STL/CLR)](../dotnet/queue-container-type-stl-clr.md)|The type of the underlying container.|  \n|[queue::difference_type (STL/CLR)](../dotnet/queue-difference-type-stl-clr.md)|The type of a signed distance between two elements.|  \n|[queue::generic_container (STL/CLR)](../dotnet/queue-generic-container-stl-clr.md)|The type of the generic interface for the container adapter.|  \n|[queue::generic_value (STL/CLR)](../dotnet/queue-generic-value-stl-clr.md)|The type of an element for the generic interface for the container adapter.|  \n|[queue::reference (STL/CLR)](../dotnet/queue-reference-stl-clr.md)|The type of a reference to an element.|  \n|[queue::size_type (STL/CLR)](../dotnet/queue-size-type-stl-clr.md)|The type of a signed distance between two elements.|  \n|[queue::value_type (STL/CLR)](../dotnet/queue-value-type-stl-clr.md)|The type of an element.|  \n  \n|Member Function|Description|  \n|---------------------|-----------------|  \n|[queue::assign (STL/CLR)](../dotnet/queue-assign-stl-clr.md)|Replaces all elements.|  \n|[queue::back (STL/CLR)](../dotnet/queue-back-stl-clr.md)|Accesses the last element.|  \n|[queue::empty (STL/CLR)](../dotnet/queue-empty-stl-clr.md)|Tests whether no elements are present.|  \n|[queue::front (STL/CLR)](../dotnet/queue-front-stl-clr.md)|Accesses the first element.|  \n|[queue::get_container (STL/CLR)](../dotnet/queue-get-container-stl-clr.md)|Accesses the underlying container.|  \n|[queue::pop (STL/CLR)](../dotnet/queue-pop-stl-clr.md)|Removes the first element.|  \n|[queue::push (STL/CLR)](../dotnet/queue-push-stl-clr.md)|Adds a new last element.|  \n|[queue::queue (STL/CLR)](../dotnet/queue-queue-stl-clr.md)|Constructs a container object.|  \n|[queue::size (STL/CLR)](../dotnet/queue-size-stl-clr.md)|Counts the number of elements.|  \n|[queue::to_array (STL/CLR)](../dotnet/queue-to-array-stl-clr.md)|Copies the controlled sequence to a new array.|  \n  \n|Property|Description|  \n|--------------|-----------------|  \n|[queue::back_item (STL/CLR)](../dotnet/queue-back-item-stl-clr.md)|Accesses the last element.|  \n|[queue::front_item (STL/CLR)](../dotnet/queue-front-item-stl-clr.md)|Accesses the first element.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|[queue::operator= (STL/CLR)](../dotnet/queue-operator-assign-stl-clr.md)|Replaces the controlled sequence.|  \n|[operator!= (queue) (STL/CLR)](../dotnet/operator-inequality-queue-stl-clr.md)|Determines if a `queue` object is not equal to another `queue` object.|  \n|[operator< (queue) (STL/CLR)](../dotnet/operator-less-than-queue-stl-clr.md)|Determines if a `queue` object is less than another `queue` object.|  \n|[operator<= (queue) (STL/CLR)](../dotnet/operator-less-or-equal-queue-stl-clr.md)|Determines if a `queue` object is less than or equal to another `queue` object.|  \n|[operator== (queue) (STL/CLR)](../dotnet/operator-equality-queue-stl-clr.md)|Determines if a `queue` object is equal to another `queue` object.|  \n|[operator> (queue) (STL/CLR)](../dotnet/operator-greater-than-queue-stl-clr.md)|Determines if a `queue` object is greater than another `queue` object.|  \n|[operator>= (queue) (STL/CLR)](../dotnet/operator-greater-or-equal-queue-stl-clr.md)|Determines if a `queue` object is greater than or equal to another `queue` object.|  \n  \n## Interfaces  \n  \n|Interface|Description|  \n|---------------|-----------------|  \n|<xref:System.ICloneable>|Duplicate an object.|  \n|IQueue\\<Value, Container>|Maintain generic container adapter.|  \n  \n## Remarks  \n The object allocates and frees storage for the sequence it controls through an underlying container, of type `Container`, that stores `Value` elements and grows on demand. The object restricts access to just pushing the first element and popping the last element, implementing a first-in first-out queue (also known as a FIFO queue, or simply a queue).  \n  \n## Requirements  \n **Header:** \\<cliext/queue>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [deque (STL/CLR)](../dotnet/deque-stl-clr.md)   \n [list (STL/CLR)](../dotnet/list-stl-clr.md)   \n [priority_queue (STL/CLR)](../dotnet/priority-queue-stl-clr.md)   \n [stack (STL/CLR)](../dotnet/stack-stl-clr.md)   \n [vector (STL/CLR)](../dotnet/vector-stl-clr.md)   \n [STL/CLR Library Reference](../dotnet/stl-clr-library-reference.md)"}