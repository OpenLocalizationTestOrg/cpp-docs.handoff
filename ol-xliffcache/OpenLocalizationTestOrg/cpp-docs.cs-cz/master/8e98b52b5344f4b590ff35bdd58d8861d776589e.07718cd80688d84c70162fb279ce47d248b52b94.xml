{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 4) C4714 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 4) C4714 | Microsoft Docs","pos":[0,49]}]},{"content":"Compiler Warning (level 4) C4714","pos":[609,641]},{"content":"function 'function' marked as __forceinline not inlined","pos":[642,697]},{"content":"The given function was selected for inline expansion, but the compiler did not perform the inlining.","pos":[704,804]},{"pos":[811,1033],"content":"Although <ph id=\"ph1\">`__forceinline`</ph> is a stronger indication to the compiler than <ph id=\"ph2\">`__inline`</ph>, inlining is still performed at the compiler's discretion, but no heuristics are used to determine the benefits from inlining this function.","source":"Although `__forceinline` is a stronger indication to the compiler than `__inline`, inlining is still performed at the compiler's discretion, but no heuristics are used to determine the benefits from inlining this function."},{"content":"In some cases, the compiler will not inline a particular function for mechanical reasons.","pos":[1040,1129]},{"content":"For example, the compiler will not inline:","pos":[1130,1172]},{"content":"A function if it would result in mixing both SEH and C++ EH.","pos":[1182,1242]},{"content":"Some functions with copy constructed objects passed by value when -GX/EHs/EHa is on.","pos":[1252,1336]},{"content":"Functions returning an unwindable object by value when -GX/EHs/EHa is on.","pos":[1346,1419]},{"content":"Functions with inline assembly when compiling without -Og/Ox/O1/O2.","pos":[1429,1496]},{"content":"Functions with a variable argument list.","pos":[1506,1546]},{"pos":[1556,1617],"content":"A function with a <bpt id=\"p1\">**</bpt>try<ept id=\"p1\">**</ept> (C++ exception handling) statement.","source":"A function with a **try** (C++ exception handling) statement."},{"content":"The following sample generates C4714:","pos":[1624,1661]}],"content":"---\ntitle: \"Compiler Warning (level 4) C4714 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4714\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4714\"\nms.assetid: 22c7fd0c-899d-4e9b-95f3-725b2c49fb46\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 4) C4714\nfunction 'function' marked as __forceinline not inlined  \n  \n The given function was selected for inline expansion, but the compiler did not perform the inlining.  \n  \n Although `__forceinline` is a stronger indication to the compiler than `__inline`, inlining is still performed at the compiler's discretion, but no heuristics are used to determine the benefits from inlining this function.  \n  \n In some cases, the compiler will not inline a particular function for mechanical reasons. For example, the compiler will not inline:  \n  \n-   A function if it would result in mixing both SEH and C++ EH.  \n  \n-   Some functions with copy constructed objects passed by value when -GX/EHs/EHa is on.  \n  \n-   Functions returning an unwindable object by value when -GX/EHs/EHa is on.  \n  \n-   Functions with inline assembly when compiling without -Og/Ox/O1/O2.  \n  \n-   Functions with a variable argument list.  \n  \n-   A function with a **try** (C++ exception handling) statement.  \n  \n The following sample generates C4714:  \n  \n```  \n// C4714.cpp  \n// compile with: /Ob1 /GX /W4  \n__forceinline void func1()  \n{  \n   try  \n   {  \n   }  \n   catch (...)  \n   {  \n   }  \n}  \n  \nvoid func2()  \n{  \n   func1();   // C4714  \n}  \n  \nint main()  \n{  \n}  \n```"}