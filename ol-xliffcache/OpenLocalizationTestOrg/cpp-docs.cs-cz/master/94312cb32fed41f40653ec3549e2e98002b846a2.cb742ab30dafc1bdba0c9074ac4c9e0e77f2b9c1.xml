{"nodes":[{"pos":[12,48],"content":"value_compare Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"value_compare Class | Microsoft Docs","pos":[0,36]}]},{"content":"value_compare Class","pos":[660,679]},{"content":"Provides a function object that can compare the elements of a hash_map by comparing the values of their keys to determine their relative order in the hash_map.","pos":[680,839]},{"content":"Syntax","pos":[848,854]},{"content":"Remarks","pos":[1193,1200]},{"content":"The comparison criteria provided by value_compare between <bpt id=\"p1\">**</bpt>value_types<ept id=\"p1\">**</ept> of whole elements contained by a hash_map is induced from a comparison between the keys of the respective elements by the auxiliary class construction.","pos":[1204,1429],"source":"The comparison criteria provided by value_compare between **value_types** of whole elements contained by a hash_map is induced from a comparison between the keys of the respective elements by the auxiliary class construction."},{"content":"The member function operator uses the object <bpt id=\"p1\">**</bpt>comp<ept id=\"p1\">**</ept> of type <ph id=\"ph1\">`key_compare`</ph> stored in the function object provided by value_compare to compare the sort-key components of two elements.","pos":[1430,1613],"source":" The member function operator uses the object **comp** of type `key_compare` stored in the function object provided by value_compare to compare the sort-key components of two elements."},{"pos":[1620,1930],"content":"For hash_sets and hash_multisets, which are simple containers where the key values are identical to the element values, value_compare is equivalent to <ph id=\"ph1\">`key_compare`</ph>; for hash_maps and hash_multimaps they are not, because the value of the type <ph id=\"ph2\">`pair`</ph> elements is not identical to the value of the element's key.","source":"For hash_sets and hash_multisets, which are simple containers where the key values are identical to the element values, value_compare is equivalent to `key_compare`; for hash_maps and hash_multimaps they are not, because the value of the type `pair` elements is not identical to the value of the element's key."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[1937,2175],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[2176,2265],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"content":"Example","pos":[2274,2281]},{"pos":[2285,2443],"content":"See the example for <bpt id=\"p1\">[</bpt>hash_map::value_comp<ept id=\"p1\">](../standard-library/hash-map-class.md#hash_map__value_comp)</ept> for an example of how to declare and use value_compare.","source":"See the example for [hash_map::value_comp](../standard-library/hash-map-class.md#hash_map__value_comp) for an example of how to declare and use value_compare."},{"content":"Requirements","pos":[2452,2464]},{"pos":[2468,2490],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;hash_map&gt;","source":"**Header:** <hash_map>"},{"pos":[2497,2518],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"content":"See Also","pos":[2527,2535]},{"content":"binary_function Struct","pos":[2540,2562]},{"content":"Thread Safety in the C++ Standard Library","pos":[2616,2657]},{"content":"C++ Standard Library Reference","pos":[2730,2760]}],"content":"---\ntitle: \"value_compare Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::value_compare\"\n  - \"std.value_compare\"\n  - \"value_compare\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"value_compare class\"\nms.assetid: c306c5b9-3505-4357-aa6b-216451b951ed\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# value_compare Class\nProvides a function object that can compare the elements of a hash_map by comparing the values of their keys to determine their relative order in the hash_map.  \n  \n## Syntax  \n  \n```\nclass value_compare\n : std::public binary_function<value_type, value_type, bool>\n{\npublic:\n    bool operator()(\n    const value_type& left,\n    const value_type& right) const\n {\n    return (comp(left.first, right.first));\n\n }\nprotected:\n    value_compare(const key_compare& c) : comp (c) { }\n    key_compare comp;\n};\n```  \n  \n## Remarks  \n The comparison criteria provided by value_compare between **value_types** of whole elements contained by a hash_map is induced from a comparison between the keys of the respective elements by the auxiliary class construction. The member function operator uses the object **comp** of type `key_compare` stored in the function object provided by value_compare to compare the sort-key components of two elements.  \n  \n For hash_sets and hash_multisets, which are simple containers where the key values are identical to the element values, value_compare is equivalent to `key_compare`; for hash_maps and hash_multimaps they are not, because the value of the type `pair` elements is not identical to the value of the element's key.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n## Example  \n See the example for [hash_map::value_comp](../standard-library/hash-map-class.md#hash_map__value_comp) for an example of how to declare and use value_compare.  \n  \n## Requirements  \n **Header:** <hash_map>  \n  \n **Namespace:** stdext  \n  \n## See Also  \n [binary_function Struct](../standard-library/binary-function-struct.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}