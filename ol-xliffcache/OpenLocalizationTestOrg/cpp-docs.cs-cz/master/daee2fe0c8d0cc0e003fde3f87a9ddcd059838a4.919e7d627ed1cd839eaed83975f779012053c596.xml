{"nodes":[{"pos":[12,73],"content":"Dynamically Binding Columns in Your Provider | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Dynamically Binding Columns in Your Provider | Microsoft Docs","pos":[0,61]}]},{"content":"Dynamically Binding Columns in Your Provider","pos":[720,764]},{"content":"Make sure you really need dynamic column binding.","pos":[765,814]},{"content":"You might need it because:","pos":[815,841]},{"content":"Your rowset columns are not defined at compile time.","pos":[851,903]},{"content":"You support an element such as bookmarks that adds columns.","pos":[913,972]},{"content":"To implement dynamic column binding","pos":[982,1017]},{"pos":[1027,1078],"content":"Remove any <bpt id=\"p1\">**</bpt>PROVIDER_COLUMN_MAP<ept id=\"p1\">**</ept>s from your code.","source":"Remove any **PROVIDER_COLUMN_MAP**s from your code."},{"content":"In the user record (your structure), add the following declaration:","pos":[1088,1155]},{"content":"Implement the <ph id=\"ph1\">`GetColumnInfo`</ph> function.","pos":[1259,1298],"source":"Implement the `GetColumnInfo` function."},{"content":"This function lays out how the information is stored.","pos":[1299,1352]},{"content":"You might need to get properties or other information for this function.","pos":[1353,1425]},{"content":"You might want to create a macro, similar to the <bpt id=\"p1\">[</bpt>COLUMN_ENTRY<ept id=\"p1\">](../../data/oledb/column-entry.md)</ept> macro, to add your own information.","pos":[1426,1559],"source":" You might want to create a macro, similar to the [COLUMN_ENTRY](../../data/oledb/column-entry.md) macro, to add your own information."},{"pos":[1570,1625],"content":"The following example shows a <ph id=\"ph1\">`GetColumnInfo`</ph> function.","source":"The following example shows a `GetColumnInfo` function."},{"content":"See Also","pos":[3359,3367]},{"content":"Working with OLE DB Provider Templates","pos":[3372,3410]}],"content":"---\ntitle: \"Dynamically Binding Columns in Your Provider | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"columns [C++], dynamic column binding\"\n  - \"dynamic column binding\"\n  - \"providers [C++], dynamic column binding\"\nms.assetid: 45e811e3-f5a7-4627-98cc-bf817c4e556e\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Dynamically Binding Columns in Your Provider\nMake sure you really need dynamic column binding. You might need it because:  \n  \n-   Your rowset columns are not defined at compile time.  \n  \n-   You support an element such as bookmarks that adds columns.  \n  \n### To implement dynamic column binding  \n  \n1.  Remove any **PROVIDER_COLUMN_MAP**s from your code.  \n  \n2.  In the user record (your structure), add the following declaration:  \n  \n    ```  \n    static ATLCOLUMNINFO* GetColumnInfo(void* pThis, ULONG* pcCols);  \n    ```  \n  \n3.  Implement the `GetColumnInfo` function. This function lays out how the information is stored. You might need to get properties or other information for this function. You might want to create a macro, similar to the [COLUMN_ENTRY](../../data/oledb/column-entry.md) macro, to add your own information.  \n  \n     The following example shows a `GetColumnInfo` function.  \n  \n    ```  \n    // Check the property flag for bookmarks, if it is set, set the zero  \n    // ordinal entry in the column map with the bookmark information.  \n    CAgentRowset* pRowset = (CAgentRowset*) pThis;  \n    CComQIPtr<IRowsetInfo, &IID_IRowsetInfo> spRowsetProps = pRowset;  \n  \n    CDBPropIDSet set(DBPROPSET_ROWSET);  \n    set.AddPropertyID(DBPROP_BOOKMARKS);  \n    DBPROPSET* pPropSet = NULL;  \n    ULONG ulPropSet = 0;  \n    HRESULT hr;  \n  \n    if (spRowsetProps)  \n       hr = spRowsetProps->GetProperties(1, &set, &ulPropSet, &pPropSet);  \n  \n    if (pPropSet)  \n    {  \n       CComVariant var = pPropSet->rgProperties[0].vValue;  \n       CoTaskMemFree(pPropSet->rgProperties);  \n       CoTaskMemFree(pPropSet);  \n  \n       if (SUCCEEDED(hr) && (var.boolVal == VARIANT_TRUE))  \n       {  \n          ADD_COLUMN_ENTRY_EX(ulCols, OLESTR(\"Bookmark\"), 0, sizeof(DWORD), DBTYPE_BYTES,   \n             0, 0, GUID_NULL, CAgentMan, dwBookmark, DBCOLUMNFLAGS_ISBOOKMARK)  \n          ulCols++;  \n       }  \n    }  \n  \n    // Next, set up the other columns.  \n    ADD_COLUMN_ENTRY(ulCols, OLESTR(\"Command\"), 1, 256, DBTYPE_STR, 0xFF, 0xFF,   \n       GUID_NULL, CAgentMan, szCommand)  \n    ulCols++;  \n    ADD_COLUMN_ENTRY(ulCols, OLESTR(\"Text\"), 2, 256, DBTYPE_STR, 0xFF, 0xFF,   \n       GUID_NULL, CAgentMan, szText)  \n    ulCols++;  \n  \n    ADD_COLUMN_ENTRY(ulCols, OLESTR(\"Command2\"), 3, 256, DBTYPE_STR, 0xFF, 0xFF,   \n       GUID_NULL, CAgentMan, szCommand2)  \n    ulCols++;  \n    ADD_COLUMN_ENTRY(ulCols, OLESTR(\"Text2\"), 4, 256, DBTYPE_STR, 0xFF, 0xFF,   \n       GUID_NULL, CAgentMan, szText2)  \n    ulCols++;  \n  \n    if (pcCols != NULL)  \n       *pcCols = ulCols;  \n  \n    return _rgColumns;  \n    }  \n    ```  \n  \n## See Also  \n [Working with OLE DB Provider Templates](../../data/oledb/working-with-ole-db-provider-templates.md)"}