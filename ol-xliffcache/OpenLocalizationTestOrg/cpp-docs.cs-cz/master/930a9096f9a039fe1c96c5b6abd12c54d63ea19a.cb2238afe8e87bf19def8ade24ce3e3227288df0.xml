{"nodes":[{"pos":[12,58],"content":"Overview of Marshaling in C++ | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Overview of Marshaling in C++ | Microsoft Docs","pos":[0,46]}]},{"content":"Overview of Marshaling in C++","pos":[714,743]},{"content":"In mixed mode, you sometimes must marshal your data between native and managed types.","pos":[744,829]},{"content":"introduced the marshaling library to help you marshal and convert data in a simple way.","pos":[903,990]},{"content":"You can use the marshaling library with or without a <bpt id=\"p1\">[</bpt>marshal_context Class<ept id=\"p1\">](../dotnet/marshal-context-class.md)</ept>.","pos":[997,1110],"source":"You can use the marshaling library with or without a [marshal_context Class](../dotnet/marshal-context-class.md)."},{"content":"Some conversions require a context.","pos":[1111,1146]},{"content":"Other conversions can be implemented using the <bpt id=\"p1\">[</bpt>marshal_as<ept id=\"p1\">](../dotnet/marshal-as.md)</ept> function.","pos":[1147,1241],"source":" Other conversions can be implemented using the [marshal_as](../dotnet/marshal-as.md) function."},{"content":"The following table lists the current conversions supported, whether they require a context, and what marshal file you have to include:","pos":[1242,1377]},{"content":"From type","pos":[1384,1393]},{"content":"To type","pos":[1394,1401]},{"content":"Marshal method","pos":[1402,1416]},{"content":"Include file","pos":[1417,1429]},{"content":"System::String^","pos":[1508,1523]},{"content":"const char *","pos":[1524,1536]},{"content":"marshal_context","pos":[1537,1552]},{"content":"marshal.h","pos":[1553,1562]},{"content":"const char *","pos":[1567,1579]},{"content":"System::String^","pos":[1580,1595]},{"content":"marshal_as","pos":[1596,1606]},{"content":"marshal.h","pos":[1607,1616]},{"content":"char *","pos":[1621,1627]},{"content":"System::String^","pos":[1628,1643]},{"content":"marshal_as","pos":[1644,1654]},{"content":"marshal.h","pos":[1655,1664]},{"content":"System::String^","pos":[1669,1684]},{"content":"const wchar_t*","pos":[1685,1699]},{"content":"marshal_context","pos":[1700,1715]},{"content":"marshal.h","pos":[1716,1725]},{"content":"const wchar_t *","pos":[1730,1745]},{"content":"System::String^","pos":[1746,1761]},{"content":"marshal_as","pos":[1762,1772]},{"content":"marshal.h","pos":[1773,1782]},{"content":"wchar_t *","pos":[1787,1796]},{"content":"System::String^","pos":[1797,1812]},{"content":"marshal_as","pos":[1813,1823]},{"content":"marshal.h","pos":[1824,1833]},{"content":"System::IntPtr","pos":[1838,1852]},{"content":"HANDLE","pos":[1853,1859]},{"content":"marshal_as","pos":[1860,1870]},{"content":"marshal_windows.h","pos":[1871,1888]},{"content":"HANDLE","pos":[1893,1899]},{"content":"System::IntPtr","pos":[1900,1914]},{"content":"marshal_as","pos":[1915,1925]},{"content":"marshal_windows.h","pos":[1926,1943]},{"content":"System::String^","pos":[1948,1963]},{"content":"BSTR","pos":[1964,1968]},{"content":"marshal_context","pos":[1969,1984]},{"content":"marshal_windows.h","pos":[1985,2002]},{"content":"BSTR","pos":[2007,2011]},{"content":"System::String^","pos":[2012,2027]},{"content":"marshal_as","pos":[2028,2038]},{"content":"marshal.h","pos":[2039,2048]},{"content":"System::String^","pos":[2053,2068]},{"content":"bstr_t","pos":[2069,2075]},{"content":"marshal_as","pos":[2076,2086]},{"content":"marshal_windows.h","pos":[2087,2104]},{"content":"bstr_t","pos":[2109,2115]},{"content":"System::String^","pos":[2116,2131]},{"content":"marshal_as","pos":[2132,2142]},{"content":"marshal_windows.h","pos":[2143,2160]},{"content":"System::String^","pos":[2165,2180]},{"content":"std::string","pos":[2181,2192]},{"content":"marshal_as","pos":[2193,2203]},{"content":"marshal_cppstd.h","pos":[2204,2220]},{"content":"std::string","pos":[2225,2236]},{"content":"System::String^","pos":[2237,2252]},{"content":"marshal_as","pos":[2253,2263]},{"content":"marshal_cppstd.h","pos":[2264,2280]},{"content":"System::String^","pos":[2285,2300]},{"content":"std::wstring","pos":[2301,2313]},{"content":"marshal_as","pos":[2314,2324]},{"content":"marshal_cppstd.h","pos":[2325,2341]},{"content":"std::wstring","pos":[2346,2358]},{"content":"System::String^","pos":[2359,2374]},{"content":"marshal_as","pos":[2375,2385]},{"content":"marshal_cppstd.h","pos":[2386,2402]},{"content":"System::String^","pos":[2407,2422]},{"content":"CStringT<ph id=\"ph1\">\\&lt;</ph>char&gt;","pos":[2423,2438],"source":"CStringT\\<char>"},{"content":"marshal_as","pos":[2439,2449]},{"content":"marshal_atl.h","pos":[2450,2463]},{"content":"CStringT<ph id=\"ph1\">\\&lt;</ph>char&gt;","pos":[2468,2483],"source":"CStringT\\<char>"},{"content":"System::String^","pos":[2484,2499]},{"content":"marshal_as","pos":[2500,2510]},{"content":"marshal_atl.h","pos":[2511,2524]},{"content":"System::String^","pos":[2529,2544]},{"content":"CStringT&lt;wchar_t&gt;","pos":[2545,2562],"source":"CStringT<wchar_t>"},{"content":"marshal_as","pos":[2563,2573]},{"content":"marshal_atl.h","pos":[2574,2587]},{"content":"CStringT&lt;wchar_t&gt;","pos":[2592,2609],"source":"CStringT<wchar_t>"},{"content":"System::String^","pos":[2610,2625]},{"content":"marshal_as","pos":[2626,2636]},{"content":"marshal_atl.h","pos":[2637,2650]},{"content":"System::String^","pos":[2655,2670]},{"content":"CComBSTR","pos":[2671,2679]},{"content":"marshal_as","pos":[2680,2690]},{"content":"marshal_atl.h","pos":[2691,2704]},{"content":"CComBSTR","pos":[2709,2717]},{"content":"System::String^","pos":[2718,2733]},{"content":"marshal_as","pos":[2734,2744]},{"content":"marshal_atl.h","pos":[2745,2758]},{"content":"Marshaling requires a context only when you marshal from managed to native data types and the native type you are converting to does not have a destructor for automatic clean up.","pos":[2766,2944]},{"content":"The marshaling context destroys the allocated native data type in its destructor.","pos":[2945,3026]},{"content":"Therefore, conversions that require a context will be valid only until the context is deleted.","pos":[3027,3121]},{"content":"To save any marshaled values, you must copy the values to your own variables.","pos":[3122,3199]},{"pos":[3207,3403],"content":"[!NOTE]\n If you have embedded `NULL`s in your string, the result of marshaling the string is not guaranteed. The embedded `NULL`s can cause the string to be truncated or they might be preserved.","leadings":["","> "],"nodes":[{"content":" If you have embedded `NULL`s in your string, the result of marshaling the string is not guaranteed. The embedded `NULL`s can cause the string to be truncated or they might be preserved.","pos":[8,194],"nodes":[{"content":"If you have embedded <ph id=\"ph1\">`NULL`</ph>s in your string, the result of marshaling the string is not guaranteed.","pos":[1,100],"source":" If you have embedded `NULL`s in your string, the result of marshaling the string is not guaranteed."},{"content":"The embedded <ph id=\"ph1\">`NULL`</ph>s can cause the string to be truncated or they might be preserved.","pos":[101,186],"source":" The embedded `NULL`s can cause the string to be truncated or they might be preserved."}]}]},{"content":"The marshaling library headers are located in the include directory in the msclr subdirectory.","pos":[3410,3504]},{"content":"This example shows how to include the msclr directory in an include header declaration:","pos":[3505,3592]},{"content":"The marshaling library is extensible so that you can add your own marshaling types.","pos":[3641,3724]},{"content":"For more information about extending the marshaling library, see <bpt id=\"p1\">[</bpt>How to: Extend the Marshaling Library<ept id=\"p1\">](../dotnet/how-to-extend-the-marshaling-library.md)</ept>.","pos":[3725,3881],"source":" For more information about extending the marshaling library, see [How to: Extend the Marshaling Library](../dotnet/how-to-extend-the-marshaling-library.md)."},{"content":"In earlier versions, you could marshal data by using <bpt id=\"p1\">[</bpt>Platform Invoke<ept id=\"p1\">](http://msdn.microsoft.com/Library/eca7606e-ebfb-4f47-b8d9-289903fdc045)</ept>.","pos":[3888,4031],"source":"In earlier versions, you could marshal data by using [Platform Invoke](http://msdn.microsoft.com/Library/eca7606e-ebfb-4f47-b8d9-289903fdc045)."},{"content":"For more information about <ph id=\"ph1\">`PInvoke`</ph>, see <bpt id=\"p1\">[</bpt>Calling Native Functions from Managed Code<ept id=\"p1\">](../dotnet/calling-native-functions-from-managed-code.md)</ept>.","pos":[4032,4176],"source":" For more information about `PInvoke`, see [Calling Native Functions from Managed Code](../dotnet/calling-native-functions-from-managed-code.md)."},{"content":"See Also","pos":[4185,4193]},{"content":"C++ Support Library","pos":[4198,4217]},{"content":"How to: Extend the Marshaling Library","pos":[4258,4295]}],"content":"---\ntitle: \"Overview of Marshaling in C++ | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"marshaling\"\n  - \"marshalling\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Visual C++, marshaling\"\n  - \"C++ Support Library, marshaling\"\n  - \"marshaling, about marshaling\"\nms.assetid: 997dd4bc-5f98-408f-b890-f35de9ce3bb8\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Overview of Marshaling in C++\nIn mixed mode, you sometimes must marshal your data between native and managed types. [!INCLUDE[vs_orcas_long](../atl/reference/includes/vs_orcas_long_md.md)] introduced the marshaling library to help you marshal and convert data in a simple way.  \n  \n You can use the marshaling library with or without a [marshal_context Class](../dotnet/marshal-context-class.md). Some conversions require a context. Other conversions can be implemented using the [marshal_as](../dotnet/marshal-as.md) function. The following table lists the current conversions supported, whether they require a context, and what marshal file you have to include:  \n  \n|From type|To type|Marshal method|Include file|  \n|---------------|-------------|--------------------|------------------|  \n|System::String^|const char *|marshal_context|marshal.h|  \n|const char *|System::String^|marshal_as|marshal.h|  \n|char *|System::String^|marshal_as|marshal.h|  \n|System::String^|const wchar_t*|marshal_context|marshal.h|  \n|const wchar_t *|System::String^|marshal_as|marshal.h|  \n|wchar_t *|System::String^|marshal_as|marshal.h|  \n|System::IntPtr|HANDLE|marshal_as|marshal_windows.h|  \n|HANDLE|System::IntPtr|marshal_as|marshal_windows.h|  \n|System::String^|BSTR|marshal_context|marshal_windows.h|  \n|BSTR|System::String^|marshal_as|marshal.h|  \n|System::String^|bstr_t|marshal_as|marshal_windows.h|  \n|bstr_t|System::String^|marshal_as|marshal_windows.h|  \n|System::String^|std::string|marshal_as|marshal_cppstd.h|  \n|std::string|System::String^|marshal_as|marshal_cppstd.h|  \n|System::String^|std::wstring|marshal_as|marshal_cppstd.h|  \n|std::wstring|System::String^|marshal_as|marshal_cppstd.h|  \n|System::String^|CStringT\\<char>|marshal_as|marshal_atl.h|  \n|CStringT\\<char>|System::String^|marshal_as|marshal_atl.h|  \n|System::String^|CStringT<wchar_t>|marshal_as|marshal_atl.h|  \n|CStringT<wchar_t>|System::String^|marshal_as|marshal_atl.h|  \n|System::String^|CComBSTR|marshal_as|marshal_atl.h|  \n|CComBSTR|System::String^|marshal_as|marshal_atl.h|  \n  \n Marshaling requires a context only when you marshal from managed to native data types and the native type you are converting to does not have a destructor for automatic clean up. The marshaling context destroys the allocated native data type in its destructor. Therefore, conversions that require a context will be valid only until the context is deleted. To save any marshaled values, you must copy the values to your own variables.  \n  \n> [!NOTE]\n>  If you have embedded `NULL`s in your string, the result of marshaling the string is not guaranteed. The embedded `NULL`s can cause the string to be truncated or they might be preserved.  \n  \n The marshaling library headers are located in the include directory in the msclr subdirectory. This example shows how to include the msclr directory in an include header declaration:  \n  \n `#include \"msclr\\marshal_cppstd.h\"`  \n  \n The marshaling library is extensible so that you can add your own marshaling types. For more information about extending the marshaling library, see [How to: Extend the Marshaling Library](../dotnet/how-to-extend-the-marshaling-library.md).  \n  \n In earlier versions, you could marshal data by using [Platform Invoke](http://msdn.microsoft.com/Library/eca7606e-ebfb-4f47-b8d9-289903fdc045). For more information about `PInvoke`, see [Calling Native Functions from Managed Code](../dotnet/calling-native-functions-from-managed-code.md).  \n  \n## See Also  \n [C++ Support Library](../dotnet/cpp-support-library.md)   \n [How to: Extend the Marshaling Library](../dotnet/how-to-extend-the-marshaling-library.md)"}