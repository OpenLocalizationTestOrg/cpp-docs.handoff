{"nodes":[{"pos":[12,52],"content":"IRowsetUpdateImpl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IRowsetUpdateImpl Class | Microsoft Docs","pos":[0,40]}]},{"content":"IRowsetUpdateImpl Class","pos":[749,772]},{"pos":[773,898],"content":"The OLE DB Templates implementation of the <bpt id=\"p1\">[</bpt>IRowsetUpdate<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms714401.aspx)</ept> interface.","source":"The OLE DB Templates implementation of the [IRowsetUpdate](https://msdn.microsoft.com/en-us/library/ms714401.aspx) interface."},{"content":"Syntax","pos":[907,913]},{"content":"Parameters","pos":[1268,1278]},{"content":"A class derived from <ph id=\"ph1\">`IRowsetUpdateImpl`</ph>.","pos":[1289,1330],"source":" A class derived from `IRowsetUpdateImpl`."},{"content":"The user record.","pos":[1350,1366]},{"content":"An array containing cached data for updating the rowset.","pos":[1390,1446]},{"content":"The storage unit for the <bpt id=\"p1\">**</bpt>HROW<ept id=\"p1\">**</ept>.","pos":[1467,1501],"source":" The storage unit for the **HROW**."},{"content":"The storage unit for all row handles held by the provider.","pos":[1522,1580]},{"content":"Members","pos":[1589,1596]},{"content":"Interface Methods (Used with IRowsetChange)","pos":[1606,1649]},{"content":"SetData","pos":[1671,1678]},{"content":"Sets data values in one or more columns.","pos":[1727,1767]},{"content":"Interface Methods (Used with IRowsetUpdate)","pos":[1778,1821]},{"content":"GetOriginalData","pos":[1843,1858]},{"content":"Gets the data most recently transmitted to or obtained from the data source, ignoring pending changes.","pos":[1915,2017]},{"content":"GetPendingRows","pos":[2023,2037]},{"content":"Returns a list of rows with pending changes.","pos":[2093,2137]},{"content":"GetRowStatus","pos":[2143,2155]},{"content":"Returns the status of specified rows.","pos":[2209,2246]},{"content":"Undo","pos":[2252,2256]},{"content":"Undoes any changes to the row since the last fetch or update.","pos":[2302,2363]},{"content":"Update","pos":[2369,2375]},{"content":"Transmits any changes made to the row since the last fetch or update.","pos":[2423,2492]},{"content":"Implementation Methods (Callback)","pos":[2503,2536]},{"content":"IsUpdateAllowed","pos":[2558,2573]},{"content":"Used to check for security, integrity, and so on before allowing updates.","pos":[2630,2703]},{"content":"Data Members","pos":[2714,2726]},{"content":"m_mapCachedData","pos":[2748,2763]},{"content":"Contains the original data for the deferred operation.","pos":[2820,2874]},{"content":"Remarks","pos":[2884,2891]},{"content":"You should first read and understand the documentation for <bpt id=\"p1\">[</bpt>IRowsetChange<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms715790.aspx)</ept>, because everything described there also applies here.","pos":[2895,3080],"source":"You should first read and understand the documentation for [IRowsetChange](https://msdn.microsoft.com/en-us/library/ms715790.aspx), because everything described there also applies here."},{"content":"You should also read chapter 6 of the <ph id=\"ph1\">`OLE``DB``Programmer's``Reference`</ph> on setting data.","pos":[3081,3170],"source":" You should also read chapter 6 of the `OLE``DB``Programmer's``Reference` on setting data."},{"pos":[3197,3389],"content":"implements the OLE DB <ph id=\"ph1\">`IRowsetUpdate`</ph> interface, which enables consumers to delay the transmission of changes made with <ph id=\"ph2\">`IRowsetChange`</ph> to the data source and undo changes before transmission.","source":" implements the OLE DB `IRowsetUpdate` interface, which enables consumers to delay the transmission of changes made with `IRowsetChange` to the data source and undo changes before transmission."},{"pos":[3397,3527],"content":"[!IMPORTANT]\n It is strongly recommended that you read the following documentation BEFORE attempting to implement your provider:","leadings":["","> "],"nodes":[{"content":"It is strongly recommended that you read the following documentation BEFORE attempting to implement your provider:","pos":[14,128]}]},{"content":"Creating an Updatable Provider","pos":[3538,3568]},{"pos":[3631,3647],"content":"Chapter 6 of the"},{"pos":[3692,3761],"content":"Also see how the <ph id=\"ph1\">`RUpdateRowset`</ph> class is used in the UpdatePV sample","source":"Also see how the `RUpdateRowset` class is used in the UpdatePV sample"},{"content":"Requirements","pos":[3770,3782]},{"pos":[3786,3805],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldb.h","source":"**Header:** atldb.h"},{"content":"See Also","pos":[3814,3822]},{"content":"OLE DB Provider Templates","pos":[3827,3852]},{"content":"OLE DB Provider Template Architecture","pos":[3910,3947]},{"content":"Creating an Updatable Provider","pos":[4013,4043]}],"content":"---\ntitle: \"IRowsetUpdateImpl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"IRowsetUpdateImpl\"\n  - \"ATL.IRowsetUpdateImpl\"\n  - \"ATL::IRowsetUpdateImpl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"providers, updatable\"\n  - \"IRowsetUpdateImpl class\"\n  - \"updatable providers, deferred update\"\nms.assetid: f85af76b-ab6f-4f8b-8f4a-337c9679d68f\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IRowsetUpdateImpl Class\nThe OLE DB Templates implementation of the [IRowsetUpdate](https://msdn.microsoft.com/en-us/library/ms714401.aspx) interface.  \n  \n## Syntax  \n  \n```  \ntemplate <  \n   class T,   \n   class Storage,   \n   class UpdateArray = CAtlArray<Storage>,   \n   class RowClass = CSimpleRow,   \n   class MapClass = CAtlMap <RowClass::KeyType, RowClass*>   \n>  \nclass IRowsetUpdateImpl : public IRowsetChangeImpl<  \n   T,   \n   Storage,   \n   IRowsetUpdate,   \n   RowClass,   \n   MapClass  \n>  \n```  \n  \n#### Parameters  \n `T`  \n A class derived from `IRowsetUpdateImpl`.  \n  \n `Storage`  \n The user record.  \n  \n `UpdateArray`  \n An array containing cached data for updating the rowset.  \n  \n `RowClass`  \n The storage unit for the **HROW**.  \n  \n `MapClass`  \n The storage unit for all row handles held by the provider.  \n  \n## Members  \n  \n### Interface Methods (Used with IRowsetChange)  \n  \n|||  \n|-|-|  \n|[SetData](../../data/oledb/irowsetupdateimpl-setdata.md)|Sets data values in one or more columns.|  \n  \n### Interface Methods (Used with IRowsetUpdate)  \n  \n|||  \n|-|-|  \n|[GetOriginalData](../../data/oledb/irowsetupdateimpl-getoriginaldata.md)|Gets the data most recently transmitted to or obtained from the data source, ignoring pending changes.|  \n|[GetPendingRows](../../data/oledb/irowsetupdateimpl-getpendingrows.md)|Returns a list of rows with pending changes.|  \n|[GetRowStatus](../../data/oledb/irowsetupdateimpl-getrowstatus.md)|Returns the status of specified rows.|  \n|[Undo](../../data/oledb/irowsetupdateimpl-undo.md)|Undoes any changes to the row since the last fetch or update.|  \n|[Update](../../data/oledb/irowsetupdateimpl-update.md)|Transmits any changes made to the row since the last fetch or update.|  \n  \n### Implementation Methods (Callback)  \n  \n|||  \n|-|-|  \n|[IsUpdateAllowed](../../data/oledb/irowsetupdateimpl-isupdateallowed.md)|Used to check for security, integrity, and so on before allowing updates.|  \n  \n### Data Members  \n  \n|||  \n|-|-|  \n|[m_mapCachedData](../../data/oledb/irowsetupdateimpl-m-mapcacheddata.md)|Contains the original data for the deferred operation.|  \n  \n## Remarks  \n You should first read and understand the documentation for [IRowsetChange](https://msdn.microsoft.com/en-us/library/ms715790.aspx), because everything described there also applies here. You should also read chapter 6 of the `OLE``DB``Programmer's``Reference` on setting data.  \n  \n `IRowsetUpdateImpl` implements the OLE DB `IRowsetUpdate` interface, which enables consumers to delay the transmission of changes made with `IRowsetChange` to the data source and undo changes before transmission.  \n  \n> [!IMPORTANT]\n>  It is strongly recommended that you read the following documentation BEFORE attempting to implement your provider:  \n  \n-   [Creating an Updatable Provider](../../data/oledb/creating-an-updatable-provider.md)  \n  \n-   Chapter 6 of the `OLE``DB``Programmer's``Reference`  \n  \n-   Also see how the `RUpdateRowset` class is used in the UpdatePV sample  \n  \n## Requirements  \n **Header:** atldb.h  \n  \n## See Also  \n [OLE DB Provider Templates](../../data/oledb/ole-db-provider-templates-cpp.md)   \n [OLE DB Provider Template Architecture](../../data/oledb/ole-db-provider-template-architecture.md)   \n [Creating an Updatable Provider](../../data/oledb/creating-an-updatable-provider.md)"}