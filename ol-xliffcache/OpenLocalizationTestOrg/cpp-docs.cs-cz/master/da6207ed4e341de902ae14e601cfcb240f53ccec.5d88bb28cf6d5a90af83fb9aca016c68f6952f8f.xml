{"nodes":[{"pos":[12,35],"content":"rand_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"rand_s | Microsoft Docs","pos":[0,23]}]},{"content":"rand_s","pos":[1161,1167]},{"content":"Generates a pseudorandom number.","pos":[1168,1200]},{"content":"A version of <bpt id=\"p1\">[</bpt>rand<ept id=\"p1\">](../../c-runtime-library/reference/rand.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1201,1395],"source":" A version of [rand](../../c-runtime-library/reference/rand.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1404,1410]},{"content":"Return Value","pos":[1482,1494]},{"content":"Zero if successful, otherwise, an error code.","pos":[1498,1543]},{"content":"If the input pointer <ph id=\"ph1\">`randomValue`</ph> is a null pointer, the function invokes an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1544,1737],"source":" If the input pointer `randomValue` is a null pointer, the function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the function returns <ph id=\"ph1\">`EINVAL`</ph> and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[1738,1834],"source":" If execution is allowed to continue, the function returns `EINVAL` and sets `errno` to `EINVAL`."},{"content":"If the function fails for any other reason, *<ph id=\"ph1\">`randomValue`</ph> is set to 0.","pos":[1835,1906],"source":" If the function fails for any other reason, *`randomValue` is set to 0."},{"content":"Remarks","pos":[1915,1922]},{"content":"The <ph id=\"ph1\">`rand_s`</ph> function writes a pseudorandom integer in the range 0 to <ph id=\"ph2\">`UINT_MAX`</ph> to the input pointer.","pos":[1926,2028],"source":"The `rand_s` function writes a pseudorandom integer in the range 0 to `UINT_MAX` to the input pointer."},{"content":"The <ph id=\"ph1\">`rand_s`</ph> function uses the operating system to generate cryptographically secure random numbers.","pos":[2029,2129],"source":" The `rand_s` function uses the operating system to generate cryptographically secure random numbers."},{"content":"It does not use the seed generated by the <bpt id=\"p1\">[</bpt>srand<ept id=\"p1\">](../../c-runtime-library/reference/srand.md)</ept> function, nor does it affect the random number sequence used by <ph id=\"ph1\">`rand`</ph>.","pos":[2130,2295],"source":" It does not use the seed generated by the [srand](../../c-runtime-library/reference/srand.md) function, nor does it affect the random number sequence used by `rand`."},{"pos":[2302,2466],"content":"The <ph id=\"ph1\">`rand_s`</ph> function requires that constant <ph id=\"ph2\">`_CRT_RAND_S`</ph> be defined prior to the inclusion statement for the function to be declared, as in the following example:","source":"The `rand_s` function requires that constant `_CRT_RAND_S` be defined prior to the inclusion statement for the function to be declared, as in the following example:"},{"pos":[2541,2684],"content":"depends on the <bpt id=\"p1\">[</bpt>RtlGenRandom<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa387694)</ept> API, which is only available in Windows XP and later.","source":" depends on the [RtlGenRandom](http://msdn.microsoft.com/library/windows/desktop/aa387694) API, which is only available in Windows XP and later."},{"content":"Requirements","pos":[2693,2705]},{"content":"Routine","pos":[2712,2719]},{"content":"Required header","pos":[2720,2735]},{"content":"stdlib.h&gt;","pos":[2791,2800],"source":"stdlib.h>"},{"pos":[2808,2892],"content":"For more information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[2901,2908]},{"content":"Sample Output","pos":[4127,4140]},{"content":".NET Framework Equivalent","pos":[4307,4332]},{"content":"System::Random Class","pos":[4337,4357]},{"content":"See Also","pos":[4428,4436]},{"content":"Floating-Point Support","pos":[4441,4463]},{"content":"srand","pos":[4521,4526]}],"content":"---\ntitle: \"rand_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"rand_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-utility-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"rand_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"generating pseudorandom numbers\"\n  - \"random numbers, cryptographically secure\"\n  - \"random numbers, generating\"\n  - \"rand_s function\"\n  - \"numbers, pseudorandom\"\n  - \"cryptographically secure random numbers\"\n  - \"pseudorandom numbers\"\n  - \"numbers, generating pseudorandom\"\nms.assetid: d6a0be60-997d-4904-8411-8aea6839cc94\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# rand_s\nGenerates a pseudorandom number. A version of [rand](../../c-runtime-library/reference/rand.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t rand_s(   unsigned int* randomValue);  \n```  \n  \n## Return Value  \n Zero if successful, otherwise, an error code. If the input pointer `randomValue` is a null pointer, the function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the function returns `EINVAL` and sets `errno` to `EINVAL`. If the function fails for any other reason, *`randomValue` is set to 0.  \n  \n## Remarks  \n The `rand_s` function writes a pseudorandom integer in the range 0 to `UINT_MAX` to the input pointer. The `rand_s` function uses the operating system to generate cryptographically secure random numbers. It does not use the seed generated by the [srand](../../c-runtime-library/reference/srand.md) function, nor does it affect the random number sequence used by `rand`.  \n  \n The `rand_s` function requires that constant `_CRT_RAND_S` be defined prior to the inclusion statement for the function to be declared, as in the following example:  \n  \n```  \n#define _CRT_RAND_S  \n#include <stdlib.h>  \n```  \n  \n `rand_s` depends on the [RtlGenRandom](http://msdn.microsoft.com/library/windows/desktop/aa387694) API, which is only available in Windows XP and later.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`rand_s`|\\<stdlib.h>|  \n  \n For more information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_rand_s.c  \n// This program illustrates how to generate random  \n// integer or floating point numbers in a specified range.  \n  \n// Remembering to define _CRT_RAND_S prior  \n// to inclusion statement.  \n#define _CRT_RAND_S  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <limits.h>  \n  \nint main( void )  \n{  \n    int             i;  \n    unsigned int    number;  \n    double          max = 100.0;  \n    errno_t         err;  \n  \n    // Display 10 random integers in the range [ 1,10 ].  \n    for( i = 0; i < 10;i++ )  \n    {  \n        err = rand_s( &number );  \n        if (err != 0)  \n        {  \n            printf_s(\"The rand_s function failed!\\n\");  \n        }  \n        printf_s( \"  %u\\n\", (unsigned int) ((double)number /  \n                       ((double) UINT_MAX + 1 ) * 10.0) + 1);  \n    }  \n  \n    printf_s(\"\\n\");  \n  \n    // Display 10 random doubles in [0, max).  \n    for (i = 0; i < 10;i++ )  \n    {  \n        err = rand_s( &number );  \n        if (err != 0)  \n        {  \n            printf_s(\"The rand_s function failed!\\n\");  \n        }  \n        printf_s( \"  %g\\n\", (double) number /   \n                          ((double) UINT_MAX + 1) * max );  \n    }  \n}  \n```  \n  \n## Sample Output  \n  \n```  \n10  \n4  \n5  \n2  \n8  \n2  \n5  \n6  \n1  \n1  \n  \n32.6617  \n29.4471  \n11.5413  \n6.41924  \n20.711  \n60.2878  \n61.0094  \n20.1222  \n80.9192  \n65.0712  \n```  \n  \n## .NET Framework Equivalent  \n [System::Random Class](https://msdn.microsoft.com/en-us/library/system.random.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [srand](../../c-runtime-library/reference/srand.md)"}