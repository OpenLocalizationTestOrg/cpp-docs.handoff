<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7565aa84449694cc4ec0961e8b241fa998fb2ce</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\safebuffers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7de81b861c8a2afdc2e05df27b663dc4377b6339</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04336cb8bdc77a572a592bc0b87d7332eab414f5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>safebuffers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>safebuffers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Tells the compiler not to insert buffer overrun security checks for a function.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/GS<ept id="p1">**</ept> compiler option causes the compiler to test for buffer overruns by inserting security checks on the stack.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The types of data structures that are eligible for security checks are described in <bpt id="p1">[</bpt>/GS (Buffer Security Check)<ept id="p1">](../build/reference/gs-buffer-security-check.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about buffer overrun detection, see <bpt id="p1">[</bpt>Compiler Security Checks In Depth<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=7260)</ept> on the MSDN Web site.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An expert manual code review or external analysis might determine that a function is safe from a buffer overrun.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In that case, you can suppress security checks for a function by applying the __<ph id="ph1">`declspec(safebuffers)`</ph> keyword to the function declaration.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Buffer security checks provide important security protection and have a negligible affect on performance.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Therefore, we recommend that you do not suppress them, except in the rare case where the performance of a function is a critical concern and the function is known to be safe.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Inline Functions</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>primary function<ept id="p1">*</ept> can use an <bpt id="p2">[</bpt>inlining<ept id="p2">](inline-functions-cpp.md)</ept> keyword to insert a copy of a <bpt id="p3">*</bpt>secondary function<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the __<ph id="ph1">`declspec(safebuffers)`</ph> keyword is applied to a function, buffer overrun detection is suppressed for that function.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, inlining affects the <ph id="ph1">\_\_`declspec(safebuffers)`</ph> keyword in the following ways.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Suppose the <bpt id="p1">**</bpt>/GS<ept id="p1">**</ept> compiler option is specified for both functions, but the primary function specifies the __<ph id="ph1">`declspec(safebuffers)`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The data structures in the secondary function make it eligible for security checks, and the function does not suppress those checks.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this case:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Specify the <bpt id="p1">[</bpt>__forceinline<ept id="p1">](inline-functions-cpp.md)</ept> keyword on the secondary function to force the compiler to inline that function regardless of compiler optimizations.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Because the secondary function is eligible for security checks, security checks are also applied to the primary function even though it specifies the __<ph id="ph1">`declspec(safebuffers)`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code shows how to use the __<ph id="ph1">`declspec(safebuffers)`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>__declspec</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>inline, __inline, <ph id="ph1">\_</ph>_forceinline</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>strict_gs_check</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>