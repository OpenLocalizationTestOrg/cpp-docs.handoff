{"nodes":[{"pos":[12,42],"content":"CRBTree Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CRBTree Class | Microsoft Docs","pos":[0,30]}]},{"pos":[632,645],"content":"CRBTree Class","linkify":"CRBTree Class","nodes":[{"content":"CRBTree Class","pos":[0,13]}]},{"content":"This class provides methods for creating and utilizing a Red-Black tree.","pos":[646,718]},{"pos":[727,733],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[881,891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key element type.","pos":[902,923]},{"content":"<bpt id=\"p1\">*</bpt>V<ept id=\"p1\">*</ept>","pos":[930,933],"source":"*V*"},{"content":"The value element type.","pos":[937,960]},{"content":"The code used to copy or move key elements.","pos":[980,1023]},{"content":"See <bpt id=\"p1\">[</bpt>CElementTraits Class<ept id=\"p1\">](../../atl/reference/celementtraits-class.md)</ept> for more details.","pos":[1024,1113],"source":" See [CElementTraits Class](../../atl/reference/celementtraits-class.md) for more details."},{"content":"The code used to copy or move value elements.","pos":[1133,1178]},{"pos":[1187,1194],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1204,1219],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1226,1230]},{"content":"Description","pos":[1231,1242]},{"pos":[1280,1323],"content":"<bpt id=\"p1\">[</bpt>CRBTree::KINARGTYPE<ept id=\"p1\">](#crbtree__kinargtype)</ept>","source":"[CRBTree::KINARGTYPE](#crbtree__kinargtype)"},{"content":"Type used when a key is passed as an input argument.","pos":[1324,1376]},{"pos":[1381,1426],"content":"<bpt id=\"p1\">[</bpt>CRBTree::KOUTARGTYPE<ept id=\"p1\">](#crbtree__koutargtype)</ept>","source":"[CRBTree::KOUTARGTYPE](#crbtree__koutargtype)"},{"content":"Type used when a key is returned as an output argument.","pos":[1427,1482]},{"pos":[1487,1530],"content":"<bpt id=\"p1\">[</bpt>CRBTree::VINARGTYPE<ept id=\"p1\">](#crbtree__vinargtype)</ept>","source":"[CRBTree::VINARGTYPE](#crbtree__vinargtype)"},{"content":"Type used when a value is passed as an input argument.","pos":[1531,1585]},{"pos":[1590,1635],"content":"<bpt id=\"p1\">[</bpt>CRBTree::VOUTARGTYPE<ept id=\"p1\">](#crbtree__voutargtype)</ept>","source":"[CRBTree::VOUTARGTYPE](#crbtree__voutargtype)"},{"content":"Type used when a value is passed as an output argument.","pos":[1636,1691]},{"pos":[1702,1716],"content":"Public Classes","linkify":"Public Classes","nodes":[{"content":"Public Classes","pos":[0,14]}]},{"content":"Name","pos":[1723,1727]},{"content":"Description","pos":[1728,1739]},{"pos":[1777,1822],"content":"<bpt id=\"p1\">[</bpt>CRBTree::CPair Class<ept id=\"p1\">](#crbtree__cpair_class)</ept>","source":"[CRBTree::CPair Class](#crbtree__cpair_class)"},{"content":"A class containing the key and value elements.","pos":[1823,1869]},{"pos":[1880,1899],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1906,1910]},{"content":"Description","pos":[1911,1922]},{"pos":[1960,2003],"content":"<bpt id=\"p1\">[</bpt>CRBTree::~CRBTree<ept id=\"p1\">](#crbtree___dtorcrbtree)</ept>","source":"[CRBTree::~CRBTree](#crbtree___dtorcrbtree)"},{"content":"The destructor.","pos":[2004,2019]},{"pos":[2030,2044],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[2051,2055]},{"content":"Description","pos":[2056,2067]},{"pos":[2105,2162],"content":"<bpt id=\"p1\">[</bpt>CRBTree::FindFirstKeyAfter<ept id=\"p1\">](#crbtree__findfirstkeyafter)</ept>","source":"[CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter)"},{"content":"Call this method to find the position of the element that uses the next available key.","pos":[2163,2249]},{"pos":[2254,2287],"content":"<bpt id=\"p1\">[</bpt>CRBTree::GetAt<ept id=\"p1\">](#crbtree__getat)</ept>","source":"[CRBTree::GetAt](#crbtree__getat)"},{"content":"Call this method to get the element at a given position in the tree.","pos":[2288,2356]},{"pos":[2361,2400],"content":"<bpt id=\"p1\">[</bpt>CRBTree::GetCount<ept id=\"p1\">](#crbtree__getcount)</ept>","source":"[CRBTree::GetCount](#crbtree__getcount)"},{"content":"Call this method to get the number of elements in the tree.","pos":[2401,2460]},{"pos":[2465,2518],"content":"<bpt id=\"p1\">[</bpt>CRBTree::GetHeadPosition<ept id=\"p1\">](#crbtree__getheadposition)</ept>","source":"[CRBTree::GetHeadPosition](#crbtree__getheadposition)"},{"content":"Call this method to get the position value for the element at the head of the tree.","pos":[2519,2602]},{"pos":[2607,2646],"content":"<bpt id=\"p1\">[</bpt>CRBTree::GetKeyAt<ept id=\"p1\">](#crbtree__getkeyat)</ept>","source":"[CRBTree::GetKeyAt](#crbtree__getkeyat)"},{"content":"Call this method to get the key from a given position in the tree.","pos":[2647,2713]},{"pos":[2718,2755],"content":"<bpt id=\"p1\">[</bpt>CRBTree::GetNext<ept id=\"p1\">](#crbtree__getnext)</ept>","source":"[CRBTree::GetNext](#crbtree__getnext)"},{"pos":[2756,2884],"content":"Call this method to obtain a pointer to an element stored in the <ph id=\"ph1\">`CRBTree`</ph> object, and advance the position to the next element.","source":"Call this method to obtain a pointer to an element stored in the `CRBTree` object, and advance the position to the next element."},{"pos":[2889,2936],"content":"<bpt id=\"p1\">[</bpt>CRBTree::GetNextAssoc<ept id=\"p1\">](#crbtree__getnextassoc)</ept>","source":"[CRBTree::GetNextAssoc](#crbtree__getnextassoc)"},{"content":"Call this method to get the key and value of an element stored in the map and advance the position to the next element.","pos":[2937,3056]},{"pos":[3061,3104],"content":"<bpt id=\"p1\">[</bpt>CRBTree::GetNextKey<ept id=\"p1\">](#crbtree__getnextkey)</ept>","source":"[CRBTree::GetNextKey](#crbtree__getnextkey)"},{"content":"Call this method to get the key of an element stored in the tree and advance the position to the next element.","pos":[3105,3215]},{"pos":[3220,3267],"content":"<bpt id=\"p1\">[</bpt>CRBTree::GetNextValue<ept id=\"p1\">](#crbtree__getnextvalue)</ept>","source":"[CRBTree::GetNextValue](#crbtree__getnextvalue)"},{"content":"Call this method to get the value of an element stored in the tree and advance the position to the next element.","pos":[3268,3380]},{"pos":[3385,3422],"content":"<bpt id=\"p1\">[</bpt>CRBTree::GetPrev<ept id=\"p1\">](#crbtree__getprev)</ept>","source":"[CRBTree::GetPrev](#crbtree__getprev)"},{"pos":[3423,3559],"content":"Call this method to obtain a pointer to an element stored in the <ph id=\"ph1\">`CRBTree`</ph> object, and then update the position to the previous element.","source":"Call this method to obtain a pointer to an element stored in the `CRBTree` object, and then update the position to the previous element."},{"pos":[3564,3617],"content":"<bpt id=\"p1\">[</bpt>CRBTree::GetTailPosition<ept id=\"p1\">](#crbtree__gettailposition)</ept>","source":"[CRBTree::GetTailPosition](#crbtree__gettailposition)"},{"content":"Call this method to get the position value for the element at the tail of the tree.","pos":[3618,3701]},{"pos":[3706,3749],"content":"<bpt id=\"p1\">[</bpt>CRBTree::GetValueAt<ept id=\"p1\">](#crbtree__getvalueat)</ept>","source":"[CRBTree::GetValueAt](#crbtree__getvalueat)"},{"pos":[3750,3840],"content":"Call this method to retrieve the value stored at a given position in the <ph id=\"ph1\">`CRBTree`</ph> object.","source":"Call this method to retrieve the value stored at a given position in the `CRBTree` object."},{"pos":[3845,3882],"content":"<bpt id=\"p1\">[</bpt>CRBTree::IsEmpty<ept id=\"p1\">](#crbtree__isempty)</ept>","source":"[CRBTree::IsEmpty](#crbtree__isempty)"},{"content":"Call this method to test for an empty tree object.","pos":[3883,3933]},{"pos":[3938,3979],"content":"<bpt id=\"p1\">[</bpt>CRBTree::RemoveAll<ept id=\"p1\">](#crbtree__removeall)</ept>","source":"[CRBTree::RemoveAll](#crbtree__removeall)"},{"pos":[3980,4048],"content":"Call this method to remove all elements from the <bpt id=\"p1\">**</bpt>CRBTree<ept id=\"p1\">**</ept> object.","source":"Call this method to remove all elements from the **CRBTree** object."},{"pos":[4053,4092],"content":"<bpt id=\"p1\">[</bpt>CRBTree::RemoveAt<ept id=\"p1\">](#crbtree__removeat)</ept>","source":"[CRBTree::RemoveAt](#crbtree__removeat)"},{"pos":[4093,4180],"content":"Call this method to remove the element at the given position in the <bpt id=\"p1\">**</bpt>CRBTree<ept id=\"p1\">**</ept> object.","source":"Call this method to remove the element at the given position in the **CRBTree** object."},{"pos":[4185,4228],"content":"<bpt id=\"p1\">[</bpt>CRBTree::SetValueAt<ept id=\"p1\">](#crbtree__setvalueat)</ept>","source":"[CRBTree::SetValueAt](#crbtree__setvalueat)"},{"pos":[4229,4317],"content":"Call this method to change the value stored at a given position in the <ph id=\"ph1\">`CRBTree`</ph> object.","source":"Call this method to change the value stored at a given position in the `CRBTree` object."},{"pos":[4327,4334],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A Red-Black tree is a binary search tree that uses an extra bit of information per node to ensure that it remains \"balanced,\" that is, the tree height doesn't grow disproportionately large and affect performance.","pos":[4338,4550]},{"content":"This template class is designed to be used by <bpt id=\"p1\">[</bpt>CRBMap<ept id=\"p1\">](../../atl/reference/crbmap-class.md)</ept> and <bpt id=\"p2\">[</bpt>CRBMultiMap<ept id=\"p2\">](../../atl/reference/crbmultimap-class.md)</ept>.","pos":[4557,4709],"source":"This template class is designed to be used by [CRBMap](../../atl/reference/crbmap-class.md) and [CRBMultiMap](../../atl/reference/crbmultimap-class.md)."},{"content":"The bulk of the methods that make up these derived classes are provided by <ph id=\"ph1\">`CRBTree`</ph>.","pos":[4710,4795],"source":" The bulk of the methods that make up these derived classes are provided by `CRBTree`."},{"pos":[4802,4985],"content":"For a more complete discussion of the various collection classes and their features and performance characteristics, see <bpt id=\"p1\">[</bpt>ATL Collection Classes<ept id=\"p1\">](../../atl/atl-collection-classes.md)</ept>.","source":"For a more complete discussion of the various collection classes and their features and performance characteristics, see [ATL Collection Classes](../../atl/atl-collection-classes.md)."},{"pos":[4994,5006],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5010,5031],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcoll.h","source":"**Header:** atlcoll.h"},{"pos":[5041,5098],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__cpair_class\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::CPair Class","linkify":"<a name=\"crbtree__cpair_class\"></a>  CRBTree::CPair Class","source":"<a name=\"crbtree__cpair_class\"></a>  CRBTree::CPair Class"},{"content":"A class containing the key and value elements.","pos":[5102,5148]},{"pos":[5203,5210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5214,5430],"content":"This class is used by the methods <bpt id=\"p1\">[</bpt>CRBTree::GetAt<ept id=\"p1\">](#crbtree__getat)</ept>, <bpt id=\"p2\">[</bpt>CRBTree::GetNext<ept id=\"p2\">](#crbtree__getnext)</ept>, and <bpt id=\"p3\">[</bpt>CRBTree::GetPrev<ept id=\"p3\">](#crbtree__getprev)</ept> to access the key and value elements stored in the tree structure.","source":"This class is used by the methods [CRBTree::GetAt](#crbtree__getat), [CRBTree::GetNext](#crbtree__getnext), and [CRBTree::GetPrev](#crbtree__getprev) to access the key and value elements stored in the tree structure."},{"content":"The members are as follows:","pos":[5437,5464]},{"content":"The data member storing the key element.","pos":[5493,5533]},{"content":"The data member storing the value element.","pos":[5548,5590]},{"pos":[5601,5656],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree___dtorcrbtree\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::~CRBTree","linkify":"<a name=\"crbtree___dtorcrbtree\"></a>  CRBTree::~CRBTree","source":"<a name=\"crbtree___dtorcrbtree\"></a>  CRBTree::~CRBTree"},{"content":"The destructor.","pos":[5660,5675]},{"pos":[5718,5725],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Frees any allocated resources.","pos":[5729,5759]},{"content":"Calls <bpt id=\"p1\">[</bpt>CRBTree::RemoveAll<ept id=\"p1\">](#crbtree__removeall)</ept> to delete all elements.","pos":[5760,5831],"source":" Calls [CRBTree::RemoveAll](#crbtree__removeall) to delete all elements."},{"pos":[5841,5910],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__findfirstkeyafter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::FindFirstKeyAfter","linkify":"<a name=\"crbtree__findfirstkeyafter\"></a>  CRBTree::FindFirstKeyAfter","source":"<a name=\"crbtree__findfirstkeyafter\"></a>  CRBTree::FindFirstKeyAfter"},{"content":"Call this method to find the position of the element that uses the next available key.","pos":[5914,6000]},{"pos":[6083,6093],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A key value.","pos":[6106,6118]},{"pos":[6128,6140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the position value of the element that uses the next available key.","pos":[6144,6219]},{"content":"If there are no more elements, NULL is returned.","pos":[6220,6268]},{"pos":[6278,6285],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method makes it easy to traverse the tree without having to calculate position values beforehand.","pos":[6289,6391]},{"pos":[6401,6446],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__getat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::GetAt","linkify":"<a name=\"crbtree__getat\"></a>  CRBTree::GetAt","source":"<a name=\"crbtree__getat\"></a>  CRBTree::GetAt"},{"content":"Call this method to get the element at a given position in the tree.","pos":[6450,6518]},{"pos":[6717,6727],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position value.","pos":[6740,6759]},{"content":"The variable that receives the key.","pos":[6775,6810]},{"content":"<bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept>","pos":[6817,6824],"source":"*value*"},{"content":"The variable that receives the value.","pos":[6828,6865]},{"pos":[6875,6887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first two forms return a pointer to a <bpt id=\"p1\">[</bpt>CPair<ept id=\"p1\">](#crbtree__cpair_class)</ept>.","pos":[6891,6964],"source":"The first two forms return a pointer to a [CPair](#crbtree__cpair_class)."},{"content":"The third form obtains a key and a value for the given position.","pos":[6965,7029]},{"pos":[7039,7046],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7050,7241],"content":"The position value can be previously determined with a call to a method such as <bpt id=\"p1\">[</bpt>CRBTree::GetHeadPosition<ept id=\"p1\">](#crbtree__getheadposition)</ept> or <bpt id=\"p2\">[</bpt>CRBTree::GetTailPosition<ept id=\"p2\">](#crbtree__gettailposition)</ept>.","source":"The position value can be previously determined with a call to a method such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::GetTailPosition](#crbtree__gettailposition)."},{"pos":[7248,7323],"content":"In debug builds, an assertion failure will occur if <ph id=\"ph1\">`pos`</ph> is equal to NULL.","source":"In debug builds, an assertion failure will occur if `pos` is equal to NULL."},{"pos":[7333,7384],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__getcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::GetCount","linkify":"<a name=\"crbtree__getcount\"></a>  CRBTree::GetCount","source":"<a name=\"crbtree__getcount\"></a>  CRBTree::GetCount"},{"content":"Call this method to get the number of elements in the tree.","pos":[7388,7447]},{"pos":[7503,7515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the number of elements (each key/value pair is one element) stored in the tree.","pos":[7519,7606]},{"pos":[7616,7681],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__getheadposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::GetHeadPosition","linkify":"<a name=\"crbtree__getheadposition\"></a>  CRBTree::GetHeadPosition","source":"<a name=\"crbtree__getheadposition\"></a>  CRBTree::GetHeadPosition"},{"content":"Call this method to get the position value for the element at the head of the tree.","pos":[7685,7768]},{"pos":[7833,7845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the position value for the element at the head of the tree.","pos":[7849,7916]},{"pos":[7926,7933],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7937,8132],"content":"The value returned by <ph id=\"ph1\">`GetHeadPosition`</ph> can be used with methods such as <bpt id=\"p1\">[</bpt>CRBTree::GetKeyAt<ept id=\"p1\">](#crbtree__getkeyat)</ept> or <bpt id=\"p2\">[</bpt>CRBTree::GetNext<ept id=\"p2\">](#crbtree__getnext)</ept> to traverse the tree and retrieve values.","source":"The value returned by `GetHeadPosition` can be used with methods such as [CRBTree::GetKeyAt](#crbtree__getkeyat) or [CRBTree::GetNext](#crbtree__getnext) to traverse the tree and retrieve values."},{"pos":[8142,8193],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__getkeyat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::GetKeyAt","linkify":"<a name=\"crbtree__getkeyat\"></a>  CRBTree::GetKeyAt","source":"<a name=\"crbtree__getkeyat\"></a>  CRBTree::GetKeyAt"},{"content":"Call this method to get the key from a given position in the tree.","pos":[8197,8263]},{"pos":[8335,8345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position value.","pos":[8358,8377]},{"pos":[8387,8399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8403,8456],"content":"Returns the key stored at position <ph id=\"ph1\">`pos`</ph> in the tree.","source":"Returns the key stored at position `pos` in the tree."},{"pos":[8466,8473],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`pos`</ph> is not a valid position value, results are unpredictable.","pos":[8477,8543],"source":"If `pos` is not a valid position value, results are unpredictable."},{"content":"In debug builds, an assertion failure will occur if <ph id=\"ph1\">`pos`</ph> is equal to NULL.","pos":[8544,8619],"source":" In debug builds, an assertion failure will occur if `pos` is equal to NULL."},{"pos":[8629,8678],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__getnext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::GetNext","linkify":"<a name=\"crbtree__getnext\"></a>  CRBTree::GetNext","source":"<a name=\"crbtree__getnext\"></a>  CRBTree::GetNext"},{"pos":[8682,8810],"content":"Call this method to obtain a pointer to an element stored in the <ph id=\"ph1\">`CRBTree`</ph> object, and advance the position to the next element.","source":"Call this method to obtain a pointer to an element stored in the `CRBTree` object, and advance the position to the next element."},{"pos":[8923,8933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to methods such as <bpt id=\"p1\">[</bpt>CRBTree::GetHeadPosition<ept id=\"p1\">](#crbtree__getheadposition)</ept> or <bpt id=\"p2\">[</bpt>CRBTree::FindFirstKeyAfter<ept id=\"p2\">](#crbtree__findfirstkeyafter)</ept>.","pos":[8946,9130],"source":" The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter)."},{"pos":[9140,9152],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9156,9235],"content":"Returns a pointer to the next <bpt id=\"p1\">[</bpt>CPair<ept id=\"p1\">](#crbtree__cpair_class)</ept> value in the tree.","source":"Returns a pointer to the next [CPair](#crbtree__cpair_class) value in the tree."},{"pos":[9245,9252],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`pos`</ph> position counter is updated after each call.","pos":[9256,9310],"source":"The `pos` position counter is updated after each call."},{"content":"If the retrieved element is the last in the tree, <ph id=\"ph1\">`pos`</ph> is set to NULL.","pos":[9311,9382],"source":" If the retrieved element is the last in the tree, `pos` is set to NULL."},{"pos":[9392,9451],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__getnextassoc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::GetNextAssoc","linkify":"<a name=\"crbtree__getnextassoc\"></a>  CRBTree::GetNextAssoc","source":"<a name=\"crbtree__getnextassoc\"></a>  CRBTree::GetNextAssoc"},{"content":"Call this method to get the key and value of an element stored in the map and advance the position to the next element.","pos":[9455,9574]},{"pos":[9686,9696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to methods such as <bpt id=\"p1\">[</bpt>CRBTree::GetHeadPosition<ept id=\"p1\">](#crbtree__getheadposition)</ept> or <bpt id=\"p2\">[</bpt>CRBTree::FindFirstKeyAfter<ept id=\"p2\">](#crbtree__findfirstkeyafter)</ept>.","pos":[9709,9893],"source":" The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter)."},{"content":"Template parameter specifying the type of the tree's key.","pos":[9909,9966]},{"content":"<bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept>","pos":[9973,9980],"source":"*value*"},{"content":"Template parameter specifying the type of the tree's value.","pos":[9984,10043]},{"pos":[10053,10060],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`pos`</ph> position counter is updated after each call.","pos":[10064,10118],"source":"The `pos` position counter is updated after each call."},{"content":"If the retrieved element is the last in the tree, <ph id=\"ph1\">`pos`</ph> is set to NULL.","pos":[10119,10190],"source":" If the retrieved element is the last in the tree, `pos` is set to NULL."},{"pos":[10200,10255],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__getnextkey\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::GetNextKey","linkify":"<a name=\"crbtree__getnextkey\"></a>  CRBTree::GetNextKey","source":"<a name=\"crbtree__getnextkey\"></a>  CRBTree::GetNextKey"},{"content":"Call this method to get the key of an element stored in the tree and advance the position to the next element.","pos":[10259,10369]},{"pos":[10442,10452],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to methods such as <bpt id=\"p1\">[</bpt>CRBTree::GetHeadPosition<ept id=\"p1\">](#crbtree__getheadposition)</ept> or <bpt id=\"p2\">[</bpt>CRBTree::FindFirstKeyAfter<ept id=\"p2\">](#crbtree__findfirstkeyafter)</ept>.","pos":[10465,10649],"source":" The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter)."},{"pos":[10659,10671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a reference to the next key in the tree.","pos":[10675,10723]},{"pos":[10733,10740],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Updates the current position counter, <ph id=\"ph1\">`pos`</ph>.","pos":[10744,10788],"source":"Updates the current position counter, `pos`."},{"content":"If there are no more entries in the tree, the position counter is set to NULL.","pos":[10789,10867]},{"pos":[10877,10936],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__getnextvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::GetNextValue","linkify":"<a name=\"crbtree__getnextvalue\"></a>  CRBTree::GetNextValue","source":"<a name=\"crbtree__getnextvalue\"></a>  CRBTree::GetNextValue"},{"content":"Call this method to get the value of an element stored in the tree and advance the position to the next element.","pos":[10940,11052]},{"pos":[11167,11177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to methods such as <bpt id=\"p1\">[</bpt>CRBTree::GetHeadPosition<ept id=\"p1\">](#crbtree__getheadposition)</ept> or <bpt id=\"p2\">[</bpt>CRBTree::FindFirstKeyAfter<ept id=\"p2\">](#crbtree__findfirstkeyafter)</ept>.","pos":[11190,11374],"source":" The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter)."},{"pos":[11384,11396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a reference to the next value in the tree.","pos":[11400,11450]},{"pos":[11460,11467],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Updates the current position counter, <ph id=\"ph1\">`pos`</ph>.","pos":[11471,11515],"source":"Updates the current position counter, `pos`."},{"content":"If there are no more entries in the tree, the position counter is set to NULL.","pos":[11516,11594]},{"pos":[11604,11653],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__getprev\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::GetPrev","linkify":"<a name=\"crbtree__getprev\"></a>  CRBTree::GetPrev","source":"<a name=\"crbtree__getprev\"></a>  CRBTree::GetPrev"},{"pos":[11657,11793],"content":"Call this method to obtain a pointer to an element stored in the <ph id=\"ph1\">`CRBTree`</ph> object, and then update the position to the previous element.","source":"Call this method to obtain a pointer to an element stored in the `CRBTree` object, and then update the position to the previous element."},{"pos":[11906,11916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to methods such as <bpt id=\"p1\">[</bpt>CRBTree::GetHeadPosition<ept id=\"p1\">](#crbtree__getheadposition)</ept> or <bpt id=\"p2\">[</bpt>CRBTree::FindFirstKeyAfter<ept id=\"p2\">](#crbtree__findfirstkeyafter)</ept>.","pos":[11929,12113],"source":" The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter)."},{"pos":[12123,12135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12139,12229],"content":"Returns a pointer to the previous <bpt id=\"p1\">[</bpt>CPair<ept id=\"p1\">](#crbtree__cpair_class)</ept> value stored in the tree.","source":"Returns a pointer to the previous [CPair](#crbtree__cpair_class) value stored in the tree."},{"pos":[12239,12246],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Updates the current position counter, <ph id=\"ph1\">`pos`</ph>.","pos":[12250,12294],"source":"Updates the current position counter, `pos`."},{"content":"If there are no more entries in the tree, the position counter is set to NULL.","pos":[12295,12373]},{"pos":[12383,12448],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__gettailposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::GetTailPosition","linkify":"<a name=\"crbtree__gettailposition\"></a>  CRBTree::GetTailPosition","source":"<a name=\"crbtree__gettailposition\"></a>  CRBTree::GetTailPosition"},{"content":"Call this method to get the position value for the element at the tail of the tree.","pos":[12452,12535]},{"pos":[12600,12612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the position value for the element at the tail of the tree.","pos":[12616,12683]},{"pos":[12693,12700],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12704,12899],"content":"The value returned by <ph id=\"ph1\">`GetTailPosition`</ph> can be used with methods such as <bpt id=\"p1\">[</bpt>CRBTree::GetKeyAt<ept id=\"p1\">](#crbtree__getkeyat)</ept> or <bpt id=\"p2\">[</bpt>CRBTree::GetPrev<ept id=\"p2\">](#crbtree__getprev)</ept> to traverse the tree and retrieve values.","source":"The value returned by `GetTailPosition` can be used with methods such as [CRBTree::GetKeyAt](#crbtree__getkeyat) or [CRBTree::GetPrev](#crbtree__getprev) to traverse the tree and retrieve values."},{"pos":[12909,12964],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__getvalueat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::GetValueAt","linkify":"<a name=\"crbtree__getvalueat\"></a>  CRBTree::GetValueAt","source":"<a name=\"crbtree__getvalueat\"></a>  CRBTree::GetValueAt"},{"pos":[12968,13058],"content":"Call this method to retrieve the value stored at a given position in the <ph id=\"ph1\">`CRBTree`</ph> object.","source":"Call this method to retrieve the value stored at a given position in the `CRBTree` object."},{"pos":[13171,13181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to methods such as <bpt id=\"p1\">[</bpt>CRBTree::GetHeadPosition<ept id=\"p1\">](#crbtree__getheadposition)</ept> or <bpt id=\"p2\">[</bpt>CRBTree::FindFirstKeyAfter<ept id=\"p2\">](#crbtree__findfirstkeyafter)</ept>.","pos":[13194,13378],"source":" The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter)."},{"pos":[13388,13400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13404,13490],"content":"Returns a reference to the value stored at the given position in the <ph id=\"ph1\">`CRBTree`</ph> object.","source":"Returns a reference to the value stored at the given position in the `CRBTree` object."},{"pos":[13500,13549],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__isempty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::IsEmpty","linkify":"<a name=\"crbtree__isempty\"></a>  CRBTree::IsEmpty","source":"<a name=\"crbtree__isempty\"></a>  CRBTree::IsEmpty"},{"content":"Call this method to test for an empty tree object.","pos":[13553,13603]},{"pos":[13656,13668],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13672,13731],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the tree is empty, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> otherwise.","source":"Returns **true** if the tree is empty, **false** otherwise."},{"pos":[13741,13796],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__kinargtype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::KINARGTYPE","linkify":"<a name=\"crbtree__kinargtype\"></a>  CRBTree::KINARGTYPE","source":"<a name=\"crbtree__kinargtype\"></a>  CRBTree::KINARGTYPE"},{"content":"Type used when a key is passed as an input argument.","pos":[13800,13852]},{"pos":[13914,13971],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__koutargtype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::KOUTARGTYPE","linkify":"<a name=\"crbtree__koutargtype\"></a>  CRBTree::KOUTARGTYPE","source":"<a name=\"crbtree__koutargtype\"></a>  CRBTree::KOUTARGTYPE"},{"content":"Type used when a key is returned as an output argument.","pos":[13975,14030]},{"pos":[14094,14147],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__removeall\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::RemoveAll","linkify":"<a name=\"crbtree__removeall\"></a>  CRBTree::RemoveAll","source":"<a name=\"crbtree__removeall\"></a>  CRBTree::RemoveAll"},{"pos":[14151,14217],"content":"Call this method to remove all elements from the <ph id=\"ph1\">`CRBTree`</ph> object.","source":"Call this method to remove all elements from the `CRBTree` object."},{"pos":[14266,14273],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14277,14356],"content":"Clears out the <ph id=\"ph1\">`CRBTree`</ph> object, freeing the memory used to store the elements.","source":"Clears out the `CRBTree` object, freeing the memory used to store the elements."},{"pos":[14366,14417],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__removeat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::RemoveAt","linkify":"<a name=\"crbtree__removeat\"></a>  CRBTree::RemoveAt","source":"<a name=\"crbtree__removeat\"></a>  CRBTree::RemoveAt"},{"pos":[14421,14508],"content":"Call this method to remove the element at the given position in the <bpt id=\"p1\">**</bpt>CRBTree<ept id=\"p1\">**</ept> object.","source":"Call this method to remove the element at the given position in the **CRBTree** object."},{"pos":[14570,14580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to methods such as <bpt id=\"p1\">[</bpt>CRBTree::GetHeadPosition<ept id=\"p1\">](#crbtree__getheadposition)</ept> or <bpt id=\"p2\">[</bpt>CRBTree::FindFirstKeyAfter<ept id=\"p2\">](#crbtree__findfirstkeyafter)</ept>.","pos":[14593,14777],"source":" The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter)."},{"pos":[14787,14794],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Removes the key/value pair stored at the specified position.","pos":[14798,14858]},{"content":"The memory used to store the element is freed.","pos":[14859,14905]},{"content":"The POSITION referenced by <ph id=\"ph1\">`pos`</ph> becomes invalid, and while the POSITION of any other elements in the tree remains valid, they do not necessarily retain the same order.","pos":[14906,15074],"source":" The POSITION referenced by `pos` becomes invalid, and while the POSITION of any other elements in the tree remains valid, they do not necessarily retain the same order."},{"pos":[15084,15139],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__setvalueat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::SetValueAt","linkify":"<a name=\"crbtree__setvalueat\"></a>  CRBTree::SetValueAt","source":"<a name=\"crbtree__setvalueat\"></a>  CRBTree::SetValueAt"},{"pos":[15143,15231],"content":"Call this method to change the value stored at a given position in the <ph id=\"ph1\">`CRBTree`</ph> object.","source":"Call this method to change the value stored at a given position in the `CRBTree` object."},{"pos":[15312,15322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to methods such as <bpt id=\"p1\">[</bpt>CRBTree::GetHeadPosition<ept id=\"p1\">](#crbtree__getheadposition)</ept> or <bpt id=\"p2\">[</bpt>CRBTree::FindFirstKeyAfter<ept id=\"p2\">](#crbtree__findfirstkeyafter)</ept>.","pos":[15335,15519],"source":" The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter)."},{"content":"<bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept>","pos":[15526,15533],"source":"*value*"},{"content":"The value to add to the <ph id=\"ph1\">`CRBTree`</ph> object.","pos":[15537,15578],"source":" The value to add to the `CRBTree` object."},{"pos":[15588,15595],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15599,15678],"content":"Changes the value element stored at the given position in the <ph id=\"ph1\">`CRBTree`</ph> object.","source":"Changes the value element stored at the given position in the `CRBTree` object."},{"pos":[15688,15743],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__vinargtype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::VINARGTYPE","linkify":"<a name=\"crbtree__vinargtype\"></a>  CRBTree::VINARGTYPE","source":"<a name=\"crbtree__vinargtype\"></a>  CRBTree::VINARGTYPE"},{"content":"Type used when a value is passed as an input argument.","pos":[15747,15801]},{"pos":[15863,15920],"content":"<bpt id=\"p1\">&lt;a name=\"crbtree__voutargtype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRBTree::VOUTARGTYPE","linkify":"<a name=\"crbtree__voutargtype\"></a>  CRBTree::VOUTARGTYPE","source":"<a name=\"crbtree__voutargtype\"></a>  CRBTree::VOUTARGTYPE"},{"content":"Type used when a value is passed as an output argument.","pos":[15924,15979]},{"pos":[16042,16050],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[16054,16103],"content":"<bpt id=\"p1\">[</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept>","source":"[Class Overview](../../atl/atl-class-overview.md)"}],"content":"---\ntitle: \"CRBTree Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CRBTree\"\n  - \"CRBTree\"\n  - \"ATL::CRBTree\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CRBTree class\"\nms.assetid: a1b1cb63-38e4-4fc2-bb28-f774d1721760\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CRBTree Class\nThis class provides methods for creating and utilizing a Red-Black tree.  \n  \n## Syntax  \n  \n```\ntemplate <typename   K,\n    typename V, class KTraits = CElementTraits<K>, class VTraits = CElementTraits<V>> class CRBTree\n```  \n  \n#### Parameters  \n `K`  \n The key element type.  \n  \n *V*  \n The value element type.  \n  \n `KTraits`  \n The code used to copy or move key elements. See [CElementTraits Class](../../atl/reference/celementtraits-class.md) for more details.  \n  \n `VTraits`  \n The code used to copy or move value elements.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRBTree::KINARGTYPE](#crbtree__kinargtype)|Type used when a key is passed as an input argument.|  \n|[CRBTree::KOUTARGTYPE](#crbtree__koutargtype)|Type used when a key is returned as an output argument.|  \n|[CRBTree::VINARGTYPE](#crbtree__vinargtype)|Type used when a value is passed as an input argument.|  \n|[CRBTree::VOUTARGTYPE](#crbtree__voutargtype)|Type used when a value is passed as an output argument.|  \n  \n### Public Classes  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRBTree::CPair Class](#crbtree__cpair_class)|A class containing the key and value elements.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRBTree::~CRBTree](#crbtree___dtorcrbtree)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter)|Call this method to find the position of the element that uses the next available key.|  \n|[CRBTree::GetAt](#crbtree__getat)|Call this method to get the element at a given position in the tree.|  \n|[CRBTree::GetCount](#crbtree__getcount)|Call this method to get the number of elements in the tree.|  \n|[CRBTree::GetHeadPosition](#crbtree__getheadposition)|Call this method to get the position value for the element at the head of the tree.|  \n|[CRBTree::GetKeyAt](#crbtree__getkeyat)|Call this method to get the key from a given position in the tree.|  \n|[CRBTree::GetNext](#crbtree__getnext)|Call this method to obtain a pointer to an element stored in the `CRBTree` object, and advance the position to the next element.|  \n|[CRBTree::GetNextAssoc](#crbtree__getnextassoc)|Call this method to get the key and value of an element stored in the map and advance the position to the next element.|  \n|[CRBTree::GetNextKey](#crbtree__getnextkey)|Call this method to get the key of an element stored in the tree and advance the position to the next element.|  \n|[CRBTree::GetNextValue](#crbtree__getnextvalue)|Call this method to get the value of an element stored in the tree and advance the position to the next element.|  \n|[CRBTree::GetPrev](#crbtree__getprev)|Call this method to obtain a pointer to an element stored in the `CRBTree` object, and then update the position to the previous element.|  \n|[CRBTree::GetTailPosition](#crbtree__gettailposition)|Call this method to get the position value for the element at the tail of the tree.|  \n|[CRBTree::GetValueAt](#crbtree__getvalueat)|Call this method to retrieve the value stored at a given position in the `CRBTree` object.|  \n|[CRBTree::IsEmpty](#crbtree__isempty)|Call this method to test for an empty tree object.|  \n|[CRBTree::RemoveAll](#crbtree__removeall)|Call this method to remove all elements from the **CRBTree** object.|  \n|[CRBTree::RemoveAt](#crbtree__removeat)|Call this method to remove the element at the given position in the **CRBTree** object.|  \n|[CRBTree::SetValueAt](#crbtree__setvalueat)|Call this method to change the value stored at a given position in the `CRBTree` object.|  \n  \n## Remarks  \n A Red-Black tree is a binary search tree that uses an extra bit of information per node to ensure that it remains \"balanced,\" that is, the tree height doesn't grow disproportionately large and affect performance.  \n  \n This template class is designed to be used by [CRBMap](../../atl/reference/crbmap-class.md) and [CRBMultiMap](../../atl/reference/crbmultimap-class.md). The bulk of the methods that make up these derived classes are provided by `CRBTree`.  \n  \n For a more complete discussion of the various collection classes and their features and performance characteristics, see [ATL Collection Classes](../../atl/atl-collection-classes.md).  \n  \n## Requirements  \n **Header:** atlcoll.h  \n  \n##  <a name=\"crbtree__cpair_class\"></a>  CRBTree::CPair Class  \n A class containing the key and value elements.  \n  \n```\nclass CPair : public __POSITION\n```  \n  \n### Remarks  \n This class is used by the methods [CRBTree::GetAt](#crbtree__getat), [CRBTree::GetNext](#crbtree__getnext), and [CRBTree::GetPrev](#crbtree__getprev) to access the key and value elements stored in the tree structure.  \n  \n The members are as follows:  \n  \n|||  \n|-|-|  \n|`m_key`|The data member storing the key element.|  \n|`m_value`|The data member storing the value element.|  \n  \n##  <a name=\"crbtree___dtorcrbtree\"></a>  CRBTree::~CRBTree  \n The destructor.  \n  \n```\n~CRBTree() throw();\n```  \n  \n### Remarks  \n Frees any allocated resources. Calls [CRBTree::RemoveAll](#crbtree__removeall) to delete all elements.  \n  \n##  <a name=\"crbtree__findfirstkeyafter\"></a>  CRBTree::FindFirstKeyAfter  \n Call this method to find the position of the element that uses the next available key.  \n  \n```\nPOSITION FindFirstKeyAfter(KINARGTYPE   key) const throw();\n```  \n  \n### Parameters  \n `key`  \n A key value.  \n  \n### Return Value  \n Returns the position value of the element that uses the next available key. If there are no more elements, NULL is returned.  \n  \n### Remarks  \n This method makes it easy to traverse the tree without having to calculate position values beforehand.  \n  \n##  <a name=\"crbtree__getat\"></a>  CRBTree::GetAt  \n Call this method to get the element at a given position in the tree.  \n  \n```\nCPair* GetAt(\n    POSITION pos) throw();\n\nconst CPair* GetAt(\n    POSITION pos) const throw();\nvoid GetAt(\n    POSITION pos,\n    KOUTARGTYPE key,\n    VOUTARGTYPE value) const;\n```  \n  \n### Parameters  \n `pos`  \n The position value.  \n  \n `key`  \n The variable that receives the key.  \n  \n *value*  \n The variable that receives the value.  \n  \n### Return Value  \n The first two forms return a pointer to a [CPair](#crbtree__cpair_class). The third form obtains a key and a value for the given position.  \n  \n### Remarks  \n The position value can be previously determined with a call to a method such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::GetTailPosition](#crbtree__gettailposition).  \n  \n In debug builds, an assertion failure will occur if `pos` is equal to NULL.  \n  \n##  <a name=\"crbtree__getcount\"></a>  CRBTree::GetCount  \n Call this method to get the number of elements in the tree.  \n  \n```\nsize_t GetCount() const throw();\n```  \n  \n### Return Value  \n Returns the number of elements (each key/value pair is one element) stored in the tree.  \n  \n##  <a name=\"crbtree__getheadposition\"></a>  CRBTree::GetHeadPosition  \n Call this method to get the position value for the element at the head of the tree.  \n  \n```\nPOSITION GetHeadPosition() const throw();\n```  \n  \n### Return Value  \n Returns the position value for the element at the head of the tree.  \n  \n### Remarks  \n The value returned by `GetHeadPosition` can be used with methods such as [CRBTree::GetKeyAt](#crbtree__getkeyat) or [CRBTree::GetNext](#crbtree__getnext) to traverse the tree and retrieve values.  \n  \n##  <a name=\"crbtree__getkeyat\"></a>  CRBTree::GetKeyAt  \n Call this method to get the key from a given position in the tree.  \n  \n```\nconst K& GetKeyAt(POSITION   pos) const throw();\n```  \n  \n### Parameters  \n `pos`  \n The position value.  \n  \n### Return Value  \n Returns the key stored at position `pos` in the tree.  \n  \n### Remarks  \n If `pos` is not a valid position value, results are unpredictable. In debug builds, an assertion failure will occur if `pos` is equal to NULL.  \n  \n##  <a name=\"crbtree__getnext\"></a>  CRBTree::GetNext  \n Call this method to obtain a pointer to an element stored in the `CRBTree` object, and advance the position to the next element.  \n  \n```\nconst CPair* GetNext(POSITION& pos) const throw();\nCPair* GetNext(POSITION& pos) throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter).  \n  \n### Return Value  \n Returns a pointer to the next [CPair](#crbtree__cpair_class) value in the tree.  \n  \n### Remarks  \n The `pos` position counter is updated after each call. If the retrieved element is the last in the tree, `pos` is set to NULL.  \n  \n##  <a name=\"crbtree__getnextassoc\"></a>  CRBTree::GetNextAssoc  \n Call this method to get the key and value of an element stored in the map and advance the position to the next element.  \n  \n```\nvoid GetNextAssoc(\n    POSITION& pos,\n    KOUTARGTYPE key,\n    VOUTARGTYPE value) const;\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter).  \n  \n `key`  \n Template parameter specifying the type of the tree's key.  \n  \n *value*  \n Template parameter specifying the type of the tree's value.  \n  \n### Remarks  \n The `pos` position counter is updated after each call. If the retrieved element is the last in the tree, `pos` is set to NULL.  \n  \n##  <a name=\"crbtree__getnextkey\"></a>  CRBTree::GetNextKey  \n Call this method to get the key of an element stored in the tree and advance the position to the next element.  \n  \n```\nconst K& GetNextKey(POSITION& pos) const throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter).  \n  \n### Return Value  \n Returns a reference to the next key in the tree.  \n  \n### Remarks  \n Updates the current position counter, `pos`. If there are no more entries in the tree, the position counter is set to NULL.  \n  \n##  <a name=\"crbtree__getnextvalue\"></a>  CRBTree::GetNextValue  \n Call this method to get the value of an element stored in the tree and advance the position to the next element.  \n  \n```\nconst V& GetNextValue(POSITION& pos) const throw();\nV& GetNextValue(POSITION& pos) throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter).  \n  \n### Return Value  \n Returns a reference to the next value in the tree.  \n  \n### Remarks  \n Updates the current position counter, `pos`. If there are no more entries in the tree, the position counter is set to NULL.  \n  \n##  <a name=\"crbtree__getprev\"></a>  CRBTree::GetPrev  \n Call this method to obtain a pointer to an element stored in the `CRBTree` object, and then update the position to the previous element.  \n  \n```\nconst CPair* GetPrev(POSITION& pos) const throw();\nCPair* GetPrev(POSITION& pos) throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter).  \n  \n### Return Value  \n Returns a pointer to the previous [CPair](#crbtree__cpair_class) value stored in the tree.  \n  \n### Remarks  \n Updates the current position counter, `pos`. If there are no more entries in the tree, the position counter is set to NULL.  \n  \n##  <a name=\"crbtree__gettailposition\"></a>  CRBTree::GetTailPosition  \n Call this method to get the position value for the element at the tail of the tree.  \n  \n```\nPOSITION GetTailPosition() const throw();\n```  \n  \n### Return Value  \n Returns the position value for the element at the tail of the tree.  \n  \n### Remarks  \n The value returned by `GetTailPosition` can be used with methods such as [CRBTree::GetKeyAt](#crbtree__getkeyat) or [CRBTree::GetPrev](#crbtree__getprev) to traverse the tree and retrieve values.  \n  \n##  <a name=\"crbtree__getvalueat\"></a>  CRBTree::GetValueAt  \n Call this method to retrieve the value stored at a given position in the `CRBTree` object.  \n  \n```\nconst V& GetValueAt(POSITION   pos) const throw();\nV& GetValueAt(POSITION   pos) throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter).  \n  \n### Return Value  \n Returns a reference to the value stored at the given position in the `CRBTree` object.  \n  \n##  <a name=\"crbtree__isempty\"></a>  CRBTree::IsEmpty  \n Call this method to test for an empty tree object.  \n  \n```\nbool IsEmpty() const throw();\n```  \n  \n### Return Value  \n Returns **true** if the tree is empty, **false** otherwise.  \n  \n##  <a name=\"crbtree__kinargtype\"></a>  CRBTree::KINARGTYPE  \n Type used when a key is passed as an input argument.  \n  \n```\ntypedef KTraits::INARGTYPE KINARGTYPE;\n```  \n  \n##  <a name=\"crbtree__koutargtype\"></a>  CRBTree::KOUTARGTYPE  \n Type used when a key is returned as an output argument.  \n  \n```\ntypedef KTraits::OUTARGTYPE KOUTARGTYPE;\n```  \n  \n##  <a name=\"crbtree__removeall\"></a>  CRBTree::RemoveAll  \n Call this method to remove all elements from the `CRBTree` object.  \n  \n```\nvoid RemoveAll() throw();\n```  \n  \n### Remarks  \n Clears out the `CRBTree` object, freeing the memory used to store the elements.  \n  \n##  <a name=\"crbtree__removeat\"></a>  CRBTree::RemoveAt  \n Call this method to remove the element at the given position in the **CRBTree** object.  \n  \n```\nvoid RemoveAt(POSITION   pos) throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter).  \n  \n### Remarks  \n Removes the key/value pair stored at the specified position. The memory used to store the element is freed. The POSITION referenced by `pos` becomes invalid, and while the POSITION of any other elements in the tree remains valid, they do not necessarily retain the same order.  \n  \n##  <a name=\"crbtree__setvalueat\"></a>  CRBTree::SetValueAt  \n Call this method to change the value stored at a given position in the `CRBTree` object.  \n  \n```\nvoid SetValueAt(\n    POSITION pos,\n    VINARGTYPE value);\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to methods such as [CRBTree::GetHeadPosition](#crbtree__getheadposition) or [CRBTree::FindFirstKeyAfter](#crbtree__findfirstkeyafter).  \n  \n *value*  \n The value to add to the `CRBTree` object.  \n  \n### Remarks  \n Changes the value element stored at the given position in the `CRBTree` object.  \n  \n##  <a name=\"crbtree__vinargtype\"></a>  CRBTree::VINARGTYPE  \n Type used when a value is passed as an input argument.  \n  \n```\ntypedef VTraits::INARGTYPE VINARGTYPE;\n```  \n  \n##  <a name=\"crbtree__voutargtype\"></a>  CRBTree::VOUTARGTYPE  \n Type used when a value is passed as an output argument.  \n  \n```\ntypedef VTraits::OUTARGTYPE VOUTARGTYPE;\n```  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)\n"}