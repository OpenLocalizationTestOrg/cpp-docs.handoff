{"nodes":[{"pos":[12,40],"content":"timer Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"timer Class | Microsoft Docs","pos":[0,28]}]},{"pos":[607,618],"content":"timer Class","linkify":"timer Class","nodes":[{"content":"timer Class","pos":[0,11]}]},{"pos":[619,789],"content":"A <ph id=\"ph1\">`timer`</ph> messaging block is a single-target <ph id=\"ph2\">`source_block`</ph> capable of sending a message to its target after a specified time period has elapsed or at specific intervals.","source":"A `timer` messaging block is a single-target `source_block` capable of sending a message to its target after a specified time period has elapsed or at specific intervals."},{"pos":[798,804],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[952,962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The payload type of the output messages of this block.","pos":[973,1027]},{"pos":[1036,1043],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1053,1072],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1079,1083]},{"content":"Description","pos":[1084,1095]},{"pos":[1133,1166],"content":"<bpt id=\"p1\">[</bpt>timer::timer Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[timer::timer Constructor](#ctor)"},{"content":"Overloaded.","pos":[1167,1178]},{"content":"Constructs a <ph id=\"ph1\">`timer`</ph> messaging block that will fire a given message after a specified interval.","pos":[1179,1274],"source":" Constructs a `timer` messaging block that will fire a given message after a specified interval."},{"pos":[1279,1312],"content":"<bpt id=\"p1\">[</bpt>timer::~timer Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[timer::~timer Destructor](#dtor)"},{"pos":[1313,1348],"content":"Destroys a <ph id=\"ph1\">`timer`</ph> messaging block.","source":"Destroys a `timer` messaging block."},{"pos":[1359,1373],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1380,1384]},{"content":"Description","pos":[1385,1396]},{"pos":[1434,1463],"content":"<bpt id=\"p1\">[</bpt>timer::pause Method<ept id=\"p1\">](#pause)</ept>","source":"[timer::pause Method](#pause)"},{"content":"Stops the <ph id=\"ph1\">`timer`</ph> messaging block.","pos":[1464,1498],"source":"Stops the `timer` messaging block."},{"content":"If it is a repeating <ph id=\"ph1\">`timer`</ph> messaging block, it can be restarted with a subsequent <ph id=\"ph2\">`start()`</ph> call.","pos":[1499,1598],"source":" If it is a repeating `timer` messaging block, it can be restarted with a subsequent `start()` call."},{"content":"For non-repeating timers, this has the same effect as a <ph id=\"ph1\">`stop`</ph> call.","pos":[1599,1667],"source":" For non-repeating timers, this has the same effect as a `stop` call."},{"pos":[1672,1701],"content":"<bpt id=\"p1\">[</bpt>timer::start Method<ept id=\"p1\">](#start)</ept>","source":"[timer::start Method](#start)"},{"content":"Starts the <ph id=\"ph1\">`timer`</ph> messaging block.","pos":[1702,1737],"source":"Starts the `timer` messaging block."},{"content":"The specified number of milliseconds after this is called, the specified value will be propagated downstream as a <ph id=\"ph1\">`message`</ph>.","pos":[1738,1862],"source":" The specified number of milliseconds after this is called, the specified value will be propagated downstream as a `message`."},{"pos":[1867,1894],"content":"<bpt id=\"p1\">[</bpt>timer::stop Method<ept id=\"p1\">](#stop)</ept>","source":"[timer::stop Method](#stop)"},{"pos":[1895,1929],"content":"Stops the <ph id=\"ph1\">`timer`</ph> messaging block.","source":"Stops the `timer` messaging block."},{"pos":[1940,1957],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[1964,1968]},{"content":"Description","pos":[1969,1980]},{"pos":[2018,2065],"content":"<bpt id=\"p1\">[</bpt>timer::accept_message Method<ept id=\"p1\">](#accept_message)</ept>","source":"[timer::accept_message Method](#accept_message)"},{"pos":[2066,2171],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`timer`</ph> messaging block, transferring ownership to the caller.","source":"Accepts a message that was offered by this `timer` messaging block, transferring ownership to the caller."},{"pos":[2176,2225],"content":"<bpt id=\"p1\">[</bpt>timer::consume_message Method<ept id=\"p1\">](#consume_message)</ept>","source":"[timer::consume_message Method](#consume_message)"},{"pos":[2226,2344],"content":"Consumes a message previously offered by the <ph id=\"ph1\">`timer`</ph> and reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by the `timer` and reserved by the target, transferring ownership to the caller."},{"pos":[2349,2416],"content":"<bpt id=\"p1\">[</bpt>timer::link_target_notification Method<ept id=\"p1\">](#link_target_notification)</ept>","source":"[timer::link_target_notification Method](#link_target_notification)"},{"pos":[2417,2508],"content":"A callback that notifies that a new target has been linked to this <ph id=\"ph1\">`timer`</ph> messaging block.","source":"A callback that notifies that a new target has been linked to this `timer` messaging block."},{"pos":[2513,2580],"content":"<bpt id=\"p1\">[</bpt>timer::propagate_to_any_targets Method<ept id=\"p1\">](#propagate_to_any_targets)</ept>","source":"[timer::propagate_to_any_targets Method](#propagate_to_any_targets)"},{"pos":[2581,2667],"content":"Tries to offer the message produced by the <ph id=\"ph1\">`timer`</ph> block to all of the linked targets.","source":"Tries to offer the message produced by the `timer` block to all of the linked targets."},{"pos":[2672,2721],"content":"<bpt id=\"p1\">[</bpt>timer::release_message Method<ept id=\"p1\">](#release_message)</ept>","source":"[timer::release_message Method](#release_message)"},{"content":"Releases a previous message reservation.","pos":[2722,2762]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::release_message<ept id=\"p1\">](source-block-class.md#release_message)</ept>.)","pos":[2763,2846],"source":" (Overrides [source_block::release_message](source-block-class.md#release_message).)"},{"pos":[2851,2900],"content":"<bpt id=\"p1\">[</bpt>timer::reserve_message Method<ept id=\"p1\">](#reserve_message)</ept>","source":"[timer::reserve_message Method](#reserve_message)"},{"content":"Reserves a message previously offered by this <ph id=\"ph1\">`timer`</ph> messaging block.","pos":[2901,2971],"source":"Reserves a message previously offered by this `timer` messaging block."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::reserve_message<ept id=\"p1\">](source-block-class.md#reserve_message)</ept>.)","pos":[2972,3055],"source":" (Overrides [source_block::reserve_message](source-block-class.md#reserve_message).)"},{"pos":[3060,3115],"content":"<bpt id=\"p1\">[</bpt>timer::resume_propagation Method<ept id=\"p1\">](#resume_propagation)</ept>","source":"[timer::resume_propagation Method](#resume_propagation)"},{"content":"Resumes propagation after a reservation has been released.","pos":[3116,3174]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::resume_propagation<ept id=\"p1\">](source-block-class.md#resume_propagation)</ept>.)","pos":[3175,3264],"source":" (Overrides [source_block::resume_propagation](source-block-class.md#resume_propagation).)"},{"pos":[3274,3281],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3285,3398],"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Message Blocks<ept id=\"p1\">](../../../parallel/concrt/asynchronous-message-blocks.md)</ept>.","source":"For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md)."},{"pos":[3407,3428],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3432,3459],"content":"<bpt id=\"p1\">[</bpt>ISource<ept id=\"p1\">](isource-class.md)</ept>","source":"[ISource](isource-class.md)"},{"pos":[3466,3503],"content":"<bpt id=\"p1\">[</bpt>source_block<ept id=\"p1\">](source-block-class.md)</ept>","source":"[source_block](source-block-class.md)"},{"pos":[3526,3538],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3542,3562],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[3569,3595],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[3605,3664],"content":"<bpt id=\"p1\">&lt;a name=\"accept_message\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::accept_message Method","linkify":"<a name=\"accept_message\"></a>  timer::accept_message Method","source":"<a name=\"accept_message\"></a>  timer::accept_message Method"},{"pos":[3668,3773],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`timer`</ph> messaging block, transferring ownership to the caller.","source":"Accepts a message that was offered by this `timer` messaging block, transferring ownership to the caller."},{"pos":[3864,3874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the offered <ph id=\"ph2\">`message`</ph> object.","pos":[3890,3952],"source":" The `runtime_object_identity` of the offered `message` object."},{"pos":[3962,3974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3978,4049],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"pos":[4059,4120],"content":"<bpt id=\"p1\">&lt;a name=\"consume_message\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::consume_message Method","linkify":"<a name=\"consume_message\"></a>  timer::consume_message Method","source":"<a name=\"consume_message\"></a>  timer::consume_message Method"},{"pos":[4124,4242],"content":"Consumes a message previously offered by the <ph id=\"ph1\">`timer`</ph> and reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by the `timer` and reserved by the target, transferring ownership to the caller."},{"pos":[4334,4344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being consumed.","pos":[4360,4429],"source":" The `runtime_object_identity` of the `message` object being consumed."},{"pos":[4439,4451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4455,4526],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"pos":[4536,4543],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4547,4614],"content":"Similar to <ph id=\"ph1\">`accept`</ph>, but is always preceded by a call to <ph id=\"ph2\">`reserve`</ph>.","source":"Similar to `accept`, but is always preceded by a call to `reserve`."},{"pos":[4624,4703],"content":"<bpt id=\"p1\">&lt;a name=\"link_target_notification\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::link_target_notification Method","linkify":"<a name=\"link_target_notification\"></a>  timer::link_target_notification Method","source":"<a name=\"link_target_notification\"></a>  timer::link_target_notification Method"},{"pos":[4707,4798],"content":"A callback that notifies that a new target has been linked to this <ph id=\"ph1\">`timer`</ph> messaging block.","source":"A callback that notifies that a new target has been linked to this `timer` messaging block."},{"pos":[4890,4900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the newly linked target.","pos":[4918,4955]},{"pos":[4965,5006],"content":"<bpt id=\"p1\">&lt;a name=\"pause\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::pause Method","linkify":"<a name=\"pause\"></a>  timer::pause Method","source":"<a name=\"pause\"></a>  timer::pause Method"},{"content":"Stops the <ph id=\"ph1\">`timer`</ph> messaging block.","pos":[5010,5044],"source":"Stops the `timer` messaging block."},{"content":"If it is a repeating <ph id=\"ph1\">`timer`</ph> messaging block, it can be restarted with a subsequent <ph id=\"ph2\">`start()`</ph> call.","pos":[5045,5144],"source":" If it is a repeating `timer` messaging block, it can be restarted with a subsequent `start()` call."},{"content":"For non-repeating timers, this has the same effect as a <ph id=\"ph1\">`stop`</ph> call.","pos":[5145,5213],"source":" For non-repeating timers, this has the same effect as a `stop` call."},{"pos":[5250,5329],"content":"<bpt id=\"p1\">&lt;a name=\"propagate_to_any_targets\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::propagate_to_any_targets Method","linkify":"<a name=\"propagate_to_any_targets\"></a>  timer::propagate_to_any_targets Method","source":"<a name=\"propagate_to_any_targets\"></a>  timer::propagate_to_any_targets Method"},{"pos":[5333,5419],"content":"Tries to offer the message produced by the <ph id=\"ph1\">`timer`</ph> block to all of the linked targets.","source":"Tries to offer the message produced by the `timer` block to all of the linked targets."},{"pos":[5507,5568],"content":"<bpt id=\"p1\">&lt;a name=\"release_message\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::release_message Method","linkify":"<a name=\"release_message\"></a>  timer::release_message Method","source":"<a name=\"release_message\"></a>  timer::release_message Method"},{"content":"Releases a previous message reservation.","pos":[5572,5612]},{"pos":[5697,5707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being released.","pos":[5723,5792],"source":" The `runtime_object_identity` of the `message` object being released."},{"pos":[5802,5863],"content":"<bpt id=\"p1\">&lt;a name=\"reserve_message\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::reserve_message Method","linkify":"<a name=\"reserve_message\"></a>  timer::reserve_message Method","source":"<a name=\"reserve_message\"></a>  timer::reserve_message Method"},{"pos":[5867,5937],"content":"Reserves a message previously offered by this <ph id=\"ph1\">`timer`</ph> messaging block.","source":"Reserves a message previously offered by this `timer` messaging block."},{"pos":[6022,6032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being reserved.","pos":[6048,6117],"source":" The `runtime_object_identity` of the `message` object being reserved."},{"pos":[6127,6139],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6143,6210],"content":"<ph id=\"ph1\">`true`</ph> if the message was successfully reserved, <ph id=\"ph2\">`false`</ph> otherwise.","source":"`true` if the message was successfully reserved, `false` otherwise."},{"pos":[6220,6227],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6231,6376],"content":"After <ph id=\"ph1\">`reserve`</ph> is called, if it returns <ph id=\"ph2\">`true`</ph>, either <ph id=\"ph3\">`consume`</ph> or <ph id=\"ph4\">`release`</ph> must be called to either take or release ownership of the message.","source":"After `reserve` is called, if it returns `true`, either `consume` or `release` must be called to either take or release ownership of the message."},{"pos":[6386,6453],"content":"<bpt id=\"p1\">&lt;a name=\"resume_propagation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::resume_propagation Method","linkify":"<a name=\"resume_propagation\"></a>  timer::resume_propagation Method","source":"<a name=\"resume_propagation\"></a>  timer::resume_propagation Method"},{"content":"Resumes propagation after a reservation has been released.","pos":[6457,6515]},{"pos":[6573,6614],"content":"<bpt id=\"p1\">&lt;a name=\"start\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::start Method","linkify":"<a name=\"start\"></a>  timer::start Method","source":"<a name=\"start\"></a>  timer::start Method"},{"content":"Starts the <ph id=\"ph1\">`timer`</ph> messaging block.","pos":[6618,6653],"source":"Starts the `timer` messaging block."},{"content":"The specified number of milliseconds after this is called, the specified value will be propagated downstream as a <ph id=\"ph1\">`message`</ph>.","pos":[6654,6778],"source":" The specified number of milliseconds after this is called, the specified value will be propagated downstream as a `message`."},{"pos":[6815,6854],"content":"<bpt id=\"p1\">&lt;a name=\"stop\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::stop Method","linkify":"<a name=\"stop\"></a>  timer::stop Method","source":"<a name=\"stop\"></a>  timer::stop Method"},{"pos":[6858,6892],"content":"Stops the <ph id=\"ph1\">`timer`</ph> messaging block.","source":"Stops the `timer` messaging block."},{"pos":[6928,6973],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::timer Constructor","linkify":"<a name=\"ctor\"></a>  timer::timer Constructor","source":"<a name=\"ctor\"></a>  timer::timer Constructor"},{"pos":[6977,7072],"content":"Constructs a <ph id=\"ph1\">`timer`</ph> messaging block that will fire a given message after a specified interval.","source":"Constructs a `timer` messaging block that will fire a given message after a specified interval."},{"pos":[7519,7529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of milliseconds that must elapse after the call to start for the specified message to be propagated downstream.","pos":[7542,7664]},{"content":"The value which will be propagated downstream when the timer elapses.","pos":[7682,7751]},{"content":"The target to which the timer will propagate its message.","pos":[7772,7829]},{"content":"If true, indicates that the timer will fire periodically every <ph id=\"ph1\">`_Ms`</ph> milliseconds.","pos":[7852,7934],"source":" If true, indicates that the timer will fire periodically every `_Ms` milliseconds."},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object within which the propagation task for the <ph id=\"ph2\">`timer`</ph> messaging block is scheduled is scheduled.","pos":[7957,8072],"source":" The `Scheduler` object within which the propagation task for the `timer` messaging block is scheduled is scheduled."},{"content":"The <ph id=\"ph1\">`ScheduleGroup`</ph> object within which the propagation task for the <ph id=\"ph2\">`timer`</ph> messaging block is scheduled.","pos":[8099,8205],"source":" The `ScheduleGroup` object within which the propagation task for the `timer` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object used is implied by the schedule group.","pos":[8206,8267],"source":" The `Scheduler` object used is implied by the schedule group."},{"pos":[8277,8284],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8288,8397],"content":"The runtime uses the default scheduler if you do not specify the <ph id=\"ph1\">`_Scheduler`</ph> or <ph id=\"ph2\">`_ScheduleGroup`</ph> parameters.","source":"The runtime uses the default scheduler if you do not specify the `_Scheduler` or `_ScheduleGroup` parameters."},{"pos":[8407,8452],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  timer::~timer Destructor","linkify":"<a name=\"dtor\"></a>  timer::~timer Destructor","source":"<a name=\"dtor\"></a>  timer::~timer Destructor"},{"pos":[8456,8491],"content":"Destroys a <ph id=\"ph1\">`timer`</ph> messaging block.","source":"Destroys a `timer` messaging block."},{"pos":[8523,8531],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[8535,8584],"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept>","source":"[concurrency Namespace](concurrency-namespace.md)"}],"content":"---\ntitle: \"timer Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::timer\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"timer class\"\nms.assetid: 4f4dea51-de9f-40f9-93f5-dd724c567b49\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# timer Class\nA `timer` messaging block is a single-target `source_block` capable of sending a message to its target after a specified time period has elapsed or at specific intervals.  \n  \n## Syntax  \n  \n```\ntemplate<class T>\nclass timer : public Concurrency::details::_Timer, public source_block<single_link_registry<ITarget<T>>>;\n```  \n  \n#### Parameters  \n `T`  \n The payload type of the output messages of this block.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[timer::timer Constructor](#ctor)|Overloaded. Constructs a `timer` messaging block that will fire a given message after a specified interval.|  \n|[timer::~timer Destructor](#dtor)|Destroys a `timer` messaging block.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[timer::pause Method](#pause)|Stops the `timer` messaging block. If it is a repeating `timer` messaging block, it can be restarted with a subsequent `start()` call. For non-repeating timers, this has the same effect as a `stop` call.|  \n|[timer::start Method](#start)|Starts the `timer` messaging block. The specified number of milliseconds after this is called, the specified value will be propagated downstream as a `message`.|  \n|[timer::stop Method](#stop)|Stops the `timer` messaging block.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[timer::accept_message Method](#accept_message)|Accepts a message that was offered by this `timer` messaging block, transferring ownership to the caller.|  \n|[timer::consume_message Method](#consume_message)|Consumes a message previously offered by the `timer` and reserved by the target, transferring ownership to the caller.|  \n|[timer::link_target_notification Method](#link_target_notification)|A callback that notifies that a new target has been linked to this `timer` messaging block.|  \n|[timer::propagate_to_any_targets Method](#propagate_to_any_targets)|Tries to offer the message produced by the `timer` block to all of the linked targets.|  \n|[timer::release_message Method](#release_message)|Releases a previous message reservation. (Overrides [source_block::release_message](source-block-class.md#release_message).)|  \n|[timer::reserve_message Method](#reserve_message)|Reserves a message previously offered by this `timer` messaging block. (Overrides [source_block::reserve_message](source-block-class.md#reserve_message).)|  \n|[timer::resume_propagation Method](#resume_propagation)|Resumes propagation after a reservation has been released. (Overrides [source_block::resume_propagation](source-block-class.md#resume_propagation).)|  \n  \n## Remarks  \n For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md).  \n  \n## Inheritance Hierarchy  \n [ISource](isource-class.md)  \n  \n [source_block](source-block-class.md)  \n  \n `timer`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"accept_message\"></a>  timer::accept_message Method  \n Accepts a message that was offered by this `timer` messaging block, transferring ownership to the caller.  \n  \n```\nvirtual message<T>* accept_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the offered `message` object.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n##  <a name=\"consume_message\"></a>  timer::consume_message Method  \n Consumes a message previously offered by the `timer` and reserved by the target, transferring ownership to the caller.  \n  \n```\nvirtual message<T>* consume_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being consumed.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n### Remarks  \n Similar to `accept`, but is always preceded by a call to `reserve`.  \n  \n##  <a name=\"link_target_notification\"></a>  timer::link_target_notification Method  \n A callback that notifies that a new target has been linked to this `timer` messaging block.  \n  \n```\nvirtual void link_target_notification(_Inout_ ITarget<T>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the newly linked target.  \n  \n##  <a name=\"pause\"></a>  timer::pause Method  \n Stops the `timer` messaging block. If it is a repeating `timer` messaging block, it can be restarted with a subsequent `start()` call. For non-repeating timers, this has the same effect as a `stop` call.  \n  \n```\nvoid pause();\n```  \n  \n##  <a name=\"propagate_to_any_targets\"></a>  timer::propagate_to_any_targets Method  \n Tries to offer the message produced by the `timer` block to all of the linked targets.  \n  \n```\nvirtual void propagate_to_any_targets(_Inout_opt_ message<T> *);\n```  \n  \n##  <a name=\"release_message\"></a>  timer::release_message Method  \n Releases a previous message reservation.  \n  \n```\nvirtual void release_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being released.  \n  \n##  <a name=\"reserve_message\"></a>  timer::reserve_message Method  \n Reserves a message previously offered by this `timer` messaging block.  \n  \n```\nvirtual bool reserve_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being reserved.  \n  \n### Return Value  \n `true` if the message was successfully reserved, `false` otherwise.  \n  \n### Remarks  \n After `reserve` is called, if it returns `true`, either `consume` or `release` must be called to either take or release ownership of the message.  \n  \n##  <a name=\"resume_propagation\"></a>  timer::resume_propagation Method  \n Resumes propagation after a reservation has been released.  \n  \n```\nvirtual void resume_propagation();\n```  \n  \n##  <a name=\"start\"></a>  timer::start Method  \n Starts the `timer` messaging block. The specified number of milliseconds after this is called, the specified value will be propagated downstream as a `message`.  \n  \n```\nvoid start();\n```  \n  \n##  <a name=\"stop\"></a>  timer::stop Method  \n Stops the `timer` messaging block.  \n  \n```\nvoid stop();\n```  \n  \n##  <a name=\"ctor\"></a>  timer::timer Constructor  \n Constructs a `timer` messaging block that will fire a given message after a specified interval.  \n  \n```\ntimer(\n    unsigned int _Ms,\n    T const& value,\n    ITarget<T>* _PTarget = NULL,\n    bool _Repeating = false);\n\ntimer(\n    Scheduler& _Scheduler,\n    unsigned int _Ms,\n    T const& value,\n    _Inout_opt_ ITarget<T>* _PTarget = NULL,\n    bool _Repeating = false);\n\ntimer(\n    ScheduleGroup& _ScheduleGroup,\n    unsigned int _Ms,\n    T const& value,\n    _Inout_opt_ ITarget<T>* _PTarget = NULL,\n    bool _Repeating = false);\n```  \n  \n### Parameters  \n `_Ms`  \n The number of milliseconds that must elapse after the call to start for the specified message to be propagated downstream.  \n  \n `value`  \n The value which will be propagated downstream when the timer elapses.  \n  \n `_PTarget`  \n The target to which the timer will propagate its message.  \n  \n `_Repeating`  \n If true, indicates that the timer will fire periodically every `_Ms` milliseconds.  \n  \n `_Scheduler`  \n The `Scheduler` object within which the propagation task for the `timer` messaging block is scheduled is scheduled.  \n  \n `_ScheduleGroup`  \n The `ScheduleGroup` object within which the propagation task for the `timer` messaging block is scheduled. The `Scheduler` object used is implied by the schedule group.  \n  \n### Remarks  \n The runtime uses the default scheduler if you do not specify the `_Scheduler` or `_ScheduleGroup` parameters.  \n  \n##  <a name=\"dtor\"></a>  timer::~timer Destructor  \n Destroys a `timer` messaging block.  \n  \n```\n~timer();\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}