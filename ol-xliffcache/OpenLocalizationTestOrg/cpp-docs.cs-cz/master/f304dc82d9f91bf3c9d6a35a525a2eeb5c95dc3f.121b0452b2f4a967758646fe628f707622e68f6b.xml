{"nodes":[{"pos":[12,85],"content":"_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l | Microsoft Docs","pos":[0,73]}]},{"pos":[1479,1535],"content":"_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l","linkify":"_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l","nodes":[{"content":"_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l","pos":[0,56]}]},{"content":"Write formatted output using a pointer to a list of arguments, with the ability to specify the order that arguments are used in the format string.","pos":[1536,1682]},{"pos":[1691,1697],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2135,2145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[2161,2189],"source":" Pointer to `FILE` structure."},{"content":"Format specification.","pos":[2208,2229]},{"content":"Pointer to list of arguments.","pos":[2248,2277]},{"content":"The locale to use.","pos":[2296,2314]},{"pos":[2321,2456],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"pos":[2465,2477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2481,2647],"content":"<ph id=\"ph1\">`_vfprintf_p`</ph> and <ph id=\"ph2\">`_vfwprintf_p`</ph> return the number of characters written, not including the terminating null character, or a negative value if an output error occurs.","source":"`_vfprintf_p` and `_vfwprintf_p` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs."},{"pos":[2656,2663],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each of these functions takes a pointer to an argument list, then formats and writes the given data to <ph id=\"ph1\">`stream`</ph>.","pos":[2667,2779],"source":"Each of these functions takes a pointer to an argument list, then formats and writes the given data to `stream`."},{"content":"These functions differ from the <ph id=\"ph1\">`_vfprint_s`</ph> and <ph id=\"ph2\">`_vfwprint_s`</ph> versions only in that they support positional parameters.","pos":[2780,2900],"source":" These functions differ from the `_vfprint_s` and `_vfwprint_s` versions only in that they support positional parameters."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>printf_p Positional Parameters<ept id=\"p1\">](../../c-runtime-library/printf-p-positional-parameters.md)</ept>.","pos":[2901,3019],"source":" For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)."},{"content":"<ph id=\"ph1\">`_vfwprintf_p`</ph> is the wide-character version of <ph id=\"ph2\">`_vprintf_p`</ph>; the two functions behave identically if the stream is opened in ANSI mode.","pos":[3026,3162],"source":"`_vfwprintf_p` is the wide-character version of `_vprintf_p`; the two functions behave identically if the stream is opened in ANSI mode."},{"content":"<ph id=\"ph1\">`_vprintf_p`</ph> doesn't currently support output into a UNICODE stream.","pos":[3163,3231],"source":"`_vprintf_p` doesn't currently support output into a UNICODE stream."},{"pos":[3238,3394],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[3402,3582],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[13,178],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[1,51],"source":" Ensure that `format` is not a user-defined string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[52,165],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"content":"If either <ph id=\"ph1\">`stream`</ph> or <ph id=\"ph2\">`format`</ph> is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3589,3833],"source":"If either `stream` or `format` is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[3834,3923],"source":" If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`."},{"pos":[3933,3962],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[3969,3984]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3985,4013],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4014,4027]},{"content":"_UNICODE defined","pos":[4028,4044]},{"pos":[4294,4306],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4313,4320]},{"content":"Required header","pos":[4321,4336]},{"content":"Optional headers","pos":[4337,4353]},{"pos":[4421,4451],"content":"<ph id=\"ph1\">`_vfprintf_p`</ph>, <ph id=\"ph2\">`_vfprintf_p_l`</ph>","source":"`_vfprintf_p`, `_vfprintf_p_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; and <ph id=\"ph2\">\\&lt;</ph>stdarg.h&gt;","pos":[4452,4478],"source":"\\<stdio.h> and \\<stdarg.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>varargs.h&gt;*","pos":[4479,4492],"source":"\\<varargs.h>*"},{"pos":[4497,4529],"content":"<ph id=\"ph1\">`_vfwprintf_p`</ph>, <ph id=\"ph2\">`_vfwprintf_p_l`</ph>","source":"`_vfwprintf_p`, `_vfwprintf_p_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;, and <ph id=\"ph3\">\\&lt;</ph>stdarg.h&gt;","pos":[4530,4571],"source":"\\<stdio.h> or \\<wchar.h>, and \\<stdarg.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>varargs.h&gt;*","pos":[4572,4585],"source":"\\<varargs.h>*"},{"content":"<ph id=\"ph1\">\\*</ph> Required for UNIX V compatibility.","pos":[4593,4630],"source":"\\* Required for UNIX V compatibility."},{"pos":[4637,4761],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4770,4795],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[4799,4814]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4815,4862],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4863,4988],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[4997,5005],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5009,5061],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>vprintf Functions<ept id=\"p1\">](../../c-runtime-library/vprintf-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[5064,5131],"source":" [vprintf Functions](../../c-runtime-library/vprintf-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fprintf, _fprintf_l, fwprintf, _fwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5134,5256],"source":" [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>printf, _printf_l, wprintf, _wprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5259,5373],"source":" [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)</ept><ph id=\"ph2\"> </ph>","pos":[5376,5524],"source":" [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>va_arg, va_copy, va_end, va_start<ept id=\"p1\">](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)</ept><ph id=\"ph1\"> </ph>","pos":[5527,5633],"source":" [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md) "},{"content":"<bpt id=\"p1\"> [</bpt>printf_p Positional Parameters<ept id=\"p1\">](../../c-runtime-library/printf-p-positional-parameters.md)</ept><ph id=\"ph1\"> </ph>","pos":[5636,5729],"source":" [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-p-fprintf-p-l-fwprintf-p-fwprintf-p-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5732,5872],"source":" [_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l](../../c-runtime-library/reference/fprintf-p-fprintf-p-l-fwprintf-p-fwprintf-p-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l<ept id=\"p1\">](../../c-runtime-library/reference/vsprintf-p-vsprintf-p-l-vswprintf-p-vswprintf-p-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5875,6023],"source":" [_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l](../../c-runtime-library/reference/vsprintf-p-vsprintf-p-l-vswprintf-p-vswprintf-p-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-p-sprintf-p-l-swprintf-p-swprintf-p-l.md)</ept>","pos":[6026,6165],"source":" [_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l](../../c-runtime-library/reference/sprintf-p-sprintf-p-l-swprintf-p-swprintf-p-l.md)"}],"content":"---\ntitle: \"_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_vfprintf_p\"\n  - \"_vfwprintf_p\"\n  - \"_vfprintf_p_l\"\n  - \"_vfwprintf_p_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_vfwprintf_p_l\"\n  - \"_vfprintf_p\"\n  - \"vfwprintf_p_l\"\n  - \"vfwprintf_p\"\n  - \"vfprintf_p_l\"\n  - \"_vfwprintf_p\"\n  - \"_vftprintf_p\"\n  - \"_vfprintf_p_l\"\n  - \"vfprintf_p\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"vfprintf_p_l function\"\n  - \"_vftprintf_p_l function\"\n  - \"_vfprintf_p function\"\n  - \"vfprintf_p function\"\n  - \"vftprintf_p_l function\"\n  - \"_vfprintf_p_l function\"\n  - \"_vftprintf_p function\"\n  - \"_vfwprintf_p_l function\"\n  - \"vfwprintf_p_l function\"\n  - \"_vfwprintf_p function\"\n  - \"vftprintf_p function\"\n  - \"formatted text [C++]\"\n  - \"vfwprintf_p function\"\nms.assetid: 4d4a0914-4175-4b65-9ca1-037c4ef29147\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l\nWrite formatted output using a pointer to a list of arguments, with the ability to specify the order that arguments are used in the format string.  \n  \n## Syntax  \n  \n```  \nint _vfprintf_p(  \n   FILE *stream,  \n   const char *format,  \n   va_list argptr   \n);  \nint _vfprintf_p_l(  \n   FILE *stream,  \n   const char *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \nint _vfwprintf_p(  \n   FILE *stream,  \n   const wchar_t *format,  \n   va_list argptr   \n);  \nint _vfwprintf_p_l(  \n   FILE *stream,  \n   const wchar_t *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n `format`  \n Format specification.  \n  \n `argptr`  \n Pointer to list of arguments.  \n  \n `locale`  \n The locale to use.  \n  \n For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Return Value  \n `_vfprintf_p` and `_vfwprintf_p` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs.  \n  \n## Remarks  \n Each of these functions takes a pointer to an argument list, then formats and writes the given data to `stream`. These functions differ from the `_vfprint_s` and `_vfwprint_s` versions only in that they support positional parameters. For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md).  \n  \n `_vfwprintf_p` is the wide-character version of `_vprintf_p`; the two functions behave identically if the stream is opened in ANSI mode. `_vprintf_p` doesn't currently support output into a UNICODE stream.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n If either `stream` or `format` is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vftprintf_p`|`_vfprintf_p`|`_vfprintf_p`|`_vfwprintf_p`|  \n|`_vftprintf_p_l`|`_vfprintf_p_l`|`_vfprintf_p_l`|`_vfwprintf_p_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`_vfprintf_p`, `_vfprintf_p_l`|\\<stdio.h> and \\<stdarg.h>|\\<varargs.h>*|  \n|`_vfwprintf_p`, `_vfwprintf_p_l`|\\<stdio.h> or \\<wchar.h>, and \\<stdarg.h>|\\<varargs.h>*|  \n  \n \\* Required for UNIX V compatibility.  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)   \n [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)   \n [_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l](../../c-runtime-library/reference/fprintf-p-fprintf-p-l-fwprintf-p-fwprintf-p-l.md)   \n [_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l](../../c-runtime-library/reference/vsprintf-p-vsprintf-p-l-vswprintf-p-vswprintf-p-l.md)   \n [_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l](../../c-runtime-library/reference/sprintf-p-sprintf-p-l-swprintf-p-swprintf-p-l.md)"}