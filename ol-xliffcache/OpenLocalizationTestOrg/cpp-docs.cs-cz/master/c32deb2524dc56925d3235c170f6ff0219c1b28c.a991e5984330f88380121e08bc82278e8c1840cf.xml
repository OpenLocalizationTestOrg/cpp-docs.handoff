{"nodes":[{"pos":[12,41],"content":"locale Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"locale Class | Microsoft Docs","pos":[0,29]}]},{"content":"locale Class","pos":[651,663]},{"content":"The class that describes a locale object that encapsulates culture-specific information as a set of facets that collectively define a specific localized environment.","pos":[664,829]},{"content":"Syntax","pos":[838,844]},{"content":"Remarks","pos":[884,891]},{"pos":[895,1018],"content":"A facet is a pointer to an object of a class derived from class <bpt id=\"p1\">[</bpt>facet<ept id=\"p1\">](#facet_class)</ept> that has a public object of the form:","source":"A facet is a pointer to an object of a class derived from class [facet](#facet_class) that has a public object of the form:"},{"content":"You can define an open-ended set of these facets.","pos":[1064,1113]},{"content":"You can also construct a locale object that designates an arbitrary number of facets.","pos":[1114,1199]},{"pos":[1206,1369],"content":"Predefined groups of these facets represent the <bpt id=\"p1\">[</bpt>locale categories<ept id=\"p1\">](#locale__category)</ept> traditionally managed in the Standard C Library by the function <ph id=\"ph1\">`setlocale`</ph>.","source":"Predefined groups of these facets represent the [locale categories](#locale__category) traditionally managed in the Standard C Library by the function `setlocale`."},{"content":"Category collate (LC_COLLATE) includes the facets:","pos":[1376,1426]},{"content":"Category ctype (LC_CTYPE) includes the facets:","pos":[1483,1529]},{"content":"Category monetary (LC_MONETARY) includes the facets:","pos":[1725,1777]},{"content":"Category numeric (LC_NUMERIC) includes the facets:","pos":[2099,2149]},{"content":"Category time (LC_TIME) includes the facets:","pos":[2392,2436]},{"content":"Category messages (LC_MESSAGES) includes the facets:","pos":[2646,2698]},{"content":"(The last category is required by Posix, but not the C Standard.)","pos":[2757,2822]},{"content":"Some of these predefined facets are used by the iostreams classes, to control the conversion of numeric values to and from text sequences.","pos":[2829,2967]},{"content":"An object of class locale also stores a locale name as an object of class <bpt id=\"p1\">[</bpt>string<ept id=\"p1\">](../standard-library/string-typedefs.md#string)</ept>.","pos":[2974,3104],"source":"An object of class locale also stores a locale name as an object of class [string](../standard-library/string-typedefs.md#string)."},{"content":"Using an invalid locale name to construct a locale facet or a locale object throws an object of class <bpt id=\"p1\">[</bpt>runtime_error<ept id=\"p1\">](../standard-library/runtime-error-class.md)</ept>.","pos":[3105,3267],"source":" Using an invalid locale name to construct a locale facet or a locale object throws an object of class [runtime_error](../standard-library/runtime-error-class.md)."},{"content":"The stored locale name is <ph id=\"ph1\">`\"*\"`</ph> if the locale object cannot be certain that a C-style locale corresponds exactly to that represented by the object.","pos":[3268,3415],"source":" The stored locale name is `\"*\"` if the locale object cannot be certain that a C-style locale corresponds exactly to that represented by the object."},{"content":"Otherwise, you can establish a matching locale within the Standard C Library, for the locale object <ph id=\"ph1\">`Loc`</ph>, by calling <ph id=\"ph2\">`setlocale`</ph>(LC_ALL <ph id=\"ph3\">`,`</ph> <ph id=\"ph4\">`Loc`</ph>.","pos":[3416,3563],"source":" Otherwise, you can establish a matching locale within the Standard C Library, for the locale object `Loc`, by calling `setlocale`(LC_ALL `,` `Loc`."},{"content":"<bpt id=\"p1\">[</bpt>name<ept id=\"p1\">](#locale__name)</ept><ph id=\"ph1\">`().c_str()`</ph>).","pos":[3564,3599],"source":"[name](#locale__name)`().c_str()`)."},{"content":"In this implementation, you can also call the static member function:","pos":[3606,3675]},{"content":"to construct a locale object that has no facets.","pos":[3720,3768]},{"content":"It is also a transparent locale; if the template functions <bpt id=\"p1\">[</bpt>has_facet<ept id=\"p1\">](../standard-library/locale-functions.md#has_facet)</ept> and <bpt id=\"p2\">[</bpt>use_facet<ept id=\"p2\">](../standard-library/locale-functions.md#use_facet)</ept> cannot find the requested facet in a transparent locale, they consult first the global locale and then, if that is transparent, the classic locale.","pos":[3769,4105],"source":" It is also a transparent locale; if the template functions [has_facet](../standard-library/locale-functions.md#has_facet) and [use_facet](../standard-library/locale-functions.md#use_facet) cannot find the requested facet in a transparent locale, they consult first the global locale and then, if that is transparent, the classic locale."},{"content":"Thus, you can write:","pos":[4106,4126]},{"content":"Subsequent insertions to <bpt id=\"p1\">[</bpt>cout<ept id=\"p1\">](../standard-library/iostream.md#cout)</ept> are mediated by the current state of the global locale.","pos":[4176,4301],"source":"Subsequent insertions to [cout](../standard-library/iostream.md#cout) are mediated by the current state of the global locale."},{"content":"You can even write:","pos":[4302,4321]},{"pos":[4437,4625],"content":"Numeric formatting rules for subsequent insertions to <ph id=\"ph1\">`cout`</ph> remain the same as in the C locale, even as the global locale supplies changing rules for inserting dates and monetary amounts.","source":"Numeric formatting rules for subsequent insertions to `cout` remain the same as in the C locale, even as the global locale supplies changing rules for inserting dates and monetary amounts."},{"content":"Constructors","pos":[4635,4647]},{"content":"locale","pos":[4669,4675]},{"content":"Creates a locale, or a copy of a locale, or a copy of locale where a facet or a category has been replaced by a facet or category from another locale.","pos":[4694,4844]},{"content":"Typedefs","pos":[4855,4863]},{"content":"category","pos":[4885,4893]},{"content":"An integer type that provides bitmask values to denote standard facet families.","pos":[4914,4993]},{"content":"Member Functions","pos":[5004,5020]},{"content":"combine","pos":[5042,5049]},{"content":"Inserts a facet from a specified locale into a target locale.","pos":[5069,5130]},{"content":"name","pos":[5136,5140]},{"content":"Returns the stored locale name.","pos":[5157,5188]},{"content":"Static Functions","pos":[5199,5215]},{"content":"classic","pos":[5237,5244]},{"content":"The static member function returns a locale object that represents the classic C locale.","pos":[5264,5352]},{"content":"global","pos":[5358,5364]},{"content":"Resets the default local for the program.","pos":[5383,5424]},{"content":"Operators","pos":[5435,5444]},{"content":"operator!=","pos":[5466,5476]},{"content":"Tests two locales for inequality.","pos":[5501,5534]},{"content":"operator( )","pos":[5540,5551]},{"pos":[5574,5610],"content":"Compares two <ph id=\"ph1\">`basic_string`</ph> objects.","source":"Compares two `basic_string` objects."},{"content":"operator==","pos":[5616,5626]},{"content":"Tests two locales for equality.","pos":[5653,5684]},{"content":"Classes","pos":[5695,5702]},{"content":"facet","pos":[5724,5729]},{"content":"A class that serves as the base class for all locale facets.","pos":[5745,5805]},{"content":"id","pos":[5811,5813]},{"content":"The member class provides a unique facet identification used as an index for looking up facets in a locale.","pos":[5826,5933]},{"content":"Requirements","pos":[5943,5955]},{"pos":[5959,5980],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[5987,6005],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[6048,6064],"content":"locale::category"},{"content":"An integer type that provides bitmask values to denote standard facet families.","pos":[6068,6147]},{"content":"Remarks","pos":[6498,6505]},{"content":"The type is a synonym for an <ph id=\"ph1\">`int`</ph> type that can represent a group of distinct elements of a bitmask type local to class locale or can be used to represent any of the corresponding C locale categories.","pos":[6509,6710],"source":"The type is a synonym for an `int` type that can represent a group of distinct elements of a bitmask type local to class locale or can be used to represent any of the corresponding C locale categories."},{"content":"The elements are:","pos":[6711,6728]},{"pos":[6736,6791],"content":"<bpt id=\"p1\">**</bpt>collate<ept id=\"p1\">**</ept>, corresponding to the C category LC_COLLATE","source":"**collate**, corresponding to the C category LC_COLLATE"},{"pos":[6799,6850],"content":"<bpt id=\"p1\">**</bpt>ctype<ept id=\"p1\">**</ept>, corresponding to the C category LC_CTYPE","source":"**ctype**, corresponding to the C category LC_CTYPE"},{"pos":[6858,6915],"content":"<bpt id=\"p1\">**</bpt>monetary<ept id=\"p1\">**</ept>, corresponding to the C category LC_MONETARY","source":"**monetary**, corresponding to the C category LC_MONETARY"},{"pos":[6923,6978],"content":"<bpt id=\"p1\">**</bpt>numeric<ept id=\"p1\">**</ept>, corresponding to the C category LC_NUMERIC","source":"**numeric**, corresponding to the C category LC_NUMERIC"},{"pos":[6986,7035],"content":"<bpt id=\"p1\">**</bpt>time<ept id=\"p1\">**</ept>, corresponding to the C category LC_TIME","source":"**time**, corresponding to the C category LC_TIME"},{"pos":[7043,7104],"content":"<bpt id=\"p1\">**</bpt>messages<ept id=\"p1\">**</ept>, corresponding to the Posix category LC_MESSAGES","source":"**messages**, corresponding to the Posix category LC_MESSAGES"},{"content":"In addition, two useful values are:","pos":[7111,7146]},{"pos":[7154,7205],"content":"<bpt id=\"p1\">**</bpt>none<ept id=\"p1\">**</ept>, corresponding to none of the C categories","source":"**none**, corresponding to none of the C categories"},{"pos":[7213,7275],"content":"<bpt id=\"p1\">**</bpt>all<ept id=\"p1\">**</ept>, corresponding to the C union of all categories LC_ALL","source":"**all**, corresponding to the C union of all categories LC_ALL"},{"pos":[7282,7404],"content":"You can represent an arbitrary group of categories by using <ph id=\"ph1\">`OR`</ph> with these constants, as in <bpt id=\"p1\">**</bpt>monetary<ept id=\"p1\">**</ept> &amp;#124; <bpt id=\"p2\">**</bpt>time<ept id=\"p2\">**</ept>.","source":"You can represent an arbitrary group of categories by using `OR` with these constants, as in **monetary** &#124; **time**."},{"pos":[7446,7461],"content":"locale::classic"},{"content":"The static member function returns a locale object that represents the classic C locale.","pos":[7465,7553]},{"content":"Return Value","pos":[7610,7622]},{"content":"A reference to the C locale.","pos":[7626,7654]},{"content":"Remarks","pos":[7664,7671]},{"content":"The classic C locale is the U.S. English ASCII locale within the Standard C Library that is implicitly used in programs that are not internationalized.","pos":[7675,7826]},{"content":"Example","pos":[7836,7843]},{"pos":[8865,8880],"content":"locale::combine"},{"content":"Inserts a facet from a specified locale into a target locale.","pos":[8884,8945]},{"content":"Parameters","pos":[9036,9046]},{"content":"The locale containing the facet to be inserted into the target locale.","pos":[9059,9129]},{"content":"Return Value","pos":[9139,9151]},{"pos":[9155,9272],"content":"The member function returns a locale object that replaces in or adds to <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept> the facet <ph id=\"ph2\">`Facet`</ph> listed in <ph id=\"ph3\">`Loc`</ph>.","source":"The member function returns a locale object that replaces in or adds to **\\*this** the facet `Facet` listed in `Loc`."},{"content":"Example","pos":[9282,9289]},{"pos":[10382,10393],"content":"facet Class"},{"content":"A class that serves as the base class for all locale facets.","pos":[10397,10457]},{"content":"Remarks","pos":[10680,10687]},{"content":"Note that you cannot copy or assign an object of class facet.","pos":[10691,10752]},{"content":"You can construct and destroy objects derived from class <ph id=\"ph1\">`locale::facet`</ph> but not objects of the base class proper.","pos":[10753,10867],"source":" You can construct and destroy objects derived from class `locale::facet` but not objects of the base class proper."},{"content":"Typically, you construct an object <ph id=\"ph1\">`_Myfac`</ph> derived from facet when you construct a locale, as in <bpt id=\"p1\">**</bpt>localeloc<ept id=\"p1\">**</ept>( <ph id=\"ph2\">`locale::classic`</ph>( ), <bpt id=\"p2\">**</bpt>new<ept id=\"p2\">**</ept><ph id=\"ph3\">`_Myfac`</ph>);","pos":[10868,11020],"source":" Typically, you construct an object `_Myfac` derived from facet when you construct a locale, as in **localeloc**( `locale::classic`( ), **new**`_Myfac`);"},{"content":"In such cases, the constructor for the base class facet should have a zero <ph id=\"ph1\">`_Refs`</ph> argument.","pos":[11027,11119],"source":"In such cases, the constructor for the base class facet should have a zero `_Refs` argument."},{"content":"When the object is no longer needed, it is deleted.","pos":[11120,11171]},{"content":"Thus, you supply a nonzero _ <bpt id=\"p1\">*</bpt>Refs<ept id=\"p1\">*</ept> argument only in those rare cases where you take responsibility for the lifetime of the object.","pos":[11172,11303],"source":" Thus, you supply a nonzero _ *Refs* argument only in those rare cases where you take responsibility for the lifetime of the object."},{"pos":[11344,11358],"content":"locale::global"},{"content":"Resets the default locale for the program.","pos":[11362,11404]},{"content":"This affects the global locale for both C and C++.","pos":[11405,11455]},{"content":"Parameters","pos":[11521,11531]},{"content":"The locale to be used as the default locale by the program.","pos":[11544,11603]},{"content":"Return Value","pos":[11613,11625]},{"content":"The previous locale before the default locale was reset.","pos":[11629,11685]},{"content":"Remarks","pos":[11695,11702]},{"content":"At program startup, the global locale is the same as the classic locale.","pos":[11706,11778]},{"content":"The <ph id=\"ph1\">`global()`</ph> function calls <ph id=\"ph2\">`setlocale( LC_ALL, loc.name. c_str())`</ph> to establish a matching locale in the Standard C library.","pos":[11779,11906],"source":" The `global()` function calls `setlocale( LC_ALL, loc.name. c_str())` to establish a matching locale in the Standard C library."},{"content":"Example","pos":[11916,11923]},{"pos":[12572,12580],"content":"id Class"},{"content":"The member class provides a unique facet identification used as an index for looking up facets in a locale.","pos":[12584,12691]},{"pos":[12697,12822],"content":"class id { protected:    id(); private:    id(const id&amp;) // not defined void operator=(const id&amp;)  // not defined    };","source":"class id { protected:    id();\n   private:    id(const id&)\n   // not defined void operator=(const id&)  // not defined    };"},{"content":"Remarks","pos":[12832,12839]},{"content":"The member class describes the static member object required by each unique locale facet.","pos":[12843,12932]},{"content":"Note that you cannot copy or assign an object of class <bpt id=\"p1\">**</bpt>id<ept id=\"p1\">**</ept>.","pos":[12933,12995],"source":" Note that you cannot copy or assign an object of class **id**."},{"pos":[13036,13050],"content":"locale::locale"},{"content":"Creates a locale, or a copy of a locale, or a copy of locale where a facet or a category has been replaced by a facet or category from another locale.","pos":[13054,13204]},{"content":"Parameters","pos":[13561,13571]},{"content":"Name of a locale.","pos":[13588,13605]},{"content":"A locale that is to be copied in constructing the new locale.","pos":[13621,13682]},{"content":"A locale from which to select a category.","pos":[13700,13741]},{"content":"The category to be substituted into the constructed locale.","pos":[13757,13816]},{"content":"The facet to be substituted into the constructed locale.","pos":[13832,13888]},{"content":"Remarks","pos":[13898,13905]},{"content":"The first constructor initializes the object to match the global locale.","pos":[13909,13981]},{"content":"The second and third constructors initialize all the locale categories to have behavior consistent with the locale name <ph id=\"ph1\">`Locname`</ph>.","pos":[13982,14112],"source":" The second and third constructors initialize all the locale categories to have behavior consistent with the locale name `Locname`."},{"content":"The remaining constructors copy <ph id=\"ph1\">`Loc`</ph>, with the exceptions noted:","pos":[14113,14178],"source":" The remaining constructors copy `Loc`, with the exceptions noted:"},{"pos":[14255,14351],"content":"replaces from <ph id=\"ph1\">`Other`</ph> those facets corresponding to a category C for which C &amp; <ph id=\"ph2\">`Cat`</ph> is nonzero.","source":"replaces from `Other` those facets corresponding to a category C for which C & `Cat` is nonzero."},{"pos":[14500,14611],"content":"replaces from <ph id=\"ph1\">`locale(Locname, _All)`</ph> those facets corresponding to a category C for which C &amp; <ph id=\"ph2\">`Cat`</ph>is nonzero.","source":"replaces from `locale(Locname, _All)` those facets corresponding to a category C for which C & `Cat`is nonzero."},{"pos":[14687,14766],"content":"replaces in (or adds to) <ph id=\"ph1\">`Loc`</ph> the facet <ph id=\"ph2\">`Fac`</ph>, if <ph id=\"ph3\">`Fac`</ph> is not a null pointer.","source":"replaces in (or adds to) `Loc` the facet `Fac`, if `Fac` is not a null pointer."},{"pos":[14773,14920],"content":"If a locale name <ph id=\"ph1\">`Locname`</ph> is a null pointer or otherwise invalid, the function throws <bpt id=\"p1\">[</bpt>runtime_error<ept id=\"p1\">](../standard-library/runtime-error-class.md)</ept>.","source":"If a locale name `Locname` is a null pointer or otherwise invalid, the function throws [runtime_error](../standard-library/runtime-error-class.md)."},{"content":"Example","pos":[14930,14937]},{"pos":[16387,16399],"content":"locale::name"},{"content":"Returns the stored locale name.","pos":[16403,16434]},{"content":"Return Value","pos":[16480,16492]},{"content":"A string giving the name of the locale.","pos":[16496,16535]},{"content":"Example","pos":[16545,16552]},{"pos":[17159,17177],"content":"locale::operator!="},{"content":"Tests two locales for inequality.","pos":[17181,17214]},{"content":"Parameters","pos":[17283,17293]},{"content":"One of the locales to be tested for inequality.","pos":[17309,17356]},{"content":"Return Value","pos":[17366,17378]},{"pos":[17382,17520],"content":"A Boolean value that is <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the locales are not copies of the same locale; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the locales are copies of the same locale.","source":"A Boolean value that is **true** if the locales are not copies of the same locale; **false** if the locales are copies of the same locale."},{"content":"Remarks","pos":[17530,17537]},{"content":"Two locales are equal if they are the same locale, if one is a copy of the other, or if they have identical names.","pos":[17541,17655]},{"content":"Example","pos":[17665,17672]},{"pos":[18763,18781],"content":"locale::operator()"},{"pos":[18785,18821],"content":"Compares two <ph id=\"ph1\">`basic_string`</ph> objects.","source":"Compares two `basic_string` objects."},{"content":"Parameters","pos":[19050,19060]},{"content":"The left string.","pos":[19075,19091]},{"content":"The right string.","pos":[19110,19127]},{"content":"Return Value","pos":[19137,19149]},{"content":"The member function returns:","pos":[19153,19181]},{"content":"–1 if the first sequence compares less than the second sequence.","pos":[19191,19255]},{"content":"+1 if the second sequence compares less than the first sequence.","pos":[19265,19329]},{"content":"0 if the sequences are equivalent.","pos":[19339,19373]},{"content":"Remarks","pos":[19383,19390]},{"content":"The member function effectively executes:","pos":[19394,19435]},{"content":"Thus, you can use a locale object as a function object.","pos":[19603,19658]},{"content":"Example","pos":[19668,19675]},{"pos":[20323,20341],"content":"locale::operator=="},{"content":"Tests two locales for equality.","pos":[20345,20376]},{"content":"Parameters","pos":[20445,20455]},{"content":"One of the locales to be tested for equality.","pos":[20471,20516]},{"content":"Return Value","pos":[20526,20538]},{"pos":[20542,20680],"content":"A Boolean value that is <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the locales are copies of the same locale; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the locales are not copies of the same locale.","source":"A Boolean value that is **true** if the locales are copies of the same locale; **false** if the locales are not copies of the same locale."},{"content":"Remarks","pos":[20690,20697]},{"content":"Two locales are equal if they are the same locale, if one is a copy of the other, or if they have identical names.","pos":[20701,20815]},{"content":"Example","pos":[20825,20832]},{"content":"See Also","pos":[21923,21931]},{"content":"Code Pages","pos":[21982,21992]},{"content":"Locale Names, Languages, and Country/Region Strings","pos":[22035,22086]},{"content":"Thread Safety in the C++ Standard Library","pos":[22168,22209]}],"content":"---\ntitle: \"locale Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"xlocale/std::locale\"\n  - \"std::locale\"\n  - \"std.locale\"\n  - \"locale\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"locale class\"\nms.assetid: 7dd6d271-472d-4750-8fb5-ea8f55fbef62\ncaps.latest.revision: 28\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# locale Class\nThe class that describes a locale object that encapsulates culture-specific information as a set of facets that collectively define a specific localized environment.  \n  \n## Syntax  \n  \n```  \nclass locale;  \n```  \n  \n## Remarks  \n A facet is a pointer to an object of a class derived from class [facet](#facet_class) that has a public object of the form:  \n  \n```  \nstatic locale::id id;  \n```  \n  \n You can define an open-ended set of these facets. You can also construct a locale object that designates an arbitrary number of facets.  \n  \n Predefined groups of these facets represent the [locale categories](#locale__category) traditionally managed in the Standard C Library by the function `setlocale`.  \n  \n Category collate (LC_COLLATE) includes the facets:  \n  \n```  \ncollate<char>  \ncollate<wchar_t>  \n```  \n  \n Category ctype (LC_CTYPE) includes the facets:  \n  \n```  \nctype<char>  \nctype<wchar_t>  \ncodecvt<char, char, mbstate_t>  \ncodecvt<wchar_t, char, mbstate_t>  \ncodecvt<char16_t, char, mbstate_t>  \ncodecvt<char32_t, char, mbstate_t>  \n```  \n  \n Category monetary (LC_MONETARY) includes the facets:  \n  \n```  \nmoneypunct<char, false>  \nmoneypunct<wchar_t, false>  \nmoneypunct<char, true>  \nmoneypunct<wchar_t, true>  \nmoney_get<char, istreambuf_iterator<char>>  \nmoney_get<wchar_t, istreambuf_iterator<wchar_t>>  \nmoney_put<char, ostreambuf_iterator<char>>  \nmoney_put<wchar_t, ostreambuf_iterator<wchar_t>>  \n```  \n  \n Category numeric (LC_NUMERIC) includes the facets:  \n  \n```  \nnum_get<char, istreambuf_iterator<char>>  \nnum_get<wchar_t, istreambuf_iterator<wchar_t>>  \nnum_put<char, ostreambuf_iterator<char>>  \nnum_put<wchar_t, ostreambuf_iterator<wchar_t>>  \nnumpunct<char>  \nnumpunct<wchar_t>  \n```  \n  \n Category time (LC_TIME) includes the facets:  \n  \n```  \ntime_get<char, istreambuf_iterator<char>>  \ntime_get<wchar_t, istreambuf_iterator<wchar_t>>  \ntime_put<char, ostreambuf_iterator<char>>  \ntime_put<wchar_t, ostreambuf_iterator<wchar_t>>  \n```  \n  \n Category messages (LC_MESSAGES) includes the facets:  \n  \n```  \nmessages<char>  \nmessages<wchar_t>  \n```  \n  \n (The last category is required by Posix, but not the C Standard.)  \n  \n Some of these predefined facets are used by the iostreams classes, to control the conversion of numeric values to and from text sequences.  \n  \n An object of class locale also stores a locale name as an object of class [string](../standard-library/string-typedefs.md#string). Using an invalid locale name to construct a locale facet or a locale object throws an object of class [runtime_error](../standard-library/runtime-error-class.md). The stored locale name is `\"*\"` if the locale object cannot be certain that a C-style locale corresponds exactly to that represented by the object. Otherwise, you can establish a matching locale within the Standard C Library, for the locale object `Loc`, by calling `setlocale`(LC_ALL `,` `Loc`. [name](#locale__name)`().c_str()`).  \n  \n In this implementation, you can also call the static member function:  \n  \n```  \nstatic locale empty();\n```  \n  \n to construct a locale object that has no facets. It is also a transparent locale; if the template functions [has_facet](../standard-library/locale-functions.md#has_facet) and [use_facet](../standard-library/locale-functions.md#use_facet) cannot find the requested facet in a transparent locale, they consult first the global locale and then, if that is transparent, the classic locale. Thus, you can write:  \n  \n```  \ncout.imbue(locale::empty());\n```  \n  \nSubsequent insertions to [cout](../standard-library/iostream.md#cout) are mediated by the current state of the global locale. You can even write:  \n  \n```  \nlocale loc(locale::empty(),\n    locale::classic(),  \n    locale::numeric);\n\ncout.imbue(loc);\n```   \n  \n Numeric formatting rules for subsequent insertions to `cout` remain the same as in the C locale, even as the global locale supplies changing rules for inserting dates and monetary amounts.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[locale](#locale__locale)|Creates a locale, or a copy of a locale, or a copy of locale where a facet or a category has been replaced by a facet or category from another locale.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[category](#locale__category)|An integer type that provides bitmask values to denote standard facet families.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[combine](#locale__combine)|Inserts a facet from a specified locale into a target locale.|  \n|[name](#locale__name)|Returns the stored locale name.|  \n  \n### Static Functions  \n  \n|||  \n|-|-|  \n|[classic](#locale__classic)|The static member function returns a locale object that represents the classic C locale.|  \n|[global](#locale__global)|Resets the default local for the program.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator!=](#locale__operator_neq)|Tests two locales for inequality.|  \n|[operator( )](#locale__operator__)|Compares two `basic_string` objects.|  \n|[operator==](#locale__operator_eq_eq)|Tests two locales for equality.|  \n  \n### Classes  \n  \n|||  \n|-|-|  \n|[facet](#facet_class)|A class that serves as the base class for all locale facets.|  \n|[id](#id_class)|The member class provides a unique facet identification used as an index for looking up facets in a locale.|  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n##  <a name=\"locale__category\"></a>  locale::category  \n An integer type that provides bitmask values to denote standard facet families.  \n  \n```  \ntypedef int category;  \nstatic const int collate = LC_COLLATE;  \nstatic const int ctype = LC_CTYPE;  \nstatic const int monetary = LC_MONETARY;  \nstatic const int numeric = LC_NUMERIC;  \nstatic const int time = LC_TIME;  \nstatic const int messages = LC_MESSAGES;  \nstatic const int all = LC_ALL;  \nstatic const int none = 0;  \n```  \n  \n### Remarks  \n The type is a synonym for an `int` type that can represent a group of distinct elements of a bitmask type local to class locale or can be used to represent any of the corresponding C locale categories. The elements are:  \n  \n- **collate**, corresponding to the C category LC_COLLATE  \n  \n- **ctype**, corresponding to the C category LC_CTYPE  \n  \n- **monetary**, corresponding to the C category LC_MONETARY  \n  \n- **numeric**, corresponding to the C category LC_NUMERIC  \n  \n- **time**, corresponding to the C category LC_TIME  \n  \n- **messages**, corresponding to the Posix category LC_MESSAGES  \n  \n In addition, two useful values are:  \n  \n- **none**, corresponding to none of the C categories  \n  \n- **all**, corresponding to the C union of all categories LC_ALL  \n  \n You can represent an arbitrary group of categories by using `OR` with these constants, as in **monetary** &#124; **time**.  \n  \n##  <a name=\"locale__classic\"></a>  locale::classic  \n The static member function returns a locale object that represents the classic C locale.  \n  \n```  \nstatic const locale& classic();\n```  \n  \n### Return Value  \n A reference to the C locale.  \n  \n### Remarks  \n The classic C locale is the U.S. English ASCII locale within the Standard C Library that is implicitly used in programs that are not internationalized.  \n  \n### Example  \n  \n```cpp  \n// locale_classic.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <string>  \n#include <locale>  \n  \nusing namespace std;  \n  \nint main( )   \n{  \n   locale loc1( \"german\" );  \n   locale loc2 = locale::global( loc1 );  \n   cout << \"The name of the previous locale is: \" << loc2.name( )  \n        << \".\" << endl;  \n   cout << \"The name of the current locale is: \" << loc1.name( )   \n        << \".\" << endl;  \n  \n   if (loc2 == locale::classic( ) )  \n      cout << \"The previous locale was classic.\" << endl;  \n   else  \n      cout << \"The previous locale was not classic.\" << endl;  \n  \n   if (loc1 == locale::classic( ) )  \n      cout << \"The current locale is classic.\" << endl;  \n   else  \n      cout << \"The current locale is not classic.\" << endl;  \n}  \n```  \n  \n```Output  \nThe name of the previous locale is: C.  \nThe name of the current locale is: German_Germany.1252.  \nThe previous locale was classic.  \nThe current locale is not classic.  \n```  \n  \n##  <a name=\"locale__combine\"></a>  locale::combine  \n Inserts a facet from a specified locale into a target locale.  \n  \n```  \ntemplate <class Facet>  \nlocale combine(const locale& Loc) const;\n```  \n  \n### Parameters  \n `Loc`  \n The locale containing the facet to be inserted into the target locale.  \n  \n### Return Value  \n The member function returns a locale object that replaces in or adds to **\\*this** the facet `Facet` listed in `Loc`.  \n  \n### Example  \n  \n```cpp  \n// locale_combine.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <tchar.h>  \nusing namespace std;  \n  \nint main() {  \n   locale loc ( \"German_germany\" );  \n   _TCHAR * s1 = _T(\"Das ist wei\\x00dfzz.\"); // \\x00df is the German sharp-s; it comes before z in the German alphabet  \n   _TCHAR * s2 = _T(\"Das ist weizzz.\");  \n   int result1 = use_facet<collate<_TCHAR> > ( loc ).  \n      compare (s1, &s1[_tcslen( s1 )-1 ],  s2, &s2[_tcslen( s2 )-1 ] );  \n   cout << isalpha (_T ( '\\x00df' ), loc ) << result1 << endl;  \n  \n   locale loc2 ( \"C\" );  \n   int result2 = use_facet<collate<_TCHAR> > ( loc2 ).  \n      compare (s1, &s1[_tcslen( s1 )-1 ],  s2, &s2[_tcslen( s2 )-1 ] );  \n   cout << isalpha (_T ( '\\x00df' ), loc2 )  << result2 << endl;  \n  \n   locale loc3 = loc2.combine<collate<_TCHAR> > (loc);  \n   int result3 = use_facet<collate<_TCHAR> > ( loc3 ).  \n      compare (s1, &s1[_tcslen( s1 )-1 ],  s2, &s2[_tcslen( s2 )-1 ] );  \n   cout << isalpha (_T ( '\\x00df' ), loc3 ) << result3 << endl;  \n}  \n```  \n  \n##  <a name=\"facet_class\"></a>  facet Class  \n A class that serves as the base class for all locale facets.  \n\n```    \nclass facet { \nprotected:    \n    explicit facet(size_t _Refs = 0);\n   virtual ~facet();\nprivate:    \n   facet(const facet&)\n   // not defined void operator=(const facet&)\n     // not defined    \n};  \n```  \n### Remarks  \n Note that you cannot copy or assign an object of class facet. You can construct and destroy objects derived from class `locale::facet` but not objects of the base class proper. Typically, you construct an object `_Myfac` derived from facet when you construct a locale, as in **localeloc**( `locale::classic`( ), **new**`_Myfac`);  \n  \n In such cases, the constructor for the base class facet should have a zero `_Refs` argument. When the object is no longer needed, it is deleted. Thus, you supply a nonzero _ *Refs* argument only in those rare cases where you take responsibility for the lifetime of the object.  \n  \n##  <a name=\"locale__global\"></a>  locale::global  \n Resets the default locale for the program. This affects the global locale for both C and C++.  \n  \n```  \nstatic locale global(const locale& Loc);\n```  \n  \n### Parameters  \n `Loc`  \n The locale to be used as the default locale by the program.  \n  \n### Return Value  \n The previous locale before the default locale was reset.  \n  \n### Remarks  \n At program startup, the global locale is the same as the classic locale. The `global()` function calls `setlocale( LC_ALL, loc.name. c_str())` to establish a matching locale in the Standard C library.  \n  \n### Example  \n  \n```cpp  \n// locale_global.cpp  \n// compile by using: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <tchar.h>  \nusing namespace std;  \n  \nint main( )  \n{  \n   locale loc ( \"German_germany\" );  \n   locale loc1;  \n   cout << \"The initial locale is: \" << loc1.name( ) << endl;  \n   locale loc2 = locale::global ( loc );  \n   locale loc3;  \n   cout << \"The current locale is: \" << loc3.name( ) << endl;  \n   cout << \"The previous locale was: \" << loc2.name( ) << endl;  \n}  \n```  \n  \n```Output  \nThe initial locale is: C  \nThe current locale is: German_Germany.1252  \nThe previous locale was: C  \n```  \n  \n##  <a name=\"id_class\"></a>  id Class  \n The member class provides a unique facet identification used as an index for looking up facets in a locale.  \n  \nclass id { protected:    id();\n   private:    id(const id&)\n   // not defined void operator=(const id&)  // not defined    };  \n  \n### Remarks  \n The member class describes the static member object required by each unique locale facet. Note that you cannot copy or assign an object of class **id**.  \n  \n##  <a name=\"locale__locale\"></a>  locale::locale  \n Creates a locale, or a copy of a locale, or a copy of locale where a facet or a category has been replaced by a facet or category from another locale.  \n  \n```  \nlocale();\n\nexplicit locale(const char* Locname, category Cat = all);\nexplicit locale(const string& Locname);\nlocale( const locale& Loc);\nlocale(const locale& Loc, const locale& Other, category Cat);\nlocale(const locale& Loc, const char* Locname, category Cat);\n\ntemplate <class Facet>  \nlocale(const locale& Loc, const Facet* Fac);\n```  \n  \n### Parameters  \n `Locname`  \n Name of a locale.  \n  \n `Loc`  \n A locale that is to be copied in constructing the new locale.  \n  \n `Other`  \n A locale from which to select a category.  \n  \n `Cat`  \n The category to be substituted into the constructed locale.  \n  \n `Fac`  \n The facet to be substituted into the constructed locale.  \n  \n### Remarks  \n The first constructor initializes the object to match the global locale. The second and third constructors initialize all the locale categories to have behavior consistent with the locale name `Locname`. The remaining constructors copy `Loc`, with the exceptions noted:  \n  \n `locale(const locale& Loc, const locale& Other, category Cat);`  \n  \n replaces from `Other` those facets corresponding to a category C for which C & `Cat` is nonzero.  \n  \n `locale(const locale& Loc, const char* Locname, category Cat);`  \n  \n `locale(const locale& Loc, const string& Locname, category Cat);`  \n  \n replaces from `locale(Locname, _All)` those facets corresponding to a category C for which C & `Cat`is nonzero.  \n  \n `template<class Facet> locale(const locale& Loc, Facet* Fac);`  \n  \n replaces in (or adds to) `Loc` the facet `Fac`, if `Fac` is not a null pointer.  \n  \n If a locale name `Locname` is a null pointer or otherwise invalid, the function throws [runtime_error](../standard-library/runtime-error-class.md).  \n  \n### Example  \n  \n```cpp  \n// locale_locale.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <tchar.h>  \nusing namespace std;  \n  \nint main( ) {  \n  \n   // Second constructor  \n   locale loc ( \"German_germany\" );  \n   _TCHAR * s1 = _T(\"Das ist wei\\x00dfzz.\"); // \\x00df is the German sharp-s, it comes before z in the German alphabet  \n   _TCHAR * s2 = _T(\"Das ist weizzz.\");  \n   int result1 = use_facet<collate<_TCHAR> > ( loc ).  \n      compare (s1, &s1[_tcslen( s1 )-1 ],  s2, &s2[_tcslen( s2 )-1 ] );  \n   cout << isalpha (_T ( '\\x00df' ), loc ) << result1 << endl;  \n  \n   // The first (default) constructor  \n   locale loc2;  \n   int result2 = use_facet<collate<_TCHAR> > ( loc2 ).  \n      compare (s1, &s1[_tcslen( s1 )-1 ],  s2, &s2[_tcslen( s2 )-1 ] );  \n   cout << isalpha (_T ( '\\x00df' ), loc2 )  << result2 << endl;  \n  \n   // Third constructor  \n   locale loc3 (loc2,loc, _M_COLLATE );  \n   int result3 = use_facet<collate<_TCHAR> > ( loc3 ).  \n      compare (s1, &s1[_tcslen( s1 )-1 ],  s2, &s2[_tcslen( s2 )-1 ] );  \n   cout << isalpha (_T ( '\\x00df' ), loc3 ) << result3 << endl;  \n  \n   // Fourth constructor  \n   locale loc4 (loc2, \"German_Germany\", _M_COLLATE );  \n   int result4 = use_facet<collate<_TCHAR> > ( loc4 ).  \n      compare (s1, &s1[_tcslen( s1 )-1 ],  s2, &s2[_tcslen( s2 )-1 ] );  \n   cout << isalpha (_T ( '\\x00df' ), loc4 ) << result4 << endl;  \n}  \n```  \n  \n##  <a name=\"locale__name\"></a>  locale::name  \n Returns the stored locale name.  \n  \n```  \nstring name() const;\n```  \n  \n### Return Value  \n A string giving the name of the locale.  \n  \n### Example  \n  \n```cpp  \n// locale_name.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <string>  \n#include <locale>  \n  \nusing namespace std;  \n  \nint main( )   \n{  \n   locale loc1( \"german\" );  \n   locale loc2 = locale::global( loc1 );  \n   cout << \"The name of the previous locale is: \"   \n        << loc2.name( ) << \".\" << endl;  \n   cout << \"The name of the current locale is: \"   \n        << loc1.name( ) << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe name of the previous locale is: C.  \nThe name of the current locale is: German_Germany.1252.  \n```  \n  \n##  <a name=\"locale__operator_neq\"></a>  locale::operator!=  \n Tests two locales for inequality.  \n  \n```  \nbool operator!=(const locale& right) const;\n```  \n  \n### Parameters  \n ` right`  \n One of the locales to be tested for inequality.  \n  \n### Return Value  \n A Boolean value that is **true** if the locales are not copies of the same locale; **false** if the locales are copies of the same locale.  \n  \n### Remarks  \n Two locales are equal if they are the same locale, if one is a copy of the other, or if they have identical names.  \n  \n### Example  \n  \n```cpp  \n// locale_op_ne.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <string>  \n#include <locale>  \n  \nusing namespace std;  \n  \nint main( )   \n{  \n   locale loc1( \"German_Germany\" );  \n   locale loc2( \"German_Germany\" );  \n   locale loc3( \"English\" );  \n  \n   if ( loc1 != loc2 )  \n      cout << \"locales loc1 (\" << loc1.name( )  \n      << \") and\\n loc2 (\" << loc2.name( ) << \") are not equal.\" << endl;  \n   else  \n      cout << \"locales loc1 (\" << loc1.name( )  \n      << \") and\\n loc2 (\" << loc2.name( ) << \") are equal.\" << endl;  \n  \n   if ( loc1 != loc3 )  \n      cout << \"locales loc1 (\" << loc1.name( )  \n      << \") and\\n loc3 (\" << loc3.name( ) << \") are not equal.\" << endl;  \n   else  \n      cout << \"locales loc1 (\" << loc1.name( )  \n      << \") and\\n loc3 (\" << loc3.name( ) << \") are equal.\" << endl;  \n}  \n```  \n  \n```Output  \nlocales loc1 (German_Germany.1252) and  \n loc2 (German_Germany.1252) are equal.  \nlocales loc1 (German_Germany.1252) and  \n loc3 (English_United States.1252) are not equal.  \n```  \n  \n##  <a name=\"locale__operator__\"></a>  locale::operator()  \n Compares two `basic_string` objects.  \n  \n```  \ntemplate <class CharType, class Traits, class Allocator>  \nbool operator()(\n    const basic_string<CharType, Traits, Allocator>& left,  \n    const basic_string<CharType, Traits, Allocator>& right) const;\n```  \n  \n### Parameters  \n ` left`  \n The left string.  \n  \n ` right`  \n The right string.  \n  \n### Return Value  \n The member function returns:  \n  \n-   –1 if the first sequence compares less than the second sequence.  \n  \n-   +1 if the second sequence compares less than the first sequence.  \n  \n-   0 if the sequences are equivalent.  \n  \n### Remarks  \n The member function effectively executes:  \n  \n```  \nconst collate<CharType>& fac = use_fac<collate<CharType>>(*this);\n\nreturn (fac.compare(left.begin(), left.end(), right.begin(), right.end()) <0);\n```  \n  \n Thus, you can use a locale object as a function object.  \n  \n### Example  \n  \n```cpp  \n// locale_op_compare.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <string>  \n#include <locale>  \n  \nint main( )   \n{  \n   using namespace std;  \n   wchar_t *sa = L\"ztesting\";  \n   wchar_t *sb = L\"\\0x00DFtesting\";  \n   basic_string<wchar_t> a( sa );  \n   basic_string<wchar_t> b( sb );  \n  \n   locale loc( \"German_Germany\" );  \n   cout << loc( a,b ) << endl;  \n  \n   const collate<wchar_t>& fac = use_facet<collate<wchar_t> >( loc );  \n   cout << ( fac.compare( sa, sa + a.length( ),  \n       sb, sb + b.length( ) ) < 0) << endl;  \n}  \n```  \n  \n```Output  \n0  \n0  \n```  \n  \n##  <a name=\"locale__operator_eq_eq\"></a>  locale::operator==  \n Tests two locales for equality.  \n  \n```  \nbool operator==(const locale& right) const;\n```  \n  \n### Parameters  \n ` right`  \n One of the locales to be tested for equality.  \n  \n### Return Value  \n A Boolean value that is **true** if the locales are copies of the same locale; **false** if the locales are not copies of the same locale.  \n  \n### Remarks  \n Two locales are equal if they are the same locale, if one is a copy of the other, or if they have identical names.  \n  \n### Example  \n  \n```cpp  \n// locale_op_eq.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <string>  \n#include <locale>  \n  \nusing namespace std;  \n  \nint main( )   \n{  \n   locale loc1( \"German_Germany\" );  \n   locale loc2( \"German_Germany\" );  \n   locale loc3( \"English\" );  \n  \n   if ( loc1 == loc2 )  \n      cout << \"locales loc1 (\" << loc1.name( )  \n      << \")\\n and loc2 (\" << loc2.name( ) << \") are equal.\"   \n      << endl;  \n   else  \n      cout << \"locales loc1 (\" << loc1.name( )  \n      << \")\\n and loc2 (\" << loc2.name( ) << \") are not equal.\"   \n      << endl;  \n  \n   if ( loc1 == loc3 )  \n      cout << \"locales loc1 (\" << loc1.name( )  \n      << \")\\n and loc3 (\" << loc3.name( ) << \") are equal.\"   \n      << endl;  \n   else  \n      cout << \"locales loc1 (\" << loc1.name( )  \n      << \")\\n and loc3 (\" << loc3.name( ) << \") are not equal.\"   \n      << endl;  \n}  \n```  \n  \n```Output  \nlocales loc1 (German_Germany.1252)  \n and loc2 (German_Germany.1252) are equal.  \nlocales loc1 (German_Germany.1252)  \n and loc3 (English_United States.1252) are not equal.  \n```  \n  \n## See Also  \n [<locale>](../standard-library/locale.md)   \n [Code Pages](../c-runtime-library/code-pages.md)   \n [Locale Names, Languages, and Country/Region Strings](../c-runtime-library/locale-names-languages-and-country-region-strings.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}