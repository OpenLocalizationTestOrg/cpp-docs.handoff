{"nodes":[{"pos":[12,126],"content":"_invalid_parameter, _invalid_parameter_noinfo, _invalid_parameter_noinfo_noreturn, _invoke_watson | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_invalid_parameter, _invalid_parameter_noinfo, _invalid_parameter_noinfo_noreturn, _invoke_watson | Microsoft Docs","pos":[0,114]}]},{"content":"_invalid_parameter, _invalid_parameter_noinfo, _invalid_parameter_noinfo_noreturn, _invoke_watson","pos":[856,953]},{"content":"These functions are used by the C Runtime Library to handle non-valid parameters passed to CRT Library functions.","pos":[954,1067]},{"content":"Your code may also use these functions to support default or customizable handling of non-valid parameters.","pos":[1068,1175]},{"content":"Syntax","pos":[1180,1186]},{"content":"Return Value","pos":[1837,1849]},{"content":"These functions do not return a value.","pos":[1850,1888]},{"content":"The <ph id=\"ph1\">`_invalid_parameter_noinfo_noreturn`</ph> and <ph id=\"ph2\">`_invoke_watson`</ph> functions do not return to the caller, and in some cases, <ph id=\"ph3\">`_invalid_parameter`</ph> and <ph id=\"ph4\">`_invalid_parameter_noinfo`</ph> may not return to the caller.","pos":[1889,2091],"source":" The `_invalid_parameter_noinfo_noreturn` and `_invoke_watson` functions do not return to the caller, and in some cases, `_invalid_parameter` and `_invalid_parameter_noinfo` may not return to the caller."},{"content":"Parameters","pos":[2096,2106]},{"content":"A string representing the source code parameter expression that is not valid.","pos":[2122,2199]},{"content":"The name of the function that called the handler.","pos":[2219,2268]},{"content":"The source code file where the handler was called.","pos":[2284,2334]},{"content":"The line number in the source code where the handler was called.","pos":[2352,2416]},{"content":"Unused.","pos":[2431,2438]},{"content":"Remarks","pos":[2443,2450]},{"content":"When C runtime library functions are passed non-valid parameters, the library functions call an <bpt id=\"p1\">*</bpt>invalid parameter handler<ept id=\"p1\">*</ept>, a function that may be specified by the programmer to do any of several things.","pos":[2451,2655],"source":"When C runtime library functions are passed non-valid parameters, the library functions call an *invalid parameter handler*, a function that may be specified by the programmer to do any of several things."},{"content":"For example, it may report the issue to the user, write to a log, break in a debugger, terminate the program, or do nothing at all.","pos":[2656,2787]},{"content":"If no function is specified by the programmer, a default handler, <ph id=\"ph1\">`_invoke_watson`</ph>, is called.","pos":[2788,2882],"source":" If no function is specified by the programmer, a default handler, `_invoke_watson`, is called."},{"content":"By default, when a non-valid parameter is identified in debug code, CRT library functions call the function <ph id=\"ph1\">`_invalid_parameter`</ph> using verbose parameters.","pos":[2884,3038],"source":"By default, when a non-valid parameter is identified in debug code, CRT library functions call the function `_invalid_parameter` using verbose parameters."},{"content":"In non-debug code, the <ph id=\"ph1\">`_invalid_parameter_noinfo`</ph> function is called, which calls the <ph id=\"ph2\">`_invalid_parameter`</ph> function using empty parameters.","pos":[3039,3179],"source":" In non-debug code, the `_invalid_parameter_noinfo` function is called, which calls the `_invalid_parameter` function using empty parameters."},{"content":"If the non-debug CRT library function requires program termination, the <ph id=\"ph1\">`_invalid_parameter_noinfo_noreturn`</ph> function is called, which calls the <ph id=\"ph2\">`_invalid_parameter`</ph> function using empty parameters, followed by a call to the <ph id=\"ph3\">`_invoke_watson`</ph> function to force program termination.","pos":[3180,3460],"source":" If the non-debug CRT library function requires program termination, the `_invalid_parameter_noinfo_noreturn` function is called, which calls the `_invalid_parameter` function using empty parameters, followed by a call to the `_invoke_watson` function to force program termination."},{"content":"The <ph id=\"ph1\">`_invalid_parameter`</ph> function checks whether a user-defined invalid parameter handler was set, and if so, calls it.","pos":[3462,3581],"source":"The `_invalid_parameter` function checks whether a user-defined invalid parameter handler was set, and if so, calls it."},{"content":"For example, if a user-defined thread-local handler was set by a call to <bpt id=\"p1\">[</bpt>set_thread_local_invalid_parameter_handler<ept id=\"p1\">](../../c-runtime-library/reference/set-invalid-parameter-handler-set-thread-local-invalid-parameter-handler.md)</ept> in the current thread, it is called, then the function returns.","pos":[3582,3874],"source":" For example, if a user-defined thread-local handler was set by a call to [set_thread_local_invalid_parameter_handler](../../c-runtime-library/reference/set-invalid-parameter-handler-set-thread-local-invalid-parameter-handler.md) in the current thread, it is called, then the function returns."},{"content":"Otherwise, if a user-defined global invalid parameter handler was set by a call to <bpt id=\"p1\">[</bpt>set_invalid_parameter_handler<ept id=\"p1\">](../../c-runtime-library/reference/set-invalid-parameter-handler-set-thread-local-invalid-parameter-handler.md)</ept>, it is called, then the function returns.","pos":[3875,4142],"source":" Otherwise, if a user-defined global invalid parameter handler was set by a call to [set_invalid_parameter_handler](../../c-runtime-library/reference/set-invalid-parameter-handler-set-thread-local-invalid-parameter-handler.md), it is called, then the function returns."},{"content":"Otherwise, the default handler <ph id=\"ph1\">`_invoke_watson`</ph> is called.","pos":[4143,4201],"source":" Otherwise, the default handler `_invoke_watson` is called."},{"content":"The default behavior of <ph id=\"ph1\">`_invoke_watson`</ph> is to terminate the program.","pos":[4202,4271],"source":" The default behavior of `_invoke_watson` is to terminate the program."},{"content":"User-defined handlers may terminate or return.","pos":[4272,4318]},{"content":"We recommend that user-defined handlers terminate the program unless recovery is certain.","pos":[4319,4408]},{"content":"When the default handler <ph id=\"ph1\">`_invoke_watson`</ph> is called, if the processor supports a <bpt id=\"p1\">[</bpt>__fastfail<ept id=\"p1\">](../../intrinsics/fastfail.md)</ept> operation, it is invoked using a parameter of <ph id=\"ph2\">`FAST_FAIL_INVALID_ARG`</ph> and the process terminates.","pos":[4411,4632],"source":"When the default handler `_invoke_watson` is called, if the processor supports a [__fastfail](../../intrinsics/fastfail.md) operation, it is invoked using a parameter of `FAST_FAIL_INVALID_ARG` and the process terminates."},{"content":"Otherwise, a fast fail exception is raised, which can be caught by an attached debugger.","pos":[4633,4721]},{"content":"If the process is allowed to continue, it is terminated by a call to the Windows <ph id=\"ph1\">`TerminateProcess`</ph> function using an exception code status of <ph id=\"ph2\">`STATUS_INVALID_CRUNTIME_PARAMETER`</ph>.","pos":[4722,4901],"source":" If the process is allowed to continue, it is terminated by a call to the Windows `TerminateProcess` function using an exception code status of `STATUS_INVALID_CRUNTIME_PARAMETER`."},{"content":"Requirements","pos":[4907,4919]},{"content":"Function","pos":[4923,4931]},{"content":"Required header","pos":[4932,4947]},{"pos":[5010,5078],"content":", <ph id=\"ph1\">`_invalid_parameter_noinfo`</ph>, <ph id=\"ph2\">`_invalid_parameter_noinfo_noreturn`</ph>,","source":", `_invalid_parameter_noinfo`, `_invalid_parameter_noinfo_noreturn`, "},{"content":"corecrt.h&gt;","pos":[5098,5108],"source":"corecrt.h>"},{"pos":[5116,5220],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"See Also","pos":[5229,5237]},{"content":"Alphabetical Function Reference","pos":[5242,5273]},{"content":"_get_invalid_parameter_handler, _get_thread_local_invalid_parameter_handler","pos":[5354,5429]},{"content":"_set_invalid_parameter_handler, _set_thread_local_invalid_parameter_handler","pos":[5546,5621]},{"content":"Parameter Validation","pos":[5738,5758]}],"content":"---\ntitle: \"_invalid_parameter, _invalid_parameter_noinfo, _invalid_parameter_noinfo_noreturn, _invoke_watson | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_invalid_parameter\"\n  - \"_invalid_parameter_noinfo\"\n  - \"_invalid_parameter_noinfo_noreturn\"\n  - \"_invoke_watson\"\napilocation: \n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"CORECRT/_invalid_parameter\"\n  - \"_invalid_parameter\"\n  - \"CORECRT/_invalid_parameter_noinfo\"\n  - \"_invalid_parameter_noinfo\"\n  - \"CORECRT/_invalid_parameter_noinfo_noreturn\"\n  - \"_invalid_parameter_noinfo_noreturn\"\n  - \"CORECRT/_invoke_watson\"\n  - \"_invoke_watson\"\nms.assetid: a4d6f1fd-ce56-4783-8719-927151a7a814\ncaps.latest.revision: 4\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\n---\n# _invalid_parameter, _invalid_parameter_noinfo, _invalid_parameter_noinfo_noreturn, _invoke_watson\nThese functions are used by the C Runtime Library to handle non-valid parameters passed to CRT Library functions. Your code may also use these functions to support default or customizable handling of non-valid parameters.\n\n## Syntax\n```\nextern \"C\" void __cdecl \n_invalid_parameter(\n    wchar_t const* const expression,\n    wchar_t const* const function_name,\n    wchar_t const* const file_name,\n    unsigned int   const line_number,\n    uintptr_t      const reserved);  \n\nextern \"C\" void __cdecl \n_invalid_parameter_noinfo(void);  \n\nextern \"C\" __declspec(noreturn) void __cdecl \n_invalid_parameter_noinfo_noreturn(void);  \n\nextern \"C\" __declspec(noreturn) void __cdecl \n_invoke_watson(  \n    wchar_t const* const expression,\n    wchar_t const* const function_name,\n    wchar_t const* const file_name,\n    unsigned int   const line_number,\n    uintptr_t      const reserved);\n```\n\n## Return Value\nThese functions do not return a value. The `_invalid_parameter_noinfo_noreturn` and `_invoke_watson` functions do not return to the caller, and in some cases, `_invalid_parameter` and `_invalid_parameter_noinfo` may not return to the caller.\n\n## Parameters\n`expression`  \nA string representing the source code parameter expression that is not valid.\n\n`function_name`  \nThe name of the function that called the handler.\n\n`file_name`  \nThe source code file where the handler was called.\n\n`line_number`  \nThe line number in the source code where the handler was called.\n\n`reserved`  \nUnused.\n\n## Remarks\nWhen C runtime library functions are passed non-valid parameters, the library functions call an *invalid parameter handler*, a function that may be specified by the programmer to do any of several things. For example, it may report the issue to the user, write to a log, break in a debugger, terminate the program, or do nothing at all. If no function is specified by the programmer, a default handler, `_invoke_watson`, is called.\n\nBy default, when a non-valid parameter is identified in debug code, CRT library functions call the function `_invalid_parameter` using verbose parameters. In non-debug code, the `_invalid_parameter_noinfo` function is called, which calls the `_invalid_parameter` function using empty parameters. If the non-debug CRT library function requires program termination, the `_invalid_parameter_noinfo_noreturn` function is called, which calls the `_invalid_parameter` function using empty parameters, followed by a call to the `_invoke_watson` function to force program termination.\n\nThe `_invalid_parameter` function checks whether a user-defined invalid parameter handler was set, and if so, calls it. For example, if a user-defined thread-local handler was set by a call to [set_thread_local_invalid_parameter_handler](../../c-runtime-library/reference/set-invalid-parameter-handler-set-thread-local-invalid-parameter-handler.md) in the current thread, it is called, then the function returns. Otherwise, if a user-defined global invalid parameter handler was set by a call to [set_invalid_parameter_handler](../../c-runtime-library/reference/set-invalid-parameter-handler-set-thread-local-invalid-parameter-handler.md), it is called, then the function returns. Otherwise, the default handler `_invoke_watson` is called. The default behavior of `_invoke_watson` is to terminate the program. User-defined handlers may terminate or return. We recommend that user-defined handlers terminate the program unless recovery is certain. \n\nWhen the default handler `_invoke_watson` is called, if the processor supports a [__fastfail](../../intrinsics/fastfail.md) operation, it is invoked using a parameter of `FAST_FAIL_INVALID_ARG` and the process terminates. Otherwise, a fast fail exception is raised, which can be caught by an attached debugger. If the process is allowed to continue, it is terminated by a call to the Windows `TerminateProcess` function using an exception code status of `STATUS_INVALID_CRUNTIME_PARAMETER`. \n\n## Requirements  \n|Function|Required header|  \n|--------------|------------------|  \n|`_invalid_parameter`, `_invalid_parameter_noinfo`, `_invalid_parameter_noinfo_noreturn`, `_invoke_watson`|\\<corecrt.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## See Also  \n [Alphabetical Function Reference](../../c-runtime-library/reference/crt-alphabetical-function-reference.md)   \n [_get_invalid_parameter_handler, _get_thread_local_invalid_parameter_handler](../../c-runtime-library/reference/get-invalid-parameter-handler-get-thread-local-invalid-parameter-handler.md)  \n [_set_invalid_parameter_handler, _set_thread_local_invalid_parameter_handler](../../c-runtime-library/reference/set-invalid-parameter-handler-set-thread-local-invalid-parameter-handler.md)  \n [Parameter Validation](../../c-runtime-library/parameter-validation.md)\n"}