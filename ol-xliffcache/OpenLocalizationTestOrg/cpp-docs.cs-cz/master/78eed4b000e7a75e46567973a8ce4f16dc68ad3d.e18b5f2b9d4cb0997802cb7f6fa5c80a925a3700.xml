{"nodes":[{"pos":[12,60],"content":"concurrent_priority_queue Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"concurrent_priority_queue Class | Microsoft Docs","pos":[0,48]}]},{"pos":[685,716],"content":"concurrent_priority_queue Class","linkify":"concurrent_priority_queue Class","nodes":[{"content":"concurrent_priority_queue Class","pos":[0,31]}]},{"content":"The <ph id=\"ph1\">`concurrent_priority_queue`</ph> class is a container that allows multiple threads to concurrently push and pop items.","pos":[717,834],"source":"The `concurrent_priority_queue` class is a container that allows multiple threads to concurrently push and pop items."},{"content":"Items are popped in priority order where priority is determined by a functor supplied as a template argument.","pos":[835,944]},{"pos":[953,959],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1153,1163],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The data type of the elements to be stored in the priority queue.","pos":[1174,1239]},{"content":"The type of the function object that can compare two element values as sort keys to determine their relative order in the priority queue.","pos":[1260,1397]},{"content":"This argument is optional and the binary predicate <ph id=\"ph1\">`less&lt;``T``&gt;`</ph> is the default value.","pos":[1398,1484],"source":" This argument is optional and the binary predicate `less<``T``>` is the default value."},{"content":"The type that represents the stored allocator object that encapsulates details about the allocation and deallocation of memory for the concurrent priority queue.","pos":[1500,1661]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`allocator&lt;``T``&gt;`</ph>.","pos":[1662,1732],"source":" This argument is optional and the default value is `allocator<``T``>`."},{"pos":[1741,1748],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1758,1773],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1780,1784]},{"content":"Description","pos":[1785,1796]},{"content":"A type that represents the allocator class for the concurrent priority queue.","pos":[1851,1928]},{"content":"A type that represents a const reference to an element of the type stored in a concurrent priority queue.","pos":[1951,2056]},{"content":"A type that represents a reference to an element of the type stored in a concurrent priority queue.","pos":[2073,2172]},{"content":"A type that counts the number of elements in a concurrent priority queue.","pos":[2189,2262]},{"content":"A type that represents the data type stored in a concurrent priority queue.","pos":[2280,2355]},{"pos":[2366,2385],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[2392,2396]},{"content":"Description","pos":[2397,2408]},{"pos":[2446,2519],"content":"<bpt id=\"p1\">[</bpt>concurrent_priority_queue::concurrent_priority_queue Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[concurrent_priority_queue::concurrent_priority_queue Constructor](#ctor)"},{"content":"Overloaded.","pos":[2520,2531]},{"content":"Constructs a concurrent priority queue.","pos":[2532,2571]},{"pos":[2582,2596],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[2603,2607]},{"content":"Description","pos":[2608,2619]},{"pos":[2657,2706],"content":"<bpt id=\"p1\">[</bpt>concurrent_priority_queue::clear Method<ept id=\"p1\">](#clear)</ept>","source":"[concurrent_priority_queue::clear Method](#clear)"},{"content":"Erases all elements in the concurrent priority.","pos":[2707,2754]},{"content":"This method is not concurrency-safe.","pos":[2755,2791]},{"pos":[2796,2845],"content":"<bpt id=\"p1\">[</bpt>concurrent_priority_queue::empty Method<ept id=\"p1\">](#empty)</ept>","source":"[concurrent_priority_queue::empty Method](#empty)"},{"content":"Tests if the concurrent priority queue is empty at the time this method is called.","pos":[2846,2928]},{"content":"This method is concurrency-safe.","pos":[2929,2961]},{"pos":[2966,3031],"content":"<bpt id=\"p1\">[</bpt>concurrent_priority_queue::get_allocator Method<ept id=\"p1\">](#get_allocator)</ept>","source":"[concurrent_priority_queue::get_allocator Method](#get_allocator)"},{"content":"Returns a copy of the allocator used to construct the concurrent priority queue.","pos":[3032,3112]},{"content":"This method is concurrency-safe.","pos":[3113,3145]},{"pos":[3150,3197],"content":"<bpt id=\"p1\">[</bpt>concurrent_priority_queue::push Method<ept id=\"p1\">](#push)</ept>","source":"[concurrent_priority_queue::push Method](#push)"},{"content":"Overloaded.","pos":[3198,3209]},{"content":"Adds an element to the concurrent priority queue.","pos":[3210,3259]},{"content":"This method is concurrency-safe.","pos":[3260,3292]},{"pos":[3297,3344],"content":"<bpt id=\"p1\">[</bpt>concurrent_priority_queue::size Method<ept id=\"p1\">](#size)</ept>","source":"[concurrent_priority_queue::size Method](#size)"},{"content":"Returns the number of elements in the concurrent priority queue.","pos":[3345,3409]},{"content":"This method is concurrency-safe.","pos":[3410,3442]},{"pos":[3447,3494],"content":"<bpt id=\"p1\">[</bpt>concurrent_priority_queue::swap Method<ept id=\"p1\">](#swap)</ept>","source":"[concurrent_priority_queue::swap Method](#swap)"},{"content":"Swaps the contents of two concurrent priority queues.","pos":[3495,3548]},{"content":"This method is not concurrency-safe.","pos":[3549,3585]},{"pos":[3590,3643],"content":"<bpt id=\"p1\">[</bpt>concurrent_priority_queue::try_pop Method<ept id=\"p1\">](#try_pop)</ept>","source":"[concurrent_priority_queue::try_pop Method](#try_pop)"},{"content":"Removes and returns the highest priority element from the queue if the queue is non-empty.","pos":[3644,3734]},{"content":"This method is concurrency-safe.","pos":[3735,3767]},{"pos":[3778,3794],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[3801,3805]},{"content":"Description","pos":[3806,3817]},{"pos":[3855,3916],"content":"<bpt id=\"p1\">[</bpt>concurrent_priority_queue::operator= Operator<ept id=\"p1\">](#operator_eq)</ept>","source":"[concurrent_priority_queue::operator= Operator](#operator_eq)"},{"content":"Overloaded.","pos":[3917,3928]},{"content":"Assigns the contents of another <ph id=\"ph1\">`concurrent_priority_queue`</ph> object to this one.","pos":[3929,4008],"source":" Assigns the contents of another `concurrent_priority_queue` object to this one."},{"content":"This method is not concurrency-safe.","pos":[4009,4045]},{"pos":[4055,4062],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4066,4232],"content":"For detailed information on the <ph id=\"ph1\">`concurrent_priority_queue`</ph> class, see <bpt id=\"p1\">[</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../../parallel/concrt/parallel-containers-and-objects.md)</ept>.","source":"For detailed information on the `concurrent_priority_queue` class, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)."},{"pos":[4241,4262],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4302,4314],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4318,4357],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concurrent_priority_queue.h","source":"**Header:** concurrent_priority_queue.h"},{"pos":[4364,4390],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[4400,4461],"content":"<bpt id=\"p1\">&lt;a name=\"clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_priority_queue::clear Method","linkify":"<a name=\"clear\"></a>  concurrent_priority_queue::clear Method","source":"<a name=\"clear\"></a>  concurrent_priority_queue::clear Method"},{"content":"Erases all elements in the concurrent priority.","pos":[4465,4512]},{"content":"This method is not concurrency-safe.","pos":[4513,4549]},{"pos":[4586,4593],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`clear`</ph> is not concurrency-safe.","pos":[4597,4629],"source":"`clear` is not concurrency-safe."},{"content":"You must ensure that no other threads are invoking methods on the concurrent priority queue when you call this method.","pos":[4630,4748]},{"content":"<ph id=\"ph1\">`clear`</ph> does not free memory.","pos":[4749,4778],"source":"`clear` does not free memory."},{"pos":[4788,4873],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_priority_queue::concurrent_priority_queue Constructor","linkify":"<a name=\"ctor\"></a>  concurrent_priority_queue::concurrent_priority_queue Constructor","source":"<a name=\"ctor\"></a>  concurrent_priority_queue::concurrent_priority_queue Constructor"},{"content":"Constructs a concurrent priority queue.","pos":[4877,4916]},{"pos":[5644,5654],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the input iterator.","pos":[5678,5709]},{"content":"The allocator class to use with this object.","pos":[5725,5769]},{"content":"The initial capacity of the <ph id=\"ph1\">`concurrent_priority_queue`</ph> object.","pos":[5796,5859],"source":" The initial capacity of the `concurrent_priority_queue` object."},{"content":"The position of the first element in the range of elements to be copied.","pos":[5878,5950]},{"content":"The position of the first element beyond the range of elements to be copied.","pos":[5967,6043]},{"content":"The source <ph id=\"ph1\">`concurrent_priority_queue`</ph> object to copy or move elements from.","pos":[6060,6136],"source":" The source `concurrent_priority_queue` object to copy or move elements from."},{"pos":[6146,6153],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6157,6240],"content":"All constructors store an allocator object <ph id=\"ph1\">`_Al`</ph> and initialize the priority queue.","source":"All constructors store an allocator object `_Al` and initialize the priority queue."},{"content":"The first constructor specifies an empty initial priority queue and optionally specifies an allocator.","pos":[6247,6349]},{"pos":[6356,6486],"content":"The second constructor specifies a priority queue with an initial capacity <ph id=\"ph1\">`_Init_capacity`</ph> and optionally specifies an allocator.","source":"The second constructor specifies a priority queue with an initial capacity `_Init_capacity` and optionally specifies an allocator."},{"pos":[6493,6621],"content":"The third constructor specifies values supplied by the iterator range [ <ph id=\"ph1\">`_Begin`</ph>, <ph id=\"ph2\">`_End`</ph>) and optionally specifies an allocator.","source":"The third constructor specifies values supplied by the iterator range [ `_Begin`, `_End`) and optionally specifies an allocator."},{"pos":[6628,6706],"content":"The fourth and fifth constructors specify a copy of the priority queue <ph id=\"ph1\">`_Src`</ph>.","source":"The fourth and fifth constructors specify a copy of the priority queue `_Src`."},{"pos":[6713,6792],"content":"The sixth and seventh constructors specify a move of the priority queue <ph id=\"ph1\">`_Src`</ph>.","source":"The sixth and seventh constructors specify a move of the priority queue `_Src`."},{"pos":[6802,6863],"content":"<bpt id=\"p1\">&lt;a name=\"empty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_priority_queue::empty Method","linkify":"<a name=\"empty\"></a>  concurrent_priority_queue::empty Method","source":"<a name=\"empty\"></a>  concurrent_priority_queue::empty Method"},{"content":"Tests if the concurrent priority queue is empty at the time this method is called.","pos":[6867,6949]},{"content":"This method is concurrency-safe.","pos":[6950,6982]},{"pos":[7025,7037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7041,7137],"content":"<ph id=\"ph1\">`true`</ph> if the priority queue was empty at the moment the function was called, <ph id=\"ph2\">`false`</ph> otherwise.","source":"`true` if the priority queue was empty at the moment the function was called, `false` otherwise."},{"pos":[7147,7224],"content":"<bpt id=\"p1\">&lt;a name=\"get_allocator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_priority_queue::get_allocator Method","linkify":"<a name=\"get_allocator\"></a>  concurrent_priority_queue::get_allocator Method","source":"<a name=\"get_allocator\"></a>  concurrent_priority_queue::get_allocator Method"},{"content":"Returns a copy of the allocator used to construct the concurrent priority queue.","pos":[7228,7308]},{"content":"This method is concurrency-safe.","pos":[7309,7341]},{"pos":[7402,7414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7418,7499],"content":"A copy of the allocator used to construct the <ph id=\"ph1\">`concurrent_priority_queue`</ph> object.","source":"A copy of the allocator used to construct the `concurrent_priority_queue` object."},{"pos":[7509,7582],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_priority_queue::operator= Operator","linkify":"<a name=\"operator_eq\"></a>  concurrent_priority_queue::operator= Operator","source":"<a name=\"operator_eq\"></a>  concurrent_priority_queue::operator= Operator"},{"content":"Assigns the contents of another <ph id=\"ph1\">`concurrent_priority_queue`</ph> object to this one.","pos":[7586,7665],"source":"Assigns the contents of another `concurrent_priority_queue` object to this one."},{"content":"This method is not concurrency-safe.","pos":[7666,7702]},{"pos":[7877,7887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The source <ph id=\"ph1\">`concurrent_priority_queue`</ph> object.","pos":[7901,7947],"source":" The source `concurrent_priority_queue` object."},{"pos":[7957,7969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7973,8028],"content":"A reference to this <ph id=\"ph1\">`concurrent_priority_queue`</ph> object.","source":"A reference to this `concurrent_priority_queue` object."},{"pos":[8038,8097],"content":"<bpt id=\"p1\">&lt;a name=\"push\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_priority_queue::push Method","linkify":"<a name=\"push\"></a>  concurrent_priority_queue::push Method","source":"<a name=\"push\"></a>  concurrent_priority_queue::push Method"},{"content":"Adds an element to the concurrent priority queue.","pos":[8101,8150]},{"content":"This method is concurrency-safe.","pos":[8151,8183]},{"pos":[8274,8284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be added to the concurrent priority queue.","pos":[8299,8356]},{"pos":[8366,8425],"content":"<bpt id=\"p1\">&lt;a name=\"size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_priority_queue::size Method","linkify":"<a name=\"size\"></a>  concurrent_priority_queue::size Method","source":"<a name=\"size\"></a>  concurrent_priority_queue::size Method"},{"content":"Returns the number of elements in the concurrent priority queue.","pos":[8429,8493]},{"content":"This method is concurrency-safe.","pos":[8494,8526]},{"pos":[8573,8585],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8589,8655],"content":"The number of elements in this <ph id=\"ph1\">`concurrent_priority_queue`</ph> object.","source":"The number of elements in this `concurrent_priority_queue` object."},{"pos":[8665,8672],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned size is guaranteed to include all elements added by calls to the function <ph id=\"ph1\">`push`</ph>.","pos":[8676,8770],"source":"The returned size is guaranteed to include all elements added by calls to the function `push`."},{"content":"However, it may not reflect results of pending concurrent operations.","pos":[8771,8840]},{"pos":[8850,8909],"content":"<bpt id=\"p1\">&lt;a name=\"swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_priority_queue::swap Method","linkify":"<a name=\"swap\"></a>  concurrent_priority_queue::swap Method","source":"<a name=\"swap\"></a>  concurrent_priority_queue::swap Method"},{"content":"Swaps the contents of two concurrent priority queues.","pos":[8913,8966]},{"content":"This method is not concurrency-safe.","pos":[8967,9003]},{"pos":[9072,9082],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`concurrent_priority_queue`</ph> object to swap contents with.","pos":[9098,9159],"source":" The `concurrent_priority_queue` object to swap contents with."},{"pos":[9169,9234],"content":"<bpt id=\"p1\">&lt;a name=\"try_pop\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_priority_queue::try_pop Method","linkify":"<a name=\"try_pop\"></a>  concurrent_priority_queue::try_pop Method","source":"<a name=\"try_pop\"></a>  concurrent_priority_queue::try_pop Method"},{"content":"Removes and returns the highest priority element from the queue if the queue is non-empty.","pos":[9238,9328]},{"content":"This method is concurrency-safe.","pos":[9329,9361]},{"pos":[9415,9425],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to a variable that will be populated with the highest priority element, if the queue is non-empty.","pos":[9440,9550]},{"pos":[9560,9572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9576,9624],"content":"<ph id=\"ph1\">`true`</ph> if a value was popped, <ph id=\"ph2\">`false`</ph> otherwise.","source":"`true` if a value was popped, `false` otherwise."},{"pos":[9633,9641],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[9645,9695],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../../parallel/concrt/parallel-containers-and-objects.md)</ept>","pos":[9698,9793],"source":" [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)"}],"content":"---\ntitle: \"concurrent_priority_queue Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concurrent_priority_queue/concurrency::concurrent_priority_queue\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"concurrent_priority_queue class\"\nms.assetid: 3e740381-0f4e-41fc-8b66-ad0bb55f17a3\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# concurrent_priority_queue Class\nThe `concurrent_priority_queue` class is a container that allows multiple threads to concurrently push and pop items. Items are popped in priority order where priority is determined by a functor supplied as a template argument.  \n  \n## Syntax  \n  \n```\ntemplate <typename T,\n    typename _Compare= std::less<T>,\n    typename _Ax = std::allocator<T>\n>,\n    typename _Ax = std::allocator<T>> class concurrent_priority_queue;\n```  \n  \n#### Parameters  \n `T`  \n The data type of the elements to be stored in the priority queue.  \n  \n `_Compare`  \n The type of the function object that can compare two element values as sort keys to determine their relative order in the priority queue. This argument is optional and the binary predicate `less<``T``>` is the default value.  \n  \n `_Ax`  \n The type that represents the stored allocator object that encapsulates details about the allocation and deallocation of memory for the concurrent priority queue. This argument is optional and the default value is `allocator<``T``>`.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`allocator_type`|A type that represents the allocator class for the concurrent priority queue.|  \n|`const_reference`|A type that represents a const reference to an element of the type stored in a concurrent priority queue.|  \n|`reference`|A type that represents a reference to an element of the type stored in a concurrent priority queue.|  \n|`size_type`|A type that counts the number of elements in a concurrent priority queue.|  \n|`value_type`|A type that represents the data type stored in a concurrent priority queue.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_priority_queue::concurrent_priority_queue Constructor](#ctor)|Overloaded. Constructs a concurrent priority queue.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_priority_queue::clear Method](#clear)|Erases all elements in the concurrent priority. This method is not concurrency-safe.|  \n|[concurrent_priority_queue::empty Method](#empty)|Tests if the concurrent priority queue is empty at the time this method is called. This method is concurrency-safe.|  \n|[concurrent_priority_queue::get_allocator Method](#get_allocator)|Returns a copy of the allocator used to construct the concurrent priority queue. This method is concurrency-safe.|  \n|[concurrent_priority_queue::push Method](#push)|Overloaded. Adds an element to the concurrent priority queue. This method is concurrency-safe.|  \n|[concurrent_priority_queue::size Method](#size)|Returns the number of elements in the concurrent priority queue. This method is concurrency-safe.|  \n|[concurrent_priority_queue::swap Method](#swap)|Swaps the contents of two concurrent priority queues. This method is not concurrency-safe.|  \n|[concurrent_priority_queue::try_pop Method](#try_pop)|Removes and returns the highest priority element from the queue if the queue is non-empty. This method is concurrency-safe.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_priority_queue::operator= Operator](#operator_eq)|Overloaded. Assigns the contents of another `concurrent_priority_queue` object to this one. This method is not concurrency-safe.|  \n  \n## Remarks  \n For detailed information on the `concurrent_priority_queue` class, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md).  \n  \n## Inheritance Hierarchy  \n `concurrent_priority_queue`  \n  \n## Requirements  \n **Header:** concurrent_priority_queue.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"clear\"></a>  concurrent_priority_queue::clear Method  \n Erases all elements in the concurrent priority. This method is not concurrency-safe.  \n  \n```\nvoid clear();\n```  \n  \n### Remarks  \n `clear` is not concurrency-safe. You must ensure that no other threads are invoking methods on the concurrent priority queue when you call this method. `clear` does not free memory.  \n  \n##  <a name=\"ctor\"></a>  concurrent_priority_queue::concurrent_priority_queue Constructor  \n Constructs a concurrent priority queue.  \n  \n```\nexplicit concurrent_priority_queue(\n    const allocator_type& _Al = allocator_type());\n\nexplicit concurrent_priority_queue(\n    size_type _Init_capacity,\n    const allocator_type& _Al = allocator_type());\n\ntemplate<typename _InputIterator>\nconcurrent_priority_queue(_InputIterator _Begin,\n    _InputIterator _End,\n    const allocator_type& _Al = allocator_type());\n\nconcurrent_priority_queue(\n    const concurrent_priority_queue& _Src);\n\nconcurrent_priority_queue(\n    const concurrent_priority_queue& _Src,\n    const allocator_type& _Al);\n\nconcurrent_priority_queue(\n    concurrent_priority_queue&& _Src);\n\nconcurrent_priority_queue(\n    concurrent_priority_queue&& _Src,\n    const allocator_type& _Al);\n```  \n  \n### Parameters  \n `_InputIterator`  \n The type of the input iterator.  \n  \n `_Al`  \n The allocator class to use with this object.  \n  \n `_Init_capacity`  \n The initial capacity of the `concurrent_priority_queue` object.  \n  \n `_Begin`  \n The position of the first element in the range of elements to be copied.  \n  \n `_End`  \n The position of the first element beyond the range of elements to be copied.  \n  \n `_Src`  \n The source `concurrent_priority_queue` object to copy or move elements from.  \n  \n### Remarks  \n All constructors store an allocator object `_Al` and initialize the priority queue.  \n  \n The first constructor specifies an empty initial priority queue and optionally specifies an allocator.  \n  \n The second constructor specifies a priority queue with an initial capacity `_Init_capacity` and optionally specifies an allocator.  \n  \n The third constructor specifies values supplied by the iterator range [ `_Begin`, `_End`) and optionally specifies an allocator.  \n  \n The fourth and fifth constructors specify a copy of the priority queue `_Src`.  \n  \n The sixth and seventh constructors specify a move of the priority queue `_Src`.  \n  \n##  <a name=\"empty\"></a>  concurrent_priority_queue::empty Method  \n Tests if the concurrent priority queue is empty at the time this method is called. This method is concurrency-safe.  \n  \n```\nbool empty() const;\n```  \n  \n### Return Value  \n `true` if the priority queue was empty at the moment the function was called, `false` otherwise.  \n  \n##  <a name=\"get_allocator\"></a>  concurrent_priority_queue::get_allocator Method  \n Returns a copy of the allocator used to construct the concurrent priority queue. This method is concurrency-safe.  \n  \n```\nallocator_type get_allocator() const;\n```  \n  \n### Return Value  \n A copy of the allocator used to construct the `concurrent_priority_queue` object.  \n  \n##  <a name=\"operator_eq\"></a>  concurrent_priority_queue::operator= Operator  \n Assigns the contents of another `concurrent_priority_queue` object to this one. This method is not concurrency-safe.  \n  \n```\nconcurrent_priority_queue& operator= (const concurrent_priority_queue& _Src);\n\nconcurrent_priority_queue& operator= (concurrent_priority_queue&& _Src);\n```  \n  \n### Parameters  \n `_Src`  \n The source `concurrent_priority_queue` object.  \n  \n### Return Value  \n A reference to this `concurrent_priority_queue` object.  \n  \n##  <a name=\"push\"></a>  concurrent_priority_queue::push Method  \n Adds an element to the concurrent priority queue. This method is concurrency-safe.  \n  \n```\nvoid push(const value_type& _Elem);\n\nvoid push(value_type&& _Elem);\n```  \n  \n### Parameters  \n `_Elem`  \n The element to be added to the concurrent priority queue.  \n  \n##  <a name=\"size\"></a>  concurrent_priority_queue::size Method  \n Returns the number of elements in the concurrent priority queue. This method is concurrency-safe.  \n  \n```\nsize_type size() const;\n```  \n  \n### Return Value  \n The number of elements in this `concurrent_priority_queue` object.  \n  \n### Remarks  \n The returned size is guaranteed to include all elements added by calls to the function `push`. However, it may not reflect results of pending concurrent operations.  \n  \n##  <a name=\"swap\"></a>  concurrent_priority_queue::swap Method  \n Swaps the contents of two concurrent priority queues. This method is not concurrency-safe.  \n  \n```\nvoid swap(concurrent_priority_queue& _Queue);\n```  \n  \n### Parameters  \n `_Queue`  \n The `concurrent_priority_queue` object to swap contents with.  \n  \n##  <a name=\"try_pop\"></a>  concurrent_priority_queue::try_pop Method  \n Removes and returns the highest priority element from the queue if the queue is non-empty. This method is concurrency-safe.  \n  \n```\nbool try_pop(reference _Elem);\n```  \n  \n### Parameters  \n `_Elem`  \n A reference to a variable that will be populated with the highest priority element, if the queue is non-empty.  \n  \n### Return Value  \n `true` if a value was popped, `false` otherwise.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)\n\n\n\n"}