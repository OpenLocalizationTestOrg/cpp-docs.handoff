{"nodes":[{"pos":[12,53],"content":"continue Statement (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"continue Statement (C++) | Microsoft Docs","pos":[0,41]}]},{"content":"continue Statement (C++)","pos":[644,668]},{"pos":[669,875],"content":"Forces transfer of control to the controlling expression of the smallest enclosing <bpt id=\"p1\">[</bpt>do<ept id=\"p1\">](../cpp/do-while-statement-cpp.md)</ept>, <bpt id=\"p2\">[</bpt>for<ept id=\"p2\">](../cpp/for-statement-cpp.md)</ept>, or <bpt id=\"p3\">[</bpt>while<ept id=\"p3\">](../cpp/while-statement-cpp.md)</ept> loop.","source":"Forces transfer of control to the controlling expression of the smallest enclosing [do](../cpp/do-while-statement-cpp.md), [for](../cpp/for-statement-cpp.md), or [while](../cpp/while-statement-cpp.md) loop."},{"content":"Syntax","pos":[884,890]},{"content":"Remarks","pos":[926,933]},{"content":"Any remaining statements in the current iteration are not executed.","pos":[937,1004]},{"content":"The next iteration of the loop is determined as follows:","pos":[1005,1061]},{"pos":[1071,1200],"content":"In a <ph id=\"ph1\">`do`</ph> or <ph id=\"ph2\">`while`</ph> loop, the next iteration starts by reevaluating the controlling expression of the <ph id=\"ph3\">`do`</ph> or <ph id=\"ph4\">`while`</ph> statement.","source":"In a `do` or `while` loop, the next iteration starts by reevaluating the controlling expression of the `do` or `while` statement."},{"content":"In a <ph id=\"ph1\">`for`</ph> loop (using the syntax <ph id=\"ph2\">`for`</ph>(<ph id=\"ph3\">`init-expr`</ph>; <ph id=\"ph4\">`cond-expr`</ph>; <ph id=\"ph5\">`loop-expr`</ph>)), the <ph id=\"ph6\">`loop-expr`</ph> clause is executed.","pos":[1210,1326],"source":"In a `for` loop (using the syntax `for`(`init-expr`; `cond-expr`; `loop-expr`)), the `loop-expr` clause is executed."},{"content":"Then the <ph id=\"ph1\">`cond-expr`</ph> clause is reevaluated and, depending on the result, the loop either ends or another iteration occurs.","pos":[1327,1449],"source":" Then the `cond-expr` clause is reevaluated and, depending on the result, the loop either ends or another iteration occurs."},{"pos":[1456,1591],"content":"The following example shows how the <ph id=\"ph1\">`continue`</ph> statement can be used to bypass sections of code and begin the next iteration of a loop.","source":"The following example shows how the `continue` statement can be used to bypass sections of code and begin the next iteration of a loop."},{"content":"Example","pos":[1600,1607]},{"content":"See Also","pos":[2051,2059]},{"content":"Jump Statements","pos":[2064,2079]},{"content":"Keywords","pos":[2117,2125]}],"content":"---\ntitle: \"continue Statement (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"continue\"\n  - \"continue_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"continue keyword [C++]\"\nms.assetid: 3c94ee57-f732-4c1d-8537-d0ce5382bfd4\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# continue Statement (C++)\nForces transfer of control to the controlling expression of the smallest enclosing [do](../cpp/do-while-statement-cpp.md), [for](../cpp/for-statement-cpp.md), or [while](../cpp/while-statement-cpp.md) loop.  \n  \n## Syntax  \n  \n```  \ncontinue;  \n```  \n  \n## Remarks  \n Any remaining statements in the current iteration are not executed. The next iteration of the loop is determined as follows:  \n  \n-   In a `do` or `while` loop, the next iteration starts by reevaluating the controlling expression of the `do` or `while` statement.  \n  \n-   In a `for` loop (using the syntax `for`(`init-expr`; `cond-expr`; `loop-expr`)), the `loop-expr` clause is executed. Then the `cond-expr` clause is reevaluated and, depending on the result, the loop either ends or another iteration occurs.  \n  \n The following example shows how the `continue` statement can be used to bypass sections of code and begin the next iteration of a loop.  \n  \n## Example  \n  \n```  \n// continue_statement.cpp  \n#include <stdio.h>  \nint main()  \n{  \n    int i = 0;  \n    do  \n    {  \n        i++;  \n        printf_s(\"before the continue\\n\");  \n        continue;  \n        printf(\"after the continue, should never print\\n\");  \n     } while (i < 3);  \n  \n     printf_s(\"after the do loop\\n\");  \n}  \n```  \n  \n```Output  \nbefore the continue  \nbefore the continue  \nbefore the continue  \nafter the do loop  \n```  \n  \n## See Also  \n [Jump Statements](../cpp/jump-statements-cpp.md)   \n [Keywords](../cpp/keywords-cpp.md)"}