{"nodes":[{"pos":[12,62],"content":"A.31   Thread-Safe Lock Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"A.31   Thread-Safe Lock Functions | Microsoft Docs","pos":[0,50]}]},{"content":"A.31   Thread-Safe Lock Functions","pos":[543,576]},{"pos":[577,806],"content":"The following C++ example demonstrates how to initialize an array of locks in a parallel region by using <ph id=\"ph1\">`omp_init_lock`</ph> (<bpt id=\"p1\">[</bpt>Section 3.2.1<ept id=\"p1\">](../../parallel/openmp/3-2-1-omp-init-lock-and-omp-init-nest-lock-functions.md)</ept> on page 42).","source":"The following C++ example demonstrates how to initialize an array of locks in a parallel region by using `omp_init_lock` ([Section 3.2.1](../../parallel/openmp/3-2-1-omp-init-lock-and-omp-init-nest-lock-functions.md) on page 42)."},{"content":"Example","pos":[815,822]},{"content":"Code","pos":[832,836]}],"content":"---\ntitle: \"A.31   Thread-Safe Lock Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 3ad89eb8-076c-405a-be5e-88d3d707a832\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# A.31   Thread-Safe Lock Functions\nThe following C++ example demonstrates how to initialize an array of locks in a parallel region by using `omp_init_lock` ([Section 3.2.1](../../parallel/openmp/3-2-1-omp-init-lock-and-omp-init-nest-lock-functions.md) on page 42).  \n  \n## Example  \n  \n### Code  \n  \n```  \n// A_13_omp_init_lock.cpp  \n// compile with: /openmp  \n#include <omp.h>  \n  \nomp_lock_t *new_locks() {  \n   int i;  \n   omp_lock_t *lock = new omp_lock_t[1000];  \n   #pragma omp parallel for private(i)  \n   for (i = 0 ; i < 1000 ; i++)  \n      omp_init_lock(&lock[i]);  \n  \n   return lock;  \n}  \n  \nint main () {}  \n```"}