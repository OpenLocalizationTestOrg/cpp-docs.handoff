{"nodes":[{"pos":[12,41],"content":"future Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"future Class | Microsoft Docs","pos":[0,29]}]},{"content":"future Class","pos":[587,599]},{"pos":[600,642],"content":"Describes an <bpt id=\"p1\">*</bpt>asynchronous return object<ept id=\"p1\">*</ept>.","source":"Describes an *asynchronous return object*."},{"content":"Syntax","pos":[651,657]},{"content":"Remarks","pos":[713,720]},{"content":"Each standard <bpt id=\"p1\">*</bpt>asynchronous provider<ept id=\"p1\">*</ept> returns an object whose type is an instantiation of this template.","pos":[724,828],"source":"Each standard *asynchronous provider* returns an object whose type is an instantiation of this template."},{"content":"A <ph id=\"ph1\">`future`</ph> object provides the only access to the asynchronous provider that it is associated with.","pos":[829,928],"source":" A `future` object provides the only access to the asynchronous provider that it is associated with."},{"content":"If you need multiple asynchronous return objects that are associated with the same asynchronous provider, copy the <ph id=\"ph1\">`future`</ph> object to a <bpt id=\"p1\">[</bpt>shared_future<ept id=\"p1\">](../standard-library/shared-future-class.md)</ept> object.","pos":[929,1132],"source":" If you need multiple asynchronous return objects that are associated with the same asynchronous provider, copy the `future` object to a [shared_future](../standard-library/shared-future-class.md) object."},{"content":"Members","pos":[1141,1148]},{"content":"Public Constructors","pos":[1158,1177]},{"content":"Name","pos":[1184,1188]},{"content":"Description","pos":[1189,1200]},{"content":"future::future Constructor","pos":[1239,1265]},{"pos":[1296,1325],"content":"Constructs a <ph id=\"ph1\">`future`</ph> object.","source":"Constructs a `future` object."},{"content":"Public Methods","pos":[1336,1350]},{"content":"Name","pos":[1357,1361]},{"content":"Description","pos":[1362,1373]},{"content":"future::get","pos":[1412,1423]},{"content":"Retrieves the result that is stored in the associated asynchronous state.","pos":[1446,1519]},{"content":"future::share","pos":[1525,1538]},{"pos":[1563,1604],"content":"Converts the object to a <ph id=\"ph1\">`shared_future`</ph>.","source":"Converts the object to a `shared_future`."},{"content":"future::valid","pos":[1610,1623]},{"content":"Specifies whether the object is not empty.","pos":[1648,1690]},{"content":"future::wait","pos":[1696,1708]},{"content":"Blocks the current thread until the associated asynchronous state is ready.","pos":[1732,1807]},{"content":"future::wait_for","pos":[1813,1829]},{"content":"Blocks until the associated asynchronous state is ready or until the specified time has elapsed.","pos":[1857,1953]},{"content":"future::wait_until","pos":[1959,1977]},{"content":"Blocks until the associated asynchronous state is ready or until a specified point in time.","pos":[2007,2098]},{"content":"Public Operators","pos":[2109,2125]},{"content":"Name","pos":[2132,2136]},{"content":"Description","pos":[2137,2148]},{"content":"future::operator=","pos":[2187,2204]},{"content":"Transfers the associated asynchronous state from a specified object.","pos":[2228,2296]},{"content":"Requirements","pos":[2306,2318]},{"pos":[2322,2340],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> future","source":"**Header:** future"},{"pos":[2347,2365],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2418,2444],"content":"future::future Constructor"},{"pos":[2448,2477],"content":"Constructs a <ph id=\"ph1\">`future`</ph> object.","source":"Constructs a `future` object."},{"content":"Parameters","pos":[2552,2562]},{"content":"A <ph id=\"ph1\">`future`</ph> object.","pos":[2577,2595],"source":" A `future` object."},{"content":"Remarks","pos":[2605,2612]},{"pos":[2616,2709],"content":"The first constructor constructs a <ph id=\"ph1\">`future`</ph> object that has no associated asynchronous state.","source":"The first constructor constructs a `future` object that has no associated asynchronous state."},{"content":"The second constructor constructs a <ph id=\"ph1\">`future`</ph> object and transfers the associated asynchronous state from <ph id=\"ph2\">`Other`</ph>.","pos":[2716,2829],"source":"The second constructor constructs a `future` object and transfers the associated asynchronous state from `Other`."},{"content":"no longer has an associated asynchronous state.","pos":[2838,2885]},{"pos":[2930,2941],"content":"future::get"},{"content":"Retrieves the result that is stored in the associated asynchronous state.","pos":[2945,3018]},{"content":"Return Value","pos":[3051,3063]},{"content":"If the result is an exception, the method rethrows it.","pos":[3067,3121]},{"content":"Otherwise, the result is returned.","pos":[3122,3156]},{"content":"Remarks","pos":[3166,3173]},{"content":"Before it retrieves the result, this method blocks the current thread until the associated asynchronous state is ready.","pos":[3177,3296]},{"pos":[3303,3472],"content":"For the partial specialization <ph id=\"ph1\">`future&lt;Ty&amp;&gt;`</ph>, the stored value is effectively a reference to the object that was passed to the asynchronous provider as the return value.","source":"For the partial specialization `future<Ty&>`, the stored value is effectively a reference to the object that was passed to the asynchronous provider as the return value."},{"pos":[3479,3575],"content":"Because no stored value exists for the specialization <ph id=\"ph1\">`future&lt;void&gt;`</ph>, the method returns <ph id=\"ph2\">`void`</ph>.","source":"Because no stored value exists for the specialization `future<void>`, the method returns `void`."},{"content":"In other specializations, the method moves its return value from the stored value.","pos":[3582,3664]},{"content":"Therefore, call this method only once.","pos":[3665,3703]},{"pos":[3749,3766],"content":"future::operator="},{"content":"Transfers an associated asynchronous state from a specified object.","pos":[3770,3837]},{"content":"Parameters","pos":[3904,3914]},{"content":"A <ph id=\"ph1\">`future`</ph> object.","pos":[3929,3947],"source":" A `future` object."},{"content":"Return Value","pos":[3957,3969]},{"content":"Remarks","pos":[3990,3997]},{"pos":[4001,4076],"content":"After the transfer, <ph id=\"ph1\">`Right`</ph> no longer has an associated asynchronous state.","source":"After the transfer, `Right` no longer has an associated asynchronous state."},{"pos":[4123,4136],"content":"future::share"},{"pos":[4140,4232],"content":"Converts the object to a <bpt id=\"p1\">[</bpt>shared_future<ept id=\"p1\">](../standard-library/shared-future-class.md)</ept> object.","source":"Converts the object to a [shared_future](../standard-library/shared-future-class.md) object."},{"content":"Return Value","pos":[4282,4294]},{"pos":[4373,4386],"content":"future::valid"},{"content":"Specifies whether the object has an associated asynchronous state.","pos":[4390,4456]},{"content":"Return Value","pos":[4502,4514]},{"pos":[4525,4596],"content":"if the object has an associated asynchronous state; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if the object has an associated asynchronous state; otherwise, `false`."},{"pos":[4642,4654],"content":"future::wait"},{"pos":[4658,4735],"content":"Blocks the current thread until the associated asynchronous state is <bpt id=\"p1\">*</bpt>ready<ept id=\"p1\">*</ept>.","source":"Blocks the current thread until the associated asynchronous state is *ready*."},{"content":"Remarks","pos":[4780,4787]},{"pos":[4791,4918],"content":"An associated asynchronous state is <bpt id=\"p1\">*</bpt>ready<ept id=\"p1\">*</ept> only if its asynchronous provider has stored a return value or stored an exception.","source":"An associated asynchronous state is *ready* only if its asynchronous provider has stored a return value or stored an exception."},{"pos":[4968,4984],"content":"future::wait_for"},{"pos":[4988,5112],"content":"Blocks the current thread until the associated asynchronous state is <bpt id=\"p1\">*</bpt>ready<ept id=\"p1\">*</ept> or until a specified time interval has elapsed.","source":"Blocks the current thread until the associated asynchronous state is *ready* or until a specified time interval has elapsed."},{"content":"Parameters","pos":[5247,5257]},{"content":"A <bpt id=\"p1\">[</bpt>chrono::duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> object that specifies a maximum time interval that the thread blocks.","pos":[5275,5404],"source":" A [chrono::duration](../standard-library/duration-class.md) object that specifies a maximum time interval that the thread blocks."},{"content":"Return Value","pos":[5414,5426]},{"pos":[5430,5551],"content":"A <bpt id=\"p1\">[</bpt>future_status<ept id=\"p1\">](../standard-library/future-enums.md#future_status_enumeration)</ept> that indicates the reason for returning.","source":"A [future_status](../standard-library/future-enums.md#future_status_enumeration) that indicates the reason for returning."},{"content":"Remarks","pos":[5561,5568]},{"content":"An associated asynchronous state is ready only if its asynchronous provider has stored a return value or stored an exception.","pos":[5572,5697]},{"pos":[5749,5767],"content":"future::wait_until"},{"pos":[5771,5886],"content":"Blocks the current thread until the associated asynchronous state is <bpt id=\"p1\">*</bpt>ready<ept id=\"p1\">*</ept> or until after a specified time point.","source":"Blocks the current thread until the associated asynchronous state is *ready* or until after a specified time point."},{"content":"Parameters","pos":[6036,6046]},{"content":"A <bpt id=\"p1\">[</bpt>chrono::time_point<ept id=\"p1\">](../standard-library/time-point-class.md)</ept> object that specifies a time after which the thread can unblock.","pos":[6064,6192],"source":" A [chrono::time_point](../standard-library/time-point-class.md) object that specifies a time after which the thread can unblock."},{"content":"Return Value","pos":[6202,6214]},{"pos":[6218,6339],"content":"A <bpt id=\"p1\">[</bpt>future_status<ept id=\"p1\">](../standard-library/future-enums.md#future_status_enumeration)</ept> that indicates the reason for returning.","source":"A [future_status](../standard-library/future-enums.md#future_status_enumeration) that indicates the reason for returning."},{"content":"Remarks","pos":[6349,6356]},{"pos":[6360,6487],"content":"An associated asynchronous state is <bpt id=\"p1\">*</bpt>ready<ept id=\"p1\">*</ept> only if its asynchronous provider has stored a return value or stored an exception.","source":"An associated asynchronous state is *ready* only if its asynchronous provider has stored a return value or stored an exception."},{"content":"See Also","pos":[6496,6504]},{"content":"Header Files Reference","pos":[6509,6531]},{"content":"future&gt;","pos":[6598,6605],"source":"future>"}],"content":"---\ntitle: \"future Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"future/std::future\"\ndev_langs: \n  - \"C++\"\nms.assetid: 495e82c3-5341-4e37-87dd-b40107fbdfb6\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# future Class\nDescribes an *asynchronous return object*.  \n  \n## Syntax  \n  \n```\ntemplate <class Ty>\nclass future;\n```  \n  \n## Remarks  \n Each standard *asynchronous provider* returns an object whose type is an instantiation of this template. A `future` object provides the only access to the asynchronous provider that it is associated with. If you need multiple asynchronous return objects that are associated with the same asynchronous provider, copy the `future` object to a [shared_future](../standard-library/shared-future-class.md) object.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[future::future Constructor](#future__future_constructor)|Constructs a `future` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[future::get](#future__get_method)|Retrieves the result that is stored in the associated asynchronous state.|  \n|[future::share](#future__share_method)|Converts the object to a `shared_future`.|  \n|[future::valid](#future__valid_method)|Specifies whether the object is not empty.|  \n|[future::wait](#future__wait_method)|Blocks the current thread until the associated asynchronous state is ready.|  \n|[future::wait_for](#future__wait_for_method)|Blocks until the associated asynchronous state is ready or until the specified time has elapsed.|  \n|[future::wait_until](#future__wait_until_method)|Blocks until the associated asynchronous state is ready or until a specified point in time.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[future::operator=](#future__operator_eq)|Transfers the associated asynchronous state from a specified object.|  \n  \n## Requirements  \n **Header:** future  \n  \n **Namespace:** std  \n  \n##  <a name=\"future__future_constructor\"></a>  future::future Constructor  \n Constructs a `future` object.  \n  \n```\nfuture() noexcept;\nfuture(future&& Other) noexcept;\n```  \n  \n### Parameters  \n `Other`  \n A `future` object.  \n  \n### Remarks  \n The first constructor constructs a `future` object that has no associated asynchronous state.  \n  \n The second constructor constructs a `future` object and transfers the associated asynchronous state from `Other`. `Other` no longer has an associated asynchronous state.  \n  \n##  <a name=\"future__get_method\"></a>  future::get  \n Retrieves the result that is stored in the associated asynchronous state.  \n  \n```\nTy get();\n```  \n  \n### Return Value  \n If the result is an exception, the method rethrows it. Otherwise, the result is returned.  \n  \n### Remarks  \n Before it retrieves the result, this method blocks the current thread until the associated asynchronous state is ready.  \n  \n For the partial specialization `future<Ty&>`, the stored value is effectively a reference to the object that was passed to the asynchronous provider as the return value.  \n  \n Because no stored value exists for the specialization `future<void>`, the method returns `void`.  \n  \n In other specializations, the method moves its return value from the stored value. Therefore, call this method only once.  \n  \n##  <a name=\"future__operator_eq\"></a>  future::operator=  \n Transfers an associated asynchronous state from a specified object.  \n  \n```\nfuture& operator=(future&& Right) noexcept;\n```  \n  \n### Parameters  \n `Right`  \n A `future` object.  \n  \n### Return Value  \n `*this`  \n  \n### Remarks  \n After the transfer, `Right` no longer has an associated asynchronous state.  \n  \n##  <a name=\"future__share_method\"></a>  future::share  \n Converts the object to a [shared_future](../standard-library/shared-future-class.md) object.  \n  \n```\nshared_future<Ty> share();\n```  \n  \n### Return Value  \n `shared_future(move(*this))`  \n  \n##  <a name=\"future__valid_method\"></a>  future::valid  \n Specifies whether the object has an associated asynchronous state.  \n  \n```\nbool valid() noexcept;\n```  \n  \n### Return Value  \n `true` if the object has an associated asynchronous state; otherwise, `false`.  \n  \n##  <a name=\"future__wait_method\"></a>  future::wait  \n Blocks the current thread until the associated asynchronous state is *ready*.  \n  \n```cpp\nvoid wait() const;\n```  \n  \n### Remarks  \n An associated asynchronous state is *ready* only if its asynchronous provider has stored a return value or stored an exception.  \n  \n##  <a name=\"future__wait_for_method\"></a>  future::wait_for  \n Blocks the current thread until the associated asynchronous state is *ready* or until a specified time interval has elapsed.  \n  \n```\ntemplate <class Rep, class Period>\nfuture_status wait_for(const chrono::duration<Rep, Period>& Rel_time) const;\n```  \n  \n### Parameters  \n `Rel_time`  \n A [chrono::duration](../standard-library/duration-class.md) object that specifies a maximum time interval that the thread blocks.  \n  \n### Return Value  \n A [future_status](../standard-library/future-enums.md#future_status_enumeration) that indicates the reason for returning.  \n  \n### Remarks  \n An associated asynchronous state is ready only if its asynchronous provider has stored a return value or stored an exception.  \n  \n##  <a name=\"future__wait_until_method\"></a>  future::wait_until  \n Blocks the current thread until the associated asynchronous state is *ready* or until after a specified time point.  \n  \n```cpp\ntemplate <class Clock, class Duration>\nfuture_status wait_until(const chrono::time_point<Clock, Duration>& Abs_time) const;\n```  \n  \n### Parameters  \n `Abs_time`  \n A [chrono::time_point](../standard-library/time-point-class.md) object that specifies a time after which the thread can unblock.  \n  \n### Return Value  \n A [future_status](../standard-library/future-enums.md#future_status_enumeration) that indicates the reason for returning.  \n  \n### Remarks  \n An associated asynchronous state is *ready* only if its asynchronous provider has stored a return value or stored an exception.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<future>](../standard-library/future.md)\n\n\n\n"}