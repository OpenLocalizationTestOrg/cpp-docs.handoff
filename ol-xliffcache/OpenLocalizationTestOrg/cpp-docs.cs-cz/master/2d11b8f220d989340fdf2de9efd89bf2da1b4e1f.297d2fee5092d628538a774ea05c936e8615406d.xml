{"nodes":[{"pos":[12,40],"content":"fmod, fmodf | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fmod, fmodf | Microsoft Docs","pos":[0,28]}]},{"pos":[1080,1091],"content":"fmod, fmodf","linkify":"fmod, fmodf","nodes":[{"content":"fmod, fmodf","pos":[0,11]}]},{"content":"Calculates the floating-point remainder.","pos":[1092,1132]},{"pos":[1141,1147],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1410,1420],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`y`</ph>","pos":[1424,1432],"source":"`x`, `y`"},{"content":"Floating-point values.","pos":[1436,1458]},{"pos":[1467,1479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`fmod`</ph> returns the floating-point remainder of <ph id=\"ph2\">`x`</ph><ph id=\"ph3\"> / </ph><ph id=\"ph4\">`y`</ph>.","pos":[1483,1540],"source":"`fmod` returns the floating-point remainder of `x` / `y`."},{"content":"If the value of <ph id=\"ph1\">`y`</ph> is 0.0, <ph id=\"ph2\">`fmod`</ph> returns a quiet NaN.","pos":[1541,1596],"source":" If the value of `y` is 0.0, `fmod` returns a quiet NaN."},{"content":"For information about representation of a quiet NaN by the <ph id=\"ph1\">`printf`</ph> family, see <bpt id=\"p1\">[</bpt>printf<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept>.","pos":[1597,1758],"source":" For information about representation of a quiet NaN by the `printf` family, see [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)."},{"pos":[1767,1774],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1778,2014],"content":"The <ph id=\"ph1\">`fmod`</ph> function calculates the floating-point remainder <ph id=\"ph2\">`f`</ph> of <ph id=\"ph3\">`x`</ph><ph id=\"ph4\"> / </ph><ph id=\"ph5\">`y`</ph> such that <ph id=\"ph6\">`x`</ph><ph id=\"ph7\"> = </ph><ph id=\"ph8\">`i`</ph> <ph id=\"ph9\">`*`</ph> <ph id=\"ph10\">`y`</ph><ph id=\"ph11\"> + </ph><ph id=\"ph12\">`f`</ph>, where <ph id=\"ph13\">`i`</ph> is an integer, <ph id=\"ph14\">`f`</ph> has the same sign as <ph id=\"ph15\">`x`</ph>, and the absolute value of <ph id=\"ph16\">`f`</ph> is less than the absolute value of <ph id=\"ph17\">`y`</ph>.","source":"The `fmod` function calculates the floating-point remainder `f` of `x` / `y` such that `x` = `i` `*` `y` + `f`, where `i` is an integer, `f` has the same sign as `x`, and the absolute value of `f` is less than the absolute value of `y`."},{"content":"C++ allows overloading, so you can call overloads of <ph id=\"ph1\">`fmod`</ph>.","pos":[2021,2081],"source":"C++ allows overloading, so you can call overloads of `fmod`."},{"content":"In a C program, <ph id=\"ph1\">`fmod`</ph> always takes two doubles and returns a double.","pos":[2082,2151],"source":" In a C program, `fmod` always takes two doubles and returns a double."},{"pos":[2160,2172],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[2179,2187]},{"content":"Required header","pos":[2188,2203]},{"pos":[2249,2264],"content":"<ph id=\"ph1\">`fmod`</ph>, <ph id=\"ph2\">`fmodf`</ph>","source":"`fmod`, `fmodf`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[2265,2274],"source":"\\<math.h>"},{"pos":[2282,2406],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2415,2422],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2783,2808],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[2812,2914],"content":"<bpt id=\"p1\">[</bpt>System::Math::IEEERemainder<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.math.ieeeremainder.aspx)</ept>","source":"[System::Math::IEEERemainder](https://msdn.microsoft.com/en-us/library/system.math.ieeeremainder.aspx)"},{"pos":[2923,2931],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[2935,3011],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ceil, ceilf, ceill<ept id=\"p1\">](../../c-runtime-library/reference/ceil-ceilf-ceill.md)</ept><ph id=\"ph1\"> </ph>","pos":[3014,3091],"source":" [ceil, ceilf, ceill](../../c-runtime-library/reference/ceil-ceilf-ceill.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fabs, fabsf, fabsl<ept id=\"p1\">](../../c-runtime-library/reference/fabs-fabsf-fabsl.md)</ept><ph id=\"ph1\"> </ph>","pos":[3094,3171],"source":" [fabs, fabsf, fabsl](../../c-runtime-library/reference/fabs-fabsf-fabsl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>floor, floorf, floorl<ept id=\"p1\">](../../c-runtime-library/reference/floor-floorf-floorl.md)</ept><ph id=\"ph1\"> </ph>","pos":[3174,3257],"source":" [floor, floorf, floorl](../../c-runtime-library/reference/floor-floorf-floorl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_CIfmod<ept id=\"p1\">](../../c-runtime-library/cifmod.md)</ept>","pos":[3260,3305],"source":" [_CIfmod](../../c-runtime-library/cifmod.md)"}],"content":"---\ntitle: \"fmod, fmodf | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"fmod\"\n  - \"fmodf\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"fmod\"\n  - \"_fmodl\"\n  - \"fmodf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"calculating floating-point remainders\"\n  - \"fmodf function\"\n  - \"fmod function\"\n  - \"floating-point numbers, calculating remainders\"\nms.assetid: 6962d369-d11f-40b1-a6d7-6f67239f8a23\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# fmod, fmodf\nCalculates the floating-point remainder.  \n  \n## Syntax  \n  \n```  \ndouble fmod(   \n   double x,  \n   double y   \n);  \nfloat fmod(  \n   float x,  \n   float y   \n);  // C++ only  \nlong double fmod(  \n   long double x,  \n   long double y  \n);  // C++ only  \nfloat fmodf(   \n   float x,  \n   float y   \n);  \n```  \n  \n#### Parameters  \n `x`, `y`  \n Floating-point values.  \n  \n## Return Value  \n `fmod` returns the floating-point remainder of `x` / `y`. If the value of `y` is 0.0, `fmod` returns a quiet NaN. For information about representation of a quiet NaN by the `printf` family, see [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md).  \n  \n## Remarks  \n The `fmod` function calculates the floating-point remainder `f` of `x` / `y` such that `x` = `i` `*` `y` + `f`, where `i` is an integer, `f` has the same sign as `x`, and the absolute value of `f` is less than the absolute value of `y`.  \n  \n C++ allows overloading, so you can call overloads of `fmod`. In a C program, `fmod` always takes two doubles and returns a double.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`fmod`, `fmodf`|\\<math.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fmod.c  \n// This program displays a floating-point remainder.  \n  \n#include <math.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   double w = -10.0, x = 3.0, z;  \n  \n   z = fmod( w, x );  \n   printf( \"The remainder of %.2f / %.2f is %f\\n\", w, x, z );  \n}  \n```  \n  \n```Output  \nThe remainder of -10.00 / 3.00 is -1.000000  \n```  \n  \n## .NET Framework Equivalent  \n [System::Math::IEEERemainder](https://msdn.microsoft.com/en-us/library/system.math.ieeeremainder.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [ceil, ceilf, ceill](../../c-runtime-library/reference/ceil-ceilf-ceill.md)   \n [fabs, fabsf, fabsl](../../c-runtime-library/reference/fabs-fabsf-fabsl.md)   \n [floor, floorf, floorl](../../c-runtime-library/reference/floor-floorf-floorl.md)   \n [_CIfmod](../../c-runtime-library/cifmod.md)"}