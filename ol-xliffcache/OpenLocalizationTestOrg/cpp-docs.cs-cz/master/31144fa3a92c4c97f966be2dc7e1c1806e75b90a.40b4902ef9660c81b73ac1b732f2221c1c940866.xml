{"nodes":[{"pos":[12,43],"content":"seed_seq Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"seed_seq Class | Microsoft Docs","pos":[0,31]}]},{"content":"seed_seq Class","pos":[715,729]},{"content":"Stores a vector of unsigned integer values that can supply a randomized seed for a random-number engine.","pos":[730,834]},{"content":"Syntax","pos":[843,849]},{"content":"Types","pos":[1546,1551]},{"content":"The type of the elements of the seed sequence.","pos":[1594,1640]},{"content":"A 32-bit unsigned integer type.","pos":[1641,1672]},{"content":"Constructors","pos":[1681,1693]},{"content":"Default constructor, initializes to have an empty internal sequence.","pos":[1714,1782]},{"content":"Uses <ph id=\"ph1\">`initlist`</ph> to set the internal sequence.","pos":[1858,1903],"source":"Uses `initlist` to set the internal sequence."},{"content":"must be an integer type.","pos":[1927,1951]},{"content":"Initializes the internal sequence using all elements in the input iterator range provided.","pos":[2049,2139]},{"content":"must be an integer type.","pos":[2203,2227]},{"content":"Members","pos":[2236,2243]},{"content":"Generating Functions","pos":[2253,2273]},{"content":"Populates the elements of the provided sequence using an internal algorithm.","pos":[2397,2473]},{"content":"This algorithm is affected by the internal sequence with which <ph id=\"ph1\">`seed_seq`</ph> was initialized.","pos":[2474,2564],"source":" This algorithm is affected by the internal sequence with which `seed_seq` was initialized."},{"content":"Does nothing if <ph id=\"ph1\">`begin == end`</ph>.","pos":[2591,2622],"source":"Does nothing if `begin == end`."},{"content":"Property Functions","pos":[2632,2650]},{"content":"Returns the number of elements in the <ph id=\"ph1\">`seed_seq`</ph>.","pos":[2680,2729],"source":"Returns the number of elements in the `seed_seq`."},{"content":"Copies the internal sequence into the output iterator <ph id=\"ph1\">`dest`</ph>.","pos":[2811,2872],"source":"Copies the internal sequence into the output iterator `dest`."},{"content":"Example","pos":[2881,2888]},{"content":"The following code example exercises the three constructors and generates output from the resulting <ph id=\"ph1\">`seed_seq`</ph> instances when assigned to an array.","pos":[2892,3039],"source":"The following code example exercises the three constructors and generates output from the resulting `seed_seq` instances when assigned to an array."},{"content":"For an example that uses <ph id=\"ph1\">`seed_seq`</ph> with a random number generator, see <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[3040,3155],"source":" For an example that uses `seed_seq` with a random number generator, see [\\<random>](../standard-library/random.md)."},{"content":"Output","pos":[3994,4000]},{"content":"Remarks","pos":[4553,4560]},{"content":"Member functions of this class do not throw exceptions.","pos":[4564,4619]},{"content":"Requirements","pos":[4628,4640]},{"pos":[4644,4665],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[4672,4690],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[4699,4707]},{"content":"random&gt;","pos":[4714,4721],"source":"random>"}],"content":"---\ntitle: \"seed_seq Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"tr1::seed_seq\"\n  - \"std::tr1::seed_seq\"\n  - \"tr1.seed_seq\"\n  - \"seed_seq\"\n  - \"std.tr1.seed_seq\"\n  - \"random/std::tr1::seed_seq\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"seed_seq class\"\nms.assetid: cba114f7-9ac6-4f2f-b773-9c84805401d6\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# seed_seq Class\nStores a vector of unsigned integer values that can supply a randomized seed for a random-number engine.  \n  \n## Syntax  \n```  \nclass seed_seq  \n   {  \n   public:  // types  \n   typedef unsigned int result_type;  \n   // constructors  \n   seed_seq();\n   template <class T>  \n   seed_seq(initializer_list<T>  \n   initlist);\n   template <class InputIterator>  \n   seed_seq(InputIterator begin, InputIterator end);\n   // generating functions  \n   template <class RandomAccessIterator>  \n   void generate(RandomAccessIterator begin, RandomAccessIterator end);\n   // property functions  \n   size_t size() const;\n   template <class OutputIterator>  \n   void param(OutputIterator dest) const;\n   // no copy functions  \n   seed_seq(const seed_seq&) = delete;  \n   void operator=(const seed_seq&) = delete;  \n   };  \n```  \n## Types  \n `typedef unsigned int result_type;`   \nThe type of the elements of the seed sequence. A 32-bit unsigned integer type.  \n  \n## Constructors  \n `seed_seq();`   \nDefault constructor, initializes to have an empty internal sequence.  \n  \n `template<class T>`   \n `seed_seq(initializer_list<T> initlist);`   \nUses `initlist` to set the internal sequence.                   \n`T` must be an integer type.  \n  \n `template<class InputIterator>`   \n `seed_seq(InputIterator begin, InputIterator end);`   \nInitializes the internal sequence using all elements in the input iterator range provided.                  \n`iterator_traits<InputIterator>::value_type` must be an integer type.  \n  \n## Members  \n  \n### Generating Functions  \n `template<class RandomAccessIterator> void generate(RandomAccessIterator begin,          RandomAccessIterator end);`   \nPopulates the elements of the provided sequence using an internal algorithm. This algorithm is affected by the internal sequence with which `seed_seq` was initialized.                          \nDoes nothing if `begin == end`.  \n  \n### Property Functions  \n `size_t size() const;`   \nReturns the number of elements in the `seed_seq`.  \n  \n `template<class OutputIterator> void param(OutputIterator dest) const;`   \nCopies the internal sequence into the output iterator `dest`.  \n  \n## Example  \n The following code example exercises the three constructors and generates output from the resulting `seed_seq` instances when assigned to an array. For an example that uses `seed_seq` with a random number generator, see [\\<random>](../standard-library/random.md).  \n  \n```cpp  \n#include <iostream>  \n#include <random>  \n#include <string>  \n#include <array>  \n  \nusing namespace std;  \n  \nvoid test(const seed_seq& sseq) {  \n    cout << endl << \"seed_seq::size(): \" << sseq.size() << endl;  \n  \n    cout << \"seed_seq::param(): \";  \n    ostream_iterator<unsigned int> out(cout, \" \");  \n    sseq.param(out);  \n    cout << endl;  \n  \n    cout << \"Generating a sequence of 5 elements into an array: \" << endl;  \n    array<unsigned int, 5> seq;  \n    sseq.generate(seq.begin(), seq.end());  \n    for (unsigned x : seq) { cout << x << endl; }  \n}  \n  \nint main()  \n{  \n    seed_seq seed1;  \n    test(seed1);  \n  \n    seed_seq seed2 = { 1701, 1729, 1791 };  \n    test(seed2);  \n  \n    string sstr = \"A B C D\"; // seed string  \n    seed_seq seed3(sstr.begin(), sstr.end());  \n    test(seed3);  \n}  \n```  \n  \n## Output  \n  \n```Output  \n  \nseed_seq::size(): 0  \nseed_seq::param():  \nGenerating a sequence of 5 elements into an array:  \n505382999  \n163489202  \n3932644188  \n763126080  \n73937346  \n  \nseed_seq::size(): 3  \nseed_seq::param(): 1701 1729 1791  \nGenerating a sequence of 5 elements into an array:  \n1730669648  \n1954224479  \n2809786021  \n1172893117  \n2393473414  \n  \nseed_seq::size(): 7  \nseed_seq::param(): 65 32 66 32 67 32 68  \nGenerating a sequence of 5 elements into an array:  \n3139879222  \n3775111734  \n1084804564  \n2485037668  \n1985355432  \n```  \n  \n## Remarks  \n Member functions of this class do not throw exceptions.  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n"}