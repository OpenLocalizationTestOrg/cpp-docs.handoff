{"nodes":[{"pos":[12,65],"content":"hash_multiset::equal_range (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multiset::equal_range (STL-CLR) | Microsoft Docs","pos":[0,53]}]},{"content":"hash_multiset::equal_range (STL/CLR)","pos":[660,696]},{"content":"Finds range that matches a specified key.","pos":[697,738]},{"content":"Syntax","pos":[747,753]},{"content":"Parameters","pos":[841,851]},{"content":"key","pos":[855,858]},{"content":"Key value to search for.","pos":[862,886]},{"content":"Remarks","pos":[895,902]},{"content":"The member function returns a pair of iterators <ph id=\"ph1\">`cliext::pair&lt;iterator, iterator&gt;(`</ph> <bpt id=\"p1\">[</bpt>hash_multiset::lower_bound (STL/CLR)<ept id=\"p1\">](../dotnet/hash-multiset-lower-bound-stl-clr.md)</ept><ph id=\"ph2\">`(``key``),`</ph> <bpt id=\"p2\">[</bpt>hash_multiset::upper_bound (STL/CLR)<ept id=\"p2\">](../dotnet/hash-multiset-upper-bound-stl-clr.md)</ept><ph id=\"ph3\">`(``key``))`</ph>.","pos":[906,1188],"source":"The member function returns a pair of iterators `cliext::pair<iterator, iterator>(` [hash_multiset::lower_bound (STL/CLR)](../dotnet/hash-multiset-lower-bound-stl-clr.md)`(``key``),` [hash_multiset::upper_bound (STL/CLR)](../dotnet/hash-multiset-upper-bound-stl-clr.md)`(``key``))`."},{"content":"You use it to determine the range of elements currently in the controlled sequence that match a specified key.","pos":[1189,1299]},{"content":"Example","pos":[1308,1315]},{"content":"Requirements","pos":[2365,2377]},{"pos":[2381,2411],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_set&gt;","source":"**Header:** \\<cliext/hash_set>"},{"pos":[2418,2439],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2448,2456]},{"content":"hash_multiset (STL/CLR)","pos":[2461,2484]},{"content":"hash_multiset::count (STL/CLR)","pos":[2527,2557]},{"content":"hash_multiset::find (STL/CLR)","pos":[2606,2635]},{"content":"hash_multiset::lower_bound (STL/CLR)","pos":[2683,2719]},{"content":"hash_multiset::upper_bound (STL/CLR)","pos":[2774,2810]}],"content":"---\ntitle: \"hash_multiset::equal_range (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_multiset::equal_range\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"equal_range member [STL/CLR]\"\nms.assetid: a4141d7e-4964-4c78-8989-ae1d1258b50a\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multiset::equal_range (STL/CLR)\nFinds range that matches a specified key.  \n  \n## Syntax  \n  \n```  \ncliext::pair<iterator, iterator> equal_range(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n The member function returns a pair of iterators `cliext::pair<iterator, iterator>(` [hash_multiset::lower_bound (STL/CLR)](../dotnet/hash-multiset-lower-bound-stl-clr.md)`(``key``),` [hash_multiset::upper_bound (STL/CLR)](../dotnet/hash-multiset-upper-bound-stl-clr.md)`(``key``))`. You use it to determine the range of elements currently in the controlled sequence that match a specified key.  \n  \n## Example  \n  \n```  \n// cliext_hash_multiset_equal_range.cpp   \n// compile with: /clr   \n#include <cliext/hash_set>   \n  \ntypedef cliext::hash_multiset<wchar_t> Myhash_multiset;   \ntypedef Myhash_multiset::pair_iter_iter Pairii;   \nint main()   \n    {   \n    Myhash_multiset c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// display results of failed search   \n    Pairii pair1 = c1.equal_range(L'x');   \n    System::Console::WriteLine(\"equal_range(L'x') empty = {0}\",   \n        pair1.first == pair1.second);   \n  \n// display results of successful search   \n    pair1 = c1.equal_range(L'b');   \n    for (; pair1.first != pair1.second; ++pair1.first)   \n        System::Console::Write(\" {0}\", *pair1.first);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \nequal_range(L'x') empty = True  \n b  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_multiset (STL/CLR)](../dotnet/hash-multiset-stl-clr.md)   \n [hash_multiset::count (STL/CLR)](../dotnet/hash-multiset-count-stl-clr.md)   \n [hash_multiset::find (STL/CLR)](../dotnet/hash-multiset-find-stl-clr.md)   \n [hash_multiset::lower_bound (STL/CLR)](../dotnet/hash-multiset-lower-bound-stl-clr.md)   \n [hash_multiset::upper_bound (STL/CLR)](../dotnet/hash-multiset-upper-bound-stl-clr.md)"}