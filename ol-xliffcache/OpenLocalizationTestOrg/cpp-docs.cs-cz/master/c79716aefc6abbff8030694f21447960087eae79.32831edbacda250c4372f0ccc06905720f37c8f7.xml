{"nodes":[{"pos":[12,50],"content":"basic_streambuf Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"basic_streambuf Class | Microsoft Docs","pos":[0,38]}]},{"content":"basic_streambuf Class","pos":[707,728]},{"content":"Describes an abstract base class for deriving a stream buffer, which controls the transmission of elements to and from a specific representation of a stream.","pos":[729,886]},{"content":"Syntax","pos":[895,901]},{"content":"Parameters","pos":[1006,1016]},{"content":"A <bpt id=\"p1\">[</bpt>char_type<ept id=\"p1\">](#basic_streambuf__char_type)</ept>.","pos":[1030,1073],"source":" A [char_type](#basic_streambuf__char_type)."},{"content":"The character <bpt id=\"p1\">[</bpt>traits_type<ept id=\"p1\">](#basic_streambuf__traits_type)</ept>.","pos":[1088,1147],"source":" The character [traits_type](#basic_streambuf__traits_type)."},{"content":"Remarks","pos":[1156,1163]},{"content":"The template class describes an abstract base class for deriving a stream buffer, which controls the transmission of elements to and from a specific representation of a stream.","pos":[1167,1343]},{"content":"An object of class <ph id=\"ph1\">`basic_streambuf`</ph> helps control a stream with elements of type <ph id=\"ph2\">`Tr`</ph>, also known as <bpt id=\"p1\">[</bpt>char_type<ept id=\"p1\">](#basic_streambuf__char_type)</ept>, whose character traits are determined by the class <bpt id=\"p2\">[</bpt>char_traits<ept id=\"p2\">](../standard-library/char-traits-struct.md)</ept>, also known as <bpt id=\"p3\">[</bpt>traits_type<ept id=\"p3\">](#basic_streambuf__traits_type)</ept>.","pos":[1344,1656],"source":" An object of class `basic_streambuf` helps control a stream with elements of type `Tr`, also known as [char_type](#basic_streambuf__char_type), whose character traits are determined by the class [char_traits](../standard-library/char-traits-struct.md), also known as [traits_type](#basic_streambuf__traits_type)."},{"content":"Every stream buffer conceptually controls two independent streams: one for extractions (input) and one for insertions (output).","pos":[1663,1790]},{"content":"A specific representation may, however, make either or both of these streams inaccessible.","pos":[1791,1881]},{"content":"It typically maintains some relationship between the two streams.","pos":[1882,1947]},{"content":"What you insert into the output stream of a <bpt id=\"p1\">[</bpt>basic_stringbuf<ept id=\"p1\">](../standard-library/basic-stringbuf-class.md)</ept><ph id=\"ph1\">&lt; `Elem`</ph>, <ph id=\"ph2\">`Tr`</ph>&gt; object, for example, is what you later extract from its input stream.","pos":[1948,2140],"source":" What you insert into the output stream of a [basic_stringbuf](../standard-library/basic-stringbuf-class.md)< `Elem`, `Tr`> object, for example, is what you later extract from its input stream."},{"content":"When you position one stream of a <bpt id=\"p1\">[</bpt>basic_filebuf<ept id=\"p1\">](../standard-library/basic-filebuf-class.md)</ept><ph id=\"ph1\">&lt; `Elem`</ph>, <ph id=\"ph2\">`Tr`</ph>&gt; object, you position the other stream in tandem.","pos":[2141,2298],"source":" When you position one stream of a [basic_filebuf](../standard-library/basic-filebuf-class.md)< `Elem`, `Tr`> object, you position the other stream in tandem."},{"content":"The public interface to template class <ph id=\"ph1\">`basic_streambuf`</ph> supplies the operations that are common to all stream buffers, however specialized.","pos":[2305,2445],"source":"The public interface to template class `basic_streambuf` supplies the operations that are common to all stream buffers, however specialized."},{"content":"The protected interface supplies the operations needed for a specific representation of a stream to do its work.","pos":[2446,2558]},{"content":"The protected virtual member functions let you tailor the behavior of a derived stream buffer for a specific representation of a stream.","pos":[2559,2695]},{"content":"Each derived stream buffer in this library describes how it specializes the behavior of its protected virtual member functions.","pos":[2696,2823]},{"content":"The default behavior for the base class, which is often to do nothing, is described in this topic.","pos":[2824,2922]},{"content":"The remaining protected member functions control copying to and from any storage supplied to buffer transmissions to and from streams.","pos":[2929,3063]},{"content":"An input buffer, for example, is characterized by:","pos":[3064,3114]},{"pos":[3122,3197],"content":"<bpt id=\"p1\">[</bpt>eback<ept id=\"p1\">](#basic_streambuf__eback)</ept>, a pointer to the beginning of the buffer.","source":"[eback](#basic_streambuf__eback), a pointer to the beginning of the buffer."},{"pos":[3205,3275],"content":"<bpt id=\"p1\">[</bpt>gptr<ept id=\"p1\">](#basic_streambuf__gptr)</ept>, a pointer to the next element to read.","source":"[gptr](#basic_streambuf__gptr), a pointer to the next element to read."},{"pos":[3283,3359],"content":"<bpt id=\"p1\">[</bpt>egptr<ept id=\"p1\">](#basic_streambuf__egptr)</ept>, a pointer just past the end of the buffer.","source":"[egptr](#basic_streambuf__egptr), a pointer just past the end of the buffer."},{"content":"Similarly, an output buffer is characterized by:","pos":[3366,3414]},{"pos":[3422,3497],"content":"<bpt id=\"p1\">[</bpt>pbase<ept id=\"p1\">](#basic_streambuf__pbase)</ept>, a pointer to the beginning of the buffer.","source":"[pbase](#basic_streambuf__pbase), a pointer to the beginning of the buffer."},{"pos":[3505,3576],"content":"<bpt id=\"p1\">[</bpt>pptr<ept id=\"p1\">](#basic_streambuf__pptr)</ept>, a pointer to the next element to write.","source":"[pptr](#basic_streambuf__pptr), a pointer to the next element to write."},{"pos":[3584,3660],"content":"<bpt id=\"p1\">[</bpt>epptr<ept id=\"p1\">](#basic_streambuf__epptr)</ept>, a pointer just past the end of the buffer.","source":"[epptr](#basic_streambuf__epptr), a pointer just past the end of the buffer."},{"content":"For any buffer, the following protocol is used:","pos":[3667,3714]},{"content":"If the next pointer is null, no buffer exists.","pos":[3724,3770]},{"content":"Otherwise, all three pointers point into the same sequence.","pos":[3771,3830]},{"content":"They can be safely compared for order.","pos":[3831,3869]},{"content":"For an output buffer, if the next pointer compares less than the end pointer, you can store an element at the write position designated by the next pointer.","pos":[3879,4035]},{"content":"For an input buffer, if the next pointer compares less than the end pointer, you can read an element at the read position designated by the next pointer.","pos":[4045,4198]},{"content":"For an input buffer, if the beginning pointer compares less than the next pointer, you can put back an element at the putback position designated by the decremented next pointer.","pos":[4208,4386]},{"pos":[4393,4544],"content":"Any protected virtual member functions you write for a class derived from <ph id=\"ph1\">`basic_streambuf`&lt; `Elem`</ph>, <ph id=\"ph2\">`Tr`</ph>&gt; must cooperate in maintaining this protocol.","source":"Any protected virtual member functions you write for a class derived from `basic_streambuf`< `Elem`, `Tr`> must cooperate in maintaining this protocol."},{"content":"An object of class <ph id=\"ph1\">`basic_streambuf`&lt; `Elem`</ph>, <ph id=\"ph2\">`Tr`</ph>&gt; stores the six pointers previously described.","pos":[4551,4648],"source":"An object of class `basic_streambuf`< `Elem`, `Tr`> stores the six pointers previously described."},{"content":"It also stores a locale object in an object of type <bpt id=\"p1\">[</bpt>locale<ept id=\"p1\">](../standard-library/locale-class.md)</ept> for potential use by a derived stream buffer.","pos":[4649,4792],"source":" It also stores a locale object in an object of type [locale](../standard-library/locale-class.md) for potential use by a derived stream buffer."},{"content":"Constructors","pos":[4802,4814]},{"content":"basic_streambuf","pos":[4836,4851]},{"pos":[4888,4935],"content":"Constructs an object of type <ph id=\"ph1\">`basic_streambuf`</ph>.","source":"Constructs an object of type `basic_streambuf`."},{"content":"Typedefs","pos":[4946,4954]},{"content":"char_type","pos":[4976,4985]},{"pos":[5016,5074],"content":"Associates a type name with the <ph id=\"ph1\">`Elem`</ph> template parameter.","source":"Associates a type name with the `Elem` template parameter."},{"content":"int_type","pos":[5080,5088]},{"pos":[5118,5207],"content":"Associates a type name within <ph id=\"ph1\">`basic_streambuf`</ph> scope with the <ph id=\"ph2\">`Elem`</ph> template parameter.","source":"Associates a type name within `basic_streambuf` scope with the `Elem` template parameter."},{"content":"off_type","pos":[5213,5221]},{"pos":[5251,5340],"content":"Associates a type name within <ph id=\"ph1\">`basic_streambuf`</ph> scope with the <ph id=\"ph2\">`Elem`</ph> template parameter.","source":"Associates a type name within `basic_streambuf` scope with the `Elem` template parameter."},{"content":"pos_type","pos":[5346,5354]},{"pos":[5384,5473],"content":"Associates a type name within <ph id=\"ph1\">`basic_streambuf`</ph> scope with the <ph id=\"ph2\">`Elem`</ph> template parameter.","source":"Associates a type name within `basic_streambuf` scope with the `Elem` template parameter."},{"content":"traits_type","pos":[5479,5490]},{"pos":[5523,5579],"content":"Associates a type name with the <ph id=\"ph1\">`Tr`</ph> template parameter.","source":"Associates a type name with the `Tr` template parameter."},{"content":"Member Functions","pos":[5590,5606]},{"content":"eback","pos":[5628,5633]},{"content":"A protected function that returns a pointer to the beginning of the input buffer.","pos":[5660,5741]},{"content":"egptr","pos":[5747,5752]},{"content":"A protected function that returns a pointer just past the end of the input buffer.","pos":[5779,5861]},{"content":"epptr","pos":[5867,5872]},{"content":"A protected function that returns a pointer just past the end of the output buffer.","pos":[5899,5982]},{"content":"gbump","pos":[5988,5993]},{"pos":[6020,6101],"content":"A protected function that adds <ph id=\"ph1\">` count`</ph> to the next pointer for the input buffer.","source":"A protected function that adds ` count` to the next pointer for the input buffer."},{"content":"getloc","pos":[6107,6113]},{"pos":[6141,6184],"content":"Gets the <ph id=\"ph1\">`basic_streambuf`</ph> object's locale.","source":"Gets the `basic_streambuf` object's locale."},{"content":"gptr","pos":[6190,6194]},{"content":"A protected function that returns a pointer to the next element of the input buffer.","pos":[6220,6304]},{"content":"imbue","pos":[6310,6315]},{"pos":[6342,6421],"content":"A protected, virtual function called by <bpt id=\"p1\">[</bpt>pubimbue<ept id=\"p1\">](#basic_streambuf__pubimbue)</ept>.","source":"A protected, virtual function called by [pubimbue](#basic_streambuf__pubimbue)."},{"content":"in_avail","pos":[6427,6435]},{"content":"Returns the number of elements that are ready to be read from the buffer.","pos":[6465,6538]},{"content":"overflow","pos":[6544,6552]},{"content":"A protected virtual function that can be called when a new character is inserted into a full buffer.","pos":[6582,6682]},{"content":"pbackfail","pos":[6688,6697]},{"content":"A protected virtual member function that tries to put back an element into the input stream, then make it the current element (pointed to by the next pointer).","pos":[6728,6887]},{"content":"pbase","pos":[6893,6898]},{"content":"A protected function that returns a pointer to the beginning of the output buffer.","pos":[6925,7007]},{"content":"pbump","pos":[7013,7018]},{"pos":[7045,7126],"content":"A protected function that adds <ph id=\"ph1\">`count`</ph> to the next pointer for the output buffer.","source":"A protected function that adds `count` to the next pointer for the output buffer."},{"content":"pptr","pos":[7132,7136]},{"content":"A protected function that returns a pointer to the next element of the output buffer.","pos":[7162,7247]},{"content":"pubimbue","pos":[7253,7261]},{"pos":[7291,7334],"content":"Sets the <ph id=\"ph1\">`basic_streambuf`</ph> object's locale.","source":"Sets the `basic_streambuf` object's locale."},{"content":"pubseekoff","pos":[7340,7350]},{"pos":[7382,7493],"content":"Calls <bpt id=\"p1\">[</bpt>seekoff<ept id=\"p1\">](#basic_streambuf__seekoff)</ept>, a protected virtual function that is overridden in a derived class.","source":"Calls [seekoff](#basic_streambuf__seekoff), a protected virtual function that is overridden in a derived class."},{"content":"pubseekpos","pos":[7499,7509]},{"pos":[7541,7692],"content":"Calls <bpt id=\"p1\">[</bpt>seekpos<ept id=\"p1\">](#basic_streambuf__seekpos)</ept>, a protected virtual function that is overridden in a derived class and resets the current pointer position.","source":"Calls [seekpos](#basic_streambuf__seekpos), a protected virtual function that is overridden in a derived class and resets the current pointer position."},{"content":"pubsetbuf","pos":[7698,7707]},{"pos":[7738,7847],"content":"Calls <bpt id=\"p1\">[</bpt>setbuf<ept id=\"p1\">](#basic_streambuf__setbuf)</ept>, a protected virtual function that is overridden in a derived class.","source":"Calls [setbuf](#basic_streambuf__setbuf), a protected virtual function that is overridden in a derived class."},{"content":"pubsync","pos":[7853,7860]},{"pos":[7889,8054],"content":"Calls <bpt id=\"p1\">[</bpt>sync<ept id=\"p1\">](#basic_streambuf__sync)</ept>, a protected virtual function that is overridden in a derived class and updates the external stream associated with this buffer.","source":"Calls [sync](#basic_streambuf__sync), a protected virtual function that is overridden in a derived class and updates the external stream associated with this buffer."},{"content":"sbumpc","pos":[8060,8066]},{"content":"Reads and returns the current element, moving the stream pointer.","pos":[8094,8159]},{"content":"seekoff","pos":[8165,8172]},{"content":"The protected virtual member function tries to alter the current positions for the controlled streams.","pos":[8201,8303]},{"content":"seekpos","pos":[8309,8316]},{"content":"The protected virtual member function tries to alter the current positions for the controlled streams.","pos":[8345,8447]},{"content":"setbuf","pos":[8453,8459]},{"content":"The protected virtual member function performs an operation particular to each derived stream buffer.","pos":[8487,8588]},{"content":"setg","pos":[8594,8598]},{"pos":[8624,8773],"content":"A protected function that stores <ph id=\"ph1\">`_Gbeg`</ph> in the beginning pointer, <ph id=\"ph2\">`_Gnext`</ph> in the next pointer, and <ph id=\"ph3\">`_Gend`</ph> in the end pointer for the input buffer.","source":"A protected function that stores `_Gbeg` in the beginning pointer, `_Gnext` in the next pointer, and `_Gend` in the end pointer for the input buffer."},{"content":"setp","pos":[8779,8783]},{"pos":[8809,8928],"content":"A protected function that stores <ph id=\"ph1\">`_Pbeg`</ph> in the beginning pointer and <ph id=\"ph2\">`_Pend`</ph> in the end pointer for the output buffer.","source":"A protected function that stores `_Pbeg` in the beginning pointer and `_Pend` in the end pointer for the output buffer."},{"content":"sgetc","pos":[8934,8939]},{"content":"Returns current element without changing position in the stream.","pos":[8966,9030]},{"content":"sgetn","pos":[9036,9041]},{"content":"Returns the number of elements read.","pos":[9068,9104]},{"content":"showmanyc","pos":[9110,9119]},{"content":"Protected virtual member function that returns a count of the number of characters that can be extracted from the input stream and ensure that the program will not be subject to an indefinite wait.","pos":[9150,9347]},{"content":"snextc","pos":[9353,9359]},{"content":"Reads the current element and returns the following element.","pos":[9387,9447]},{"content":"sputbackc","pos":[9453,9462]},{"pos":[9493,9526],"content":"Puts a <ph id=\"ph1\">`char_type`</ph> in the stream.","source":"Puts a `char_type` in the stream."},{"content":"sputc","pos":[9532,9537]},{"content":"Puts a character into the stream.","pos":[9564,9597]},{"content":"sputn","pos":[9603,9608]},{"content":"Puts a character string into the stream.","pos":[9635,9675]},{"content":"stossc","pos":[9681,9687]},{"content":"Move past the current element in the stream.","pos":[9715,9759]},{"content":"sungetc","pos":[9765,9772]},{"content":"Gets a character from the stream.","pos":[9801,9834]},{"content":"swap","pos":[9840,9844]},{"pos":[9870,9972],"content":"Exchanges the values in this object for the values in the provided <ph id=\"ph1\">`basic_streambuf`</ph> object parameter.","source":"Exchanges the values in this object for the values in the provided `basic_streambuf` object parameter."},{"content":"sync","pos":[9978,9982]},{"content":"A protected virtual function that tries to synchronize the controlled streams with any associated external streams.","pos":[10008,10123]},{"content":"uflow","pos":[10129,10134]},{"content":"A protected virtual function that extracts the current element from the input stream.","pos":[10161,10246]},{"content":"underflow","pos":[10252,10261]},{"content":"A protected virtual function that extracts the current element from the input stream.","pos":[10292,10377]},{"content":"xsgetn","pos":[10383,10389]},{"content":"A protected virtual function that extracts elements from the input stream.","pos":[10417,10491]},{"content":"xsputn","pos":[10497,10503]},{"content":"A protected virtual function that inserts elements into the output stream.","pos":[10531,10605]},{"content":"Operators","pos":[10616,10625]},{"content":"operator=","pos":[10647,10656]},{"pos":[10689,10761],"content":"Assigns the values of this object from another <ph id=\"ph1\">`basic_streambuf`</ph> object.","source":"Assigns the values of this object from another `basic_streambuf` object."},{"content":"Requirements","pos":[10771,10783]},{"pos":[10787,10811],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>streambuf&gt;","source":"**Header:** \\<streambuf>"},{"pos":[10818,10836],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[10895,10927],"content":"basic_streambuf::basic_streambuf"},{"pos":[10931,10978],"content":"Constructs an object of type <ph id=\"ph1\">`basic_streambuf`</ph>.","source":"Constructs an object of type `basic_streambuf`."},{"content":"Parameters","pos":[11070,11080]},{"content":"An lvalue reference to the <ph id=\"ph1\">`basic_streambuf`</ph> object that is used to set the values for this <ph id=\"ph2\">`basic_streambuf`</ph> object.","pos":[11096,11213],"source":" An lvalue reference to the `basic_streambuf` object that is used to set the values for this `basic_streambuf` object."},{"content":"Remarks","pos":[11223,11230]},{"content":"The first protected constructor stores a null pointer in all pointers controlling the input buffer and the output buffer.","pos":[11234,11355]},{"content":"It also stores <ph id=\"ph1\">`locale::classic`</ph> in the locale object.","pos":[11356,11410],"source":" It also stores `locale::classic` in the locale object."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>locale::classic<ept id=\"p1\">](../standard-library/locale-class.md#locale__classic)</ept>.","pos":[11411,11508],"source":" For more information, see [locale::classic](../standard-library/locale-class.md#locale__classic)."},{"pos":[11515,11593],"content":"The second protected constructor copies the pointers and locale from <ph id=\"ph1\">` right`</ph>.","source":"The second protected constructor copies the pointers and locale from ` right`."},{"pos":[11646,11672],"content":"basic_streambuf::char_type"},{"pos":[11676,11736],"content":"Associates a type name with the <bpt id=\"p1\">**</bpt>Elem<ept id=\"p1\">**</ept> template parameter.","source":"Associates a type name with the **Elem** template parameter."},{"pos":[11826,11848],"content":"basic_streambuf::eback"},{"content":"A protected function that returns a pointer to the beginning of the input buffer.","pos":[11852,11933]},{"content":"Return Value","pos":[11984,11996]},{"content":"A pointer to the beginning of the input buffer.","pos":[12000,12047]},{"pos":[12096,12118],"content":"basic_streambuf::egptr"},{"content":"A protected function that returns a pointer just past the end of the input buffer.","pos":[12122,12204]},{"content":"Return Value","pos":[12255,12267]},{"content":"A pointer just past the end of the input buffer.","pos":[12271,12319]},{"pos":[12368,12390],"content":"basic_streambuf::epptr"},{"content":"A protected function that returns a pointer just past the end of the output buffer.","pos":[12394,12477]},{"content":"Return Value","pos":[12528,12540]},{"content":"A pointer just past the end of the output buffer.","pos":[12544,12593]},{"pos":[12642,12664],"content":"basic_streambuf::gbump"},{"pos":[12668,12749],"content":"A protected function that adds <ph id=\"ph1\">` count`</ph> to the next pointer for the input buffer.","source":"A protected function that adds ` count` to the next pointer for the input buffer."},{"content":"Parameters","pos":[12797,12807]},{"content":"The amount by which to advance the pointer.","pos":[12823,12866]},{"pos":[12916,12939],"content":"basic_streambuf::getloc"},{"content":"Gets the basic_streambuf object's locale.","pos":[12943,12984]},{"content":"Return Value","pos":[13032,13044]},{"content":"The stored locale object.","pos":[13048,13073]},{"content":"Remarks","pos":[13083,13090]},{"pos":[13094,13198],"content":"For related information, see <bpt id=\"p1\">[</bpt>ios_base::getloc<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>.","source":"For related information, see [ios_base::getloc](../standard-library/ios-base-class.md#ios_base__getloc)."},{"content":"Example","pos":[13208,13215]},{"pos":[13501,13522],"content":"basic_streambuf::gptr"},{"content":"A protected function that returns a pointer to the next element of the input buffer.","pos":[13526,13610]},{"content":"Return Value","pos":[13660,13672]},{"content":"A pointer to the next element of the input buffer.","pos":[13676,13726]},{"pos":[13775,13797],"content":"basic_streambuf::imbue"},{"pos":[13801,13879],"content":"A protected virtual function called by <bpt id=\"p1\">[</bpt>pubimbue<ept id=\"p1\">](#basic_streambuf__pubimbue)</ept>.","source":"A protected virtual function called by [pubimbue](#basic_streambuf__pubimbue)."},{"content":"Parameters","pos":[13944,13954]},{"content":"A reference to a locale.","pos":[13968,13992]},{"content":"Remarks","pos":[14002,14009]},{"content":"The default behavior is to do nothing.","pos":[14013,14051]},{"pos":[14103,14128],"content":"basic_streambuf::in_avail"},{"content":"Returns the number of elements that are ready to be read from the buffer.","pos":[14132,14205]},{"content":"Return Value","pos":[14253,14265]},{"content":"The number of elements that are ready to be read from the buffer.","pos":[14269,14334]},{"content":"Remarks","pos":[14344,14351]},{"content":"If a <bpt id=\"p1\">[</bpt>read position<ept id=\"p1\">](../standard-library/basic-streambuf-class.md)</ept> is available, the member function returns <bpt id=\"p2\">[</bpt>egptr<ept id=\"p2\">](#basic_streambuf__egptr)</ept> – <bpt id=\"p3\">[</bpt>gptr<ept id=\"p3\">](#basic_streambuf__gptr)</ept>.","pos":[14355,14530],"source":"If a [read position](../standard-library/basic-streambuf-class.md) is available, the member function returns [egptr](#basic_streambuf__egptr) – [gptr](#basic_streambuf__gptr)."},{"content":"Otherwise, it returns <bpt id=\"p1\">[</bpt>showmanyc<ept id=\"p1\">](#basic_streambuf__showmanyc)</ept>.","pos":[14531,14594],"source":" Otherwise, it returns [showmanyc](#basic_streambuf__showmanyc)."},{"content":"Example","pos":[14604,14611]},{"pos":[14992,15017],"content":"basic_streambuf::int_type"},{"content":"Associates a type name within basic_streambuf scope with one of the types in a template parameter.","pos":[15021,15119]},{"pos":[15237,15262],"content":"basic_streambuf::off_type"},{"content":"Associates a type name within basic_streambuf scope with one of the types in a template parameter.","pos":[15266,15364]},{"pos":[15485,15511],"content":"basic_streambuf::operator="},{"pos":[15515,15587],"content":"Assigns the values of this object from another <ph id=\"ph1\">`basic_streambuf`</ph> object.","source":"Assigns the values of this object from another `basic_streambuf` object."},{"content":"Parameters","pos":[15670,15680]},{"content":"An lvalue reference to the <ph id=\"ph1\">`basic_streambuf`</ph> object that is used to assign values to this object.","pos":[15696,15793],"source":" An lvalue reference to the `basic_streambuf` object that is used to assign values to this object."},{"content":"Remarks","pos":[15803,15810]},{"content":"The protected member operator copies from <ph id=\"ph1\">` right`</ph> the pointers that control the input buffer and the output buffer.","pos":[15814,15930],"source":"The protected member operator copies from ` right` the pointers that control the input buffer and the output buffer."},{"content":"It also stores <ph id=\"ph1\">` right``.`</ph><bpt id=\"p1\">[</bpt>getloc()<ept id=\"p1\">](#basic_streambuf__getloc)</ept> in the <ph id=\"ph2\">`locale object`</ph>.","pos":[15931,16017],"source":" It also stores ` right``.`[getloc()](#basic_streambuf__getloc) in the `locale object`."},{"content":"It returns <ph id=\"ph1\">`*this`</ph>.","pos":[16018,16037],"source":" It returns `*this`."},{"pos":[16089,16114],"content":"basic_streambuf::overflow"},{"content":"A protected virtual function that can be called when a new character is inserted into a full buffer.","pos":[16118,16218]},{"content":"Parameters","pos":[16307,16317]},{"content":"The character to insert into the buffer, or <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>eof<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>.","pos":[16332,16459],"source":" The character to insert into the buffer, or **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof)."},{"content":"Return Value","pos":[16469,16481]},{"content":"If the function cannot succeed, it returns <bpt id=\"p1\">**</bpt>traits_type::eof<ept id=\"p1\">**</ept> or throws an exception.","pos":[16485,16572],"source":"If the function cannot succeed, it returns **traits_type::eof** or throws an exception."},{"content":"Otherwise, it returns <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>not_eof<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__not_eof)</ept>(_ <bpt id=\"p3\">*</bpt>Meta<ept id=\"p3\">*</ept>).","pos":[16573,16696],"source":" Otherwise, it returns **traits_type::**[not_eof](../standard-library/char-traits-struct.md#char_traits__not_eof)(_ *Meta*)."},{"content":"The default behavior is to return <bpt id=\"p1\">**</bpt>traits_type::eof<ept id=\"p1\">**</ept>.","pos":[16697,16752],"source":" The default behavior is to return **traits_type::eof**."},{"content":"Remarks","pos":[16762,16769]},{"content":"If _ <bpt id=\"p1\">*</bpt>Meta<ept id=\"p1\">*</ept> does not compare equal to <bpt id=\"p2\">**</bpt>traits_type::eof<ept id=\"p2\">**</ept>, the protected virtual member function endeavors to insert the element <bpt id=\"p3\">**</bpt>traits_type::<ept id=\"p3\">**</ept><bpt id=\"p4\">[</bpt>to_char_type<ept id=\"p4\">](../standard-library/char-traits-struct.md#char_traits__to_char_type)</ept>(<ph id=\"ph1\">\\_</ph> <bpt id=\"p5\">*</bpt>Meta<ept id=\"p5\">*</ept>) into the output stream.","pos":[16773,17038],"source":"If _ *Meta* does not compare equal to **traits_type::eof**, the protected virtual member function endeavors to insert the element **traits_type::**[to_char_type](../standard-library/char-traits-struct.md#char_traits__to_char_type)(\\_ *Meta*) into the output stream."},{"content":"It can do so in various ways:","pos":[17039,17068]},{"pos":[17078,17216],"content":"If a <ph id=\"ph1\">`write position`</ph> is available, it can store the element into the write position and increment the next pointer for the output buffer.","source":"If a `write position` is available, it can store the element into the write position and increment the next pointer for the output buffer."},{"content":"It can make a write position available by allocating new or additional storage for the output buffer.","pos":[17226,17327]},{"content":"It can make a write position available by writing out, to some external destination, some or all of the elements between the beginning and next pointers for the output buffer.","pos":[17337,17512]},{"content":"The virtual overflow function, together with the <bpt id=\"p1\">[</bpt>sync<ept id=\"p1\">](#basic_streambuf__sync)</ept> and <bpt id=\"p2\">[</bpt>underflow<ept id=\"p2\">](#basic_streambuf__underflow)</ept> functions, defines the characteristics of the streambuf-derived class.","pos":[17519,17714],"source":"The virtual overflow function, together with the [sync](#basic_streambuf__sync) and [underflow](#basic_streambuf__underflow) functions, defines the characteristics of the streambuf-derived class."},{"content":"Each derived class might implement overflow differently, but the interface with the calling stream class is the same.","pos":[17715,17832]},{"pos":[17839,18050],"content":"The <ph id=\"ph1\">`overflow`</ph> function is most frequently called by public <ph id=\"ph2\">`streambuf`</ph> functions like <ph id=\"ph3\">`sputc`</ph> and <ph id=\"ph4\">`sputn`</ph> when the put area is full, but other classes, including the stream classes, can call <ph id=\"ph5\">`overflow`</ph> anytime.","source":"The `overflow` function is most frequently called by public `streambuf` functions like `sputc` and `sputn` when the put area is full, but other classes, including the stream classes, can call `overflow` anytime."},{"content":"The function consumes the characters in the put area between the <ph id=\"ph1\">`pbase`</ph> and <ph id=\"ph2\">`pptr`</ph> pointers and then reinitializes the put area.","pos":[18057,18186],"source":"The function consumes the characters in the put area between the `pbase` and `pptr` pointers and then reinitializes the put area."},{"content":"The <ph id=\"ph1\">`overflow`</ph> function must also consume <ph id=\"ph2\">`nCh`</ph> (if <ph id=\"ph3\">`nCh`</ph> is not <ph id=\"ph4\">`EOF`</ph>), or it might choose to put that character in the new put area so that it will be consumed on the next call.","pos":[18187,18366],"source":" The `overflow` function must also consume `nCh` (if `nCh` is not `EOF`), or it might choose to put that character in the new put area so that it will be consumed on the next call."},{"content":"The definition of consume varies among derived classes.","pos":[18373,18428]},{"content":"For example, the <ph id=\"ph1\">`filebuf`</ph> class writes its characters to a file, while the <ph id=\"ph2\">`strstreambuf`</ph> class keeps them in its buffer and (if the buffer is designated as dynamic) expands the buffer in response to a call to overflow.","pos":[18429,18649],"source":" For example, the `filebuf` class writes its characters to a file, while the `strstreambuf` class keeps them in its buffer and (if the buffer is designated as dynamic) expands the buffer in response to a call to overflow."},{"content":"This expansion is achieved by freeing the old buffer and replacing it with a new, larger one.","pos":[18650,18743]},{"content":"The pointers are adjusted as necessary.","pos":[18744,18783]},{"pos":[18836,18862],"content":"basic_streambuf::pbackfail"},{"content":"A protected virtual member function that tries to put back an element into the input stream, then make it the current element (pointed to by the next pointer).","pos":[18866,19025]},{"content":"Parameters","pos":[19115,19125]},{"content":"The character to insert into the buffer, or <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>eof<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>.","pos":[19140,19267],"source":" The character to insert into the buffer, or **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof)."},{"content":"Return Value","pos":[19277,19289]},{"content":"If the function cannot succeed, it returns <bpt id=\"p1\">**</bpt>traits_type::eof<ept id=\"p1\">**</ept> or throws an exception.","pos":[19293,19380],"source":"If the function cannot succeed, it returns **traits_type::eof** or throws an exception."},{"content":"Otherwise, it returns some other value.","pos":[19381,19420]},{"content":"The default behavior is to return <bpt id=\"p1\">**</bpt>traits_type::eof<ept id=\"p1\">**</ept>.","pos":[19421,19476],"source":" The default behavior is to return **traits_type::eof**."},{"content":"Remarks","pos":[19486,19493]},{"content":"If _ <bpt id=\"p1\">*</bpt>Meta<ept id=\"p1\">*</ept> compares equal to <bpt id=\"p2\">**</bpt>traits_type::eof<ept id=\"p2\">**</ept>, the element to push back is effectively the one already in the stream before the current element.","pos":[19497,19646],"source":"If _ *Meta* compares equal to **traits_type::eof**, the element to push back is effectively the one already in the stream before the current element."},{"content":"Otherwise, that element is replaced by <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>to_char_type<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__to_char_type)</ept>(<ph id=\"ph1\">\\_</ph> <bpt id=\"p3\">*</bpt>Meta<ept id=\"p3\">*</ept>).","pos":[19647,19798],"source":" Otherwise, that element is replaced by **traits_type::**[to_char_type](../standard-library/char-traits-struct.md#char_traits__to_char_type)(\\_ *Meta*)."},{"content":"The function can put back an element in various ways:","pos":[19799,19852]},{"content":"If a putback position is available, it can store the element into the putback position and decrement the next pointer for the input buffer.","pos":[19862,20001]},{"content":"It can make a putback position available by allocating new or additional storage for the input buffer.","pos":[20011,20113]},{"content":"For a stream buffer with common input and output streams, it can make a putback position available by writing out, to some external destination, some or all of the elements between the beginning and next pointers for the output buffer.","pos":[20123,20358]},{"pos":[20407,20429],"content":"basic_streambuf::pbase"},{"content":"A protected function that returns a pointer to the beginning of the output buffer.","pos":[20433,20515]},{"content":"Return Value","pos":[20566,20578]},{"content":"A pointer to the beginning of the output buffer.","pos":[20582,20630]},{"pos":[20679,20701],"content":"basic_streambuf::pbump"},{"pos":[20705,20787],"content":"A protected function that adds <ph id=\"ph1\">` count`</ph> to the next pointer for the output buffer.","source":"A protected function that adds ` count` to the next pointer for the output buffer."},{"content":"Parameters","pos":[20835,20845]},{"content":"The number of characters by which to move the write position forward.","pos":[20861,20930]},{"pos":[20982,21007],"content":"basic_streambuf::pos_type"},{"content":"Associates a type name within basic_streambuf scope with one of the types in a template parameter.","pos":[21011,21109]},{"pos":[21223,21244],"content":"basic_streambuf::pptr"},{"content":"A protected function that returns a pointer to the next element of the output buffer.","pos":[21248,21333]},{"content":"Return Value","pos":[21383,21395]},{"content":"A pointer to the next element of the output buffer.","pos":[21399,21450]},{"pos":[21502,21527],"content":"basic_streambuf::pubimbue"},{"content":"Sets the basic_streambuf object's locale.","pos":[21531,21572]},{"content":"Parameters","pos":[21634,21644]},{"content":"A reference to a locale.","pos":[21658,21682]},{"content":"Return Value","pos":[21692,21704]},{"content":"The previous value stored in the locale object.","pos":[21708,21755]},{"content":"Remarks","pos":[21765,21772]},{"pos":[21776,21875],"content":"The member function stores _ <bpt id=\"p1\">*</bpt>Loc<ept id=\"p1\">*</ept> in the locale object and calls <bpt id=\"p2\">[</bpt>imbue<ept id=\"p2\">](#basic_streambuf__imbue)</ept>.","source":"The member function stores _ *Loc* in the locale object and calls [imbue](#basic_streambuf__imbue)."},{"content":"Example","pos":[21885,21892]},{"pos":[21897,22013],"content":"See <bpt id=\"p1\">[</bpt>basic_ios::imbue<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__imbue)</ept> for an example that uses <ph id=\"ph1\">`pubimbue`</ph>.","source":"See [basic_ios::imbue](../standard-library/basic-ios-class.md#basic_ios__imbue) for an example that uses `pubimbue`."},{"pos":[22067,22094],"content":"basic_streambuf::pubseekoff"},{"pos":[22098,22209],"content":"Calls <bpt id=\"p1\">[</bpt>seekoff<ept id=\"p1\">](#basic_streambuf__seekoff)</ept>, a protected virtual function that is overridden in a derived class.","source":"Calls [seekoff](#basic_streambuf__seekoff), a protected virtual function that is overridden in a derived class."},{"content":"Parameters","pos":[22360,22370]},{"content":"The position to seek for relative to <ph id=\"ph1\">`_Way`</ph>.","pos":[22384,22428],"source":" The position to seek for relative to `_Way`."},{"content":"The starting point for offset operations.","pos":[22445,22486]},{"content":"See <bpt id=\"p1\">[</bpt>seekdir<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__seekdir)</ept> for possible values.","pos":[22487,22578],"source":" See [seekdir](../standard-library/ios-base-class.md#ios_base__seekdir) for possible values."},{"content":"Specifies the mode for the pointer position.","pos":[22597,22641]},{"content":"The default is to allow you to modify the read and write positions.","pos":[22642,22709]},{"content":"Return Value","pos":[22719,22731]},{"pos":[22735,22858],"content":"Returns the new position or an invalid stream position ( <bpt id=\"p1\">[</bpt>seekoff<ept id=\"p1\">](#basic_streambuf__seekoff)</ept>(_ <bpt id=\"p2\">*</bpt>Off<ept id=\"p2\">*</ept>, <ph id=\"ph1\">`_Way`</ph>, <ph id=\"ph2\">`_Which`</ph>) ).","source":"Returns the new position or an invalid stream position ( [seekoff](#basic_streambuf__seekoff)(_ *Off*, `_Way`, `_Which`) )."},{"content":"Remarks","pos":[22868,22875]},{"pos":[22879,22916],"content":"Moves the pointer relative to <ph id=\"ph1\">`_Way`</ph>.","source":"Moves the pointer relative to `_Way`."},{"pos":[22970,22997],"content":"basic_streambuf::pubseekpos"},{"pos":[23001,23153],"content":"Calls <bpt id=\"p1\">[</bpt>seekpos<ept id=\"p1\">](#basic_streambuf__seekpos)</ept>, a protected virtual function that is overridden in a derived class, and resets the current pointer position.","source":"Calls [seekpos](#basic_streambuf__seekpos), a protected virtual function that is overridden in a derived class, and resets the current pointer position."},{"content":"Parameters","pos":[23271,23281]},{"content":"The position to seek for.","pos":[23294,23319]},{"content":"Specifies the mode for the pointer position.","pos":[23338,23382]},{"content":"The default is to allow you to modify the read and write positions.","pos":[23383,23450]},{"content":"Return Value","pos":[23460,23472]},{"content":"The new position or an invalid stream position.","pos":[23476,23523]},{"content":"To determine if the stream position is invalid, compare the return value with <ph id=\"ph1\">`pos_type(off_type(-1))`</ph>.","pos":[23524,23627],"source":" To determine if the stream position is invalid, compare the return value with `pos_type(off_type(-1))`."},{"content":"Remarks","pos":[23637,23644]},{"pos":[23648,23731],"content":"The member function returns <bpt id=\"p1\">[</bpt>seekpos<ept id=\"p1\">](#basic_streambuf__seekpos)</ept>(_ <bpt id=\"p2\">*</bpt>Sp<ept id=\"p2\">*</ept>, <ph id=\"ph1\">`_Which`</ph>).","source":"The member function returns [seekpos](#basic_streambuf__seekpos)(_ *Sp*, `_Which`)."},{"pos":[23784,23810],"content":"basic_streambuf::pubsetbuf"},{"pos":[23814,23923],"content":"Calls <bpt id=\"p1\">[</bpt>setbuf<ept id=\"p1\">](#basic_streambuf__setbuf)</ept>, a protected virtual function that is overridden in a derived class.","source":"Calls [setbuf](#basic_streambuf__setbuf), a protected virtual function that is overridden in a derived class."},{"content":"Parameters","pos":[24035,24045]},{"content":"A pointer to <ph id=\"ph1\">`char_type`</ph> for this instantiation.","pos":[24062,24110],"source":" A pointer to `char_type` for this instantiation."},{"content":"The size of the buffer.","pos":[24129,24152]},{"content":"Return Value","pos":[24162,24174]},{"pos":[24178,24243],"content":"Returns <bpt id=\"p1\">[</bpt>setbuf<ept id=\"p1\">](#basic_streambuf__setbuf)</ept>( <ph id=\"ph1\">`_Buffer`</ph>, <ph id=\"ph2\">` count`</ph>).","source":"Returns [setbuf](#basic_streambuf__setbuf)( `_Buffer`, ` count`)."},{"pos":[24294,24318],"content":"basic_streambuf::pubsync"},{"pos":[24322,24488],"content":"Calls <bpt id=\"p1\">[</bpt>sync<ept id=\"p1\">](#basic_streambuf__sync)</ept>, a protected virtual function that is overridden in a derived class, and updates the external stream associated with this buffer.","source":"Calls [sync](#basic_streambuf__sync), a protected virtual function that is overridden in a derived class, and updates the external stream associated with this buffer."},{"content":"Return Value","pos":[24528,24540]},{"pos":[24544,24600],"content":"Returns <bpt id=\"p1\">[</bpt>sync<ept id=\"p1\">](#basic_streambuf__sync)</ept> or –1 if failure.","source":"Returns [sync](#basic_streambuf__sync) or –1 if failure."},{"pos":[24650,24673],"content":"basic_streambuf::sbumpc"},{"content":"Reads and returns the current element, moving the stream pointer.","pos":[24677,24742]},{"content":"Return Value","pos":[24786,24798]},{"content":"The current element.","pos":[24802,24822]},{"content":"Remarks","pos":[24832,24839]},{"content":"If a read position is available, the member function returns <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>to_int_type<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <bpt id=\"p3\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p3\">**</ept><bpt id=\"p4\">[</bpt>gptr<ept id=\"p4\">](#basic_streambuf__gptr)</ept>) and increments the next pointer for the input buffer.","pos":[24843,25095],"source":"If a read position is available, the member function returns **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( **\\***[gptr](#basic_streambuf__gptr)) and increments the next pointer for the input buffer."},{"content":"Otherwise, it returns <bpt id=\"p1\">[</bpt>uflow<ept id=\"p1\">](#basic_streambuf__uflow)</ept>.","pos":[25096,25151],"source":" Otherwise, it returns [uflow](#basic_streambuf__uflow)."},{"content":"Example","pos":[25161,25168]},{"pos":[25513,25537],"content":"basic_streambuf::seekoff"},{"content":"A protected virtual member function that tries to alter the current positions for the controlled streams.","pos":[25541,25646]},{"content":"Parameters","pos":[25811,25821]},{"content":"The position to seek for relative to <ph id=\"ph1\">`_Way`</ph>.","pos":[25835,25879],"source":" The position to seek for relative to `_Way`."},{"content":"The starting point for offset operations.","pos":[25896,25937]},{"content":"See <bpt id=\"p1\">[</bpt>seekdir<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__seekdir)</ept> for possible values.","pos":[25938,26029],"source":" See [seekdir](../standard-library/ios-base-class.md#ios_base__seekdir) for possible values."},{"content":"Specifies the mode for the pointer position.","pos":[26048,26092]},{"content":"The default is to allow you to modify the read and write positions.","pos":[26093,26160]},{"content":"Return Value","pos":[26170,26182]},{"pos":[26186,26283],"content":"Returns the new position or an invalid stream position ( <ph id=\"ph1\">`seekoff`</ph> (_ <bpt id=\"p1\">*</bpt>Off<ept id=\"p1\">*</ept>, <ph id=\"ph2\">`_Way`</ph>, <ph id=\"ph3\">`_Which`</ph>) ).","source":"Returns the new position or an invalid stream position ( `seekoff` (_ *Off*, `_Way`, `_Which`) )."},{"content":"Remarks","pos":[26293,26300]},{"content":"The new position is determined as follows:","pos":[26304,26346]},{"pos":[26356,26447],"content":"If <ph id=\"ph1\">`_Way` == `ios_base::beg`</ph>, the new position is the beginning of the stream plus _ <bpt id=\"p1\">*</bpt>Off<ept id=\"p1\">*</ept>.","source":"If `_Way` == `ios_base::beg`, the new position is the beginning of the stream plus _ *Off*."},{"pos":[26457,26548],"content":"If <ph id=\"ph1\">`_Way` == `ios_base::cur`</ph>, the new position is the current stream position plus _ <bpt id=\"p1\">*</bpt>Off<ept id=\"p1\">*</ept>.","source":"If `_Way` == `ios_base::cur`, the new position is the current stream position plus _ *Off*."},{"pos":[26558,26643],"content":"If <ph id=\"ph1\">`_Way` == `ios_base::end`</ph>, the new position is the end of the stream plus _ <bpt id=\"p1\">*</bpt>Off<ept id=\"p1\">*</ept>.","source":"If `_Way` == `ios_base::end`, the new position is the end of the stream plus _ *Off*."},{"content":"Typically, if <bpt id=\"p1\">**</bpt>which &amp; ios_base::in<ept id=\"p1\">**</ept> is nonzero, the input stream is affected, and if <bpt id=\"p2\">**</bpt>which &amp; ios_base::out<ept id=\"p2\">**</ept> is nonzero, the output stream is affected.","pos":[26650,26806],"source":"Typically, if **which & ios_base::in** is nonzero, the input stream is affected, and if **which & ios_base::out** is nonzero, the output stream is affected."},{"content":"Actual use of this parameter varies among derived stream buffers, however.","pos":[26807,26881]},{"content":"If the function succeeds in altering the stream position or positions, it returns the resulting stream position or one of the resulting stream positions.","pos":[26888,27041]},{"content":"Otherwise, it returns an invalid stream position.","pos":[27042,27091]},{"content":"The default behavior is to return an invalid stream position.","pos":[27092,27153]},{"pos":[27204,27228],"content":"basic_streambuf::seekpos"},{"content":"A protected virtual member function that tries to alter the current positions for the controlled streams.","pos":[27232,27337]},{"content":"Parameters","pos":[27460,27470]},{"content":"The position to seek for.","pos":[27483,27508]},{"content":"Specifies the mode for the pointer position.","pos":[27527,27571]},{"content":"The default is to allow you to modify the read and write positions.","pos":[27572,27639]},{"content":"Return Value","pos":[27649,27661]},{"content":"The new position, or an invalid stream position.","pos":[27665,27713]},{"content":"To determine if the stream position is invalid, compare the return value with <ph id=\"ph1\">`pos_type(off_type(-1))`</ph>.","pos":[27714,27817],"source":" To determine if the stream position is invalid, compare the return value with `pos_type(off_type(-1))`."},{"content":"Remarks","pos":[27827,27834]},{"pos":[27838,27865],"content":"The new position is _ <bpt id=\"p1\">*</bpt>Sp<ept id=\"p1\">*</ept>.","source":"The new position is _ *Sp*."},{"content":"Typically, if <bpt id=\"p1\">**</bpt>which &amp; ios_base::in<ept id=\"p1\">**</ept> is nonzero, the input stream is affected, and if <bpt id=\"p2\">**</bpt>which &amp; ios_base::out<ept id=\"p2\">**</ept> is nonzero, the output stream is affected.","pos":[27872,28028],"source":"Typically, if **which & ios_base::in** is nonzero, the input stream is affected, and if **which & ios_base::out** is nonzero, the output stream is affected."},{"content":"Actual use of this parameter varies among derived stream buffers, however.","pos":[28029,28103]},{"content":"If the function succeeds in altering the stream position or positions, it returns the resulting stream position or one of the resulting stream positions.","pos":[28110,28263]},{"content":"Otherwise, it returns an invalid stream position (-1).","pos":[28264,28318]},{"content":"The default behavior is to return an invalid stream position.","pos":[28319,28380]},{"pos":[28430,28453],"content":"basic_streambuf::setbuf"},{"content":"A protected virtual member function that performs an operation particular to each derived stream buffer.","pos":[28457,28561]},{"content":"Parameters","pos":[28678,28688]},{"content":"Pointer to a buffer.","pos":[28705,28725]},{"content":"Size of the buffer.","pos":[28744,28763]},{"content":"Return Value","pos":[28773,28785]},{"pos":[28789,28832],"content":"The default behavior is to return <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept>.","source":"The default behavior is to return **this**."},{"content":"Remarks","pos":[28842,28849]},{"content":"See <bpt id=\"p1\">[</bpt>basic_filebuf<ept id=\"p1\">](../standard-library/basic-filebuf-class.md)</ept>.","pos":[28853,28917],"source":"See [basic_filebuf](../standard-library/basic-filebuf-class.md)."},{"content":"provides an area of memory for the <ph id=\"ph1\">`streambuf`</ph> object to use.","pos":[28927,28988],"source":" provides an area of memory for the `streambuf` object to use."},{"content":"How the buffer is used in defined in the derived classes.","pos":[28989,29046]},{"pos":[29094,29115],"content":"basic_streambuf::setg"},{"pos":[29119,29269],"content":"A protected function that stores _ <bpt id=\"p1\">*</bpt>Gbeg<ept id=\"p1\">*</ept> in the beginning pointer, <ph id=\"ph1\">`_Gnext`</ph> in the next pointer, and <ph id=\"ph2\">`_Gend`</ph> in the end pointer for the input buffer.","source":"A protected function that stores _ *Gbeg* in the beginning pointer, `_Gnext` in the next pointer, and `_Gend` in the end pointer for the input buffer."},{"content":"Parameters","pos":[29368,29378]},{"content":"_Gbeg","pos":[29383,29388]},{"content":"A pointer to the beginning of the buffer.","pos":[29393,29434]},{"content":"A pointer to somewhere in the middle of the buffer.","pos":[29453,29504]},{"content":"A pointer to the end of the buffer.","pos":[29522,29557]},{"pos":[29605,29626],"content":"basic_streambuf::setp"},{"pos":[29630,29749],"content":"A protected function that stores <ph id=\"ph1\">`_Pbeg`</ph> in the beginning pointer and <ph id=\"ph2\">`_Pend`</ph> in the end pointer for the output buffer.","source":"A protected function that stores `_Pbeg` in the beginning pointer and `_Pend` in the end pointer for the output buffer."},{"content":"Parameters","pos":[29821,29831]},{"content":"A pointer to the beginning of the buffer.","pos":[29846,29887]},{"content":"A pointer to the end of the buffer.","pos":[29905,29940]},{"pos":[29989,30011],"content":"basic_streambuf::sgetc"},{"content":"Returns current element without changing position in the stream.","pos":[30015,30079]},{"content":"Return Value","pos":[30122,30134]},{"content":"The current element.","pos":[30138,30158]},{"content":"Remarks","pos":[30168,30175]},{"content":"If a read position is available, the member function returns <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>to_int_type<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <ph id=\"ph1\">`*`</ph><bpt id=\"p3\">[</bpt>gptr<ept id=\"p3\">](#basic_streambuf__gptr)</ept>).","pos":[30179,30375],"source":"If a read position is available, the member function returns **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( `*`[gptr](#basic_streambuf__gptr))."},{"content":"Otherwise, it returns <bpt id=\"p1\">[</bpt>underflow<ept id=\"p1\">](#basic_streambuf__underflow)</ept>.","pos":[30376,30439],"source":" Otherwise, it returns [underflow](#basic_streambuf__underflow)."},{"content":"Example","pos":[30449,30456]},{"pos":[30864,30886],"content":"basic_streambuf::sgetn"},{"pos":[30890,30993],"content":"Extracts up to <ph id=\"ph1\">` count`</ph> characters from the input buffer and stores them in the provided buffer <ph id=\"ph2\">` ptr`</ph>.","source":"Extracts up to ` count` characters from the input buffer and stores them in the provided buffer ` ptr`."},{"content":"This method is potentially unsafe, as it relies on the caller to check that the passed values are correct.","pos":[31000,31106]},{"content":"Parameters","pos":[31194,31204]},{"content":"The buffer to contain the extracted characters.","pos":[31218,31265]},{"content":"The number of elements to read.","pos":[31284,31315]},{"content":"Return Value","pos":[31325,31337]},{"content":"The number of elements read.","pos":[31341,31369]},{"content":"See <bpt id=\"p1\">[</bpt>streamsize<ept id=\"p1\">](../standard-library/ios-typedefs.md#streamsize)</ept> for more information.","pos":[31370,31456],"source":" See [streamsize](../standard-library/ios-typedefs.md#streamsize) for more information."},{"content":"Remarks","pos":[31466,31473]},{"pos":[31477,31559],"content":"The member function returns <bpt id=\"p1\">[</bpt>xsgetn<ept id=\"p1\">](#basic_streambuf__xsgetn)</ept>( <ph id=\"ph1\">` ptr`</ph>, <ph id=\"ph2\">` count`</ph>).","source":"The member function returns [xsgetn](#basic_streambuf__xsgetn)( ` ptr`, ` count`)."},{"content":"Example","pos":[31569,31576]},{"pos":[32257,32283],"content":"basic_streambuf::showmanyc"},{"content":"A protected virtual member function that returns a count of the number of characters that can be extracted from the input stream and ensure that the program will not be subject to an indefinite wait.","pos":[32287,32486]},{"content":"Return Value","pos":[32543,32555]},{"content":"The default behavior is to return zero.","pos":[32559,32598]},{"pos":[32648,32671],"content":"basic_streambuf::snextc"},{"content":"Reads the current element and returns the following element.","pos":[32675,32735]},{"content":"Return Value","pos":[32779,32791]},{"content":"The next element in the stream.","pos":[32795,32826]},{"content":"Remarks","pos":[32836,32843]},{"content":"The member function calls <bpt id=\"p1\">[</bpt>sbumpc<ept id=\"p1\">](#basic_streambuf__sbumpc)</ept> and, if that function returns <bpt id=\"p2\">**</bpt>traits_type::<ept id=\"p2\">**</ept><bpt id=\"p3\">[</bpt>eof<ept id=\"p3\">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>, returns <bpt id=\"p4\">**</bpt>traits_type::eof<ept id=\"p4\">**</ept>.","pos":[32847,33051],"source":"The member function calls [sbumpc](#basic_streambuf__sbumpc) and, if that function returns **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof), returns **traits_type::eof**."},{"content":"Otherwise, it returns <bpt id=\"p1\">[</bpt>sgetc<ept id=\"p1\">](#basic_streambuf__sgetc)</ept>.","pos":[33052,33107],"source":" Otherwise, it returns [sgetc](#basic_streambuf__sgetc)."},{"content":"Example","pos":[33117,33124]},{"pos":[33515,33541],"content":"basic_streambuf::sputbackc"},{"content":"Puts a char_type in the stream.","pos":[33545,33576]},{"content":"Parameters","pos":[33636,33646]},{"content":"The character.","pos":[33659,33673]},{"content":"Return Value","pos":[33683,33695]},{"content":"Returns the character or failure.","pos":[33699,33732]},{"content":"Remarks","pos":[33742,33749]},{"content":"If a putback position is available and <ph id=\"ph1\">`_Ch`</ph> compares equal to the character stored in that position, the member function decrements the next pointer for the input buffer and returns <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>to_int_type<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <ph id=\"ph2\">`_Ch`</ph>).","pos":[33753,34043],"source":"If a putback position is available and `_Ch` compares equal to the character stored in that position, the member function decrements the next pointer for the input buffer and returns **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( `_Ch`)."},{"content":"Otherwise, it returns <bpt id=\"p1\">[</bpt>pbackfail<ept id=\"p1\">](#basic_streambuf__pbackfail)</ept>( <ph id=\"ph1\">`_Ch`</ph>).","pos":[34044,34115],"source":" Otherwise, it returns [pbackfail](#basic_streambuf__pbackfail)( `_Ch`)."},{"content":"Example","pos":[34125,34132]},{"pos":[34693,34715],"content":"basic_streambuf::sputc"},{"content":"Puts a character into the stream.","pos":[34719,34752]},{"content":"Parameters","pos":[34808,34818]},{"content":"The character.","pos":[34831,34845]},{"content":"Return Value","pos":[34855,34867]},{"content":"Returns the character, if successful.","pos":[34871,34908]},{"content":"Remarks","pos":[34918,34925]},{"content":"If a <ph id=\"ph1\">`write position`</ph> is available, the member function stores <ph id=\"ph2\">`_Ch`</ph> in the write position, increments the next pointer for the output buffer, and returns <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>to_int_type<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <ph id=\"ph3\">`_Ch`</ph>).","pos":[34929,35191],"source":"If a `write position` is available, the member function stores `_Ch` in the write position, increments the next pointer for the output buffer, and returns **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( `_Ch`)."},{"content":"Otherwise, it returns <bpt id=\"p1\">[</bpt>overflow<ept id=\"p1\">](#basic_streambuf__overflow)</ept>( <ph id=\"ph1\">`_Ch`</ph>).","pos":[35192,35261],"source":" Otherwise, it returns [overflow](#basic_streambuf__overflow)( `_Ch`)."},{"content":"Example","pos":[35271,35278]},{"pos":[35610,35632],"content":"basic_streambuf::sputn"},{"content":"Puts a character string into the stream.","pos":[35636,35676]},{"content":"Parameters","pos":[35759,35769]},{"content":"The character string.","pos":[35783,35804]},{"content":"The count of characters.","pos":[35823,35847]},{"content":"Return Value","pos":[35857,35869]},{"content":"The number of characters actually inserted into the stream.","pos":[35873,35932]},{"content":"Remarks","pos":[35942,35949]},{"content":"The member function returns <bpt id=\"p1\">[</bpt>xsputn<ept id=\"p1\">](#basic_streambuf__xsputn)</ept>( <ph id=\"ph1\">` ptr`</ph>, <ph id=\"ph2\">` count`</ph>).","pos":[35953,36035],"source":"The member function returns [xsputn](#basic_streambuf__xsputn)( ` ptr`, ` count`)."},{"content":"See the Remarks section of this member for more information.","pos":[36036,36096]},{"content":"Example","pos":[36106,36113]},{"pos":[36452,36475],"content":"basic_streambuf::stossc"},{"content":"Move past the current element in the stream.","pos":[36479,36523]},{"content":"Remarks","pos":[36563,36570]},{"content":"The member function calls <bpt id=\"p1\">[</bpt>sbumpc<ept id=\"p1\">](#basic_streambuf__sbumpc)</ept>.","pos":[36574,36635],"source":"The member function calls [sbumpc](#basic_streambuf__sbumpc)."},{"content":"Note that an implementation is not required to supply this member function.","pos":[36636,36711]},{"content":"Example","pos":[36721,36728]},{"pos":[37113,37137],"content":"basic_streambuf::sungetc"},{"content":"Gets a character from the stream.","pos":[37141,37174]},{"content":"Return Value","pos":[37219,37231]},{"content":"Returns either the character or failure.","pos":[37235,37275]},{"content":"Remarks","pos":[37285,37292]},{"content":"If a putback position is available, the member function decrements the next pointer for the input buffer and returns <ph id=\"ph1\">`traits_type::`</ph><bpt id=\"p1\">[</bpt>to_int_type<ept id=\"p1\">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <ph id=\"ph2\">`*`</ph><bpt id=\"p2\">[</bpt>gptr<ept id=\"p2\">](#basic_streambuf__gptr)</ept>).","pos":[37296,37546],"source":"If a putback position is available, the member function decrements the next pointer for the input buffer and returns `traits_type::`[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( `*`[gptr](#basic_streambuf__gptr))."},{"content":"However, it is not always possible to determine the last character read so that it can be captured in the state of the current buffer.","pos":[37547,37681]},{"content":"If this is true, then the function returns <bpt id=\"p1\">[</bpt>pbackfail<ept id=\"p1\">](#basic_streambuf__pbackfail)</ept>.","pos":[37682,37766],"source":" If this is true, then the function returns [pbackfail](#basic_streambuf__pbackfail)."},{"content":"To avoid this situation, keep track of the character to put back and call <ph id=\"ph1\">`sputbackc(ch)`</ph>, which will not fail provided you don't call it at the beginning of the stream and you don't try to put back more than one character.","pos":[37767,37990],"source":" To avoid this situation, keep track of the character to put back and call `sputbackc(ch)`, which will not fail provided you don't call it at the beginning of the stream and you don't try to put back more than one character."},{"content":"Example","pos":[38000,38007]},{"pos":[38760,38781],"content":"basic_streambuf::swap"},{"pos":[38785,38877],"content":"Exchanges the values in this object for the values in the provided <ph id=\"ph1\">`basic_streambuf`</ph> object.","source":"Exchanges the values in this object for the values in the provided `basic_streambuf` object."},{"content":"Parameters","pos":[38937,38947]},{"content":"Parameter","pos":[38954,38963]},{"content":"Description","pos":[38964,38975]},{"pos":[39027,39111],"content":"An lvalue reference to the <ph id=\"ph1\">`basic_streambuf`</ph> object that is used to exchange values.","source":"An lvalue reference to the `basic_streambuf` object that is used to exchange values."},{"content":"Remarks","pos":[39122,39129]},{"content":"The protected member function exchanges with <ph id=\"ph1\">` right`</ph> all the pointers controlling the <ph id=\"ph2\">`input buffer`</ph> and the <ph id=\"ph3\">`output buffer`</ph>.","pos":[39133,39259],"source":"The protected member function exchanges with ` right` all the pointers controlling the `input buffer` and the `output buffer`."},{"content":"It also exchanges <ph id=\"ph1\">` right``.`</ph><bpt id=\"p1\">[</bpt>getloc()<ept id=\"p1\">](#basic_streambuf__getloc)</ept> with the <ph id=\"ph2\">`locale`</ph> object.","pos":[39260,39351],"source":" It also exchanges ` right``.`[getloc()](#basic_streambuf__getloc) with the `locale` object."},{"pos":[39399,39420],"content":"basic_streambuf::sync"},{"content":"A protected virtual function that tries to synchronize the controlled streams with any associated external streams.","pos":[39424,39539]},{"content":"Return Value","pos":[39584,39596]},{"content":"If the function cannot succeed, it returns -1.","pos":[39600,39646]},{"content":"The default behavior is to return zero.","pos":[39647,39686]},{"content":"Remarks","pos":[39696,39703]},{"content":"involves writing out any elements between the beginning and next pointers for the output buffer.","pos":[39714,39810]},{"content":"It does not involve putting back any elements between the next and end pointers for the input buffer.","pos":[39811,39912]},{"pos":[39967,39995],"content":"basic_streambuf::traits_type"},{"pos":[39999,40057],"content":"Associates a type name with the <bpt id=\"p1\">**</bpt>Tr<ept id=\"p1\">**</ept> template parameter.","source":"Associates a type name with the **Tr** template parameter."},{"pos":[40147,40169],"content":"basic_streambuf::uflow"},{"content":"A protected virtual function that extracts the current element from the input stream.","pos":[40173,40258]},{"content":"Return Value","pos":[40309,40321]},{"content":"The current element.","pos":[40325,40345]},{"content":"Remarks","pos":[40355,40362]},{"content":"The protected virtual member function tries to extract the current element <bpt id=\"p1\">**</bpt>ch<ept id=\"p1\">**</ept> from the input stream, then advance the current stream position, and return the element as <bpt id=\"p2\">**</bpt>traits_type::<ept id=\"p2\">**</ept><bpt id=\"p3\">[</bpt>to_int_type<ept id=\"p3\">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <bpt id=\"p4\">**</bpt>ch<ept id=\"p4\">**</ept>).","pos":[40366,40647],"source":"The protected virtual member function tries to extract the current element **ch** from the input stream, then advance the current stream position, and return the element as **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( **ch**)."},{"content":"It can do so in various ways:","pos":[40648,40677]},{"pos":[40687,40830],"content":"If a read position is available, it takes <bpt id=\"p1\">**</bpt>ch<ept id=\"p1\">**</ept> as the element stored in the read position and advances the next pointer for the input buffer.","source":"If a read position is available, it takes **ch** as the element stored in the read position and advances the next pointer for the input buffer."},{"pos":[40840,40935],"content":"It can read an element directly, from some external source, and deliver it as the value <bpt id=\"p1\">**</bpt>ch<ept id=\"p1\">**</ept>.","source":"It can read an element directly, from some external source, and deliver it as the value **ch**."},{"content":"For a stream buffer with common input and output streams, it can make a read position available by writing out, to some external destination, some or all of the elements between the beginning and next pointers for the output buffer.","pos":[40945,41177]},{"content":"Or it can allocate new or additional storage for the input buffer.","pos":[41178,41244]},{"content":"The function then reads in, from some external source, one or more elements.","pos":[41245,41321]},{"content":"If the function cannot succeed, it returns <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>eof<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>, or throws an exception.","pos":[41328,41478],"source":"If the function cannot succeed, it returns **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof), or throws an exception."},{"content":"Otherwise, it returns the current element <ph id=\"ph1\">`ch`</ph> in the input stream, converted as described above, and advances the next pointer for the input buffer.","pos":[41479,41628],"source":" Otherwise, it returns the current element `ch` in the input stream, converted as described above, and advances the next pointer for the input buffer."},{"content":"The default behavior is to call <bpt id=\"p1\">[</bpt>underflow<ept id=\"p1\">](#basic_streambuf__underflow)</ept> and, if that function returns <bpt id=\"p2\">**</bpt>traits_type::eof<ept id=\"p2\">**</ept>, to return <bpt id=\"p3\">**</bpt>traits_type::eof<ept id=\"p3\">**</ept>.","pos":[41629,41785],"source":" The default behavior is to call [underflow](#basic_streambuf__underflow) and, if that function returns **traits_type::eof**, to return **traits_type::eof**."},{"content":"Otherwise, the function returns the current element <bpt id=\"p1\">**</bpt>ch<ept id=\"p1\">**</ept> in the input stream, converted as previously described, and advances the next pointer for the input buffer.","pos":[41786,41952],"source":" Otherwise, the function returns the current element **ch** in the input stream, converted as previously described, and advances the next pointer for the input buffer."},{"pos":[42005,42031],"content":"basic_streambuf::underflow"},{"content":"Protected, virtual function to extract the current element from the input stream.","pos":[42035,42116]},{"content":"Return Value","pos":[42171,42183]},{"content":"The current element.","pos":[42187,42207]},{"content":"Remarks","pos":[42217,42224]},{"content":"The protected virtual member function endeavors to extract the current element <bpt id=\"p1\">**</bpt>ch<ept id=\"p1\">**</ept> from the input stream, without advancing the current stream position, and return it as <ph id=\"ph1\">`traits_type::`</ph><bpt id=\"p2\">[</bpt>to_int_type<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <bpt id=\"p3\">**</bpt>ch<ept id=\"p3\">**</ept>).","pos":[42228,42507],"source":"The protected virtual member function endeavors to extract the current element **ch** from the input stream, without advancing the current stream position, and return it as `traits_type::`[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( **ch**)."},{"content":"It can do so in various ways:","pos":[42508,42537]},{"content":"If a read position is available, <bpt id=\"p1\">**</bpt>ch<ept id=\"p1\">**</ept> is the element stored in the read position.","pos":[42547,42630],"source":"If a read position is available, **ch** is the element stored in the read position."},{"content":"For more information on this, see the Remarks section of the <bpt id=\"p1\">[</bpt>basic_streambuf Class<ept id=\"p1\">](../standard-library/basic-streambuf-class.md)</ept>.","pos":[42631,42762],"source":" For more information on this, see the Remarks section of the [basic_streambuf Class](../standard-library/basic-streambuf-class.md)."},{"content":"It can make a read position available by allocating new or additional storage for the input buffer, then reading in, from some external source, one or more elements.","pos":[42772,42937]},{"content":"For more information on this, see the Remarks section of the <bpt id=\"p1\">[</bpt>basic_streambuf Class<ept id=\"p1\">](../standard-library/basic-streambuf-class.md)</ept>.","pos":[42938,43069],"source":" For more information on this, see the Remarks section of the [basic_streambuf Class](../standard-library/basic-streambuf-class.md)."},{"content":"If the function cannot succeed, it returns <ph id=\"ph1\">`traits_type::`</ph><bpt id=\"p1\">[</bpt>eof<ept id=\"p1\">](../standard-library/char-traits-struct.md#char_traits__eof)</ept><ph id=\"ph2\">`()`</ph> or throws an exception.","pos":[43076,43227],"source":"If the function cannot succeed, it returns `traits_type::`[eof](../standard-library/char-traits-struct.md#char_traits__eof)`()` or throws an exception."},{"content":"Otherwise, it returns the current element in the input stream, converted as previously described.","pos":[43228,43325]},{"content":"The default behavior is to return <ph id=\"ph1\">`traits_type::eof()`</ph>.","pos":[43326,43381],"source":" The default behavior is to return `traits_type::eof()`."},{"content":"The virtual <ph id=\"ph1\">`underflow`</ph> function, with the <bpt id=\"p1\">[</bpt>sync<ept id=\"p1\">](#basic_streambuf__sync)</ept> and <bpt id=\"p2\">[</bpt>overflow<ept id=\"p2\">](#basic_streambuf__overflow)</ept> functions, defines the characteristics of the <ph id=\"ph2\">`streambuf`</ph>-derived class.","pos":[43388,43577],"source":"The virtual `underflow` function, with the [sync](#basic_streambuf__sync) and [overflow](#basic_streambuf__overflow) functions, defines the characteristics of the `streambuf`-derived class."},{"content":"Each derived class might implement <ph id=\"ph1\">`underflow`</ph> differently, but the interface with the calling stream class is the same.","pos":[43578,43698],"source":" Each derived class might implement `underflow` differently, but the interface with the calling stream class is the same."},{"pos":[43705,43969],"content":"The <ph id=\"ph1\">`underflow`</ph> function is most frequently called by public <ph id=\"ph2\">`streambuf`</ph> functions like <bpt id=\"p1\">[</bpt>sgetc<ept id=\"p1\">](#basic_streambuf__sgetc)</ept> and <bpt id=\"p2\">[</bpt>sgetn<ept id=\"p2\">](#basic_streambuf__sgetn)</ept> when the get area is empty, but other classes, including the stream classes, can call <ph id=\"ph3\">`underflow`</ph> anytime.","source":"The `underflow` function is most frequently called by public `streambuf` functions like [sgetc](#basic_streambuf__sgetc) and [sgetn](#basic_streambuf__sgetn) when the get area is empty, but other classes, including the stream classes, can call `underflow` anytime."},{"content":"The <ph id=\"ph1\">`underflow`</ph> function supplies the get area with characters from the input source.","pos":[43976,44061],"source":"The `underflow` function supplies the get area with characters from the input source."},{"content":"If the get area contains characters, <ph id=\"ph1\">`underflow`</ph> returns the first character.","pos":[44062,44139],"source":" If the get area contains characters, `underflow` returns the first character."},{"content":"If the get area is empty, it fills the get area and returns the next character (which it leaves in the get area).","pos":[44140,44253]},{"content":"If there are no more characters available, then <ph id=\"ph1\">`underflow`</ph> returns <ph id=\"ph2\">`EOF`</ph> and leaves the get area empty.","pos":[44254,44358],"source":" If there are no more characters available, then `underflow` returns `EOF` and leaves the get area empty."},{"pos":[44365,44532],"content":"In the <ph id=\"ph1\">`strstreambuf`</ph> class, <ph id=\"ph2\">`underflow`</ph> adjusts the <bpt id=\"p1\">[</bpt>egptr<ept id=\"p1\">](#basic_streambuf__egptr)</ept> pointer to access storage that was dynamically allocated by a call to <ph id=\"ph3\">`overflow`</ph>.","source":"In the `strstreambuf` class, `underflow` adjusts the [egptr](#basic_streambuf__egptr) pointer to access storage that was dynamically allocated by a call to `overflow`."},{"pos":[44582,44605],"content":"basic_streambuf::xsgetn"},{"content":"Protected, virtual function to extract elements from the input stream.","pos":[44609,44679]},{"content":"This method is potentially unsafe, as it relies on the caller to check that the passed values are correct.","pos":[44686,44792]},{"content":"Parameters","pos":[44889,44899]},{"content":"The buffer to contain the extracted characters.","pos":[44913,44960]},{"content":"The number of elements to extract.","pos":[44979,45013]},{"content":"Return Value","pos":[45023,45035]},{"content":"The number of elements extracted.","pos":[45039,45072]},{"content":"Remarks","pos":[45082,45089]},{"content":"The protected virtual member function extracts up to <ph id=\"ph1\">` count`</ph> elements from the input stream, as if by repeated calls to <bpt id=\"p1\">[</bpt>sbumpc<ept id=\"p1\">](#basic_streambuf__sbumpc)</ept>, and stores them in the array beginning at <ph id=\"ph2\">` ptr`</ph>.","pos":[45093,45299],"source":"The protected virtual member function extracts up to ` count` elements from the input stream, as if by repeated calls to [sbumpc](#basic_streambuf__sbumpc), and stores them in the array beginning at ` ptr`."},{"content":"It returns the number of elements actually extracted.","pos":[45300,45353]},{"pos":[45403,45426],"content":"basic_streambuf::xsputn"},{"content":"Protected, virtual function to insert elements into the output stream.","pos":[45430,45500]},{"content":"Parameters","pos":[45592,45602]},{"content":"Pointer to elements to insert.","pos":[45616,45646]},{"content":"Number of elements to insert.","pos":[45665,45694]},{"content":"Return Value","pos":[45704,45716]},{"content":"The number of elements actually inserted into the stream.","pos":[45720,45777]},{"content":"Remarks","pos":[45787,45794]},{"content":"The protected virtual member function inserts up to <ph id=\"ph1\">` count`</ph> elements into the output stream, as if by repeated calls to <bpt id=\"p1\">[</bpt>sputc<ept id=\"p1\">](#basic_streambuf__sputc)</ept>, from the array beginning at <ph id=\"ph2\">` ptr`</ph>.","pos":[45798,45988],"source":"The protected virtual member function inserts up to ` count` elements into the output stream, as if by repeated calls to [sputc](#basic_streambuf__sputc), from the array beginning at ` ptr`."},{"content":"The insertion of characters into the output stream stops once all <ph id=\"ph1\">` count`</ph> characters have been written, or if calling <ph id=\"ph2\">`sputc( count)`</ph> would return <ph id=\"ph3\">`traits::eof()`</ph>.","pos":[45989,46153],"source":" The insertion of characters into the output stream stops once all ` count` characters have been written, or if calling `sputc( count)` would return `traits::eof()`."},{"content":"It returns the number of elements actually inserted.","pos":[46154,46206]},{"content":"See Also","pos":[46215,46223]},{"content":"Thread Safety in the C++ Standard Library","pos":[46228,46269]},{"content":"iostream Programming","pos":[46342,46362]},{"content":"iostreams Conventions","pos":[46414,46435]}],"content":"---\ntitle: \"basic_streambuf Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"basic_streambuf\"\n  - \"streambuf/std::basic_streambuf\"\n  - \"std.basic_streambuf\"\n  - \"std::basic_streambuf\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"basic_streambuf class\"\nms.assetid: 136af6c3-13bf-4501-9288-b93da26efac7\ncaps.latest.revision: 27\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# basic_streambuf Class\nDescribes an abstract base class for deriving a stream buffer, which controls the transmission of elements to and from a specific representation of a stream.  \n  \n## Syntax  \n  \n```  \ntemplate <class Elem, class Tr = char_traits<Elem>>  \nclass basic_streambuf;  \n```  \n  \n#### Parameters  \n `Elem`  \n A [char_type](#basic_streambuf__char_type).  \n  \n `Tr`  \n The character [traits_type](#basic_streambuf__traits_type).  \n  \n## Remarks  \n The template class describes an abstract base class for deriving a stream buffer, which controls the transmission of elements to and from a specific representation of a stream. An object of class `basic_streambuf` helps control a stream with elements of type `Tr`, also known as [char_type](#basic_streambuf__char_type), whose character traits are determined by the class [char_traits](../standard-library/char-traits-struct.md), also known as [traits_type](#basic_streambuf__traits_type).  \n  \n Every stream buffer conceptually controls two independent streams: one for extractions (input) and one for insertions (output). A specific representation may, however, make either or both of these streams inaccessible. It typically maintains some relationship between the two streams. What you insert into the output stream of a [basic_stringbuf](../standard-library/basic-stringbuf-class.md)< `Elem`, `Tr`> object, for example, is what you later extract from its input stream. When you position one stream of a [basic_filebuf](../standard-library/basic-filebuf-class.md)< `Elem`, `Tr`> object, you position the other stream in tandem.  \n  \n The public interface to template class `basic_streambuf` supplies the operations that are common to all stream buffers, however specialized. The protected interface supplies the operations needed for a specific representation of a stream to do its work. The protected virtual member functions let you tailor the behavior of a derived stream buffer for a specific representation of a stream. Each derived stream buffer in this library describes how it specializes the behavior of its protected virtual member functions. The default behavior for the base class, which is often to do nothing, is described in this topic.  \n  \n The remaining protected member functions control copying to and from any storage supplied to buffer transmissions to and from streams. An input buffer, for example, is characterized by:  \n  \n- [eback](#basic_streambuf__eback), a pointer to the beginning of the buffer.  \n  \n- [gptr](#basic_streambuf__gptr), a pointer to the next element to read.  \n  \n- [egptr](#basic_streambuf__egptr), a pointer just past the end of the buffer.  \n  \n Similarly, an output buffer is characterized by:  \n  \n- [pbase](#basic_streambuf__pbase), a pointer to the beginning of the buffer.  \n  \n- [pptr](#basic_streambuf__pptr), a pointer to the next element to write.  \n  \n- [epptr](#basic_streambuf__epptr), a pointer just past the end of the buffer.  \n  \n For any buffer, the following protocol is used:  \n  \n-   If the next pointer is null, no buffer exists. Otherwise, all three pointers point into the same sequence. They can be safely compared for order.  \n  \n-   For an output buffer, if the next pointer compares less than the end pointer, you can store an element at the write position designated by the next pointer.  \n  \n-   For an input buffer, if the next pointer compares less than the end pointer, you can read an element at the read position designated by the next pointer.  \n  \n-   For an input buffer, if the beginning pointer compares less than the next pointer, you can put back an element at the putback position designated by the decremented next pointer.  \n  \n Any protected virtual member functions you write for a class derived from `basic_streambuf`< `Elem`, `Tr`> must cooperate in maintaining this protocol.  \n  \n An object of class `basic_streambuf`< `Elem`, `Tr`> stores the six pointers previously described. It also stores a locale object in an object of type [locale](../standard-library/locale-class.md) for potential use by a derived stream buffer.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[basic_streambuf](#basic_streambuf__basic_streambuf)|Constructs an object of type `basic_streambuf`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#basic_streambuf__char_type)|Associates a type name with the `Elem` template parameter.|  \n|[int_type](#basic_streambuf__int_type)|Associates a type name within `basic_streambuf` scope with the `Elem` template parameter.|  \n|[off_type](#basic_streambuf__off_type)|Associates a type name within `basic_streambuf` scope with the `Elem` template parameter.|  \n|[pos_type](#basic_streambuf__pos_type)|Associates a type name within `basic_streambuf` scope with the `Elem` template parameter.|  \n|[traits_type](#basic_streambuf__traits_type)|Associates a type name with the `Tr` template parameter.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[eback](#basic_streambuf__eback)|A protected function that returns a pointer to the beginning of the input buffer.|  \n|[egptr](#basic_streambuf__egptr)|A protected function that returns a pointer just past the end of the input buffer.|  \n|[epptr](#basic_streambuf__epptr)|A protected function that returns a pointer just past the end of the output buffer.|  \n|[gbump](#basic_streambuf__gbump)|A protected function that adds ` count` to the next pointer for the input buffer.|  \n|[getloc](#basic_streambuf__getloc)|Gets the `basic_streambuf` object's locale.|  \n|[gptr](#basic_streambuf__gptr)|A protected function that returns a pointer to the next element of the input buffer.|  \n|[imbue](#basic_streambuf__imbue)|A protected, virtual function called by [pubimbue](#basic_streambuf__pubimbue).|  \n|[in_avail](#basic_streambuf__in_avail)|Returns the number of elements that are ready to be read from the buffer.|  \n|[overflow](#basic_streambuf__overflow)|A protected virtual function that can be called when a new character is inserted into a full buffer.|  \n|[pbackfail](#basic_streambuf__pbackfail)|A protected virtual member function that tries to put back an element into the input stream, then make it the current element (pointed to by the next pointer).|  \n|[pbase](#basic_streambuf__pbase)|A protected function that returns a pointer to the beginning of the output buffer.|  \n|[pbump](#basic_streambuf__pbump)|A protected function that adds `count` to the next pointer for the output buffer.|  \n|[pptr](#basic_streambuf__pptr)|A protected function that returns a pointer to the next element of the output buffer.|  \n|[pubimbue](#basic_streambuf__pubimbue)|Sets the `basic_streambuf` object's locale.|  \n|[pubseekoff](#basic_streambuf__pubseekoff)|Calls [seekoff](#basic_streambuf__seekoff), a protected virtual function that is overridden in a derived class.|  \n|[pubseekpos](#basic_streambuf__pubseekpos)|Calls [seekpos](#basic_streambuf__seekpos), a protected virtual function that is overridden in a derived class and resets the current pointer position.|  \n|[pubsetbuf](#basic_streambuf__pubsetbuf)|Calls [setbuf](#basic_streambuf__setbuf), a protected virtual function that is overridden in a derived class.|  \n|[pubsync](#basic_streambuf__pubsync)|Calls [sync](#basic_streambuf__sync), a protected virtual function that is overridden in a derived class and updates the external stream associated with this buffer.|  \n|[sbumpc](#basic_streambuf__sbumpc)|Reads and returns the current element, moving the stream pointer.|  \n|[seekoff](#basic_streambuf__seekoff)|The protected virtual member function tries to alter the current positions for the controlled streams.|  \n|[seekpos](#basic_streambuf__seekpos)|The protected virtual member function tries to alter the current positions for the controlled streams.|  \n|[setbuf](#basic_streambuf__setbuf)|The protected virtual member function performs an operation particular to each derived stream buffer.|  \n|[setg](#basic_streambuf__setg)|A protected function that stores `_Gbeg` in the beginning pointer, `_Gnext` in the next pointer, and `_Gend` in the end pointer for the input buffer.|  \n|[setp](#basic_streambuf__setp)|A protected function that stores `_Pbeg` in the beginning pointer and `_Pend` in the end pointer for the output buffer.|  \n|[sgetc](#basic_streambuf__sgetc)|Returns current element without changing position in the stream.|  \n|[sgetn](#basic_streambuf__sgetn)|Returns the number of elements read.|  \n|[showmanyc](#basic_streambuf__showmanyc)|Protected virtual member function that returns a count of the number of characters that can be extracted from the input stream and ensure that the program will not be subject to an indefinite wait.|  \n|[snextc](#basic_streambuf__snextc)|Reads the current element and returns the following element.|  \n|[sputbackc](#basic_streambuf__sputbackc)|Puts a `char_type` in the stream.|  \n|[sputc](#basic_streambuf__sputc)|Puts a character into the stream.|  \n|[sputn](#basic_streambuf__sputn)|Puts a character string into the stream.|  \n|[stossc](#basic_streambuf__stossc)|Move past the current element in the stream.|  \n|[sungetc](#basic_streambuf__sungetc)|Gets a character from the stream.|  \n|[swap](#basic_streambuf__swap)|Exchanges the values in this object for the values in the provided `basic_streambuf` object parameter.|  \n|[sync](#basic_streambuf__sync)|A protected virtual function that tries to synchronize the controlled streams with any associated external streams.|  \n|[uflow](#basic_streambuf__uflow)|A protected virtual function that extracts the current element from the input stream.|  \n|[underflow](#basic_streambuf__underflow)|A protected virtual function that extracts the current element from the input stream.|  \n|[xsgetn](#basic_streambuf__xsgetn)|A protected virtual function that extracts elements from the input stream.|  \n|[xsputn](#basic_streambuf__xsputn)|A protected virtual function that inserts elements into the output stream.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator=](#basic_streambuf__operator_eq)|Assigns the values of this object from another `basic_streambuf` object.|  \n  \n## Requirements  \n **Header:** \\<streambuf>  \n  \n **Namespace:** std  \n  \n##  <a name=\"basic_streambuf__basic_streambuf\"></a>  basic_streambuf::basic_streambuf  \n Constructs an object of type `basic_streambuf`.  \n  \n```  \nbasic_streambuf();\n\nbasic_streambuf(const basic_streambuf& right);\n```  \n  \n### Parameters  \n ` right`  \n An lvalue reference to the `basic_streambuf` object that is used to set the values for this `basic_streambuf` object.  \n  \n### Remarks  \n The first protected constructor stores a null pointer in all pointers controlling the input buffer and the output buffer. It also stores `locale::classic` in the locale object. For more information, see [locale::classic](../standard-library/locale-class.md#locale__classic).  \n  \n The second protected constructor copies the pointers and locale from ` right`.  \n  \n##  <a name=\"basic_streambuf__char_type\"></a>  basic_streambuf::char_type  \n Associates a type name with the **Elem** template parameter.  \n  \n```  \ntypedef Elem char_type;  \n```  \n  \n##  <a name=\"basic_streambuf__eback\"></a>  basic_streambuf::eback  \n A protected function that returns a pointer to the beginning of the input buffer.  \n  \n```  \nchar_type *eback() const;\n```  \n  \n### Return Value  \n A pointer to the beginning of the input buffer.  \n  \n##  <a name=\"basic_streambuf__egptr\"></a>  basic_streambuf::egptr  \n A protected function that returns a pointer just past the end of the input buffer.  \n  \n```  \nchar_type *egptr() const;\n```  \n  \n### Return Value  \n A pointer just past the end of the input buffer.  \n  \n##  <a name=\"basic_streambuf__epptr\"></a>  basic_streambuf::epptr  \n A protected function that returns a pointer just past the end of the output buffer.  \n  \n```  \nchar_type *epptr() const;\n```  \n  \n### Return Value  \n A pointer just past the end of the output buffer.  \n  \n##  <a name=\"basic_streambuf__gbump\"></a>  basic_streambuf::gbump  \n A protected function that adds ` count` to the next pointer for the input buffer.  \n  \n```  \nvoid gbump(int count);\n```  \n  \n### Parameters  \n ` count`  \n The amount by which to advance the pointer.  \n  \n##  <a name=\"basic_streambuf__getloc\"></a>  basic_streambuf::getloc  \n Gets the basic_streambuf object's locale.  \n  \n```  \nlocale getloc() const;\n```  \n  \n### Return Value  \n The stored locale object.  \n  \n### Remarks  \n For related information, see [ios_base::getloc](../standard-library/ios-base-class.md#ios_base__getloc).  \n  \n### Example  \n  \n```cpp  \n// basic_streambuf_getloc.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   cout << cout.rdbuf( )->getloc( ).name( ).c_str( ) << endl;  \n}  \n```  \n  \n```Output  \nC  \n```  \n  \n##  <a name=\"basic_streambuf__gptr\"></a>  basic_streambuf::gptr  \n A protected function that returns a pointer to the next element of the input buffer.  \n  \n```  \nchar_type *gptr() const;\n```  \n  \n### Return Value  \n A pointer to the next element of the input buffer.  \n  \n##  <a name=\"basic_streambuf__imbue\"></a>  basic_streambuf::imbue  \n A protected virtual function called by [pubimbue](#basic_streambuf__pubimbue).  \n  \n```  \nvirtual void imbue(const locale& _Loc);\n```  \n  \n### Parameters  \n `_Loc`  \n A reference to a locale.  \n  \n### Remarks  \n The default behavior is to do nothing.  \n  \n##  <a name=\"basic_streambuf__in_avail\"></a>  basic_streambuf::in_avail  \n Returns the number of elements that are ready to be read from the buffer.  \n  \n```  \nstreamsize in_avail();\n```  \n  \n### Return Value  \n The number of elements that are ready to be read from the buffer.  \n  \n### Remarks  \n If a [read position](../standard-library/basic-streambuf-class.md) is available, the member function returns [egptr](#basic_streambuf__egptr) – [gptr](#basic_streambuf__gptr). Otherwise, it returns [showmanyc](#basic_streambuf__showmanyc).  \n  \n### Example  \n  \n```cpp  \n// basic_streambuf_in_avail.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   char c;  \n   // cin's buffer is empty, in_avail will return 0  \n   cout << cin.rdbuf( )->in_avail( ) << endl;  \n   cin >> c;  \n   cout << cin.rdbuf( )->in_avail( ) << endl;  \n}  \n```  \n  \n##  <a name=\"basic_streambuf__int_type\"></a>  basic_streambuf::int_type  \n Associates a type name within basic_streambuf scope with one of the types in a template parameter.  \n  \n```  \ntypedef typename traits_type::int_type int_type;  \n```  \n  \n##  <a name=\"basic_streambuf__off_type\"></a>  basic_streambuf::off_type  \n Associates a type name within basic_streambuf scope with one of the types in a template parameter.  \n  \n```  \ntypedef typename traits_type::off_type off_type;  \n```  \n  \n##  <a name=\"basic_streambuf__operator_eq\"></a>  basic_streambuf::operator=  \n Assigns the values of this object from another `basic_streambuf` object.  \n  \n```  \nbasic_streambuf& operator=(const basic_streambuf& right);\n```  \n  \n### Parameters  \n ` right`  \n An lvalue reference to the `basic_streambuf` object that is used to assign values to this object.  \n  \n### Remarks  \n The protected member operator copies from ` right` the pointers that control the input buffer and the output buffer. It also stores ` right``.`[getloc()](#basic_streambuf__getloc) in the `locale object`. It returns `*this`.  \n  \n##  <a name=\"basic_streambuf__overflow\"></a>  basic_streambuf::overflow  \n A protected virtual function that can be called when a new character is inserted into a full buffer.  \n  \n```  \nvirtual int_type overflow(int_type _Meta = traits_type::eof());\n```  \n  \n### Parameters  \n `_Meta`  \n The character to insert into the buffer, or **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof).  \n  \n### Return Value  \n If the function cannot succeed, it returns **traits_type::eof** or throws an exception. Otherwise, it returns **traits_type::**[not_eof](../standard-library/char-traits-struct.md#char_traits__not_eof)(_ *Meta*). The default behavior is to return **traits_type::eof**.  \n  \n### Remarks  \n If _ *Meta* does not compare equal to **traits_type::eof**, the protected virtual member function endeavors to insert the element **traits_type::**[to_char_type](../standard-library/char-traits-struct.md#char_traits__to_char_type)(\\_ *Meta*) into the output stream. It can do so in various ways:  \n  \n-   If a `write position` is available, it can store the element into the write position and increment the next pointer for the output buffer.  \n  \n-   It can make a write position available by allocating new or additional storage for the output buffer.  \n  \n-   It can make a write position available by writing out, to some external destination, some or all of the elements between the beginning and next pointers for the output buffer.  \n  \n The virtual overflow function, together with the [sync](#basic_streambuf__sync) and [underflow](#basic_streambuf__underflow) functions, defines the characteristics of the streambuf-derived class. Each derived class might implement overflow differently, but the interface with the calling stream class is the same.  \n  \n The `overflow` function is most frequently called by public `streambuf` functions like `sputc` and `sputn` when the put area is full, but other classes, including the stream classes, can call `overflow` anytime.  \n  \n The function consumes the characters in the put area between the `pbase` and `pptr` pointers and then reinitializes the put area. The `overflow` function must also consume `nCh` (if `nCh` is not `EOF`), or it might choose to put that character in the new put area so that it will be consumed on the next call.  \n  \n The definition of consume varies among derived classes. For example, the `filebuf` class writes its characters to a file, while the `strstreambuf` class keeps them in its buffer and (if the buffer is designated as dynamic) expands the buffer in response to a call to overflow. This expansion is achieved by freeing the old buffer and replacing it with a new, larger one. The pointers are adjusted as necessary.  \n  \n##  <a name=\"basic_streambuf__pbackfail\"></a>  basic_streambuf::pbackfail  \n A protected virtual member function that tries to put back an element into the input stream, then make it the current element (pointed to by the next pointer).  \n  \n```  \nvirtual int_type pbackfail(int_type _Meta = traits_type::eof());\n```  \n  \n### Parameters  \n `_Meta`  \n The character to insert into the buffer, or **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof).  \n  \n### Return Value  \n If the function cannot succeed, it returns **traits_type::eof** or throws an exception. Otherwise, it returns some other value. The default behavior is to return **traits_type::eof**.  \n  \n### Remarks  \n If _ *Meta* compares equal to **traits_type::eof**, the element to push back is effectively the one already in the stream before the current element. Otherwise, that element is replaced by **traits_type::**[to_char_type](../standard-library/char-traits-struct.md#char_traits__to_char_type)(\\_ *Meta*). The function can put back an element in various ways:  \n  \n-   If a putback position is available, it can store the element into the putback position and decrement the next pointer for the input buffer.  \n  \n-   It can make a putback position available by allocating new or additional storage for the input buffer.  \n  \n-   For a stream buffer with common input and output streams, it can make a putback position available by writing out, to some external destination, some or all of the elements between the beginning and next pointers for the output buffer.  \n  \n##  <a name=\"basic_streambuf__pbase\"></a>  basic_streambuf::pbase  \n A protected function that returns a pointer to the beginning of the output buffer.  \n  \n```  \nchar_type *pbase() const;\n```  \n  \n### Return Value  \n A pointer to the beginning of the output buffer.  \n  \n##  <a name=\"basic_streambuf__pbump\"></a>  basic_streambuf::pbump  \n A protected function that adds ` count` to the next pointer for the output buffer.  \n  \n```  \nvoid pbump(int count);\n```  \n  \n### Parameters  \n ` count`  \n The number of characters by which to move the write position forward.  \n  \n##  <a name=\"basic_streambuf__pos_type\"></a>  basic_streambuf::pos_type  \n Associates a type name within basic_streambuf scope with one of the types in a template parameter.  \n  \n```  \ntypedef typename traits_type::pos_type pos_type;  \n```  \n  \n##  <a name=\"basic_streambuf__pptr\"></a>  basic_streambuf::pptr  \n A protected function that returns a pointer to the next element of the output buffer.  \n  \n```  \nchar_type *pptr() const;\n```  \n  \n### Return Value  \n A pointer to the next element of the output buffer.  \n  \n##  <a name=\"basic_streambuf__pubimbue\"></a>  basic_streambuf::pubimbue  \n Sets the basic_streambuf object's locale.  \n  \n```  \nlocale pubimbue(const locale& _Loc);\n```  \n  \n### Parameters  \n `_Loc`  \n A reference to a locale.  \n  \n### Return Value  \n The previous value stored in the locale object.  \n  \n### Remarks  \n The member function stores _ *Loc* in the locale object and calls [imbue](#basic_streambuf__imbue).  \n  \n### Example  \n  See [basic_ios::imbue](../standard-library/basic-ios-class.md#basic_ios__imbue) for an example that uses `pubimbue`.  \n  \n##  <a name=\"basic_streambuf__pubseekoff\"></a>  basic_streambuf::pubseekoff  \n Calls [seekoff](#basic_streambuf__seekoff), a protected virtual function that is overridden in a derived class.  \n  \n```  \npos_type pubseekoff(off_type _Off,\n    ios_base::seekdir _Way,\n    ios_base::openmode _Which = ios_base::in | ios_base::out);\n```  \n  \n### Parameters  \n `_Off`  \n The position to seek for relative to `_Way`.  \n  \n `_Way`  \n The starting point for offset operations. See [seekdir](../standard-library/ios-base-class.md#ios_base__seekdir) for possible values.  \n  \n `_Which`  \n Specifies the mode for the pointer position. The default is to allow you to modify the read and write positions.  \n  \n### Return Value  \n Returns the new position or an invalid stream position ( [seekoff](#basic_streambuf__seekoff)(_ *Off*, `_Way`, `_Which`) ).  \n  \n### Remarks  \n Moves the pointer relative to `_Way`.  \n  \n##  <a name=\"basic_streambuf__pubseekpos\"></a>  basic_streambuf::pubseekpos  \n Calls [seekpos](#basic_streambuf__seekpos), a protected virtual function that is overridden in a derived class, and resets the current pointer position.  \n  \n```  \npos_type pubseekpos(pos_type _Sp, ios_base::openmode _Which = ios_base::in | ios_base::out);\n```  \n  \n### Parameters  \n `_Sp`  \n The position to seek for.  \n  \n `_Which`  \n Specifies the mode for the pointer position. The default is to allow you to modify the read and write positions.  \n  \n### Return Value  \n The new position or an invalid stream position. To determine if the stream position is invalid, compare the return value with `pos_type(off_type(-1))`.  \n  \n### Remarks  \n The member function returns [seekpos](#basic_streambuf__seekpos)(_ *Sp*, `_Which`).  \n  \n##  <a name=\"basic_streambuf__pubsetbuf\"></a>  basic_streambuf::pubsetbuf  \n Calls [setbuf](#basic_streambuf__setbuf), a protected virtual function that is overridden in a derived class.  \n  \n```  \nbasic_streambuf<Elem, Tr> *pubsetbuf(\n    char_type* _Buffer,  \n    streamsize count);\n```  \n  \n### Parameters  \n `_Buffer`  \n A pointer to `char_type` for this instantiation.  \n  \n ` count`  \n The size of the buffer.  \n  \n### Return Value  \n Returns [setbuf](#basic_streambuf__setbuf)( `_Buffer`, ` count`).  \n  \n##  <a name=\"basic_streambuf__pubsync\"></a>  basic_streambuf::pubsync  \n Calls [sync](#basic_streambuf__sync), a protected virtual function that is overridden in a derived class, and updates the external stream associated with this buffer.  \n  \n```  \nint pubsync();\n```  \n  \n### Return Value  \n Returns [sync](#basic_streambuf__sync) or –1 if failure.  \n  \n##  <a name=\"basic_streambuf__sbumpc\"></a>  basic_streambuf::sbumpc  \n Reads and returns the current element, moving the stream pointer.  \n  \n```  \nint_type sbumpc();\n```  \n  \n### Return Value  \n The current element.  \n  \n### Remarks  \n If a read position is available, the member function returns **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( **\\***[gptr](#basic_streambuf__gptr)) and increments the next pointer for the input buffer. Otherwise, it returns [uflow](#basic_streambuf__uflow).  \n  \n### Example  \n  \n```cpp  \n// basic_streambuf_sbumpc.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   int i = 0;  \n   i = cin.rdbuf( )->sbumpc( );  \n   cout << i << endl;  \n}  \n```  \n  \n```Output  \n  \n3  \n  \n```  \n  \n```Output  \n  \n      33  \n51  \n```  \n  \n##  <a name=\"basic_streambuf__seekoff\"></a>  basic_streambuf::seekoff  \n A protected virtual member function that tries to alter the current positions for the controlled streams.  \n  \n```  \nvirtual pos_type seekoff(\n    off_type _Off,  \n    ios_base::seekdir _Way,  \n    ios_base::openmode _Which = ios_base::in | ios_base::out);\n```  \n  \n### Parameters  \n `_Off`  \n The position to seek for relative to `_Way`.  \n  \n `_Way`  \n The starting point for offset operations. See [seekdir](../standard-library/ios-base-class.md#ios_base__seekdir) for possible values.  \n  \n `_Which`  \n Specifies the mode for the pointer position. The default is to allow you to modify the read and write positions.  \n  \n### Return Value  \n Returns the new position or an invalid stream position ( `seekoff` (_ *Off*, `_Way`, `_Which`) ).  \n  \n### Remarks  \n The new position is determined as follows:  \n  \n-   If `_Way` == `ios_base::beg`, the new position is the beginning of the stream plus _ *Off*.  \n  \n-   If `_Way` == `ios_base::cur`, the new position is the current stream position plus _ *Off*.  \n  \n-   If `_Way` == `ios_base::end`, the new position is the end of the stream plus _ *Off*.  \n  \n Typically, if **which & ios_base::in** is nonzero, the input stream is affected, and if **which & ios_base::out** is nonzero, the output stream is affected. Actual use of this parameter varies among derived stream buffers, however.  \n  \n If the function succeeds in altering the stream position or positions, it returns the resulting stream position or one of the resulting stream positions. Otherwise, it returns an invalid stream position. The default behavior is to return an invalid stream position.  \n  \n##  <a name=\"basic_streambuf__seekpos\"></a>  basic_streambuf::seekpos  \n A protected virtual member function that tries to alter the current positions for the controlled streams.  \n  \n```  \nvirtual pos_type seekpos(pos_type _Sp, ios_base::openmode _Which = ios_base::in | ios_base::out);\n```  \n  \n### Parameters  \n `_Sp`  \n The position to seek for.  \n  \n `_Which`  \n Specifies the mode for the pointer position. The default is to allow you to modify the read and write positions.  \n  \n### Return Value  \n The new position, or an invalid stream position. To determine if the stream position is invalid, compare the return value with `pos_type(off_type(-1))`.  \n  \n### Remarks  \n The new position is _ *Sp*.  \n  \n Typically, if **which & ios_base::in** is nonzero, the input stream is affected, and if **which & ios_base::out** is nonzero, the output stream is affected. Actual use of this parameter varies among derived stream buffers, however.  \n  \n If the function succeeds in altering the stream position or positions, it returns the resulting stream position or one of the resulting stream positions. Otherwise, it returns an invalid stream position (-1). The default behavior is to return an invalid stream position.  \n  \n##  <a name=\"basic_streambuf__setbuf\"></a>  basic_streambuf::setbuf  \n A protected virtual member function that performs an operation particular to each derived stream buffer.  \n  \n```  \nvirtual basic_streambuf<Elem, Tr> *setbuf(\n    char_type* _Buffer,  \n    streamsize count);\n```  \n  \n### Parameters  \n `_Buffer`  \n Pointer to a buffer.  \n  \n ` count`  \n Size of the buffer.  \n  \n### Return Value  \n The default behavior is to return **this**.  \n  \n### Remarks  \n See [basic_filebuf](../standard-library/basic-filebuf-class.md). `setbuf` provides an area of memory for the `streambuf` object to use. How the buffer is used in defined in the derived classes.  \n  \n##  <a name=\"basic_streambuf__setg\"></a>  basic_streambuf::setg  \n A protected function that stores _ *Gbeg* in the beginning pointer, `_Gnext` in the next pointer, and `_Gend` in the end pointer for the input buffer.  \n  \n```  \nvoid setg(char_type* _Gbeg,\n    char_type* _Gnext,\n    char_type* _Gend);\n```  \n  \n### Parameters  \n *_Gbeg*  \n A pointer to the beginning of the buffer.  \n  \n `_Gnext`  \n A pointer to somewhere in the middle of the buffer.  \n  \n `_Gend`  \n A pointer to the end of the buffer.  \n  \n##  <a name=\"basic_streambuf__setp\"></a>  basic_streambuf::setp  \n A protected function that stores `_Pbeg` in the beginning pointer and `_Pend` in the end pointer for the output buffer.  \n  \n```  \nvoid setp(char_type* _Pbeg, char_type* _Pend);\n```  \n  \n### Parameters  \n `_Pbeg`  \n A pointer to the beginning of the buffer.  \n  \n `_Pend`  \n A pointer to the end of the buffer.  \n  \n##  <a name=\"basic_streambuf__sgetc\"></a>  basic_streambuf::sgetc  \n Returns current element without changing position in the stream.  \n  \n```  \nint_type sgetc();\n```  \n  \n### Return Value  \n The current element.  \n  \n### Remarks  \n If a read position is available, the member function returns **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( `*`[gptr](#basic_streambuf__gptr)). Otherwise, it returns [underflow](#basic_streambuf__underflow).  \n  \n### Example  \n  \n```cpp  \n// basic_streambuf_sgetc.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   ifstream myfile( \"basic_streambuf_sgetc.txt\", ios::in );  \n  \n   char i = myfile.rdbuf( )->sgetc( );  \n   cout << i << endl;  \n   i = myfile.rdbuf( )->sgetc( );  \n   cout << i << endl;  \n}  \n```  \n  \n##  <a name=\"basic_streambuf__sgetn\"></a>  basic_streambuf::sgetn  \n Extracts up to ` count` characters from the input buffer and stores them in the provided buffer ` ptr`.  \n  \n This method is potentially unsafe, as it relies on the caller to check that the passed values are correct.  \n  \n```  \nstreamsize sgetn(\n    char_type* ptr,  \n    streamsize count);\n```  \n  \n### Parameters  \n ` ptr`  \n The buffer to contain the extracted characters.  \n  \n ` count`  \n The number of elements to read.  \n  \n### Return Value  \n The number of elements read. See [streamsize](../standard-library/ios-typedefs.md#streamsize) for more information.  \n  \n### Remarks  \n The member function returns [xsgetn](#basic_streambuf__xsgetn)( ` ptr`, ` count`).  \n  \n### Example  \n  \n```cpp  \n// basic_streambuf_sgetn.cpp  \n// compile with: /EHsc /W3  \n#include <iostream>  \n#include <fstream>  \n  \nint main()  \n{  \n    using namespace std;  \n  \n    ifstream myfile(\"basic_streambuf_sgetn.txt\", ios::in);  \n    char a[10];  \n  \n    // Extract 3 characters from myfile and store them in a.  \n    streamsize i = myfile.rdbuf()->sgetn(&a[0], 3);  // C4996  \n    a[i] = myfile.widen('\\0');  \n  \n    // Display the size and contents of the buffer passed to sgetn.  \n    cout << i << \" \" << a << endl;  \n  \n    // Display the contents of the original input buffer.  \n    cout << myfile.rdbuf() << endl;  \n}  \n```  \n  \n##  <a name=\"basic_streambuf__showmanyc\"></a>  basic_streambuf::showmanyc  \n A protected virtual member function that returns a count of the number of characters that can be extracted from the input stream and ensure that the program will not be subject to an indefinite wait.  \n  \n```  \nvirtual streamsize showmanyc();\n```  \n  \n### Return Value  \n The default behavior is to return zero.  \n  \n##  <a name=\"basic_streambuf__snextc\"></a>  basic_streambuf::snextc  \n Reads the current element and returns the following element.  \n  \n```  \nint_type snextc();\n```  \n  \n### Return Value  \n The next element in the stream.  \n  \n### Remarks  \n The member function calls [sbumpc](#basic_streambuf__sbumpc) and, if that function returns **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof), returns **traits_type::eof**. Otherwise, it returns [sgetc](#basic_streambuf__sgetc).  \n  \n### Example  \n  \n```cpp  \n// basic_streambuf_snextc.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nint main( )   \n{  \n   using namespace std;  \n   int i = 0;  \n   i = cin.rdbuf( )->snextc( );  \n   // cout << ( int )char_traits<char>::eof << endl;  \n   cout << i << endl;  \n}  \n```  \n  \n```Output  \n  \naa  \n  \n```  \n  \n```Output  \n  \naa97  \n```  \n  \n##  <a name=\"basic_streambuf__sputbackc\"></a>  basic_streambuf::sputbackc  \n Puts a char_type in the stream.  \n  \n```  \nint_type sputbackc(char_type _Ch);\n```  \n  \n### Parameters  \n `_Ch`  \n The character.  \n  \n### Return Value  \n Returns the character or failure.  \n  \n### Remarks  \n If a putback position is available and `_Ch` compares equal to the character stored in that position, the member function decrements the next pointer for the input buffer and returns **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( `_Ch`). Otherwise, it returns [pbackfail](#basic_streambuf__pbackfail)( `_Ch`).  \n  \n### Example  \n  \n```cpp  \n// basic_streambuf_sputbackc.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main( )  \n{  \n    using namespace std;  \n  \n    ifstream myfile(\"basic_streambuf_sputbackc.txt\",  \n        ios::in);  \n  \n    int i = myfile.rdbuf()->sbumpc();  \n    cout << (char)i << endl;  \n    int j = myfile.rdbuf()->sputbackc('z');  \n    if (j == 'z')  \n    {  \n        cout << \"it worked\" << endl;  \n    }  \n    i = myfile.rdbuf()->sgetc();  \n    cout << (char)i << endl;  \n}  \n```  \n  \n##  <a name=\"basic_streambuf__sputc\"></a>  basic_streambuf::sputc  \n Puts a character into the stream.  \n  \n```  \nint_type sputc(char_type _Ch);\n```  \n  \n### Parameters  \n `_Ch`  \n The character.  \n  \n### Return Value  \n Returns the character, if successful.  \n  \n### Remarks  \n If a `write position` is available, the member function stores `_Ch` in the write position, increments the next pointer for the output buffer, and returns **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( `_Ch`). Otherwise, it returns [overflow](#basic_streambuf__overflow)( `_Ch`).  \n  \n### Example  \n  \n```cpp  \n// basic_streambuf_sputc.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main( )   \n{  \n   using namespace std;  \n  \n   int i = cout.rdbuf( )->sputc( 'a' );  \n   cout << endl << ( char )i << endl;  \n}  \n```  \n  \n```Output  \na  \na  \n```  \n  \n##  <a name=\"basic_streambuf__sputn\"></a>  basic_streambuf::sputn  \n Puts a character string into the stream.  \n  \n```  \nstreamsize sputn(const char_type* ptr, streamsize count);\n```  \n  \n### Parameters  \n ` ptr`  \n The character string.  \n  \n ` count`  \n The count of characters.  \n  \n### Return Value  \n The number of characters actually inserted into the stream.  \n  \n### Remarks  \n The member function returns [xsputn](#basic_streambuf__xsputn)( ` ptr`, ` count`). See the Remarks section of this member for more information.  \n  \n### Example  \n  \n```cpp  \n// basic_streambuf_sputn.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main()  \n{  \n    using namespace std;  \n  \n    streamsize i = cout.rdbuf()->sputn(\"test\", 4);  \n    cout << endl << i << endl;  \n}  \n```  \n  \n```Output  \ntest  \n4  \n```  \n  \n##  <a name=\"basic_streambuf__stossc\"></a>  basic_streambuf::stossc  \n Move past the current element in the stream.  \n  \n```  \nvoid stossc();\n```  \n  \n### Remarks  \n The member function calls [sbumpc](#basic_streambuf__sbumpc). Note that an implementation is not required to supply this member function.  \n  \n### Example  \n  \n```cpp  \n// basic_streambuf_stossc.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   ifstream myfile( \"basic_streambuf_stossc.txt\", ios::in );  \n  \n   myfile.rdbuf( )->stossc( );  \n   char i = myfile.rdbuf( )->sgetc( );  \n   cout << i << endl;  \n}  \n```  \n  \n##  <a name=\"basic_streambuf__sungetc\"></a>  basic_streambuf::sungetc  \n Gets a character from the stream.  \n  \n```  \nint_type sungetc();\n```  \n  \n### Return Value  \n Returns either the character or failure.  \n  \n### Remarks  \n If a putback position is available, the member function decrements the next pointer for the input buffer and returns `traits_type::`[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( `*`[gptr](#basic_streambuf__gptr)). However, it is not always possible to determine the last character read so that it can be captured in the state of the current buffer. If this is true, then the function returns [pbackfail](#basic_streambuf__pbackfail). To avoid this situation, keep track of the character to put back and call `sputbackc(ch)`, which will not fail provided you don't call it at the beginning of the stream and you don't try to put back more than one character.  \n  \n### Example  \n  \n```cpp  \n// basic_streambuf_sungetc.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main( )   \n{  \n   using namespace std;  \n  \n   ifstream myfile( \"basic_streambuf_sungetc.txt\", ios::in );  \n  \n   // Read and increment  \n   int i = myfile.rdbuf( )->sbumpc( );  \n   cout << ( char )i << endl;  \n  \n   // Read and increment  \n   i = myfile.rdbuf( )->sbumpc( );  \n   cout << ( char )i << endl;  \n  \n   // Decrement, read, and do not increment  \n   i = myfile.rdbuf( )->sungetc( );  \n   cout << ( char )i << endl;  \n  \n   i = myfile.rdbuf( )->sungetc( );   \n   cout << ( char )i << endl;  \n  \n   i = myfile.rdbuf( )->sbumpc( );  \n   cout << ( char )i << endl;  \n}  \n```  \n  \n##  <a name=\"basic_streambuf__swap\"></a>  basic_streambuf::swap  \n Exchanges the values in this object for the values in the provided `basic_streambuf` object.  \n  \n```  \nvoid swap(basic_streambuf& right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|` right`|An lvalue reference to the `basic_streambuf` object that is used to exchange values.|  \n  \n### Remarks  \n The protected member function exchanges with ` right` all the pointers controlling the `input buffer` and the `output buffer`. It also exchanges ` right``.`[getloc()](#basic_streambuf__getloc) with the `locale` object.  \n  \n##  <a name=\"basic_streambuf__sync\"></a>  basic_streambuf::sync  \n A protected virtual function that tries to synchronize the controlled streams with any associated external streams.  \n  \n```  \nvirtual int sync();\n```  \n  \n### Return Value  \n If the function cannot succeed, it returns -1. The default behavior is to return zero.  \n  \n### Remarks  \n `sync` involves writing out any elements between the beginning and next pointers for the output buffer. It does not involve putting back any elements between the next and end pointers for the input buffer.  \n  \n##  <a name=\"basic_streambuf__traits_type\"></a>  basic_streambuf::traits_type  \n Associates a type name with the **Tr** template parameter.  \n  \n```  \ntypedef Tr traits_type;  \n```  \n  \n##  <a name=\"basic_streambuf__uflow\"></a>  basic_streambuf::uflow  \n A protected virtual function that extracts the current element from the input stream.  \n  \n```  \nvirtual int_type uflow();\n```  \n  \n### Return Value  \n The current element.  \n  \n### Remarks  \n The protected virtual member function tries to extract the current element **ch** from the input stream, then advance the current stream position, and return the element as **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( **ch**). It can do so in various ways:  \n  \n-   If a read position is available, it takes **ch** as the element stored in the read position and advances the next pointer for the input buffer.  \n  \n-   It can read an element directly, from some external source, and deliver it as the value **ch**.  \n  \n-   For a stream buffer with common input and output streams, it can make a read position available by writing out, to some external destination, some or all of the elements between the beginning and next pointers for the output buffer. Or it can allocate new or additional storage for the input buffer. The function then reads in, from some external source, one or more elements.  \n  \n If the function cannot succeed, it returns **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof), or throws an exception. Otherwise, it returns the current element `ch` in the input stream, converted as described above, and advances the next pointer for the input buffer. The default behavior is to call [underflow](#basic_streambuf__underflow) and, if that function returns **traits_type::eof**, to return **traits_type::eof**. Otherwise, the function returns the current element **ch** in the input stream, converted as previously described, and advances the next pointer for the input buffer.  \n  \n##  <a name=\"basic_streambuf__underflow\"></a>  basic_streambuf::underflow  \n Protected, virtual function to extract the current element from the input stream.  \n  \n```  \nvirtual int_type underflow();\n```  \n  \n### Return Value  \n The current element.  \n  \n### Remarks  \n The protected virtual member function endeavors to extract the current element **ch** from the input stream, without advancing the current stream position, and return it as `traits_type::`[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( **ch**). It can do so in various ways:  \n  \n-   If a read position is available, **ch** is the element stored in the read position. For more information on this, see the Remarks section of the [basic_streambuf Class](../standard-library/basic-streambuf-class.md).  \n  \n-   It can make a read position available by allocating new or additional storage for the input buffer, then reading in, from some external source, one or more elements. For more information on this, see the Remarks section of the [basic_streambuf Class](../standard-library/basic-streambuf-class.md).  \n  \n If the function cannot succeed, it returns `traits_type::`[eof](../standard-library/char-traits-struct.md#char_traits__eof)`()` or throws an exception. Otherwise, it returns the current element in the input stream, converted as previously described. The default behavior is to return `traits_type::eof()`.  \n  \n The virtual `underflow` function, with the [sync](#basic_streambuf__sync) and [overflow](#basic_streambuf__overflow) functions, defines the characteristics of the `streambuf`-derived class. Each derived class might implement `underflow` differently, but the interface with the calling stream class is the same.  \n  \n The `underflow` function is most frequently called by public `streambuf` functions like [sgetc](#basic_streambuf__sgetc) and [sgetn](#basic_streambuf__sgetn) when the get area is empty, but other classes, including the stream classes, can call `underflow` anytime.  \n  \n The `underflow` function supplies the get area with characters from the input source. If the get area contains characters, `underflow` returns the first character. If the get area is empty, it fills the get area and returns the next character (which it leaves in the get area). If there are no more characters available, then `underflow` returns `EOF` and leaves the get area empty.  \n  \n In the `strstreambuf` class, `underflow` adjusts the [egptr](#basic_streambuf__egptr) pointer to access storage that was dynamically allocated by a call to `overflow`.  \n  \n##  <a name=\"basic_streambuf__xsgetn\"></a>  basic_streambuf::xsgetn  \n Protected, virtual function to extract elements from the input stream.  \n  \n This method is potentially unsafe, as it relies on the caller to check that the passed values are correct.  \n  \n```  \nvirtual streamsize xsgetn(\n    char_type* ptr,  \n    streamsize count);\n```  \n  \n### Parameters  \n ` ptr`  \n The buffer to contain the extracted characters.  \n  \n ` count`  \n The number of elements to extract.  \n  \n### Return Value  \n The number of elements extracted.  \n  \n### Remarks  \n The protected virtual member function extracts up to ` count` elements from the input stream, as if by repeated calls to [sbumpc](#basic_streambuf__sbumpc), and stores them in the array beginning at ` ptr`. It returns the number of elements actually extracted.  \n  \n##  <a name=\"basic_streambuf__xsputn\"></a>  basic_streambuf::xsputn  \n Protected, virtual function to insert elements into the output stream.  \n  \n```  \nvirtual streamsize xsputn(const char_type* ptr, streamsize count);\n```  \n  \n### Parameters  \n ` ptr`  \n Pointer to elements to insert.  \n  \n ` count`  \n Number of elements to insert.  \n  \n### Return Value  \n The number of elements actually inserted into the stream.  \n  \n### Remarks  \n The protected virtual member function inserts up to ` count` elements into the output stream, as if by repeated calls to [sputc](#basic_streambuf__sputc), from the array beginning at ` ptr`. The insertion of characters into the output stream stops once all ` count` characters have been written, or if calling `sputc( count)` would return `traits::eof()`. It returns the number of elements actually inserted.  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [iostream Programming](../standard-library/iostream-programming.md)   \n [iostreams Conventions](../standard-library/iostreams-conventions.md)\n\n"}