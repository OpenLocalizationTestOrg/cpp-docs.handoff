{"nodes":[{"pos":[12,45],"content":"rename (#import) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"rename (#import) | Microsoft Docs","pos":[0,33]}]},{"content":"rename (#import)","pos":[605,621]},{"content":"C++ Specific","pos":[624,636]},{"content":"Works around name collision problems.","pos":[645,682]},{"content":"Syntax","pos":[691,697]},{"content":"Parameters","pos":[753,763]},{"content":"Old name in the type library.","pos":[780,809]},{"content":"Name to be used instead of the old name.","pos":[829,869]},{"content":"Remarks","pos":[878,885]},{"pos":[889,1053],"content":"If this attribute is specified, the compiler replaces all occurrences of <bpt id=\"p1\">*</bpt>OldName<ept id=\"p1\">*</ept> in a type library with the user-supplied <bpt id=\"p2\">*</bpt>NewName<ept id=\"p2\">*</ept> in the resulting header files.","source":"If this attribute is specified, the compiler replaces all occurrences of *OldName* in a type library with the user-supplied *NewName* in the resulting header files."},{"content":"This attribute can be used when a name in the type library coincides with a macro definition in the system header files.","pos":[1060,1180]},{"content":"If this situation is not resolved, then various syntax errors will be generated, such as <bpt id=\"p1\">[</bpt>Compiler Error C2059<ept id=\"p1\">](../error-messages/compiler-errors-1/compiler-error-c2059.md)</ept> and <bpt id=\"p2\">[</bpt>Compiler Error C2061<ept id=\"p2\">](../error-messages/compiler-errors-1/compiler-error-c2061.md)</ept>.","pos":[1181,1442],"source":" If this situation is not resolved, then various syntax errors will be generated, such as [Compiler Error C2059](../error-messages/compiler-errors-1/compiler-error-c2059.md) and [Compiler Error C2061](../error-messages/compiler-errors-1/compiler-error-c2061.md)."},{"pos":[1450,1566],"content":"[!NOTE]\n The replacement is for a name used in the type library, not for a name used in the resulting header file.","leadings":["","> "],"nodes":[{"content":"The replacement is for a name used in the type library, not for a name used in the resulting header file.","pos":[9,114]}]},{"content":"For example, suppose a property named <ph id=\"ph1\">`MyParent`</ph> exists in a type library, and a macro <ph id=\"ph2\">`GetMyParent`</ph> is defined in a header file and used before <ph id=\"ph3\">`#import`</ph>.","pos":[1573,1728],"source":"For example, suppose a property named `MyParent` exists in a type library, and a macro `GetMyParent` is defined in a header file and used before `#import`."},{"content":"Since <ph id=\"ph1\">`GetMyParent`</ph> is the default name of a wrapper function for the error-handling <bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept> property, a name collision will occur.","pos":[1729,1860],"source":" Since `GetMyParent` is the default name of a wrapper function for the error-handling **get** property, a name collision will occur."},{"content":"To work around the problem, use the following attribute in the <ph id=\"ph1\">`#import`</ph> statement:","pos":[1861,1944],"source":" To work around the problem, use the following attribute in the `#import` statement:"},{"content":"which renames the name <ph id=\"ph1\">`MyParent`</ph> in the type library.","pos":[1999,2053],"source":"which renames the name `MyParent` in the type library."},{"content":"An attempt to rename the <ph id=\"ph1\">`GetMyParent`</ph> wrapper name will fail:","pos":[2054,2116],"source":" An attempt to rename the `GetMyParent` wrapper name will fail:"},{"pos":[2177,2270],"content":"This is because the name <ph id=\"ph1\">`GetMyParent`</ph> only occurs in the resulting type library header file.","source":"This is because the name `GetMyParent` only occurs in the resulting type library header file."},{"content":"END C++ Specific","pos":[2279,2295]},{"content":"See Also","pos":[2306,2314]},{"content":"import Attributes","pos":[2320,2337]},{"content":"import Directive","pos":[2392,2408]}],"content":"---\ntitle: \"rename (#import) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"Rename\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"rename attribute\"\nms.assetid: 5c5c6153-1087-4b7b-87fb-fc59b90b9975\ncaps.latest.revision: 4\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# rename (#import)\n**C++ Specific**  \n  \n Works around name collision problems.  \n  \n## Syntax  \n  \n```  \nrename(\"OldName\",\"NewName\")  \n```  \n  \n#### Parameters  \n `OldName`  \n Old name in the type library.  \n  \n `NewName`  \n Name to be used instead of the old name.  \n  \n## Remarks  \n If this attribute is specified, the compiler replaces all occurrences of *OldName* in a type library with the user-supplied *NewName* in the resulting header files.  \n  \n This attribute can be used when a name in the type library coincides with a macro definition in the system header files. If this situation is not resolved, then various syntax errors will be generated, such as [Compiler Error C2059](../error-messages/compiler-errors-1/compiler-error-c2059.md) and [Compiler Error C2061](../error-messages/compiler-errors-1/compiler-error-c2061.md).  \n  \n> [!NOTE]\n>  The replacement is for a name used in the type library, not for a name used in the resulting header file.  \n  \n For example, suppose a property named `MyParent` exists in a type library, and a macro `GetMyParent` is defined in a header file and used before `#import`. Since `GetMyParent` is the default name of a wrapper function for the error-handling **get** property, a name collision will occur. To work around the problem, use the following attribute in the `#import` statement:  \n  \n```  \nrename(\"MyParent\",\"MyParentX\")  \n```  \n  \n which renames the name `MyParent` in the type library. An attempt to rename the `GetMyParent` wrapper name will fail:  \n  \n```  \nrename(\"GetMyParent\",\"GetMyParentX\")  \n```  \n  \n This is because the name `GetMyParent` only occurs in the resulting type library header file.  \n  \n **END C++ Specific**  \n  \n## See Also  \n [#import Attributes](../preprocessor/hash-import-attributes-cpp.md)   \n [#import Directive](../preprocessor/hash-import-directive-cpp.md)"}