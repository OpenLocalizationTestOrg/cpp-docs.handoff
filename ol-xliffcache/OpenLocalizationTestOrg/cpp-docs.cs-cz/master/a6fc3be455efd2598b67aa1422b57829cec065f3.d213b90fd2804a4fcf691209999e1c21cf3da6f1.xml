{"nodes":[{"pos":[12,44],"content":"protected (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"protected (C++) | Microsoft Docs","pos":[0,32]}]},{"content":"protected (C++)","pos":[683,698]},{"content":"Syntax","pos":[702,708]},{"content":"Remarks","pos":[787,794]},{"content":"The <ph id=\"ph1\">`protected`</ph> keyword specifies access to class members in the <bpt id=\"p1\">*</bpt>member-list<ept id=\"p1\">*</ept> up to the next access specifier (<bpt id=\"p2\">**</bpt>public<ept id=\"p2\">**</ept> or <ph id=\"ph2\">`private`</ph>) or the end of the class definition.","pos":[798,970],"source":"The `protected` keyword specifies access to class members in the *member-list* up to the next access specifier (**public** or `private`) or the end of the class definition."},{"content":"Class members declared as <ph id=\"ph1\">`protected`</ph> can be used only by the following:","pos":[971,1043],"source":" Class members declared as `protected` can be used only by the following:"},{"content":"Member functions of the class that originally declared these members.","pos":[1053,1122]},{"content":"Friends of the class that originally declared these members.","pos":[1132,1192]},{"content":"Classes derived with public or protected access from the class that originally declared these members.","pos":[1202,1304]},{"content":"Direct privately derived classes that also have private access to protected members.","pos":[1314,1398]},{"pos":[1405,1581],"content":"When preceding the name of a base class, the <ph id=\"ph1\">`protected`</ph> keyword specifies that the public and protected members of the base class are protected members of its derived classes.","source":"When preceding the name of a base class, the `protected` keyword specifies that the public and protected members of the base class are protected members of its derived classes."},{"pos":[1588,1812],"content":"Protected members are not as private as <ph id=\"ph1\">`private`</ph> members, which are accessible only to members of the class in which they are declared, but they are not as public as <bpt id=\"p1\">**</bpt>public<ept id=\"p1\">**</ept> members, which are accessible in any function.","source":"Protected members are not as private as `private` members, which are accessible only to members of the class in which they are declared, but they are not as public as **public** members, which are accessible in any function."},{"content":"Protected members that are also declared as <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> are accessible to any friend or member function of a derived class.","pos":[1819,1941],"source":"Protected members that are also declared as **static** are accessible to any friend or member function of a derived class."},{"content":"Protected members that are not declared as <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> are accessible to friends and member functions in a derived class only through a pointer to, reference to, or object of the derived class.","pos":[1942,2134],"source":" Protected members that are not declared as **static** are accessible to friends and member functions in a derived class only through a pointer to, reference to, or object of the derived class."},{"pos":[2141,2367],"content":"For related information, see <bpt id=\"p1\">[</bpt>friend<ept id=\"p1\">](../cpp/friend-cpp.md)</ept>, <bpt id=\"p2\">[</bpt>public<ept id=\"p2\">](../cpp/public-cpp.md)</ept>, <bpt id=\"p3\">[</bpt>private<ept id=\"p3\">](../cpp/private-cpp.md)</ept>, and the member-access table in <bpt id=\"p4\">[</bpt>Controlling Access to Class Members<ept id=\"p4\">](member-access-control-cpp.md)</ept>.","source":"For related information, see [friend](../cpp/friend-cpp.md), [public](../cpp/public-cpp.md), [private](../cpp/private-cpp.md), and the member-access table in [Controlling Access to Class Members](member-access-control-cpp.md)."},{"content":"/clr Specific","pos":[2376,2389]},{"content":"In CLR types, the C++ access specifier keywords (<bpt id=\"p1\">**</bpt>public<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`private`</ph>, and <ph id=\"ph2\">`protected`</ph>) can affect the visibility of types and methods with regard to assemblies.","pos":[2393,2555],"source":"In CLR types, the C++ access specifier keywords (**public**, `private`, and `protected`) can affect the visibility of types and methods with regard to assemblies."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Member Access Control<ept id=\"p1\">](member-access-control-cpp.md)</ept>.","pos":[2556,2636],"source":" For more information, see [Member Access Control](member-access-control-cpp.md)."},{"pos":[2644,2838],"content":"[!NOTE]\n Files compiled with [/LN](../build/reference/ln-create-msil-module.md) are not affected by this behavior. In this case, all managed classes (either public or private) will be visible.","leadings":["","> "],"nodes":[{"content":" Files compiled with [/LN](../build/reference/ln-create-msil-module.md) are not affected by this behavior. In this case, all managed classes (either public or private) will be visible.","pos":[8,192],"nodes":[{"content":"Files compiled with <bpt id=\"p1\">[</bpt>/LN<ept id=\"p1\">](../build/reference/ln-create-msil-module.md)</ept> are not affected by this behavior.","pos":[1,106],"source":" Files compiled with [/LN](../build/reference/ln-create-msil-module.md) are not affected by this behavior."},{"content":"In this case, all managed classes (either public or private) will be visible.","pos":[107,184]}]}]},{"content":"END /clr Specific","pos":[2847,2864]},{"content":"Example","pos":[2873,2880]},{"content":"See Also","pos":[3721,3729]},{"content":"Controlling Access to Class Members","pos":[3734,3769]},{"content":"Keywords","pos":[3806,3814]}],"content":"---\ntitle: \"protected (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"protected\"\n  - \"protected_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"protected keyword [C++], member access\"\n  - \"protected keyword [C++]\"\nms.assetid: 863d299f-fc0d-45d5-a1a7-bd24b7778a93\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# protected (C++)\n## Syntax  \n  \n```  \nprotected:  \n   [member-list]  \nprotected base-class  \n```  \n  \n## Remarks  \n The `protected` keyword specifies access to class members in the *member-list* up to the next access specifier (**public** or `private`) or the end of the class definition. Class members declared as `protected` can be used only by the following:  \n  \n-   Member functions of the class that originally declared these members.  \n  \n-   Friends of the class that originally declared these members.  \n  \n-   Classes derived with public or protected access from the class that originally declared these members.  \n  \n-   Direct privately derived classes that also have private access to protected members.  \n  \n When preceding the name of a base class, the `protected` keyword specifies that the public and protected members of the base class are protected members of its derived classes.  \n  \n Protected members are not as private as `private` members, which are accessible only to members of the class in which they are declared, but they are not as public as **public** members, which are accessible in any function.  \n  \n Protected members that are also declared as **static** are accessible to any friend or member function of a derived class. Protected members that are not declared as **static** are accessible to friends and member functions in a derived class only through a pointer to, reference to, or object of the derived class.  \n  \n For related information, see [friend](../cpp/friend-cpp.md), [public](../cpp/public-cpp.md), [private](../cpp/private-cpp.md), and the member-access table in [Controlling Access to Class Members](member-access-control-cpp.md).  \n  \n## /clr Specific  \n In CLR types, the C++ access specifier keywords (**public**, `private`, and `protected`) can affect the visibility of types and methods with regard to assemblies. For more information, see [Member Access Control](member-access-control-cpp.md).  \n  \n> [!NOTE]\n>  Files compiled with [/LN](../build/reference/ln-create-msil-module.md) are not affected by this behavior. In this case, all managed classes (either public or private) will be visible.  \n  \n## END /clr Specific  \n  \n## Example  \n  \n```  \n// keyword_protected.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nusing namespace std;  \nclass X {  \npublic:  \n   void setProtMemb( int i ) { m_protMemb = i; }  \n   void Display() { cout << m_protMemb << endl; }  \nprotected:  \n   int  m_protMemb;  \n   void Protfunc() { cout << \"\\nAccess allowed\\n\"; }  \n} x;  \n  \nclass Y : public X {  \npublic:  \n   void useProtfunc() { Protfunc(); }  \n} y;  \n  \nint main() {  \n   // x.m_protMemb;         error, m_protMemb is protected  \n   x.setProtMemb( 0 );   // OK, uses public access function  \n   x.Display();  \n   y.setProtMemb( 5 );   // OK, uses public access function  \n   y.Display();  \n   // x.Protfunc();         error, Protfunc() is protected  \n   y.useProtfunc();      // OK, uses public access function  \n                        // in derived class  \n}  \n```  \n  \n## See Also  \n [Controlling Access to Class Members](member-access-control-cpp.md)   \n [Keywords](../cpp/keywords-cpp.md)"}