{"nodes":[{"pos":[12,69],"content":"_cscanf, _cscanf_l, _cwscanf, _cwscanf_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_cscanf, _cscanf_l, _cwscanf, _cwscanf_l | Microsoft Docs","pos":[0,57]}]},{"pos":[1434,1474],"content":"_cscanf, _cscanf_l, _cwscanf, _cwscanf_l","linkify":"_cscanf, _cscanf_l, _cwscanf, _cwscanf_l","nodes":[{"content":"_cscanf, _cscanf_l, _cwscanf, _cwscanf_l","pos":[0,40]}]},{"content":"Reads formatted data from the console.","pos":[1475,1513]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/cscanf-s-cscanf-s-l-cwscanf-s-cwscanf-s-l.md)</ept>.","pos":[1514,1704],"source":" More secure versions of these functions are available; see [_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l](../../c-runtime-library/reference/cscanf-s-cscanf-s-l-cwscanf-s-cwscanf-s-l.md)."},{"pos":[1712,1932],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[1941,1947],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2301,2311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Format-control string.","pos":[2327,2349]},{"content":"Optional parameters.","pos":[2370,2390]},{"content":"The locale to use.","pos":[2409,2427]},{"pos":[2436,2448],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of fields that were successfully converted and assigned.","pos":[2452,2519]},{"content":"The return value does not include fields that were read but not assigned.","pos":[2520,2593]},{"content":"The return value is <ph id=\"ph1\">`EOF`</ph> for an attempt to read at end of file.","pos":[2594,2658],"source":" The return value is `EOF` for an attempt to read at end of file."},{"content":"This can occur when keyboard input is redirected at the operating-system command-line level.","pos":[2659,2751]},{"content":"A return value of 0 means that no fields were assigned.","pos":[2752,2807]},{"pos":[2816,2823],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_cscanf`</ph> function reads data directly from the console into the locations given by <ph id=\"ph2\">`argument`</ph>.","pos":[2827,2926],"source":"The `_cscanf` function reads data directly from the console into the locations given by `argument`."},{"content":"The <bpt id=\"p1\">[</bpt>_getche<ept id=\"p1\">](../../c-runtime-library/reference/getch-getwch.md)</ept> function is used to read characters.","pos":[2927,3028],"source":" The [_getche](../../c-runtime-library/reference/getch-getwch.md) function is used to read characters."},{"content":"Each optional parameter must be a pointer to a variable with a type that corresponds to a type specifier in <ph id=\"ph1\">`format`</ph>.","pos":[3029,3146],"source":" Each optional parameter must be a pointer to a variable with a type that corresponds to a type specifier in `format`."},{"content":"The format controls the interpretation of the input fields and has the same form and function as the <ph id=\"ph1\">`format`</ph> parameter for the <bpt id=\"p1\">[</bpt>scanf<ept id=\"p1\">](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept> function.","pos":[3147,3360],"source":" The format controls the interpretation of the input fields and has the same form and function as the `format` parameter for the [scanf](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md) function."},{"content":"While <ph id=\"ph1\">`_cscanf`</ph> normally echoes the input character, it does not do so if the last call was to <ph id=\"ph2\">`_ungetch`</ph>.","pos":[3361,3467],"source":" While `_cscanf` normally echoes the input character, it does not do so if the last call was to `_ungetch`."},{"content":"This function validates its parameters.","pos":[3474,3513]},{"content":"If format is NULL, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3514,3663],"source":" If format is NULL, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and the function returns <ph id=\"ph3\">`EOF`</ph>.","pos":[3664,3759],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `EOF`."},{"pos":[3766,3922],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[3932,3961],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[3968,3983]},{"content":"_UNICODE and _MBCS not defined","pos":[3984,4014]},{"content":"_MBCS defined","pos":[4015,4028]},{"content":"_UNICODE defined","pos":[4029,4045]},{"pos":[4265,4277],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4284,4291]},{"content":"Required header","pos":[4292,4307]},{"pos":[4352,4373],"content":"<ph id=\"ph1\">`_cscanf`</ph>,<ph id=\"ph2\">`_cscanf_l`</ph>","source":"`_cscanf`,`_cscanf_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>conio.h&gt;","pos":[4374,4384],"source":"\\<conio.h>"},{"pos":[4389,4413],"content":"<ph id=\"ph1\">`_cwscanf`</ph>, <ph id=\"ph2\">`_cwscanf_l`</ph>","source":"`_cwscanf`, `_cwscanf_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>conio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[4414,4438],"source":"\\<conio.h> or \\<wchar.h>"},{"pos":[4446,4544],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[4553,4560],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5231,5236],"content":"Input","linkify":"Input","nodes":[{"content":"Input","pos":[0,5]}]},{"pos":[5268,5274],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[5348,5356],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Console and Port I/O<ept id=\"p1\">](../../c-runtime-library/console-and-port-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5360,5432],"source":"[Console and Port I/O](../../c-runtime-library/console-and-port-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_cprintf, _cprintf_l, _cwprintf, _cwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5435,5559],"source":" [_cprintf, _cprintf_l, _cwprintf, _cwprintf_l](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fscanf, _fscanf_l, fwscanf, _fwscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5562,5676],"source":" [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5679,5801],"source":" [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sscanf, _sscanf_l, swscanf, _swscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)</ept>","pos":[5804,5917],"source":" [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)"}],"content":"---\ntitle: \"_cscanf, _cscanf_l, _cwscanf, _cwscanf_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_cscanf_l\"\n  - \"_cscanf\"\n  - \"_cwscanf\"\n  - \"_cwscanf_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_cwscanf\"\n  - \"cwscanf_l\"\n  - \"tcscanf_l\"\n  - \"_tcscanf_l\"\n  - \"_cscanf\"\n  - \"_cscanf_l\"\n  - \"tcscanf\"\n  - \"cwscanf\"\n  - \"_cwscanf_l\"\n  - \"cscanf_l\"\n  - \"_tcscanf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_cwscanf function\"\n  - \"data [C++], reading from the console\"\n  - \"cscanf_l function\"\n  - \"tcscanf function\"\n  - \"_cscanf_l function\"\n  - \"cwscanf function\"\n  - \"_tcscanf_l function\"\n  - \"_cscanf function\"\n  - \"_tcscanf function\"\n  - \"cwscanf_l function\"\n  - \"tcscanf_l function\"\n  - \"reading data [C++], from the console\"\n  - \"_cwscanf_l function\"\nms.assetid: dbfe7547-b577-4567-a1cb-893fa640e669\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _cscanf, _cscanf_l, _cwscanf, _cwscanf_l\nReads formatted data from the console. More secure versions of these functions are available; see [_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l](../../c-runtime-library/reference/cscanf-s-cscanf-s-l-cwscanf-s-cwscanf-s-l.md).  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nint _cscanf(   \n   const char *format [,  \n   argument] ...   \n);  \nint _cscanf_l(   \n   const char *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \nint _cwscanf(   \n   const wchar_t *format [,  \n   argument] ...   \n);  \nint _cwscanf_l(   \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \n```  \n  \n#### Parameters  \n `format`  \n Format-control string.  \n  \n `argument`  \n Optional parameters.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n The number of fields that were successfully converted and assigned. The return value does not include fields that were read but not assigned. The return value is `EOF` for an attempt to read at end of file. This can occur when keyboard input is redirected at the operating-system command-line level. A return value of 0 means that no fields were assigned.  \n  \n## Remarks  \n The `_cscanf` function reads data directly from the console into the locations given by `argument`. The [_getche](../../c-runtime-library/reference/getch-getwch.md) function is used to read characters. Each optional parameter must be a pointer to a variable with a type that corresponds to a type specifier in `format`. The format controls the interpretation of the input fields and has the same form and function as the `format` parameter for the [scanf](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md) function. While `_cscanf` normally echoes the input character, it does not do so if the last call was to `_ungetch`.  \n  \n This function validates its parameters. If format is NULL, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `EOF`.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tcscanf`|`_cscanf`|`_cscanf`|`_cwscanf`|  \n|`_tcscanf_l`|`_cscanf_l`|`_cscanf_l`|`_cwscanf_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_cscanf`,`_cscanf_l`|\\<conio.h>|  \n|`_cwscanf`, `_cwscanf_l`|\\<conio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_cscanf.c  \n// compile with: /c /W3  \n/* This program prompts for a string  \n * and uses _cscanf to read in the response.  \n * Then _cscanf returns the number of items  \n * matched, and the program displays that number.  \n */  \n  \n#include <stdio.h>  \n#include <conio.h>  \n  \nint main( void )  \n{  \n   int   result, i[3];  \n  \n   _cprintf_s( \"Enter three integers: \");  \n   result = _cscanf( \"%i %i %i\", &i[0], &i[1], &i[2] ); // C4996  \n   // Note: _cscanf is deprecated; consider using _cscanf_s instead  \n   _cprintf_s( \"\\r\\nYou entered \" );  \n   while( result-- )  \n      _cprintf_s( \"%i \", i[result] );  \n   _cprintf_s( \"\\r\\n\" );  \n}  \n```  \n  \n## Input  \n  \n```  \n1 2 3  \n```  \n  \n## Output  \n  \n```  \nEnter three integers: 1 2 3  \nYou entered 3 2 1  \n```  \n  \n## See Also  \n [Console and Port I/O](../../c-runtime-library/console-and-port-i-o.md)   \n [_cprintf, _cprintf_l, _cwprintf, _cwprintf_l](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)   \n [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)   \n [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)   \n [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)"}