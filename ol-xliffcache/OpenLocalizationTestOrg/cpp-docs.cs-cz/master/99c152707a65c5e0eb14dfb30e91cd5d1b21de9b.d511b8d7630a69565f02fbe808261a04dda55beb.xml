{"nodes":[{"pos":[12,58],"content":"Relational Function Templates | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Relational Function Templates | Microsoft Docs","pos":[0,46]}]},{"content":"Relational Function Templates","pos":[607,636]},{"content":"Microsoft Specific","pos":[639,657]},{"content":"Syntax","pos":[668,674]},{"content":"Parameters","pos":[2147,2157]},{"content":"i","pos":[2162,2163]},{"content":"A raw interface pointer.","pos":[2168,2192]},{"content":"A smart pointer.","pos":[2206,2222]},{"content":"Remarks","pos":[2231,2238]},{"content":"These function templates allow comparison with a smart pointer on the right side of the comparison operator.","pos":[2242,2350]},{"content":"These are not member functions of <ph id=\"ph1\">`_com_ptr_t`</ph>.","pos":[2351,2398],"source":" These are not member functions of `_com_ptr_t`."},{"content":"END Microsoft Specific","pos":[2407,2429]},{"content":"See Also","pos":[2440,2448]},{"content":"_com_ptr_t Class","pos":[2453,2469]}],"content":"---\ntitle: \"Relational Function Templates | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"relational function templates\"\nms.assetid: 57893a51-9adb-41fc-941d-2ca97687db2a\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Relational Function Templates\n**Microsoft Specific**  \n  \n## Syntax  \n  \n```  \n  \n      template<typename _InterfaceType> bool operator==(  \n   int NULL,  \n   _com_ptr_t<_InterfaceType>& p   \n);  \ntemplate<typename _Interface,  \n   typename _InterfacePtr> bool operator==(  \n   _Interface* i,  \n   _com_ptr_t<_InterfacePtr>& p   \n);  \ntemplate<typename _Interface> bool operator!=(  \n   int NULL,  \n   _com_ptr_t<_Interface>& p   \n);  \ntemplate<typename _Interface,  \n   typename _InterfacePtr> bool operator!=(  \n   _Interface* i,  \n   _com_ptr_t<_InterfacePtr>& p   \n);  \ntemplate<typename _Interface> bool operator<(  \n   int NULL,  \n   _com_ptr_t<_Interface>& p   \n);  \ntemplate<typename _Interface,  \n   typename _InterfacePtr> bool operator<(  \n   _Interface* i,  \n   _com_ptr_t<_InterfacePtr>& p   \n);  \ntemplate<typename _Interface> bool operator>(  \n   int NULL,  \n   _com_ptr_t<_Interface>& p   \n);  \ntemplate<typename _Interface,  \n   typename _InterfacePtr> bool operator>(  \n   _Interface* i,  \n   _com_ptr_t<_InterfacePtr>& p   \n);  \ntemplate<typename _Interface> bool operator<=(  \n   int NULL,  \n   _com_ptr_t<_Interface>& p   \n);  \ntemplate<typename _Interface,  \n   typename _InterfacePtr> bool operator<=(  \n   _Interface* i,  \n   _com_ptr_t<_InterfacePtr>& p   \n);  \ntemplate<typename _Interface> bool operator>=(  \n   int NULL,  \n   _com_ptr_t<_Interface>& p   \n);  \ntemplate<typename _Interface,  \n   typename _InterfacePtr> bool operator>=(  \n   _Interface* i,  \n   _com_ptr_t<_InterfacePtr>& p   \n);  \n```  \n  \n#### Parameters  \n *i*  \n A raw interface pointer.  \n  \n `p`  \n A smart pointer.  \n  \n## Remarks  \n These function templates allow comparison with a smart pointer on the right side of the comparison operator. These are not member functions of `_com_ptr_t`.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [_com_ptr_t Class](../cpp/com-ptr-t-class.md)"}