{"nodes":[{"pos":[12,48],"content":"IDispatchImpl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IDispatchImpl Class | Microsoft Docs","pos":[0,36]}]},{"content":"IDispatchImpl Class","pos":[730,749]},{"pos":[750,829],"content":"Provides a default implementation for the <ph id=\"ph1\">`IDispatch`</ph> part of a dual interface.","source":"Provides a default implementation for the `IDispatch` part of a dual interface."},{"pos":[837,987],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[14,148],"source":" This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."}]},{"content":"Syntax","pos":[996,1002]},{"pos":[4251,4368],"content":"STDMETHOD(GetIDsOfNames)(REFIID riid, LPOLESTR<bpt id=\"p1\">*</bpt> rgszNames, UINT cNames, LCID lcid, DISPID<ept id=\"p1\">*</ept> rgdispid);","source":"STDMETHOD(GetIDsOfNames)(REFIID riid,\n    LPOLESTR* rgszNames,\n    UINT cNames,\n    LCID lcid,\n    DISPID* rgdispid);"},{"pos":[4700,4776],"content":"STDMETHOD(GetTypeInfo)(UINT itinfo, LCID lcid, ITypeInfo** pptinfo);","source":"STDMETHOD(GetTypeInfo)(UINT itinfo,\n    LCID lcid,\n    ITypeInfo** pptinfo);"},{"content":"STDMETHOD(GetTypeInfoCount)(UINT* pctinfo);","pos":[5140,5183]},{"content":"IDispatchImpl();","pos":[5554,5570]},{"pos":[5733,5922],"content":"STDMETHOD(Invoke)(DISPID dispidMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS<bpt id=\"p1\">*</bpt> pdispparams, VARIANT<ept id=\"p1\">*</ept> pvarResult, EXCEPINFO<bpt id=\"p2\">*</bpt> pexcepinfo, UINT<ept id=\"p2\">*</ept> puArgErr);","source":"STDMETHOD(Invoke)(DISPID dispidMember,\n    REFIID riid,\n    LCID lcid,\n    WORD wFlags,\n    DISPPARAMS* pdispparams,\n    VARIANT* pvarResult,\n    EXCEPINFO* pexcepinfo,\n    UINT* puArgErr);"}],"content":"---\ntitle: \"IDispatchImpl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"IDispatchImpl\"\n  - \"ATL.IDispatchImpl\"\n  - \"ATL::IDispatchImpl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"dual interfaces, classes\"\n  - \"IDispatchImpl class\"\n  - \"IDispatch class support in ATL\"\nms.assetid: 8108eb36-1228-4127-a203-3ab5ba488892\ncaps.latest.revision: 27\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IDispatchImpl Class\nProvides a default implementation for the `IDispatch` part of a dual interface.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].  \n  \n## Syntax  \n  \n```\ntemplate<class T,\n    const IID* piid= &__uuidof(T),\n    const GUID* plibid = &CAtlModule::m_libid,\n    WORD wMajor = 1,\n    WORD wMinor = 0, class tihclass = CComTypeInfoHolder>\nclass ATL_NO_VTABLE IDispatchImpl :  public T```  \n  \n#### Parameters  \n [in] `T`  \n A dual interface.  \n  \n [in] `piid`  \n A pointer to the IID of `T`.  \n  \n [in] `plibid`  \n A pointer to the LIBID of the type library that contains information about the interface. By default, the server-level type library is passed.  \n  \n [in] `wMajor`  \n The major version of the type library. By default, the value is 1.  \n  \n [in] `wMinor`  \n The minor version of the type library. By default, the value is 0.  \n  \n [in] `tihclass`  \n The class used to manage the type information for `T`. By default, the value is `CComTypeInfoHolder`.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IDispatchImpl::IDispatchImpl](#idispatchimpl__idispatchimpl)|The constructor. Calls `AddRef` on the protected member variable that manages the type information for the dual interface. The destructor calls `Release`.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IDispatchImpl::GetIDsOfNames](#idispatchimpl__getidsofnames)|Maps a set of names to a corresponding set of dispatch identifiers.|  \n|[IDispatchImpl::GetTypeInfo](#idispatchimpl__gettypeinfo)|Retrieves the type information for the dual interface.|  \n|[IDispatchImpl::GetTypeInfoCount](#idispatchimpl__gettypeinfocount)|Determines whether there is type information available for the dual interface.|  \n|[IDispatchImpl::Invoke](#idispatchimpl__invoke)|Provides access to the methods and properties exposed by the dual interface.|  \n  \n## Remarks  \n `IDispatchImpl` provides a default implementation for the `IDispatch` part of any dual interface on an object. A dual interface derives from `IDispatch` and uses only Automation-compatible types. Like a dispinterface, a dual interface supports early binding and late binding; however, a dual interface also supports vtable binding.  \n  \n The following example shows a typical implementation of `IDispatchImpl`.  \n  \n [!code-cpp[NVC_ATL_COM#47](../../atl/codesnippet/cpp/idispatchimpl-class_1.h)]  \n  \n By default, the `IDispatchImpl` class looks up the type information for `T` in the registry. To implement an unregistered interface, you can use the `IDispatchImpl` class without accessing the registry by using a predefined version number. If you create an `IDispatchImpl` object that has 0xFFFF as the value for `wMajor` and 0xFFFF as the value for `wMinor`, the `IDispatchImpl` class retrieves the type library from the .dll file instead of the registry.  \n  \n `IDispatchImpl` contains a static member of type `CComTypeInfoHolder` that manages the type information for the dual interface. If you have multiple objects that implement the same dual interface, only one instance of `CComTypeInfoHolder` is used.  \n  \n## Inheritance Hierarchy  \n `T`  \n  \n `IDispatchImpl`  \n  \n## Requirements  \n **Header:** atlcom.h  \n  \n##  <a name=\"idispatchimpl__getidsofnames\"></a>  IDispatchImpl::GetIDsOfNames  \n Maps a set of names to a corresponding set of dispatch identifiers.  \n  \n```\nSTDMETHOD(GetIDsOfNames)(REFIID riid,\n    LPOLESTR* rgszNames,\n    UINT cNames,\n    LCID lcid,\n    DISPID* rgdispid);\n```  \n  \n### Remarks  \n See [IDispatch::GetIDsOfNames](http://msdn.microsoft.com/en-us/6f6cf233-3481-436e-8d6a-51f93bf91619) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"idispatchimpl__gettypeinfo\"></a>  IDispatchImpl::GetTypeInfo  \n Retrieves the type information for the dual interface.  \n  \n```\nSTDMETHOD(GetTypeInfo)(UINT itinfo,\n    LCID lcid,\n    ITypeInfo** pptinfo);\n```  \n  \n### Remarks  \n See [IDispatch::GetTypeInfo](http://msdn.microsoft.com/en-us/cc1ec9aa-6c40-4e70-819c-a7c6dd6b8c99) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"idispatchimpl__gettypeinfocount\"></a>  IDispatchImpl::GetTypeInfoCount  \n Determines whether there is type information available for the dual interface.  \n  \n```\nSTDMETHOD(GetTypeInfoCount)(UINT* pctinfo);\n```  \n  \n### Remarks  \n See `IDispatch::GetTypeInfoCount` in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"idispatchimpl__idispatchimpl\"></a>  IDispatchImpl::IDispatchImpl  \n The constructor. Calls `AddRef` on the protected member variable that manages the type information for the dual interface. The destructor calls **Release**.  \n  \n```\nIDispatchImpl();\n```  \n  \n##  <a name=\"idispatchimpl__invoke\"></a>  IDispatchImpl::Invoke  \n Provides access to the methods and properties exposed by the dual interface.  \n  \n```\nSTDMETHOD(Invoke)(DISPID dispidMember,\n    REFIID riid,\n    LCID lcid,\n    WORD wFlags,\n    DISPPARAMS* pdispparams,\n    VARIANT* pvarResult,\n    EXCEPINFO* pexcepinfo,\n    UINT* puArgErr);\n```  \n  \n### Remarks  \n See [IDispatch::Invoke](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)\n"}