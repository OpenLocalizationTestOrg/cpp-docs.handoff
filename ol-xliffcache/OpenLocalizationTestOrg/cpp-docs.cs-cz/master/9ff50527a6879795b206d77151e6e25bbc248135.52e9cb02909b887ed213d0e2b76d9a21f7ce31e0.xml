{"nodes":[{"pos":[12,50],"content":"logical_not (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"logical_not (STL-CLR) | Microsoft Docs","pos":[0,38]}]},{"content":"logical_not (STL/CLR)","pos":[632,653]},{"content":"The template class describes a functor that, when called, returns true only if either its argument tests as false.","pos":[654,768]},{"content":"You use it specify a function object in terms of its argument type.","pos":[769,836]},{"content":"Syntax","pos":[845,851]},{"content":"Parameters","pos":[1315,1325]},{"content":"Arg","pos":[1329,1332]},{"content":"The type of the arguments.","pos":[1336,1362]},{"content":"Member Functions","pos":[1371,1387]},{"content":"Type Definition","pos":[1394,1409]},{"content":"Description","pos":[1410,1421]},{"content":"argument_type","pos":[1470,1483]},{"content":"The type of the functor argument.","pos":[1484,1517]},{"content":"delegate_type","pos":[1522,1535]},{"content":"The type of the generic delegate.","pos":[1536,1569]},{"content":"result_type","pos":[1574,1585]},{"content":"The type of the functor result.","pos":[1586,1617]},{"content":"Member","pos":[1625,1631]},{"content":"Description","pos":[1632,1643]},{"content":"logical_not","pos":[1683,1694]},{"content":"Constructs the functor.","pos":[1695,1718]},{"content":"Operator","pos":[1726,1734]},{"content":"Description","pos":[1735,1746]},{"content":"operator()","pos":[1788,1798]},{"content":"Computes the desired function.","pos":[1799,1829]},{"content":"operator delegate_type^","pos":[1834,1857]},{"content":"Casts the functor to a delegate.","pos":[1858,1890]},{"content":"Remarks","pos":[1900,1907]},{"content":"The template class describes a one-argument functor.","pos":[1911,1963]},{"content":"It defines the member operator <ph id=\"ph1\">`operator()`</ph> so that, when the object is called as a function, it returns true only if its argument tests as false.","pos":[1964,2110],"source":" It defines the member operator `operator()` so that, when the object is called as a function, it returns true only if its argument tests as false."},{"pos":[2117,2239],"content":"You can also pass the object as a function argument whose type is <ph id=\"ph1\">`delegate_type^`</ph> and it will be converted appropriately.","source":"You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately."},{"content":"Example","pos":[2248,2255]},{"content":"Requirements","pos":[3063,3075]},{"pos":[3079,3111],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[3118,3139],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[3148,3156]},{"content":"negate (STL/CLR)","pos":[3161,3177]}],"content":"---\ntitle: \"logical_not (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::logical_not\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"logical_not function [STL/CLR]\"\nms.assetid: 32a2c6e2-1c58-41ac-8827-f3ee5adfe81d\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# logical_not (STL/CLR)\nThe template class describes a functor that, when called, returns true only if either its argument tests as false. You use it specify a function object in terms of its argument type.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Arg>  \n    ref class logical_not  \n    { // wrap operator()  \npublic:  \n    typedef Arg argument_type;  \n    typedef bool result_type;  \n    typedef Microsoft::VisualC::StlClr::UnaryDelegate<  \n        argument_type, result_type>  \n        delegate_type;  \n  \n    logical_not();  \n    logical_not(logical_not<Arg> %right);  \n  \n    result_type operator()(argument_type left);  \n    operator delegate_type^();  \n    };  \n```  \n  \n#### Parameters  \n Arg  \n The type of the arguments.  \n  \n## Member Functions  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|argument_type|The type of the functor argument.|  \n|delegate_type|The type of the generic delegate.|  \n|result_type|The type of the functor result.|  \n  \n|Member|Description|  \n|------------|-----------------|  \n|logical_not|Constructs the functor.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|operator()|Computes the desired function.|  \n|operator delegate_type^|Casts the functor to a delegate.|  \n  \n## Remarks  \n The template class describes a one-argument functor. It defines the member operator `operator()` so that, when the object is called as a function, it returns true only if its argument tests as false.  \n  \n You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately.  \n  \n## Example  \n  \n```  \n// cliext_logical_not.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(0);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 0\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::transform(c1.begin(), c1.begin() + 2,   \n        c3.begin(), cliext::logical_not<int>());   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 0  \n0 1  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [negate (STL/CLR)](../dotnet/negate-stl-clr.md)"}