{"nodes":[{"pos":[12,62],"content":"hash_multimap::key_comp (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multimap::key_comp (STL-CLR) | Microsoft Docs","pos":[0,50]}]},{"content":"hash_multimap::key_comp (STL/CLR)","pos":[651,684]},{"content":"Copies the ordering delegate for two keys.","pos":[685,727]},{"content":"Syntax","pos":[736,742]},{"content":"Remarks","pos":[792,799]},{"content":"The member function returns the ordering delegate used to order the controlled sequence.","pos":[803,891]},{"content":"You use it to compare two keys.","pos":[892,923]},{"content":"Example","pos":[932,939]},{"content":"Requirements","pos":[2199,2211]},{"pos":[2215,2245],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[2252,2273],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2282,2290]},{"content":"hash_multimap (STL/CLR)","pos":[2295,2318]},{"content":"hash_multimap::key_compare (STL/CLR)","pos":[2361,2397]},{"content":"hash_multimap::key_type (STL/CLR)","pos":[2452,2485]}],"content":"---\ntitle: \"hash_multimap::key_comp (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_multimap::key_comp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"key_comp member [STL/CLR]\"\nms.assetid: 221d0bfe-19ad-4c34-9b10-77921be32459\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multimap::key_comp (STL/CLR)\nCopies the ordering delegate for two keys.  \n  \n## Syntax  \n  \n```  \nkey_compare^key_comp();  \n```  \n  \n## Remarks  \n The member function returns the ordering delegate used to order the controlled sequence. You use it to compare two keys.  \n  \n## Example  \n  \n```  \n// cliext_hash_multimap_key_comp.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_multimap<wchar_t, int> Myhash_multimap;   \nint main()   \n    {   \n    Myhash_multimap c1;   \n    Myhash_multimap::key_compare^ kcomp = c1.key_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        kcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        kcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        kcomp(L'b', L'a'));   \n    System::Console::WriteLine();   \n  \n// test a different ordering rule   \n    Myhash_multimap c2 = cliext::greater<wchar_t>();   \n    kcomp = c2.key_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        kcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        kcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        kcomp(L'b', L'a'));   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ncompare(L'a', L'a') = True  \ncompare(L'a', L'b') = True  \ncompare(L'b', L'a') = False  \n  \ncompare(L'a', L'a') = False  \ncompare(L'a', L'b') = False  \ncompare(L'b', L'a') = True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_multimap (STL/CLR)](../dotnet/hash-multimap-stl-clr.md)   \n [hash_multimap::key_compare (STL/CLR)](../dotnet/hash-multimap-key-compare-stl-clr.md)   \n [hash_multimap::key_type (STL/CLR)](../dotnet/hash-multimap-key-type-stl-clr.md)"}