{"nodes":[{"pos":[12,48],"content":"&lt;type_traits&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>type_traits<ph id=\"ph2\">&amp;gt;</ph> | Microsoft Docs","pos":[0,36],"source":"&lt;type_traits&gt; | Microsoft Docs"}]},{"pos":[632,651],"content":"&lt;type_traits&gt;","linkify":"&lt;type_traits&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>type_traits<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,19],"source":"&lt;type_traits&gt;"}]},{"content":"Defines templates that provide compile-time constants that give information about the properties of their type arguments or produce transformed types.","pos":[652,802]},{"pos":[811,817],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[866,873],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The classes and templates in <ph id=\"ph1\">`&lt;type_traits&gt;`</ph> are used to support type inference, classification, and transformation at compile time, to detect type-related errors, and to help you optimize your generic code.","pos":[877,1084],"source":"The classes and templates in `<type_traits>` are used to support type inference, classification, and transformation at compile time, to detect type-related errors, and to help you optimize your generic code."},{"content":"These classes and templates include unary type traits that describe a property of a type, binary type traits that describe a relationship between types, and transformation traits that modify a property of a type.","pos":[1085,1297]},{"content":"To support type traits, a helper class, <ph id=\"ph1\">`integral_constant`</ph>, is defined.","pos":[1304,1376],"source":"To support type traits, a helper class, `integral_constant`, is defined."},{"content":"It has template specializations <ph id=\"ph1\">`true_type`</ph> and <ph id=\"ph2\">`false_type`</ph> that form the base classes for type predicates.","pos":[1377,1485],"source":" It has template specializations `true_type` and `false_type` that form the base classes for type predicates."},{"content":"A <bpt id=\"p1\">*</bpt>type predicate<ept id=\"p1\">*</ept> is a template that takes one or more type arguments.","pos":[1486,1557],"source":" A *type predicate* is a template that takes one or more type arguments."},{"content":"When a type predicate <bpt id=\"p1\">*</bpt>holds true<ept id=\"p1\">*</ept>, it is publicly derived, directly or indirectly, from <bpt id=\"p2\">[</bpt>true_type<ept id=\"p2\">](../standard-library/type-traits-typedefs.md#true_type_typedef)</ept>.","pos":[1558,1722],"source":" When a type predicate *holds true*, it is publicly derived, directly or indirectly, from [true_type](../standard-library/type-traits-typedefs.md#true_type_typedef)."},{"content":"When a type predicate <bpt id=\"p1\">*</bpt>holds false<ept id=\"p1\">*</ept>, it is publicly derived, directly or indirectly, from <bpt id=\"p2\">[</bpt>false_type<ept id=\"p2\">](../standard-library/type-traits-typedefs.md#false_type_typedef)</ept>.","pos":[1723,1890],"source":" When a type predicate *holds false*, it is publicly derived, directly or indirectly, from [false_type](../standard-library/type-traits-typedefs.md#false_type_typedef)."},{"pos":[1897,2066],"content":"A <bpt id=\"p1\">*</bpt>type modifier<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>transformation trait<ept id=\"p2\">*</ept> is a template that takes one or more template arguments and has one member, <ph id=\"ph1\">`type`</ph>, which is a synonym for the modified type.","source":"A *type modifier* or *transformation trait* is a template that takes one or more template arguments and has one member, `type`, which is a synonym for the modified type."},{"pos":[2076,2091],"content":"Alias Templates","linkify":"Alias Templates","nodes":[{"content":"Alias Templates","pos":[0,15]}]},{"content":"To simplify type traits expressions, <bpt id=\"p1\">[</bpt>alias templates<ept id=\"p1\">](../cpp/aliases-and-typedefs-cpp.md)</ept> for <ph id=\"ph1\">`typename some_trait&lt;T&gt;::type`</ph> are provided, where \" <ph id=\"ph2\">`some_trait`</ph>\" is the template class name.","pos":[2095,2284],"source":"To simplify type traits expressions, [alias templates](../cpp/aliases-and-typedefs-cpp.md) for `typename some_trait<T>::type` are provided, where \" `some_trait`\" is the template class name."},{"content":"For example, <bpt id=\"p1\">[</bpt>add_const<ept id=\"p1\">](../standard-library/add-const-class.md)</ept> has an alias template for its type, <ph id=\"ph1\">`add_const_t`</ph>, defined as:","pos":[2285,2412],"source":" For example, [add_const](../standard-library/add-const-class.md) has an alias template for its type, `add_const_t`, defined as:"},{"content":"add_const_t","pos":[2523,2534]},{"content":"aligned_storage_t","pos":[2535,2552]},{"content":"make_signed_t","pos":[2553,2566]},{"content":"remove_pointer_t","pos":[2567,2583]},{"content":"add_cv_t","pos":[2588,2596]},{"content":"aligned_union_t","pos":[2597,2612]},{"content":"make_unsigned_t","pos":[2613,2628]},{"content":"remove_reference_t","pos":[2629,2647]},{"content":"add_lvalue_reference_t","pos":[2652,2674]},{"content":"common_type_t","pos":[2675,2688]},{"content":"remove_all_extents_t","pos":[2689,2709]},{"content":"remove_volatile_t","pos":[2710,2727]},{"content":"add_pointer_t","pos":[2732,2745]},{"content":"conditional_t","pos":[2746,2759]},{"content":"remove_const_t","pos":[2760,2774]},{"content":"result_of_t","pos":[2775,2786]},{"content":"add_rvalue_reference_t","pos":[2791,2813]},{"content":"decay_t","pos":[2814,2821]},{"content":"remove_cv_t","pos":[2822,2833]},{"content":"underlying_type_t","pos":[2834,2851]},{"content":"add_volatile_t","pos":[2856,2870]},{"content":"enable_if_t","pos":[2871,2882]},{"content":"remove_extent_t","pos":[2883,2898]},{"pos":[2910,2917],"content":"Classes","linkify":"Classes","nodes":[{"content":"Classes","pos":[0,7]}]},{"content":"Helper class and typedefs","pos":[2921,2946]},{"pos":[2967,3054],"content":"<bpt id=\"p1\">[</bpt>integral_constant<ept id=\"p1\">](../standard-library/integral-constant-class-bool-constant-class.md)</ept>","source":"[integral_constant](../standard-library/integral-constant-class-bool-constant-class.md)"},{"content":"Makes an integral constant from a type and a value.","pos":[3055,3106]},{"pos":[3111,3185],"content":"<bpt id=\"p1\">[</bpt>true_type<ept id=\"p1\">](../standard-library/type-traits-typedefs.md#true_type_typedef)</ept>","source":"[true_type](../standard-library/type-traits-typedefs.md#true_type_typedef)"},{"content":"Holds integral constant with true value.","pos":[3186,3226]},{"pos":[3231,3307],"content":"<bpt id=\"p1\">[</bpt>false_type<ept id=\"p1\">](../standard-library/type-traits-typedefs.md#false_type_typedef)</ept>","source":"[false_type](../standard-library/type-traits-typedefs.md#false_type_typedef)"},{"content":"Holds integral constant with false value.","pos":[3308,3349]},{"content":"Primary type categories","pos":[3357,3380]},{"pos":[3401,3448],"content":"<bpt id=\"p1\">[</bpt>is_void<ept id=\"p1\">](../standard-library/is-void-class.md)</ept>","source":"[is_void](../standard-library/is-void-class.md)"},{"pos":[3449,3482],"content":"Tests whether the type is <ph id=\"ph1\">`void`</ph>.","source":"Tests whether the type is `void`."},{"pos":[3487,3550],"content":"<bpt id=\"p1\">[</bpt>is_null_pointer<ept id=\"p1\">](../standard-library/is-null-pointer-class.md)</ept>","source":"[is_null_pointer](../standard-library/is-null-pointer-class.md)"},{"pos":[3551,3594],"content":"Tests whether the type is <ph id=\"ph1\">`std::nullptr_t`</ph>.","source":"Tests whether the type is `std::nullptr_t`."},{"pos":[3599,3654],"content":"<bpt id=\"p1\">[</bpt>is_integral<ept id=\"p1\">](../standard-library/is-integral-class.md)</ept>","source":"[is_integral](../standard-library/is-integral-class.md)"},{"content":"Tests whether the type is integral.","pos":[3655,3690]},{"pos":[3695,3762],"content":"<bpt id=\"p1\">[</bpt>is_floating_point<ept id=\"p1\">](../standard-library/is-floating-point-class.md)</ept>","source":"[is_floating_point](../standard-library/is-floating-point-class.md)"},{"content":"Tests whether the type is floating-point.","pos":[3763,3804]},{"pos":[3809,3858],"content":"<bpt id=\"p1\">[</bpt>is_array<ept id=\"p1\">](../standard-library/is-array-class.md)</ept>","source":"[is_array](../standard-library/is-array-class.md)"},{"content":"Tests whether the type is an array.","pos":[3859,3894]},{"pos":[3899,3952],"content":"<bpt id=\"p1\">[</bpt>is_pointer<ept id=\"p1\">](../standard-library/is-pointer-class.md)</ept>","source":"[is_pointer](../standard-library/is-pointer-class.md)"},{"content":"Tests whether the type is a pointer.","pos":[3953,3989]},{"pos":[3994,4065],"content":"<bpt id=\"p1\">[</bpt>is_lvalue_reference<ept id=\"p1\">](../standard-library/is-lvalue-reference-class.md)</ept>","source":"[is_lvalue_reference](../standard-library/is-lvalue-reference-class.md)"},{"content":"Tests if type is an lvalue reference.","pos":[4066,4103]},{"pos":[4108,4179],"content":"<bpt id=\"p1\">[</bpt>is_rvalue_reference<ept id=\"p1\">](../standard-library/is-rvalue-reference-class.md)</ept>","source":"[is_rvalue_reference](../standard-library/is-rvalue-reference-class.md)"},{"content":"Tests if type is an rvalue reference.","pos":[4180,4217]},{"pos":[4222,4303],"content":"<bpt id=\"p1\">[</bpt>is_member_object_pointer<ept id=\"p1\">](../standard-library/is-member-object-pointer-class.md)</ept>","source":"[is_member_object_pointer](../standard-library/is-member-object-pointer-class.md)"},{"content":"Tests whether the type is a pointer to a member object.","pos":[4304,4359]},{"pos":[4364,4449],"content":"<bpt id=\"p1\">[</bpt>is_member_function_pointer<ept id=\"p1\">](../standard-library/is-member-function-pointer-class.md)</ept>","source":"[is_member_function_pointer](../standard-library/is-member-function-pointer-class.md)"},{"content":"Tests whether the type is a pointer to a member function.","pos":[4450,4507]},{"pos":[4512,4559],"content":"<bpt id=\"p1\">[</bpt>is_enum<ept id=\"p1\">](../standard-library/is-enum-class.md)</ept>","source":"[is_enum](../standard-library/is-enum-class.md)"},{"content":"Tests whether the type is an enumeration.","pos":[4560,4601]},{"pos":[4606,4655],"content":"<bpt id=\"p1\">[</bpt>is_union<ept id=\"p1\">](../standard-library/is-union-class.md)</ept>","source":"[is_union](../standard-library/is-union-class.md)"},{"content":"Tests whether the type is a union.","pos":[4656,4690]},{"pos":[4695,4744],"content":"<bpt id=\"p1\">[</bpt>is_class<ept id=\"p1\">](../standard-library/is-class-class.md)</ept>","source":"[is_class](../standard-library/is-class-class.md)"},{"content":"Tests whether the type is a class.","pos":[4745,4779]},{"pos":[4784,4839],"content":"<bpt id=\"p1\">[</bpt>is_function<ept id=\"p1\">](../standard-library/is-function-class.md)</ept>","source":"[is_function](../standard-library/is-function-class.md)"},{"content":"Tests whether the type is a function type.","pos":[4840,4882]},{"content":"Composite type categories","pos":[4890,4915]},{"pos":[4936,4993],"content":"<bpt id=\"p1\">[</bpt>is_reference<ept id=\"p1\">](../standard-library/is-reference-class.md)</ept>","source":"[is_reference](../standard-library/is-reference-class.md)"},{"content":"Tests whether the type is a reference.","pos":[4994,5032]},{"pos":[5037,5096],"content":"<bpt id=\"p1\">[</bpt>is_arithmetic<ept id=\"p1\">](../standard-library/is-arithmetic-class.md)</ept>","source":"[is_arithmetic](../standard-library/is-arithmetic-class.md)"},{"content":"Tests whether the type is arithmetic.","pos":[5097,5134]},{"pos":[5139,5200],"content":"<bpt id=\"p1\">[</bpt>is_fundamental<ept id=\"p1\">](../standard-library/is-fundamental-class.md)</ept>","source":"[is_fundamental](../standard-library/is-fundamental-class.md)"},{"pos":[5201,5248],"content":"Tests whether the type is <ph id=\"ph1\">`void`</ph> or arithmetic.","source":"Tests whether the type is `void` or arithmetic."},{"pos":[5253,5304],"content":"<bpt id=\"p1\">[</bpt>is_object<ept id=\"p1\">](../standard-library/is-object-class.md)</ept>","source":"[is_object](../standard-library/is-object-class.md)"},{"content":"Tests whether the type is an object type.","pos":[5305,5346]},{"pos":[5351,5402],"content":"<bpt id=\"p1\">[</bpt>is_scalar<ept id=\"p1\">](../standard-library/is-scalar-class.md)</ept>","source":"[is_scalar](../standard-library/is-scalar-class.md)"},{"content":"Tests whether the type is scalar.","pos":[5403,5436]},{"pos":[5441,5496],"content":"<bpt id=\"p1\">[</bpt>is_compound<ept id=\"p1\">](../standard-library/is-compound-class.md)</ept>","source":"[is_compound](../standard-library/is-compound-class.md)"},{"content":"Tests whether the type is not scalar.","pos":[5497,5534]},{"pos":[5539,5606],"content":"<bpt id=\"p1\">[</bpt>is_member_pointer<ept id=\"p1\">](../standard-library/is-member-pointer-class.md)</ept>","source":"[is_member_pointer](../standard-library/is-member-pointer-class.md)"},{"content":"Tests whether the type is a pointer to a member.","pos":[5607,5655]},{"content":"Type properties","pos":[5663,5678]},{"pos":[5699,5748],"content":"<bpt id=\"p1\">[</bpt>is_const<ept id=\"p1\">](../standard-library/is-const-class.md)</ept>","source":"[is_const](../standard-library/is-const-class.md)"},{"pos":[5749,5783],"content":"Tests whether the type is <ph id=\"ph1\">`const`</ph>.","source":"Tests whether the type is `const`."},{"pos":[5788,5843],"content":"<bpt id=\"p1\">[</bpt>is_volatile<ept id=\"p1\">](../standard-library/is-volatile-class.md)</ept>","source":"[is_volatile](../standard-library/is-volatile-class.md)"},{"pos":[5844,5881],"content":"Tests whether the type is <ph id=\"ph1\">`volatile`</ph>.","source":"Tests whether the type is `volatile`."},{"pos":[5886,5939],"content":"<bpt id=\"p1\">[</bpt>is_trivial<ept id=\"p1\">](../standard-library/is-trivial-class.md)</ept>","source":"[is_trivial](../standard-library/is-trivial-class.md)"},{"content":"Tests whether the type is trivial.","pos":[5940,5974]},{"pos":[5979,6054],"content":"<bpt id=\"p1\">[</bpt>is_trivially_copyable<ept id=\"p1\">](../standard-library/is-trivially-copyable-class.md)</ept>","source":"[is_trivially_copyable](../standard-library/is-trivially-copyable-class.md)"},{"content":"Tests whether the type is trivially copyable.","pos":[6055,6100]},{"pos":[6105,6174],"content":"<bpt id=\"p1\">[</bpt>is_standard_layout<ept id=\"p1\">](../standard-library/is-standard-layout-class.md)</ept>","source":"[is_standard_layout](../standard-library/is-standard-layout-class.md)"},{"content":"Tests if type is a standard layout type.","pos":[6175,6215]},{"pos":[6220,6265],"content":"<bpt id=\"p1\">[</bpt>is_pod<ept id=\"p1\">](../standard-library/is-pod-class.md)</ept>","source":"[is_pod](../standard-library/is-pod-class.md)"},{"content":"Tests whether the type is a POD.","pos":[6266,6298]},{"pos":[6303,6366],"content":"<bpt id=\"p1\">[</bpt>is_literal_type<ept id=\"p1\">](../standard-library/is-literal-type-class.md)</ept>","source":"[is_literal_type](../standard-library/is-literal-type-class.md)"},{"pos":[6367,6454],"content":"Tests whether the type can be a <ph id=\"ph1\">`constexpr`</ph> variable or used in a <ph id=\"ph2\">`constexpr`</ph> function.","source":"Tests whether the type can be a `constexpr` variable or used in a `constexpr` function."},{"pos":[6459,6508],"content":"<bpt id=\"p1\">[</bpt>is_empty<ept id=\"p1\">](../standard-library/is-empty-class.md)</ept>","source":"[is_empty](../standard-library/is-empty-class.md)"},{"content":"Tests whether the type is an empty class.","pos":[6509,6550]},{"pos":[6555,6616],"content":"<bpt id=\"p1\">[</bpt>is_polymorphic<ept id=\"p1\">](../standard-library/is-polymorphic-class.md)</ept>","source":"[is_polymorphic](../standard-library/is-polymorphic-class.md)"},{"content":"Tests whether the type is a polymorphic class.","pos":[6617,6663]},{"pos":[6668,6723],"content":"<bpt id=\"p1\">[</bpt>is_abstract<ept id=\"p1\">](../standard-library/is-abstract-class.md)</ept>","source":"[is_abstract](../standard-library/is-abstract-class.md)"},{"content":"Tests whether the type is an abstract class.","pos":[6724,6768]},{"pos":[6773,6822],"content":"<bpt id=\"p1\">[</bpt>is_final<ept id=\"p1\">](../standard-library/is-final-class.md)</ept>","source":"[is_final](../standard-library/is-final-class.md)"},{"pos":[6823,6877],"content":"Tests whether the type is a class type marked <ph id=\"ph1\">`final`</ph>.","source":"Tests whether the type is a class type marked `final`."},{"pos":[6882,6933],"content":"<bpt id=\"p1\">[</bpt>is_signed<ept id=\"p1\">](../standard-library/is-signed-class.md)</ept>","source":"[is_signed](../standard-library/is-signed-class.md)"},{"content":"Tests whether the type is a signed integer.","pos":[6934,6977]},{"pos":[6982,7037],"content":"<bpt id=\"p1\">[</bpt>is_unsigned<ept id=\"p1\">](../standard-library/is-unsigned-class.md)</ept>","source":"[is_unsigned](../standard-library/is-unsigned-class.md)"},{"content":"Tests whether the type is an unsigned integer.","pos":[7038,7084]},{"pos":[7089,7154],"content":"<bpt id=\"p1\">[</bpt>is_constructible<ept id=\"p1\">](../standard-library/is-constructible-class.md)</ept>","source":"[is_constructible](../standard-library/is-constructible-class.md)"},{"content":"Tests whether the type is constructible using the specified argument types.","pos":[7155,7230]},{"pos":[7235,7332],"content":"<bpt id=\"p1\">[</bpt>is_default_constructible<ept id=\"p1\">](../standard-library/type-traits-functions.md#is_default_constructible)</ept>","source":"[is_default_constructible](../standard-library/type-traits-functions.md#is_default_constructible)"},{"content":"Tests whether the type has a default constructor.","pos":[7333,7382]},{"pos":[7387,7478],"content":"<bpt id=\"p1\">[</bpt>is_copy_constructible<ept id=\"p1\">](../standard-library/type-traits-functions.md#is_copy_constructible)</ept>","source":"[is_copy_constructible](../standard-library/type-traits-functions.md#is_copy_constructible)"},{"content":"Tests whether the type has a copy constructor.","pos":[7479,7525]},{"pos":[7530,7621],"content":"<bpt id=\"p1\">[</bpt>is_move_constructible<ept id=\"p1\">](../standard-library/type-traits-functions.md#is_move_constructible)</ept>","source":"[is_move_constructible](../standard-library/type-traits-functions.md#is_move_constructible)"},{"content":"Tests whether the type has a move constructor.","pos":[7622,7668]},{"pos":[7673,7748],"content":"<bpt id=\"p1\">[</bpt>is_assignable<ept id=\"p1\">](../standard-library/type-traits-functions.md#is_assignable)</ept>","source":"[is_assignable](../standard-library/type-traits-functions.md#is_assignable)"},{"content":"Tests whether the first type can be assigned a value of the second type.","pos":[7749,7821]},{"pos":[7826,7911],"content":"<bpt id=\"p1\">[</bpt>is_copy_assignable<ept id=\"p1\">](../standard-library/type-traits-functions.md#is_copy_assignable)</ept>","source":"[is_copy_assignable](../standard-library/type-traits-functions.md#is_copy_assignable)"},{"content":"Tests whether a type can be assigned a const reference value of the type.","pos":[7912,7985]},{"pos":[7990,8075],"content":"<bpt id=\"p1\">[</bpt>is_move_assignable<ept id=\"p1\">](../standard-library/type-traits-functions.md#is_move_assignable)</ept>","source":"[is_move_assignable](../standard-library/type-traits-functions.md#is_move_assignable)"},{"content":"Tests whether a type can be assigned an rvalue reference of the type.","pos":[8076,8145]},{"pos":[8150,8213],"content":"<bpt id=\"p1\">[</bpt>is_destructible<ept id=\"p1\">](../standard-library/is-destructible-class.md)</ept>","source":"[is_destructible](../standard-library/is-destructible-class.md)"},{"content":"Tests whether the type is destructible.","pos":[8214,8253]},{"pos":[8258,8343],"content":"<bpt id=\"p1\">[</bpt>is_trivially_constructible<ept id=\"p1\">](../standard-library/is-trivially-constructible-class.md)</ept>","source":"[is_trivially_constructible](../standard-library/is-trivially-constructible-class.md)"},{"content":"Tests whether the type uses no non-trivial operations when constructed using the specified types.","pos":[8344,8441]},{"pos":[8446,8547],"content":"<bpt id=\"p1\">[</bpt>is_trivially_default_constructible<ept id=\"p1\">](../standard-library/is-trivially-default-constructible-class.md)</ept>","source":"[is_trivially_default_constructible](../standard-library/is-trivially-default-constructible-class.md)"},{"content":"Tests whether the type uses no non-trivial operations when default constructed.","pos":[8548,8627]},{"pos":[8632,8727],"content":"<bpt id=\"p1\">[</bpt>is_trivially_copy_constructible<ept id=\"p1\">](../standard-library/is-trivially-copy-constructible-class.md)</ept>","source":"[is_trivially_copy_constructible](../standard-library/is-trivially-copy-constructible-class.md)"},{"content":"Tests whether the type uses no non-trivial operations when copy constructed.","pos":[8728,8804]},{"pos":[8809,8920],"content":"<bpt id=\"p1\">[</bpt>is_trivially_move_constructible<ept id=\"p1\">](../standard-library/type-traits-functions.md#is_trivially_move_constructible)</ept>","source":"[is_trivially_move_constructible](../standard-library/type-traits-functions.md#is_trivially_move_constructible)"},{"content":"Tests whether the type uses no non-trivial operations when move constructed.","pos":[8921,8997]},{"pos":[9002,9081],"content":"<bpt id=\"p1\">[</bpt>is_trivially_assignable<ept id=\"p1\">](../standard-library/is-trivially-assignable-class.md)</ept>","source":"[is_trivially_assignable](../standard-library/is-trivially-assignable-class.md)"},{"content":"Tests whether the types are assignable and the assignment uses no non-trivial operations.","pos":[9082,9171]},{"pos":[9176,9281],"content":"<bpt id=\"p1\">[</bpt>is_trivially_copy_assignable<ept id=\"p1\">](../standard-library/type-traits-functions.md#is_trivially_copy_assignable)</ept>","source":"[is_trivially_copy_assignable](../standard-library/type-traits-functions.md#is_trivially_copy_assignable)"},{"content":"Tests whether the type is copy assignable and the assignment uses no non-trivial operations.","pos":[9282,9374]},{"pos":[9379,9484],"content":"<bpt id=\"p1\">[</bpt>is_trivially_move_assignable<ept id=\"p1\">](../standard-library/type-traits-functions.md#is_trivially_move_assignable)</ept>","source":"[is_trivially_move_assignable](../standard-library/type-traits-functions.md#is_trivially_move_assignable)"},{"content":"Tests whether the type is move assignable and the assignment uses no non-trivial operations.","pos":[9485,9577]},{"pos":[9582,9665],"content":"<bpt id=\"p1\">[</bpt>is_trivially_destructible<ept id=\"p1\">](../standard-library/is-trivially-destructible-class.md)</ept>","source":"[is_trivially_destructible](../standard-library/is-trivially-destructible-class.md)"},{"content":"Tests whether the type is destructible and the destructor uses no non-trivial operations.","pos":[9666,9755]},{"pos":[9760,9841],"content":"<bpt id=\"p1\">[</bpt>is_nothrow_constructible<ept id=\"p1\">](../standard-library/is-nothrow-constructible-class.md)</ept>","source":"[is_nothrow_constructible](../standard-library/is-nothrow-constructible-class.md)"},{"content":"Tests whether the type is constructible and is known not to throw when constructed using the specified types.","pos":[9842,9951]},{"pos":[9956,10053],"content":"<bpt id=\"p1\">[</bpt>is_nothrow_default_constructible<ept id=\"p1\">](../standard-library/is-nothrow-default-constructible-class.md)</ept>","source":"[is_nothrow_default_constructible](../standard-library/is-nothrow-default-constructible-class.md)"},{"content":"Tests whether the type is default constructible and is known not to throw when default constructed.","pos":[10054,10153]},{"pos":[10158,10249],"content":"<bpt id=\"p1\">[</bpt>is_nothrow_copy_constructible<ept id=\"p1\">](../standard-library/is-nothrow-copy-constructible-class.md)</ept>","source":"[is_nothrow_copy_constructible](../standard-library/is-nothrow-copy-constructible-class.md)"},{"content":"Tests whether the type is copy constructible and the copy constructor is known not to throw.","pos":[10250,10342]},{"pos":[10347,10438],"content":"<bpt id=\"p1\">[</bpt>is_nothrow_move_constructible<ept id=\"p1\">](../standard-library/is-nothrow-move-constructible-class.md)</ept>","source":"[is_nothrow_move_constructible](../standard-library/is-nothrow-move-constructible-class.md)"},{"content":"Tests whether the type is move constructible and the move constructor is known not to throw.","pos":[10439,10531]},{"pos":[10536,10611],"content":"<bpt id=\"p1\">[</bpt>is_nothrow_assignable<ept id=\"p1\">](../standard-library/is-nothrow-assignable-class.md)</ept>","source":"[is_nothrow_assignable](../standard-library/is-nothrow-assignable-class.md)"},{"content":"Tests whether the type is assignable using the specified type and the assignment is known not to throw.","pos":[10612,10715]},{"pos":[10720,10805],"content":"<bpt id=\"p1\">[</bpt>is_nothrow_copy_assignable<ept id=\"p1\">](../standard-library/is-nothrow-copy-assignable-class.md)</ept>","source":"[is_nothrow_copy_assignable](../standard-library/is-nothrow-copy-assignable-class.md)"},{"content":"Tests whether the type is copy assignable and the assignment is known not to throw.","pos":[10806,10889]},{"pos":[10894,10995],"content":"<bpt id=\"p1\">[</bpt>is_nothrow_move_assignable<ept id=\"p1\">](../standard-library/type-traits-functions.md#is_nothrow_move_assignable)</ept>","source":"[is_nothrow_move_assignable](../standard-library/type-traits-functions.md#is_nothrow_move_assignable)"},{"content":"Tests whether the type is move assignable and the assignment is known not to throw.","pos":[10996,11079]},{"pos":[11084,11163],"content":"<bpt id=\"p1\">[</bpt>is_nothrow_destructible<ept id=\"p1\">](../standard-library/is-nothrow-destructible-class.md)</ept>","source":"[is_nothrow_destructible](../standard-library/is-nothrow-destructible-class.md)"},{"content":"Tests whether the type is destructible and the destructor is known not to throw.","pos":[11164,11244]},{"pos":[11249,11343],"content":"<bpt id=\"p1\">[</bpt>has_virtual_destructor<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c0f85f0b-c63c-410d-a046-72eeaf44f7eb)</ept>","source":"[has_virtual_destructor](http://msdn.microsoft.com/en-us/c0f85f0b-c63c-410d-a046-72eeaf44f7eb)"},{"content":"Tests whether the type has a virtual destructor.","pos":[11344,11392]},{"content":"Type property queries","pos":[11400,11421]},{"pos":[11442,11499],"content":"<bpt id=\"p1\">[</bpt>alignment_of<ept id=\"p1\">](../standard-library/alignment-of-class.md)</ept>","source":"[alignment_of](../standard-library/alignment-of-class.md)"},{"content":"Gets the alignment of a type.","pos":[11500,11529]},{"pos":[11534,11575],"content":"<bpt id=\"p1\">[</bpt>rank<ept id=\"p1\">](../standard-library/rank-class.md)</ept>","source":"[rank](../standard-library/rank-class.md)"},{"content":"Gets the number of array dimensions.","pos":[11576,11612]},{"pos":[11617,11662],"content":"<bpt id=\"p1\">[</bpt>extent<ept id=\"p1\">](../standard-library/extent-class.md)</ept>","source":"[extent](../standard-library/extent-class.md)"},{"content":"Gets the number of elements in the specified array dimension.","pos":[11663,11724]},{"content":"Type relations","pos":[11732,11746]},{"pos":[11767,11814],"content":"<bpt id=\"p1\">[</bpt>is_same<ept id=\"p1\">](../standard-library/is-same-class.md)</ept>","source":"[is_same](../standard-library/is-same-class.md)"},{"content":"Tests whether two types are the same.","pos":[11815,11852]},{"pos":[11857,11910],"content":"<bpt id=\"p1\">[</bpt>is_base_of<ept id=\"p1\">](../standard-library/is-base-of-class.md)</ept>","source":"[is_base_of](../standard-library/is-base-of-class.md)"},{"content":"Tests whether one type is a base of another.","pos":[11911,11955]},{"pos":[11960,12021],"content":"<bpt id=\"p1\">[</bpt>is_convertible<ept id=\"p1\">](../standard-library/is-convertible-class.md)</ept>","source":"[is_convertible](../standard-library/is-convertible-class.md)"},{"content":"Tests whether one type is convertible to another.","pos":[12022,12071]},{"content":"Const-volatile modifications","pos":[12079,12107]},{"pos":[12128,12179],"content":"<bpt id=\"p1\">[</bpt>add_const<ept id=\"p1\">](../standard-library/add-const-class.md)</ept>","source":"[add_const](../standard-library/add-const-class.md)"},{"pos":[12180,12214],"content":"Produces a <ph id=\"ph1\">`const`</ph> type from type.","source":"Produces a `const` type from type."},{"pos":[12219,12276],"content":"<bpt id=\"p1\">[</bpt>add_volatile<ept id=\"p1\">](../standard-library/add-volatile-class.md)</ept>","source":"[add_volatile](../standard-library/add-volatile-class.md)"},{"pos":[12277,12314],"content":"Produces a <ph id=\"ph1\">`volatile`</ph> type from type.","source":"Produces a `volatile` type from type."},{"pos":[12319,12364],"content":"<bpt id=\"p1\">[</bpt>add_cv<ept id=\"p1\">](../standard-library/add-cv-class.md)</ept>","source":"[add_cv](../standard-library/add-cv-class.md)"},{"pos":[12365,12409],"content":"Produces a <ph id=\"ph1\">`const``volatile`</ph> type from type.","source":"Produces a `const``volatile` type from type."},{"pos":[12414,12471],"content":"<bpt id=\"p1\">[</bpt>remove_const<ept id=\"p1\">](../standard-library/remove-const-class.md)</ept>","source":"[remove_const](../standard-library/remove-const-class.md)"},{"content":"Produces a non-const type from type.","pos":[12472,12508]},{"pos":[12513,12576],"content":"<bpt id=\"p1\">[</bpt>remove_volatile<ept id=\"p1\">](../standard-library/remove-volatile-class.md)</ept>","source":"[remove_volatile](../standard-library/remove-volatile-class.md)"},{"content":"Produces a non-volatile type from type.","pos":[12577,12616]},{"pos":[12621,12672],"content":"<bpt id=\"p1\">[</bpt>remove_cv<ept id=\"p1\">](../standard-library/remove-cv-class.md)</ept>","source":"[remove_cv](../standard-library/remove-cv-class.md)"},{"content":"Produces a non-const non-volatile type from type.","pos":[12673,12722]},{"content":"Reference modifications","pos":[12730,12753]},{"pos":[12774,12847],"content":"<bpt id=\"p1\">[</bpt>add_lvalue_reference<ept id=\"p1\">](../standard-library/add-lvalue-reference-class.md)</ept>","source":"[add_lvalue_reference](../standard-library/add-lvalue-reference-class.md)"},{"content":"Produces a reference to type from type.","pos":[12848,12887]},{"pos":[12892,12965],"content":"<bpt id=\"p1\">[</bpt>add_rvalue_reference<ept id=\"p1\">](../standard-library/add-rvalue-reference-class.md)</ept>","source":"[add_rvalue_reference](../standard-library/add-rvalue-reference-class.md)"},{"content":"Produces an rvalue reference to type from type","pos":[12966,13012]},{"pos":[13017,13082],"content":"<bpt id=\"p1\">[</bpt>remove_reference<ept id=\"p1\">](../standard-library/remove-reference-class.md)</ept>","source":"[remove_reference](../standard-library/remove-reference-class.md)"},{"content":"Produces a non-reference type from type.","pos":[13083,13123]},{"content":"Sign modifications","pos":[13131,13149]},{"pos":[13170,13225],"content":"<bpt id=\"p1\">[</bpt>make_signed<ept id=\"p1\">](../standard-library/make-signed-class.md)</ept>","source":"[make_signed](../standard-library/make-signed-class.md)"},{"content":"Produces the type if signed, or the smallest signed type greater than or equal in size to type.","pos":[13226,13321]},{"pos":[13326,13385],"content":"<bpt id=\"p1\">[</bpt>make_unsigned<ept id=\"p1\">](../standard-library/make-unsigned-class.md)</ept>","source":"[make_unsigned](../standard-library/make-unsigned-class.md)"},{"content":"Produces the type if unsigned, or the smallest unsigned type greater than or equal in size to type.","pos":[13386,13485]},{"content":"Array modifications","pos":[13493,13512]},{"pos":[13533,13602],"content":"<bpt id=\"p1\">[</bpt>remove_all_extents<ept id=\"p1\">](../standard-library/remove-all-extents-class.md)</ept>","source":"[remove_all_extents](../standard-library/remove-all-extents-class.md)"},{"content":"Produces a non-array type from an array type.","pos":[13603,13648]},{"pos":[13653,13712],"content":"<bpt id=\"p1\">[</bpt>remove_extent<ept id=\"p1\">](../standard-library/remove-extent-class.md)</ept>","source":"[remove_extent](../standard-library/remove-extent-class.md)"},{"content":"Produces the element type from an array type.","pos":[13713,13758]},{"content":"Pointer modifications","pos":[13766,13787]},{"pos":[13808,13863],"content":"<bpt id=\"p1\">[</bpt>add_pointer<ept id=\"p1\">](../standard-library/add-pointer-class.md)</ept>","source":"[add_pointer](../standard-library/add-pointer-class.md)"},{"content":"Produces a pointer to type from type.","pos":[13864,13901]},{"pos":[13906,13967],"content":"<bpt id=\"p1\">[</bpt>remove_pointer<ept id=\"p1\">](../standard-library/remove-pointer-class.md)</ept>","source":"[remove_pointer](../standard-library/remove-pointer-class.md)"},{"content":"Produces a type from a pointer to type.","pos":[13968,14007]},{"content":"Other transformations","pos":[14015,14036]},{"pos":[14057,14120],"content":"<bpt id=\"p1\">[</bpt>aligned_storage<ept id=\"p1\">](../standard-library/aligned-storage-class.md)</ept>","source":"[aligned_storage](../standard-library/aligned-storage-class.md)"},{"content":"Allocates uninitialized memory for an aligned type.","pos":[14121,14172]},{"pos":[14177,14236],"content":"<bpt id=\"p1\">[</bpt>aligned_union<ept id=\"p1\">](../standard-library/aligned-union-class.md)</ept>","source":"[aligned_union](../standard-library/aligned-union-class.md)"},{"content":"Allocates uninitialized memory for an aligned union with a non-trivial constructor or destructor.","pos":[14237,14334]},{"pos":[14339,14394],"content":"<bpt id=\"p1\">[</bpt>common_type<ept id=\"p1\">](../standard-library/common-type-class.md)</ept>","source":"[common_type](../standard-library/common-type-class.md)"},{"content":"Produces the common type of all the types of the parameter pack.","pos":[14395,14459]},{"pos":[14464,14519],"content":"<bpt id=\"p1\">[</bpt>conditional<ept id=\"p1\">](../standard-library/conditional-class.md)</ept>","source":"[conditional](../standard-library/conditional-class.md)"},{"content":"If the condition is true, produces the first specified type, otherwise the second specified type.","pos":[14520,14617]},{"pos":[14622,14665],"content":"<bpt id=\"p1\">[</bpt>decay<ept id=\"p1\">](../standard-library/decay-class.md)</ept>","source":"[decay](../standard-library/decay-class.md)"},{"content":"Produces the type as passed by value.","pos":[14666,14703]},{"content":"Makes non-reference, non-const, or non-volatile type, or makes a pointer to type.","pos":[14704,14785]},{"pos":[14790,14841],"content":"<bpt id=\"p1\">[</bpt>enable_if<ept id=\"p1\">](../standard-library/enable-if-class.md)</ept>","source":"[enable_if](../standard-library/enable-if-class.md)"},{"content":"If the condition is true, produces the specified type, otherwise no type.","pos":[14842,14915]},{"pos":[14920,14971],"content":"<bpt id=\"p1\">[</bpt>result_of<ept id=\"p1\">](../standard-library/result-of-class.md)</ept>","source":"[result_of](../standard-library/result-of-class.md)"},{"content":"Determines the return type of the callable type that takes the specified argument types.","pos":[14972,15060]},{"pos":[15065,15128],"content":"<bpt id=\"p1\">[</bpt>underlying_type<ept id=\"p1\">](../standard-library/underlying-type-class.md)</ept>","source":"[underlying_type](../standard-library/underlying-type-class.md)"},{"content":"Produces the underlying integral type for an enumeration type.","pos":[15129,15191]},{"pos":[15201,15209],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[15213,15263],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>functional&gt;<ept id=\"p1\">](../standard-library/functional.md)</ept>","source":"[\\<functional>](../standard-library/functional.md)"}],"content":"---\ntitle: \"&lt;type_traits&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"<type_traits>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"typetrait header [TR1]\"\n  - \"type_traits\"\nms.assetid: 2260b51f-8160-4c66-a82f-00b534cb60d4\ncaps.latest.revision: 35\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;type_traits&gt;\nDefines templates that provide compile-time constants that give information about the properties of their type arguments or produce transformed types.  \n  \n## Syntax  \n  \n```  \n#include <type_traits>  \n```  \n  \n## Remarks  \n The classes and templates in `<type_traits>` are used to support type inference, classification, and transformation at compile time, to detect type-related errors, and to help you optimize your generic code. These classes and templates include unary type traits that describe a property of a type, binary type traits that describe a relationship between types, and transformation traits that modify a property of a type.  \n  \n To support type traits, a helper class, `integral_constant`, is defined. It has template specializations `true_type` and `false_type` that form the base classes for type predicates. A *type predicate* is a template that takes one or more type arguments. When a type predicate *holds true*, it is publicly derived, directly or indirectly, from [true_type](../standard-library/type-traits-typedefs.md#true_type_typedef). When a type predicate *holds false*, it is publicly derived, directly or indirectly, from [false_type](../standard-library/type-traits-typedefs.md#false_type_typedef).  \n  \n A *type modifier* or *transformation trait* is a template that takes one or more template arguments and has one member, `type`, which is a synonym for the modified type.  \n  \n### Alias Templates  \n To simplify type traits expressions, [alias templates](../cpp/aliases-and-typedefs-cpp.md) for `typename some_trait<T>::type` are provided, where \" `some_trait`\" is the template class name. For example, [add_const](../standard-library/add-const-class.md) has an alias template for its type, `add_const_t`, defined as:  \n  \n```cpp\ntemplate <class T>\nusing add_const_t = typename add_const<T>::type;\n```  \n  \n|||||  \n|-|-|-|-|  \n|add_const_t|aligned_storage_t|make_signed_t|remove_pointer_t|  \n|add_cv_t|aligned_union_t|make_unsigned_t|remove_reference_t|  \n|add_lvalue_reference_t|common_type_t|remove_all_extents_t|remove_volatile_t|  \n|add_pointer_t|conditional_t|remove_const_t|result_of_t|  \n|add_rvalue_reference_t|decay_t|remove_cv_t|underlying_type_t|  \n|add_volatile_t|enable_if_t|remove_extent_t||  \n  \n### Classes  \n Helper class and typedefs  \n  \n|||  \n|-|-|  \n|[integral_constant](../standard-library/integral-constant-class-bool-constant-class.md)|Makes an integral constant from a type and a value.|  \n|[true_type](../standard-library/type-traits-typedefs.md#true_type_typedef)|Holds integral constant with true value.|  \n|[false_type](../standard-library/type-traits-typedefs.md#false_type_typedef)|Holds integral constant with false value.|  \n  \n Primary type categories  \n  \n|||  \n|-|-|  \n|[is_void](../standard-library/is-void-class.md)|Tests whether the type is `void`.|  \n|[is_null_pointer](../standard-library/is-null-pointer-class.md)|Tests whether the type is `std::nullptr_t`.|  \n|[is_integral](../standard-library/is-integral-class.md)|Tests whether the type is integral.|  \n|[is_floating_point](../standard-library/is-floating-point-class.md)|Tests whether the type is floating-point.|  \n|[is_array](../standard-library/is-array-class.md)|Tests whether the type is an array.|  \n|[is_pointer](../standard-library/is-pointer-class.md)|Tests whether the type is a pointer.|  \n|[is_lvalue_reference](../standard-library/is-lvalue-reference-class.md)|Tests if type is an lvalue reference.|  \n|[is_rvalue_reference](../standard-library/is-rvalue-reference-class.md)|Tests if type is an rvalue reference.|  \n|[is_member_object_pointer](../standard-library/is-member-object-pointer-class.md)|Tests whether the type is a pointer to a member object.|  \n|[is_member_function_pointer](../standard-library/is-member-function-pointer-class.md)|Tests whether the type is a pointer to a member function.|  \n|[is_enum](../standard-library/is-enum-class.md)|Tests whether the type is an enumeration.|  \n|[is_union](../standard-library/is-union-class.md)|Tests whether the type is a union.|  \n|[is_class](../standard-library/is-class-class.md)|Tests whether the type is a class.|  \n|[is_function](../standard-library/is-function-class.md)|Tests whether the type is a function type.|  \n  \n Composite type categories  \n  \n|||  \n|-|-|  \n|[is_reference](../standard-library/is-reference-class.md)|Tests whether the type is a reference.|  \n|[is_arithmetic](../standard-library/is-arithmetic-class.md)|Tests whether the type is arithmetic.|  \n|[is_fundamental](../standard-library/is-fundamental-class.md)|Tests whether the type is `void` or arithmetic.|  \n|[is_object](../standard-library/is-object-class.md)|Tests whether the type is an object type.|  \n|[is_scalar](../standard-library/is-scalar-class.md)|Tests whether the type is scalar.|  \n|[is_compound](../standard-library/is-compound-class.md)|Tests whether the type is not scalar.|  \n|[is_member_pointer](../standard-library/is-member-pointer-class.md)|Tests whether the type is a pointer to a member.|  \n  \n Type properties  \n  \n|||  \n|-|-|  \n|[is_const](../standard-library/is-const-class.md)|Tests whether the type is `const`.|  \n|[is_volatile](../standard-library/is-volatile-class.md)|Tests whether the type is `volatile`.|  \n|[is_trivial](../standard-library/is-trivial-class.md)|Tests whether the type is trivial.|  \n|[is_trivially_copyable](../standard-library/is-trivially-copyable-class.md)|Tests whether the type is trivially copyable.|  \n|[is_standard_layout](../standard-library/is-standard-layout-class.md)|Tests if type is a standard layout type.|  \n|[is_pod](../standard-library/is-pod-class.md)|Tests whether the type is a POD.|  \n|[is_literal_type](../standard-library/is-literal-type-class.md)|Tests whether the type can be a `constexpr` variable or used in a `constexpr` function.|  \n|[is_empty](../standard-library/is-empty-class.md)|Tests whether the type is an empty class.|  \n|[is_polymorphic](../standard-library/is-polymorphic-class.md)|Tests whether the type is a polymorphic class.|  \n|[is_abstract](../standard-library/is-abstract-class.md)|Tests whether the type is an abstract class.|  \n|[is_final](../standard-library/is-final-class.md)|Tests whether the type is a class type marked `final`.|  \n|[is_signed](../standard-library/is-signed-class.md)|Tests whether the type is a signed integer.|  \n|[is_unsigned](../standard-library/is-unsigned-class.md)|Tests whether the type is an unsigned integer.|  \n|[is_constructible](../standard-library/is-constructible-class.md)|Tests whether the type is constructible using the specified argument types.|  \n|[is_default_constructible](../standard-library/type-traits-functions.md#is_default_constructible)|Tests whether the type has a default constructor.|  \n|[is_copy_constructible](../standard-library/type-traits-functions.md#is_copy_constructible)|Tests whether the type has a copy constructor.|  \n|[is_move_constructible](../standard-library/type-traits-functions.md#is_move_constructible)|Tests whether the type has a move constructor.|  \n|[is_assignable](../standard-library/type-traits-functions.md#is_assignable)|Tests whether the first type can be assigned a value of the second type.|  \n|[is_copy_assignable](../standard-library/type-traits-functions.md#is_copy_assignable)|Tests whether a type can be assigned a const reference value of the type.|  \n|[is_move_assignable](../standard-library/type-traits-functions.md#is_move_assignable)|Tests whether a type can be assigned an rvalue reference of the type.|  \n|[is_destructible](../standard-library/is-destructible-class.md)|Tests whether the type is destructible.|  \n|[is_trivially_constructible](../standard-library/is-trivially-constructible-class.md)|Tests whether the type uses no non-trivial operations when constructed using the specified types.|  \n|[is_trivially_default_constructible](../standard-library/is-trivially-default-constructible-class.md)|Tests whether the type uses no non-trivial operations when default constructed.|  \n|[is_trivially_copy_constructible](../standard-library/is-trivially-copy-constructible-class.md)|Tests whether the type uses no non-trivial operations when copy constructed.|  \n|[is_trivially_move_constructible](../standard-library/type-traits-functions.md#is_trivially_move_constructible)|Tests whether the type uses no non-trivial operations when move constructed.|  \n|[is_trivially_assignable](../standard-library/is-trivially-assignable-class.md)|Tests whether the types are assignable and the assignment uses no non-trivial operations.|  \n|[is_trivially_copy_assignable](../standard-library/type-traits-functions.md#is_trivially_copy_assignable)|Tests whether the type is copy assignable and the assignment uses no non-trivial operations.|  \n|[is_trivially_move_assignable](../standard-library/type-traits-functions.md#is_trivially_move_assignable)|Tests whether the type is move assignable and the assignment uses no non-trivial operations.|  \n|[is_trivially_destructible](../standard-library/is-trivially-destructible-class.md)|Tests whether the type is destructible and the destructor uses no non-trivial operations.|  \n|[is_nothrow_constructible](../standard-library/is-nothrow-constructible-class.md)|Tests whether the type is constructible and is known not to throw when constructed using the specified types.|  \n|[is_nothrow_default_constructible](../standard-library/is-nothrow-default-constructible-class.md)|Tests whether the type is default constructible and is known not to throw when default constructed.|  \n|[is_nothrow_copy_constructible](../standard-library/is-nothrow-copy-constructible-class.md)|Tests whether the type is copy constructible and the copy constructor is known not to throw.|  \n|[is_nothrow_move_constructible](../standard-library/is-nothrow-move-constructible-class.md)|Tests whether the type is move constructible and the move constructor is known not to throw.|  \n|[is_nothrow_assignable](../standard-library/is-nothrow-assignable-class.md)|Tests whether the type is assignable using the specified type and the assignment is known not to throw.|  \n|[is_nothrow_copy_assignable](../standard-library/is-nothrow-copy-assignable-class.md)|Tests whether the type is copy assignable and the assignment is known not to throw.|  \n|[is_nothrow_move_assignable](../standard-library/type-traits-functions.md#is_nothrow_move_assignable)|Tests whether the type is move assignable and the assignment is known not to throw.|  \n|[is_nothrow_destructible](../standard-library/is-nothrow-destructible-class.md)|Tests whether the type is destructible and the destructor is known not to throw.|  \n|[has_virtual_destructor](http://msdn.microsoft.com/en-us/c0f85f0b-c63c-410d-a046-72eeaf44f7eb)|Tests whether the type has a virtual destructor.|  \n  \n Type property queries  \n  \n|||  \n|-|-|  \n|[alignment_of](../standard-library/alignment-of-class.md)|Gets the alignment of a type.|  \n|[rank](../standard-library/rank-class.md)|Gets the number of array dimensions.|  \n|[extent](../standard-library/extent-class.md)|Gets the number of elements in the specified array dimension.|  \n  \n Type relations  \n  \n|||  \n|-|-|  \n|[is_same](../standard-library/is-same-class.md)|Tests whether two types are the same.|  \n|[is_base_of](../standard-library/is-base-of-class.md)|Tests whether one type is a base of another.|  \n|[is_convertible](../standard-library/is-convertible-class.md)|Tests whether one type is convertible to another.|  \n  \n Const-volatile modifications  \n  \n|||  \n|-|-|  \n|[add_const](../standard-library/add-const-class.md)|Produces a `const` type from type.|  \n|[add_volatile](../standard-library/add-volatile-class.md)|Produces a `volatile` type from type.|  \n|[add_cv](../standard-library/add-cv-class.md)|Produces a `const``volatile` type from type.|  \n|[remove_const](../standard-library/remove-const-class.md)|Produces a non-const type from type.|  \n|[remove_volatile](../standard-library/remove-volatile-class.md)|Produces a non-volatile type from type.|  \n|[remove_cv](../standard-library/remove-cv-class.md)|Produces a non-const non-volatile type from type.|  \n  \n Reference modifications  \n  \n|||  \n|-|-|  \n|[add_lvalue_reference](../standard-library/add-lvalue-reference-class.md)|Produces a reference to type from type.|  \n|[add_rvalue_reference](../standard-library/add-rvalue-reference-class.md)|Produces an rvalue reference to type from type|  \n|[remove_reference](../standard-library/remove-reference-class.md)|Produces a non-reference type from type.|  \n  \n Sign modifications  \n  \n|||  \n|-|-|  \n|[make_signed](../standard-library/make-signed-class.md)|Produces the type if signed, or the smallest signed type greater than or equal in size to type.|  \n|[make_unsigned](../standard-library/make-unsigned-class.md)|Produces the type if unsigned, or the smallest unsigned type greater than or equal in size to type.|  \n  \n Array modifications  \n  \n|||  \n|-|-|  \n|[remove_all_extents](../standard-library/remove-all-extents-class.md)|Produces a non-array type from an array type.|  \n|[remove_extent](../standard-library/remove-extent-class.md)|Produces the element type from an array type.|  \n  \n Pointer modifications  \n  \n|||  \n|-|-|  \n|[add_pointer](../standard-library/add-pointer-class.md)|Produces a pointer to type from type.|  \n|[remove_pointer](../standard-library/remove-pointer-class.md)|Produces a type from a pointer to type.|  \n  \n Other transformations  \n  \n|||  \n|-|-|  \n|[aligned_storage](../standard-library/aligned-storage-class.md)|Allocates uninitialized memory for an aligned type.|  \n|[aligned_union](../standard-library/aligned-union-class.md)|Allocates uninitialized memory for an aligned union with a non-trivial constructor or destructor.|  \n|[common_type](../standard-library/common-type-class.md)|Produces the common type of all the types of the parameter pack.|  \n|[conditional](../standard-library/conditional-class.md)|If the condition is true, produces the first specified type, otherwise the second specified type.|  \n|[decay](../standard-library/decay-class.md)|Produces the type as passed by value. Makes non-reference, non-const, or non-volatile type, or makes a pointer to type.|  \n|[enable_if](../standard-library/enable-if-class.md)|If the condition is true, produces the specified type, otherwise no type.|  \n|[result_of](../standard-library/result-of-class.md)|Determines the return type of the callable type that takes the specified argument types.|  \n|[underlying_type](../standard-library/underlying-type-class.md)|Produces the underlying integral type for an enumeration type.|  \n  \n## See Also  \n [\\<functional>](../standard-library/functional.md)\n\n\n\n"}