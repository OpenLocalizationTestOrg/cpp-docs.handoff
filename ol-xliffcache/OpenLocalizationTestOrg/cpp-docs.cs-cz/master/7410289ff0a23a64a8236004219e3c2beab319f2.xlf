<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7410289ff0a23a64a8236004219e3c2beab319f2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\explicitly-defaulted-and-deleted-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36acf1b9bf2b28ff3de18e39a043dcd9dd2fe307</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">645c308641e8cbbf75788d0b84d894e7c5ada11e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Explicitly Defaulted and Deleted Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Explicitly Defaulted and Deleted Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In C++11, defaulted and deleted functions give you explicit control over whether the special member functions are automatically generated.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Deleted functions also give you simple language to prevent problematic type promotions from occurring in arguments to functions of all types—special member functions, as well as normal member functions and non-member functions—which would otherwise cause an unwanted function call.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Benefits of explicitly defaulted and deleted functions</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In C++, the compiler automatically generates the default constructor, copy constructor, copy-assignment operator, and destructor for a type if it does not declare its own.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These functions are known as the <bpt id="p1">*</bpt>special member functions<ept id="p1">*</ept>, and they are what make simple user-defined types in C++ behave like structures do in C. That is, you can create, copy, and destroy them without any additional coding effort.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>C++11 brings move semantics to the language and adds the move constructor and move-assignment operator to the list of special member functions that the compiler can automatically generate.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is convenient for simple types, but complex types often define one or more of the special member functions themselves, and this can prevent other special member functions from being automatically generated.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In practice:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If any constructor is explicitly declared, then no default constructor is automatically generated.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If a virtual destructor is explicitly declared, then no default destructor is automatically generated.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If a move constructor or move-assignment operator is explicitly declared, then:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>No copy constructor is automatically generated.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>No copy-assignment operator is automatically generated.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If a copy constructor, copy-assignment operator, move constructor, move-assignment operator, or destructor is explicitly declared, then:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>No move constructor is automatically generated.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>No move-assignment operator is automatically generated.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Additionally, the C++11 standard specifies the following additional rules:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If a copy constructor or destructor is explicitly declared, then automatic generation of the copy-assignment operator is deprecated.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If a copy-assignment operator or destructor is explicitly declared, then automatic generation of the copy constructor is deprecated.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In both cases, Visual Studio continues to automatically generate the necessary functions implicitly, and does not emit a warning.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The consequences of these rules can also leak into object hierarchies.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, if for any reason a base class fails to have a default constructor that's callable from a deriving class—that is, a <ph id="ph1">`public`</ph> or <ph id="ph2">`protected`</ph> constructor that takes no parameters—then a class that derives from it cannot automatically generate its own default constructor.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These rules can complicate the implementation of what should be straight-forward, user-defined types and common C++ idioms—for example, making a user-defined type non-copyable by declaring the copy constructor and copy-assignment operator privately and not defining them.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Before C++11, this code snippet was the idiomatic form of non-copyable types.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, it has several problems:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The copy constructor has to be declared privately to hide it, but because it’s declared at all, automatic generation of the default constructor is prevented.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You have to explicitly define the default constructor if you want one, even if it does nothing.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Even if the explicitly-defined default constructor does nothing, it's considered non-trivial by the compiler.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It's less efficient than an automatically generated default constructor and prevents <ph id="ph1">`noncopyable`</ph> from being a true POD type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Even though the copy constructor and copy-assignment operator are hidden from outside code, the member functions and friends of <ph id="ph1">`noncopyable`</ph> can still see and call them.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If they are declared but not defined, calling them causes a linker error.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Although this is a commonly accepted idiom, the intent is not clear unless you understand all of the rules for automatic generation of the special member functions.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In C++11, the non-copyable idiom can be implemented in a way that is more straightforward.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Notice how the problems with the pre-C++11 idiom are resolved:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Generation of the default constructor is still prevented by declaring the copy constructor, but you can bring it back by explicitly defaulting it.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Explicitly defaulted special member functions are still considered trivial, so there is no performance penalty, and <ph id="ph1">`noncopyable`</ph> is not prevented from being a true POD type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The copy constructor and copy-assignment operator are public but deleted.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It is a compile-time error to define or call a deleted function.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The intent is clear to anyone who understands <ph id="ph1">`=default`</ph> and <ph id="ph2">`=delete`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You don't have to understand the rules for automatic generation of special member functions.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Similar idioms exist for making user-defined types that are non-movable, that can only be dynamically allocated, or that cannot be dynamically allocated.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each of these idioms have pre-C++11 implementations that suffer similar problems, and that are similarly resolved in C++11 by implementing them in terms of defaulted and deleted special member functions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Explicitly defaulted functions</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can default any of the special member functions—to explicitly state that the special member function uses the default implementation, to define the special member function with a non-public access qualifier, or to reinstate a special member function whose automatic generation was prevented by other circumstances.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You default a special member function by declaring it as in this example:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Notice that you can default a special member function outside the body of a class as long as it’s inlinable.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because of the performance benefits of trivial special member functions, we recommend that you prefer automatically generated special member functions over empty function bodies when you want the default behavior.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can do this either by explicitly defaulting the special member function, or by not declaring it (and also not declaring other special member functions that would prevent it from being automatically generated.)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>does not support defaulted move constructors or move-assignment operators as the C++11 standard mandates.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see the Defaulted and Deleted functions section of <bpt id="p1">[</bpt>Support For C++11/14/17 Features (Modern C++)<ept id="p1">](../cpp/support-for-cpp11-14-17-features-modern-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Deleted functions</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can delete special member functions as well as normal member functions and non-member functions to prevent them from being defined or called.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Deleting of special member functions provides a cleaner way of preventing the compiler from generating special member functions that you don’t want.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The function must be deleted as it is declared; it cannot be deleted afterwards in the way that a function can be declared and then later defaulted.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Deleting of normal member function or non-member functions prevents problematic type promotions from causing an unintended function to be called.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This works because deleted functions still participate in overload resolution and provide a better match than the function that could be called after the types are promoted.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The function call resolves to the more-specific—but deleted—function and causes a compiler error.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Notice in the preceding sample that calling <ph id="ph1">`call_with_true_double_only`</ph> by using a <ph id="ph2">`float`</ph> argument would cause a compiler error, but calling <ph id="ph3">`call_with_true_double_only`</ph> by using an <ph id="ph4">`int`</ph> argument would not; in the <ph id="ph5">`int`</ph> case, the argument will be promoted from <ph id="ph6">`int`</ph> to <ph id="ph7">`double`</ph> and successfully call the <ph id="ph8">`double`</ph> version of the function, even though that might not be what’s intended.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To ensure that any call to this function by using a non-double argument causes a compiler error, you can declare a template version of the function that’s deleted.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>