{"nodes":[{"pos":[12,63],"content":"_BitScanReverse, _BitScanReverse64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_BitScanReverse, _BitScanReverse64 | Microsoft Docs","pos":[0,51]}]},{"content":"_BitScanReverse, _BitScanReverse64","pos":[765,799]},{"content":"Microsoft Specific","pos":[802,820]},{"content":"Search the mask data from most significant bit (MSB) to least significant bit (LSB) for a set bit (1).","pos":[829,931]},{"content":"Syntax","pos":[940,946]},{"content":"Parameters","pos":[1157,1167]},{"content":"[out]","pos":[1171,1176]},{"content":"Loaded with the bit position of the first set bit (1) found.","pos":[1188,1248]},{"content":"[in]","pos":[1255,1259]},{"content":"The 32-bit or 64-bit value to search.","pos":[1270,1307]},{"content":"Return Value","pos":[1316,1328]},{"pos":[1332,1391],"content":"Nonzero if <ph id=\"ph1\">`Index`</ph> was set, or 0 if no set bits were found.","source":"Nonzero if `Index` was set, or 0 if no set bits were found."},{"content":"Requirements","pos":[1400,1412]},{"content":"Intrinsic","pos":[1419,1428]},{"content":"Architecture","pos":[1429,1441]},{"content":"Header","pos":[1442,1448]},{"pos":[1523,1532],"content":"x86, ARM,"},{"content":"intrin.h&gt;","pos":[1599,1608],"source":"intrin.h>"},{"pos":[1633,1637],"content":"ARM,"},{"content":"Example","pos":[1712,1719]},{"content":"Input","pos":[2330,2335]},{"content":"Sample Output","pos":[2364,2377]},{"content":"END Microsoft Specific","pos":[2463,2485]},{"content":"See Also","pos":[2494,2502]},{"content":"Compiler Intrinsics","pos":[2507,2526]}],"content":"---\ntitle: \"_BitScanReverse, _BitScanReverse64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_BitScanReverse64\"\n  - \"_BitScanReverse_cpp\"\n  - \"_BitScanReverse\"\n  - \"_BitScanReverse64_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"bsr instruction\"\n  - \"_BitScanReverse intrinsic\"\n  - \"BitScanReverse intrinsic\"\nms.assetid: 2520a207-af8b-4aad-9ae7-831abeadf376\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _BitScanReverse, _BitScanReverse64\n**Microsoft Specific**  \n  \n Search the mask data from most significant bit (MSB) to least significant bit (LSB) for a set bit (1).  \n  \n## Syntax  \n  \n```  \nunsigned char _BitScanReverse(  \n   unsigned long * Index,  \n   unsigned long Mask  \n);  \nunsigned char _BitScanReverse64(  \n   unsigned long * Index,  \n   unsigned __int64 Mask  \n);  \n```  \n  \n#### Parameters  \n [out] `Index`  \n Loaded with the bit position of the first set bit (1) found.  \n  \n [in] `Mask`  \n The 32-bit or 64-bit value to search.  \n  \n## Return Value  \n Nonzero if `Index` was set, or 0 if no set bits were found.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|Header|  \n|---------------|------------------|------------|  \n|`_BitScanReverse`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|\\<intrin.h>|  \n|`_BitScanReverse64`|ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]||  \n  \n## Example  \n  \n```  \n// BitScanReverse.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <intrin.h>  \nusing namespace std;  \n  \n#pragma intrinsic(_BitScanReverse)  \n  \nint main()  \n{  \n   unsigned long mask = 0x1000;  \n   unsigned long index;  \n   unsigned char isNonzero;  \n  \n   cout << \"Enter a positive integer as the mask: \" << flush;  \n   cin >> mask;  \n   isNonzero = _BitScanReverse(&index, mask);  \n   if (isNonzero)  \n   {  \n      cout << \"Mask: \" << mask << \" Index: \" << index << endl;  \n   }  \n   else  \n   {  \n      cout << \"No set bits found.  Mask is zero.\" << endl;  \n   }  \n}  \n```  \n  \n## Input  \n  \n```  \n12  \n```  \n  \n## Sample Output  \n  \n```  \nEnter a positive integer as the mask:   \nMask: 12 Index: 3  \n```  \n  \n### END Microsoft Specific  \n  \n## See Also  \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}