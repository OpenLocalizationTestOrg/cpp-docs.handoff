{"nodes":[{"pos":[12,48],"content":"2.4.1 for Construct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"2.4.1 for Construct | Microsoft Docs","pos":[0,36]}]},{"content":"2.4.1 for Construct","pos":[528,547]},{"content":"The <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> directive identifies an iterative work-sharing construct that specifies that the iterations of the associated loop will be executed in parallel.","pos":[548,704],"source":"The **for** directive identifies an iterative work-sharing construct that specifies that the iterations of the associated loop will be executed in parallel."},{"content":"The iterations of the <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop are distributed across threads that already exist in the team executing the parallel construct to which it binds.","pos":[705,853],"source":" The iterations of the **for** loop are distributed across threads that already exist in the team executing the parallel construct to which it binds."},{"content":"The syntax of the <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> construct is as follows:","pos":[854,904],"source":" The syntax of the **for** construct is as follows:"},{"content":"The clause is one of the following:","pos":[987,1022]},{"pos":[1029,1063],"content":"<bpt id=\"p1\">**</bpt>private(<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>variable-list<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**private(** *variable-list* **)**"},{"pos":[1070,1109],"content":"<bpt id=\"p1\">**</bpt>firstprivate(<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>variable-list<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**firstprivate(** *variable-list* **)**"},{"pos":[1116,1154],"content":"<bpt id=\"p1\">**</bpt>lastprivate(<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>variable-list<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**lastprivate(** *variable-list* **)**"},{"pos":[1161,1213],"content":"<bpt id=\"p1\">**</bpt>reduction(<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>operator<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>:<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>variable-list<ept id=\"p4\">*</ept><bpt id=\"p5\">**</bpt>)<ept id=\"p5\">**</ept>","source":"**reduction(** *operator* **:** *variable-list***)**"},{"content":"ordered","pos":[1222,1229]},{"pos":[1238,1279],"content":"<bpt id=\"p1\">**</bpt>schedule(<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>kind<ept id=\"p2\">*</ept>[, <bpt id=\"p3\">*</bpt>chunk_size<ept id=\"p3\">*</ept>]<bpt id=\"p4\">**</bpt>)<ept id=\"p4\">**</ept>","source":"**schedule(** *kind*[, *chunk_size*]**)**"},{"content":"nowait","pos":[1288,1294]},{"content":"The <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> directive places restrictions on the structure of the corresponding <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> loop.","pos":[1303,1396],"source":"The **for** directive places restrictions on the structure of the corresponding **for** loop."},{"content":"Specifically, the corresponding <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop must have canonical shape:","pos":[1397,1468],"source":" Specifically, the corresponding **for** loop must have canonical shape:"},{"pos":[1475,1541],"content":"<bpt id=\"p1\">**</bpt>for (<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>init-expr<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>;<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>var  logical-op  b<ept id=\"p4\">*</ept>; <bpt id=\"p5\">*</bpt>incr-expr<ept id=\"p5\">*</ept><bpt id=\"p6\">**</bpt>)<ept id=\"p6\">**</ept>","source":"**for (** *init-expr* **;** *var  logical-op  b*; *incr-expr***)**"},{"content":"init-expr","pos":[1549,1558]},{"content":"One of the following:","pos":[1563,1584]},{"pos":[1591,1603],"content":"<bpt id=\"p1\">*</bpt>var<ept id=\"p1\">*</ept><ph id=\"ph1\"> = </ph><bpt id=\"p2\">*</bpt>lb<ept id=\"p2\">*</ept>","source":"*var* = *lb*"},{"pos":[1610,1635],"content":"<bpt id=\"p1\">*</bpt>integer-type var<ept id=\"p1\">*</ept><ph id=\"ph1\"> = </ph><bpt id=\"p2\">*</bpt>lb<ept id=\"p2\">*</ept>","source":"*integer-type var* = *lb*"},{"content":"incr-expr","pos":[1643,1652]},{"content":"One of the following:","pos":[1657,1678]},{"pos":[1688,1691],"content":"var"},{"pos":[1700,1703],"content":"var"},{"pos":[1718,1721],"content":"var"},{"pos":[1730,1733],"content":"var"},{"pos":[1744,1759],"content":"<bpt id=\"p1\">*</bpt>var<ept id=\"p1\">*</ept><ph id=\"ph1\"> += </ph><bpt id=\"p2\">*</bpt>incr<ept id=\"p2\">*</ept>","source":"*var* += *incr*"},{"pos":[1766,1781],"content":"<bpt id=\"p1\">*</bpt>var<ept id=\"p1\">*</ept><ph id=\"ph1\"> -= </ph><bpt id=\"p2\">*</bpt>incr<ept id=\"p2\">*</ept>","source":"*var* -= *incr*"},{"pos":[1788,1810],"content":"<bpt id=\"p1\">*</bpt>var<ept id=\"p1\">*</ept><ph id=\"ph1\"> = </ph><bpt id=\"p2\">*</bpt>var<ept id=\"p2\">*</ept><ph id=\"ph2\"> + </ph><bpt id=\"p3\">*</bpt>incr<ept id=\"p3\">*</ept>","source":"*var* = *var* + *incr*"},{"pos":[1817,1839],"content":"<bpt id=\"p1\">*</bpt>var<ept id=\"p1\">*</ept><ph id=\"ph1\"> = </ph><bpt id=\"p2\">*</bpt>incr<ept id=\"p2\">*</ept><ph id=\"ph2\"> + </ph><bpt id=\"p3\">*</bpt>var<ept id=\"p3\">*</ept>","source":"*var* = *incr* + *var*"},{"pos":[1846,1868],"content":"<bpt id=\"p1\">*</bpt>var<ept id=\"p1\">*</ept><ph id=\"ph1\"> = </ph><bpt id=\"p2\">*</bpt>var<ept id=\"p2\">*</ept><ph id=\"ph2\"> - </ph><bpt id=\"p3\">*</bpt>incr<ept id=\"p3\">*</ept>","source":"*var* = *var* - *incr*"},{"content":"var","pos":[1876,1879]},{"content":"A signed integer variable.","pos":[1884,1910]},{"content":"If this variable would otherwise be shared, it is implicitly made private for the duration of the <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept>.","pos":[1911,2017],"source":" If this variable would otherwise be shared, it is implicitly made private for the duration of the **for**."},{"content":"This variable must not be modified within the body of the <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> statement.","pos":[2020,2096],"source":"   This variable must not be modified within the body of the **for** statement."},{"content":"Unless the variable is specified <bpt id=\"p1\">**</bpt>lastprivate<ept id=\"p1\">**</ept>, its value after the loop is indeterminate.","pos":[2097,2189],"source":" Unless the variable is specified **lastprivate**, its value after the loop is indeterminate."},{"content":"logical-op","pos":[2197,2207]},{"content":"One of the following:","pos":[2212,2233]},{"content":"<bpt id=\"p1\">*</bpt>lb<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>b<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>incr<ept id=\"p3\">*</ept>","pos":[2276,2297],"source":"*lb*, *b*, and *incr*"},{"content":"Loop invariant integer expressions.","pos":[2301,2336]},{"content":"There is no synchronization during the evaluation of these expressions.","pos":[2337,2408]},{"content":"Thus, any evaluated side effects produce indeterminate results.","pos":[2409,2472]},{"content":"Note that the canonical form allows the number of loop iterations to be computed on entry to the loop.","pos":[2479,2581]},{"content":"This computation is performed with values in the type of <bpt id=\"p1\">*</bpt>var<ept id=\"p1\">*</ept>, after integral promotions.","pos":[2582,2672],"source":" This computation is performed with values in the type of *var*, after integral promotions."},{"content":"In particular, if value of <bpt id=\"p1\">*</bpt>b<ept id=\"p1\">*</ept><ph id=\"ph1\"> - </ph><bpt id=\"p2\">*</bpt>lb<ept id=\"p2\">*</ept><ph id=\"ph2\"> + </ph><bpt id=\"p3\">*</bpt>incr<ept id=\"p3\">*</ept> cannot be represented in that type, the result is indeterminate.","pos":[2673,2784],"source":" In particular, if value of *b* - *lb* + *incr* cannot be represented in that type, the result is indeterminate."},{"content":"Further, if <bpt id=\"p1\">*</bpt>logical-op<ept id=\"p1\">*</ept> is &lt; or <ph id=\"ph1\">\\&lt;</ph>= then <bpt id=\"p2\">*</bpt>incr-expr<ept id=\"p2\">*</ept> must cause <bpt id=\"p3\">*</bpt>var<ept id=\"p3\">*</ept> to increase on each iteration of the loop.","pos":[2785,2898],"source":" Further, if *logical-op* is < or \\<= then *incr-expr* must cause *var* to increase on each iteration of the loop."},{"content":"If <bpt id=\"p1\">*</bpt>logical-op<ept id=\"p1\">*</ept> is &gt; or &gt;= then <bpt id=\"p2\">*</bpt>incr-expr<ept id=\"p2\">*</ept> must cause <bpt id=\"p3\">*</bpt>var<ept id=\"p3\">*</ept> to decrease on each iteration of the loop.","pos":[2901,3004],"source":"   If *logical-op* is > or >= then *incr-expr* must cause *var* to decrease on each iteration of the loop."},{"content":"The <bpt id=\"p1\">**</bpt>schedule<ept id=\"p1\">**</ept> clause specifies how iterations of the <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> loop are divided among threads of the team.","pos":[3011,3118],"source":"The **schedule** clause specifies how iterations of the **for** loop are divided among threads of the team."},{"content":"The correctness of a program must not depend on which thread executes a particular iteration.","pos":[3119,3212]},{"content":"The value of <bpt id=\"p1\">*</bpt>chunk_size<ept id=\"p1\">*</ept>, if specified, must be a loop invariant integer expression with a positive value.","pos":[3213,3320],"source":" The value of *chunk_size*, if specified, must be a loop invariant integer expression with a positive value."},{"content":"There is no synchronization during the evaluation of this expression.","pos":[3321,3390]},{"content":"Thus, any evaluated side effects produce indeterminate results.","pos":[3391,3454]},{"content":"The schedule <bpt id=\"p1\">*</bpt>kind<ept id=\"p1\">*</ept> can be one of the following:","pos":[3455,3503],"source":" The schedule *kind* can be one of the following:"},{"pos":[3510,3559],"content":"TABLE 2-1       <bpt id=\"p1\">**</bpt>schedule<ept id=\"p1\">**</ept> clause <bpt id=\"p2\">*</bpt>kind<ept id=\"p2\">*</ept> values","source":"TABLE 2-1       **schedule** clause *kind* values"},{"content":"static","pos":[3580,3586]},{"content":"When <bpt id=\"p1\">**</bpt>schedule(static,<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>chunk_size<ept id=\"p2\">*</ept><bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> is specified, iterations are divided into chunks of a size specified by <bpt id=\"p4\">*</bpt>chunk_size<ept id=\"p4\">*</ept>.","pos":[3587,3716],"source":"When **schedule(static,** *chunk_size***)** is specified, iterations are divided into chunks of a size specified by *chunk_size*."},{"content":"The chunks are statically assigned to threads in the team in a round-robin fashion in the order of the thread number.","pos":[3717,3834]},{"content":"When no <bpt id=\"p1\">*</bpt>chunk_size<ept id=\"p1\">*</ept> is specified, the iteration space is divided into chunks that are approximately equal in size, with one chunk assigned to each thread.","pos":[3835,3990],"source":" When no *chunk_size* is specified, the iteration space is divided into chunks that are approximately equal in size, with one chunk assigned to each thread."},{"content":"dynamic","pos":[3995,4002]},{"content":"When <bpt id=\"p1\">**</bpt>schedule(dynamic,<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>chunk_size<ept id=\"p2\">*</ept><bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> is specified, the iterations are divided into a series of chunks, each containing <bpt id=\"p4\">*</bpt>chunk_size<ept id=\"p4\">*</ept> iterations.","pos":[4003,4154],"source":"When **schedule(dynamic,** *chunk_size***)** is specified, the iterations are divided into a series of chunks, each containing *chunk_size* iterations."},{"content":"Each chunk is assigned to a thread that is waiting for an assignment.","pos":[4155,4224]},{"content":"The thread executes the chunk of iterations and then waits for its next assignment, until no chunks remain to be assigned.","pos":[4225,4347]},{"content":"Note that the last chunk to be assigned may have a smaller number of iterations.","pos":[4348,4428]},{"content":"When no <bpt id=\"p1\">*</bpt>chunk_size<ept id=\"p1\">*</ept> is specified, it defaults to 1.","pos":[4429,4481],"source":" When no *chunk_size* is specified, it defaults to 1."},{"content":"guided","pos":[4486,4492]},{"content":"When <bpt id=\"p1\">**</bpt>schedule(guided,<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>chunk_size<ept id=\"p2\">*</ept><bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> is specified, the iterations are assigned to threads in chunks with decreasing sizes.","pos":[4493,4622],"source":"When **schedule(guided,** *chunk_size***)** is specified, the iterations are assigned to threads in chunks with decreasing sizes."},{"content":"When a thread finishes its assigned chunk of iterations, it is dynamically assigned another chunk, until none remain.","pos":[4623,4740]},{"content":"For a <bpt id=\"p1\">*</bpt>chunk_size<ept id=\"p1\">*</ept> of 1, the size of each chunk is approximately the number of unassigned iterations divided by the number of threads.","pos":[4741,4875],"source":" For a *chunk_size* of 1, the size of each chunk is approximately the number of unassigned iterations divided by the number of threads."},{"content":"These sizes decrease approximately exponentially to 1.","pos":[4876,4930]},{"content":"For a <bpt id=\"p1\">*</bpt>chunk_size<ept id=\"p1\">*</ept> with value <bpt id=\"p2\">*</bpt>k<ept id=\"p2\">*</ept> greater than 1, the sizes decrease approximately exponentially to <bpt id=\"p3\">*</bpt>k<ept id=\"p3\">*</ept>, except that the last chunk may have fewer than <bpt id=\"p4\">*</bpt>k<ept id=\"p4\">*</ept> iterations.","pos":[4931,5098],"source":" For a *chunk_size* with value *k* greater than 1, the sizes decrease approximately exponentially to *k*, except that the last chunk may have fewer than *k* iterations."},{"content":"When no <bpt id=\"p1\">*</bpt>chunk_size<ept id=\"p1\">*</ept> is specified, it defaults to 1.","pos":[5099,5151],"source":" When no *chunk_size* is specified, it defaults to 1."},{"content":"runtime","pos":[5156,5163]},{"content":"When <bpt id=\"p1\">**</bpt>schedule(runtime)<ept id=\"p1\">**</ept> is specified, the decision regarding scheduling is deferred until runtime.","pos":[5164,5265],"source":"When **schedule(runtime)** is specified, the decision regarding scheduling is deferred until runtime."},{"content":"The schedule <bpt id=\"p1\">*</bpt>kind<ept id=\"p1\">*</ept> and size of the chunks can be chosen at run time by setting the environment variable <bpt id=\"p2\">**</bpt>OMP_SCHEDULE<ept id=\"p2\">**</ept>.","pos":[5266,5388],"source":" The schedule *kind* and size of the chunks can be chosen at run time by setting the environment variable **OMP_SCHEDULE**."},{"content":"If this environment variable is not set, the resulting schedule is implementation-defined.","pos":[5389,5479]},{"content":"When  <bpt id=\"p1\">**</bpt>schedule(runtime)<ept id=\"p1\">**</ept> is specified, <bpt id=\"p2\">*</bpt>chunk_size<ept id=\"p2\">*</ept> must not be specified.","pos":[5480,5557],"source":" When  **schedule(runtime)** is specified, *chunk_size* must not be specified."},{"pos":[5565,5677],"content":"In the absence of an explicitly defined <bpt id=\"p1\">**</bpt>schedule<ept id=\"p1\">**</ept> clause, the default <bpt id=\"p2\">**</bpt>schedule<ept id=\"p2\">**</ept> is implementation-defined.","source":"In the absence of an explicitly defined **schedule** clause, the default **schedule** is implementation-defined."},{"content":"An OpenMP-compliant program should not rely on a particular schedule for correct execution.","pos":[5684,5775]},{"content":"A program should not rely on a schedule <bpt id=\"p1\">*</bpt>kind<ept id=\"p1\">*</ept> conforming precisely to the description given above, because it is possible to have variations in the implementations of the same schedule <bpt id=\"p2\">*</bpt>kind<ept id=\"p2\">*</ept> across different compilers.","pos":[5776,5996],"source":" A program should not rely on a schedule *kind* conforming precisely to the description given above, because it is possible to have variations in the implementations of the same schedule *kind* across different compilers."},{"content":"The descriptions can be used to select the schedule that is appropriate for a particular situation.","pos":[5997,6096]},{"pos":[6103,6200],"content":"The <bpt id=\"p1\">**</bpt>ordered<ept id=\"p1\">**</ept> clause must be present when <bpt id=\"p2\">**</bpt>ordered<ept id=\"p2\">**</ept> directives bind to the <bpt id=\"p3\">**</bpt>for<ept id=\"p3\">**</ept> construct.","source":"The **ordered** clause must be present when **ordered** directives bind to the **for** construct."},{"pos":[6207,6310],"content":"There is an implicit barrier at the end of a <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> construct unless a <bpt id=\"p2\">**</bpt>nowait<ept id=\"p2\">**</ept> clause is specified.","source":"There is an implicit barrier at the end of a **for** construct unless a **nowait** clause is specified."},{"pos":[6317,6370],"content":"Restrictions to the <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> directive are as follows:","source":"Restrictions to the **for** directive are as follows:"},{"pos":[6380,6505],"content":"The <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop must be a structured block, and, in addition, its execution must not be terminated by a <bpt id=\"p2\">**</bpt>break<ept id=\"p2\">**</ept> statement.","source":"The **for** loop must be a structured block, and, in addition, its execution must not be terminated by a **break** statement."},{"pos":[6515,6663],"content":"The values of the loop control expressions of the <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop associated with a <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> directive must be the same for all the threads in the team.","source":"The values of the loop control expressions of the **for** loop associated with a **for** directive must be the same for all the threads in the team."},{"pos":[6673,6741],"content":"The <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop iteration variable must have a signed integer type.","source":"The **for** loop iteration variable must have a signed integer type."},{"pos":[6751,6819],"content":"Only a single <bpt id=\"p1\">**</bpt>schedule<ept id=\"p1\">**</ept> clause can appear on a <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> directive.","source":"Only a single **schedule** clause can appear on a **for** directive."},{"pos":[6829,6896],"content":"Only a single <bpt id=\"p1\">**</bpt>ordered<ept id=\"p1\">**</ept> clause can appear on a <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> directive.","source":"Only a single **ordered** clause can appear on a **for** directive."},{"pos":[6906,6972],"content":"Only a single <bpt id=\"p1\">**</bpt>nowait<ept id=\"p1\">**</ept> clause can appear on a <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> directive.","source":"Only a single **nowait** clause can appear on a **for** directive."},{"pos":[6982,7097],"content":"It is unspecified if or how often any side effects within the <bpt id=\"p1\">*</bpt>chunk_size<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>lb<ept id=\"p2\">*</ept>, <bpt id=\"p3\">*</bpt>b<ept id=\"p3\">*</ept>, or <bpt id=\"p4\">*</bpt>incr<ept id=\"p4\">*</ept> expressions occur.","source":"It is unspecified if or how often any side effects within the *chunk_size*, *lb*, *b*, or *incr* expressions occur."},{"pos":[7107,7193],"content":"The value of the <bpt id=\"p1\">*</bpt>chunk_size<ept id=\"p1\">*</ept> expression must be the same for all threads in the team.","source":"The value of the *chunk_size* expression must be the same for all threads in the team."},{"content":"Cross References:","pos":[7202,7219]},{"pos":[7229,7398],"content":"<bpt id=\"p1\">**</bpt>private<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>firstprivate<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>lastprivate<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>reduction<ept id=\"p4\">**</ept> clauses, see <bpt id=\"p5\">[</bpt>Section 2.7.2<ept id=\"p5\">](../../parallel/openmp/2-7-2-data-sharing-attribute-clauses.md)</ept> on page 25.","source":"**private**, **firstprivate**, **lastprivate**, and **reduction** clauses, see [Section 2.7.2](../../parallel/openmp/2-7-2-data-sharing-attribute-clauses.md) on page 25."},{"pos":[7408,7519],"content":"<bpt id=\"p1\">**</bpt>OMP_SCHEDULE<ept id=\"p1\">**</ept> environment variable, see <bpt id=\"p2\">[</bpt>Section 4.1<ept id=\"p2\">](../../parallel/openmp/4-1-omp-schedule.md)</ept> on page 48.","source":"**OMP_SCHEDULE** environment variable, see [Section 4.1](../../parallel/openmp/4-1-omp-schedule.md) on page 48."},{"pos":[7529,7633],"content":"<bpt id=\"p1\">**</bpt>ordered<ept id=\"p1\">**</ept> construct, see <bpt id=\"p2\">[</bpt>Section 2.6.6<ept id=\"p2\">](../../parallel/openmp/2-6-6-ordered-construct.md)</ept> on page 22.","source":"**ordered** construct, see [Section 2.6.6](../../parallel/openmp/2-6-6-ordered-construct.md) on page 22."},{"pos":[7643,7772],"content":"<bpt id=\"p1\">[</bpt>Appendix D<ept id=\"p1\">](../../parallel/openmp/d-using-the-schedule-clause.md)</ept>, page 93, gives more information on using the schedule clause.","source":"[Appendix D](../../parallel/openmp/d-using-the-schedule-clause.md), page 93, gives more information on using the schedule clause."}],"content":"---\ntitle: \"2.4.1 for Construct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 27d2cbce-786b-4819-91d3-d55b2cc57a5e\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# 2.4.1 for Construct\nThe **for** directive identifies an iterative work-sharing construct that specifies that the iterations of the associated loop will be executed in parallel. The iterations of the **for** loop are distributed across threads that already exist in the team executing the parallel construct to which it binds. The syntax of the **for** construct is as follows:  \n  \n```  \n#pragma omp for [clause[[,] clause] ... ] new-linefor-loop  \n```  \n  \n The clause is one of the following:  \n  \n **private(** *variable-list* **)**  \n  \n **firstprivate(** *variable-list* **)**  \n  \n **lastprivate(** *variable-list* **)**  \n  \n **reduction(** *operator* **:** *variable-list***)**  \n  \n **ordered**  \n  \n **schedule(** *kind*[, *chunk_size*]**)**  \n  \n **nowait**  \n  \n The **for** directive places restrictions on the structure of the corresponding **for** loop. Specifically, the corresponding **for** loop must have canonical shape:  \n  \n **for (** *init-expr* **;** *var  logical-op  b*; *incr-expr***)**  \n  \n *init-expr*  \n One of the following:  \n  \n *var* = *lb*  \n  \n *integer-type var* = *lb*  \n  \n *incr-expr*  \n One of the following:  \n  \n ++*var*  \n  \n *var* ++  \n  \n -- *var*  \n  \n *var* --  \n  \n *var* += *incr*  \n  \n *var* -= *incr*  \n  \n *var* = *var* + *incr*  \n  \n *var* = *incr* + *var*  \n  \n *var* = *var* - *incr*  \n  \n *var*  \n A signed integer variable. If this variable would otherwise be shared, it is implicitly made private for the duration of the **for**.   This variable must not be modified within the body of the **for** statement. Unless the variable is specified **lastprivate**, its value after the loop is indeterminate.  \n  \n *logical-op*  \n One of the following:  \n  \n <  \n  \n \\<=  \n  \n >  \n  \n \\>=  \n  \n *lb*, *b*, and *incr*  \n Loop invariant integer expressions. There is no synchronization during the evaluation of these expressions. Thus, any evaluated side effects produce indeterminate results.  \n  \n Note that the canonical form allows the number of loop iterations to be computed on entry to the loop. This computation is performed with values in the type of *var*, after integral promotions. In particular, if value of *b* - *lb* + *incr* cannot be represented in that type, the result is indeterminate. Further, if *logical-op* is < or \\<= then *incr-expr* must cause *var* to increase on each iteration of the loop.   If *logical-op* is > or >= then *incr-expr* must cause *var* to decrease on each iteration of the loop.  \n  \n The **schedule** clause specifies how iterations of the **for** loop are divided among threads of the team. The correctness of a program must not depend on which thread executes a particular iteration. The value of *chunk_size*, if specified, must be a loop invariant integer expression with a positive value. There is no synchronization during the evaluation of this expression. Thus, any evaluated side effects produce indeterminate results. The schedule *kind* can be one of the following:  \n  \n TABLE 2-1       **schedule** clause *kind* values  \n  \n|||  \n|-|-|  \n|static|When **schedule(static,** *chunk_size***)** is specified, iterations are divided into chunks of a size specified by *chunk_size*. The chunks are statically assigned to threads in the team in a round-robin fashion in the order of the thread number. When no *chunk_size* is specified, the iteration space is divided into chunks that are approximately equal in size, with one chunk assigned to each thread.|  \n|dynamic|When **schedule(dynamic,** *chunk_size***)** is specified, the iterations are divided into a series of chunks, each containing *chunk_size* iterations. Each chunk is assigned to a thread that is waiting for an assignment. The thread executes the chunk of iterations and then waits for its next assignment, until no chunks remain to be assigned. Note that the last chunk to be assigned may have a smaller number of iterations. When no *chunk_size* is specified, it defaults to 1.|  \n|guided|When **schedule(guided,** *chunk_size***)** is specified, the iterations are assigned to threads in chunks with decreasing sizes. When a thread finishes its assigned chunk of iterations, it is dynamically assigned another chunk, until none remain. For a *chunk_size* of 1, the size of each chunk is approximately the number of unassigned iterations divided by the number of threads. These sizes decrease approximately exponentially to 1. For a *chunk_size* with value *k* greater than 1, the sizes decrease approximately exponentially to *k*, except that the last chunk may have fewer than *k* iterations. When no *chunk_size* is specified, it defaults to 1.|  \n|runtime|When **schedule(runtime)** is specified, the decision regarding scheduling is deferred until runtime. The schedule *kind* and size of the chunks can be chosen at run time by setting the environment variable **OMP_SCHEDULE**. If this environment variable is not set, the resulting schedule is implementation-defined. When  **schedule(runtime)** is specified, *chunk_size* must not be specified.|  \n  \n In the absence of an explicitly defined **schedule** clause, the default **schedule** is implementation-defined.  \n  \n An OpenMP-compliant program should not rely on a particular schedule for correct execution. A program should not rely on a schedule *kind* conforming precisely to the description given above, because it is possible to have variations in the implementations of the same schedule *kind* across different compilers. The descriptions can be used to select the schedule that is appropriate for a particular situation.  \n  \n The **ordered** clause must be present when **ordered** directives bind to the **for** construct.  \n  \n There is an implicit barrier at the end of a **for** construct unless a **nowait** clause is specified.  \n  \n Restrictions to the **for** directive are as follows:  \n  \n-   The **for** loop must be a structured block, and, in addition, its execution must not be terminated by a **break** statement.  \n  \n-   The values of the loop control expressions of the **for** loop associated with a **for** directive must be the same for all the threads in the team.  \n  \n-   The **for** loop iteration variable must have a signed integer type.  \n  \n-   Only a single **schedule** clause can appear on a **for** directive.  \n  \n-   Only a single **ordered** clause can appear on a **for** directive.  \n  \n-   Only a single **nowait** clause can appear on a **for** directive.  \n  \n-   It is unspecified if or how often any side effects within the *chunk_size*, *lb*, *b*, or *incr* expressions occur.  \n  \n-   The value of the *chunk_size* expression must be the same for all threads in the team.  \n  \n## Cross References:  \n  \n-   **private**, **firstprivate**, **lastprivate**, and **reduction** clauses, see [Section 2.7.2](../../parallel/openmp/2-7-2-data-sharing-attribute-clauses.md) on page 25.  \n  \n-   **OMP_SCHEDULE** environment variable, see [Section 4.1](../../parallel/openmp/4-1-omp-schedule.md) on page 48.  \n  \n-   **ordered** construct, see [Section 2.6.6](../../parallel/openmp/2-6-6-ordered-construct.md) on page 22.  \n  \n-   [Appendix D](../../parallel/openmp/d-using-the-schedule-clause.md), page 93, gives more information on using the schedule clause."}