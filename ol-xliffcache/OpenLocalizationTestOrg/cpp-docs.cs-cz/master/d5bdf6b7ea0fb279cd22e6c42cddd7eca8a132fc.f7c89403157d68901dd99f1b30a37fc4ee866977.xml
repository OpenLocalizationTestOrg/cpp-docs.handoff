{"nodes":[{"pos":[12,46],"content":"Checked Iterators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Checked Iterators | Microsoft Docs","pos":[0,34]}]},{"pos":[751,768],"content":"Checked Iterators","linkify":"Checked Iterators","nodes":[{"content":"Checked Iterators","pos":[0,17]}]},{"content":"Checked iterators ensure that the bounds of your container are not overwritten.","pos":[769,848]},{"content":"Checked iterators apply to release builds and debug builds.","pos":[855,914]},{"content":"For more information about how to use iterators when you compile in debug mode, see <bpt id=\"p1\">[</bpt>Debug Iterator Support<ept id=\"p1\">](../standard-library/debug-iterator-support.md)</ept>.","pos":[915,1071],"source":" For more information about how to use iterators when you compile in debug mode, see [Debug Iterator Support](../standard-library/debug-iterator-support.md)."},{"pos":[1080,1087],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1091,1255],"content":"For information about how to disable warnings that are generated by checked iterators, see <bpt id=\"p1\">[</bpt>_SCL_SECURE_NO_WARNINGS<ept id=\"p1\">](../standard-library/scl-secure-no-warnings.md)</ept>.","source":"For information about how to disable warnings that are generated by checked iterators, see [_SCL_SECURE_NO_WARNINGS](../standard-library/scl-secure-no-warnings.md)."},{"content":"You can use the following symbol with the checked iterators feature.","pos":[1262,1330]},{"content":"If <ph id=\"ph1\">`_SECURE_SCL`</ph> is defined as 1, unsafe use of iterators causes a runtime error and the program is terminated.","pos":[1354,1465],"source":" If `_SECURE_SCL` is defined as 1, unsafe use of iterators causes a runtime error and the program is terminated."},{"content":"If defined as 0, checked iterators are disabled.","pos":[1466,1514]},{"content":"By default, the value for <ph id=\"ph1\">`_SECURE_SCL`</ph> is 0 for release builds and 1 for debug builds.","pos":[1515,1602],"source":" By default, the value for `_SECURE_SCL` is 0 for release builds and 1 for debug builds."},{"pos":[1610,1810],"content":"[!IMPORTANT]\n Use `_ITERATOR_DEBUG_LEVEL` to control [_SECURE_SCL](../standard-library/secure-scl.md). For more information, see [_ITERATOR_DEBUG_LEVEL](../standard-library/iterator-debug-level.md).","leadings":["","> "],"nodes":[{"content":" Use `_ITERATOR_DEBUG_LEVEL` to control [_SECURE_SCL](../standard-library/secure-scl.md). For more information, see [_ITERATOR_DEBUG_LEVEL](../standard-library/iterator-debug-level.md).","pos":[13,198],"nodes":[{"content":"Use <ph id=\"ph1\">`_ITERATOR_DEBUG_LEVEL`</ph> to control <bpt id=\"p1\">[</bpt>_SECURE_SCL<ept id=\"p1\">](../standard-library/secure-scl.md)</ept>.","pos":[1,89],"source":" Use `_ITERATOR_DEBUG_LEVEL` to control [_SECURE_SCL](../standard-library/secure-scl.md)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_ITERATOR_DEBUG_LEVEL<ept id=\"p1\">](../standard-library/iterator-debug-level.md)</ept>.","pos":[90,185],"source":" For more information, see [_ITERATOR_DEBUG_LEVEL](../standard-library/iterator-debug-level.md)."}]}]},{"pos":[1817,1888],"content":"When <ph id=\"ph1\">`_SECURE_SCL`</ph> is defined as 1, following SCL checks are performed:","source":"When `_SECURE_SCL` is defined as 1, following SCL checks are performed:"},{"pos":[1898,2021],"content":"All standard iterators (for example, <bpt id=\"p1\">[</bpt>vector::iterator<ept id=\"p1\">](../standard-library/vector-class.md#vector__iterator)</ept>) are checked.","source":"All standard iterators (for example, [vector::iterator](../standard-library/vector-class.md#vector__iterator)) are checked."},{"pos":[2031,2238],"content":"If an output iterator is a checked iterator you will get checked behavior on calls to the standard function (for example, <bpt id=\"p1\">[</bpt>std::copy<ept id=\"p1\">](http://msdn.microsoft.com/Library/f1fec7da-e01b-40f1-b5bd-6b81e304cae1)</ept>).","source":"If an output iterator is a checked iterator you will get checked behavior on calls to the standard function (for example, [std::copy](http://msdn.microsoft.com/Library/f1fec7da-e01b-40f1-b5bd-6b81e304cae1))."},{"content":"If the output iterator is an unchecked iterator calls to the standard function will cause compiler warnings.","pos":[2248,2356]},{"content":"The following functions will generate a runtime error if there is an access that is outside the bounds of the container:","pos":[2366,2486]},{"pos":[2513,2609],"content":"<bpt id=\"p1\">[</bpt>basic_string::operator<ept id=\"p1\">](http://msdn.microsoft.com/Library/1907e077-6848-40bb-a6f7-2f6ba6439ee9)</ept>","source":"[basic_string::operator](http://msdn.microsoft.com/Library/1907e077-6848-40bb-a6f7-2f6ba6439ee9)"},{"pos":[2610,2700],"content":"<bpt id=\"p1\">[</bpt>bitset::operator<ept id=\"p1\">](http://msdn.microsoft.com/Library/b3bc20eb-4a13-4f3e-bf6b-6c3bd6d7ae06)</ept>","source":"[bitset::operator](http://msdn.microsoft.com/Library/b3bc20eb-4a13-4f3e-bf6b-6c3bd6d7ae06)"},{"pos":[2701,2762],"content":"<bpt id=\"p1\">[</bpt>deque::back<ept id=\"p1\">](../standard-library/deque-class.md#deque__back)</ept>","source":"[deque::back](../standard-library/deque-class.md#deque__back)"},{"pos":[2763,2826],"content":"<bpt id=\"p1\">[</bpt>deque::front<ept id=\"p1\">](../standard-library/deque-class.md#deque__front)</ept>","source":"[deque::front](../standard-library/deque-class.md#deque__front)"},{"pos":[2831,2920],"content":"<bpt id=\"p1\">[</bpt>deque::operator<ept id=\"p1\">](http://msdn.microsoft.com/Library/49e561ef-f3e6-4bd5-8fd6-2ee6c3e55485)</ept>","source":"[deque::operator](http://msdn.microsoft.com/Library/49e561ef-f3e6-4bd5-8fd6-2ee6c3e55485)"},{"pos":[2921,2979],"content":"<bpt id=\"p1\">[</bpt>list::back<ept id=\"p1\">](../standard-library/list-class.md#list__back)</ept>","source":"[list::back](../standard-library/list-class.md#list__back)"},{"pos":[2980,3040],"content":"<bpt id=\"p1\">[</bpt>list::front<ept id=\"p1\">](../standard-library/list-class.md#list__front)</ept>","source":"[list::front](../standard-library/list-class.md#list__front)"},{"pos":[3041,3102],"content":"<bpt id=\"p1\">[</bpt>queue::back<ept id=\"p1\">](../standard-library/queue-class.md#queue__back)</ept>","source":"[queue::back](../standard-library/queue-class.md#queue__back)"},{"pos":[3107,3170],"content":"<bpt id=\"p1\">[</bpt>queue::front<ept id=\"p1\">](../standard-library/queue-class.md#queue__front)</ept>","source":"[queue::front](../standard-library/queue-class.md#queue__front)"},{"pos":[3171,3261],"content":"<bpt id=\"p1\">[</bpt>vector::operator<ept id=\"p1\">](http://msdn.microsoft.com/Library/9f19d479-152d-40c6-aab8-d7e5b62a41ed)</ept>","source":"[vector::operator](http://msdn.microsoft.com/Library/9f19d479-152d-40c6-aab8-d7e5b62a41ed)"},{"pos":[3262,3326],"content":"<bpt id=\"p1\">[</bpt>vector::back<ept id=\"p1\">](../standard-library/vector-class.md#vector__back)</ept>","source":"[vector::back](../standard-library/vector-class.md#vector__back)"},{"pos":[3327,3393],"content":"<bpt id=\"p1\">[</bpt>vector::front<ept id=\"p1\">](../standard-library/vector-class.md#vector__front)</ept>","source":"[vector::front](../standard-library/vector-class.md#vector__front)"},{"pos":[3401,3436],"content":"When <ph id=\"ph1\">`_SECURE_SCL`</ph> is defined as 0:","source":"When `_SECURE_SCL` is defined as 0:"},{"content":"All standard iterators are unchecked (iterators can move beyond the container boundaries, which leads to undefined behavior).","pos":[3446,3571]},{"pos":[3581,3716],"content":"If an output iterator is a checked iterator you will get checked behavior on calls to the standard function (for example, <ph id=\"ph1\">`std::copy`</ph>).","source":"If an output iterator is a checked iterator you will get checked behavior on calls to the standard function (for example, `std::copy`)."},{"pos":[3726,3866],"content":"If an output iterator is an unchecked iterator you will get unchecked behavior on calls to the standard function (for example, <ph id=\"ph1\">`std::copy`</ph>).","source":"If an output iterator is an unchecked iterator you will get unchecked behavior on calls to the standard function (for example, `std::copy`)."},{"content":"A checked iterator refers to an iterator that will call <ph id=\"ph1\">`invalid_parameter_handler`</ph> if you attempt to move past the boundaries of the container.","pos":[3873,4017],"source":"A checked iterator refers to an iterator that will call `invalid_parameter_handler` if you attempt to move past the boundaries of the container."},{"content":"For more information about <ph id=\"ph1\">`invalid_parameter_handler`</ph>, see <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../c-runtime-library/parameter-validation.md)</ept>.","pos":[4018,4147],"source":" For more information about `invalid_parameter_handler`, see [Parameter Validation](../c-runtime-library/parameter-validation.md)."},{"pos":[4154,4387],"content":"<bpt id=\"p1\">[</bpt>checked_array_iterator Class<ept id=\"p1\">](../standard-library/checked-array-iterator-class.md)</ept> and <bpt id=\"p2\">[</bpt>unchecked_array_iterator Class<ept id=\"p2\">](../standard-library/unchecked-array-iterator-class.md)</ept> are the iterator adaptors that support checked iterators.","source":"[checked_array_iterator Class](../standard-library/checked-array-iterator-class.md) and [unchecked_array_iterator Class](../standard-library/unchecked-array-iterator-class.md) are the iterator adaptors that support checked iterators."},{"pos":[4396,4403],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4407,4607],"content":"When you compile by using <ph id=\"ph1\">`_SECURE_SCL 1`</ph>, a runtime error will occur if you attempt to access an element that is outside the bounds of the container by using the indexing operator of certain classes.","source":"When you compile by using `_SECURE_SCL 1`, a runtime error will occur if you attempt to access an element that is outside the bounds of the container by using the indexing operator of certain classes."},{"content":"This program will print out \"67\" then pop an assertion failure dialog box with additional information about the failure.","pos":[4960,5080]},{"pos":[5089,5096],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5100,5288],"content":"Similarly, when you compile by using <ph id=\"ph1\">`_SECURE_SCL 1`</ph>, a runtime error will occur if you attempt to access an element by using front or back of certain classes, when the container is empty.","source":"Similarly, when you compile by using `_SECURE_SCL 1`, a runtime error will occur if you attempt to access an element by using front or back of certain classes, when the container is empty."},{"content":"This program will pop up an assertion failure dialog box with additional information about the failure.","pos":[5598,5701]},{"content":"The following code demonstrates various iterator use-case scenarios with comments about each.","pos":[5708,5801]},{"pos":[8257,8263],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[8267,8438],"content":"Compiling the code shown in the previous section with <ph id=\"ph1\">`cl.exe /EHsc /W4 /MTd`</ph> will result in the following compiler warning, but compiles without error into an executable:","source":"Compiling the code shown in the previous section with `cl.exe /EHsc /W4 /MTd` will result in the following compiler warning, but compiles without error into an executable:"},{"content":"Running the console app executable results in the following output:","pos":[8764,8831]},{"pos":[9260,9268],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>STL Overview<ept id=\"p1\">](../standard-library/cpp-standard-library-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[9272,9341],"source":"[STL Overview](../standard-library/cpp-standard-library-overview.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Debug Iterator Support<ept id=\"p1\">](../standard-library/debug-iterator-support.md)</ept>","pos":[9344,9416],"source":" [Debug Iterator Support](../standard-library/debug-iterator-support.md)"}],"content":"---\ntitle: \"Checked Iterators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_SECURE_SCL\"\n  - \"_SECURE_SCL_THROWS\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Safe Libraries\"\n  - \"Safe Libraries, Standard C++ Library\"\n  - \"Safe Standard C++ Library\"\n  - \"iterators, checked\"\n  - \"checked iterators\"\nms.assetid: cfc87df8-e3d9-403b-ab78-e9483247d940\ncaps.latest.revision: 30\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Checked Iterators\nChecked iterators ensure that the bounds of your container are not overwritten.  \n  \n Checked iterators apply to release builds and debug builds. For more information about how to use iterators when you compile in debug mode, see [Debug Iterator Support](../standard-library/debug-iterator-support.md).  \n  \n## Remarks  \n For information about how to disable warnings that are generated by checked iterators, see [_SCL_SECURE_NO_WARNINGS](../standard-library/scl-secure-no-warnings.md).  \n  \n You can use the following symbol with the checked iterators feature.  \n  \n `_SECURE_SCL`  \n If `_SECURE_SCL` is defined as 1, unsafe use of iterators causes a runtime error and the program is terminated. If defined as 0, checked iterators are disabled. By default, the value for `_SECURE_SCL` is 0 for release builds and 1 for debug builds.  \n  \n> [!IMPORTANT]\n>  Use `_ITERATOR_DEBUG_LEVEL` to control [_SECURE_SCL](../standard-library/secure-scl.md). For more information, see [_ITERATOR_DEBUG_LEVEL](../standard-library/iterator-debug-level.md).  \n  \n When `_SECURE_SCL` is defined as 1, following SCL checks are performed:  \n  \n-   All standard iterators (for example, [vector::iterator](../standard-library/vector-class.md#vector__iterator)) are checked.  \n  \n-   If an output iterator is a checked iterator you will get checked behavior on calls to the standard function (for example, [std::copy](http://msdn.microsoft.com/Library/f1fec7da-e01b-40f1-b5bd-6b81e304cae1)).  \n  \n-   If the output iterator is an unchecked iterator calls to the standard function will cause compiler warnings.  \n  \n-   The following functions will generate a runtime error if there is an access that is outside the bounds of the container:  \n  \n|||||  \n|-|-|-|-|  \n|[basic_string::operator](http://msdn.microsoft.com/Library/1907e077-6848-40bb-a6f7-2f6ba6439ee9)|[bitset::operator](http://msdn.microsoft.com/Library/b3bc20eb-4a13-4f3e-bf6b-6c3bd6d7ae06)|[deque::back](../standard-library/deque-class.md#deque__back)|[deque::front](../standard-library/deque-class.md#deque__front)|  \n|[deque::operator](http://msdn.microsoft.com/Library/49e561ef-f3e6-4bd5-8fd6-2ee6c3e55485)|[list::back](../standard-library/list-class.md#list__back)|[list::front](../standard-library/list-class.md#list__front)|[queue::back](../standard-library/queue-class.md#queue__back)|  \n|[queue::front](../standard-library/queue-class.md#queue__front)|[vector::operator](http://msdn.microsoft.com/Library/9f19d479-152d-40c6-aab8-d7e5b62a41ed)|[vector::back](../standard-library/vector-class.md#vector__back)|[vector::front](../standard-library/vector-class.md#vector__front)|  \n  \n When `_SECURE_SCL` is defined as 0:  \n  \n-   All standard iterators are unchecked (iterators can move beyond the container boundaries, which leads to undefined behavior).  \n  \n-   If an output iterator is a checked iterator you will get checked behavior on calls to the standard function (for example, `std::copy`).  \n  \n-   If an output iterator is an unchecked iterator you will get unchecked behavior on calls to the standard function (for example, `std::copy`).  \n  \n A checked iterator refers to an iterator that will call `invalid_parameter_handler` if you attempt to move past the boundaries of the container. For more information about `invalid_parameter_handler`, see [Parameter Validation](../c-runtime-library/parameter-validation.md).  \n  \n [checked_array_iterator Class](../standard-library/checked-array-iterator-class.md) and [unchecked_array_iterator Class](../standard-library/unchecked-array-iterator-class.md) are the iterator adaptors that support checked iterators.  \n  \n## Example  \n When you compile by using `_SECURE_SCL 1`, a runtime error will occur if you attempt to access an element that is outside the bounds of the container by using the indexing operator of certain classes.  \n  \n```cpp  \n//checked_iterators_1.cpp  \n//cl.exe/Zi/MDd/EHsc/W4  \n  \n#define_ITERATOR_DEBUG_LEVEL1  \n//implies#define_SECURE_SCL1  \n  \n#include<vector>  \n#include<iostream>  \n  \nusingnamespacestd;  \n  \nintmain()  \n{  \nvector<int>v;  \nv.push_back(67);  \n  \ninti=v[0];  \ncout<<i<<endl;  \n  \ni=v[1];//triggersinvalidparameterhandler  \n};  \n  \n```  \n  \n This program will print out \"67\" then pop an assertion failure dialog box with additional information about the failure.  \n  \n## Example  \n Similarly, when you compile by using `_SECURE_SCL 1`, a runtime error will occur if you attempt to access an element by using front or back of certain classes, when the container is empty.  \n  \n```cpp  \n//checked_iterators_2.cpp  \n//cl.exe/Zi/MDd/EHsc/W4  \n  \n#define_ITERATOR_DEBUG_LEVEL1  \n//implies#define_SECURE_SCL1  \n  \n#include<vector>  \n#include<iostream>  \n  \nusingnamespacestd;  \n  \nintmain()  \n{  \nvector<int>v;  \n  \nint&i=v.front();//triggersinvalidparameterhandler  \n};  \n  \n```  \n  \n This program will pop up an assertion failure dialog box with additional information about the failure.  \n  \n The following code demonstrates various iterator use-case scenarios with comments about each.  \n  \n```cpp  \n//cl.exe/MTd/EHsc/W4  \n#include <algorithm>  \n#include <array>  \n#include <iostream>  \n#include <iterator>  \n#include <numeric>  \n#include <string>  \n#include <vector>  \n  \nusing namespace std;  \n  \ntemplate <typename C> void print(const string& s, const C& c) {  \n    cout << s;  \n  \n    for (const auto& e : c) {  \n        cout << e << \" \";  \n    }  \n  \n    cout << endl;  \n}  \n  \nint main()  \n{  \n    vector<int> v(16);  \n    iota(v.begin(), v.end(), 0);  \n    print(\"v: \", v);  \n  \n    // OK: vector::iterator is checked in debug mode  \n    // (i.e. an overrun will trigger a debug assertion)  \n    vector<int> v2(16);  \n    transform(v.begin(), v.end(), v2.begin(), [](int n) { return n * 2; });  \n    print(\"v2: \", v2);  \n  \n    // OK: back_insert_iterator is marked as checked in debug mode  \n    // (i.e. an overrun is impossible)  \n    vector<int> v3;  \n    transform(v.begin(), v.end(), back_inserter(v3), [](int n) { return n * 3; });  \n    print(\"v3: \", v3);  \n  \n    // OK: array::iterator is checked in debug mode  \n    // (i.e. an overrun will trigger a debug assertion)  \n    array<int, 16> a4;  \n    transform(v.begin(), v.end(), a4.begin(), [](int n) { return n * 4; });  \n    print(\"a4: \", a4);  \n  \n    // OK: Raw arrays are checked in debug mode  \n    // (an overrun will trigger a debug assertion)  \n    // NOTE: This applies only when raw arrays are given to STL algorithms!  \n    int a5[16];  \n    transform(v.begin(), v.end(), a5, [](int n) { return n * 5; });  \n    print(\"a5: \", a5);  \n  \n    // WARNING C4996: Pointers cannot be checked in debug mode  \n    // (an overrun will trigger undefined behavior)  \n    int a6[16];  \n    int * p6 = a6;  \n    transform(v.begin(), v.end(), p6, [](int n) { return n * 6; });  \n    print(\"a6: \", a6);  \n  \n    // OK: stdext::checked_array_iterator is checked in debug mode  \n    // (an overrun will trigger a debug assertion)  \n    int a7[16];  \n    int * p7 = a7;  \n    transform(v.begin(), v.end(), stdext::make_checked_array_iterator(p7, 16), [](int n) { return n * 7; });  \n    print(\"a7: \", a7);  \n  \n    // WARNING SILENCED: stdext::unchecked_array_iterator is marked as checked in debug mode  \n    // (it performs no checking, so an overrun will trigger undefined behavior)  \n    int a8[16];  \n    int * p8 = a8;  \n    transform(v.begin(), v.end(), stdext::make_unchecked_array_iterator(p8), [](int n) { return n * 8; });  \n    print(\"a8: \", a8);  \n}  \n  \n```  \n  \n## Output  \n Compiling the code shown in the previous section with `cl.exe /EHsc /W4 /MTd` will result in the following compiler warning, but compiles without error into an executable:  \n  \n```  \nalgorithm(1026) : warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call rel  \nies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'  \n```  \n  \n Running the console app executable results in the following output:  \n  \n```  \nv: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \nv2: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30  \nv3: 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45  \na4: 0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60  \na5: 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75  \na6: 0 6 12 18 24 30 36 42 48 54 60 66 72 78 84 90  \na7: 0 7 14 21 28 35 42 49 56 63 70 77 84 91 98 105  \na8: 0 8 16 24 32 40 48 56 64 72 80 88 96 104 112 120  \n```  \n  \n## See Also  \n [STL Overview](../standard-library/cpp-standard-library-overview.md)   \n [Debug Iterator Support](../standard-library/debug-iterator-support.md)\n\n"}