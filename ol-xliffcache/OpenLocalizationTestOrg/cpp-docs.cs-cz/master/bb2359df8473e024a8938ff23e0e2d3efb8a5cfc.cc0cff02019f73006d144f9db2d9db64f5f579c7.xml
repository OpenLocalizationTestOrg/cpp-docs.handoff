{"nodes":[{"pos":[12,65],"content":"priority_queue::value_comp (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"priority_queue::value_comp (STL-CLR) | Microsoft Docs","pos":[0,53]}]},{"content":"priority_queue::value_comp (STL/CLR)","pos":[659,695]},{"content":"Copies the ordering delegate for two elements.","pos":[696,742]},{"content":"Syntax","pos":[751,757]},{"content":"Remarks","pos":[812,819]},{"content":"The member function returns the ordering delegate used to order the controlled sequence.","pos":[823,911]},{"content":"You use it to compare two values.","pos":[912,945]},{"content":"Example","pos":[954,961]},{"content":"Requirements","pos":[2228,2240]},{"pos":[2244,2271],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/queue&gt;","source":"**Header:** \\<cliext/queue>"},{"pos":[2278,2299],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2308,2316]},{"content":"priority_queue (STL/CLR)","pos":[2321,2345]},{"content":"priority_queue::value_compare (STL/CLR)","pos":[2389,2428]},{"content":"priority_queue::value_type (STL/CLR)","pos":[2486,2522]}],"content":"---\ntitle: \"priority_queue::value_comp (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::priority_queue::value_comp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"value_comp member [STL/CLR]\"\nms.assetid: af28e541-087d-4837-9ff0-cd36d4cfc57a\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# priority_queue::value_comp (STL/CLR)\nCopies the ordering delegate for two elements.  \n  \n## Syntax  \n  \n```  \nvalue_compare^ value_comp();  \n```  \n  \n## Remarks  \n The member function returns the ordering delegate used to order the controlled sequence. You use it to compare two values.  \n  \n## Example  \n  \n```  \n// cliext_priority_queue_value_comp.cpp   \n// compile with: /clr   \n#include <cliext/queue>   \n  \ntypedef cliext::priority_queue<wchar_t> Mypriority_queue;   \nint main()   \n    {   \n    Mypriority_queue c1;   \n    Mypriority_queue::value_compare^ vcomp = c1.value_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        vcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        vcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        vcomp(L'b', L'a'));   \n    System::Console::WriteLine();   \n  \n// test a different ordering rule   \n    Mypriority_queue c2 = cliext::greater<wchar_t>();   \n    vcomp = c2.value_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        vcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        vcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        vcomp(L'b', L'a'));   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ncompare(L'a', L'a') = False  \ncompare(L'a', L'b') = True  \ncompare(L'b', L'a') = False  \n  \ncompare(L'a', L'a') = False  \ncompare(L'a', L'b') = False  \ncompare(L'b', L'a') = True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/queue>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [priority_queue (STL/CLR)](../dotnet/priority-queue-stl-clr.md)   \n [priority_queue::value_compare (STL/CLR)](../dotnet/priority-queue-value-compare-stl-clr.md)   \n [priority_queue::value_type (STL/CLR)](../dotnet/priority-queue-value-type-stl-clr.md)"}