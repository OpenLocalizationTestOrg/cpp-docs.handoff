<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">42e984c32d5621d4cb748969fe1be2f1d1056e22</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\mfc-activex-controls-using-fonts.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e8c3fdf00cf0dd1b73cd8d4df6fcfdfbf99582a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfcc5976194ec8126cdbe6dc24fde8e99a718b07</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Using Fonts | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Using Fonts</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If your ActiveX control displays text, you can allow the control user to change the text appearance by changing a font property.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Font properties are implemented as font objects and can be one of two types: stock or custom.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Stock Font properties are preimplemented font properties that you can add using the Add Property Wizard.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Custom Font properties are not preimplemented and the control developer determines the property's behavior and usage.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article covers the following topics:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using the Stock Font property</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using Custom Font Properties in Your Control</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using the Stock Font Property</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Stock Font properties are preimplemented by the class <bpt id="p1">[</bpt>COleControl<ept id="p1">](../mfc/reference/colecontrol-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In addition, a standard Font property page is also available, allowing the user to change various attributes of the font object, such as its name, size, and style.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Access the font object through the <bpt id="p1">[</bpt>GetFont<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__getfont)</ept>, <bpt id="p2">[</bpt>SetFont<ept id="p2">](../mfc/reference/colecontrol-class.md#colecontrol__setfont)</ept>, and <bpt id="p3">[</bpt>InternalGetFont<ept id="p3">](../mfc/reference/colecontrol-class.md#colecontrol__internalgetfont)</ept> functions of <ph id="ph1">`COleControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The control user will access the font object via the <ph id="ph1">`GetFont`</ph> and <ph id="ph2">`SetFont`</ph> functions in the same manner as any other Get/Set property.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When access to the font object is required from within a control, use the <ph id="ph1">`InternalGetFont`</ph> function.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>As discussed in <bpt id="p1">[</bpt>MFC ActiveX Controls: Properties<ept id="p1">](../mfc/mfc-activex-controls-properties.md)</ept>, adding stock properties is easy with the <bpt id="p2">[</bpt>Add Property Wizard<ept id="p2">](../ide/names-add-property-wizard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You choose the Font property, and the Add Property Wizard automatically inserts the stock Font entry into the control's dispatch map.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To add the stock Font property using the Add Property Wizard</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Load your control's project.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In Class View, expand the library node of your control.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Right-click the interface node for your control (the second node of the library node) to open the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>From the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and then click <bpt id="p2">**</bpt>Add Property<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This opens the Add Property Wizard.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Name<ept id="p1">**</ept> box, click <bpt id="p2">**</bpt>Font<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The Add Property Wizard adds the following line to the control's dispatch map, located in the control class implementation file:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#1</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In addition, the Add Property Wizard adds the following line to the control .IDL file:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#2</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The stock Caption property is an example of a text property that can be drawn using the stock Font property information.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Adding the stock Caption property to the control uses steps similar to those used for the stock Font property.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To add the stock Caption property using the Add Property Wizard</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Load your control's project.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In Class View, expand the library node of your control.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Right-click the interface node for your control (the second node of the library node) to open the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>From the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and then click <bpt id="p2">**</bpt>Add Property<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This opens the Add Property Wizard.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Name<ept id="p1">**</ept> box, click <bpt id="p2">**</bpt>Caption<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The Add Property Wizard adds the following line to the control's dispatch map, located in the control class implementation file:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#3</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Modifying the OnDraw Function</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">`OnDraw`</ph> uses the Windows system font for all text displayed in the control.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This means that you must modify the <ph id="ph1">`OnDraw`</ph> code by selecting the font object into the device context.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To do this, call <bpt id="p1">[</bpt>COleControl::SelectStockFont<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__selectstockfont)</ept> and pass the control's device context, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#4</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`OnDraw`</ph> function has been modified to use the font object, any text within the control is displayed with characteristics from the control's stock Font property.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Using Custom Font Properties in Your Control</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In addition to the stock Font property, the ActiveX control can have custom Font properties.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To add a custom font property you must:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Use the Add Property Wizard to implement the custom Font property.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Processing font notifications<ept id="p1">](#_core_processing_font_notifications)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing a new font notification interface<ept id="p1">](#_core_implementing_a_new_font_notification_interface)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Implementing a Custom Font Property</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To implement a custom Font property, you use the Add Property Wizard to add the property and then make some modifications to the code.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following sections describe how to add the custom <ph id="ph1">`HeadingFont`</ph> property to the Sample control.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To add the custom Font property using the Add Property Wizard</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Load your control's project.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In Class View, expand the library node of your control.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Right-click the interface node for your control (the second node of the library node) to open the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>From the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and then click <bpt id="p2">**</bpt>Add Property<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This opens the Add Property Wizard.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Name<ept id="p1">**</ept> box, type a name for the property.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For this example, use <bpt id="p1">**</bpt>HeadingFont<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Implementation Type<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Get/Set Methods<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Type<ept id="p1">**</ept> box, select <bpt id="p2">**</bpt>IDispatch<ph id="ph1">\*</ph><ept id="p2">**</ept> for the property's type.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The Add Property Wizard creates the code to add the <ph id="ph1">`HeadingFont`</ph> custom property to the <ph id="ph2">`CSampleCtrl`</ph> class and the SAMPLE.IDL file.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`HeadingFont`</ph> is a Get/Set property type, the Add Property Wizard modifies the <ph id="ph2">`CSampleCtrl`</ph> class's dispatch map to include a <ph id="ph3">`DISP_PROPERTY_EX_ID`</ph><bpt id="p1">[</bpt>DISP_PROPERTY_EX<ept id="p1">](../mfc/reference/dispatch-maps.md#disp_property_ex)</ept> macro entry:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#5</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DISP_PROPERTY_EX`</ph> macro associates the <ph id="ph2">`HeadingFont`</ph> property name with its corresponding <ph id="ph3">`CSampleCtrl`</ph> class Get and Set methods, <ph id="ph4">`GetHeadingFont`</ph> and <ph id="ph5">`SetHeadingFont`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The type of the property value is also specified; in this case, <bpt id="p1">**</bpt>VT_FONT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The Add Property Wizard also adds a declaration in the control header file (.H) for the <ph id="ph1">`GetHeadingFont`</ph> and <ph id="ph2">`SetHeadingFont`</ph> functions and adds their function templates in the control implementation file (.CPP):</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#6</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Finally, the Add Property Wizard modifies the control .IDL file by adding an entry for the <ph id="ph1">`HeadingFont`</ph> property:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#7</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Modifications to the Control Code</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Now that you have added the <ph id="ph1">`HeadingFont`</ph> property to the control, you must make some changes to the control header and implementation files to fully support the new property.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In the control header file (.H), add the following declaration of a protected member variable:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#8</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the control implementation file (.CPP), do the following:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Initialize <ph id="ph1">`m_fontHeading`</ph> in the control constructor.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#9</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Declare a static <bpt id="p1">**</bpt>FONTDESC<ept id="p1">**</ept> structure containing default attributes of the font.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#10</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In the control <ph id="ph1">`DoPropExchange`</ph> member function, add a call to the <ph id="ph2">`PX_Font`</ph> function.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This provides initialization and persistence for your custom Font property.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#11</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Finish implementing the control <ph id="ph1">`GetHeadingFont`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#12</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Finish implementing the control <ph id="ph1">`SetHeadingFont`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#13</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Modify the control <ph id="ph1">`OnDraw`</ph> member function to define a variable to hold the previously selected font.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#14</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Modify the control <ph id="ph1">`OnDraw`</ph> member function to select the custom font into the device context by adding the following line wherever the font is to be used.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#15</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Modify the control <ph id="ph1">`OnDraw`</ph> member function to select the previous font back into the device context by adding the following line after the font has been used.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#16</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>After the custom Font property has been implemented, the standard Font property page should be implemented, allowing control users to change the control's current font.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>To add the property page ID for the standard Font property page, insert the following line after the <ph id="ph1">`BEGIN_PROPPAGEIDS`</ph> macro:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#17</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You must also increment the count parameter of your <ph id="ph1">`BEGIN_PROPPAGEIDS`</ph> macro by one.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The following line illustrates this:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#18</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>After these changes have been made, rebuild the entire project to incorporate the additional functionality.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Processing Font Notifications</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In most cases the control needs to know when the characteristics of the font object have been modified.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Each font object is capable of providing notifications when it changes by calling a member function of the <bpt id="p1">**</bpt>IFontNotification<ept id="p1">**</ept> interface, implemented by <ph id="ph1">`COleControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If the control uses the stock Font property, its notifications are handled by the <ph id="ph1">`OnFontChanged`</ph> member function of <ph id="ph2">`COleControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When you add custom font properties, you can have them use the same implementation.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In the example in the previous section, this was accomplished by passing &amp;<bpt id="p1">**</bpt>m_xFontNotification<ept id="p1">**</ept> when initializing the <bpt id="p2">**</bpt>m_fontHeading<ept id="p2">**</ept> member variable.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Implementing multiple font object interfaces</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Implementing Multiple Font Object Interfaces</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The solid lines in the figure above show that both font objects are using the same implementation of <bpt id="p1">**</bpt>IFontNotification<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This could cause problems if you wanted to distinguish which font changed.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>One way to distinguish between the control's font object notifications is to create a separate implementation of the <bpt id="p1">**</bpt>IFontNotification<ept id="p1">**</ept> interface for each font object in the control.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This technique allows you to optimize your drawing code by updating only the string, or strings, that use the recently modified font.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following sections demonstrate the steps necessary to implement separate notification interfaces for a second Font property.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The second font property is assumed to be the <ph id="ph1">`HeadingFont`</ph> property that was added in the previous section.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Implementing a New Font Notification Interface</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>To distinguish between the notifications of two or more fonts, a new notification interface must be implemented for each font used in the control.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following sections describe how to implement a new font notification interface by modifying the control header and implementation files.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Additions to the Header File</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In the control header file (.H), add the following lines to the class declaration:</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#19</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This creates an implementation of the <ph id="ph1">`IPropertyNotifySink`</ph> interface called <ph id="ph2">`HeadingFontNotify`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This new interface contains a method called <ph id="ph1">`OnChanged`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Additions to the Implementation File</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>In the code that initializes the heading font (in the control constructor), change <ph id="ph1">`&amp;m_xFontNotification`</ph> to <ph id="ph2">`&amp;m_xHeadingFontNotify`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Then add the following code:</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxFont#20</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddRef`</ph> and <ph id="ph2">`Release`</ph> methods in the <ph id="ph3">`IPropertyNotifySink`</ph> interface keep track of the reference count for the ActiveX control object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>When the control obtains access to interface pointer, the control calls <ph id="ph1">`AddRef`</ph> to increment the reference count.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>When the control is finished with the pointer, it calls <ph id="ph1">`Release`</ph>, in much the same way that <bpt id="p1">**</bpt>GlobalFree<ept id="p1">**</ept> might be called to free a global memory block.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>When the reference count for this interface goes to zero, the interface implementation can be freed.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`QueryInterface`</ph> function returns a pointer to a <ph id="ph2">`IPropertyNotifySink`</ph> interface on a particular object.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This function allows an ActiveX control to query an object to determine what interfaces it supports.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>After these changes have been made to your project, rebuild the project and use Test Container to test the interface.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Testing Properties and Events with Test Container<ept id="p1">](../mfc/testing-properties-and-events-with-test-container.md)</ept> for information on how to access the test container.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Using Pictures in an ActiveX Control</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Using Stock Property Pages</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>