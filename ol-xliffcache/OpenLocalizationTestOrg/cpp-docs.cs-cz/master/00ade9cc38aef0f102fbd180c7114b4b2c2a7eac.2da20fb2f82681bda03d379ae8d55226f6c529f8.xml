{"nodes":[{"pos":[12,51],"content":"CDebugReportHook Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDebugReportHook Class | Microsoft Docs","pos":[0,39]}]},{"content":"CDebugReportHook Class","pos":[677,699]},{"content":"Use this class to send debug reports to a named pipe.","pos":[700,753]},{"content":"Syntax","pos":[762,768]},{"content":"Members","pos":[813,820]},{"content":"Public Constructors","pos":[830,849]},{"content":"Name","pos":[856,860]},{"content":"Description","pos":[861,872]},{"content":"CDebugReportHook::CDebugReportHook","pos":[911,945]},{"pos":[984,1124],"content":"Calls <bpt id=\"p1\">[</bpt>SetPipeName<ept id=\"p1\">](#cdebugreporthook__setpipename)</ept>, <bpt id=\"p2\">[</bpt>SetTimeout<ept id=\"p2\">](#cdebugreporthook__settimeout)</ept>, and <bpt id=\"p3\">[</bpt>SetHook<ept id=\"p3\">](#cdebugreporthook__sethook)</ept>.","source":"Calls [SetPipeName](#cdebugreporthook__setpipename), [SetTimeout](#cdebugreporthook__settimeout), and [SetHook](#cdebugreporthook__sethook)."},{"content":"CDebugReportHook::~CDebugReportHook","pos":[1130,1165]},{"pos":[1209,1277],"content":"Calls <bpt id=\"p1\">[</bpt>CDebugReportHook::RemoveHook<ept id=\"p1\">](#cdebugreporthook__removehook)</ept>.","source":"Calls [CDebugReportHook::RemoveHook](#cdebugreporthook__removehook)."},{"content":"Public Methods","pos":[1288,1302]},{"content":"Name","pos":[1309,1313]},{"content":"Description","pos":[1314,1325]},{"content":"CDebugReportHook::CDebugReportHookProc","pos":[1364,1402]},{"content":"(Static) The custom reporting function that is hooked into the C run-time debug reporting process.","pos":[1445,1543]},{"content":"CDebugReportHook::RemoveHook","pos":[1549,1577]},{"content":"Call this method to stop sending debug reports to the named pipe and restore the previous report hook.","pos":[1610,1712]},{"content":"CDebugReportHook::SetHook","pos":[1718,1743]},{"content":"Call this method to start sending debug reports to the named pipe.","pos":[1773,1839]},{"content":"CDebugReportHook::SetPipeName","pos":[1845,1874]},{"content":"Call this method to set the machine and name of the pipe to which the debug reports will be sent.","pos":[1908,2005]},{"content":"CDebugReportHook::SetTimeout","pos":[2011,2039]},{"content":"Call this method to set the time in milliseconds that this class will wait for the named pipe to become available.","pos":[2072,2186]},{"content":"Remarks","pos":[2196,2203]},{"content":"Create an instance of this class in debug builds of your services or applications to send debug reports to a named pipe.","pos":[2207,2327]},{"content":"Debug reports are generated by calling <bpt id=\"p1\">[</bpt>_CrtDbgReport<ept id=\"p1\">](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md)</ept> or using a wrapper for this function such as the <bpt id=\"p2\">[</bpt>ATLTRACE<ept id=\"p2\">](http://msdn.microsoft.com/library/c796baa5-e2b9-4814-a27d-d800590b102e)</ept> and <bpt id=\"p3\">[</bpt>ATLASSERT<ept id=\"p3\">](http://msdn.microsoft.com/library/98e3e0fc-77e2-499b-a6f6-b17a21c6fbd3)</ept> macros.","pos":[2328,2675],"source":" Debug reports are generated by calling [_CrtDbgReport](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md) or using a wrapper for this function such as the [ATLTRACE](http://msdn.microsoft.com/library/c796baa5-e2b9-4814-a27d-d800590b102e) and [ATLASSERT](http://msdn.microsoft.com/library/98e3e0fc-77e2-499b-a6f6-b17a21c6fbd3) macros."},{"pos":[2682,2850],"content":"Use of this class allows you to interactively debug components running in non-interactive <bpt id=\"p1\">[</bpt>window stations<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms687096)</ept>.","source":"Use of this class allows you to interactively debug components running in non-interactive [window stations](http://msdn.microsoft.com/library/windows/desktop/ms687096)."},{"content":"Note that debug reports are sent using the underlying security context of the thread.","pos":[2857,2942]},{"content":"Impersonation is temporarily disabled so that debug reports can be viewed in situations where impersonation of low privilege users is taking place, such as in web applications.","pos":[2943,3119]},{"content":"Requirements","pos":[3128,3140]},{"pos":[3144,3165],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[3226,3260],"content":"CDebugReportHook::CDebugReportHook"},{"pos":[3264,3404],"content":"Calls <bpt id=\"p1\">[</bpt>SetPipeName<ept id=\"p1\">](#cdebugreporthook__setpipename)</ept>, <bpt id=\"p2\">[</bpt>SetTimeout<ept id=\"p2\">](#cdebugreporthook__settimeout)</ept>, and <bpt id=\"p3\">[</bpt>SetHook<ept id=\"p3\">](#cdebugreporthook__sethook)</ept>.","source":"Calls [SetPipeName](#cdebugreporthook__setpipename), [SetTimeout](#cdebugreporthook__settimeout), and [SetHook](#cdebugreporthook__sethook)."},{"content":"Parameters","pos":[3554,3564]},{"content":"The name of the machine to which the debug output should be sent.","pos":[3587,3652]},{"content":"Defaults to the local machine.","pos":[3653,3683]},{"content":"The name of the named pipe to which the debug output should be sent.","pos":[3706,3774]},{"content":"The time in milliseconds that this class will wait for the named pipe to become available.","pos":[3796,3886]},{"pos":[3952,3987],"content":"CDebugReportHook::~CDebugReportHook"},{"pos":[3991,4059],"content":"Calls <bpt id=\"p1\">[</bpt>CDebugReportHook::RemoveHook<ept id=\"p1\">](#cdebugreporthook__removehook)</ept>.","source":"Calls [CDebugReportHook::RemoveHook](#cdebugreporthook__removehook)."},{"pos":[4166,4204],"content":"CDebugReportHook::CDebugReportHookProc"},{"content":"The custom reporting function that is hooked into the C run-time debug reporting process.","pos":[4208,4297]},{"content":"Parameters","pos":[4431,4441]},{"content":"The type of the report (_CRT_WARN, _CRT_ERROR, or _CRT_ASSERT).","pos":[4461,4524]},{"content":"The message string.","pos":[4544,4563]},{"content":"returnValue","pos":[4571,4582]},{"content":"The value that should be returned by <bpt id=\"p1\">[</bpt>_CrtDbgReport<ept id=\"p1\">](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md)</ept>.","pos":[4587,4705],"source":" The value that should be returned by [_CrtDbgReport](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md)."},{"content":"Return Value","pos":[4715,4727]},{"content":"Returns FALSE if the hook handles the message in question completely so that no further reporting is required.","pos":[4731,4841]},{"content":"Returns TRUE if <ph id=\"ph1\">`_CrtDbgReport`</ph> should report the message in the normal way.","pos":[4842,4918],"source":" Returns TRUE if `_CrtDbgReport` should report the message in the normal way."},{"content":"Remarks","pos":[4928,4935]},{"content":"The reporting function attempts to open the named pipe and communicate with the process at the other end.","pos":[4939,5044]},{"content":"If the pipe is busy, the reporting function will wait until the pipe is free or the timeout expires.","pos":[5045,5145]},{"content":"The timeout can be set by the constructor or a call to <bpt id=\"p1\">[</bpt>CDebugReportHook::SetTimeout<ept id=\"p1\">](#cdebugreporthook__settimeout)</ept>.","pos":[5146,5263],"source":" The timeout can be set by the constructor or a call to [CDebugReportHook::SetTimeout](#cdebugreporthook__settimeout)."},{"content":"The code in this function is executed in the underlying security context of the calling thread, that is, impersonation is disabled for the duration of this function.","pos":[5270,5435]},{"pos":[5490,5518],"content":"CDebugReportHook::RemoveHook"},{"content":"Call this method to stop sending debug reports to the named pipe and restore the previous report hook.","pos":[5522,5624]},{"content":"Remarks","pos":[5674,5681]},{"pos":[5685,5823],"content":"Calls <bpt id=\"p1\">[</bpt>_CrtSetReportHook2<ept id=\"p1\">](../../c-runtime-library/reference/crtsetreporthook2-crtsetreporthookw2.md)</ept> to restore the previous report hook.","source":"Calls [_CrtSetReportHook2](../../c-runtime-library/reference/crtsetreporthook2-crtsetreporthookw2.md) to restore the previous report hook."},{"pos":[5875,5900],"content":"CDebugReportHook::SetHook"},{"content":"Call this method to start sending debug reports to the named pipe.","pos":[5904,5970]},{"content":"Remarks","pos":[6017,6024]},{"content":"Calls <bpt id=\"p1\">[</bpt>_CrtSetReportHook2<ept id=\"p1\">](../../c-runtime-library/reference/crtsetreporthook2-crtsetreporthookw2.md)</ept> to have debug reports routed through <bpt id=\"p2\">[</bpt>CDebugReportHookProc<ept id=\"p2\">](#cdebugreporthook__cdebugreporthookproc)</ept> to the named pipe.","pos":[6028,6249],"source":"Calls [_CrtSetReportHook2](../../c-runtime-library/reference/crtsetreporthook2-crtsetreporthookw2.md) to have debug reports routed through [CDebugReportHookProc](#cdebugreporthook__cdebugreporthookproc) to the named pipe."},{"content":"This class keeps track of the previous report hook so that it can be restored when <bpt id=\"p1\">[</bpt>RemoveHook<ept id=\"p1\">](#cdebugreporthook__removehook)</ept> is called.","pos":[6250,6387],"source":" This class keeps track of the previous report hook so that it can be restored when [RemoveHook](#cdebugreporthook__removehook) is called."},{"pos":[6443,6472],"content":"CDebugReportHook::SetPipeName"},{"content":"Call this method to set the machine and name of the pipe to which the debug reports will be sent.","pos":[6476,6573]},{"content":"Parameters","pos":[6694,6704]},{"content":"The name of the machine to which the debug output should be sent.","pos":[6727,6792]},{"content":"The name of the named pipe to which the debug output should be sent.","pos":[6815,6883]},{"content":"Return Value","pos":[6893,6905]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[6909,6951]},{"pos":[7006,7034],"content":"CDebugReportHook::SetTimeout"},{"content":"Call this method to set the time in milliseconds that this class will wait for the named pipe to become available.","pos":[7038,7152]},{"content":"Parameters","pos":[7211,7221]},{"content":"The time in milliseconds that this class will wait for the named pipe to become available.","pos":[7240,7330]},{"content":"See Also","pos":[7339,7347]},{"content":"Classes","pos":[7352,7359]}],"content":"---\ntitle: \"CDebugReportHook Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CDebugReportHook\"\n  - \"CDebugReportHook\"\n  - \"ATL::CDebugReportHook\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CDebugReportHook class\"\nms.assetid: 798076c3-6e63-4286-83b8-aa1bbcd0c20c\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDebugReportHook Class\nUse this class to send debug reports to a named pipe.  \n  \n## Syntax  \n  \n```\nclass CDebugReportHook\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDebugReportHook::CDebugReportHook](#cdebugreporthook__cdebugreporthook)|Calls [SetPipeName](#cdebugreporthook__setpipename), [SetTimeout](#cdebugreporthook__settimeout), and [SetHook](#cdebugreporthook__sethook).|  \n|[CDebugReportHook::~CDebugReportHook](#cdebugreporthook___dtorcdebugreporthook)|Calls [CDebugReportHook::RemoveHook](#cdebugreporthook__removehook).|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDebugReportHook::CDebugReportHookProc](#cdebugreporthook__cdebugreporthookproc)|(Static) The custom reporting function that is hooked into the C run-time debug reporting process.|  \n|[CDebugReportHook::RemoveHook](#cdebugreporthook__removehook)|Call this method to stop sending debug reports to the named pipe and restore the previous report hook.|  \n|[CDebugReportHook::SetHook](#cdebugreporthook__sethook)|Call this method to start sending debug reports to the named pipe.|  \n|[CDebugReportHook::SetPipeName](#cdebugreporthook__setpipename)|Call this method to set the machine and name of the pipe to which the debug reports will be sent.|  \n|[CDebugReportHook::SetTimeout](#cdebugreporthook__settimeout)|Call this method to set the time in milliseconds that this class will wait for the named pipe to become available.|  \n  \n## Remarks  \n Create an instance of this class in debug builds of your services or applications to send debug reports to a named pipe. Debug reports are generated by calling [_CrtDbgReport](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md) or using a wrapper for this function such as the [ATLTRACE](http://msdn.microsoft.com/library/c796baa5-e2b9-4814-a27d-d800590b102e) and [ATLASSERT](http://msdn.microsoft.com/library/98e3e0fc-77e2-499b-a6f6-b17a21c6fbd3) macros.  \n  \n Use of this class allows you to interactively debug components running in non-interactive [window stations](http://msdn.microsoft.com/library/windows/desktop/ms687096).  \n  \n Note that debug reports are sent using the underlying security context of the thread. Impersonation is temporarily disabled so that debug reports can be viewed in situations where impersonation of low privilege users is taking place, such as in web applications.  \n  \n## Requirements  \n **Header:** atlutil.h  \n  \n##  <a name=\"cdebugreporthook__cdebugreporthook\"></a>  CDebugReportHook::CDebugReportHook  \n Calls [SetPipeName](#cdebugreporthook__setpipename), [SetTimeout](#cdebugreporthook__settimeout), and [SetHook](#cdebugreporthook__sethook).  \n  \n```\nCDebugReportHook(\n    LPCSTR szMachineName = \".\",\n    LPCSTR szPipeName = \"AtlsDbgPipe\",\n    DWORD dwTimeout = 20000) throw();\n```  \n  \n### Parameters  \n `szMachineName`  \n The name of the machine to which the debug output should be sent. Defaults to the local machine.  \n  \n `szPipeName`  \n The name of the named pipe to which the debug output should be sent.  \n  \n `dwTimeout`  \n The time in milliseconds that this class will wait for the named pipe to become available.  \n  \n##  <a name=\"cdebugreporthook___dtorcdebugreporthook\"></a>  CDebugReportHook::~CDebugReportHook  \n Calls [CDebugReportHook::RemoveHook](#cdebugreporthook__removehook).  \n  \n```\n~CDebugReportHook() throw();\n```  \n  \n##  <a name=\"cdebugreporthook__cdebugreporthookproc\"></a>  CDebugReportHook::CDebugReportHookProc  \n The custom reporting function that is hooked into the C run-time debug reporting process.  \n  \n```\nstatic int __cdecl CDebugReportHookProc(\n    int reportType,\n    char* message,\n    int* returnValue) throw();\n```  \n  \n### Parameters  \n `reportType`  \n The type of the report (_CRT_WARN, _CRT_ERROR, or _CRT_ASSERT).  \n  \n `message`  \n The message string.  \n  \n *returnValue*  \n The value that should be returned by [_CrtDbgReport](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md).  \n  \n### Return Value  \n Returns FALSE if the hook handles the message in question completely so that no further reporting is required. Returns TRUE if `_CrtDbgReport` should report the message in the normal way.  \n  \n### Remarks  \n The reporting function attempts to open the named pipe and communicate with the process at the other end. If the pipe is busy, the reporting function will wait until the pipe is free or the timeout expires. The timeout can be set by the constructor or a call to [CDebugReportHook::SetTimeout](#cdebugreporthook__settimeout).  \n  \n The code in this function is executed in the underlying security context of the calling thread, that is, impersonation is disabled for the duration of this function.  \n  \n##  <a name=\"cdebugreporthook__removehook\"></a>  CDebugReportHook::RemoveHook  \n Call this method to stop sending debug reports to the named pipe and restore the previous report hook.  \n  \n```\nvoid RemoveHook() throw();\n```  \n  \n### Remarks  \n Calls [_CrtSetReportHook2](../../c-runtime-library/reference/crtsetreporthook2-crtsetreporthookw2.md) to restore the previous report hook.  \n  \n##  <a name=\"cdebugreporthook__sethook\"></a>  CDebugReportHook::SetHook  \n Call this method to start sending debug reports to the named pipe.  \n  \n```\nvoid SetHook() throw();\n```  \n  \n### Remarks  \n Calls [_CrtSetReportHook2](../../c-runtime-library/reference/crtsetreporthook2-crtsetreporthookw2.md) to have debug reports routed through [CDebugReportHookProc](#cdebugreporthook__cdebugreporthookproc) to the named pipe. This class keeps track of the previous report hook so that it can be restored when [RemoveHook](#cdebugreporthook__removehook) is called.  \n  \n##  <a name=\"cdebugreporthook__setpipename\"></a>  CDebugReportHook::SetPipeName  \n Call this method to set the machine and name of the pipe to which the debug reports will be sent.  \n  \n```\nBOOL SetPipeName(\n    LPCSTR szMachineName = \".\",\n    LPCSTR szPipeName = \"AtlsDbgPipe\") throw();\n```  \n  \n### Parameters  \n `szMachineName`  \n The name of the machine to which the debug output should be sent.  \n  \n `szPipeName`  \n The name of the named pipe to which the debug output should be sent.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"cdebugreporthook__settimeout\"></a>  CDebugReportHook::SetTimeout  \n Call this method to set the time in milliseconds that this class will wait for the named pipe to become available.  \n  \n```\nvoid SetTimeout(DWORD   dwTimeout);\n```  \n  \n### Parameters  \n `dwTimeout`  \n The time in milliseconds that this class will wait for the named pipe to become available.  \n  \n## See Also  \n [Classes](../../atl/reference/atl-classes.md)\n"}