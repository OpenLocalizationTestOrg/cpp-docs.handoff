{"nodes":[{"pos":[12,57],"content":"&lt;type_traits&gt; typedefs | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"type_traits<ph id=\"ph1\">&amp;gt;</ph> typedefs | Microsoft Docs","pos":[4,45],"source":"type_traits&gt; typedefs | Microsoft Docs"}]},{"content":"type_traits<ph id=\"ph1\">&amp;gt;</ph> typedefs","pos":[264,288],"source":"type_traits&gt; typedefs"},{"content":"false_type Typedef","pos":[305,323]},{"content":"true_type Typedef","pos":[347,364]},{"pos":[431,449],"content":"false_type Typedef"},{"content":"Holds integral constant with false value.","pos":[453,494]},{"content":"Remarks","pos":[572,579]},{"pos":[583,662],"content":"The type is a synonym for a specialization of the template <ph id=\"ph1\">`integral_constant`</ph>.","source":"The type is a synonym for a specialization of the template `integral_constant`."},{"content":"Example","pos":[672,679]},{"pos":[1122,1139],"content":"true_type Typedef"},{"content":"Holds integral constant with true value.","pos":[1143,1183]},{"content":"Remarks","pos":[1259,1266]},{"pos":[1270,1349],"content":"The type is a synonym for a specialization of the template <ph id=\"ph1\">`integral_constant`</ph>.","source":"The type is a synonym for a specialization of the template `integral_constant`."},{"content":"Example","pos":[1359,1366]},{"content":"See Also","pos":[1842,1850]},{"content":"&lt;type_traits&gt;","pos":[1855,1868],"source":"<type_traits>"}],"content":"---\ntitle: \"&lt;type_traits&gt; typedefs | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 8ac040ca-ed2d-4570-adc9-cb5626530053\ncaps.latest.revision: 13\nmanager: \"ghogen\"\n---\n# &lt;type_traits&gt; typedefs\n|||  \n|-|-|  \n|[false_type Typedef](#false_type_typedef)|[true_type Typedef](#true_type_typedef)|  \n  \n##  <a name=\"false_type_typedef\"></a>  false_type Typedef  \n Holds integral constant with false value.  \n  \n```  \ntypedef integral_constant<bool, false> false_type;  \n```  \n  \n### Remarks  \n The type is a synonym for a specialization of the template `integral_constant`.  \n  \n### Example  \n  \n```cpp  \n#include <type_traits>   \n#include <iostream>   \n  \nint main()   \n    {   \n    std::cout << \"false_type == \" << std::boolalpha   \n        << std::false_type::value << std::endl;   \n    std::cout << \"true_type == \" << std::boolalpha   \n        << std::true_type::value << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nfalse_type == false  \ntrue_type == true  \n```  \n  \n##  <a name=\"true_type_typedef\"></a>  true_type Typedef  \n Holds integral constant with true value.  \n  \n```  \ntypedef integral_constant<bool, true> true_type;  \n```  \n  \n### Remarks  \n The type is a synonym for a specialization of the template `integral_constant`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__type_traits__true_type.cpp   \n// compile with: /EHsc   \n#include <type_traits>   \n#include <iostream>   \n  \nint main()   \n    {   \n    std::cout << \"false_type == \" << std::boolalpha   \n        << std::false_type::value << std::endl;   \n    std::cout << \"true_type == \" << std::boolalpha   \n        << std::true_type::value << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nfalse_type == false  \ntrue_type == true  \n```  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)\n\n"}