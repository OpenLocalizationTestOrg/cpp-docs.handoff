{"nodes":[{"pos":[12,43],"content":"CHeapPtr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CHeapPtr Class | Microsoft Docs","pos":[0,31]}]},{"pos":[637,651],"content":"CHeapPtr Class","linkify":"CHeapPtr Class","nodes":[{"content":"CHeapPtr Class","pos":[0,14]}]},{"content":"A smart pointer class for managing heap pointers.","pos":[652,701]},{"pos":[709,819],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"pos":[828,834],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[966,976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The object type to be stored on the heap.","pos":[987,1028]},{"content":"The memory allocation class to use.","pos":[1050,1085]},{"pos":[1094,1101],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1111,1130],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1137,1141]},{"content":"Description","pos":[1142,1153]},{"pos":[1191,1232],"content":"<bpt id=\"p1\">[</bpt>CHeapPtr::CHeapPtr<ept id=\"p1\">](#cheapptr__cheapptr)</ept>","source":"[CHeapPtr::CHeapPtr](#cheapptr__cheapptr)"},{"content":"The constructor.","pos":[1233,1249]},{"pos":[1260,1274],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1281,1285]},{"content":"Description","pos":[1286,1297]},{"pos":[1335,1376],"content":"<bpt id=\"p1\">[</bpt>CHeapPtr::Allocate<ept id=\"p1\">](#cheapptr__allocate)</ept>","source":"[CHeapPtr::Allocate](#cheapptr__allocate)"},{"content":"Call this method to allocate memory on the heap to store objects.","pos":[1377,1442]},{"pos":[1447,1492],"content":"<bpt id=\"p1\">[</bpt>CHeapPtr::Reallocate<ept id=\"p1\">](#cheapptr__reallocate)</ept>","source":"[CHeapPtr::Reallocate](#cheapptr__reallocate)"},{"content":"Call this method to reallocate the memory on the heap.","pos":[1493,1547]},{"pos":[1558,1574],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1581,1585]},{"content":"Description","pos":[1586,1597]},{"pos":[1635,1681],"content":"<bpt id=\"p1\">[</bpt>CHeapPtr::operator =<ept id=\"p1\">](#cheapptr__operator_eq)</ept>","source":"[CHeapPtr::operator =](#cheapptr__operator_eq)"},{"content":"The assignment operator.","pos":[1682,1706]},{"pos":[1716,1723],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CHeapPtr`</ph> is derived from <bpt id=\"p1\">[</bpt>CHeapPtrBase<ept id=\"p1\">](../../atl/reference/cheapptrbase-class.md)</ept> and by default uses the CRT routines (in <bpt id=\"p2\">[</bpt>CCRTAllocator<ept id=\"p2\">](../../atl/reference/ccrtallocator-class.md)</ept>) to allocate and free memory.","pos":[1727,1942],"source":"`CHeapPtr` is derived from [CHeapPtrBase](../../atl/reference/cheapptrbase-class.md) and by default uses the CRT routines (in [CCRTAllocator](../../atl/reference/ccrtallocator-class.md)) to allocate and free memory."},{"content":"The class <bpt id=\"p1\">[</bpt>CHeapPtrList<ept id=\"p1\">](../../atl/reference/cheapptrlist-class.md)</ept> may be used to construct a list of heap pointers.","pos":[1943,2060],"source":" The class [CHeapPtrList](../../atl/reference/cheapptrlist-class.md) may be used to construct a list of heap pointers."},{"content":"See also <bpt id=\"p1\">[</bpt>CComHeapPtr<ept id=\"p1\">](../../atl/reference/ccomheapptr-class.md)</ept>, which uses COM memory allocation routines.","pos":[2061,2169],"source":" See also [CComHeapPtr](../../atl/reference/ccomheapptr-class.md), which uses COM memory allocation routines."},{"pos":[2178,2199],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2203,2260],"content":"<bpt id=\"p1\">[</bpt>CHeapPtrBase<ept id=\"p1\">](../../atl/reference/cheapptrbase-class.md)</ept>","source":"[CHeapPtrBase](../../atl/reference/cheapptrbase-class.md)"},{"pos":[2286,2298],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2302,2323],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcore.h","source":"**Header:** atlcore.h"},{"pos":[2333,2386],"content":"<bpt id=\"p1\">&lt;a name=\"cheapptr__allocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CHeapPtr::Allocate","linkify":"<a name=\"cheapptr__allocate\"></a>  CHeapPtr::Allocate","source":"<a name=\"cheapptr__allocate\"></a>  CHeapPtr::Allocate"},{"content":"Call this method to allocate memory on the heap to store objects.","pos":[2390,2455]},{"pos":[2523,2533],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of elements used to calculate the amount of memory to allocate.","pos":[2552,2626]},{"content":"The default value is 1.","pos":[2627,2650]},{"pos":[2660,2672],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns true if the memory was successfully allocated, false on failure.","pos":[2676,2748]},{"pos":[2758,2765],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2769,2903],"content":"The allocator routines are used to reserve enough memory on the heap to store <bpt id=\"p1\">*</bpt>nElement<ept id=\"p1\">*</ept> objects of a type defined in the constructor.","source":"The allocator routines are used to reserve enough memory on the heap to store *nElement* objects of a type defined in the constructor."},{"pos":[2913,2920],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2924,3005],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#77<ept id=\"p2\">](../../atl/codesnippet/cpp/cheapptr-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#77](../../atl/codesnippet/cpp/cheapptr-class_1.cpp)]"},{"pos":[3015,3068],"content":"<bpt id=\"p1\">&lt;a name=\"cheapptr__cheapptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CHeapPtr::CHeapPtr","linkify":"<a name=\"cheapptr__cheapptr\"></a>  CHeapPtr::CHeapPtr","source":"<a name=\"cheapptr__cheapptr\"></a>  CHeapPtr::CHeapPtr"},{"content":"The constructor.","pos":[3072,3088]},{"pos":[3221,3231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An existing heap pointer or <ph id=\"ph1\">`CHeapPtr`</ph>.","pos":[3242,3281],"source":" An existing heap pointer or `CHeapPtr`."},{"pos":[3291,3298],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The heap pointer can optionally be created using an existing pointer, or a <ph id=\"ph1\">`CHeapPtr`</ph> object.","pos":[3302,3395],"source":"The heap pointer can optionally be created using an existing pointer, or a `CHeapPtr` object."},{"content":"If so, the new <ph id=\"ph1\">`CHeapPtr`</ph> object assumes responsibility for managing the new pointer and resources.","pos":[3396,3495],"source":" If so, the new `CHeapPtr` object assumes responsibility for managing the new pointer and resources."},{"pos":[3505,3512],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3516,3597],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#78<ept id=\"p2\">](../../atl/codesnippet/cpp/cheapptr-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#78](../../atl/codesnippet/cpp/cheapptr-class_2.cpp)]"},{"pos":[3607,3665],"content":"<bpt id=\"p1\">&lt;a name=\"cheapptr__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CHeapPtr::operator =","linkify":"<a name=\"cheapptr__operator_eq\"></a>  CHeapPtr::operator =","source":"<a name=\"cheapptr__operator_eq\"></a>  CHeapPtr::operator ="},{"content":"Assignment operator.","pos":[3669,3689]},{"pos":[3792,3802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An existing <ph id=\"ph1\">`CHeapPtr`</ph> object.","pos":[3813,3843],"source":" An existing `CHeapPtr` object."},{"pos":[3853,3865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3869,3915],"content":"Returns a reference to the updated <ph id=\"ph1\">`CHeapPtr`</ph>.","source":"Returns a reference to the updated `CHeapPtr`."},{"pos":[3925,3932],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3936,4017],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#80<ept id=\"p2\">](../../atl/codesnippet/cpp/cheapptr-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#80](../../atl/codesnippet/cpp/cheapptr-class_3.cpp)]"},{"pos":[4027,4084],"content":"<bpt id=\"p1\">&lt;a name=\"cheapptr__reallocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CHeapPtr::Reallocate","linkify":"<a name=\"cheapptr__reallocate\"></a>  CHeapPtr::Reallocate","source":"<a name=\"cheapptr__reallocate\"></a>  CHeapPtr::Reallocate"},{"content":"Call this method to reallocate the memory on the heap.","pos":[4088,4142]},{"pos":[4211,4221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new number of elements used to calculate the amount of memory to allocate.","pos":[4240,4318]},{"pos":[4328,4340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns true if the memory was successfully allocated, false on failure.","pos":[4344,4416]},{"pos":[4426,4433],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4437,4518],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#79<ept id=\"p2\">](../../atl/codesnippet/cpp/cheapptr-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#79](../../atl/codesnippet/cpp/cheapptr-class_4.cpp)]"},{"pos":[4527,4535],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CHeapPtrBase Class<ept id=\"p1\">](../../atl/reference/cheapptrbase-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[4539,4603],"source":"[CHeapPtrBase Class](../../atl/reference/cheapptrbase-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CCRTAllocator Class<ept id=\"p1\">](../../atl/reference/ccrtallocator-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[4606,4673],"source":" [CCRTAllocator Class](../../atl/reference/ccrtallocator-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept>","pos":[4676,4726],"source":" [Class Overview](../../atl/atl-class-overview.md)"}],"content":"---\ntitle: \"CHeapPtr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CHeapPtr\"\n  - \"CHeapPtr\"\n  - \"ATL.CHeapPtr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CHeapPtr class\"\nms.assetid: e5c5bfd4-9bf1-4164-8a83-8155fe253454\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CHeapPtr Class\nA smart pointer class for managing heap pointers.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\ntemplate<\ntypename\nT,\nclass\nAllocator\n= CCRTAllocator\n> class CHeapPtr :\npublic CHeapPtrBase<\nT,\nAllocator>\n```  \n  \n#### Parameters  \n `T`  \n The object type to be stored on the heap.  \n  \n `Allocator`  \n The memory allocation class to use.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHeapPtr::CHeapPtr](#cheapptr__cheapptr)|The constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHeapPtr::Allocate](#cheapptr__allocate)|Call this method to allocate memory on the heap to store objects.|  \n|[CHeapPtr::Reallocate](#cheapptr__reallocate)|Call this method to reallocate the memory on the heap.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHeapPtr::operator =](#cheapptr__operator_eq)|The assignment operator.|  \n  \n## Remarks  \n `CHeapPtr` is derived from [CHeapPtrBase](../../atl/reference/cheapptrbase-class.md) and by default uses the CRT routines (in [CCRTAllocator](../../atl/reference/ccrtallocator-class.md)) to allocate and free memory. The class [CHeapPtrList](../../atl/reference/cheapptrlist-class.md) may be used to construct a list of heap pointers. See also [CComHeapPtr](../../atl/reference/ccomheapptr-class.md), which uses COM memory allocation routines.  \n  \n## Inheritance Hierarchy  \n [CHeapPtrBase](../../atl/reference/cheapptrbase-class.md)  \n  \n `CHeapPtr`  \n  \n## Requirements  \n **Header:** atlcore.h  \n  \n##  <a name=\"cheapptr__allocate\"></a>  CHeapPtr::Allocate  \n Call this method to allocate memory on the heap to store objects.  \n  \n```\nbool Allocate(size_t\nnElements = 1) throw();\n```  \n  \n### Parameters  \n `nElements`  \n The number of elements used to calculate the amount of memory to allocate. The default value is 1.  \n  \n### Return Value  \n Returns true if the memory was successfully allocated, false on failure.  \n  \n### Remarks  \n The allocator routines are used to reserve enough memory on the heap to store *nElement* objects of a type defined in the constructor.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#77](../../atl/codesnippet/cpp/cheapptr-class_1.cpp)]  \n  \n##  <a name=\"cheapptr__cheapptr\"></a>  CHeapPtr::CHeapPtr  \n The constructor.  \n  \n```\nCHeapPtr() throw();\n\nexplicit CHeapPtr(\n    T* p) throw();\n\nCHeapPtr(\n    CHeapPtr<T, Allocator>& p) throw();\n```  \n  \n### Parameters  \n `p`  \n An existing heap pointer or `CHeapPtr`.  \n  \n### Remarks  \n The heap pointer can optionally be created using an existing pointer, or a `CHeapPtr` object. If so, the new `CHeapPtr` object assumes responsibility for managing the new pointer and resources.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#78](../../atl/codesnippet/cpp/cheapptr-class_2.cpp)]  \n  \n##  <a name=\"cheapptr__operator_eq\"></a>  CHeapPtr::operator =  \n Assignment operator.  \n  \n```\nCHeapPtr<T,\n    Allocator>& operator=(\n    CHeapPtr<T,\n Allocator>& p) throw();\n```  \n  \n### Parameters  \n `p`  \n An existing `CHeapPtr` object.  \n  \n### Return Value  \n Returns a reference to the updated `CHeapPtr`.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#80](../../atl/codesnippet/cpp/cheapptr-class_3.cpp)]  \n  \n##  <a name=\"cheapptr__reallocate\"></a>  CHeapPtr::Reallocate  \n Call this method to reallocate the memory on the heap.  \n  \n```\nbool Reallocate(size_t    nElements) throw();\n```  \n  \n### Parameters  \n `nElements`  \n The new number of elements used to calculate the amount of memory to allocate.  \n  \n### Return Value  \n Returns true if the memory was successfully allocated, false on failure.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#79](../../atl/codesnippet/cpp/cheapptr-class_4.cpp)]  \n  \n## See Also  \n [CHeapPtrBase Class](../../atl/reference/cheapptrbase-class.md)   \n [CCRTAllocator Class](../../atl/reference/ccrtallocator-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}