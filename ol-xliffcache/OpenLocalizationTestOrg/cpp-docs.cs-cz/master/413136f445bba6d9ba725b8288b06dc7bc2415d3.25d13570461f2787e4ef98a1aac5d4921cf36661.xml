{"nodes":[{"pos":[12,55],"content":"Multithreading and Locales | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Multithreading and Locales | Microsoft Docs","pos":[0,43]}]},{"content":"Multithreading and Locales","pos":[684,710]},{"content":"Both the C Runtime Library and the Standard C++ Library provide support for changing the locale of your program.","pos":[711,823]},{"content":"This topic discusses issues that arise when using the locale functionality of both libraries in a multithreaded application.","pos":[824,948]},{"content":"Remarks","pos":[957,964]},{"content":"With the C Runtime Library, you can create multithreaded applications using the <ph id=\"ph1\">`_beginthread`</ph> and <ph id=\"ph2\">`_beginthreadex`</ph> functions.","pos":[968,1094],"source":"With the C Runtime Library, you can create multithreaded applications using the `_beginthread` and `_beginthreadex` functions."},{"content":"This topic only covers multithreaded applications created using these functions.","pos":[1095,1175]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_beginthread, _beginthreadex<ept id=\"p1\">](../c-runtime-library/reference/beginthread-beginthreadex.md)</ept>.","pos":[1176,1294],"source":" For more information, see [_beginthread, _beginthreadex](../c-runtime-library/reference/beginthread-beginthreadex.md)."},{"content":"To change the locale using the C Runtime Library, use the <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../preprocessor/setlocale.md)</ept> function.","pos":[1301,1410],"source":"To change the locale using the C Runtime Library, use the [setlocale](../preprocessor/setlocale.md) function."},{"content":"In previous versions of <ph id=\"ph1\">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph>, this function would always modify the locale throughout the entire application.","pos":[1411,1566],"source":" In previous versions of [!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)], this function would always modify the locale throughout the entire application."},{"content":"There is now support for setting the locale on a per-thread basis.","pos":[1567,1633]},{"content":"This is done using the <bpt id=\"p1\">[</bpt>_configthreadlocale<ept id=\"p1\">](../c-runtime-library/reference/configthreadlocale.md)</ept> function.","pos":[1634,1742],"source":" This is done using the [_configthreadlocale](../c-runtime-library/reference/configthreadlocale.md) function."},{"content":"To specify that <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../preprocessor/setlocale.md)</ept> should only change the locale in the current thread, call <ph id=\"ph1\">`_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`</ph> in that thread.","pos":[1743,1923],"source":" To specify that [setlocale](../preprocessor/setlocale.md) should only change the locale in the current thread, call `_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)` in that thread."},{"content":"Conversely, calling <ph id=\"ph1\">`_configthreadlocale(_DISABLE_PER_THREAD_LOCALE)`</ph> will cause that thread to use the global locale, and any call to <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../preprocessor/setlocale.md)</ept> in that thread will change the locale in all threads that have not explicitly enabled per-thread locale.","pos":[1924,2205],"source":" Conversely, calling `_configthreadlocale(_DISABLE_PER_THREAD_LOCALE)` will cause that thread to use the global locale, and any call to [setlocale](../preprocessor/setlocale.md) in that thread will change the locale in all threads that have not explicitly enabled per-thread locale."},{"content":"To change the locale using the C++ Runtime Library, use the <bpt id=\"p1\">[</bpt>locale Class<ept id=\"p1\">](../standard-library/locale-class.md)</ept>.","pos":[2212,2324],"source":"To change the locale using the C++ Runtime Library, use the [locale Class](../standard-library/locale-class.md)."},{"content":"By calling the <bpt id=\"p1\">[</bpt>locale::global<ept id=\"p1\">](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8)</ept> method, you change the locale in every thread that has not explicitly enabled per-thread locale.","pos":[2325,2525],"source":" By calling the [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) method, you change the locale in every thread that has not explicitly enabled per-thread locale."},{"content":"To change the locale in a single thread or portion of an application, simply create an instance of a <ph id=\"ph1\">`locale`</ph> object in that thread or portion of code.","pos":[2526,2677],"source":" To change the locale in a single thread or portion of an application, simply create an instance of a `locale` object in that thread or portion of code."},{"pos":[2685,3024],"content":"[!NOTE]\n Calling [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) changes the locale for both the Standard C++ Library and the C Runtime Library. However, calling [setlocale](../preprocessor/setlocale.md) only changes the locale for the C Runtime Library; the Standard C++ Library is not affected.","leadings":["","> "],"nodes":[{"content":" Calling [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) changes the locale for both the Standard C++ Library and the C Runtime Library. However, calling [setlocale](../preprocessor/setlocale.md) only changes the locale for the C Runtime Library; the Standard C++ Library is not affected.","pos":[8,337],"nodes":[{"content":"Calling <bpt id=\"p1\">[</bpt>locale::global<ept id=\"p1\">](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8)</ept> changes the locale for both the Standard C++ Library and the C Runtime Library.","pos":[1,177],"source":" Calling [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) changes the locale for both the Standard C++ Library and the C Runtime Library."},{"content":"However, calling <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../preprocessor/setlocale.md)</ept> only changes the locale for the C Runtime Library; the Standard C++ Library is not affected.","pos":[178,329],"source":" However, calling [setlocale](../preprocessor/setlocale.md) only changes the locale for the C Runtime Library; the Standard C++ Library is not affected."}]}]},{"pos":[3031,3346],"content":"The following examples show how to use the <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../preprocessor/setlocale.md)</ept> function, the <bpt id=\"p2\">[</bpt>locale Class<ept id=\"p2\">](../standard-library/locale-class.md)</ept>, and the <bpt id=\"p3\">[</bpt>_configthreadlocale<ept id=\"p3\">](../c-runtime-library/reference/configthreadlocale.md)</ept> function to change the locale of an application in several different scenarios.","source":"The following examples show how to use the [setlocale](../preprocessor/setlocale.md) function, the [locale Class](../standard-library/locale-class.md), and the [_configthreadlocale](../c-runtime-library/reference/configthreadlocale.md) function to change the locale of an application in several different scenarios."},{"content":"Example","pos":[3355,3362]},{"content":"In this example, the main thread spawns two child threads.","pos":[3366,3424]},{"content":"The first thread, Thread A, enables per-thread locale by calling <ph id=\"ph1\">`_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`</ph>.","pos":[3425,3539],"source":" The first thread, Thread A, enables per-thread locale by calling `_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`."},{"content":"The second thread, Thread B, as well as the main thread, do not enable per-thread locale.","pos":[3540,3629]},{"content":"Thread A then proceeds to change the locale using the <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../preprocessor/setlocale.md)</ept> function of the C Runtime Library.","pos":[3630,3760],"source":" Thread A then proceeds to change the locale using the [setlocale](../preprocessor/setlocale.md) function of the C Runtime Library."},{"content":"Since Thread A has per-thread locale enabled, only the C Runtime Library functions in Thread A start using the \"french\" locale.","pos":[3767,3894]},{"content":"The C Runtime Library functions in Thread B and in the main thread continue to use the \"C\" locale.","pos":[3895,3993]},{"content":"Also, since <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../preprocessor/setlocale.md)</ept> does not affect the Standard C++ Library locale, all Standard C++ Library objects continue to use the \"C\" locale.","pos":[3994,4161],"source":" Also, since [setlocale](../preprocessor/setlocale.md) does not affect the Standard C++ Library locale, all Standard C++ Library objects continue to use the \"C\" locale."},{"content":"Example","pos":[6744,6751]},{"content":"In this example, the main thread spawns two child threads.","pos":[6755,6813]},{"content":"The first thread, Thread A, enables per-thread locale by calling <ph id=\"ph1\">`_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`</ph>.","pos":[6814,6928],"source":" The first thread, Thread A, enables per-thread locale by calling `_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`."},{"content":"The second thread, Thread B, as well as the main thread, do not enable per-thread locale.","pos":[6929,7018]},{"content":"Thread A then proceeds to change the locale using the <bpt id=\"p1\">[</bpt>locale::global<ept id=\"p1\">](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8)</ept> method of the Standard C++ Library.","pos":[7019,7197],"source":" Thread A then proceeds to change the locale using the [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) method of the Standard C++ Library."},{"content":"Since Thread A has per-thread locale enabled, only the C Runtime Library functions in Thread A start using the \"french\" locale.","pos":[7204,7331]},{"content":"The C Runtime Library functions in Thread B and in the main thread continue to use the \"C\" locale.","pos":[7332,7430]},{"content":"However, since the <bpt id=\"p1\">[</bpt>locale::global<ept id=\"p1\">](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8)</ept> method changes the locale \"globally\", all Standard C++ Library objects in all threads start using the \"french\" locale.","pos":[7431,7657],"source":" However, since the [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) method changes the locale \"globally\", all Standard C++ Library objects in all threads start using the \"french\" locale."},{"content":"Example","pos":[10296,10303]},{"content":"In this example, the main thread spawns two child threads.","pos":[10307,10365]},{"content":"The first thread, Thread A, enables per-thread locale by calling <ph id=\"ph1\">`_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`</ph>.","pos":[10366,10480],"source":" The first thread, Thread A, enables per-thread locale by calling `_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`."},{"content":"The second thread, Thread B, as well as the main thread, do not enable per-thread locale.","pos":[10481,10570]},{"content":"Thread B then proceeds to change the locale using the <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../preprocessor/setlocale.md)</ept> function of the C Runtime Library.","pos":[10571,10701],"source":" Thread B then proceeds to change the locale using the [setlocale](../preprocessor/setlocale.md) function of the C Runtime Library."},{"content":"Since Thread B does not have per-thread locale enabled, the C Runtime Library functions in Thread B and in the main thread start using the \"french\" locale.","pos":[10708,10863]},{"content":"The C Runtime Library functions in Thread A continue to use the \"C\" locale because Thread A has per-thread locale enabled.","pos":[10864,10986]},{"content":"Also, since <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../preprocessor/setlocale.md)</ept> does not affect the Standard C++ Library locale, all Standard C++ Library objects continue to use the \"C\" locale.","pos":[10987,11154],"source":" Also, since [setlocale](../preprocessor/setlocale.md) does not affect the Standard C++ Library locale, all Standard C++ Library objects continue to use the \"C\" locale."},{"content":"Example","pos":[13896,13903]},{"content":"In this example, the main thread spawns two child threads.","pos":[13907,13965]},{"content":"The first thread, Thread A, enables per-thread locale by calling <ph id=\"ph1\">`_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`</ph>.","pos":[13966,14080],"source":" The first thread, Thread A, enables per-thread locale by calling `_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`."},{"content":"The second thread, Thread B, as well as the main thread, do not enable per-thread locale.","pos":[14081,14170]},{"content":"Thread B then proceeds to change the locale using the <bpt id=\"p1\">[</bpt>locale::global<ept id=\"p1\">](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8)</ept> method of the Standard C++ Library.","pos":[14171,14349],"source":" Thread B then proceeds to change the locale using the [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) method of the Standard C++ Library."},{"content":"Since Thread B does not have per-thread locale enabled, the C Runtime Library functions in Thread B and in the main thread start using the \"french\" locale.","pos":[14356,14511]},{"content":"The C Runtime Library functions in Thread A continue to use the \"C\" locale because Thread A has per-thread locale enabled.","pos":[14512,14634]},{"content":"However, since the <bpt id=\"p1\">[</bpt>locale::global<ept id=\"p1\">](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8)</ept> method changes the locale \"globally\", all Standard C++ Library objects in all threads start using the \"french\" locale.","pos":[14635,14861],"source":" However, since the [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) method changes the locale \"globally\", all Standard C++ Library objects in all threads start using the \"french\" locale."},{"content":"See Also","pos":[17659,17667]},{"content":"Multithreading Support for Older Code (Visual C++)","pos":[17672,17722]},{"content":"_beginthread, _beginthreadex","pos":[17794,17822]},{"content":"_configthreadlocale","pos":[17890,17909]},{"content":"setlocale","pos":[17970,17979]},{"content":"Internationalization","pos":[18016,18036]},{"content":"Locale","pos":[18089,18095]},{"content":"clocale&gt;","pos":[18136,18144],"source":"clocale>"},{"content":"locale&gt;","pos":[18185,18192],"source":"locale>"},{"content":"locale Class","pos":[18230,18242]}],"content":"---\ntitle: \"Multithreading and Locales | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"locales [C++], multithreading\"\n  - \"multithreading [C++], locales\"\n  - \"threading [C++], locales\"\n  - \"per-thread locale\"\nms.assetid: d6fb159a-eaca-4130-a51a-f95d62f71485\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Multithreading and Locales\nBoth the C Runtime Library and the Standard C++ Library provide support for changing the locale of your program. This topic discusses issues that arise when using the locale functionality of both libraries in a multithreaded application.  \n  \n## Remarks  \n With the C Runtime Library, you can create multithreaded applications using the `_beginthread` and `_beginthreadex` functions. This topic only covers multithreaded applications created using these functions. For more information, see [_beginthread, _beginthreadex](../c-runtime-library/reference/beginthread-beginthreadex.md).  \n  \n To change the locale using the C Runtime Library, use the [setlocale](../preprocessor/setlocale.md) function. In previous versions of [!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)], this function would always modify the locale throughout the entire application. There is now support for setting the locale on a per-thread basis. This is done using the [_configthreadlocale](../c-runtime-library/reference/configthreadlocale.md) function. To specify that [setlocale](../preprocessor/setlocale.md) should only change the locale in the current thread, call `_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)` in that thread. Conversely, calling `_configthreadlocale(_DISABLE_PER_THREAD_LOCALE)` will cause that thread to use the global locale, and any call to [setlocale](../preprocessor/setlocale.md) in that thread will change the locale in all threads that have not explicitly enabled per-thread locale.  \n  \n To change the locale using the C++ Runtime Library, use the [locale Class](../standard-library/locale-class.md). By calling the [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) method, you change the locale in every thread that has not explicitly enabled per-thread locale. To change the locale in a single thread or portion of an application, simply create an instance of a `locale` object in that thread or portion of code.  \n  \n> [!NOTE]\n>  Calling [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) changes the locale for both the Standard C++ Library and the C Runtime Library. However, calling [setlocale](../preprocessor/setlocale.md) only changes the locale for the C Runtime Library; the Standard C++ Library is not affected.  \n  \n The following examples show how to use the [setlocale](../preprocessor/setlocale.md) function, the [locale Class](../standard-library/locale-class.md), and the [_configthreadlocale](../c-runtime-library/reference/configthreadlocale.md) function to change the locale of an application in several different scenarios.  \n  \n## Example  \n In this example, the main thread spawns two child threads. The first thread, Thread A, enables per-thread locale by calling `_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`. The second thread, Thread B, as well as the main thread, do not enable per-thread locale. Thread A then proceeds to change the locale using the [setlocale](../preprocessor/setlocale.md) function of the C Runtime Library.  \n  \n Since Thread A has per-thread locale enabled, only the C Runtime Library functions in Thread A start using the \"french\" locale. The C Runtime Library functions in Thread B and in the main thread continue to use the \"C\" locale. Also, since [setlocale](../preprocessor/setlocale.md) does not affect the Standard C++ Library locale, all Standard C++ Library objects continue to use the \"C\" locale.  \n  \n```  \n// multithread_locale_1.cpp  \n// compile with: /EHsc /MD  \n#include <clocale>  \n#include <cstdio>  \n#include <locale>  \n#include <process.h>  \n#include <windows.h>  \n  \n#define NUM_THREADS 2  \nusing namespace std;  \n  \nunsigned __stdcall RunThreadA(void *params);  \nunsigned __stdcall RunThreadB(void *params);  \n  \nBOOL localeSet = FALSE;  \nHANDLE printMutex = CreateMutex(NULL, FALSE, NULL);  \n  \nint main()  \n{  \n    HANDLE threads[NUM_THREADS];  \n  \n    unsigned aID;  \n    threads[0] = (HANDLE)_beginthreadex(  \n        NULL, 0, RunThreadA, NULL, 0, &aID);  \n  \n    unsigned bID;  \n    threads[1] = (HANDLE)_beginthreadex(  \n        NULL, 0, RunThreadB, NULL, 0, &bID);  \n  \n    WaitForMultipleObjects(2, threads, TRUE, INFINITE);  \n  \n    printf_s(\"[Thread main] Per-thread locale is NOT enabled.\\n\");  \n    printf_s(\"[Thread main] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread main] locale::global is set to \\\"%s\\\"\\n\",  \n        locale().name().c_str());  \n  \n    CloseHandle(threads[0]);  \n    CloseHandle(threads[1]);  \n    CloseHandle(printMutex);  \n  \n    return 0;  \n}  \n  \nunsigned __stdcall RunThreadA(void *params)  \n{  \n    _configthreadlocale(_ENABLE_PER_THREAD_LOCALE);  \n    setlocale(LC_ALL, \"french\");  \n    localeSet = TRUE;  \n  \n    WaitForSingleObject(printMutex, INFINITE);  \n    printf_s(\"[Thread A] Per-thread locale is enabled.\\n\");  \n    printf_s(\"[Thread A] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread A] locale::global is set to \\\"%s\\\"\\n\\n\",  \n        locale().name().c_str());  \n    ReleaseMutex(printMutex);  \n  \n    return 1;  \n}  \n  \nunsigned __stdcall RunThreadB(void *params)  \n{  \n    while (!localeSet)  \n        Sleep(100);  \n  \n    WaitForSingleObject(printMutex, INFINITE);  \n    printf_s(\"[Thread B] Per-thread locale is NOT enabled.\\n\");  \n    printf_s(\"[Thread B] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread B] locale::global is set to \\\"%s\\\"\\n\\n\",  \n        locale().name().c_str());  \n    ReleaseMutex(printMutex);  \n  \n    return 1;  \n}  \n```  \n  \n```Output  \n[Thread A] Per-thread locale is enabled.  \n[Thread A] CRT locale is set to \"French_France.1252\"  \n[Thread A] locale::global is set to \"C\"  \n  \n[Thread B] Per-thread locale is NOT enabled.  \n[Thread B] CRT locale is set to \"C\"  \n[Thread B] locale::global is set to \"C\"  \n  \n[Thread main] Per-thread locale is NOT enabled.  \n[Thread main] CRT locale is set to \"C\"  \n[Thread main] locale::global is set to \"C\"  \n```  \n  \n## Example  \n In this example, the main thread spawns two child threads. The first thread, Thread A, enables per-thread locale by calling `_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`. The second thread, Thread B, as well as the main thread, do not enable per-thread locale. Thread A then proceeds to change the locale using the [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) method of the Standard C++ Library.  \n  \n Since Thread A has per-thread locale enabled, only the C Runtime Library functions in Thread A start using the \"french\" locale. The C Runtime Library functions in Thread B and in the main thread continue to use the \"C\" locale. However, since the [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) method changes the locale \"globally\", all Standard C++ Library objects in all threads start using the \"french\" locale.  \n  \n```  \n// multithread_locale_2.cpp  \n// compile with: /EHsc /MD  \n#include <clocale>  \n#include <cstdio>  \n#include <locale>  \n#include <process.h>  \n#include <windows.h>  \n  \n#define NUM_THREADS 2  \nusing namespace std;  \n  \nunsigned __stdcall RunThreadA(void *params);  \nunsigned __stdcall RunThreadB(void *params);  \n  \nBOOL localeSet = FALSE;  \nHANDLE printMutex = CreateMutex(NULL, FALSE, NULL);  \n  \nint main()  \n{  \n    HANDLE threads[NUM_THREADS];  \n  \n    unsigned aID;  \n    threads[0] = (HANDLE)_beginthreadex(  \n        NULL, 0, RunThreadA, NULL, 0, &aID);  \n  \n    unsigned bID;  \n    threads[1] = (HANDLE)_beginthreadex(  \n        NULL, 0, RunThreadB, NULL, 0, &bID);  \n  \n    WaitForMultipleObjects(2, threads, TRUE, INFINITE);  \n  \n    printf_s(\"[Thread main] Per-thread locale is NOT enabled.\\n\");  \n    printf_s(\"[Thread main] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread main] locale::global is set to \\\"%s\\\"\\n\",  \n        locale().name().c_str());  \n  \n    CloseHandle(threads[0]);  \n    CloseHandle(threads[1]);  \n    CloseHandle(printMutex);  \n  \n    return 0;  \n}  \n  \nunsigned __stdcall RunThreadA(void *params)  \n{  \n    _configthreadlocale(_ENABLE_PER_THREAD_LOCALE);  \n    locale::global(locale(\"french\"));  \n    localeSet = TRUE;  \n  \n    WaitForSingleObject(printMutex, INFINITE);  \n    printf_s(\"[Thread A] Per-thread locale is enabled.\\n\");  \n    printf_s(\"[Thread A] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread A] locale::global is set to \\\"%s\\\"\\n\\n\",  \n        locale().name().c_str());  \n    ReleaseMutex(printMutex);  \n  \n    return 1;  \n}  \n  \nunsigned __stdcall RunThreadB(void *params)  \n{  \n    while (!localeSet)  \n        Sleep(100);  \n  \n    WaitForSingleObject(printMutex, INFINITE);  \n    printf_s(\"[Thread B] Per-thread locale is NOT enabled.\\n\");  \n    printf_s(\"[Thread B] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread B] locale::global is set to \\\"%s\\\"\\n\\n\",  \n        locale().name().c_str());  \n    ReleaseMutex(printMutex);  \n  \n    return 1;  \n}  \n```  \n  \n```Output  \n[Thread A] Per-thread locale is enabled.  \n[Thread A] CRT locale is set to \"French_France.1252\"  \n[Thread A] locale::global is set to \"French_France.1252\"  \n  \n[Thread B] Per-thread locale is NOT enabled.  \n[Thread B] CRT locale is set to \"C\"  \n[Thread B] locale::global is set to \"French_France.1252\"  \n  \n[Thread main] Per-thread locale is NOT enabled.  \n[Thread main] CRT locale is set to \"C\"  \n[Thread main] locale::global is set to \"French_France.1252\"  \n```  \n  \n## Example  \n In this example, the main thread spawns two child threads. The first thread, Thread A, enables per-thread locale by calling `_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`. The second thread, Thread B, as well as the main thread, do not enable per-thread locale. Thread B then proceeds to change the locale using the [setlocale](../preprocessor/setlocale.md) function of the C Runtime Library.  \n  \n Since Thread B does not have per-thread locale enabled, the C Runtime Library functions in Thread B and in the main thread start using the \"french\" locale. The C Runtime Library functions in Thread A continue to use the \"C\" locale because Thread A has per-thread locale enabled. Also, since [setlocale](../preprocessor/setlocale.md) does not affect the Standard C++ Library locale, all Standard C++ Library objects continue to use the \"C\" locale.  \n  \n```  \n// multithread_locale_3.cpp  \n// compile with: /EHsc /MD  \n#include <clocale>  \n#include <cstdio>  \n#include <locale>  \n#include <process.h>  \n#include <windows.h>  \n  \n#define NUM_THREADS 2  \nusing namespace std;  \n  \nunsigned __stdcall RunThreadA(void *params);  \nunsigned __stdcall RunThreadB(void *params);  \n  \nBOOL localeSet = FALSE;  \nBOOL configThreadLocaleCalled = FALSE;  \nHANDLE printMutex = CreateMutex(NULL, FALSE, NULL);  \n  \nint main()  \n{  \n    HANDLE threads[NUM_THREADS];  \n  \n    unsigned aID;  \n    threads[0] = (HANDLE)_beginthreadex(  \n        NULL, 0, RunThreadA, NULL, 0, &aID);  \n  \n    unsigned bID;  \n    threads[1] = (HANDLE)_beginthreadex(  \n        NULL, 0, RunThreadB, NULL, 0, &bID);  \n  \n    WaitForMultipleObjects(2, threads, TRUE, INFINITE);  \n  \n    printf_s(\"[Thread main] Per-thread locale is NOT enabled.\\n\");  \n    printf_s(\"[Thread main] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread main] locale::global is set to \\\"%s\\\"\\n\",  \n        locale().name().c_str());  \n  \n    CloseHandle(threads[0]);  \n    CloseHandle(threads[1]);  \n    CloseHandle(printMutex);  \n  \n    return 0;  \n}  \n  \nunsigned __stdcall RunThreadA(void *params)  \n{  \n    _configthreadlocale(_ENABLE_PER_THREAD_LOCALE);  \n    configThreadLocaleCalled = TRUE;  \n    while (!localeSet)  \n        Sleep(100);  \n  \n    WaitForSingleObject(printMutex, INFINITE);  \n    printf_s(\"[Thread A] Per-thread locale is enabled.\\n\");  \n    printf_s(\"[Thread A] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread A] locale::global is set to \\\"%s\\\"\\n\\n\",  \n        locale().name().c_str());  \n    ReleaseMutex(printMutex);  \n  \n    return 1;  \n}  \n  \nunsigned __stdcall RunThreadB(void *params)  \n{  \n    while (!configThreadLocaleCalled)  \n        Sleep(100);  \n    setlocale(LC_ALL, \"french\");  \n    localeSet = TRUE;  \n  \n    WaitForSingleObject(printMutex, INFINITE);  \n    printf_s(\"[Thread B] Per-thread locale is NOT enabled.\\n\");  \n    printf_s(\"[Thread B] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread B] locale::global is set to \\\"%s\\\"\\n\\n\",  \n        locale().name().c_str());  \n    ReleaseMutex(printMutex);  \n  \n    return 1;  \n}  \n```  \n  \n```Output  \n[Thread B] Per-thread locale is NOT enabled.  \n[Thread B] CRT locale is set to \"French_France.1252\"  \n[Thread B] locale::global is set to \"C\"  \n  \n[Thread A] Per-thread locale is enabled.  \n[Thread A] CRT locale is set to \"C\"  \n[Thread A] locale::global is set to \"C\"  \n  \n[Thread main] Per-thread locale is NOT enabled.  \n[Thread main] CRT locale is set to \"French_France.1252\"  \n[Thread main] locale::global is set to \"C\"  \n```  \n  \n## Example  \n In this example, the main thread spawns two child threads. The first thread, Thread A, enables per-thread locale by calling `_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)`. The second thread, Thread B, as well as the main thread, do not enable per-thread locale. Thread B then proceeds to change the locale using the [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) method of the Standard C++ Library.  \n  \n Since Thread B does not have per-thread locale enabled, the C Runtime Library functions in Thread B and in the main thread start using the \"french\" locale. The C Runtime Library functions in Thread A continue to use the \"C\" locale because Thread A has per-thread locale enabled. However, since the [locale::global](http://msdn.microsoft.com/library/16e47251-a892-42d0-a6ea-ca17692e34d8) method changes the locale \"globally\", all Standard C++ Library objects in all threads start using the \"french\" locale.  \n  \n```  \n// multithread_locale_4.cpp  \n// compile with: /EHsc /MD  \n#include <clocale>  \n#include <cstdio>  \n#include <locale>  \n#include <process.h>  \n#include <windows.h>  \n  \n#define NUM_THREADS 2  \nusing namespace std;  \n  \nunsigned __stdcall RunThreadA(void *params);  \nunsigned __stdcall RunThreadB(void *params);  \n  \nBOOL localeSet = FALSE;  \nBOOL configThreadLocaleCalled = FALSE;  \nHANDLE printMutex = CreateMutex(NULL, FALSE, NULL);  \n  \nint main()  \n{  \n    HANDLE threads[NUM_THREADS];  \n  \n    unsigned aID;  \n    threads[0] = (HANDLE)_beginthreadex(  \n        NULL, 0, RunThreadA, NULL, 0, &aID);  \n  \n    unsigned bID;  \n    threads[1] = (HANDLE)_beginthreadex(  \n        NULL, 0, RunThreadB, NULL, 0, &bID);  \n  \n    WaitForMultipleObjects(2, threads, TRUE, INFINITE);  \n  \n    printf_s(\"[Thread main] Per-thread locale is NOT enabled.\\n\");  \n    printf_s(\"[Thread main] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread main] locale::global is set to \\\"%s\\\"\\n\",  \n        locale().name().c_str());  \n  \n    CloseHandle(threads[0]);  \n    CloseHandle(threads[1]);  \n    CloseHandle(printMutex);  \n  \n    return 0;  \n}  \n  \nunsigned __stdcall RunThreadA(void *params)  \n{  \n    _configthreadlocale(_ENABLE_PER_THREAD_LOCALE);  \n    configThreadLocaleCalled = TRUE;  \n    while (!localeSet)  \n        Sleep(100);  \n  \n    WaitForSingleObject(printMutex, INFINITE);  \n    printf_s(\"[Thread A] Per-thread locale is enabled.\\n\");  \n    printf_s(\"[Thread A] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread A] locale::global is set to \\\"%s\\\"\\n\\n\",  \n        locale().name().c_str());  \n    ReleaseMutex(printMutex);  \n  \n    return 1;  \n}  \n  \nunsigned __stdcall RunThreadB(void *params)  \n{  \n    while (!configThreadLocaleCalled)  \n        Sleep(100);  \n    locale::global(locale(\"french\"));  \n    localeSet = TRUE;  \n  \n    WaitForSingleObject(printMutex, INFINITE);  \n    printf_s(\"[Thread B] Per-thread locale is NOT enabled.\\n\");  \n    printf_s(\"[Thread B] CRT locale is set to \\\"%s\\\"\\n\",  \n        setlocale(LC_ALL, NULL));  \n    printf_s(\"[Thread B] locale::global is set to \\\"%s\\\"\\n\\n\",  \n        locale().name().c_str());  \n    ReleaseMutex(printMutex);  \n  \n    return 1;  \n}  \n```  \n  \n```Output  \n[Thread B] Per-thread locale is NOT enabled.  \n[Thread B] CRT locale is set to \"French_France.1252\"  \n[Thread B] locale::global is set to \"French_France.1252\"  \n  \n[Thread A] Per-thread locale is enabled.  \n[Thread A] CRT locale is set to \"C\"  \n[Thread A] locale::global is set to \"French_France.1252\"  \n  \n[Thread main] Per-thread locale is NOT enabled.  \n[Thread main] CRT locale is set to \"French_France.1252\"  \n[Thread main] locale::global is set to \"French_France.1252\"  \n```  \n  \n## See Also  \n [Multithreading Support for Older Code (Visual C++)](../parallel/multithreading-support-for-older-code-visual-cpp.md)   \n [_beginthread, _beginthreadex](../c-runtime-library/reference/beginthread-beginthreadex.md)   \n [_configthreadlocale](../c-runtime-library/reference/configthreadlocale.md)   \n [setlocale](../preprocessor/setlocale.md)   \n [Internationalization](../c-runtime-library/internationalization.md)   \n [Locale](../c-runtime-library/locale.md)   \n [\\<clocale>](../standard-library/clocale.md)   \n [\\<locale>](../standard-library/locale.md)   \n [locale Class](../standard-library/locale-class.md)"}