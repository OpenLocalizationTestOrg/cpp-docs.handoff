{"nodes":[{"pos":[12,59],"content":"static Storage-Class Specifier | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"static Storage-Class Specifier | Microsoft Docs","pos":[0,47]}]},{"content":"static Storage-Class Specifier","pos":[671,701]},{"content":"A variable declared at the internal level with the <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> storage-class specifier has a global lifetime but is visible only within the block in which it is declared.","pos":[702,871],"source":"A variable declared at the internal level with the **static** storage-class specifier has a global lifetime but is visible only within the block in which it is declared."},{"content":"For constant strings, using <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> is useful because it alleviates the overhead of frequent initialization in often-called functions.","pos":[872,1009],"source":" For constant strings, using **static** is useful because it alleviates the overhead of frequent initialization in often-called functions."},{"content":"Remarks","pos":[1018,1025]},{"content":"If you do not explicitly initialize a <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> variable, it is initialized to 0 by default.","pos":[1029,1122],"source":"If you do not explicitly initialize a **static** variable, it is initialized to 0 by default."},{"content":"Inside a function, <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> causes storage to be allocated and serves as a definition.","pos":[1123,1211],"source":" Inside a function, **static** causes storage to be allocated and serves as a definition."},{"content":"Internal static variables provide private, permanent storage visible to only a single function.","pos":[1212,1307]},{"content":"See Also","pos":[1316,1324]},{"content":"Static","pos":[1329,1335]}],"content":"---\ntitle: \"static Storage-Class Specifier | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"static variables, specifier\"\n  - \"storage classes, static\"\n  - \"static storage class specifiers\"\nms.assetid: 9bce361e-919b-46b9-8148-40d7ab0eb024\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# static Storage-Class Specifier\nA variable declared at the internal level with the **static** storage-class specifier has a global lifetime but is visible only within the block in which it is declared. For constant strings, using **static** is useful because it alleviates the overhead of frequent initialization in often-called functions.  \n  \n## Remarks  \n If you do not explicitly initialize a **static** variable, it is initialized to 0 by default. Inside a function, **static** causes storage to be allocated and serves as a definition. Internal static variables provide private, permanent storage visible to only a single function.  \n  \n## See Also  \n [Static](../misc/static-cpp.md)"}