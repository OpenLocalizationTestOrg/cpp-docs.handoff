{"nodes":[{"pos":[12,50],"content":"regex_constants Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"regex_constants Class | Microsoft Docs","pos":[0,38]}]},{"pos":[685,706],"content":"regex_constants Class","linkify":"regex_constants Class","nodes":[{"content":"regex_constants Class","pos":[0,21]}]},{"content":"Namespace for regular expression flags.","pos":[707,746]},{"pos":[755,761],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[920,927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[931,1028],"content":"The namespace <ph id=\"ph1\">`regex_constants`</ph> encapsulates several flag types and their associated flag values.","source":"The namespace `regex_constants` encapsulates several flag types and their associated flag values."},{"pos":[1037,1049],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1053,1073],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>regex&gt;","source":"**Header:** \\<regex>"},{"pos":[1080,1098],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1108,1179],"content":"<bpt id=\"p1\">&lt;a name=\"regex_constants__error_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  regex_constants::error_type","linkify":"<a name=\"regex_constants__error_type\"></a>  regex_constants::error_type","source":"<a name=\"regex_constants__error_type\"></a>  regex_constants::error_type"},{"content":"Flags for reporting regular expression syntax errors.","pos":[1183,1236]},{"pos":[1552,1559],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type is an enumerated type that describes an object that can hold error flags.","pos":[1563,1645]},{"content":"The distinct flag values are:","pos":[1646,1675]},{"pos":[1682,1763],"content":"<ph id=\"ph1\">`error_badbrace`</ph> -- the expression contained an invalid count in a { } expression","source":"`error_badbrace` -- the expression contained an invalid count in a { } expression"},{"pos":[1770,1888],"content":"<ph id=\"ph1\">`error_badrepeat`</ph> -- a repeat expression (one of '*', '', '+', '{' in most contexts) was not preceded by an expression","source":"`error_badrepeat` -- a repeat expression (one of '*', '', '+', '{' in most contexts) was not preceded by an expression"},{"pos":[1895,1960],"content":"<ph id=\"ph1\">`error_brace`</ph> -- the expression contained an unmatched '{' or '}'","source":"`error_brace` -- the expression contained an unmatched '{' or '}'"},{"pos":[1967,2032],"content":"<ph id=\"ph1\">`error_brack`</ph> -- the expression contained an unmatched '[' or ']'","source":"`error_brack` -- the expression contained an unmatched '[' or ']'"},{"pos":[2039,2116],"content":"<ph id=\"ph1\">`error_collate`</ph> -- the expression contained an invalid collating element name","source":"`error_collate` -- the expression contained an invalid collating element name"},{"pos":[2123,2197],"content":"<ph id=\"ph1\">`error_complexity`</ph> -- an attempted match failed because it was too complex","source":"`error_complexity` -- an attempted match failed because it was too complex"},{"pos":[2204,2277],"content":"<ph id=\"ph1\">`error_ctype`</ph> -- the expression contained an invalid character class name","source":"`error_ctype` -- the expression contained an invalid character class name"},{"pos":[2284,2353],"content":"<ph id=\"ph1\">`error_escape`</ph> -- the expression contained an invalid escape sequence","source":"`error_escape` -- the expression contained an invalid escape sequence"},{"pos":[2360,2425],"content":"<ph id=\"ph1\">`error_paren`</ph> -- the expression contained an unmatched '(' or ')'","source":"`error_paren` -- the expression contained an unmatched '(' or ')'"},{"pos":[2432,2510],"content":"<ph id=\"ph1\">`error_range`</ph> -- the expression contained an invalid character range specifier","source":"`error_range` -- the expression contained an invalid character range specifier"},{"pos":[2517,2619],"content":"<ph id=\"ph1\">`error_space`</ph> -- parsing a regular expression failed because there were not enough resources available","source":"`error_space` -- parsing a regular expression failed because there were not enough resources available"},{"pos":[2626,2714],"content":"<ph id=\"ph1\">`error_stack`</ph> -- an attempted match failed because there was not enough memory available","source":"`error_stack` -- an attempted match failed because there was not enough memory available"},{"pos":[2721,2790],"content":"<ph id=\"ph1\">`error_backref`</ph> -- the expression contained an invalid back reference","source":"`error_backref` -- the expression contained an invalid back reference"},{"pos":[2800,2881],"content":"<bpt id=\"p1\">&lt;a name=\"regex_constants__match_flag_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  regex_constants::match_flag_type","linkify":"<a name=\"regex_constants__match_flag_type\"></a>  regex_constants::match_flag_type","source":"<a name=\"regex_constants__match_flag_type\"></a>  regex_constants::match_flag_type"},{"content":"Flags for regular expression matching options.","pos":[2885,2931]},{"pos":[3210,3217],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type is a bitmask type that describes options to be used when matching a text sequence against a regular expression and format flags to be used when replacing text.","pos":[3221,3389]},{"content":"Options can be combined with <ph id=\"ph1\">`|`</ph>.","pos":[3390,3423],"source":" Options can be combined with `|`."},{"content":"The match options are:","pos":[3430,3452]},{"pos":[3481,3581],"content":"<ph id=\"ph1\">`match_not_bol`</ph> -- do not treat the first position in the target sequence as the beginning of a line","source":"`match_not_bol` -- do not treat the first position in the target sequence as the beginning of a line"},{"pos":[3588,3689],"content":"<ph id=\"ph1\">`match_not_eol`</ph> -- do not treat the past-the-end position in the target sequence as the end of a line","source":"`match_not_eol` -- do not treat the past-the-end position in the target sequence as the end of a line"},{"pos":[3696,3796],"content":"<ph id=\"ph1\">`match_not_bow`</ph> -- do not treat the first position in the target sequence as the beginning of a word","source":"`match_not_bow` -- do not treat the first position in the target sequence as the beginning of a word"},{"pos":[3803,3904],"content":"<ph id=\"ph1\">`match_not_eow`</ph> -- do not treat the past-the-end position in the target sequence as the end of a word","source":"`match_not_eow` -- do not treat the past-the-end position in the target sequence as the end of a word"},{"pos":[3911,3984],"content":"<ph id=\"ph1\">`match_any`</ph> -- if more than one match is possible any match is acceptable","source":"`match_any` -- if more than one match is possible any match is acceptable"},{"pos":[3991,4055],"content":"<ph id=\"ph1\">`match_not_null`</ph> -- do not treat an empty subsequence as a match","source":"`match_not_null` -- do not treat an empty subsequence as a match"},{"pos":[4062,4160],"content":"<ph id=\"ph1\">`match_continuous`</ph> -- do not search for matches other than at the beginning of the target sequence","source":"`match_continuous` -- do not search for matches other than at the beginning of the target sequence"},{"pos":[4167,4269],"content":"<ph id=\"ph1\">`match_prev_avail`</ph><ph id=\"ph2\"> -- </ph><ph id=\"ph3\">`--first`</ph> is a valid iterator; ignore <ph id=\"ph4\">`match_not_bol`</ph> and <ph id=\"ph5\">`match_not_bow`</ph> if set","source":"`match_prev_avail` -- `--first` is a valid iterator; ignore `match_not_bol` and `match_not_bow` if set"},{"content":"The format flags are:","pos":[4276,4297]},{"pos":[4304,4351],"content":"<ph id=\"ph1\">`format_default`</ph> -- use ECMAScript format rules","source":"`format_default` -- use ECMAScript format rules"},{"pos":[4358,4394],"content":"<ph id=\"ph1\">`format_sed`</ph> -- use sed format rules","source":"`format_sed` -- use sed format rules"},{"pos":[4401,4480],"content":"<ph id=\"ph1\">`format_no_copy`</ph> -- do not copy text that does not match the regular expression","source":"`format_no_copy` -- do not copy text that does not match the regular expression"},{"pos":[4487,4555],"content":"<ph id=\"ph1\">`format_first_only`</ph> -- do not search for matches after the first one","source":"`format_first_only` -- do not search for matches after the first one"},{"pos":[4565,4652],"content":"<bpt id=\"p1\">&lt;a name=\"regex_constants__syntax_option_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  regex_constants::syntax_option_type","linkify":"<a name=\"regex_constants__syntax_option_type\"></a>  regex_constants::syntax_option_type","source":"<a name=\"regex_constants__syntax_option_type\"></a>  regex_constants::syntax_option_type"},{"content":"Flags for selecting syntax options.","pos":[4656,4691]},{"pos":[4902,4909],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type is a bitmask type that describes language specifiers and syntax modifiers to be used when compiling a regular expression.","pos":[4913,5043]},{"content":"Options can be combined with <ph id=\"ph1\">`|`</ph>.","pos":[5044,5077],"source":" Options can be combined with `|`."},{"content":"No more than one language specifier should be used at a time.","pos":[5078,5139]},{"content":"The language specifiers are:","pos":[5146,5174]},{"pos":[5181,5206],"content":"<ph id=\"ph1\">`basic`</ph> -- compile as BRE","source":"`basic` -- compile as BRE"},{"pos":[5213,5241],"content":"<ph id=\"ph1\">`extended`</ph> -- compile as ERE","source":"`extended` -- compile as ERE"},{"pos":[5248,5285],"content":"<ph id=\"ph1\">`ECMAScript`</ph> -- compile as ECMAScript","source":"`ECMAScript` -- compile as ECMAScript"},{"pos":[5292,5315],"content":"<ph id=\"ph1\">`awk`</ph> -- compile as awk","source":"`awk` -- compile as awk"},{"pos":[5322,5347],"content":"<ph id=\"ph1\">`grep`</ph> -- compile as grep","source":"`grep` -- compile as grep"},{"pos":[5354,5381],"content":"<ph id=\"ph1\">`egrep`</ph> -- compile as egrep","source":"`egrep` -- compile as egrep"},{"content":"The syntax modifiers are:","pos":[5388,5413]},{"pos":[5420,5460],"content":"<ph id=\"ph1\">`icase`</ph> -- make matches case-insensitive","source":"`icase` -- make matches case-insensitive"},{"pos":[5467,5550],"content":"<ph id=\"ph1\">`nosubs`</ph> -- the implementaton need not keep track of the contents of capture groups","source":"`nosubs` -- the implementaton need not keep track of the contents of capture groups"},{"pos":[5557,5676],"content":"<ph id=\"ph1\">`optimize`</ph> -- the implementation should emphasize speed of matching rather than speed of regular expression compilation","source":"`optimize` -- the implementation should emphasize speed of matching rather than speed of regular expression compilation"},{"pos":[5683,5725],"content":"<ph id=\"ph1\">`collate`</ph> -- make matches locale-sensitive","source":"`collate` -- make matches locale-sensitive"},{"pos":[5734,5742],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>regex&gt;<ept id=\"p1\">](../standard-library/regex.md)</ept><ph id=\"ph2\"> </ph>","pos":[5746,5787],"source":"[\\<regex>](../standard-library/regex.md) "},{"content":"<bpt id=\"p1\"> [</bpt>regex_constants<ept id=\"p1\">](../standard-library/regex-constants-class.md)</ept>","pos":[5790,5854],"source":" [regex_constants](../standard-library/regex-constants-class.md)"}],"content":"---\ntitle: \"regex_constants Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::tr1::regex_constants\"\n  - \"std.tr1.regex_constants\"\n  - \"regex_constants\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"regex_constants class [TR1]\"\nms.assetid: 4a69c0ba-c46d-46e4-bd29-6f4efb805f26\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# regex_constants Class\nNamespace for regular expression flags.  \n  \n## Syntax  \n  \n```  \nnamespace regex_constants {  \n    typedef T1 syntax_option_type;  \n    typedef T2 match_flag_type;  \n    typedef T3 error_type;  \n }  \n```  \n  \n## Remarks  \n The namespace `regex_constants` encapsulates several flag types and their associated flag values.  \n  \n## Requirements  \n **Header:** \\<regex>  \n  \n **Namespace:** std  \n  \n##  <a name=\"regex_constants__error_type\"></a>  regex_constants::error_type  \n Flags for reporting regular expression syntax errors.  \n  \n```  \ntypedef T3 error_type;  \nstatic const error_type error_badbrace,\n    error_badrepeat,\n    error_brace,  \n    error_brack,\n    error_collate,\n    error_complexity,\n    error_ctype,  \n    error_escape,\n    error_paren,\n    error_range,\n    error_space,  \n    error_stack,\n    error_backref;  \n```  \n  \n### Remarks  \n The type is an enumerated type that describes an object that can hold error flags. The distinct flag values are:  \n  \n `error_badbrace` -- the expression contained an invalid count in a { } expression  \n  \n `error_badrepeat` -- a repeat expression (one of '*', '', '+', '{' in most contexts) was not preceded by an expression  \n  \n `error_brace` -- the expression contained an unmatched '{' or '}'  \n  \n `error_brack` -- the expression contained an unmatched '[' or ']'  \n  \n `error_collate` -- the expression contained an invalid collating element name  \n  \n `error_complexity` -- an attempted match failed because it was too complex  \n  \n `error_ctype` -- the expression contained an invalid character class name  \n  \n `error_escape` -- the expression contained an invalid escape sequence  \n  \n `error_paren` -- the expression contained an unmatched '(' or ')'  \n  \n `error_range` -- the expression contained an invalid character range specifier  \n  \n `error_space` -- parsing a regular expression failed because there were not enough resources available  \n  \n `error_stack` -- an attempted match failed because there was not enough memory available  \n  \n `error_backref` -- the expression contained an invalid back reference  \n  \n##  <a name=\"regex_constants__match_flag_type\"></a>  regex_constants::match_flag_type  \n Flags for regular expression matching options.  \n  \n```  \ntypedef T2 match_flag_type;  \nstatic const match_flag_type match_any,\n    match_default,\n    match_not_bol,  \n    match_not_bow,\n    match_continuous,\n    match_not_eol,\n    match_not_eow,  \n    match_not_null,\n    match_partial,\n    match_prev_avail;  \n```  \n  \n### Remarks  \n The type is a bitmask type that describes options to be used when matching a text sequence against a regular expression and format flags to be used when replacing text. Options can be combined with `|`.  \n  \n The match options are:  \n  \n `match_default`  \n  \n `match_not_bol` -- do not treat the first position in the target sequence as the beginning of a line  \n  \n `match_not_eol` -- do not treat the past-the-end position in the target sequence as the end of a line  \n  \n `match_not_bow` -- do not treat the first position in the target sequence as the beginning of a word  \n  \n `match_not_eow` -- do not treat the past-the-end position in the target sequence as the end of a word  \n  \n `match_any` -- if more than one match is possible any match is acceptable  \n  \n `match_not_null` -- do not treat an empty subsequence as a match  \n  \n `match_continuous` -- do not search for matches other than at the beginning of the target sequence  \n  \n `match_prev_avail` -- `--first` is a valid iterator; ignore `match_not_bol` and `match_not_bow` if set  \n  \n The format flags are:  \n  \n `format_default` -- use ECMAScript format rules  \n  \n `format_sed` -- use sed format rules  \n  \n `format_no_copy` -- do not copy text that does not match the regular expression  \n  \n `format_first_only` -- do not search for matches after the first one  \n  \n##  <a name=\"regex_constants__syntax_option_type\"></a>  regex_constants::syntax_option_type  \n Flags for selecting syntax options.  \n  \n```  \ntypedef T1 syntax_option_type;  \nstatic const syntax_option_type awk,\n    basic,\n    collate,\n    ECMAScript,  \n    egrep,\n    extended,\n    grep,\n    icase,\n    nosubs,\n    optimize;  \n```  \n  \n### Remarks  \n The type is a bitmask type that describes language specifiers and syntax modifiers to be used when compiling a regular expression. Options can be combined with `|`. No more than one language specifier should be used at a time.  \n  \n The language specifiers are:  \n  \n `basic` -- compile as BRE  \n  \n `extended` -- compile as ERE  \n  \n `ECMAScript` -- compile as ECMAScript  \n  \n `awk` -- compile as awk  \n  \n `grep` -- compile as grep  \n  \n `egrep` -- compile as egrep  \n  \n The syntax modifiers are:  \n  \n `icase` -- make matches case-insensitive  \n  \n `nosubs` -- the implementaton need not keep track of the contents of capture groups  \n  \n `optimize` -- the implementation should emphasize speed of matching rather than speed of regular expression compilation  \n  \n `collate` -- make matches locale-sensitive  \n  \n## See Also  \n [\\<regex>](../standard-library/regex.md)   \n [regex_constants](../standard-library/regex-constants-class.md)\n"}