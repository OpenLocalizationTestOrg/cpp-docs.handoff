<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10813220e9aa07f0c694a57607c7cd98def0d59a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\alignof-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a481fbde32fcfd26424ecd108825e1967077094</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc840248e0200a732c1b7aedaedeba776364e2f1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__alignof Operator | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__alignof Operator</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>C++11 introduces the <ph id="ph1">`alignof`</ph> operator that returns the alignment, in bytes, of the specified type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For maximum portability, you should use the alignof operator instead of the Microsoft-specific __alignof operator.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Returns a value of type <bpt id="p1">**</bpt>size_t<ept id="p1">**</ept> that is the alignment requirement of the type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>__alignof( char )</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>__alignof( short )</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>__alignof( int )</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>__alignof( <ph id="ph1">\_</ph>_int64 )</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>__alignof( float )</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>__alignof( double )</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>__alignof( char<ph id="ph1">\*</ph> )</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__alignof`</ph> value is the same as the value for <ph id="ph2">`sizeof`</ph> for basic types.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Consider, however, this example:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`__alignof`</ph> value is the alignment requirement of the largest element in the structure.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Similarly, for</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>is equal to <ph id="ph1">`32`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>One use for <ph id="ph1">`__alignof`</ph> would be as a parameter to one of your own memory-allocation routines.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, given the following defined structure <ph id="ph1">`S`</ph>, you could call a memory-allocation routine named <ph id="ph2">`aligned_malloc`</ph> to allocate memory on a particular alignment boundary.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information on modifying alignment, see:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>pack</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>align</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>__unaligned</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>/Zp (Struct Member Alignment)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Examples of Structure Alignment<ept id="p1">](../build/examples-of-structure-alignment.md)</ept> (x64 specific)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information on differences in alignment in code for x86 and x64, see:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Conflicts with the x86 Compiler</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Expressions with Unary Operators</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>