{"nodes":[{"pos":[12,47],"content":"3.2 Lock Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"3.2 Lock Functions | Microsoft Docs","pos":[0,35]}]},{"content":"3.2 Lock Functions","pos":[527,545]},{"content":"The functions described in this section manipulate locks used for synchronization.","pos":[546,628]},{"content":"For the following functions, the lock variable must have type <bpt id=\"p1\">**</bpt>omp_lock_t<ept id=\"p1\">**</ept>.","pos":[635,712],"source":"For the following functions, the lock variable must have type **omp_lock_t**."},{"content":"This variable must only be accessed through these functions.","pos":[713,773]},{"content":"All lock functions require an argument that has a pointer to <bpt id=\"p1\">**</bpt>omp_lock_t<ept id=\"p1\">**</ept> type.","pos":[774,855],"source":" All lock functions require an argument that has a pointer to **omp_lock_t** type."},{"pos":[865,920],"content":"The <ph id=\"ph1\">`omp_init_lock`</ph> function initializes a simple lock.","source":"The `omp_init_lock` function initializes a simple lock."},{"pos":[930,984],"content":"The <ph id=\"ph1\">`omp_destroy_lock`</ph> function removes a simple lock.","source":"The `omp_destroy_lock` function removes a simple lock."},{"pos":[994,1061],"content":"The <ph id=\"ph1\">`omp_set_lock`</ph> function waits until a simple lock is available.","source":"The `omp_set_lock` function waits until a simple lock is available."},{"pos":[1071,1124],"content":"The <ph id=\"ph1\">`omp_unset_lock`</ph> function releases a simple lock.","source":"The `omp_unset_lock` function releases a simple lock."},{"pos":[1134,1183],"content":"The <ph id=\"ph1\">`omp_test_lock`</ph> function tests a simple lock.","source":"The `omp_test_lock` function tests a simple lock."},{"content":"For the following functions, the lock variable must have type <bpt id=\"p1\">**</bpt>omp_nest_lock_t<ept id=\"p1\">**</ept>.","pos":[1190,1272],"source":"For the following functions, the lock variable must have type **omp_nest_lock_t**."},{"content":"This variable must only be accessed through these functions.","pos":[1274,1334]},{"content":"All nestable lock functions require an argument that has a pointer to <bpt id=\"p1\">**</bpt>omp_nest_lock_t<ept id=\"p1\">**</ept> type.","pos":[1335,1430],"source":" All nestable lock functions require an argument that has a pointer to **omp_nest_lock_t** type."},{"pos":[1440,1502],"content":"The <ph id=\"ph1\">`omp_init_nest_lock`</ph> function initializes a nestable lock.","source":"The `omp_init_nest_lock` function initializes a nestable lock."},{"pos":[1512,1573],"content":"The <ph id=\"ph1\">`omp_destroy_nest_lock`</ph> function removes a nestable lock.","source":"The `omp_destroy_nest_lock` function removes a nestable lock."},{"pos":[1583,1657],"content":"The <ph id=\"ph1\">`omp_set_nest_lock`</ph> function waits until a nestable lock is available.","source":"The `omp_set_nest_lock` function waits until a nestable lock is available."},{"pos":[1667,1727],"content":"The <ph id=\"ph1\">`omp_unset_nest_lock`</ph> function releases a nestable lock.","source":"The `omp_unset_nest_lock` function releases a nestable lock."},{"pos":[1737,1793],"content":"The <ph id=\"ph1\">`omp_test_nest_lock`</ph> function tests a nestable lock.","source":"The `omp_test_nest_lock` function tests a nestable lock."},{"content":"The OpenMP lock functions access the lock variable in such a way that they always read and update the most current value of the lock variable.","pos":[1800,1942]},{"content":"Therefore, it is not necessary for an OpenMP program to include explicit <bpt id=\"p1\">**</bpt>flush<ept id=\"p1\">**</ept> directives to ensure that the lock variable's value is consistent among different threads.","pos":[1943,2116],"source":" Therefore, it is not necessary for an OpenMP program to include explicit **flush** directives to ensure that the lock variable's value is consistent among different threads."},{"content":"(There may be a need for <bpt id=\"p1\">**</bpt>flush<ept id=\"p1\">**</ept> directives to make the values of other variables consistent.)","pos":[2117,2213],"source":" (There may be a need for **flush** directives to make the values of other variables consistent.)"}],"content":"---\ntitle: \"3.2 Lock Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 0ec855c6-55a9-49d7-bee4-5edae6e86a1b\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# 3.2 Lock Functions\nThe functions described in this section manipulate locks used for synchronization.  \n  \n For the following functions, the lock variable must have type **omp_lock_t**. This variable must only be accessed through these functions. All lock functions require an argument that has a pointer to **omp_lock_t** type.  \n  \n-   The `omp_init_lock` function initializes a simple lock.  \n  \n-   The `omp_destroy_lock` function removes a simple lock.  \n  \n-   The `omp_set_lock` function waits until a simple lock is available.  \n  \n-   The `omp_unset_lock` function releases a simple lock.  \n  \n-   The `omp_test_lock` function tests a simple lock.  \n  \n For the following functions, the lock variable must have type **omp_nest_lock_t**.  This variable must only be accessed through these functions. All nestable lock functions require an argument that has a pointer to **omp_nest_lock_t** type.  \n  \n-   The `omp_init_nest_lock` function initializes a nestable lock.  \n  \n-   The `omp_destroy_nest_lock` function removes a nestable lock.  \n  \n-   The `omp_set_nest_lock` function waits until a nestable lock is available.  \n  \n-   The `omp_unset_nest_lock` function releases a nestable lock.  \n  \n-   The `omp_test_nest_lock` function tests a nestable lock.  \n  \n The OpenMP lock functions access the lock variable in such a way that they always read and update the most current value of the lock variable. Therefore, it is not necessary for an OpenMP program to include explicit **flush** directives to ensure that the lock variable's value is consistent among different threads. (There may be a need for **flush** directives to make the values of other variables consistent.)"}