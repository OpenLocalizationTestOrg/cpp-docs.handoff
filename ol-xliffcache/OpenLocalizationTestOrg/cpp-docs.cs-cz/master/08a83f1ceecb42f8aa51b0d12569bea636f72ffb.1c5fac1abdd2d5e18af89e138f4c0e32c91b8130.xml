{"nodes":[{"pos":[12,43],"content":"com::ptr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"com::ptr Class | Microsoft Docs","pos":[0,31]}]},{"content":"com::ptr Class","pos":[649,663]},{"content":"A wrapper for a COM object that can be used as a member of a CLR class.","pos":[664,735]},{"content":"The wrapper also automates lifetime management of the COM object, releasing all owned references on the object when its destructor is called.","pos":[737,878]},{"content":"Analogous to <bpt id=\"p1\">[</bpt>CComPtr Class<ept id=\"p1\">](../atl/reference/ccomptr-class.md)</ept>.","pos":[879,943],"source":" Analogous to [CComPtr Class](../atl/reference/ccomptr-class.md)."},{"content":"Syntax","pos":[952,958]},{"content":"Parameters","pos":[1035,1045]},{"content":"COM interface.","pos":[1070,1084]},{"content":"Remarks","pos":[1093,1100]},{"pos":[1104,1229],"content":"A <ph id=\"ph1\">`com::ptr`</ph> can also be used as a local function variable to simplify various COM tasks and to automate lifetime management.","source":"A `com::ptr` can also be used as a local function variable to simplify various COM tasks and to automate lifetime management."},{"pos":[1236,1517],"content":"A <ph id=\"ph1\">`com::ptr`</ph> cannot be used directly as a function parameter; use a <bpt id=\"p1\">[</bpt>Tracking Reference Operator<ept id=\"p1\">](../windows/tracking-reference-operator-cpp-component-extensions.md)</ept> or a <bpt id=\"p2\">[</bpt>Handle to Object Operator (^)<ept id=\"p2\">](../windows/handle-to-object-operator-hat-cpp-component-extensions.md)</ept> instead.","source":"A `com::ptr` cannot be used directly as a function parameter; use a [Tracking Reference Operator](../windows/tracking-reference-operator-cpp-component-extensions.md) or a [Handle to Object Operator (^)](../windows/handle-to-object-operator-hat-cpp-component-extensions.md) instead."},{"pos":[1524,1603],"content":"A <ph id=\"ph1\">`com::ptr`</ph> cannot be directly returned from a function; use a handle instead.","source":"A `com::ptr` cannot be directly returned from a function; use a handle instead."},{"content":"Example","pos":[1612,1619]},{"content":"This example implements a CLR class that uses a <ph id=\"ph1\">`com::ptr`</ph> to wrap its private member <ph id=\"ph2\">`IXMLDOMDocument`</ph> object.","pos":[1623,1734],"source":"This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object."},{"content":"Calling the public methods of the class results in calls to the contained <ph id=\"ph1\">`IXMLDOMDocument`</ph> object.","pos":[1736,1835],"source":"  Calling the public methods of the class results in calls to the contained `IXMLDOMDocument` object."},{"content":"The sample creates an instance of an XML document, fills it with some simple XML, and does a simplified walk of the nodes in the parsed document tree to print the XML to the console.","pos":[1837,2019]},{"content":"Requirements","pos":[5125,5137]},{"pos":[5141,5175],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\com\\ptr.h&gt;","source":"**Header file** \\<msclr\\com\\ptr.h>"},{"pos":[5182,5206],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr::com","source":"**Namespace** msclr::com"},{"content":"See Also","pos":[5215,5223]},{"content":"C++ Support Library","pos":[5228,5247]},{"content":"ptr Members","pos":[5288,5299]}],"content":"---\ntitle: \"com::ptr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"com::ptr\"\n  - \"msclr::com::ptr\"\n  - \"msclr.com.ptr\"\n  - \"com.ptr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ptr class\"\nms.assetid: 0144d0e4-919c-45f9-a3f8-fbc9edba32bf\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# com::ptr Class\nA wrapper for a COM object that can be used as a member of a CLR class.  The wrapper also automates lifetime management of the COM object, releasing all owned references on the object when its destructor is called. Analogous to [CComPtr Class](../atl/reference/ccomptr-class.md).  \n  \n## Syntax  \n  \n```  \ntemplate<class _interface_type>  \nref class ptr;  \n```  \n  \n#### Parameters  \n `_interface_type`  \n COM interface.  \n  \n## Remarks  \n A `com::ptr` can also be used as a local function variable to simplify various COM tasks and to automate lifetime management.  \n  \n A `com::ptr` cannot be used directly as a function parameter; use a [Tracking Reference Operator](../windows/tracking-reference-operator-cpp-component-extensions.md) or a [Handle to Object Operator (^)](../windows/handle-to-object-operator-hat-cpp-component-extensions.md) instead.  \n  \n A `com::ptr` cannot be directly returned from a function; use a handle instead.  \n  \n## Example  \n This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object.  Calling the public methods of the class results in calls to the contained `IXMLDOMDocument` object.  The sample creates an instance of an XML document, fills it with some simple XML, and does a simplified walk of the nodes in the parsed document tree to print the XML to the console.  \n  \n```  \n// comptr.cpp  \n// compile with: /clr /link msxml2.lib  \n#include <msxml2.h>  \n#include <msclr\\com\\ptr.h>  \n  \n#import <msxml3.dll> raw_interfaces_only  \n  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \nusing namespace msclr;  \n  \n// a ref class that uses a com::ptr to contain an   \n// IXMLDOMDocument object  \nref class XmlDocument {  \npublic:  \n   // construct the internal com::ptr with a null interface  \n   // and use CreateInstance to fill it  \n   XmlDocument(String^ progid) {  \n      m_ptrDoc.CreateInstance(progid);     \n   }  \n  \n   void LoadXml(String^ xml) {  \n      pin_ptr<const wchar_t> pinnedXml = PtrToStringChars(xml);  \n      BSTR bstr = NULL;  \n  \n      try {  \n         // load some XML into the document  \n         bstr = ::SysAllocString(pinnedXml);  \n         if (NULL == bstr) {  \n            throw gcnew OutOfMemoryException;  \n         }  \n         VARIANT_BOOL bIsSuccessful = false;  \n         // use operator -> to call IXMODOMDocument member function  \n         Marshal::ThrowExceptionForHR(m_ptrDoc->loadXML(bstr, &bIsSuccessful));  \n      }  \n      finally {  \n         ::SysFreeString(bstr);  \n      }  \n   }  \n  \n   // simplified function to write just the first xml node to the console  \n   void WriteXml() {  \n      IXMLDOMNode* pNode = NULL;  \n  \n      try {  \n         // the first child of the document is the first real xml node  \n         Marshal::ThrowExceptionForHR(m_ptrDoc->get_firstChild(&pNode));  \n         if (NULL != pNode) {  \n            WriteNode(pNode);  \n         }  \n      }  \n      finally {  \n         if (NULL != pNode) {  \n            pNode->Release();  \n         }  \n      }  \n   }  \n  \n   // note that the destructor will call the com::ptr destructor  \n   // and automatically release the reference to the COM object  \n  \nprivate:  \n   // simplified function that only writes the node  \n   void WriteNode(IXMLDOMNode* pNode) {  \n      BSTR bstr = NULL;  \n  \n      try {  \n         // write out the name and text properties  \n         Marshal::ThrowExceptionForHR(pNode->get_nodeName(&bstr));  \n         String^ strName = gcnew String(bstr);  \n         Console::Write(\"<{0}>\", strName);  \n         ::SysFreeString(bstr);  \n         bstr = NULL;  \n  \n         Marshal::ThrowExceptionForHR(pNode->get_text(&bstr));  \n         Console::Write(gcnew String(bstr));  \n         ::SysFreeString(bstr);  \n         bstr = NULL;  \n  \n         Console::WriteLine(\"</{0}>\", strName);  \n      }  \n      finally {  \n         ::SysFreeString(bstr);  \n      }  \n   }  \n  \n   com::ptr<IXMLDOMDocument> m_ptrDoc;  \n};  \n  \n// use the ref class to handle an XML DOM Document object  \nint main() {  \n   try {  \n      // create the class from a progid string  \n      XmlDocument doc(\"Msxml2.DOMDocument.3.0\");  \n  \n      // stream some xml into the document  \n      doc.LoadXml(\"<word>persnickety</word>\");  \n  \n      // write the document to the console  \n      doc.WriteXml();  \n   }  \n   catch (Exception^ e) {  \n      Console::WriteLine(e);     \n   }  \n}  \n```  \n  \n```Output  \n<word>persnickety</word>  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\com\\ptr.h>  \n  \n **Namespace** msclr::com  \n  \n## See Also  \n [C++ Support Library](../dotnet/cpp-support-library.md)   \n [ptr Members](../dotnet/ptr-members.md)"}