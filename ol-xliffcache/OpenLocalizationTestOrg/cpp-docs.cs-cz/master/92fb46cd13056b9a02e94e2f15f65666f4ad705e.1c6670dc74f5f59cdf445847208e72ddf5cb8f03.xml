{"nodes":[{"pos":[12,49],"content":"CPropertySheet Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CPropertySheet Class | Microsoft Docs","pos":[0,37]}]},{"pos":[708,728],"content":"CPropertySheet Class","linkify":"CPropertySheet Class","nodes":[{"content":"CPropertySheet Class","pos":[0,20]}]},{"content":"Represents property sheets, also known as tab dialog boxes.","pos":[729,788]},{"pos":[797,803],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[864,871],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[881,900],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[907,911]},{"content":"Description","pos":[912,923]},{"pos":[961,1026],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::CPropertySheet<ept id=\"p1\">](#cpropertysheet__cpropertysheet)</ept>","source":"[CPropertySheet::CPropertySheet](#cpropertysheet__cpropertysheet)"},{"pos":[1027,1064],"content":"Constructs a <ph id=\"ph1\">`CPropertySheet`</ph> object.","source":"Constructs a `CPropertySheet` object."},{"pos":[1075,1089],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1096,1100]},{"content":"Description","pos":[1101,1112]},{"pos":[1150,1201],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::AddPage<ept id=\"p1\">](#cpropertysheet__addpage)</ept>","source":"[CPropertySheet::AddPage](#cpropertysheet__addpage)"},{"content":"Adds a page to the property sheet.","pos":[1202,1236]},{"pos":[1241,1296],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::Construct<ept id=\"p1\">](#cpropertysheet__construct)</ept>","source":"[CPropertySheet::Construct](#cpropertysheet__construct)"},{"pos":[1297,1334],"content":"Constructs a <ph id=\"ph1\">`CPropertySheet`</ph> object.","source":"Constructs a `CPropertySheet` object."},{"pos":[1339,1388],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::Create<ept id=\"p1\">](#cpropertysheet__create)</ept>","source":"[CPropertySheet::Create](#cpropertysheet__create)"},{"content":"Displays a modeless property sheet.","pos":[1389,1424]},{"pos":[1429,1480],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::DoModal<ept id=\"p1\">](#cpropertysheet__domodal)</ept>","source":"[CPropertySheet::DoModal](#cpropertysheet__domodal)"},{"content":"Displays a modal property sheet.","pos":[1481,1513]},{"pos":[1518,1589],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::EnableStackedTabs<ept id=\"p1\">](#cpropertysheet__enablestackedtabs)</ept>","source":"[CPropertySheet::EnableStackedTabs](#cpropertysheet__enablestackedtabs)"},{"content":"Indicates whether the property sheet uses stacked or scrolling tabs.","pos":[1590,1658]},{"pos":[1663,1718],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::EndDialog<ept id=\"p1\">](#cpropertysheet__enddialog)</ept>","source":"[CPropertySheet::EndDialog](#cpropertysheet__enddialog)"},{"content":"Terminates the property sheet.","pos":[1719,1749]},{"pos":[1754,1819],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::GetActiveIndex<ept id=\"p1\">](#cpropertysheet__getactiveindex)</ept>","source":"[CPropertySheet::GetActiveIndex](#cpropertysheet__getactiveindex)"},{"content":"Retrieves the index of the active page of the property sheet.","pos":[1820,1881]},{"pos":[1886,1949],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::GetActivePage<ept id=\"p1\">](#cpropertysheet__getactivepage)</ept>","source":"[CPropertySheet::GetActivePage](#cpropertysheet__getactivepage)"},{"content":"Returns the active page object.","pos":[1950,1981]},{"pos":[1986,2037],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::GetPage<ept id=\"p1\">](#cpropertysheet__getpage)</ept>","source":"[CPropertySheet::GetPage](#cpropertysheet__getpage)"},{"content":"Retrieves a pointer to the specified page.","pos":[2038,2080]},{"pos":[2085,2146],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::GetPageCount<ept id=\"p1\">](#cpropertysheet__getpagecount)</ept>","source":"[CPropertySheet::GetPageCount](#cpropertysheet__getpagecount)"},{"content":"Retrieves the number of pages in the property sheet.","pos":[2147,2199]},{"pos":[2204,2265],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::GetPageIndex<ept id=\"p1\">](#cpropertysheet__getpageindex)</ept>","source":"[CPropertySheet::GetPageIndex](#cpropertysheet__getpageindex)"},{"content":"Retrieves the index of the specified page of the property sheet.","pos":[2266,2330]},{"pos":[2335,2398],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::GetTabControl<ept id=\"p1\">](#cpropertysheet__gettabcontrol)</ept>","source":"[CPropertySheet::GetTabControl](#cpropertysheet__gettabcontrol)"},{"content":"Retrieves a pointer to a tab control.","pos":[2399,2436]},{"pos":[2441,2504],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::MapDialogRect<ept id=\"p1\">](#cpropertysheet__mapdialogrect)</ept>","source":"[CPropertySheet::MapDialogRect](#cpropertysheet__mapdialogrect)"},{"content":"Converts the dialog-box units of a rectangle to screen units.","pos":[2505,2566]},{"pos":[2571,2632],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::OnInitDialog<ept id=\"p1\">](#cpropertysheet__oninitdialog)</ept>","source":"[CPropertySheet::OnInitDialog](#cpropertysheet__oninitdialog)"},{"content":"Override to augment property sheet initialization.","pos":[2633,2683]},{"pos":[2688,2747],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::PressButton<ept id=\"p1\">](#cpropertysheet__pressbutton)</ept>","source":"[CPropertySheet::PressButton](#cpropertysheet__pressbutton)"},{"content":"Simulates the choice of the specified button in a property sheet.","pos":[2748,2813]},{"pos":[2818,2875],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::RemovePage<ept id=\"p1\">](#cpropertysheet__removepage)</ept>","source":"[CPropertySheet::RemovePage](#cpropertysheet__removepage)"},{"content":"Removes a page from the property sheet.","pos":[2876,2915]},{"pos":[2920,2983],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::SetActivePage<ept id=\"p1\">](#cpropertysheet__setactivepage)</ept>","source":"[CPropertySheet::SetActivePage](#cpropertysheet__setactivepage)"},{"content":"Programmatically sets the active page object.","pos":[2984,3029]},{"pos":[3034,3097],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::SetFinishText<ept id=\"p1\">](#cpropertysheet__setfinishtext)</ept>","source":"[CPropertySheet::SetFinishText](#cpropertysheet__setfinishtext)"},{"content":"Sets the text for the Finish button.","pos":[3098,3134]},{"pos":[3139,3192],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::SetTitle<ept id=\"p1\">](#cpropertysheet__settitle)</ept>","source":"[CPropertySheet::SetTitle](#cpropertysheet__settitle)"},{"content":"Sets the caption of the property sheet.","pos":[3193,3232]},{"pos":[3237,3306],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::SetWizardButtons<ept id=\"p1\">](#cpropertysheet__setwizardbuttons)</ept>","source":"[CPropertySheet::SetWizardButtons](#cpropertysheet__setwizardbuttons)"},{"content":"Enables the wizard buttons.","pos":[3307,3334]},{"pos":[3339,3402],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::SetWizardMode<ept id=\"p1\">](#cpropertysheet__setwizardmode)</ept>","source":"[CPropertySheet::SetWizardMode](#cpropertysheet__setwizardmode)"},{"content":"Enables the wizard mode.","pos":[3403,3427]},{"pos":[3438,3457],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[3464,3468]},{"content":"Description","pos":[3469,3480]},{"pos":[3518,3565],"content":"<bpt id=\"p1\">[</bpt>CPropertySheet::m_psh<ept id=\"p1\">](#cpropertysheet__m_psh)</ept>","source":"[CPropertySheet::m_psh](#cpropertysheet__m_psh)"},{"content":"The Windows <bpt id=\"p1\">[</bpt>PROPSHEETHEADER<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774546)</ept> structure.","pos":[3566,3666],"source":"The Windows [PROPSHEETHEADER](http://msdn.microsoft.com/library/windows/desktop/bb774546) structure."},{"content":"Provides access to basic property sheet parameters.","pos":[3667,3718]},{"pos":[3728,3735],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A property sheet consists of a <ph id=\"ph1\">`CPropertySheet`</ph> object and one or more <bpt id=\"p1\">[</bpt>CPropertyPage<ept id=\"p1\">](../../mfc/reference/cpropertypage-class.md)</ept> objects.","pos":[3739,3878],"source":"A property sheet consists of a `CPropertySheet` object and one or more [CPropertyPage](../../mfc/reference/cpropertypage-class.md) objects."},{"content":"The framework displays a property sheet as a window with a set of tab indices and an area that contains the currently selected page.","pos":[3879,4011]},{"content":"The user navigates to a specific page by using the appropriate tab.","pos":[4012,4079]},{"content":"<ph id=\"ph1\">`CPropertySheet`</ph> provides support for the expanded <bpt id=\"p1\">[</bpt>PROPSHEETHEADER<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774546)</ept> structure introduced in <ph id=\"ph2\">[!INCLUDE[Win98](../../mfc/reference/includes/win98_md.md)]</ph> and Windows NT 2000.","pos":[4086,4319],"source":"`CPropertySheet` provides support for the expanded [PROPSHEETHEADER](http://msdn.microsoft.com/library/windows/desktop/bb774546) structure introduced in [!INCLUDE[Win98](../../mfc/reference/includes/win98_md.md)] and Windows NT 2000."},{"content":"The structure contains additional flags and members that support using a \"watermark\" background bitmap.","pos":[4320,4423]},{"pos":[4430,4695],"content":"To display these new images automatically in your property sheet object, pass valid values for the bitmap and palette images in the call to <bpt id=\"p1\">[</bpt>CPropertySheet::Construct<ept id=\"p1\">](#cpropertysheet__construct)</ept> or <bpt id=\"p2\">[</bpt>CPropertySheet::CPropertySheet<ept id=\"p2\">](#cpropertysheet__cpropertysheet)</ept>.","source":"To display these new images automatically in your property sheet object, pass valid values for the bitmap and palette images in the call to [CPropertySheet::Construct](#cpropertysheet__construct) or [CPropertySheet::CPropertySheet](#cpropertysheet__cpropertysheet)."},{"content":"Even though <ph id=\"ph1\">`CPropertySheet`</ph> is not derived from <bpt id=\"p1\">[</bpt>CDialog<ept id=\"p1\">](../../mfc/reference/cdialog-class.md)</ept>, managing a <ph id=\"ph2\">`CPropertySheet`</ph> object is like managing a <ph id=\"ph3\">`CDialog`</ph> object.","pos":[4702,4871],"source":"Even though `CPropertySheet` is not derived from [CDialog](../../mfc/reference/cdialog-class.md), managing a `CPropertySheet` object is like managing a `CDialog` object."},{"content":"For example, creation of a property sheet requires two-part construction: call the constructor, and then call <bpt id=\"p1\">[</bpt>DoModal<ept id=\"p1\">](#cpropertysheet__domodal)</ept> for a modal property sheet or <bpt id=\"p2\">[</bpt>Create<ept id=\"p2\">](#cpropertysheet__create)</ept> for a modeless property sheet.","pos":[4872,5112],"source":" For example, creation of a property sheet requires two-part construction: call the constructor, and then call [DoModal](#cpropertysheet__domodal) for a modal property sheet or [Create](#cpropertysheet__create) for a modeless property sheet."},{"content":"<ph id=\"ph1\">`CPropertySheet`</ph> has two types of constructors: <bpt id=\"p1\">[</bpt>CPropertySheet::Construct<ept id=\"p1\">](#cpropertysheet__construct)</ept> and <bpt id=\"p2\">[</bpt>CPropertySheet::CPropertySheet<ept id=\"p2\">](#cpropertysheet__cpropertysheet)</ept>.","pos":[5113,5287],"source":"`CPropertySheet` has two types of constructors: [CPropertySheet::Construct](#cpropertysheet__construct) and [CPropertySheet::CPropertySheet](#cpropertysheet__cpropertysheet)."},{"content":"When you construct a <ph id=\"ph1\">`CPropertySheet`</ph> object, some <bpt id=\"p1\">[</bpt>Window Styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept> can cause a first-chance exception to occur.","pos":[5294,5443],"source":"When you construct a `CPropertySheet` object, some [Window Styles](../../mfc/reference/window-styles.md) can cause a first-chance exception to occur."},{"content":"This results from the system trying to change the style of the property sheet before the sheet is created.","pos":[5444,5550]},{"content":"To avoid this exception, make sure that you set the following styles when you create your <ph id=\"ph1\">`CPropertySheet`</ph>:","pos":[5551,5658],"source":" To avoid this exception, make sure that you set the following styles when you create your `CPropertySheet`:"},{"content":"DS_3DLOOK","pos":[5668,5677]},{"content":"DS_CONTROL","pos":[5687,5697]},{"content":"WS_CHILD","pos":[5707,5715]},{"content":"WS_TABSTOP","pos":[5725,5735]},{"content":"The following styles are optional, and will not cause the first-chance exception:","pos":[5742,5823]},{"content":"DS_SHELLFONT","pos":[5833,5845]},{"content":"DS_LOCALEDIT","pos":[5855,5867]},{"content":"WS_CLIPCHILDREN","pos":[5877,5892]},{"pos":[5899,5970],"content":"Any other <ph id=\"ph1\">`Window Styles`</ph> are forbidden and you should not enable them.","source":"Any other `Window Styles` are forbidden and you should not enable them."},{"content":"Exchanging data between a <ph id=\"ph1\">`CPropertySheet`</ph> object and an external object is similar to exchanging data with a <ph id=\"ph2\">`CDialog`</ph> object.","pos":[5977,6104],"source":"Exchanging data between a `CPropertySheet` object and an external object is similar to exchanging data with a `CDialog` object."},{"content":"The important difference is that the settings of a property sheet are typically member variables of the <ph id=\"ph1\">`CPropertyPage`</ph> objects rather than of the <ph id=\"ph2\">`CPropertySheet`</ph> object itself.","pos":[6105,6283],"source":" The important difference is that the settings of a property sheet are typically member variables of the `CPropertyPage` objects rather than of the `CPropertySheet` object itself."},{"content":"You can create a type of tab dialog box called a wizard, which consists of a property sheet with a sequence of property pages that guide the user through the steps of an operation, such as setting up a device or creating a newsletter.","pos":[6290,6524]},{"content":"In a wizard-type tab dialog box, the property pages do not have tabs, and only one property page is visible at a time.","pos":[6525,6643]},{"content":"Also, instead of having <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Apply Now<ept id=\"p2\">**</ept> buttons, a wizard-type tab dialog box has a <bpt id=\"p3\">**</bpt>Back<ept id=\"p3\">**</ept> button, a <bpt id=\"p4\">**</bpt>Next<ept id=\"p4\">**</ept> or <bpt id=\"p5\">**</bpt>Finish<ept id=\"p5\">**</ept> button, a <bpt id=\"p6\">**</bpt>Cancel<ept id=\"p6\">**</ept> button, and a <bpt id=\"p7\">**</bpt>Help<ept id=\"p7\">**</ept> button.","pos":[6644,6830],"source":" Also, instead of having **OK** and **Apply Now** buttons, a wizard-type tab dialog box has a **Back** button, a **Next** or **Finish** button, a **Cancel** button, and a **Help** button."},{"content":"To create a wizard-type dialog box, follow the same steps that you would follow to create a standard property sheet, but call <bpt id=\"p1\">[</bpt>SetWizardMode<ept id=\"p1\">](#cpropertysheet__setwizardmode)</ept> before you call <bpt id=\"p2\">[</bpt>DoModal<ept id=\"p2\">](#cpropertysheet__domodal)</ept>.","pos":[6837,7063],"source":"To create a wizard-type dialog box, follow the same steps that you would follow to create a standard property sheet, but call [SetWizardMode](#cpropertysheet__setwizardmode) before you call [DoModal](#cpropertysheet__domodal)."},{"content":"To enable the wizard buttons, call <bpt id=\"p1\">[</bpt>SetWizardButtons<ept id=\"p1\">](#cpropertysheet__setwizardbuttons)</ept>, using flags to customize their function and appearance.","pos":[7064,7209],"source":" To enable the wizard buttons, call [SetWizardButtons](#cpropertysheet__setwizardbuttons), using flags to customize their function and appearance."},{"content":"To enable the <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept> button, call <bpt id=\"p2\">[</bpt>SetFinishText<ept id=\"p2\">](#cpropertysheet__setfinishtext)</ept> after the user has taken action on the last page of the wizard.","pos":[7210,7359],"source":" To enable the **Finish** button, call [SetFinishText](#cpropertysheet__setfinishtext) after the user has taken action on the last page of the wizard."},{"content":"For more information about how to use <ph id=\"ph1\">`CPropertySheet`</ph> objects, see the article <bpt id=\"p1\">[</bpt>Property Sheets and Property Pages<ept id=\"p1\">](../../mfc/property-sheets-and-property-pages-in-mfc.md)</ept>.","pos":[7366,7539],"source":"For more information about how to use `CPropertySheet` objects, see the article [Property Sheets and Property Pages](../../mfc/property-sheets-and-property-pages-in-mfc.md)."},{"content":"Also, see Knowledge Base article Q146916 : HOWTO: Create a Modeless CPropertySheet with Standard Buttons and article Q300606 : HOWTO: Design a Resizable MFC Property Sheet.","pos":[7540,7712]},{"pos":[7721,7742],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[7746,7793],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[7800,7853],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[7860,7901],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[7933,7945],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[7949,7970],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxdlgs.h","source":"**Header:** afxdlgs.h"},{"pos":[7980,8043],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__addpage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::AddPage","linkify":"<a name=\"cpropertysheet__addpage\"></a>  CPropertySheet::AddPage","source":"<a name=\"cpropertysheet__addpage\"></a>  CPropertySheet::AddPage"},{"content":"Adds the supplied page with the rightmost tab in the property sheet.","pos":[8047,8115]},{"pos":[8176,8186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the page to be added to the property sheet.","pos":[8201,8254]},{"content":"Cannot be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[8255,8274],"source":" Cannot be **NULL**."},{"pos":[8284,8291],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Add pages to the property sheet in the left-to-right order you want them to appear.","pos":[8295,8378]},{"content":"<ph id=\"ph1\">`AddPage`</ph> adds the <bpt id=\"p1\">[</bpt>CPropertyPage<ept id=\"p1\">](../../mfc/reference/cpropertypage-class.md#cpropertypage__cpropertypage)</ept> object to the <ph id=\"ph2\">`CPropertySheet`</ph> object's list of pages but does not actually create the window for the page.","pos":[8385,8600],"source":"`AddPage` adds the [CPropertyPage](../../mfc/reference/cpropertypage-class.md#cpropertypage__cpropertypage) object to the `CPropertySheet` object's list of pages but does not actually create the window for the page."},{"content":"The framework postpones creation of the window for the page until the user selects that page.","pos":[8601,8694]},{"content":"When you add a property page using <ph id=\"ph1\">`AddPage`</ph>, the <ph id=\"ph2\">`CPropertySheet`</ph> is the parent of the <ph id=\"ph3\">`CPropertyPage`</ph>.","pos":[8701,8805],"source":"When you add a property page using `AddPage`, the `CPropertySheet` is the parent of the `CPropertyPage`."},{"content":"To gain access to the property sheet from the property page, call <bpt id=\"p1\">[</bpt>CWnd::GetParent<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__getparent)</ept>.","pos":[8806,8941],"source":" To gain access to the property sheet from the property page, call [CWnd::GetParent](../../mfc/reference/cwnd-class.md#cwnd__getparent)."},{"content":"It is not necessary to wait until creation of the property sheet window to call <ph id=\"ph1\">`AddPage`</ph>.","pos":[8948,9038],"source":"It is not necessary to wait until creation of the property sheet window to call `AddPage`."},{"content":"Typically, you will call <ph id=\"ph1\">`AddPage`</ph> before calling <bpt id=\"p1\">[</bpt>DoModal<ept id=\"p1\">](#cpropertysheet__domodal)</ept> or <bpt id=\"p2\">[</bpt>Create<ept id=\"p2\">](#cpropertysheet__create)</ept>.","pos":[9039,9162],"source":" Typically, you will call `AddPage` before calling [DoModal](#cpropertysheet__domodal) or [Create](#cpropertysheet__create)."},{"pos":[9169,9273],"content":"If you call <ph id=\"ph1\">`AddPage`</ph> after displaying the property page, the tab row will reflect the newly added page.","source":"If you call `AddPage` after displaying the property page, the tab row will reflect the newly added page."},{"pos":[9283,9290],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9294,9379],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#129<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#129](../../mfc/codesnippet/cpp/cpropertysheet-class_1.cpp)]"},{"pos":[9389,9456],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__construct\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::Construct","linkify":"<a name=\"cpropertysheet__construct\"></a>  CPropertySheet::Construct","source":"<a name=\"cpropertysheet__construct\"></a>  CPropertySheet::Construct"},{"pos":[9460,9497],"content":"Constructs a <ph id=\"ph1\">`CPropertySheet`</ph> object.","source":"Constructs a `CPropertySheet` object."},{"pos":[10097,10107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ID of the caption to be used for the property sheet.","pos":[10127,10179]},{"content":"Pointer to the parent window of the property sheet.","pos":[10202,10253]},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the parent window will be the main window of the application.","pos":[10254,10328],"source":" If **NULL**, the parent window will be the main window of the application."},{"content":"The index of the page that will initially be on top.","pos":[10352,10404]},{"content":"Default is the first page added to the sheet.","pos":[10405,10450]},{"content":"Pointer to a string containing the caption to be used for the property sheet.","pos":[10473,10550]},{"content":"Cannot be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[10551,10570],"source":" Cannot be **NULL**."},{"content":"Handle to the watermark bitmap of the property page.","pos":[10595,10647]},{"content":"Handle to the palette of the watermark bitmap and/or header bitmap.","pos":[10673,10740]},{"content":"Handle to the header bitmap of the property page.","pos":[10762,10811]},{"pos":[10821,10828],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this member function if one of the class constructors has not already been called.","pos":[10832,10919]},{"content":"For example, call <ph id=\"ph1\">`Construct`</ph> when you declare or allocate arrays of <ph id=\"ph2\">`CPropertySheet`</ph> objects.","pos":[10920,11014],"source":" For example, call `Construct` when you declare or allocate arrays of `CPropertySheet` objects."},{"content":"In the case of arrays, you must call <ph id=\"ph1\">`Construct`</ph> for each member in the array.","pos":[11015,11093],"source":" In the case of arrays, you must call `Construct` for each member in the array."},{"content":"To display the property sheet, call <bpt id=\"p1\">[</bpt>DoModal<ept id=\"p1\">](#cpropertysheet__domodal)</ept> or <bpt id=\"p2\">[</bpt>Create<ept id=\"p2\">](#cpropertysheet__create)</ept>.","pos":[11100,11209],"source":"To display the property sheet, call [DoModal](#cpropertysheet__domodal) or [Create](#cpropertysheet__create)."},{"content":"The string contained in the first parameter will be placed in the caption bar for the property sheet.","pos":[11210,11311]},{"pos":[11318,11548],"content":"You can display watermark and/or header images automatically if you use the third or fourth prototypes of <ph id=\"ph1\">`Construct`</ph>, listed above, and you pass valid values for the <ph id=\"ph2\">`hbmWatermark`</ph>, <ph id=\"ph3\">`hpalWatermark`</ph>, and/or <ph id=\"ph4\">`hbmHeader`</ph> parameters.","source":"You can display watermark and/or header images automatically if you use the third or fourth prototypes of `Construct`, listed above, and you pass valid values for the `hbmWatermark`, `hpalWatermark`, and/or `hbmHeader` parameters."},{"pos":[11558,11565],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11569,11656],"content":"The following example demonstrates under what circumstances you would call <ph id=\"ph1\">`Construct`</ph>.","source":"The following example demonstrates under what circumstances you would call `Construct`."},{"pos":[11663,11748],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#130<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#130](../../mfc/codesnippet/cpp/cpropertysheet-class_2.cpp)]"},{"pos":[11758,11835],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__cpropertysheet\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::CPropertySheet","linkify":"<a name=\"cpropertysheet__cpropertysheet\"></a>  CPropertySheet::CPropertySheet","source":"<a name=\"cpropertysheet__cpropertysheet\"></a>  CPropertySheet::CPropertySheet"},{"pos":[11839,11876],"content":"Constructs a <ph id=\"ph1\">`CPropertySheet`</ph> object.","source":"Constructs a `CPropertySheet` object."},{"pos":[12515,12525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ID of the caption to be used for the property sheet.","pos":[12545,12597]},{"content":"Points to the parent window of the property sheet.","pos":[12620,12670]},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the parent window will be the main window of the application.","pos":[12671,12745],"source":" If **NULL**, the parent window will be the main window of the application."},{"content":"The index of the page that will initially be on top.","pos":[12769,12821]},{"content":"Default is the first page added to the sheet.","pos":[12822,12867]},{"content":"Points to a string containing the caption to be used for the property sheet.","pos":[12890,12966]},{"content":"Cannot be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[12967,12986],"source":" Cannot be **NULL**."},{"content":"A handle to the background bitmap of the property sheet.","pos":[13011,13067]},{"content":"A handle to the palette of the watermark bitmap and/or header bitmap.","pos":[13093,13162]},{"content":"A handle to the header bitmap of the property page.","pos":[13184,13235]},{"pos":[13245,13252],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To display the property sheet, call <bpt id=\"p1\">[</bpt>DoModal<ept id=\"p1\">](#cpropertysheet__domodal)</ept> or <bpt id=\"p2\">[</bpt>Create<ept id=\"p2\">](#cpropertysheet__create)</ept>.","pos":[13256,13365],"source":"To display the property sheet, call [DoModal](#cpropertysheet__domodal) or [Create](#cpropertysheet__create)."},{"content":"The string contained in the first parameter will be placed in the caption bar for the property sheet.","pos":[13366,13467]},{"pos":[13474,13620],"content":"If you have multiple parameters (for example, if you are using an array), use <bpt id=\"p1\">[</bpt>Construct<ept id=\"p1\">](#cpropertysheet__construct)</ept> instead of <ph id=\"ph1\">`CPropertySheet`</ph>.","source":"If you have multiple parameters (for example, if you are using an array), use [Construct](#cpropertysheet__construct) instead of `CPropertySheet`."},{"pos":[13627,13855],"content":"You can display watermark and/or header images automatically if you use the third or fourth prototypes of <ph id=\"ph1\">`CPropertySheet`</ph>, above, and you pass valid values for the <ph id=\"ph2\">`hbmWatermark`</ph>, <ph id=\"ph3\">`hpalWatermark`</ph>, and/or <ph id=\"ph4\">`hbmHeader`</ph> parameters.","source":"You can display watermark and/or header images automatically if you use the third or fourth prototypes of `CPropertySheet`, above, and you pass valid values for the `hbmWatermark`, `hpalWatermark`, and/or `hbmHeader` parameters."},{"pos":[13865,13872],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13876,13961],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#131<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#131](../../mfc/codesnippet/cpp/cpropertysheet-class_3.cpp)]"},{"pos":[13971,14032],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::Create","linkify":"<a name=\"cpropertysheet__create\"></a>  CPropertySheet::Create","source":"<a name=\"cpropertysheet__create\"></a>  CPropertySheet::Create"},{"content":"Displays a modeless property sheet.","pos":[14036,14071]},{"pos":[14201,14211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to parent window.","pos":[14231,14255]},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, parent is the desktop.","pos":[14256,14291],"source":" If **NULL**, parent is the desktop."},{"content":"Window styles for property sheet.","pos":[14311,14344]},{"content":"For a complete list of available styles, see <bpt id=\"p1\">[</bpt>Window Styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept>.","pos":[14345,14444],"source":" For a complete list of available styles, see [Window Styles](../../mfc/reference/window-styles.md)."},{"content":"Extended window styles for property sheet.","pos":[14466,14508]},{"content":"For a complete list of available styles, see <bpt id=\"p1\">[</bpt>Extended Window Styles<ept id=\"p1\">](../../mfc/reference/extended-window-styles.md)</ept>","pos":[14509,14625],"source":" For a complete list of available styles, see [Extended Window Styles](../../mfc/reference/extended-window-styles.md)"},{"pos":[14635,14647],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the property sheet is created successfully; otherwise 0.","pos":[14651,14718]},{"pos":[14728,14735],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14739,14845],"content":"The call to <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> can be inside the constructor, or you can call it after the constructor is invoked.","source":"The call to **Create** can be inside the constructor, or you can call it after the constructor is invoked."},{"content":"The default style, expressed by passing –1 as <ph id=\"ph1\">`dwStyle`</ph>, is actually <bpt id=\"p1\">**</bpt>WS_SYSMENU&amp;#124;<ept id=\"p1\">**</ept><ph id=\"ph2\">`WS_POPUP`</ph><bpt id=\"p2\">**</bpt>&amp;#124;WS_CAPTION&amp;#124;DS_MODALFRAME&amp;#124;DS_CONTEXTHELP&amp;#124;WS_VISIBLE<ept id=\"p2\">**</ept>.","pos":[14852,15027],"source":"The default style, expressed by passing –1 as `dwStyle`, is actually **WS_SYSMENU&#124;**`WS_POPUP`**&#124;WS_CAPTION&#124;DS_MODALFRAME&#124;DS_CONTEXTHELP&#124;WS_VISIBLE**."},{"content":"The default extended window style, expressed by passing 0 as <ph id=\"ph1\">`dwExStyle`</ph>, is actually <bpt id=\"p1\">**</bpt>WS_EX_DLGMODALFRAME<ept id=\"p1\">**</ept>.","pos":[15028,15138],"source":" The default extended window style, expressed by passing 0 as `dwExStyle`, is actually **WS_EX_DLGMODALFRAME**."},{"content":"The <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> member function returns immediately after creating the property sheet.","pos":[15145,15230],"source":"The **Create** member function returns immediately after creating the property sheet."},{"content":"To destroy the property sheet, call <bpt id=\"p1\">[</bpt>CWnd::DestroyWindow<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__destroywindow)</ept>.","pos":[15231,15344],"source":" To destroy the property sheet, call [CWnd::DestroyWindow](../../mfc/reference/cwnd-class.md#cwnd__destroywindow)."},{"content":"Modeless property sheets displayed with a call to <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> do not have OK, Cancel, Apply Now, and Help buttons as modal property sheets do.","pos":[15351,15492],"source":"Modeless property sheets displayed with a call to **Create** do not have OK, Cancel, Apply Now, and Help buttons as modal property sheets do."},{"content":"Desired buttons must be created by the user.","pos":[15493,15537]},{"pos":[15544,15628],"content":"To display a modal property sheet, call <bpt id=\"p1\">[</bpt>DoModal<ept id=\"p1\">](#cpropertysheet__domodal)</ept> instead.","source":"To display a modal property sheet, call [DoModal](#cpropertysheet__domodal) instead."},{"pos":[15638,15645],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15649,15734],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#132<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#132](../../mfc/codesnippet/cpp/cpropertysheet-class_4.cpp)]"},{"pos":[15741,15826],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#133<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#133](../../mfc/codesnippet/cpp/cpropertysheet-class_5.cpp)]"},{"pos":[15836,15899],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__domodal\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::DoModal","linkify":"<a name=\"cpropertysheet__domodal\"></a>  CPropertySheet::DoModal","source":"<a name=\"cpropertysheet__domodal\"></a>  CPropertySheet::DoModal"},{"content":"Displays a modal property sheet.","pos":[15903,15935]},{"pos":[15987,15999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`IDOK`</ph> or <ph id=\"ph2\">`IDCANCEL`</ph> if the function was successful; otherwise 0 or -1.","pos":[16003,16074],"source":"`IDOK` or `IDCANCEL` if the function was successful; otherwise 0 or -1."},{"content":"If the property sheet has been established as a wizard (see <bpt id=\"p1\">[</bpt>SetWizardMode<ept id=\"p1\">](#cpropertysheet__setwizardmode)</ept>), <ph id=\"ph1\">`DoModal`</ph> returns either <ph id=\"ph2\">`ID_WIZFINISH`</ph> or <ph id=\"ph3\">`IDCANCEL`</ph>.","pos":[16075,16239],"source":" If the property sheet has been established as a wizard (see [SetWizardMode](#cpropertysheet__setwizardmode)), `DoModal` returns either `ID_WIZFINISH` or `IDCANCEL`."},{"pos":[16249,16256],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The return value corresponds to the ID of the control that closed the property sheet.","pos":[16260,16345]},{"content":"After this function returns, the windows corresponding to the property sheet and all the pages will have been destroyed.","pos":[16346,16466]},{"content":"The objects themselves will still exist.","pos":[16467,16507]},{"content":"Typically, you will retrieve data from the <bpt id=\"p1\">[</bpt>CPropertyPage<ept id=\"p1\">](../../mfc/reference/cpropertypage-class.md)</ept> objects after <ph id=\"ph1\">`DoModal`</ph> returns <ph id=\"ph2\">`IDOK`</ph>.","pos":[16508,16650],"source":" Typically, you will retrieve data from the [CPropertyPage](../../mfc/reference/cpropertypage-class.md) objects after `DoModal` returns `IDOK`."},{"pos":[16657,16742],"content":"To display a modeless property sheet, call <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cpropertysheet__create)</ept> instead.","source":"To display a modeless property sheet, call [Create](#cpropertysheet__create) instead."},{"content":"When a property page is created from its corresponding dialog resource, it can cause a first-chance exception.","pos":[16749,16859]},{"content":"This results from the property page changing the style of the dialog resource to the required style before the page is created.","pos":[16860,16987]},{"content":"Because resources are generally read-only, this causes an exception.","pos":[16988,17056]},{"content":"The system handles the exception, and makes a copy of the modified resource.","pos":[17057,17133]},{"content":"The first-chance exception can therefore be ignored.","pos":[17134,17186]},{"pos":[17194,17934],"content":"[!NOTE]\n This exception must be handled by the operating system if you are compiling with the asynchronous exception handling model. For more information about exception handling models, see [/EH (Exception Handling Model)](../../build/reference/eh-exception-handling-model.md). In this case, do not wrap calls to `CPropertySheet::DoModal` with a C++ try-catch block in which the catch handles all exceptions, for example, `catch (...)`. This block would handle the exception intended for the operating system, and cause unpredictable behavior. However, you can safely use C++ exception handling with specific exception types or structured exception handling where the Access Violation exception is passed through to the operating system.","leadings":["","> "],"nodes":[{"content":" This exception must be handled by the operating system if you are compiling with the asynchronous exception handling model. For more information about exception handling models, see [/EH (Exception Handling Model)](../../build/reference/eh-exception-handling-model.md). In this case, do not wrap calls to `CPropertySheet::DoModal` with a C++ try-catch block in which the catch handles all exceptions, for example, `catch (...)`. This block would handle the exception intended for the operating system, and cause unpredictable behavior. However, you can safely use C++ exception handling with specific exception types or structured exception handling where the Access Violation exception is passed through to the operating system.","pos":[8,738],"nodes":[{"content":"This exception must be handled by the operating system if you are compiling with the asynchronous exception handling model.","pos":[1,124]},{"content":"For more information about exception handling models, see <bpt id=\"p1\">[</bpt>/EH (Exception Handling Model)<ept id=\"p1\">](../../build/reference/eh-exception-handling-model.md)</ept>.","pos":[125,270],"source":" For more information about exception handling models, see [/EH (Exception Handling Model)](../../build/reference/eh-exception-handling-model.md)."},{"content":"In this case, do not wrap calls to <ph id=\"ph1\">`CPropertySheet::DoModal`</ph> with a C++ try-catch block in which the catch handles all exceptions, for example, <ph id=\"ph2\">`catch (...)`</ph>.","pos":[271,429],"source":" In this case, do not wrap calls to `CPropertySheet::DoModal` with a C++ try-catch block in which the catch handles all exceptions, for example, `catch (...)`."},{"content":"This block would handle the exception intended for the operating system, and cause unpredictable behavior.","pos":[430,536]},{"content":"However, you can safely use C++ exception handling with specific exception types or structured exception handling where the Access Violation exception is passed through to the operating system.","pos":[537,730]}]}]},{"content":"To avoid generating this first-chance exception, you can manually guarantee that the property sheet has the correct <bpt id=\"p1\">[</bpt>Window Styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept>.","pos":[17941,18111],"source":"To avoid generating this first-chance exception, you can manually guarantee that the property sheet has the correct [Window Styles](../../mfc/reference/window-styles.md)."},{"content":"You need to set the following styles for a property sheet:","pos":[18112,18170]},{"content":"DS_3DLOOK","pos":[18180,18189]},{"content":"DS_CONTROL","pos":[18199,18209]},{"content":"WS_CHILD","pos":[18219,18227]},{"content":"WS_TABSTOP","pos":[18237,18247]},{"content":"You can use the following optional styles without causing a first-chance exception:","pos":[18254,18337]},{"content":"DS_SHELLFONT","pos":[18347,18359]},{"content":"DS_LOCALEDIT","pos":[18369,18381]},{"content":"WS_CLIPCHILDREN","pos":[18391,18406]},{"content":"Disable all other Windows styles because they are not compatible with property sheets.","pos":[18413,18499]},{"content":"This advice does not apply to extended styles.","pos":[18500,18546]},{"content":"Setting these standard styles appropriately will guarantee that the property sheet does not have to be modified and will avoid generating the first-chance exception.","pos":[18547,18712]},{"pos":[18722,18729],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18734,18806],"content":"See the example for <bpt id=\"p1\">[</bpt>CPropertySheet::AddPage<ept id=\"p1\">](#cpropertysheet__addpage)</ept>.","source":"See the example for [CPropertySheet::AddPage](#cpropertysheet__addpage)."},{"pos":[18816,18899],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__enablestackedtabs\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::EnableStackedTabs","linkify":"<a name=\"cpropertysheet__enablestackedtabs\"></a>  CPropertySheet::EnableStackedTabs","source":"<a name=\"cpropertysheet__enablestackedtabs\"></a>  CPropertySheet::EnableStackedTabs"},{"content":"Indicates whether to stack rows of tabs in a property sheet.","pos":[18903,18963]},{"pos":[19027,19037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Indicates whether stacked tabs are enabled in the property sheet.","pos":[19055,19120]},{"content":"Disable stacked rows of tags by setting <ph id=\"ph1\">`bStacked`</ph> to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[19121,19185],"source":" Disable stacked rows of tags by setting `bStacked` to **FALSE**."},{"pos":[19195,19202],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, if a property sheet has more tabs than will fit in a single row in the width of the property sheet, the tabs will stack in multiple rows.","pos":[19206,19355]},{"content":"To use scrolling tabs instead of stacking tabs, call <ph id=\"ph1\">`EnableStackedTabs`</ph> with <ph id=\"ph2\">`bStacked`</ph> set to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> before calling <bpt id=\"p2\">[</bpt>DoModal<ept id=\"p2\">](#cpropertysheet__domodal)</ept> or <bpt id=\"p3\">[</bpt>Create<ept id=\"p3\">](#cpropertysheet__create)</ept>.","pos":[19356,19550],"source":" To use scrolling tabs instead of stacking tabs, call `EnableStackedTabs` with `bStacked` set to **FALSE** before calling [DoModal](#cpropertysheet__domodal) or [Create](#cpropertysheet__create)."},{"content":"You must call <ph id=\"ph1\">`EnableStackedTabs`</ph> when you create a modal or a modeless property sheet.","pos":[19557,19644],"source":"You must call `EnableStackedTabs` when you create a modal or a modeless property sheet."},{"content":"To incorporate this style in a <ph id=\"ph1\">`CPropertySheet`</ph>-derived class, write a message handler for <ph id=\"ph2\">`WM_CREATE`</ph>.","pos":[19645,19748],"source":" To incorporate this style in a `CPropertySheet`-derived class, write a message handler for `WM_CREATE`."},{"content":"In the overridden version of <bpt id=\"p1\">[</bpt>CWnd::OnCreate<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, call <bpt id=\"p2\">**</bpt>EnableStackedTabs( FALSE )<ept id=\"p2\">**</ept> before calling the base class implementation.","pos":[19749,19927],"source":" In the overridden version of [CWnd::OnCreate](../../mfc/reference/cwnd-class.md#cwnd__oncreate), call **EnableStackedTabs( FALSE )** before calling the base class implementation."},{"pos":[19937,19944],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19948,20033],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#134<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#134](../../mfc/codesnippet/cpp/cpropertysheet-class_6.cpp)]"},{"pos":[20043,20110],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__enddialog\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::EndDialog","linkify":"<a name=\"cpropertysheet__enddialog\"></a>  CPropertySheet::EndDialog","source":"<a name=\"cpropertysheet__enddialog\"></a>  CPropertySheet::EndDialog"},{"content":"Terminates the property sheet.","pos":[20114,20144]},{"pos":[20197,20207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nEndID<ept id=\"p1\">*</ept>","pos":[20211,20219],"source":"*nEndID*"},{"content":"Identifier to be used as return value of the property sheet.","pos":[20223,20283]},{"pos":[20293,20300],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is called by the framework when the OK, Cancel, or Close button is pressed.","pos":[20304,20400]},{"content":"Call this member function if an event occurs that should close the property sheet.","pos":[20401,20483]},{"content":"This member function is only used with a modal dialog box.","pos":[20490,20548]},{"pos":[20558,20565],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20570,20650],"content":"See the example for <bpt id=\"p1\">[</bpt>CPropertySheet::PressButton<ept id=\"p1\">](#cpropertysheet__pressbutton)</ept>.","source":"See the example for [CPropertySheet::PressButton](#cpropertysheet__pressbutton)."},{"pos":[20660,20737],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__getactiveindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::GetActiveIndex","linkify":"<a name=\"cpropertysheet__getactiveindex\"></a>  CPropertySheet::GetActiveIndex","source":"<a name=\"cpropertysheet__getactiveindex\"></a>  CPropertySheet::GetActiveIndex"},{"pos":[20741,20877],"content":"Gets the index number of the property sheet window's active page and then uses the returned index number as the parameter for <ph id=\"ph1\">`GetPage`</ph>.","source":"Gets the index number of the property sheet window's active page and then uses the returned index number as the parameter for `GetPage`."},{"pos":[20933,20945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index number of the active page.","pos":[20949,20985]},{"pos":[20995,21002],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21007,21091],"content":"See the example for <bpt id=\"p1\">[</bpt>CPropertySheet::GetActivePage<ept id=\"p1\">](#cpropertysheet__getactivepage)</ept>.","source":"See the example for [CPropertySheet::GetActivePage](#cpropertysheet__getactivepage)."},{"pos":[21101,21176],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__getactivepage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::GetActivePage","linkify":"<a name=\"cpropertysheet__getactivepage\"></a>  CPropertySheet::GetActivePage","source":"<a name=\"cpropertysheet__getactivepage\"></a>  CPropertySheet::GetActivePage"},{"content":"Retrieves the property sheet window's active page.","pos":[21180,21230]},{"pos":[21296,21308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The pointer to the active page.","pos":[21312,21343]},{"pos":[21353,21360],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this member function to perform some action on the active page.","pos":[21364,21431]},{"pos":[21441,21448],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21452,21537],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#135<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#135](../../mfc/codesnippet/cpp/cpropertysheet-class_7.cpp)]"},{"pos":[21547,21610],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__getpage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::GetPage","linkify":"<a name=\"cpropertysheet__getpage\"></a>  CPropertySheet::GetPage","source":"<a name=\"cpropertysheet__getpage\"></a>  CPropertySheet::GetPage"},{"content":"Returns a pointer to the specified page in this property sheet.","pos":[21614,21677]},{"pos":[21746,21756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the desired page, starting at 0.","pos":[21771,21812]},{"content":"Must be between 0 and one less than the number of pages in the property sheet, inclusive.","pos":[21813,21902]},{"pos":[21912,21924],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21928,21991],"content":"The pointer to the page corresponding to the <ph id=\"ph1\">`nPage`</ph> parameter.","source":"The pointer to the page corresponding to the `nPage` parameter."},{"pos":[22001,22008],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22013,22139],"content":"See the example for <bpt id=\"p1\">[</bpt>CPropertyPage::OnWizardFinish<ept id=\"p1\">](../../mfc/reference/cpropertypage-class.md#cpropertypage__onwizardfinish)</ept>.","source":"See the example for [CPropertyPage::OnWizardFinish](../../mfc/reference/cpropertypage-class.md#cpropertypage__onwizardfinish)."},{"pos":[22149,22222],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__getpagecount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::GetPageCount","linkify":"<a name=\"cpropertysheet__getpagecount\"></a>  CPropertySheet::GetPageCount","source":"<a name=\"cpropertysheet__getpagecount\"></a>  CPropertySheet::GetPageCount"},{"content":"Determines the number of pages currently in the property sheet.","pos":[22226,22289]},{"pos":[22343,22355],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pages in the property sheet.","pos":[22359,22401]},{"pos":[22411,22418],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22423,22549],"content":"See the example for <bpt id=\"p1\">[</bpt>CPropertyPage::OnWizardFinish<ept id=\"p1\">](../../mfc/reference/cpropertypage-class.md#cpropertypage__onwizardfinish)</ept>.","source":"See the example for [CPropertyPage::OnWizardFinish](../../mfc/reference/cpropertypage-class.md#cpropertypage__onwizardfinish)."},{"pos":[22559,22632],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__getpageindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::GetPageIndex","linkify":"<a name=\"cpropertysheet__getpageindex\"></a>  CPropertySheet::GetPageIndex","source":"<a name=\"cpropertysheet__getpageindex\"></a>  CPropertySheet::GetPageIndex"},{"content":"Retrieves the index number of the specified page in the property sheet.","pos":[22636,22707]},{"pos":[22772,22782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the page with the index to be found.","pos":[22797,22843]},{"content":"Cannot be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[22844,22863],"source":" Cannot be **NULL**."},{"pos":[22873,22885],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index number of a page.","pos":[22889,22916]},{"pos":[22926,22933],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22937,23104],"content":"For example, you would use <ph id=\"ph1\">`GetPageIndex`</ph> to get the page index in order to use <bpt id=\"p1\">[</bpt>SetActivePage<ept id=\"p1\">](#cpropertysheet__setactivepage)</ept> or <bpt id=\"p2\">[</bpt>GetPage<ept id=\"p2\">](#cpropertysheet__getpage)</ept>.","source":"For example, you would use `GetPageIndex` to get the page index in order to use [SetActivePage](#cpropertysheet__setactivepage) or [GetPage](#cpropertysheet__getpage)."},{"pos":[23114,23121],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[23126,23210],"content":"See the example for <bpt id=\"p1\">[</bpt>CPropertySheet::GetActivePage<ept id=\"p1\">](#cpropertysheet__getactivepage)</ept>.","source":"See the example for [CPropertySheet::GetActivePage](#cpropertysheet__getactivepage)."},{"pos":[23220,23295],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__gettabcontrol\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::GetTabControl","linkify":"<a name=\"cpropertysheet__gettabcontrol\"></a>  CPropertySheet::GetTabControl","source":"<a name=\"cpropertysheet__gettabcontrol\"></a>  CPropertySheet::GetTabControl"},{"pos":[23299,23467],"content":"Retrieves a pointer to a tab control to do something specific to the tab control (that is, to use any of the APIs in <bpt id=\"p1\">[</bpt>CTabCtrl<ept id=\"p1\">](../../mfc/reference/ctabctrl-class.md)</ept>).","source":"Retrieves a pointer to a tab control to do something specific to the tab control (that is, to use any of the APIs in [CTabCtrl](../../mfc/reference/ctabctrl-class.md))."},{"pos":[23528,23540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to a tab control.","pos":[23544,23571]},{"pos":[23581,23588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For example, call this member function if you want to add bitmaps to each of the tabs during initialization.","pos":[23592,23700]},{"pos":[23710,23717],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[23721,23806],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#136<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#136](../../mfc/codesnippet/cpp/cpropertysheet-class_8.cpp)]"},{"pos":[23816,23875],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__m_psh\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::m_psh","linkify":"<a name=\"cpropertysheet__m_psh\"></a>  CPropertySheet::m_psh","source":"<a name=\"cpropertysheet__m_psh\"></a>  CPropertySheet::m_psh"},{"pos":[23879,24012],"content":"A structure whose members store the characteristics of <bpt id=\"p1\">[</bpt>PROPSHEETHEADER<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774546)</ept>.","source":"A structure whose members store the characteristics of [PROPSHEETHEADER](http://msdn.microsoft.com/library/windows/desktop/bb774546)."},{"pos":[24022,24029],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this structure to initialize the appearance of the property sheet after it is constructed but before it is displayed with the <bpt id=\"p1\">[</bpt>DoModal<ept id=\"p1\">](#cpropertysheet__domodal)</ept> member function.","pos":[24033,24215],"source":"Use this structure to initialize the appearance of the property sheet after it is constructed but before it is displayed with the [DoModal](#cpropertysheet__domodal) member function."},{"content":"For example, set the <ph id=\"ph1\">`dwSize`</ph> member of <ph id=\"ph2\">`m_psh`</ph> to the size you want the property sheet to have.","pos":[24216,24312],"source":" For example, set the `dwSize` member of `m_psh` to the size you want the property sheet to have."},{"pos":[24319,24478],"content":"For more information on this structure, including a listing of its members, see <bpt id=\"p1\">**</bpt>PROPSHEETHEADER<ept id=\"p1\">**</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information on this structure, including a listing of its members, see **PROPSHEETHEADER** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[24488,24495],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24499,24584],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#143<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#143](../../mfc/codesnippet/cpp/cpropertysheet-class_9.cpp)]"},{"pos":[24594,24669],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__mapdialogrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::MapDialogRect","linkify":"<a name=\"cpropertysheet__mapdialogrect\"></a>  CPropertySheet::MapDialogRect","source":"<a name=\"cpropertysheet__mapdialogrect\"></a>  CPropertySheet::MapDialogRect"},{"content":"Converts the dialog-box units of a rectangle to screen units.","pos":[24673,24734]},{"pos":[24803,24813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure or <bpt id=\"p2\">[</bpt>CRect<ept id=\"p2\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that contains the dialog-box coordinates to be converted.","pos":[24829,25040],"source":" Points to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure or [CRect](../../atl-mfc-shared/reference/crect-class.md) object that contains the dialog-box coordinates to be converted."},{"pos":[25050,25057],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Dialog-box units are stated in terms of the current dialog-box base unit derived from the average width and height of characters in the font used for dialog-box text.","pos":[25061,25227]},{"content":"One horizontal unit is one-fourth of the dialog-box base-width unit, and one vertical unit is one-eighth of the dialog-box base height unit.","pos":[25228,25368]},{"content":"The <bpt id=\"p1\">[</bpt>GetDialogBaseUnits<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645475)</ept> Windows function returns size information for the system font, but you can specify a different font for each property sheet if you use the <bpt id=\"p2\">**</bpt>DS_SETFONT<ept id=\"p2\">**</ept> style in the resource-definition file.","pos":[25375,25652],"source":"The [GetDialogBaseUnits](http://msdn.microsoft.com/library/windows/desktop/ms645475) Windows function returns size information for the system font, but you can specify a different font for each property sheet if you use the **DS_SETFONT** style in the resource-definition file."},{"content":"The <bpt id=\"p1\">[</bpt>MapDialogRect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645502)</ept> Windows function, described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>, uses the appropriate font for this dialog box.","pos":[25653,25867],"source":" The [MapDialogRect](http://msdn.microsoft.com/library/windows/desktop/ms645502) Windows function, described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)], uses the appropriate font for this dialog box."},{"pos":[25874,26071],"content":"The <ph id=\"ph1\">`MapDialogRect`</ph> member function replaces the dialog-box units in <ph id=\"ph2\">`lpRect`</ph> with screen units (pixels) so that the rectangle can be used to create a dialog box or position a control within a box.","source":"The `MapDialogRect` member function replaces the dialog-box units in `lpRect` with screen units (pixels) so that the rectangle can be used to create a dialog box or position a control within a box."},{"pos":[26081,26154],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__oninitdialog\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::OnInitDialog","linkify":"<a name=\"cpropertysheet__oninitdialog\"></a>  CPropertySheet::OnInitDialog","source":"<a name=\"cpropertysheet__oninitdialog\"></a>  CPropertySheet::OnInitDialog"},{"content":"Overrides to augment property sheet initialization.","pos":[26158,26209]},{"pos":[26263,26275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Specifies whether the application has set the input focus to one of the controls in the property sheet.","pos":[26279,26382]},{"content":"If <bpt id=\"p1\">**</bpt>OnInitDialog<ept id=\"p1\">**</ept> returns nonzero, Windows sets the input focus to the first control in the property sheet.","pos":[26383,26492],"source":" If **OnInitDialog** returns nonzero, Windows sets the input focus to the first control in the property sheet."},{"content":"The application can return 0 only if it has explicitly set the input focus to one of the controls in the property sheet.","pos":[26493,26613]},{"pos":[26623,26630],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is called in response to the <bpt id=\"p1\">**</bpt>WM_INITDIALOG<ept id=\"p1\">**</ept> message.","pos":[26634,26710],"source":"This member function is called in response to the **WM_INITDIALOG** message."},{"content":"This message is sent to the property sheet during the <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cpropertysheet__create)</ept> or <bpt id=\"p2\">[</bpt>DoModal<ept id=\"p2\">](#cpropertysheet__domodal)</ept> calls, which occur immediately before the property sheet is displayed.","pos":[26711,26908],"source":" This message is sent to the property sheet during the [Create](#cpropertysheet__create) or [DoModal](#cpropertysheet__domodal) calls, which occur immediately before the property sheet is displayed."},{"content":"Override this member function if you need to perform special processing when the property sheet is initialized.","pos":[26915,27026]},{"content":"In the overridden version, first call the base class <ph id=\"ph1\">`OnInitDialog`</ph> but disregard its return value.","pos":[27027,27126],"source":" In the overridden version, first call the base class `OnInitDialog` but disregard its return value."},{"content":"You will normally return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> from your overridden member function.","pos":[27127,27198],"source":" You will normally return **TRUE** from your overridden member function."},{"content":"You do not need a message-map entry for this member function.","pos":[27205,27266]},{"pos":[27276,27347],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__pressbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::PressButton","linkify":"<a name=\"cpropertysheet__pressbutton\"></a>  CPropertySheet::PressButton","source":"<a name=\"cpropertysheet__pressbutton\"></a>  CPropertySheet::PressButton"},{"content":"Simulates the choice of the specified button in a property sheet.","pos":[27351,27416]},{"pos":[27472,27482],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"nButton : Identifies the button to be pressed.","pos":[27499,27545]},{"content":"This parameter can be one of the following values:","pos":[27546,27596]},{"pos":[27604,27643],"content":"<bpt id=\"p1\">**</bpt>PSBTN_BACK<ept id=\"p1\">**</ept> Chooses the Back button.","source":"**PSBTN_BACK** Chooses the Back button."},{"pos":[27651,27690],"content":"<bpt id=\"p1\">**</bpt>PSBTN_NEXT<ept id=\"p1\">**</ept> Chooses the Next button.","source":"**PSBTN_NEXT** Chooses the Next button."},{"pos":[27698,27741],"content":"<bpt id=\"p1\">**</bpt>PSBTN_FINISH<ept id=\"p1\">**</ept> Chooses the Finish button.","source":"**PSBTN_FINISH** Chooses the Finish button."},{"pos":[27749,27784],"content":"<bpt id=\"p1\">**</bpt>PSBTN_OK<ept id=\"p1\">**</ept> Chooses the OK button.","source":"**PSBTN_OK** Chooses the OK button."},{"pos":[27792,27840],"content":"<bpt id=\"p1\">**</bpt>PSBTN_APPLYNOW<ept id=\"p1\">**</ept> Chooses the Apply Now button.","source":"**PSBTN_APPLYNOW** Chooses the Apply Now button."},{"pos":[27848,27891],"content":"<bpt id=\"p1\">**</bpt>PSBTN_CANCEL<ept id=\"p1\">**</ept> Chooses the Cancel button.","source":"**PSBTN_CANCEL** Chooses the Cancel button."},{"pos":[27899,27938],"content":"<bpt id=\"p1\">**</bpt>PSBTN_HELP<ept id=\"p1\">**</ept> Chooses the Help button.","source":"**PSBTN_HELP** Chooses the Help button."},{"pos":[27948,27955],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27959,28104],"content":"See <bpt id=\"p1\">[</bpt>PSM_PRESSBUTTON<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774597)</ept> for more information about the Windows SDK Pressbutton message.","source":"See [PSM_PRESSBUTTON](http://msdn.microsoft.com/library/windows/desktop/bb774597) for more information about the Windows SDK Pressbutton message."},{"content":"A call to <ph id=\"ph1\">`PressButton`</ph> will not send the <bpt id=\"p1\">[</bpt>PSN_APPLY<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774552)</ept> notification from a property page to the framework.","pos":[28111,28276],"source":"A call to `PressButton` will not send the [PSN_APPLY](http://msdn.microsoft.com/library/windows/desktop/bb774552) notification from a property page to the framework."},{"content":"To send this notification, call <bpt id=\"p1\">[</bpt>CPropertyPage::OnOK<ept id=\"p1\">](../../mfc/reference/cpropertypage-class.md#cpropertypage__onok)</ept>.","pos":[28277,28395],"source":" To send this notification, call [CPropertyPage::OnOK](../../mfc/reference/cpropertypage-class.md#cpropertypage__onok)."},{"pos":[28405,28412],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28416,28502],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#137<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#137](../../mfc/codesnippet/cpp/cpropertysheet-class_10.cpp)]"},{"pos":[28512,28581],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__removepage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::RemovePage","linkify":"<a name=\"cpropertysheet__removepage\"></a>  CPropertySheet::RemovePage","source":"<a name=\"cpropertysheet__removepage\"></a>  CPropertySheet::RemovePage"},{"content":"Removes a page from the property sheet and destroys the associated window.","pos":[28585,28659]},{"pos":[28754,28764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the page to be removed from the property sheet.","pos":[28779,28836]},{"content":"Cannot be <ph id=\"ph1\">`NULL`</ph>.","pos":[28837,28854],"source":" Cannot be `NULL`."},{"content":"Index of the page to be removed.","pos":[28872,28904]},{"content":"Must be between 0 and one less than the number of pages in the property sheet, inclusive.","pos":[28905,28994]},{"pos":[29004,29011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29015,29167],"content":"The <bpt id=\"p1\">[</bpt>CPropertyPage<ept id=\"p1\">](../../mfc/reference/cpropertypage-class.md)</ept> object itself is not destroyed until the owner of the <ph id=\"ph1\">`CPropertySheet`</ph> window is closed.","source":"The [CPropertyPage](../../mfc/reference/cpropertypage-class.md) object itself is not destroyed until the owner of the `CPropertySheet` window is closed."},{"pos":[29177,29252],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__setactivepage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::SetActivePage","linkify":"<a name=\"cpropertysheet__setactivepage\"></a>  CPropertySheet::SetActivePage","source":"<a name=\"cpropertysheet__setactivepage\"></a>  CPropertySheet::SetActivePage"},{"content":"Changes the active page.","pos":[29256,29280]},{"pos":[29381,29391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the page to set.","pos":[29406,29431]},{"content":"It must be between 0 and one less than the number of pages in the property sheet, inclusive.","pos":[29432,29524]},{"content":"Points to the page to set in the property sheet.","pos":[29542,29590]},{"content":"It cannot be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[29591,29613],"source":" It cannot be **NULL**."},{"pos":[29623,29635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the property sheet is activated successfully; otherwise 0.","pos":[29639,29708]},{"pos":[29718,29725],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29729,29845],"content":"For example, use <ph id=\"ph1\">`SetActivePage`</ph> if a user's action on one page should cause another page to become the active page.","source":"For example, use `SetActivePage` if a user's action on one page should cause another page to become the active page."},{"pos":[29855,29862],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[29867,29951],"content":"See the example for <bpt id=\"p1\">[</bpt>CPropertySheet::GetActivePage<ept id=\"p1\">](#cpropertysheet__getactivepage)</ept>.","source":"See the example for [CPropertySheet::GetActivePage](#cpropertysheet__getactivepage)."},{"pos":[29961,30036],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__setfinishtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::SetFinishText","linkify":"<a name=\"cpropertysheet__setfinishtext\"></a>  CPropertySheet::SetFinishText","source":"<a name=\"cpropertysheet__setfinishtext\"></a>  CPropertySheet::SetFinishText"},{"content":"Sets the text in the Finish command button.","pos":[30040,30083]},{"pos":[30146,30156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the text to be displayed on the Finish command button.","pos":[30174,30238]},{"pos":[30248,30255],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30259,30427],"content":"Call <ph id=\"ph1\">`SetFinishText`</ph> to display the text on the Finish command button and hide the Next and Back buttons after the user completes action on the last page of the wizard.","source":"Call `SetFinishText` to display the text on the Finish command button and hide the Next and Back buttons after the user completes action on the last page of the wizard."},{"pos":[30437,30444],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30448,30534],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#138<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#138](../../mfc/codesnippet/cpp/cpropertysheet-class_11.cpp)]"},{"pos":[30544,30609],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__settitle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::SetTitle","linkify":"<a name=\"cpropertysheet__settitle\"></a>  CPropertySheet::SetTitle","source":"<a name=\"cpropertysheet__settitle\"></a>  CPropertySheet::SetTitle"},{"content":"Specifies the property sheet's caption (the text displayed in the title bar of a frame window).","pos":[30613,30708]},{"pos":[30794,30804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the style of the property sheet title.","pos":[30820,30868]},{"content":"The style must be specified at 0 or as <bpt id=\"p1\">**</bpt>PSH_PROPTITLE<ept id=\"p1\">**</ept>.","pos":[30869,30926],"source":" The style must be specified at 0 or as **PSH_PROPTITLE**."},{"content":"If the style is set as <bpt id=\"p1\">**</bpt>PSH_PROPTITLE<ept id=\"p1\">**</ept>, the word \"Properties\" appears after the text specified as the caption.","pos":[30927,31039],"source":" If the style is set as **PSH_PROPTITLE**, the word \"Properties\" appears after the text specified as the caption."},{"content":"For example, calling <ph id=\"ph1\">`SetTitle`</ph>(\"Simple\", <bpt id=\"p1\">**</bpt>PSH_PROPTITLE<ept id=\"p1\">**</ept>) will result in a property sheet caption of \"Simple Properties.\"","pos":[31040,31164],"source":" For example, calling `SetTitle`(\"Simple\", **PSH_PROPTITLE**) will result in a property sheet caption of \"Simple Properties.\""},{"content":"Points to the text to be used as the caption in the title bar of the property sheet.","pos":[31185,31269]},{"pos":[31279,31286],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, a property sheet uses the caption parameter in the property sheet constructor.","pos":[31290,31380]},{"pos":[31390,31397],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31401,31487],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#139<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#139](../../mfc/codesnippet/cpp/cpropertysheet-class_12.cpp)]"},{"pos":[31497,31578],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__setwizardbuttons\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::SetWizardButtons","linkify":"<a name=\"cpropertysheet__setwizardbuttons\"></a>  CPropertySheet::SetWizardButtons","source":"<a name=\"cpropertysheet__setwizardbuttons\"></a>  CPropertySheet::SetWizardButtons"},{"content":"Enables or disables the Back, Next, or Finish button in a wizard property sheet.","pos":[31582,31662]},{"pos":[31725,31735],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A set of flags that customize the function and appearance of the wizard buttons.","pos":[31752,31832]},{"content":"This parameter can be a combination of the following values:","pos":[31833,31893]},{"pos":[31901,31928],"content":"<bpt id=\"p1\">**</bpt>PSWIZB_BACK<ept id=\"p1\">**</ept> Back button","source":"**PSWIZB_BACK** Back button"},{"pos":[31936,31963],"content":"<bpt id=\"p1\">**</bpt>PSWIZB_NEXT<ept id=\"p1\">**</ept> Next button","source":"**PSWIZB_NEXT** Next button"},{"pos":[31971,32002],"content":"<bpt id=\"p1\">**</bpt>PSWIZB_FINISH<ept id=\"p1\">**</ept> Finish button","source":"**PSWIZB_FINISH** Finish button"},{"pos":[32010,32058],"content":"<bpt id=\"p1\">**</bpt>PSWIZB_DISABLEDFINISH<ept id=\"p1\">**</ept> Disabled Finish button","source":"**PSWIZB_DISABLEDFINISH** Disabled Finish button"},{"pos":[32068,32075],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call <ph id=\"ph1\">`SetWizardButtons`</ph> only after the dialog is open; you can't call <ph id=\"ph2\">`SetWizardButtons`</ph> before you call <bpt id=\"p1\">[</bpt>DoModal<ept id=\"p1\">](#cpropertysheet__domodal)</ept>.","pos":[32079,32220],"source":"Call `SetWizardButtons` only after the dialog is open; you can't call `SetWizardButtons` before you call [DoModal](#cpropertysheet__domodal)."},{"content":"Typically, you should call <ph id=\"ph1\">`SetWizardButtons`</ph> from <bpt id=\"p1\">[</bpt>CPropertyPage::OnSetActive<ept id=\"p1\">](../../mfc/reference/cpropertypage-class.md#cpropertypage__onsetactive)</ept>.","pos":[32221,32372],"source":" Typically, you should call `SetWizardButtons` from [CPropertyPage::OnSetActive](../../mfc/reference/cpropertypage-class.md#cpropertypage__onsetactive)."},{"content":"If you want to change the text on the Finish button or hide the Next and Back buttons once the user has completed the wizard, call <bpt id=\"p1\">[</bpt>SetFinishText<ept id=\"p1\">](#cpropertysheet__setfinishtext)</ept>.","pos":[32379,32558],"source":"If you want to change the text on the Finish button or hide the Next and Back buttons once the user has completed the wizard, call [SetFinishText](#cpropertysheet__setfinishtext)."},{"content":"Note that the same button is shared for Finish and Next.","pos":[32559,32615]},{"content":"You can display a Finish or a Next button at one time, but not both.","pos":[32616,32684]},{"pos":[32694,32701],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"A <ph id=\"ph1\">`CPropertySheet`</ph> has three wizard property pages: <ph id=\"ph2\">`CStylePage`</ph>, <ph id=\"ph3\">`CColorPage`</ph>, and <ph id=\"ph4\">`CShapePage`</ph>.","pos":[32705,32802],"source":"A `CPropertySheet` has three wizard property pages: `CStylePage`, `CColorPage`, and `CShapePage`."},{"content":"The code fragment below shows how to enable and disable the <bpt id=\"p1\">**</bpt>Back<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Next<ept id=\"p2\">**</ept> buttons on the wizard property page.","pos":[32804,32922],"source":"  The code fragment below shows how to enable and disable the **Back** and **Next** buttons on the wizard property page."},{"pos":[32929,33015],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#140<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#140](../../mfc/codesnippet/cpp/cpropertysheet-class_13.cpp)]"},{"pos":[33022,33108],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#141<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_14.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#141](../../mfc/codesnippet/cpp/cpropertysheet-class_14.cpp)]"},{"pos":[33115,33201],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#138<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#138](../../mfc/codesnippet/cpp/cpropertysheet-class_11.cpp)]"},{"pos":[33211,33286],"content":"<bpt id=\"p1\">&lt;a name=\"cpropertysheet__setwizardmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPropertySheet::SetWizardMode","linkify":"<a name=\"cpropertysheet__setwizardmode\"></a>  CPropertySheet::SetWizardMode","source":"<a name=\"cpropertysheet__setwizardmode\"></a>  CPropertySheet::SetWizardMode"},{"content":"Establishes a property page as a wizard.","pos":[33290,33330]},{"pos":[33377,33384],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A key characteristic of a wizard property page is that the user navigates using Next or Finish, Back, and Cancel buttons instead of tabs.","pos":[33388,33525]},{"content":"Call <ph id=\"ph1\">`SetWizardMode`</ph> before calling <bpt id=\"p1\">[</bpt>DoModal<ept id=\"p1\">](#cpropertysheet__domodal)</ept>.","pos":[33532,33604],"source":"Call `SetWizardMode` before calling [DoModal](#cpropertysheet__domodal)."},{"content":"After you call <ph id=\"ph1\">`SetWizardMode`</ph>, <ph id=\"ph2\">`DoModal`</ph> will return either <bpt id=\"p1\">**</bpt>ID_WIZFINISH<ept id=\"p1\">**</ept> (if the user closes with the Finish button) or <bpt id=\"p2\">**</bpt>IDCANCEL<ept id=\"p2\">**</ept>.","pos":[33605,33743],"source":" After you call `SetWizardMode`, `DoModal` will return either **ID_WIZFINISH** (if the user closes with the Finish button) or **IDCANCEL**."},{"pos":[33750,33791],"content":"<ph id=\"ph1\">`SetWizardMode`</ph> sets the PSH_WIZARD flag.","source":"`SetWizardMode` sets the PSH_WIZARD flag."},{"pos":[33801,33808],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33812,33898],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#142<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpropertysheet-class_15.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#142](../../mfc/codesnippet/cpp/cpropertysheet-class_15.cpp)]"},{"pos":[33907,33915],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample CMNCTRL1<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[33919,33970],"source":"[MFC Sample CMNCTRL1](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>MFC Sample CMNCTRL2<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[33973,34025],"source":" [MFC Sample CMNCTRL2](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>MFC Sample PROPDLG<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[34028,34079],"source":" [MFC Sample PROPDLG](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>MFC Sample SNAPVW<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[34082,34132],"source":" [MFC Sample SNAPVW](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[34135,34184],"source":" [CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","pos":[34187,34235],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"CPropertySheet Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CPropertySheet\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"dialog boxes, tabs\"\n  - \"CPropertySheet class\"\n  - \"property sheets, CPropertySheet class\"\n  - \"tab dialog boxes\"\nms.assetid: 8461ccff-d14f-46e0-a746-42ad642ef94e\ncaps.latest.revision: 30\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CPropertySheet Class\nRepresents property sheets, also known as tab dialog boxes.  \n  \n## Syntax  \n  \n```  \nclass CPropertySheet : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPropertySheet::CPropertySheet](#cpropertysheet__cpropertysheet)|Constructs a `CPropertySheet` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPropertySheet::AddPage](#cpropertysheet__addpage)|Adds a page to the property sheet.|  \n|[CPropertySheet::Construct](#cpropertysheet__construct)|Constructs a `CPropertySheet` object.|  \n|[CPropertySheet::Create](#cpropertysheet__create)|Displays a modeless property sheet.|  \n|[CPropertySheet::DoModal](#cpropertysheet__domodal)|Displays a modal property sheet.|  \n|[CPropertySheet::EnableStackedTabs](#cpropertysheet__enablestackedtabs)|Indicates whether the property sheet uses stacked or scrolling tabs.|  \n|[CPropertySheet::EndDialog](#cpropertysheet__enddialog)|Terminates the property sheet.|  \n|[CPropertySheet::GetActiveIndex](#cpropertysheet__getactiveindex)|Retrieves the index of the active page of the property sheet.|  \n|[CPropertySheet::GetActivePage](#cpropertysheet__getactivepage)|Returns the active page object.|  \n|[CPropertySheet::GetPage](#cpropertysheet__getpage)|Retrieves a pointer to the specified page.|  \n|[CPropertySheet::GetPageCount](#cpropertysheet__getpagecount)|Retrieves the number of pages in the property sheet.|  \n|[CPropertySheet::GetPageIndex](#cpropertysheet__getpageindex)|Retrieves the index of the specified page of the property sheet.|  \n|[CPropertySheet::GetTabControl](#cpropertysheet__gettabcontrol)|Retrieves a pointer to a tab control.|  \n|[CPropertySheet::MapDialogRect](#cpropertysheet__mapdialogrect)|Converts the dialog-box units of a rectangle to screen units.|  \n|[CPropertySheet::OnInitDialog](#cpropertysheet__oninitdialog)|Override to augment property sheet initialization.|  \n|[CPropertySheet::PressButton](#cpropertysheet__pressbutton)|Simulates the choice of the specified button in a property sheet.|  \n|[CPropertySheet::RemovePage](#cpropertysheet__removepage)|Removes a page from the property sheet.|  \n|[CPropertySheet::SetActivePage](#cpropertysheet__setactivepage)|Programmatically sets the active page object.|  \n|[CPropertySheet::SetFinishText](#cpropertysheet__setfinishtext)|Sets the text for the Finish button.|  \n|[CPropertySheet::SetTitle](#cpropertysheet__settitle)|Sets the caption of the property sheet.|  \n|[CPropertySheet::SetWizardButtons](#cpropertysheet__setwizardbuttons)|Enables the wizard buttons.|  \n|[CPropertySheet::SetWizardMode](#cpropertysheet__setwizardmode)|Enables the wizard mode.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPropertySheet::m_psh](#cpropertysheet__m_psh)|The Windows [PROPSHEETHEADER](http://msdn.microsoft.com/library/windows/desktop/bb774546) structure. Provides access to basic property sheet parameters.|  \n  \n## Remarks  \n A property sheet consists of a `CPropertySheet` object and one or more [CPropertyPage](../../mfc/reference/cpropertypage-class.md) objects. The framework displays a property sheet as a window with a set of tab indices and an area that contains the currently selected page. The user navigates to a specific page by using the appropriate tab.  \n  \n `CPropertySheet` provides support for the expanded [PROPSHEETHEADER](http://msdn.microsoft.com/library/windows/desktop/bb774546) structure introduced in [!INCLUDE[Win98](../../mfc/reference/includes/win98_md.md)] and Windows NT 2000. The structure contains additional flags and members that support using a \"watermark\" background bitmap.  \n  \n To display these new images automatically in your property sheet object, pass valid values for the bitmap and palette images in the call to [CPropertySheet::Construct](#cpropertysheet__construct) or [CPropertySheet::CPropertySheet](#cpropertysheet__cpropertysheet).  \n  \n Even though `CPropertySheet` is not derived from [CDialog](../../mfc/reference/cdialog-class.md), managing a `CPropertySheet` object is like managing a `CDialog` object. For example, creation of a property sheet requires two-part construction: call the constructor, and then call [DoModal](#cpropertysheet__domodal) for a modal property sheet or [Create](#cpropertysheet__create) for a modeless property sheet. `CPropertySheet` has two types of constructors: [CPropertySheet::Construct](#cpropertysheet__construct) and [CPropertySheet::CPropertySheet](#cpropertysheet__cpropertysheet).  \n  \n When you construct a `CPropertySheet` object, some [Window Styles](../../mfc/reference/window-styles.md) can cause a first-chance exception to occur. This results from the system trying to change the style of the property sheet before the sheet is created. To avoid this exception, make sure that you set the following styles when you create your `CPropertySheet`:  \n  \n-   DS_3DLOOK  \n  \n-   DS_CONTROL  \n  \n-   WS_CHILD  \n  \n-   WS_TABSTOP  \n  \n The following styles are optional, and will not cause the first-chance exception:  \n  \n-   DS_SHELLFONT  \n  \n-   DS_LOCALEDIT  \n  \n-   WS_CLIPCHILDREN  \n  \n Any other `Window Styles` are forbidden and you should not enable them.  \n  \n Exchanging data between a `CPropertySheet` object and an external object is similar to exchanging data with a `CDialog` object. The important difference is that the settings of a property sheet are typically member variables of the `CPropertyPage` objects rather than of the `CPropertySheet` object itself.  \n  \n You can create a type of tab dialog box called a wizard, which consists of a property sheet with a sequence of property pages that guide the user through the steps of an operation, such as setting up a device or creating a newsletter. In a wizard-type tab dialog box, the property pages do not have tabs, and only one property page is visible at a time. Also, instead of having **OK** and **Apply Now** buttons, a wizard-type tab dialog box has a **Back** button, a **Next** or **Finish** button, a **Cancel** button, and a **Help** button.  \n  \n To create a wizard-type dialog box, follow the same steps that you would follow to create a standard property sheet, but call [SetWizardMode](#cpropertysheet__setwizardmode) before you call [DoModal](#cpropertysheet__domodal). To enable the wizard buttons, call [SetWizardButtons](#cpropertysheet__setwizardbuttons), using flags to customize their function and appearance. To enable the **Finish** button, call [SetFinishText](#cpropertysheet__setfinishtext) after the user has taken action on the last page of the wizard.  \n  \n For more information about how to use `CPropertySheet` objects, see the article [Property Sheets and Property Pages](../../mfc/property-sheets-and-property-pages-in-mfc.md). Also, see Knowledge Base article Q146916 : HOWTO: Create a Modeless CPropertySheet with Standard Buttons and article Q300606 : HOWTO: Design a Resizable MFC Property Sheet.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CPropertySheet`  \n  \n## Requirements  \n **Header:** afxdlgs.h  \n  \n##  <a name=\"cpropertysheet__addpage\"></a>  CPropertySheet::AddPage  \n Adds the supplied page with the rightmost tab in the property sheet.  \n  \n```  \nvoid AddPage(CPropertyPage* pPage);\n```  \n  \n### Parameters  \n `pPage`  \n Points to the page to be added to the property sheet. Cannot be **NULL**.  \n  \n### Remarks  \n Add pages to the property sheet in the left-to-right order you want them to appear.  \n  \n `AddPage` adds the [CPropertyPage](../../mfc/reference/cpropertypage-class.md#cpropertypage__cpropertypage) object to the `CPropertySheet` object's list of pages but does not actually create the window for the page. The framework postpones creation of the window for the page until the user selects that page.  \n  \n When you add a property page using `AddPage`, the `CPropertySheet` is the parent of the `CPropertyPage`. To gain access to the property sheet from the property page, call [CWnd::GetParent](../../mfc/reference/cwnd-class.md#cwnd__getparent).  \n  \n It is not necessary to wait until creation of the property sheet window to call `AddPage`. Typically, you will call `AddPage` before calling [DoModal](#cpropertysheet__domodal) or [Create](#cpropertysheet__create).  \n  \n If you call `AddPage` after displaying the property page, the tab row will reflect the newly added page.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#129](../../mfc/codesnippet/cpp/cpropertysheet-class_1.cpp)]  \n  \n##  <a name=\"cpropertysheet__construct\"></a>  CPropertySheet::Construct  \n Constructs a `CPropertySheet` object.  \n  \n```  \nvoid Construct(\n    UINT nIDCaption,  \n    CWnd* pParentWnd = NULL,  \n    UINT iSelectPage = 0);\n\n \nvoid Construct(\n    LPCTSTR pszCaption,  \n    CWnd* pParentWnd = NULL,  \n    UINT iSelectPage = 0);\n\n \nvoid Construct(\n    UINT nIDCaption,  \n    CWnd* pParentWnd,  \n    UINT iSelectPage,  \n    HBITMAP hbmWatermark,  \n    HPALETTE hpalWatermark = NULL,  \n    HBITMAP hbmHeader = NULL);\n\n \nvoid Construct(\n    LPCTSTR pszCaption,  \n    CWnd* pParentWnd,  \n    UINT iSelectPage,  \n    HBITMAP hbmWatermark,  \n    HPALETTE hpalWatermark = NULL,  \n    HBITMAP hbmHeader = NULL);\n```  \n  \n### Parameters  \n `nIDCaption`  \n ID of the caption to be used for the property sheet.  \n  \n `pParentWnd`  \n Pointer to the parent window of the property sheet. If **NULL**, the parent window will be the main window of the application.  \n  \n `iSelectPage`  \n The index of the page that will initially be on top. Default is the first page added to the sheet.  \n  \n `pszCaption`  \n Pointer to a string containing the caption to be used for the property sheet. Cannot be **NULL**.  \n  \n `hbmWatermark`  \n Handle to the watermark bitmap of the property page.  \n  \n `hpalWatermark`  \n Handle to the palette of the watermark bitmap and/or header bitmap.  \n  \n `hbmHeader`  \n Handle to the header bitmap of the property page.  \n  \n### Remarks  \n Call this member function if one of the class constructors has not already been called. For example, call `Construct` when you declare or allocate arrays of `CPropertySheet` objects. In the case of arrays, you must call `Construct` for each member in the array.  \n  \n To display the property sheet, call [DoModal](#cpropertysheet__domodal) or [Create](#cpropertysheet__create). The string contained in the first parameter will be placed in the caption bar for the property sheet.  \n  \n You can display watermark and/or header images automatically if you use the third or fourth prototypes of `Construct`, listed above, and you pass valid values for the `hbmWatermark`, `hpalWatermark`, and/or `hbmHeader` parameters.  \n  \n### Example  \n The following example demonstrates under what circumstances you would call `Construct`.  \n  \n [!code-cpp[NVC_MFCDocView#130](../../mfc/codesnippet/cpp/cpropertysheet-class_2.cpp)]  \n  \n##  <a name=\"cpropertysheet__cpropertysheet\"></a>  CPropertySheet::CPropertySheet  \n Constructs a `CPropertySheet` object.  \n  \n```  \nCPropertySheet();\n\n \nexplicit CPropertySheet(\n    UINT nIDCaption,  \n    CWnd* pParentWnd = NULL,  \n    UINT iSelectPage = 0);\n\n \nexplicit CPropertySheet(\n    LPCTSTR pszCaption,  \n    CWnd* pParentWnd = NULL,  \n    UINT iSelectPage = 0);\n\n \nCPropertySheet(\n    UINT nIDCaption,  \n    CWnd* pParentWnd,  \n    UINT iSelectPage,  \n    HBITMAP hbmWatermark,  \n    HPALETTE hpalWatermark = NULL,  \n    HBITMAP hbmHeader = NULL);\n\n \nCPropertySheet(\n    LPCTSTR pszCaption,  \n    CWnd* pParentWnd,  \n    UINT iSelectPage,  \n    HBITMAP hbmWatermark,  \n    HPALETTE hpalWatermark = NULL,  \n    HBITMAP hbmHeader = NULL);\n```  \n  \n### Parameters  \n `nIDCaption`  \n ID of the caption to be used for the property sheet.  \n  \n `pParentWnd`  \n Points to the parent window of the property sheet. If **NULL**, the parent window will be the main window of the application.  \n  \n `iSelectPage`  \n The index of the page that will initially be on top. Default is the first page added to the sheet.  \n  \n `pszCaption`  \n Points to a string containing the caption to be used for the property sheet. Cannot be **NULL**.  \n  \n `hbmWatermark`  \n A handle to the background bitmap of the property sheet.  \n  \n `hpalWatermark`  \n A handle to the palette of the watermark bitmap and/or header bitmap.  \n  \n `hbmHeader`  \n A handle to the header bitmap of the property page.  \n  \n### Remarks  \n To display the property sheet, call [DoModal](#cpropertysheet__domodal) or [Create](#cpropertysheet__create). The string contained in the first parameter will be placed in the caption bar for the property sheet.  \n  \n If you have multiple parameters (for example, if you are using an array), use [Construct](#cpropertysheet__construct) instead of `CPropertySheet`.  \n  \n You can display watermark and/or header images automatically if you use the third or fourth prototypes of `CPropertySheet`, above, and you pass valid values for the `hbmWatermark`, `hpalWatermark`, and/or `hbmHeader` parameters.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#131](../../mfc/codesnippet/cpp/cpropertysheet-class_3.cpp)]  \n  \n##  <a name=\"cpropertysheet__create\"></a>  CPropertySheet::Create  \n Displays a modeless property sheet.  \n  \n```  \nvirtual BOOL Create(CWnd* pParentWnd = NULL,\n    DWORD dwStyle = (DWORD)–1,\n    DWORD dwExStyle = 0);\n\n \n```  \n  \n### Parameters  \n `pParentWnd`  \n Points to parent window. If **NULL**, parent is the desktop.  \n  \n `dwStyle`  \n Window styles for property sheet. For a complete list of available styles, see [Window Styles](../../mfc/reference/window-styles.md).  \n  \n `dwExStyle`  \n Extended window styles for property sheet. For a complete list of available styles, see [Extended Window Styles](../../mfc/reference/extended-window-styles.md)  \n  \n### Return Value  \n Nonzero if the property sheet is created successfully; otherwise 0.  \n  \n### Remarks  \n The call to **Create** can be inside the constructor, or you can call it after the constructor is invoked.  \n  \n The default style, expressed by passing –1 as `dwStyle`, is actually **WS_SYSMENU&#124;**`WS_POPUP`**&#124;WS_CAPTION&#124;DS_MODALFRAME&#124;DS_CONTEXTHELP&#124;WS_VISIBLE**. The default extended window style, expressed by passing 0 as `dwExStyle`, is actually **WS_EX_DLGMODALFRAME**.  \n  \n The **Create** member function returns immediately after creating the property sheet. To destroy the property sheet, call [CWnd::DestroyWindow](../../mfc/reference/cwnd-class.md#cwnd__destroywindow).  \n  \n Modeless property sheets displayed with a call to **Create** do not have OK, Cancel, Apply Now, and Help buttons as modal property sheets do. Desired buttons must be created by the user.  \n  \n To display a modal property sheet, call [DoModal](#cpropertysheet__domodal) instead.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#132](../../mfc/codesnippet/cpp/cpropertysheet-class_4.cpp)]  \n  \n [!code-cpp[NVC_MFCDocView#133](../../mfc/codesnippet/cpp/cpropertysheet-class_5.cpp)]  \n  \n##  <a name=\"cpropertysheet__domodal\"></a>  CPropertySheet::DoModal  \n Displays a modal property sheet.  \n  \n```  \nvirtual INT_PTR DoModal();\n```  \n  \n### Return Value  \n `IDOK` or `IDCANCEL` if the function was successful; otherwise 0 or -1. If the property sheet has been established as a wizard (see [SetWizardMode](#cpropertysheet__setwizardmode)), `DoModal` returns either `ID_WIZFINISH` or `IDCANCEL`.  \n  \n### Remarks  \n The return value corresponds to the ID of the control that closed the property sheet. After this function returns, the windows corresponding to the property sheet and all the pages will have been destroyed. The objects themselves will still exist. Typically, you will retrieve data from the [CPropertyPage](../../mfc/reference/cpropertypage-class.md) objects after `DoModal` returns `IDOK`.  \n  \n To display a modeless property sheet, call [Create](#cpropertysheet__create) instead.  \n  \n When a property page is created from its corresponding dialog resource, it can cause a first-chance exception. This results from the property page changing the style of the dialog resource to the required style before the page is created. Because resources are generally read-only, this causes an exception. The system handles the exception, and makes a copy of the modified resource. The first-chance exception can therefore be ignored.  \n  \n> [!NOTE]\n>  This exception must be handled by the operating system if you are compiling with the asynchronous exception handling model. For more information about exception handling models, see [/EH (Exception Handling Model)](../../build/reference/eh-exception-handling-model.md). In this case, do not wrap calls to `CPropertySheet::DoModal` with a C++ try-catch block in which the catch handles all exceptions, for example, `catch (...)`. This block would handle the exception intended for the operating system, and cause unpredictable behavior. However, you can safely use C++ exception handling with specific exception types or structured exception handling where the Access Violation exception is passed through to the operating system.  \n  \n To avoid generating this first-chance exception, you can manually guarantee that the property sheet has the correct [Window Styles](../../mfc/reference/window-styles.md). You need to set the following styles for a property sheet:  \n  \n-   DS_3DLOOK  \n  \n-   DS_CONTROL  \n  \n-   WS_CHILD  \n  \n-   WS_TABSTOP  \n  \n You can use the following optional styles without causing a first-chance exception:  \n  \n-   DS_SHELLFONT  \n  \n-   DS_LOCALEDIT  \n  \n-   WS_CLIPCHILDREN  \n  \n Disable all other Windows styles because they are not compatible with property sheets. This advice does not apply to extended styles. Setting these standard styles appropriately will guarantee that the property sheet does not have to be modified and will avoid generating the first-chance exception.  \n  \n### Example  \n  See the example for [CPropertySheet::AddPage](#cpropertysheet__addpage).  \n  \n##  <a name=\"cpropertysheet__enablestackedtabs\"></a>  CPropertySheet::EnableStackedTabs  \n Indicates whether to stack rows of tabs in a property sheet.  \n  \n```  \nvoid EnableStackedTabs(BOOL bStacked);\n```  \n  \n### Parameters  \n `bStacked`  \n Indicates whether stacked tabs are enabled in the property sheet. Disable stacked rows of tags by setting `bStacked` to **FALSE**.  \n  \n### Remarks  \n By default, if a property sheet has more tabs than will fit in a single row in the width of the property sheet, the tabs will stack in multiple rows. To use scrolling tabs instead of stacking tabs, call `EnableStackedTabs` with `bStacked` set to **FALSE** before calling [DoModal](#cpropertysheet__domodal) or [Create](#cpropertysheet__create).  \n  \n You must call `EnableStackedTabs` when you create a modal or a modeless property sheet. To incorporate this style in a `CPropertySheet`-derived class, write a message handler for `WM_CREATE`. In the overridden version of [CWnd::OnCreate](../../mfc/reference/cwnd-class.md#cwnd__oncreate), call **EnableStackedTabs( FALSE )** before calling the base class implementation.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#134](../../mfc/codesnippet/cpp/cpropertysheet-class_6.cpp)]  \n  \n##  <a name=\"cpropertysheet__enddialog\"></a>  CPropertySheet::EndDialog  \n Terminates the property sheet.  \n  \n```  \nvoid EndDialog(int nEndID);\n```  \n  \n### Parameters  \n *nEndID*  \n Identifier to be used as return value of the property sheet.  \n  \n### Remarks  \n This member function is called by the framework when the OK, Cancel, or Close button is pressed. Call this member function if an event occurs that should close the property sheet.  \n  \n This member function is only used with a modal dialog box.  \n  \n### Example  \n  See the example for [CPropertySheet::PressButton](#cpropertysheet__pressbutton).  \n  \n##  <a name=\"cpropertysheet__getactiveindex\"></a>  CPropertySheet::GetActiveIndex  \n Gets the index number of the property sheet window's active page and then uses the returned index number as the parameter for `GetPage`.  \n  \n```  \nint GetActiveIndex() const;\n\n \n```  \n  \n### Return Value  \n The index number of the active page.  \n  \n### Example  \n  See the example for [CPropertySheet::GetActivePage](#cpropertysheet__getactivepage).  \n  \n##  <a name=\"cpropertysheet__getactivepage\"></a>  CPropertySheet::GetActivePage  \n Retrieves the property sheet window's active page.  \n  \n```  \nCPropertyPage* GetActivePage() const;\n\n \n```  \n  \n### Return Value  \n The pointer to the active page.  \n  \n### Remarks  \n Use this member function to perform some action on the active page.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#135](../../mfc/codesnippet/cpp/cpropertysheet-class_7.cpp)]  \n  \n##  <a name=\"cpropertysheet__getpage\"></a>  CPropertySheet::GetPage  \n Returns a pointer to the specified page in this property sheet.  \n  \n```  \nCPropertyPage* GetPage(int nPage) const;\n\n \n```  \n  \n### Parameters  \n `nPage`  \n Index of the desired page, starting at 0. Must be between 0 and one less than the number of pages in the property sheet, inclusive.  \n  \n### Return Value  \n The pointer to the page corresponding to the `nPage` parameter.  \n  \n### Example  \n  See the example for [CPropertyPage::OnWizardFinish](../../mfc/reference/cpropertypage-class.md#cpropertypage__onwizardfinish).  \n  \n##  <a name=\"cpropertysheet__getpagecount\"></a>  CPropertySheet::GetPageCount  \n Determines the number of pages currently in the property sheet.  \n  \n```  \nint GetPageCount() const;\n\n \n```  \n  \n### Return Value  \n The number of pages in the property sheet.  \n  \n### Example  \n  See the example for [CPropertyPage::OnWizardFinish](../../mfc/reference/cpropertypage-class.md#cpropertypage__onwizardfinish).  \n  \n##  <a name=\"cpropertysheet__getpageindex\"></a>  CPropertySheet::GetPageIndex  \n Retrieves the index number of the specified page in the property sheet.  \n  \n```  \nint GetPageIndex(CPropertyPage* pPage);\n```  \n  \n### Parameters  \n `pPage`  \n Points to the page with the index to be found. Cannot be **NULL**.  \n  \n### Return Value  \n The index number of a page.  \n  \n### Remarks  \n For example, you would use `GetPageIndex` to get the page index in order to use [SetActivePage](#cpropertysheet__setactivepage) or [GetPage](#cpropertysheet__getpage).  \n  \n### Example  \n  See the example for [CPropertySheet::GetActivePage](#cpropertysheet__getactivepage).  \n  \n##  <a name=\"cpropertysheet__gettabcontrol\"></a>  CPropertySheet::GetTabControl  \n Retrieves a pointer to a tab control to do something specific to the tab control (that is, to use any of the APIs in [CTabCtrl](../../mfc/reference/ctabctrl-class.md)).  \n  \n```  \nCTabCtrl* GetTabControl() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a tab control.  \n  \n### Remarks  \n For example, call this member function if you want to add bitmaps to each of the tabs during initialization.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#136](../../mfc/codesnippet/cpp/cpropertysheet-class_8.cpp)]  \n  \n##  <a name=\"cpropertysheet__m_psh\"></a>  CPropertySheet::m_psh  \n A structure whose members store the characteristics of [PROPSHEETHEADER](http://msdn.microsoft.com/library/windows/desktop/bb774546).  \n  \n### Remarks  \n Use this structure to initialize the appearance of the property sheet after it is constructed but before it is displayed with the [DoModal](#cpropertysheet__domodal) member function. For example, set the `dwSize` member of `m_psh` to the size you want the property sheet to have.  \n  \n For more information on this structure, including a listing of its members, see **PROPSHEETHEADER** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#143](../../mfc/codesnippet/cpp/cpropertysheet-class_9.cpp)]  \n  \n##  <a name=\"cpropertysheet__mapdialogrect\"></a>  CPropertySheet::MapDialogRect  \n Converts the dialog-box units of a rectangle to screen units.  \n  \n```  \nvoid MapDialogRect(LPRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n `lpRect`  \n Points to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure or [CRect](../../atl-mfc-shared/reference/crect-class.md) object that contains the dialog-box coordinates to be converted.  \n  \n### Remarks  \n Dialog-box units are stated in terms of the current dialog-box base unit derived from the average width and height of characters in the font used for dialog-box text. One horizontal unit is one-fourth of the dialog-box base-width unit, and one vertical unit is one-eighth of the dialog-box base height unit.  \n  \n The [GetDialogBaseUnits](http://msdn.microsoft.com/library/windows/desktop/ms645475) Windows function returns size information for the system font, but you can specify a different font for each property sheet if you use the **DS_SETFONT** style in the resource-definition file. The [MapDialogRect](http://msdn.microsoft.com/library/windows/desktop/ms645502) Windows function, described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)], uses the appropriate font for this dialog box.  \n  \n The `MapDialogRect` member function replaces the dialog-box units in `lpRect` with screen units (pixels) so that the rectangle can be used to create a dialog box or position a control within a box.  \n  \n##  <a name=\"cpropertysheet__oninitdialog\"></a>  CPropertySheet::OnInitDialog  \n Overrides to augment property sheet initialization.  \n  \n```  \nvirtual BOOL OnInitDialog();\n```  \n  \n### Return Value  \n Specifies whether the application has set the input focus to one of the controls in the property sheet. If **OnInitDialog** returns nonzero, Windows sets the input focus to the first control in the property sheet. The application can return 0 only if it has explicitly set the input focus to one of the controls in the property sheet.  \n  \n### Remarks  \n This member function is called in response to the **WM_INITDIALOG** message. This message is sent to the property sheet during the [Create](#cpropertysheet__create) or [DoModal](#cpropertysheet__domodal) calls, which occur immediately before the property sheet is displayed.  \n  \n Override this member function if you need to perform special processing when the property sheet is initialized. In the overridden version, first call the base class `OnInitDialog` but disregard its return value. You will normally return **TRUE** from your overridden member function.  \n  \n You do not need a message-map entry for this member function.  \n  \n##  <a name=\"cpropertysheet__pressbutton\"></a>  CPropertySheet::PressButton  \n Simulates the choice of the specified button in a property sheet.  \n  \n```  \nvoid PressButton(int nButton);\n```  \n  \n### Parameters  \n `nButton`  \n nButton : Identifies the button to be pressed. This parameter can be one of the following values:  \n  \n- **PSBTN_BACK** Chooses the Back button.  \n  \n- **PSBTN_NEXT** Chooses the Next button.  \n  \n- **PSBTN_FINISH** Chooses the Finish button.  \n  \n- **PSBTN_OK** Chooses the OK button.  \n  \n- **PSBTN_APPLYNOW** Chooses the Apply Now button.  \n  \n- **PSBTN_CANCEL** Chooses the Cancel button.  \n  \n- **PSBTN_HELP** Chooses the Help button.  \n  \n### Remarks  \n See [PSM_PRESSBUTTON](http://msdn.microsoft.com/library/windows/desktop/bb774597) for more information about the Windows SDK Pressbutton message.  \n  \n A call to `PressButton` will not send the [PSN_APPLY](http://msdn.microsoft.com/library/windows/desktop/bb774552) notification from a property page to the framework. To send this notification, call [CPropertyPage::OnOK](../../mfc/reference/cpropertypage-class.md#cpropertypage__onok).  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#137](../../mfc/codesnippet/cpp/cpropertysheet-class_10.cpp)]  \n  \n##  <a name=\"cpropertysheet__removepage\"></a>  CPropertySheet::RemovePage  \n Removes a page from the property sheet and destroys the associated window.  \n  \n```  \nvoid RemovePage(CPropertyPage* pPage);\n\n \nvoid RemovePage(int nPage);\n```  \n  \n### Parameters  \n `pPage`  \n Points to the page to be removed from the property sheet. Cannot be `NULL`.  \n  \n `nPage`  \n Index of the page to be removed. Must be between 0 and one less than the number of pages in the property sheet, inclusive.  \n  \n### Remarks  \n The [CPropertyPage](../../mfc/reference/cpropertypage-class.md) object itself is not destroyed until the owner of the `CPropertySheet` window is closed.  \n  \n##  <a name=\"cpropertysheet__setactivepage\"></a>  CPropertySheet::SetActivePage  \n Changes the active page.  \n  \n```  \nBOOL SetActivePage(int nPage);\n\n \nBOOL SetActivePage(CPropertyPage* pPage);\n```  \n  \n### Parameters  \n `nPage`  \n Index of the page to set. It must be between 0 and one less than the number of pages in the property sheet, inclusive.  \n  \n `pPage`  \n Points to the page to set in the property sheet. It cannot be **NULL**.  \n  \n### Return Value  \n Nonzero if the property sheet is activated successfully; otherwise 0.  \n  \n### Remarks  \n For example, use `SetActivePage` if a user's action on one page should cause another page to become the active page.  \n  \n### Example  \n  See the example for [CPropertySheet::GetActivePage](#cpropertysheet__getactivepage).  \n  \n##  <a name=\"cpropertysheet__setfinishtext\"></a>  CPropertySheet::SetFinishText  \n Sets the text in the Finish command button.  \n  \n```  \nvoid SetFinishText(LPCTSTR lpszText);\n```  \n  \n### Parameters  \n `lpszText`  \n Points to the text to be displayed on the Finish command button.  \n  \n### Remarks  \n Call `SetFinishText` to display the text on the Finish command button and hide the Next and Back buttons after the user completes action on the last page of the wizard.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#138](../../mfc/codesnippet/cpp/cpropertysheet-class_11.cpp)]  \n  \n##  <a name=\"cpropertysheet__settitle\"></a>  CPropertySheet::SetTitle  \n Specifies the property sheet's caption (the text displayed in the title bar of a frame window).  \n  \n```  \nvoid SetTitle(\n    LPCTSTR lpszText,  \n    UINT nStyle = 0);\n```  \n  \n### Parameters  \n `nStyle`  \n Specifies the style of the property sheet title. The style must be specified at 0 or as **PSH_PROPTITLE**. If the style is set as **PSH_PROPTITLE**, the word \"Properties\" appears after the text specified as the caption. For example, calling `SetTitle`(\"Simple\", **PSH_PROPTITLE**) will result in a property sheet caption of \"Simple Properties.\"  \n  \n `lpszText`  \n Points to the text to be used as the caption in the title bar of the property sheet.  \n  \n### Remarks  \n By default, a property sheet uses the caption parameter in the property sheet constructor.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#139](../../mfc/codesnippet/cpp/cpropertysheet-class_12.cpp)]  \n  \n##  <a name=\"cpropertysheet__setwizardbuttons\"></a>  CPropertySheet::SetWizardButtons  \n Enables or disables the Back, Next, or Finish button in a wizard property sheet.  \n  \n```  \nvoid SetWizardButtons(DWORD dwFlags);\n```  \n  \n### Parameters  \n `dwFlags`  \n A set of flags that customize the function and appearance of the wizard buttons. This parameter can be a combination of the following values:  \n  \n- **PSWIZB_BACK** Back button  \n  \n- **PSWIZB_NEXT** Next button  \n  \n- **PSWIZB_FINISH** Finish button  \n  \n- **PSWIZB_DISABLEDFINISH** Disabled Finish button  \n  \n### Remarks  \n Call `SetWizardButtons` only after the dialog is open; you can't call `SetWizardButtons` before you call [DoModal](#cpropertysheet__domodal). Typically, you should call `SetWizardButtons` from [CPropertyPage::OnSetActive](../../mfc/reference/cpropertypage-class.md#cpropertypage__onsetactive).  \n  \n If you want to change the text on the Finish button or hide the Next and Back buttons once the user has completed the wizard, call [SetFinishText](#cpropertysheet__setfinishtext). Note that the same button is shared for Finish and Next. You can display a Finish or a Next button at one time, but not both.  \n  \n### Example  \n A `CPropertySheet` has three wizard property pages: `CStylePage`, `CColorPage`, and `CShapePage`.  The code fragment below shows how to enable and disable the **Back** and **Next** buttons on the wizard property page.  \n  \n [!code-cpp[NVC_MFCDocView#140](../../mfc/codesnippet/cpp/cpropertysheet-class_13.cpp)]  \n  \n [!code-cpp[NVC_MFCDocView#141](../../mfc/codesnippet/cpp/cpropertysheet-class_14.cpp)]  \n  \n [!code-cpp[NVC_MFCDocView#138](../../mfc/codesnippet/cpp/cpropertysheet-class_11.cpp)]  \n  \n##  <a name=\"cpropertysheet__setwizardmode\"></a>  CPropertySheet::SetWizardMode  \n Establishes a property page as a wizard.  \n  \n```  \nvoid SetWizardMode();\n```  \n  \n### Remarks  \n A key characteristic of a wizard property page is that the user navigates using Next or Finish, Back, and Cancel buttons instead of tabs.  \n  \n Call `SetWizardMode` before calling [DoModal](#cpropertysheet__domodal). After you call `SetWizardMode`, `DoModal` will return either **ID_WIZFINISH** (if the user closes with the Finish button) or **IDCANCEL**.  \n  \n `SetWizardMode` sets the PSH_WIZARD flag.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#142](../../mfc/codesnippet/cpp/cpropertysheet-class_15.cpp)]  \n  \n## See Also  \n [MFC Sample CMNCTRL1](../../visual-cpp-samples.md)   \n [MFC Sample CMNCTRL2](../../visual-cpp-samples.md)   \n [MFC Sample PROPDLG](../../visual-cpp-samples.md)   \n [MFC Sample SNAPVW](../../visual-cpp-samples.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}