{"nodes":[{"pos":[12,41],"content":"vector Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vector Class | Microsoft Docs","pos":[0,29]}]},{"pos":[625,637],"content":"vector Class","linkify":"vector Class","nodes":[{"content":"vector Class","pos":[0,12]}]},{"content":"The STL vector class is a template class of sequence containers that arrange elements of a given type in a linear arrangement and allow fast random access to any element.","pos":[638,808]},{"content":"They should be the preferred container for a sequence when random-access performance is at a premium.","pos":[809,910]},{"pos":[919,925],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1025,1035],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>Type<ept id=\"p1\">*</ept>","pos":[1039,1045],"source":"*Type*"},{"content":"The element data type to be stored in the vector","pos":[1049,1097]},{"content":"The type that represents the stored allocator object that encapsulates details about the vector's allocation and deallocation of memory.","pos":[1119,1255]},{"content":"This argument is optional and the default value is <bpt id=\"p1\">**</bpt>allocator<ept id=\"p1\">**</ept><bpt id=\"p2\">*</bpt><ph id=\"ph1\">\\&lt;</ph>Type&gt;.<ept id=\"p2\">*</ept>","pos":[1256,1330],"source":" This argument is optional and the default value is **allocator***\\<Type>.*"},{"pos":[1339,1346],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Vectors allow constant time insertions and deletions at the end of the sequence.","pos":[1350,1430]},{"content":"Inserting or deleting elements in the middle of a vector requires linear time.","pos":[1431,1509]},{"content":"The performance of the <bpt id=\"p1\">[</bpt>deque Class<ept id=\"p1\">](../standard-library/deque-class.md)</ept> container is superior with respect to insertions and deletions at the beginning and end of a sequence.","pos":[1510,1685],"source":" The performance of the [deque Class](../standard-library/deque-class.md) container is superior with respect to insertions and deletions at the beginning and end of a sequence."},{"content":"The <bpt id=\"p1\">[</bpt>list Class<ept id=\"p1\">](../standard-library/list-class.md)</ept> container is superior with respect to insertions and deletions at any location within a sequence.","pos":[1686,1835],"source":" The [list Class](../standard-library/list-class.md) container is superior with respect to insertions and deletions at any location within a sequence."},{"content":"Vector reallocation occurs when a member function must increase the sequence contained in the vector object beyond its current storage capacity.","pos":[1842,1986]},{"content":"Other insertions and erasures may alter various storage addresses within the sequence.","pos":[1987,2073]},{"content":"In all such cases, iterators or references that point at altered portions of the sequence become invalid.","pos":[2074,2179]},{"content":"If no reallocation happens, only iterators and references before the insertion/deletion point remain valid.","pos":[2180,2287]},{"pos":[2294,2511],"content":"The <bpt id=\"p1\">[</bpt>vector<ph id=\"ph1\">\\&lt;</ph>bool&gt; Class<ept id=\"p1\">](../standard-library/vector-bool-class.md)</ept> is a full specialization of the template class vector for elements of type bool with an allocator for the underlying type used by the specialization.","source":"The [vector\\<bool> Class](../standard-library/vector-bool-class.md) is a full specialization of the template class vector for elements of type bool with an allocator for the underlying type used by the specialization."},{"pos":[2518,2751],"content":"The <bpt id=\"p1\">[</bpt>vector<ph id=\"ph1\">\\&lt;</ph>bool&gt; reference Class<ept id=\"p1\">](../standard-library/vector-bool-class.md#vector_lt_bool_gt___reference_class)</ept> is a nested class whose objects are able to provide references to elements (single bits) within a vector<ph id=\"ph2\">\\&lt;</ph>bool&gt; object.","source":"The [vector\\<bool> reference Class](../standard-library/vector-bool-class.md#vector_lt_bool_gt___reference_class) is a nested class whose objects are able to provide references to elements (single bits) within a vector\\<bool> object."},{"pos":[2760,2767],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[2777,2789],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[2810,2835],"content":"<bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](#vector__vector)</ept>","source":"[vector](#vector__vector)"},{"pos":[2836,2977],"content":"Constructs a vector of a specific size or with elements of a specific value or with a specific <ph id=\"ph1\">`allocator`</ph> or as a copy of some other vector.","source":"Constructs a vector of a specific size or with elements of a specific value or with a specific `allocator` or as a copy of some other vector."},{"pos":[2988,2996],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[3017,3058],"content":"<bpt id=\"p1\">[</bpt>allocator_type<ept id=\"p1\">](#vector__allocator_type)</ept>","source":"[allocator_type](#vector__allocator_type)"},{"pos":[3059,3126],"content":"A type that represents the <ph id=\"ph1\">`allocator`</ph> class for the vector object.","source":"A type that represents the `allocator` class for the vector object."},{"pos":[3131,3172],"content":"<bpt id=\"p1\">[</bpt>const_iterator<ept id=\"p1\">](#vector__const_iterator)</ept>","source":"[const_iterator](#vector__const_iterator)"},{"pos":[3173,3263],"content":"A type that provides a random-access iterator that can read a <ph id=\"ph1\">`const`</ph> element in a vector.","source":"A type that provides a random-access iterator that can read a `const` element in a vector."},{"pos":[3268,3307],"content":"<bpt id=\"p1\">[</bpt>const_pointer<ept id=\"p1\">](#vector__const_pointer)</ept>","source":"[const_pointer](#vector__const_pointer)"},{"pos":[3308,3372],"content":"A type that provides a pointer to a <ph id=\"ph1\">`const`</ph> element in a vector.","source":"A type that provides a pointer to a `const` element in a vector."},{"pos":[3377,3420],"content":"<bpt id=\"p1\">[</bpt>const_reference<ept id=\"p1\">](#vector__const_reference)</ept>","source":"[const_reference](#vector__const_reference)"},{"pos":[3421,3540],"content":"A type that provides a reference to a <ph id=\"ph1\">`const`</ph> element stored in a vector for reading and performing <ph id=\"ph2\">`const`</ph> operations.","source":"A type that provides a reference to a `const` element stored in a vector for reading and performing `const` operations."},{"pos":[3545,3602],"content":"<bpt id=\"p1\">[</bpt>const_reverse_iterator<ept id=\"p1\">](#vector__const_reverse_iterator)</ept>","source":"[const_reverse_iterator](#vector__const_reverse_iterator)"},{"pos":[3603,3697],"content":"A type that provides a random-access iterator that can read any <ph id=\"ph1\">`const`</ph> element in the vector.","source":"A type that provides a random-access iterator that can read any `const` element in the vector."},{"pos":[3702,3745],"content":"<bpt id=\"p1\">[</bpt>difference_type<ept id=\"p1\">](#vector__difference_type)</ept>","source":"[difference_type](#vector__difference_type)"},{"content":"A type that provides the difference between the addresses of two elements in a vector.","pos":[3746,3832]},{"pos":[3837,3866],"content":"<bpt id=\"p1\">[</bpt>iterator<ept id=\"p1\">](#vector__iterator)</ept>","source":"[iterator](#vector__iterator)"},{"content":"A type that provides a random-access iterator that can read or modify any element in a vector.","pos":[3867,3961]},{"pos":[3966,3993],"content":"<bpt id=\"p1\">[</bpt>pointer<ept id=\"p1\">](#vector__pointer)</ept>","source":"[pointer](#vector__pointer)"},{"content":"A type that provides a pointer to an element in a vector.","pos":[3994,4051]},{"pos":[4056,4087],"content":"<bpt id=\"p1\">[</bpt>reference<ept id=\"p1\">](#vector__reference)</ept>","source":"[reference](#vector__reference)"},{"content":"A type that provides a reference to an element stored in a vector.","pos":[4088,4154]},{"pos":[4159,4204],"content":"<bpt id=\"p1\">[</bpt>reverse_iterator<ept id=\"p1\">](#vector__reverse_iterator)</ept>","source":"[reverse_iterator](#vector__reverse_iterator)"},{"content":"A type that provides a random-access iterator that can read or modify any element in a reversed vector.","pos":[4205,4308]},{"pos":[4313,4344],"content":"<bpt id=\"p1\">[</bpt>size_type<ept id=\"p1\">](#vector__size_type)</ept>","source":"[size_type](#vector__size_type)"},{"content":"A type that counts the number of elements in a vector.","pos":[4345,4399]},{"pos":[4404,4437],"content":"<bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#vector__value_type)</ept>","source":"[value_type](#vector__value_type)"},{"content":"A type that represents the data type stored in a vector.","pos":[4438,4494]},{"pos":[4505,4521],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[4542,4567],"content":"<bpt id=\"p1\">[</bpt>assign<ept id=\"p1\">](#vector__assign)</ept>","source":"[assign](#vector__assign)"},{"content":"Erases a vector and copies the specified elements to the empty vector.","pos":[4568,4638]},{"pos":[4643,4660],"content":"<bpt id=\"p1\">[</bpt>at<ept id=\"p1\">](#vector__at)</ept>","source":"[at](#vector__at)"},{"content":"Returns a reference to the element at a specified location in the vector.","pos":[4661,4734]},{"pos":[4739,4760],"content":"<bpt id=\"p1\">[</bpt>back<ept id=\"p1\">](#vector__back)</ept>","source":"[back](#vector__back)"},{"content":"Returns a reference to the last element of the vector.","pos":[4761,4815]},{"pos":[4820,4843],"content":"<bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#vector__begin)</ept>","source":"[begin](#vector__begin)"},{"content":"Returns a random-access iterator to the first element in the vector.","pos":[4844,4912]},{"pos":[4917,4946],"content":"<bpt id=\"p1\">[</bpt>capacity<ept id=\"p1\">](#vector__capacity)</ept>","source":"[capacity](#vector__capacity)"},{"content":"Returns the number of elements that the vector could contain without allocating more storage.","pos":[4947,5040]},{"pos":[5045,5070],"content":"<bpt id=\"p1\">[</bpt>cbegin<ept id=\"p1\">](#vector__cbegin)</ept>","source":"[cbegin](#vector__cbegin)"},{"content":"Returns a random-access const iterator to the first element in the vector.","pos":[5071,5145]},{"pos":[5150,5171],"content":"<bpt id=\"p1\">[</bpt>cend<ept id=\"p1\">](#vector__cend)</ept>","source":"[cend](#vector__cend)"},{"content":"Returns a random-access const iterator that points just beyond the end of the vector.","pos":[5172,5257]},{"pos":[5262,5289],"content":"<bpt id=\"p1\">[</bpt>crbegin<ept id=\"p1\">](#vector__crbegin)</ept>","source":"[crbegin](#vector__crbegin)"},{"content":"Returns a const iterator to the first element in a reversed vector.","pos":[5290,5357]},{"pos":[5362,5385],"content":"<bpt id=\"p1\">[</bpt>crend<ept id=\"p1\">](#vector__crend)</ept>","source":"[crend](#vector__crend)"},{"content":"Returns a const iterator to the end of a reversed vector.","pos":[5386,5443]},{"pos":[5448,5471],"content":"<bpt id=\"p1\">[</bpt>clear<ept id=\"p1\">](#vector__clear)</ept>","source":"[clear](#vector__clear)"},{"content":"Erases the elements of the vector.","pos":[5472,5506]},{"pos":[5511,5532],"content":"<bpt id=\"p1\">[</bpt>data<ept id=\"p1\">](#vector__data)</ept>","source":"[data](#vector__data)"},{"content":"Returns a pointer to the first element in the vector.","pos":[5533,5586]},{"pos":[5591,5618],"content":"<bpt id=\"p1\">[</bpt>emplace<ept id=\"p1\">](#vector__emplace)</ept>","source":"[emplace](#vector__emplace)"},{"content":"Inserts an element constructed in place into the vector at a specified position.","pos":[5619,5699]},{"pos":[5704,5741],"content":"<bpt id=\"p1\">[</bpt>emplace_back<ept id=\"p1\">](#vector__emplace_back)</ept>","source":"[emplace_back](#vector__emplace_back)"},{"content":"Adds an element constructed in place to the end of the vector.","pos":[5742,5804]},{"pos":[5809,5832],"content":"<bpt id=\"p1\">[</bpt>empty<ept id=\"p1\">](#vector__empty)</ept>","source":"[empty](#vector__empty)"},{"content":"Tests if the vector container is empty.","pos":[5833,5872]},{"pos":[5877,5896],"content":"<bpt id=\"p1\">[</bpt>end<ept id=\"p1\">](#vector__end)</ept>","source":"[end](#vector__end)"},{"content":"Returns a random-access iterator that points to the end of the vector.","pos":[5897,5967]},{"pos":[5972,5995],"content":"<bpt id=\"p1\">[</bpt>erase<ept id=\"p1\">](#vector__erase)</ept>","source":"[erase](#vector__erase)"},{"content":"Removes an element or a range of elements in a vector from specified positions.","pos":[5996,6075]},{"pos":[6080,6103],"content":"<bpt id=\"p1\">[</bpt>front<ept id=\"p1\">](#vector__front)</ept>","source":"[front](#vector__front)"},{"content":"Returns a reference to the first element in a vector.","pos":[6104,6157]},{"pos":[6162,6201],"content":"<bpt id=\"p1\">[</bpt>get_allocator<ept id=\"p1\">](#vector__get_allocator)</ept>","source":"[get_allocator](#vector__get_allocator)"},{"pos":[6202,6262],"content":"Returns an object to the <ph id=\"ph1\">`allocator`</ph> class used by a vector.","source":"Returns an object to the `allocator` class used by a vector."},{"pos":[6267,6292],"content":"<bpt id=\"p1\">[</bpt>insert<ept id=\"p1\">](#vector__insert)</ept>","source":"[insert](#vector__insert)"},{"content":"Inserts an element or a number of elements into the vector at a specified position.","pos":[6293,6376]},{"pos":[6381,6410],"content":"<bpt id=\"p1\">[</bpt>max_size<ept id=\"p1\">](#vector__max_size)</ept>","source":"[max_size](#vector__max_size)"},{"content":"Returns the maximum length of the vector.","pos":[6411,6452]},{"pos":[6457,6486],"content":"<bpt id=\"p1\">[</bpt>pop_back<ept id=\"p1\">](#vector__pop_back)</ept>","source":"[pop_back](#vector__pop_back)"},{"content":"Deletes the element at the end of the vector.","pos":[6487,6532]},{"pos":[6537,6568],"content":"<bpt id=\"p1\">[</bpt>push_back<ept id=\"p1\">](#vector__push_back)</ept>","source":"[push_back](#vector__push_back)"},{"content":"Add an element to the end of the vector.","pos":[6569,6609]},{"pos":[6614,6639],"content":"<bpt id=\"p1\">[</bpt>rbegin<ept id=\"p1\">](#vector__rbegin)</ept>","source":"[rbegin](#vector__rbegin)"},{"content":"Returns an iterator to the first element in a reversed vector.","pos":[6640,6702]},{"pos":[6707,6728],"content":"<bpt id=\"p1\">[</bpt>rend<ept id=\"p1\">](#vector__rend)</ept>","source":"[rend](#vector__rend)"},{"content":"Returns an iterator to the end of a reversed vector.","pos":[6729,6781]},{"pos":[6786,6813],"content":"<bpt id=\"p1\">[</bpt>reserve<ept id=\"p1\">](#vector__reserve)</ept>","source":"[reserve](#vector__reserve)"},{"content":"Reserves a minimum length of storage for a vector object.","pos":[6814,6871]},{"pos":[6876,6901],"content":"<bpt id=\"p1\">[</bpt>resize<ept id=\"p1\">](#vector__resize)</ept>","source":"[resize](#vector__resize)"},{"content":"Specifies a new size for a vector.","pos":[6902,6936]},{"pos":[6941,6980],"content":"<bpt id=\"p1\">[</bpt>shrink_to_fit<ept id=\"p1\">](#vector__shrink_to_fit)</ept>","source":"[shrink_to_fit](#vector__shrink_to_fit)"},{"content":"Discards excess capacity.","pos":[6981,7006]},{"pos":[7011,7032],"content":"<bpt id=\"p1\">[</bpt>size<ept id=\"p1\">](#vector__size)</ept>","source":"[size](#vector__size)"},{"content":"Returns the number of elements in the vector.","pos":[7033,7078]},{"pos":[7083,7104],"content":"<bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](#vector__swap)</ept>","source":"[swap](#vector__swap)"},{"content":"Exchanges the elements of two vectors.","pos":[7105,7143]},{"pos":[7154,7163],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[7184,7226],"content":"<bpt id=\"p1\">[</bpt>operator&amp;#91;&amp;#93;<ept id=\"p1\">](#vector__operator_at)</ept>","source":"[operator&#91;&#93;](#vector__operator_at)"},{"content":"Returns a reference to the vector element at a specified position.","pos":[7227,7293]},{"pos":[7298,7331],"content":"<bpt id=\"p1\">[</bpt>operator=<ept id=\"p1\">](#vector__operator_eq)</ept>","source":"[operator=](#vector__operator_eq)"},{"content":"Replaces the elements of the vector with a copy of another vector.","pos":[7332,7398]},{"pos":[7408,7420],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[7424,7445],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>vector&gt;","source":"**Header:** \\<vector>"},{"pos":[7452,7470],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[7480,7541],"content":"<bpt id=\"p1\">&lt;a name=\"vector__allocator_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::allocator_type","linkify":"<a name=\"vector__allocator_type\"></a>  vector::allocator_type","source":"<a name=\"vector__allocator_type\"></a>  vector::allocator_type"},{"content":"A type that represents the allocator class for the vector object.","pos":[7545,7610]},{"pos":[7671,7678],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7682,7753],"content":"<ph id=\"ph1\">`allocator_type`</ph> is a synonym for the template parameter <bpt id=\"p1\">**</bpt>Allocator.<ept id=\"p1\">**</ept>","source":"`allocator_type` is a synonym for the template parameter **Allocator.**"},{"pos":[7763,7770],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7775,7877],"content":"See the example for <bpt id=\"p1\">[</bpt>get_allocator<ept id=\"p1\">](#vector__get_allocator)</ept> for an example that uses <ph id=\"ph1\">`allocator_type`</ph>.","source":"See the example for [get_allocator](#vector__get_allocator) for an example that uses `allocator_type`."},{"pos":[7887,7932],"content":"<bpt id=\"p1\">&lt;a name=\"vector__assign\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::assign","linkify":"<a name=\"vector__assign\"></a>  vector::assign","source":"<a name=\"vector__assign\"></a>  vector::assign"},{"content":"Erases a vector and copies the specified elements to the empty vector.","pos":[7936,8006]},{"pos":[8209,8219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Position of the first element in the range of elements to be copied.","pos":[8234,8302]},{"content":"Position of the first element beyond the range of elements to be copied.","pos":[8319,8391]},{"content":"The number of copies of an element being inserted into the vector.","pos":[8409,8475]},{"content":"The value of the element being inserted into the vector.","pos":[8491,8547]},{"content":"The initializer_list containing the elements to insert.","pos":[8565,8620]},{"pos":[8630,8637],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"After erasing any existing elements in a vector, assign either inserts a specified range of elements from the original vector into a vector or inserts copies of a new element of a specified value into a vector.","pos":[8641,8851]},{"pos":[8861,8868],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9693,9730],"content":"<bpt id=\"p1\">&lt;a name=\"vector__at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::at","linkify":"<a name=\"vector__at\"></a>  vector::at","source":"<a name=\"vector__at\"></a>  vector::at"},{"content":"Returns a reference to the element at a specified location in the vector.","pos":[9734,9807]},{"pos":[9905,9915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The subscript or position number of the element to reference in the vector.","pos":[9929,10004]},{"pos":[10014,10026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the element subscripted in the argument.","pos":[10030,10085]},{"content":"If <ph id=\"ph1\">`_Off`</ph> is greater than the size of the vector, <bpt id=\"p1\">**</bpt>at<ept id=\"p1\">**</ept> throws an exception.","pos":[10086,10163],"source":" If `_Off` is greater than the size of the vector, **at** throws an exception."},{"pos":[10173,10180],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the return value of <bpt id=\"p1\">**</bpt>at<ept id=\"p1\">**</ept> is assigned to a <ph id=\"ph1\">`const_reference`</ph>, the vector object cannot be modified.","pos":[10184,10287],"source":"If the return value of **at** is assigned to a `const_reference`, the vector object cannot be modified."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>at<ept id=\"p1\">**</ept> is assigned to a <bpt id=\"p2\">**</bpt>reference<ept id=\"p2\">**</ept>, the vector object can be modified.","pos":[10288,10384],"source":" If the return value of **at** is assigned to a **reference**, the vector object can be modified."},{"pos":[10394,10401],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10879,10920],"content":"<bpt id=\"p1\">&lt;a name=\"vector__back\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::back","linkify":"<a name=\"vector__back\"></a>  vector::back","source":"<a name=\"vector__back\"></a>  vector::back"},{"content":"Returns a reference to the last element of the vector.","pos":[10924,10978]},{"pos":[11052,11064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The last element of the vector.","pos":[11068,11099]},{"content":"If the vector is empty, the return value is undefined.","pos":[11100,11154]},{"pos":[11164,11171],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the return value of <bpt id=\"p1\">**</bpt>back<ept id=\"p1\">**</ept> is assigned to a <ph id=\"ph1\">`const_reference`</ph>, the vector object cannot be modified.","pos":[11175,11280],"source":"If the return value of **back** is assigned to a `const_reference`, the vector object cannot be modified."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>back<ept id=\"p1\">**</ept> is assigned to a <bpt id=\"p2\">**</bpt>reference<ept id=\"p2\">**</ept>, the vector object can be modified.","pos":[11281,11379],"source":" If the return value of **back** is assigned to a **reference**, the vector object can be modified."},{"content":"When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element in an empty vector.","pos":[11386,11503]},{"content":"See <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept> for more information.","pos":[11505,11592],"source":"  See [Checked Iterators](../standard-library/checked-iterators.md) for more information."},{"pos":[11602,11609],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12047,12090],"content":"<bpt id=\"p1\">&lt;a name=\"vector__begin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::begin","linkify":"<a name=\"vector__begin\"></a>  vector::begin","source":"<a name=\"vector__begin\"></a>  vector::begin"},{"content":"Returns a random-access iterator to the first element in the vector.","pos":[12094,12162]},{"pos":[12238,12250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A random-access iterator addressing the first element in the <ph id=\"ph1\">`vector`</ph> or to the location succeeding an empty <ph id=\"ph2\">`vector`</ph>.","pos":[12254,12372],"source":"A random-access iterator addressing the first element in the `vector` or to the location succeeding an empty `vector`."},{"content":"You should always compare the value returned with <bpt id=\"p1\">[</bpt>vector::end<ept id=\"p1\">](#vector__end)</ept> to ensure it is valid.","pos":[12373,12473],"source":" You should always compare the value returned with [vector::end](#vector__end) to ensure it is valid."},{"pos":[12483,12490],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the return value of <ph id=\"ph1\">`begin`</ph> is assigned to a <bpt id=\"p1\">[</bpt>vector::const_iterator<ept id=\"p1\">](#vector__const_iterator)</ept>, the <ph id=\"ph2\">`vector`</ph> object cannot be modified.","pos":[12494,12632],"source":"If the return value of `begin` is assigned to a [vector::const_iterator](#vector__const_iterator), the `vector` object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`begin`</ph> is assigned to an <bpt id=\"p1\">[</bpt>vector::iterator<ept id=\"p1\">](#vector__iterator)</ept>, the <ph id=\"ph2\">`vector`</ph> object can be modified.","pos":[12633,12757],"source":" If the return value of `begin` is assigned to an [vector::iterator](#vector__iterator), the `vector` object can be modified."},{"pos":[12767,12774],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13715,13764],"content":"<bpt id=\"p1\">&lt;a name=\"vector__capacity\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::capacity","linkify":"<a name=\"vector__capacity\"></a>  vector::capacity","source":"<a name=\"vector__capacity\"></a>  vector::capacity"},{"content":"Returns the number of elements that the vector could contain without allocating more storage.","pos":[13768,13861]},{"pos":[13914,13926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current length of storage allocated for the vector.","pos":[13930,13985]},{"pos":[13995,14002],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function <bpt id=\"p1\">[</bpt>resize<ept id=\"p1\">](#vector__resize)</ept> will be more efficient if sufficient memory is allocated to accommodate it.","pos":[14006,14127],"source":"The member function [resize](#vector__resize) will be more efficient if sufficient memory is allocated to accommodate it."},{"content":"Use the member function <bpt id=\"p1\">[</bpt>reserve<ept id=\"p1\">](#vector__reserve)</ept> to specify the amount of memory allocated.","pos":[14128,14222],"source":" Use the member function [reserve](#vector__reserve) to specify the amount of memory allocated."},{"pos":[14232,14239],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14785,14830],"content":"<bpt id=\"p1\">&lt;a name=\"vector__cbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::cbegin","linkify":"<a name=\"vector__cbegin\"></a>  vector::cbegin","source":"<a name=\"vector__cbegin\"></a>  vector::cbegin"},{"pos":[14834,14907],"content":"Returns a <ph id=\"ph1\">`const`</ph> iterator that addresses the first element in the range.","source":"Returns a `const` iterator that addresses the first element in the range."},{"pos":[14963,14975],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14979,15156],"content":"A <ph id=\"ph1\">`const`</ph> random-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, <ph id=\"ph2\">`cbegin() == cend()`</ph>).","source":"A `const` random-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, `cbegin() == cend()`)."},{"pos":[15166,15173],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15177,15257],"content":"With the return value of <ph id=\"ph1\">`cbegin`</ph>, the elements in the range cannot be modified.","source":"With the return value of `cbegin`, the elements in the range cannot be modified."},{"content":"You can use this member function in place of the <ph id=\"ph1\">`begin()`</ph> member function to guarantee that the return value is <ph id=\"ph2\">`const_iterator`</ph>.","pos":[15264,15394],"source":"You can use this member function in place of the `begin()` member function to guarantee that the return value is `const_iterator`."},{"content":"Typically, it's used in conjunction with the <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.","pos":[15395,15525],"source":" Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example."},{"content":"In the example, consider <ph id=\"ph1\">`Container`</ph> to be a modifiable (non- <ph id=\"ph2\">`const`</ph>) container of any kind that supports <ph id=\"ph3\">`begin()`</ph> and <ph id=\"ph4\">`cbegin()`</ph>.","pos":[15526,15658],"source":" In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `begin()` and `cbegin()`."},{"pos":[15823,15864],"content":"<bpt id=\"p1\">&lt;a name=\"vector__cend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::cend","linkify":"<a name=\"vector__cend\"></a>  vector::cend","source":"<a name=\"vector__cend\"></a>  vector::cend"},{"pos":[15868,15963],"content":"Returns a <ph id=\"ph1\">`const`</ph> iterator that addresses the location just beyond the last element in a range.","source":"Returns a `const` iterator that addresses the location just beyond the last element in a range."},{"pos":[16017,16029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16033,16111],"content":"A <ph id=\"ph1\">`const`</ph> random-access iterator that points just beyond the end of the range.","source":"A `const` random-access iterator that points just beyond the end of the range."},{"pos":[16121,16128],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16132,16207],"content":"<ph id=\"ph1\">`cend`</ph> is used to test whether an iterator has passed the end of its range.","source":"`cend` is used to test whether an iterator has passed the end of its range."},{"content":"You can use this member function in place of the <ph id=\"ph1\">`end()`</ph> member function to guarantee that the return value is <ph id=\"ph2\">`const_iterator`</ph>.","pos":[16214,16342],"source":"You can use this member function in place of the `end()` member function to guarantee that the return value is `const_iterator`."},{"content":"Typically, it's used in conjunction with the <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.","pos":[16343,16473],"source":" Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example."},{"content":"In the example, consider <ph id=\"ph1\">`Container`</ph> to be a modifiable (non- <ph id=\"ph2\">`const`</ph>) container of any kind that supports <ph id=\"ph3\">`end()`</ph> and <ph id=\"ph4\">`cend()`</ph>.","pos":[16474,16602],"source":" In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `end()` and `cend()`."},{"pos":[16760,16816],"content":"The value returned by <ph id=\"ph1\">`cend`</ph> should not be dereferenced.","source":"The value returned by `cend` should not be dereferenced."},{"pos":[16826,16869],"content":"<bpt id=\"p1\">&lt;a name=\"vector__clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::clear","linkify":"<a name=\"vector__clear\"></a>  vector::clear","source":"<a name=\"vector__clear\"></a>  vector::clear"},{"content":"Erases the elements of the vector.","pos":[16873,16907]},{"pos":[16946,16953],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17454,17515],"content":"<bpt id=\"p1\">&lt;a name=\"vector__const_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::const_iterator","linkify":"<a name=\"vector__const_iterator\"></a>  vector::const_iterator","source":"<a name=\"vector__const_iterator\"></a>  vector::const_iterator"},{"pos":[17519,17611],"content":"A type that provides a random-access iterator that can read a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in a vector.","source":"A type that provides a random-access iterator that can read a **const** element in a vector."},{"pos":[17685,17692],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17696,17769],"content":"A type <ph id=\"ph1\">`const_iterator`</ph> cannot be used to modify the value of an element.","source":"A type `const_iterator` cannot be used to modify the value of an element."},{"pos":[17779,17786],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17791,17875],"content":"See the example for <bpt id=\"p1\">[</bpt>back<ept id=\"p1\">](#vector__back)</ept> for an example that uses <ph id=\"ph1\">`const_iterator`</ph>.","source":"See the example for [back](#vector__back) for an example that uses `const_iterator`."},{"pos":[17885,17944],"content":"<bpt id=\"p1\">&lt;a name=\"vector__const_pointer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::const_pointer","linkify":"<a name=\"vector__const_pointer\"></a>  vector::const_pointer","source":"<a name=\"vector__const_pointer\"></a>  vector::const_pointer"},{"pos":[17948,18014],"content":"A type that provides a pointer to a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in a vector.","source":"A type that provides a pointer to a **const** element in a vector."},{"pos":[18098,18105],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18109,18181],"content":"A type <ph id=\"ph1\">`const_pointer`</ph> cannot be used to modify the value of an element.","source":"A type `const_pointer` cannot be used to modify the value of an element."},{"pos":[18188,18270],"content":"An <bpt id=\"p1\">[</bpt>iterator<ept id=\"p1\">](#vector__iterator)</ept> is more commonly used to access a vector element.","source":"An [iterator](#vector__iterator) is more commonly used to access a vector element."},{"pos":[18280,18343],"content":"<bpt id=\"p1\">&lt;a name=\"vector__const_reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::const_reference","linkify":"<a name=\"vector__const_reference\"></a>  vector::const_reference","source":"<a name=\"vector__const_reference\"></a>  vector::const_reference"},{"pos":[18347,18470],"content":"A type that provides a reference to a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element stored in a vector for reading and performing <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept> operations.","source":"A type that provides a reference to a **const** element stored in a vector for reading and performing **const** operations."},{"pos":[18558,18565],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18569,18643],"content":"A type <ph id=\"ph1\">`const_reference`</ph> cannot be used to modify the value of an element.","source":"A type `const_reference` cannot be used to modify the value of an element."},{"pos":[18653,18660],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19279,19356],"content":"<bpt id=\"p1\">&lt;a name=\"vector__const_reverse_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::const_reverse_iterator","linkify":"<a name=\"vector__const_reverse_iterator\"></a>  vector::const_reverse_iterator","source":"<a name=\"vector__const_reverse_iterator\"></a>  vector::const_reverse_iterator"},{"pos":[19360,19456],"content":"A type that provides a random-access iterator that can read any <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in the vector.","source":"A type that provides a random-access iterator that can read any **const** element in the vector."},{"pos":[19553,19560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19564,19687],"content":"A type <ph id=\"ph1\">`const_reverse_iterator`</ph> cannot modify the value of an element and is used to iterate through the vector in reverse.","source":"A type `const_reverse_iterator` cannot modify the value of an element and is used to iterate through the vector in reverse."},{"pos":[19697,19704],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19709,19792],"content":"See <bpt id=\"p1\">[</bpt>rbegin<ept id=\"p1\">](#vector__rbegin)</ept> for an example of how to declare and use an iterator.","source":"See [rbegin](#vector__rbegin) for an example of how to declare and use an iterator."},{"pos":[19802,19849],"content":"<bpt id=\"p1\">&lt;a name=\"vector__crbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::crbegin","linkify":"<a name=\"vector__crbegin\"></a>  vector::crbegin","source":"<a name=\"vector__crbegin\"></a>  vector::crbegin"},{"content":"Returns a const iterator to the first element in a reversed vector.","pos":[19853,19920]},{"pos":[19985,19997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20001,20201],"content":"A const reverse random-access iterator addressing the first element in a reversed <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept> or addressing what had been the last element in the unreversed <ph id=\"ph1\">`vector`</ph>.","source":"A const reverse random-access iterator addressing the first element in a reversed [vector](../standard-library/vector-class.md) or addressing what had been the last element in the unreversed `vector`."},{"pos":[20211,20218],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20222,20297],"content":"With the return value of <ph id=\"ph1\">`crbegin`</ph>, the <ph id=\"ph2\">`vector`</ph> object cannot be modified.","source":"With the return value of `crbegin`, the `vector` object cannot be modified."},{"pos":[20307,20314],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21004,21047],"content":"<bpt id=\"p1\">&lt;a name=\"vector__crend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::crend","linkify":"<a name=\"vector__crend\"></a>  vector::crend","source":"<a name=\"vector__crend\"></a>  vector::crend"},{"content":"Returns a const iterator that addresses the location succeeding the last element in a reversed vector.","pos":[21051,21153]},{"pos":[21216,21228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21232,21465],"content":"A const reverse random-access iterator that addresses the location succeeding the last element in a reversed <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept> (the location that had preceded the first element in the unreversed <ph id=\"ph1\">`vector`</ph>).","source":"A const reverse random-access iterator that addresses the location succeeding the last element in a reversed [vector](../standard-library/vector-class.md) (the location that had preceded the first element in the unreversed `vector`)."},{"pos":[21475,21482],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21486,21589],"content":"<ph id=\"ph1\">`crend`</ph> is used with a reversed <ph id=\"ph2\">`vector`</ph> just as <bpt id=\"p1\">[</bpt>vector::cend<ept id=\"p1\">](#vector__cend)</ept> is used with a <ph id=\"ph3\">`vector`</ph>.","source":"`crend` is used with a reversed `vector` just as [vector::cend](#vector__cend) is used with a `vector`."},{"pos":[21596,21692],"content":"With the return value of <ph id=\"ph1\">`crend`</ph> (suitably decremented), the <ph id=\"ph2\">`vector`</ph> object cannot be modified.","source":"With the return value of `crend` (suitably decremented), the `vector` object cannot be modified."},{"pos":[21699,21793],"content":"<ph id=\"ph1\">`crend`</ph> can be used to test to whether a reverse iterator has reached the end of its <ph id=\"ph2\">`vector`</ph>.","source":"`crend` can be used to test to whether a reverse iterator has reached the end of its `vector`."},{"pos":[21800,21857],"content":"The value returned by <ph id=\"ph1\">`crend`</ph> should not be dereferenced.","source":"The value returned by `crend` should not be dereferenced."},{"pos":[21867,21874],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22312,22353],"content":"<bpt id=\"p1\">&lt;a name=\"vector__data\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::data","linkify":"<a name=\"vector__data\"></a>  vector::data","source":"<a name=\"vector__data\"></a>  vector::data"},{"content":"Returns a pointer to the first element in the vector.","pos":[22357,22410]},{"pos":[22482,22494],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22498,22630],"content":"A pointer to the first element in the <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept> or to the location succeeding an empty <ph id=\"ph1\">`vector`</ph>.","source":"A pointer to the first element in the [vector](../standard-library/vector-class.md) or to the location succeeding an empty `vector`."},{"pos":[22640,22647],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[23498,23561],"content":"<bpt id=\"p1\">&lt;a name=\"vector__difference_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::difference_type","linkify":"<a name=\"vector__difference_type\"></a>  vector::difference_type","source":"<a name=\"vector__difference_type\"></a>  vector::difference_type"},{"content":"A type that provides the difference between two iterators that refer to elements within the same vector.","pos":[23565,23669]},{"pos":[23757,23764],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23768,23911],"content":"A <ph id=\"ph1\">`difference_type`</ph> can also be described as the number of elements between two pointers, because a pointer to an element contains its address.","source":"A `difference_type` can also be described as the number of elements between two pointers, because a pointer to an element contains its address."},{"pos":[23918,24000],"content":"An <bpt id=\"p1\">[</bpt>iterator<ept id=\"p1\">](#vector__iterator)</ept> is more commonly used to access a vector element.","source":"An [iterator](#vector__iterator) is more commonly used to access a vector element."},{"pos":[24010,24017],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25100,25147],"content":"<bpt id=\"p1\">&lt;a name=\"vector__emplace\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::emplace","linkify":"<a name=\"vector__emplace\"></a>  vector::emplace","source":"<a name=\"vector__emplace\"></a>  vector::emplace"},{"content":"Inserts an element constructed in place into the vector at a specified position.","pos":[25151,25231]},{"pos":[25320,25330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[25351,25360]},{"content":"Description","pos":[25361,25372]},{"pos":[25386,25488],"content":"The position in the <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept> where the first element is inserted.","source":"The position in the [vector](../standard-library/vector-class.md) where the first element is inserted."},{"pos":[25500,25558],"content":"The value of the element being inserted into the <ph id=\"ph1\">`vector`</ph>.","source":"The value of the element being inserted into the `vector`."},{"pos":[25569,25581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25585,25699],"content":"The function returns an iterator that points to the position where the new element was inserted into the <ph id=\"ph1\">`vector`</ph>.","source":"The function returns an iterator that points to the position where the new element was inserted into the `vector`."},{"pos":[25709,25716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25720,25859],"content":"Any insertion operation can be expensive, see <bpt id=\"p1\">[</bpt>vector Class<ept id=\"p1\">](../standard-library/vector-class.md)</ept> for a discussion of <ph id=\"ph1\">`vector`</ph> performance.","source":"Any insertion operation can be expensive, see [vector Class](../standard-library/vector-class.md) for a discussion of `vector` performance."},{"pos":[25869,25876],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26733,26790],"content":"<bpt id=\"p1\">&lt;a name=\"vector__emplace_back\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::emplace_back","linkify":"<a name=\"vector__emplace_back\"></a>  vector::emplace_back","source":"<a name=\"vector__emplace_back\"></a>  vector::emplace_back"},{"content":"Adds an element constructed in place to the end of the vector.","pos":[26794,26856]},{"pos":[26946,26956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[26963,26972]},{"content":"Description","pos":[26973,26984]},{"content":"Constructor arguments.","pos":[27035,27057]},{"content":"The function infers which constructor overload to invoke based on the arguments provided.","pos":[27058,27147]},{"pos":[27158,27165],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27389,27432],"content":"<bpt id=\"p1\">&lt;a name=\"vector__empty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::empty","linkify":"<a name=\"vector__empty\"></a>  vector::empty","source":"<a name=\"vector__empty\"></a>  vector::empty"},{"content":"Tests if the vector is empty.","pos":[27436,27465]},{"pos":[27510,27522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27526,27596],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vector is empty; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the vector is not empty.","source":"**true** if the vector is empty; **false** if the vector is not empty."},{"pos":[27606,27613],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28019,28058],"content":"<bpt id=\"p1\">&lt;a name=\"vector__end\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::end","linkify":"<a name=\"vector__end\"></a>  vector::end","source":"<a name=\"vector__end\"></a>  vector::end"},{"content":"Returns the past-the-end iterator.","pos":[28062,28096]},{"pos":[28166,28178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The past-the-end iterator for the vector.","pos":[28182,28223]},{"content":"If the vector is empty, <ph id=\"ph1\">`vector::end() == vector::begin()`</ph>.","pos":[28224,28283],"source":" If the vector is empty, `vector::end() == vector::begin()`."},{"pos":[28293,28300],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the return value of <bpt id=\"p1\">**</bpt>end<ept id=\"p1\">**</ept> is assigned to a variable of type <ph id=\"ph1\">`const_iterator`</ph>, the vector object cannot be modified.","pos":[28304,28424],"source":"If the return value of **end** is assigned to a variable of type `const_iterator`, the vector object cannot be modified."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>end<ept id=\"p1\">**</ept> is assigned to a variable of type <bpt id=\"p2\">**</bpt>iterator<ept id=\"p2\">**</ept>, the vector object can be modified.","pos":[28425,28538],"source":" If the return value of **end** is assigned to a variable of type **iterator**, the vector object can be modified."},{"pos":[28548,28555],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28964,29007],"content":"<bpt id=\"p1\">&lt;a name=\"vector__erase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::erase","linkify":"<a name=\"vector__erase\"></a>  vector::erase","source":"<a name=\"vector__erase\"></a>  vector::erase"},{"content":"Removes an element or a range of elements in a vector from specified positions.","pos":[29011,29090]},{"pos":[29230,29240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[29261,29270]},{"content":"Description","pos":[29271,29282]},{"content":"Position of the element to be removed from the vector.","pos":[29296,29350]},{"content":"Position of the first element removed from the vector.","pos":[29364,29418]},{"content":"Position just beyond the last element removed from the vector.","pos":[29431,29493]},{"pos":[29504,29516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An iterator that designates the first element remaining beyond any elements removed, or a pointer to the end of the vector if no such element exists.","pos":[29520,29669]},{"pos":[29679,29686],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30600,30643],"content":"<bpt id=\"p1\">&lt;a name=\"vector__front\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::front","linkify":"<a name=\"vector__front\"></a>  vector::front","source":"<a name=\"vector__front\"></a>  vector::front"},{"content":"Returns a reference to the first element in a vector.","pos":[30647,30700]},{"pos":[30776,30788],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the first element in the vector object.","pos":[30792,30846]},{"content":"If the vector is empty, the return is undefined.","pos":[30847,30895]},{"pos":[30905,30912],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the return value of <ph id=\"ph1\">`front`</ph> is assigned to a <ph id=\"ph2\">`const_reference`</ph>, the vector object cannot be modified.","pos":[30916,31020],"source":"If the return value of `front` is assigned to a `const_reference`, the vector object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`front`</ph> is assigned to a <bpt id=\"p1\">**</bpt>reference<ept id=\"p1\">**</ept>, the vector object can be modified.","pos":[31021,31118],"source":" If the return value of `front` is assigned to a **reference**, the vector object can be modified."},{"content":"When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element in an empty vector.","pos":[31125,31242]},{"content":"See <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept> for more information.","pos":[31244,31331],"source":"  See [Checked Iterators](../standard-library/checked-iterators.md) for more information."},{"pos":[31341,31348],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31869,31928],"content":"<bpt id=\"p1\">&lt;a name=\"vector__get_allocator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::get_allocator","linkify":"<a name=\"vector__get_allocator\"></a>  vector::get_allocator","source":"<a name=\"vector__get_allocator\"></a>  vector::get_allocator"},{"content":"Returns a copy of the allocator object used to construct the vector.","pos":[31932,32000]},{"pos":[32058,32070],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The allocator used by the vector.","pos":[32074,32107]},{"pos":[32117,32124],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Allocators for the vector class specify how the class manages storage.","pos":[32128,32198]},{"content":"The default allocators supplied with STL container classes are sufficient for most programming needs.","pos":[32199,32300]},{"content":"Writing and using your own allocator class is an advanced C++ topic.","pos":[32301,32369]},{"pos":[32379,32386],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[32981,33026],"content":"<bpt id=\"p1\">&lt;a name=\"vector__insert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::insert","linkify":"<a name=\"vector__insert\"></a>  vector::insert","source":"<a name=\"vector__insert\"></a>  vector::insert"},{"content":"Inserts an element or a number of elements or a range of elements into the vector at a specified position.","pos":[33030,33136]},{"pos":[33509,33519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[33540,33549]},{"content":"Description","pos":[33550,33561]},{"content":"The position in the vector where the first element is inserted.","pos":[33575,33638]},{"content":"The value of the element being inserted into the vector.","pos":[33650,33706]},{"content":"The number of elements being inserted into the vector.","pos":[33720,33774]},{"content":"The position of the first element in the range of elements to be copied.","pos":[33788,33860]},{"content":"The position of the first element beyond the range of elements to be copied.","pos":[33873,33949]},{"pos":[33960,33972],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33976,34107],"content":"The first two <ph id=\"ph1\">`insert`</ph> functions return an iterator that points to the position where the new element was inserted into the vector.","source":"The first two `insert` functions return an iterator that points to the position where the new element was inserted into the vector."},{"pos":[34117,34124],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34128,34267],"content":"Any insertion operation can be expensive, see <bpt id=\"p1\">[</bpt>vector Class<ept id=\"p1\">](../standard-library/vector-class.md)</ept> for a discussion of <ph id=\"ph1\">`vector`</ph> performance.","source":"Any insertion operation can be expensive, see [vector Class](../standard-library/vector-class.md) for a discussion of `vector` performance."},{"pos":[34277,34284],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[35838,35887],"content":"<bpt id=\"p1\">&lt;a name=\"vector__iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::iterator","linkify":"<a name=\"vector__iterator\"></a>  vector::iterator","source":"<a name=\"vector__iterator\"></a>  vector::iterator"},{"content":"A type that provides a random-access iterator that can read or modify any element in a vector.","pos":[35891,35985]},{"pos":[36053,36060],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36064,36130],"content":"A type <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept> can be used to modify the value of an element.","source":"A type **iterator** can be used to modify the value of an element."},{"pos":[36140,36147],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[36152,36196],"content":"See the example for <bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#vector__begin)</ept>.","source":"See the example for [begin](#vector__begin)."},{"pos":[36206,36255],"content":"<bpt id=\"p1\">&lt;a name=\"vector__max_size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::max_size","linkify":"<a name=\"vector__max_size\"></a>  vector::max_size","source":"<a name=\"vector__max_size\"></a>  vector::max_size"},{"content":"Returns the maximum length of the vector.","pos":[36259,36300]},{"pos":[36353,36365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The maximum possible length of the vector.","pos":[36369,36411]},{"pos":[36421,36428],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[36769,36823],"content":"<bpt id=\"p1\">&lt;a name=\"vector__operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::operator[]","linkify":"<a name=\"vector__operator_at\"></a>  vector::operator[]","source":"<a name=\"vector__operator_at\"></a>  vector::operator[]"},{"content":"Returns a reference to the vector element at a specified position.","pos":[36827,36893]},{"pos":[37005,37015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[37036,37045]},{"content":"Description","pos":[37046,37057]},{"content":"The position of the vector element.","pos":[37068,37103]},{"pos":[37114,37126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the position specified is greater than or equal to the size of the container, the result is undefined.","pos":[37130,37235]},{"pos":[37245,37252],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the return value of <ph id=\"ph1\">`operator[]`</ph> is assigned to a <ph id=\"ph2\">`const_reference`</ph>, the vector object cannot be modified.","pos":[37256,37365],"source":"If the return value of `operator[]` is assigned to a `const_reference`, the vector object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`operator[]`</ph> is assigned to a reference, the vector object can be modified.","pos":[37366,37464],"source":" If the return value of `operator[]` is assigned to a reference, the vector object can be modified."},{"content":"When compiling with _SECURE_SCL 1 (controlled with <bpt id=\"p1\">[</bpt>_ITERATOR_DEBUG_LEVEL<ept id=\"p1\">](../standard-library/iterator-debug-level.md)</ept>), a runtime error will occur if you attempt to access an element outside the bounds of the vector.","pos":[37471,37689],"source":"When compiling with _SECURE_SCL 1 (controlled with [_ITERATOR_DEBUG_LEVEL](../standard-library/iterator-debug-level.md)), a runtime error will occur if you attempt to access an element outside the bounds of the vector."},{"content":"See <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept> for more information.","pos":[37691,37778],"source":"  See [Checked Iterators](../standard-library/checked-iterators.md) for more information."},{"pos":[37788,37795],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38127,38180],"content":"<bpt id=\"p1\">&lt;a name=\"vector__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::operator=","linkify":"<a name=\"vector__operator_eq\"></a>  vector::operator=","source":"<a name=\"vector__operator_eq\"></a>  vector::operator="},{"content":"Replaces the elements of the vector with a copy of another vector.","pos":[38184,38250]},{"pos":[38351,38361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[38382,38391]},{"content":"Description","pos":[38392,38403]},{"pos":[38417,38498],"content":"The <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept> being copied into the <ph id=\"ph1\">`vector`</ph>.","source":"The [vector](../standard-library/vector-class.md) being copied into the `vector`."},{"pos":[38509,38516],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38520,38649],"content":"After erasing any existing elements in a <ph id=\"ph1\">`vector`</ph>, <ph id=\"ph2\">`operator=`</ph> either copies or moves the contents of <ph id=\"ph3\">` right`</ph> into the <ph id=\"ph4\">`vector`</ph>.","source":"After erasing any existing elements in a `vector`, `operator=` either copies or moves the contents of ` right` into the `vector`."},{"pos":[38659,38666],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[39480,39527],"content":"<bpt id=\"p1\">&lt;a name=\"vector__pointer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::pointer","linkify":"<a name=\"vector__pointer\"></a>  vector::pointer","source":"<a name=\"vector__pointer\"></a>  vector::pointer"},{"content":"A type that provides a pointer to an element in a vector.","pos":[39531,39588]},{"pos":[39660,39667],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39671,39736],"content":"A type <bpt id=\"p1\">**</bpt>pointer<ept id=\"p1\">**</ept> can be used to modify the value of an element.","source":"A type **pointer** can be used to modify the value of an element."},{"pos":[39746,39753],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[40176,40225],"content":"<bpt id=\"p1\">&lt;a name=\"vector__pop_back\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::pop_back","linkify":"<a name=\"vector__pop_back\"></a>  vector::pop_back","source":"<a name=\"vector__pop_back\"></a>  vector::pop_back"},{"content":"Deletes the element at the end of the vector.","pos":[40229,40274]},{"pos":[40316,40323],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40327,40393],"content":"For a code example, see <bpt id=\"p1\">[</bpt>vector::push_back()<ept id=\"p1\">](#vector__push_back)</ept>.","source":"For a code example, see [vector::push_back()](#vector__push_back)."},{"pos":[40403,40454],"content":"<bpt id=\"p1\">&lt;a name=\"vector__push_back\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::push_back","linkify":"<a name=\"vector__push_back\"></a>  vector::push_back","source":"<a name=\"vector__push_back\"></a>  vector::push_back"},{"content":"Adds an element to the end of the vector.","pos":[40458,40499]},{"pos":[40582,40592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value to assign to the element added to the end of the vector.","pos":[40605,40671]},{"pos":[40681,40688],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[41514,41559],"content":"<bpt id=\"p1\">&lt;a name=\"vector__rbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::rbegin","linkify":"<a name=\"vector__rbegin\"></a>  vector::rbegin","source":"<a name=\"vector__rbegin\"></a>  vector::rbegin"},{"content":"Returns an iterator to the first element in a reversed vector.","pos":[41563,41625]},{"pos":[41716,41728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reverse random-access iterator addressing the first element in a reversed vector or addressing what had been the last element in the unreversed vector.","pos":[41732,41885]},{"pos":[41895,41902],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the return value of <ph id=\"ph1\">`rbegin`</ph> is assigned to a <ph id=\"ph2\">`const_reverse_iterator`</ph>, the vector object cannot be modified.","pos":[41906,42018],"source":"If the return value of `rbegin` is assigned to a `const_reverse_iterator`, the vector object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`rbegin`</ph> is assigned to a <ph id=\"ph2\">`reverse_iterator`</ph>, the vector object can be modified.","pos":[42019,42122],"source":" If the return value of `rbegin` is assigned to a `reverse_iterator`, the vector object can be modified."},{"pos":[42132,42139],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42821,42872],"content":"<bpt id=\"p1\">&lt;a name=\"vector__reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::reference","linkify":"<a name=\"vector__reference\"></a>  vector::reference","source":"<a name=\"vector__reference\"></a>  vector::reference"},{"content":"A type that provides a reference to an element stored in a vector.","pos":[42876,42942]},{"pos":[43018,43025],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[43030,43115],"content":"See <bpt id=\"p1\">[</bpt>at<ept id=\"p1\">](#vector__at)</ept> for an example of how to use <bpt id=\"p2\">**</bpt>reference<ept id=\"p2\">**</ept> in the vector class.","source":"See [at](#vector__at) for an example of how to use **reference** in the vector class."},{"pos":[43125,43166],"content":"<bpt id=\"p1\">&lt;a name=\"vector__rend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::rend","linkify":"<a name=\"vector__rend\"></a>  vector::rend","source":"<a name=\"vector__rend\"></a>  vector::rend"},{"content":"Returns an iterator that addresses the location succeeding the last element in a reversed vector.","pos":[43170,43267]},{"pos":[43354,43366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reverse random-access iterator that addresses the location succeeding the last element in a reversed vector (the location that had preceded the first element in the unreversed vector).","pos":[43370,43556]},{"pos":[43566,43573],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43577,43665],"content":"<ph id=\"ph1\">`rend`</ph> is used with a reversed vector just as <bpt id=\"p1\">[</bpt>end<ept id=\"p1\">](#vector__end)</ept> is used with a vector.","source":"`rend` is used with a reversed vector just as [end](#vector__end) is used with a vector."},{"content":"If the return value of <ph id=\"ph1\">`rend`</ph> is assigned to a <ph id=\"ph2\">`const_reverse_iterator`</ph>, then the vector object cannot be modified.","pos":[43672,43787],"source":"If the return value of `rend` is assigned to a `const_reverse_iterator`, then the vector object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`rend`</ph> is assigned to a <ph id=\"ph2\">`reverse_iterator`</ph>, then the vector object can be modified.","pos":[43788,43894],"source":" If the return value of `rend` is assigned to a `reverse_iterator`, then the vector object can be modified."},{"pos":[43901,43992],"content":"<ph id=\"ph1\">`rend`</ph> can be used to test to whether a reverse iterator has reached the end of its vector.","source":"`rend` can be used to test to whether a reverse iterator has reached the end of its vector."},{"pos":[43999,44055],"content":"The value returned by <ph id=\"ph1\">`rend`</ph> should not be dereferenced.","source":"The value returned by `rend` should not be dereferenced."},{"pos":[44065,44072],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[44503,44550],"content":"<bpt id=\"p1\">&lt;a name=\"vector__reserve\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::reserve","linkify":"<a name=\"vector__reserve\"></a>  vector::reserve","source":"<a name=\"vector__reserve\"></a>  vector::reserve"},{"content":"Reserves a minimum length of storage for a vector object, allocating space if necessary.","pos":[44554,44642]},{"pos":[44698,44708],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The minimum length of storage to be allocated for the vector.","pos":[44724,44785]},{"pos":[44795,44802],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[45317,45362],"content":"<bpt id=\"p1\">&lt;a name=\"vector__resize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::resize","linkify":"<a name=\"vector__resize\"></a>  vector::resize","source":"<a name=\"vector__resize\"></a>  vector::resize"},{"content":"Specifies a new size for a vector.","pos":[45366,45400]},{"pos":[45499,45509],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new size of the vector.","pos":[45526,45553]},{"content":"The initialization value of new elements added to the vector if the new size is larger that the original size.","pos":[45569,45679]},{"content":"If the value is omitted, the new objects use their default constructor.","pos":[45680,45751]},{"pos":[45761,45768],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the container's size is less than the requested size, <ph id=\"ph1\">`Newsize`</ph>, elements are added to the vector until it reaches the requested size.","pos":[45772,45909],"source":"If the container's size is less than the requested size, `Newsize`, elements are added to the vector until it reaches the requested size."},{"content":"If the container's size is larger than the requested size, the elements closest to the end of the container are deleted until the container reaches the size <ph id=\"ph1\">`Newsize`</ph>.","pos":[45910,46077],"source":" If the container's size is larger than the requested size, the elements closest to the end of the container are deleted until the container reaches the size `Newsize`."},{"content":"If the present size of the container is the same as the requested size, no action is taken.","pos":[46078,46169]},{"pos":[46176,46238],"content":"<bpt id=\"p1\">[</bpt>size<ept id=\"p1\">](#vector__size)</ept> reflects the current size of the vector.","source":"[size](#vector__size) reflects the current size of the vector."},{"pos":[46248,46255],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[49663,49728],"content":"<bpt id=\"p1\">&lt;a name=\"vector__reverse_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::reverse_iterator","linkify":"<a name=\"vector__reverse_iterator\"></a>  vector::reverse_iterator","source":"<a name=\"vector__reverse_iterator\"></a>  vector::reverse_iterator"},{"content":"A type that provides a random-access iterator that can read or modify any element in a reversed vector.","pos":[49732,49835]},{"pos":[49920,49927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49931,50006],"content":"A type <ph id=\"ph1\">`reverse_iterator`</ph> is used to iterate through the vector in reverse.","source":"A type `reverse_iterator` is used to iterate through the vector in reverse."},{"pos":[50016,50023],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[50028,50074],"content":"See the example for <bpt id=\"p1\">[</bpt>rbegin<ept id=\"p1\">](#vector__rbegin)</ept>.","source":"See the example for [rbegin](#vector__rbegin)."},{"pos":[50084,50143],"content":"<bpt id=\"p1\">&lt;a name=\"vector__shrink_to_fit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::shrink_to_fit","linkify":"<a name=\"vector__shrink_to_fit\"></a>  vector::shrink_to_fit","source":"<a name=\"vector__shrink_to_fit\"></a>  vector::shrink_to_fit"},{"content":"Discards excess capacity.","pos":[50147,50172]},{"pos":[50219,50226],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[50878,50919],"content":"<bpt id=\"p1\">&lt;a name=\"vector__size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::size","linkify":"<a name=\"vector__size\"></a>  vector::size","source":"<a name=\"vector__size\"></a>  vector::size"},{"content":"Returns the number of elements in the vector.","pos":[50923,50968]},{"pos":[51017,51029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current length of the vector.","pos":[51033,51066]},{"pos":[51076,51083],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[51584,51635],"content":"<bpt id=\"p1\">&lt;a name=\"vector__size_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::size_type","linkify":"<a name=\"vector__size_type\"></a>  vector::size_type","source":"<a name=\"vector__size_type\"></a>  vector::size_type"},{"content":"A type that counts the number of elements in a vector.","pos":[51639,51693]},{"pos":[51769,51776],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[51781,51831],"content":"See the example for <bpt id=\"p1\">[</bpt>capacity<ept id=\"p1\">](#vector__capacity)</ept>.","source":"See the example for [capacity](#vector__capacity)."},{"pos":[51841,51882],"content":"<bpt id=\"p1\">&lt;a name=\"vector__swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::swap","linkify":"<a name=\"vector__swap\"></a>  vector::swap","source":"<a name=\"vector__swap\"></a>  vector::swap"},{"content":"Exchanges the elements of two vectors.","pos":[51886,51924]},{"pos":[52090,52100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A vector providing the elements to be swapped, or a vector whose elements are to be exchanged with those of the vector <ph id=\"ph1\">` left`</ph>.","pos":[52116,52243],"source":" A vector providing the elements to be swapped, or a vector whose elements are to be exchanged with those of the vector ` left`."},{"content":"A vector whose elements are to be exchanged with those of the vector <ph id=\"ph1\">` right`</ph>.","pos":[52261,52339],"source":" A vector whose elements are to be exchanged with those of the vector ` right`."},{"pos":[52349,52356],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[53172,53225],"content":"<bpt id=\"p1\">&lt;a name=\"vector__value_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::value_type","linkify":"<a name=\"vector__value_type\"></a>  vector::value_type","source":"<a name=\"vector__value_type\"></a>  vector::value_type"},{"content":"A type that represents the data type stored in a vector.","pos":[53229,53285]},{"pos":[53363,53370],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[53374,53436],"content":"<ph id=\"ph1\">`value_type`</ph> is a synonym for the template parameter <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>.","source":"`value_type` is a synonym for the template parameter **Type**."},{"pos":[53446,53453],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[53733,53778],"content":"<bpt id=\"p1\">&lt;a name=\"vector__vector\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector::vector","linkify":"<a name=\"vector__vector\"></a>  vector::vector","source":"<a name=\"vector__vector\"></a>  vector::vector"},{"content":"Constructs a vector of a specific size or with elements of a specific value or with a specific allocator or as a copy of all or part of some other vector.","pos":[53782,53936]},{"pos":[54448,54458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[54479,54488]},{"content":"Description","pos":[54489,54500]},{"content":"The allocator class to use with this object.","pos":[54510,54554]},{"content":"<bpt id=\"p1\">[</bpt>get_allocator<ept id=\"p1\">](#vector__get_allocator)</ept> returns the allocator class for the object.","pos":[54555,54638],"source":"[get_allocator](#vector__get_allocator) returns the allocator class for the object."},{"content":"The number of elements in the constructed vector.","pos":[54651,54700]},{"content":"The value of the elements in the constructed vector.","pos":[54711,54763]},{"content":"The vector of which the constructed vector is to be a copy.","pos":[54776,54835]},{"content":"Position of the first element in the range of elements to be copied.","pos":[54848,54916]},{"content":"Position of the first element beyond the range of elements to be copied.","pos":[54928,55000]},{"content":"The initializer_list containing the elmeents to copy.","pos":[55013,55066]},{"pos":[55077,55084],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[55088,55165],"content":"All constructors store an allocator object ( <ph id=\"ph1\">`Al`</ph>) and initialize the vector.","source":"All constructors store an allocator object ( `Al`) and initialize the vector."},{"content":"The first two constructors specify an empty initial vector.","pos":[55172,55231]},{"content":"The second explicitly specifies the allocator type ( <ph id=\"ph1\">`Al`</ph>) to be used.","pos":[55232,55302],"source":" The second explicitly specifies the allocator type ( `Al`) to be used."},{"pos":[55309,55437],"content":"The third constructor specifies a repetition of a specified number ( <ph id=\"ph1\">`Count`</ph>) of elements of the default value for class <ph id=\"ph2\">`Type`</ph>.","source":"The third constructor specifies a repetition of a specified number ( `Count`) of elements of the default value for class `Type`."},{"pos":[55444,55537],"content":"The fourth and fifth constructors specify a repetition of ( <ph id=\"ph1\">`Count`</ph>) elements of value <ph id=\"ph2\">`Val`</ph>.","source":"The fourth and fifth constructors specify a repetition of ( `Count`) elements of value `Val`."},{"pos":[55544,55605],"content":"The sixth constructor specifies a copy of the vector <ph id=\"ph1\">`Right`</ph>.","source":"The sixth constructor specifies a copy of the vector `Right`."},{"pos":[55612,55661],"content":"The seventh constructor moves the vector <ph id=\"ph1\">`Right`</ph>.","source":"The seventh constructor moves the vector `Right`."},{"content":"The eighth constructor uses an initializer_list to specify the elements.","pos":[55668,55740]},{"pos":[55747,55826],"content":"The ninth and tenth constructors copy the range [ <ph id=\"ph1\">`First`</ph>, <ph id=\"ph2\">`Last`</ph>) of a vector.","source":"The ninth and tenth constructors copy the range [ `First`, `Last`) of a vector."},{"pos":[55836,55843],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[57945,57953],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[57957,58067],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[58070,58158],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"vector Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::vector\"\n  - \"vector\"\n  - \"std.vector\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"vector class\"\nms.assetid: a3e0a8f8-7565-4fe0-93e4-e4d74ae1b70d\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vector Class\nThe STL vector class is a template class of sequence containers that arrange elements of a given type in a linear arrangement and allow fast random access to any element. They should be the preferred container for a sequence when random-access performance is at a premium.  \n  \n## Syntax  \n  \n```  \ntemplate <class Type, class Allocator = allocator<Type>>  \nclass vector  \n```  \n  \n#### Parameters  \n *Type*  \n The element data type to be stored in the vector  \n  \n `Allocator`  \n The type that represents the stored allocator object that encapsulates details about the vector's allocation and deallocation of memory. This argument is optional and the default value is **allocator***\\<Type>.*  \n  \n## Remarks  \n Vectors allow constant time insertions and deletions at the end of the sequence. Inserting or deleting elements in the middle of a vector requires linear time. The performance of the [deque Class](../standard-library/deque-class.md) container is superior with respect to insertions and deletions at the beginning and end of a sequence. The [list Class](../standard-library/list-class.md) container is superior with respect to insertions and deletions at any location within a sequence.  \n  \n Vector reallocation occurs when a member function must increase the sequence contained in the vector object beyond its current storage capacity. Other insertions and erasures may alter various storage addresses within the sequence. In all such cases, iterators or references that point at altered portions of the sequence become invalid. If no reallocation happens, only iterators and references before the insertion/deletion point remain valid.  \n  \n The [vector\\<bool> Class](../standard-library/vector-bool-class.md) is a full specialization of the template class vector for elements of type bool with an allocator for the underlying type used by the specialization.  \n  \n The [vector\\<bool> reference Class](../standard-library/vector-bool-class.md#vector_lt_bool_gt___reference_class) is a nested class whose objects are able to provide references to elements (single bits) within a vector\\<bool> object.  \n  \n## Members  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[vector](#vector__vector)|Constructs a vector of a specific size or with elements of a specific value or with a specific `allocator` or as a copy of some other vector.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[allocator_type](#vector__allocator_type)|A type that represents the `allocator` class for the vector object.|  \n|[const_iterator](#vector__const_iterator)|A type that provides a random-access iterator that can read a `const` element in a vector.|  \n|[const_pointer](#vector__const_pointer)|A type that provides a pointer to a `const` element in a vector.|  \n|[const_reference](#vector__const_reference)|A type that provides a reference to a `const` element stored in a vector for reading and performing `const` operations.|  \n|[const_reverse_iterator](#vector__const_reverse_iterator)|A type that provides a random-access iterator that can read any `const` element in the vector.|  \n|[difference_type](#vector__difference_type)|A type that provides the difference between the addresses of two elements in a vector.|  \n|[iterator](#vector__iterator)|A type that provides a random-access iterator that can read or modify any element in a vector.|  \n|[pointer](#vector__pointer)|A type that provides a pointer to an element in a vector.|  \n|[reference](#vector__reference)|A type that provides a reference to an element stored in a vector.|  \n|[reverse_iterator](#vector__reverse_iterator)|A type that provides a random-access iterator that can read or modify any element in a reversed vector.|  \n|[size_type](#vector__size_type)|A type that counts the number of elements in a vector.|  \n|[value_type](#vector__value_type)|A type that represents the data type stored in a vector.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[assign](#vector__assign)|Erases a vector and copies the specified elements to the empty vector.|  \n|[at](#vector__at)|Returns a reference to the element at a specified location in the vector.|  \n|[back](#vector__back)|Returns a reference to the last element of the vector.|  \n|[begin](#vector__begin)|Returns a random-access iterator to the first element in the vector.|  \n|[capacity](#vector__capacity)|Returns the number of elements that the vector could contain without allocating more storage.|  \n|[cbegin](#vector__cbegin)|Returns a random-access const iterator to the first element in the vector.|  \n|[cend](#vector__cend)|Returns a random-access const iterator that points just beyond the end of the vector.|  \n|[crbegin](#vector__crbegin)|Returns a const iterator to the first element in a reversed vector.|  \n|[crend](#vector__crend)|Returns a const iterator to the end of a reversed vector.|  \n|[clear](#vector__clear)|Erases the elements of the vector.|  \n|[data](#vector__data)|Returns a pointer to the first element in the vector.|  \n|[emplace](#vector__emplace)|Inserts an element constructed in place into the vector at a specified position.|  \n|[emplace_back](#vector__emplace_back)|Adds an element constructed in place to the end of the vector.|  \n|[empty](#vector__empty)|Tests if the vector container is empty.|  \n|[end](#vector__end)|Returns a random-access iterator that points to the end of the vector.|  \n|[erase](#vector__erase)|Removes an element or a range of elements in a vector from specified positions.|  \n|[front](#vector__front)|Returns a reference to the first element in a vector.|  \n|[get_allocator](#vector__get_allocator)|Returns an object to the `allocator` class used by a vector.|  \n|[insert](#vector__insert)|Inserts an element or a number of elements into the vector at a specified position.|  \n|[max_size](#vector__max_size)|Returns the maximum length of the vector.|  \n|[pop_back](#vector__pop_back)|Deletes the element at the end of the vector.|  \n|[push_back](#vector__push_back)|Add an element to the end of the vector.|  \n|[rbegin](#vector__rbegin)|Returns an iterator to the first element in a reversed vector.|  \n|[rend](#vector__rend)|Returns an iterator to the end of a reversed vector.|  \n|[reserve](#vector__reserve)|Reserves a minimum length of storage for a vector object.|  \n|[resize](#vector__resize)|Specifies a new size for a vector.|  \n|[shrink_to_fit](#vector__shrink_to_fit)|Discards excess capacity.|  \n|[size](#vector__size)|Returns the number of elements in the vector.|  \n|[swap](#vector__swap)|Exchanges the elements of two vectors.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator&#91;&#93;](#vector__operator_at)|Returns a reference to the vector element at a specified position.|  \n|[operator=](#vector__operator_eq)|Replaces the elements of the vector with a copy of another vector.|  \n  \n## Requirements  \n **Header:** \\<vector>  \n  \n **Namespace:** std  \n  \n##  <a name=\"vector__allocator_type\"></a>  vector::allocator_type  \n A type that represents the allocator class for the vector object.  \n  \n```  \ntypedef Allocator allocator_type;  \n```  \n  \n### Remarks  \n `allocator_type` is a synonym for the template parameter **Allocator.**  \n  \n### Example  \n  See the example for [get_allocator](#vector__get_allocator) for an example that uses `allocator_type`.  \n  \n##  <a name=\"vector__assign\"></a>  vector::assign  \n Erases a vector and copies the specified elements to the empty vector.  \n  \n```  \nvoid assign(size_type Count, const Type& Val);\nvoid assign(initializer_list<Type> IList);\n\ntemplate <class InputIterator>  \nvoid assign(InputIterator First, InputIterator Last);\n```  \n  \n### Parameters  \n `First`  \n Position of the first element in the range of elements to be copied.  \n  \n `Last`  \n Position of the first element beyond the range of elements to be copied.  \n  \n `Count`  \n The number of copies of an element being inserted into the vector.  \n  \n `Val`  \n The value of the element being inserted into the vector.  \n  \n `IList`  \n The initializer_list containing the elements to insert.  \n  \n### Remarks  \n After erasing any existing elements in a vector, assign either inserts a specified range of elements from the original vector into a vector or inserts copies of a new element of a specified value into a vector.  \n  \n### Example  \n  \n```cpp  \n/ vector_assign.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    vector<int> v1, v2, v3;  \n  \n    v1.push_back(10);  \n    v1.push_back(20);  \n    v1.push_back(30);  \n    v1.push_back(40);  \n    v1.push_back(50);  \n  \n    cout << \"v1 = \";  \n    for (auto& v : v1){  \n        cout << v << \" \";  \n    }  \n    cout << endl;  \n  \n    v2.assign(v1.begin(), v1.end());  \n    cout << \"v2 = \";  \n    for (auto& v : v2){  \n        cout << v << \" \";  \n    }  \n    cout << endl;  \n  \n    v3.assign(7, 4);  \n    cout << \"v3 = \";  \n    for (auto& v : v3){  \n        cout << v << \" \";  \n    }  \n    cout << endl;  \n  \n    v3.assign({ 5, 6, 7 });  \n    for (auto& v : v3){  \n        cout << v << \" \";  \n    }  \n    cout << endl;  \n}  \n  \n```  \n  \n##  <a name=\"vector__at\"></a>  vector::at  \n Returns a reference to the element at a specified location in the vector.  \n  \n```  \nreference at(size_type _Pos);\n\nconst_reference at(size_type _Pos) const;\n```  \n  \n### Parameters  \n `_Pos`  \n The subscript or position number of the element to reference in the vector.  \n  \n### Return Value  \n A reference to the element subscripted in the argument. If `_Off` is greater than the size of the vector, **at** throws an exception.  \n  \n### Remarks  \n If the return value of **at** is assigned to a `const_reference`, the vector object cannot be modified. If the return value of **at** is assigned to a **reference**, the vector object can be modified.  \n  \n### Example  \n  \n```cpp  \n// vector_at.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   vector <int> v1;  \n  \n   v1.push_back( 10 );  \n   v1.push_back( 20 );  \n  \n   const int &i = v1.at( 0 );  \n   int &j = v1.at( 1 );  \n   cout << \"The first element is \" << i << endl;  \n   cout << \"The second element is \" << j << endl;  \n}  \n```  \n  \n```Output  \nThe first element is 10  \nThe second element is 20  \n```  \n  \n##  <a name=\"vector__back\"></a>  vector::back  \n Returns a reference to the last element of the vector.  \n  \n```  \nreference back();\n\nconst_reference back() const;\n```  \n  \n### Return Value  \n The last element of the vector. If the vector is empty, the return value is undefined.  \n  \n### Remarks  \n If the return value of **back** is assigned to a `const_reference`, the vector object cannot be modified. If the return value of **back** is assigned to a **reference**, the vector object can be modified.  \n  \n When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element in an empty vector.  See [Checked Iterators](../standard-library/checked-iterators.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// vector_back.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main() {  \n   using namespace std;     \n   vector <int> v1;  \n  \n   v1.push_back( 10 );  \n   v1.push_back( 11 );  \n  \n   int& i = v1.back( );  \n   const int& ii = v1.front( );  \n  \n   cout << \"The last integer of v1 is \" << i << endl;  \n   i--;  \n   cout << \"The next-to-last integer of v1 is \"<< ii << endl;  \n}  \n```  \n  \n##  <a name=\"vector__begin\"></a>  vector::begin  \n Returns a random-access iterator to the first element in the vector.  \n  \n```  \nconst_iterator begin() const;\n\n \niterator begin();\n```  \n  \n### Return Value  \n A random-access iterator addressing the first element in the `vector` or to the location succeeding an empty `vector`. You should always compare the value returned with [vector::end](#vector__end) to ensure it is valid.  \n  \n### Remarks  \n If the return value of `begin` is assigned to a [vector::const_iterator](#vector__const_iterator), the `vector` object cannot be modified. If the return value of `begin` is assigned to an [vector::iterator](#vector__iterator), the `vector` object can be modified.  \n  \n### Example  \n  \n```cpp  \n// vector_begin.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    vector<int> c1;  \n    vector<int>::iterator c1_Iter;  \n    vector<int>::const_iterator c1_cIter;  \n  \n    c1.push_back(1);  \n    c1.push_back(2);  \n  \n    cout << \"The vector c1 contains elements:\";  \n    c1_Iter = c1.begin();  \n    for (; c1_Iter != c1.end(); c1_Iter++)  \n    {  \n        cout << \" \" << *c1_Iter;  \n    }  \n    cout << endl;  \n  \n    cout << \"The vector c1 now contains elements:\";  \n    c1_Iter = c1.begin();  \n *c1_Iter = 20;  \n    for (; c1_Iter != c1.end(); c1_Iter++)  \n    {  \n        cout << \" \" << *c1_Iter;  \n    }  \n    cout << endl;  \n  \n    // The following line would be an error because iterator is const  \n    // *c1_cIter = 200;  \n}  \n```  \n  \n```Output  \nThe vector c1 contains elements: 1 2  \nThe vector c1 now contains elements: 20 2  \n```  \n  \n##  <a name=\"vector__capacity\"></a>  vector::capacity  \n Returns the number of elements that the vector could contain without allocating more storage.  \n  \n```  \nsize_type capacity() const;\n```  \n  \n### Return Value  \n The current length of storage allocated for the vector.  \n  \n### Remarks  \n The member function [resize](#vector__resize) will be more efficient if sufficient memory is allocated to accommodate it. Use the member function [reserve](#vector__reserve) to specify the amount of memory allocated.  \n  \n### Example  \n  \n```cpp  \n// vector_capacity.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   vector <int> v1;  \n  \n   v1.push_back( 1 );  \n   cout << \"The length of storage allocated is \"  \n        << v1.capacity( ) << \".\" << endl;  \n  \n   v1.push_back( 2 );  \n   cout << \"The length of storage allocated is now \"  \n        << v1.capacity( ) << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe length of storage allocated is 1.  \nThe length of storage allocated is now 2.  \n```  \n  \n##  <a name=\"vector__cbegin\"></a>  vector::cbegin  \n Returns a `const` iterator that addresses the first element in the range.  \n  \n```  \nconst_iterator cbegin() const;\n```  \n  \n### Return Value  \n A `const` random-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, `cbegin() == cend()`).  \n  \n### Remarks  \n With the return value of `cbegin`, the elements in the range cannot be modified.  \n  \n You can use this member function in place of the `begin()` member function to guarantee that the return value is `const_iterator`. Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example. In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `begin()` and `cbegin()`.  \n  \n```cpp  \n \nauto i1 = Container.begin();\n// i1 is Container<T>::iterator   \nauto i2 = Container.cbegin();\n\n// i2 is Container<T>::const_iterator  \n```  \n  \n##  <a name=\"vector__cend\"></a>  vector::cend  \n Returns a `const` iterator that addresses the location just beyond the last element in a range.  \n  \n```  \nconst_iterator cend() const;\n```  \n  \n### Return Value  \n A `const` random-access iterator that points just beyond the end of the range.  \n  \n### Remarks  \n `cend` is used to test whether an iterator has passed the end of its range.  \n  \n You can use this member function in place of the `end()` member function to guarantee that the return value is `const_iterator`. Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example. In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `end()` and `cend()`.  \n  \n```cpp  \n \nauto i1 = Container.end();\n// i1 is Container<T>::iterator   \nauto i2 = Container.cend();\n\n// i2 is Container<T>::const_iterator  \n```  \n  \n The value returned by `cend` should not be dereferenced.  \n  \n##  <a name=\"vector__clear\"></a>  vector::clear  \n Erases the elements of the vector.  \n  \n```  \nvoid clear();\n```  \n  \n### Example  \n  \n```cpp  \n// vector_clear.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n  \n   v1.push_back( 10 );  \n   v1.push_back( 20 );  \n   v1.push_back( 30 );  \n  \n   cout << \"The size of v1 is \" << v1.size( ) << endl;  \n   v1.clear( );  \n   cout << \"The size of v1 after clearing is \" << v1.size( ) << endl;  \n}  \n```  \n  \n```Output  \nThe size of v1 is 3  \nThe size of v1 after clearing is 0  \n```  \n  \n##  <a name=\"vector__const_iterator\"></a>  vector::const_iterator  \n A type that provides a random-access iterator that can read a **const** element in a vector.  \n  \n```  \ntypedef implementation-defined const_iterator;  \n```  \n  \n### Remarks  \n A type `const_iterator` cannot be used to modify the value of an element.  \n  \n### Example  \n  See the example for [back](#vector__back) for an example that uses `const_iterator`.  \n  \n##  <a name=\"vector__const_pointer\"></a>  vector::const_pointer  \n A type that provides a pointer to a **const** element in a vector.  \n  \n```  \ntypedef typename Allocator::const_pointer const_pointer;  \n```  \n  \n### Remarks  \n A type `const_pointer` cannot be used to modify the value of an element.  \n  \n An [iterator](#vector__iterator) is more commonly used to access a vector element.  \n  \n##  <a name=\"vector__const_reference\"></a>  vector::const_reference  \n A type that provides a reference to a **const** element stored in a vector for reading and performing **const** operations.  \n  \n```  \ntypedef typename Allocator::const_reference const_reference;  \n```  \n  \n### Remarks  \n A type `const_reference` cannot be used to modify the value of an element.  \n  \n### Example  \n  \n```cpp  \n// vector_const_ref.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   vector <int> v1;  \n  \n   v1.push_back( 10 );  \n   v1.push_back( 20 );  \n  \n   const vector <int> v2 = v1;  \n   const int &i = v2.front( );  \n   const int &j = v2.back( );  \n   cout << \"The first element is \" << i << endl;  \n   cout << \"The second element is \" << j << endl;  \n  \n   // The following line would cause an error as v2 is const  \n   // v2.push_back( 30 );  \n}  \n```  \n  \n```Output  \nThe first element is 10  \nThe second element is 20  \n```  \n  \n##  <a name=\"vector__const_reverse_iterator\"></a>  vector::const_reverse_iterator  \n A type that provides a random-access iterator that can read any **const** element in the vector.  \n  \n```  \ntypedef std::reverse_iterator<const_iterator> const_reverse_iterator;  \n```  \n  \n### Remarks  \n A type `const_reverse_iterator` cannot modify the value of an element and is used to iterate through the vector in reverse.  \n  \n### Example  \n  See [rbegin](#vector__rbegin) for an example of how to declare and use an iterator.  \n  \n##  <a name=\"vector__crbegin\"></a>  vector::crbegin  \n Returns a const iterator to the first element in a reversed vector.  \n  \n```  \nconst_reverse_iterator crbegin() const;\n```  \n  \n### Return Value  \n A const reverse random-access iterator addressing the first element in a reversed [vector](../standard-library/vector-class.md) or addressing what had been the last element in the unreversed `vector`.  \n  \n### Remarks  \n With the return value of `crbegin`, the `vector` object cannot be modified.  \n  \n### Example  \n  \n```cpp  \n// vector_crbegin.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n   vector <int>::iterator v1_Iter;  \n   vector <int>::const_reverse_iterator v1_rIter;  \n  \n   v1.push_back( 1 );  \n   v1.push_back( 2 );  \n  \n   v1_Iter = v1.begin( );  \n   cout << \"The first element of vector is \"  \n        << *v1_Iter << \".\" << endl;  \n  \n   v1_rIter = v1.crbegin( );  \n   cout << \"The first element of the reversed vector is \"  \n        << *v1_rIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element of vector is 1.  \nThe first element of the reversed vector is 2.  \n```  \n  \n##  <a name=\"vector__crend\"></a>  vector::crend  \n Returns a const iterator that addresses the location succeeding the last element in a reversed vector.  \n  \n```  \nconst_reverse_iterator crend() const;\n```  \n  \n### Return Value  \n A const reverse random-access iterator that addresses the location succeeding the last element in a reversed [vector](../standard-library/vector-class.md) (the location that had preceded the first element in the unreversed `vector`).  \n  \n### Remarks  \n `crend` is used with a reversed `vector` just as [vector::cend](#vector__cend) is used with a `vector`.  \n  \n With the return value of `crend` (suitably decremented), the `vector` object cannot be modified.  \n  \n `crend` can be used to test to whether a reverse iterator has reached the end of its `vector`.  \n  \n The value returned by `crend` should not be dereferenced.  \n  \n### Example  \n  \n```cpp  \n// vector_crend.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n   vector <int>::const_reverse_iterator v1_rIter;  \n  \n   v1.push_back( 1 );  \n   v1.push_back( 2 );  \n  \n   for ( v1_rIter = v1.rbegin( ) ; v1_rIter != v1.rend( ) ; v1_rIter++ )  \n      cout << *v1_rIter << endl;  \n}  \n```  \n  \n```Output  \n2  \n1  \n```  \n  \n##  <a name=\"vector__data\"></a>  vector::data  \n Returns a pointer to the first element in the vector.  \n  \n```  \nconst_pointer data() const;\n\n \npointer data();\n```  \n  \n### Return Value  \n A pointer to the first element in the [vector](../standard-library/vector-class.md) or to the location succeeding an empty `vector`.  \n  \n### Example  \n  \n```cpp  \n// vector_data.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    vector<int> c1;  \n    vector<int>::pointer c1 ptr;  \n    vector<int>::const_pointer c1_cPtr;  \n  \n    c1.push_back(1);  \n    c1.push_back(2);  \n  \n    cout << \"The vector c1 contains elements:\";  \n    c1_cPtr = c1.data();  \n    for (size_t n = c1.size(); 0 < n; --n, c1_cPtr++)  \n    {  \n        cout << \" \" << *c1_cPtr;  \n    }  \n    cout << endl;  \n  \n    cout << \"The vector c1 now contains elements:\";  \n    c1 ptr = c1.data();  \n *c1 ptr = 20;  \n    for (size_t n = c1.size(); 0 < n; --n, c1 ptr++)  \n    {  \n        cout << \" \" << *c1 ptr;  \n    }  \n    cout << endl;  \n}  \n```  \n  \n```Output  \nThe vector c1 contains elements: 1 2  \nThe vector c1 now contains elements: 20 2  \n```  \n  \n##  <a name=\"vector__difference_type\"></a>  vector::difference_type  \n A type that provides the difference between two iterators that refer to elements within the same vector.  \n  \n```  \ntypedef typename Allocator::difference_type difference_type;  \n```  \n  \n### Remarks  \n A `difference_type` can also be described as the number of elements between two pointers, because a pointer to an element contains its address.  \n  \n An [iterator](#vector__iterator) is more commonly used to access a vector element.  \n  \n### Example  \n  \n```cpp  \n// vector_diff_type.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <vector>  \n#include <algorithm>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   vector <int> c1;  \n   vector <int>::iterator c1_Iter, c2_Iter;  \n  \n   c1.push_back( 30 );  \n   c1.push_back( 20 );  \n   c1.push_back( 30 );  \n   c1.push_back( 10 );  \n   c1.push_back( 30 );  \n   c1.push_back( 20 );  \n  \n   c1_Iter = c1.begin( );  \n   c2_Iter = c1.end( );  \n  \n   vector <int>::difference_type   df_typ1, df_typ2, df_typ3;  \n  \n   df_typ1 = count( c1_Iter, c2_Iter, 10 );  \n   df_typ2 = count( c1_Iter, c2_Iter, 20 );  \n   df_typ3 = count( c1_Iter, c2_Iter, 30 );  \n   cout << \"The number '10' is in c1 collection \" << df_typ1 << \" times.\\n\";  \n   cout << \"The number '20' is in c1 collection \" << df_typ2 << \" times.\\n\";  \n   cout << \"The number '30' is in c1 collection \" << df_typ3 << \" times.\\n\";  \n}  \n```  \n  \n```Output  \nThe number '10' is in c1 collection 1 times.  \nThe number '20' is in c1 collection 2 times.  \nThe number '30' is in c1 collection 3 times.  \n```  \n  \n##  <a name=\"vector__emplace\"></a>  vector::emplace  \n Inserts an element constructed in place into the vector at a specified position.  \n  \n```  \niterator emplace(\n    const_iterator _Where,  \n    Type&& val);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`_Where`|The position in the [vector](../standard-library/vector-class.md) where the first element is inserted.|  \n|` val`|The value of the element being inserted into the `vector`.|  \n  \n### Return Value  \n The function returns an iterator that points to the position where the new element was inserted into the `vector`.  \n  \n### Remarks  \n Any insertion operation can be expensive, see [vector Class](../standard-library/vector-class.md) for a discussion of `vector` performance.  \n  \n### Example  \n  \n```cpp  \n// vector_emplace.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n   vector <int>::iterator Iter;  \n  \n   v1.push_back( 10 );  \n   v1.push_back( 20 );  \n   v1.push_back( 30 );  \n  \n   cout << \"v1 =\" ;  \n   for ( Iter = v1.begin( ) ; Iter != v1.end( ) ; Iter++ )  \n      cout << \" \" << *Iter;  \n   cout << endl;  \n  \n// initialize a vector of vectors by moving v1  \n   vector < vector <int> > vv1;  \n  \n   vv1.emplace( vv1.begin(), move( v1 ) );  \n   if ( vv1.size( ) != 0 && vv1[0].size( ) != 0 )  \n      {  \n      cout << \"vv1[0] =\";  \n      for (Iter = vv1[0].begin( ); Iter != vv1[0].end( ); Iter++ )  \n         cout << \" \" << *Iter;  \n      cout << endl;  \n      }  \n}  \n```  \n  \n```Output  \nv1 = 10 20 30  \nvv1[0] = 10 20 30  \n```  \n  \n##  <a name=\"vector__emplace_back\"></a>  vector::emplace_back  \n Adds an element constructed in place to the end of the vector.  \n  \n```  \ntemplate <class... Types>  \nvoid emplace_back(Types&&... _Args);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_Args`|Constructor arguments. The function infers which constructor overload to invoke based on the arguments provided.|  \n  \n### Example  \n  \n```cppcpp  \n  \n#include <vector>  \nstruct obj  \n{  \n   obj(int, double) {}  \n};  \n  \nint main()  \n{  \n   std::vector<obj> v;  \n   v.emplace_back(1, 3.14); // obj in created in place in the vector  \n}  \n  \n```  \n  \n##  <a name=\"vector__empty\"></a>  vector::empty  \n Tests if the vector is empty.  \n  \n```  \nbool empty() const;\n```  \n  \n### Return Value  \n **true** if the vector is empty; **false** if the vector is not empty.  \n  \n### Example  \n  \n```cpp  \n// vector_empty.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n  \n   v1.push_back( 10 );  \n  \n   if ( v1.empty( ) )  \n      cout << \"The vector is empty.\" << endl;  \n   else  \n      cout << \"The vector is not empty.\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector is not empty.  \n```  \n  \n##  <a name=\"vector__end\"></a>  vector::end  \n Returns the past-the-end iterator.  \n  \n```  \niterator end();\n\nconst_iterator end() const;\n```  \n  \n### Return Value  \n The past-the-end iterator for the vector. If the vector is empty, `vector::end() == vector::begin()`.  \n  \n### Remarks  \n If the return value of **end** is assigned to a variable of type `const_iterator`, the vector object cannot be modified. If the return value of **end** is assigned to a variable of type **iterator**, the vector object can be modified.  \n  \n### Example  \n  \n```cpp  \n// vector_end.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \nint main( )  \n{  \n   using namespace std;  \n   vector <int> v1;  \n   vector <int>::iterator v1_Iter;  \n  \n   v1.push_back( 1 );  \n   v1.push_back( 2 );  \n  \n   for ( v1_Iter = v1.begin( ) ; v1_Iter != v1.end( ) ; v1_Iter++ )  \n      cout << *v1_Iter << endl;  \n}  \n```  \n  \n```Output  \n1  \n2  \n```  \n  \n##  <a name=\"vector__erase\"></a>  vector::erase  \n Removes an element or a range of elements in a vector from specified positions.  \n  \n```  \niterator erase(\n    const_iterator _Where);\n\niterator erase(\n    const_iterator first,  \n    const_iterator last);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`_Where`|Position of the element to be removed from the vector.|  \n|` first`|Position of the first element removed from the vector.|  \n|` last`|Position just beyond the last element removed from the vector.|  \n  \n### Return Value  \n An iterator that designates the first element remaining beyond any elements removed, or a pointer to the end of the vector if no such element exists.  \n  \n### Example  \n  \n```cpp  \n// vector_erase.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n   vector <int>::iterator Iter;  \n  \n   v1.push_back( 10 );  \n   v1.push_back( 20 );  \n   v1.push_back( 30 );  \n   v1.push_back( 40 );  \n   v1.push_back( 50 );  \n  \n   cout << \"v1 =\" ;  \n   for ( Iter = v1.begin( ) ; Iter != v1.end( ) ; Iter++ )  \n      cout << \" \" << *Iter;  \n   cout << endl;  \n  \n   v1.erase( v1.begin( ) );  \n   cout << \"v1 =\";  \n   for ( Iter = v1.begin( ) ; Iter != v1.end( ) ; Iter++ )  \n      cout << \" \" << *Iter;  \n   cout << endl;  \n  \n   v1.erase( v1.begin( ) + 1, v1.begin( ) + 3 );  \n   cout << \"v1 =\";  \n   for ( Iter = v1.begin( ) ; Iter != v1.end( ) ; Iter++ )  \n      cout << \" \" << *Iter;  \n   cout << endl;  \n}  \n```  \n  \n```Output  \nv1 = 10 20 30 40 50  \nv1 = 20 30 40 50  \nv1 = 20 50  \n```  \n  \n##  <a name=\"vector__front\"></a>  vector::front  \n Returns a reference to the first element in a vector.  \n  \n```  \nreference front();\n\nconst_reference front() const;\n```  \n  \n### Return Value  \n A reference to the first element in the vector object. If the vector is empty, the return is undefined.  \n  \n### Remarks  \n If the return value of `front` is assigned to a `const_reference`, the vector object cannot be modified. If the return value of `front` is assigned to a **reference**, the vector object can be modified.  \n  \n When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element in an empty vector.  See [Checked Iterators](../standard-library/checked-iterators.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// vector_front.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n  \n   v1.push_back( 10 );  \n   v1.push_back( 11 );  \n  \n   int& i = v1.front( );  \n   const int& ii = v1.front( );  \n  \n   cout << \"The first integer of v1 is \"<< i << endl;  \n   // by incrementing i, we move the the front reference to the second element  \n   i++;  \n   cout << \"Now, the first integer of v1 is \"<< i << endl;  \n}  \n```  \n  \n##  <a name=\"vector__get_allocator\"></a>  vector::get_allocator  \n Returns a copy of the allocator object used to construct the vector.  \n  \n```  \nAllocator get_allocator() const;\n```  \n  \n### Return Value  \n The allocator used by the vector.  \n  \n### Remarks  \n Allocators for the vector class specify how the class manages storage. The default allocators supplied with STL container classes are sufficient for most programming needs. Writing and using your own allocator class is an advanced C++ topic.  \n  \n### Example  \n  \n```cpp  \n// vector_get_allocator.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   // The following lines declare objects that use the default allocator.  \n   vector<int> v1;  \n   vector<int, allocator<int> > v2 = vector<int, allocator<int> >(allocator<int>( )) ;  \n  \n   // v3 will use the same allocator class as v1  \n   vector <int> v3( v1.get_allocator( ) );  \n  \n   vector<int>::allocator_type xvec = v3.get_allocator( );  \n   // You can now call functions on the allocator class used by vec  \n}  \n```  \n  \n##  <a name=\"vector__insert\"></a>  vector::insert  \n Inserts an element or a number of elements or a range of elements into the vector at a specified position.  \n  \n```  \niterator insert(\n    const_iterator _Where,  \n    const Type& val);\n\niterator insert(\n    const_iterator _Where,  \n    Type&& val);\n\nvoid insert(\n    const_iterator _Where,  \n    size_type count,  \n    const Type& val);\n\ntemplate <class InputIterator>  \nvoid insert(\n    const_iterator _Where,  \n    InputIterator first,  \n    InputIterator last);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`_Where`|The position in the vector where the first element is inserted.|  \n|` val`|The value of the element being inserted into the vector.|  \n|` count`|The number of elements being inserted into the vector.|  \n|` first`|The position of the first element in the range of elements to be copied.|  \n|` last`|The position of the first element beyond the range of elements to be copied.|  \n  \n### Return Value  \n The first two `insert` functions return an iterator that points to the position where the new element was inserted into the vector.  \n  \n### Remarks  \n Any insertion operation can be expensive, see [vector Class](../standard-library/vector-class.md) for a discussion of `vector` performance.  \n  \n### Example  \n  \n```cpp  \n// vector_insert.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n   vector <int>::iterator Iter;  \n  \n   v1.push_back( 10 );  \n   v1.push_back( 20 );  \n   v1.push_back( 30 );  \n  \n   cout << \"v1 =\" ;  \n   for ( Iter = v1.begin( ) ; Iter != v1.end( ) ; Iter++ )  \n      cout << \" \" << *Iter;  \n   cout << endl;  \n  \n   v1.insert( v1.begin( ) + 1, 40 );  \n   cout << \"v1 =\";  \n   for ( Iter = v1.begin( ) ; Iter != v1.end( ) ; Iter++ )  \n      cout << \" \" << *Iter;  \n   cout << endl;  \n   v1.insert( v1.begin( ) + 2, 4, 50 );  \n  \n   cout << \"v1 =\";  \n   for ( Iter = v1.begin( ) ; Iter != v1.end( ) ; Iter++ )  \n      cout << \" \" << *Iter;  \n   cout << endl;  \n  \n   v1.insert( v1.begin( )+1, v1.begin( )+2, v1.begin( )+4 );  \n   cout << \"v1 =\";  \n   for (Iter = v1.begin( ); Iter != v1.end( ); Iter++ )  \n      cout << \" \" << *Iter;  \n   cout << endl;  \n  \n// initialize a vector of vectors by moving v1  \n   vector < vector <int> > vv1;  \n  \n   vv1.insert( vv1.begin(), move( v1 ) );  \n   if ( vv1.size( ) != 0 && vv1[0].size( ) != 0 )  \n      {  \n      vector < vector <int> >::iterator Iter;  \n      cout << \"vv1[0] =\";  \n      for (Iter = vv1[0].begin( ); Iter != vv1[0].end( ); Iter++ )  \n         cout << \" \" << *Iter;  \n      cout << endl;  \n      }  \n}  \n```  \n  \n```Output  \nv1 = 10 20 30  \nv1 = 10 40 20 30  \nv1 = 10 40 50 50 50 50 20 30  \nv1 = 10 50 50 40 50 50 50 50 20 30  \nvv1[0] = 10 50 50 40 50 50 50 50 20 30  \n```  \n  \n##  <a name=\"vector__iterator\"></a>  vector::iterator  \n A type that provides a random-access iterator that can read or modify any element in a vector.  \n  \n```  \ntypedef implementation-defined iterator;  \n```  \n  \n### Remarks  \n A type **iterator** can be used to modify the value of an element.  \n  \n### Example  \n  See the example for [begin](#vector__begin).  \n  \n##  <a name=\"vector__max_size\"></a>  vector::max_size  \n Returns the maximum length of the vector.  \n  \n```  \nsize_type max_size() const;\n```  \n  \n### Return Value  \n The maximum possible length of the vector.  \n  \n### Example  \n  \n```cpp  \n// vector_max_size.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n   vector <int>::size_type i;  \n  \n   i = v1.max_size( );     \n   cout << \"The maximum possible length of the vector is \" << i << \".\" << endl;  \n}  \n```  \n  \n##  <a name=\"vector__operator_at\"></a>  vector::operator[]  \n Returns a reference to the vector element at a specified position.  \n  \n```  \nreference operator[](size_type Pos);\n\nconst_reference operator[](size_type Pos) const;\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Pos`|The position of the vector element.|  \n  \n### Return Value  \n If the position specified is greater than or equal to the size of the container, the result is undefined.  \n  \n### Remarks  \n If the return value of `operator[]` is assigned to a `const_reference`, the vector object cannot be modified. If the return value of `operator[]` is assigned to a reference, the vector object can be modified.  \n  \n When compiling with _SECURE_SCL 1 (controlled with [_ITERATOR_DEBUG_LEVEL](../standard-library/iterator-debug-level.md)), a runtime error will occur if you attempt to access an element outside the bounds of the vector.  See [Checked Iterators](../standard-library/checked-iterators.md) for more information.  \n  \n### Example  \n  \n```cppcpp  \n// vector_op_ref.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n  \n   v1.push_back( 10 );  \n   v1.push_back( 20 );  \n  \n   int& i = v1[1];  \n   cout << \"The second integer of v1 is \" << i << endl;  \n}  \n```  \n  \n##  <a name=\"vector__operator_eq\"></a>  vector::operator=  \n Replaces the elements of the vector with a copy of another vector.  \n  \n```  \nvector& operator=(const vector& right);\n\nvector& operator=(vector&& right);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|` right`|The [vector](../standard-library/vector-class.md) being copied into the `vector`.|  \n  \n### Remarks  \n After erasing any existing elements in a `vector`, `operator=` either copies or moves the contents of ` right` into the `vector`.  \n  \n### Example  \n  \n```cpp  \n// vector_operator_as.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   vector<int> v1, v2, v3;  \n   vector<int>::iterator iter;  \n  \n   v1.push_back(10);  \n   v1.push_back(20);  \n   v1.push_back(30);  \n   v1.push_back(40);  \n   v1.push_back(50);  \n  \n   cout << \"v1 = \" ;  \n   for (iter = v1.begin(); iter != v1.end(); iter++)  \n      cout << *iter << \" \";  \n   cout << endl;  \n  \n   v2 = v1;  \n   cout << \"v2 = \";  \n   for (iter = v2.begin(); iter != v2.end(); iter++)  \n      cout << *iter << \" \";  \n   cout << endl;  \n  \n// move v1 into v2  \n   v2.clear();  \n   v2 = move(v1);  \n   cout << \"v2 = \";  \n   for (iter = v2.begin(); iter != v2.end(); iter++)  \n      cout << *iter << \" \";  \n   cout << endl;  \n}  \n```  \n  \n##  <a name=\"vector__pointer\"></a>  vector::pointer  \n A type that provides a pointer to an element in a vector.  \n  \n```  \ntypedef typename Allocator::pointer pointer;  \n```  \n  \n### Remarks  \n A type **pointer** can be used to modify the value of an element.  \n  \n### Example  \n  \n```cpp  \n// vector_pointer.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   vector<int> v;  \n   v.push_back( 11 );  \n   v.push_back( 22 );  \n  \n   vector<int>::pointer ptr = &v[0];  \n   cout << *ptr << endl;  \n   ptr++;  \n   cout << *ptr << endl;  \n *ptr = 44;  \n   cout << *ptr << endl;  \n}  \n```  \n  \n```Output  \n11  \n22  \n44  \n```  \n  \n##  <a name=\"vector__pop_back\"></a>  vector::pop_back  \n Deletes the element at the end of the vector.  \n  \n```  \nvoid pop_back();\n```  \n  \n### Remarks  \n For a code example, see [vector::push_back()](#vector__push_back).  \n  \n##  <a name=\"vector__push_back\"></a>  vector::push_back  \n Adds an element to the end of the vector.  \n  \n```  \nvoid push_back(const T& Val);\n\n \nvoid push_back(T&& Val);\n```  \n  \n### Parameters  \n `Val`  \n The value to assign to the element added to the end of the vector.  \n  \n### Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <vector>  \n#include <iostream>  \n  \nusing namespace std;  \n  \ntemplate <typename T> void print_elem(const T& t) {  \n    cout << \"(\" << t << \") \";  \n}  \n  \ntemplate <typename T> void print_collection(const T& t) {  \n    cout << \"  \" << t.size() << \" elements: \";  \n  \n    for (const auto& p : t) {  \n        print_elem(p);  \n    }  \n    cout << endl;  \n}  \n  \nint main()  \n{  \n    vector<int> v;  \n    for (int i = 0; i < 10; ++i) {  \n        v.push_back(10 + i);  \n    }  \n  \n    cout << \"vector data: \" << endl;  \n    print_collection(v);  \n  \n    // pop_back() until it's empty, printing the last element as we go  \n    while (v.begin() != v.end()) {   \n        cout << \"v.back(): \"; print_elem(v.back()); cout << endl;  \n        v.pop_back();  \n    }  \n}  \n```  \n  \n##  <a name=\"vector__rbegin\"></a>  vector::rbegin  \n Returns an iterator to the first element in a reversed vector.  \n  \n```  \nreverse_iterator rbegin();\nconst_reverse_iterator rbegin() const;\n```  \n  \n### Return Value  \n A reverse random-access iterator addressing the first element in a reversed vector or addressing what had been the last element in the unreversed vector.  \n  \n### Remarks  \n If the return value of `rbegin` is assigned to a `const_reverse_iterator`, the vector object cannot be modified. If the return value of `rbegin` is assigned to a `reverse_iterator`, the vector object can be modified.  \n  \n### Example  \n  \n```cpp  \n// vector_rbegin.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n   vector <int>::iterator v1_Iter;  \n   vector <int>::reverse_iterator v1_rIter;  \n  \n   v1.push_back( 1 );  \n   v1.push_back( 2 );  \n  \n   v1_Iter = v1.begin( );  \n   cout << \"The first element of vector is \"  \n        << *v1_Iter << \".\" << endl;  \n  \n   v1_rIter = v1.rbegin( );  \n   cout << \"The first element of the reversed vector is \"  \n        << *v1_rIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element of vector is 1.  \nThe first element of the reversed vector is 2.  \n```  \n  \n##  <a name=\"vector__reference\"></a>  vector::reference  \n A type that provides a reference to an element stored in a vector.  \n  \n```  \ntypedef typename Allocator::reference reference;  \n```  \n  \n### Example  \n  See [at](#vector__at) for an example of how to use **reference** in the vector class.  \n  \n##  <a name=\"vector__rend\"></a>  vector::rend  \n Returns an iterator that addresses the location succeeding the last element in a reversed vector.  \n  \n```  \nconst_reverse_iterator rend() const;\nreverse_iterator rend();\n```  \n  \n### Return Value  \n A reverse random-access iterator that addresses the location succeeding the last element in a reversed vector (the location that had preceded the first element in the unreversed vector).  \n  \n### Remarks  \n `rend` is used with a reversed vector just as [end](#vector__end) is used with a vector.  \n  \n If the return value of `rend` is assigned to a `const_reverse_iterator`, then the vector object cannot be modified. If the return value of `rend` is assigned to a `reverse_iterator`, then the vector object can be modified.  \n  \n `rend` can be used to test to whether a reverse iterator has reached the end of its vector.  \n  \n The value returned by `rend` should not be dereferenced.  \n  \n### Example  \n  \n```cpp  \n// vector_rend.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n   vector <int>::reverse_iterator v1_rIter;  \n  \n   v1.push_back( 1 );  \n   v1.push_back( 2 );  \n  \n   for ( v1_rIter = v1.rbegin( ) ; v1_rIter != v1.rend( ) ; v1_rIter++ )  \n      cout << *v1_rIter << endl;  \n}  \n```  \n  \n```Output  \n2  \n1  \n```  \n  \n##  <a name=\"vector__reserve\"></a>  vector::reserve  \n Reserves a minimum length of storage for a vector object, allocating space if necessary.  \n  \n```  \nvoid reserve(size_type count);\n```  \n  \n### Parameters  \n ` count`  \n The minimum length of storage to be allocated for the vector.  \n  \n### Example  \n  \n```cpp  \n// vector_reserve.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n   //vector <int>::iterator Iter;  \n  \n   v1.push_back( 1 );  \n   cout << \"Current capacity of v1 = \"   \n      << v1.capacity( ) << endl;  \n   v1.reserve( 20 );  \n   cout << \"Current capacity of v1 = \"   \n      << v1.capacity( ) << endl;  \n}  \n```  \n  \n```Output  \nCurrent capacity of v1 = 1  \nCurrent capacity of v1 = 20  \n```  \n  \n##  <a name=\"vector__resize\"></a>  vector::resize  \n Specifies a new size for a vector.  \n  \n```  \nvoid resize(size_type Newsize);\nvoid resize(size_type Newsize, Type Val);\n```  \n  \n### Parameters  \n `Newsize`  \n The new size of the vector.  \n  \n `Val`  \n The initialization value of new elements added to the vector if the new size is larger that the original size. If the value is omitted, the new objects use their default constructor.  \n  \n### Remarks  \n If the container's size is less than the requested size, `Newsize`, elements are added to the vector until it reaches the requested size. If the container's size is larger than the requested size, the elements closest to the end of the container are deleted until the container reaches the size `Newsize`. If the present size of the container is the same as the requested size, no action is taken.  \n  \n [size](#vector__size) reflects the current size of the vector.  \n  \n### Example  \n  \n```cpp  \n// vectorsizing.cpp  \n// compile with: /EHsc /W4  \n// Illustrates vector::reserve, vector::max_size,  \n// vector::resize, vector::resize, and vector::capacity.  \n//  \n// Functions:  \n//  \n//    vector::max_size - Returns maximum number of elements vector could  \n//                       hold.  \n//  \n//    vector::capacity - Returns number of elements for which memory has  \n//                       been allocated.  \n//  \n//    vector::size - Returns number of elements in the vector.  \n//  \n//    vector::resize - Reallocates memory for vector, preserves its  \n//                     contents if new size is larger than existing size.  \n//  \n//    vector::reserve - Allocates elements for vector to ensure a minimum  \n//                      size, preserving its contents if the new size is  \n//                      larger than existing size.  \n//  \n//    vector::push_back - Appends (inserts) an element to the end of a  \n//                        vector, allocating memory for it if necessary.  \n//  \n//////////////////////////////////////////////////////////////////////  \n  \n// The debugger cannot handle symbols more than 255 characters long.  \n// STL often creates symbols longer than that.  \n// The warning can be disabled:  \n//#pragma warning(disable:4786)  \n  \n#include <iostream>  \n#include <vector>  \n#include <string>  \n  \nusing namespace std;  \n  \ntemplate <typename C> void print(const string& s, const C& c) {  \n    cout << s;  \n  \n    for (const auto& e : c) {  \n        cout << e << \" \";  \n    }  \n    cout << endl;  \n}  \n  \nvoid printvstats(const vector<int>& v) {  \n    cout << \"   the vector's size is: \" << v.size() << endl;  \n    cout << \"   the vector's capacity is: \" << v.capacity() << endl;  \n    cout << \"   the vector's maximum size is: \" << v.max_size() << endl;  \n}  \n  \nint main()  \n{  \n    // declare a vector that begins with 0 elements.  \n    vector<int> v;  \n  \n    // Show statistics about vector.  \n    cout << endl << \"After declaring an empty vector:\" << endl;  \n    printvstats(v);  \n    print(\"   the vector's contents: \", v);  \n  \n    // Add one element to the end of the vector.  \n    v.push_back(-1);  \n    cout << endl << \"After adding an element:\" << endl;  \n    printvstats(v);  \n    print(\"   the vector's contents: \", v);  \n  \n    for (int i = 1; i < 10; ++i) {  \n        v.push_back(i);  \n    }  \n    cout << endl << \"After adding 10 elements:\" << endl;  \n    printvstats(v);  \n    print(\"   the vector's contents: \", v);  \n  \n    v.resize(6);  \n    cout << endl << \"After resizing to 6 elements without an initialization value:\" << endl;  \n    printvstats(v);  \n    print(\"   the vector's contents: \", v);  \n  \n    v.resize(9, 999);  \n    cout << endl << \"After resizing to 9 elements with an initialization value of 999:\" << endl;  \n    printvstats(v);  \n    print(\"   the vector's contents: \", v);  \n  \n    v.resize(12);  \n    cout << endl << \"After resizing to 12 elements without an initialization value:\" << endl;  \n    printvstats(v);  \n    print(\"   the vector's contents: \", v);  \n  \n    // Ensure there's room for at least 1000 elements.  \n    v.reserve(1000);  \n    cout << endl << \"After vector::reserve(1000):\" << endl;  \n    printvstats(v);  \n  \n    // Ensure there's room for at least 2000 elements.  \n    v.resize(2000);  \n    cout << endl << \"After vector::resize(2000):\" << endl;  \n    printvstats(v);  \n}  \n```  \n  \n##  <a name=\"vector__reverse_iterator\"></a>  vector::reverse_iterator  \n A type that provides a random-access iterator that can read or modify any element in a reversed vector.  \n  \n```  \ntypedef std::reverse_iterator<iterator> reverse_iterator;  \n```  \n  \n### Remarks  \n A type `reverse_iterator` is used to iterate through the vector in reverse.  \n  \n### Example  \n  See the example for [rbegin](#vector__rbegin).  \n  \n##  <a name=\"vector__shrink_to_fit\"></a>  vector::shrink_to_fit  \n Discards excess capacity.  \n  \n```  \nvoid shrink_to_fit();\n```  \n  \n### Example  \n  \n```cpp  \n// vector_shrink_to_fit.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n   //vector <int>::iterator Iter;  \n  \n   v1.push_back( 1 );  \n   cout << \"Current capacity of v1 = \"   \n      << v1.capacity( ) << endl;  \n   v1.reserve( 20 );  \n   cout << \"Current capacity of v1 = \"   \n      << v1.capacity( ) << endl;  \n   v1.shrink_to_fit();  \n   cout << \"Current capacity of v1 = \"   \n      << v1.capacity( ) << endl;  \n}  \n```  \n  \n```Output  \nCurrent capacity of v1 = 1  \nCurrent capacity of v1 = 20  \nCurrent capacity of v1 = 1  \n```  \n  \n##  <a name=\"vector__size\"></a>  vector::size  \n Returns the number of elements in the vector.  \n  \n```  \nsize_type size() const;\n```  \n  \n### Return Value  \n The current length of the vector.  \n  \n### Example  \n  \n```cpp  \n// vector_size.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1;  \n   vector <int>::size_type i;  \n  \n   v1.push_back( 1 );  \n   i = v1.size( );  \n   cout << \"Vector length is \" << i << \".\" << endl;  \n  \n   v1.push_back( 2 );  \n   i = v1.size( );  \n   cout << \"Vector length is now \" << i << \".\" << endl;  \n}  \n```  \n  \n```Output  \nVector length is 1.  \nVector length is now 2.  \n```  \n  \n##  <a name=\"vector__size_type\"></a>  vector::size_type  \n A type that counts the number of elements in a vector.  \n  \n```  \ntypedef typename Allocator::size_type size_type;  \n```  \n  \n### Example  \n  See the example for [capacity](#vector__capacity).  \n  \n##  <a name=\"vector__swap\"></a>  vector::swap  \n Exchanges the elements of two vectors.  \n  \n```  \nvoid swap(\n    vector<Type, Allocator>& right);\n\nfriend void swap(\n    vector<Type, Allocator>& left,  \n    vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` right`  \n A vector providing the elements to be swapped, or a vector whose elements are to be exchanged with those of the vector ` left`.  \n  \n ` left`  \n A vector whose elements are to be exchanged with those of the vector ` right`.  \n  \n### Example  \n  \n```cpp  \n// vector_swap.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   vector <int> v1, v2;  \n  \n   v1.push_back( 1 );  \n   v1.push_back( 2 );  \n   v1.push_back( 3 );  \n  \n   v2.push_back( 10 );  \n   v2.push_back( 20 );  \n  \n   cout << \"The number of elements in v1 = \" << v1.size( ) << endl;  \n   cout << \"The number of elements in v2 = \" << v2.size( ) << endl;  \n   cout << endl;  \n  \n   v1.swap( v2 );  \n  \n   cout << \"The number of elements in v1 = \" << v1.size( ) << endl;  \n   cout << \"The number of elements in v2 = \" << v2.size( ) << endl;  \n}  \n```  \n  \n```Output  \nThe number of elements in v1 = 3  \nThe number of elements in v2 = 2  \n  \nThe number of elements in v1 = 2  \nThe number of elements in v2 = 3  \n```  \n  \n##  <a name=\"vector__value_type\"></a>  vector::value_type  \n A type that represents the data type stored in a vector.  \n  \n```  \ntypedef typename Allocator::value_type value_type;  \n```  \n  \n### Remarks  \n `value_type` is a synonym for the template parameter **Type**.  \n  \n### Example  \n  \n```cpp  \n// vector_value_type.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   vector<int>::value_type AnInt;  \n   AnInt = 44;  \n   cout << AnInt << endl;  \n}  \n```  \n  \n```Output  \n44  \n```  \n  \n##  <a name=\"vector__vector\"></a>  vector::vector  \n Constructs a vector of a specific size or with elements of a specific value or with a specific allocator or as a copy of all or part of some other vector.  \n  \n```  \nvector();\nexplicit vector(const Allocator& Al);\nexplicit vector(size_type Count);\nvector(size_type Count, const Type& Val);\nvector(size_type Count, const Type& Val, const Allocator& Al);\n\nvector(const vector& Right);\nvector(vector&& Right);\nvector(initializer_list<Type> IList, const _Allocator& Al);\n\ntemplate <class InputIterator>  \nvector(InputIterator First, InputIterator Last);\ntemplate <class InputIterator>  \nvector(InputIterator First, InputIterator Last, const Allocator& Al);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Al`|The allocator class to use with this object. [get_allocator](#vector__get_allocator) returns the allocator class for the object.|  \n|`Count`|The number of elements in the constructed vector.|  \n|`Val`|The value of the elements in the constructed vector.|  \n|`Right`|The vector of which the constructed vector is to be a copy.|  \n|`First`|Position of the first element in the range of elements to be copied.|  \n|`Last`|Position of the first element beyond the range of elements to be copied.|  \n|`IList`|The initializer_list containing the elmeents to copy.|  \n  \n### Remarks  \n All constructors store an allocator object ( `Al`) and initialize the vector.  \n  \n The first two constructors specify an empty initial vector. The second explicitly specifies the allocator type ( `Al`) to be used.  \n  \n The third constructor specifies a repetition of a specified number ( `Count`) of elements of the default value for class `Type`.  \n  \n The fourth and fifth constructors specify a repetition of ( `Count`) elements of value `Val`.  \n  \n The sixth constructor specifies a copy of the vector `Right`.  \n  \n The seventh constructor moves the vector `Right`.  \n  \n The eighth constructor uses an initializer_list to specify the elements.  \n  \n The ninth and tenth constructors copy the range [ `First`, `Last`) of a vector.  \n  \n### Example  \n  \n```cpp  \n// vector_ctor.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    vector <int>::iterator v1_Iter, v2_Iter, v3_Iter, v4_Iter, v5_Iter, v6_Iter;  \n  \n    // Create an empty vector v0  \n    vector <int> v0;  \n  \n    // Create a vector v1 with 3 elements of default value 0  \n    vector <int> v1(3);  \n  \n    // Create a vector v2 with 5 elements of value 2  \n    vector <int> v2(5, 2);  \n  \n    // Create a vector v3 with 3 elements of value 1 and with the allocator   \n    // of vector v2  \n    vector <int> v3(3, 1, v2.get_allocator());  \n  \n    // Create a copy, vector v4, of vector v2  \n    vector <int> v4(v2);  \n  \n    // Create a new temporary vector for demonstrating copying ranges  \n    vector <int> v5(5);  \n    for (auto i : v5) {  \n        v5[i] = i;  \n    }  \n  \n    // Create a vector v6 by copying the range v5[ first,  last)  \n    vector <int> v6(v5.begin() + 1, v5.begin() + 3);  \n  \n    cout << \"v1 =\";  \n    for (auto& v : v1){  \n        cout << \" \" << v;  \n    }  \n    cout << endl;  \n  \n    cout << \"v2 =\";  \n    for (auto& v : v2){  \n        cout << \" \" << v;  \n    }  \n    cout << endl;  \n  \n    cout << \"v3 =\";  \n    for (auto& v : v3){  \n        cout << \" \" << v;  \n    }  \n    cout << endl;  \n    cout << \"v4 =\";  \n    for (auto& v : v4){  \n        cout << \" \" << v;  \n    }  \n    cout << endl;  \n  \n    cout << \"v5 =\";  \n    for (auto& v : v5){  \n        cout << \" \" << v;  \n    }  \n    cout << endl;  \n  \n    cout << \"v6 =\";  \n    for (auto& v : v6){  \n        cout << \" \" << v;  \n    }  \n    cout << endl;  \n  \n    // Move vector v2 to vector v7  \n    vector <int> v7(move(v2));  \n    vector <int>::iterator v7_Iter;  \n  \n    cout << \"v7 =\";  \n    for (auto& v : v7){  \n        cout << \" \" << v;  \n    }  \n    cout << endl;  \n  \n    vector<int> v8{ { 1, 2, 3, 4 } };  \n    for (auto& v : v8){  \n        cout << \" \" << v ;  \n    }  \n    cout << endl;  \n}  \n  \n```  \n  \n```Output  \nv1 = 0 0 0v2 = 2 2 2 2 2v3 = 1 1 1v4 = 2 2 2 2 2v5 = 0 1 2 3 4v6 = 1 2v7 = 2 2 2 2 21 2 3 4  \n```  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n"}