{"nodes":[{"pos":[12,73],"content":"Using Structured Exception Handling with C++ | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Structured Exception Handling with C++ | Microsoft Docs","pos":[0,61]}]},{"content":"Using Structured Exception Handling with C++","pos":[696,740]},{"content":"Structured exception handling described in these articles works with both C and C++ source files.","pos":[741,838]},{"content":"However, it is not specifically designed for C++ and is not recommended.","pos":[839,911]},{"content":"You can ensure that your code is more portable by using C++ exception handling.","pos":[912,991]},{"content":"Also, the C++ exception handling mechanism is more flexible, in that it can handle exceptions of any type.","pos":[992,1098]},{"content":"Microsoft C++ now supports the C++ exception handling model, based on the ANSI C++ Standard.","pos":[1105,1197]},{"content":"This mechanism automatically handles destruction of local objects during stack unwind.","pos":[1198,1284]},{"content":"If you are writing fault-tolerant C++ code, and you want to implement exception handling, it is strongly recommended that you use C++ exception handling, rather than structured exception handling.","pos":[1285,1481]},{"content":"(Note that while the C++ compiler supports structured exception handling constructs as described in these articles, the standard C compiler does not support the C++ exception handling syntax.) For detailed information about C++ exception handling, see <bpt id=\"p1\">[</bpt>C++ Exception Handling<ept id=\"p1\">](../cpp/cpp-exception-handling.md)</ept> and the <bpt id=\"p2\">*</bpt>Annotated C++ Reference Manual<ept id=\"p2\">*</ept> by Margaret Ellis and Bjarne Stroustrup.","pos":[1482,1874],"source":" (Note that while the C++ compiler supports structured exception handling constructs as described in these articles, the standard C compiler does not support the C++ exception handling syntax.) For detailed information about C++ exception handling, see [C++ Exception Handling](../cpp/cpp-exception-handling.md) and the *Annotated C++ Reference Manual* by Margaret Ellis and Bjarne Stroustrup."},{"content":"See Also","pos":[1883,1891]},{"content":"Structured Exception Handling (C/C++)","pos":[1896,1933]}],"content":"---\ntitle: \"Using Structured Exception Handling with C++ | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C++ exception handling, mixed with SEH\"\n  - \"structured exception handling, with C++ exception handling\"\nms.assetid: ec34b528-8c26-4429-b24a-6a68553aaa91\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using Structured Exception Handling with C++\nStructured exception handling described in these articles works with both C and C++ source files. However, it is not specifically designed for C++ and is not recommended. You can ensure that your code is more portable by using C++ exception handling. Also, the C++ exception handling mechanism is more flexible, in that it can handle exceptions of any type.  \n  \n Microsoft C++ now supports the C++ exception handling model, based on the ANSI C++ Standard. This mechanism automatically handles destruction of local objects during stack unwind. If you are writing fault-tolerant C++ code, and you want to implement exception handling, it is strongly recommended that you use C++ exception handling, rather than structured exception handling. (Note that while the C++ compiler supports structured exception handling constructs as described in these articles, the standard C compiler does not support the C++ exception handling syntax.) For detailed information about C++ exception handling, see [C++ Exception Handling](../cpp/cpp-exception-handling.md) and the *Annotated C++ Reference Manual* by Margaret Ellis and Bjarne Stroustrup.  \n  \n## See Also  \n [Structured Exception Handling (C/C++)](../cpp/structured-exception-handling-c-cpp.md)"}