{"nodes":[{"pos":[12,77],"content":"_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l | Microsoft Docs","pos":[0,65]}]},{"pos":[1567,1615],"content":"_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l","linkify":"_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l","nodes":[{"content":"_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l","pos":[0,48]}]},{"content":"Reads formatted data from the console.","pos":[1616,1654]},{"content":"These more secure versions of <bpt id=\"p1\">[</bpt>_cscanf, _cscanf_l, _cwscanf, _cwscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/cscanf-cscanf-l-cwscanf-cwscanf-l.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1655,1932],"source":" These more secure versions of [_cscanf, _cscanf_l, _cwscanf, _cwscanf_l](../../c-runtime-library/reference/cscanf-cscanf-l-cwscanf-cwscanf-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1940,2160],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[2169,2175],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2537,2547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Format-control string.","pos":[2563,2585]},{"content":"Optional parameters.","pos":[2606,2626]},{"content":"The locale to use.","pos":[2645,2663]},{"pos":[2672,2684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of fields that were successfully converted and assigned.","pos":[2688,2755]},{"content":"The return value does not include fields that were read but not assigned.","pos":[2756,2829]},{"content":"The return value is <ph id=\"ph1\">`EOF`</ph> for an attempt to read at end of file.","pos":[2830,2894],"source":" The return value is `EOF` for an attempt to read at end of file."},{"content":"This can occur when keyboard input is redirected at the operating-system command-line level.","pos":[2895,2987]},{"content":"A return value of 0 means that no fields were assigned.","pos":[2988,3043]},{"content":"These functions validate their parameters.","pos":[3050,3092]},{"content":"If <ph id=\"ph1\">`format`</ph> is a null pointer, these functions invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3093,3266],"source":" If `format` is a null pointer, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return <ph id=\"ph1\">`EOF`</ph> and <ph id=\"ph2\">`errno`</ph>is set to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[3267,3363],"source":" If execution is allowed to continue, these functions return `EOF` and `errno`is set to `EINVAL`."},{"pos":[3372,3379],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_cscanf_s`</ph> function reads data directly from the console into the locations given by <ph id=\"ph2\">`argument`</ph>.","pos":[3383,3484],"source":"The `_cscanf_s` function reads data directly from the console into the locations given by `argument`."},{"content":"The <bpt id=\"p1\">[</bpt>_getche<ept id=\"p1\">](../../c-runtime-library/reference/getch-getwch.md)</ept> function is used to read characters.","pos":[3485,3586],"source":" The [_getche](../../c-runtime-library/reference/getch-getwch.md) function is used to read characters."},{"content":"Each optional parameter must be a pointer to a variable with a type that corresponds to a type specifier in <ph id=\"ph1\">`format`</ph>.","pos":[3587,3704],"source":" Each optional parameter must be a pointer to a variable with a type that corresponds to a type specifier in `format`."},{"content":"The format controls the interpretation of the input fields and has the same form and function as the <ph id=\"ph1\">`format`</ph> parameter for the <bpt id=\"p1\">[</bpt>scanf_s<ept id=\"p1\">](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept> function.","pos":[3705,3920],"source":" The format controls the interpretation of the input fields and has the same form and function as the `format` parameter for the [scanf_s](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md) function."},{"content":"While <ph id=\"ph1\">`_cscanf_s`</ph> normally echoes the input character, it does not do so if the last call was to <ph id=\"ph2\">`_ungetch`</ph>.","pos":[3921,4029],"source":" While `_cscanf_s` normally echoes the input character, it does not do so if the last call was to `_ungetch`."},{"content":"Like other secure versions of functions in the<ph id=\"ph1\">`scanf`</ph> family,<ph id=\"ph2\">`_cscanf_s`</ph> and <ph id=\"ph3\">`_cswscanf_s`</ph> require size arguments for the type field characters <ph id=\"ph4\">`c`</ph>, <ph id=\"ph5\">`C`</ph>, <ph id=\"ph6\">`s`</ph>, <ph id=\"ph7\">`S`</ph>, and <ph id=\"ph8\">`[`</ph>.","pos":[4036,4208],"source":"Like other secure versions of functions in the`scanf` family,`_cscanf_s` and `_cswscanf_s` require size arguments for the type field characters `c`, `C`, `s`, `S`, and `[`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>scanf Width Specification<ept id=\"p1\">](../../c-runtime-library/scanf-width-specification.md)</ept>.","pos":[4209,4317],"source":" For more information, see [scanf Width Specification](../../c-runtime-library/scanf-width-specification.md)."},{"pos":[4325,4391],"content":"[!NOTE]\n The size parameter is of type `unsigned`, not `size_t`.","leadings":["","> "],"nodes":[{"content":"The size parameter is of type <ph id=\"ph1\">`unsigned`</ph>, not <ph id=\"ph2\">`size_t`</ph>.","pos":[9,64],"source":" The size parameter is of type `unsigned`, not `size_t`."}]},{"pos":[4398,4554],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[4564,4593],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[4600,4615]},{"content":"_UNICODE and _MBCS not defined","pos":[4616,4646]},{"content":"_MBCS defined","pos":[4647,4660]},{"content":"_UNICODE defined","pos":[4661,4677]},{"pos":[4913,4925],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4932,4939]},{"content":"Required header","pos":[4940,4955]},{"pos":[5000,5025],"content":"<ph id=\"ph1\">`_cscanf_s`</ph>,<ph id=\"ph2\">`_cscanf_s_l`</ph>","source":"`_cscanf_s`,`_cscanf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>conio.h&gt;","pos":[5026,5036],"source":"\\<conio.h>"},{"pos":[5041,5069],"content":"<ph id=\"ph1\">`_cwscanf_s`</ph>, <ph id=\"ph2\">`_cwscanf_s_l`</ph>","source":"`_cwscanf_s`, `_cwscanf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>conio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[5070,5094],"source":"\\<conio.h> or \\<wchar.h>"},{"pos":[5102,5200],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[5209,5218],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[5222,5314],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[5323,5330],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5895,5900],"content":"Input","linkify":"Input","nodes":[{"content":"Input","pos":[0,5]}]},{"pos":[5932,5938],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[5982,5990],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Console and Port I/O<ept id=\"p1\">](../../c-runtime-library/console-and-port-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5994,6066],"source":"[Console and Port I/O](../../c-runtime-library/console-and-port-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_cprintf, _cprintf_l, _cwprintf, _cwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6069,6193],"source":" [_cprintf, _cprintf_l, _cwprintf, _cwprintf_l](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/fscanf-s-fscanf-s-l-fwscanf-s-fwscanf-s-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6196,6326],"source":" [fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l](../../c-runtime-library/reference/fscanf-s-fscanf-s-l-fwscanf-s-fwscanf-s-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6329,6451],"source":" [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)</ept>","pos":[6454,6583],"source":" [sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)"}],"content":"---\ntitle: \"_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_cwscanf_s_l\"\n  - \"_cwscanf_s\"\n  - \"_cscanf_s\"\n  - \"_cscanf_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"cscanf_s\"\n  - \"cscanf_s_l\"\n  - \"cwscanf_s\"\n  - \"_cwscanf_s\"\n  - \"_tcscanf_s\"\n  - \"_cscanf_s\"\n  - \"_cwscanf_s_l\"\n  - \"_cscanf_s_l\"\n  - \"cwscanf_s_l\"\n  - \"_tcscanf_s_l\"\n  - \"tcscanf_s\"\n  - \"tcscanf_s_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"cscanf_s function\"\n  - \"_cwscanf_s_l function\"\n  - \"tcscanf_s function\"\n  - \"console [C++], reading from\"\n  - \"_cscanf_s function\"\n  - \"data [C++], reading from the console\"\n  - \"cwscanf_s function\"\n  - \"_tcscanf_s_l function\"\n  - \"_cscanf_s_l function\"\n  - \"cscanf_s_l function\"\n  - \"cwscanf_s_l function\"\n  - \"reading data [C++], from the console\"\n  - \"_cwscanf_s function\"\n  - \"_tcscanf_s function\"\n  - \"tcscanf_s_l function\"\nms.assetid: 9ccab74d-916f-42a6-93d8-920525efdf4b\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l\nReads formatted data from the console. These more secure versions of [_cscanf, _cscanf_l, _cwscanf, _cwscanf_l](../../c-runtime-library/reference/cscanf-cscanf-l-cwscanf-cwscanf-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nint _cscanf_s(   \n   const char *format [,  \n   argument] ...   \n);  \nint _cscanf_s_l(   \n   const char *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \nint _cwscanf_s(   \n   const wchar_t *format [,  \n   argument] ...   \n);  \nint _cwscanf_s_l(   \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \n```  \n  \n#### Parameters  \n `format`  \n Format-control string.  \n  \n `argument`  \n Optional parameters.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n The number of fields that were successfully converted and assigned. The return value does not include fields that were read but not assigned. The return value is `EOF` for an attempt to read at end of file. This can occur when keyboard input is redirected at the operating-system command-line level. A return value of 0 means that no fields were assigned.  \n  \n These functions validate their parameters. If `format` is a null pointer, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return `EOF` and `errno`is set to `EINVAL`.  \n  \n## Remarks  \n The `_cscanf_s` function reads data directly from the console into the locations given by `argument`. The [_getche](../../c-runtime-library/reference/getch-getwch.md) function is used to read characters. Each optional parameter must be a pointer to a variable with a type that corresponds to a type specifier in `format`. The format controls the interpretation of the input fields and has the same form and function as the `format` parameter for the [scanf_s](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md) function. While `_cscanf_s` normally echoes the input character, it does not do so if the last call was to `_ungetch`.  \n  \n Like other secure versions of functions in the`scanf` family,`_cscanf_s` and `_cswscanf_s` require size arguments for the type field characters `c`, `C`, `s`, `S`, and `[`. For more information, see [scanf Width Specification](../../c-runtime-library/scanf-width-specification.md).  \n  \n> [!NOTE]\n>  The size parameter is of type `unsigned`, not `size_t`.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tcscanf_s`|`_cscanf_s`|`_cscanf_s`|`_cwscanf_s`|  \n|`_tcscanf_s_l`|`_cscanf_s_l`|`_cscanf_s_l`|`_cwscanf_s_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_cscanf_s`,`_cscanf_s_l`|\\<conio.h>|  \n|`_cwscanf_s`, `_cwscanf_s_l`|\\<conio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_cscanf_s.c  \n// compile with: /c  \n/* This program prompts for a string  \n * and uses _cscanf_s to read in the response.  \n * Then _cscanf_s returns the number of items  \n * matched, and the program displays that number.  \n */  \n  \n#include <stdio.h>  \n#include <conio.h>  \n  \nint main( void )  \n{  \n   int result, n[3];  \n   int i;  \n  \n   result = _cscanf_s( \"%i %i %i\", &n[0], &n[1], &n[2] );  \n   _cprintf_s( \"\\r\\nYou entered \" );  \n   for( i=0; i<result; i++ )  \n      _cprintf_s( \"%i \", n[i] );  \n   _cprintf_s( \"\\r\\n\" );  \n}  \n```  \n  \n## Input  \n  \n```  \n1 2 3  \n```  \n  \n## Output  \n  \n```  \nYou entered 1 2 3  \n```  \n  \n## See Also  \n [Console and Port I/O](../../c-runtime-library/console-and-port-i-o.md)   \n [_cprintf, _cprintf_l, _cwprintf, _cwprintf_l](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)   \n [fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l](../../c-runtime-library/reference/fscanf-s-fscanf-s-l-fwscanf-s-fwscanf-s-l.md)   \n [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)   \n [sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)"}