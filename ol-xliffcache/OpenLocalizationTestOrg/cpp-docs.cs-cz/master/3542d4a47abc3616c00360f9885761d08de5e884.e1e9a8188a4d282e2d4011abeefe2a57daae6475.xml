{"nodes":[{"pos":[12,51],"content":"ostream_iterator Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ostream_iterator Class | Microsoft Docs","pos":[0,39]}]},{"content":"ostream_iterator Class","pos":[712,734]},{"pos":[735,898],"content":"The template class ostream_iterator describes an output iterator object that writes successive elements onto the output stream with the extraction <bpt id=\"p1\">**</bpt>operator &lt;&lt;<ept id=\"p1\">**</ept>.","source":"The template class ostream_iterator describes an output iterator object that writes successive elements onto the output stream with the extraction **operator <<**."},{"content":"Syntax","pos":[907,913]},{"content":"Parameters","pos":[1044,1054]},{"content":"Type","pos":[1059,1063]},{"content":"The type of object to be inserted into the output stream.","pos":[1068,1125]},{"content":"The type that represents the character type for the <ph id=\"ph1\">`ostream_iterator`</ph>.","pos":[1146,1217],"source":" The type that represents the character type for the `ostream_iterator`."},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`char`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[1218,1278],"source":" This argument is optional and the default value is `char`*.*"},{"content":"The type that represents the character type for the <ph id=\"ph1\">`ostream_iterator`</ph>.","pos":[1297,1368],"source":" The type that represents the character type for the `ostream_iterator`."},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`char_traits`\\&lt;</ph> <bpt id=\"p1\">*</bpt>CharType&gt;.<ept id=\"p1\">*</ept>","pos":[1369,1448],"source":" This argument is optional and the default value is `char_traits`\\< *CharType>.*"},{"content":"The ostream_iterator class must satisfy the requirements for an output iterator.","pos":[1455,1535]},{"content":"Algorithms can be written directly to output streams using an <ph id=\"ph1\">`ostream_iterator`</ph>.","pos":[1536,1617],"source":" Algorithms can be written directly to output streams using an `ostream_iterator`."},{"content":"Constructors","pos":[1627,1639]},{"content":"ostream_iterator","pos":[1661,1677]},{"pos":[1716,1813],"content":"Constructs an <ph id=\"ph1\">`ostream_iterator`</ph> that is initialized and delimited to write to the output stream.","source":"Constructs an `ostream_iterator` that is initialized and delimited to write to the output stream."},{"content":"Typedefs","pos":[1824,1832]},{"content":"char_type","pos":[1854,1863]},{"pos":[1895,1965],"content":"A type that provides for the character type of the <ph id=\"ph1\">`ostream_iterator`</ph>.","source":"A type that provides for the character type of the `ostream_iterator`."},{"content":"ostream_type","pos":[1971,1983]},{"pos":[2018,2085],"content":"A type that provides for the stream type of the <ph id=\"ph1\">`ostream_iterator`</ph>.","source":"A type that provides for the stream type of the `ostream_iterator`."},{"content":"traits_type","pos":[2091,2102]},{"pos":[2136,2213],"content":"A type that provides for the character traits type of the <ph id=\"ph1\">`ostream_iterator`</ph>.","source":"A type that provides for the character traits type of the `ostream_iterator`."},{"content":"Operators","pos":[2224,2233]},{"content":"operator*","pos":[2255,2264]},{"pos":[2300,2384],"content":"Dereferencing operator used to implement the output iterator expression * <ph id=\"ph1\">`i` = `x`</ph>.","source":"Dereferencing operator used to implement the output iterator expression * `i` = `x`."},{"content":"operator++","pos":[2390,2400]},{"pos":[2439,2573],"content":"A nonfunctional increment operator that returns an <ph id=\"ph1\">`ostream_iterator`</ph> to the same object it addressed before the operation was called.","source":"A nonfunctional increment operator that returns an `ostream_iterator` to the same object it addressed before the operation was called."},{"content":"operator=","pos":[2579,2588]},{"pos":[2622,2735],"content":"Assignment operator used to implement the output iterator expression * <ph id=\"ph1\">`i` = `x`</ph> for writing to an output stream.","source":"Assignment operator used to implement the output iterator expression * `i` = `x` for writing to an output stream."},{"content":"Requirements","pos":[2745,2757]},{"pos":[2761,2784],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[2791,2809],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2863,2890],"content":"ostream_iterator::char_type"},{"content":"A type that provides for the character type of the iterator.","pos":[2894,2954]},{"content":"Remarks","pos":[3005,3012]},{"pos":[3016,3078],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **CharType**."},{"content":"Example","pos":[3088,3095]},{"pos":[3933,3960],"content":"ostream_iterator::operator*"},{"pos":[3964,4050],"content":"Dereferencing operator used to implement the output iterator expression <ph id=\"ph1\">\\*</ph> <bpt id=\"p1\">*</bpt>ii<ept id=\"p1\">*</ept><ph id=\"ph2\"> = </ph><bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept>.","source":"Dereferencing operator used to implement the output iterator expression \\* *ii* = *x*."},{"content":"Return Value","pos":[4128,4140]},{"pos":[4144,4182],"content":"A reference to the <ph id=\"ph1\">`ostream_iterator`</ph>.","source":"A reference to the `ostream_iterator`."},{"content":"Remarks","pos":[4192,4199]},{"content":"The requirements for an output iterator that the <ph id=\"ph1\">`ostream_iterator`</ph> must satisfy require only the expression <ph id=\"ph2\">\\*</ph> <bpt id=\"p1\">*</bpt>ii<ept id=\"p1\">*</ept><ph id=\"ph3\"> = </ph><bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept> be valid and says nothing about the <bpt id=\"p3\">**</bpt>operator<ept id=\"p3\">**</ept> or the <ph id=\"ph4\">`operator=`</ph> on their own.","pos":[4203,4407],"source":"The requirements for an output iterator that the `ostream_iterator` must satisfy require only the expression \\* *ii* = *t* be valid and says nothing about the **operator** or the `operator=` on their own."},{"content":"The member operator in this implementation returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[4408,4470],"source":" The member operator in this implementation returns **\\*this**."},{"content":"Example","pos":[4480,4487]},{"pos":[5192,5220],"content":"ostream_iterator::operator++"},{"pos":[5224,5358],"content":"A nonfunctional increment operator that returns an <ph id=\"ph1\">`ostream_iterator`</ph> to the same object it addressed before the operation was called.","source":"A nonfunctional increment operator that returns an `ostream_iterator` to the same object it addressed before the operation was called."},{"content":"Return Value","pos":[5495,5507]},{"pos":[5511,5549],"content":"A reference to the <ph id=\"ph1\">`ostream_iterator`</ph>.","source":"A reference to the `ostream_iterator`."},{"content":"Remarks","pos":[5559,5566]},{"pos":[5570,5616],"content":"These member operators both return <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","source":"These member operators both return **\\*this**."},{"content":"Example","pos":[5626,5633]},{"pos":[6332,6359],"content":"ostream_iterator::operator="},{"pos":[6363,6476],"content":"Assignment operator used to implement the output_iterator expression * <ph id=\"ph1\">`i` = `x`</ph> for writing to an output stream.","source":"Assignment operator used to implement the output_iterator expression * `i` = `x` for writing to an output stream."},{"content":"Parameters","pos":[6569,6579]},{"content":"The value of the object of type <ph id=\"ph1\">`Type`</ph> to be inserted into the output stream.","pos":[6592,6669],"source":" The value of the object of type `Type` to be inserted into the output stream."},{"content":"Return Value","pos":[6679,6691]},{"pos":[6695,6949],"content":"The operator inserts <ph id=\"ph1\">`val`</ph> into the output stream associated with the object, followed by the delimiter specified in the <bpt id=\"p1\">[</bpt>ostream_iterator constructor<ept id=\"p1\">](#ostream_iterator__ostream_iterator)</ept> (if any), and then returns a reference to the <ph id=\"ph2\">`ostream_iterator`</ph>.","source":"The operator inserts `val` into the output stream associated with the object, followed by the delimiter specified in the [ostream_iterator constructor](#ostream_iterator__ostream_iterator) (if any), and then returns a reference to the `ostream_iterator`."},{"content":"Remarks","pos":[6959,6966]},{"content":"The requirements for an output iterator that the <ph id=\"ph1\">`ostream_iterator`</ph> must satisfy require only the expression * <ph id=\"ph2\">`ii` = `t`</ph> be valid and says nothing about the operator or the operator= on their own.","pos":[6970,7167],"source":"The requirements for an output iterator that the `ostream_iterator` must satisfy require only the expression * `ii` = `t` be valid and says nothing about the operator or the operator= on their own."},{"content":"This member operator returns <ph id=\"ph1\">`*this`</ph>.","pos":[7168,7205],"source":" This member operator returns `*this`."},{"content":"Example","pos":[7215,7222]},{"pos":[7928,7962],"content":"ostream_iterator::ostream_iterator"},{"pos":[7966,8063],"content":"Constructs an <ph id=\"ph1\">`ostream_iterator`</ph> that is initialized and delimited to write to the output stream.","source":"Constructs an `ostream_iterator` that is initialized and delimited to write to the output stream."},{"content":"Parameters","pos":[8207,8217]},{"content":"The output stream of type <bpt id=\"p1\">[</bpt>ostream_iterator::ostream_type<ept id=\"p1\">](#ostream_iterator__ostream_type)</ept> to be iterated over.","pos":[8232,8344],"source":" The output stream of type [ostream_iterator::ostream_type](#ostream_iterator__ostream_type) to be iterated over."},{"content":"The delimiter that is inserted into the output stream between values.","pos":[8367,8436]},{"content":"Remarks","pos":[8446,8453]},{"content":"The first constructor initializes the output stream pointer with <ph id=\"ph1\">`&amp;_Ostr`</ph>.","pos":[8457,8531],"source":"The first constructor initializes the output stream pointer with `&_Ostr`."},{"content":"The delimiter string pointer designates an empty string.","pos":[8532,8588]},{"pos":[8595,8721],"content":"The second constructor initializes the output stream pointer with <ph id=\"ph1\">`&amp;_Ostr`</ph> and the delimiter string pointer with <ph id=\"ph2\">`_Delimiter`</ph>.","source":"The second constructor initializes the output stream pointer with `&_Ostr` and the delimiter string pointer with `_Delimiter`."},{"content":"Example","pos":[8731,8738]},{"pos":[9835,9865],"content":"ostream_iterator::ostream_type"},{"content":"A type that provides for the stream type of the iterator.","pos":[9869,9926]},{"content":"Remarks","pos":[10003,10010]},{"pos":[10014,10215],"content":"The type is a synonym for <bpt id=\"p1\">[</bpt>basic_ostream<ept id=\"p1\">](../standard-library/basic-ostream-class.md)</ept><ph id=\"ph1\">&lt; `CharType`</ph>, <ph id=\"ph2\">`Traits`</ph>&gt;, a stream class of the iostream hierarchy that defines objects that can be used for writing.","source":"The type is a synonym for [basic_ostream](../standard-library/basic-ostream-class.md)< `CharType`, `Traits`>, a stream class of the iostream hierarchy that defines objects that can be used for writing."},{"content":"Example","pos":[10225,10232]},{"pos":[10237,10353],"content":"See <bpt id=\"p1\">[</bpt>ostream_iterator<ept id=\"p1\">](#ostream_iterator__ostream_iterator)</ept> for an example of how to declare and use <ph id=\"ph1\">`ostream_type`</ph>.","source":"See [ostream_iterator](#ostream_iterator__ostream_iterator) for an example of how to declare and use `ostream_type`."},{"pos":[10409,10438],"content":"ostream_iterator::traits_type"},{"content":"A type that provides for the character traits type of the iterator.","pos":[10442,10509]},{"content":"Remarks","pos":[10560,10567]},{"pos":[10571,10631],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **Traits**."},{"content":"Example","pos":[10641,10648]},{"content":"See Also","pos":[11494,11502]},{"content":"iterator&gt;","pos":[11509,11518],"source":"iterator>"},{"content":"Thread Safety in the C++ Standard Library","pos":[11558,11599]},{"content":"C++ Standard Library Reference","pos":[11672,11702]}],"content":"---\ntitle: \"ostream_iterator Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ostream_iterator\"\n  - \"std.ostream_iterator\"\n  - \"std::ostream_iterator\"\n  - \"iterator/std::ostream_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ostream_iterator class\"\nms.assetid: 24d842d3-9f45-4bf6-a697-62f5968f5a03\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ostream_iterator Class\nThe template class ostream_iterator describes an output iterator object that writes successive elements onto the output stream with the extraction **operator <<**.  \n  \n## Syntax  \n  \n```\ntemplate <class Type class CharType = char class Traits = char_traits <CharType>>  \nclass ostream_iterator\n```  \n  \n#### Parameters  \n *Type*  \n The type of object to be inserted into the output stream.  \n  \n `CharType`  \n The type that represents the character type for the `ostream_iterator`. This argument is optional and the default value is `char`*.*  \n  \n `Traits`  \n The type that represents the character type for the `ostream_iterator`. This argument is optional and the default value is `char_traits`\\< *CharType>.*  \n  \n The ostream_iterator class must satisfy the requirements for an output iterator. Algorithms can be written directly to output streams using an `ostream_iterator`.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[ostream_iterator](#ostream_iterator__ostream_iterator)|Constructs an `ostream_iterator` that is initialized and delimited to write to the output stream.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#ostream_iterator__char_type)|A type that provides for the character type of the `ostream_iterator`.|  \n|[ostream_type](#ostream_iterator__ostream_type)|A type that provides for the stream type of the `ostream_iterator`.|  \n|[traits_type](#ostream_iterator__traits_type)|A type that provides for the character traits type of the `ostream_iterator`.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator*](#ostream_iterator__operator_star)|Dereferencing operator used to implement the output iterator expression * `i` = `x`.|  \n|[operator++](#ostream_iterator__operator_add_add)|A nonfunctional increment operator that returns an `ostream_iterator` to the same object it addressed before the operation was called.|  \n|[operator=](#ostream_iterator__operator_eq)|Assignment operator used to implement the output iterator expression * `i` = `x` for writing to an output stream.|  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n##  <a name=\"ostream_iterator__char_type\"></a>  ostream_iterator::char_type  \n A type that provides for the character type of the iterator.  \n  \n```\ntypedef CharType char_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **CharType**.  \n  \n### Example  \n  \n```cpp  \n// ostream_iterator_char_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   typedef ostream_iterator<int>::char_type CHT1;  \n   typedef ostream_iterator<int>::traits_type CHTR1;  \n  \n   // ostream_iterator for stream cout  \n   // with new line delimiter:  \n    ostream_iterator<int, CHT1, CHTR1> intOut ( cout , \"\\n\" );  \n  \n   // Standard iterator interface for writing  \n   // elements to the output stream:  \n   cout << \"The integers written to the output stream\\n\"  \n        << \"by intOut are:\" << endl;  \n *intOut = 10;  \n *intOut = 20;  \n *intOut = 30;  \n}  \n\\* Output:   \nThe integers written to the output stream  \nby intOut are:  \n10  \n20  \n30  \n*\\  \n```  \n  \n##  <a name=\"ostream_iterator__operator_star\"></a>  ostream_iterator::operator*  \n Dereferencing operator used to implement the output iterator expression \\* *ii* = *x*.  \n  \n```\nostream_iterator<Type, CharType, Traits>& operator*();\n```  \n  \n### Return Value  \n A reference to the `ostream_iterator`.  \n  \n### Remarks  \n The requirements for an output iterator that the `ostream_iterator` must satisfy require only the expression \\* *ii* = *t* be valid and says nothing about the **operator** or the `operator=` on their own. The member operator in this implementation returns **\\*this**.  \n  \n### Example  \n  \n```cpp  \n// ostream_iterator_op_deref.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // ostream_iterator for stream cout  \n   // with new line delimiter  \n   ostream_iterator<int> intOut ( cout , \"\\n\" );  \n  \n   // Standard iterator interface for writing  \n   // elements to the output stream  \n   cout << \"Elements written to output stream:\" << endl;  \n *intOut = 10;  \n   intOut++;      // No effect on iterator position  \n *intOut = 20;  \n *intOut = 30;  \n}  \n\\* Output:   \nElements written to output stream:  \n10  \n20  \n30  \n*\\  \n```  \n  \n##  <a name=\"ostream_iterator__operator_add_add\"></a>  ostream_iterator::operator++  \n A nonfunctional increment operator that returns an `ostream_iterator` to the same object it addressed before the operation was called.  \n  \n```\nostream_iterator<Type, CharType, Traits>& operator++();\nostream_iterator<Type, CharType, Traits> operator++(int);\n```  \n  \n### Return Value  \n A reference to the `ostream_iterator`.  \n  \n### Remarks  \n These member operators both return **\\*this**.  \n  \n### Example  \n  \n```cpp  \n// ostream_iterator_op_incr.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // ostream_iterator for stream cout  \n   // with new line delimiter  \n   ostream_iterator<int> intOut ( cout , \"\\n\" );  \n  \n   // standard iterator interface for writing  \n   // elements to the output stream  \n   cout << \"Elements written to output stream:\" << endl;  \n *intOut = 10;  \n   intOut++;      // No effect on iterator position  \n *intOut = 20;  \n *intOut = 30;  \n}  \n\\* Output:   \nElements written to output stream:  \n10  \n20  \n30  \n*\\  \n```  \n  \n##  <a name=\"ostream_iterator__operator_eq\"></a>  ostream_iterator::operator=  \n Assignment operator used to implement the output_iterator expression * `i` = `x` for writing to an output stream.  \n  \n```\nostream_iterator<Type, CharType, Traits>& operator=(const Type& val);\n```  \n  \n### Parameters  \n `val`  \n The value of the object of type `Type` to be inserted into the output stream.  \n  \n### Return Value  \n The operator inserts `val` into the output stream associated with the object, followed by the delimiter specified in the [ostream_iterator constructor](#ostream_iterator__ostream_iterator) (if any), and then returns a reference to the `ostream_iterator`.  \n  \n### Remarks  \n The requirements for an output iterator that the `ostream_iterator` must satisfy require only the expression * `ii` = `t` be valid and says nothing about the operator or the operator= on their own. This member operator returns `*this`.  \n  \n### Example  \n  \n```cpp  \n// ostream_iterator_op_assign.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // ostream_iterator for stream cout  \n   // with new line delimiter  \n   ostream_iterator<int> intOut ( cout , \"\\n\" );  \n  \n   // Standard iterator interface for writing  \n   // elements to the output stream  \n   cout << \"Elements written to output stream:\" << endl;  \n *intOut = 10;  \n   intOut++;      // No effect on iterator position  \n *intOut = 20;  \n *intOut = 30;  \n}  \n\\* Output:   \nElements written to output stream:  \n10  \n20  \n30  \n*\\  \n```  \n  \n##  <a name=\"ostream_iterator__ostream_iterator\"></a>  ostream_iterator::ostream_iterator  \n Constructs an `ostream_iterator` that is initialized and delimited to write to the output stream.  \n  \n```\nostream_iterator(\n    ostream_type& _Ostr);\n\nostream_iterator(\n    ostream_type& _Ostr,\n    const CharType* _Delimiter);\n```  \n  \n### Parameters  \n `_Ostr`  \n The output stream of type [ostream_iterator::ostream_type](#ostream_iterator__ostream_type) to be iterated over.  \n  \n `_Delimiter`  \n The delimiter that is inserted into the output stream between values.  \n  \n### Remarks  \n The first constructor initializes the output stream pointer with `&_Ostr`. The delimiter string pointer designates an empty string.  \n  \n The second constructor initializes the output stream pointer with `&_Ostr` and the delimiter string pointer with `_Delimiter`.  \n  \n### Example  \n  \n```cpp  \n// ostream_iterator_ostream_iterator.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // ostream_iterator for stream cout  \n   ostream_iterator<int> intOut ( cout , \"\\n\" );  \n *intOut = 10;  \n   intOut++;  \n *intOut = 20;  \n   intOut++;  \n  \n   int i;  \n   vector<int> vec;  \n   for ( i = 1 ; i < 7 ; ++i )  \n   {  \n      vec.push_back (  i );  \n   }  \n  \n   // Write elements to standard output stream  \n   cout << \"Elements output without delimiter: \";  \n   copy ( vec.begin ( ), vec.end ( ),  \n          ostream_iterator<int> ( cout ) );  \n   cout << endl;  \n  \n   // Write elements with delimiter \" : \" to output stream  \n   cout << \"Elements output with delimiter: \";  \n   copy ( vec.begin ( ), vec.end ( ),  \n          ostream_iterator<int> ( cout, \" : \" ) );  \n   cout << endl;  \n}  \n\\* Output:   \n10  \n20  \nElements output without delimiter: 123456  \nElements output with delimiter: 1 : 2 : 3 : 4 : 5 : 6 :   \n*\\  \n```  \n  \n##  <a name=\"ostream_iterator__ostream_type\"></a>  ostream_iterator::ostream_type  \n A type that provides for the stream type of the iterator.  \n  \n```\ntypedef basic_ostream<CharType, Traits> ostream_type;\n```  \n  \n### Remarks  \n The type is a synonym for [basic_ostream](../standard-library/basic-ostream-class.md)< `CharType`, `Traits`>, a stream class of the iostream hierarchy that defines objects that can be used for writing.  \n  \n### Example  \n  See [ostream_iterator](#ostream_iterator__ostream_iterator) for an example of how to declare and use `ostream_type`.  \n  \n##  <a name=\"ostream_iterator__traits_type\"></a>  ostream_iterator::traits_type  \n A type that provides for the character traits type of the iterator.  \n  \n```\ntypedef Traits traits_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **Traits**.  \n  \n### Example  \n  \n```cpp  \n// ostream_iterator_traits_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // The following not OK, but are just the default values:  \n   typedef ostream_iterator<int>::char_type CHT1;  \n   typedef ostream_iterator<int>::traits_type CHTR1;  \n  \n   // ostream_iterator for stream cout  \n   // with new line delimiter:  \n    ostream_iterator<int, CHT1, CHTR1> intOut ( cout , \"\\n\" );  \n  \n   // Standard iterator interface for writing  \n   // elements to the output stream:  \n   cout << \"The integers written to output stream\\n\"  \n        << \"by intOut are:\" << endl;  \n *intOut = 1;  \n *intOut = 10;  \n *intOut = 100;  \n}  \n\\* Output:   \nThe integers written to output stream  \nby intOut are:  \n1  \n10  \n100  \n*\\  \n```  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}