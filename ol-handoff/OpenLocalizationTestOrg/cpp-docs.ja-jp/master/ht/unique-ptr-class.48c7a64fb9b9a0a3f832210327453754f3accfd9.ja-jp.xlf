<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">278cca549a48ce480ca648ff1d2e55dc22b73cd2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\unique-ptr-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac90210e5c34ebd19a8948317062de6200e4cc27</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b187366a674d3f4269178991b053537640df009e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>unique_ptr Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>unique_ptr Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Stores a pointer to an owned object or array.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The object/array is owned by no other <ph id="ph1">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The object/array is destroyed when the <ph id="ph1">`unique_ptr`</ph> is destroyed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`rvalue`</ph> of type <ph id="ph2">`std::nullptr_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`pointer`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`deleter`</ph> function that is bound to a <ph id="ph2">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>No exceptions are generated by <ph id="ph1">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`unique_ptr`</ph> class supersedes <ph id="ph2">`auto_ptr`</ph>, and can be used as an element of STL containers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>make_unique<ept id="p1">](../standard-library/memory-functions.md#make_unique)</ept> helper function to efficiently create new instances of <ph id="ph1">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>uniquely manages a resource.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`unique_ptr`</ph> object stores a pointer to the object that it owns or stores a null pointer.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A resource can be owned by no more than one <ph id="ph1">`unique_ptr`</ph> object;  when a <ph id="ph2">`unique_ptr`</ph> object that owns a particular resource is destroyed, the resource is freed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`unique_ptr`</ph> object may be moved, but not copied;  for more information, see <bpt id="p1">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id="p1">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The resource is freed by calling a stored <ph id="ph1">`deleter`</ph> object of type <ph id="ph2">`Del`</ph> that knows how resources are allocated for a particular <ph id="ph3">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">`deleter``default_delete``&lt;T&gt;`</ph> assumes that the resource pointed to by <ph id="ph2">` ptr`</ph> is allocated with <ph id="ph3">`new`</ph>, and that it can be freed by calling <ph id="ph4">`delete _``Ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>(A partial specialization <ph id="ph1">`unique_ptr&lt;T[]&gt;`</ph>manages array objects allocated with <ph id="ph2">`new[]`</ph>, and has the default <ph id="ph3">`deleter``default_delete&lt;T[]&gt;`</ph>, specialized to call delete[] <ph id="ph4">` ptr`</ph>.)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The stored pointer to an owned resource, <ph id="ph1">`stored_ptr`</ph> has type <ph id="ph2">`pointer`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It is <ph id="ph1">`Del::pointer`</ph> if defined, and <ph id="ph2">`T *`</ph> if not.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The stored <ph id="ph1">`deleter`</ph> object <ph id="ph2">`stored_deleter`</ph> occupies no space in the object if the <ph id="ph3">`deleter`</ph> is stateless.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`Del`</ph> can be a reference type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>unique_ptr::unique_ptr</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>There are seven constructors for <ph id="ph1">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>deleter_type</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A synonym for the template parameter <ph id="ph1">`Del`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>element_type</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A synonym for the template parameter</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>pointer</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A synonym for <ph id="ph1">`Del::pointer`</ph> if defined, otherwise <ph id="ph2">`T *`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>unique_ptr::get</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`stored_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>unique_ptr::get_deleter</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns a reference to <ph id="ph1">`stored_deleter`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>unique_ptr::release</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>stores <ph id="ph1">`pointer()`</ph> in <ph id="ph2">`stored_ptr`</ph> and returns its previous contents.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>unique_ptr::reset</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Releases the currently owned resource and accepts a new resource.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>unique_ptr::swap</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Exchanges resource and <ph id="ph1">`deleter`</ph> with the provided <ph id="ph2">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The operator returns a value of a type that is convertible to <ph id="ph1">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The result of the conversion to <ph id="ph1">`bool`</ph> is <ph id="ph2">`true`</ph> when <ph id="ph3">`get() != pointer()`</ph>, otherwise <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The member function returns</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The member function returns*</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>unique_ptr operator=</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Assigns the value of a <ph id="ph1">`unique_ptr`</ph> (or a <ph id="ph2">`pointer-type`</ph>) to the current <ph id="ph3">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>memory&gt;</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>deleter_type</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`Del`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`Del`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>element_type</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>unique_ptr::get</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`stored_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The member function returns <ph id="ph1">`stored_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>unique_ptr::get_deleter</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns a reference to <ph id="ph1">`stored_deleter`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The member function returns a reference to <ph id="ph1">`stored_deleter`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>unique_ptr operator=</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Assigns the address of the provided <ph id="ph1">`unique_ptr`</ph> to the current one.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`unique_ptr`</ph> reference used to assign the value of to the current <ph id="ph2">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The member functions call <ph id="ph1">`reset(`` right``.release())`</ph> and move <ph id="ph2">` right``.stored_deleter`</ph> to <ph id="ph3">`stored_deleter`</ph>, then return <ph id="ph4">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>pointer</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A synonym for <ph id="ph1">`Del::pointer`</ph> if defined, otherwise <ph id="ph2">`Type *`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <ph id="ph1">`Del::pointer`</ph> if defined, otherwise <ph id="ph2">`Type *`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>unique_ptr::release</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Releases ownership of the returned stored pointer to the caller and sets the stored pointer value to <ph id="ph1">`nullptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`release`</ph> to take over ownership of the raw pointer stored by the <ph id="ph2">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The caller is responsible for deletion of the returned pointer.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`unique-ptr`</ph> is set to the empty default-constructed state.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can assign another pointer of compatible type to the <ph id="ph1">`unique_ptr`</ph> after the call to <ph id="ph2">`release`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This example shows how the caller of release is responsible for the object returned:</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Computer output:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>unique_ptr::reset</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Takes ownership of the pointer parameter, and then deletes the original stored pointer.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If the new pointer is the same as the original stored pointer, <ph id="ph1">`reset`</ph> deletes the pointer and sets the stored pointer to <ph id="ph2">`nullptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A pointer to the resource to take ownership of.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`reset`</ph> to change the stored <bpt id="p1">[</bpt>pointer<ept id="p1">](#pointer)</ept> owned by the <ph id="ph2">`unique_ptr`</ph> to <ph id="ph3">`ptr`</ph> and then delete the original stored pointer.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`unique_ptr`</ph> was not empty, <ph id="ph2">`reset`</ph> invokes the deleter function returned by <bpt id="p1">[</bpt>get_deleter<ept id="p1">](#unique_ptr__get_deleter)</ept> on the original stored pointer.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`reset`</ph> first stores the new pointer <ph id="ph2">`ptr`</ph>, and then deletes the original stored pointer, it's possible for <ph id="ph3">`reset`</ph> to immediately delete <ph id="ph4">`ptr`</ph> if it is the same as the original stored pointer.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>unique_ptr::swap</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Exchanges pointers between two <ph id="ph1">`unique_ptr`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`unique_ptr`</ph> used to swap pointers.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The member function swaps <ph id="ph1">`stored_ptr`</ph> with <ph id="ph2">`right.stored_ptr`</ph> and <ph id="ph3">`stored_deleter`</ph> with <ph id="ph4">`right.stored_deleter`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>unique_ptr::unique_ptr</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>There are seven constructors for <ph id="ph1">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A pointer to the resource to be assigned to a</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`deleter`</ph> to be assigned to a <ph id="ph2">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`rvalue reference`</ph> to a <ph id="ph2">`unique_ptr`</ph> from which <ph id="ph3">`unique_ptr`</ph> fields are move assigned to the newly constructed <ph id="ph4">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The first two constructors construct an object that manages no resource.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The third constructor stores <ph id="ph1">`ptr`</ph> in <ph id="ph2">`stored_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The fourth constructor stores <ph id="ph1">`ptr`</ph> in <ph id="ph2">`stored_ptr`</ph> and <ph id="ph3">`deleter`</ph> in <ph id="ph4">`stored_deleter`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The fifth constructor stores <ph id="ph1">`ptr`</ph> in <ph id="ph2">`stored_ptr`</ph> and moves <ph id="ph3">`deleter`</ph> into <ph id="ph4">`stored_deleter`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The sixth and seventh constructors store <ph id="ph1">`right.reset()`</ph> in <ph id="ph2">`stored_ptr`</ph> and moves <ph id="ph3">`right.get_deleter()`</ph> into <ph id="ph4">`stored_deleter`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>unique_ptr ~unique_ptr</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The destructor for <ph id="ph1">`unique_ptr`</ph>, destroys a <ph id="ph2">`unique_ptr`</ph> object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The destructor calls <ph id="ph1">`get_deleter()(stored_ptr)`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>memory&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>