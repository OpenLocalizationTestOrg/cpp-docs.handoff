<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b25d501a04bc97be456aab4d4704d4868df0ab5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\how-to-enable-a-64-bit-visual-cpp-toolset-on-the-command-line.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">337dc44a9b7030774b35569ff02a187402ef3af0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a4d54ce4f7359c1af6635a993ba317e6e19823e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Enable a 64-Bit Visual C++ Toolset on the Command Line | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Enable a 64-Bit Visual C++ Toolset on the Command Line</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Visual C++ includes compilers that you can use to create apps that can run on a 32-bit, 64-bit, or ARM-based Windows operating system.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For information about the specific tools that are included with each Visual C++ edition, see <bpt id="p1">[</bpt>Visual C++ Tools and Features in Visual Studio Editions<ept id="p1">](../ide/visual-cpp-tools-and-features-in-visual-studio-editions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about how to use the Visual Studio IDE to create 64-bit applications, see <bpt id="p1">[</bpt>How to: Configure Visual C++ Projects to Target 64-Bit Platforms<ept id="p1">](../build/how-to-configure-visual-cpp-projects-to-target-64-bit-platforms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>includes 32-bit, x86-hosted, native and cross compilers for x86, <ph id="ph1">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph>, and ARM targets.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph> is installed on a 64-bit Windows operating system, 32-bit, x86-hosted native and cross compilers, and also 64-bit, <ph id="ph2">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph>-hosted native and cross compilers, are installed for each target (x86, <ph id="ph3">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph>, and ARM).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The 32-bit and 64-bit compilers for each target generate identical code, but the 64-bit compilers support more memory for precompiled header symbols and the Whole Program Optimization (<bpt id="p1">[</bpt>/GL<ept id="p1">](../build/reference/gl-whole-program-optimization.md)</ept>, <bpt id="p2">[</bpt>/LTCG<ept id="p2">](../build/reference/ltcg-link-time-code-generation.md)</ept>) options.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you run into memory limits when you use a 32-bit compiler, try the 64-bit compiler.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When Visual Studio is installed on a 64-bit Windows operating system, additional Command Prompt shortcuts for the 64-bit <ph id="ph1">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph>-native and x86 cross compilers are available.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To access these command prompts on Windows 8, on the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> screen, open <bpt id="p2">**</bpt>All apps<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Under the installed version of <bpt id="p1">**</bpt><ph id="ph1">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph><ept id="p1">**</ept>, open <bpt id="p2">**</bpt>Visual Studio Tools<ept id="p2">**</ept>, and then choose one of the native-tool or cross-tool command prompts.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>On earlier versions of Windows, choose <bpt id="p1">**</bpt>Start<ept id="p1">**</ept>, expand <bpt id="p2">**</bpt>All Programs<ept id="p2">**</ept>, <bpt id="p3">**</bpt><ph id="ph1">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph><ept id="p3">**</ept>, <bpt id="p4">**</bpt>Visual Studio Tools<ept id="p4">**</ept>, and then choose a command prompt.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Vcvarsall.bat</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Any of the compilers can be used on the command line by running the vcvarsall.bat command file to configure the path and environment variables that enable the compiler toolset.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because there are no Command Prompt shortcuts to enable a 64-bit toolset to target x86 or ARM platforms, use vcvarsall.bat in a Command Prompt window to use the 64-bit toolset instead.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Setting the Path and Environment Variables for Command-Line Builds<ept id="p1">](../build/setting-the-path-and-environment-variables-for-command-line-builds.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following steps show how to configure a Command Prompt to use the 64-bit native toolset to target x86, x64, and ARM platforms.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To run vcvarsall.bat to use a 64-bit toolset</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>At the command prompt, change to the <ph id="ph1">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph> installation directory.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(The location depends on the system and the <ph id="ph1">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph> installation, but a typical location is C:\Program Files (x86)\Microsoft Visual Studio <bpt id="p1">*</bpt>version<ept id="p1">*</ept>\VC<ph id="ph2">\\</ph>.) For example, enter:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>cd "Program Files (x86)Microsoft Visual Studio 12.0VC"</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To configure this Command Prompt window for 64-bit command-line builds that target x64 platforms, at the command prompt, enter:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To configure this Command Prompt window for 64-bit command-line builds that target x86 platforms, at the command prompt, enter:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To configure this Command Prompt window for 64-bit command-line builds that target ARM platforms, at the command prompt, enter:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Configuring Programs for 64-Bit</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>