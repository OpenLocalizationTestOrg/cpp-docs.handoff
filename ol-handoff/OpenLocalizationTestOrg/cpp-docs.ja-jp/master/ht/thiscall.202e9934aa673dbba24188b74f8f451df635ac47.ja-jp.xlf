<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b549e9a8bcdbd526a6cbd2d72354591077a80ff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\thiscall.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b3866dd499ce3eba13ba133707727a3ceb79be11</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea11a732a23eea7b303a89fc023f90213a72f85d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__thiscall | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__thiscall</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__thiscall`</ph> calling convention is used on member functions and is the default calling convention used by C++ member functions that do not use variable arguments.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Under <ph id="ph1">`__thiscall`</ph>, the callee cleans the stack, which is impossible for <ph id="ph2">`vararg`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Arguments are pushed on the stack from right to left, with the <ph id="ph1">`this`</ph> pointer being passed via register ECX, and not on the stack, on the x86 architecture.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>One reason to use <ph id="ph1">`__thiscall`</ph> is in classes whose member functions use <ph id="ph2">`__clrcall`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In that case, you can use <ph id="ph1">`__thiscall`</ph> to make individual member functions callable from native code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When compiling with <bpt id="p1">[</bpt>/clr:pure<ept id="p1">](../build/reference/clr-common-language-runtime-compilation.md)</ept>, all functions and function pointers are <ph id="ph1">`__clrcall`</ph> unless specified otherwise.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In releases before Visual C++ 2005, the thiscall calling convention could not be explicitly specified in a program, because <ph id="ph1">`thiscall`</ph> was not a keyword.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>member functions use the <ph id="ph1">`__cdecl`</ph> calling convention.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>All function arguments are pushed on the stack, with the <ph id="ph1">`this`</ph> pointer placed on the stack last</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because this calling convention applies only to C++, there is no C name decoration scheme.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>On ARM and <ph id="ph1">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph> machines, <ph id="ph2">`__thiscall`</ph> is accepted and ignored by the compiler.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For non-static class functions, if the function is defined out-of-line, the calling convention modifier does not have to be specified on the out-of-line definition.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>That is, for class non-static member methods, the calling convention specified during declaration is assumed at the point of definition.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Argument Passing and Naming Conventions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>