<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39856841d7c0e277009cf9d26a1f615a14d41844</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\writing-a-multithreaded-win32-program.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09b30c075157775d28d2eee12655d2425dfd4780</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49a09faf630d44684702003a7f1f76ea3022e7d0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Writing a Multithreaded Win32 Program | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Writing a Multithreaded Win32 Program</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you write a program with multiple threads, you must coordinate their behavior and <bpt id="p1">[</bpt>use of the program's resources<ept id="p1">](#_core_sharing_common_resources_between_threads)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You must also make sure that each thread receives <bpt id="p1">[</bpt>its own stack<ept id="p1">](#_core_thread_stacks)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Sharing Common Resources Between Threads</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For a similar discussion from the MFC point of view, see <bpt id="p1">[</bpt>Multithreading: Programming Tips<ept id="p1">](../parallel/multithreading-programming-tips.md)</ept> and <bpt id="p2">[</bpt>Multithreading: When to Use the Synchronization Classes<ept id="p2">](../parallel/multithreading-when-to-use-the-synchronization-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each thread has its own stack and its own copy of the CPU registers.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Other resources, such as files, static data, and heap memory, are shared by all threads in the process.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Threads using these common resources must be synchronized.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Win32 provides several ways to synchronize resources, including semaphores, critical sections, events, and mutexes.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When multiple threads are accessing static data, your program must provide for possible resource conflicts.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Consider a program where one thread updates a static data structure containing <bpt id="p1">*</bpt>x<ept id="p1">*</ept>,<bpt id="p2">*</bpt>y<ept id="p2">*</ept> coordinates for items to be displayed by another thread.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the update thread alters the <bpt id="p1">*</bpt>x<ept id="p1">*</ept> coordinate and is preempted before it can change the <bpt id="p2">*</bpt>y<ept id="p2">*</ept> coordinate, the display thread might be scheduled before the <bpt id="p3">*</bpt>y<ept id="p3">*</ept> coordinate is updated.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The item would be displayed at the wrong location.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can avoid this problem by using semaphores to control access to the structure.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A mutex (short for <bpt id="p1">*</bpt>mut<ept id="p1">*</ept>ual <bpt id="p2">*</bpt>ex<ept id="p2">*</ept>clusion) is a way of communicating among threads or processes that are executing asynchronously of one another.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This communication is usually used to coordinate the activities of multiple threads or processes, typically by controlling access to a shared resource by locking and unlocking the resource.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To solve this <bpt id="p1">*</bpt>x<ept id="p1">*</ept>,<bpt id="p2">*</bpt>y<ept id="p2">*</ept> coordinate update problem, the update thread sets a mutex indicating that the data structure is in use before performing the update.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It would clear the mutex after both coordinates had been processed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The display thread must wait for the mutex to be clear before updating the display.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This process of waiting for a mutex is often called blocking on a mutex because the process is blocked and cannot continue until the mutex clears.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The Bounce.c program shown in <bpt id="p1">[</bpt>Sample Multithread C Program<ept id="p1">](../parallel/sample-multithread-c-program.md)</ept> uses a mutex named <ph id="ph1">`ScreenMutex`</ph> to coordinate screen updates.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Each time one of the display threads is ready to write to the screen, it calls <bpt id="p1">**</bpt>WaitForSingleObject<ept id="p1">**</ept> with the handle to <ph id="ph1">`ScreenMutex`</ph> and constant <bpt id="p2">**</bpt>INFINITE<ept id="p2">**</ept> to indicate that the <bpt id="p3">**</bpt>WaitForSingleObject<ept id="p3">**</ept> call should block on the mutex and not time out.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`ScreenMutex`</ph> is clear, the wait function sets the mutex so other threads cannot interfere with the display and continues executing the thread.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Otherwise, the thread blocks until the mutex clears.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When the thread completes the display update, it releases the mutex by calling <bpt id="p1">**</bpt>ReleaseMutex<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Screen displays and static data are only two of the resources requiring careful management.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, your program might have multiple threads accessing the same file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because another thread might have moved the file pointer, each thread must reset the file pointer before reading or writing.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In addition, each thread must make sure that it is not preempted between the time it positions the pointer and the time it accesses the file.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These threads should use a semaphore to coordinate access to the file by bracketing each file access with <bpt id="p1">**</bpt>WaitForSingleObject<ept id="p1">**</ept> and <bpt id="p2">**</bpt>ReleaseMutex<ept id="p2">**</ept> calls.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following code example illustrates this technique:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Thread Stacks</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>All of an application's default stack space is allocated to the first thread of execution, which is known as thread 1.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>As a result, you must specify how much memory to allocate for a separate stack for each additional thread your program needs.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The operating system allocates additional stack space for the thread, if necessary, but you must specify a default value.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The first argument in the <ph id="ph1">`_beginthread`</ph> call is a pointer to the <bpt id="p1">**</bpt>BounceProc<ept id="p1">**</ept> function, which executes the threads.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The second argument specifies the default stack size for the thread.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The last argument is an ID number that is passed to <bpt id="p1">**</bpt>BounceProc<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BounceProc<ept id="p1">**</ept> uses the ID number to seed the random number generator and to select the thread's color attribute and display character.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Threads that make calls to the C run-time library or to the Win32 API must allow sufficient stack space for the library and API functions they call.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The C <ph id="ph1">`printf`</ph> function requires more than 500 bytes of stack space, and you should have 2K of stack space available when calling Win32 API routines.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because each thread has its own stack, you can avoid potential collisions over data items by using as little static data as possible.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Design your program to use automatic stack variables for all data that can be private to a thread.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The only global variables in the Bounce.c program are either mutexes or variables that never change after they are initialized.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Win32 also provides Thread-Local Storage (TLS) to store per-thread data.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Thread Local Storage (TLS)<ept id="p1">](../parallel/thread-local-storage-tls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Multithreading with C and Win32</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>