<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be11ee358e3b572f8a7100d313950f65a5dea18c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn017-destroying-window-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4a29dc34f9384ab178140d37fc73fc3d43f4a353</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d359870da1c926ac6db740a537ea908447acc086</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN017: Destroying Window Objects | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN017: Destroying Window Objects</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This note describes the use of the <bpt id="p1">[</bpt>CWnd::PostNcDestroy<ept id="p1">](../mfc/reference/cwnd-class.md#cwnd__postncdestroy)</ept> method.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Use this method if you want to do customized allocation of <ph id="ph1">`CWnd`</ph>-derived objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This note also explains why you should use <bpt id="p1">[</bpt>CWnd::DestroyWindow<ept id="p1">](../mfc/reference/cwnd-class.md#cwnd__destroywindow)</ept> to destroy a C++ Windows object instead of the <ph id="ph1">`delete`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you follow the guidelines in this topic, you will have few cleanup problems.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These problems can result from issues such as forgetting to delete/free C++ memory, forgetting to free system resources like <ph id="ph1">`HWND`</ph>s, or freeing objects too many times.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Problem</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each windows object (object of a class derived from <ph id="ph1">`CWnd`</ph>) represents both a C++ object and an <ph id="ph2">`HWND`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>C++ objects are allocated in the application's heap and <ph id="ph1">`HWND`</ph>s are allocated in system resources by the window manager.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because there are several ways to destroy a window object, we must provide a set of rules that prevent system resource or memory leaks.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These rules must also prevent objects and Windows handles from being destroyed more than one time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Destroying Windows</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following are the two permitted ways to destroy a Windows object:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`CWnd::DestroyWindow`</ph> or the Windows API <ph id="ph2">`DestroyWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Explicitly deleting with the <ph id="ph1">`delete`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The first case is by far the most common.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This case applies even if your code does not call <ph id="ph1">`DestroyWindow`</ph> directly.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the user directly closes a frame window, this action generates the <ph id="ph1">`WM_CLOSE`</ph> message, and the default response to this message is to call <ph id="ph2">`DestroyWindow.`</ph> When a parent window is destroyed, Windows calls <ph id="ph3">`DestroyWindow`</ph> for all its children.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The second case, the use of the <ph id="ph1">`delete`</ph> operator on Windows objects, should be rare.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following are some cases where using <ph id="ph1">`delete`</ph> is the correct choice.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Auto Cleanup with CWnd::PostNcDestroy</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When the system destroys a Windows window, the last Windows message sent to the window is <ph id="ph1">`WM_NCDESTROY`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">`CWnd`</ph> handler for that message is <bpt id="p1">[</bpt>CWnd::OnNcDestroy<ept id="p1">](../mfc/reference/cwnd-class.md#cwnd__onncdestroy)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>will detach the <ph id="ph1">`HWND`</ph> from the C++ object and call the virtual function <ph id="ph2">`PostNcDestroy`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Some classes override this function to delete the C++ object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">`CWnd::PostNcDestroy`</ph> does nothing, which is appropriate for window objects that are allocated on the stack frame or embedded in other objects.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is not appropriate for window objects that are designed to be allocated on the heap without any other objects.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In other words, it is not appropriate for window objects that are not embedded in other C++ objects.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Those classes that are designed to be allocated alone on the heap override the <ph id="ph1">`PostNcDestroy`</ph> method to perform a <ph id="ph2">`delete this`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This statement will free any memory associated with the C++ object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Even though the default <ph id="ph1">`CWnd`</ph> destructor calls <ph id="ph2">`DestroyWindow`</ph> if <ph id="ph3">`m_hWnd`</ph> is non-NULL, this does not lead to infinite recursion because the handle will be detached and NULL during the cleanup phase.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The system usually calls <ph id="ph1">`CWnd::PostNcDestroy`</ph> after it processes the Windows <ph id="ph2">`WM_NCDESTROY`</ph> message and the <ph id="ph3">`HWND`</ph> and the C++ window object are no longer connected.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The system will also call <ph id="ph1">`CWnd::PostNcDestroy`</ph> in the implementation of most <bpt id="p1">[</bpt>CWnd::Create<ept id="p1">](../mfc/reference/cwnd-class.md#cwnd__create)</ept> calls if failure occurs.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The auto cleanup rules are described later in this topic.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Auto Cleanup Classes</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following classes are not designed for auto-cleanup.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>They are typically embedded in other C++ objects or on the stack:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>All standard Windows controls (<ph id="ph1">`CStatic`</ph>, <ph id="ph2">`CEdit`</ph>, <ph id="ph3">`CListBox`</ph>, and so on).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Any child windows derived directly from <ph id="ph1">`CWnd`</ph> (for example, custom controls).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Splitter windows (<ph id="ph1">`CSplitterWnd`</ph>).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Default control bars (classes derived from <ph id="ph1">`CControlBar`</ph>, see <bpt id="p1">[</bpt>Technical Note 31<ept id="p1">](../mfc/tn031-control-bars.md)</ept> for enabling auto-delete for control bar objects).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Dialogs (<ph id="ph1">`CDialog`</ph>) designed for modal dialogs on the stack frame.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>All the standard dialogs except <ph id="ph1">`CFindReplaceDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The default dialogs created by ClassWizard.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following classes are designed for auto-cleanup.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>They are typically allocated by themselves on the heap:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Main frame windows (derived directly or indirectly from <ph id="ph1">`CFrameWnd`</ph>).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>View windows (derived directly or indirectly from <ph id="ph1">`CView`</ph>).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you want to break these rules, you must override the <ph id="ph1">`PostNcDestroy`</ph> method in your derived class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To add auto-cleanup to your class, call your base class and then do a <ph id="ph1">`delete this`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To remove auto-cleanup from your class, call <ph id="ph1">`CWnd::PostNcDestroy`</ph> directly instead of the <ph id="ph2">`PostNcDestroy`</ph> method of your direct base class.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The most common use of changing auto cleanup behavior is to create a modeless dialog that can be allocated on the heap.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When to Call delete</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>We recommend that you call <ph id="ph1">`DestroyWindow`</ph> to destroy a Windows object, either the C++ method or the global <ph id="ph2">`DestroyWindow`</ph> API.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Do not call the global <ph id="ph1">`DestroyWindow`</ph> API to destroy a MDI Child window.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You should use the virtual method <ph id="ph1">`CWnd::DestroyWindow`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For C++ Window objects that do not perform auto-cleanup, using the <ph id="ph1">`delete`</ph> operator can cause a memory leak when you try to call <ph id="ph2">`DestroyWindow`</ph> in the <ph id="ph3">`CWnd::~CWnd`</ph> destructor if the VTBL does not point to the correctly derived class.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This occurs because the system cannot find the appropriate destroy method to call.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`DestroyWindow`</ph> instead of <ph id="ph2">`delete`</ph> avoids these problems.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Because this can be a subtle error, compiling in debug mode will generate the following warning if you are at risk.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the case of C++ Windows objects that do perform auto-cleanup, you must call <ph id="ph1">`DestroyWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you use the <ph id="ph1">`delete`</ph> operator directly, the MFC diagnostic memory allocator will notify you that you are freeing memory two times.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The two occurrences are your first explicit call and the indirect call to <ph id="ph1">`delete this`</ph> in the auto-cleanup implementation of <ph id="ph2">`PostNcDestroy`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>After calling <ph id="ph1">`DestroyWindow`</ph> on a non-auto-cleanup object, the C++ object will still be around, but <ph id="ph2">`m_hWnd`</ph> will be NULL.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>After calling <ph id="ph1">`DestroyWindow`</ph> on an auto-cleanup object, the C++ object will be gone, freed by the C++ delete operator in the auto-cleanup implementation of <ph id="ph2">`PostNcDestroy`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>