<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8dcf5d5a5518f2e1baf72f7fc60bf2eb80edd9e3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\automation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c9c664fd6c49f1eae7ca07883ffe21e3c4f3020</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0162f444c88c33f3961c35cec5c3144861761cfa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Automation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Automation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Automation (formerly known as OLE Automation) makes it possible for one application to manipulate objects implemented in another application, or to expose objects so they can be manipulated.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>Automation server<ept id="p1">](../mfc/automation-servers.md)</ept> is an application (a type of COM server) that exposes its functionality through COM interfaces to other applications, called <bpt id="p2">[</bpt>Automation clients<ept id="p2">](../mfc/automation-clients.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The exposure enables Automation clients to automate certain functions by directly accessing objects and using the services they provide.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Automation servers and clients use COM interfaces that are always derived from <ph id="ph1">`IDispatch`</ph> and take and return a specific set of data types called Automation types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can automate any object that exposes an Automation interface, providing methods and properties that you can access from other applications.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Automation is available for both OLE and COM objects.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The automated object might be local or remote (on another machine accessible across a network); therefore there are two categories of automation:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Automation (local).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Remote Automation<ept id="p1">](../mfc/remote-automation.md)</ept> (over a network, using Distributed COM, or DCOM).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Exposing objects is beneficial when applications provide functionality useful to other applications.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, an ActiveX control is a type of Automation server; the application hosting the ActiveX control is the automation client of that control.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As another example, a word processor might expose its spell-checking functionality to other programs.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Exposure of objects enables vendors to improve their applications by using the ready-made functionality of other applications.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this way, Automation applies some of the principles of object-oriented programming, such as reusability and encapsulation, at the level of applications themselves.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>More important is the support Automation provides to users and solution providers.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By exposing application functionality through a common, well-defined interface, Automation makes it possible to build comprehensive solutions in a single general programming language, such as Microsoft Visual Basic, instead of in diverse application-specific macro languages.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Many commercial applications, such as Microsoft Excel and Microsoft Visual C++, allow you to automate much of their functionality.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, in Visual C++, you can write VBScript macros to automate builds, aspects of code editing, or debugging tasks.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Passing Parameters in Automation</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>One difficulty in creating Automation methods is helping to provide a uniform "safe" mechanism to pass data between automation servers and clients.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Automation uses the <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> type to pass data.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> type is a tagged union.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It has a data member for the value (this is an anonymous C++ union) and a data member indicating the type of information stored in the union.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> type supports a number of standard data types: 2- and 4-byte integers, 4- and 8-byte floating-point numbers, strings, and Boolean values.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In addition, it supports the <ph id="ph1">`HRESULT`</ph> (OLE error codes), <bpt id="p1">**</bpt>CURRENCY<ept id="p1">**</ept> (a fixed-point numeric type), and <bpt id="p2">**</bpt>DATE<ept id="p2">**</ept> (absolute date and time) types, as well as pointers to <bpt id="p3">**</bpt>IUnknown<ept id="p3">**</ept> and <ph id="ph2">`IDispatch`</ph> interfaces.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> type is encapsulated in the <bpt id="p2">[</bpt>COleVariant<ept id="p2">](../mfc/reference/colevariant-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The supporting <bpt id="p1">**</bpt>CURRENCY<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DATE<ept id="p2">**</ept> classes are encapsulated in the <bpt id="p3">[</bpt>COleCurrency<ept id="p3">](../mfc/reference/colecurrency-class.md)</ept> and <bpt id="p4">[</bpt>COleDateTime<ept id="p4">](../atl-mfc-shared/reference/coledatetime-class.md)</ept> classes.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Automation Samples</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AUTOCLIK<ept id="p1">](../visual-cpp-samples.md)</ept> Use this sample to learn Automation techniques and as a foundation for learning Remote Automation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ACDUAL<ept id="p1">](../visual-cpp-samples.md)</ept> Adds dual interfaces to an Automation server application.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CALCDRIV<ept id="p1">](../visual-cpp-samples.md)</ept> Automation client application driving MFCCALC.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>INPROC<ept id="p1">](../visual-cpp-samples.md)</ept> Demonstrates an In-Process Automation server application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IPDRIVE<ept id="p1">](../visual-cpp-samples.md)</ept> Automation client application driving INPROC.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFCCALC<ept id="p1">](../visual-cpp-samples.md)</ept> Demonstrates an Automation client application.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>What do you want to know more about</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Automation Clients</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Automation Servers</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remote Automation</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>OLE</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Active Technology</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>What do you want to do</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add an Automation class</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Use type libraries</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Access automation servers</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Write automation clients in C++</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>MFC COM</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>