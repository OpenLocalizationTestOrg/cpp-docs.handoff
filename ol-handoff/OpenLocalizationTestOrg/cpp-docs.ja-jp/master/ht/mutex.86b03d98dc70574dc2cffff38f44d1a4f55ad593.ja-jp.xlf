<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6b3b0c14103d32a80d136b2e6a3fa115068dd2c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\mutex.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23071d79bafa3b464edd459dafa66c4bca5d92fe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a562c7874e94f9f0167d3a8f0ab2a14237961785</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>mutex<ph id="ph1">&amp;gt;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>mutex</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Include the standard header <ph id="ph1">\&lt;</ph>mutex&gt; to define the classes <ph id="ph2">`mutex`</ph>, <ph id="ph3">`recursive_mutex`</ph>, <ph id="ph4">`timed_mutex`</ph>, and <ph id="ph5">`recursive_timed_mutex`</ph>; the templates <ph id="ph6">`lock_guard`</ph> and <ph id="ph7">`unique_lock`</ph>; and supporting types and functions that define mutual-exclusion code regions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The STL synchronization types in Visual Studio 2015 are based on Windows synchronization primitives and no longer use ConcRT (except when the target platform is Windows XP).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The types defined in <ph id="ph1">\&lt;</ph>mutex&gt; should not be used with any ConcRT types or functions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In code that is compiled by using <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> or <bpt id="p2">**</bpt>/clr:pure<ept id="p2">**</ept>, this header is blocked.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The classes <ph id="ph1">`mutex`</ph> and <ph id="ph2">`recursive_mutex`</ph> are <bpt id="p1">*</bpt>mutex types<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A mutex type has a default constructor and a destructor that does not throw exceptions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These objects have methods that provide mutual exclusion when multiple threads try to lock the same object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Specifically, a mutex type contains the methods <ph id="ph1">`lock`</ph>, <ph id="ph2">`try_lock`</ph>, and <ph id="ph3">`unlock`</ph>:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lock`</ph> method blocks the calling thread until the thread obtains ownership of the mutex.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Its return value is ignored.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`try_lock`</ph> method tries to obtain ownership of the mutex without blocking.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Its return type is convertible to <ph id="ph1">`bool`</ph> and is <ph id="ph2">`true`</ph> if the method obtains ownership, but is otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`unlock`</ph> method releases the ownership of the mutex from the calling thread.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can use mutex types as type arguments to instantiate the templates <ph id="ph1">`lock_guard`</ph> and <ph id="ph2">`unique_lock`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can use objects of these types as the <ph id="ph1">`Lock`</ph> argument to the wait member functions in the template <bpt id="p1">[</bpt>condition_variable_any<ept id="p1">](../standard-library/condition-variable-any-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>timed mutex type<ept id="p1">*</ept> satisfies the requirements for a mutex type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In addition, it has the <ph id="ph1">`try_lock_for`</ph> and <ph id="ph2">`try_lock_until`</ph> methods that must be callable by using one argument and must return a type that is convertible to <ph id="ph3">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A timed mutex type can define these functions by using additional arguments, provided that those additional arguments all have default values.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`try_lock_for`</ph> method must be callable by using one argument, <ph id="ph2">`Rel_time`</ph>, whose type is an instantiation of <bpt id="p1">[</bpt>chrono::duration<ept id="p1">](../standard-library/duration-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The method tries to obtain ownership of the mutex, but returns within the time that is designated by <ph id="ph1">`Rel_time`</ph>, regardless of success.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The return value converts to <ph id="ph1">`true`</ph> if the method obtains ownership; otherwise, the return value converts to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`try_lock_until`</ph> method must be callable by using one argument, <ph id="ph2">`Abs_time`</ph>, whose type is an instantiation of <bpt id="p1">[</bpt>chrono::time_point<ept id="p1">](../standard-library/time-point-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The method tries to obtain ownership of the mutex, but returns no later than the time that is designated by <ph id="ph1">`Abs_time`</ph>, regardless of success.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The return value converts to <ph id="ph1">`true`</ph> if the method obtains ownership; otherwise, the return value converts to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A mutex type is also known as a <bpt id="p1">*</bpt>lockable type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If it does not provide the member function <ph id="ph1">`try_lock`</ph>, it is a <bpt id="p1">*</bpt>basic lockable type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A timed mutex type is also known as a <bpt id="p1">*</bpt>timed lockable type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>lock_guard Class</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Represents a template that can be instantiated to create an object whose destructor unlocks a <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>mutex Class (STL)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Represents a mutex type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Use objects of this type to enforce mutual exclusion within a program.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>recursive_mutex Class</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Represents a mutex type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In constrast to the <ph id="ph1">`mutex`</ph> class, the behavior of calling locking methods for objects that are already locked is well-defined.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>recursive_timed_mutex Class</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Represents a timed mutex type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Use objects of this type to enforce mutual exclusion that has time-limited blocking within a program.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Unlike objects of type <ph id="ph1">`timed_mutex`</ph>, the effect of calling locking methods for <ph id="ph2">`recursive_timed_mutex`</ph> objects is well-defined.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>timed_mutex Class</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Represents a timed mutex type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Use objects of this type to enforce mutual exclusion that has time-limited blocking within a program.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>unique_lock Class</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Represents a template that can be instantiated to create objects that manage the locking and unlocking of a <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>call_once Function</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Provides a mechanism for calling a specified callable object exactly once during execution.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>lock Function</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Attempts to lock all arguments without deadlock.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Structs</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>adopt_lock_t Structure</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Represents a type that is used to define an <ph id="ph1">`adopt_lock`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>defer_lock_t Structure</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Represents a type that defines a <ph id="ph1">`defer_lock`</ph> object that is used to select one of the overloaded constructors of <ph id="ph2">`unique_lock`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>once_flag Structure</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Represents a <ph id="ph1">`struct`</ph> that is used with the template function <ph id="ph2">`call_once`</ph> to ensure that initialization code is called only once, even in the presence of multiple threads of execution.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>try_to_lock_t Structure</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Represents a <ph id="ph1">`struct`</ph> that defines a <ph id="ph2">`try_to_lock`</ph> object and is used to select one of the overloaded constructors of <ph id="ph3">`unique_lock`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Variables</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>adopt_lock Variable</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Represents an object that can be passed to constructors for <ph id="ph1">`lock_guard`</ph> and <ph id="ph2">`unique_lock`</ph> to indicate that the mutex object that is also being passed to the constructor is locked.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>defer_lock Variable</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Represents an object that can be passed to the constructor for <ph id="ph1">`unique_lock`</ph>, to indicate that the constructor should not lock the mutex object that is also being passed to it.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>try_to_lock Variable</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Represents an object that can be passed to the constructor for <ph id="ph1">`unique_lock`</ph> to indicate that the constructor should try to unlock the <ph id="ph2">`mutex`</ph> that is also being passed to it without blocking.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Header Files Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>