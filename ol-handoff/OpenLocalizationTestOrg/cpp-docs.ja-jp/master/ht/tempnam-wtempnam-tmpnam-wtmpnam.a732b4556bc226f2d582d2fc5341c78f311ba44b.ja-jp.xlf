<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d95e42c5d399ef23524baef78ebf4f092e2ebbac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\tempnam-wtempnam-tmpnam-wtmpnam.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e9e6390213a95e85b4a55aa71090ef73c54b1a3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c385b26102a09fc16877a41326eaa68b98bbcf8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_tempnam, _wtempnam, tmpnam, _wtmpnam | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_tempnam, _wtempnam, tmpnam, _wtmpnam</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Generate names you can use to create temporary files.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>More secure versions of some of these functions are available; see <bpt id="p1">[</bpt>tmpnam_s, _wtmpnam_s<ept id="p1">](../../c-runtime-library/reference/tmpnam-s-wtmpnam-s.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The string that will be pre-pended to names returned by <ph id="ph1">`_tempnam`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The path used in the file name if there is no TMP environment variable, or if TMP is not a valid directory.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Pointer that will hold the generated name and will be identical to the name returned by the function.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is a convenient way to save the generated name.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each of these functions returns a pointer to the name generated or <ph id="ph1">`NULL`</ph> if there is a failure.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Failure can occur if you attempt more than <ph id="ph1">`TMP_MAX`</ph> (see STDIO.H) calls with <ph id="ph2">`tmpnam`</ph> or if you use <ph id="ph3">`_tempnam`</ph>and there is an invalid directory name specified in the TMP environment variable and in the <ph id="ph4">`dir`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The pointers returned by <ph id="ph1">`tmpnam`</ph> and <ph id="ph2">`_wtmpnam`</ph> point to internal static buffers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>free<ept id="p1">](../../c-runtime-library/reference/free.md)</ept> should not be called to deallocate those pointers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>needs to be called for pointers allocated by <ph id="ph1">`_tempnam`</ph> and <ph id="ph2">`_wtempnam`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Each of these functions returns the name of a file that does not currently exist.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>returns a name unique in the current working directory and <ph id="ph1">`_tempnam`</ph> lets you generate a unique name in a directory other than the current one.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Note than when a file name is pre-pended with a backslash and no path information, such as \fname21, this indicates that the name is valid for the current working directory.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`tmpnam`</ph>, you can store this generated file name in <ph id="ph2">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`str`</ph> is <ph id="ph2">`NULL`</ph>, then <ph id="ph3">`tmpnam`</ph> leaves the result in an internal static buffer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Thus any subsequent calls destroy this value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The name generated by <ph id="ph1">`tmpnam`</ph> consists of a program-generated file name and, after the first call to <ph id="ph2">`tmpnam`</ph>, a file extension of sequential numbers in base 32 (.1-.vvu, when <ph id="ph3">`TMP_MAX`</ph> in STDIO.H is 32,767).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>will generate a unique file name for a directory chosen by the following rules:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the TMP environment variable is defined and set to a valid directory name, unique file names will be generated for the directory specified by TMP.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the TMP environment variable is not defined or if it is set to the name of a directory that does not exist, <ph id="ph1">`_tempnam`</ph> will use the <ph id="ph2">`dir`</ph> parameter as the path for which it will generate unique names.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the TMP environment variable is not defined or if it is set to the name of a directory that does not exist, and if <ph id="ph1">`dir`</ph> is either <ph id="ph2">`NULL`</ph> or set to the name of a directory that does not exist, <ph id="ph3">`_tempnam`</ph> will use the current working directory to generate unique names.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Currently, if both TMP and <ph id="ph1">`dir`</ph> specify names of directories that do not exist, the <ph id="ph2">`_tempnam`</ph> function call will fail.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The name returned by <ph id="ph1">`_tempnam`</ph> will be a concatenation of <ph id="ph2">`prefix`</ph> and a sequential number, which will combine to create a unique file name for the specified directory.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>generates file names that have no extension.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>uses <bpt id="p1">[</bpt>malloc<ept id="p1">](../../c-runtime-library/reference/malloc.md)</ept> to allocate space for the filename; the program is responsible for freeing this space when it is no longer needed.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`tmpnam`</ph> automatically handle multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the OEM code page obtained from the operating system.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>is a wide-character version of <ph id="ph1">`_tempnam`</ph>; the arguments and return value of <ph id="ph2">`_wtempnam`</ph> are wide-character strings.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_tempnam`</ph> behave identically except that <ph id="ph2">`_wtempnam`</ph> does not handle multibyte-character strings.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>is a wide-character version of <ph id="ph1">`tmpnam`</ph>; the argument and return value of <ph id="ph2">`_wtmpnam`</ph> are wide-character strings.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`tmpnam`</ph> behave identically except that <ph id="ph2">`_wtmpnam`</ph> does not handle multibyte-character strings.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_DEBUG`</ph> and <ph id="ph2">`_CRTDBG_MAP_ALLOC`</ph> are defined, <ph id="ph3">`_tempnam`</ph> and <ph id="ph4">`_wtempnam`</ph> are replaced by calls to <bpt id="p1">[</bpt>_tempnam_dbg and _wtempnam_dbg<ept id="p1">](../../c-runtime-library/reference/tempnam-dbg-wtempnam-dbg.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>stdio.h&gt;</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>stdio.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>stdio.h&gt;</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Stream I/O</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>_getmbcp</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>malloc</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>_setmbcp</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>tmpfile</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>tmpfile_s</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>