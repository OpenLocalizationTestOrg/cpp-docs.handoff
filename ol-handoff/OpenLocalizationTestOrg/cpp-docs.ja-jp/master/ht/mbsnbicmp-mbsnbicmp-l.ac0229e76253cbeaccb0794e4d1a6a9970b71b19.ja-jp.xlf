<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc5faa6846bee14047edcd09d6bbf6649bdec4f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\mbsnbicmp-mbsnbicmp-l.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88b32ae7e72256265cc286fdedd7a130c0a68a9d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53ac31165ef1a8ba2b517a9c777083b82544aa55</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_mbsnbicmp, _mbsnbicmp_l | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_mbsnbicmp, _mbsnbicmp_l</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Compares <ph id="ph1">`n`</ph> bytes of two multibyte-character strings, and ignores case.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This API cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CRT functions not supported with /ZW<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Null-terminated strings to compare.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Number of bytes to compare.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The return value indicates the relationship between the substrings.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>&lt; 0</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>substring less than <ph id="ph1">`string2`</ph> substring.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>substring identical to <ph id="ph1">`string2`</ph> substring.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>&gt; 0</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>substring greater than <ph id="ph1">`string2`</ph> substring.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>On an error, <ph id="ph1">`_mbsnbcmp`</ph> returns <ph id="ph2">`_NLSCMPERROR`</ph>, which is defined in String.h and Mbstring.h.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_mbsnbicmp`</ph> function performs an ordinal comparison of at most the first <ph id="ph2">`count`</ph> bytes of <ph id="ph3">`string1`</ph> and <ph id="ph4">`string2`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The comparison is performed by converting each character to lowercase; <ph id="ph1">`_mbsnbcmp`</ph> is a case-sensitive version of <ph id="ph2">`_mbsnbicmp`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The comparison ends if a terminating null character is reached in either string before <ph id="ph1">`count`</ph> characters are compared.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the strings are equal when a terminating null character is reached in either string before <ph id="ph1">`count`</ph> characters are compared, the shorter string is lesser.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>is similar to <ph id="ph1">`_mbsnicmp`</ph>, except that it compares strings up to <ph id="ph2">`count`</ph> bytes instead of by characters.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Two strings containing characters located between 'Z' and 'a' in the ASCII table ('[', '<ph id="ph1">\\</ph>', ']', '^', '_', and '<ph id="ph2">\`</ph>') compare differently, depending on their case.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, the two strings "<ph id="ph1">`ABCDE`</ph>" and "<ph id="ph2">`ABCD^`</ph>" compare one way if the comparison is lowercase ("<ph id="ph3">`abcde`</ph>" &gt; "<ph id="ph4">`abcd^`</ph>") and the other way ("<ph id="ph5">`ABCDE`</ph>" &lt; "<ph id="ph6">`ABCD^`</ph>") if it is uppercase.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>recognizes multibyte-character sequences according to the <bpt id="p1">[</bpt>multibyte code page<ept id="p1">](../../c-runtime-library/code-pages.md)</ept> currently in use.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is not affected by the current locale setting.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If either <ph id="ph1">`string1`</ph> or <ph id="ph2">`string2`</ph> is a null pointer, <ph id="ph3">`_mbsnbicmp`</ph> invokes the invalid parameter handler as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the function returns <ph id="ph1">`_NLSCMPERROR`</ph> and sets <ph id="ph2">`errno`</ph> to <ph id="ph3">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Tchar.h routine</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>_UNICODE and _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>&lt;mbstring.h&gt;</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>_mbsnbcmp, _mbsnbcmp_l<ept id="p1">](../../c-runtime-library/reference/mbsnbcmp-mbsnbcmp-l.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>String Manipulation</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>_mbsnbcat, _mbsnbcat_l</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>_mbsnbcmp, _mbsnbcmp_l</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>