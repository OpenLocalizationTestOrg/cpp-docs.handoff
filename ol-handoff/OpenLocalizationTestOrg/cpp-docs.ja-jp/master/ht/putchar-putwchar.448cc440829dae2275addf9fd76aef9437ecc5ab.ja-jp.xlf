<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ec96aa90b8b282edb5779005df0c1cdc129dafb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\putchar-putwchar.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">515b7034bab02158977a5aade227f1fe680ee080</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63b6d7c93dd749eed4b5b2a12610fda1420919df</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>putchar, putwchar | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>putchar, putwchar</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Writes a character to <bpt id="p1">**</bpt>stdout<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Character to be written.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Returns the character written.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To indicate an error or end-of-file condition, <ph id="ph1">`putc`</ph> and <ph id="ph2">`putchar`</ph> return <ph id="ph3">`EOF`</ph>; <ph id="ph4">`putwc`</ph> and <ph id="ph5">`putwchar`</ph> return <bpt id="p1">**</bpt>WEOF<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For all four routines, use <bpt id="p1">[</bpt>ferror<ept id="p1">](../../c-runtime-library/reference/ferror.md)</ept> or <bpt id="p2">[</bpt>feof<ept id="p2">](../../c-runtime-library/reference/feof.md)</ept> to check for an error or end of file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If passed a null pointer for <ph id="ph1">`stream`</ph>, these functions generate an invalid parameter exception, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, they return <ph id="ph1">`EOF`</ph> or <bpt id="p1">**</bpt>WEOF<ept id="p1">**</ept> and set <ph id="ph2">`errno`</ph> to <ph id="ph3">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> for more information on these, and other, error codes.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`putc`</ph> routine writes the single character <ph id="ph2">`c`</ph> to the output <ph id="ph3">`stream`</ph> at the current position.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Any integer can be passed to <ph id="ph1">`putc`</ph>, but only the lower 8 bits are written.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`putchar`</ph> routine is identical to <bpt id="p1">**</bpt>putc(<ept id="p1">**</ept> <ph id="ph2">`c`</ph><bpt id="p2">**</bpt>, stdout )<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For each routine, if a read error occurs, the error indicator for the stream is set.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`putchar`</ph> are similar to <ph id="ph2">`fputc`</ph> and <ph id="ph3">`_fputchar`</ph>, respectively, but are implemented both as functions and as macros (see <bpt id="p1">[</bpt>Choosing Between Functions and Macros<ept id="p1">](../../c-runtime-library/recommendations-for-choosing-between-functions-and-macros.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`putwchar`</ph> are wide-character versions of <ph id="ph2">`putc`</ph> and <ph id="ph3">`putchar`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The versions with the <bpt id="p1">**</bpt>_nolock<ept id="p1">**</ept> suffix are identical except that they are not protected from interference by other threads.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>They may be faster since they do not incur the overhead of locking out other threads.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use these functions only in thread-safe contexts such as single-threaded applications or where the calling scope already handles thread isolation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>putwchar</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>stdio.h&gt;</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>stdio.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The console is not supported in <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The standard stream handles that are associated with the console—<ph id="ph1">`stdin`</ph>, <ph id="ph2">`stdout`</ph>, and <ph id="ph3">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id="ph4">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>All versions of the <bpt id="p1">[</bpt>C run-time libraries<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>System::IO::StreamWriter::Write</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>System::Console::Write</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Stream I/O</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>fputc, fputwc</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>getc, getwc</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>