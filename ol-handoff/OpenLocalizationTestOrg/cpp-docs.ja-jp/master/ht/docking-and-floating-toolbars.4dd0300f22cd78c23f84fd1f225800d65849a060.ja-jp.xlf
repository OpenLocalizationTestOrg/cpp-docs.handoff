<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6719adf2ad2f741a9bd24a643939741ef764e3d7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\docking-and-floating-toolbars.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a802b8c56a2c2054b1403d3b7ab0c86549e70bfa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a180356162fa902b4317220229b278a073d5c835</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Docking and Floating Toolbars | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Docking and Floating Toolbars</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Microsoft Foundation Class Library supports dockable toolbars.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A dockable toolbar can be attached, or docked, to any side of its parent window, or it can be detached, or floated, in its own mini-frame window.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article explains how to use dockable toolbars in your applications.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you use the Application Wizard to generate the skeleton of your application, you are asked to choose whether you want dockable toolbars.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>By default, the Application Wizard generates the code that performs the three actions necessary to place a dockable toolbar in your application:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enable docking in a frame window<ept id="p1">](#_core_enabling_docking_in_a_frame_window)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enable docking for a toolbar<ept id="p1">](#_core_enabling_docking_for_a_toolbar)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dock the toolbar (to the frame window)<ept id="p1">](#_core_docking_the_toolbar)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If any of these steps are missing, your application will display a standard toolbar.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The last two steps must be performed for each dockable toolbar in your application.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Other topics covered in this article include:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Floating the toolbar</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Dynamically resizing the toolbar</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Setting wrap positions for a fixed-style toolbar</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See the MFC General sample <bpt id="p1">[</bpt>DOCKTOOL<ept id="p1">](../visual-cpp-samples.md)</ept> for examples.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Enabling Docking in a Frame Window</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To dock toolbars to a frame window, the frame window (or destination) must be enabled to allow docking.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is done using the <bpt id="p1">[</bpt>CFrameWnd::EnableDocking<ept id="p1">](../mfc/reference/cframewnd-class.md#cframewnd__enabledocking)</ept> function, which takes one <ph id="ph1">`DWORD`</ph> parameter that is a set of style bits indicating which side of the frame window accepts docking.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If a toolbar is about to be docked and there are multiple sides that it could be docked to, the sides indicated in the parameter passed to <ph id="ph1">`EnableDocking`</ph> are used in the following order: top, bottom, left, right.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you want to be able to dock control bars anywhere, pass <ph id="ph1">`CBRS_ALIGN_ANY`</ph> to <ph id="ph2">`EnableDocking`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Enabling Docking for a Toolbar</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>After you have prepared the destination for docking, you must prepare the toolbar (or source) in a similar fashion.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CControlBar::EnableDocking<ept id="p1">](../mfc/reference/ccontrolbar-class.md#ccontrolbar__enabledocking)</ept> for each toolbar you want to dock, specifying the destination sides to which the toolbar should dock.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If none of the sides specified in the call to <ph id="ph1">`CControlBar::EnableDocking`</ph> match the sides enabled for docking in the frame window, the toolbar cannot dock â€” it will float.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Once it has been floated, it remains a floating toolbar, unable to dock to the frame window.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the effect you want is a permanently floating toolbar, call <ph id="ph1">`EnableDocking`</ph> with a parameter of 0.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Then call <bpt id="p1">[</bpt>CFrameWnd::FloatControlBar<ept id="p1">](../mfc/reference/cframewnd-class.md#cframewnd__floatcontrolbar)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The toolbar remains floating, permanently unable to dock anywhere.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Docking the Toolbar</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The framework calls <bpt id="p1">[</bpt>CFrameWnd::DockControlBar<ept id="p1">](../mfc/reference/cframewnd-class.md#cframewnd__dockcontrolbar)</ept> when the user attempts to drop the toolbar on a side of the frame window that allows docking.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In addition, you can call this function at any time to dock control bars to the frame window.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is normally done during initialization.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>More than one toolbar can be docked to a particular side of the frame window.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Floating the Toolbar</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Detaching a dockable toolbar from the frame window is called floating the toolbar.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CFrameWnd::FloatControlBar<ept id="p1">](../mfc/reference/cframewnd-class.md#cframewnd__floatcontrolbar)</ept> to do this.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Specify the toolbar to be floated, the point where it should be placed, and an alignment style that determines whether the floating toolbar is horizontal or vertical.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The framework calls this function when a user drags a toolbar off its docked location and drops it in a location where docking is not enabled.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This can be anywhere inside or outside the frame window.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>As with <ph id="ph1">`DockControlBar`</ph>, you can also call this function during initialization.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The MFC implementation of dockable toolbars does not provide some of the extended features found in some applications that support dockable toolbars.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Features such as customizable toolbars are not provided.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Dynamically Resizing the Toolbar</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>As of Visual C++ version 4.0, you can make it possible for users of your application to resize floating toolbars dynamically.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Typically, a toolbar has a long, linear shape, displayed horizontally.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>But you can change the toolbar's orientation and its shape.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, when the user docks a toolbar against one of the vertical sides of the frame window, the shape changes to a vertical layout.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It's also possible to reshape the toolbar into a rectangle with multiple rows of buttons.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specify dynamic sizing as a toolbar characteristic.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Specify fixed sizing as a toolbar characteristic.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To provide this support, there are two new toolbar styles for use in your calls to the <bpt id="p1">[</bpt>CToolBar::Create<ept id="p1">](../mfc/reference/ctoolbar-class.md#ctoolbar__create)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>They are:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CBRS_SIZE_DYNAMIC<ept id="p1">**</ept> Control bar is dynamic.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CBRS_SIZE_FIXED<ept id="p1">**</ept> Control bar is fixed.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The size dynamic style lets your user resize the toolbar while it is floating, but not while it is docked.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The toolbar "wraps" where needed to change shape as the user drags its edges.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The size fixed style preserves the wrap states of a toolbar, fixing the position of the buttons in each column.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Your application's user can't change the shape of the toolbar.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The toolbar wraps at designated places, such as the locations of separators between the buttons.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It maintains this shape whether the toolbar is docked or floating.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The effect is a fixed palette with multiple columns of buttons.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can also use <bpt id="p1">[</bpt>CToolBar::GetButtonStyle<ept id="p1">](../mfc/reference/ctoolbar-class.md#ctoolbar__getbuttonstyle)</ept> to return a state and style for buttons on your toolbars.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A button's style determines how the button appears and how it responds to user input; the state tells whether the button is in a wrapped state.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Setting Wrap Positions for a Fixed-Style Toolbar</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For a toolbar with the size fixed style, designate toolbar button indexes at which the toolbar will wrap.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following code shows how to do this in your main frame window's <ph id="ph1">`OnCreate`</ph> override:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocViewSDI#10</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The MFC General sample <bpt id="p1">[</bpt>DOCKTOOL<ept id="p1">](../visual-cpp-samples.md)</ept> shows how to use member functions of classes <bpt id="p2">[</bpt>CControlBar<ept id="p2">](../mfc/reference/ccontrolbar-class.md)</ept> and <bpt id="p3">[</bpt>CToolBar<ept id="p3">](../mfc/reference/ctoolbar-class.md)</ept> to manage dynamic layout of a toolbar.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See the file EDITBAR.CPP in DOCKTOOL.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>What do you want to know more about</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Toolbar fundamentals</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Toolbar tool tips</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Using your old toolbars</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>MFC Toolbar Implementation</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>