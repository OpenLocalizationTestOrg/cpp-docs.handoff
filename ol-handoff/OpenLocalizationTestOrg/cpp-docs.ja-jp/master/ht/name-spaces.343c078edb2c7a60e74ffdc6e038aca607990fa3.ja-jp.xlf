<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52fa9f2bcde4537e5cd48e9f716887423f19792a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\name-spaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de830c4b1e1d6eea5955764f802cb46fe8cea534</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a8580b28dc73ffcff97fdb2e75a2f4141446624</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Name Spaces | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Name Spaces</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The compiler sets up "name spaces" to distinguish between the identifiers used for different kinds of items.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The names within each name space must be unique to avoid conflict, but an identical name can appear in more than one name space.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This means that you can use the same identifier for two or more different items, provided that the items are in different name spaces.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The compiler can resolve references based on the syntactic context of the identifier in the program.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Do not confuse the limited C notion of a name space with the C++ "namespace" feature.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Namespaces<ept id="p1">](../cpp/namespaces-cpp.md)</ept> in the C<bpt id="p2">*</bpt>++ Language Reference<ept id="p2">*</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This list describes the name spaces used in C.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Statement labels</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Named statement labels are part of statements.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Definitions of statement labels are always followed by a colon but are not part of <bpt id="p1">**</bpt>case<ept id="p1">**</ept> labels.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Uses of statement labels always immediately follow the keyword <ph id="ph1">`goto`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Statement labels do not have to be distinct from other names or from label names in other functions.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Structure, union, and enumeration tags</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These tags are part of structure, union, and enumeration type specifiers and, if present, always immediately follow the reserved words <ph id="ph1">`struct`</ph>, <bpt id="p1">**</bpt>union<ept id="p1">**</ept>, or <ph id="ph2">`enum`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The tag names must be distinct from all other structure, enumeration, or union tags with the same visibility.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Members of structures or unions</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Member names are allocated in name spaces associated with each structure and union type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>That is, the same identifier can be a component name in any number of structures or unions at the same time.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Definitions of component names always occur within structure or union type specifiers.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Uses of component names always immediately follow the member-selection operators (<bpt id="p1">**</bpt>–&gt;<ept id="p1">**</ept> and <bpt id="p2">**</bpt>.<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The name of a member must be unique within the structure or union, but it does not have to be distinct from other names in the program, including the names of members of different structures and unions, or the name of the structure itself.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Ordinary identifiers</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>All other names fall into a name space that includes variables, functions (including formal parameters and local variables), and enumeration constants.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Identifier names have nested visibility, so you can redefine them within blocks.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Typedef names</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typedef names cannot be used as identifiers in the same scope.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, since structure tags, structure members, and variable names are in three different name spaces, the three items named <ph id="ph1">`student`</ph> in this example do not conflict.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The context of each item allows correct interpretation of each occurrence of <ph id="ph1">`student`</ph> in the program.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>(For information about structures, see <bpt id="p1">[</bpt>Structure Declarations<ept id="p1">](../c-language/structure-declarations.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`student`</ph> appears after the <ph id="ph2">`struct`</ph> keyword, the compiler recognizes it as a structure tag.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`student`</ph> appears after a member-selection operator (<bpt id="p1">**</bpt>–&gt;<ept id="p1">**</ept> or <bpt id="p2">**</bpt>.<ept id="p2">**</ept>), the name refers to the structure member.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In other contexts, <ph id="ph1">`student`</ph> refers to the structure variable.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, overloading the tag name space is not recommended since it obscures meaning.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Program Structure</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>