<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56aad8c920fd639bd3fcadb94b33575dd13f52d4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\trivial-standard-layout-and-pod-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61d908d6ab7048a1126f246b897fc69385f282c1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0192ab60a76dc1c6693b369a091b0616d73855a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Trivial, standard-layout, and POD types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Trivial, standard-layout, and POD types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The term <bpt id="p1">*</bpt>layout<ept id="p1">*</ept> refers to how the members of an object of class, struct or union type are arranged in memory.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In some cases, the layout is well-defined by the language specification.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>But when a class or struct contains certain C++ language features such as virtual base classes, virtual functions, members with different access control, then the compiler is free to choose a layout.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>That layout may vary depending on what optimizations are being performed and in many cases object might not even occupy a contiguous area of memory.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, if a class has virtual functions, all the instances of that class might share a single virtual function table.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Such types are of course very useful, but they also have limitations.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because the layout is undefined they cannot be passed to programs written in other languages, such as C, and because they might be non-contiguous they cannot be reliably copied with fast low-level functions such as <ph id="ph1">`memcopy`</ph> or serialized over a network.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To enable compilers as well as C++ programs and metaprograms to reason about the suitability of any given type for operations that depend on a particular memory layout, C++14 introduced three categories of simple classes and structs: <bpt id="p1">*</bpt>trivial<ept id="p1">*</ept>, <bpt id="p2">*</bpt>standard-layout<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>POD<ept id="p3">*</ept> or Plain Old Data.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The Standard Library has the function templates <ph id="ph1">`is_trivial&lt;T&gt;`</ph>, <ph id="ph2">`is_standard_layout&lt;T&gt;`</ph> and <ph id="ph3">`is_pod&lt;T&gt;`</ph> that determine whether a given type belongs to a given category.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Trivial types</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When a class or struct in C++ has compiler-provided or explicitly defaulted special member functions, then it is a trivial type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It occupies a contiguous memory area.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It can have members with different access specifiers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In C++, the compiler is free to choose how to order  members in this situation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Therefore, you can memcopy such objects but you cannot reliably consume them from a C program.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A trivial type T can be copied into an array of char or unsigned char, and safely copied back into a T variable.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note that because of alignment requirements, there might be padding bytes between type members.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Trivial types have a trivial default constructor, trivial copy constructor, trivial copy assignment operator and trivial destructor.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In each case, <bpt id="p1">*</bpt>trivial<ept id="p1">*</ept> means the constructor/operator/destructor is not user-provided and belongs to a class that has</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>no virtual functions or virtual base classes,</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>no base classes with a corresponding non-trivial constructor/operator/destructor</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>no data members of class type with a corresponding non-trivial constructor/operator/destructor</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following examples show trivial types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In Trivial2, the presence of the <ph id="ph1">`Trivial2(int a, int b)`</ph> constructor requires that you provide a default constructor.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For the type to qualify as trivial, you must explicitly default that constructor.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Standard layout types</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When a class or struct does not contain certain C++ language features such as virtual functions which are not found in the C language, and all members have the same access control, it is a standard-layout type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is memcopy-able and the layout is sufficiently defined that it can be consumed by C programs.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Standard-layout types can have user-defined special member functions.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In addition, standard layout types have these characteristics:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>no virtual functions or virtual base classes</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>all non-static data members have the same access control</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>all non-static members of class type are standard-layout</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>any base classes are standard-layout</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>has no base classes of the same type as the first non-static data member.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>meets one of these conditions:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>no non-static data member in the most-derived class and no more than one base class with non-static data members, or</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>has no base classes with non-static data members</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following code shows one example of a standard-layout type:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The last two requirements can perhaps be better illustrated with code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the next example, even though Base is standard-layout, <ph id="ph1">`Derived`</ph> is not standard layout because both it (the most derived class) and <ph id="ph2">`Base`</ph> have non-static data members:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In this example <ph id="ph1">`Derived`</ph> is standard-layout because <ph id="ph2">`Base`</ph> has no non-static data members:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Derived would also be standard-layout if <ph id="ph1">`Base`</ph> had the data members and <ph id="ph2">`Derived`</ph> had only member functions.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>POD types</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When a class or struct is both trivial and standard-layout, it is a POD (Plain Old Data) type.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The memory layout of POD types is therefore contiguous and each member has a higher address than the member that was declared before it, so that byte for byte copies and binary I/O can be performed on these types.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Scalar types such as int are also POD types.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>POD types that are classes can have only POD types as non-static data members.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following example shows the distinctions between trivial, standard-layout, and POD types:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Basic Concepts</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>