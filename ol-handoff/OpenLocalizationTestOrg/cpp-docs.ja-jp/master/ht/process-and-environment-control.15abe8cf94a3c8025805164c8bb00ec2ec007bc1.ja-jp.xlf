<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca6b0748a448d7027fe316eaf45d7275eac284bd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\process-and-environment-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c77727592856e9a2c934039b32ec9db1a7490890</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b10be303e4d8d3aa89268baf29295540ef9b933</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Process and Environment Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Process and Environment Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Use the process-control routines to start, stop, and manage processes from within a program.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Use the environment-control routines to get and change information about the operating-system environment.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Process and Environment Control Functions</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>.NET Framework equivalent</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>abort</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Abort process without flushing buffers or calling functions registered by <ph id="ph1">`atexit`</ph> and</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>assert</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Test for logic error</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Debug::Assert</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_ASSERT, _ASSERTE<ept id="p1">](../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> macros</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Similar to <ph id="ph1">`assert`</ph>, but only available in the debug versions of the run-time libraries</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Debug::Assert</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>atexit</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Schedule routines for execution at program termination</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Process::Exited</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>_beginthread, _beginthreadex</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Create a new thread on a Windows operating system process</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>System::Threading::Thread::Start</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_cexit</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Perform <ph id="ph1">`exit`</ph> termination procedures (such as flushing buffers), then return control to calling program without terminating process</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Process::CloseMainWindow</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>_c_exit</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Perform <ph id="ph1">`_exit`</ph> termination procedures, then return control to calling program without terminating process</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Process::CloseMainWindow</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>_cwait</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Wait until another process terminates</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Process::WaitForExit</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>_endthread, _endthreadex</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Terminate a Windows operating system thread</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>_execl, _wexecl</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Execute new process with argument list</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>_execle, _wexecle</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Execute new process with argument list and given environment</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>_execlp, _wexeclp</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Execute new process using <ph id="ph1">`PATH`</ph> variable and argument list</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>_execlpe, _wexeclpe</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Execute new process using <ph id="ph1">`PATH`</ph> variable, given environment, and argument list</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>_execv, _wexecv</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Execute new process with argument array</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>_execve, _wexecve</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Execute new process with argument array and given environment</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>_execvp, _wexecvp</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Execute new process using <ph id="ph1">`PATH`</ph> variable and argument array</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>_execvpe, _wexecvpe</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Execute new process using <ph id="ph1">`PATH`</ph> variable, given environment, and argument array</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>exit</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Call functions registered by <ph id="ph1">`atexit`</ph> and <ph id="ph2">`_onexit`</ph>, flush all buffers, close all open files, and terminate process</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Process::Kill</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>_exit</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Terminate process immediately without calling <ph id="ph1">`atexit`</ph> or <ph id="ph2">`_onexit`</ph> or flushing buffers</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Process::Kill</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>getenv, _wgetenv<ept id="p1">](../c-runtime-library/reference/getenv-wgetenv.md)</ept>, <bpt id="p2">[</bpt>getenv_s, _wgetenv_s<ept id="p2">](../c-runtime-library/reference/getenv-s-wgetenv-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Get value of environment variable</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>System::Environment::GetEnvironmentVariable</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>_getpid</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Get process ID number</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Process::Id</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>longjmp</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Restore saved stack environment; use it to execute a nonlocal</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>_onexit</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Schedule routines for execution at program termination; use for compatibility with Microsoft C/C++ version 7.0 and earlier</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Process::Exited</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>_pclose</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Wait for new command processor and close stream on associated pipe</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>perror, _wperror</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Print error message</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>_pipe</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Create pipe for reading and writing</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>_popen, _wpopen</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Create pipe and execute command</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_putenv, _wputenv<ept id="p1">](../c-runtime-library/reference/putenv-wputenv.md)</ept>, <bpt id="p2">[</bpt>_putenv_s, _wputenv_s<ept id="p2">](../c-runtime-library/reference/putenv-s-wputenv-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Add or change value of environment variable</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>raise</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Send signal to calling process</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>setjmp</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Save stack environment; use to execute non local</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>signal</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Handle interrupt signal</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>_spawnl, _wspawnl</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Create and execute new process with specified argument list</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>_spawnle, _wspawnle</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Create and execute new process with specified argument list and environment</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>_spawnlp, _wspawnlp</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Create and execute new process using <ph id="ph1">`PATH`</ph> variable and specified argument list</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>_spawnlpe, _wspawnlpe</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Create and execute new process using <ph id="ph1">`PATH`</ph> variable, specified environment, and argument list</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>_spawnv, _wspawnv</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Create and execute new process with specified argument array</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>_spawnve, _wspawnve</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Create and execute new process with specified environment and argument array</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>_spawnvp, _wspawnvp</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Create and execute new process using <ph id="ph1">`PATH`</ph> variable and specified argument array</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>_spawnvpe, _wspawnvpe</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Create and execute new process using <ph id="ph1">`PATH`</ph> variable, specified environment, and argument array</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Process Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>system, _wsystem</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Execute operating-system command</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::Process Class<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>In the Windows operating system, the spawned process is equivalent to the spawning process.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Any process can use <ph id="ph1">`_cwait`</ph> to wait for any other process for which the process ID is known.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The difference between the <ph id="ph1">`_exec`</ph> and <ph id="ph2">`_spawn`</ph> families is that a <ph id="ph3">`_spawn`</ph> function can return control from the new process to the calling process.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">`_spawn`</ph> function, both the calling process and the new process are present in memory unless <ph id="ph2">`_P_OVERLAY`</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>In an <ph id="ph1">`_exec`</ph> function, the new process overlays the calling process, so control cannot return to the calling process unless an error occurs in the attempt to start execution of the new process.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The differences among the functions in the <ph id="ph1">`_exec`</ph> family, as well as among those in the <ph id="ph2">`_spawn`</ph> family, involve the method of locating the file to be executed as the new process, the form in which arguments are passed to the new process, and the method of setting the environment, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Use a function that passes an argument list when the number of arguments is constant or is known at compile time.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Use a function that passes a pointer to an array containing the arguments when the number of arguments is to be determined at run time.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The information in the following table also applies to the wide-character counterparts of the <ph id="ph1">`_spawn`</ph> and <ph id="ph2">`_exec`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>_spawn and _exec Function Families</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Use PATH variable to locate file</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Argument-passing convention</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Environment settings</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>List</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Inherited from calling process</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>List</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Pointer to environment table for new process passed as last argument</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>List</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Inherited from calling process</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>List</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Pointer to environment table for new process passed as last argument</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Array</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Inherited from calling process</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Array</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Pointer to environment table for new process passed as last argument</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Array</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Inherited from calling process</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Array</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Pointer to environment table for new process passed as last argument</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Run-Time Routines by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>