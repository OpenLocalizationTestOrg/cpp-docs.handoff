<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b594c32c5cdcab34a0762a3032a4ed5384061867</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\auto-parallelization-and-auto-vectorization.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b626a217de75a6e00c6b8b210dff7af3b86d16d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ec5c0208897690960a4da8f921612e4590d5bf6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Auto-Parallelization and Auto-Vectorization | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Auto-Parallelization and Auto-Vectorization</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Auto-Parallelizer and Auto-Vectorizer are designed to provide automatic performance gains for loops in your code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Auto-Parallelizer</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>/Qpar<ept id="p1">](../build/reference/qpar-auto-parallelizer.md)</ept> compiler switch enables <bpt id="p2">*</bpt>automatic parallelization<ept id="p2">*</ept> of loops in your code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you specify this flag without changing your existing code, the compiler evaluates the code to find loops that might benefit from parallelization.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because it might find loops that don't do much work and therefore won't benefit from parallelization, and because every unnecessary parallelization can engender the spawning of a thread pool, extra synchronization, or other processing that would tend to slow performance instead of improving it, the compiler is conservative in selecting the loops that it parallelizes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, consider the following example in which the upper bound of the loop is not known at compile time:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`u`</ph> could be a small value, the compiler won’t automatically parallelize this loop.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, you might still want it parallelized because you know that <ph id="ph1">`u`</ph> will always be large.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To enable the auto-parallelization, specify <bpt id="p1">[</bpt>#pragma loop(hint_parallel(n))<ept id="p1">](../preprocessor/loop.md)</ept>, where <ph id="ph1">`n`</ph> is the number of threads to parallelize across.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the following example, the compiler will attempt to parallelize the loop across 8 threads.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>As with all <bpt id="p1">[</bpt>pragma directives<ept id="p1">](../preprocessor/pragma-directives-and-the-pragma-keyword.md)</ept>, the alternate pragma syntax <ph id="ph1">`__pragma(loop(hint_parallel(n)))`</ph> is also supported.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are some loops that the compiler can’t parallelize even if you want it to.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Here's an example:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The function <ph id="ph1">`upper_bound()`</ph> might change every time it's called.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because the upper bound cannot be known, the compiler can emit a diagnostic message that explains why it can’t parallelize this loop.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example demonstrates a loop that can be parallelized, a loop that cannot be parallelized, the compiler syntax to use at the command prompt, and the compiler output for each command line option:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Compiling by using this command:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>cl d:\myproject\mylooptest.cpp /O2 /Qpar /Qpar-report:1</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>yields this output:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>--- Analyzing function: void __cdecl test(void)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>d:\myproject\mytest.cpp(4) : loop parallelized</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Compiling by using this command:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>cl d:\myproject\mylooptest.cpp /O2 /Qpar /Qpar-report:2</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>yields this output:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>--- Analyzing function: void __cdecl test(void)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>d:\myproject\mytest.cpp(4) : loop parallelized</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>d:\myproject\mytest.cpp(4) : loop not parallelized due to reason '1008'</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Notice the difference in output between the two different <bpt id="p1">[</bpt>/Qpar-report (Auto-Parallelizer Reporting Level)<ept id="p1">](../build/reference/qpar-report-auto-parallelizer-reporting-level.md)</ept> options.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/Qpar-report:1<ept id="p1">**</ept> outputs parallelizer messages only for loops that are successfully parallelized.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/Qpar-report:2<ept id="p1">**</ept> outputs parallelizer messages for both successful and unsuccessful loop parallelizations.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about reason codes and messages, see <bpt id="p1">[</bpt>Vectorizer and Parallelizer Messages<ept id="p1">](../error-messages/tool-errors/vectorizer-and-parallelizer-messages.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Auto-Vectorizer</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The Auto-Vectorizer analyzes loops in your code, and uses the vector registers and instructions on the target computer to execute them, if it can.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This can improve the performance of your code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The compiler targets the SSE2, AVX, and AVX2 instructions in Intel or AMD processors, or the NEON instructions on ARM processors, according to the <bpt id="p1">[</bpt>/arch<ept id="p1">](../build/reference/arch-minimum-cpu-architecture.md)</ept> switch.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The Auto-Vectorizer may generate different instructions than specified by the <bpt id="p1">**</bpt>/arch<ept id="p1">**</ept> switch.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>These instructions are guarded by a runtime check to make sure that code still runs correctly.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, when you compile <bpt id="p1">**</bpt>/arch:SSE2<ept id="p1">**</ept>, SSE4.2 instructions may be emitted.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A runtime check verifies that SSE4.2 is available on the target processor and jumps to a non-SSE4.2 version of the loop if the processor does not support those instructions.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>By default, the Auto-Vectorizer is enabled.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you want to compare the performance of your code under vectorization, you can use <bpt id="p1">[</bpt>#pragma loop(no_vector)<ept id="p1">](../preprocessor/loop.md)</ept> to disable vectorization of any given loop.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>As with all <bpt id="p1">[</bpt>pragma directives<ept id="p1">](../preprocessor/pragma-directives-and-the-pragma-keyword.md)</ept>, the alternate pragma syntax <ph id="ph1">`__pragma(loop(no_vector))`</ph> is also supported.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>As with the Auto-Parallelizer, you can specify the <bpt id="p1">[</bpt>/Qvec-report (Auto-Vectorizer Reporting Level)<ept id="p1">](../build/reference/qvec-report-auto-vectorizer-reporting-level.md)</ept> command-line option to report either successfully vectorized loops only—<bpt id="p2">**</bpt>/Qvec-report:1<ept id="p2">**</ept>—or both successfully and unsuccessfully vectorized loops—<bpt id="p3">**</bpt>/Qvec-report:2<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about reason codes and messages, see <bpt id="p1">[</bpt>Vectorizer and Parallelizer Messages<ept id="p1">](../error-messages/tool-errors/vectorizer-and-parallelizer-messages.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For an example showing how the vectorizer works in practice, see <bpt id="p1">[</bpt>Project Austin Part 2 of 6: Page Curling<ept id="p1">](http://blogs.msdn.com/b/vcblog/archive/2012/09/27/10348494.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>loop</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Parallel Programming in Native Code</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>/Qpar (Auto-Parallelizer)</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>/Qpar-report (Auto-Parallelizer Reporting Level)</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>/Qvec-report (Auto-Vectorizer Reporting Level)</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Vectorizer and Parallelizer Messages</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>