<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2ede4eaee73f49cbfeb080ace130fc442c480e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\tokens-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a918488746335766dba94f30b69dd4d653185d93</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1a34928a953052da5d560569c772e589dbfaefb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Tokens (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Tokens (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A token is the smallest element of a C++ program that is meaningful to the compiler.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The C++ parser recognizes these kinds of tokens: identifiers, keywords, literals, operators, punctuators, and other separators.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A stream of these tokens makes up a translation unit.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Tokens are usually separated by <bpt id="p1">*</bpt>white space<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>White space can be one or more:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Blanks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Horizontal or vertical tabs</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>New lines</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Formfeeds</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The parser recognizes keywords, identifiers, literals, operators, and punctuators.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For information on specific token types, see <bpt id="p1">[</bpt>Keywords<ept id="p1">](../cpp/keywords-cpp.md)</ept>, <bpt id="p2">[</bpt>Identifiers<ept id="p2">](../cpp/identifiers-cpp.md)</ept>, <bpt id="p3">[</bpt>Numeric, Boolean and Pointer Literals<ept id="p3">](../cpp/numeric-boolean-and-pointer-literals-cpp.md)</ept>, <bpt id="p4">[</bpt>String and Character Literals<ept id="p4">](../cpp/string-and-character-literals-cpp.md)</ept>, <bpt id="p5">[</bpt>User-Defined Literals<ept id="p5">](../cpp/user-defined-literals-cpp.md)</ept>, <bpt id="p6">[</bpt>C++ Built-in Operators, Precedence and Associativity<ept id="p6">](../cpp/cpp-built-in-operators-precedence-and-associativity.md)</ept>, and <bpt id="p7">[</bpt>Punctuators<ept id="p7">](../cpp/punctuators-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>White space is ignored, except as required to separate tokens.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Preprocessing tokens are used in the preprocessing phases to generate the token stream passed to the compiler.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The preprocessing token categories are header names, identifiers, preprocessing numbers, character literals, string literals, preprocessing operators and punctuators, and single non-white-space characters that do not match one of the other categories.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Character and string literals can be user-defined literals.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Preprocessing tokens can be separated by white space or comments.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The parser separates tokens from the input stream by creating the longest token possible using the input characters in a left-to-right scan.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Consider this code fragment:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The programmer who wrote the code might have intended either of these two statements:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Because the parser creates the longest token possible from the input stream, it chooses the second interpretation, making the tokens <ph id="ph1">`i++`</ph>, <ph id="ph2">`+`</ph>, and <ph id="ph3">`j`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Lexical Conventions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>