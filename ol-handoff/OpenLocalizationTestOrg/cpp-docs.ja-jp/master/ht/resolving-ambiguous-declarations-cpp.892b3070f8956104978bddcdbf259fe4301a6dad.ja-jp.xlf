<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">20e4f5d031827f941483751e436a215cc737627d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\resolving-ambiguous-declarations-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de7651fe214f97167b6fa8b31b0e225c20c0904f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ff1856044454b02a9d6bf608636ce1f301e46c4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Resolving ambiguous declarations (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Resolving ambiguous declarations (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To perform explicit conversions from one type to another, you must use casts, specifying the desired type name.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Some type casts result in syntactic ambiguity.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following function-style type cast is ambiguous:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is unclear whether it is a function declaration or an object declaration with a function-style cast as the initializer: It could declare a function returning type <bpt id="p1">**</bpt>char <ph id="ph1">\*</ph><ept id="p1">**</ept> that takes one argument of type <ph id="ph2">`String`</ph>, or it could declare the object <ph id="ph3">`aName`</ph> and initialize it with the value of <ph id="ph4">`s`</ph> cast to type <ph id="ph5">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If a declaration can be considered a valid function declaration, it is treated as such.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Only if it cannot possibly be a function declaration — that is, if it would be syntactically incorrect — is a statement examined to see if it is a function-style type cast.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Therefore, the compiler considers the statement to be a declaration of a function and ignores the parentheses around the identifier <ph id="ph1">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On the other hand, the statements:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>and</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>are clearly declarations of objects, and a user-defined conversion from type <ph id="ph1">`String`</ph> to type <bpt id="p1">**</bpt>char <ph id="ph2">\*</ph><ept id="p1">**</ept> is invoked to perform the initialization of <ph id="ph3">`aName`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>C++ Abstract Declarators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>