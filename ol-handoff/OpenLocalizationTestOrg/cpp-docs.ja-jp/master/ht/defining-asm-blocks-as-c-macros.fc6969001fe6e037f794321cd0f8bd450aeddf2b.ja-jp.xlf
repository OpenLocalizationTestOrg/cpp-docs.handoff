<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0592cf56e98fb1920c185a626ed99fc672f89f9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\assembler\inline\defining-asm-blocks-as-c-macros.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf42ba36d6d1522a06acd2d793423e9694cb390c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4bcb7919e932b5a0897114b15e3329956f5d7994</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defining __asm Blocks as C Macros | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Defining __asm Blocks as C Macros</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>C macros offer a convenient way to insert assembly code into your source code, but they demand extra care because a macro expands into a single logical line.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To create trouble-free macros, follow these rules:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Enclose the <ph id="ph1">`__asm`</ph> block in braces.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Put the <ph id="ph1">`__asm`</ph> keyword in front of each assembly instruction.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use old-style C comments ( <ph id="ph1">`/* comment */`</ph>) instead of assembly-style comments ( <ph id="ph2">`; comment`</ph>) or single-line C comments ( <ph id="ph3">`// comment`</ph>).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To illustrate, the following example defines a simple macro:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>At first glance, the last three <ph id="ph1">`__asm`</ph> keywords seem superfluous.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>They are needed, however, because the macro expands into a single line:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The third and fourth <ph id="ph1">`__asm`</ph> keywords are needed as statement separators.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The only statement separators recognized in <ph id="ph1">`__asm`</ph> blocks are the newline character and <ph id="ph2">`__asm`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because a block defined as a macro is one logical line, you must separate each instruction with <ph id="ph1">`__asm`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The braces are essential as well.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you omit them, the compiler can be confused by C or C++ statements on the same line to the right of the macro invocation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Without the closing brace, the compiler cannot tell where assembly code stops, and it sees C or C++ statements after the <ph id="ph1">`__asm`</ph> block as assembly instructions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Assembly-style comments that start with a semicolon (<bpt id="p1">**</bpt>;<ept id="p1">**</ept>) continue to the end of the line.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This causes problems in macros because the compiler ignores everything after the comment, all the way to the end of the logical line.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The same is true of single-line C or C++ comments ( <ph id="ph1">`// comment`</ph>).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To prevent errors, use old-style C comments ( <ph id="ph1">`/* comment */`</ph>) in <ph id="ph2">`__asm`</ph> blocks defined as macros.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`__asm`</ph> block written as a C macro can take arguments.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Unlike an ordinary C macro, however, an <ph id="ph1">`__asm`</ph> macro cannot return a value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>So you cannot use such macros in C or C++ expressions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Be careful not to invoke macros of this type indiscriminately.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For instance, invoking an assembly-language macro in a function declared with the <ph id="ph1">`__fastcall`</ph> convention may cause unexpected results.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Using and Preserving Registers in Inline Assembly<ept id="p1">](../../assembler/inline/using-and-preserving-registers-in-inline-assembly.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Inline Assembler</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>