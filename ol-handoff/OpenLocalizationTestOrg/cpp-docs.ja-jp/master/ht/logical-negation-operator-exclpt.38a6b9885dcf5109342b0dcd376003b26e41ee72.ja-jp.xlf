<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1b7578160194262a6e60ae07940bf1184ad3205</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\logical-negation-operator-exclpt.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee750b7b744152a65df74542626fef443be6ec2f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0715ae4ecfdab9aa448374bfe7b4affd4000592f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Logical Negation Operator: !</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>| Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Logical Negation Operator: !</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The logical negation operator (<bpt id="p1">**</bpt>!<ept id="p1">**</ept>) reverses the meaning of its operand.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The operand must be of arithmetic or pointer type (or an expression that evaluates to arithmetic or pointer type).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The operand is implicitly converted to type <ph id="ph1">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The result is <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the converted operand is <bpt id="p2">**</bpt>false<ept id="p2">**</ept>; the result is <bpt id="p3">**</bpt>false<ept id="p3">**</ept> if the converted operand is <bpt id="p4">**</bpt>true<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The result is of type <ph id="ph1">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For an expression <bpt id="p1">*</bpt>e<ept id="p1">*</ept>, the unary expression <bpt id="p2">**</bpt>!<ept id="p2">**</ept><bpt id="p3">*</bpt>e<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>is equivalent to the expression <bpt id="p1">**</bpt>(<ept id="p1">**</ept><bpt id="p2">*</bpt>e<ept id="p2">*</ept> <ph id="ph1">`==`</ph> 0), except where overloaded operators are involved.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Operator Keyword for !</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>not<ept id="p1">**</ept> operator is the text equivalent of <bpt id="p2">**</bpt>!<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are two ways to access the <bpt id="p1">**</bpt>not<ept id="p1">**</ept> operator in your programs: include the header file <ph id="ph1">`iso646.h`</ph>, or compile with the <bpt id="p2">[</bpt>/Za<ept id="p2">](../build/reference/za-ze-disable-language-extensions.md)</ept> (Disable language extensions) compiler option.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Expressions with Unary Operators</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>C++ Built-in Operators, Precedence and Associativity</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Unary Arithmetic Operators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>