<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d72bf40f1616acf2c266e383fa00d876af335d4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\type-traits-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40883644a91fb3bd59c77c077aecac9f183396e7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d46fce88ef0af59b332e28549f6da066585cd5d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>type_traits<ph id="ph2">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>type_traits<ph id="ph2">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_assignable<ept id="p1">](#is_assignable)</ept></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_copy_assignable<ept id="p1">](#is_copy_assignable)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_copy_constructible<ept id="p1">](#is_copy_constructible)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_default_constructible<ept id="p1">](#is_default_constructible)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_move_assignable<ept id="p1">](#is_move_assignable)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_move_constructible<ept id="p1">](#is_move_constructible)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_nothrow_move_assignable<ept id="p1">](#is_nothrow_move_assignable)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_trivially_copy_assignable<ept id="p1">](#is_trivially_copy_assignable)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_trivially_move_assignable<ept id="p1">](#is_trivially_move_assignable)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_trivially_move_constructible<ept id="p1">](#is_trivially_move_constructible)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_assignable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_assignable</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Tests whether a value of <ph id="ph1">`From`</ph> type can be assigned to a <ph id="ph2">`To`</ph> type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The type of the object that receives the assignment.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>From</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The type of the object that provides the value.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The unevaluated expression <ph id="ph1">`declval&lt;To&gt;() = declval&lt;From&gt;()`</ph> must be well-formed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">`From`</ph> and <ph id="ph2">`To`</ph> must be complete types, <ph id="ph3">`void`</ph>, or arrays of unknown bound.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_copy_assignable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_copy_assignable</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Tests whether type has can be copied on assignment.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The type to query.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An instance of the type predicate holds true if the type <ph id="ph1">`Ty`</ph> is a class that has a copy assignment operator, otherwise it holds false.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Equivalent to is_assignable<ph id="ph1">\&lt;</ph>Ty&amp;, const Ty&amp;&gt;.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_copy_constructible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_copy_constructible</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Tests if type has a copy constructor.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type to query.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An instance of the type predicate holds true if the type <ph id="ph1">`Ty`</ph> is a class that has a copy constructor, otherwise it holds false.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_default_constructible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_default_constructible</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Tests if a type has a default constructor.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The type to query.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An instance of the type predicate holds true if the type <ph id="ph1">`T`</ph> is a class type that has a default constructor, otherwise it holds false.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is equivalent to the predicate <ph id="ph1">`is_constructible&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`T`</ph> must be a complete type, <ph id="ph2">`void`</ph>, or an array of unknown bound.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_move_assignable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_move_assignable</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Tests if the type can be move assigned.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The type to query.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A type is move assignable if an rvalue reference to the type can be assigned to a reference to the type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The type predicate is equivalent to <ph id="ph1">`is_assignable&lt;T&amp;, T&amp;&amp;&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Move assignable types include referenceable scalar types and class types that have either compiler-generated or user-defined move assignment operators.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_move_constructible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_move_constructible</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Tests whether the type has a move constructor.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>T</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The type to be evaluated</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A type predicate that evaluates to true if the type <ph id="ph1">`T`</ph> can be constructed by using a move operation.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This predicate is equivalent to <ph id="ph1">`is_constructible&lt;T, T&amp;&amp;&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_nothrow_move_assignable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_nothrow_move_assignable</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Tests whether type has a <bpt id="p1">**</bpt>nothrow<ept id="p1">**</ept> move assignment operator.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The type to query.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An instance of the type predicate holds true if the type <ph id="ph1">`Ty`</ph> has a nothrow move assignment operator, otherwise it holds false.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_trivially_copy_assignable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_trivially_copy_assignable</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Tests whether the type has a trivial copy assignment operator.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The type to query.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An instance of the type predicate holds true if the type <ph id="ph1">`T`</ph> is a class that has a trivial copy assignment operator, otherwise it holds false.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An assignment constructor for a class <ph id="ph1">`T`</ph> is trivial if it is implicitly provided, the class <ph id="ph2">`T`</ph> has no virtual functions, the class <ph id="ph3">`T`</ph> has no virtual bases, the classes of all the non-static data members of class type have trivial assignment operators, and the classes of all the non-static data members of type array of class have trivial assignment operators.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_trivially_move_assignable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_trivially_move_assignable</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Tests whether the type has a trivial move assignment operator.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The type to query.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>An instance of the type predicate holds true if the type <ph id="ph1">`Ty`</ph> is a class that has a trivial move assignment operator, otherwise it holds false.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A move assignment operator for a class <ph id="ph1">`Ty`</ph> is trivial if:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>it is implicitly provided</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>the class <ph id="ph1">`Ty`</ph> has no virtual functions</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>the class <ph id="ph1">`Ty`</ph> has no virtual bases</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>the classes of all the non-static data members of class type have trivial move assignment operators</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>the classes of all the non-static data members of type array of class have trivial move assignment operators</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_trivially_move_constructible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_trivially_move_constructible</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Tests if type has trivial move constructor.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The type to query.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>An instance of the type predicate holds true if the type <ph id="ph1">`Ty`</ph> is a class that has a trivial move constructor, otherwise it holds false.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A move constructor for a class <ph id="ph1">`Ty`</ph> is trivial if:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>it is implicitly declared</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>its parameter types are equivalent to those of an implicit declaration</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>the class <ph id="ph1">`Ty`</ph> has no virtual functions</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>the class <ph id="ph1">`Ty`</ph> has no virtual bases</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>the class has no volatile non-static data members</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>all the direct bases of the class <ph id="ph1">`Ty`</ph> have trivial move constructors</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>the classes of all the non-static data members of class type have trivial move constructors</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>the classes of all the non-static data members of type array of class have trivial move constructors</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&lt;type_traits&gt;<ept id="p1">](../standard-library/type-traits.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>