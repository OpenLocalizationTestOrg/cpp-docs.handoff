<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ab75402d7d7e27a410c49aaf3a2d8ad359a8ed4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\ctime-s-ctime32-s-ctime64-s-wctime-s-wctime32-s-wctime64-s.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e7d1c92aa485f44343a88938234768890b6b02b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b04aadcfa8d7757c60c6493cdb1fcdc97d02d929</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ctime_s, _ctime32_s, _ctime64_s, _wctime_s, _wctime32_s, _wctime64_s | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ctime_s, _ctime32_s, _ctime64_s, _wctime_s, _wctime32_s, _wctime64_s</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Convert a time value to a string and adjust for local time zone settings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These are versions of <bpt id="p1">[</bpt>ctime, _ctime64, _wctime, _wctime64<ept id="p1">](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md)</ept> with security enhancements as described in <bpt id="p2">[</bpt>Security Features in the CRT<ept id="p2">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Must be large enough to hold 26 characters.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A pointer to the character string result, or <ph id="ph1">`NULL`</ph>if:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>represents a date before midnight, January 1, 1970, UTC.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`_ctime32_s`</ph> or <ph id="ph2">`_wctime32_s`</ph> and <ph id="ph3">`time`</ph> represents a date after 23:59:59 January 18, 2038, UTC.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`_ctime64_s`</ph> or <ph id="ph2">`_wctime64_s`</ph> and <ph id="ph3">`time`</ph> represents a date after 23:59:59, December 31, 3000, UTC.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`_ctime_s`</ph> or <ph id="ph2">`_wctime_s`</ph>, these functions are wrappers to the previous functions.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See the Remarks section.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The size of the buffer.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>[in] t</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Pointer to stored time.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Zero if successful.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If there is a failure due to an invalid parameter, the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, an error code is returned.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Error codes are defined in ERRNO.H; for a listing of these errors, see <bpt id="p1">[</bpt>errno<ept id="p1">](../../c-runtime-library/errno-constants.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The actual error codes thrown for each error condition are shown in the following table.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Error Conditions</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Return</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Value in</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Not modified</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Not <ph id="ph1">`NULL`</ph> (points to valid memory)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Not modified</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Not</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>0&lt; size &lt; 26</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Empty string</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Not</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>&gt;= 26</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>NULL</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Empty string</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Not</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>&gt;= 26</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>&lt; 0</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Empty string</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ctime_s`</ph> function converts a time value stored as a <bpt id="p1">[</bpt>time_t<ept id="p1">](../../c-runtime-library/standard-types.md)</ept> structure into a character string.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`time`</ph> value is usually obtained from a call to <bpt id="p1">[</bpt>time<ept id="p1">](../../c-runtime-library/reference/time-time32-time64.md)</ept>, which returns the number of seconds elapsed since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The return value string contains exactly 26 characters and has the form:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A 24-hour clock is used.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>All fields have a constant width.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The new line character ('\n') and the null character ('\0') occupy the last two positions of the string.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The converted character string is also adjusted according to the local time zone settings.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`time`</ph>, <bpt id="p1">[</bpt>_ftime<ept id="p1">](../../c-runtime-library/reference/ftime-ftime32-ftime64.md)</ept>, and <bpt id="p2">[</bpt>localtime32_s<ept id="p2">](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md)</ept> functions for information about configuring the local time and the <bpt id="p3">[</bpt>_tzset<ept id="p3">](../../c-runtime-library/reference/tzset.md)</ept> function for information about defining the time zone environment and global variables.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_wctime64_s`</ph> are the wide-character version of <ph id="ph2">`_ctime32_s`</ph> and <ph id="ph3">`_ctime64_s`</ph>; returning a pointer to wide-character string.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`_ctime64_s`</ph>, <ph id="ph2">`_wctime32_s`</ph>, and <ph id="ph3">`_wctime64_s`</ph> behave identically to <ph id="ph4">`_ctime32_s`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>is an inline function that evaluates to <ph id="ph1">`_ctime64_s`</ph> and <ph id="ph2">`time_t`</ph> is equivalent to <ph id="ph3">`__time64_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you need to force the compiler to interpret <ph id="ph1">`time_t`</ph> as the old 32-bit <ph id="ph2">`time_t`</ph>, you can define <ph id="ph3">`_USE_32BIT_TIME_T`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Doing this will cause <ph id="ph1">`ctime_s`</ph> to evaluate to <ph id="ph2">`_ctime32_s`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This is not recommended because your application may fail after January 18, 2038, and it is not allowed on 64-bit platforms.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically, eliminating the need to specify a size argument.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Secure Template Overloads<ept id="p1">](../../c-runtime-library/secure-template-overloads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>time.h&gt;</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>time.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>All versions of the <bpt id="p1">[</bpt>C run-time libraries<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Sample Output</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>System::DateTime::GetDateTimeFormats</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>System::DateTime::ToString</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>System::DateTime::ToLongTimeString</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>System::DateTime::ToShortTimeString</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Time Management</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>asctime_s, _wasctime_s</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>_ftime, _ftime32, _ftime64</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>gmtime_s, _gmtime32_s, _gmtime64_s</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>localtime_s, _localtime32_s, _localtime64_s</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>time, _time32, _time64</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>