<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">18e96bf679dd8e33d24f652f7a92fe285b27f254</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\enable-if-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1c3f9f80aae1fd639d9545942695e1684be1069</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba81369175821292769fdd1200aeffc6ec92c104</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>enable_if Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>enable_if Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Conditionally makes an instance of a type for SFINAE overload resolution.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The nested typedef <ph id="ph1">`enable_if&lt;Condition,Type&gt;::type`</ph> exists—and is a synonym for <ph id="ph2">`Type`</ph>—if and only if <ph id="ph3">`Condition`</ph> is <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The value that determines the existence of the resulting type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type to instantiate if <ph id="ph1">`B`</ph> is true.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`B`</ph> is true, <ph id="ph2">`enable_if&lt;B, T&gt;`</ph> has a nested typedef named "type" that's a synonym for <ph id="ph3">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`B`</ph> is false, <ph id="ph2">`enable_if&lt;B, T&gt;`</ph> doesn't have a nested typedef named "type".</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This alias template is provided:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In C++, substitution failure of template parameters is not an error in itself—this is referred to as <bpt id="p1">*</bpt>SFINAE<ept id="p1">*</ept> (substitution failure is not an error).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Typically, <ph id="ph1">`enable_if`</ph> is used to remove candidates from overload resolution—that is, it culls the overload set—so that one definition can be rejected in favor of another.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This conforms to SFINAE behavior.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information about SFINAE, see <bpt id="p1">[</bpt>Substitution failure is not an error<ept id="p1">](http://go.microsoft.com/fwlink/LinkId=394798)</ept> on Wikipedia.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Here are four example scenarios:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Scenario 1: Wrapping the return type of a function:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Scenario 2: Adding a function parameter that has a default argument:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Scenario 3: Adding a template parameter that has a default argument:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Scenario 4: If your function has a non-templated argument, you can wrap its type:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Scenario 1 doesn't work with constructors and conversion operators because they don't have return types.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Scenario 2 leaves the parameter unnamed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You could say <ph id="ph1">`::type Dummy = BAR`</ph>, but the name <ph id="ph2">`Dummy`</ph> is irrelevant, and giving it a name is likely to trigger an "unreferenced parameter" warning.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You have to choose a <ph id="ph1">`FOO`</ph> function parameter type and <ph id="ph2">`BAR`</ph> default argument.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You could say <ph id="ph1">`int`</ph> and <ph id="ph2">`0`</ph>, but then users of your code could accidentally pass to the function an extra integer that would be ignored.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Instead, we recommend that you use <ph id="ph1">`void **`</ph> and either <ph id="ph2">`0`</ph> or <ph id="ph3">`nullptr`</ph> because almost nothing is convertible to <ph id="ph4">`void **`</ph>:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Scenario 2 also works for ordinary constructors.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, it doesn't work for conversion operators because they can't take extra parameters.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It also doesn't work for <bpt id="p1">[</bpt>variadic<ept id="p1">](../cpp/ellipses-and-variadic-templates.md)</ept> constructors because adding extra parameters makes the function parameter pack a non-deduced context and thereby defeats the purpose of <ph id="ph1">`enable_if`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Scenario 3 uses the name <ph id="ph1">`Dummy`</ph>, but it's optional.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Just " <ph id="ph1">`typename = typename`</ph>" would work, but if you think that looks weird, you can use a "dummy" name—just don't use one that might also be used in the function definition.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you don't give a type to <ph id="ph1">`enable_if`</ph>, it defaults to void, and that's perfectly reasonable because you don't care what <ph id="ph2">`Dummy`</ph> is.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This works for everything, including conversion operators and <bpt id="p1">[</bpt>variadic<ept id="p1">](../cpp/ellipses-and-variadic-templates.md)</ept> constructors.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Scenario 4 works in constructors that don't have return types, and thereby solves the wrapping limitation of Scenario 1.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, Scenario 4 is limited to non-templated function arguments, which aren't always available.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(Using Scenario 4 on a templated function argument prevents template argument deduction from working on it.)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>is powerful, but also dangerous if it's misused.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Because its purpose is to make candidates vanish before overload resolution, when it's misused, its effects can be very confusing.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Here are some recommendations:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Do not use <ph id="ph1">`enable_if`</ph> to select between implementations at compile-time.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Don't ever write one <ph id="ph1">`enable_if`</ph> for <ph id="ph2">`CONDITION`</ph> and another for <ph id="ph3">`!CONDITION`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Instead, use a <bpt id="p1">*</bpt>tag dispatch<ept id="p1">*</ept> pattern—for example, an algorithm that selects implementations depending on the strengths of the iterators they're given.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Do not use <ph id="ph1">`enable_if`</ph> to enforce requirements.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you want to validate template parameters, and if the validation fails, cause an error instead of selecting another implementation, use <bpt id="p1">[</bpt>static_assert<ept id="p1">](../cpp/static-assert.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`enable_if`</ph> when you have an overload set that makes otherwise good code ambiguous.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Most often, this occurs in implicitly converting constructors.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This example explains how the STL template function <bpt id="p1">[</bpt>std::make_pair()<ept id="p1">](../standard-library/utility-functions.md#make_pair)</ept> takes advantage of <ph id="ph1">`enable_if`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`make_pair("foo", "bar")`</ph> returns <ph id="ph2">`pair&lt;const char *, const char *&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Overload resolution has to determine which <ph id="ph1">`func()`</ph> you want.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>has an implicitly converting constructor from <ph id="ph1">`pair&lt;X, Y&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This isn't new—it was in C++98.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, in C++98/03, the implicitly converting constructor's signature always exists, even if it's <ph id="ph1">`pair&lt;int, int&gt;(const pair&lt;const char *, const char *&gt;&amp;)`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Overload resolution doesn't care that an attempt to instantiate that constructor explodes horribly because <ph id="ph1">`const char *`</ph> isn't implicitly convertible to <ph id="ph2">`int`</ph>; it's only looking at signatures, before function definitions are instantiated.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Therefore, the example code is ambiguous, because signatures exist to convert <ph id="ph1">`pair&lt;const char *, const char *&gt;`</ph> to both <ph id="ph2">`pair&lt;int, int&gt;`</ph> and <ph id="ph3">`pair&lt;string, string&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>C++11 solved this ambiguity by using <ph id="ph1">`enable_if`</ph> to make sure <ph id="ph2">`pair&lt;A, B&gt;(const pair&lt;X, Y&gt;&amp;)`</ph> exists <bpt id="p1">**</bpt>only<ept id="p1">**</ept> when <ph id="ph3">`const X&amp;`</ph> is implicitly convertible to <ph id="ph4">`A`</ph> and <ph id="ph5">`const Y&amp;`</ph> is implicitly convertible to <ph id="ph6">`B`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This allows overload resolution to determine that <ph id="ph1">`pair&lt;const char *, const char *&gt;`</ph> is not convertible to <ph id="ph2">`pair&lt;int, int&gt;`</ph> and that the overload that takes <ph id="ph3">`pair&lt;string, string&gt;`</ph> is viable.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> &lt;type_traits&gt;</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>&lt;type_traits&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>