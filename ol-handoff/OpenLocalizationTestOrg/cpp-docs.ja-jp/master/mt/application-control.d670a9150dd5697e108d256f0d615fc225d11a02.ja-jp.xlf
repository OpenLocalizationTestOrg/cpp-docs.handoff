<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8453d746972475a177eecf7ac1e4ef9d459737e7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\application-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">274868a1c3f91dc3b71b16c4529b104aa9da16af</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b47aab771817701b9fe981db331f62a92b259825</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Application Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Application Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>OLE requires substantial control over applications and their objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The OLE system DLLs must be able to launch and release applications automatically, coordinate their production and modification of objects, and so on.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The functions in this topic meet those requirements.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In addition to being called by the OLE system DLLs, these functions must sometimes be called by applications as well.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Application Control</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxOleCanExitApp<ept id="p1">](#afxolecanexitapp)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Indicates whether the application can terminate.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxOleGetMessageFilter<ept id="p1">](#afxolegetmessagefilter)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Retrieves the application's current message filter.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxOleGetUserCtrl<ept id="p1">](#afxolegetuserctrl)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Retrieves the current user-control flag.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxOleSetUserCtrl<ept id="p1">](#afxolesetuserctrl)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Sets or clears the user-control flag.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxOleLockApp<ept id="p1">](#afxolelockapp)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Increments the framework's global count of the number of active objects in an application.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxOleUnlockApp<ept id="p1">](#afxoleunlockapp)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Decrements the framework's count of the number of active objects in an application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxOleRegisterServerClass<ept id="p1">](#afxoleregisterserverclass)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Registers a server in the OLE system registry.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxOleSetEditMenu<ept id="p1">](#afxoleseteditmenu)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Implements the user interface for the <bpt id="p1">*</bpt>typename<ept id="p1">*</ept> Object command.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="afxolecanexitapp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  AfxOleCanExitApp</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Indicates whether the application can terminate.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Nonzero if the application can exit; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An application should not terminate if there are outstanding references to its objects.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The global functions <ph id="ph1">`AfxOleLockApp`</ph> and <ph id="ph2">`AfxOleUnlockApp`</ph> increment and decrement, respectively, a counter of references to the application's objects.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The application should not terminate when this counter is nonzero.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the counter is nonzero, the application's main window is hidden (not destroyed) when the user chooses Close from the system menu or Exit from the File menu.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The framework calls this function in <bpt id="p1">**</bpt>CFrameWnd::OnClose<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAutomation#2<ept id="p2">](../../mfc/codesnippet/cpp/application-control_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="afxolegetmessagefilter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  AfxOleGetMessageFilter</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Retrieves the application's current message filter.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A pointer to the current message filter.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Call this function to access the current <ph id="ph1">`COleMessageFilter`</ph>-derived object, just as you would call <ph id="ph2">`AfxGetApp`</ph> to access the current application object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAutomation#3<ept id="p2">](../../mfc/codesnippet/cpp/application-control_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAutomation#4<ept id="p2">](../../mfc/codesnippet/cpp/application-control_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="afxolegetuserctrl"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  AfxOleGetUserCtrl</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Retrieves the current user-control flag.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Nonzero if the user is in control of the application; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The user is in control of the application when the user has explicitly opened or created a new document.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The user is also in control if the application was not launched by the OLE system DLLs — in other words, if the user launched the application with the system shell.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="afxolesetuserctrl"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  AfxOleSetUserCtrl</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Sets or clears the user-control flag, which is explained in the reference for <ph id="ph1">`AfxOleGetUserCtrl`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bUserCtrl<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifies whether the user-control flag is to be set or cleared.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The framework calls this function when the user creates or loads a document, but not when a document is loaded or created through an indirect action such as loading an embedded object from a container application.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Call this function if other actions in your application should put the user in control of the application.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="afxolelockapp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  AfxOleLockApp</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Increments the framework's global count of the number of active objects in the application.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The framework keeps a count of the number of objects active in an application.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AfxOleLockApp`</ph> and <ph id="ph2">`AfxOleUnlockApp`</ph> functions, respectively, increment and decrement this count.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When the user attempts to close an application that has active objects — an application for which the count of active objects is nonzero — the framework hides the application from the user's view instead of completely shutting it down.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AfxOleCanExitApp`</ph> function indicates whether the application can terminate.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`AfxOleLockApp`</ph> from any object that exposes OLE interfaces, if it would be undesirable for that object to be destroyed while still being used by a client application.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Also call <ph id="ph1">`AfxOleUnlockApp`</ph> in the destructor of any object that calls <ph id="ph2">`AfxOleLockApp`</ph> in the constructor.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`COleDocument`</ph> (and derived classes) automatically lock and unlock the application.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAutomation#5<ept id="p2">](../../mfc/codesnippet/cpp/application-control_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="afxoleunlockapp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  AfxOleUnlockApp</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Decrements the framework's count of active objects in the application.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`AfxOleLockApp`</ph> for further information.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When the number of active objects reaches zero, <bpt id="p1">**</bpt>AfxOleOnReleaseAllObjects<ept id="p1">**</ept> is called.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>AfxOleLockApp<ept id="p1">](#afxolelockapp)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="afxoleregisterserverclass"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  AfxOleRegisterServerClass</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This function allows you to register your server in the OLE system registry.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Reference to the server's OLE class ID.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Pointer to a string containing the class name of the server's objects.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpszShortTypeName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Pointer to a string containing the short name of the server's object type, such as "Chart."</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpszLongTypeName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Pointer to a string containing the long name of the server's object type, such as "Microsoft Excel 5.0 Chart."</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A value, taken from the <bpt id="p1">**</bpt>OLE_APPTYPE<ept id="p1">**</ept> enumeration, specifying the type of OLE application.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Possible values are the following:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OAT_INPLACE_SERVER`</ph> Server has full server user-interface.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OAT_SERVER`</ph> Server supports only embedding.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OAT_CONTAINER`</ph> Container supports links to embeddings.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OAT_DISPATCH_OBJECT`</ph> <ph id="ph2">`IDispatch`</ph>-capable object.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Array of pointers to strings representing the keys and values to be added to the OLE system registry if no existing values for the keys are found.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Array of pointers to strings representing the keys and values to be added to the OLE system registry if the registry contains existing values for the given keys.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Nonzero if the server class is successfully registered; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Most applications can use <bpt id="p1">**</bpt>COleTemplateServer::Register<ept id="p1">**</ept> to register the application's document types.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If your application's system-registry format does not fit the typical pattern, you can use <ph id="ph1">`AfxOleRegisterServerClass`</ph> for more control.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The registry consists of a set of keys and values.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`rglpszRegister`</ph> and <ph id="ph2">`rglpszOverwrite`</ph> arguments are arrays of pointers to strings, each consisting of a key and a value separated by a <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> character ( <ph id="ph3">`'\0'`</ph>).</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Each of these strings can have replaceable parameters whose places are marked by the character sequences <ph id="ph1">`%1`</ph> through <ph id="ph2">`%5`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The symbols are filled in as follows:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Symbol</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>%1</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Class ID, formatted as a string</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>%2</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Class name</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>%3</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Path to executable file</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>%4</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Short type name</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>%5</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Long type name</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="afxoleseteditmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  AfxOleSetEditMenu</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Implements the user interface for the <bpt id="p1">*</bpt>typename<ept id="p1">*</ept> Object command.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A pointer to the client OLE item.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A pointer to the menu object to be updated.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>iMenuItem<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The index of the menu item to be updated.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The command ID that corresponds to the primary verb.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nIDVerbMax<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The command ID that corresponds to the last verb.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nIDConvert<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>ID for the Convert menu item.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If the server recognizes only a primary verb, the menu item becomes "verb <bpt id="p1">*</bpt>typename<ept id="p1">*</ept> Object" and the <ph id="ph1">`nIDVerbMin`</ph> command is sent when the user chooses the command.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If the server recognizes several verbs, then the menu item becomes " <bpt id="p1">*</bpt>typename<ept id="p1">*</ept> Object" and a submenu listing all the verbs appears when the user chooses the command.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>When the user chooses a verb from the submenu, <ph id="ph1">`nIDVerbMin`</ph> is sent if the first verb is chosen, <ph id="ph2">`nIDVerbMin`</ph> + 1 is sent if the second verb is chosen, and so forth.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">`COleDocument`</ph> implementation automatically handles this feature.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You must have the following statement in your client's application resource script (.RC) file:</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>#include <ph id="ph1">\&lt;</ph>afxolecl.rc&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Macros and Globals<ept id="p1">](../../mfc/reference/mfc-macros-and-globals.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>