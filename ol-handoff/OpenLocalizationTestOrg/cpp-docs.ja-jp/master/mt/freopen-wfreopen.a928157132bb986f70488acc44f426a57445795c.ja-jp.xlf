<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a6ee499fcf7d731dfd820c80b1511db9c7f2fe6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\freopen-wfreopen.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca96fa34d7db279c0ac613b864da8d17b51214d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7c98e23c5b963b3b0b4ad0ffaee70fa0ef0b6dc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>freopen, _wfreopen | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>freopen, _wfreopen</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Reassigns a file pointer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>More secure versions of these functions are available; see <bpt id="p1">[</bpt>freopen_s, _wfreopen_s<ept id="p1">](../../c-runtime-library/reference/freopen-s-wfreopen-s.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Path of new file.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Type of access permitted.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`FILE`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Each of these functions returns a pointer to the newly opened file.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If an error occurs, the original file is closed and the function returns a <ph id="ph1">`NULL`</ph> pointer value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`path`</ph>, <ph id="ph2">`mode`</ph>, or <ph id="ph3">`stream`</ph> is a null pointer, or if <ph id="ph4">`filename`</ph> is an empty string, these functions invoke the invalid parameter handler, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, these functions set <ph id="ph1">`errno`</ph> to <ph id="ph2">`EINVAL`</ph> and return <ph id="ph3">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> for more information on these, and other, error codes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>More secure versions of these functions exist, see <bpt id="p1">[</bpt>freopen_s, _wfreopen_s<ept id="p1">](../../c-runtime-library/reference/freopen-s-wfreopen-s.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`freopen`</ph> function closes the file currently associated with <ph id="ph2">`stream`</ph> and reassigns <ph id="ph3">`stream`</ph> to the file specified by <ph id="ph4">`path`</ph><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_wfreopen`</ph> is a wide-character version of <ph id="ph2">`_freopen`</ph>; the <ph id="ph3">`path`</ph> and <ph id="ph4">`mode`</ph> arguments to <ph id="ph5">`_wfreopen`</ph> are wide-character strings.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_wfreopen`</ph> and <ph id="ph2">`_freopen`</ph> behave identically otherwise.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`freopen`</ph> is typically used to redirect the pre-opened files <ph id="ph2">`stdin`</ph>, <ph id="ph3">`stdout`</ph>, and <ph id="ph4">`stderr`</ph> to files specified by the user.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The new file associated with <ph id="ph1">`stream`</ph> is opened with <ph id="ph2">`mode`</ph><bpt id="p1">*</bpt>,<ept id="p1">*</ept> which is a character string specifying the type of access requested for the file, as follows:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Opens for reading.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the file does not exist or cannot be found, the <ph id="ph1">`freopen`</ph> call fails.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Opens an empty file for writing.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the given file exists, its contents are destroyed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Opens for writing at the end of the file (appending) without removing the EOF marker before writing new data to the file; creates the file first if it does not exist.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Opens for both reading and writing.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>(The file must exist.)</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Opens an empty file for both reading and writing.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the given file exists, its contents are destroyed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Opens for reading and appending; the appending operation includes the removal of the EOF marker before new data is written to the file and the EOF marker is restored after writing is complete; creates the file first if it does not exist.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`"w"`</ph> and <ph id="ph2">`"w+"`</ph> types with care, as they can destroy existing files.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When a file is opened with the <ph id="ph1">`"a"`</ph> or <ph id="ph2">`"a+"`</ph> access type, all write operations take place at the end of the file.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Although the file pointer can be repositioned using <ph id="ph1">`fseek`</ph> or <ph id="ph2">`rewind`</ph>, the file pointer is always moved back to the end of the file before any write operation is carried out.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Thus, existing data cannot be overwritten.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`"a"`</ph> mode does not remove the EOF marker before appending to the file.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>After appending has occurred, the MS-DOS TYPE command only shows data up to the original EOF marker and not any data appended to the file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`"a+"`</ph> mode does remove the EOF marker before appending to the file.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>After appending, the MS-DOS TYPE command shows all data in the file.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`"a+"`</ph> mode is required for appending to a stream file that is terminated with the CTRL+Z EOF marker.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`"r+"`</ph>, <ph id="ph2">`"w+"`</ph>, or <ph id="ph3">`"a+"`</ph> access type is specified, both reading and writing are allowed (the file is said to be open for "update").</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, when you switch between reading and writing, there must be an intervening <bpt id="p1">[</bpt>fsetpos<ept id="p1">](../../c-runtime-library/reference/fsetpos.md)</ept>, <bpt id="p2">[</bpt>fseek<ept id="p2">](../../c-runtime-library/reference/fseek-fseeki64.md)</ept>, or <bpt id="p3">[</bpt>rewind<ept id="p3">](../../c-runtime-library/reference/rewind.md)</ept> operation.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The current position can be specified for the <ph id="ph1">`fsetpos`</ph> or <ph id="ph2">`fseek`</ph> operation, if desired.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In addition to the above values, one of the following characters may be included in the <ph id="ph1">`mode`</ph> string to specify the translation mode for new lines.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Open in text (translated) mode; carriage return–linefeed (CR-LF) combinations are translated into single linefeed (LF) characters on input; LF characters are translated to CR-LF combinations on output.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Also, CTRL+Z is interpreted as an end-of-file character on input.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In files opened for reading or for writing and reading with <ph id="ph1">`"a+"`</ph>, the run-time library checks for a CTRL+Z at the end of the file and removes it, if possible.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This is done because using <ph id="ph1">`fseek`</ph> and <ph id="ph2">`ftell`</ph> to move within a file may cause <ph id="ph3">`fseek`</ph> to behave improperly near the end of the file.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`t`</ph> option is a Microsoft extension that should not be used where ANSI portability is desired.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Open in binary (untranslated) mode; the above translations are suppressed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`t`</ph> or <ph id="ph2">`b`</ph> is not given in <ph id="ph3">`mode`</ph>, the default translation mode is defined by the global variable <bpt id="p1">[</bpt>_fmode<ept id="p1">](../../c-runtime-library/fmode.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`t`</ph> or <ph id="ph2">`b`</ph> is prefixed to the argument, the function fails and returns <ph id="ph3">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For a discussion of text and binary modes, see <bpt id="p1">[</bpt>Text and Binary Mode File I/O<ept id="p1">](../../c-runtime-library/text-and-binary-mode-file-i-o.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>stdio.h&gt;</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>stdio.h&gt; or <ph id="ph2">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The console is not supported in <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The standard stream handles that are associated with the console—<ph id="ph1">`stdin`</ph>, <ph id="ph2">`stdout`</ph>, and <ph id="ph3">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id="ph4">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.File.Open%2A&gt;</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.%23ctor%2A&gt;</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Stream I/O<ept id="p1">](../../c-runtime-library/stream-i-o.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>fclose, _fcloseall<ept id="p1">](../../c-runtime-library/reference/fclose-fcloseall.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_fdopen, _wfdopen<ept id="p1">](../../c-runtime-library/reference/fdopen-wfdopen.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_fileno<ept id="p1">](../../c-runtime-library/reference/fileno.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>fopen, _wfopen<ept id="p1">](../../c-runtime-library/reference/fopen-wfopen.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_open, _wopen<ept id="p1">](../../c-runtime-library/reference/open-wopen.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_setmode<ept id="p1">](../../c-runtime-library/reference/setmode.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>