<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f6f64331b8a51dd01a4dbff6e6c4a601bdf5daf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\crtmemdumpallobjectssince.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82a7ab1358f8d3c04b27058fa4ed79239960cdfd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82294b7bddbb74a572fb9061796f783934b70a26</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_CrtMemDumpAllObjectsSince | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_CrtMemDumpAllObjectsSince</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Dumps information about objects in the heap from the start of program execution or from a specified heap state (debug version only).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Pointer to the heap state to begin dumping from or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_CrtMemDumpAllObjectsSince`</ph> function dumps the debug header information of objects allocated in the heap in a user-readable form.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The dump information can be used by the application to track allocations and detect memory problems.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">[</bpt>_DEBUG<ept id="p1">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id="ph1">`_CrtMemDumpAllObjectsSince`</ph> are removed during preprocessing.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_CrtMemDumpAllObjectsSince`</ph> uses the value of the <ph id="ph2">`state`</ph> parameter to determine where to initiate the dump operation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To begin dumping from a specified heap state, the <ph id="ph1">`state`</ph> parameter must be a pointer to a <bpt id="p1">**</bpt>_CrtMemState<ept id="p1">**</ept> structure that has been filled in by <bpt id="p2">[</bpt>_CrtMemCheckpoint<ept id="p2">](../../c-runtime-library/reference/crtmemcheckpoint.md)</ept> before <ph id="ph2">`_CrtMemDumpAllObjectsSince`</ph> was called.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`state`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the function begins the dump from the start of program execution.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the application has installed a dump hook function by calling <bpt id="p1">[</bpt>_CrtSetDumpClient<ept id="p1">](../../c-runtime-library/reference/crtsetdumpclient.md)</ept>, then every time <ph id="ph1">`_CrtMemDumpAllObjectsSince`</ph> dumps information about a <ph id="ph2">`_CLIENT_BLOCK`</ph> type of block, it calls the application-supplied dump function as well.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>By default, internal C run-time blocks (<ph id="ph1">`_CRT_BLOCK`</ph>) are not included in memory dump operations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>_CrtSetDbgFlag<ept id="p1">](../../c-runtime-library/reference/crtsetdbgflag.md)</ept> function can be used to turn on the <ph id="ph1">`_CRTDBG_CHECK_CRT_DF`</ph> bit of <bpt id="p2">**</bpt>_crtDbgFlag<ept id="p2">**</ept> to include these blocks.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In addition, blocks marked as freed or ignored (<bpt id="p1">**</bpt>_FREE_BLOCK<ept id="p1">**</ept>, <bpt id="p2">**</bpt>_IGNORE_BLOCK<ept id="p2">**</ept>) are not included in the memory dump.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about heap state functions and the <ph id="ph1">`_CrtMemState`</ph> structure, see <bpt id="p1">[</bpt>Heap State Reporting Functions<ept id="p1">](/visualstudio/debugger/crt-debug-heap-details)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <bpt id="p1">[</bpt>CRT Debug Heap Details<ept id="p1">](/visualstudio/debugger/crt-debug-heap-details)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_CrtMemDumpAll-ObjectsSince<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Debug versions of <bpt id="p1">[</bpt>C run-time libraries<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept> only.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For a sample of how to use <ph id="ph1">`_CrtMemDumpAllObjectsSince`</ph>, see <bpt id="p1">[</bpt>crt_dbg2<ept id="p1">](http://msdn.microsoft.com/en-us/21e1346a-6a17-4f57-b275-c76813089167)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debug Routines<ept id="p1">](../../c-runtime-library/debug-routines.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_crtDbgFlag<ept id="p1">](../../c-runtime-library/crtdbgflag.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>