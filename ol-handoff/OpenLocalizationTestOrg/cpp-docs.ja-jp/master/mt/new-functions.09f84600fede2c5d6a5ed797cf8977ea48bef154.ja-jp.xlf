<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e32c8f5892764d2efc955bbf2d7930e0c8d3f3f0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\new-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b28fbe41cbef108211b123a95a519c17e22e0d22</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1dbb9d9ca45bd47a7bd2ad29163a4497d3323478</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>new<ph id="ph2">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>new<ph id="ph2">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>nothrow<ept id="p1">](#nothrow)</ept></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>set_new_handler<ept id="p1">](#set_new_handler)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="nothrow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  nothrow</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Provides an object to be used as an argument for the <ph id="ph1">`nothrow`</ph> versions of <bpt id="p1">**</bpt>new<ept id="p1">**</ept> and <bpt id="p2">**</bpt>delete<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The object is used as a function argument to match the parameter type <bpt id="p1">[</bpt>std::nothrow_t<ept id="p1">](../standard-library/nothrow-t-structure.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>operator new<ept id="p1">](../standard-library/new-operators.md#operator_new)</ept> and <bpt id="p2">[</bpt>operator new&amp;#91;&amp;#93;<ept id="p2">](../standard-library/new-operators.md#operator_new_arr)</ept> for examples of how <ph id="ph1">`std::nothrow_t`</ph> is used as a function parameter.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="set_new_handler"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  set_new_handler</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Installs a user function that is to be called when <ph id="ph1">`operator new`</ph> fails in its attempt to allocate memory.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The new_handler to be installed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>0 on the first call and the previous <ph id="ph1">`new_handler`</ph> on subsequent calls.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The function stores <ph id="ph1">`Pnew`</ph> in a static <bpt id="p1">[</bpt>new handler<ept id="p1">](../standard-library/new-typedefs.md#new_handler)</ept> pointer that it maintains, then returns the value previously stored in the pointer.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The new handler is used by <bpt id="p1">[</bpt>operator new<ept id="p1">](../standard-library/new-operators.md#operator_new)</ept>( <bpt id="p2">**</bpt>size_t<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>new&gt;<ept id="p1">](../standard-library/new.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>