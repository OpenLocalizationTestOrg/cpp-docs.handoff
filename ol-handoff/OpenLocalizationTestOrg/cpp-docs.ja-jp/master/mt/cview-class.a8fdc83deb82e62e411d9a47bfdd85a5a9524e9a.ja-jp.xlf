<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4147b65630542796cbbe96b86d40382b588cbf58</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cview-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">286e66c3b48088953c304b55a9bc5ba9e2ef0fbc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97932fc5c2851fe323e59e98b62d93998a794788</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CView Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CView Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the basic functionality for user-defined view classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Protected Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::CView<ept id="p1">](#cview__cview)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CView`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::DoPreparePrinting<ept id="p1">](#cview__doprepareprinting)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Displays Print dialog box and creates printer device context; call when overriding the <ph id="ph1">`OnPreparePrinting`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::GetDocument<ept id="p1">](#cview__getdocument)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns the document associated with the view.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::IsSelected<ept id="p1">](#cview__isselected)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Tests whether a document item is selected.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Required for OLE support.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnDragEnter<ept id="p1">](#cview__ondragenter)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Called when an item is first dragged into the drag-and-drop region of a view.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnDragLeave<ept id="p1">](#cview__ondragleave)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Called when a dragged item leaves the drag-and-drop region of a view.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnDragOver<ept id="p1">](#cview__ondragover)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Called when an item is dragged over the drag-and-drop region of a view.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnDragScroll<ept id="p1">](#cview__ondragscroll)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Called to determine whether the cursor is dragged into the scroll region of the window.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnDrop<ept id="p1">](#cview__ondrop)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Called when an item has been dropped into the drag-and-drop region of a view, default handler.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnDropEx<ept id="p1">](#cview__ondropex)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Called when an item has been dropped into the drag-and-drop region of a view, primary handler.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnInitialUpdate<ept id="p1">](#cview__oninitialupdate)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Called after a view is first attached to a document.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnPrepareDC<ept id="p1">](#cview__onpreparedc)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Called before the <ph id="ph1">`OnDraw`</ph> member function is called for screen display or the <ph id="ph2">`OnPrint`</ph> member function is called for printing or print preview.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnScroll<ept id="p1">](#cview__onscroll)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Called when OLE items are dragged beyond the borders of the view.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnScrollBy<ept id="p1">](#cview__onscrollby)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Called when a view containing active in-place OLE items is scrolled.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnActivateFrame<ept id="p1">](#cview__onactivateframe)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Called when the frame window containing the view is activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnActivateView<ept id="p1">](#cview__onactivateview)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Called when a view is activated.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnBeginPrinting<ept id="p1">](#cview__onbeginprinting)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Called when a print job begins; override to allocate graphics device interface (GDI) resources.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnDraw<ept id="p1">](#cview__ondraw)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Called to render an image of the document for screen display, printing, or print preview.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Implementation required.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnEndPrinting<ept id="p1">](#cview__onendprinting)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Called when a print job ends; override to deallocate GDI resources.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnEndPrintPreview<ept id="p1">](#cview__onendprintpreview)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Called when preview mode is exited.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnPreparePrinting<ept id="p1">](#cview__onprepareprinting)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Called before a document is printed or previewed; override to initialize Print dialog box.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnPrint<ept id="p1">](#cview__onprint)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Called to print or preview a page of the document.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CView::OnUpdate<ept id="p1">](#cview__onupdate)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Called to notify a view that its document has been modified.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A view is attached to a document and acts as an intermediary between the document and the user: the view renders an image of the document on the screen or printer and interprets user input as operations upon the document.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A view is a child of a frame window.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>More than one view can share a frame window, as in the case of a splitter window.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The relationship between a view class, a frame window class, and a document class is established by a <ph id="ph1">`CDocTemplate`</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When the user opens a new window or splits an existing one, the framework constructs a new view and attaches it to the document.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A view can be attached to only one document, but a document can have multiple views attached to it at once — for example, if the document is displayed in a splitter window or in multiple child windows in a multiple document interface (MDI) application.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Your application can support different types of views for a given document type; for example, a word-processing program might provide both a complete text view of a document and an outline view that shows only the section headings.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>These different types of views can be placed in separate frame windows or in separate panes of a single frame window if you use a splitter window.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A view may be responsible for handling several different types of input, such as keyboard input, mouse input or input via drag-and-drop, as well as commands from menus, toolbars, or scroll bars.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A view receives commands forwarded by its frame window.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the view does not handle a given command, it forwards the command to its associated document.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Like all command targets, a view handles messages via a message map.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The view is responsible for displaying and modifying the document's data but not for storing it.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The document provides the view with the necessary details about its data.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can let the view access the document's data members directly, or you can provide member functions in the document class for the view class to call.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When a document's data changes, the view responsible for the changes typically calls the <bpt id="p1">[</bpt>CDocument::UpdateAllViews<ept id="p1">](../../mfc/reference/cdocument-class.md#cdocument__updateallviews)</ept> function for the document, which notifies all the other views by calling the <ph id="ph1">`OnUpdate`</ph> member function for each.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">`OnUpdate`</ph> invalidates the view's entire client area.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can override it to invalidate only those regions of the client area that map to the modified portions of the document.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`CView`</ph>, derive a class from it and implement the <ph id="ph2">`OnDraw`</ph> member function to perform screen display.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">`OnDraw`</ph> to perform printing and print preview.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The framework handles the print loop for printing and previewing your document.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A view handles scroll-bar messages with the <bpt id="p1">[</bpt>CWnd::OnHScroll<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)</ept> and <bpt id="p2">[</bpt>CWnd::OnVScroll<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__onvscroll)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can implement scroll-bar message handling in these functions, or you can use the <ph id="ph1">`CView`</ph> derived class <bpt id="p1">[</bpt>CScrollView<ept id="p1">](../../mfc/reference/cscrollview-class.md)</ept> to handle scrolling for you.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Besides <ph id="ph1">`CScrollView`</ph>, the Microsoft Foundation Class Library provides nine other classes derived from <ph id="ph2">`CView`</ph>:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCtrlView<ept id="p1">](../../mfc/reference/cctrlview-class.md)</ept>, a view that allows usage of document - view architecture with tree, list, and rich edit controls.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoRecordView<ept id="p1">](../../mfc/reference/cdaorecordview-class.md)</ept>, a view that displays database records in dialog-box controls.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEditView<ept id="p1">](../../mfc/reference/ceditview-class.md)</ept>, a view that provides a simple multiline text editor.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can use a <ph id="ph1">`CEditView`</ph> object as a control in a dialog box as well as a view on a document.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CFormView<ept id="p1">](../../mfc/reference/cformview-class.md)</ept>, a scrollable view that contains dialog-box controls and is based on a dialog template resource.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListView<ept id="p1">](../../mfc/reference/clistview-class.md)</ept>, a view that allows usage of document - view architecture with list controls.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CRecordView<ept id="p1">](../../mfc/reference/crecordview-class.md)</ept>, a view that displays database records in dialog-box controls.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CRichEditView<ept id="p1">](../../mfc/reference/cricheditview-class.md)</ept>, a view that allows usage of document - view architecture with rich edit controls.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CScrollView<ept id="p1">](../../mfc/reference/cscrollview-class.md)</ept>, a view that automatically provides scrolling support.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CTreeView<ept id="p1">](../../mfc/reference/ctreeview-class.md)</ept>, a view that allows usage of document - view architecture with tree controls.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CView`</ph> class also has a derived implementation class named <bpt id="p1">**</bpt>CPreviewView<ept id="p1">**</ept>, which is used by the framework to perform print previewing.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This class provides support for the features unique to the print-preview window, such as a toolbar, single- or double-page preview, and zooming, that is, enlarging the previewed image.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You don't need to call or override any of <bpt id="p1">**</bpt>CPreviewView<ept id="p1">**</ept>'s member functions unless you want to implement your own interface for print preview (for example, if you want to support editing in print preview mode).</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CView`</ph>, see <bpt id="p1">[</bpt>Document/View Architecture<ept id="p1">](../../mfc/document-view-architecture.md)</ept> and <bpt id="p2">[</bpt>Printing<ept id="p2">](../../mfc/printing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In addition, see <bpt id="p1">[</bpt>Technical Note 30<ept id="p1">](../../mfc/tn030-customizing-printing-and-print-preview.md)</ept> for more details on customizing print preview.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__cview"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::CView</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CView`</ph> object.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The framework calls the constructor when a new frame window is created or a window is split.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Override the <bpt id="p1">[</bpt>OnInitialUpdate<ept id="p1">](#cview__oninitialupdate)</ept> member function to initialize the view after the document is attached.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__doprepareprinting"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::DoPreparePrinting</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Call this function from your override of <bpt id="p1">[</bpt>OnPreparePrinting<ept id="p1">](#cview__onprepareprinting)</ept> to invoke the Print dialog box and create a printer device context.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../../mfc/reference/cprintinfo-structure.md)</ept> structure that describes the current print job.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Nonzero if printing or print preview can begin; 0 if the operation has been canceled.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This function's behavior depends on whether it is being called for printing or print preview (specified by the <bpt id="p1">**</bpt>m_bPreview<ept id="p1">**</ept> member of the <ph id="ph1">`pInfo`</ph> parameter).</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If a file is being printed, this function invokes the Print dialog box, using the values in the <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../../mfc/reference/cprintinfo-structure.md)</ept> structure that <ph id="ph1">`pInfo`</ph> points to; after the user has closed the dialog box, the function creates a printer device context based on settings the user specified in the dialog box and returns this device context through the <ph id="ph2">`pInfo`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This device context is used to print the document.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If a file is being previewed, this function creates a printer device context using the current printer settings; this device context is used for simulating the printer during preview.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__getdocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::GetDocument</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Call this function to get a pointer to the view's document.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>CDocument<ept id="p1">](../../mfc/reference/cdocument-class.md)</ept> object associated with the view.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the view is not attached to a document.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This allows you to call the document's member functions.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__isselected"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::IsSelected</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Called by the framework to check whether the specified document item is selected.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Points to the document item being tested.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Nonzero if the specified document item is selected; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The default implementation of this function returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Override this function if you are implementing selection using <bpt id="p1">[</bpt>CDocItem<ept id="p1">](../../mfc/reference/cdocitem-class.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>You must override this function if your view contains OLE items.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__onactivateframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnActivateFrame</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Called by the framework when the frame window containing the view is activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Specifies whether the frame window is being activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>It can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WA_INACTIVE<ept id="p1">**</ept> The frame window is being deactivated.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WA_ACTIVE<ept id="p1">**</ept> The frame window is being activated through some method other than a mouse click (for example, by use of the keyboard interface to select the window).</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WA_CLICKACTIVE<ept id="p1">**</ept> The frame window is being activated by a mouse click</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Pointer to the frame window that is to be activated.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Override this member function if you want to perform special processing when the frame window associated with the view is activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>CFormView<ept id="p1">](../../mfc/reference/cformview-class.md)</ept> performs this override when it saves and restores the control that has focus.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__onactivateview"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnActivateView</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Called by the framework when a view is activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Indicates whether the view is being activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Points to the view object that is being activated.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Points to the view object that is being deactivated.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The default implementation of this function sets the focus to the view being activated.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Override this function if you want to perform special processing when a view is activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For example, if you want to provide special visual cues that distinguish the active view from the inactive views, you would examine the <ph id="ph1">`bActivate`</ph> parameter and update the view's appearance accordingly.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pActivateView`</ph> and <ph id="ph2">`pDeactiveView`</ph> parameters point to the same view if the application's main frame window is activated with no change in the active view — for example, if the focus is being transferred from another application to this one, rather than from one view to another within the application or when switching amongst MDI child windows.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This allows a view to re-realize its palette, if needed.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>These parameters differ when <bpt id="p1">[</bpt>CFrameWnd::SetActiveView<ept id="p1">](../../mfc/reference/cframewnd-class.md#cframewnd__setactiveview)</ept> is called with a view that is different from what <bpt id="p2">[</bpt>CFrameWnd::GetActiveView<ept id="p2">](../../mfc/reference/cframewnd-class.md#cframewnd__getactiveview)</ept> would return.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This happens most often with splitter windows.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__onbeginprinting"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnBeginPrinting</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Called by the framework at the beginning of a print or print preview job, after <ph id="ph1">`OnPreparePrinting`</ph> has been called.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Points to the printer device context.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../../mfc/reference/cprintinfo-structure.md)</ept> structure that describes the current print job.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The default implementation of this function does nothing.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Override this function to allocate any GDI resources, such as pens or fonts, needed specifically for printing.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Select the GDI objects into the device context from within the <bpt id="p1">[</bpt>OnPrint<ept id="p1">](#cview__onprint)</ept> member function for each page that uses them.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If you are using the same view object to perform both screen display and printing, use separate variables for the GDI resources needed for each display; this allows you to update the screen during printing.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>You can also use this function to perform initializations that depend on properties of the printer device context.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For example, the number of pages needed to print the document may depend on settings that the user specified from the Print dialog box (such as page length).</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>In such a situation, you cannot specify the document length in the <bpt id="p1">[</bpt>OnPreparePrinting<ept id="p1">](#cview__onprepareprinting)</ept> member function, where you would normally do so; you must wait until the printer device context has been created based on the dialog box settings.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>OnBeginPrinting<ept id="p1">](#cview__onbeginprinting)</ept> is the first overridable function that gives you access to the <bpt id="p2">[</bpt>CDC<ept id="p2">](../../mfc/reference/cdc-class.md)</ept> object representing the printer device context, so you can set the document length from this function.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Note that if the document length is not specified by this time, a scroll bar is not displayed during print preview.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__ondragenter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnDragEnter</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Called by the framework when the mouse first enters the non-scrolling region of the drop target window.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>COleDataObject<ept id="p1">](../../mfc/reference/coledataobject-class.md)</ept> being dragged into the drop area of the view.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Contains the state of the modifier keys.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>This is a combination of any number of the following: <bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept>, <bpt id="p2">**</bpt>MK_SHIFT<ept id="p2">**</ept>, <bpt id="p3">**</bpt>MK_ALT<ept id="p3">**</ept>, <bpt id="p4">**</bpt>MK_LBUTTON<ept id="p4">**</ept>, <bpt id="p5">**</bpt>MK_MBUTTON<ept id="p5">**</ept>, and <bpt id="p6">**</bpt>MK_RBUTTON<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The current mouse position relative to the client area of the view.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A value from the <ph id="ph1">`DROPEFFECT`</ph> enumerated type, which indicates the type of drop that would occur if the user dropped the object at this position.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The type of drop usually depends on the current key state indicated by <ph id="ph1">`dwKeyState`</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A standard mapping of keystates to <ph id="ph1">`DROPEFFECT`</ph> values is:</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_NONE`</ph> The data object cannot be dropped in this window.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_LINK`</ph> for <bpt id="p1">**</bpt>MK_CONTROL &amp;#124; MK_SHIFT<ept id="p1">**</ept> Creates a linkage between the object and its server.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_COPY`</ph> for <bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Creates a copy of the dropped object.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_MOVE`</ph> for <bpt id="p1">**</bpt>MK_ALT<ept id="p1">**</ept> Creates a copy of the dropped object and delete the original object.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>This is typically the default drop effect, when the view can accept this data object.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>For more information, see the MFC Advanced Concepts sample <bpt id="p1">[</bpt>OCLIENT<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Default implementation is to do nothing and return <ph id="ph1">`DROPEFFECT_NONE`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Override this function to prepare for future calls to the <bpt id="p1">[</bpt>OnDragOver<ept id="p1">](#cview__ondragover)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Any data required from the data object should be retrieved at this time for later use in the <ph id="ph1">`OnDragOver`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The view should also be updated at this time to give the user visual feedback.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Drag and Drop: Implementing a Drop Target<ept id="p1">](../../mfc/drag-and-drop-implementing-a-drop-target.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__ondragleave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnDragLeave</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Called by the framework during a drag operation when the mouse is moved out of the valid drop area for that window.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Override this function if the current view needs to clean up any actions taken during <bpt id="p1">[</bpt>OnDragEnter<ept id="p1">](#cview__ondragenter)</ept> or <bpt id="p2">[</bpt>OnDragOver<ept id="p2">](#cview__ondragover)</ept> calls, such as removing any visual user feedback while the object was dragged and dropped.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__ondragover"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnDragOver</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Called by the framework during a drag operation when the mouse is moved over the drop target window.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>COleDataObject<ept id="p1">](../../mfc/reference/coledataobject-class.md)</ept> being dragged over the drop target.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Contains the state of the modifier keys.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>This is a combination of any number of the following: <bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept>, <bpt id="p2">**</bpt>MK_SHIFT<ept id="p2">**</ept>, <bpt id="p3">**</bpt>MK_ALT<ept id="p3">**</ept>, <bpt id="p4">**</bpt>MK_LBUTTON<ept id="p4">**</ept>, <bpt id="p5">**</bpt>MK_MBUTTON<ept id="p5">**</ept>, and <bpt id="p6">**</bpt>MK_RBUTTON<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The current mouse position relative to the view client area.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>A value from the <ph id="ph1">`DROPEFFECT`</ph> enumerated type, which indicates the type of drop that would occur if the user dropped the object at this position.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The type of drop often depends on the current key state as indicated by <ph id="ph1">`dwKeyState`</ph>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>A standard mapping of keystates to <ph id="ph1">`DROPEFFECT`</ph> values is:</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_NONE`</ph> The data object cannot be dropped in this window.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_LINK`</ph> for <bpt id="p1">**</bpt>MK_CONTROL &amp;#124; MK_SHIFT<ept id="p1">**</ept> Creates a linkage between the object and its server.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_COPY`</ph> for <bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Creates a copy of the dropped object.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_MOVE`</ph> for <bpt id="p1">**</bpt>MK_ALT<ept id="p1">**</ept> Creates a copy of the dropped object and delete the original object.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>This is typically the default drop effect, when the view can accept the data object.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>For more information, see the MFC Advanced Concepts sample <bpt id="p1">[</bpt>OCLIENT<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The default implementation is to do nothing and return <ph id="ph1">`DROPEFFECT_NONE`</ph>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Override this function to give the user visual feedback during the drag operation.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Since this function is called continuously, any code contained within it should be optimized as much as possible.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Drag and Drop: Implementing a Drop Target<ept id="p1">](../../mfc/drag-and-drop-implementing-a-drop-target.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__ondragscroll"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnDragScroll</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Called by the framework before calling <bpt id="p1">[</bpt>OnDragEnter<ept id="p1">](#cview__ondragenter)</ept> or <bpt id="p2">[</bpt>OnDragOver<ept id="p2">](#cview__ondragover)</ept> to determine whether the point is in the scrolling region.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Contains the state of the modifier keys.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This is a combination of any number of the following: <bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept>, <bpt id="p2">**</bpt>MK_SHIFT<ept id="p2">**</ept>, <bpt id="p3">**</bpt>MK_ALT<ept id="p3">**</ept>, <bpt id="p4">**</bpt>MK_LBUTTON<ept id="p4">**</ept>, <bpt id="p5">**</bpt>MK_MBUTTON<ept id="p5">**</ept>, and <bpt id="p6">**</bpt>MK_RBUTTON<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Contains the location of the cursor, in pixels, relative to the screen.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A value from the <ph id="ph1">`DROPEFFECT`</ph> enumerated type, which indicates the type of drop that would occur if the user dropped the object at this position.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The type of drop usually depends on the current key state indicated by <ph id="ph1">`dwKeyState`</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A standard mapping of keystates to <ph id="ph1">`DROPEFFECT`</ph> values is:</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_NONE`</ph> The data object cannot be dropped in this window.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_LINK`</ph> for <bpt id="p1">**</bpt>MK_CONTROL &amp;#124; MK_SHIFT<ept id="p1">**</ept> Creates a linkage between the object and its server.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_COPY`</ph> for <bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Creates a copy of the dropped object.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_MOVE`</ph> for <bpt id="p1">**</bpt>MK_ALT<ept id="p1">**</ept> Creates a copy of the dropped object and delete the original object.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_SCROLL`</ph> Indicates that a drag scroll operation is about to occur or is occurring in the target view.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>For more information, see the MFC Advanced Concepts sample <bpt id="p1">[</bpt>OCLIENT<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Override this function when you want to provide special behavior for this event.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The default implementation automatically scrolls windows when the cursor is dragged into the default scroll region inside the border of each window.For more information, see the article <bpt id="p1">[</bpt>Drag and Drop: Implementing a Drop Target<ept id="p1">](../../mfc/drag-and-drop-implementing-a-drop-target.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__ondraw"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnDraw</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Called by the framework to render an image of the document.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Points to the device context to be used for rendering an image of the document.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The framework calls this function to perform screen display, printing, and print preview, and it passes a different device context in each case.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>There is no default implementation.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>You must override this function to display your view of the document.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>You can make graphic device interface (GDI) calls using the <bpt id="p1">[</bpt>CDC<ept id="p1">](../../mfc/reference/cdc-class.md)</ept> object pointed to by the <ph id="ph1">`pDC`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>You can select GDI resources, such as pens or fonts, into the device context before drawing and then deselect them afterwards.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Often your drawing code can be device-independent; that is, it doesn't require information about what type of device is displaying the image.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>To optimize drawing, call the <bpt id="p1">[</bpt>RectVisible<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__rectvisible)</ept> member function of the device context to find out whether a given rectangle will be drawn.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>If you need to distinguish between normal screen display and printing, call the <bpt id="p1">[</bpt>IsPrinting<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__isprinting)</ept> member function of the device context.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__ondrop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnDrop</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user releases a data object over a valid drop target.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>COleDataObject<ept id="p1">](../../mfc/reference/coledataobject-class.md)</ept> that is dropped into the drop target.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The drop effect that the user has requested.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_COPY`</ph> Creates a copy of the data object being dropped.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_MOVE`</ph> Moves the data object to the current mouse location.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_LINK`</ph> Creates a link between a data object and its server.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The current mouse position relative to the view client area.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Nonzero if the drop was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing and returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Override this function to implement the effect of an OLE drop into the client area of the view.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The data object can be examined via <ph id="ph1">`pDataObject`</ph> for Clipboard data formats and data dropped at the specified point.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The framework does not call this function if there is an override to <bpt id="p1">[</bpt>OnDropEx<ept id="p1">](#cview__ondropex)</ept> in this view class.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__ondropex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnDropEx</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user releases a data object over a valid drop target.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>COleDataObject<ept id="p1">](../../mfc/reference/coledataobject-class.md)</ept> that is dropped into the drop target.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The effect that the user chose for the default drop operation based on the current key state.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>It may be <ph id="ph1">`DROPEFFECT_NONE`</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Drop effects are discussed in the Remarks section.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>A list of the drop effects that the drop source supports.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Drop effect values can be combined using the bitwise OR ( <bpt id="p1">**</bpt>&amp;#124;<ept id="p1">**</ept>) operation.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Drop effects are discussed in the Remarks section.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The current mouse position relative to the view client area.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The drop effect that resulted from the drop attempt at the location specified by <ph id="ph1">`point`</ph>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>This must be one of the values indicated by <bpt id="p1">*</bpt>dropEffectList<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Drop effects are discussed in the Remarks section.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The default implementation is to do nothing and return a dummy value ( -1 ) to indicate that the framework should call the <bpt id="p1">[</bpt>OnDrop<ept id="p1">](#cview__ondrop)</ept> handler.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Override this function to implement the effect of an right mouse-button drag and drop.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Right mouse-button drag and drop typically displays a menu of choices when the right mouse-button is released.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Your override of <ph id="ph1">`OnDropEx`</ph> should query for the right mouse-button.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>GetKeyState<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646301)</ept> or store the right mouse-button state from your <bpt id="p2">[</bpt>OnDragEnter<ept id="p2">](#cview__ondragenter)</ept> handler.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>If the right mouse-button is down, your override should display a popup menu which offers the drop effects support by the drop source.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Examine <ph id="ph1">`dropList`</ph> to determine the drop effects supported by the drop source.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Enable only these actions on the popup menu.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>SetMenuDefaultItem<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647996)</ept> to set the default action based on <ph id="ph1">`dropDefault`</ph>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Finally, take the action indicated by the user selection from the popup menu.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>If the right mouse-button is not down, your override should process this as a standard drop request.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Use the drop effect specified in <ph id="ph1">`dropDefault`</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Alternately, your override can return the dummy value ( -1 ) to indicate that <ph id="ph1">`OnDrop`</ph> will handle this drop operation.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`pDataObject`</ph> to examine the <ph id="ph2">`COleDataObject`</ph> for Clipboard data format and data dropped at the specified point.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Drop effects describe the action associated with a drop operation.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>See the following list of drop effects:</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_NONE`</ph> A drop would not be allowed.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_COPY`</ph> A copy operation would be performed.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_MOVE`</ph> A move operation would be performed.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_LINK`</ph> A link from the dropped data to the original data would be established.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DROPEFFECT_SCROLL`</ph> Indicates that a drag scroll operation is about to occur or is occurring in the target.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>For more information on setting the default menu command, see <bpt id="p1">[</bpt>SetMenuDefaultItem<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647996)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> and <bpt id="p2">[</bpt>CMenu::GetSafeHmenu<ept id="p2">](../../mfc/reference/cmenu-class.md#cmenu__getsafehmenu)</ept> in this volume.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__onendprinting"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnEndPrinting</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Called by the framework after a document has been printed or previewed.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Points to the printer device context.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../../mfc/reference/cprintinfo-structure.md)</ept> structure that describes the current print job.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The default implementation of this function does nothing.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Override this function to free any GDI resources you allocated in the <bpt id="p1">[</bpt>OnBeginPrinting<ept id="p1">](#cview__onbeginprinting)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__onendprintpreview"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnEndPrintPreview</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user exits print preview mode.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Points to the printer device context.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../../mfc/reference/cprintinfo-structure.md)</ept> structure that describes the current print job.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Specifies the point on the page that was last displayed in preview mode.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Points to the view object used for previewing.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The default implementation of this function calls the <bpt id="p1">[</bpt>OnEndPrinting<ept id="p1">](#cview__onendprinting)</ept> member function and restores the main frame window to the state it was in before print preview began.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Override this function to perform special processing when preview mode is terminated.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>For example, if you want to maintain the user's position in the document when switching from preview mode to normal display mode, you can scroll to the position described by the <ph id="ph1">`point`</ph> parameter and the <ph id="ph2">`m_nCurPage`</ph> member of the <ph id="ph3">`CPrintInfo`</ph> structure that the <ph id="ph4">`pInfo`</ph> parameter points to.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Always call the base class version of <ph id="ph1">`OnEndPrintPreview`</ph> from your override, typically at the end of the function.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__oninitialupdate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnInitialUpdate</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Called by the framework after the view is first attached to the document, but before the view is initially displayed.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The default implementation of this function calls the <bpt id="p1">[</bpt>OnUpdate<ept id="p1">](#cview__onupdate)</ept> member function with no hint information (that is, using the default values of 0 for the <ph id="ph1">`lHint`</ph> parameter and <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> for the <ph id="ph2">`pHint`</ph> parameter).</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Override this function to perform any one-time initialization that requires information about the document.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>For example, if your application has fixed-sized documents, you can use this function to initialize a view's scrolling limits based on the document size.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>If your application supports variable-sized documents, use <bpt id="p1">[</bpt>OnUpdate<ept id="p1">](#cview__onupdate)</ept> to update the scrolling limits every time the document changes.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__onpreparedc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnPrepareDC</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Called by the framework before the <bpt id="p1">[</bpt>OnDraw<ept id="p1">](#cview__ondraw)</ept> member function is called for screen display and before the <bpt id="p2">[</bpt>OnPrint<ept id="p2">](#cview__onprint)</ept> member function is called for each page during printing or print preview.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Points to the device context to be used for rendering an image of the document.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../../mfc/reference/cprintinfo-structure.md)</ept> structure that describes the current print job if <ph id="ph1">`OnPrepareDC`</ph> is being called for printing or print preview; the <ph id="ph2">`m_nCurPage`</ph> member specifies the page about to be printed.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>This parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if <ph id="ph1">`OnPrepareDC`</ph> is being called for screen display.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The default implementation of this function does nothing if the function is called for screen display.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>However, this function is overridden in derived classes, such as <bpt id="p1">[</bpt>CScrollView<ept id="p1">](../../mfc/reference/cscrollview-class.md)</ept>, to adjust attributes of the device context; consequently, you should always call the base class implementation at the beginning of your override.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>If the function is called for printing, the default implementation examines the page information stored in the <ph id="ph1">`pInfo`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>If the length of the document has not been specified, <ph id="ph1">`OnPrepareDC`</ph> assumes the document to be one page long and stops the print loop after one page has been printed.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The function stops the print loop by setting the <ph id="ph1">`m_bContinuePrinting`</ph> member of the structure to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnPrepareDC`</ph> for any of the following reasons:</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>To adjust attributes of the device context as needed for the specified page.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>For example, if you need to set the mapping mode or other characteristics of the device context, do so in this function.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>To perform print-time pagination.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Normally you specify the length of the document when printing begins, using the <bpt id="p1">[</bpt>OnPreparePrinting<ept id="p1">](#cview__onprepareprinting)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>However, if you don't know in advance how long the document is (for example, when printing an undetermined number of records from a database), override <ph id="ph1">`OnPrepareDC`</ph> to test for the end of the document while it is being printed.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>When there is no more of the document to be printed, set the <ph id="ph1">`m_bContinuePrinting`</ph> member of the <ph id="ph2">`CPrintInfo`</ph> structure to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>To send escape codes to the printer on a page-by-page basis.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>To send escape codes from <ph id="ph1">`OnPrepareDC`</ph>, call the <bpt id="p1">**</bpt>Escape<ept id="p1">**</ept> member function of the <ph id="ph2">`pDC`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Call the base class version of <ph id="ph1">`OnPrepareDC`</ph> at the beginning of your override.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#183<ept id="p2">](../../mfc/codesnippet/cpp/cview-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__onprepareprinting"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnPreparePrinting</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Called by the framework before a document is printed or previewed.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../../mfc/reference/cprintinfo-structure.md)</ept> structure that describes the current print job.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Nonzero to begin printing; 0 if the print job has been canceled.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>You must override this function to enable printing and print preview.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>DoPreparePrinting<ept id="p1">](#cview__doprepareprinting)</ept> member function, passing it the <ph id="ph1">`pInfo`</ph> parameter, and then return its return value; <ph id="ph2">`DoPreparePrinting`</ph> displays the Print dialog box and creates a printer device context.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>If you want to initialize the Print dialog box with values other than the defaults, assign values to the members of <ph id="ph1">`pInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>For example, if you know the length of the document, pass the value to the <bpt id="p1">[</bpt>SetMaxPage<ept id="p1">](../../mfc/reference/cprintinfo-structure.md#cprintinfo__setmaxpage)</ept> member function of <ph id="ph1">`pInfo`</ph> before calling <ph id="ph2">`DoPreparePrinting`</ph>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>This value is displayed in the To: box in the Range portion of the Print dialog box.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DoPreparePrinting`</ph> does not display the Print dialog box for a preview job.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>If you want to bypass the Print dialog box for a print job, check that the <bpt id="p1">**</bpt>m_bPreview<ept id="p1">**</ept> member of <ph id="ph1">`pInfo`</ph> is <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> and then set it to <bpt id="p3">**</bpt>TRUE<ept id="p3">**</ept> before passing it to <ph id="ph2">`DoPreparePrinting`</ph>; reset it to <bpt id="p4">**</bpt>FALSE<ept id="p4">**</ept> afterwards.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>If you need to perform initializations that require access to the <ph id="ph1">`CDC`</ph> object representing the printer device context (for example, if you need to know the page size before specifying the length of the document), override the <ph id="ph2">`OnBeginPrinting`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>If you want to set the value of the <bpt id="p1">**</bpt>m_nNumPreviewPages<ept id="p1">**</ept> or <bpt id="p2">**</bpt>m_strPageDesc<ept id="p2">**</ept> members of the <ph id="ph1">`pInfo`</ph> parameter, do so after calling <ph id="ph2">`DoPreparePrinting`</ph>.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DoPreparePrinting`</ph> member function sets <bpt id="p1">**</bpt>m_nNumPreviewPages<ept id="p1">**</ept> to the value found in the application's .INI file and sets <bpt id="p2">**</bpt>m_strPageDesc<ept id="p2">**</ept> to its default value.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnPreparePrinting`</ph> and call <ph id="ph2">`DoPreparePrinting`</ph> from the override so that the framework will display a Print dialog box and create a printer DC for you.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#184<ept id="p2">](../../mfc/codesnippet/cpp/cview-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>If you know how many pages the document contains, set the maximum page in <ph id="ph1">`OnPreparePrinting`</ph> before calling <ph id="ph2">`DoPreparePrinting`</ph>.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The framework will display the maximum page number in the "to" box of the Print dialog box.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#185<ept id="p2">](../../mfc/codesnippet/cpp/cview-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__onprint"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnPrint</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Called by the framework to print or preview a page of the document.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Points to the printer device context.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CPrintInfo`</ph> structure that describes the current print job.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>For each page being printed, the framework calls this function immediately after calling the <bpt id="p1">[</bpt>OnPrepareDC<ept id="p1">](#cview__onpreparedc)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The page being printed is specified by the <ph id="ph1">`m_nCurPage`</ph> member of the <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../../mfc/reference/cprintinfo-structure.md)</ept> structure that <ph id="ph2">`pInfo`</ph> points to.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The default implementation calls the <bpt id="p1">[</bpt>OnDraw<ept id="p1">](#cview__ondraw)</ept> member function and passes it the printer device context.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Override this function for any of the following reasons:</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>To allow printing of multipage documents.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Render only the portion of the document that corresponds to the page currently being printed.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>If you're using <ph id="ph1">`OnDraw`</ph> to perform the rendering, you can adjust the viewport origin so that only the appropriate portion of the document is printed.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>To make the printed image look different from the screen image (that is, if your application is not WYSIWYG).</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Instead of passing the printer device context to <ph id="ph1">`OnDraw`</ph>, use the device context to render an image using attributes not shown on the screen.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>If you need GDI resources for printing that you don't use for screen display, select them into the device context before drawing and deselect them afterwards.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>These GDI resources should be allocated in <bpt id="p1">[</bpt>OnBeginPrinting<ept id="p1">](#cview__onbeginprinting)</ept> and released in <bpt id="p2">[</bpt>OnEndPrinting<ept id="p2">](#cview__onendprinting)</ept>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>To implement headers or footers.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>You can still use <ph id="ph1">`OnDraw`</ph> to do the rendering by restricting the area that it can print on.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt>m_rectDraw<ept id="p1">**</ept> member of the <ph id="ph1">`pInfo`</ph> parameter describes the printable area of the page in logical units.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Do not call <ph id="ph1">`OnPrepareDC`</ph> in your override of <ph id="ph2">`OnPrint`</ph>; the framework calls <ph id="ph3">`OnPrepareDC`</ph> automatically before calling <ph id="ph4">`OnPrint`</ph>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The following is a skeleton for an overridden <ph id="ph1">`OnPrint`</ph> function:</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#186<ept id="p2">](../../mfc/codesnippet/cpp/cview-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>For another example, see <bpt id="p1">[</bpt>CRichEditView::PrintInsideRect<ept id="p1">](../../mfc/reference/cricheditview-class.md#cricheditview__printinsiderect)</ept>.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__onscroll"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnScroll</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine whether scrolling is possible.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>A scroll-bar code that indicates the user's scrolling request.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>This parameter is composed of two parts: a low-order byte, which determines the type of scrolling occurring horizontally, and a high-order byte, which determines the type of scrolling occurring vertically:</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_BOTTOM<ept id="p1">**</ept> Scrolls to bottom.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_LINEDOWN<ept id="p1">**</ept> Scrolls one line down.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_LINEUP<ept id="p1">**</ept> Scrolls one line up.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_PAGEDOWN<ept id="p1">**</ept> Scrolls one page down.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_PAGEUP<ept id="p1">**</ept> Scrolls one page up.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_THUMBTRACK<ept id="p1">**</ept> Drags scroll box to specified position.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>The current position is specified in <ph id="ph1">`nPos`</ph>.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_TOP<ept id="p1">**</ept> Scrolls to top.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Contains the current scroll-box position if the scroll-bar code is <bpt id="p1">**</bpt>SB_THUMBTRACK<ept id="p1">**</ept>; otherwise it is not used.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Depending on the initial scroll range, <ph id="ph1">`nPos`</ph> may be negative and should be cast to an <ph id="ph2">`int`</ph> if necessary.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Determines whether you should actually do the specified scrolling action.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE,<ept id="p1">**</ept> then scrolling should take place; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, then scrolling should not occur.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bDoScroll`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> and the view was actually scrolled, then return nonzero; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bDoScroll`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, then return the value that you would have returned if <ph id="ph2">`bDoScroll`</ph> were <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>, even though you don't actually do the scrolling.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>In one case this function is called by the framework with <ph id="ph1">`bDoScroll`</ph> set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> when the view receives a scrollbar message.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>In this case, you should actually scroll the view.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>In the other case this function is called with <ph id="ph1">`bDoScroll`</ph> set to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> when an OLE item is initially dragged into the auto-scrolling region of a drop target before scrolling actually takes place.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>In this case, you should not actually scroll the view.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__onscrollby"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnScrollBy</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user views an area beyond the present view of the document, either by dragging an OLE item against the view's current borders or by manipulating the vertical or horizontal scrollbars.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Number of pixels scrolled horizontally and vertically.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Determines whether scrolling of the view occurs.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE,<ept id="p1">**</ept> then scrolling takes place; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, then scrolling does not occur.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Nonzero if the view was able to be scrolled; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>In derived classes this method checks to see whether the view is scrollable in the direction the user requested and then updates the new region if necessary.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>This function is automatically called by <bpt id="p1">[</bpt>CWnd::OnHScroll<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)</ept> and <bpt id="p2">[</bpt>CWnd::OnVScroll<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__onvscroll)</ept> to perform the actual scrolling request.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does not change the view, but if it is not called, the view will not scroll in a <ph id="ph1">`CScrollView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>If the document width or height exceeds 32767 pixels, scrolling past 32767 will fail because <ph id="ph1">`OnScrollBy`</ph> is called with an invalid <ph id="ph2">`sizeScroll`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cview__onupdate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CView::OnUpdate</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Called by the framework after the view's document has been modified; this function is called by <bpt id="p1">[</bpt>CDocument::UpdateAllViews<ept id="p1">](../../mfc/reference/cdocument-class.md#cdocument__updateallviews)</ept> and allows the view to update its display to reflect those modifications.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Points to the view that modified the document, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if all views are to be updated.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Contains information about the modifications.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Points to an object storing information about the modifications.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>It is also called by the default implementation of <bpt id="p1">[</bpt>OnInitialUpdate<ept id="p1">](#cview__oninitialupdate)</ept>.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>The default implementation invalidates the entire client area, marking it for painting when the next <ph id="ph1">`WM_PAINT`</ph> message is received.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Override this function if you want to update only those regions that map to the modified portions of the document.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>To do this you must pass information about the modifications using the hint parameters.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`lHint`</ph>, define special hint values, typically a bitmask or an enumerated type, and have the document pass one of these values.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`pHint`</ph>, derive a hint class from <bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept> and have the document pass a pointer to a hint object; when overriding <ph id="ph2">`OnUpdate`</ph>, use the <bpt id="p2">[</bpt>CObject::IsKindOf<ept id="p2">](../../mfc/reference/cobject-class.md#cobject__iskindof)</ept> member function to determine the run-time type of the hint object.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Typically you should not perform any drawing directly from <ph id="ph1">`OnUpdate`</ph>.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Instead, determine the rectangle describing, in device coordinates, the area that requires updating; pass this rectangle to <bpt id="p1">[</bpt>CWnd::InvalidateRect<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__invalidaterect)</ept>.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>This causes painting to occur the next time a <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message is received.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lHint`</ph> is 0 and <ph id="ph2">`pHint`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the document has sent a generic update notification.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>If a view receives a generic update notification, or if it cannot decode the hints, it should invalidate its entire client area.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFC Sample MDIDOCVW<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWnd Class<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWnd Class<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CFrameWnd Class<ept id="p1">](../../mfc/reference/cframewnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CSplitterWnd Class<ept id="p1">](../../mfc/reference/csplitterwnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDC Class<ept id="p1">](../../mfc/reference/cdc-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDocTemplate Class<ept id="p1">](../../mfc/reference/cdoctemplate-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDocument Class<ept id="p1">](../../mfc/reference/cdocument-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>