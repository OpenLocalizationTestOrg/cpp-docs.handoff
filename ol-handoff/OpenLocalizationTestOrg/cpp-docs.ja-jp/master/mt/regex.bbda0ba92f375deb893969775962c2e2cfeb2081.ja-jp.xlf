<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14b5f8ff3acfe15f6def7ee491304a1b38e81d43</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\regex.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e1057cca910183183d2874bdd1d2c8fa9efb756</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9291c9f31654c1c0c8cee207cec60e052389b4d3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>regex<ph id="ph2">&amp;gt;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>regex<ph id="ph2">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defines a template class to parse <bpt id="p1">[</bpt>Regular Expressions (C++)<ept id="p1">](../standard-library/regular-expressions-cpp.md)</ept>, and several template classes and functions to search text for matches to a regular expression object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To create a regular expression object, use the template class <bpt id="p1">[</bpt>basic_regex Class<ept id="p1">](../standard-library/basic-regex-class.md)</ept> or one of its specializations, <bpt id="p2">[</bpt>regex<ept id="p2">](../standard-library/regex-typedefs.md#regex_typedef)</ept> and <bpt id="p3">[</bpt>wregex<ept id="p3">](../standard-library/regex-typedefs.md#wregex_typedef)</ept>, together with the syntax flags of type <bpt id="p4">[</bpt>regex_constants::syntax_option_type<ept id="p4">](../standard-library/regex-constants-class.md#regex_constants__syntax_option_type)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To search text for matches to a regular expression object, use the template functions <bpt id="p1">[</bpt>regex_match Function<ept id="p1">](../standard-library/regex-functions.md#regex_match_function)</ept> and <bpt id="p2">[</bpt>regex_search Function<ept id="p2">](../standard-library/regex-functions.md#regex_search_function)</ept>, together with the match flags of type <bpt id="p3">[</bpt>regex_constants::match_flag_type<ept id="p3">](../standard-library/regex-constants-class.md#regex_constants__match_flag_type)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These functions return results by using the template class <bpt id="p1">[</bpt>match_results Class<ept id="p1">](../standard-library/match-results-class.md)</ept> and its specializations, <bpt id="p2">[</bpt>cmatch<ept id="p2">](../standard-library/regex-typedefs.md#cmatch_typedef)</ept>, <bpt id="p3">[</bpt>wcmatch<ept id="p3">](../standard-library/regex-typedefs.md#wcmatch_typedef)</ept>, <bpt id="p4">[</bpt>smatch<ept id="p4">](../standard-library/regex-typedefs.md#smatch_typedef)</ept>, and <bpt id="p5">[</bpt>wsmatch<ept id="p5">](../standard-library/regex-typedefs.md#wsmatch_typedef)</ept>, together with the template class <bpt id="p6">[</bpt>sub_match Class<ept id="p6">](../standard-library/sub-match-class.md)</ept> and its specializations, <bpt id="p7">[</bpt>csub_match<ept id="p7">](../standard-library/regex-typedefs.md#csub_match_typedef)</ept>, <bpt id="p8">[</bpt>wcsub_match<ept id="p8">](../standard-library/regex-typedefs.md#wcsub_match_typedef)</ept>, <bpt id="p9">[</bpt>ssub_match<ept id="p9">](../standard-library/regex-typedefs.md#ssub_match_typedef)</ept>, and <bpt id="p10">[</bpt>wssub_match<ept id="p10">](../standard-library/regex-typedefs.md#wssub_match_typedef)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To replace text that matches a regular expression object, use the template function <bpt id="p1">[</bpt>regex_replace Function<ept id="p1">](../standard-library/regex-functions.md#regex_replace_function)</ept>, together with the match flags of type <bpt id="p2">[</bpt>regex_constants::match_flag_type<ept id="p2">](../standard-library/regex-constants-class.md#regex_constants__match_flag_type)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To iterate through multiple matches of a regular expression object, use the template classes <bpt id="p1">[</bpt>regex_iterator Class<ept id="p1">](../standard-library/regex-iterator-class.md)</ept> and <bpt id="p2">[</bpt>regex_token_iterator Class<ept id="p2">](../standard-library/regex-token-iterator-class.md)</ept> or one of their specializations, <bpt id="p3">[</bpt>cregex_iterator<ept id="p3">](../standard-library/regex-typedefs.md#cregex_iterator_typedef)</ept>, <bpt id="p4">[</bpt>sregex_iterator<ept id="p4">](../standard-library/regex-typedefs.md#sregex_iterator_typedef)</ept>, <bpt id="p5">[</bpt>wcregex_iterator<ept id="p5">](../standard-library/regex-typedefs.md#wcregex_iterator_typedef)</ept>, <bpt id="p6">[</bpt>wsregex_iterator<ept id="p6">](../standard-library/regex-typedefs.md#wsregex_iterator_typedef)</ept>, <bpt id="p7">[</bpt>cregex_token_iterator<ept id="p7">](../standard-library/regex-typedefs.md#cregex_token_iterator_typedef)</ept>, <bpt id="p8">[</bpt>sregex_token_iterator<ept id="p8">](../standard-library/regex-typedefs.md#sregex_token_iterator_typedef)</ept>, <bpt id="p9">[</bpt>wcregex_token_iterator<ept id="p9">](../standard-library/regex-typedefs.md#wcregex_token_iterator_typedef)</ept>, or <bpt id="p10">[</bpt>wsregex_token_iterator<ept id="p10">](../standard-library/regex-typedefs.md#wsregex_token_iterator_typedef)</ept>, together with the match flags of type <bpt id="p11">[</bpt>regex_constants::match_flag_type<ept id="p11">](../standard-library/regex-constants-class.md#regex_constants__match_flag_type)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To modify the details of the grammar of regular expressions, write a class that implements the regular expression traits.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>basic_regex<ept id="p1">](../standard-library/basic-regex-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Wraps a regular expression.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>match_results<ept id="p1">](../standard-library/match-results-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Holds a sequence of submatches.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>regex_constants<ept id="p1">](../standard-library/regex-constants-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Holds assorted constants.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>regex_error<ept id="p1">](../standard-library/regex-error-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Reports a bad regular expression.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>regex_iterator<ept id="p1">](../standard-library/regex-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Iterates through match results.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>regex_traits<ept id="p1">](../standard-library/regex-traits-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Describes characteristics of elements for matching.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>regex_traits<ph id="ph1">\&lt;</ph>char&gt;<ept id="p1">](../standard-library/regex-traits-char-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Describes characteristics of <ph id="ph1">`char`</ph> for matching.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>regex_traits&lt;wchar_t&gt;<ept id="p1">](../standard-library/regex-traits-wchar-t-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Describes characteristics of <ph id="ph1">`wchar_t`</ph> for matching.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>regex_token_iterator<ept id="p1">](../standard-library/regex-token-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Iterates through submatches.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>sub_match<ept id="p1">](../standard-library/sub-match-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Describes a submatch.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Type Definitions</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cmatch<ept id="p1">](../standard-library/regex-typedefs.md#cmatch_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`char``match_results`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cregex_iterator<ept id="p1">](../standard-library/regex-typedefs.md#cregex_iterator_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`char``regex_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cregex_token_iterator<ept id="p1">](../standard-library/regex-typedefs.md#cregex_token_iterator_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`char``regex_token_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>csub_match<ept id="p1">](../standard-library/regex-typedefs.md#csub_match_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`char``sub_match`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>regex<ept id="p1">](../standard-library/regex-typedefs.md#regex_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`char``basic_regex`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>smatch<ept id="p1">](../standard-library/regex-typedefs.md#smatch_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`string``match_results`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>sregex_iterator<ept id="p1">](../standard-library/regex-typedefs.md#sregex_iterator_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`string``regex_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>sregex_token_iterator<ept id="p1">](../standard-library/regex-typedefs.md#sregex_token_iterator_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`string``regex_token_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ssub_match<ept id="p1">](../standard-library/regex-typedefs.md#ssub_match_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`string``sub_match`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wcmatch<ept id="p1">](../standard-library/regex-typedefs.md#wcmatch_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`wchar_t``match_results`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wcregex_iterator<ept id="p1">](../standard-library/regex-typedefs.md#wcregex_iterator_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`wchar_t``regex_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wcregex_token_iterator<ept id="p1">](../standard-library/regex-typedefs.md#wcregex_token_iterator_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`wchar_t``regex_token_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wcsub_match<ept id="p1">](../standard-library/regex-typedefs.md#wcsub_match_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`wchar_t``sub_match`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wregex<ept id="p1">](../standard-library/regex-typedefs.md#wregex_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`wchar_t``basic_regex`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wsmatch<ept id="p1">](../standard-library/regex-typedefs.md#wsmatch_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`wstring``match_results`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wsregex_iterator<ept id="p1">](../standard-library/regex-typedefs.md#wsregex_iterator_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`wstring``regex_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wsregex_token_iterator<ept id="p1">](../standard-library/regex-typedefs.md#wsregex_token_iterator_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`wstring``regex_token_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wssub_match<ept id="p1">](../standard-library/regex-typedefs.md#wssub_match_typedef)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Type definition for <ph id="ph1">`wstring``sub_match`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>regex_match<ept id="p1">](../standard-library/regex-functions.md#regex_match_function)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Exactly matches a regular expression.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>regex_replace<ept id="p1">](../standard-library/regex-functions.md#regex_replace_function)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Replaces matched regular expressions.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>regex_search<ept id="p1">](../standard-library/regex-functions.md#regex_search_function)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Searches for a regular expression match.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>swap<ept id="p1">](../standard-library/regex-functions.md#swap_function)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Swaps <ph id="ph1">`basic_regex`</ph> or <ph id="ph2">`match_results`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator==<ept id="p1">](../standard-library/regex-operators.md#operator_eq_eq)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Comparison of various objects, equal.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator!=<ept id="p1">](../standard-library/regex-operators.md#operator_neq)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Comparison of various objects, not equal.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&lt;<ept id="p1">](../standard-library/regex-operators.md#operator_lt_)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Comparison of various objects, less than.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator<ph id="ph1">\&lt;</ph><ph id="ph2">=</ph><ept id="p1">](../standard-library/regex-operators.md#operator_lt__eq)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Comparison of various objects, less than or equal.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&gt;<ept id="p1">](../standard-library/regex-operators.md#operator_gt_)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Comparison of various objects, greater than.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&gt;=<ept id="p1">](../standard-library/regex-operators.md#operator_gt__eq)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Comparison of various objects, greater than or equal.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&lt;&lt;<ept id="p1">](../standard-library/regex-operators.md#operator_lt__lt_)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Inserts a <ph id="ph1">`sub_match`</ph> in a stream.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular Expressions (C++)<ept id="p1">](../standard-library/regular-expressions-cpp.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>