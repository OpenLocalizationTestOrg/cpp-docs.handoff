<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d975421dc0a12597a3adc6701bda0a87ec0a490</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\strerror-s-strerror-s-wcserror-s-wcserror-s.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dec3189a1b1179489a9f3a22e691f952a716dfb1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d5e27093ec168d3b65e4ecfadc3217ead6e517b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>strerror_s, _strerror_s, _wcserror_s, __wcserror_s | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>strerror_s, _strerror_s, _wcserror_s, __wcserror_s</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Get a system error message (<ph id="ph1">`strerror_s`</ph>, <ph id="ph2">`_wcserror_s`</ph>) or print a user-supplied error message (<ph id="ph3">`_strerror_s`</ph>, <ph id="ph4">`__wcserror_s`</ph>).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These are versions of <bpt id="p1">[</bpt>strerror, _strerror, _wcserror, <ph id="ph1">\_</ph>_wcserror<ept id="p1">](../../c-runtime-library/reference/strerror-strerror-wcserror-wcserror.md)</ept> with security enhancements as described in <bpt id="p2">[</bpt>Security Features in the CRT<ept id="p2">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Buffer to hold error string.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Size of buffer.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Error number.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>User-supplied message.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Zero if successful, an error code on failure.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Error Condtions</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Contents of <ph id="ph1">`buffer`</ph></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>not modified</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`strerror_s`</ph> function maps <ph id="ph2">`errnum`</ph> to an error-message string, returning the string in <ph id="ph3">`buffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_strerror_s`</ph> doesn't take the error number; it uses the current value of <ph id="ph2">`errno`</ph> to determine the appropriate message.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Neither <ph id="ph1">`strerror_s`</ph> nor <ph id="ph2">`_strerror_s`</ph> actually prints the message: For that, you need to call an output function such as <bpt id="p1">[</bpt>fprintf<ept id="p1">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`strErrMsg`</ph> is <ph id="ph2">`NULL`</ph>, <ph id="ph3">`_strerror_s`</ph> returns a string in <ph id="ph4">`buffer`</ph> containing the system error message for the last library call that produced an error.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The error-message string is terminated by the newline character ('\n').</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`strErrMsg`</ph> is not equal to <ph id="ph2">`NULL`</ph>, then <ph id="ph3">`_strerror_s`</ph> returns a string in <ph id="ph4">`buffer`</ph> containing (in order) your string message, a colon, a space, the system error message for the last library call producing an error, and a newline character.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Your string message can be, at most, 94 characters long.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These functions truncate the error message if its length exceeds <ph id="ph1">`numberOfElements`</ph> -1.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The resulting string in <ph id="ph1">`buffer`</ph> is always null-terminated.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The actual error number for <ph id="ph1">`_strerror_s`</ph> is stored in the variable <bpt id="p1">[</bpt>errno<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The system error messages are accessed through the variable <bpt id="p1">[</bpt>_sys_errlist<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>, which is an array of messages ordered by error number.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_strerror_s`</ph> accesses the appropriate error message by using the <ph id="ph2">`errno`</ph> value as an index to the variable <ph id="ph3">`_sys_errlist`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The value of the variable <bpt id="p1">[</bpt>_sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> is defined as the maximum number of elements in the <ph id="ph1">`_sys_errlist`</ph> array.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To produce accurate results, call <ph id="ph1">`_strerror_s`</ph> immediately after a library routine returns with an error.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Otherwise, subsequent calls to <ph id="ph1">`strerror_s`</ph> or <ph id="ph2">`_strerror_s`</ph> can overwrite the <ph id="ph3">`errno`</ph> value.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_wcserror_s`</ph> and <ph id="ph2">`__wcserror_s`</ph>are wide-character versions of <ph id="ph3">`strerror_s`</ph>and <ph id="ph4">`_strerror_s`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>These functions validate their parameters.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If buffer is <ph id="ph1">`NULL`</ph> or if the size parameter is 0, the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept> .</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the functions return <ph id="ph1">`EINVAL`</ph> and set <ph id="ph2">`errno`</ph> to <ph id="ph3">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_strerror_s, _wcserror_s,`</ph> and <ph id="ph2">`__wcserror_s`</ph> are not part of the ANSI definition but are instead Microsoft extensions to it.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Do not use them where portability is desired; for ANSI compatibility, use <ph id="ph1">`strerror_s`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically, eliminating the need to specify a size argument.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Secure Template Overloads<ept id="p1">](../../c-runtime-library/secure-template-overloads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The debug versions of these functions first fill the buffer with 0xFD.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To disable this behavior, use <bpt id="p1">[</bpt>_CrtSetDebugFillThreshold<ept id="p1">](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strerror_s`</ph>, <ph id="ph2">`_strerror_s`</ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>string.h&gt;</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_wcserror_s`</ph>, <ph id="ph2">`__wcserror_s`</ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>string.h&gt; or <ph id="ph2">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>perror<ept id="p1">](../../c-runtime-library/reference/perror-wperror.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Exception::Message<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.exception.message.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String Manipulation<ept id="p1">](../../c-runtime-library/string-manipulation-crt.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>clearerr<ept id="p1">](../../c-runtime-library/reference/clearerr.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ferror<ept id="p1">](../../c-runtime-library/reference/ferror.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>perror, _wperror<ept id="p1">](../../c-runtime-library/reference/perror-wperror.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>