<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d935d88e542a23d7de8d5f3e5c6ece82e11d6f5b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\malloc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5425368bfa2c727d93fc629e4b077dd42691dbf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83bea50b6e6961212043741ff9b8b1e52e54351b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>malloc | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>malloc</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allocates memory blocks.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Bytes to allocate.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`malloc`</ph> returns a void pointer to the allocated space, or <ph id="ph2">`NULL`</ph> if there is insufficient memory available.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To return a pointer to a type other than <ph id="ph1">`void`</ph>, use a type cast on the return value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object that has an alignment requirement less than or equal to that of the fundamental alignment.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>(In Visual C++, the fundamental alignment is the alignment that's required for a <ph id="ph1">`double`</ph>, or 8 bytes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In code that targets 64-bit platforms, it’s 16 bytes.) Use <bpt id="p1">[</bpt>_aligned_malloc<ept id="p1">](../../c-runtime-library/reference/aligned-malloc.md)</ept> to allocate storage for objects that have a larger alignment requirement—for example, the SSE types <bpt id="p2">[</bpt>__m128<ept id="p2">](../../cpp/m128.md)</ept> and <ph id="ph1">`__m256`</ph>, and types that are declared by using <ph id="ph2">`__declspec(align(``n``))`</ph> where <ph id="ph3">`n`</ph> is greater than 8.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`size`</ph> is 0, <ph id="ph2">`malloc`</ph> allocates a zero-length item in the heap and returns a valid pointer to that item.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Always check the return from <ph id="ph1">`malloc`</ph>, even if the amount of memory requested is small.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`malloc`</ph> function allocates a memory block of at least <ph id="ph2">`size`</ph> bytes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The block may be larger than <ph id="ph1">`size`</ph> bytes because of the space that's required for alignment and maintenance information.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`malloc`</ph> sets <ph id="ph2">`errno`</ph> to <ph id="ph3">`ENOMEM`</ph> if a memory allocation fails or if the amount of memory requested exceeds <ph id="ph4">`_HEAP_MAXREQ`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For information about this and other error codes, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The startup code uses <ph id="ph1">`malloc`</ph> to allocate storage for the <ph id="ph2">`_environ`</ph>, <ph id="ph3">`envp`</ph>, and <ph id="ph4">`argv`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following functions and their wide-character counterparts also call <ph id="ph1">`malloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>calloc<ept id="p1">](../../c-runtime-library/reference/calloc.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fscanf<ept id="p1">](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_getw<ept id="p1">](../../c-runtime-library/reference/getw.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>setvbuf<ept id="p1">](../../c-runtime-library/reference/setvbuf.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_exec functions<ept id="p1">](../../c-runtime-library/exec-wexec-functions.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fseek<ept id="p1">](../../c-runtime-library/reference/fseek-fseeki64.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_popen<ept id="p1">](../../c-runtime-library/reference/popen-wpopen.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_spawn functions<ept id="p1">](../../c-runtime-library/spawn-wspawn-functions.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fgetc<ept id="p1">](../../c-runtime-library/reference/fgetc-fgetwc.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fsetpos<ept id="p1">](../../c-runtime-library/reference/fsetpos.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>printf<ept id="p1">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_strdup<ept id="p1">](../../c-runtime-library/reference/strdup-wcsdup-mbsdup.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_fgetchar<ept id="p1">](../../c-runtime-library/reference/fgetc-fgetwc.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_fullpath<ept id="p1">](../../c-runtime-library/reference/fullpath-wfullpath.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>putc<ept id="p1">](../../c-runtime-library/reference/putc-putwc.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>system<ept id="p1">](../../c-runtime-library/reference/system-wsystem.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fgets<ept id="p1">](../../c-runtime-library/reference/fgets-fgetws.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fwrite<ept id="p1">](../../c-runtime-library/reference/fwrite.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>putchar<ept id="p1">](../../c-runtime-library/reference/putc-putwc.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_tempnam<ept id="p1">](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fprintf<ept id="p1">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>getc<ept id="p1">](../../c-runtime-library/reference/getc-getwc.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_putenv<ept id="p1">](../../c-runtime-library/reference/putenv-wputenv.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ungetc<ept id="p1">](../../c-runtime-library/reference/ungetc-ungetwc.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fputc<ept id="p1">](../../c-runtime-library/reference/fputc-fputwc.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>getchar<ept id="p1">](../../c-runtime-library/reference/getc-getwc.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>puts<ept id="p1">](../../c-runtime-library/reference/puts-putws.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>vfprintf<ept id="p1">](../../c-runtime-library/reference/vfprintf-vfprintf-l-vfwprintf-vfwprintf-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_fputchar<ept id="p1">](../../c-runtime-library/reference/fputc-fputwc.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_getcwd<ept id="p1">](../../c-runtime-library/reference/getcwd-wgetcwd.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_putw<ept id="p1">](../../c-runtime-library/reference/putw.md)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>vprintf<ept id="p1">](../../c-runtime-library/reference/vprintf-vprintf-l-vwprintf-vwprintf-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fputs<ept id="p1">](../../c-runtime-library/reference/fputs-fputws.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_getdcwd<ept id="p1">](../../c-runtime-library/reference/getcwd-wgetcwd.md)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>scanf<ept id="p1">](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fread<ept id="p1">](../../c-runtime-library/reference/fread.md)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>gets<ept id="p1">](../../c-runtime-library/gets-getws.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_searchenv<ept id="p1">](../../c-runtime-library/reference/searchenv-wsearchenv.md)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The C++ <bpt id="p1">[</bpt>_set_new_mode<ept id="p1">](../../c-runtime-library/reference/set-new-mode.md)</ept> function sets the new handler mode for <ph id="ph1">`malloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The new handler mode indicates whether, on failure, <ph id="ph1">`malloc`</ph> is to call the new handler routine as set by <bpt id="p1">[</bpt>_set_new_handler<ept id="p1">](../../c-runtime-library/reference/set-new-handler.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`malloc`</ph> does not call the new handler routine on failure to allocate memory.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can override this default behavior so that, when <ph id="ph1">`malloc`</ph> fails to allocate memory, <ph id="ph2">`malloc`</ph> calls the new handler routine in the same way that the <ph id="ph3">`new`</ph> operator does when it fails for the same reason.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>To override the default, call</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>early in your program, or link with NEWMODE.OBJ (see <bpt id="p1">[</bpt>Link Options<ept id="p1">](../../c-runtime-library/link-options.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When the application is linked with a debug version of the C run-time libraries, <ph id="ph1">`malloc`</ph> resolves to <bpt id="p1">[</bpt>_malloc_dbg<ept id="p1">](../../c-runtime-library/reference/malloc-dbg.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more information about how the heap is managed during the debugging process, see <bpt id="p1">[</bpt>CRT Debug Heap Details<ept id="p1">](/visualstudio/debugger/crt-debug-heap-details)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`malloc`</ph> is marked <ph id="ph2">`__declspec(noalias)`</ph> and <ph id="ph3">`__declspec(restrict)`</ph>; this means that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>noalias<ept id="p1">](../../cpp/noalias.md)</ept> and <bpt id="p2">[</bpt>restrict<ept id="p2">](../../cpp/restrict.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>stdlib.h&gt; and <ph id="ph2">\&lt;</ph>malloc.h&gt;</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>All versions of the <bpt id="p1">[</bpt>C run-time libraries<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Memory Allocation<ept id="p1">](../../c-runtime-library/memory-allocation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>calloc<ept id="p1">](../../c-runtime-library/reference/calloc.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>free<ept id="p1">](../../c-runtime-library/reference/free.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>realloc<ept id="p1">](../../c-runtime-library/reference/realloc.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_aligned_malloc<ept id="p1">](../../c-runtime-library/reference/aligned-malloc.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>