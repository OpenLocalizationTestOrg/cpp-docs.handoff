<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3bc61851e50df2bbacb1dc08839bbf264ba60b8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\walkthrough-connecting-using-tasks-and-xml-http-requests.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e4aab76311746393ebdd967210140515020b05d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">449f973d71e000016faaacc5ad175405a67cc1cb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Connecting Using Tasks and XML HTTP Requests | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Connecting Using Tasks and XML HTTP Requests</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">[</bpt>IXMLHTTPRequest2<ept id="p1">](http://msdn.microsoft.com/en-us/bbc11c4a-aecf-4d6d-8275-3e852e309908)</ept> and <bpt id="p2">[</bpt>IXMLHTTPRequest2Callback<ept id="p2">](http://msdn.microsoft.com/en-us/aa4b3f4c-6e28-458b-be25-6cce8865fc71)</ept> interfaces together with tasks to send HTTP GET and POST requests to a web service in a <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By combining <ph id="ph1">`IXMLHTTPRequest2`</ph> together with tasks, you can write code that composes with other tasks.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, you can use the download task as part of a chain of tasks.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The download task can also respond when work is canceled.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can also use the C++ REST SDK to perform HTTP requests from a <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app using C++ app or from a desktop C++ app.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>C++ REST SDK (Codename "Casablanca")<ept id="p1">](../../cloud/cpp-rest-sdk-codename-casablanca.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about tasks, see <bpt id="p1">[</bpt>Task Parallelism<ept id="p1">](../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about how to use tasks in a <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app, see <bpt id="p1">[</bpt>Asynchronous programming in C++<ept id="p1">](http://msdn.microsoft.com/en-us/512700b7-7863-44cc-93a2-366938052f31)</ept> and <bpt id="p2">[</bpt>Creating Asynchronous Operations in C++ for Windows Store Apps<ept id="p2">](../../parallel/concrt/creating-asynchronous-operations-in-cpp-for-windows-store-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This document first shows how to create <ph id="ph1">`HttpRequest`</ph> and its supporting classes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It then shows how to use this class from a <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app that uses C++ and XAML.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For a more complete example that uses the <ph id="ph1">`HttpReader`</ph> class described in this document, see <bpt id="p1">[</bpt>Developing Bing Maps Trip Optimizer, a Windows Store app in JavaScript and C++<ept id="p1">](http://msdn.microsoft.com/library/974cf025-de1a-4299-b7dd-c6c7bf0e5d30)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For another example that uses <ph id="ph1">`IXMLHTTPRequest2`</ph> but does not use tasks, see <bpt id="p1">[</bpt>Quickstart: Connecting using XML HTTP Request (IXMLHTTPRequest2)<ept id="p1">](http://msdn.microsoft.com/en-us/cc7aed53-b2c5-4d83-b85d-cff2f5ba7b35)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`IXMLHTTPRequest2Callback`</ph> are the interfaces that we recommend for use in a <ph id="ph2">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can also adapt this example for use in a desktop app.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Defining the HttpRequest, HttpRequestBuffersCallback, and HttpRequestStringCallback Classes</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When you use the <ph id="ph1">`IXMLHTTPRequest2`</ph> interface to create web requests over HTTP, you implement the <ph id="ph2">`IXMLHTTPRequest2Callback`</ph> interface to receive the server response and react to other events.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example defines the <ph id="ph1">`HttpRequest`</ph> class to create web requests, and the <ph id="ph2">`HttpRequestBuffersCallback`</ph> and <ph id="ph3">`HttpRequestStringCallback`</ph> classes to process responses.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`HttpRequestBuffersCallback`</ph> and <ph id="ph2">`HttpRequestStringCallback`</ph> classes support the <ph id="ph3">`HttpRequest`</ph> class; you work only with the <ph id="ph4">`HttpRequest`</ph> class from application code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetAsync`</ph>, <ph id="ph2">`PostAsync`</ph> methods of the <ph id="ph3">`HttpRequest`</ph> class enable you to start HTTP GET and POST operations, respectively.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>These methods use the <ph id="ph1">`HttpRequestStringCallback`</ph> class to read the server response as a string.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SendAsync`</ph> and <ph id="ph2">`ReadAsync`</ph> methods enable you to stream large content in chunks.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These methods each return <bpt id="p1">[</bpt>concurrency::task<ept id="p1">](../../parallel/concrt/reference/task-class.md)</ept> to represent the operation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetAsync`</ph> and <ph id="ph2">`PostAsync`</ph> methods produce <ph id="ph3">`task&lt;std::wstring&gt;`</ph> value, where the <ph id="ph4">`wstring`</ph> part represents the serverâ€™s response.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SendAsync`</ph> and <ph id="ph2">`ReadAsync`</ph> methods produce <ph id="ph3">`task&lt;void&gt;`</ph> values; these tasks complete when the send and read operations complete.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`IXMLHTTPRequest2`</ph> interfaces act asynchronously, this example uses <bpt id="p1">[</bpt>concurrency::task_completion_event<ept id="p1">](../../parallel/concrt/reference/task-completion-event-class.md)</ept> to create a task that completes after the callback object completes or cancels the download operation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`HttpRequest`</ph> class creates a task-based continuation from this task to set the final result.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`HttpRequest`</ph> class uses a task-based continuation to ensure that the continuation task runs even if the previous task produces an error or is canceled.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about task-based continuations, see <bpt id="p1">[</bpt>Task Parallelism<ept id="p1">](../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD To support cancellation, the <ph id="ph1">`HttpRequest`</ph>, <ph id="ph2">`HttpRequestBuffersCallback`</ph>, and <ph id="ph3">`HttpRequestStringCallback`</ph> classes use cancellation tokens.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`HttpRequestBuffersCallback`</ph> and <ph id="ph2">`HttpRequestStringCallback`</ph> classes use the <bpt id="p1">[</bpt>concurrency::cancellation_token::register_callback<ept id="p1">](reference/cancellation-token-class.md#register_callback)</ept> method to enable the task completion event to respond to cancellation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This cancellation callback aborts the download.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more info about cancellation, see <bpt id="p1">[</bpt>Cancellation<ept id="p1">](../../parallel/concrt/exception-handling-in-the-concurrency-runtime.md#cancellation)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To support cancellation, the <ph id="ph1">`HttpRequest`</ph>, <ph id="ph2">`HttpRequestBuffersCallback`</ph>, and <ph id="ph3">`HttpRequestStringCallback`</ph> classes use cancellation tokens.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`HttpRequestBuffersCallback`</ph> and <ph id="ph2">`HttpRequestStringCallback`</ph> classes use the <bpt id="p1">[</bpt>concurrency::cancellation_token::register_callback<ept id="p1">](reference/cancellation-token-class.md#register_callback_method)</ept> method to enable the task completion event to respond to cancellation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This cancellation callback aborts the download.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more info about cancellation, see <bpt id="p1">[</bpt>Cancellation<ept id="p1">](../../parallel/concrt/exception-handling-in-the-concurrency-runtime.md#cancellation)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>master</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To Define the HttpRequest Class</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use the Visual C++ <bpt id="p1">**</bpt>Blank App (XAML)<ept id="p1">**</ept> template to create a blank XAML app project.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This example names the project <ph id="ph1">`UsingIXMLHTTPRequest2`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add to the project a header file that is named HttpRequest.h and a source file that is named HttpRequest.cpp.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In pch.h, add this code:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>concrt-using-ixhr2#1</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In HttpRequest.h, add this code:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>concrt-using-ixhr2#2</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In HttpRequest.cpp, add this code:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>concrt-using-ixhr2#3</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Using the HttpRequest Class in a <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> App</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This section demonstrates how to use the <ph id="ph1">`HttpRequest`</ph> class in a <ph id="ph2">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The app provides an input box that defines a URL resource, and button commands that perform GET and POST operations, and a button command that cancels the current operation.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To Use the HttpRequest Class</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In MainPage.xaml, define the <bpt id="p1">[</bpt>StackPanel<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept> element as follows.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>concrt-using-ixhr2#A1</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In MainPage.xaml.h, add this <ph id="ph1">`#include`</ph> directive:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>concrt-using-ixhr2#A2</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In MainPage.xaml.h, add these <ph id="ph1">`private`</ph> member variables to the <ph id="ph2">`MainPage`</ph> class:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>concrt-using-ixhr2#A3</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In MainPage.xaml.h, declare the <ph id="ph1">`private`</ph> method <ph id="ph2">`ProcessHttpRequest`</ph>:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>concrt-using-ixhr2#A4</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In MainPage.xaml.cpp, add these <ph id="ph1">`using`</ph> statements:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>concrt-using-ixhr2#A5</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In MainPage.xaml.cpp, implement the <ph id="ph1">`GetButton_Click`</ph>, <ph id="ph2">`PostButton_Click`</ph>, and <ph id="ph3">`CancelButton_Click`</ph> methods of the <ph id="ph4">`MainPage`</ph> class.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>concrt-using-ixhr2#A6</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If your app does not require support for cancellation, pass <bpt id="p1">[</bpt>concurrency::cancellation_token::none<ept id="p1">](reference/cancellation-token-class.md#none)</ept> to the <ph id="ph1">`HttpRequest::GetAsync`</ph> and <ph id="ph2">`HttpRequest::PostAsync`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In MainPage.xaml.cpp, implement the <ph id="ph1">`MainPage::ProcessHttpRequest`</ph> method.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>concrt-using-ixhr2#A7</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the project properties, under <bpt id="p1">**</bpt>Linker<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Input<ept id="p2">**</ept>, specify <ph id="ph1">`shcore.lib`</ph> and <ph id="ph2">`msxml6.lib`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Here is the running app:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The running Windows Store app</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Concurrency Runtime Walkthroughs</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Task Parallelism</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Cancellation in the PPL</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Asynchronous programming in C++</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Creating Asynchronous Operations in C++ for Windows Store Apps</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Quickstart: Connecting using XML HTTP Request (IXMLHTTPRequest2)</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>task Class (Concurrency Runtime)</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>task_completion_event Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>