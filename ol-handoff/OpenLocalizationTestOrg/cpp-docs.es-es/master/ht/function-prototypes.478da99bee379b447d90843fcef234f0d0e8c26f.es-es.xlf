<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">749d40d1f23a9dd2045f0441b78f5050cb0a7ab5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\function-prototypes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">398bfe48f732e96a24d465b70024cd0595021f93</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98ba4ff8b42b5145ff78c40c8eab5ce534197964</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Function Prototypes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Function Prototypes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A function declaration precedes the function definition and specifies the name, return type, storage class, and other attributes of a function.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To be a prototype, the function declaration must also establish types and identifiers for the function's arguments.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>declaration-specifiers attribute-seq<ept id="p1">*</ept> opt<bpt id="p2">*</bpt>init-declarator-list<ept id="p2">*</ept> opt<bpt id="p3">**</bpt>;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>attribute-seq<ept id="p1">*</ept> opt is Microsoft Specific */</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declaration-specifiers<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>storage-class-specifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-specifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-qualifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>init-declarator</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator-list<ept id="p1">*</ept>  <bpt id="p2">**</bpt>,<ept id="p2">**</ept>  <bpt id="p3">*</bpt>init-declarator<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>declarator</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>declarator = initializer</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>pointer<ept id="p1">*</ept> opt<bpt id="p2">*</bpt>direct-declarator<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>: /<ph id="ph1">\*</ph> A function declarator</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>(<ept id="p2">**</ept>  <bpt id="p3">*</bpt>parameter-type-list<ept id="p3">*</ept>  <bpt id="p4">**</bpt>)<ept id="p4">**</ept>  /* New-style declarator</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>(<ept id="p2">**</ept>  <bpt id="p3">*</bpt>identifier-list<ept id="p3">*</ept> opt<bpt id="p4">**</bpt>)<ept id="p4">**</ept> /* Obsolete-style declarator</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The prototype has the same form as the function definition, except that it is terminated by a semicolon immediately following the closing parenthesis and therefore has no body.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In either case, the return type must agree with the return type specified in the function definition.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Function prototypes have the following important uses:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>They establish the return type for functions that return types other than <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Although functions that return <ph id="ph1">`int`</ph> values do not require prototypes, prototypes are recommended.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Without complete prototypes, standard conversions are made, but no attempt is made to check the type or number of arguments with the number of parameters.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Prototypes are used to initialize pointers to functions before those functions are defined.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The parameter list is used for checking the correspondence of arguments in the function call with the parameters in the function definition.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The converted type of each parameter determines the interpretation of the arguments that the function call places on the stack.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A type mismatch between an argument and a parameter may cause the arguments on the stack to be misinterpreted.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, on a 16-bit computer, if a 16-bit pointer is passed as an argument, then declared as a <bpt id="p1">**</bpt>long<ept id="p1">**</ept> parameter, the first 32 bits on the stack are interpreted as a <bpt id="p2">**</bpt>long<ept id="p2">**</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This error creates problems not only with the <bpt id="p1">**</bpt>long<ept id="p1">**</ept> parameter, but with any parameters that follow it.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can detect errors of this kind by declaring complete function prototypes for all functions.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A prototype establishes the attributes of a function so that calls to the function that precede its definition (or occur in other source files) can be checked for argument-type and return-type mismatches.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, if you specify the <bpt id="p1">**</bpt>static<ept id="p1">**</ept> storage-class specifier in a prototype, you must also specify the <bpt id="p2">**</bpt>static<ept id="p2">**</ept> storage class in the function definition.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Complete parameter declarations (<ph id="ph1">`int a`</ph>) can be mixed with abstract declarators (<ph id="ph2">`int`</ph>) in the same declaration.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, the following declaration is legal:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The prototype can include both the type of, and an identifier for, each expression that is passed as an argument.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However, such identifiers have scope only until the end of the declaration.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The prototype can also reflect the fact that the number of arguments is variable, or that no arguments are passed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Without such a list, mismatches may not be revealed, so the compiler cannot generate diagnostic messages concerning them.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Arguments<ept id="p1">](../c-language/arguments.md)</ept> for more information on type checking.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Prototype scope in the Microsoft C compiler is now ANSI-compliant when compiling with the /Za compiler option.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This means that if you declare a <ph id="ph1">`struct`</ph> or <bpt id="p1">**</bpt>union<ept id="p1">**</ept> tag within a prototype, the tag is entered at that scope rather than at global scope.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, when compiling with /Za for ANSI compliance, you can never call this function without getting a type mismatch error:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To correct your code, define or declare the <ph id="ph1">`struct`</ph> or <bpt id="p1">**</bpt>union<ept id="p1">**</ept> at global scope before the function prototype:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Under /Ze, the tag is still entered at global scope.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>