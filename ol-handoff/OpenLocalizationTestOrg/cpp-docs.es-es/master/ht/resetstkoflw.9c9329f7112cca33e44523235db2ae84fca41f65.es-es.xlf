<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e20d4d7f301990dcd21e6177769190b99db840f8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\resetstkoflw.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebc46af79cd3af1378ad03a1229531f6d4880063</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d58d941136ea2363370533bdb1a11673f8858be</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_resetstkoflw | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_resetstkoflw</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Recovers from stack overflow.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This API cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CRT functions not supported with /ZW<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Nonzero if the function succeeds, zero if it fails.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_resetstkoflw`</ph> function recovers from a stack overflow condition, allowing a program to continue instead of failing with a fatal exception error.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`_resetstkoflw`</ph> function is not called, there are no guard pages after the previous exception.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The next time that there is a stack overflow, there are no exceptions at all and the process terminates without warning.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If a thread in an application causes an <bpt id="p1">**</bpt>EXCEPTION_STACK_OVERFLOW<ept id="p1">**</ept> exception, the thread has left its stack in a damaged state.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is in contrast to other exceptions such as <bpt id="p1">**</bpt>EXCEPTION_ACCESS_VIOLATION<ept id="p1">**</ept> or <bpt id="p2">**</bpt>EXCEPTION_INT_DIVIDE_BY_ZERO<ept id="p2">**</ept>, where the stack is not damaged.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The stack is set to an arbitrarily small value when the program is first loaded.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The stack then grows on demand to meet the needs of the thread.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is implemented by placing a page with PAGE_GUARD access at the end of the current stack.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Guard Pages<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa366549)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the code causes the stack pointer to point to an address on this page, an exception occurs and the system does the following three things:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Removes the PAGE_GUARD protection on the guard page so that the thread can read and write data to the memory.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Allocates a new guard page that is located one page below the last one.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Reruns the instruction that raised the exception.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In this way, the system can increase the size of the stack for the thread automatically.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Each thread in a process has a maximum stack size.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The stack size is set at compile time by the <bpt id="p1">[</bpt>/STACK (Stack Allocations)<ept id="p1">](../../build/reference/stack-stack-allocations.md)</ept>, or by the <bpt id="p2">[</bpt>STACKSIZE<ept id="p2">](../../build/reference/stacksize.md)</ept> statement in the .def file for the project.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When this maximum stack size is exceeded, the system does the following three things:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Removes the PAGE_GUARD protection on the guard page, as previously described.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Tries to allocate a new guard page below the last one.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, this fails because the maximum stack size has been exceeded.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Raises an exception so that the thread can handle it in the exception block.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Note that, at that point, the stack no longer has a guard page.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The next time that the program grows the stack all the way to the end, where there should be a guard page, the program writes beyond the end of the stack and causes an access violation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`_resetstkoflw`</ph> to restore the guard page whenever recovery is done after a stack overflow exception.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This function can be called from inside the main body of an <ph id="ph1">`__except`</ph> block or outside an <bpt id="p1">**</bpt>__except<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, there are some restrictions on when it should be used.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>should never be called from:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A filter expression.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A filter function.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A function called from a filter function.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`__finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>At these points, the stack is not yet sufficiently unwound.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Stack overflow exceptions are generated as structured exceptions, not C++ exceptions, so <ph id="ph1">`_resetstkoflw`</ph> is not useful in an ordinary <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block because it will not catch a stack overflow exception.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, if <bpt id="p1">[</bpt>_set_se_translator<ept id="p1">](../../c-runtime-library/reference/set-se-translator.md)</ept> is used to implement a structured exception translator that throws C++ exceptions (as in the second example), a stack overflow exception results in a C++ exception that can be handled by a C++ catch block.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It is not safe to call <bpt id="p1">**</bpt>_resetstkoflw<ept id="p1">**</ept> in a C++ catch block that is reached from an exception thrown by the structured exception translator function.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this case, the stack space is not freed and the stack pointer is not reset until outside the catch block, even though destructors have been called for any destructible objects before the catch block.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This function should not be called until the stack space is freed and the stack pointer has been reset.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Therefore, it should be called only after exiting the catch block.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>As little stack space as possible should be used in the catch block because a stack overflow that occurs in the catch block that is itself attempting to recover from a previous stack overflow is not recoverable and can cause the program to stop responding as the overflow in the catch block triggers an exception that itself is handled by the same catch block.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There are situations where <bpt id="p1">**</bpt>_resetstkoflw<ept id="p1">**</ept> can fail even if used in a correct location, such as within an <bpt id="p2">**</bpt>__except<ept id="p2">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If, even after unwinding the stack, there is still not enough stack space left to execute <bpt id="p1">**</bpt>_resetstkoflw<ept id="p1">**</ept> without writing into the last page of the stack, <bpt id="p2">**</bpt>_resetstkoflw<ept id="p2">**</ept> fails to reset the last page of the stack as the guard page and returns 0, indicating failure.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Therefore, safe usage of this function should include checking the return value instead of assuming that the stack is safe to use.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Structured exception handling will not catch a <ph id="ph1">`STATUS_STACK_OVERFLOW`</ph> exception when the application is compiled with <ph id="ph2">`/clr`</ph> or <ph id="ph3">`/clr:pure`</ph> (see <bpt id="p1">[</bpt>/clr (Common Language Runtime Compilation)<ept id="p1">](../../build/reference/clr-common-language-runtime-compilation.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>malloc.h&gt;</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Libraries:<ept id="p1">**</ept> All versions of the <bpt id="p2">[</bpt>CRT Library Features<ept id="p2">](../../c-runtime-library/crt-library-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following example shows the recommended usage of the <ph id="ph1">`_resetstkoflw`</ph> function.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Sample Output</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>With no program arguments:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The program stops responding without executing further iterations.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>With program arguments:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example shows the recommended use of <ph id="ph1">`_resetstkoflw`</ph> in a program where structured exceptions are converted to C++ exceptions.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Sample Output</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>_alloca</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>