<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97f7d7f8075251e8a5cfd3f9fb360f8ec068e47f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\parameters.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3499dc57016a67c99ca589bf4fae7c46304071e3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52029511743ce70911201d8246a2912cdd468efb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Parameters | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Arguments are names of values passed to a function by a function call.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Parameters are the values the function expects to receive.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In a function prototype, the parentheses following the function name contain a complete list of the function's parameters and their types.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameter declarations specify the types, sizes, and identifiers of values stored in the parameters.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>function-definition<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>declaration-specifiers<ept id="p1">*</ept> opt<bpt id="p2">*</bpt>attribute-seq<ept id="p2">*</ept> opt<bpt id="p3">*</bpt>declarator declaration-list<ept id="p3">*</ept> opt<bpt id="p4">*</bpt>compound-statement<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>attribute-seq<ept id="p1">*</ept> is Microsoft Specific */</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declarator<ept id="p1">*</ept> :</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>pointer<ept id="p1">*</ept> opt<bpt id="p2">*</bpt>direct-declarator<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>:/<ph id="ph1">\*</ph> A function declarator</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>(<ept id="p2">**</ept>  <bpt id="p3">*</bpt>parameter-type-list<ept id="p3">*</ept>  <bpt id="p4">**</bpt>)<ept id="p4">**</ept> /* New-style declarator</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>parameter-type-list<ept id="p1">*</ept>: /<ph id="ph1">\*</ph> A parameter list</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>parameter-list</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>parameter-list<ept id="p1">*</ept>  <bpt id="p2">**</bpt>,...<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>parameter-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>parameter-declaration</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>parameter-list<ept id="p1">*</ept>  <bpt id="p2">**</bpt>,<ept id="p2">**</ept>  <bpt id="p3">*</bpt>parameter-declaration<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>parameter-declaration<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>declaration-specifiers declarator</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declaration-specifiers abstract-declarator<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>parameter-type-list<ept id="p1">*</ept> is a sequence of parameter declarations separated by commas.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The form of each parameter in a parameter list looks like this:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Function parameters declared with the <bpt id="p1">**</bpt>auto<ept id="p1">**</ept> attribute generate errors.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The identifiers of the parameters are used in the function body to refer to the values passed to the function.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can name the parameters in a prototype, but the names go out of scope at the end of the declaration.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Therefore parameter names can be assigned the same way or differently in the function definition.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These identifiers cannot be redefined in the outermost block of the function body, but they can be redefined in inner, nested blocks as though the parameter list were an enclosing block.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Each identifier in <bpt id="p1">*</bpt>parameter-type-list<ept id="p1">*</ept> must be preceded by its appropriate type specifier, as shown in this example:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If at least one parameter occurs in the parameter list, the list can end with a comma followed by three periods (<bpt id="p1">**</bpt>, ...<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This construction, called the "ellipsis notation," indicates a variable number of arguments to the function.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Calls with a Variable Number of Arguments<ept id="p1">](../c-language/calls-with-a-variable-number-of-arguments.md)</ept> for more information.) However, a call to the function must have at least as many arguments as there are parameters before the last comma.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If no arguments are to be passed to the function, the list of parameters is replaced by the keyword <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This use of <ph id="ph1">`void`</ph> is distinct from its use as a type specifier.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The order and type of parameters, including any use of the ellipsis notation, must be the same in all the function declarations (if any) and in the function definition.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The types of the arguments after usual arithmetic conversions must be assignment-compatible with the types of the corresponding parameters.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Usual Arithmetic Conversions<ept id="p1">](../c-language/usual-arithmetic-conversions.md)</ept> for information on arithmetic conversions.) Arguments following the ellipsis are not checked.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A parameter can have any fundamental, structure, union, pointer, or array type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The compiler performs the usual arithmetic conversions independently on each parameter and on each argument, if necessary.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>After conversion, no parameter is shorter than an <ph id="ph1">`int`</ph>, and no parameter has <bpt id="p1">**</bpt>float<ept id="p1">**</ept> type unless the parameter type is explicitly specified as <bpt id="p2">**</bpt>float<ept id="p2">**</ept> in the prototype.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This means, for example, that declaring a parameter as a <ph id="ph1">`char`</ph> has the same effect as declaring it as an <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>C Function Definitions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>