<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbdaa351bc1d67984037dfb19b4d019b7d20083a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\range-based-for-statement-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e918e14b9bc9f7ed04367f41da00d41497bfbcf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53764e04e4b6cf110abfe678a4a967d6a9ac22a3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Range-based for Statement (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Range-based for Statement (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Executes <ph id="ph1">`statement`</ph> repeatedly and sequentially for each element in <ph id="ph2">`expression`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use the range-based <ph id="ph1">`for`</ph> statement to construct loops that must execute through a "range", which is defined as anything that you can iterate throughâ€”for example, <ph id="ph2">`std::vector`</ph>, or any other STL sequence whose range is defined by a <ph id="ph3">`begin()`</ph> and <ph id="ph4">`end()`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The name that is declared in the <ph id="ph1">`for-range-declaration`</ph> portion is local to the <ph id="ph2">`for`</ph> statement and cannot be re-declared in <ph id="ph3">`expression`</ph> or <ph id="ph4">`statement`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> keyword is preferred in the <ph id="ph1">`for-range-declaration`</ph> portion of the statement.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This code shows how to use ranged <ph id="ph1">`for`</ph> loops to iterate through an array and a vector:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Here is the output:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A range-based <ph id="ph1">`for`</ph> loop terminates when one of these in <ph id="ph2">`statement`</ph> is executed: a <bpt id="p1">[</bpt>break<ept id="p1">](../cpp/break-statement-cpp.md)</ept>, <bpt id="p2">[</bpt>return<ept id="p2">](../cpp/return-statement-cpp.md)</ept>, or <bpt id="p3">[</bpt>goto<ept id="p3">](../cpp/goto-statement-cpp.md)</ept> to a labeled statement outside the range-based <bpt id="p4">**</bpt>for<ept id="p4">**</ept> loop.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>continue<ept id="p1">](../cpp/continue-statement-cpp.md)</ept> statement in a range-based <ph id="ph1">`for`</ph> loop terminates only the current iteration.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Keep in mind these facts about range-based <ph id="ph1">`for`</ph>:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Automatically recognizes arrays.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Recognizes containers that have <ph id="ph1">`.begin()`</ph> and <ph id="ph2">`.end()`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Uses argument-dependent lookup <ph id="ph1">`begin()`</ph> and <ph id="ph2">`end()`</ph> for anything else.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>auto</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Iteration Statements</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>while Statement (C++)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>do-while Statement (C++)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>for Statement (C++)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>