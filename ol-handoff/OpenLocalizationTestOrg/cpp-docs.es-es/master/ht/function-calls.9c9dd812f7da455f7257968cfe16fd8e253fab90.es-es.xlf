<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fab73f1e4de19ebff8e54391530a842a12aaf366</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\function-calls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36e473f1a78269498cdea5ff7b65ff8192fbb4dd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d52dfbc5724ee5cad8ca58fd725c99601dc366f4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Function Calls | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Function Calls</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>function call<ept id="p1">*</ept> is an expression that passes control and arguments (if any) to a function and has the form:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expression<ept id="p1">*</ept> (<bpt id="p2">*</bpt>expression-list<ept id="p2">*</ept>opt)</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is a function name or evaluates to a function address and <bpt id="p2">*</bpt>expression-list<ept id="p2">*</ept> is a list of expressions (separated by commas).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The values of these latter expressions are the arguments passed to the function.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If the function does not return a value, then you declare it to be a function that returns <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If a declaration exists before the function call, but no information is given concerning the parameters, any undeclared arguments simply undergo the usual arithmetic conversions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The expressions in the function argument list can be evaluated in any order, so arguments whose values may be changed by side effects from another argument have undefined values.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The sequence point defined by the function-call operator guarantees only that all side effects in the argument list are evaluated before control passes to the called function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>(Note that the order in which arguments are pushed on the stack is a separate matter.) See <bpt id="p1">[</bpt>Sequence Points<ept id="p1">](../c-language/c-sequence-points.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The only requirement in any function call is that the expression before the parentheses must evaluate to a function address.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This means that a function can be called through any function-pointer expression.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This example illustrates function calls called from a <ph id="ph1">`switch`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this example, the function call in <ph id="ph1">`main`</ph>,</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>passes an integer variable, <ph id="ph1">`count`</ph>, and the address of the function <ph id="ph2">`lift`</ph> to the function <ph id="ph3">`work`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that the function address is passed simply by giving the function identifier, since a function identifier evaluates to a pointer expression.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To use a function identifier in this way, the function must be declared or defined before the identifier is used; otherwise, the identifier is not recognized.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this case, a prototype for <ph id="ph1">`work`</ph> is given at the beginning of the <ph id="ph2">`main`</ph> function.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`function`</ph> in <ph id="ph2">`work`</ph> is declared to be a pointer to a function taking one <ph id="ph3">`int`</ph> argument and returning a <bpt id="p1">**</bpt>long<ept id="p1">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The parentheses around the parameter name are required; without them, the declaration would specify a function returning a pointer to a <bpt id="p1">**</bpt>long<ept id="p1">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The function <ph id="ph1">`work`</ph> calls the selected function from inside the <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop by using the following function call:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>One argument, <ph id="ph1">`i`</ph>, is passed to the called function.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>