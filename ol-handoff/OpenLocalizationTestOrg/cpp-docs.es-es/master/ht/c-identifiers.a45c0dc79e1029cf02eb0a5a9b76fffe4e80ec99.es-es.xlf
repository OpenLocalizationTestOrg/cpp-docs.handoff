<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ba460b87402e11171e3386dd3ea8f7235c7412e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-identifiers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac635e378c61715e4d7e682cfb25220665256e5d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8551d01120fee7813de4ed2d913a73e0abb9989</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Identifiers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Identifiers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>"Identifiers" or "symbols" are the names you supply for variables, types, functions, and labels in your program.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Identifier names must differ in spelling and case from any keywords.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You cannot use keywords (either C or Microsoft) as identifiers; they are reserved for special use.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You create an identifier by specifying it in the declaration of a variable, type, or function.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`result`</ph> is an identifier for an integer variable, and <ph id="ph2">`main`</ph> and <ph id="ph3">`printf`</ph> are identifier names for functions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Once declared, you can use the identifier in later program statements to refer to the associated value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A special kind of identifier, called a statement label, can be used in <ph id="ph1">`goto`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>(Declarations are described in <bpt id="p1">[</bpt>Declarations and Types<ept id="p1">](../c-language/declarations-and-types.md)</ept> Statement labels are described in <bpt id="p2">[</bpt>The goto and Labeled Statements<ept id="p2">](../c-language/goto-and-labeled-statements-c.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>identifier<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>nondigit</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>identifier nondigit</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>identifier digit</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>: one of</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>_ a b c d e f g h i j k l m n o p q r s t u v w x y z</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>: one of</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>0 1 2 3 4 5 6 7 8 9</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The first character of an identifier name must be a <ph id="ph1">`nondigit`</ph> (that is, the first character must be an underscore or an uppercase or lowercase letter).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>ANSI allows six significant characters in an external identifier's name and 31 for names of internal (within a function) identifiers.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>External identifiers (ones declared at global scope or declared with storage class <ph id="ph1">`extern`</ph>) may be subject to additional naming restrictions because these identifiers have to be processed by other software such as linkers.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Although ANSI allows 6 significant characters in external identifier names and 31 for names of internal (within a function) identifiers, the Microsoft C compiler allows 247 characters in an internal or external identifier name.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you aren't concerned with ANSI compatibility, you can modify this default to a smaller or larger number using the /H (restrict length of external names) option.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The C compiler considers uppercase and lowercase letters to be distinct characters.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This feature, called "case sensitivity," enables you to create distinct identifiers that have the same spelling but different cases for one or more of the letters.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, each of the following identifiers is unique:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Do not select names for identifiers that begin with two underscores or with an underscore followed by an uppercase letter.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The ANSI C standard allows identifier names that begin with these character combinations to be reserved for compiler use.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Identifiers with file-level scope should also not be named with an underscore and a lowercase letter as the first two letters.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Identifier names that begin with these characters are also reserved.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>By convention, Microsoft uses an underscore and an uppercase letter to begin macro names and double underscores for Microsoft-specific keyword names.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To avoid any naming conflicts, always select identifier names that do not begin with one or two underscores, or names that begin with an underscore followed by an uppercase letter.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following are examples of valid identifiers that conform to either ANSI or Microsoft naming restrictions:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Although identifiers in source files are case sensitive by default, symbols in object files are not.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Microsoft C treats identifiers within a compilation unit as case sensitive.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The Microsoft linker is case sensitive.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You must specify all identifiers consistently according to case.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The "source character set" is the set of legal characters that can appear in source files.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For Microsoft C, the source set is the standard ASCII character set.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The source character set and execution character set include the ASCII characters used as escape sequences.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Character Constants<ept id="p1">](../c-language/c-character-constants.md)</ept> for information about the execution character set.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An identifier has "scope," which is the region of the program in which it is known, and "linkage," which determines whether the same name in another scope refers to the same identifier.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These topics are explained in <bpt id="p1">[</bpt>Lifetime, Scope, Visibility, and Linkage<ept id="p1">](../c-language/lifetime-scope-visibility-and-linkage.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Elements of C</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>