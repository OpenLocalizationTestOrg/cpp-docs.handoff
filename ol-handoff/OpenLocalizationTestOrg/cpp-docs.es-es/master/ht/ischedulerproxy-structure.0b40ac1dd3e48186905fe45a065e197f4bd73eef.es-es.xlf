<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a282e397186ee4ab3eda4f882b9c9fc89ff353f2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\reference\ischedulerproxy-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc3a5e791c95f7406875d3b35c33e6f9a666cc2d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">308faa82bc14bc94d62406988f0212208d5862d2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy Structure | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy Structure</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The interface by which schedulers communicate with the Concurrency Runtime's Resource Manager to negotiate resource allocation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::BindContext Method</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Associates an execution context with a thread proxy, if it is not already associated with one.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::CreateOversubscriber Method</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creates a new virtual processor root on the hardware thread associated with an existing execution resource.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::RequestInitialVirtualProcessors Method</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Requests an initial allocation of virtual processor roots.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Every virtual processor root represents the ability to execute one thread that can perform work for the scheduler.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::Shutdown Method</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Notifies the Resource Manager that the scheduler is shutting down.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This will cause the Resource Manager to immediately reclaim all resources granted to the scheduler.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::SubscribeCurrentThread Method</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Registers the current thread with the Resource Manager, associating it with this scheduler.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::UnbindContext Method</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Disassociates a thread proxy from the execution context specified by the <ph id="ph1">`pContext`</ph> parameter and returns it to the thread proxy factory's free pool.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This method may only be called on an execution context which was bound via the <bpt id="p1">[</bpt>ISchedulerProxy::BindContext<ept id="p1">](#bindcontext)</ept> method and has not yet been started via being the <ph id="ph1">`pContext`</ph> parameter of an <bpt id="p2">[</bpt>IThreadProxy::SwitchTo<ept id="p2">](ithreadproxy-structure.md#switchto)</ept> method call.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The Resource Manager hands an <ph id="ph1">`ISchedulerProxy`</ph> interface to every scheduler that registers with it using the <bpt id="p1">[</bpt>IResourceManager::RegisterScheduler<ept id="p1">](iresourcemanager-structure.md#registerscheduler)</ept> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> concrtrm.h</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> concurrency</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::BindContext Method</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Associates an execution context with a thread proxy, if it is not already associated with one.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An interface to the execution context to associate with a thread proxy.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Normally, the <bpt id="p1">[</bpt>IThreadProxy::SwitchTo<ept id="p1">](ithreadproxy-structure.md#switchto)</ept> method will bind a thread proxy to an execution context on demand.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>There are, however, circumstances where it is necessary to bind a context in advance to ensure that the <ph id="ph1">`SwitchTo`</ph> method switches to an already bound context.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is the case on a UMS scheduling context as it cannot call methods that allocate memory, and binding a thread proxy may involve memory allocation if a thread proxy is not readily available in the free pool of the thread proxy factory.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>is thrown if the parameter <ph id="ph1">`pContext`</ph> has the value <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::CreateOversubscriber Method</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Creates a new virtual processor root on the hardware thread associated with an existing execution resource.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`IExecutionResource`</ph> interface that represents the hardware thread you want to oversubscribe.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`IVirtualProcessorRoot`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Use this method when your scheduler wants to oversubscribe a particular hardware thread for a limited amount of time.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Once you are done with the virtual processor root, you should return it to the resource manager by calling the <bpt id="p1">[</bpt>Remove<ept id="p1">](iexecutionresource-structure.md#remove)</ept> method on the <ph id="ph1">`IVirtualProcessorRoot`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can even oversubscribe an existing virtual processor root, because the <ph id="ph1">`IVirtualProcessorRoot`</ph> interface inherits from the <ph id="ph2">`IExecutionResource`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::RequestInitialVirtualProcessors Method</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Requests an initial allocation of virtual processor roots.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Every virtual processor root represents the ability to execute one thread that can perform work for the scheduler.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Whether to subscribe the current thread and account for it during resource allocation.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IExecutionResource`</ph> interface for the current thread, if the parameter <ph id="ph2">`doSubscribeCurrentThread`</ph> has the value <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the value is <ph id="ph1">`false`</ph>, the method returns <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Before a scheduler executes any work, it should use this method to request virtual processor roots from the Resource Manager.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The Resource Manager will access the scheduler's policy using <bpt id="p1">[</bpt>IScheduler::GetPolicy<ept id="p1">](ischeduler-structure.md#getpolicy)</ept> and use the values for the policy keys <ph id="ph1">`MinConcurrency`</ph>, <ph id="ph2">`MaxConcurrency`</ph> and <ph id="ph3">`TargetOversubscriptionFactor`</ph> to determine how many hardware threads to assign to the scheduler initially and how many virtual processor roots to create for every hardware thread.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information on how scheduler policies are used to determine a scheduler's initial allocation, see <bpt id="p1">[</bpt>PolicyElementKey<ept id="p1">](concurrency-namespace-enums.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The Resource Manager grants resources to a scheduler by calling the method <bpt id="p1">[</bpt>IScheduler::AddVirtualProcessors<ept id="p1">](ischeduler-structure.md#addvirtualprocessors)</ept> with a list of virtual processor roots.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The method is invoked as a callback into the scheduler before this method returns.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the scheduler requested subscription for the current thread by setting the parameter <ph id="ph1">`doSubscribeCurrentThread`</ph> to <ph id="ph2">`true`</ph>, the method returns an <ph id="ph3">`IExecutionResource`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The subscription must be terminated at a later point by using the <bpt id="p1">[</bpt>IExecutionResource::Remove<ept id="p1">](iexecutionresource-structure.md#remove)</ept> method.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When determining which hardware threads are selected, the Resource Manager will attempt to optimize for processor node affinity.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If subscription is requested for the current thread, it is an indication that the current thread intends to participate in the work assigned to this scheduler.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In such a case, the allocated virtual processors roots are located on the processor node the current thread is executing on, if possible.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The act of subscribing a thread increases the subscription level of the underlying hardware thread by one.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The subscription level is reduced by one when the subscription is terminated.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For more information on subscription levels, see <bpt id="p1">[</bpt>IExecutionResource::CurrentSubscriptionLevel<ept id="p1">](iexecutionresource-structure.md#currentsubscriptionlevel)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::Shutdown Method</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Notifies the Resource Manager that the scheduler is shutting down.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This will cause the Resource Manager to immediately reclaim all resources granted to the scheduler.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">`IExecutionContext`</ph> interfaces the scheduler received as a result of subscribing an external thread using the methods <ph id="ph2">`ISchedulerProxy::RequestInitialVirtualProcessors`</ph> or <ph id="ph3">`ISchedulerProxy::SubscribeCurrentThread`</ph> must be returned to the Resource Manager using <ph id="ph4">`IExecutionResource::Remove`</ph> before a scheduler shuts itself down.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If your scheduler had any deactivated virtual processor roots, you must activate them using <bpt id="p1">[</bpt>IVirtualProcessorRoot::Activate<ept id="p1">](ivirtualprocessorroot-structure.md#activate)</ept>, and have the thread proxies executing on them leave the <ph id="ph1">`Dispatch`</ph> method of the execution contexts they are dispatching before you invoke <ph id="ph2">`Shutdown`</ph> on a scheduler proxy.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>It is not necessary for the scheduler to individually return all of the virtual processor roots the Resource Manager granted to it via calls to the <ph id="ph1">`Remove`</ph> method because all virtual processors roots will be returned to the Resource Manager at shutdown.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::SubscribeCurrentThread Method</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Registers the current thread with the Resource Manager, associating it with this scheduler.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IExecutionResource`</ph> interfacing representing the current thread in the runtime.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Use this method if you want the Resource Manager to account for the current thread while allocating resources to your scheduler and other schedulers.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>It is especially useful when the thread plans to participate in the work queued to your scheduler, along with the virtual processor roots the scheduler receives from the Resource Manager.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The Resource Manager uses information to prevent unnecessary oversubscription of hardware threads on the system.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The execution resource received via this method should be returned to the Resource Manager using the <bpt id="p1">[</bpt>IExecutionResource::Remove<ept id="p1">](iexecutionresource-structure.md#remove)</ept> method.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The thread that calls the <ph id="ph1">`Remove`</ph> method must be the same thread that previously called the <ph id="ph2">`SubscribeCurrentThread`</ph> method.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The act of subscribing a thread increases the subscription level of the underlying hardware thread by one.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The subscription level is reduced by one when the subscription is terminated.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For more information on subscription levels, see <bpt id="p1">[</bpt>IExecutionResource::CurrentSubscriptionLevel<ept id="p1">](iexecutionresource-structure.md#currentsubscriptionlevel)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>ISchedulerProxy::UnbindContext Method</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Disassociates a thread proxy from the execution context specified by the <ph id="ph1">`pContext`</ph> parameter and returns it to the thread proxy factory's free pool.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This method may only be called on an execution context which was bound via the <bpt id="p1">[</bpt>ISchedulerProxy::BindContext<ept id="p1">](#bindcontext)</ept> method and has not yet been started via being the <ph id="ph1">`pContext`</ph> parameter of an <bpt id="p2">[</bpt>IThreadProxy::SwitchTo<ept id="p2">](ithreadproxy-structure.md#switchto)</ept> method call.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The execution context to disassociate from its thread proxy.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>concurrency Namespace</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>IScheduler Structure</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>IThreadProxy Structure</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>IVirtualProcessorRoot Structure</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>IResourceManager Structure</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>