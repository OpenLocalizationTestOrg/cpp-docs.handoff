<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1589fc08d7d486fdb96016132fd551f1b5d87e6c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\kernel-create-kernel-mode-binary.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9780676ee1e0cd79b9585a19c77ed29bf31b3356</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a182b6025fc53a8af6e86899b453dbfeb0c9b8aa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>-kernel (Create Kernel Mode Binary) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/kernel (Create Kernel Mode Binary)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creates a binary that can be executed in the Windows kernel.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>/kernel</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The code in the current project is compiled and linked by using a set of C++ language rules that are specific to code that will run in kernel mode.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>/kernel-</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The code in the current project is compiled and linked without using the C++ language rules that are specific to code that will run in kernel mode.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There is no <ph id="ph1">`#pragma`</ph> equivalent to control this option.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Specifying the <bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept> option tells the compiler and linker to arbitrate which language features are permissible in kernel mode and to make sure that that you have sufficient expressive power to avoid runtime instability that is unique to kernel mode C++.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This is accomplished by prohibiting the use of C++ language features that are disruptive in kernel mode and by providing warnings for C++ language features that are potentially disruptive but cannot be disabled.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept> option applies to both the compiler and linker phases of a build and is set at the project level.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Pass the <bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept> switch to indicate to the compiler that the resulting binary, after linking, should be loaded into the Windows kernel.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The compiler will narrow the spectrum of C++ language features to a subset that is compatible with the kernel.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following table lists changes in compiler behavior when <bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept> is specified.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Behavior Type</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept> Behavior</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>C++ Exception Handling</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Disabled.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>All instances of the <ph id="ph1">`throw`</ph> and <ph id="ph2">`try`</ph> keywords emit a compiler error (except for the exception specification <ph id="ph3">`throw()`</ph>).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>No <bpt id="p1">**</bpt>/EH<ept id="p1">**</ept> options are compatible with <bpt id="p2">**</bpt>/kernel<ept id="p2">**</ept>, except for <bpt id="p3">**</bpt>/EH-<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>RTTI</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Disabled.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>All instances of the <ph id="ph1">`dynamic_cast`</ph> and <ph id="ph2">`typeid`</ph> keywords emit a compiler error, unless <ph id="ph3">`dynamic_cast`</ph> is used statically.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>and</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You must explicitly define the <ph id="ph1">`new()`</ph> or <ph id="ph2">`delete()`</ph> operator; neither the compiler nor the runtime will supply a default definition.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Custom calling conventions, the <bpt id="p1">[</bpt>/GS<ept id="p1">](../../build/reference/gs-buffer-security-check.md)</ept> build option, and all optimizations are permitted when you use the <bpt id="p2">**</bpt>/kernel<ept id="p2">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Inlining is largely not affected by <bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept>, with the same semantics honored by the compiler.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you want to make sure that the <ph id="ph1">`__forceinline`</ph> inlining qualifier is honored, you must make sure that warning <bpt id="p1">[</bpt>C4714<ept id="p1">](../../error-messages/compiler-warnings/compiler-warning-level-4-c4714.md)</ept> is enabled so that you know when a particular <ph id="ph2">`__forceinline`</ph> function is not inlined.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When the compiler is passed the <bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept> switch, it predefines a preprocessor macro that's named <ph id="ph1">`_KERNEL_MODE`</ph> and has the value <bpt id="p2">**</bpt>1<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can use this to conditionally compile code based on whether the execution environment is in user mode or kernel mode.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, the following code specifies that the class should be in a non-pageable memory segment when it is compiled for kernel mode execution.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Some the following combinations of target architecture and the <bpt id="p1">**</bpt>/arch<ept id="p1">**</ept> option produce an error when they are used with <bpt id="p2">**</bpt>/kernel<ept id="p2">**</ept>:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/arch:{SSE&amp;#124;SSE2&amp;#124;AVX}<ept id="p1">**</ept> are not supported on x86.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Only <bpt id="p1">**</bpt>/arch:IA32<ept id="p1">**</ept> is supported with <bpt id="p2">**</bpt>/kernel<ept id="p2">**</ept> on x86.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/arch:AVX<ept id="p1">**</ept> is not supported with <bpt id="p2">**</bpt>/kernel<ept id="p2">**</ept> on x64.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Building with <bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept> also passes <bpt id="p2">**</bpt>/kernel<ept id="p2">**</ept> to the linker.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Her's how this affects linker behavior:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Incremental linking is disabled.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you add <bpt id="p1">**</bpt>/incremental<ept id="p1">**</ept> to the command line, the linker emits this fatal error:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>LINK : fatal error LNK1295: '/INCREMENTAL' not compatible with '/KERNEL' specification; link without '/INCREMENTAL'</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The linker inspects each object file (or any included archive member from static libraries) to see whether it could have been compiled by using the <bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept> option but was not.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If any instances meet this criterion, the linker still successfully links but might issue a warning, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept> obj</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/kernel-<ept id="p1">**</ept> obj, MASM obj, or cvtresed</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Mix of <bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept> and <bpt id="p2">**</bpt>/kernel-<ept id="p2">**</ept> objs</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>link /kernel</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Yes with warning LNK4257</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>link</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>LNK4257 linking object not compiled with /KERNEL ; image may not run</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/kernel<ept id="p1">**</ept> option and the <bpt id="p2">**</bpt>/driver<ept id="p2">**</ept> option operate independently and neither affects the other.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To set the /kernel compiler option in Visual Studio</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box for the project.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Working with Project Properties<ept id="p1">](../../ide/working-with-project-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>C/C++<ept id="p1">**</ept> folder.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Command Line<ept id="p1">**</ept> property page.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Additional options<ept id="p1">**</ept> box, add <ph id="ph1">`/kernel`</ph> or <ph id="ph2">`/kernel-`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Compiler Options</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Setting Compiler Options</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>