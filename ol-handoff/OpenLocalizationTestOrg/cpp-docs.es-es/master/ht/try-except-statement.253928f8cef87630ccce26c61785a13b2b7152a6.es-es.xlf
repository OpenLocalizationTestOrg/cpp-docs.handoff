<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64bafde1d591b7d7847a9801f65ca91911f9a621</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\try-except-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0023fde62a578adf283de832b5955267555fba45</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33b98228924c26022274fde321bd791da9cdca02</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>try-except Statement | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>try-except Statement</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following syntax describes a try-except statement:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>try-except<ept id="p1">**</ept> statement is a Microsoft extension to the C and C++ languages that enables target applications to gain control when events that normally terminate program execution occur.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Such events are called exceptions, and the mechanism that deals with exceptions is called structured exception handling.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For related information, see the <bpt id="p1">[</bpt>try-finally statement<ept id="p1">](../cpp/try-finally-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Exceptions can be either hardware-based or software-based.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Even when applications cannot completely recover from hardware or software exceptions, structured exception handling makes it possible to display error information and trap the internal state of the application to help diagnose the problem.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is especially useful for intermittent problems that cannot be reproduced easily.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Structured exception handling works with Win32 for both C and C++ source files.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, it is not specifically designed for C++.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can ensure that your code is more portable by using C++ exception handling.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Also, C++ exception handling is more flexible, in that it can handle exceptions of any type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For C++ programs, it is recommended that you use the C++ exception-handling mechanism (<bpt id="p1">[</bpt>try, catch, and throw<ept id="p1">](../cpp/try-throw-and-catch-statements-cpp.md)</ept> statements).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The compound statement after the <ph id="ph1">`__try`</ph> clause is the body or guarded section.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The compound statement after the <ph id="ph1">`__except`</ph> clause is the exception handler.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The handler specifies a set of actions to be taken if an exception is raised during execution of the body of the guarded section.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Execution proceeds as follows:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The guarded section is executed.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If no exception occurs during execution of the guarded section, execution continues at the statement after the <ph id="ph1">`__except`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If an exception occurs during execution of the guarded section or in any routine the guarded section calls, the <ph id="ph1">`__except`</ph> <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> (called the <bpt id="p2">*</bpt>filter<ept id="p2">*</ept> expression) is evaluated and the value determines how the exception is handled.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>There are three values:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EXCEPTION_CONTINUE_EXECUTION (â€“1)<ept id="p1">**</ept> Exception is dismissed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Continue execution at the point where the exception occurred.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EXCEPTION_CONTINUE_SEARCH (0)<ept id="p1">**</ept> Exception is not recognized.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Continue to search up the stack for a handler, first for containing <bpt id="p1">**</bpt>try-except<ept id="p1">**</ept> statements, then for handlers with the next highest precedence.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EXCEPTION_EXECUTE_HANDLER (1)<ept id="p1">**</ept> Exception is recognized.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Transfer control to the exception handler by executing the <ph id="ph1">`__except`</ph> compound statement, then continue execution after the <ph id="ph2">`__except`</ph> block.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Because the __<bpt id="p1">**</bpt>except<ept id="p1">**</ept> expression is evaluated as a C expression, it is limited to a single value, the conditional-expression operator, or the comma operator.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If more extensive processing is required, the expression can call a routine that returns one of the three values listed above.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Each application can have its own exception handler.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It is not valid to jump into a <ph id="ph1">`__try`</ph> statement, but valid to jump out of one.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The exception handler is not called if a process is terminated in the middle of executing a <bpt id="p1">**</bpt>try-except<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see Knowledge Base article Q315937 : HOW TO: Trap Stack Overflow in a Visual C++ Application.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The __leave Keyword</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__leave`</ph> keyword is valid only within the guarded section of a <ph id="ph2">`try-except`</ph> statement, and its effect is to jump to the end of the guarded section.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Execution continues at the first statement after the exception handler.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`goto`</ph> statement can also jump out of the guarded section, and it does not degrade performance as it does in a <ph id="ph2">`try-finally`</ph> statement because stack unwinding does not occur.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However, we recommend that you use the <ph id="ph1">`__leave`</ph> keyword rather than a <ph id="ph2">`goto`</ph> statement because you are less likely to make a programming mistake if the guarded section is large or complex.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Structured Exception Handling Intrinsic Functions</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Structured exception handling provides two intrinsic functions that are available to use with the <bpt id="p1">**</bpt>try-except<ept id="p1">**</ept> statement: <bpt id="p2">**</bpt>GetExceptionCode<ept id="p2">**</ept> and <bpt id="p3">**</bpt>GetExceptionInformation<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetExceptionCode<ept id="p1">**</ept> returns the code (a 32-bit integer) of the exception.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The intrinsic function <bpt id="p1">**</bpt>GetExceptionInformation<ept id="p1">**</ept> returns a pointer to a structure containing additional information about the exception.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Through this pointer, you can access the machine state that existed at the time of a hardware exception.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The structure is as follows:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The pointer types _<bpt id="p1">**</bpt>EXCEPTION_RECORD<ept id="p1">**</ept> and <ph id="ph1">\_</ph><bpt id="p2">**</bpt>CONTEXT<ept id="p2">**</ept> are defined in the include file EXCPT.H.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>GetExceptionCode<ept id="p1">**</ept> within the exception handler.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>However, you can use <bpt id="p1">**</bpt>GetExceptionInformation<ept id="p1">**</ept> only within the exception filter expression.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The information it points to is generally on the stack and is no longer available when control is transferred to the exception handler.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The intrinsic function <bpt id="p1">**</bpt>AbnormalTermination<ept id="p1">**</ept> is available within a termination handler.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It returns 0 if the body of the <ph id="ph1">`try-finally`</ph> statement terminates sequentially.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In all other cases, it returns 1.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>EXCPT.H defines some alternate names for these intrinsics:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetExceptionCode<ept id="p1">**</ept> is equivalent to _exception_code</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetExceptionInformation<ept id="p1">**</ept> is equivalent to _exception_info</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AbnormalTermination<ept id="p1">**</ept> is equivalent to _abnormal_termination</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Writing an Exception Handler</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Structured Exception Handling (C/C++)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>