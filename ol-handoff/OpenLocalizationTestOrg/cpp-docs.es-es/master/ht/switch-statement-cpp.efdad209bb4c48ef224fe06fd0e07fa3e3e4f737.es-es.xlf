<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10f2849ee27e46200f38f76adefcd79856e38f19</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\switch-statement-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eff35e93b2c55b208b10782995c65236991dc785</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b413a911f4332cf628d5303e8fd5f0855f827723</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>switch Statement (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>switch Statement (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allows selection among multiple sections of code, depending on the value of an integral expression.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> must be of an integral type or of a class type for which there is an unambiguous conversion to integral type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Integral promotion is performed as described in <bpt id="p1">[</bpt>Standard Conversions<ept id="p1">](standard-conversions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`switch`</ph> statement body consists of a series of <bpt id="p1">**</bpt>case<ept id="p1">**</ept> labels and an optional <bpt id="p2">**</bpt>default<ept id="p2">**</ept> label.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>No two constant expressions in <bpt id="p1">**</bpt>case<ept id="p1">**</ept> statements can evaluate to the same value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>default<ept id="p1">**</ept> label can appear only once.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The labeled statements are not syntactic requirements, but the <ph id="ph1">`switch`</ph> statement is meaningless without them.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The default statement need not come at the end; it can appear anywhere in the body of the switch statement.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A case or default label can only appear inside a switch statement.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept> in each <bpt id="p2">**</bpt>case<ept id="p2">**</ept> label is converted to the type of <bpt id="p3">*</bpt>expression<ept id="p3">*</ept> and compared with <bpt id="p4">*</bpt>expression<ept id="p4">*</ept> for equality.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Control passes to the statement whose <bpt id="p1">**</bpt>case<ept id="p1">**</ept> <bpt id="p2">*</bpt>constant-expression<ept id="p2">*</ept> matches the value of <bpt id="p3">*</bpt>expression<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The resulting behavior is shown in the following table.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Switch Statement Behavior</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Action</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Converted value matches that of the promoted controlling expression.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Control is transferred to the statement following that label.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>None of the constants match the constants in the <bpt id="p1">**</bpt>case<ept id="p1">**</ept> labels; a <bpt id="p2">**</bpt>default<ept id="p2">**</ept> label is present.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Control is transferred to the <bpt id="p1">**</bpt>default<ept id="p1">**</ept> label.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>None of the constants match the constants in the <bpt id="p1">**</bpt>case<ept id="p1">**</ept> labels; <bpt id="p2">**</bpt>default<ept id="p2">**</ept> label is not present.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Control is transferred to the statement after the <ph id="ph1">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If a matching expression is found, control is not impeded by subsequent <bpt id="p1">**</bpt>case<ept id="p1">**</ept> or <bpt id="p2">**</bpt>default<ept id="p2">**</ept> labels.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>break<ept id="p1">](../cpp/break-statement-cpp.md)</ept> statement is used to stop execution and transfer control to the statement after the <ph id="ph1">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Without a <bpt id="p1">**</bpt>break<ept id="p1">**</ept> statement, every statement from the matched <bpt id="p2">**</bpt>case<ept id="p2">**</ept> label to the end of the <ph id="ph1">`switch`</ph>, including the <bpt id="p3">**</bpt>default<ept id="p3">**</ept>, is executed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the above example, <ph id="ph1">`capa`</ph> is incremented if <ph id="ph2">`c`</ph> is an uppercase <ph id="ph3">`A`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`break`</ph> statement after <ph id="ph2">`capa++`</ph> terminates execution of the <ph id="ph3">`switch`</ph> statement body and control passes to the <ph id="ph4">`while`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Without the <ph id="ph1">`break`</ph> statement, <ph id="ph2">`lettera`</ph> and <ph id="ph3">`nota`</ph> would also be incremented.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A similar purpose is served by the <ph id="ph1">`break`</ph> statement for <ph id="ph2">`case 'a'`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`c`</ph> is a lowercase <ph id="ph2">`a`</ph>, <ph id="ph3">`lettera`</ph> is incremented and the <ph id="ph4">`break`</ph> statement terminates the <ph id="ph5">`switch`</ph> statement body.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`c`</ph> is not an <ph id="ph2">`a`</ph> or <ph id="ph3">`A`</ph>, the <ph id="ph4">`default`</ph> statement is executed.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An inner block of a <ph id="ph1">`switch`</ph> statement can contain definitions with initializations as long as they are reachable â€” that is, not bypassed by all possible execution paths.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Names introduced using these declarations have local scope.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`switch`</ph> statement can be nested.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In such cases, <bpt id="p1">**</bpt>case<ept id="p1">**</ept> or <bpt id="p2">**</bpt>default<ept id="p2">**</ept> labels associate with the closest <ph id="ph1">`switch`</ph> statement that encloses them.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Microsoft C does not limit the number of case values in a <ph id="ph1">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The number is limited only by the available memory.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>ANSI C requires at least 257 case labels be allowed in a <ph id="ph1">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The default for Microsoft C is that the Microsoft extensions are enabled.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>/Za<ept id="p1">](../build/reference/za-ze-disable-language-extensions.md)</ept> compiler option to disable these extensions.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Selection Statements</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>