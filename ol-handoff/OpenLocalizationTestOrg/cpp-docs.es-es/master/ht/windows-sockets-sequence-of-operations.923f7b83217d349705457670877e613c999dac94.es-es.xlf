<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ea1235f1d5b0d722a492b40d141365b10db1d9a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\windows-sockets-sequence-of-operations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ffa644a755cbf70d1cbf5716956b8cba5b9d8c2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4016dffd0d5c2357234dd01d673b544ee49f5265</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Sequence of Operations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Sequence of Operations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article illustrates, side by side, the sequence of operations for a server socket and a client socket.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because the sockets use <ph id="ph1">`CArchive`</ph> objects, they are necessarily <bpt id="p1">[</bpt>stream sockets<ept id="p1">](../mfc/windows-sockets-stream-sockets.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Sequence of Operations for a Stream Socket Communication</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Up to the point of constructing a <ph id="ph1">`CSocketFile`</ph> object, the following sequence is accurate (with a few parameter differences) for both <ph id="ph2">`CAsyncSocket`</ph> and <ph id="ph3">`CSocket`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>From that point on, the sequence is strictly for <ph id="ph1">`CSocket`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following table illustrates the sequence of operations for setting up communication between a client and a server.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Setting Up Communication Between a Server and a Client</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Server</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Client</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>1,2</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>3,4</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>5</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>– or Both –</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>– or Both –</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>6</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>6</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Where <ph id="ph1">`nPort`</ph> is a port number.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Windows Sockets: Ports and Socket Addresses<ept id="p1">](../mfc/windows-sockets-ports-and-socket-addresses.md)</ept> for details about ports.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The server must always specify a port so clients can connect.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> call sometimes also specifies an address.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>On the client side, use the default parameters, which ask MFC to use any available port.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Where <ph id="ph1">`nPort`</ph> is a port number and <bpt id="p1">*</bpt>strAddr<ept id="p1">*</ept> is a machine address or an Internet Protocol (IP) address.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Machine addresses can take several forms: "ftp.microsoft.com", "microsoft.com".</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>IP addresses use the "dotted number" form "127.54.67.32".</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Connect<ept id="p1">**</ept> function checks to see if the address is a dotted number (although it does not check to ensure the number is a valid machine on the network).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If not, <bpt id="p1">**</bpt>Connect<ept id="p1">**</ept> assumes a machine name of one of the other forms.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you call <bpt id="p1">**</bpt>Accept<ept id="p1">**</ept> on the server side, you pass a reference to a new socket object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You must construct this object first, but do not call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> for it.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Keep in mind that if this socket object goes out of scope, the connection closes.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>MFC connects the new object to a <bpt id="p1">**</bpt>SOCKET<ept id="p1">**</ept> handle.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can construct the socket on the stack, as shown, or on the heap.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The archive and the socket file are closed when they go out of scope.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The socket object's destructor also calls the <bpt id="p1">[</bpt>Close<ept id="p1">](../mfc/reference/casyncsocket-class.md#casyncsocket__close)</ept> member function for the socket object when the object goes out of scope or is deleted.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Additional Notes About the Sequence</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The sequence of calls shown in the preceding table is for a stream socket.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Datagram sockets, which are connectionless, do not require the <bpt id="p1">[</bpt>CAsyncSocket::Connect<ept id="p1">](../mfc/reference/casyncsocket-class.md#casyncsocket__connect)</ept>, <bpt id="p2">[</bpt>Listen<ept id="p2">](../mfc/reference/casyncsocket-class.md#casyncsocket__listen)</ept>, and <bpt id="p3">[</bpt>Accept<ept id="p3">](../mfc/reference/casyncsocket-class.md#casyncsocket__accept)</ept> calls (although you can optionally use <bpt id="p4">**</bpt>Connect<ept id="p4">**</ept>).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Instead, if you are using class <ph id="ph1">`CAsyncSocket`</ph>, datagram sockets use the <ph id="ph2">`CAsyncSocket::SendTo`</ph> and <ph id="ph3">`ReceiveFrom`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(If you use <bpt id="p1">**</bpt>Connect<ept id="p1">**</ept> with a datagram socket, you use <bpt id="p2">**</bpt>Send<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Receive<ept id="p3">**</ept>.) Because <ph id="ph1">`CArchive`</ph> does not work with datagrams, do not use <ph id="ph2">`CSocket`</ph> with an archive if the socket is a datagram.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CSocketFile<ept id="p1">](../mfc/reference/csocketfile-class.md)</ept> does not support all of <ph id="ph1">`CFile`</ph>'s functionality; <ph id="ph2">`CFile`</ph> members such as <ph id="ph3">`Seek`</ph>, which make no sense for a socket communication, are unavailable.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Because of this, some default MFC <ph id="ph1">`Serialize`</ph> functions are not compatible with <ph id="ph2">`CSocketFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This is particularly true of the <ph id="ph1">`CEditView`</ph> class.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You should not try to serialize <ph id="ph1">`CEditView`</ph> data through a <ph id="ph2">`CArchive`</ph> object attached to a <ph id="ph3">`CSocketFile`</ph> object using <ph id="ph4">`CEditView::SerializeRaw`</ph>; use <bpt id="p1">**</bpt>CEditView::Serialize<ept id="p1">**</ept> instead (not documented).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SerializeRaw<ept id="p1">](../mfc/reference/ceditview-class.md#ceditview__serializeraw)</ept> function expects the file object to have functions, such as <ph id="ph1">`Seek`</ph>, that <ph id="ph2">`CSocketFile`</ph> does not support.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Using Sockets with Archives</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Using Class CAsyncSocket</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Ports and Socket Addresses</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Stream Sockets</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Datagram Sockets</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Windows Sockets in MFC</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CSocket Class</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CAsyncSocket::Create</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CAsyncSocket::Close</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>