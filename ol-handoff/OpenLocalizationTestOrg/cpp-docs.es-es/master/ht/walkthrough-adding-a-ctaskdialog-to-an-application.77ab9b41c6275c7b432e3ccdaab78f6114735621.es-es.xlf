<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9547cfcf5836cd22d82993d60009eb0d0b49781b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\walkthrough-adding-a-ctaskdialog-to-an-application.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6253515173dad430ee8c5f820c45d095ec51cf01</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1dffe9749a0c1ad755c6cd4fbb4c2fd4ae1ff1c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Adding a CTaskDialog to an Application | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Adding a CTaskDialog to an Application</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This walkthrough introduces the <bpt id="p1">[</bpt>CTaskDialog Class<ept id="p1">](../mfc/reference/ctaskdialog-class.md)</ept> and shows you how to add one to your application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CTaskDialog`</ph> is a task dialog box that replaces the Windows message box in <ph id="ph2">[!INCLUDE[wiprlhext](../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CTaskDialog`</ph> improves the original message box and adds functionality.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Windows message box is still supported in <ph id="ph1">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Versions of Windows earlier than <ph id="ph1">[!INCLUDE[wiprlhext](../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> do not support the <ph id="ph2">`CTaskDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You must program an alternative dialog box option if you want to show a message to a user who runs your application on an earlier version of Windows.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can use the static method <bpt id="p1">[</bpt>CTaskDialog::IsSupported<ept id="p1">](../mfc/reference/ctaskdialog-class.md#ctaskdialog__issupported)</ept> to determine at run time whether a user's computer can display a <ph id="ph1">`CTaskDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`CTaskDialog`</ph> is only available when your application is built with the Unicode library.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CTaskDialog`</ph> supports several optional elements to gather and display information.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`CTaskDialog`</ph> can display command links, customized buttons, customized icons, and a footer.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CTaskDialog`</ph> also has several methods that enable you to query the state of the task dialog box to determine what optional elements the user selected.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You need the following components to complete this walkthrough:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Replacing a Windows Message Box with a CTaskDialog</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following procedure demonstrates the most basic use of the <ph id="ph1">`CTaskDialog`</ph>, which is to replace the Windows message box.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This example also changes the icon associated with the task dialog box.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Changing the icon makes the <ph id="ph1">`CTaskDialog`</ph> appear identical to the Windows message box.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To Replace a Windows Message Box with a CTaskDialog</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create a new MFC Application project with the default settings.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Call it <ph id="ph1">`MyProject`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> to open the file MyProject.cpp.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">`#include "afxtaskdialog.h"`</ph> after the list of includes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Find the method <ph id="ph1">`CMyProjectApp::InitInstance`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Insert the following lines of code before the <ph id="ph1">`return TRUE;`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This code creates the strings that we use in either the Windows message box or in the <ph id="ph1">`CTaskDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Add the following code after the code from step 4.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This code guarantees that the user's computer supports the <ph id="ph1">`CTaskDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the dialog is not supported, the application displays a Windows message box instead.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Insert the following code between the brackets after the <ph id="ph1">`if`</ph> statement from step 5.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This code creates the <ph id="ph1">`CTaskDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>On the next line, add the following code.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This code sets the warning icon.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>On the next line, add the following code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This code displays the task dialog box.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can omit step 7 if you do not want the <ph id="ph1">`CTaskDialog`</ph> to display the same icon as the Windows message box.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you omit that step, the <ph id="ph1">`CTaskDialog`</ph> has no icon when the application displays it.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Compile and run the application.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The application displays the task dialog box after it starts.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Adding Functionality to the CTaskDialog</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following procedure shows you how to add functionality to the <ph id="ph1">`CTaskDialog`</ph> that you created in the previous procedure.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The example code shows you how to execute specific instructions based on the user's selections.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To Add Functionality to the CTaskDialog</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Navigate to the <bpt id="p1">**</bpt>Resource View<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If you cannot see the <bpt id="p1">**</bpt>Resource View<ept id="p1">**</ept>, you can open it from the <bpt id="p2">**</bpt>View<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Expand the <bpt id="p1">**</bpt>Resource View<ept id="p1">**</ept> until you can select the <bpt id="p2">**</bpt>String Table<ept id="p2">**</ept> folder.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Expand it and double-click the <bpt id="p1">**</bpt>String Table<ept id="p1">**</ept> entry.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Scroll to the bottom of the string table and add a new entry.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Change the ID to <ph id="ph1">`TEMP_LINE1`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Set the caption to <bpt id="p1">**</bpt>Command Line 1<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Add another new entry.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Change the ID to <ph id="ph1">`TEMP_LINE2`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Set the caption to <bpt id="p1">**</bpt>Command Line 2<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Navigate back to MyProject.cpp.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`CString emptyString;`</ph>, add the following code:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Find the <ph id="ph1">`taskDialog.DoModal()`</ph> statement and replace that statement with the following code.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This code updates the task dialog box and adds new controls:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Add the following line of code that displays the task dialog box to the user and retrieves the user's selection:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Insert the following code after the call to <ph id="ph1">`taskDialog.DoModal()`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This section of code processes the user's input:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the code in step 9, replace the comments that start with PROCESS IF with the code that you want to execute under the specified conditions.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Compile and run the application.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The application displays the task dialog box that uses the new controls and additional information.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Displaying a CTaskDialog Without Creating a CTaskDialog Object</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following procedure shows you how to display a <ph id="ph1">`CTaskDialog`</ph> without first creating a <ph id="ph2">`CTaskDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This example continues the previous procedures.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To Display a CTaskDialog Without Creating a CTaskDialog Object</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Open the MyProject.cpp file if it is not already open.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Navigate to the closing bracket for the <ph id="ph1">`if (CTaskDialog::IsSupported())`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Insert the following code immediately before the closing bracket of the <ph id="ph1">`if`</ph> statement (before the <ph id="ph2">`else`</ph> block):</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Compile and run the application.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The application displays two task dialog boxes.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The first dialog box is from the To Add Functionality to the CTaskDialog procedure; the second dialog box is from the last procedure.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>These examples do not demonstrate all the available options for a <ph id="ph1">`CTaskDialog`</ph>, but should help you get started.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CTaskDialog Class<ept id="p1">](../mfc/reference/ctaskdialog-class.md)</ept> for a full description of the class.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Dialog Boxes</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CTaskDialog Class</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CTaskDialog::CTaskDialog</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>