<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d21036cdb128405a90c32b71c9f146208d9193f0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\type-traits.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d606ac17dc4947669113c1ca043fd0fbe262ff6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d16140a8f6a4b1962eb3d3900f3070c168069abe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>type_traits<ph id="ph1">&amp;gt;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>type_traits</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defines templates that provide compile-time constants that give information about the properties of their type arguments or produce transformed types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The classes and templates in <ph id="ph1">`&lt;type_traits&gt;`</ph> are used to support type inference, classification, and transformation at compile time, to detect type-related errors, and to help you optimize your generic code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These classes and templates include unary type traits that describe a property of a type, binary type traits that describe a relationship between types, and transformation traits that modify a property of a type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To support type traits, a helper class, <ph id="ph1">`integral_constant`</ph>, is defined.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It has template specializations <ph id="ph1">`true_type`</ph> and <ph id="ph2">`false_type`</ph> that form the base classes for type predicates.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>type predicate<ept id="p1">*</ept> is a template that takes one or more type arguments.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When a type predicate <bpt id="p1">*</bpt>holds true<ept id="p1">*</ept>, it is publicly derived, directly or indirectly, from <bpt id="p2">[</bpt>true_type<ept id="p2">](../standard-library/type-traits-typedefs.md#true_type_typedef)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When a type predicate <bpt id="p1">*</bpt>holds false<ept id="p1">*</ept>, it is publicly derived, directly or indirectly, from <bpt id="p2">[</bpt>false_type<ept id="p2">](../standard-library/type-traits-typedefs.md#false_type_typedef)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>type modifier<ept id="p1">*</ept> or <bpt id="p2">*</bpt>transformation trait<ept id="p2">*</ept> is a template that takes one or more template arguments and has one member, <ph id="ph1">`type`</ph>, which is a synonym for the modified type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Alias Templates</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To simplify type traits expressions, <bpt id="p1">[</bpt>alias templates<ept id="p1">](../cpp/aliases-and-typedefs-cpp.md)</ept> for <ph id="ph1">`typename some_trait&lt;T&gt;::type`</ph> are provided, where " <ph id="ph2">`some_trait`</ph>" is the template class name.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>add_const<ept id="p1">](../standard-library/add-const-class.md)</ept> has an alias template for its type, <ph id="ph1">`add_const_t`</ph>, defined as:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>add_const_t</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>aligned_storage_t</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>make_signed_t</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>remove_pointer_t</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>add_cv_t</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>aligned_union_t</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>make_unsigned_t</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>remove_reference_t</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>add_lvalue_reference_t</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>common_type_t</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>remove_all_extents_t</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>remove_volatile_t</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>add_pointer_t</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>conditional_t</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>remove_const_t</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>result_of_t</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>add_rvalue_reference_t</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>decay_t</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>remove_cv_t</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>underlying_type_t</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>add_volatile_t</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>enable_if_t</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>remove_extent_t</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Helper class and typedefs</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>integral_constant</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Makes an integral constant from a type and a value.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>true_type</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Holds integral constant with true value.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>false_type</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Holds integral constant with false value.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Primary type categories</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>is_void</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Tests whether the type is <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>is_null_pointer</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Tests whether the type is <ph id="ph1">`std::nullptr_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>is_integral</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Tests whether the type is integral.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>is_floating_point</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Tests whether the type is floating-point.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>is_array</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Tests whether the type is an array.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>is_pointer</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a pointer.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>is_lvalue_reference</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Tests if type is an lvalue reference.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>is_rvalue_reference</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Tests if type is an rvalue reference.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>is_member_object_pointer</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a pointer to a member object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>is_member_function_pointer</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a pointer to a member function.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>is_enum</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Tests whether the type is an enumeration.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>is_union</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a union.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>is_class</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a class.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>is_function</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a function type.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Composite type categories</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>is_reference</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a reference.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>is_arithmetic</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Tests whether the type is arithmetic.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>is_fundamental</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Tests whether the type is <ph id="ph1">`void`</ph> or arithmetic.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>is_object</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Tests whether the type is an object type.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>is_scalar</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Tests whether the type is scalar.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>is_compound</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Tests whether the type is not scalar.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>is_member_pointer</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a pointer to a member.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Type properties</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>is_const</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Tests whether the type is <ph id="ph1">`const`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>is_volatile</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Tests whether the type is <ph id="ph1">`volatile`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>is_trivial</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Tests whether the type is trivial.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>is_trivially_copyable</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Tests whether the type is trivially copyable.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>is_standard_layout</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Tests if type is a standard layout type.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>is_pod</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a POD.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>is_literal_type</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Tests whether the type can be a <ph id="ph1">`constexpr`</ph> variable or used in a <ph id="ph2">`constexpr`</ph> function.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>is_empty</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Tests whether the type is an empty class.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>is_polymorphic</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a polymorphic class.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>is_abstract</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Tests whether the type is an abstract class.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>is_final</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a class type marked <ph id="ph1">`final`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>is_signed</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Tests whether the type is a signed integer.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>is_unsigned</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Tests whether the type is an unsigned integer.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>is_constructible</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Tests whether the type is constructible using the specified argument types.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>is_default_constructible</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Tests whether the type has a default constructor.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>is_copy_constructible</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Tests whether the type has a copy constructor.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>is_move_constructible</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Tests whether the type has a move constructor.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>is_assignable</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Tests whether the first type can be assigned a value of the second type.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>is_copy_assignable</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Tests whether a type can be assigned a const reference value of the type.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>is_move_assignable</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Tests whether a type can be assigned an rvalue reference of the type.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>is_destructible</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Tests whether the type is destructible.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>is_trivially_constructible</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Tests whether the type uses no non-trivial operations when constructed using the specified types.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>is_trivially_default_constructible</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Tests whether the type uses no non-trivial operations when default constructed.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>is_trivially_copy_constructible</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Tests whether the type uses no non-trivial operations when copy constructed.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>is_trivially_move_constructible</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Tests whether the type uses no non-trivial operations when move constructed.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>is_trivially_assignable</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Tests whether the types are assignable and the assignment uses no non-trivial operations.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>is_trivially_copy_assignable</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Tests whether the type is copy assignable and the assignment uses no non-trivial operations.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>is_trivially_move_assignable</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Tests whether the type is move assignable and the assignment uses no non-trivial operations.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>is_trivially_destructible</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Tests whether the type is destructible and the destructor uses no non-trivial operations.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>is_nothrow_constructible</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Tests whether the type is constructible and is known not to throw when constructed using the specified types.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>is_nothrow_default_constructible</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Tests whether the type is default constructible and is known not to throw when default constructed.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>is_nothrow_copy_constructible</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Tests whether the type is copy constructible and the copy constructor is known not to throw.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>is_nothrow_move_constructible</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Tests whether the type is move constructible and the move constructor is known not to throw.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>is_nothrow_assignable</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Tests whether the type is assignable using the specified type and the assignment is known not to throw.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>is_nothrow_copy_assignable</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Tests whether the type is copy assignable and the assignment is known not to throw.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>is_nothrow_move_assignable</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Tests whether the type is move assignable and the assignment is known not to throw.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>is_nothrow_destructible</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Tests whether the type is destructible and the destructor is known not to throw.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>has_virtual_destructor</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Tests whether the type has a virtual destructor.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Type property queries</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>alignment_of</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Gets the alignment of a type.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>rank</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Gets the number of array dimensions.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>extent</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Gets the number of elements in the specified array dimension.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Type relations</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>is_same</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Tests whether two types are the same.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>is_base_of</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Tests whether one type is a base of another.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>is_convertible</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Tests whether one type is convertible to another.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Const-volatile modifications</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>add_const</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Produces a <ph id="ph1">`const`</ph> type from type.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>add_volatile</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Produces a <ph id="ph1">`volatile`</ph> type from type.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>add_cv</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Produces a <ph id="ph1">`const``volatile`</ph> type from type.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>remove_const</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Produces a non-const type from type.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>remove_volatile</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Produces a non-volatile type from type.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>remove_cv</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Produces a non-const non-volatile type from type.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Reference modifications</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>add_lvalue_reference</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Produces a reference to type from type.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>add_rvalue_reference</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Produces an rvalue reference to type from type</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>remove_reference</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Produces a non-reference type from type.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Sign modifications</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>make_signed</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Produces the type if signed, or the smallest signed type greater than or equal in size to type.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>make_unsigned</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Produces the type if unsigned, or the smallest unsigned type greater than or equal in size to type.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Array modifications</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>remove_all_extents</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Produces a non-array type from an array type.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>remove_extent</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Produces the element type from an array type.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Pointer modifications</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>add_pointer</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Produces a pointer to type from type.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>remove_pointer</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Produces a type from a pointer to type.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Other transformations</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>aligned_storage</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Allocates uninitialized memory for an aligned type.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>aligned_union</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Allocates uninitialized memory for an aligned union with a non-trivial constructor or destructor.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>common_type</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Produces the common type of all the types of the parameter pack.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>conditional</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If the condition is true, produces the first specified type, otherwise the second specified type.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>decay</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Produces the type as passed by value.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Makes non-reference, non-const, or non-volatile type, or makes a pointer to type.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>enable_if</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>If the condition is true, produces the specified type, otherwise no type.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>result_of</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Determines the return type of the callable type that takes the specified argument types.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>underlying_type</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Produces the underlying integral type for an enumeration type.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>functional&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>