<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cbd53cd8708199278b7142469a69877410b66706</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmdiframewnd-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87a38e4eed0125e11fbb45c8e491d2f90b30f411</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">607ccfc1cc6adc68b2ecc4b61791d30e940d5cd1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the functionality of a Windows multiple document interface (MDI) frame window, along with members for managing the window.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::CMDIFrameWnd</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CMDIFrameWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::CreateClient</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creates a Windows <bpt id="p1">**</bpt>MDICLIENT<ept id="p1">**</ept> window for this <ph id="ph1">`CMDIFrameWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Called by the <ph id="ph1">`OnCreate`</ph> member function of <ph id="ph2">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::CreateNewChild</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creates a new child window.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::GetWindowMenuPopup</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns the Window pop-up menu.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIActivate</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Activates a different MDI child window.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDICascade</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Arranges all child windows in a cascaded format.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIGetActive</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Retrieves the currently active MDI child window, along with a flag indicating whether or not the child is maximized.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIIconArrange</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Arranges all minimized document child windows.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIMaximize</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Maximizes an MDI child window.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDINext</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Activates the child window immediately behind the currently active child window and places the currently active child window behind all other child windows.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIPrev</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Activates the previous child window and places the currently active child window immediately behind it.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIRestore</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Restores an MDI child window from maximized or minimized size.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDISetMenu</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Replaces the menu of an MDI frame window, the Window pop-up menu, or both.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDITile</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Arranges all child windows in a tiled format.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To create a useful MDI frame window for your application, derive a class from <ph id="ph1">`CMDIFrameWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Add member variables to the derived class to store data specific to your application.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Implement message-handler member functions and a message map in the derived class to specify what happens when messages are directed to the window.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can construct an MDI frame window by calling the <bpt id="p1">[</bpt>Create<ept id="p1">](../../mfc/reference/cframewnd-class.md#cframewnd__create)</ept> or <bpt id="p2">[</bpt>LoadFrame<ept id="p2">](../../mfc/reference/cframewnd-class.md#cframewnd__loadframe)</ept> member function of <ph id="ph1">`CFrameWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Before you call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> or <ph id="ph1">`LoadFrame`</ph>, you must construct the frame window object on the heap using the C++ <bpt id="p2">**</bpt>new<ept id="p2">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Before calling <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> you can also register a window class with the <bpt id="p2">[</bpt>AfxRegisterWndClass<ept id="p2">](application-information-and-management.md#afxregisterwndclass)</ept> global function to set the icon and class styles for the frame.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function to pass the frame's creation parameters as immediate arguments.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>requires fewer arguments than <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, and instead retrieves most of its default values from resources, including the frame's caption, icon, accelerator table, and menu.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To be accessed by <ph id="ph1">`LoadFrame`</ph>, all these resources must have the same resource ID (for example, <bpt id="p1">**</bpt>IDR_MAINFRAME<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Though <bpt id="p1">**</bpt>MDIFrameWnd<ept id="p1">**</ept> is derived from <ph id="ph1">`CFrameWnd`</ph>, a frame window class derived from <ph id="ph2">`CMDIFrameWnd`</ph> need not be declared with <ph id="ph3">`DECLARE_DYNCREATE`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMDIFrameWnd`</ph> class inherits much of its default implementation from <ph id="ph2">`CFrameWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For a detailed list of these features, refer to the <bpt id="p1">[</bpt>CFrameWnd<ept id="p1">](../../mfc/reference/cframewnd-class.md)</ept> class description.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMDIFrameWnd`</ph> class has the following additional features:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An MDI frame window manages the <bpt id="p1">**</bpt>MDICLIENT<ept id="p1">**</ept> window, repositioning it in conjunction with control bars.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The MDI client window is the direct parent of MDI child frame windows.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>WS_HSCROLL<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WS_VSCROLL<ept id="p2">**</ept> window styles specified on a <ph id="ph1">`CMDIFrameWnd`</ph> apply to the MDI client window rather than the main frame window so the user can scroll the MDI client area (as in the Windows Program Manager, for example).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An MDI frame window owns a default menu that is used as the menu bar when there is no active MDI child window.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When there is an active MDI child, the MDI frame window's menu bar is automatically replaced by the MDI child window menu.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An MDI frame window works in conjunction with the current MDI child window, if there is one.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For instance, command messages are delegated to the currently active MDI child before the MDI frame window.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An MDI frame window has default handlers for the following standard Window menu commands:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>ID_WINDOW_TILE_VERT</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>ID_WINDOW_TILE_HORZ</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>ID_WINDOW_CASCADE</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>ID_WINDOW_ARRANGE</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An MDI frame window also has an implementation of <bpt id="p1">**</bpt>ID_WINDOW_NEW<ept id="p1">**</ept>, which creates a new frame and view on the current document.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An application can override these default command implementations to customize MDI window handling.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Do not use the C++ <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> operator to destroy a frame window.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CWnd::DestroyWindow`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CFrameWnd`</ph> implementation of <ph id="ph2">`PostNcDestroy`</ph> will delete the C++ object when the window is destroyed.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When the user closes the frame window, the default <ph id="ph1">`OnClose`</ph> handler will call <ph id="ph2">`DestroyWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CMDIFrameWnd`</ph>, see <bpt id="p1">[</bpt>Frame Windows<ept id="p1">](../../mfc/frame-windows.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CFrameWnd</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::CMDIFrameWnd</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CMDIFrameWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> or <ph id="ph1">`LoadFrame`</ph> member function to create the visible MDI frame window.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#13</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::CreateClient</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Creates the MDI client window that manages the <ph id="ph1">`CMDIChildWnd`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A long pointer to a <bpt id="p1">[</bpt>CREATESTRUCT<ept id="p1">](../../mfc/reference/createstruct-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A pointer to the Window pop-up menu.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This member function should be called if you override the <ph id="ph1">`OnCreate`</ph> member function directly.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#14</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::CreateNewChild</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Creates a new child window.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The run-time class of the child window to be created.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>nResource</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The ID of shared resources associated with the child window.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The child window's menu.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The child window's accelerator.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Use this function to create child windows of an MDI frame window.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#15</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This example is an excerpt from Knowledge Base article Q201045, "HOWTO: Add Multiple Window Types to a Non-Document/View MDI App."</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at <bpt id="p1">[</bpt>http://support.microsoft.com<ept id="p1">](http://support.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::GetWindowMenuPopup</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain a handle to the current pop-up menu named "Window" (the pop-up menu with menu items for MDI window management).</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>hMenuBar</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The current menu bar.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The Window pop-up menu if one exists; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The default implementation looks for a pop-up menu containing standard Window menu commands such as <bpt id="p1">**</bpt>ID_WINDOW_NEW<ept id="p1">**</ept> and <bpt id="p2">**</bpt>ID_WINDOW_TILE_HORZ<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Override this member function if you have a Window menu that does not use the standard menu command IDs.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#16</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIActivate</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Activates a different MDI child window.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>pWndActivate</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Points to the MDI child window to be activated.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This member function sends the <bpt id="p1">[</bpt>WM_MDIACTIVATE<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onmdiactivate)</ept> message to both the child window being activated and the child window being deactivated.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This is the same message that is sent if the user changes the focus to an MDI child window by using the mouse or keyboard.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>An MDI child window is activated independently of the MDI frame window.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>When the frame becomes active, the child window that was last activated is sent a <bpt id="p1">[</bpt>WM_NCACTIVATE<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onncactivate)</ept> message to draw an active window frame and caption bar, but it does not receive another <ph id="ph1">`WM_MDIACTIVATE`</ph> message.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMDIFrameWnd::GetWindowMenuPopup<ept id="p1">](#cmdiframewnd__getwindowmenupopup)</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDICascade</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Arranges all the MDI child windows in a cascade format.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Specifies a cascade flag.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Only the following flag can be specified: <ph id="ph1">`MDITILE_SKIPDISABLED`</ph>, which prevents disabled MDI child windows from being cascaded.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The first version of <ph id="ph1">`MDICascade`</ph>, with no parameters, cascades all MDI child windows, including disabled ones.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The second version optionally does not cascade disabled MDI child windows if you specify <ph id="ph1">`MDITILE_SKIPDISABLED`</ph> for the <ph id="ph2">`nType`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#17</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIGetActive</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Retrieves the current active MDI child window, along with a flag indicating whether the child window is maximized.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>pbMaximized</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept> return value.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> on return if the window is maximized; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A pointer to the active MDI child window.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMDIChildWnd::MDIMaximize<ept id="p1">](../../mfc/reference/cmdichildwnd-class.md#cmdichildwnd__mdimaximize)</ept>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIIconArrange</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Arranges all minimized document child windows.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>It does not affect child windows that are not minimized.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMDIFrameWnd::MDICascade<ept id="p1">](#cmdiframewnd__mdicascade)</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIMaximize</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Maximizes the specified MDI child window.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Points to the window to maximize.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>When a child window is maximized, Windows resizes it to make its client area fill the client window.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Windows places the child window's Control menu in the frame's menu bar so the user can restore or close the child window.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>It also adds the title of the child window to the frame-window title.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If another MDI child window is activated when the currently active MDI child window is maximized, Windows restores the currently active child and maximizes the newly activated child window.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMDIChildWnd::MDIMaximize<ept id="p1">](../../mfc/reference/cmdichildwnd-class.md#cmdichildwnd__mdimaximize)</ept>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDINext</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Activates the child window immediately behind the currently active child window and places the currently active child window behind all other child windows.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If the currently active MDI child window is maximized, the member function restores the currently active child and maximizes the newly activated child.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#18</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIPrev</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Activates the previous child window and places the currently active child window immediately behind it.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If the currently active MDI child window is maximized, the member function restores the currently active child and maximizes the newly activated child.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDIRestore</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Restores an MDI child window from maximized or minimized size.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Points to the window to restore.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMDIChildWnd::MDIRestore<ept id="p1">](../../mfc/reference/cmdichildwnd-class.md#cmdichildwnd__mdirestore)</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDISetMenu</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Replaces the menu of an MDI frame window, the Window pop-up menu, or both.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>pFrameMenu</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Specifies the menu of the new frame-window menu.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the menu is not changed.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Specifies the menu of the new Window pop-up menu.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the menu is not changed.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>A pointer to the frame-window menu replaced by this message.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>After calling <ph id="ph1">`MDISetMenu`</ph>, an application must call the <bpt id="p1">[</bpt>DrawMenuBar<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__drawmenubar)</ept> member function of <ph id="ph2">`CWnd`</ph> to update the menu bar.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If this call replaces the Window pop-up menu, MDI child-window menu items are removed from the previous Window menu and added to the new Window pop-up menu.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>If an MDI child window is maximized and this call replaces the MDI frame-window menu, the Control menu and restore controls are removed from the previous frame-window menu and added to the new menu.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Do not call this member function if you use the framework to manage your MDI child windows.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#19</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#20</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd::MDITile</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Arranges all child windows in a tiled format.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Specifies a tiling flag.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This parameter can be any one of the following flags:</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Tiles MDI child windows so that one window appears above another.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Prevents disabled MDI child windows from being tiled.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Tiles MDI child windows so that one window appears beside another.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The first version of <ph id="ph1">`MDITile`</ph>, without parameters, tiles the windows vertically under Windows versions 3.1 and later.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The second version tiles windows vertically or horizontally, depending on the value of the <ph id="ph1">`nType`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMDIFrameWnd::MDICascade<ept id="p1">](#cmdiframewnd__mdicascade)</ept>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>MFC Sample MDI</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>MFC Sample MDIDOCVW</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>MFC Sample SNAPVW</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>CFrameWnd Class</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>