<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca0e86868442139696a84df31cbd5c452f56a221</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\integral-constant-class-bool-constant-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb270a545895aa25eb37c02feeba0741375db038</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">623fbde243a0058ab1dbec0be3082a24f80a2768</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>integral_constant Class, bool_constant Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>integral_constant Class, bool_constant Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Makes an integral constant from a type and value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>struct integral_constant {</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>static constexpr T value = v;</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>typedef T value_type;</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>typedef integral_constant<ph id="ph1">\&lt;</ph>T, v&gt;</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>type;</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>constexpr operator value_type() const noexcept { return (value); }</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>constexpr value_type operator()() const noexcept { return (value); }</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>};</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The type of the constant.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The value of the constant.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`integral_constant`</ph> template class, when specialized with an integral type <ph id="ph2">`T`</ph> and a value <ph id="ph3">`v`</ph> of that type, represents an object that holds a constant of that integral type with the specified value.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The member named <ph id="ph1">`type`</ph> is an alias for the generated template specialization type, and the <ph id="ph2">`value`</ph> member holds the value <ph id="ph3">`v`</ph> used to create the specialization.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bool_constant`</ph> template class is an explicit partial specialization of <ph id="ph2">`integral_constant`</ph> that uses <ph id="ph3">`bool`</ph> as the <ph id="ph4">`T`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> &lt;type_traits&gt;</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>&lt;type_traits&gt;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>false_type Typedef</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>true_type Typedef</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>