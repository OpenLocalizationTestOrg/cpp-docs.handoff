<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1743e3f1636bb82d0a6c0403511079e4fa63b09e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\db-command.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c08d48d9161ffe76b4a44c2d396354f488c0ffbd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e21671093c98965e88f073ca3f2711e37988eccf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>db_command | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>db_command</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creates an OLE DB command.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A command string containing the text of an OLE DB command.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A simple example is:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>command<ept id="p1">*</ept> syntax is as follows:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>binding parameter block<ept id="p1">*</ept> is defined as follows:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>([<ept id="p1">**</ept> <ph id="ph1">`bindtype`</ph> <bpt id="p2">**</bpt>]<ept id="p2">**</ept> <bpt id="p3">*</bpt>szVar1<ept id="p3">*</ept> [<bpt id="p4">*</bpt>, szVar2<ept id="p4">*</ept> [, <bpt id="p5">*</bpt>nVar3<ept id="p5">*</ept> [, ...]]] <bpt id="p6">**</bpt>)<ept id="p6">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>where:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(<ept id="p1">**</ept> marks the start of the data binding block.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[<ept id="p1">**</ept> <ph id="ph1">`bindtype`</ph> <bpt id="p2">**</bpt>]<ept id="p2">**</ept> is one of the following case-insensitive strings:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[db_column]<ept id="p1">**</ept> binds each of the member variables to a column in a rowset.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[bindto]<ept id="p1">**</ept> (same as <bpt id="p2">**</bpt>[db_column]<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[in]<ept id="p1">**</ept> binds member variables as input parameters.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[out]<ept id="p1">**</ept> binds member variables as output parameters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[in,out]<ept id="p1">**</ept> binds member variables as input/output parameters.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>SzVarX<ept id="p1">*</ept> resolves to a member variable within the current scope.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>)<ept id="p1">**</ept> marks the end of the data binding block.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the command string contains one or more specifiers such as [in], [out], or [in/out], <bpt id="p1">**</bpt>db_command<ept id="p1">**</ept> builds a parameter map.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the command string contains one or more parameters such as [db_column] or [bindto], <bpt id="p1">**</bpt>db_command<ept id="p1">**</ept> generates a rowset and an accessor map to service these bound variables.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>db_accessor<ept id="p1">](../windows/db-accessor.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>[<ph id="ph1">`bindtype`</ph>] syntax and the <ph id="ph2">`bindings`</ph> parameter are not valid when using <bpt id="p1">**</bpt>db_command<ept id="p1">**</ept> at the class level.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Here are some examples of binding parameter blocks.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example binds the <ph id="ph1">`m_au_fname`</ph> and <ph id="ph2">`m_au_lname`</ph> data members to the <ph id="ph3">`au_fname`</ph> and <ph id="ph4">`au_lname`</ph> columns, respectively, of the authors table in the pubs database:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>name<ept id="p1">*</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The name of the handle you use to work with the rowset.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">*</bpt>name<ept id="p1">*</ept>, <bpt id="p2">**</bpt>db_command<ept id="p2">**</ept> generates a class with the specified <bpt id="p3">*</bpt>name<ept id="p3">*</ept>, which can be used to traverse the rowset or to execute multiple action queries.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">*</bpt>name<ept id="p1">*</ept>, it will not be possible to return more than one row of results to the user.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>source_name<ept id="p1">*</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CSession`</ph> variable or instance of a class that has the <ph id="ph2">`db_source`</ph> attribute applied to it on which the command executes.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>db_source<ept id="p1">](../windows/db-source.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>db_command<ept id="p1">**</ept> checks to ensure that the variable used for <bpt id="p2">*</bpt>source_name<ept id="p2">*</ept> is valid, so the specified variable should be in function or global scope.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Identifies the variable that will receive the <ph id="ph1">`HRESULT`</ph> of this database command.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the variable does not exist, it will be automatically injected by the attribute.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bindings<ept id="p1">*</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Allows you to separate the binding parameters from the OLE DB command.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you specify a value for <ph id="ph1">`bindings`</ph>, <bpt id="p1">**</bpt>db_command<ept id="p1">**</ept> will parse the associated value and will not parse the [<ph id="ph2">`bindtype`</ph>] parameter.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This usage allows you to use OLE DB provider syntax.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To disable parsing, without binding parameters, specify <bpt id="p1">**</bpt>Bindings=""<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you do not specify a value for <ph id="ph1">`bindings`</ph>, <bpt id="p1">**</bpt>db_command<ept id="p1">**</ept> will parse the binding parameter block, looking for '<bpt id="p2">**</bpt>(<ept id="p2">**</ept>', followed by <bpt id="p3">**</bpt>[<ept id="p3">**</ept><ph id="ph2">`bindtype`</ph><bpt id="p4">**</bpt>]<ept id="p4">**</ept> in brackets, followed by one or more previously declared C++ member variables, followed by '<bpt id="p5">**</bpt>)<ept id="p5">**</ept>'.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>All text between the parentheses will be stripped from the resulting command, and these parameters will be used to construct column and parameter bindings for this command.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bulk_fetch<ept id="p1">*</ept>(optional)</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An integer value that specifies the number of rows to fetch.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The default value is 1, which specifies single row fetching (the rowset will be of type <bpt id="p1">[</bpt>CRowset<ept id="p1">](../data/oledb/crowset-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A value greater than 1 specifies bulk row fetching.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Bulk row fetching refers to the ability of bulk rowsets to fetch multiple row handles (the rowset will be of type <bpt id="p1">[</bpt>CBulkRowset<ept id="p1">](../data/oledb/cbulkrowset-class.md)</ept> and will call <ph id="ph1">`SetRows`</ph> with the specified number of rows).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>bulk_fetch<ept id="p1">*</ept> is less than one, <ph id="ph1">`SetRows`</ph> will return zero.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>db_command<ept id="p1">**</ept> creates a <bpt id="p2">[</bpt>CCommand<ept id="p2">](../data/oledb/ccommand-class.md)</ept> object, which is used by an OLE DB consumer to execute a command.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>db_command<ept id="p1">**</ept> with either class or function scope; the main difference is the scope of the <ph id="ph1">`CCommand`</ph> object.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>With function scope, data such as bindings terminate at function end.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Both class and function scope usages involve the OLE DB Consumer Template class <bpt id="p1">**</bpt>CCommand&lt;&gt;<ept id="p1">**</ept>, but the template arguments differ for the function and class cases.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the function case, bindings will be made to an <bpt id="p1">**</bpt>Accessor<ept id="p1">**</ept> that comprises local variables, while the class usage will infer a <ph id="ph1">`CAccessor`</ph>-derived class as the argument.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When used as a class attribute, <bpt id="p1">**</bpt>db_command<ept id="p1">**</ept> works in conjunction with <bpt id="p2">**</bpt>db_column<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>db_command<ept id="p1">**</ept> can be used to execute commands that do not return a result set.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When the consumer attribute provider applies this attribute to a class, the compiler will rename the class to _<bpt id="p1">*</bpt>YourClassName<ept id="p1">*</ept>Accessor, where <bpt id="p2">*</bpt>YourClassName<ept id="p2">*</ept> is the name you gave the class, and the compiler will also create a class called <bpt id="p3">*</bpt>YourClassName,<ept id="p3">*</ept> which derives from <ph id="ph1">\_</ph><bpt id="p4">*</bpt>YourClassName<ept id="p4">*</ept>Accessor.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In Class View, you will see both classes.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This sample defines a command that selects the first and last names from a table where the state column matches 'CA'.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>db_command<ept id="p1">**</ept> creates and reads a rowset on which you can call wizard-generated functions such as <bpt id="p2">[</bpt>OpenAll and CloseAll<ept id="p2">](../data/oledb/consumer-wizard-generated-methods.md)</ept>, as well as <ph id="ph1">`CRowset`</ph> member functions such as <bpt id="p3">[</bpt>MoveNext<ept id="p3">](../data/oledb/crowset-movenext.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that this code requires you to provide your own connection string that connects to the pubs database.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For information on how to do this in the development environment, see <bpt id="p1">[</bpt>How to: Connect to a Database from Server Explorer<ept id="p1">](http://msdn.microsoft.com/en-us/7c1c3067-0d77-471b-872b-639f9f50db74)</ept> and <bpt id="p2">[</bpt>How to: Add New Data Connections in Server Explorer/Database Explorer<ept id="p2">](http://msdn.microsoft.com/en-us/fb2f513b-ddad-4142-911e-856bba0054c8)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This sample uses <ph id="ph1">`db_source`</ph> on a data source class <ph id="ph2">`CMySource`</ph>, and <ph id="ph3">`db_command`</ph> on command classes <ph id="ph4">`CCommand1`</ph> and <ph id="ph5">`CCommand2`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Attribute Context</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Applies to</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>class<ept id="p1">**</ept>, <ph id="ph1">`struct`</ph>, member, method, local</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Repeatable</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Required attributes</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Invalid attributes</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information about the attribute contexts, see <bpt id="p1">[</bpt>Attribute Contexts<ept id="p1">](../windows/attribute-contexts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>OLE DB Consumer Attributes</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Stand-Alone Attributes</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Attributes Samples</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>