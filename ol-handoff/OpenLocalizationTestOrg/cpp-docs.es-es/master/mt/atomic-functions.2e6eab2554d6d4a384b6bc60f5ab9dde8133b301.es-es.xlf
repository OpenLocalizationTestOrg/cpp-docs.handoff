<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f108431f91a3cb765c4ebeb3f0b8efcba6c0f2d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\atomic-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41def914b3ff5350b22e55a28afdb9b193c7704c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4650767d1b141641452231b63aa7da5ac948d07d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>atomic<ph id="ph2">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>atomic<ph id="ph2">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_compare_exchange_strong<ept id="p1">](#atomic_compare_exchange_strong_function)</ept></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_compare_exchange_strong_explicit<ept id="p1">](#atomic_compare_exchange_strong_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_compare_exchange_weak<ept id="p1">](#atomic_compare_exchange_weak_function)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_compare_exchange_weak_explicit<ept id="p1">](#atomic_compare_exchange_weak_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_exchange<ept id="p1">](#atomic_exchange_function)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_exchange_explicit<ept id="p1">](#atomic_exchange_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_add<ept id="p1">](#atomic_fetch_add_function)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_add_explicit<ept id="p1">](#atomic_fetch_add_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_and<ept id="p1">](#atomic_fetch_and_function)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_and_explicit<ept id="p1">](#atomic_fetch_and_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_or<ept id="p1">](#atomic_fetch_or_function)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_or_explicit<ept id="p1">](#atomic_fetch_or_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_sub<ept id="p1">](#atomic_fetch_sub_function)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_sub_explicit<ept id="p1">](#atomic_fetch_sub_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_xor<ept id="p1">](#atomic_fetch_xor_function)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_xor_explicit<ept id="p1">](#atomic_fetch_xor_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_flag_clear<ept id="p1">](#atomic_flag_clear_function)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_flag_clear_explicit<ept id="p1">](#atomic_flag_clear_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_flag_test_and_set<ept id="p1">](#atomic_flag_test_and_set_function)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_flag_test_and_set_explicit<ept id="p1">](#atomic_flag_test_and_set_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_init<ept id="p1">](#atomic_init_function)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_is_lock_free<ept id="p1">](#atomic_is_lock_free_function)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_load<ept id="p1">](#atomic_load_function)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_load_explicit<ept id="p1">](#atomic_load_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_signal_fence<ept id="p1">](#atomic_signal_fence_function)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_store<ept id="p1">](#atomic_store_function)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_store_explicit<ept id="p1">](#atomic_store_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_thread_fence<ept id="p1">](#atomic_thread_fence_function)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>kill_dependency<ept id="p1">](#kill_dependency_function)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_compare_exchange_strong_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_compare_exchange_strong</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Performs an atomic compare and exchange operation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A pointer to a value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`bool`</ph> that indicates the result of the value comparison.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This method performs an atomic compare and exchange operation by using implicit <ph id="ph1">`memory_order_seq_cst`</ph><bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> arguments.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>atomic_compare_exchange_strong_explicit<ept id="p1">](../standard-library/atomic-functions.md#atomic_compare_exchange_strong_explicit_function)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_compare_exchange_strong_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_compare_exchange_strong_explicit</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Performs an <bpt id="p1">*</bpt>atomic compare and exchange<ept id="p1">*</ept> operation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A pointer to a value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>First <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> argument.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Second <ph id="ph1">`memory_order`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`Order2`</ph> cannot be <ph id="ph2">`memory_order_release`</ph> or <ph id="ph3">`memory_order_acq_rel`</ph>, it cannot be stronger than the value of <ph id="ph4">`Order1`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`bool`</ph> that indicates the result of the value comparison.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>atomic compare and exchange operation<ept id="p1">*</ept> compares the value that is stored in the object that is pointed to by <ph id="ph1">`Atom`</ph> against the value that is pointed to by <ph id="ph2">`Exp`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the values are equal, The the value that is stored in the object that is pointed to by <ph id="ph1">`atom`</ph> is replaced with <ph id="ph2">`Val`</ph> by using a <ph id="ph3">`read-modify-write`</ph> operation and applying the memory order constraints that are specified by <ph id="ph4">`Order1`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the values are not equal, The operation replaces the value that is pointed to by <ph id="ph1">`Exp`</ph> with the value that is stored in the object that is pointed to by <ph id="ph2">`Atom`</ph> and applies the memory order constraints that are specified by <ph id="ph3">`Order2`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_compare_exchange_weak_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_compare_exchange_weak</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Performs a <bpt id="p1">*</bpt>weak atomic compare and exchange<ept id="p1">*</ept> operation.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A pointer to a value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`bool`</ph> that indicates the result of the value comparison.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This method performs a <bpt id="p1">*</bpt>weak atomic compare and exchange operation<ept id="p1">*</ept> that has implicit <ph id="ph1">`memory_order_seq_cst`</ph><bpt id="p2">[</bpt>memory_order<ept id="p2">](../standard-library/atomic-enums.md#memory_order_enum)</ept> arguments.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>atomic_compare_exchange_weak_explicit<ept id="p1">](../standard-library/atomic-functions.md#atomic_compare_exchange_weak_explicit_function)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_compare_exchange_weak_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_compare_exchange_weak_explicit</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Performs a <bpt id="p1">*</bpt>weak atomic compare and exchange<ept id="p1">*</ept> operation.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A pointer to a value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>First <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> argument.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Second <ph id="ph1">`memory_order`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`Order2`</ph> cannot be <ph id="ph2">`memory_order_release`</ph> or <ph id="ph3">`memory_order_acq_rel`</ph>, nor can it be stronger than the value of <ph id="ph4">`Order1`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`bool`</ph> that indicates the result of the value comparison.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>atomic compare and exchange operation<ept id="p1">*</ept> compares the value that is stored in the object that is pointed to by <ph id="ph1">`Atom`</ph> with the value that is pointed to by <ph id="ph2">`Exp`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If the values are equal, the operation replaces the value that is stored in the object that is pointed to by <ph id="ph1">`Atom`</ph> with <ph id="ph2">`Val`</ph> by using a <ph id="ph3">`read-modify-write`</ph> operation and applying the memory-order constraints that are specified by <ph id="ph4">`Order1`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If the values are not equal, the operation replaces the value that is pointed to by <ph id="ph1">`Exp`</ph> with the value that is stored in the object that is pointed to by <ph id="ph2">`Atom`</ph> and applies the memory-order constraints that are specified by <ph id="ph3">`Order2`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>weak<ept id="p1">*</ept> atomic compare and exchange operation performs an exchange if the compared values are equal.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>However, if the values are not equal, the operation is not guaranteed to perform an exchange.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_exchange_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_exchange</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Uses <ph id="ph1">`Value`</ph> to replace the stored value of <ph id="ph2">`Atom`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The stored value of <ph id="ph1">`Atom`</ph> before the exchange.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_exchange`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to exchange the value that is stored in <ph id="ph3">`Atom`</ph> with <ph id="ph4">`Value`</ph>, using the <ph id="ph5">`memory_order_seq_cst`</ph><bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_exchange_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_exchange_explicit</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Replaces the stored value of <ph id="ph1">`Atom`</ph> with <ph id="ph2">`Value`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The stored value of <ph id="ph1">`Atom`</ph> before the exchange.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_exchange_explicit`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to exchange the value that is stored in <ph id="ph3">`Atom`</ph> with <ph id="ph4">`Value`</ph>, within the memory constraints that are specified by <ph id="ph5">`Order`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_fetch_add_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_fetch_add</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Adds a value to an existing value that is stored in an <ph id="ph1">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a pointer to type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`ptrdiff_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The value of the pointer contained by the atomic object immediately before the operation was performed.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_fetch_add`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to atomically add <ph id="ph3">`Value`</ph> to the stored value in <ph id="ph4">`Atom`</ph>, using the <ph id="ph5">`memory_order_seq_cst`</ph><bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraint.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>When the atomic type is <ph id="ph1">`atomic_address`</ph>, <ph id="ph2">`Value`</ph> has type <ph id="ph3">`ptrdiff_t`</ph> and the operation treats the stored pointer as a <ph id="ph4">`char *`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This operation is also overloaded for integral types:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_fetch_add_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_fetch_add_explicit</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Adds a value to an existing value that is stored in an <ph id="ph1">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a pointer to type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`ptrdiff_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The value of the pointer contained by the atomic object immediately before the operation was performed.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_fetch_add_explicit`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to atomically add <ph id="ph3">`Value`</ph> to the stored value in <ph id="ph4">`Atom`</ph>, within the <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints that are specified by <ph id="ph5">`Order`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When the atomic type is <ph id="ph1">`atomic_address`</ph>, <ph id="ph2">`Value`</ph> has type <ph id="ph3">`ptrdiff_t`</ph> and the operation treats the stored pointer as a <ph id="ph4">`char *`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This operation is also overloaded for integral types:</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_fetch_and_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_fetch_and</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`and`</ph> on a value and an existing value that is stored in an <ph id="ph2">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The value contained by the atomic object immediately before the operation was performed.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_fetch_and`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to replace the stored value of <ph id="ph3">`Atom`</ph> with a bitwise <ph id="ph4">`and`</ph> of <ph id="ph5">`Value`</ph> and the current value that is stored in <ph id="ph6">`Atom`</ph>, using the <ph id="ph7">`memory_order_seq_cst`</ph><bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraint.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_fetch_and_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_fetch_and_explicit</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`and`</ph> of a value and an existing value that is stored in an <ph id="ph2">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The value contained by the atomic object immediately before the operation was performed.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_fetch_and_explicit`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to replace the stored value of <ph id="ph3">`Atom`</ph> with a bitwise <ph id="ph4">`and`</ph> of <ph id="ph5">`Value`</ph> and the current value that is stored in <ph id="ph6">`Atom`</ph>, within the memory constraints that are specified by <ph id="ph7">`Order`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_fetch_or_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_fetch_or</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`or`</ph> on a value and an existing value that is stored in an <ph id="ph2">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The value contained by the atomic object immediately before the operation was performed.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_fetch_or`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to replace the stored value of <ph id="ph3">`Atom`</ph> with a bitwise <ph id="ph4">`or`</ph> of <ph id="ph5">`Value`</ph> and the current value that is stored in <ph id="ph6">`Atom`</ph>, using the <ph id="ph7">`memory_order_seq_cst`</ph><bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_fetch_or_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_fetch_or_explicit</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`or`</ph> on a value and an existing value that is stored in an <ph id="ph2">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The value contained by the atomic object immediately before the operation was performed.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_fetch_or_explicit`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to replace the stored value of <ph id="ph3">`Atom`</ph> with a bitwise <ph id="ph4">`or`</ph> of <ph id="ph5">`Value`</ph> and the current value that is stored in <ph id="ph6">`Atom`</ph>, within the <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints specified by <ph id="ph7">`Order`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_fetch_sub_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_fetch_sub</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Subtracts a value from an existing value that is stored in an <ph id="ph1">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a pointer to type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`ptrdiff_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The value of the pointer contained by the atomic object immediately before the operation was performed.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_fetch_sub`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to atomically subtract <ph id="ph3">`Value`</ph> from the stored value in <ph id="ph4">`Atom`</ph>, using the <ph id="ph5">`memory_order_seq_cst`</ph><bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraint.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>When the atomic type is <ph id="ph1">`atomic_address`</ph>, <ph id="ph2">`Value`</ph> has type <ph id="ph3">`ptrdiff_t`</ph> and the operation treats the stored pointer as a <ph id="ph4">`char *`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>This operation is also overloaded for integral types:</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_fetch_sub_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_fetch_sub_explicit</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Subtracts a value from an existing value that is stored in an <ph id="ph1">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a pointer to type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`ptrdiff_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The value of the pointer contained by the atomic object immediately before the operation was performed.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_fetch_sub_explicit`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to atomically subtract <ph id="ph3">`Value`</ph> from the stored value in <ph id="ph4">`Atom`</ph>, within the <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints that are specified by <ph id="ph5">`Order`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>When the atomic type is <ph id="ph1">`atomic_address`</ph>, <ph id="ph2">`Value`</ph> has type <ph id="ph3">`ptrdiff_t`</ph> and the operation treats the stored pointer as a <ph id="ph4">`char *`</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>This operation is also overloaded for integral types:</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_fetch_xor_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_fetch_xor</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`exclusive or`</ph> on a value and an existing value that is stored in an <ph id="ph2">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The value contained by the atomic object immediately before the operation was performed.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_fetch_xor`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to replace the stored value of <ph id="ph3">`Atom`</ph> with a bitwise <ph id="ph4">`exclusive or`</ph> of <ph id="ph5">`Value`</ph> and the current value that is stored in <ph id="ph6">`Atom`</ph>, using the <ph id="ph7">`memory_order_seq_cst`</ph><bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_fetch_xor_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_fetch_xor_explicit</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`exclusive or`</ph> on a value and an existing value that is stored in an <ph id="ph2">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The value contained by the atomic object immediately before the operation was performed.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic_fetch_xor_explicit`</ph> function performs a <ph id="ph2">`read-modify-write`</ph> operation to replace the stored value of <ph id="ph3">`Atom`</ph> with a bitwise <ph id="ph4">`exclusive or`</ph> of <ph id="ph5">`Value`</ph> and the current value that is stored in <ph id="ph6">`Atom`</ph>, within the <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints that are specified by <ph id="ph7">`Order`</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_flag_clear_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_flag_clear</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">`bool`</ph> flag in an <bpt id="p1">[</bpt>atomic_flag<ept id="p1">](../standard-library/atomic-flag-structure.md)</ept> object to <ph id="ph2">`false`</ph>, within the <ph id="ph3">`memory_order_seq_cst`</ph><bpt id="p2">[</bpt>memory_order<ept id="p2">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic_flag`</ph> object.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_flag_clear_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_flag_clear_explicit</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">`bool`</ph> flag in an <bpt id="p1">[</bpt>atomic_flag<ept id="p1">](../standard-library/atomic-flag-structure.md)</ept> object to <ph id="ph2">`false`</ph>, within the specified <bpt id="p2">[</bpt>memory_order<ept id="p2">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic_flag`</ph> object.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_flag_test_and_set_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_flag_test_and_set</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">`bool`</ph> flag in an <bpt id="p1">[</bpt>atomic_flag<ept id="p1">](../standard-library/atomic-flag-structure.md)</ept> object to <ph id="ph2">`true`</ph>, within the constraints of the <ph id="ph3">`memory_order_seq_cst`</ph><bpt id="p2">[</bpt>memory_order<ept id="p2">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic_flag`</ph> object.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The initial value of <ph id="ph1">`Flag`</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_flag_test_and_set_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_flag_test_and_set_explicit</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">`bool`</ph> flag in an <bpt id="p1">[</bpt>atomic_flag<ept id="p1">](../standard-library/atomic-flag-structure.md)</ept> object to <ph id="ph2">`true`</ph>, within the specified <bpt id="p2">[</bpt>memory_order<ept id="p2">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic_flag`</ph> object.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The initial value of <ph id="ph1">`Flag`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_init_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_init</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Sets the stored value in an <ph id="ph1">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`atomic_init`</ph> is not an atomic operation.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>It is not thread-safe.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_is_lock_free_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_is_lock_free</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Specifies whether atomic operations on an <ph id="ph1">`atomic`</ph> object are <bpt id="p1">*</bpt>lock-free<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that stores a value of type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if atomic operations on <ph id="ph2">`Atom`</ph> are lock-free; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>An atomic type is lock-free if no atomic operations on that type use locks.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If this function returns true, the type is safe to use in signal-handlers.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_load_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_load</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Retrieves the stored value in an <ph id="ph1">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that contains a value of type <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The retrieved value that is stored in <ph id="ph1">`Atom`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`atomic_load`</ph> implicitly uses the <ph id="ph2">`memory_order_seq_cst`</ph><bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_load_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_load_explicit</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Retrieves the stored value in an <ph id="ph1">`atomic`</ph> object, within a specified <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that contains a value of type <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Do not use <ph id="ph1">`memory_order_release`</ph> or <ph id="ph2">`memory_order_acq_rel`</ph>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The retrieved value that is stored in <ph id="ph1">`Atom`</ph>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_signal_fence_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_signal_fence</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Acts as a <bpt id="p1">*</bpt>fence<ept id="p1">*</ept>—which is a memory synchronization primitive that enforces ordering between load/store operations—between other fences in a calling thread that have signal handlers that are executed in the same thread.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>A memory ordering constraint that determines fence type.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Order`</ph> argument determines fence type.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The fence has no effect.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The fence is an acquire fence.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The fence is an acquire fence.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The fence is a release fence.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The fence is both an acquire fence and a release fence.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The fence is both an acquire fence and a release fence, and is sequentially consistent.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_store_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_store</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Atomically stores a value in an atomic object.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A pointer to an atomic object that contains a value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`atomic_store`</ph> stores <ph id="ph2">`Value`</ph> in the object that is pointed to by <ph id="ph3">`Atom`</ph>, within the <ph id="ph4">`memory_order_seq_cst`</ph><bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraint.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_store_explicit_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_store_explicit</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Atomically stores a value in an atomic object.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`atomic`</ph> object that contains a value of type <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Do not use <ph id="ph1">`memory_order_consume`</ph>, <ph id="ph2">`memory_order_acquire`</ph>, or <ph id="ph3">`memory_order_acq_rel`</ph>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`atomic_store`</ph> stores <ph id="ph2">`Value`</ph> in the object that is pointed to by <ph id="ph3">`Atom`</ph>, within the <ph id="ph4">`memory_order`</ph> that is specified by <ph id="ph5">`Order`</ph>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atomic_thread_fence_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  atomic_thread_fence</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Acts as a <bpt id="p1">*</bpt>fence<ept id="p1">*</ept>—which is a memory synchronization primitive that enforces ordering between load/store operations—without an associated atomic operation.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>A memory ordering constraint that determines fence type.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Order`</ph> argument determines fence type.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The fence has no effect.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The fence is an acquire fence.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The fence is an acquire fence.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The fence is a release fence.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The fence is both an acquire fence and a release fence.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The fence is both an acquire fence and a release fence, and is sequentially consistent.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="kill_dependency_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  kill_dependency</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Removes a dependency.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The return value is <ph id="ph1">`Arg`</ph>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The evaluation of <ph id="ph1">`Arg`</ph> does not carry a dependency to the function call.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>By breaking a possible dependency chain, the function might permit the compiler to generate more efficient code.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>atomic&gt;<ept id="p1">](../standard-library/atomic.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>