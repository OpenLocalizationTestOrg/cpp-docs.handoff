<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c21453d185fed2c33e7cb054e77e1698fadf491b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-warnings\compiler-warning-level-1-c4297.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6210622607d9ed7e6a66d9e627f919acd71d377</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11ed0cf1d0e0cce0ad383cf0c28fd59229c6c00d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4297 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4297</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>'function' : function assumed not to throw an exception but does</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A function declaration contains a (possibly implicit) <ph id="ph1">`noexcept`</ph> specifier, an empty <ph id="ph2">`throw`</ph> exception specifier, or a <bpt id="p1">[</bpt>__declspec(nothrow)<ept id="p1">](../../cpp/nothrow-cpp.md)</ept> attribute, and the definition contains one or more <bpt id="p2">[</bpt>throw<ept id="p2">](../../cpp/try-throw-and-catch-statements-cpp.md)</ept> statements.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To resolve C4297, do not attempt to throw exceptions in functions that are declared <ph id="ph1">`__declspec(nothrow)`</ph>, <ph id="ph2">`noexcept(true)`</ph> or <ph id="ph3">`throw()`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Alternatively, remove the <ph id="ph1">`noexcept`</ph>, <ph id="ph2">`throw()`</ph>, or <ph id="ph3">`__declspec(nothrow)`</ph> specification.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>By default, the compiler generates implicit <ph id="ph1">`noexcept(true)`</ph> specifiers for user-defined destructors and deallocator functions and compiler-generated special member functions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This conforms to the ISO C++11 standard.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To prevent generation of implicit noexcept specifiers and revert the compiler to the non-standard behavior of Visual Studio 2013, use the <bpt id="p1">**</bpt>/Zc:implicitNoexcept-<ept id="p1">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/Zc:implicitNoexcept (Implicit Exception Specifiers)<ept id="p1">](../../build/reference/zc-implicitnoexcept-implicit-exception-specifiers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information on exception specifications, see <bpt id="p1">[</bpt>Exception Specifications (throw)<ept id="p1">](../../cpp/exception-specifications-throw-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Also, see <bpt id="p1">[</bpt>/EH (Exception Handling Model)<ept id="p1">](../../build/reference/eh-exception-handling-model.md)</ept> for information on how to modify exception handling behavior at compile time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This warning is also generated for __declspec(<bpt id="p1">[</bpt>dllexport<ept id="p1">](../../cpp/dllexport-dllimport.md)</ept>) functions marked extern "C", even if they are C++ functions.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following sample generates C4297:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>