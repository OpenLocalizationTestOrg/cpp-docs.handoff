<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">829bb316426d0749e763672e3182aeb4ba6aa630</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cedit-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">422b7e48290413ddcd5ebf9ba03a29b4df0bddd5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d2be848a48c6b602ba27e2c063d3fda5aa4d0ff</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CEdit Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CEdit Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the functionality of a Windows edit control.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::CEdit<ept id="p1">](#cedit__cedit)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CEdit`</ph> control object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::CanUndo<ept id="p1">](#cedit__canundo)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Determines whether an edit-control operation can be undone.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::CharFromPos<ept id="p1">](#cedit__charfrompos)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Retrieves the line and character indexes for the character closest to a specified position.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::Clear<ept id="p1">](#cedit__clear)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Deletes (clears) the current selection (if any) in the edit control.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::Copy<ept id="p1">](#cedit__copy)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Copies the current selection (if any) in the edit control to the Clipboard in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::Create<ept id="p1">](#cedit__create)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates the Windows edit control and attaches it to the <ph id="ph1">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::Cut<ept id="p1">](#cedit__cut)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Deletes (cuts) the current selection (if any) in the edit control and copies the deleted text to the Clipboard in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::EmptyUndoBuffer<ept id="p1">](#cedit__emptyundobuffer)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Resets (clears) the undo flag of an edit control.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::FmtLines<ept id="p1">](#cedit__fmtlines)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Sets the inclusion of soft line-break characters on or off within a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetCueBanner<ept id="p1">](#cedit__getcuebanner)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Retrieves the text that is displayed as the text cue, or tip, in an edit control when the control is empty and does not have focus.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetFirstVisibleLine<ept id="p1">](#cedit__getfirstvisibleline)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Determines the topmost visible line in an edit control.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetHandle<ept id="p1">](#cedit__gethandle)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Retrieves a handle to the memory that is currently allocated for a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetHighlight<ept id="p1">](#cedit__gethighlight)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gets the indexes of the starting and ending characters in a range of text that is highlighted in the current edit control.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetLimitText<ept id="p1">](#cedit__getlimittext)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the maximum amount of text this <ph id="ph1">`CEdit`</ph> can contain.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetLine<ept id="p1">](#cedit__getline)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Retrieves a line of text from an edit control.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetLineCount<ept id="p1">](#cedit__getlinecount)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Retrieves the number of lines in a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetMargins<ept id="p1">](#cedit__getmargins)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets the left and right margins for this <ph id="ph1">`CEdit`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetModify<ept id="p1">](#cedit__getmodify)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Determines whether the contents of an edit control have been modified.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetPasswordChar<ept id="p1">](#cedit__getpasswordchar)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Retrieves the password character displayed in an edit control when the user enters text.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetRect<ept id="p1">](#cedit__getrect)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets the formatting rectangle of an edit control.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::GetSel<ept id="p1">](#cedit__getsel)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the first and last character positions of the current selection in an edit control.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::HideBalloonTip<ept id="p1">](#cedit__hideballoontip)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Hides any balloon tip associated with the current edit control.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::LimitText<ept id="p1">](#cedit__limittext)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Limits the length of the text that the user can enter into an edit control.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::LineFromChar<ept id="p1">](#cedit__linefromchar)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Retrieves the line number of the line that contains the specified character index.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::LineIndex<ept id="p1">](#cedit__lineindex)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Retrieves the character index of a line within a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::LineLength<ept id="p1">](#cedit__linelength)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Retrieves the length of a line in an edit control.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::LineScroll<ept id="p1">](#cedit__linescroll)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Scrolls the text of a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::Paste<ept id="p1">](#cedit__paste)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Inserts the data from the Clipboard into the edit control at the current cursor position.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Data is inserted only if the Clipboard contains data in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::PosFromChar<ept id="p1">](#cedit__posfromchar)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Retrieves the coordinates of the upper-left corner of a specified character index.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::ReplaceSel<ept id="p1">](#cedit__replacesel)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Replaces the current selection in an edit control with the specified text.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetCueBanner<ept id="p1">](#cedit__setcuebanner)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Sets the text that is displayed as the text cue, or tip, in an edit control when the control is empty and does not have focus.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetHandle<ept id="p1">](#cedit__sethandle)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Sets the handle to the local memory that will be used by a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetHighlight<ept id="p1">](#cedit__sethighlight)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Highlights a range of text that is displayed in the current edit control.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetLimitText<ept id="p1">](#cedit__setlimittext)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Sets the maximum amount of text this <ph id="ph1">`CEdit`</ph> can contain.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetMargins<ept id="p1">](#cedit__setmargins)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Sets the left and right margins for this <ph id="ph1">`CEdit`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetModify<ept id="p1">](#cedit__setmodify)</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Sets or clears the modification flag for an edit control.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetPasswordChar<ept id="p1">](#cedit__setpasswordchar)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Sets or removes a password character displayed in an edit control when the user enters text.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetReadOnly<ept id="p1">](#cedit__setreadonly)</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Sets the read-only state of an edit control.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetRect<ept id="p1">](#cedit__setrect)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Sets the formatting rectangle of a multiple-line edit control and updates the control.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetRectNP<ept id="p1">](#cedit__setrectnp)</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Sets the formatting rectangle of a multiple-line edit control without redrawing the control window.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetSel<ept id="p1">](#cedit__setsel)</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Selects a range of characters in an edit control.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::SetTabStops<ept id="p1">](#cedit__settabstops)</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Sets the tab stops in a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::ShowBalloonTip<ept id="p1">](#cedit__showballoontip)</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Displays a balloon tip that is associated with the current edit control.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CEdit::Undo<ept id="p1">](#cedit__undo)</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Reverses the last edit-control operation.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>An edit control is a rectangular child window in which the user can enter text.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can create an edit control either from a dialog template or directly in your code.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In both cases, first call the constructor <ph id="ph1">`CEdit`</ph> to construct the <ph id="ph2">`CEdit`</ph> object, then call the <bpt id="p1">[</bpt>Create<ept id="p1">](#cedit__create)</ept> member function to create the Windows edit control and attach it to the <ph id="ph3">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Construction can be a one-step process in a class derived from <ph id="ph1">`CEdit`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Write a constructor for the derived class and call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> from within the constructor.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CEdit`</ph> inherits significant functionality from <ph id="ph2">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To set and retrieve text from a <ph id="ph1">`CEdit`</ph> object, use the <ph id="ph2">`CWnd`</ph> member functions <bpt id="p1">[</bpt>SetWindowText<ept id="p1">](cwnd-class.md#cwnd__setwindowtext)</ept> and <bpt id="p2">[</bpt>GetWindowText<ept id="p2">](cwnd-class.md#cwnd__getwindowtext)</ept>, which set or get the entire contents of an edit control, even if it is a multiline control.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Text lines in a multiline control are separated by '\r\n' character sequences.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Also, if an edit control is multiline, get and set part of the control's text by calling the <ph id="ph1">`CEdit`</ph> member functions <bpt id="p1">[</bpt>GetLine<ept id="p1">](#cedit__getline)</ept>, <bpt id="p2">[</bpt>SetSel<ept id="p2">](#cedit__setsel)</ept>, <bpt id="p3">[</bpt>GetSel<ept id="p3">](#cedit__getsel)</ept>, and <bpt id="p4">[</bpt>ReplaceSel<ept id="p4">](#cedit__replacesel)</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If you want to handle Windows notification messages sent by an edit control to its parent (usually a class derived from <ph id="ph1">`CDialog`</ph>), add a message-map entry and message-handler member function to the parent class for each message.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Each message-map entry takes the following form:</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_<ept id="p1">**</ept>Notification <bpt id="p2">**</bpt>(<ept id="p2">**</ept> <bpt id="p3">*</bpt>id, memberFxn<ept id="p3">*</ept><bpt id="p4">**</bpt>)<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`id`</ph> specifies the child window ID of the edit control sending the notification, and <ph id="ph2">`memberFxn`</ph> is the name of the parent member function you have written to handle the notification.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The parent's function prototype is as follows:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg<ept id="p1">**</ept> void memberFxn <bpt id="p2">**</bpt>( );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Following is a list of potential message-map entries and a description of the cases in which they would be sent to the parent:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_EN_CHANGE<ept id="p1">**</ept> The user has taken an action that may have altered text in an edit control.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Unlike the <bpt id="p1">**</bpt>EN_UPDATE<ept id="p1">**</ept> notification message, this notification message is sent after Windows updates the display.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_EN_ERRSPACE<ept id="p1">**</ept> The edit control cannot allocate enough memory to meet a specific request.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_EN_HSCROLL<ept id="p1">**</ept> The user clicks an edit control's horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The parent window is notified before the screen is updated.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_EN_KILLFOCUS<ept id="p1">**</ept> The edit control loses the input focus.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_EN_MAXTEXT<ept id="p1">**</ept> The current insertion has exceeded the specified number of characters for the edit control and has been truncated.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Also sent when an edit control does not have the <bpt id="p1">**</bpt>ES_AUTOHSCROLL<ept id="p1">**</ept> style and the number of characters to be inserted would exceed the width of the edit control.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Also sent when an edit control does not have the <bpt id="p1">**</bpt>ES_AUTOVSCROLL<ept id="p1">**</ept> style and the total number of lines resulting from a text insertion would exceed the height of the edit control.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_EN_SETFOCUS<ept id="p1">**</ept> Sent when an edit control receives the input focus.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_EN_UPDATE<ept id="p1">**</ept> The edit control is about to display altered text.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Sent after the control has formatted the text but before it screens the text so that the window size can be altered, if necessary.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_EN_VSCROLL<ept id="p1">**</ept> The user clicks an edit control's vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The parent window is notified before the screen is updated.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If you create a <ph id="ph1">`CEdit`</ph> object within a dialog box, the <ph id="ph2">`CEdit`</ph> object is automatically destroyed when the user closes the dialog box.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If you create a <ph id="ph1">`CEdit`</ph> object from a dialog resource using the dialog editor, the <ph id="ph2">`CEdit`</ph> object is automatically destroyed when the user closes the dialog box.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If you create a <ph id="ph1">`CEdit`</ph> object within a window, you may also need to destroy it.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If you create the <ph id="ph1">`CEdit`</ph> object on the stack, it is destroyed automatically.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If you create the <ph id="ph1">`CEdit`</ph> object on the heap by using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> function, you must call <bpt id="p2">**</bpt>delete<ept id="p2">**</ept> on the object to destroy it when the user terminates the Windows edit control.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If you allocate any memory in the <ph id="ph1">`CEdit`</ph> object, override the <ph id="ph2">`CEdit`</ph> destructor to dispose of the allocations.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>To modify certain styles in an edit control (such as <bpt id="p1">**</bpt>ES_READONLY<ept id="p1">**</ept>) you must send specific messages to the control instead of using <bpt id="p2">[</bpt>ModifyStyle<ept id="p2">](cwnd-class.md#cwnd__modifystyle)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Edit Control Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775464)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CEdit`</ph>, see:</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Controls<ept id="p1">](../../mfc/controls-mfc.md)</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Knowledge Base article Q259949 : INFO: SetCaretPos() Is Not Appropriate with CEdit or CRichEditCtrl Controls</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd<ept id="p1">](cwnd-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__canundo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::CanUndo</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Call this function to determine if the last edit operation can be undone.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Nonzero if the last edit operation can be undone by a call to the <bpt id="p1">**</bpt>Undo<ept id="p1">**</ept> member function; 0 if it cannot be undone.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_CANUNDO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775468)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEdit::Undo<ept id="p1">](#cedit__undo)</ept>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__cedit"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::CEdit</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>Create<ept id="p1">](#cedit__create)</ept> to construct the Windows edit control.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#1<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__charfrompos"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::CharFromPos</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the zero-based line and character indices of the character nearest the specified point in this <ph id="ph1">`CEdit`</ph> control</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The coordinates of a point in the client area of this <ph id="ph1">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The character index in the low-order <bpt id="p1">**</bpt>WORD<ept id="p1">**</ept>, and the line index in the high-order <bpt id="p2">**</bpt>WORD<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>This member function is available beginning with Windows 95 and Windows NT 4.0.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_CHARFROMPOS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761566)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#3<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__clear"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::Clear</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Call this function to delete (clear) the current selection (if any) in the edit control.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The deletion performed by <bpt id="p1">**</bpt>Clear<ept id="p1">**</ept> can be undone by calling the <bpt id="p2">[</bpt>Undo<ept id="p2">](#cedit__undo)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>To delete the current selection and place the deleted contents into the Clipboard, call the <bpt id="p1">[</bpt>Cut<ept id="p1">](#cedit__cut)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WM_CLEAR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649020)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#4<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__copy"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::Copy</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Call this function to coy the current selection (if any) in the edit control to the Clipboard in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WM_COPY<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649022)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#5<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::Create</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Creates the Windows edit control and attaches it to the <ph id="ph1">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Specifies the edit control's style.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Apply any combination of <bpt id="p1">[</bpt>edit styles<ept id="p1">](edit-styles.md)</ept> to the control.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Specifies the edit control's size and position.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Can be a <ph id="ph1">`CRect`</ph> object or <ph id="ph2">`RECT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Specifies the edit control's parent window (usually a <ph id="ph1">`CDialog`</ph>).</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>It must not be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Specifies the edit control's ID.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Nonzero if initialization is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You construct a <ph id="ph1">`CEdit`</ph> object in two steps.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>First, call the <ph id="ph1">`CEdit`</ph> constructor and then call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, which creates the Windows edit control and attaches it to the <ph id="ph2">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> executes, Windows sends the <bpt id="p2">[</bpt>WM_NCCREATE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms632635)</ept>, <bpt id="p3">[</bpt>WM_NCCALCSIZE<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms632634)</ept>, <bpt id="p4">[</bpt>WM_CREATE<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/ms632619)</ept>, and <bpt id="p5">[</bpt>WM_GETMINMAXINFO<ept id="p5">](http://msdn.microsoft.com/library/windows/desktop/ms632626)</ept> messages to the edit control.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>These messages are handled by default by the <bpt id="p1">[</bpt>OnNcCreate<ept id="p1">](cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id="p2">[</bpt>OnNcCalcSize<ept id="p2">](cwnd-class.md#cwnd__onnccalcsize)</ept>, <bpt id="p3">[</bpt>OnCreate<ept id="p3">](cwnd-class.md#cwnd__oncreate)</ept>, and <bpt id="p4">[</bpt>OnGetMinMaxInfo<ept id="p4">](cwnd-class.md#cwnd__ongetminmaxinfo)</ept> member functions in the <ph id="ph1">`CWnd`</ph> base class.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>To extend the default message handling, derive a class from <ph id="ph1">`CEdit`</ph>, add a message map to the new class, and override the above message-handler member functions.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnCreate`</ph>, for example, to perform needed initialization for the new class.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Apply the following <bpt id="p1">[</bpt>window styles<ept id="p1">](window-styles.md)</ept> to an edit control.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_CHILD<ept id="p1">**</ept> Always</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> Usually</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_DISABLED<ept id="p1">**</ept> Rarely</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_GROUP<ept id="p1">**</ept> To group controls</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_TABSTOP<ept id="p1">**</ept> To include edit control in the tabbing order</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#2<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__cut"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::Cut</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Call this function to delete (cut) the current selection (if any) in the edit control and copy the deleted text to the Clipboard in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The deletion performed by <bpt id="p1">**</bpt>Cut<ept id="p1">**</ept> can be undone by calling the <bpt id="p2">[</bpt>Undo<ept id="p2">](#cedit__undo)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>To delete the current selection without placing the deleted text into the Clipboard, call the <bpt id="p1">[</bpt>Clear<ept id="p1">](#cedit__clear)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WM_CUT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649023)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#6<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__emptyundobuffer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::EmptyUndoBuffer</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Call this function to reset (clear) the undo flag of an edit control.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The edit control will now be unable to undo the last operation.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The undo flag is set whenever an operation within the edit control can be undone.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The undo flag is automatically cleared whenever the <bpt id="p1">[</bpt>SetWindowText<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext)</ept> or <bpt id="p2">[</bpt>SetHandle<ept id="p2">](#cedit__sethandle)</ept><ph id="ph1">`CWnd`</ph> member functions are called.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_EMPTYUNDOBUFFER<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761568)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#7<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__fmtlines"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::FmtLines</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Call this function to set the inclusion of soft line-break characters on or off within a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bAddEOL<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Specifies whether soft line-break characters are to be inserted.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>A value of <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> inserts the characters; a value of <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> removes them.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Nonzero if any formatting occurs; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A soft line break consists of two carriage returns and a linefeed inserted at the end of a line that is broken because of word wrapping.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>A hard line break consists of one carriage return and a linefeed.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Lines that end with a hard line break are not affected by <ph id="ph1">`FmtLines`</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Windows will only respond if the <ph id="ph1">`CEdit`</ph> object is a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FmtLines`</ph> only affects the buffer returned by <bpt id="p1">[</bpt>GetHandle<ept id="p1">](#cedit__gethandle)</ept> and the text returned by <bpt id="p2">[</bpt>WM_GETTEXT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms632627)</ept>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>It has no impact on the display of the text within the edit control.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_FMTLINES<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761570)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#8<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_8.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__getcuebanner"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetCueBanner</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Retrieves the text that is displayed as the text cue, or tip, in an edit control when the control is empty.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`lpszText`</ph></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A pointer to a string that contains the cue text.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`cchText`</ph></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The number of characters that can be received.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>This number includes the terminating <ph id="ph1">`NULL`</ph> character.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>For the first overload, <ph id="ph1">`true`</ph> if the method is successful; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>For the second overload, a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/using-cstring.md)</ept> that contains the cue text if the method is successful; otherwise, the empty string ("").</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>EM_GETCUEBANNER<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761572)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Edit_GetCueBannerText<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761695)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__getfirstvisibleline"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetFirstVisibleLine</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Call this function to determine the topmost visible line in an edit control.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The zero-based index of the topmost visible line.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>For single-line edit controls, the return value is 0.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_GETFIRSTVISIBLELINE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761574)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#9<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_9.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__gethandle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetHandle</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve a handle to the memory currently allocated for a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A local memory handle that identifies the buffer holding the contents of the edit control.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>If an error occurs, such as sending the message to a single-line edit control, the return value is 0.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The handle is a local memory handle and may be used by any of the <bpt id="p1">**</bpt>Local<ept id="p1">**</ept> Windows memory functions that take a local memory handle as a parameter.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetHandle<ept id="p1">**</ept> is processed only by multiple-line edit controls.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>GetHandle<ept id="p1">**</ept> for a multiple-line edit control in a dialog box only if the dialog box was created with the <bpt id="p2">**</bpt>DS_LOCALEDIT<ept id="p2">**</ept> style flag set.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>DS_LOCALEDIT<ept id="p1">**</ept> style is not set, you will still get a nonzero return value, but you will not be able to use the returned value.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetHandle<ept id="p1">**</ept> will not work with Windows 95/98.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">**</bpt>GetHandle<ept id="p1">**</ept> in Windows 95/98, it will return <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetHandle<ept id="p1">**</ept> will work as documented under Windows NT, versions 3.51 and later.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_GETHANDLE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761576)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#10<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_10.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__gethighlight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetHighlight</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Gets the indexes of the first and last characters in a range of text that is highlighted in the current edit control.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`pichStart`</ph></source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Zero-based index of the first character in the range of text that is highlighted.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`pichEnd`</ph></source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Zero-based index of the last character in the range of text that is highlighted.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>EM_GETHILITE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761578)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__getlimittext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetLimitText</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Call this member function to get the text limit for this <ph id="ph1">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The current text limit, in bytes, for this <ph id="ph1">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The text limit is the maximum amount of text, in bytes, that the edit control can accept.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>This member function is available beginning with Windows 95 and Windows NT 4.0.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_GETLIMITTEXT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761582)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#11<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_11.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__getline"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetLine</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve a line of text from an edit control and places it in <ph id="ph1">`lpszBuffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Specifies the line number to retrieve from a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Line numbers are zero-based; a value of 0 specifies the first line.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>This parameter is ignored by a single-line edit control.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Points to the buffer that receives a copy of the line.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The first word of the buffer must specify the maximum number of characters that can be copied to the buffer.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Specifies the maximum number of bytes that can be copied to the buffer.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetLine`</ph> places this value in the first word of <ph id="ph2">`lpszBuffer`</ph> before making the call to Windows.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The number of bytes actually copied.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The return value is 0 if the line number specified by <ph id="ph1">`nIndex`</ph> is greater than the number of lines in the edit control.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The copied line does not contain a null-termination character.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_GETLINE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761584)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEdit::GetLineCount<ept id="p1">](#cedit__getlinecount)</ept>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__getlinecount"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetLineCount</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the number of lines in a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>An integer containing the number of lines in the multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>If no text has been entered into the edit control, the return value is 1.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetLineCount`</ph> is only processed by multiple-line edit controls.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_GETLINECOUNT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761586)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#12<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_12.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__getmargins"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetMargins</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the left and right margins of this edit control.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The width of the left margin in the low-order <bpt id="p1">**</bpt>WORD<ept id="p1">**</ept> and the width of the right margin in the high-order <bpt id="p2">**</bpt>WORD<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Margins are measured in pixels.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>This member function is available beginning with Windows 95 and Windows NT 4.0.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_GETMARGINS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761590)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEditView::GetEditCtrl<ept id="p1">](ceditview-class.md#ceditview__geteditctrl)</ept>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__getmodify"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetModify</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Call this function to determine whether the contents of an edit control have been modified.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Nonzero if the edit-control contents have been modified; 0 if they have remained unchanged.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Windows maintains an internal flag indicating whether the contents of the edit control have been changed.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>This flag is cleared when the edit control is first created and may also be cleared by calling the <bpt id="p1">[</bpt>SetModify<ept id="p1">](#cedit__setmodify)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_GETMODIFY<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761592)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#13<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_13.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__getpasswordchar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetPasswordChar</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the password character that is displayed in an edit control when the user enters text.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Specifies the character to be displayed instead of the character that the user typed.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The return value is <ph id="ph1">`NULL`</ph> if no password character exists.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>If you create the edit control with the <bpt id="p1">**</bpt>ES_PASSWORD<ept id="p1">**</ept> style, the DLL that supports the control determines the default password character.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The manifest or the <bpt id="p1">[</bpt>InitCommonControlsEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775697)</ept> method determines which DLL supports the edit control.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>If user32.dll supports the edit control, the default password character is ASTERISK ('*', U+002A).</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>If comctl32.dll version 6 supports the edit control, the default character is BLACK CIRCLE ('●', U+25CF).</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>For more information about which DLL and version supports the common controls, see <bpt id="p1">[</bpt>Shell and Common Controls Versions<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb776779)</ept>.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>EM_GETPASSWORDCHAR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761594)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#14<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_14.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__getrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetRect</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Call this function to get the formatting rectangle of an edit control.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`RECT`</ph> structure that receives the formatting rectangle.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The formatting rectangle is the limiting rectangle of the text, which is independent of the size of the edit-control window.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The formatting rectangle of a multiple-line edit control can be modified by the <bpt id="p1">[</bpt>SetRect<ept id="p1">](#cedit__setrect)</ept> and <bpt id="p2">[</bpt>SetRectNP<ept id="p2">](#cedit__setrectnp)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_GETRECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761596)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEdit::LimitText<ept id="p1">](#cedit__limittext)</ept>.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__getsel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::GetSel</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Call this function to get the starting and ending character positions of the current selection (if any) in an edit control, using either the return value or the parameters.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Reference to an integer that will receive the position of the first character in the current selection.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Reference to an integer that will receive the position of the first nonselected character past the end of the current selection.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>The version that returns a <ph id="ph1">`DWORD`</ph> returns a value that contains the starting position in the low-order word and the position of the first nonselected character after the end of the selection in the high-order word.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_GETSEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761598)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#15<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_15.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__hideballoontip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::HideBalloonTip</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Hides any balloon tip associated with the current edit control.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>This function sends the <bpt id="p1">[</bpt>EM_HIDEBALLOONTIP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761604)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__limittext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::LimitText</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Call this function to limit the length of the text that the user may enter into an edit control.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Specifies the length (in bytes) of the text that the user can enter.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>If this parameter is 0, the text length is set to <bpt id="p1">**</bpt>UINT_MAX<ept id="p1">**</ept> bytes.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>This is the default behavior.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Changing the text limit restricts only the text the user can enter.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>It has no effect on any text already in the edit control, nor does it affect the length of the text copied to the edit control by the <bpt id="p1">[</bpt>SetWindowText<ept id="p1">](cwnd-class.md#cwnd__setwindowtext)</ept> member function in <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>If an application uses the <ph id="ph1">`SetWindowText`</ph> function to place more text into an edit control than is specified in the call to <ph id="ph2">`LimitText`</ph>, the user can delete any of the text within the edit control.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>However, the text limit will prevent the user from replacing the existing text with new text, unless deleting the current selection causes the text to fall below the text limit.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>In Win32 (Windows NT and Windows 95/98), <bpt id="p1">[</bpt>SetLimitText<ept id="p1">](#cedit__setlimittext)</ept> replaces this function.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_LIMITTEXT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761607)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#17<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_16.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__linefromchar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::LineFromChar</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the line number of the line that contains the specified character index.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Contains the zero-based index value for the desired character in the text of the edit control, or contains –1.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndex`</ph> is –1, it specifies the current line, that is, the line that contains the caret.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The zero-based line number of the line containing the character index specified by <ph id="ph1">`nIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndex`</ph> is –1, the number of the line that contains the first character of the selection is returned.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>If there is no selection, the current line number is returned.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>A character index is the number of characters from the beginning of the edit control.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>This member function is only used by multiple-line edit controls.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_LINEFROMCHAR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761609)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#18<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_17.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__lineindex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::LineIndex</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the character index of a line within a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Contains the index value for the desired line in the text of the edit control, or contains –1.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nLine`</ph> is –1, it specifies the current line, that is, the line that contains the caret.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The character index of the line specified in <ph id="ph1">`nLine`</ph> or –1 if the specified line number is greater than the number of lines in the edit control.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>The character index is the number of characters from the beginning of the edit control to the specified line.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>This member function is only processed by multiple-line edit controls.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_LINEINDEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761611)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#19<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_18.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__linelength"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::LineLength</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Retrieves the length of a line in an edit control.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The zero-based index of a character in the line whose length is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The default value is -1.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>For single-line edit controls, the return value is the length, in <ph id="ph1">`TCHAR`</ph>s, of the text in the edit control.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>For multiline edit controls, the return value is the length, in <ph id="ph1">`TCHAR`</ph>s, of the line specified by the <ph id="ph2">`nLine`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)]</ph> text, the length is the number of bytes in the line; for Unicode text, the length is the number of characters in the line.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The length does not include the carriage-return character at the end of the line.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`nLine`</ph> parameter is more than the number of characters in the control, the return value is zero.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`nLine`</ph> parameter is –1, the return value is the number of unselected characters in the lines that contain selected characters.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>For example, if the selection extends from the fourth character of one line through the eighth character from the end of the next line, the return value is 10.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>That is, three characters on the first line and seven on the next.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`TCHAR`</ph> type, see the <ph id="ph2">`TCHAR`</ph> row in the table in <bpt id="p1">[</bpt>Windows Data Types<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa383751)</ept>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>This method is supported by the <bpt id="p1">[</bpt>EM_LINELENGTH<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761613)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEdit::LineIndex<ept id="p1">](#cedit__lineindex)</ept>.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__linescroll"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::LineScroll</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Call this function to scroll the text of a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Specifies the number of lines to scroll vertically.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Specifies the number of character positions to scroll horizontally.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>This value is ignored if the edit control has either the <bpt id="p1">**</bpt>ES_RIGHT<ept id="p1">**</ept> or <bpt id="p2">**</bpt>ES_CENTER<ept id="p2">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>This member function is processed only by multiple-line edit controls.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>The edit control does not scroll vertically past the last line of text in the edit control.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>If the current line plus the number of lines specified by <ph id="ph1">`nLines`</ph> exceeds the total number of lines in the edit control, the value is adjusted so that the last line of the edit control is scrolled to the top of the edit-control window.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LineScroll`</ph> can be used to scroll horizontally past the last character of any line.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_LINESCROLL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761615)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEdit::GetFirstVisibleLine<ept id="p1">](#cedit__getfirstvisibleline)</ept>.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__paste"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::Paste</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Call this function to insert the data from the Clipboard into the <ph id="ph1">`CEdit`</ph> at the insertion point.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Data is inserted only if the Clipboard contains data in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WM_PASTE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649028)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#20<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_19.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__posfromchar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::PosFromChar</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Call this function to get the position (top-left corner) of a given character within this <ph id="ph1">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>The zero-based index of the specified character.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The coordinates of the top-left corner of the character specified by <ph id="ph1">`nChar`</ph>.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The character is specified by giving its zero-based index value.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nChar`</ph> is greater than the index of the last character in this <ph id="ph2">`CEdit`</ph> object, the return value specifies the coordinates of the character position just past the last character in this <ph id="ph3">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>This member function is available beginning with Windows 95 and Windows NT 4.0.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_POSFROMCHAR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761631)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEdit::LineFromChar<ept id="p1">](#cedit__linefromchar)</ept>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__replacesel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::ReplaceSel</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Call this function to replace the current selection in an edit control with the text specified by <ph id="ph1">`lpszNewText`</ph>.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string containing the replacement text.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>To specify that this function can be undone, set the value of this parameter to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> .</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Replaces only a portion of the text in an edit control.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>If you want to replace all of the text, use the <bpt id="p1">[</bpt>CWnd::SetWindowText<ept id="p1">](cwnd-class.md#cwnd__setwindowtext)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>If there is no current selection, the replacement text is inserted at the current cursor location.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_REPLACESEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761633)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEdit::LineIndex<ept id="p1">](#cedit__lineindex)</ept>.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__setcuebanner"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetCueBanner</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Sets the text that is displayed as the text cue, or tip, in an edit control when the control is empty.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszText`</ph></source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Pointer to a string that contains the cue to display in the edit control.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`fDrawWhenFocused`</ph></source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, the cue banner is not drawn when the user clicks in the edit control and gives the control the focus.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, the cue banner is drawn even when the control has focus.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>The cue banner disappears when the user starts to type in the control.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the method is successful; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>EM_SETCUEBANNER<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761639)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Edit_SetCueBannerTextFocused<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761703)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the <bpt id="p1">[</bpt>CEdit::SetCueBanner<ept id="p1">](#cedit__setcuebanner)</ept> method.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit_s1#2<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_20.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__sethandle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetHandle</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Call this function to set the handle to the local memory that will be used by a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>hBuffer<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Contains a handle to the local memory.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>This handle must have been created by a previous call to the <bpt id="p1">[</bpt>LocalAlloc<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa366723)</ept> Windows function using the <bpt id="p2">**</bpt>LMEM_MOVEABLE<ept id="p2">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>The memory is assumed to contain a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>If this is not the case, the first byte of the allocated memory should be set to 0.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>The edit control will then use this buffer to store the currently displayed text instead of allocating its own buffer.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>This member function is processed only by multiple-line edit controls.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Before an application sets a new memory handle, it should use the <bpt id="p1">[</bpt>GetHandle<ept id="p1">](#cedit__gethandle)</ept> member function to get the handle to the current memory buffer and free that memory using the <bpt id="p2">**</bpt>LocalFree<ept id="p2">**</ept> Windows function.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetHandle`</ph> clears the undo buffer (the <bpt id="p1">[</bpt>CanUndo<ept id="p1">](#cedit__canundo)</ept> member function then returns 0) and the internal modification flag (the <bpt id="p2">[</bpt>GetModify<ept id="p2">](#cedit__getmodify)</ept> member function then returns 0).</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The edit-control window is redrawn.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>You can use this member function in a multiple-line edit control in a dialog box only if you have created the dialog box with the <bpt id="p1">**</bpt>DS_LOCALEDIT<ept id="p1">**</ept> style flag set.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetHandle<ept id="p1">**</ept> will not work with Windows 95/98.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">**</bpt>GetHandle<ept id="p1">**</ept> in Windows 95/98, it will return <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetHandle<ept id="p1">**</ept> will work as documented under Windows NT, versions 3.51 and later.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_SETHANDLE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761641)</ept>, <bpt id="p2">[</bpt>LocalAlloc<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/aa366723)</ept>, and <bpt id="p3">[</bpt>LocalFree<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/aa366730)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#22<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_21.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__sethighlight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetHighlight</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Highlights a range of text that is displayed in the current edit control.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`ichStart`</ph></source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Zero-based index of the first character in the range of text to highlight.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`ichEnd`</ph></source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Zero-based index of the last character in the range of text to highlight.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>EM_SETHILITE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761643)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__setlimittext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetLimitText</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Call this member function to set the text limit for this <ph id="ph1">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>The new text limit, in characters.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The text limit is the maximum amount of text, in characters, that the edit control can accept.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Changing the text limit restricts only the text the user can enter.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>It has no effect on any text already in the edit control, nor does it affect the length of the text copied to the edit control by the <bpt id="p1">[</bpt>SetWindowText<ept id="p1">](cwnd-class.md#cwnd__setwindowtext)</ept> member function in <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>If an application uses the <ph id="ph1">`SetWindowText`</ph> function to place more text into an edit control than is specified in the call to <ph id="ph2">`LimitText`</ph>, the user can delete any of the text within the edit control.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>However, the text limit will prevent the user from replacing the existing text with new text, unless deleting the current selection causes the text to fall below the text limit.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>This function replaces <bpt id="p1">[</bpt>LimitText<ept id="p1">](#cedit__limittext)</ept> in Win32.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_SETLIMITTEXT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761647)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEditView::GetEditCtrl<ept id="p1">](ceditview-class.md#ceditview__geteditctrl)</ept>.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__setmargins"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetMargins</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Call this method to set the left and right margins of this edit control.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nLeft<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>The width of the new left margin, in pixels.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nRight<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>The width of the new right margin, in pixels.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>This member function is available beginning with Windows 95 and Windows NT 4.0.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_SETMARGINS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761649)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEditView::GetEditCtrl<ept id="p1">](ceditview-class.md#ceditview__geteditctrl)</ept>.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__setmodify"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetModify</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Call this function to set or clear the modified flag for an edit control.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>A value of <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> indicates that the text has been modified, and a value of <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> indicates it is unmodified.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>By default, the modified flag is set.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The modified flag indicates whether or not the text within the edit control has been modified.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>It is automatically set whenever the user changes the text.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Its value may be retrieved with the <bpt id="p1">[</bpt>GetModify<ept id="p1">](#cedit__getmodify)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_SETMODIFY<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761651)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEdit::GetModify<ept id="p1">](#cedit__getmodify)</ept>.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__setpasswordchar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetPasswordChar</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Call this function to set or remove a password character displayed in an edit control when the user types text.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>ch<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Specifies the character to be displayed in place of the character typed by the user.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>ch<ept id="p1">*</ept> is 0, the actual characters typed by the user are displayed.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>When a password character is set, that character is displayed for each character the user types.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>This member function has no effect on a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`SetPasswordChar`</ph> member function is called, <ph id="ph2">`CEdit`</ph> will redraw all visible characters using the character specified by <bpt id="p1">*</bpt>ch<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>If the edit control is created with the <bpt id="p1">[</bpt>ES_PASSWORD<ept id="p1">](edit-styles.md)</ept> style, the default password character is set to an asterisk ( <bpt id="p2">**</bpt><ph id="ph1">\*</ph><ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>This style is removed if <ph id="ph1">`SetPasswordChar`</ph> is called with <bpt id="p1">*</bpt>ch<ept id="p1">*</ept> set to 0.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_SETPASSWORDCHAR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761653)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#16<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_22.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__setreadonly"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetReadOnly</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Calls this function to set the read-only state of an edit control.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Specifies whether to set or remove the read-only state of the edit control.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>A value of <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> sets the state to read-only; a value of <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> sets the state to read/write.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Nonzero if the operation is successful, or 0 if an error occurs.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>The current setting can be found by testing the <bpt id="p1">[</bpt>ES_READONLY<ept id="p1">](edit-styles.md)</ept> flag in the return value of <bpt id="p2">[</bpt>CWnd::GetStyle<ept id="p2">](cwnd-class.md#cwnd__getstyle)</ept>.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_SETREADONLY<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761655)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#23<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_23.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__setrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetRect</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Call this function to set the dimensions of a rectangle using the specified coordinates.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`RECT`</ph> structure or <ph id="ph2">`CRect`</ph> object that specifies the new dimensions of the formatting rectangle.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>This member is processed only by multiple-line edit controls.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`SetRect`</ph> to set the formatting rectangle of a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>The formatting rectangle is the limiting rectangle of the text, which is independent of the size of the edit-control window.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>When the edit control is first created, the formatting rectangle is the same as the client area of the edit-control window.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>By using the <ph id="ph1">`SetRect`</ph> member function, an application can make the formatting rectangle larger or smaller than the edit-control window.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>If the edit control has no scroll bar, text will be clipped, not wrapped, if the formatting rectangle is made larger than the window.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>If the edit control contains a border, the formatting rectangle is reduced by the size of the border.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>If you adjust the rectangle returned by the <ph id="ph1">`GetRect`</ph> member function, you must remove the size of the border before you pass the rectangle to <ph id="ph2">`SetRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`SetRect`</ph> is called, the edit control's text is also reformatted and redisplayed.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_SETRECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761657)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#24<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_24.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__setrectnp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetRectNP</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Call this function to set the formatting rectangle of a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> structure or <ph id="ph2">`CRect`</ph> object that specifies the new dimensions of the rectangle.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The formatting rectangle is the limiting rectangle of the text, which is independent of the size of the edit-control window.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetRectNP`</ph> is identical to the <ph id="ph2">`SetRect`</ph> member function except that the edit-control window is not redrawn.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>When the edit control is first created, the formatting rectangle is the same as the client area of the edit-control window.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>By calling the <ph id="ph1">`SetRectNP`</ph> member function, an application can make the formatting rectangle larger or smaller than the edit-control window.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>If the edit control has no scroll bar, text will be clipped, not wrapped, if the formatting rectangle is made larger than the window.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>This member is processed only by multiple-line edit controls.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_SETRECTNP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761659)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEdit::SetRect<ept id="p1">](#cedit__setrect)</ept>.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__setsel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetSel</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Call this function to select a range of characters in an edit control.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dwSelection<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Specifies the starting position in the low-order word and the ending position in the high-order word.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>If the low-order word is 0 and the high-order word is –1, all the text in the edit control is selected.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>If the low-order word is –1, any current selection is removed.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bNoScroll<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Indicates whether the caret should be scrolled into view.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the caret is scrolled into view.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the caret is not scrolled into view.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Specifies the starting position.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nStartChar`</ph> is 0 and <ph id="ph2">`nEndChar`</ph> is –1, all the text in the edit control is selected.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nStartChar`</ph> is –1, any current selection is removed.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Specifies the ending position.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_SETSEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761661)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEdit::GetSel<ept id="p1">](#cedit__getsel)</ept>.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__settabstops"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::SetTabStops</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>Call this function to set the tab stops in a multiple-line edit control.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Specifies that tab stops are to be set at every <ph id="ph1">`cxEachStop`</ph> dialog units.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Specifies the number of tab stops contained in <ph id="ph1">`rgTabStops`</ph>.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>This number must be greater than 1.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Points to an array of unsigned integers specifying the tab stops in dialog units.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>A dialog unit is a horizontal or vertical distance.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>One horizontal dialog unit is equal to one-fourth of the current dialog base width unit, and 1 vertical dialog unit is equal to one-eighth of the current dialog base height unit.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>The dialog base units are computed based on the height and width of the current system font.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GetDialogBaseUnits<ept id="p1">**</ept> Windows function returns the current dialog base units in pixels.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Nonzero if the tabs were set; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>When text is copied to a multiple-line edit control, any tab character in the text will cause space to be generated up to the next tab stop.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>To set tab stops to the default size of 32 dialog units, call the parameterless version of this member function.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>To set tab stops to a size other than 32, call the version with the <ph id="ph1">`cxEachStop`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>To set tab stops to an array of sizes, use the version with two parameters.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>This member function is only processed by multiple-line edit controls.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetTabStops`</ph> does not automatically redraw the edit window.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>If you change the tab stops for text already in the edit control, call <bpt id="p1">[</bpt>CWnd::InvalidateRect<ept id="p1">](cwnd-class.md#cwnd__invalidaterect)</ept> to redraw the edit window.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_SETTABSTOPS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761663)</ept> and <bpt id="p2">[</bpt>GetDialogBaseUnits<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms645475)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CEditView::SetTabStops<ept id="p1">](ceditview-class.md#ceditview__settabstops)</ept>.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__showballoontip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::ShowBalloonTip</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Displays a balloon tip that is associated with the current edit control.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pEditBalloonTip`</ph></source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Pointer to an <bpt id="p1">[</bpt>EDITBALLOONTIP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775466)</ept> structure that describes the balloon tip.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszTitle`</ph></source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Pointer to a Unicode string that contains the title of the balloon tip.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszText`</ph></source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Pointer to a Unicode string that contains the balloon tip text.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`ttiIcon`</ph></source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`INT`</ph> that specifies the type of icon to associate with the balloon tip.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`TTI_NONE`</ph>.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`ttiIcon`</ph> member of the <bpt id="p1">[</bpt>EDITBALLOONTIP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775466)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>This function sends the <bpt id="p1">[</bpt>EM_SHOWBALLOONTIP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761668)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Edit_ShowBalloonTip<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761707)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>The following code example defines a variable, <ph id="ph1">`m_cedit`</ph>, that is used to access the current edit control.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>This variable is used in the next example.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit_s1#1<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_25.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>The following code example displays a balloon tip for an edit control.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CEdit::ShowBalloonTip<ept id="p1">](#cedit__showballoontip)</ept> method specifies a title and balloon tip text.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit_s1#3<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_26.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cedit__undo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CEdit::Undo</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Call this function to undo the last edit-control operation.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>For a single-line edit control, the return value is always nonzero.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>For a multiple-line edit control, the return value is nonzero if the undo operation is successful, or 0 if the undo operation fails.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>An undo operation can also be undone.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>For example, you can restore deleted text with the first call to <bpt id="p1">**</bpt>Undo<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>As long as there is no intervening edit operation, you can remove the text again with a second call to <bpt id="p1">**</bpt>Undo<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EM_UNDO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761670)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CEdit#25<ept id="p2">](../../mfc/reference/codesnippet/cpp/cedit-class_27.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFC Sample CALCDRIV<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MFC Sample CMNCTRL2<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWnd Class<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWnd Class<ept id="p1">](cwnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CButton Class<ept id="p1">](cbutton-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CComboBox Class<ept id="p1">](ccombobox-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CListBox Class<ept id="p1">](clistbox-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CScrollBar Class<ept id="p1">](cscrollbar-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CStatic Class<ept id="p1">](cstatic-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDialog Class<ept id="p1">](cdialog-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>