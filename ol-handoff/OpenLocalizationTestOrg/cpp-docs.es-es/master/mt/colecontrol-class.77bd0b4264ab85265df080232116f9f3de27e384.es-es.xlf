<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7a0f534c05d3f88625e438c98effe7509f5a25d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\colecontrol-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa72d2205cfebed0ad9e68456e10e39b35b48fe7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9a674b03ea85fc5691b541e4b256926b05813be</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>COleControl Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>COleControl Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A powerful base class for developing OLE controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::COleControl<ept id="p1">](#colecontrol__colecontrol)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`COleControl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientAppearance<ept id="p1">](#colecontrol__ambientappearance)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Retrieves the current appearance of the control.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientBackColor<ept id="p1">](#colecontrol__ambientbackcolor)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns the value of the ambient BackColor property.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientDisplayName<ept id="p1">](#colecontrol__ambientdisplayname)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Returns the name of the control as specified by the container.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientFont<ept id="p1">](#colecontrol__ambientfont)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns the value of the ambient Font property.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientForeColor<ept id="p1">](#colecontrol__ambientforecolor)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns the value of the ambient ForeColor property.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientLocaleID<ept id="p1">](#colecontrol__ambientlocaleid)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns the container's locale ID.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientScaleUnits<ept id="p1">](#colecontrol__ambientscaleunits)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Returns the type of units used by the container.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientShowGrabHandles<ept id="p1">](#colecontrol__ambientshowgrabhandles)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Determines if grab handles should be displayed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientShowHatching<ept id="p1">](#colecontrol__ambientshowhatching)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Determines if hatching should be displayed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientTextAlign<ept id="p1">](#colecontrol__ambienttextalign)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns the type of text alignment specified by the container.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientUIDead<ept id="p1">](#colecontrol__ambientuidead)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Determines if the control should respond to user-interface actions.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::AmbientUserMode<ept id="p1">](#colecontrol__ambientusermode)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Determines the mode of the container.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::BoundPropertyChanged<ept id="p1">](#colecontrol__boundpropertychanged)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Notifies the container that a bound property has been changed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::BoundPropertyRequestEdit<ept id="p1">](#colecontrol__boundpropertyrequestedit)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Requests permission to edit the property value.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ClientToParent<ept id="p1">](#colecontrol__clienttoparent)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Translates a point relative to the control's origin to a point relative to its container's origin.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ClipCaretRect<ept id="p1">](#colecontrol__clipcaretrect)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Adjusts a caret rectangle if it is overlapped by a control.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ControlInfoChanged<ept id="p1">](#colecontrol__controlinfochanged)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Call this function after the set of mnemonics handled by the control has changed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::DisplayError<ept id="p1">](#colecontrol__displayerror)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Displays stock Error events to the control's user.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::DoClick<ept id="p1">](#colecontrol__doclick)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Implementation of the stock <ph id="ph1">`DoClick`</ph> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::DoPropExchange<ept id="p1">](#colecontrol__dopropexchange)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Serializes the properties of a <ph id="ph1">`COleControl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::DoSuperclassPaint<ept id="p1">](#colecontrol__dosuperclasspaint)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Redraws an OLE control that has been subclassed from a Windows control.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::EnableSimpleFrame<ept id="p1">](#colecontrol__enablesimpleframe)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Enables simple frame support for a control.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ExchangeExtent<ept id="p1">](#colecontrol__exchangeextent)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Serializes the control's width and height.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ExchangeStockProps<ept id="p1">](#colecontrol__exchangestockprops)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Serializes the control's stock properties.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ExchangeVersion<ept id="p1">](#colecontrol__exchangeversion)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Serializes the control's version number.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::FireClick<ept id="p1">](#colecontrol__fireclick)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Fires the stock <ph id="ph1">`Click`</ph> event.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::FireDblClick<ept id="p1">](#colecontrol__firedblclick)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Fires the stock <ph id="ph1">`DblClick`</ph> event.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::FireError<ept id="p1">](#colecontrol__fireerror)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Fires the stock <ph id="ph1">`Error`</ph> event.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::FireEvent<ept id="p1">](#colecontrol__fireevent)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Fires a custom event.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::FireKeyDown<ept id="p1">](#colecontrol__firekeydown)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Fires the stock <ph id="ph1">`KeyDown`</ph> event.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::FireKeyPress<ept id="p1">](#colecontrol__firekeypress)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Fires the stock <ph id="ph1">`KeyPress`</ph> event.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::FireKeyUp<ept id="p1">](#colecontrol__firekeyup)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Fires the stock <ph id="ph1">`KeyUp`</ph> event.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::FireMouseDown<ept id="p1">](#colecontrol__firemousedown)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Fires the stock <ph id="ph1">`MouseDown`</ph> event.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::FireMouseMove<ept id="p1">](#colecontrol__firemousemove)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Fires the stock <ph id="ph1">`MouseMove`</ph> event.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::FireMouseUp<ept id="p1">](#colecontrol__firemouseup)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Fires the stock <ph id="ph1">`MouseUp`</ph> event.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::FireReadyStateChange<ept id="p1">](#colecontrol__firereadystatechange)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Fires an event when the control's ready state changes.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetActivationPolicy<ept id="p1">](#colecontrol__getactivationpolicy)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Alters the default activation behavior of a control that supports the <ph id="ph1">`IPointerInactive`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetAmbientProperty<ept id="p1">](#colecontrol__getambientproperty)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Returns the value of the specified ambient property.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetAppearance<ept id="p1">](#colecontrol__getappearance)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns the value of the stock Appearance property.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetBackColor<ept id="p1">](#colecontrol__getbackcolor)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Returns the value of the stock BackColor property.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetBorderStyle<ept id="p1">](#colecontrol__getborderstyle)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returns the value of the stock BorderStyle property.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetCapture<ept id="p1">](#colecontrol__getcapture)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Determines whether a windowless, activated control object has the mouse capture.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetClassID<ept id="p1">](#colecontrol__getclassid)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Retrieves the OLE class ID of the control.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetClientOffset<ept id="p1">](#colecontrol__getclientoffset)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Retrieves the difference between the upper left corner of the control's rectangular area and the upper left corner of its client area.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetClientRect<ept id="p1">](#colecontrol__getclientrect)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Retrieves the size of the control's client area.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetClientSite<ept id="p1">](#colecontrol__getclientsite)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Queries an object for the pointer to its current client site within its container.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetControlFlags<ept id="p1">](#colecontrol__getcontrolflags)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Retrieves the control flag settings.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetControlSize<ept id="p1">](#colecontrol__getcontrolsize)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns the position and size of the OLE control.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetDC<ept id="p1">](#colecontrol__getdc)</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Provides a means for a windowless control to get a device context from its container.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetEnabled<ept id="p1">](#colecontrol__getenabled)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns the value of the stock Enabled property.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetExtendedControl<ept id="p1">](#colecontrol__getextendedcontrol)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to an extended control object belonging to the container.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetFocus<ept id="p1">](#colecontrol__getfocus)</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Determines whether the control has the focus.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetFont<ept id="p1">](#colecontrol__getfont)</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Returns the value of the stock Font property.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetFontTextMetrics<ept id="p1">](#colecontrol__getfonttextmetrics)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Returns the metrics of a <ph id="ph1">`CFontHolder`</ph> object.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetForeColor<ept id="p1">](#colecontrol__getforecolor)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Returns the value of the stock ForeColor property.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetHwnd<ept id="p1">](#colecontrol__gethwnd)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Returns the value of the stock hWnd property.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetMessageString<ept id="p1">](#colecontrol__getmessagestring)</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Provides status bar text for a menu item.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetNotSupported<ept id="p1">](#colecontrol__getnotsupported)</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Prevents access to a control's property value by the user.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetReadyState<ept id="p1">](#colecontrol__getreadystate)</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Returns the control's readiness state.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetRectInContainer<ept id="p1">](#colecontrol__getrectincontainer)</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Returns the control's rectangle relative to its container.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetStockTextMetrics<ept id="p1">](#colecontrol__getstocktextmetrics)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Returns the metrics of the stock Font property.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetText<ept id="p1">](#colecontrol__gettext)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Returns the value of the stock Text or Caption property.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::GetWindowlessDropTarget<ept id="p1">](#colecontrol__getwindowlessdroptarget)</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Override to allow a windowless control to be the target of drag and drop operations.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::InitializeIIDs<ept id="p1">](#colecontrol__initializeiids)</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Informs the base class of the IIDs the control will use.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::InternalGetFont<ept id="p1">](#colecontrol__internalgetfont)</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CFontHolder`</ph> object for the stock Font property.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::InternalGetText<ept id="p1">](#colecontrol__internalgettext)</ept></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Retrieves the stock Caption or Text property.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::InternalSetReadyState<ept id="p1">](#colecontrol__internalsetreadystate)</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Sets the control's readiness state and fires the ready-state-change event.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::InvalidateControl<ept id="p1">](#colecontrol__invalidatecontrol)</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Invalidates an area of the displayed control, causing it to be redrawn.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::InvalidateRgn<ept id="p1">](#colecontrol__invalidatergn)</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Invalidates the container window's client area within the given region.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Can be used to redraw windowless controls in the region.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::IsConvertingVBX<ept id="p1">](#colecontrol__isconvertingvbx)</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Allows specialized loading of an OLE control.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::IsModified<ept id="p1">](#colecontrol__ismodified)</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Determines if the control state has changed.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::IsOptimizedDraw<ept id="p1">](#colecontrol__isoptimizeddraw)</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Indicates whether the container supports optimized drawing for the current drawing operation.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::IsSubclassedControl<ept id="p1">](#colecontrol__issubclassedcontrol)</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Called to determine if the control subclasses a Windows control.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::Load<ept id="p1">](#colecontrol__load)</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Resets any previous asynchronous data and initiates a new load of the control's asynchronous property.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::LockInPlaceActive<ept id="p1">](#colecontrol__lockinplaceactive)</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Determines if your control can be deactivated by the container.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnAmbientPropertyChange<ept id="p1">](#colecontrol__onambientpropertychange)</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Called when an ambient property is changed.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnAppearanceChanged<ept id="p1">](#colecontrol__onappearancechanged)</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Called when the stock Appearance property is changed.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnBackColorChanged<ept id="p1">](#colecontrol__onbackcolorchanged)</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Called when the stock BackColor property is changed.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnBorderStyleChanged<ept id="p1">](#colecontrol__onborderstylechanged)</ept></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Called when the stock BorderStyle property is changed.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnClick<ept id="p1">](#colecontrol__onclick)</ept></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Called to fire the stock Click event.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnClose<ept id="p1">](#colecontrol__onclose)</ept></source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Notifies the control that <ph id="ph1">`IOleControl::Close`</ph> has been called.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnDoVerb<ept id="p1">](#colecontrol__ondoverb)</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Called after a control verb has been executed.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnDraw<ept id="p1">](#colecontrol__ondraw)</ept></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Called when a control is requested to redraw itself.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnDrawMetafile<ept id="p1">](#colecontrol__ondrawmetafile)</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Called by the container when a control is requested to redraw itself using a metafile device context.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnEdit<ept id="p1">](#colecontrol__onedit)</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Called by the container to UI Activate an OLE control.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnEnabledChanged<ept id="p1">](#colecontrol__onenabledchanged)</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Called when the stock Enabled property is changed.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnEnumVerbs<ept id="p1">](#colecontrol__onenumverbs)</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Called by the container to enumerate a control's verbs.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnEventAdvise<ept id="p1">](#colecontrol__oneventadvise)</ept></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Called when event handlers are connected or disconnected from a control.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnFontChanged<ept id="p1">](#colecontrol__onfontchanged)</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Called when the stock Font property is changed.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnForeColorChanged<ept id="p1">](#colecontrol__onforecolorchanged)</ept></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Called when the stock ForeColor property is changed.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnFreezeEvents<ept id="p1">](#colecontrol__onfreezeevents)</ept></source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Called when a control's events are frozen or unfrozen.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnGetColorSet<ept id="p1">](#colecontrol__ongetcolorset)</ept></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Notifies the control that <ph id="ph1">`IOleObject::GetColorSet`</ph> has been called.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnGetControlInfo<ept id="p1">](#colecontrol__ongetcontrolinfo)</ept></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Provides mnemonic information to the container.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnGetDisplayString<ept id="p1">](#colecontrol__ongetdisplaystring)</ept></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Called to obtain a string to represent a property value.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnGetInPlaceMenu<ept id="p1">](#colecontrol__ongetinplacemenu)</ept></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Requests the handle of the control's menu that will be merged with the container menu.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnGetNaturalExtent<ept id="p1">](#colecontrol__ongetnaturalextent)</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Override to retrieve the control's display size closest to the proposed size and extent mode.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnGetPredefinedStrings<ept id="p1">](#colecontrol__ongetpredefinedstrings)</ept></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Returns strings representing possible values for a property.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnGetPredefinedValue<ept id="p1">](#colecontrol__ongetpredefinedvalue)</ept></source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Returns the value corresponding to a predefined string.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnGetViewExtent<ept id="p1">](#colecontrol__ongetviewextent)</ept></source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Override to retrieve the size of the control's display areas (can be used to enable two-pass drawing).</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnGetViewRect<ept id="p1">](#colecontrol__ongetviewrect)</ept></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Override to convert control's size into a rectangle starting at a specific position.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnGetViewStatus<ept id="p1">](#colecontrol__ongetviewstatus)</ept></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Override to retrieve the control's view status.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnHideToolBars<ept id="p1">](#colecontrol__onhidetoolbars)</ept></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Called by the container when the control is UI deactivated.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnInactiveMouseMove<ept id="p1">](#colecontrol__oninactivemousemove)</ept></source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Override to have the container for the inactive control under the mouse pointer dispatch <ph id="ph1">`WM_MOUSEMOVE`</ph> messages to the control.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnInactiveSetCursor<ept id="p1">](#colecontrol__oninactivesetcursor)</ept></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Override to have the container for the inactive control under the mouse pointer dispatch <ph id="ph1">`WM_SETCURSOR`</ph> messages to the control.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnKeyDownEvent<ept id="p1">](#colecontrol__onkeydownevent)</ept></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Called after the stock KeyDown event has been fired.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnKeyPressEvent<ept id="p1">](#colecontrol__onkeypressevent)</ept></source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Called after the stock KeyPress event has been fired.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnKeyUpEvent<ept id="p1">](#colecontrol__onkeyupevent)</ept></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Called after the stock KeyUp event has been fired.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnMapPropertyToPage<ept id="p1">](#colecontrol__onmappropertytopage)</ept></source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Indicates which property page to use for editing a property.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnMnemonic<ept id="p1">](#colecontrol__onmnemonic)</ept></source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Called when a mnemonic key of the control has been pressed.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnProperties<ept id="p1">](#colecontrol__onproperties)</ept></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Called when the control's "Properties" verb has been invoked.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnQueryHitPoint<ept id="p1">](#colecontrol__onqueryhitpoint)</ept></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Override to query whether a control's display overlaps a given point.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnQueryHitRect<ept id="p1">](#colecontrol__onqueryhitrect)</ept></source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Override to query whether a control's display overlaps any point in a given rectangle.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnRenderData<ept id="p1">](#colecontrol__onrenderdata)</ept></source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve data in the specified format.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnRenderFileData<ept id="p1">](#colecontrol__onrenderfiledata)</ept></source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve data from a file in the specified format.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnRenderGlobalData<ept id="p1">](#colecontrol__onrenderglobaldata)</ept></source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve data from global memory in the specified format.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnResetState<ept id="p1">](#colecontrol__onresetstate)</ept></source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Resets a control's properties to the default values.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnSetClientSite<ept id="p1">](#colecontrol__onsetclientsite)</ept></source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Notifies the control that <ph id="ph1">`IOleControl::SetClientSite`</ph> has been called.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnSetData<ept id="p1">](#colecontrol__onsetdata)</ept></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Replaces the control's data with another value.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnSetExtent<ept id="p1">](#colecontrol__onsetextent)</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Called after the control's extent has changed.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnSetObjectRects<ept id="p1">](#colecontrol__onsetobjectrects)</ept></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Called after the control's dimensions have been changed.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnShowToolBars<ept id="p1">](#colecontrol__onshowtoolbars)</ept></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Called when the control has been UI activated.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnTextChanged<ept id="p1">](#colecontrol__ontextchanged)</ept></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Called when the stock Text or Caption property is changed.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::OnWindowlessMessage<ept id="p1">](#colecontrol__onwindowlessmessage)</ept></source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Processes window messages (other than mouse and keyboard messages) for windowless controls.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ParentToClient<ept id="p1">](#colecontrol__parenttoclient)</ept></source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Translates a point relative to the container's origin to a point relative to the control's origin.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::PostModalDialog<ept id="p1">](#colecontrol__postmodaldialog)</ept></source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Notifies the container that a modal dialog box has been closed.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::PreModalDialog<ept id="p1">](#colecontrol__premodaldialog)</ept></source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Notifies the container that a modal dialog box is about to be displayed.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::RecreateControlWindow<ept id="p1">](#colecontrol__recreatecontrolwindow)</ept></source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Destroys and re-creates the control's window.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::Refresh<ept id="p1">](#colecontrol__refresh)</ept></source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Forces a repaint of a control's appearance.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ReleaseCapture<ept id="p1">](#colecontrol__releasecapture)</ept></source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Releases mouse capture.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ReleaseDC<ept id="p1">](#colecontrol__releasedc)</ept></source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Releases the display device context of a container of a windowless control.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ReparentControlWindow<ept id="p1">](#colecontrol__reparentcontrolwindow)</ept></source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Resets the parent of the control window.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ResetStockProps<ept id="p1">](#colecontrol__resetstockprops)</ept></source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Initializes <ph id="ph1">`COleControl`</ph> stock properties to their default values.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ResetVersion<ept id="p1">](#colecontrol__resetversion)</ept></source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Initializes the version number to a given value.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ScrollWindow<ept id="p1">](#colecontrol__scrollwindow)</ept></source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Allows a windowless control to scroll an area within its in-place active image on the display.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SelectFontObject<ept id="p1">](#colecontrol__selectfontobject)</ept></source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Selects a custom Font property into a device context.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SelectStockFont<ept id="p1">](#colecontrol__selectstockfont)</ept></source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Selects the stock Font property into a device context.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SerializeExtent<ept id="p1">](#colecontrol__serializeextent)</ept></source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Serializes or initializes the display space for the control.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SerializeStockProps<ept id="p1">](#colecontrol__serializestockprops)</ept></source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Serializes or initializes the <ph id="ph1">`COleControl`</ph> stock properties.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SerializeVersion<ept id="p1">](#colecontrol__serializeversion)</ept></source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Serializes or initializes the control's version information.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetAppearance<ept id="p1">](#colecontrol__setappearance)</ept></source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Sets the value of the stock Appearance property.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetBackColor<ept id="p1">](#colecontrol__setbackcolor)</ept></source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Sets the value of the stock BackColor property.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetBorderStyle<ept id="p1">](#colecontrol__setborderstyle)</ept></source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Sets the value of the stock BorderStyle property.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetCapture<ept id="p1">](#colecontrol__setcapture)</ept></source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Causes the control's container window to take possession of the mouse capture on the control's behalf.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetControlSize<ept id="p1">](#colecontrol__setcontrolsize)</ept></source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Sets the position and size of the OLE control.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetEnabled<ept id="p1">](#colecontrol__setenabled)</ept></source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Sets the value of the stock Enabled property.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetFocus<ept id="p1">](#colecontrol__setfocus)</ept></source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Causes the control's container window to take possession of the input focus on the control's behalf.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetFont<ept id="p1">](#colecontrol__setfont)</ept></source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Sets the value of the stock Font property.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetForeColor<ept id="p1">](#colecontrol__setforecolor)</ept></source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Sets the value of the stock ForeColor property.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetInitialSize<ept id="p1">](#colecontrol__setinitialsize)</ept></source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Sets the size of an OLE control when first displayed in a container.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetModifiedFlag<ept id="p1">](#colecontrol__setmodifiedflag)</ept></source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Changes the modified state of a control.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetNotPermitted<ept id="p1">](#colecontrol__setnotpermitted)</ept></source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Indicates that an edit request has failed.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetNotSupported<ept id="p1">](#colecontrol__setnotsupported)</ept></source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Prevents modification to a control's property value by the user.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetRectInContainer<ept id="p1">](#colecontrol__setrectincontainer)</ept></source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Sets the control's rectangle relative to its container.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetText<ept id="p1">](#colecontrol__settext)</ept></source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Sets the value of the stock Text or Caption property.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::ThrowError<ept id="p1">](#colecontrol__throwerror)</ept></source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Signals that an error has occurred in an OLE control.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::TransformCoords<ept id="p1">](#colecontrol__transformcoords)</ept></source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Transforms coordinate values between a container and the control.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::TranslateColor<ept id="p1">](#colecontrol__translatecolor)</ept></source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Converts an <bpt id="p1">**</bpt>OLE_COLOR<ept id="p1">**</ept> value to a <bpt id="p2">**</bpt>COLORREF<ept id="p2">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::WillAmbientsBeValidDuringLoad<ept id="p1">](#colecontrol__willambientsbevalidduringload)</ept></source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Determines whether ambient properties will be available the next time the control is loaded.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::WindowProc<ept id="p1">](#colecontrol__windowproc)</ept></source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Provides a Windows procedure for a <ph id="ph1">`COleControl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::DrawContent<ept id="p1">](#colecontrol__drawcontent)</ept></source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Called by the framework when the control's appearance needs to be updated.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::DrawMetafile<ept id="p1">](#colecontrol__drawmetafile)</ept></source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Called by the framework when the metafile device context is being used.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::IsInvokeAllowed<ept id="p1">](#colecontrol__isinvokeallowed)</ept></source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Enables automation method invocation.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleControl::SetInitialDataFormats<ept id="p1">](#colecontrol__setinitialdataformats)</ept></source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Called by the framework to initialize the list of data formats supported by the control.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Derived from <ph id="ph1">`CWnd`</ph>, this class inherits all the functionality of a Windows window object plus additional functionality specific to OLE, such as event firing and the ability to support methods and properties.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>OLE controls can be inserted into OLE container applications and communicate with the container by using a two-way system of event firing and exposing methods and properties to the container.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Note that standard OLE containers only support the basic functionality of an OLE control.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>They are unable to support extended features of an OLE control.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Event firing occurs when events are sent to the container as a result of certain actions taking place in the control.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>In turn, the container communicates with the control by using an exposed set of methods and properties analogous to the member functions and data members of a C++ class.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>This approach allows the developer to control the appearance of the control and notify the container when certain actions occur.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Windowless Controls</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>OLE controls can be used in-place active without a window.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Windowless controls have significant advantages:</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Windowless controls can be transparent and non-rectangular</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Windowless controls reduce instance size and creation time of the object</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Controls do not need a window.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Services that a window offers can easily be provided via a single shared window (usually the container's) and a bit of dispatching code.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Having a window is mostly an unnecessary complication on the object.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>When windowless activation is used, the container (which does have a window) is responsible for providing services that would otherwise have been provided by the control's own window.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>For example, if your control needs to query the keyboard focus, query the mouse capture, or obtain a device context, these operations are managed by the container.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COleControl`</ph><bpt id="p1">[</bpt>windowless-operation member functions<ept id="p1">](http://msdn.microsoft.com/en-us/e9e28f79-9a70-4ae4-a5aa-b3e92f1904df)</ept> invoke these operations on the container.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>When windowless activation is enabled, the container delegates input messages to the control's <ph id="ph1">`IOleInPlaceObjectWindowless`</ph> interface (an extension of <bpt id="p1">[</bpt>IOleInPlaceObject<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692646)</ept> for windowless support).</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`COleControl`</ph>'s implementation of this interface will dispatch these messages through your control's message map, after adjusting the mouse coordinates appropriately.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>You can process these messages like ordinary window messages, by adding the corresponding entries to the message map.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>In a windowless control, you should always use the <ph id="ph1">`COleControl`</ph> member functions instead of the corresponding <ph id="ph2">`CWnd`</ph> member functions or their related Windows API functions.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>OLE control objects can also create a window only when they become active, but the amount of work needed for the inactive-active transition goes up and the speed of the transition goes down.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>There are cases when this is a problem: as an example, consider a grid of text boxes.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>When cursoring up and down through the column, each control must be in-place activated and then deactivated.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The speed of the inactive/active transition will directly affect the scrolling speed.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>For more information on developing an OLE control framework, see the articles <bpt id="p1">[</bpt>MFC ActiveX Controls<ept id="p1">](../../mfc/mfc-activex-controls.md)</ept> and <bpt id="p2">[</bpt>Overview: Creating an MFC ActiveX Control Program<ept id="p2">](../../mfc/reference/mfc-activex-control-wizard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>For information on optimizing OLE controls, including windowless and flicker-free controls, see <bpt id="p1">[</bpt>MFC ActiveX Controls: Optimization<ept id="p1">](../../mfc/mfc-activex-controls-optimization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxctl.h</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambientbackcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientBackColor</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Returns the value of the ambient BackColor property.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The current value of the container's ambient BackColor property, if any.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>If the property is not supported, this function returns the system-defined Windows background color.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The ambient BackColor property is available to all controls and is defined by the container.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Note that the container is not required to support this property.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambientdisplayname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientDisplayName</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The name the container has assigned to the control can be used in error messages displayed to the user.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>The name of the OLE control.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The default is a zero-length string.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Note that the container is not required to support this property.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambientfont"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientFont</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Returns the value of the ambient Font property.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>A pointer to the container's ambient Font dispatch interface.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>If the return is not equal to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, you are responsible for releasing the font by calling its <bpt id="p2">[</bpt>IUnknown::Release<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms682317)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The ambient Font property is defined by the container and available to all controls.Note that the container is not required to support this property.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambientforecolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientForeColor</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Returns the value of the ambient ForeColor property.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The current value of the container's ambient ForeColor property, if any.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>If not supported, this function returns the system-defined Windows text color.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The ambient ForeColor property is available to all controls and is defined by the container.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Note that the container is not required to support this property.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambientlocaleid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientLocaleID</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Returns the container's locale ID.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The value of the container's LocaleID property, if any.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>If this property is not supported, this function returns 0.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The control can use the LocaleID to adapt its user interface for specific locales.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Note that the container is not required to support this property.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambientappearance"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientAppearance</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Retrieves the current appearance setting for the control object.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The appearance of the control:</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>0<ept id="p1">**</ept> Flat appearance</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>1<ept id="p1">**</ept> 3D appearance</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the current value of the <bpt id="p1">**</bpt>DISPID_AMBIENT_APPEARANCE<ept id="p1">**</ept> property for the control.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambientscaleunits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientScaleUnits</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Returns the type of units used by the container.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>A string containing the ambient ScaleUnits of the container.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>If this property is not supported, this function returns a zero-length string.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The container's ambient ScaleUnits property can be used to display positions or dimensions, labeled with the chosen unit, such as twips or centimeters.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Note that the container is not required to support this property.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambientshowgrabhandles"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientShowGrabHandles</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Determines whether the container allows the control to display grab handles for itself when active.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Nonzero if grab handles should be displayed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>If this property is not supported, this function returns nonzero.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Note that the container is not required to support this property.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambientshowhatching"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientShowHatching</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Determines whether the container allows the control to display itself with a hatched pattern when UI active.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Nonzero if the hatched pattern should be shown; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>If this property is not supported, this function returns nonzero.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Note that the container is not required to support this property.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambienttextalign"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientTextAlign</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Determines the ambient text alignment preferred by the control container.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>The status of the container's ambient TextAlign property.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>If this property is not supported, this function returns 0.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The following is a list of valid return values:</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>General alignment (numbers to the right, text to the left).</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Left justify</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Center</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Right justify</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>This property is available to all embedded controls and is defined by the container.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Note that the container is not required to support this property.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambientuidead"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientUIDead</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Determines if the container wants the control to respond to user-interface actions.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Nonzero if the control should respond to user-interface actions; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>If this property is not supported, this function returns 0.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>For example, a container might set this to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> in design mode.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ambientusermode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::AmbientUserMode</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Determines if the container is in design mode or user mode.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Nonzero if the container is in user mode; otherwise 0 (in design mode).</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>If this property is not supported, this function returns TRUE.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>For example, a container might set this to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> in design mode.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__boundpropertychanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::BoundPropertyChanged</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Signals that the bound property value has changed.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>The dispatch ID of a bound property of the control.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>This must be called every time the value of the property changes, even in cases where the change was not made through the property Set method.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Be particularly aware of bound properties that are mapped to member variables.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Any time such a member variable changes, <ph id="ph1">`BoundPropertyChanged`</ph> must be called.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__boundpropertyrequestedit"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::BoundPropertyRequestEdit</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Requests permission from the <ph id="ph1">`IPropertyNotifySink`</ph> interface to change a bound property value provided by the control.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The dispatch ID of a bound property of the control.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Nonzero if the change is permitted; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>The default value is nonzero.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>If permission is denied, the control must not let the value of the property change.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>This can be done by ignoring or failing the action that attempted to change the property value.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__clienttoparent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ClientToParent</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Translates the coordinates of <ph id="ph1">`pPoint`</ph> into parent coordinates.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Pointer to the bounds of the OLE control within the container.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Not the client area but the area of the entire control including borders and scroll bars.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Pointer to the OLE client area point to be translated into the coordinates of the parent (container).</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>On input <ph id="ph1">`pPoint`</ph> is relative to the origin of the client area of the OLE control (upper left corner of the client area of the control).</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>On output <ph id="ph1">`pPoint`</ph> is relative to the origin of the parent (upper left corner of the container).</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__clipcaretrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ClipCaretRect</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Adjusts a caret rectangle if it is entirely or partially covered by overlapping, opaque objects.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>On input, a pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure that contains the caret area to be adjusted.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>On output, the adjusted caret area, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the caret rectangle is completely covered.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>A caret is a flashing line, block, or bitmap that typically indicates where text or graphics will be inserted.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>A windowless object cannot safely show a caret without first checking whether the caret is partially or totally hidden by overlapping objects.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>In order to make that possible, an object can use <ph id="ph1">`ClipCaretRect`</ph> to get the caret adjusted (reduced) to ensure it fits in the clipping region.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Objects creating a caret should submit the caret rectangle to <ph id="ph1">`ClipCaretRect`</ph> and use the adjusted rectangle for the caret.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>If the caret is entirely hidden, this method will return <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> and the caret should not be shown at all in this case.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__colecontrol"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::COleControl</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`COleControl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>This function is normally not called directly.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Instead the OLE control is usually created by its class factory.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__controlinfochanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ControlInfoChanged</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Call this function when the set of mnemonics supported by the control has changed.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Upon receiving this notification, the control's container obtains the new set of mnemonics by making a call to <bpt id="p1">[</bpt>IOleControl::GetControlInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms693730)</ept>.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Note that the container is not required to respond to this notification.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__displayerror"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::DisplayError</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Called by the framework after the stock Error event has been handled (unless the event handler has suppressed the display of the error).</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>scode<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>The status code value to be reported.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>For a complete list of possible codes, see the article <bpt id="p1">[</bpt>ActiveX Controls: Advanced Topics<ept id="p1">](../../mfc/mfc-activex-controls-advanced-topics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>The description of the error being reported.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpszSource<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The name of the module generating the error (typically, the name of the OLE control module).</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>The name of the help file containing a description of the error.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The Help Context ID of the error being reported.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The default behavior displays a message box containing the description of the error, contained in <ph id="ph1">`lpszDescription`</ph>.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Override this function to customize how errors are displayed.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__doclick"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::DoClick</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Simulates a mouse click action on the control.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The overridable <ph id="ph1">`COleControl::OnClick`</ph> member function will be called, and a stock Click event will be fired, if supported by the control.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>This function is supported by the <ph id="ph1">`COleControl`</ph> base class as a stock method, called DoClick.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>ActiveX Controls: Methods<ept id="p1">](../../mfc/mfc-activex-controls-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__dopropexchange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::DoPropExchange</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Called by the framework when loading or storing a control from a persistent storage representation, such as a stream or property set.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CPropExchange`</ph> object.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>The framework supplies this object to establish the context of the property exchange, including its direction.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>This function normally makes calls to the <bpt id="p1">**</bpt>PX_<ept id="p1">**</ept> family of functions to load or store specific user-defined properties of an OLE control.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>If Control Wizard has been used to create the OLE control project, the overridden version of this function will serialize the stock properties supported by <ph id="ph1">`COleControl`</ph> with a call to the base class function, <ph id="ph2">`COleControl::DoPropExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>As you add user-defined properties to your OLE control you will need to modify this function to serialize your new properties.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>For more information on serialization, see the article <bpt id="p1">[</bpt>ActiveX Controls: Serializing<ept id="p1">](../../mfc/mfc-activex-controls-serializing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__dosuperclasspaint"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::DoSuperclassPaint</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Redraws an OLE control that has been subclassed from a Windows control.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>A pointer to the device context of the control container.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The area in which the control is to be drawn.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Call this function to properly handle the painting of a nonactive OLE control.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>This function should only be used if the OLE control subclasses a Windows control and should be called in the <ph id="ph1">`OnDraw`</ph> function of your control.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>For more information on this function and subclassing a Windows control, see the article <bpt id="p1">[</bpt>ActiveX Controls: Subclassing a Windows Control<ept id="p1">](../../mfc/mfc-activex-controls-subclassing-a-windows-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__drawcontent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::DrawContent</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Called by the framework when the control's appearance needs to be updated.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Pointer to the device context.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Rectangular area to be drawn in.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>This function directly calls the overridable <ph id="ph1">`OnDraw`</ph> function.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__drawmetafile"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::DrawMetafile</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Called by the framework when the metafile device context is being used.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Pointer to the metafile device context.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Rectangular area to be drawn in.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__enablesimpleframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::EnableSimpleFrame</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Enables the simple frame characteristic for an OLE control.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>This characteristic allows a control to support visual containment of other controls, but not true OLE containment.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>An example would be a group box with several controls inside.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>These controls are not OLE contained, but they are in the same group box.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__exchangeextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ExchangeExtent</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Serializes or initializes the state of the control's extent (its dimensions in <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> units).</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CPropExchange<ept id="p1">](../../mfc/reference/cpropexchange-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The framework supplies this object to establish the context of the property exchange, including its direction.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Nonzero if the function succeeded; 0 otherwise.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>This function is normally called by the default implementation of <ph id="ph1">`COleControl::DoPropExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__exchangestockprops"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ExchangeStockProps</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Serializes or initializes the state of the control's stock properties.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CPropExchange<ept id="p1">](../../mfc/reference/cpropexchange-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>The framework supplies this object to establish the context of the property exchange, including its direction.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>This function is normally called by the default implementation of <ph id="ph1">`COleControl::DoPropExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__exchangeversion"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ExchangeVersion</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Serializes or initializes the state of a control's version information.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CPropExchange`</ph> object.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>The framework supplies this object to establish the context of the property exchange, including its direction.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>The current version number of the control.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Indicates whether persistent data should be converted to the latest format when saved, or maintained in the same format that was loaded.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Nonzero of the function succeeded; 0 otherwise.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Typically, this will be the first function called by a control's override of <ph id="ph1">`COleControl::DoPropExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>When loading, this function reads the version number of the persistent data, and sets the version attribute of the <bpt id="p1">[</bpt>CPropExchange<ept id="p1">](../../mfc/reference/cpropexchange-class.md)</ept> object accordingly.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>When saving, this function writes the version number of the persistent data.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>For more information on persistence and versioning, see the article <bpt id="p1">[</bpt>ActiveX Controls: Serializing<ept id="p1">](../../mfc/mfc-activex-controls-serializing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__fireclick"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::FireClick</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Called by the framework when the mouse is clicked over an active control.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>If this event is defined as a custom event, you determine when the event is fired.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>For automatic firing of a Click event to occur, the control's Event map must have a stock Click event defined.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__firedblclick"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::FireDblClick</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Called by the framework when the mouse is double-clicked over an active control.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>If this event is defined as a custom event, you determine when the event is fired.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>For automatic firing of a DblClick event to occur, the control's Event map must have a stock DblClick event defined.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__fireerror"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::FireError</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Fires the stock Error event.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>scode<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>The status code value to be reported.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>For a complete list of possible codes, see the article <bpt id="p1">[</bpt>ActiveX Controls: Advanced Topics<ept id="p1">](../../mfc/mfc-activex-controls-advanced-topics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>The description of the error being reported.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>The Help ID of the error being reported.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>This event provides a way of signalling, at appropriate places in your code, that an error has occurred within your control.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Unlike other stock events, such as Click or MouseMove, Error is never fired by the framework.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>To report an error that occurs during a property get function, property set function, or automation method, call <bpt id="p1">[</bpt>COleControl::ThrowError<ept id="p1">](#colecontrol__throwerror)</ept>.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>The implementation of an OLE control's Stock Error event uses an <ph id="ph1">`SCODE`</ph> value.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>If your control uses this event, and is intended to be used in Visual Basic 4.0, you will receive errors because the <ph id="ph1">`SCODE`</ph> value is not supported in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>To fix this, manually change the <ph id="ph1">`SCODE`</ph> parameter in the control's .ODL file to a <bpt id="p1">**</bpt>long<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>In addition, any custom event, method, or property that uses an <ph id="ph1">`SCODE`</ph> parameter also causes the same problem.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__fireevent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::FireEvent</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Fires a user-defined event from your control with any number of optional arguments,.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The dispatch ID of the event to be fired.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>A descriptor for the event's parameter types.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Usually this function should not be called directly.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>Instead you will call the event-firing functions in the event map section of your control's class declaration.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pbParams`</ph> argument is a space-separated list of <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>One or more of these values, separated by spaces (not commas), specifies the function's parameter list.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Possible values are as follows:</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Symbol</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Parameter type</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_COLOR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_COLOR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_FONT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IFontDisp<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_HANDLE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_PICTURE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IPictureDisp<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_OPTEXCLUSIVE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_OPTEXCLUSIVE<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_TRISTATE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_TRISTATE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_XPOS_HIMETRIC<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_XPOS_HIMETRIC<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_YPOS_HIMETRIC<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_YPOS_HIMETRIC<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_XPOS_PIXELS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_XPOS_PIXELS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_YPOS_PIXELS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_YPOS_PIXELS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_XSIZE_PIXELS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_XSIZE_PIXELS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_YSIZE_PIXELS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_XSIZE_PIXELS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_XSIZE_HIMETRIC<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_XSIZE_HIMETRIC<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VTS_YSIZE_HIMETRIC<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_XSIZE_HIMETRIC<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Additional variant constants have been defined for all variant types, with the exception of <bpt id="p1">**</bpt>VTS_FONT<ept id="p1">**</ept> and <bpt id="p2">**</bpt>VTS_PICTURE<ept id="p2">**</ept>, that provide a pointer to the variant data constant.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>These constants are named using the <bpt id="p1">**</bpt>VTS_P<ept id="p1">**</ept><ph id="ph1">`constantname`</ph> convention.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>VTS_PCOLOR<ept id="p1">**</ept> is a pointer to a <bpt id="p2">**</bpt>VTS_COLOR<ept id="p2">**</ept> constant.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__firekeydown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::FireKeyDown</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Called by the framework when a key is pressed while the control is UI active.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Pointer to the virtual key code value of the pressed key.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>For a list of of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Contains a combination of the following flags:</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SHIFT_MASK<ept id="p1">**</ept> The SHIFT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTRL_MASK<ept id="p1">**</ept> The CTRL key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ALT_MASK<ept id="p1">**</ept> The ALT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>If this event is defined as a custom event, you determine when the event is fired.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>For automatic firing of a KeyDown event to occur, the control's Event map must have a stock KeyDown event defined.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__firekeypress"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::FireKeyPress</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Called by the framework when a key is pressed and released while the custom control is UI Active within the container.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>A pointer to the character value of the key pressed.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>If this event is defined as a custom event, you determine when the event is fired.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>The recipient of the event may modify <ph id="ph1">`pnChar`</ph>, for example, convert all lowercase characters to uppercase.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>If you want to examine the modified character, override <ph id="ph1">`OnKeyPressEvent`</ph>.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>For automatic firing of a KeyPress event to occur, the control's Event map must have a stock KeyPress event defined.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__firekeyup"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::FireKeyUp</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Called by the framework when a key is released while the custom control is UI Active within the container.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Pointer to the virtual key code value of the released key.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>For a list of of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Contains a combination of the following flags:</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SHIFT_MASK<ept id="p1">**</ept> The SHIFT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTRL_MASK<ept id="p1">**</ept> The CTRL key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ALT_MASK<ept id="p1">**</ept> The ALT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>If this event is defined as a custom event, you determine when the event is fired.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>For automatic firing of a KeyUp event to occur, the control's Event map must have a stock KeyUp event defined.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__firemousedown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::FireMouseDown</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Called by the framework when a mouse button is pressed over an active custom control.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>The numeric value of the mouse button pressed.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>It can contain one of the following values:</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LEFT_BUTTON<ept id="p1">**</ept> The left mouse button was pressed down.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MIDDLE_BUTTON<ept id="p1">**</ept> The middle mouse button was pressed down.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RIGHT_BUTTON<ept id="p1">**</ept> The right mouse button was pressed down.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Contains a combination of the following flags:</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SHIFT_MASK<ept id="p1">**</ept> The SHIFT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTRL_MASK<ept id="p1">**</ept> The CTRL key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ALT_MASK<ept id="p1">**</ept> The ALT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the cursor when a mouse button was pressed down.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>The coordinate is relative to the upper-left corner of the control window.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the cursor when a mouse button was pressed down.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>The coordinate is relative to the upper-left corner of the control window.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>If this event is defined as a custom event, you determine when the event is fired.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>For automatic firing of a MouseDown event to occur, the control's Event map must have a stock MouseDown event defined.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__firemousemove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::FireMouseMove</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>Called by the framework when the cursor is moved over an active custom control.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>The numeric value of the mouse buttons pressed.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>Contains a combination of the following values:</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LEFT_BUTTON<ept id="p1">**</ept> The left mouse button was pressed down during the action.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MIDDLE_BUTTON<ept id="p1">**</ept> The middle mouse button was pressed down during the action.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RIGHT_BUTTON<ept id="p1">**</ept> The right mouse button was pressed down during the action.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>Contains a combination of the following flags:</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SHIFT_MASK<ept id="p1">**</ept> The SHIFT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTRL_MASK<ept id="p1">**</ept> The CTRL key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ALT_MASK<ept id="p1">**</ept> The ALT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the cursor.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>The coordinate is relative to the upper-left corner of the control window.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the cursor.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>The coordinate is relative to the upper-left corner of the control window.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>If this event is defined as a custom event, you determine when the event is fired.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>For automatic firing of a MouseMove event to occur, the control's Event map must have a stock MouseMove event defined.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__firemouseup"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::FireMouseUp</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Called by the framework when a mouse button is released over an active custom control.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The numeric value of the mouse button released.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>It can have one of the following values:</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LEFT_BUTTON<ept id="p1">**</ept> The left mouse button was released.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MIDDLE_BUTTON<ept id="p1">**</ept> The middle mouse button was released.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RIGHT_BUTTON<ept id="p1">**</ept> The right mouse button was released.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>Contains a combination of the following flags:</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SHIFT_MASK<ept id="p1">**</ept> The SHIFT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTRL_MASK<ept id="p1">**</ept> The CTRL key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ALT_MASK<ept id="p1">**</ept> The ALT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the cursor when a mouse button was released.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>The coordinate is relative to the upper-left corner of the control window.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>The y-coordinate of a cursor when a mouse button was released.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>The coordinate is relative to the upper-left corner of the control window.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>If this event is defined as a custom event, you determine when the event is fired.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>For automatic firing of a MouseUp event to occur, the control's Event map must have a stock MouseUp event defined.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__firereadystatechange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::FireReadyStateChange</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Fires an event with the current value of the ready state of control.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>The ready state can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_UNINITIALIZED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>Default initialization state</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_LOADING<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Control is currently loading its properties</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_LOADED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Control has been initialized</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_INTERACTIVE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>Control has enough data to be interactive but not all asynchronous data is yet loaded</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Control has all its data</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>GetReadyState<ept id="p1">](#colecontrol__getreadystate)</ept> to determine the control's current readiness.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>InternalSetReadyState<ept id="p1">](#colecontrol__internalsetreadystate)</ept> changes the ready state to the value supplied, then calls <ph id="ph1">`FireReadyStateChange`</ph>.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getactivationpolicy"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetActivationPolicy</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>Alters the default activation behavior of a control that supports the <ph id="ph1">`IPointerInactive`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>A combination of flags from the <bpt id="p1">**</bpt>POINTERINACTIVE<ept id="p1">**</ept> enumeration.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Possible flags are:</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POINTERINACTIVE_ACTIVATEONENTRY<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>The object should be in-place activated when the mouse enters it during a mouse move operation.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POINTERINACTIVE_DEACTIVATEONLEAVE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>The object should be deactivated when the mouse leaves the object during a mouse move operation.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POINTERINACTIVE_ACTIVATEONDRAG<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>The object should be in-place activated when the mouse is dragged over it during a drag and drop operation.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`IPointerInactive`</ph> interface is enabled, the container will delegate <ph id="ph2">`WM_SETCURSOR`</ph> and <ph id="ph3">`WM_MOUSEMOVE`</ph> messages to it.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`COleControl`</ph>'s implementation of this interface will dispatch these messages through your control's message map, after adjusting the mouse coordinates appropriately.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>Whenever the container receives a <ph id="ph1">`WM_SETCURSOR`</ph> or <ph id="ph2">`WM_MOUSEMOVE`</ph> message with the mouse pointer over an inactive object supporting <ph id="ph3">`IPointerInactive`</ph>, it should call <ph id="ph4">`GetActivationPolicy`</ph> on the interface and return flags from the <bpt id="p1">**</bpt>POINTERINACTIVE<ept id="p1">**</ept> enumeration.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>You can process these messages just like ordinary window messages, by adding the corresponding entries to the message map.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>In your handlers, avoid using the <ph id="ph1">`m_hWnd`</ph> member variable (or any member functions that uses it) without first checking that its value is non- <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Any object intended to do more than set the mouse cursor and/or fire a mouse move event, such as give special visual feedback, should return the <bpt id="p1">**</bpt>POINTERINACTIVE_ACTIVATEONENTRY<ept id="p1">**</ept> flag and draw the feedback only when active.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>If the object returns this flag, the container should activate it in-place immediately and then forward it the same message that triggered the call to <ph id="ph1">`GetActivationPolicy`</ph>.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>If both the <bpt id="p1">**</bpt>POINTERINACTIVE_ACTIVATEONENTRY<ept id="p1">**</ept> and <bpt id="p2">**</bpt>POINTERINACTIVE_DEACTIVATEONLEAVE<ept id="p2">**</ept> flags are returned, then the object will only be activated when the mouse is over the object.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>If only the <bpt id="p1">**</bpt>POINTERINACTIVE_ACTIVATEONENTRY<ept id="p1">**</ept> flag is returned, then the object will only be activated once when the mouse first enters the object.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>You may also want an inactive control to be the target of an OLE drag and drop operation.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>This requires activating the control at the moment the user drags an object over it, so that the control's window can be registered as a drop target.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>To cause activation to occur during a drag, return the <bpt id="p1">**</bpt>POINTERINACTIVE_ACTIVATEONDRAG<ept id="p1">**</ept> flag:</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAxCtl#1<ept id="p2">](../../mfc/reference/codesnippet/cpp/colecontrol-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>The information communicated by <ph id="ph1">`GetActivationPolicy`</ph> should not be cached by a container.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Instead, this method should be called every time the mouse enters an inactive object.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>If an inactive object does not request to be in-place activated when the mouse enters it, its container should dispatch subsequent <ph id="ph1">`WM_SETCURSOR`</ph> messages to this object by calling <bpt id="p1">[</bpt>OnInactiveSetCursor<ept id="p1">](#colecontrol__oninactivesetcursor)</ept> as long as the mouse pointer stays over the object.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>Enabling the <ph id="ph1">`IPointerInactive`</ph> interface typically means that you want the control to be capable of processing mouse messages at all times.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>To get this behaviour in a container that doesn't support the <ph id="ph1">`IPointerInactive`</ph> interface, you will need to have your control always activated when visible, which means the control should have the <bpt id="p1">**</bpt>OLEMISC_ACTIVATEWHENVISIBLE<ept id="p1">**</ept> flag among its miscellaneous flags.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>However, to prevent this flag from taking effect in a container that does support <ph id="ph1">`IPointerInactive`</ph>, you can also specify the <bpt id="p1">**</bpt>OLEMISC_IGNOREACTIVATEWHENVISIBLE<ept id="p1">**</ept> flag:</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAxCtl#10<ept id="p2">](../../mfc/reference/codesnippet/cpp/colecontrol-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getambientproperty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetAmbientProperty</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>Gets the value of an ambient property of the container.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dwDispid<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>The dispatch ID of the desired ambient property.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>A variant type tag that specifies the type of the value to be returned in <ph id="ph1">`pvProp`</ph>.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>A pointer to the address of the variable that will receive the property value or return value.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>The actual type of this pointer must match the type specified by <ph id="ph1">`vtProp`</ph>.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>vtProp</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Type of pvProp</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CString<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>short<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>long<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>float<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>double<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CY<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_COLOR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLE_COLOR<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_DISPATCH<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LPDISPATCH<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_FONT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LPFONTDISP<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>Nonzero if the ambient property is supported; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`GetAmbientProperty`</ph> to retrieve the ambient DisplayName and ScaleUnits properties, set <ph id="ph2">`vtProp`</ph> to <ph id="ph3">`VT_BSTR`</ph> and <ph id="ph4">`pvProp`</ph> to <bpt id="p1">**</bpt>CString<ph id="ph5">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>If you are retrieving the ambient Font property, set <ph id="ph1">`vtProp`</ph> to <bpt id="p1">**</bpt>VT_FONT<ept id="p1">**</ept> and <ph id="ph2">`pvProp`</ph> to <bpt id="p2">**</bpt>LPFONTDISP<ph id="ph3">\*</ph><ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>Note that functions have already been provided for common ambient properties, such as <bpt id="p1">[</bpt>AmbientBackColor<ept id="p1">](#colecontrol__ambientbackcolor)</ept> and <bpt id="p2">[</bpt>AmbientFont<ept id="p2">](#colecontrol__ambientfont)</ept>.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getappearance"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetAppearance</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>Implements the Get function of your control's stock Appearance property.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>The return value specifies the current appearance setting as a <bpt id="p1">**</bpt>short<ept id="p1">**</ept> ( <ph id="ph1">`VT_I2`</ph>) value, if successful.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>This value is zero if the control's appearance is flat and 1 if the control's appearance is 3D.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getbackcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetBackColor</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>Implements the Get function of your control's stock BackColor property.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>The return value specifies the current background color as a <bpt id="p1">**</bpt>OLE_COLOR<ept id="p1">**</ept> value, if successful.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>This value can be translated to a <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value with a call to <ph id="ph1">`TranslateColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getborderstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetBorderStyle</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>Implements the Get function of your control's stock BorderStyle property.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>1 if the control has a normal border; 0 if the control has no border.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getcapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetCapture</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">`COleControl`</ph> object has the mouse capture.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>If the control is activated and windowless, returns <bpt id="p1">**</bpt>this<ept id="p1">**</ept> if the control currently has the mouse capture (as determined by the control's container), or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if it does not have the capture.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>Otherwise, returns the <ph id="ph1">`CWnd`</ph> object that has the mouse capture (same as <ph id="ph2">`CWnd::GetCapture`</ph>).</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>An activated windowless control receives the mouse capture when <bpt id="p1">[</bpt>SetCapture<ept id="p1">](#colecontrol__setcapture)</ept> is called.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getclassid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetClassID</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the OLE class ID of the control.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pclsid<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Pointer to the location of the class ID.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>Nonzero if the call was not successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>Usually implemented by the <bpt id="p1">[</bpt>IMPLEMENT_OLECREATE_EX<ept id="p1">](class-factories-and-licensing.md#implement_olecreate_ex)</ept>.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getclientoffset"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetClientOffset</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>Retrieves the difference between the upper left corner of the control's rectangular area and the upper left corner of its client area.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pdxOffset<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>Pointer to the horizontal offset of the OLE control's client area.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pdyOffset<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>Pointer to the vertical offset of the OLE control's client area.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>The OLE control has a rectangular area within its container.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>The client area of the control is the control area excluding borders and scroll bars.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>The offset retrieved by <ph id="ph1">`GetClientOffset`</ph> is the difference between the upper left corner of the control's rectangular area and the upper left corner of its client area.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>If your control has non-client elements other than the standard borders and scrollbars, override this member function to specify the offset.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getclientrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetClientRect</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>Retrieves the size of the control's client area.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`RECT`</ph> structure containing the dimensions of the windowless control's client area; that is, the control's size minus window borders, frames, scroll bars, and so on.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpRect`</ph> parameter indicates the size of the control's client rectangle, not its position.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getclientsite"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetClientSite</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>Queries an object for the pointer to its current client site within its container.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>A pointer to the control's current client site in its container.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>The returned pointer points to an instance of <ph id="ph1">`IOleClientSite`</ph>.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IOleClientSite`</ph> interface, implemented by containers, is the object's view of its context: where it is anchored in the document, where it gets its storage, user interface, and other resources.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getcontrolflags"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetControlFlags</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>Retrieves the control flag settings.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>An ORed combination of the flags in the ControlFlags enumeration:</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`GetControlFlags`</ph> returns <ph id="ph2">`fastBeginPaint | clipPaintDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>If set, uses a begin-paint function tailored for OLE controls instead of the <bpt id="p1">[</bpt>BeginPaint<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183362)</ept> API (set by default).</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>If not set, disables the call to <ph id="ph1">`IntersectClipRect`</ph> made by <ph id="ph2">`COleControl`</ph> and gains a small speed advantage.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>If you are using windowless activation, the flag has no effect.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>If set, provides mouse interaction while your control is inactive by enabling <ph id="ph1">`COleControl`</ph>'s implementation of the <ph id="ph2">`IPointerInactive`</ph> interface, which is disabled by default.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>If set, eliminates extra drawing operations and the accompanying visual flicker.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>Use when your control draws itself identically in the inactive and active states.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>If you are using windowless activation, the flag has no effect.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>If set, indicates your control uses windowless activation.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>If set, indicates that the control will perform optimized drawing, if the container supports it.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`GetControlFlags`</ph> and other optimizations of OLE controls, see <bpt id="p1">[</bpt>ActiveX Controls: Optimization<ept id="p1">](../../mfc/mfc-activex-controls-optimization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getcontrolsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetControlSize</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>Retrieves the size of the OLE control window.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pcx<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>Specifies the width of the control in pixels.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pcy<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>Specifies the height of the control in pixels.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>Note that all coordinates for control windows are relative to the upper-left corner of the control.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetDC</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>Provides for a windowless object to get a screen (or compatible) device context from its container.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lprcRect<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>A pointer to the rectangle the windowless control wants to redraw, in client coordinates of the control.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> means the full object's extent.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>Drawing attributes of the device context.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>Choices are:</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLEDC_NODRAW<ept id="p1">**</ept> Indicates that the object won't use the device context to perform any drawing but merely to get information about the display device.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>The container should simply pass the window's DC without further processing.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLEDC_PAINTBKGND<ept id="p1">**</ept> Requests that the container paint the background before returning the DC.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>An object should use this flag if it is requesting a DC for redrawing an area with transparent background.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLEDC_OFFSCREEN<ept id="p1">**</ept> Informs the container that the object wishes to render into an off-screen bitmap that should then be copied to the screen.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>An object should use this flag when the drawing operation it is about to perform generates a lot of flicker.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>The container is free to honor this request or not.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>However, if this flag is not set, the container must hand back an on-screen DC.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>This allows objects to perform direct screen operations such as showing a selection (via an <bpt id="p1">**</bpt>XOR<ept id="p1">**</ept> operation).</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Pointer to the display device context for the container <ph id="ph1">`CWnd`</ph> client area if successful; otherwise, the return value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>The display device context can be used in subsequent GDI functions to draw in the client area of the container's window.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ReleaseDC<ept id="p1">](#colecontrol__releasedc)</ept> member function must be called to release the context after painting.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>When calling <ph id="ph1">`GetDC`</ph>, objects pass the rectangle they wish to draw into in their own client coordinates.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetDC`</ph> translates these to coordinates of the container client area.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>The object should not request a desired drawing rectangle larger than its own client area rectangle, the size of which can be retrieved with <bpt id="p1">[</bpt>GetClientRect<ept id="p1">](#colecontrol__getclientrect)</ept>.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>This prevents objects from inadvertently drawing where they are not supposed to.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getenabled"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetEnabled</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Implements the Get function of your control's stock Enabled property.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>Nonzero if the control is enabled; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getextendedcontrol"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetExtendedControl</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>Obtains a pointer to an object maintained by the container that represents the control with an extended set of properties.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>A pointer to the container's extended control object.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>If there is no object available, the value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>This object may be manipulated through its <ph id="ph1">`IDispatch`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">`QueryInterface`</ph> to obtain other available interfaces provided by the object.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>However, the object is not required to support a specific set of interfaces.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>Note that relying on the specific features of a container's extended control object limits the portability of your control to other arbitrary containers.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>The function that calls this function is responsible for releasing the pointer when finished with the object.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>Note that the container is not required to support this object.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getfocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetFocus</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">`COleControl`</ph> object has the focus.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>If the control is activated and windowless, returns <bpt id="p1">**</bpt>this<ept id="p1">**</ept> if the control currently has the keyboard focus (as determined by the control's container), or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if it does not have the focus.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>Otherwise, returns the <ph id="ph1">`CWnd`</ph> object that has the focus (same as <ph id="ph2">`CWnd::GetFocus`</ph>).</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>An activated windowless control receives the focus when <bpt id="p1">[</bpt>SetFocus<ept id="p1">](#colecontrol__setfocus)</ept> is called.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getfont"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetFont</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>Implements the Get function of the stock Font property.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>A pointer to the font dispatch interface of the control's stock Font property.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>Note that the caller must release the object when finished.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Within the implementation of the control, use <ph id="ph1">`InternalGetFont`</ph> to access the control's stock Font object.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>For more information on using fonts in your control, see the article <bpt id="p1">[</bpt>ActiveX Controls: Using Fonts in an ActiveX Control<ept id="p1">](../../mfc/mfc-activex-controls-using-fonts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getfonttextmetrics"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetFontTextMetrics</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>Measures the text metrics for any <ph id="ph1">`CFontHolder`</ph> object owned by the control.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>TEXTMETRIC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145132)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>Reference to a <bpt id="p1">[</bpt>CFontHolder<ept id="p1">](../../mfc/reference/cfontholder-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>Such a font can be selected with the <bpt id="p1">[</bpt>COleControl::SelectFontObject<ept id="p1">](#colecontrol__selectfontobject)</ept> function.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetFontTextMetrics`</ph> will initialize the <ph id="ph2">`TEXTMETRIC`</ph> structure pointed to by <ph id="ph3">`lptm`</ph> with valid metrics information about <ph id="ph4">`fontHolder`</ph>'s font if successful, or fill the structure with zeros if not successful.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>You should use this function instead of <bpt id="p1">[</bpt>GetTextMetrics<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144941)</ept> when painting your control because controls, like any embedded OLE object, may be required to render themselves into a metafile.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TEXTMETRIC`</ph> structure for the default font is refreshed when the <bpt id="p1">[</bpt>SelectFontObject<ept id="p1">](#colecontrol__selectfontobject)</ept> function is called.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>You should call <ph id="ph1">`GetFontTextMetrics`</ph> only after selecting the stock Font property to assure the information it provides is valid.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getforecolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetForeColor</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Implements the Get function of the stock ForeColor property.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>The return value specifies the current foreground color as a <bpt id="p1">**</bpt>OLE_COLOR<ept id="p1">**</ept> value, if successful.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>This value can be translated to a <bpt id="p1">[</bpt>COLORREF<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value with a call to <ph id="ph1">`TranslateColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__gethwnd"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetHwnd</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>Implements the Get function of the stock hWnd property.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>The OLE control's window handle, if any; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getmessagestring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetMessageString</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>Called by the framework to obtain a short string that describes the purpose of the menu item identified by <ph id="ph1">`nID`</ph>.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>A menu item ID.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object through which a string will be returned.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>This can be used to obtain a message for display in a status bar while the menu item is highlighted.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>The default implementation attempts to load a string resource identified by <ph id="ph1">`nID`</ph>.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getnotsupported"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetNotSupported</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>Prevents access to a control's property value by the user.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>Call this function in place of the Get function of any property where retrieval of the property by the control's user is not supported.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>One example would be a property that is write only.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getreadystate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetReadyState</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>Returns the readiness state of the control.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>The readiness state of the control, one of the following values:</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_UNINITIALIZED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>Default initialization state</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_LOADING<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>Control is currently loading its properties</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_LOADED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>Control has been initialized</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_INTERACTIVE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>Control has enough data to be interactive but not all asynchronous data is yet loaded</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>Control has all its data</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>Most simple controls never need to differentiate between <bpt id="p1">**</bpt>LOADED<ept id="p1">**</ept> and <ph id="ph1">`INTERACTIVE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>However, controls that support data path properties may not be ready to be interactive until at least some data is received asynchronously.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>A control should attempt to become interactive as soon as possible.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getrectincontainer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetRectInContainer</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>Obtains the coordinates of the control's rectangle relative to the container, expressed in device units.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>A pointer to the rectangle structure into which the control's coordinates will be copied.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>Nonzero if the control is in-place active; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>The rectangle is only valid if the control is in-place active.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getstocktextmetrics"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetStockTextMetrics</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>Measures the text metrics for the control's stock Font property, which can be selected with the <bpt id="p1">[</bpt>SelectStockFont<ept id="p1">](#colecontrol__selectstockfont)</ept> function.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>TEXTMETRIC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145132)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetStockTextMetrics`</ph> function will initialize the <ph id="ph2">`TEXTMETRIC`</ph> structure pointed to by <ph id="ph3">`lptm`</ph> with valid metrics information if successful, or fill the structure with zeros if not successful.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>Use this function instead of <bpt id="p1">[</bpt>GetTextMetrics<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144941)</ept> when painting your control because controls, like any embedded OLE object, may be required to render themselves into a metafile.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TEXTMETRIC`</ph> structure for the default font is refreshed when the <ph id="ph2">`SelectStockFont`</ph> function is called.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>You should call this function only after selecting the stock font to assure the information it provides is valid.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__gettext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetText</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>Implements the Get function of the stock Text or Caption property.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>The current value of the control text string or a zero-length string if no string is present.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>For more information on the <ph id="ph1">`BSTR`</ph> data type, see <bpt id="p1">[</bpt>Data Types<ept id="p1">](../../mfc/reference/data-types-mfc.md)</ept> in the Macros and Globals section.</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>Note that the caller of this function must call <ph id="ph1">`SysFreeString`</ph> on the string returned in order to free the resource.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>Within the implementation of the control, use <ph id="ph1">`InternalGetText`</ph> to access the control's stock Text or Caption property.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__getwindowlessdroptarget"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::GetWindowlessDropTarget</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`GetWindowlessDropTarget`</ph> when you want a windowless control to be the target of an OLE drag and drop operation.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>Pointer to the object's <ph id="ph1">`IDropTarget`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>Since it does not have a window, a windowless object cannot register an <ph id="ph1">`IDropTarget`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>However, to participate in drag and drop, a windowless object can still implement the interface and return it in <ph id="ph1">`GetWindowlessDropTarget`</ph>.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>Normally, this would require that the control's window be registered as a drop target.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>But since the control has no window of its own, the container will use its own window as a drop target.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>The control simply needs to provide an implementation of the <ph id="ph1">`IDropTarget`</ph> interface to which the container can delegate calls at the appropriate time.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAxCtl#2<ept id="p2">](../../mfc/reference/codesnippet/cpp/colecontrol-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__initializeiids"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::InitializeIIDs</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>Informs the base class of the IIDs the control will use.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>piidPrimary<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>Pointer to the interface ID of the control's primary dispatch interface.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>piidEvents<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>Pointer to the interface ID of the control's event interface.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>Call this function in the control's constructor to inform the base class of the interface IDs your control will be using.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__internalgetfont"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::InternalGetFont</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>Accesses the stock Font property of your control</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CFontHolder<ept id="p1">](../../mfc/reference/cfontholder-class.md)</ept> object that contains the stock Font object.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__internalgettext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::InternalGetText</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>Accesses the stock Text or Caption property of your control.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>A reference to the control text string.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__internalsetreadystate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::InternalSetReadyState</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>Sets the readiness state of the control.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lNewReadyState<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>The readiness state to set for the control, one of the following values:</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_UNINITIALIZED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>Default initialization state</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_LOADING<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>Control is currently loading its properties</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_LOADED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>Control has been initialized</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>READYSTATE_INTERACTIVE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>Control has enough data to be interactive but not all asynchronous data is yet loaded</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>Control has all its data</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>Most simple controls never need to differentiate between <bpt id="p1">**</bpt>LOADED<ept id="p1">**</ept> and <ph id="ph1">`INTERACTIVE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>However, controls that support data path properties may not be ready to be interactive until at least some data is received asynchronously.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>A control should attempt to become interactive as soon as possible.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__invalidatecontrol"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::InvalidateControl</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>Forces the control to redraw itself.</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>A pointer to the region of the control to be invalidated.</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>Specifies whether the background within the update region is to be erased when the update region is processed.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpRect`</ph> has a <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> value, the entire control will be redrawn.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpRect`</ph> is not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, this indicates the portion of the control's rectangle that is to be invalidated.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>In cases where the control has no window, or is currently not active, the rectangle is ignored, and a call is made to the client site's <bpt id="p1">[</bpt>IAdviseSink::OnViewChange<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms694337)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>Use this function instead of <ph id="ph1">`CWnd::InvalidateRect`</ph> or <ph id="ph2">`InvalidateRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__invalidatergn"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::InvalidateRgn</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>Invalidates the container window's client area within the given region.</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CRgn<ept id="p1">](../../mfc/reference/crgn-class.md)</ept> object that identifies the display region of the OLE object to invalidate, in client coordinates of the containing window.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the extent is the entire object.</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source>Specifies whether the background within the invalidated region is to be erased.</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the background is erased.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the background remains unchanged.</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>This can be used to redraw windowless controls within the container.</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>The invalidated region, along with all other areas in the update region, is marked for painting when the next <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message is sent.</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bErase`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> for any part of the update region, the background in the entire region, not just in the given part, is erased.</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__isconvertingvbx"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::IsConvertingVBX</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>Allows specialized loading of an OLE control.</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source>Nonzero if the control is being converted; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source>When converting a form that uses VBX controls to one that uses OLE controls, special loading code for the OLE controls may be required.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>For example, if you are loading an instance of your OLE control, you might have a call to <bpt id="p1">[</bpt>PX_Font<ept id="p1">](persistence-of-ole-controls.md#px_font)</ept> in your <ph id="ph1">`DoPropExchange`</ph>:</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAxCtl#3<ept id="p2">](../../mfc/reference/codesnippet/cpp/colecontrol-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>However, VBX controls did not have a Font object; each font property was saved individually.</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>In this case, you would use <ph id="ph1">`IsConvertingVBX`</ph> to distinguish between these two cases:</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAxCtl#4<ept id="p2">](../../mfc/reference/codesnippet/cpp/colecontrol-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>Another case would be if your VBX control saved proprietary binary data (in its <bpt id="p1">**</bpt>VBM_SAVEPROPERTY<ept id="p1">**</ept> message handler), and your OLE control saves its binary data in a different format.</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source>If you want your OLE control to be backward-compatible with the VBX control, you could read both the old and new formats using the <ph id="ph1">`IsConvertingVBX`</ph> function by distinguishing whether the VBX control or the OLE control was being loaded.</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source>In your control's <ph id="ph1">`DoPropExchange`</ph> function, you can check for this condition and if true, execute load code specific to this conversion (such as the previous examples).</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source>If the control is not being converted, you can execute normal load code.</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source>This ability is only applicable to controls being converted from VBX counterparts.</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__isinvokeallowed"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::IsInvokeAllowed</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>Enables automation method invocation.</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>Nonzero if the control has been initialized; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>The framework's implementation of <bpt id="p1">**</bpt>IDispatch::Invoke<ept id="p1">**</ept> calls <bpt id="p2">**</bpt>IsInvokeAllowed<ept id="p2">**</ept> to determine if a given function (identified by <ph id="ph1">`dispid`</ph>) may be invoked.</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>The default behavior for an OLE control is to allow automation methods to be invoked only if the control has been initialized; however, <bpt id="p1">**</bpt>IsInvokeAllowed<ept id="p1">**</ept> is a virtual function and may be overridden if necessary (for example, when the control is being used as an automation server).</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>For more information, see Knowledge Base article Q166472, "HOWTO: Use an OLE Control as an Automation Server."</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at <bpt id="p1">[</bpt>http://support.microsoft.com<ept id="p1">](http://support.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ismodified"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::IsModified</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>Determines if the control's state has been modified.</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>Nonzero if the control's state has been modified since it was last saved; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve">
          <source>The state of a control is modified when a property changes value.</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__isoptimizeddraw"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::IsOptimizedDraw</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>Determines whether the container supports optimized drawing for the current drawing operation.</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the container supports optimized drawing for the current drawing operation; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source>If optimized drawing is supported, then the control need not select old objects (pens, brushes, fonts, etc.) into the device context when drawing is finished.</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__issubclassedcontrol"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::IsSubclassedControl</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine if the control subclasses a Windows control.</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>Nonzero if the control is subclassed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>You must override this function and return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if your OLE control subclasses a Windows control.</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__load"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::Load</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>Resets any previous data loaded asynchronously and initiates a new loading of the control's asynchronous property.</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>strNewPath<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the path that references the absolute location of the asynchronous control property.</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>prop<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CDataPathProperty<ept id="p1">](../../mfc/reference/cdatapathproperty-class.md)</ept> object implementing an asynchronous control property.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__lockinplaceactive"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::LockInPlaceActive</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source>Prevents the container from deactivating your control.</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> if the in-place active state of the control is to be locked; <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if it is to be unlocked.</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>Nonzero if the lock was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve">
          <source>Note that every locking of the control must be paired with an unlocking of the control when finished.</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>You should only lock your control for short periods, such as while firing an event.</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onambientpropertychange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnAmbientPropertyChange</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>Called by the framework when an ambient property of the container has changed value.</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dispID<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>The dispatch ID of the ambient property that changed, or <bpt id="p1">**</bpt>DISPID_UNKNOWN<ept id="p1">**</ept> if multiple properties have changed.</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onappearancechanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnAppearanceChanged</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>Called by the framework when the stock Appearance property value has changed.</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>Override this function if you want notification after this property changes.</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve">
          <source>The default implementation calls <ph id="ph1">`InvalidateControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onbackcolorchanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnBackColorChanged</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>Called by the framework when the stock BackColor property value has changed.</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve">
          <source>Override this function if you want notification after this property changes.</source>
        </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve">
          <source>The default implementation calls <ph id="ph1">`InvalidateControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onborderstylechanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnBorderStyleChanged</source>
        </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve">
          <source>Called by the framework when the stock BorderStyle property value has changed.</source>
        </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve">
          <source>The default implementation calls <ph id="ph1">`InvalidateControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve">
          <source>Override this function if you want notification after this property changes.</source>
        </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onclick"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnClick</source>
        </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source>Called by the framework when a mouse button has been clicked or the DoClick stock method has been invoked.</source>
        </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>iButton<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>Index of a mouse button.</source>
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>Can have one of the following values:</source>
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LEFT_BUTTON<ept id="p1">**</ept> The left mouse button was clicked.</source>
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MIDDLE_BUTTON<ept id="p1">**</ept> The middle mouse button was clicked.</source>
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RIGHT_BUTTON<ept id="p1">**</ept> The right mouse button was clicked.</source>
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>The default implementation calls <ph id="ph1">`COleControl::FireClick`</ph>.</source>
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>Override this member function to modify or extend the default handling.</source>
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onclose"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnClose</source>
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>Called by the framework when the container has called the control's <bpt id="p1">**</bpt>IOleControl::Close<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>Flag that indicates whether the object should be saved before loading.</source>
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source>Valid values are:</source>
        </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`OnClose`</ph> saves the control object if it has been modified and <ph id="ph2">`dwSaveOption`</ph> is either <ph id="ph3">`OLECLOSE_SAVEIFDIRTY`</ph> or <ph id="ph4">`OLECLOSE_PROMPTSAVE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ondoverb"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnDoVerb</source>
        </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve">
          <source>Called by the framework when the container calls the <bpt id="p1">**</bpt>IOleObject::DoVerb<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve">
          <source>The index of the control verb to be invoked.</source>
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve">
          <source>A pointer to the Windows message that caused the verb to be invoked.</source>
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve">
          <source>The handle to the parent window of the control.</source>
        </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve">
          <source>If the execution of the verb creates a window (or windows), <ph id="ph1">`hWndParent`</ph> should be used as the parent.</source>
        </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve">
          <source>A pointer to a RECT structure into which the coordinates of the control, relative to the container, will be copied.</source>
        </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>Nonzero if call was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve">
          <source>The default implementation uses the <ph id="ph1">`ON_OLEVERB`</ph> and <ph id="ph2">`ON_STDOLEVERB`</ph> message map entries to determine the proper function to invoke.</source>
        </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source>Override this function to change the default handling of verb.</source>
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ondraw"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnDraw</source>
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source>Called by the framework to draw the OLE control in the specified bounding rectangle using the specified device context.</source>
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source>The device context in which the drawing occurs.</source>
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>The rectangular area of the control, including the border.</source>
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source>The rectangular area of the control that is invalid.</source>
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OnDraw`</ph> is typically called for screen display, passing a screen device context as <ph id="ph2">`pDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`rcBounds`</ph> parameter identifies the rectangle in the target device context (relative to its current mapping mode).</source>
        </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`rcInvalid`</ph> parameter is the actual rectangle that is invalid.</source>
        </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve">
          <source>In some cases this will be a smaller area than <ph id="ph1">`rcBounds`</ph>.</source>
        </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ondrawmetafile"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnDrawMetafile</source>
        </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>Called by the framework to draw the OLE control in the specified bounding rectangle using the specified metafile device context.</source>
        </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source>The device context in which the drawing occurs.</source>
        </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source>The rectangular area of the control, including the border.</source>
        </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source>The default implementation calls the <bpt id="p1">[</bpt>OnDraw<ept id="p1">](#colecontrol__ondraw)</ept> function.</source>
        </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onedit"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnEdit</source>
        </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>Causes the control to be UI activated.</source>
        </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve">
          <source>A pointer to the Windows message that invoked the verb.</source>
        </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve">
          <source>A handle to the parent window of the control.</source>
        </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve">
          <source>A pointer to the rectangle used by the control in the container.</source>
        </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve">
          <source>Nonzero if the call is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>This has the same effect as invoking the control's <ph id="ph1">`OLEIVERB_UIACTIVATE`</ph> verb.</source>
        </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>This function is typically used as the handler function for an <ph id="ph1">`ON_OLEVERB`</ph> message map entry.</source>
        </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>This makes an "Edit" verb available on the control's "Object" menu.</source>
        </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAxCtl#5<ept id="p2">](../../mfc/reference/codesnippet/cpp/colecontrol-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onenabledchanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnEnabledChanged</source>
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve">
          <source>Called by the framework when the stock Enabled property value has changed.</source>
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>Override this function if you want notification after this property changes.</source>
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source>The default implementation calls <bpt id="p1">[</bpt>InvalidateControl<ept id="p1">](#colecontrol__invalidatecontrol)</ept>.</source>
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onenumverbs"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnEnumVerbs</source>
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve">
          <source>Called by the framework when the container calls the <bpt id="p1">**</bpt>IOleObject::EnumVerbs<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">**</bpt>IEnumOLEVERB<ept id="p1">**</ept> object that enumerates the control's verbs.</source>
        </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve">
          <source>Nonzero if verbs are available; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source>The default implementation enumerates the <ph id="ph1">`ON_OLEVERB`</ph> entries in the message map.</source>
        </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve">
          <source>Override this function to change the default way of enumerating verbs.</source>
        </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__oneventadvise"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnEventAdvise</source>
        </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source>Called by the framework when an event handler is connected to or disconnected from an OLE control.</source>
        </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> indicates that an event handler has been connected to the control.</source>
        </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> indicates that an event handler has been disconnected from the control.</source>
        </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onfontchanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnFontChanged</source>
        </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source>Called by the framework when the stock Font property value has changed.</source>
        </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source>The default implementation calls <ph id="ph1">`COleControl::InvalidateControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve">
          <source>If the control is subclassing a Windows control, the default implementation also sends a <bpt id="p1">**</bpt>WM_SETFONT<ept id="p1">**</ept> message to the control's window.</source>
        </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve">
          <source>Override this function if you want notification after this property changes.</source>
        </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAxCtl#6<ept id="p2">](../../mfc/reference/codesnippet/cpp/colecontrol-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onforecolorchanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnForeColorChanged</source>
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve">
          <source>Called by the framework when the stock ForeColor property value has changed.</source>
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve">
          <source>The default implementation calls <ph id="ph1">`InvalidateControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source>Override this function if you want notification after this property changes.</source>
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onfreezeevents"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnFreezeEvents</source>
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>Called by the framework after the container calls <bpt id="p1">**</bpt>IOleControl::FreezeEvents<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> if the control's event handling is frozen; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>Override this function if you want additional behavior when event handling is frozen or unfrozen.</source>
        </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ongetcolorset"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnGetColorSet</source>
        </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>Called by the framework when the container calls the <bpt id="p1">**</bpt>IViewObject::GetColorSet<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve">
          <source>Points to the target device for which the picture should be rendered.</source>
        </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve">
          <source>If this value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the picture should be rendered for a default target device, usually a display device.</source>
        </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve">
          <source>Specifies the information context on the target device indicated by <ph id="ph1">`ptd`</ph>.</source>
        </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve">
          <source>This parameter can be a device context, but is not one necessarily.</source>
        </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`ptd`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <ph id="ph2">`hicTargetDev`</ph> should also be <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>ppColorSet<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve">
          <source>A pointer to the location into which the set of colors that would be used should be copied.</source>
        </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve">
          <source>If the function does not return the color set, <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is returned.</source>
        </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source>Nonzero if a valid color set is returned; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>The container calls this function to obtain all the colors needed to draw the OLE control.</source>
        </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>The container can use the color sets obtained in conjunction with the colors it needs to set the overall color palette.</source>
        </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source>The default implementation returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve">
          <source>Override this function to do any special processing of this request.</source>
        </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ongetcontrolinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnGetControlInfo</source>
        </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve">
          <source>Called by the framework when the control's container has requested information about the control.</source>
        </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>CONTROLINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680734)</ept> structure to be filled in.</source>
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>This information consists primarily of a description of the control's mnemonic keys.</source>
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>The default implementation fills <ph id="ph1">`pControlInfo`</ph> with default information.</source>
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>Override this function if your control needs to process mnemonic keys.</source>
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ongetdisplaystring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnGetDisplayString</source>
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source>Called by the framework to obtain a string that represents the current value of the property identified by <ph id="ph1">`dispid`</ph>.</source>
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>The dispatch ID of a property of the control.</source>
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object through which a string will be returned.</source>
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>Nonzero if a string has been returned in <bpt id="p1">*</bpt>strValue;<ept id="p1">*</ept> otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve">
          <source>Override this function if your control has a property whose value cannot be directly converted to a string and you want the property's value to be displayed in a container-supplied property browser.</source>
        </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ongetinplacemenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnGetInPlaceMenu</source>
        </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve">
          <source>Called by the framework when the control is UI activated to obtain the menu to be merged into the container's existing menu.</source>
        </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>The handle of the control's menu, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the control has none.</source>
        </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>The default implementation returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source>For more information on merging OLE resources, see the article <bpt id="p1">[</bpt>Menus and Resources (OLE)<ept id="p1">](../../mfc/menus-and-resources-ole.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ongetnaturalextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnGetNaturalExtent</source>
        </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source>Called by the framework in response to a container's <bpt id="p1">**</bpt>IViewObjectEx::GetNaturalExtent<ept id="p1">**</ept> request.</source>
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>Specifies how the object is to be represented.</source>
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>Representations include content, an icon, a thumbnail, or a printed document.</source>
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source>Valid values are taken from the enumeration <bpt id="p1">[</bpt>DVASPECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms690318)</ept> or <bpt id="p2">**</bpt>DVASPECT2<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lindex<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source>The portion of the object that is of interest.</source>
        </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source>Currently only -1 is valid.</source>
        </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>DVTARGETDEVICE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686613)</ept> structure defining the target device for which the object's size should be returned.</source>
        </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>Specifies the information context for the target device indicated by the <ph id="ph1">`ptd`</ph> parameter from which the object can extract device metrics and test the device's capabilities.</source>
        </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`ptd`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the object should ignore the value in the <ph id="ph2">`hicTargetDev`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pExtentInfo<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">**</bpt>DVEXTENTINFO<ept id="p1">**</ept> structure that specifies sizing data.</source>
        </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DVEXTENTINFO<ept id="p1">**</ept> structure is:</source>
        </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve">
          <source>The structure member <ph id="ph1">`dwExtentMode`</ph> can take one of two values:</source>
        </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DVEXTENT_CONTENT<ept id="p1">**</ept> Inquire how big the control should be to exactly fit content (snap-to-size)</source>
        </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DVEXTENT_INTEGRAL<ept id="p1">**</ept> When resizing, pass proposed size to control</source>
        </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve">
          <source>Points to sizing data returned by control.</source>
        </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source>The returned sizing data is set to -1 for any dimension that was not adjusted.</source>
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>Nonzero if it successfully returns or adjusts the size; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source>Override this function to return the object's display size closest to the proposed size and extent mode in the <bpt id="p1">**</bpt>DVEXTENTINFO<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>The default implementation returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> and makes no adjustments to the size.</source>
        </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ongetpredefinedstrings"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnGetPredefinedStrings</source>
        </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>Called by the framework to obtain a set of predefined strings representing the possible values for a property.</source>
        </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>The dispatch ID of a property of the control.</source>
        </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve">
          <source>A string array to be filled in with return values.</source>
        </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DWORD`</ph> array to be filled in with return values.</source>
        </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve">
          <source>Nonzero if elements have been added to <ph id="ph1">`pStringArray`</ph> and <ph id="ph2">`pCookieArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve">
          <source>Override this function if your control has a property with a set of possible values that can be represented by strings.</source>
        </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve">
          <source>For each element added to <ph id="ph1">`pStringArray`</ph>, you should add a corresponding "cookie" element to <bpt id="p1">*</bpt>pCookieArray.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source>These "cookie" values may later be passed by the framework to the <ph id="ph1">`COleControl::OnGetPredefinedValue`</ph> function.</source>
        </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ongetpredefinedvalue"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnGetPredefinedValue</source>
        </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve">
          <source>Called by the framework to obtain the value corresponding to one of the predefined strings previously returned by an override of <ph id="ph1">`COleControl::OnGetPredefinedStrings`</ph>.</source>
        </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve">
          <source>The dispatch ID of a property of the control.</source>
        </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve">
          <source>A cookie value previously returned by an override of <ph id="ph1">`COleControl::OnGetPredefinedStrings`</ph>.</source>
        </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> structure through which a property value will be returned.</source>
        </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve">
          <source>Nonzero if a value has been returned in <ph id="ph1">`lpvarOut`</ph>; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ongetviewextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnGetViewExtent</source>
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source>Called by the framework in response to a container's <bpt id="p1">[</bpt>IViewObject2::GetExtent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms684032)</ept> request.</source>
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dwDrawAspect<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `DWORD`</ph> describing which form, or aspect, of an object is to be displayed.</source>
        </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve">
          <source>Valid values are taken from the enumeration <bpt id="p1">[</bpt>DVASPECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms690318)</ept> or <bpt id="p2">**</bpt>DVASPECT2<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lindex<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve">
          <source>The portion of the object that is of interest.</source>
        </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve">
          <source>Currently only –1 is valid.</source>
        </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>DVTARGETDEVICE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686613)</ept> structure defining the target device for which the object's size should be returned.</source>
        </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpsizel<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve">
          <source>Points to the location where the object's size is returned.</source>
        </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve">
          <source>Nonzero if extent information is successfully returned; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve">
          <source>Override this function if your control uses two-pass drawing, and its opaque and transparent parts have different dimensions.</source>
        </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ongetviewrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnGetViewRect</source>
        </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source>Called by the framework in response to a container's <bpt id="p1">**</bpt>IViewObjectEx::GetRect<ept id="p1">**</ept> request.</source>
        </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `DWORD`</ph> describing which form, or aspect, of an object is to be displayed.</source>
        </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>Valid values are taken from the enumeration <bpt id="p1">[</bpt>DVASPECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms690318)</ept> or <bpt id="p2">**</bpt>DVASPECT2<ept id="p2">**</ept>:</source>
        </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DVASPECT_CONTENT`</ph> Bounding rectangle of the whole object.</source>
        </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve">
          <source>Top-left corner at the object's origin and size equal to the extent returned by <bpt id="p1">**</bpt>GetViewExtent<ept id="p1">**</ept><bpt id="p2">*</bpt>.<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DVASPECT_OPAQUE<ept id="p1">**</ept> Objects with a rectangular opaque region return that rectangle.</source>
        </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve">
          <source>Others fail.</source>
        </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DVASPECT_TRANSPARENT<ept id="p1">**</ept> Rectangle covering all transparent or irregular parts.</source>
        </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>RECTL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162907)</ept> structure specifying the rectangle in which the object should be drawn.</source>
        </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve">
          <source>This parameter controls the positioning and stretching of the object.</source>
        </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>Nonzero if the rectangle sized to the object is successfully returned; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>The object's size is converted by <ph id="ph1">`OnGetViewRect`</ph> into a rectangle starting at a specific position (the default is the upper left corner of the display).</source>
        </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve">
          <source>Override this function if your control uses two-pass drawing, and its opaque and transparent parts have different dimensions.</source>
        </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ongetviewstatus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnGetViewStatus</source>
        </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve">
          <source>Called by the framework in response to a container's <bpt id="p1">**</bpt>IViewObjectEx::GetViewStatus<ept id="p1">**</ept> request.</source>
        </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve">
          <source>One of the values of the <bpt id="p1">**</bpt>VIEWSTATUS<ept id="p1">**</ept> enumeration if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve">
          <source>Possible values are any combination of the following:</source>
        </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VIEWSTATUS_OPAQUE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>Object is completely opaque.</source>
        </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve">
          <source>If this bit is not set, the object contains transparent parts.</source>
        </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve">
          <source>This bit applies only to content-related aspects and not to <ph id="ph1">`DVASPECT_ICON`</ph> or <ph id="ph2">`DVASPECT_DOCPRINT`</ph>.</source>
        </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VIEWSTATUS_SOLIDBKGND<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve">
          <source>Object has a solid background (consisting in a solid color, not a brush pattern).</source>
        </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve">
          <source>This bit is meaningful only if <bpt id="p1">**</bpt>VIEWSTATUS_OPAQUE<ept id="p1">**</ept> is set and applies only to content-related aspects and not to <ph id="ph1">`DVASPECT_ICON`</ph> or <ph id="ph2">`DVASPECT_DOCPRINT`</ph>.</source>
        </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VIEWSTATUS_DVASPECTOPAQUE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source>Object supports <bpt id="p1">**</bpt>DVASPECT_OPAQUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve">
          <source>All <bpt id="p1">**</bpt>IViewObjectEx<ept id="p1">**</ept> methods that take a drawing aspect as a parameter can be called with this aspect.</source>
        </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VIEWSTATUS_DVASPECTTRANSPARENT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve">
          <source>Object supports <bpt id="p1">**</bpt>DVASPECT_TRANSPARENT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve">
          <source>All <bpt id="p1">**</bpt>IViewObjectEx<ept id="p1">**</ept> methods that take a drawing aspect as a parameter can be called with this aspect.</source>
        </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>Override this function if your control uses two-pass drawing.</source>
        </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve">
          <source>The default implementation returns <bpt id="p1">**</bpt>VIEWSTATUS_OPAQUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onhidetoolbars"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnHideToolBars</source>
        </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve">
          <source>Called by the framework when the control is UI deactivated.</source>
        </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve">
          <source>The implementation should hide all toolbars displayed by <ph id="ph1">`OnShowToolbars`</ph>.</source>
        </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__oninactivemousemove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnInactiveMouseMove</source>
        </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source>Called by the container for the inactive object under the mouse pointer on receipt of a <ph id="ph1">`WM_MOUSEMOVE`</ph> message.</source>
        </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source>The object bounding rectangle, in client coordinates of the containing window.</source>
        </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>Tells the object its exact position and size on the screen when the <ph id="ph1">`WM_MOUSEMOVE`</ph> message was received.</source>
        </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve">
          <source>The x coordinate of the mouse location in client coordinates of the containing window.</source>
        </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve">
          <source>The y coordinate of the mouse location in client coordinates of the containing window.</source>
        </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve">
          <source>Identifies the current state of the keyboard modifier keys on the keyboard.</source>
        </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve">
          <source>Valid values can be a combination of any of the flags <bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept>, <bpt id="p2">**</bpt>MK_SHIFT<ept id="p2">**</ept>, <bpt id="p3">**</bpt>MK_ALT<ept id="p3">**</ept>, <bpt id="p4">**</bpt>MK_BUTTON<ept id="p4">**</ept>, <bpt id="p5">**</bpt>MK_LBUTTON<ept id="p5">**</ept>, <bpt id="p6">**</bpt>MK_MBUTTON<ept id="p6">**</ept>, and <bpt id="p7">**</bpt>MK_RBUTTON<ept id="p7">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source>Note that window client coordinates (pixels) are used to pass the mouse cursor position.</source>
        </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve">
          <source>This is made possible by also passing the bounding rectangle of the object in the same coordinate system.</source>
        </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__oninactivesetcursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnInactiveSetCursor</source>
        </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source>Called by the container for the inactive object under the mouse pointer on receipt of a <ph id="ph1">`WM_SETCURSOR`</ph> message.</source>
        </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source>The object bounding rectangle, in client coordinates of the containing window.</source>
        </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>Tells the object its exact position and size on the screen when the <ph id="ph1">`WM_SETCURSOR`</ph> message was received.</source>
        </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve">
          <source>The x coordinate of the mouse location in client coordinates of the containing window.</source>
        </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>The y coordinate of the mouse location in client coordinates of the containing window.</source>
        </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dwMouseMsg<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve">
          <source>The identifier of the mouse message for which a <ph id="ph1">`WM_SETCURSOR`</ph> occurred.</source>
        </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bSetAlways<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve">
          <source>Specifies whether or not the object must set the cursor.</source>
        </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the object must set the cursor; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, the cursor is not obligated to set the cursor, and should return <bpt id="p3">**</bpt>S_FALSE<ept id="p3">**</ept> in that case.</source>
        </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve">
          <source>Note that window client coordinates (pixels) are used to pass the mouse cursor position.</source>
        </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve">
          <source>This is made possible by also passing the bounding rectangle of the object in the same coordinate system.</source>
        </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onkeydownevent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnKeyDownEvent</source>
        </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve">
          <source>Called by the framework after a stock KeyDown event has been processed.</source>
        </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>The virtual key code value of the pressed key.</source>
        </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source>For a list of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>Contains a combination of the following flags:</source>
        </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SHIFT_MASK<ept id="p1">**</ept> The SHIFT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTRL_MASK<ept id="p1">**</ept> The CTRL key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ALT_MASK<ept id="p1">**</ept> The ALT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve">
          <source>Override this function if your control needs access to the key information after the event has been fired.</source>
        </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onkeypressevent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnKeyPressEvent</source>
        </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve">
          <source>Called by the framework after the stock KeyPress event has been fired.</source>
        </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>Contains the virtual key code value of the key pressed.</source>
        </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve">
          <source>For a list of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`nChar`</ph> value may have been modified by the container.</source>
        </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>Override this function if you want notification after this event occurs.</source>
        </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onkeyupevent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnKeyUpEvent</source>
        </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve">
          <source>Called by the framework after a stock KeyDown event has been processed.</source>
        </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source>The virtual key code value of the pressed key.</source>
        </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>For a list of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve">
          <source>Contains a combination of the following flags:</source>
        </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SHIFT_MASK<ept id="p1">**</ept> The SHIFT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTRL_MASK<ept id="p1">**</ept> The CTRL key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ALT_MASK<ept id="p1">**</ept> The ALT key was pressed during the action.</source>
        </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source>Override this function if your control needs access to the key information after the event has been fired.</source>
        </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onmappropertytopage"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnMapPropertyToPage</source>
        </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve">
          <source>Called by the framework to obtain the class ID of a property page that implements editing of the specified property.</source>
        </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve">
          <source>The dispatch ID of a property of the control.</source>
        </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>CLSID<ept id="p1">**</ept> structure through which a class ID will be returned.</source>
        </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pbPageOptional<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve">
          <source>Returns an indicator of whether use of the specified property page is optional.</source>
        </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve">
          <source>Nonzero if a class ID has been returned in <ph id="ph1">`lpclsid`</ph>; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve">
          <source>Override this function to provide a way to invoke your control's property pages from the container's property browser.</source>
        </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onmnemonic"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnMnemonic</source>
        </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve">
          <source>Called by the framework when the container has detected that a mnemonic key of the OLE control has been pressed.</source>
        </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve">
          <source>Pointer to the Windows message generated by a mnemonic key press.</source>
        </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onproperties"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnProperties</source>
        </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve">
          <source>Called by the framework when the control's properties verb has been invoked by the container.</source>
        </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve">
          <source>A pointer to the Windows message that invoked the verb.</source>
        </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve">
          <source>A handle to the parent window of the control.</source>
        </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve">
          <source>A pointer to the rectangle used by the control in the container.</source>
        </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>Nonzero if the call is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve">
          <source>The default implementation displays a modal property dialog box.</source>
        </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve">
          <source>You can also use this function to cause the display of your control's property pages.</source>
        </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve">
          <source>Make a call to the <ph id="ph1">`OnProperties`</ph> function, passing the handle of your control's parent in the <ph id="ph2">`hWndParent`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve">
          <source>In this case, the values of the <ph id="ph1">`lpMsg`</ph> and <ph id="ph2">`lpRect`</ph> parameters are ignored.</source>
        </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onqueryhitpoint"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnQueryHitPoint</source>
        </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve">
          <source>Called by the framework in response to a container's <bpt id="p1">**</bpt>IViewObjectEx::QueryHitPoint<ept id="p1">**</ept> request.</source>
        </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve">
          <source>Specifies how the object is represented.</source>
        </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve">
          <source>Valid values are taken from the enumeration <bpt id="p1">[</bpt>DVASPECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms690318)</ept> or <bpt id="p2">**</bpt>DVASPECT2<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`RECT`</ph> structure specifying the bounding rectangle of the OLE control client area.</source>
        </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure specifying the point to be checked for a hit.</source>
        </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve">
          <source>The point is specified in OLE client area coordinates.</source>
        </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve">
          <source>The distance that defines "close" to the point checked for a hit.</source>
        </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve">
          <source>Pointer to the result of the hit query.</source>
        </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve">
          <source>One of the following values:</source>
        </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HITRESULT_OUTSIDE<ept id="p1">**</ept> <ph id="ph1">`ptlLoc`</ph> is outside the OLE object and not close.</source>
        </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HITRESULT_TRANSPARENT<ept id="p1">**</ept> <bpt id="p2">*</bpt>ptlLoc<ept id="p2">*</ept> is within the bounds of the OLE object, but not close to the image.</source>
        </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source>For example, a point in the middle of a transparent circle could be <bpt id="p1">**</bpt>HITRESULT_TRANSPARENT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HITRESULT_CLOSE<ept id="p1">**</ept> <ph id="ph1">`ptlLoc`</ph> is inside or outside the OLE object but close enough to the object to be considered inside.</source>
        </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve">
          <source>Small, thin, or detailed objects may use this value.</source>
        </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve">
          <source>Even if a point is outside the bounding rectangle of an object it may still be close (this is needed for hitting small objects).</source>
        </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HITRESULT_HIT<ept id="p1">**</ept> <ph id="ph1">`ptlLoc`</ph> is within the image of the object.</source>
        </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve">
          <source>Nonzero if a hit result is successfully returned; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve">
          <source>A hit is an overlap with the OLE control display area.</source>
        </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve">
          <source>Queries whether an object's display rectangle overlaps the given point (hits the point).</source>
        </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`QueryHitPoint`</ph> can be overridden to test hits for non-rectangular objects.</source>
        </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onqueryhitrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnQueryHitRect</source>
        </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>Called by the framework in response to a container's <bpt id="p1">**</bpt>IViewObjectEx::QueryHitRect<ept id="p1">**</ept> request.</source>
        </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve">
          <source>Specifies how the object is to be represented.</source>
        </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve">
          <source>Valid values are taken from the enumeration <bpt id="p1">[</bpt>DVASPECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms690318)</ept> or <bpt id="p2">**</bpt>DVASPECT2<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`RECT`</ph> structure specifying the bounding rectangle of the OLE control client area.</source>
        </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>prcLoc<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve">
          <source>Pointer to the <ph id="ph1">`RECT`</ph> structure specifying the rectangle to be checked for a hit (overlap with the object rectangle), relative to the upper left corner of the object.</source>
        </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve">
          <source>Pointer to the result of the hit query.</source>
        </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve">
          <source>One of the following values:</source>
        </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HITRESULT_OUTSIDE<ept id="p1">**</ept> no point in the rectangle is hit by the OLE object.</source>
        </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HITRESULT_HIT<ept id="p1">**</ept> at least one point in the rectangle would be a hit on the object.</source>
        </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve">
          <source>Nonzero if a hit result is successfully returned; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve">
          <source>Queries whether an object's display rectangle overlaps any point in the given rectangle (hits the rectangle).</source>
        </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`QueryHitRect`</ph> can be overridden to test hits for non-rectangular objects.</source>
        </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onrenderdata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnRenderData</source>
        </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve data in the specified format.</source>
        </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>FORMATETC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682177)</ept> structure specifying the format in which information is requested.</source>
        </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>STGMEDIUM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683812)</ept> structure in which the data is to be returned.</source>
        </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve">
          <source>The specified format is one previously placed in the control object using the <bpt id="p1">[</bpt>DelayRenderData<ept id="p1">](../../mfc/reference/coledatasource-class.md#coledatasource__delayrenderdata)</ept> or <bpt id="p2">[</bpt>DelayRenderFileData<ept id="p2">](../../mfc/reference/coledatasource-class.md#coledatasource__delayrenderfiledata)</ept> member functions for delayed rendering.</source>
        </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve">
          <source>The default implementation of this function calls <ph id="ph1">`OnRenderFileData`</ph> or <ph id="ph2">`OnRenderGlobalData`</ph>, respectively, if the supplied storage medium is either a file or memory.</source>
        </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve">
          <source>If the requested format is <ph id="ph1">`CF_METAFILEPICT`</ph> or the persistent property set format, the default implementation renders the appropriate data and returns nonzero.</source>
        </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns 0 and does nothing.</source>
        </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>lpStgMedium-&gt;tymed<ept id="p1">*</ept> is <bpt id="p2">**</bpt>TYMED_NULL<ept id="p2">**</ept>, the <bpt id="p3">**</bpt>STGMEDIUM<ept id="p3">**</ept> should be allocated and filled as specified by <bpt id="p4">*</bpt>lpFormatEtc-&gt;tymed<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve">
          <source>If not <bpt id="p1">**</bpt>TYMED_NULL<ept id="p1">**</ept>, the <bpt id="p2">**</bpt>STGMEDIUM<ept id="p2">**</ept> should be filled in place with the data.</source>
        </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve">
          <source>Override this function to provide your data in the requested format and medium.</source>
        </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve">
          <source>Depending on your data, you may want to override one of the other versions of this function instead.</source>
        </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve">
          <source>If your data is small and fixed in size, override <ph id="ph1">`OnRenderGlobalData`</ph>.</source>
        </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve">
          <source>If your data is in a file, or is of variable size, override <ph id="ph1">`OnRenderFileData`</ph>.</source>
        </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>FORMATETC<ept id="p1">**</ept> and <bpt id="p2">**</bpt>STGMEDIUM<ept id="p2">**</ept> structures in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onrenderfiledata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnRenderFileData</source>
        </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve data in the specified format when the storage medium is a file.</source>
        </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>FORMATETC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682177)</ept> structure specifying the format in which information is requested.</source>
        </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CFile<ept id="p1">](../../mfc/reference/cfile-class.md)</ept> object in which the data is to be rendered.</source>
        </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve">
          <source>The specified format is one previously placed in the control object using the <bpt id="p1">[</bpt>DelayRenderData<ept id="p1">](../../mfc/reference/coledatasource-class.md#coledatasource__delayrenderdata)</ept> member function for delayed rendering.</source>
        </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve">
          <source>The default implementation of this function simply returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve">
          <source>Override this function to provide your data in the requested format and medium.</source>
        </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve">
          <source>Depending on your data, you might want to override one of the other versions of this function instead.</source>
        </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve">
          <source>If you want to handle multiple storage mediums, override <ph id="ph1">`OnRenderData`</ph>.</source>
        </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve">
          <source>If your data is in a file, or is of variable size, override <ph id="ph1">`OnRenderFileData`</ph>.</source>
        </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>FORMATETC<ept id="p1">**</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onrenderglobaldata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnRenderGlobalData</source>
        </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve data in the specified format when the specified storage medium is global memory.</source>
        </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>FORMATETC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682177)</ept> structure specifying the format in which information is requested.</source>
        </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve">
          <source>Points to a handle to global memory in which the data is to be returned.</source>
        </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve">
          <source>If no memory has been allocated, this parameter can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve">
          <source>The specified format is one previously placed in the control object using the <bpt id="p1">[</bpt>DelayRenderData<ept id="p1">](../../mfc/reference/coledatasource-class.md#coledatasource__delayrenderdata)</ept> member function for delayed rendering.</source>
        </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve">
          <source>The default implementation of this function simply returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`phGlobal`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, then a new <ph id="ph2">`HGLOBAL`</ph> should be allocated and returned in <ph id="ph3">`phGlobal`</ph>.</source>
        </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve">
          <source>Otherwise, the <ph id="ph1">`HGLOBAL`</ph> specified by <ph id="ph2">`phGlobal`</ph> should be filled with the data.</source>
        </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve">
          <source>The amount of data placed in the <ph id="ph1">`HGLOBAL`</ph> must not exceed the current size of the memory block.</source>
        </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve">
          <source>Also, the block cannot be reallocated to a larger size.</source>
        </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve">
          <source>Override this function to provide your data in the requested format and medium.</source>
        </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve">
          <source>Depending on your data, you may want to override one of the other versions of this function instead.</source>
        </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve">
          <source>If you want to handle multiple storage mediums, override <ph id="ph1">`OnRenderData`</ph>.</source>
        </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve">
          <source>If your data is in a file, or is of variable size, override <ph id="ph1">`OnRenderFileData`</ph>.</source>
        </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>FORMATETC<ept id="p1">**</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onresetstate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnResetState</source>
        </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve">
          <source>Called by the framework when the control's properties should be set to their default values.</source>
        </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve">
          <source>The default implementation calls <bpt id="p1">[</bpt>DoPropExchange<ept id="p1">](#colecontrol__dopropexchange)</ept>, passing a <ph id="ph1">`CPropExchange`</ph> object that causes properties to be set to their default values.</source>
        </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve">
          <source>The control writer can insert initialization code for the OLE control in this overridable.</source>
        </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve">
          <source>This function is called when <bpt id="p1">[</bpt>IPersistStream::Load<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680568)</ept> or <bpt id="p2">[</bpt>IPersistStorage::Load<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms680557)</ept> fails, or <bpt id="p3">[</bpt>IPersistStreamInit::InitNew<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms690234)</ept> or <bpt id="p4">[</bpt>IPersistStorage::InitNew<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/ms687194)</ept> is called, without first calling either <bpt id="p5">**</bpt>IPersistStream::Load<ept id="p5">**</ept> or <bpt id="p6">**</bpt>IPersistStorage::Load<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onsetclientsite"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnSetClientSite</source>
        </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve">
          <source>Called by the framework when the container has called the control's <bpt id="p1">**</bpt>IOleControl::SetClientSite<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`OnSetClientSite`</ph> checks whether data path properties are loaded and, if they are, calls <ph id="ph2">`DoDataPathPropExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve">
          <source>Override this function to do any special processing of this notification.</source>
        </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve">
          <source>In particular, overrides of this function should call the base class.</source>
        </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onsetdata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnSetData</source>
        </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve">
          <source>Called by the framework to replace the control's data with the specified data.</source>
        </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>FORMATETC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682177)</ept> structure specifying the format of the data.</source>
        </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>STGMEDIUM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683812)</ept> structure in which the data resides.</source>
        </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> if the control should free the storage medium; <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if the control should not free the storage medium.</source>
        </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve">
          <source>If the data is in the persistent property set format, the default implementation modifies the control's state accordingly.</source>
        </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve">
          <source>Otherwise, the default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRelease`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, then a call to <bpt id="p2">**</bpt>ReleaseStgMedium<ept id="p2">**</ept> is made; otherwise not.</source>
        </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve">
          <source>Override this function to replace the control's data with the specified data.</source>
        </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>FORMATETC<ept id="p1">**</ept> and <bpt id="p2">**</bpt>STGMEDIUM<ept id="p2">**</ept> structures in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onsetextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnSetExtent</source>
        </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve">
          <source>Called by the framework when the control's extent needs to be changed, as a result of a call to <bpt id="p1">[</bpt>IOleObject::SetExtent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms694330)</ept>.</source>
        </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">**</bpt>SIZEL<ept id="p1">**</ept> structure that uses long integers to represent the width and height of the control, expressed in <bpt id="p2">**</bpt>HIMETRIC<ept id="p2">**</ept> units.</source>
        </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve">
          <source>Nonzero if the size change was accepted; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve">
          <source>The default implementation handles the resizing of the control's extent.</source>
        </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve">
          <source>If the control is in-place active, a call to the container's <bpt id="p1">**</bpt>OnPosRectChanged<ept id="p1">**</ept> is then made.</source>
        </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve">
          <source>Override this function to alter the default resizing of your control.</source>
        </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onsetobjectrects"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnSetObjectRects</source>
        </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve">
          <source>Called by the framework to implement a call to <bpt id="p1">[</bpt>IOleInPlaceObject::SetObjectRects<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683767)</ept>.</source>
        </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpRectPos<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve">
          <source>A pointer to a RECT structure indicating the control's new position and size relative to the container.</source>
        </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`RECT`</ph> structure indicating a rectangular area to which the control is to be clipped.</source>
        </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve">
          <source>Nonzero if the repositioning was accepted; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve">
          <source>The default implementation automatically handles the repositioning and resizing of the control window and returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve">
          <source>Override this function to alter the default behavior of this function.</source>
        </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onshowtoolbars"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnShowToolBars</source>
        </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve">
          <source>Called by the framework when the control has been UI activated.</source>
        </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__ontextchanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnTextChanged</source>
        </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve">
          <source>Called by the framework when the stock Caption or Text property value has changed.</source>
        </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve">
          <source>The default implementation calls <ph id="ph1">`InvalidateControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve">
          <source>Override this function if you want notification after this property changes.</source>
        </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__onwindowlessmessage"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::OnWindowlessMessage</source>
        </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve">
          <source>Called by the framework in response to a container's <bpt id="p1">**</bpt>IOleInPlaceObjectWindowless::OnWindowMessage<ept id="p1">**</ept> request.</source>
        </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve">
          <source>Message identifier as passed by Windows.</source>
        </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve">
          <source>As passed by Windows.</source>
        </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve">
          <source>Specifies additional message-specific information.</source>
        </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve">
          <source>The contents of this parameter depend on the value of the <ph id="ph1">`msg`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve">
          <source>As passed by Windows.</source>
        </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve">
          <source>Specifies additional message-specific information.</source>
        </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve">
          <source>The contents of this parameter depend on the value of the <ph id="ph1">`msg`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>plResult<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve">
          <source>Windows result code.</source>
        </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve">
          <source>Specifies the result of the message processing and depends on the message sent.</source>
        </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve">
          <source>Processes window messages for windowless controls.</source>
        </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`COleControl`</ph>'s <ph id="ph2">`OnWindowlessMessage`</ph> should be used for window messages other than mouse messages and keyboard messages.</source>
        </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`COleControl`</ph> provides <bpt id="p1">[</bpt>SetCapture<ept id="p1">](#colecontrol__setcapture)</ept> and <bpt id="p2">[</bpt>SetFocus<ept id="p2">](#colecontrol__setfocus)</ept> specifically to get mouse capture and keyboard focus for windowless OLE objects.</source>
        </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve">
          <source>Because windowless objects do not have a window, they need a mechanism to let the container dispatch messages to them.</source>
        </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve">
          <source>A windowless OLE object gets messages from its container, through the <ph id="ph1">`OnWindowMessage`</ph> method on the <ph id="ph2">`IOleInPlaceObjectWindowless`</ph> interface (an extension of <bpt id="p1">[</bpt>IOleInPlaceObject<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692646)</ept> for windowless support).</source>
        </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OnWindowMessage`</ph> does not take an <ph id="ph2">`HWND`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__parenttoclient"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ParentToClient</source>
        </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve">
          <source>Translates the coordinates of <ph id="ph1">`pPoint`</ph> into client coordinates.</source>
        </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve">
          <source>Pointer to the bounds of the OLE control within the container.</source>
        </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve">
          <source>Not the client area but the area of the entire control including borders and scroll bars.</source>
        </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve">
          <source>Pointer to the parent (container) point to be translated into the coordinates of the client area of the control.</source>
        </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve">
          <source>Specifies whether or not hit testing is to be done on the point.</source>
        </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bHitTest`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, returns <bpt id="p2">**</bpt>HTNOWHERE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bHitTest`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, returns the location in which the parent (container) point landed in the client area of the OLE control and is one of the following mouse hit-test values:</source>
        </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTBORDER<ept id="p1">**</ept> In the border of a window that does not have a sizing border.</source>
        </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTBOTTOM<ept id="p1">**</ept> In the lower horizontal border of the window.</source>
        </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTBOTTOMLEFT<ept id="p1">**</ept> In the lower-left corner of the window border.</source>
        </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTBOTTOMRIGHT<ept id="p1">**</ept> In the lower-right corner of the window border.</source>
        </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTCAPTION<ept id="p1">**</ept> In a title-bar area.</source>
        </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTCLIENT<ept id="p1">**</ept> In a client area.</source>
        </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTERROR<ept id="p1">**</ept> On the screen background or on a dividing line between windows (same as <bpt id="p2">**</bpt>HTNOWHERE<ept id="p2">**</ept> except that the <bpt id="p3">**</bpt>DefWndProc<ept id="p3">**</ept> Windows function produces a system beep to indicate an error).</source>
        </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTGROWBOX<ept id="p1">**</ept> In a size box.</source>
        </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTHSCROLL<ept id="p1">**</ept> In the horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTLEFT<ept id="p1">**</ept> In the left border of the window.</source>
        </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTMAXBUTTON<ept id="p1">**</ept> In a Maximize button.</source>
        </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTMENU<ept id="p1">**</ept> In a menu area.</source>
        </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTMINBUTTON<ept id="p1">**</ept> In a Minimize button.</source>
        </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTNOWHERE<ept id="p1">**</ept> On the screen background or on a dividing line between windows.</source>
        </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTREDUCE<ept id="p1">**</ept> In a Minimize button.</source>
        </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTRIGHT<ept id="p1">**</ept> In the right border of the window.</source>
        </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTSIZE<ept id="p1">**</ept> In a size box (same as <bpt id="p2">**</bpt>HTGROWBOX<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTSYSMENU<ept id="p1">**</ept> In a Control menu or in a Close button in a child window.</source>
        </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTOP<ept id="p1">**</ept> In the upper horizontal border of the window.</source>
        </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTOPLEFT<ept id="p1">**</ept> In the upper-left corner of the window border.</source>
        </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTOPRIGHT<ept id="p1">**</ept> In the upper-right corner of the window border.</source>
        </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTRANSPARENT<ept id="p1">**</ept> In a window currently covered by another window.</source>
        </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTVSCROLL<ept id="p1">**</ept> In the vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTZOOM<ept id="p1">**</ept> In a Maximize button.</source>
        </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve">
          <source>On input <ph id="ph1">`pPoint`</ph> is relative to the origin of the parent (upper left corner of the container).</source>
        </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve">
          <source>On output <ph id="ph1">`pPoint`</ph> is relative to the origin of the client area of the OLE control (upper left corner of the client area of the control).</source>
        </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__postmodaldialog"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::PostModalDialog</source>
        </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve">
          <source>Notifies the container that a modal dialog box has been closed.</source>
        </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve">
          <source>Handle to the parent window of the modal dialog box.</source>
        </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve">
          <source>Call this function after displaying any modal dialog box.</source>
        </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve">
          <source>You must call this function so that the container can enable any top-level windows disabled by <ph id="ph1">`PreModalDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve">
          <source>This function should be paired with a call to <ph id="ph1">`PreModalDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__premodaldialog"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::PreModalDialog</source>
        </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve">
          <source>Notifies the container that a modal dialog box is about to be displayed.</source>
        </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve">
          <source>Handle to the parent window of the modal dialog box.</source>
        </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve">
          <source>Call this function before displaying any modal dialog box.</source>
        </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve">
          <source>You must call this function so that the container can disable all its top-level windows.</source>
        </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve">
          <source>After the modal dialog box has been displayed, you must then call <ph id="ph1">`PostModalDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__recreatecontrolwindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::RecreateControlWindow</source>
        </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve">
          <source>Destroys and re-creates the control's window.</source>
        </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve">
          <source>This may be necessary if you need to change the window's style bits.</source>
        </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__refresh"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::Refresh</source>
        </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve">
          <source>Forces a repaint of the OLE control.</source>
        </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve">
          <source>This function is supported by the <ph id="ph1">`COleControl`</ph> base class as a stock method, called Refresh.</source>
        </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve">
          <source>This allows users of your OLE control to repaint the control at a specific time.</source>
        </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve">
          <source>For more information on this method, see the article <bpt id="p1">[</bpt>ActiveX Controls: Methods<ept id="p1">](../../mfc/mfc-activex-controls-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__releasecapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ReleaseCapture</source>
        </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve">
          <source>Releases mouse capture.</source>
        </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve">
          <source>If the control currently has the mouse capture, the capture is released.</source>
        </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve">
          <source>Otherwise, this function has no effect.</source>
        </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__releasedc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ReleaseDC</source>
        </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve">
          <source>Releases the display device context of a container of a windowless control, freeing the device context for use by other applications.</source>
        </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve">
          <source>Identifies the container device context to be released.</source>
        </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve">
          <source>The application must call <ph id="ph1">`ReleaseDC`</ph> for each call to <bpt id="p1">[</bpt>GetDC<ept id="p1">](#colecontrol__getdc)</ept>.</source>
        </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__reparentcontrolwindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ReparentControlWindow</source>
        </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve">
          <source>Sets the parent of the control.</source>
        </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>hWndOuter<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve">
          <source>The handle of the control window.</source>
        </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve">
          <source>The handle of the new parent window.</source>
        </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve">
          <source>Call this function to reset the parent of the control window.</source>
        </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__resetstockprops"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ResetStockProps</source>
        </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve">
          <source>Initializes the state of the <ph id="ph1">`COleControl`</ph> stock properties to their default values.</source>
        </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve">
          <source>The properties are: Appearance, BackColor, BorderStyle, Caption, Enabled, Font, ForeColor, hWnd, and Text.</source>
        </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve">
          <source>For a description of stock properties, see <bpt id="p1">[</bpt>ActiveX Controls: Adding Stock Properties<ept id="p1">](../../mfc/mfc-activex-controls-adding-stock-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve">
          <source>You can improve a control's binary initialization performance by using <ph id="ph1">`ResetStockProps`</ph> and <ph id="ph2">`ResetVersion`</ph> to override <ph id="ph3">`COleControl::OnResetState`</ph>.</source>
        </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve">
          <source>See the example below.</source>
        </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve">
          <source>For further information on optimizing initialization, see <bpt id="p1">[</bpt>ActiveX Controls: Optimization<ept id="p1">](../../mfc/mfc-activex-controls-optimization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAxCtl#7<ept id="p2">](../../mfc/reference/codesnippet/cpp/colecontrol-class_8.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__resetversion"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ResetVersion</source>
        </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve">
          <source>Initializes the version number to specified value.</source>
        </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve">
          <source>The version number to be assigned to the control.</source>
        </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve">
          <source>You can improve a control's binary initialization performance by using <ph id="ph1">`ResetVersion`</ph> and <ph id="ph2">`ResetStockProps`</ph> to override <ph id="ph3">`COleControl::OnResetState`</ph>.</source>
        </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve">
          <source>See the example at <bpt id="p1">[</bpt>ResetStockProps<ept id="p1">](#colecontrol__resetstockprops)</ept>.</source>
        </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve">
          <source>For further information on optimizing initialization, see <bpt id="p1">[</bpt>ActiveX Controls: Optimization<ept id="p1">](../../mfc/mfc-activex-controls-optimization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__scrollwindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ScrollWindow</source>
        </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve">
          <source>Allows a windowless OLE object to scroll an area within its in-place active image on the screen.</source>
        </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve">
          <source>Specifies the amount, in device units, of horizontal scrolling.</source>
        </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve">
          <source>This parameter must be a negative value to scroll to the left.</source>
        </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve">
          <source>Specifies the amount, in device units, of vertical scrolling.</source>
        </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve">
          <source>This parameter must be a negative value to scroll upward.</source>
        </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or RECT structure that specifies the portion of the OLE object's client area to scroll, in client coordinates of the containing window.</source>
        </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpRect`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the entire OLE object's client area is scrolled.</source>
        </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CRect`</ph> object or <ph id="ph2">`RECT`</ph> structure that specifies the rectangle to clip to.</source>
        </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve">
          <source>Only pixels inside the rectangle are scrolled.</source>
        </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve">
          <source>Bits outside the rectangle are not affected even if they are in the <ph id="ph1">`lpRect`</ph> rectangle.</source>
        </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpClipRect`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, no clipping is performed on the scroll rectangle.</source>
        </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__selectfontobject"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SelectFontObject</source>
        </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve">
          <source>Selects a font into a device context.</source>
        </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve">
          <source>Pointer to a device context object.</source>
        </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve">
          <source>Reference to the <bpt id="p1">[</bpt>CFontHolder<ept id="p1">](../../mfc/reference/cfontholder-class.md)</ept> object representing the font to be selected.</source>
        </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve">
          <source>A pointer to the previously selected font.</source>
        </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve">
          <source>When the caller has finished all drawing operations that use <bpt id="p1">*</bpt>fontHolder,<ept id="p1">*</ept> it should reselect the previously selected font by passing it as a parameter to <bpt id="p2">[</bpt>CDC::SelectObject<ept id="p2">](../../mfc/reference/cdc-class.md#cdc__selectobject)</ept>.</source>
        </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__selectstockfont"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SelectStockFont</source>
        </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve">
          <source>Selects the stock Font property into a device context.</source>
        </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve">
          <source>The device context into which the font will be selected.</source>
        </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve">
          <source>A pointer to the previously selected <ph id="ph1">`CFont`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve">
          <source>You should use <bpt id="p1">[</bpt>CDC::SelectObject<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__selectobject)</ept> to select this font back into the device context when you are finished.</source>
        </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__serializeextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SerializeExtent</source>
        </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve">
          <source>Serializes or initializes the state of the display space allotted to the control.</source>
        </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CArchive`</ph> object to serialize to or from.</source>
        </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve">
          <source>You can improve a control's binary persistence performance by using <ph id="ph1">`SerializeExtent`</ph>, <ph id="ph2">`SerializeStockProps`</ph>, and <ph id="ph3">`SerializeVersion`</ph> to override <bpt id="p1">**</bpt>COleControl::Serialize<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve">
          <source>See the example below.</source>
        </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve">
          <source>For further information on optimizing initialization, see <bpt id="p1">[</bpt>ActiveX Controls: Optimization<ept id="p1">](../../mfc/mfc-activex-controls-optimization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCAxCtl#8<ept id="p2">](../../mfc/reference/codesnippet/cpp/colecontrol-class_9.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__serializestockprops"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SerializeStockProps</source>
        </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve">
          <source>Serializes or initializes the state of the <ph id="ph1">`COleControl`</ph> stock properties: Appearance, BackColor, BorderStyle, Caption, Enabled, Font, ForeColor, and Text.</source>
        </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CArchive`</ph> object to serialize to or from.</source>
        </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve">
          <source>For a description of stock properties, see <bpt id="p1">[</bpt>ActiveX Controls: Adding Stock Properties<ept id="p1">](../../mfc/mfc-activex-controls-adding-stock-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve">
          <source>You can improve a control's binary persistence performance by using <ph id="ph1">`SerializeStockProps`</ph>, <ph id="ph2">`SerializeExtent`</ph>, and <ph id="ph3">`SerializeVersion`</ph> to override <bpt id="p1">**</bpt>COleControl::Serialize<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve">
          <source>For an example, see the code at <bpt id="p1">[</bpt>SerializeExtent<ept id="p1">](#colecontrol__serializeextent)</ept>.</source>
        </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve">
          <source>For further information on optimizing initialization, see <bpt id="p1">[</bpt>ActiveX Controls: Optimization<ept id="p1">](../../mfc/mfc-activex-controls-optimization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__serializeversion"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SerializeVersion</source>
        </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve">
          <source>Serializes or initializes the state of a control's version information.</source>
        </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CArchive`</ph> object to serialize to or from.</source>
        </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve">
          <source>The current version number of the control.</source>
        </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve">
          <source>Indicates whether persistent data should be converted to the latest format when it is saved, or maintained in the same format it had when it was loaded.</source>
        </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve">
          <source>The version number of the control.</source>
        </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve">
          <source>If the specified archive is loading, <ph id="ph1">`SerializeVersion`</ph> returns the version loaded from that archive.</source>
        </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns the currently loaded version.</source>
        </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve">
          <source>You can improve a control's binary persistence performance by using <ph id="ph1">`SerializeVersion`</ph>, <ph id="ph2">`SerializeExtent`</ph>, and <ph id="ph3">`SerializeStockProps`</ph> to override <bpt id="p1">**</bpt>COleControl::Serialize<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve">
          <source>For an example, see the code at <bpt id="p1">[</bpt>SerializeExtent<ept id="p1">](#colecontrol__serializeextent)</ept>.</source>
        </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve">
          <source>For further information on optimizing initialization, see <bpt id="p1">[</bpt>ActiveX Controls: Optimization<ept id="p1">](../../mfc/mfc-activex-controls-optimization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setappearance"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetAppearance</source>
        </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve">
          <source>Sets the stock Appearance property value of your control.</source>
        </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>sAppearance<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>short<ept id="p1">**</ept> ( <ph id="ph1">`VT_I2`</ph>) value to be used for the appearance of your control.</source>
        </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve">
          <source>A value of zero sets the control's appearance to flat and a value of 1 sets the control's appearance to 3D.</source>
        </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve">
          <source>For more about stock properties, see <bpt id="p1">[</bpt>ActiveX Controls: Properties<ept id="p1">](../../mfc/mfc-activex-controls-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setbackcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetBackColor</source>
        </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve">
          <source>Sets the stock BackColor property value of your control.</source>
        </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dwBackColor<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>OLE_COLOR<ept id="p1">**</ept> value to be used for background drawing of your control.</source>
        </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve">
          <source>For more information on using this property and other related properties, see the article <bpt id="p1">[</bpt>ActiveX Controls: Properties<ept id="p1">](../../mfc/mfc-activex-controls-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setborderstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetBorderStyle</source>
        </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve">
          <source>Sets the stock BorderStyle property value of your control.</source>
        </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>sBorderStyle<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve">
          <source>The new border style for the control; 0 indicates no border and 1 indicates a normal border.</source>
        </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve">
          <source>The control window will then be re-created and <ph id="ph1">`OnBorderStyleChanged`</ph> called.</source>
        </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setcapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetCapture</source>
        </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve">
          <source>Causes the control's container window to take possession of the mouse capture on the control's behalf.</source>
        </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">**</bpt>CWnd<ept id="p1">**</ept> window object that previously received mouse input.</source>
        </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve">
          <source>If the control is activated and windowless, this function causes the control's container window to take possession of the mouse capture, on the control's behalf.</source>
        </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve">
          <source>Otherwise, this function causes the control itself to take possession of the mouse capture (same as <ph id="ph1">`CWnd::SetCapture`</ph>).</source>
        </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setcontrolsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetControlSize</source>
        </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve">
          <source>Sets the size of the OLE control window and notifies the container that the control site is changing.</source>
        </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve">
          <source>Specifies the new width of the control in pixels.</source>
        </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve">
          <source>Specifies the new height of the control in pixels.</source>
        </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve">
          <source>Nonzero if the call was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve">
          <source>This function should not be used in your control's constructor.</source>
        </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve">
          <source>Note that all coordinates for control windows are relative to the upper-left corner of the control.</source>
        </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setenabled"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetEnabled</source>
        </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve">
          <source>Sets the stock Enabled property value of your control.</source>
        </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> if the control is to be enabled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve">
          <source>After setting this property, <bpt id="p1">**</bpt>OnEnabledChange<ept id="p1">**</ept> is called.</source>
        </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setfocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetFocus</source>
        </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve">
          <source>Causes the control's container window to take possession of the input focus on the control's behalf.</source>
        </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">**</bpt>CWnd<ept id="p1">**</ept> window object that previously had the input focus, or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if there is no such window.</source>
        </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve">
          <source>If the control is activated and windowless, this function causes the control's container window to take possession of the input focus, on the control's behalf.</source>
        </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve">
          <source>The input focus directs keyboard input to the container's window, and the container dispatches all subsequent keyboard messages to the OLE object that calls <ph id="ph1">`SetFocus`</ph>.</source>
        </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve">
          <source>Any window that previously had the input focus loses it.</source>
        </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve">
          <source>If the control is not windowless, this function causes the control itself to take possession of the input focus (same as <ph id="ph1">`CWnd::SetFocus`</ph>).</source>
        </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setfont"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetFont</source>
        </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve">
          <source>Sets the stock Font property of your control.</source>
        </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pFontDisp<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve">
          <source>A pointer to a Font dispatch interface.</source>
        </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setforecolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetForeColor</source>
        </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve">
          <source>Sets the stock ForeColor property value of your control.</source>
        </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dwForeColor<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>OLE_COLOR<ept id="p1">**</ept> value to be used for foreground drawing of your control.</source>
        </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve">
          <source>For more information on using this property and other related properties, see the article <bpt id="p1">[</bpt>ActiveX Controls: Properties<ept id="p1">](../../mfc/mfc-activex-controls-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setinitialdataformats"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetInitialDataFormats</source>
        </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve">
          <source>Called by the framework to initialize the list of data formats supported by the control.</source>
        </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve">
          <source>The default implementation specifies two formats: <ph id="ph1">`CF_METAFILEPICT`</ph> and the persistent property set.</source>
        </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setinitialsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetInitialSize</source>
        </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve">
          <source>Sets the size of an OLE control when first displayed in a container.</source>
        </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve">
          <source>The initial width of the OLE control in pixels.</source>
        </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve">
          <source>The initial height of the OLE control in pixels.</source>
        </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve">
          <source>Call this function in your constructor to set the initial size of your control.</source>
        </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve">
          <source>The initial size is measured in device units, or pixels.</source>
        </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve">
          <source>It is recommended that this call be made in your control's constructor.</source>
        </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setmodifiedflag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetModifiedFlag</source>
        </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve">
          <source>Changes the modified state of a control.</source>
        </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve">
          <source>The new value for the control's modified flag.</source>
        </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> indicates that the control's state has been modified; <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> indicates that the control's state has just been saved.</source>
        </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve">
          <source>Call this function whenever a change occurs that would affect your control's persistent state.</source>
        </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve">
          <source>For example, if the value of a persistent property changes, call this function with <ph id="ph1">`bModified`</ph><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setnotpermitted"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetNotPermitted</source>
        </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve">
          <source>Indicates that an edit request has failed.</source>
        </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve">
          <source>Call this function when <ph id="ph1">`BoundPropertyRequestEdit`</ph> fails.</source>
        </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve">
          <source>This function throws an exception of type <bpt id="p1">**</bpt>COleDispScodeException<ept id="p1">**</ept> to indicate that the set operation was not permitted.</source>
        </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setnotsupported"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetNotSupported</source>
        </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve">
          <source>Prevents modification to a control's property value by the user.</source>
        </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve">
          <source>Call this function in place of the Set function of any property where modification of the property value by the control's user is not supported.</source>
        </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve">
          <source>One example would be a property that is read only.</source>
        </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__setrectincontainer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetRectInContainer</source>
        </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve">
          <source>Sets the coordinates of the control's rectangle relative to the container, expressed in device units.</source>
        </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve">
          <source>A pointer to a rectangle containing the control's new coordinates relative to the container.</source>
        </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve">
          <source>Nonzero if the call was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve">
          <source>If the control is open, it is resized; otherwise the container's <bpt id="p1">**</bpt>OnPosRectChanged<ept id="p1">**</ept> function is called.</source>
        </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__settext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::SetText</source>
        </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve">
          <source>Sets the value of your control's stock Caption or Text property.</source>
        </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve">
          <source>A pointer to a character string.</source>
        </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve">
          <source>Note that the stock Caption and Text properties are both mapped to the same value.</source>
        </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve">
          <source>This means that any changes made to either property will automatically change both properties.</source>
        </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve">
          <source>In general, a control should support either the stock Caption or Text property, but not both.</source>
        </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__throwerror"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::ThrowError</source>
        </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve">
          <source>Signals the occurrence of an error in your control.</source>
        </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve">
          <source>The status code value to be reported.</source>
        </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve">
          <source>For a complete list of possible codes, see the article <bpt id="p1">[</bpt>ActiveX Controls: Advanced Topics<ept id="p1">](../../mfc/mfc-activex-controls-advanced-topics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve">
          <source>The string resource ID of the exception to be reported.</source>
        </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve">
          <source>The help ID of the topic to be reported on.</source>
        </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve">
          <source>A string containing an explanation of the exception to be reported.</source>
        </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve">
          <source>This function should only be called from within a Get or Set function for an OLE property, or the implementation of an OLE automation method.</source>
        </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve">
          <source>If you need to signal errors that occur at other times, you should fire the stock Error event.</source>
        </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__transformcoords"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::TransformCoords</source>
        </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve">
          <source>Transforms coordinate values between <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> units and the container's native units.</source>
        </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpptlHimetric<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>POINTL<ept id="p1">**</ept> structure containing coordinates in <bpt id="p2">**</bpt>HIMETRIC<ept id="p2">**</ept> units.</source>
        </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpptfContainer<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>POINTF<ept id="p1">**</ept> structure containing coordinates in the container's unit size.</source>
        </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve">
          <source>A combination of the following values:</source>
        </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>XFORMCOORDS_POSITION<ept id="p1">**</ept> A position in the container.</source>
        </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>XFORMCOORDS_SIZE<ept id="p1">**</ept> A size in the container.</source>
        </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>XFORMCOORDS_HIMETRICTOCONTAINER<ept id="p1">**</ept> Transform <bpt id="p2">**</bpt>HIMETRIC<ept id="p2">**</ept> units to the container's units.</source>
        </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>XFORMCOORDS_CONTAINERTOHIMETRIC<ept id="p1">**</ept> Transform the container's units to <bpt id="p2">**</bpt>HIMETRIC<ept id="p2">**</ept> units.</source>
        </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve">
          <source>The first two flags, <bpt id="p1">**</bpt>XFORMCOORDS_POSITION<ept id="p1">**</ept> and <bpt id="p2">**</bpt>XFORMCOORDS_SIZE<ept id="p2">**</ept>, indicate whether the coordinates should be treated as a position or a size.</source>
        </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve">
          <source>The remaining two flags indicate the direction of transformation.</source>
        </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__translatecolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::TranslateColor</source>
        </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve">
          <source>Converts a color value from the <bpt id="p1">**</bpt>OLE_COLOR<ept id="p1">**</ept> data type to the <bpt id="p2">[</bpt>COLORREF<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> data type.</source>
        </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>OLE_COLOR<ept id="p1">**</ept> data type.</source>
        </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve">
          <source>For more information, see the Windows <bpt id="p1">[</bpt>OleTranslateColor<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms694353)</ept> function.</source>
        </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve">
          <source>A handle to an optional palette; can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve">
          <source>An RGB (red, green, blue) 32-bit color value that defines the solid color closest to the <ph id="ph1">`clrColor`</ph> value that the device can represent.</source>
        </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve">
          <source>This function is useful to translate the stock ForeColor and BackColor properties to <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> types used by <bpt id="p2">[</bpt>CDC<ept id="p2">](../../mfc/reference/cdc-class.md)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__willambientsbevalidduringload"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::WillAmbientsBeValidDuringLoad</source>
        </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve">
          <source>Determines whether your control should use the values of ambient properties as default values, when it is subsequently loaded from its persistent state.</source>
        </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve">
          <source>Nonzero indicates that ambient properties will be valid; otherwise ambient properties will not be valid.</source>
        </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve">
          <source>In some containers, your control may not have access to its ambient properties during the initial call to the override of <ph id="ph1">`COleControl::DoPropExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve">
          <source>This is the case if the container calls <bpt id="p1">[</bpt>IPersistStreamInit::Load<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680730)</ept> or <bpt id="p2">[</bpt>IPersistStorage::Load<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms680557)</ept> prior to calling <bpt id="p3">[</bpt>IOleObject::SetClientSite<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms684013)</ept> (that is, if it does not honor the <bpt id="p4">**</bpt>OLEMISC_SETCLIENTSITEFIRST<ept id="p4">**</ept> status bit).</source>
        </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colecontrol__windowproc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleControl::WindowProc</source>
        </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve">
          <source>Provides a Windows procedure for a <ph id="ph1">`COleControl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve">
          <source>Specifies the Windows message to be processed.</source>
        </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve">
          <source>Provides additional information used in processing the message.</source>
        </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve">
          <source>The parameter value depends on the message.</source>
        </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve">
          <source>Provides additional information used in processing the message.</source>
        </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve">
          <source>The parameter value depends on the message.</source>
        </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve">
          <source>The return value of the message dispatched.</source>
        </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve">
          <source>Call this function to dispatch specific messages through the control's message map.</source>
        </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFC Sample CIRC3<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MFC Sample TESTHELP<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>COlePropertyPage Class<ept id="p1">](../../mfc/reference/colepropertypage-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWnd Class<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CFontHolder Class<ept id="p1">](../../mfc/reference/cfontholder-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CPictureHolder Class<ept id="p1">](../../mfc/reference/cpictureholder-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>