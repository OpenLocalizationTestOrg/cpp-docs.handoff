<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">699f51a51006c08deb2dce01fd667a3a2211e0e2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cbasepane-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc86acdec5e961b4b05002ab21901685918a28c9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d99800c68dbb2e378c41353fde24f90944a7c884</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CBasePane Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CBasePane Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Base class for all panes in MFC.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Default constructor.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Destructor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the child element or child object at a given point on the screen.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::accHitTest<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__acchittest)</ept>.)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the current screen location for the specified object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::accLocation<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__acclocation)</ept>.)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::AccNotifyObjectFocusEvent<ept id="p1">](#cbasepane__accnotifyobjectfocusevent)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBasePane`</ph> does not use this method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Called by the framework to modify the selection or move the keyboard focus of the specified object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::accSelect<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__accselect)</ept>.)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::AddPane<ept id="p1">](#cbasepane__addpane)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Adds a pane to the docking manager.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::AdjustDockingLayout<ept id="p1">](#cbasepane__adjustdockinglayout)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Redirects a call to the docking manager to adjust the docking layout.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::AdjustLayout<ept id="p1">](#cbasepane__adjustlayout)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Called by the framework when the pane should adjust its internal layout.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CalcFixedLayout<ept id="p1">](#cbasepane__calcfixedlayout)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Calculates the horizontal size of a control bar.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CanAcceptPane<ept id="p1">](#cbasepane__canacceptpane)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Determines whether another pane can be docked to the pane.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CanAutoHide<ept id="p1">](#cbasepane__canautohide)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Determines whether the pane supports auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CanBeAttached<ept id="p1">](#cbasepane__canbeattached)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can be docked to another pane.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CanBeClosed<ept id="p1">](#cbasepane__canbeclosed)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can be closed.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CanBeDocked<ept id="p1">](#cbasepane__canbedocked)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can be docked to another pane.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CanBeResized<ept id="p1">](#cbasepane__canberesized)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can be resized.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CanBeTabbedDocument<ept id="p1">](#cbasepane__canbetabbeddocument)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane can be converted to an MDI tabbed document.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CanFloat<ept id="p1">](#cbasepane__canfloat)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can float.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CanFocus<ept id="p1">](#cbasepane__canfocus)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane can receive focus.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CopyState<ept id="p1">](#cbasepane__copystate)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Copies the state of a given pane.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CreateDefaultMiniframe<ept id="p1">](#cbasepane__createdefaultminiframe)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the pane can float, creates a mini-frame window.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::CreateEx<ept id="p1">](#cbasepane__createex)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Creates the pane control.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::DockPane<ept id="p1">](#cbasepane__dockpane)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Docks a pane to another pane or to a frame window.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::DockPaneUsingRTTI<ept id="p1">](#cbasepane__dockpaneusingrtti)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Docks the pane by using run-time type information.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::DockToFrameWindow<ept id="p1">](#cbasepane__docktoframewindow)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Docks a dockable pane to a frame.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::DoesAllowDynInsertBefore<ept id="p1">](#cbasepane__doesallowdyninsertbefore)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Determines whether another pane can be dynamically inserted between this pane and the parent frame.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::EnableDocking<ept id="p1">](#cbasepane__enabledocking)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Enables docking of the pane to the main frame.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::EnableGripper<ept id="p1">](#cbasepane__enablegripper)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Enables or disables the gripper.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the gripper is enabled, the user can drag it to reposition the pane.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::FloatPane<ept id="p1">](#cbasepane__floatpane)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Floats the pane.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the address of an <ph id="ph1">`IDispatch`</ph> interface for the specified child.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accChild<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_accchild)</ept>.)</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the number of children that belong to this object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accChildCount<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_accchildcount)</ept>.)</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve a string that describes the default action for the object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accDefaultAction<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_accdefaultaction)</ept>.)</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Called by framework to retrieve a string that describes the visual appearance of the specified object.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accDescription<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_accdescription)</ept>.)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the object that has the keyboard focus.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accFocus<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_accfocus)</ept>.)</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve a  Help property string for the object.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accHelp<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_acchelp)</ept>.)</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::get_accHelpTopic<ept id="p1">](#cbasepane__get_acchelptopic)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the full path of the WinHelp file that is associated with the specified object and the identifier of the appropriate topic in that file.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accHelpTopic<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_acchelptopic)</ept>.)</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the specified shortcut key for the object.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accKeyboardShortcut<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_acckeyboardshortcut)</ept>.)</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the name of the specified object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accName<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_accname)</ept>.)</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the <ph id="ph1">`IDispatch`</ph> interface for the parent of the object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accParent<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_accparent)</ept>.)</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve information that describes the role of the specified object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accRole<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_accrole)</ept>.)</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::get_accSelection<ept id="p1">](#cbasepane__get_accselection)</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the selected children of this object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accSelection<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_accselection)</ept>.)</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the current state of the specified object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accState<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_accstate)</ept>.)</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the value of the specified object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::get_accValue<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__get_accvalue)</ept>.)</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetCaptionHeight<ept id="p1">](#cbasepane__getcaptionheight)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Returns the caption height.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetControlBarStyle<ept id="p1">](#cbasepane__getcontrolbarstyle)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Returns the control bar style.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetCurrentAlignment<ept id="p1">](#cbasepane__getcurrentalignment)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Returns the current pane alignment.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetDockingMode<ept id="p1">](#cbasepane__getdockingmode)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Returns the current docking mode for the pane.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetDockSiteFrameWnd<ept id="p1">](#cbasepane__getdocksiteframewnd)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the window that is the dock site for the pane.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetEnabledAlignment<ept id="p1">](#cbasepane__getenabledalignment)</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Returns the CBRS_ALIGN_ styles that are applied to the pane.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetMFCStyle<ept id="p1">](#cbasepane__getmfcstyle)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns the pane styles specific to MFC.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetPaneIcon<ept id="p1">](#cbasepane__getpaneicon)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Returns a handle to the pane icon.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetPaneRow<ept id="p1">](#cbasepane__getpanerow)</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">[</bpt>CDockingPanesRow<ept id="p1">](../../mfc/reference/cdockingpanesrow-class.md)</ept>object where the pane is docked.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetPaneStyle<ept id="p1">](#cbasepane__getpanestyle)</ept></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns the pane style.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetParentDockSite<ept id="p1">](#cbasepane__getparentdocksite)</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the parent dock site.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetParentMiniFrame<ept id="p1">](#cbasepane__getparentminiframe)</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the parent mini-frame window.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetParentTabbedPane<ept id="p1">](#cbasepane__getparenttabbedpane)</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the parent tabbed pane.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetParentTabWnd<ept id="p1">](#cbasepane__getparenttabwnd)</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the parent window that is inside a tab.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::GetRecentVisibleState<ept id="p1">](#cbasepane__getrecentvisiblestate)</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a pane is restored from an archive.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::HideInPrintPreviewMode<ept id="p1">](#cbasepane__hideinprintpreviewmode)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane is hidden in print preview.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::InsertPane<ept id="p1">](#cbasepane__insertpane)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Registers the specified pane with the docking manager.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsAccessibilityCompatible<ept id="p1">](#cbasepane__isaccessibilitycompatible)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane supports Active Accessibility.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsAutoHideMode<ept id="p1">](#cbasepane__isautohidemode)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Determines whether a pane is in auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsDialogControl<ept id="p1">](#cbasepane__isdialogcontrol)</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane is a dialog control.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsDocked<ept id="p1">](#cbasepane__isdocked)</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Determines whether the pane is docked.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsFloating<ept id="p1">](#cbasepane__isfloating)</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Determines whether the pane is floating.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsHorizontal<ept id="p1">](#cbasepane__ishorizontal)</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Determines whether the pane is docked horizontally.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsInFloatingMultiPaneFrameWnd<ept id="p1">](#cbasepane__isinfloatingmultipaneframewnd)</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane is in a multi-pane frame window.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsMDITabbed<ept id="p1">](#cbasepane__ismditabbed)</ept></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Determines whether the pane has been added to an MDI child window as a tabbed document.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsPaneVisible<ept id="p1">](#cbasepane__ispanevisible)</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Specifies whether the <ph id="ph1">`WS_VISIBLE`</ph> flag is set for the pane.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsPointNearDockSite<ept id="p1">](#cbasepane__ispointneardocksite)</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Determines whether a specified point is near the dock site.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsResizable<ept id="p1">](#cbasepane__isresizable)</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can be resized.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsRestoredFromRegistry<ept id="p1">](#cbasepane__isrestoredfromregistry)</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Determines whether the pane is restored from the registry.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsTabbed<ept id="p1">](#cbasepane__istabbed)</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Determines whether the pane has been inserted in the tab control of a tabbed window.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::IsVisible<ept id="p1">](#cbasepane__isvisible)</ept></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Determines whether the pane is visible.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::LoadState<ept id="p1">](#cbasepane__loadstate)</ept></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Loads the pane state from the registry.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::MoveWindow<ept id="p1">](#cbasepane__movewindow)</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Moves the pane.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::OnAfterChangeParent<ept id="p1">](#cbasepane__onafterchangeparent)</ept></source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Called by the framework when the pane's parent has been changed.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::OnBeforeChangeParent<ept id="p1">](#cbasepane__onbeforechangeparent)</ept></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Called by the framework just before the pane changes its parent window.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::OnDrawCaption<ept id="p1">](#cbasepane__ondrawcaption)</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the caption is drawn.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::OnMovePaneDivider<ept id="p1">](#cbasepane__onmovepanedivider)</ept></source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>This method is currently not used.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::OnPaneContextMenu<ept id="p1">](#cbasepane__onpanecontextmenu)</ept></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Called by the framework when it builds a menu that has a list of panes.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::OnRemoveFromMiniFrame<ept id="p1">](#cbasepane__onremovefromminiframe)</ept></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Called by the framework when a pane is removed from its parent mini frame window.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::OnSetAccData<ept id="p1">](#cbasepane__onsetaccdata)</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBasePane`</ph> does not use this method.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::PaneFromPoint<ept id="p1">](#cbasepane__panefrompoint)</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Returns the pane that contains the given point.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Used by class <bpt id="p1">[</bpt>CWinApp<ept id="p1">](../../mfc/reference/cwinapp-class.md)</ept> to translate window messages before they are dispatched to the <bpt id="p2">[</bpt>TranslateMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id="p3">[</bpt>DispatchMessage<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> Windows functions.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWnd::PreTranslateMessage<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__pretranslatemessage)</ept>.)</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::RecalcLayout<ept id="p1">](#cbasepane__recalclayout)</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBasePane`</ph> does not use this method.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::RemovePaneFromDockManager<ept id="p1">](#cbasepane__removepanefromdockmanager)</ept></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Unregisters a pane and removes it from the list in the docking manager.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::SaveState<ept id="p1">](#cbasepane__savestate)</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Saves the pane's state to the registry.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::SelectDefaultFont<ept id="p1">](#cbasepane__selectdefaultfont)</ept></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Selects the default font for a given device context.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Reads or writes this object from or to an archive.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CObject::Serialize<ept id="p1">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept>.)</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::SetControlBarStyle<ept id="p1">](#cbasepane__setcontrolbarstyle)</ept></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Sets the control bar style.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::SetDockingMode<ept id="p1">](#cbasepane__setdockingmode)</ept></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Sets the docking mode for the pane.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::SetPaneAlignment<ept id="p1">](#cbasepane__setpanealignment)</ept></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Sets the alignment for the pane.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::SetPaneStyle<ept id="p1">](#cbasepane__setpanestyle)</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Sets the style of the pane.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::SetWindowPos<ept id="p1">](#cbasepane__setwindowpos)</ept></source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Changes the size, position, and Z-order of a pane.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::ShowPane<ept id="p1">](#cbasepane__showpane)</ept></source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Shows or hides the pane.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::StretchPane<ept id="p1">](#cbasepane__stretchpane)</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Stretches a pane vertically or horizontally.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::UndockPane<ept id="p1">](#cbasepane__undockpane)</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Removes the pane from the dock site, default slider, or mini-frame window where it is currently docked.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane::DoPaint<ept id="p1">](#cbasepane__dopaint)</ept></source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Fills the background of the pane.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>If you want to create a pane class that supports the extended docking features available in MFC, you must derive it from <ph id="ph1">`CBasePane`</ph> or from <bpt id="p1">[</bpt>CPane Class<ept id="p1">](../../mfc/reference/cpane-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Customization Tips</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The following customization tips pertain to the <bpt id="p1">[</bpt>CBasePane Class<ept id="p1">](../../mfc/reference/cbasepane-class.md)</ept> and any classes that inherit from it:</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>When you create a pane, you can apply several new styles:</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AFX_CBRS_FLOAT`</ph> makes the pane float.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AFX_CBRS_AUTOHIDE`</ph> enables auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AFX_CBRS_CLOSE`</ph> enables the pane to be closed (hidden).</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>These are flags that you can combine with a bitwise-OR operation.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBasePane`</ph> implements the following virtual Boolean methods to reflect these flags: <bpt id="p1">[</bpt>CBasePane::CanBeClosed<ept id="p1">](#cbasepane__canbeclosed)</ept>, <bpt id="p2">[</bpt>CBasePane::CanAutoHide<ept id="p2">](#cbasepane__canautohide)</ept>, <bpt id="p3">[</bpt>CBasePane::CanFloat<ept id="p3">](#cbasepane__canfloat)</ept>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>You can override them in derived classes to customize their behavior.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>You can customize docking behavior by overriding <bpt id="p1">[</bpt>CBasePane::CanAcceptPane<ept id="p1">](#cbasepane__canacceptpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Have your pane return <ph id="ph1">`FALSE`</ph> from this method to prevent another pane from docking to it.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>If you want to create a static pane that cannot float and that prevents any other pane from docking before it (similar to the Outlook bar in the OutlookDemo example), create it as non-floating and override <bpt id="p1">[</bpt>CBasePane::DoesAllowDynInsertBefore<ept id="p1">](#cbasepane__doesallowdyninsertbefore)</ept> to return <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`FALSE`</ph> if the pane is created without the <ph id="ph2">`AFX_CBRS_FLOAT`</ph> style.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Create all panes with IDs other than -1.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>To determine pane visibility, use <bpt id="p1">[</bpt>CBasePane::IsVisible<ept id="p1">](#cbasepane__isvisible)</ept>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>It correctly handles the visibility state in tabbed and auto-hide modes.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>If you want to create a non-floating resizable pane, create it without the <ph id="ph1">`AFX_CBRS_FLOAT`</ph> style and call <bpt id="p1">[</bpt>CFrameWnd::DockControlBar<ept id="p1">](../../mfc/reference/cframewnd-class.md#cframewnd__dockcontrolbar)</ept>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>To exclude a pane from a docking layout or to remove a toolbar from its dock bar, call <bpt id="p1">[</bpt>CBasePane::UndockPane<ept id="p1">](#cbasepane__undockpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Do not call this method for panes in auto-hide mode or for panes that reside in tabs of tabbed windows.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>If you want to float or undock a pane that is in auto-hide mode, you must call <bpt id="p1">[</bpt>CDockablePane::SetAutoHideMode<ept id="p1">](../../mfc/reference/cdockablepane-class.md#cdockablepane__setautohidemode)</ept> with <ph id="ph1">`FALSE`</ph> as the first argument before you call <bpt id="p2">[</bpt>CBasePane::FloatPane<ept id="p2">](#cbasepane__floatpane)</ept> or <bpt id="p3">[</bpt>CBasePane::UndockPane<ept id="p3">](#cbasepane__undockpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use various methods in the <ph id="ph1">`CBasePane`</ph> class.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The example demonstrates how to retrieve a pane from the <ph id="ph1">`CFrameWndEx`</ph> class and how to set the docking mode, the pane alignment, and the pane style.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The code is from the <bpt id="p1">[</bpt>Word Pad sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_WordPad#2<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbasepane-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane<ept id="p1">](../../mfc/reference/cbasepane-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxbasepane.h</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__accnotifyobjectfocusevent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::AccNotifyObjectFocusEvent</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBasePane`</ph> does not use this method.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`int`</ph></source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__addpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::AddPane</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Adds a pane to the docking manager.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pBar`</ph></source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>A pointer to a pane to add.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>This is a convenience method that adds a pane to a docking manager.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>By using this method, you do not have to write code that analyzes the type of the parent frame.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDockingManager Class<ept id="p1">](../../mfc/reference/cdockingmanager-class.md)</ept> and <bpt id="p2">[</bpt>CMDIFrameWndEx::AddPane<ept id="p2">](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__addpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__adjustdockinglayout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::AdjustDockingLayout</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Redirects a call to the docking manager to adjust the docking layout.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`hdwp`</ph></source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>A handle to a structure containing multiple window positions.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>This is a convenience method that adjusts the docking layout.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>By using this method, you do not have to write code that analyzes the type of the parent frame.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDockingManager::AdjustDockingLayout<ept id="p1">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__adjustdockinglayout)</ept></source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__adjustlayout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::AdjustLayout</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Called by the framework to adjust the internal layout of a pane.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a pane has to adjust its internal layout.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The base implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__calcfixedlayout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CalcFixedLayout</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Calculates the horizontal size of a control bar.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bStretch`</ph></source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Indicates whether the bar should be stretched to the size of the frame.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bStretch`</ph> parameter is nonzero when the bar is not a docking bar (not available for docking) and is 0 when it is docked or floating (available for docking).</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHorz`</ph></source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Indicates that the bar is horizontally or vertically oriented.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bHorz`</ph> parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The control bar size, in pixels, of a <ph id="ph1">`CSize`</ph> object.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>See the remarks section in <bpt id="p1">[</bpt>CControlBar::CalcFixedLayout<ept id="p1">](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__calcfixedlayout)</ept></source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__canacceptpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CanAcceptPane</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Determines whether another pane can be docked to the pane.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pBar`</ph></source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>A pointer to the pane to dock.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if another pane can be accepted; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The framework calls this method before it docks the pane specified by <ph id="ph1">`pBar`</ph> to the current pane.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Use this method and the <bpt id="p1">[</bpt>CBasePane::CanBeDocked<ept id="p1">](#cbasepane__canbedocked)</ept> method to control how panes dock to other panes in your application.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__canautohide"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CanAutoHide</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Determines whether the pane supports auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if this pane supports auto-hide mode; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The framework calls this function to determine whether the pane supports auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>During construction, you can set this ability by passing the <ph id="ph1">`AFX_CBRS_AUTOHIDE`</ph> flag to <bpt id="p1">[</bpt>CBasePane::CreateEx<ept id="p1">](#cbasepane__createex)</ept>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The default implementation checks for the <ph id="ph1">`AFX_CBRS_AUTOHIDE`</ph> flag.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to customize this behavior.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__canbeattached"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CanBeAttached</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can be docked to another pane or frame window.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane can be docked to another pane or frame window; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to enable or disable the ability to dock without calling <bpt id="p1">[</bpt>CBasePane::EnableDocking<ept id="p1">](#cbasepane__enabledocking)</ept>.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__canbeclosed"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CanBeClosed</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can be closed.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane can be closed; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The framework calls this method to determine whether the pane can be closed.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>If the method returns <ph id="ph1">`TRUE`</ph>, a <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button is added to the pane's title bar or, if the pane is floating, to the title bar of the pane's miniframe window.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>During construction, you can set this ability by passing the <ph id="ph1">`AFX_CBRS_CLOSE`</ph> flag to <bpt id="p1">[</bpt>CBasePane::CreateEx<ept id="p1">](#cbasepane__createex)</ept>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The default implementation checks for the <ph id="ph1">`AFX_CBRS_CLOSE`</ph> flag.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__canbedocked"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CanBeDocked</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can be docked to another pane.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDockBar`</ph></source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>A pointer to another pane.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if this pane can be docked to another pane; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The framework calls this method before it docks the pane specified by <ph id="ph1">`pDockBar`</ph> to the current pane.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Use this method and the <bpt id="p1">[</bpt>CBasePane::CanAcceptPane<ept id="p1">](#cbasepane__canacceptpane)</ept> method to control how panes dock to other panes in your application.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__canberesized"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CanBeResized</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can be resized.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane can be resized; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>This method checks for the <ph id="ph1">`AFX_CBRS_RESIZE`</ph> flag, which is specified by default in <ph id="ph2">`CBasePane::OnCreate`</ph>.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>If this flag is not specified, the docking manager flags the pane internally as immovable instead of docking it.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__canbetabbeddocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CanBeTabbedDocument</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane can be converted to an MDI tabbed document.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane can be converted to a tabbed document; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBasePane::CanBeTabbedDocument`</ph> always returns <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Only objects of certain <ph id="ph1">`CBasePane`</ph>-derived types, such as the <bpt id="p1">[</bpt>CDockablePane Class<ept id="p1">](../../mfc/reference/cdockablepane-class.md)</ept>, can be converted to tabbed documents.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__canfloat"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CanFloat</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can float.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane can float; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The framework calls this method to determine whether the pane can float.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>During construction, you can set this ability by passing the <ph id="ph1">`AFX_CBRS_FLOAT`</ph> flag to <bpt id="p1">[</bpt>CBasePane::CreateEx<ept id="p1">](#cbasepane__createex)</ept>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The framework assumes that non-floating panes are static and that their docking state cannot change.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Therefore, the framework does not save the docking state of non-floating panes.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The default implementation checks for the <ph id="ph1">`AFX_CBRS_FLOAT`</ph> style.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__canfocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CanFocus</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane can receive focus.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane can receive focus; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to control focus.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>For example, because toolbars cannot receive focus, this method returns <ph id="ph1">`FALSE`</ph> when it is called on toolbar objects.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The framework tries to set the input focus when a pane is docked or floated.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__copystate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CopyState</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Copies the state of a given pane.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pOrgBar`</ph></source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>A pointer to another pane.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>This method copies the state from <ph id="ph1">`pOrgBar`</ph> to this pane.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__createdefaultminiframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CreateDefaultMiniframe</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>If the pane can float, this method creates a mini-frame window for it.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rectInitial`</ph></source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Specifies the initial coordinates of the mini-frame window.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>A pointer to the new mini-frame window or <ph id="ph1">`NULL`</ph> if the creation failed.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a pane switches to a floating state.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The method creates a mini-frame window and attaches the pane to this window.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__createex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::CreateEx</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Creates the pane control.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwStyleEx`</ph></source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The extended styles (see <bpt id="p1">[</bpt>CWnd::CreateEx<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__createex)</ept> for more information).</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszClassName`</ph></source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The window class name.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszWindowName`</ph></source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The window name.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwStyle`</ph></source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The window style (see <bpt id="p1">[</bpt>CWnd::CreateEx<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__createex)</ept>).</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rect`</ph></source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The initial rectangle.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pParentWnd`</ph></source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>A pointer to the parent window.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nID`</ph></source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Specifies the pane ID.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Must be unique.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwControlBarStyle`</ph></source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Style flags for panes.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pContext`</ph></source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>A pointer to <ph id="ph1">`CcreateContext`</ph></source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is created successfully; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Creates a window of class <ph id="ph1">`lpszClassName`</ph>.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>If you specify <ph id="ph1">`WS_CAPTION`</ph>, this method clears the <ph id="ph2">`WS_CAPTION`</ph> style bit and sets <ph id="ph3">`CBasePane::m_bHasCaption`</ph> to <ph id="ph4">`TRUE`</ph>, because the library does not support panes with captions.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>You can use any combination of child window styles and MFC control bar (CBRS_) styles.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The library adds several new styles for panes.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The following table describes the new styles:</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Style</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The pane can float.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The pane supports auto-hide mode</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>The pane can be resized.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important:<ept id="p1">**</ept>  This style is not implemented.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>The pane can be closed.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The pane can be rolled up when it floats.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>When one pane docks to another pane that has this style, a regular tabbed window is created.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>CTabbedPane Class<ept id="p1">](../../mfc/reference/ctabbedpane-class.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>When one pane docks to another pane that has this style, an Outlook-style tabbed window is created.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>CMFCOutlookBar Class<ept id="p1">](../../mfc/reference/cmfcoutlookbar-class.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>To use the new styles, specify them in <ph id="ph1">`dwControlBarStyle`</ph>.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__dockpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::DockPane</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Docks a pane to another pane or to a frame window.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDockBar`</ph></source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>A pointer to another pane.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpRect`</ph></source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Specifies the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dockMethod`</ph></source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Specifies the docking method.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the control bar was docked successfully; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Call this function to dock a pane to another pane or a dock bar ( <bpt id="p1">[</bpt>CDockSite Class<ept id="p1">](../../mfc/reference/cdocksite-class.md)</ept>) that is specified by <ph id="ph1">`pDockBar`</ph>, or to a main frame if <ph id="ph2">`pDockBar`</ph> is <ph id="ph3">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dockMethod`</ph> specifies how the pane is docked.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CPane::DockPane<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__dockpane)</ept> for a list of possible values.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__dockpaneusingrtti"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::DockPaneUsingRTTI</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Docks the pane by using run-time type information.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bUseDockSite`</ph></source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, dock to the docking site.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`FALSE`</ph>, dock to the parent frame.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__docktoframewindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::DockToFrameWindow</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Docks a dockable pane to a frame.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwAlignment`</ph></source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The side of the parent frame that you want to dock the pane to.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpRect`</ph></source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The desired size.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwDockFlags`</ph></source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pRelativeBar`</ph></source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nRelativeIndex`</ph></source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bOuterEdge`</ph></source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph> and there are other dockable panes at the side specified by <ph id="ph2">`dwAlignment`</ph>, the pane is docked outside the other panes, closer to the edge of the parent frame.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`FALSE`</ph>, the pane is docked closer to the center of the client area.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the method was successful; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>This method fails if a pane divider ( <bpt id="p1">[</bpt>CPaneDivider Class<ept id="p1">](../../mfc/reference/cpanedivider-class.md)</ept>) cannot be created.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Otherwise, it always returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__doesallowdyninsertbefore"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::DoesAllowDynInsertBefore</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Determines whether another pane can be dynamically inserted between this pane and the parent frame.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if a user can insert another pane; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>The framework calls this method to determine whether a user can dynamically insert a pane before this pane.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>For example, suppose your application creates a pane docked at the left side of the frame (such as the Outlook bar).</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>To prevent the user from docking another pane to the left of the first pane, override this method and return <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>We recommend that you override this method and return <ph id="ph1">`FALSE`</ph> for non-floating panes derived from <bpt id="p1">[</bpt>CDockablePane Class<ept id="p1">](../../mfc/reference/cdockablepane-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__dopaint"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::DoPaint</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Fills the background of the pane.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDC`</ph></source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>A pointer to a device context.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>The default implementation calls the current visual manager to fill the background ( <bpt id="p1">[</bpt>CMFCVisualManager::OnFillBarBackground<ept id="p1">](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__onfillbarbackground)</ept>).</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__enabledocking"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::EnableDocking</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Enables docking of the pane to the main frame.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwAlignment`</ph></source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Specifies the docking alignment to enable.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Call this method to enable docking alignment to the main frame.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>You can pass a combination of <ph id="ph1">`CBRS_ALIGN_`</ph> flags (for more information, see <bpt id="p1">[</bpt>CControlBar::EnableDocking<ept id="p1">](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__enabledocking)</ept>).</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EnableDocking`</ph> sets the internal flag <ph id="ph2">`CBasePane::m_dwEnabledAlignment`</ph> and the framework checks this flag when a pane is docked.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CBasePane::GetEnabledAlignment<ept id="p1">](#cbasepane__getenabledalignment)</ept> to determine the docking alignment for a pane.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__enablegripper"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::EnableGripper</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Enables or disables the gripper.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>If the gripper is enabled, the user can drag it to reposition the pane.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bEnable`</ph></source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to enable the gripper; <ph id="ph2">`FALSE`</ph> to disable it.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>The framework uses this method to enable a gripper instead of using the <ph id="ph1">`WS_CAPTION`</ph> style.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__floatpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::FloatPane</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Floats the pane.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rectFloat`</ph></source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Specifies the screen coordinates where the floating pane appears.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dockMethod`</ph></source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Specifies the dock method to use to float the pane.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bShow`</ph></source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Specifies whether the floating pane is visible ( <ph id="ph1">`TRUE`</ph>) or hidden ( <ph id="ph2">`FALSE`</ph>).</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane was floated successfully; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Call this method to float a pane at the screen position specified by <ph id="ph1">`rectFloat`</ph>.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__get_acchelptopic"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::get_accHelpTopic</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The framework calls this method to retrieve the full path of the <ph id="ph1">`WinHelp`</ph> file that is associated with the specified object and the identifier of the appropriate topic in that file.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pszHelpFile`</ph></source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Address of a <ph id="ph1">`BSTR`</ph> that receives the full path of the <ph id="ph2">`WinHelp`</ph> file that is associated with the specified object, if any.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`varChild`</ph></source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Specifies whether the Help topic to be retrieved is that of the object or one of the child elements of the object.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>This parameter can be either <ph id="ph1">`CHILDID_SELF`</ph> (to obtain a Help topic for the object) or a child ID (to obtain a Help topic for one of the child elements of the object).</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pidTopic`</ph></source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">`Help`</ph> file topic that is associated with the specified object.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBasePane`</ph> does not implement this method.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`CBasePane::get_accHelpTopic`</ph> always returns <ph id="ph2">`S_FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>This function is part of the Active Accessibility support in MFC.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Override this function in a derived class to provide help information about your object.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__get_accselection"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::get_accSelection</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The framework calls this method to retrieve the selected children of this object.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pvarChildren`</ph></source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Receives information that identifies the selected children.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBasePane`</ph> does not implement this method.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pvarChildren`</ph> is <ph id="ph2">`NULL`</ph>, this method returns <ph id="ph3">`E_INVALIDARG`</ph>.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Otherwise, this method returns <ph id="ph1">`DISP_E_MEMBERNOTFOUND`</ph>.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>This function is part of the Active Accessibility support in MFC.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Override this function in a derived class if you have non-windowed user interface elements other than windowless ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getcaptionheight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetCaptionHeight</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Returns the caption height.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The caption height.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getcontrolbarstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetControlBarStyle</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Returns the control bar style.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>A bitwise-OR combination of AFX_CBRS_ flags.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>The return value is a combination of the following possible values.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Style</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Makes the control bar float.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Enables auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Enables resizing of the control bar.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>When this flag is set, the control bar can be placed in a dockable pane.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Enables hiding of the control bar.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getcurrentalignment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetCurrentAlignment</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Returns the current pane alignment.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>The current alignment of the control bar.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>The following table shows the possible values:</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Alignment</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Left alignment.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Right alignment.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Top alignment.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Bottom alignment.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getdockingmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetDockingMode</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Returns the current docking mode for the pane.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>DT_STANDARD if dragging the pane is indicated on the screen by a drag rectangle.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>DT_IMMEDIATE if the contents of the pane are dragged.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>The framework calls this method to determine the current docking mode of the pane.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CBasePane::m_dockMode`</ph> is undefined (DT_UNDEFINED), then the docking mode is taken from the global docking mode ( <ph id="ph2">`AFX_GLOBAL_DATA::m_dockModeGlobal`</ph>).</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>By setting <ph id="ph1">`m_dockMode`</ph> or overriding <ph id="ph2">`GetDockingMode`</ph> you can control the docking mode for each pane.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getdocksiteframewnd"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetDockSiteFrameWnd</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">[</bpt>CDockingPanesRow<ept id="p1">](../../mfc/reference/cdockingpanesrow-class.md)</ept>object where the pane is docked.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>A pointer to the dock site of the pane.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve a pointer to the dock site of the pane.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>The dock site can be either a main frame window if the pane is docked to the main frame, or a mini-frame window if the pane is floating.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getenabledalignment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetEnabledAlignment</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Returns the CBRS_ALIGN_ styles that are applied to the pane.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>A combination of CBRS_ALIGN_ styles.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>The following table shows the possible styles:</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Flag</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Enabled alignment</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Left.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Right.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Top.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Bottom.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Combination of all flags.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Call this method to determine the enabled alignment for the pane.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Enabled alignment means the sides of the main frame window that a pane can be docked to.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Enable docking alignment by using <bpt id="p1">[</bpt>CBasePane::EnableDocking<ept id="p1">](#cbasepane__enabledocking)</ept>.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getmfcstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetMFCStyle</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Returns the pane styles that are specific to MFC.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>A combination of library-specific (AFX_CBRS_) pane styles.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getpaneicon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetPaneIcon</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Returns a handle to the pane icon.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bBigIcon`</ph></source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Specifies a 32 pixel by 32 pixel icon if <ph id="ph1">`TRUE`</ph>; specifies a 16 pixel by 16 pixel icon if <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>A handle to the pane icon.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>If unsuccessful, returns <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>The default implementation calls <bpt id="p1">[</bpt>CWnd::GetIcon<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__geticon)</ept>.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getpanerow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetPaneRow</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">[</bpt>CDockingPanesRow<ept id="p1">](../../mfc/reference/cdockingpanesrow-class.md)</ept>object where the pane is docked.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>A pointer to <ph id="ph1">`CDockingPanesRow`</ph> if the pane is docked, or <ph id="ph2">`NULL`</ph> if it is floating.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Call this method to access the row where a pane is docked.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>For example, to arrange the panes in a particular row, call <ph id="ph1">`GetPaneRow`</ph> and then call <bpt id="p1">[</bpt>CDockingPanesRow::ArrangePanes<ept id="p1">](../../mfc/reference/cdockingpanesrow-class.md#cdockingpanesrow__arrangepanes)</ept>.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getpanestyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetPaneStyle</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Returns the pane style.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>A combination of control bar styles (including CBRS_ styles) that was set by the <bpt id="p1">[</bpt>CBasePane::SetPaneStyle<ept id="p1">](#cbasepane__setpanestyle)</ept> method at creation time.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getparentdocksite"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetParentDockSite</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the parent dock site.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>The parent dock site.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getparentminiframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetParentMiniFrame</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the parent mini-frame window.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bNoAssert`</ph></source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, this method does not check for non-valid pointers.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>If you call this method when your application exits, set this parameter to <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>A valid pointer to the parent mini-frame window if the pane is floating; otherwise <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve a pointer to the parent mini-frame window.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>This method iterates through all parents and checks for an object derived from <bpt id="p1">[</bpt>CPaneFrameWnd Class<ept id="p1">](../../mfc/reference/cpaneframewnd-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`GetParentMiniFrame`</ph> to determine whether the pane is floating.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getparenttabbedpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetParentTabbedPane</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the parent tabbed pane.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>A pointer to the parent tabbed pane if it exists; otherwise <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getparenttabwnd"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetParentTabWnd</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the parent window that is inside a tab.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`hWndTab`</ph></source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>If the return value is not <ph id="ph1">`NULL`</ph>, this parameter contains the handle to the parent tabbed window.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>A valid pointer to the parent tabbed window or <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Use this function to retrieve a pointer to the parent tabbed window.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Sometimes it is not enough to call <ph id="ph1">`GetParent`</ph>, because a pane may be inside a docking wrapper ( <bpt id="p1">[</bpt>CDockablePaneAdapter Class<ept id="p1">](../../mfc/reference/cdockablepaneadapter-class.md)</ept>) or inside a pane adapter ( <bpt id="p2">[</bpt>CDockablePaneAdapter Class<ept id="p2">](../../mfc/reference/cdockablepaneadapter-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>By using <ph id="ph1">`GetParentTabWnd`</ph> you will be able to retrieve a valid pointer in those cases (assuming that the parent is a tabbed window).</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__getrecentvisiblestate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::GetRecentVisibleState</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a pane is restored from an archive.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`BOOL`</ph> that specifies the recent visible state.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, the pane was visible when serialized and should be visible when restored.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`FALSE`</ph>, the pane was hidden when serialized and should be hidden when restored.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__hideinprintpreviewmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::HideInPrintPreviewMode</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane is hidden in print preview.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is not shown in print preview; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Base panes are not shown in print preview.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Therefore, this method always returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__insertpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::InsertPane</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Registers the specified pane with the docking manager.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pControlBar`</ph></source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>A pointer to the pane to insert.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pTarget`</ph></source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>A pointer to the adjacent pane.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bAfter`</ph></source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, <ph id="ph2">`pControlBar`</ph> is inserted after <ph id="ph3">`pTarget`</ph>.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`FALSE`</ph>, <ph id="ph2">`pControlBar`</ph> is inserted before <ph id="ph3">`pTarget`</ph>.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the method succeeds, <ph id="ph2">`FALSE`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__isaccessibilitycompatible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsAccessibilityCompatible</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane supports Active Accessibility.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane supports Active Accessibility; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__isautohidemode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsAutoHideMode</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Determines whether a pane is in auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is in auto-hide mode; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Base panes cannot auto-hide.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>This method always returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__isdialogcontrol"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsDialogControl</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane is a dialog box control.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is a dialog box control; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>The framework uses this method to ensure layout consistency for all panes.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__isdocked"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsDocked</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Determines whether the pane is docked.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the parent of the pane is not a mini-frame or if the pane is floating in a mini-frame with another pane; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__isfloating"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsFloating</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Determines whether the pane is floating.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is floating; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>This method returns the opposite value of <bpt id="p1">[</bpt>CBasePane::IsDocked<ept id="p1">](#cbasepane__isdocked)</ept>.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__ishorizontal"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsHorizontal</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Determines whether the pane is docked horizontally.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is docked horizontally; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>The default implementation checks the current docking alignment for <ph id="ph1">`CBRS_ORIENT_HORZ`</ph>.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__isinfloatingmultipaneframewnd"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsInFloatingMultiPaneFrameWnd</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane is in a multi-pane frame window ( <bpt id="p1">[</bpt>CMultiPaneFrameWnd Class<ept id="p1">](../../mfc/reference/cmultipaneframewnd-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is in a multi-pane frame window; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Only dockable panes can float in a multi-pane frame window.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`CBasePane::IsInFloatingMultiPaneFrameWnd`</ph> always returns <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__ismditabbed"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsMDITabbed</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Determines whether the pane has been added to an MDI child window as a tabbed document.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane was added to an MDI child window as a tabbed document; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__ispanevisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsPaneVisible</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Specifies whether the <ph id="ph1">`WS_VISIBLE`</ph> flag is set for the pane.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if <ph id="ph2">`WS_VISIBLE`</ph> is set; otherwise, <ph id="ph3">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CBasePane::IsVisible<ept id="p1">](#cbasepane__isvisible)</ept> to determine pane visibility.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__ispointneardocksite"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsPointNearDockSite</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Determines whether a specified point is near the dock site.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`point`</ph></source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>The specified point.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`dwBarAlignment`</ph></source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Specifies which edge the point is near.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Possible values are <ph id="ph1">`CBRS_ALIGN_LEFT`</ph>, <ph id="ph2">`CBRS_ALIGN_RIGHT`</ph>, <ph id="ph3">`CBRS_ALIGN_TOP`</ph>, and <ph id="ph4">`CBRS_ALIGN_BOTTOM`</ph></source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`bOuterEdge`</ph></source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> if the point is near the outer border of the dock site; <ph id="ph2">`FALSE`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the point is near the dock site; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>The point is near the dock site when it is within the sensitivity set in the docking manager.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>The default sensitivity is 15 pixels.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__isresizable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsResizable</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can be resized.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane can be resized by the user; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>Panes of <bpt id="p1">[</bpt>CDockablePane Class<ept id="p1">](../../mfc/reference/cdockablepane-class.md)</ept> can be resized.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>The status bar ( <bpt id="p1">[</bpt>CMFCStatusBar Class<ept id="p1">](../../mfc/reference/cmfcstatusbar-class.md)</ept>) and the dock bar ( <bpt id="p2">[</bpt>CDockSite Class<ept id="p2">](../../mfc/reference/cdocksite-class.md)</ept>) cannot be resized.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__isrestoredfromregistry"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsRestoredFromRegistry</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Determines whether the pane is restored from the registry.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is restored from the registry; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__istabbed"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsTabbed</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Determines whether the pane has been inserted in the tab control of a tabbed window.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the control bar is inserted in a tab of a tabbed window; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>This method retrieves a pointer to the immediate parent and determines if the parent's runtime class is <bpt id="p1">[</bpt>CMFCBaseTabCtrl Class<ept id="p1">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__isvisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::IsVisible</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>Determines whether the pane is visible.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is visible; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>Use this method to determine the visibility of a pane.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Do not use <ph id="ph1">`::IsWindowVisible`</ph>.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>If the pane is not tabbed (see <bpt id="p1">[</bpt>CBasePane::IsTabbed<ept id="p1">](#cbasepane__istabbed)</ept>), this method checks for the <ph id="ph1">`WS_VISIBLE`</ph> style.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>If the pane is tabbed, this method checks the visibility of the parent tabbed window.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>If the parent window is visible, the function checks the visibility of the pane tab using <bpt id="p1">[</bpt>CMFCBaseTabCtrl::IsTabVisible<ept id="p1">](../../mfc/reference/cmfcbasetabctrl-class.md#cmfcbasetabctrl__istabvisible)</ept>.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__loadstate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::LoadState</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>Loads the pane's state from the registry.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszProfileName`</ph></source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Profile name.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nIndex`</ph></source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>Profile index.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`uiID`</ph></source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Pane ID.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane state was loaded successfully; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>The framework calls this method to load the pane state from the registry.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Override it in a derived class to load additional information saved by <bpt id="p1">[</bpt>CBasePane::SaveState<ept id="p1">](#cbasepane__savestate)</ept>.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__movewindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::MoveWindow</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Moves the pane.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rect`</ph></source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>A rectangle specifying the new location and size of the pane.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bRepaint`</ph></source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, the pane is repainted.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`FALSE`</ph>, the pane is not repainted.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`hdwp`</ph></source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>Handle to a deferred window position structure.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>A handle to a deferred window position structure, or <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>If you pass <ph id="ph1">`NULL`</ph> as the <ph id="ph2">`hdwp`</ph> parameter, this method moves the window normally.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>If you pass a handle, this method performs a deferred window move.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>You can obtain a handle by calling <bpt id="p1">[</bpt>BeginDeferWindowPos<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632672)</ept> or by storing the return value of a previous call to this method.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__onafterchangeparent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::OnAfterChangeParent</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Called by the framework after the pane's parent changes.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWndOldParent`</ph></source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>A pointer to the previous parent.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>The framework calls this method after the pane's parent changes, usually because of a docking or floating operation.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__onbeforechangeparent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::OnBeforeChangeParent</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>Called by the framework just before the pane changes its parent window.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWndNewParent`</ph></source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>A pointer to a new parent window.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDelay`</ph></source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>Specifies whether layout adjustments must be delayed.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>The framework calls this method just before the pane's parent changes, usually because of a docking, floating, or auto-hide operation.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__ondrawcaption"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::OnDrawCaption</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the caption is drawn.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>This method has no functionality for the <ph id="ph1">`CBasePane`</ph> class.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__onmovepanedivider"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::OnMovePaneDivider</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>This method is currently not used.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`CPaneDivider*`</ph></source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__onpanecontextmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::OnPaneContextMenu</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>Called by the framework when it builds a menu that has a list of panes.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pParentFrame`</ph></source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>A pointer to the parent frame.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`point`</ph></source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>Specifies the location of the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OnPaneContextMenu`</ph> calls the docking manager, which maintains the list of panes that belong to the current frame window.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>This method adds the names of the panes to a shortcut menu and displays it.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>The commands on the menu show or hide individual panes.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>Override this method to customize this behavior.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__onremovefromminiframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::OnRemoveFromMiniFrame</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>Called by the framework when a pane is removed from its parent mini frame window.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pMiniFrame`</ph></source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>A pointer to a mini-frame window from which the pane is removed.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a pane is removed from its parent mini-frame window (as a result of docking, for example).</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__onsetaccdata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::OnSetAccData</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBasePane`</ph> does not use this method.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lVal`</ph></source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>This method always returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__panefrompoint"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::PaneFromPoint</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>Returns the pane that contains the given point.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`point`</ph></source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Specifies the point, in screen coordinates, to check.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nSensitivity`</ph></source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>Increase the search area by this amount.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>A pane will satisfy the search criteria if the given point falls in the increased area.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bExactBar`</ph></source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to ignore the <ph id="ph2">`nSensitivity`</ph> parameter; otherwise, <ph id="ph3">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pRTCBarType`</ph></source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>If not <ph id="ph1">`NULL`</ph>, the method searches only panes of the specified type.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CBasePane`</ph>-derived object that contains the given point, or <ph id="ph2">`NULL`</ph> if no pane was found.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__recalclayout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::RecalcLayout</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBasePane`</ph> does not use this method.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__removepanefromdockmanager"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::RemovePaneFromDockManager</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Unregisters a pane and removes it from the list in the docking manager.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pBar`</ph></source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>A pointer to a pane to be removed.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDestroy`</ph></source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, the removed pane is destroyed.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bAdjustLayout`</ph></source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, adjust the docking layout immediately.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bAutoHide`</ph></source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, the docking layout is related to the list of autohide bars.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`FALSE`</ph>, the docking layout is related to the list of regular panes.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pBarReplacement`</ph></source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>A pointer to a pane that replaces the removed pane.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__savestate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::SaveState</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>Saves the pane's state to the registry.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszProfileName`</ph></source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>Profile name.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nIndex`</ph></source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Profile index.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`uiID`</ph></source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>Pane ID.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the state was saved successfully; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it saves the pane's state to the registry.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`SaveState`</ph> in a derived class to store additional information.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__selectdefaultfont"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::SelectDefaultFont</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>Selects the default font for a given device context.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDC`</ph></source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>A device context.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>A pointer to the default <bpt id="p1">[</bpt>CFont Class<ept id="p1">](../../mfc/reference/cfont-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__setcontrolbarstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::SetControlBarStyle</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>Sets the control bar style.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwNewStyle`</ph></source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>A bitwise-OR combination of the following possible values.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>Style</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>Makes the control bar float.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>Enables auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>Enables resizing of the control bar.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>When this flag is set, the control bar can be placed in a dockable pane.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>Enables hiding of the control bar.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__setdockingmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::SetDockingMode</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>Sets the docking mode for the pane.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dockModeNew`</ph></source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>Specifies the new docking mode for the pane.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>The framework supports two docking modes: standard and immediate.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>In the standard docking mode, panes and mini-frame windows are moved around using a drag rectangle.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>In the immediate docking mode, control bars and mini-frame windows are moved immediately with their context.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>Initially, the docking mode is defined globally by <bpt id="p1">[</bpt>CDockingManager::m_dockModeGlobal<ept id="p1">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_dockmodeglobal)</ept>.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>You can set the docking mode for each pane individually using the <ph id="ph1">`SetDockingMode`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__setpanealignment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::SetPaneAlignment</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>Sets the alignment for the pane.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwAlignment`</ph></source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>Specifies the new alignment.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Usually, the framework calls this method when a pane is docked from one side of the main frame to another.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>The following table shows the possible values for <ph id="ph1">`dwAlignment`</ph>:</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>Alignment</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Left alignment.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>Right alignment.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>Top alignment.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>Bottom alignment.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__setpanestyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::SetPaneStyle</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>Sets the style of the pane.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwNewStyle`</ph></source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>Specifies the new style to set.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>This method can be used to set any of the CBRS_ styles that are defined in afxres.h.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>Because pane style and pane alignment are stored together, set the new style by combining it with the current alignment as follows.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__setwindowpos"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::SetWindowPos</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>Changes the size, position, and Z-order of a pane.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWndInsertAfter`</ph></source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">`CWnd`</ph> object that comes before this <ph id="ph2">`CWnd`</ph> object in the Z-order.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CWnd::SetWindowPos<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos)</ept>.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`x`</ph></source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Specifies the position of the left side of the window.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`y`</ph></source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>Specifies the position of the top of the window.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`cx`</ph></source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>Specifies the width of the window.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`cy`</ph></source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>Specifies the height of the window.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nFlags`</ph></source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>Specifies size and position options.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CWnd::SetWindowPos<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos)</ept>.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`hdwp`</ph></source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>Handle to a structure that contains size and position information for one or more windows.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>A handle to an updated deferred window position structure, or <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pWndInsertAfter`</ph> is <ph id="ph2">`NULL`</ph>, this method calls <bpt id="p1">[</bpt>CWnd::SetWindowPos<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos)</ept>.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pWndInsertAfter`</ph> is non- <ph id="ph2">`NULL`</ph>, this method calls <ph id="ph3">`DeferWindowPos`</ph>.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__showpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::ShowPane</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Shows or hides the pane.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bShow`</ph></source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>Specifies whether to show ( <ph id="ph1">`TRUE`</ph>) or hide ( <ph id="ph2">`FALSE`</ph>) a pane.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDelay`</ph></source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, recalculating the docking layout is delayed.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bActivate`</ph></source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, the pane is active when shown.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>This method shows or hides a pane.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>Use this method instead of <ph id="ph1">`ShowWindow`</ph> because this method notifies the relevant docking managers about changes in the pane's visibility.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CBasePane::IsVisible<ept id="p1">](#cbasepane__isvisible)</ept> to determine the current visibility of a pane.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__stretchpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::StretchPane</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>Stretches a pane vertically or horizontally.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nLength`</ph></source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>The length by which to stretch the pane.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bVert`</ph></source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, stretch the pane vertically.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`FALSE`</ph>, stretch the pane horizontally.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>The size of the stretched pane.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasepane__undockpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBasePane::UndockPane</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>Removes the pane from the dock site, default slider, or mini-frame window where it is currently docked.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>If TRUE, the docking layout is not recalculated immediately.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>Call this method to manipulate the pane state or exclude the pane from the docking layout.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>If you want to continue to use this pane, call either <bpt id="p1">[</bpt>CBasePane::DockPane<ept id="p1">](#cbasepane__dockpane)</ept> or <bpt id="p2">[</bpt>CBasePane::FloatPane<ept id="p2">](#cbasepane__floatpane)</ept> before calling this method.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Classes<ept id="p1">](../../mfc/reference/mfc-classes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CPane<ept id="p1">](../../mfc/reference/cbasepane-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWnd Class<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>