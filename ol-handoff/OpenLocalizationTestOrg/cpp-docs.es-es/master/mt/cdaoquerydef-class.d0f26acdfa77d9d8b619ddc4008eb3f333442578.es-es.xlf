<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6acfcfeef8d72034d2a1d01e1e8260344139d64b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdaoquerydef-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce21bf0822b46ea87b352f1419c607ef9a8b6d91</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cffd68fb1046da4b980767461e1df75e3f2d1c20</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDaoQueryDef Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDaoQueryDef Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a query definition, or "querydef," usually one saved in a database.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::CDaoQueryDef<ept id="p1">](#cdaoquerydef__cdaoquerydef)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <bpt id="p1">**</bpt>CDaoQueryDef<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Next call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Create<ept id="p2">**</ept>, depending on your needs.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::Append<ept id="p1">](#cdaoquerydef__append)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Appends the querydef to the database's QueryDefs collection as a saved query.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::CanUpdate<ept id="p1">](#cdaoquerydef__canupdate)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the query can update the database.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::Close<ept id="p1">](#cdaoquerydef__close)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Closes the querydef object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Destroy the C++ object when you finish with it.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::Create<ept id="p1">](#cdaoquerydef__create)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates the underlying DAO querydef object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use the querydef as a temporary query, or call <bpt id="p1">**</bpt>Append<ept id="p1">**</ept> to save it in the database.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::Execute<ept id="p1">](#cdaoquerydef__execute)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Executes the query defined by the querydef object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetConnect<ept id="p1">](#cdaoquerydef__getconnect)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns the connection string associated with the querydef.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The connection string identifies the data source.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>(For SQL pass-through queries only; otherwise an empty string.)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetDateCreated<ept id="p1">](#cdaoquerydef__getdatecreated)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Returns the date the saved query was created.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetDateLastUpdated<ept id="p1">](#cdaoquerydef__getdatelastupdated)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns the date the saved query was last updated.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetFieldCount<ept id="p1">](#cdaoquerydef__getfieldcount)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns the number of fields defined by the querydef.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetFieldInfo<ept id="p1">](#cdaoquerydef__getfieldinfo)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Returns information about a specified field defined in the query.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetName<ept id="p1">](#cdaoquerydef__getname)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Returns the name of the querydef.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetODBCTimeout<ept id="p1">](#cdaoquerydef__getodbctimeout)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Returns the timeout value used by ODBC (for an ODBC query) when the querydef is executed.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This determines how long to allow for the query's action to complete.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetParameterCount<ept id="p1">](#cdaoquerydef__getparametercount)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns the number of parameters defined for the query.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetParameterInfo<ept id="p1">](#cdaoquerydef__getparameterinfo)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns information about a specified parameter to the query.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetParamValue<ept id="p1">](#cdaoquerydef__getparamvalue)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns the value of a specified parameter to the query.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetRecordsAffected<ept id="p1">](#cdaoquerydef__getrecordsaffected)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns the number of records affected by an action query.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetReturnsRecords<ept id="p1">](#cdaoquerydef__getreturnsrecords)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the query defined by the querydef returns records.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetSQL<ept id="p1">](#cdaoquerydef__getsql)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns the SQL string that specifies the query defined by the querydef.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::GetType<ept id="p1">](#cdaoquerydef__gettype)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns the query type: delete, update, append, make-table, and so on.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::IsOpen<ept id="p1">](#cdaoquerydef__isopen)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the querydef is open and can be executed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::Open<ept id="p1">](#cdaoquerydef__open)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Opens an existing querydef stored in the database's QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::SetConnect<ept id="p1">](#cdaoquerydef__setconnect)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Sets the connection string for a SQL pass-through query on an ODBC data source.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::SetName<ept id="p1">](#cdaoquerydef__setname)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Sets the name of the saved query, replacing the name in use when the querydef was created.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::SetODBCTimeout<ept id="p1">](#cdaoquerydef__setodbctimeout)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Sets the timeout value used by ODBC (for an ODBC query) when the querydef is executed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::SetParamValue<ept id="p1">](#cdaoquerydef__setparamvalue)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Sets the value of a specified parameter to the query.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::SetReturnsRecords<ept id="p1">](#cdaoquerydef__setreturnsrecords)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Specifies whether the querydef returns records.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Setting this attribute to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> is only valid for SQL pass-through queries.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::SetSQL<ept id="p1">](#cdaoquerydef__setsql)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Sets the SQL string that specifies the query defined by the querydef.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::m_pDAOQueryDef<ept id="p1">](#cdaoquerydef__m_pdaoquerydef)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A pointer to the OLE interface for the underlying DAO querydef object.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDaoQueryDef::m_pDatabase<ept id="p1">](#cdaoquerydef__m_pdatabase)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CDaoDatabase`</ph> object with which the querydef is associated.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The querydef might be saved in the database or not.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A querydef is a data access object that contains the SQL statement that describes a query, and its properties, such as "Date Created" and "ODBC Timeout."</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can also create temporary querydef objects without saving them, but it is convenient — and much more efficient — to save commonly reused queries in a database.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object maintains a collection, called the QueryDefs collection, that contains its saved querydefs.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The DAO database classes are distinct from the MFC database classes based on Open Database Connectivity (ODBC).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>All DAO database class names have the "CDao" prefix.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You can still access ODBC data sources with the DAO classes.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In general, the MFC classes based on DAO are more capable than the MFC classes based on ODBC; the DAO-based classes can access data, including through ODBC drivers, via their own database engine.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The DAO-based classes also support Data Definition Language (DDL) operations, such as adding tables via the classes, without having to call DAO directly.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Use querydef objects either to work with an existing saved query or to create a new saved query or temporary query:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In all cases, first construct a <ph id="ph1">`CDaoQueryDef`</ph> object, supplying a pointer to the <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object to which the query belongs.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Then do the following, depending on what you want:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To use an existing saved query, call the querydef object's <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaoquerydef__open)</ept> member function, supplying the name of the saved query.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To create a new saved query, call the querydef object's <bpt id="p1">[</bpt>Create<ept id="p1">](#cdaoquerydef__create)</ept> member function, supplying the name of the query.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Then call <bpt id="p1">[</bpt>Append<ept id="p1">](#cdaoquerydef__append)</ept> to save the query by appending it to the database's QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create<ept id="p1">**</ept> puts the querydef into an open state, so after calling <bpt id="p2">**</bpt>Create<ept id="p2">**</ept> you do not call <bpt id="p3">**</bpt>Open<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>To create a temporary querydef, call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Pass an empty string for the query name.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Do not call <bpt id="p1">**</bpt>Append<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When you finish using a querydef object, call its <bpt id="p1">[</bpt>Close<ept id="p1">](#cdaoquerydef__close)</ept> member function; then destroy the querydef object.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The easiest way to create saved queries is to create them and store them in your database using Microsoft Access.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Then you can open and use them in your MFC code.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Purposes</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You can use a querydef object for any of the following purposes:</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To create a <ph id="ph1">`CDaoRecordset`</ph> object</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To call the object's <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> member function to directly execute an action query or a SQL pass-through query</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You can use a querydef object for any type of query, including select, action, crosstab, delete, update, append, make-table, data definition, SQL pass-through, union, and bulk queries.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The query's type is determined by the content of the SQL statement that you supply.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For information about query types, see the <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> and <bpt id="p2">[</bpt>GetType<ept id="p2">](#cdaoquerydef__gettype)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Recordsets are commonly used for row-returning queries, usually those using the <bpt id="p1">**</bpt>SELECT ... FROM<ept id="p1">**</ept> keywords.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> is most commonly used for bulk operations.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Execute<ept id="p1">](#cdaoquerydef__execute)</ept> and <bpt id="p2">[</bpt>CDaoRecordset<ept id="p2">](../../mfc/reference/cdaorecordset-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Querydefs and Recordsets</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To use a querydef object to create a <ph id="ph1">`CDaoRecordset`</ph> object, you typically create or open a querydef as described above.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Then construct a recordset object, passing a pointer to your querydef object when you call <bpt id="p1">[</bpt>CDaoRecordset::Open<ept id="p1">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__open)</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The querydef you pass must be in an open state.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information, see class <bpt id="p1">[</bpt>CDaoRecordset<ept id="p1">](../../mfc/reference/cdaorecordset-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>You cannot use a querydef to create a recordset (the most common use for a querydef) unless it is in an open state.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Put the querydef into an open state by calling either <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Create<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>External Databases</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Querydef objects are the preferred way to use the native SQL dialect of an external database engine.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For example, you can create a Transact SQL query (as used on Microsoft SQL Server) and store it in a querydef object.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>When you need to use a SQL query not based on the Microsoft Jet database engine, you must provide a connection string that points to the external data source.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Queries with valid connection strings bypass the database engine and pass the query directly to the external database server for processing.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The preferred way to work with ODBC tables is to attach them to a Microsoft Jet (.MDB) database.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "QueryDef Object", "QueryDefs Collection", and "CdbDatabase Object" in the DAO SDK.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdao.h</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__append"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::Append</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Call this member function after you call <bpt id="p1">[</bpt>Create<ept id="p1">](#cdaoquerydef__create)</ept> to create a new querydef object.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Append<ept id="p1">**</ept> saves the querydef in the database by appending the object to the database's QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You can use the querydef as a temporary object without appending it, but if you want it to persist, you must call <bpt id="p1">**</bpt>Append<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If you attempt to append a temporary querydef object, MFC throws an exception of type <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../../mfc/reference/cdaoexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__canupdate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::CanUpdate</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether you can modify the querydef — such as changing its name or SQL string.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Nonzero if you are permitted to modify the querydef; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>You can modify the querydef if:</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>It is not based on a database that is open read-only.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You have update permissions for the database.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>This depends on whether you have implemented security features.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>MFC does not provide support for security; you must implement it yourself by calling DAO directly or by using Microsoft Access.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>See the topic "Permissions Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__cdaoquerydef"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::CDaoQueryDef</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Constructs a <bpt id="p1">**</bpt>CDaoQueryDef<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>A pointer to an open <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The object can represent an existing querydef stored in the database's QueryDefs collection, a new query to be stored in the collection, or a temporary query, not to be stored.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Your next step depends on the type of querydef:</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>If the object represents an existing querydef, call the object's <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaoquerydef__open)</ept> member function to initialize it.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If the object represents a new querydef to be saved, call the object's <bpt id="p1">[</bpt>Create<ept id="p1">](#cdaoquerydef__create)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>This adds the object to the database's QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Then call <ph id="ph1">`CDaoQueryDef`</ph> member functions to set the object's attributes.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Finally, call <bpt id="p1">[</bpt>Append<ept id="p1">](#cdaoquerydef__append)</ept>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>If the object represents a temporary querydef (not to be saved in the database), call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, passing an empty string for the query's name.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>After calling <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, initialize the querydef by directly setting its attributes.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Do not call <bpt id="p1">**</bpt>Append<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>To set the attributes of the querydef, you can use the <bpt id="p1">[</bpt>SetName<ept id="p1">](#cdaoquerydef__setname)</ept>, <bpt id="p2">[</bpt>SetSQL<ept id="p2">](#cdaoquerydef__setsql)</ept>, <bpt id="p3">[</bpt>SetConnect<ept id="p3">](#cdaoquerydef__setconnect)</ept>, <bpt id="p4">[</bpt>SetODBCTimeout<ept id="p4">](#cdaoquerydef__setodbctimeout)</ept>, and <bpt id="p5">[</bpt>SetReturnsRecords<ept id="p5">](#cdaoquerydef__setreturnsrecords)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>When you finish with the querydef object, call its <bpt id="p1">[</bpt>Close<ept id="p1">](#cdaoquerydef__close)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>If you have a pointer to the querydef, use the <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> operator to destroy the C++ object.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__close"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::Close</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Call this member function when you finish using the querydef object.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Closing the querydef releases the underlying DAO object but does not destroy the saved DAO querydef object or the C++ <ph id="ph1">`CDaoQueryDef`</ph> object.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>This is not the same as <bpt id="p1">[</bpt>CDaoDatabase::DeleteQueryDef<ept id="p1">](../../mfc/reference/cdaodatabase-class.md#cdaodatabase__deletequerydef)</ept>, which deletes the querydef from the database's QueryDefs collection in DAO (if not a temporary querydef).</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::Create</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Call this member function to create a new saved query or a new temporary query.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The unique name of the query saved in the database.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For details about the string, see the topic "CreateQueryDef Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If you accept the default value, an empty string, a temporary querydef is created.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Such a query is not saved in the QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The SQL string that defines the query.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If you accept the default value of <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, you must later call <bpt id="p2">[</bpt>SetSQL<ept id="p2">](#cdaoquerydef__setsql)</ept> to set the string.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Until then, the query is undefined.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You can, however, use the undefined query to open a recordset; see Remarks for details.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The SQL statement must be defined before you can append the querydef to the QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If you pass a name in <ph id="ph1">`lpszName`</ph>, you can then call <bpt id="p1">[</bpt>Append<ept id="p1">](#cdaoquerydef__append)</ept> to save the querydef in the database's QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Otherwise, the object is a temporary querydef and is not saved.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>In either case, the querydef is in an open state, and you can either use it to create a <bpt id="p1">[</bpt>CDaoRecordset<ept id="p1">](../../mfc/reference/cdaorecordset-class.md)</ept> object or call the querydef's <bpt id="p2">[</bpt>Execute<ept id="p2">](#cdaoquerydef__execute)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If you do not supply a SQL statement in <ph id="ph1">`lpszSQL`</ph>, you cannot run the query with <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> but you can use it to create a recordset.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>In that case, MFC uses the recordset's default SQL statement.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__execute"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::Execute</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Call this member function to run the query defined by the querydef object.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>An integer that determines the characteristics of the query.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Execute Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>You can use the bitwise-OR operator ( <bpt id="p1">**</bpt>&amp;#124;<ept id="p1">**</ept>) to combine the following constants for this argument:</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbDenyWrite<ept id="p1">**</ept> Deny write permission to other users.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbInconsistent<ept id="p1">**</ept> Inconsistent updates.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbConsistent<ept id="p1">**</ept> Consistent updates.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbSQLPassThrough<ept id="p1">**</ept> SQL pass-through.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Causes the SQL statement to be passed to an ODBC database for processing.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbFailOnError<ept id="p1">**</ept> Default value.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Roll back updates if an error occurs and report the error to the user.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbSeeChanges<ept id="p1">**</ept> Generate a run-time error if another user is changing data you are editing.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>For an explanation of the terms "inconsistent" and "consistent," see the topic "Execute Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Querydef objects used for execution in this manner can only represent one of the following query types:</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Action queries</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>SQL pass-through queries</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> does not work for queries that return records, such as select queries.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> is commonly used for bulk operation queries, such as <bpt id="p2">**</bpt>UPDATE<ept id="p2">**</ept>, <bpt id="p3">**</bpt>INSERT<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>SELECT INTO<ept id="p4">**</ept>, or for data definition language (DDL) operations.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The preferred way to work with ODBC data sources is to attach tables to a Microsoft Jet (.MDB) database.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>For more information, see the topic "Accessing External Databases with DAO" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>GetRecordsAffected<ept id="p1">](#cdaoquerydef__getrecordsaffected)</ept> member function of the querydef object to determine the number of records affected by the most recent <bpt id="p2">**</bpt>Execute<ept id="p2">**</ept> call.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`GetRecordsAffected`</ph> returns information about the number of records deleted, updated, or inserted when executing an action query.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The count returned will not reflect changes in related tables when cascade updates or deletes are in effect.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>If you include both <bpt id="p1">**</bpt>dbInconsistent<ept id="p1">**</ept> and <bpt id="p2">**</bpt>dbConsistent<ept id="p2">**</ept> or if you include neither, the result is the default, <bpt id="p3">**</bpt>dbInconsistent<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> does not return a recordset.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> on a query that selects records causes MFC to throw an exception of type <bpt id="p2">[</bpt>CDaoException<ept id="p2">](../../mfc/reference/cdaoexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getconnect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetConnect</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Call this member function to get the connection string associated with the querydef's data source.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> containing the connection string for the querydef.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>This function is used only with ODBC data sources and certain ISAM drivers.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>It is not used with Microsoft Jet (.MDB) databases; in this case, <ph id="ph1">`GetConnect`</ph> returns an empty string.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>SetConnect<ept id="p1">](#cdaoquerydef__setconnect)</ept>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The preferred way to work with ODBC tables is to attach them to an .MDB database.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>For more information, see the topic "Accessing External Databases with DAO" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>For information about connection strings, see the topic "Connect Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getdatecreated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetDateCreated</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Call this member function to get the date the querydef object was created.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>COleDateTime<ept id="p1">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept> object containing the date and time the querydef was created.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "DateCreated, LastUpdated Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getdatelastupdated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetDateLastUpdated</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Call this member function to get the date the querydef object was last updated — when any of its properties were changed, such as its name, its SQL string, or its connection string.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>COleDateTime<ept id="p1">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept> object containing the date and time the querydef was last updated.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "DateCreated, LastUpdated Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getfieldcount"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetFieldCount</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the number of fields in the query.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The number of fields defined in the query.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetFieldCount`</ph> is useful for looping through all fields in the querydef.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>For that purpose, use <ph id="ph1">`GetFieldCount`</ph> in conjunction with <bpt id="p1">[</bpt>GetFieldInfo<ept id="p1">](#cdaoquerydef__getfieldinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getfieldinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetFieldInfo</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain various kinds of information about a field defined in the querydef.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The zero-based index of the desired field in the querydef's Fields collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CDaoFieldInfo`</ph> object that returns the information requested.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Options that specify which information about the field to retrieve.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The available options are listed here along with what they cause the function to return:</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AFX_DAO_PRIMARY_INFO`</ph> (Default) Name, Type, Size, Attributes</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AFX_DAO_SECONDARY_INFO`</ph> Primary information plus: Ordinal Position, Required, Allow Zero Length, Source Field, Foreign Name, Source Table, Collating Order</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AFX_DAO_ALL_INFO`</ph> Primary and secondary information plus: Default Value, Validation Text, Validation Rule</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>A string containing the name of the desired field, for lookup by name.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>You can use a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>For a description of the information returned in <ph id="ph1">`fieldinfo`</ph>, see the <bpt id="p1">[</bpt>CDaoFieldInfo<ept id="p1">](../../mfc/reference/cdaofieldinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>This structure has members that correspond to the descriptive information under <ph id="ph1">`dwInfoOptions`</ph> above.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>If you request one level of information, you get any prior levels of information as well.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetName</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the name of the query represented by the querydef.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The name of the query.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Querydef names are unique user-defined names.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>For more information about querydef names, see the topic "Name Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getodbctimeout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetODBCTimeout</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the current time limit before a query to an ODBC data source times out.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The number of seconds before a query times out.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>For information about this time limit, see the topic "ODBCTimeout Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The preferred way to work with ODBC tables is to attach them to a Microsoft Jet (.MDB) database.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>For more information, see the topic "Accessing External Databases with DAO" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getparametercount"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetParameterCount</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the number of parameters in the saved query.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The number of parameters defined in the query.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetParameterCount`</ph> is useful for looping through all parameters in the querydef.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For that purpose, use <ph id="ph1">`GetParameterCount`</ph> in conjunction with <bpt id="p1">[</bpt>GetParameterInfo<ept id="p1">](#cdaoquerydef__getparameterinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "Parameter Object", "Parameters Collection", and "PARAMETERS Declaration (SQL)" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getparameterinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetParameterInfo</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain information about a parameter defined in the querydef.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The zero-based index of the desired parameter in the querydef's Parameters collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CDaoParameterInfo<ept id="p1">](../../mfc/reference/cdaoparameterinfo-structure.md)</ept> object that returns the information requested.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Options that specify which information about the parameter to retrieve.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The available option is listed here along with what it causes the function to return:</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AFX_DAO_PRIMARY_INFO`</ph> (Default) Name, Type</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>A string containing the name of the desired parameter, for lookup by name.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>You can use a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>For a description of the information returned in <ph id="ph1">`paraminfo`</ph>, see the <bpt id="p1">[</bpt>CDaoParameterInfo<ept id="p1">](../../mfc/reference/cdaoparameterinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>This structure has members that correspond to the descriptive information under <ph id="ph1">`dwInfoOptions`</ph> above.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "PARAMETERS Declaration (SQL)" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getparamvalue"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetParamValue</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the current value of the specified parameter stored in the querydef's Parameters collection.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The name of the parameter whose value you want, for lookup by name.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The zero-based index of the parameter in the querydef's Parameters collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>You can obtain this value with calls to <bpt id="p1">[</bpt>GetParameterCount<ept id="p1">](#cdaoquerydef__getparametercount)</ept> and <bpt id="p2">[</bpt>GetParameterInfo<ept id="p2">](#cdaoquerydef__getparameterinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>An object of class <bpt id="p1">[</bpt>COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md)</ept> that contains the parameter's value.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>You can access the parameter either by name or by its ordinal position in the collection.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "PARAMETERS Declaration (SQL)" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getrecordsaffected"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetRecordsAffected</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Call this member function to determine how many records were affected by the last call of <bpt id="p1">[</bpt>Execute<ept id="p1">](#cdaoquerydef__execute)</ept>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The number of records affected.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The count returned will not reflect changes in related tables when cascade updates or deletes are in effect.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>For related information see the topic "RecordsAffected Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getreturnsrecords"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetReturnsRecords</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the querydef is based on a query that returns records.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Nonzero if the querydef is based on a query that returns records; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>This member function is only used for SQL pass-through queries.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>For more information about SQL queries, see the <bpt id="p1">[</bpt>Execute<ept id="p1">](#cdaoquerydef__execute)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>For more information about working with SQL pass-through queries, see the <bpt id="p1">[</bpt>SetReturnsRecords<ept id="p1">](#cdaoquerydef__setreturnsrecords)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "ReturnsRecords Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__getsql"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetSQL</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the SQL statement that defines the query on which the querydef is based.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The SQL statement that defines the query on which the querydef is based.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>You will then probably parse the string for keywords, table names, and so on.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "SQL Property", "Comparison of Microsoft Jet Database Engine SQL and ANSI SQL", and "Querying a Database with SQL in Code" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__gettype"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::GetType</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Call this member function to determine the query type of the querydef.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The type of the query defined by the querydef.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>For values, see Remarks.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The query type is set by what you specify in the querydef's SQL string when you create the querydef or call an existing querydef's <bpt id="p1">[</bpt>SetSQL<ept id="p1">](#cdaoquerydef__setsql)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The query type returned by this function can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbQSelect<ept id="p1">**</ept> Select</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbQAction<ept id="p1">**</ept> Action</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbQCrosstab<ept id="p1">**</ept> Crosstab</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbQDelete<ept id="p1">**</ept> Delete</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbQUpdate<ept id="p1">**</ept> Update</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbQAppend<ept id="p1">**</ept> Append</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbQMakeTable<ept id="p1">**</ept> Make-table</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbQDDL<ept id="p1">**</ept> Data-definition</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbQSQLPassThrough<ept id="p1">**</ept> Pass-through</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbQSetOperation<ept id="p1">**</ept> Union</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbQSPTBulk<ept id="p1">**</ept> Used with <bpt id="p2">**</bpt>dbQSQLPassThrough<ept id="p2">**</ept> to specify a query that does not return records.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>To create a SQL pass-through query, don't set the <bpt id="p1">**</bpt>dbSQLPassThrough<ept id="p1">**</ept> constant.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>This is set automatically by the Microsoft Jet database engine when you create a querydef object and set the connection string.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>For information about SQL strings, see <bpt id="p1">[</bpt>GetSQL<ept id="p1">](#cdaoquerydef__getsql)</ept>.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>For information about query types, see <bpt id="p1">[</bpt>Execute<ept id="p1">](#cdaoquerydef__execute)</ept>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__isopen"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::IsOpen</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the <ph id="ph1">`CDaoQueryDef`</ph> object is currently open.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Nonzero if the <ph id="ph1">`CDaoQueryDef`</ph> object is currently open; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>A querydef must be in an open state before you use it to call <bpt id="p1">[</bpt>Execute<ept id="p1">](#cdaoquerydef__execute)</ept> or to create a <bpt id="p2">[</bpt>CDaoRecordset<ept id="p2">](../../mfc/reference/cdaorecordset-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>To put a querydef into an open state call either <bpt id="p1">[</bpt>Create<ept id="p1">](#cdaoquerydef__create)</ept> (for a new querydef) or <bpt id="p2">[</bpt>Open<ept id="p2">](#cdaoquerydef__open)</ept> (for an existing querydef).</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__m_pdatabase"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::m_pDatabase</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object associated with the querydef object.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Use this pointer if you need to access the database directly — for example, to obtain pointers to other querydef or recordset objects in the database's collections.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__m_pdaoquerydef"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::m_pDAOQueryDef</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the OLE interface for the underlying DAO querydef object.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>This pointer is provided for completeness and consistency with the other classes.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>However, because MFC rather fully encapsulates DAO querydefs, you are unlikely to need it.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>If you do use it, do so cautiously — in particular, do not change the value of the pointer unless you know what you are doing.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__open"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::Open</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Call this member function to open a querydef previously saved in the database's QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>A string that contains the name of the saved querydef to open.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>You can use a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Once the querydef is open, you can call its <bpt id="p1">[</bpt>Execute<ept id="p1">](#cdaoquerydef__execute)</ept> member function or use the querydef to create a <bpt id="p2">[</bpt>CDaoRecordset<ept id="p2">](../../mfc/reference/cdaorecordset-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__setconnect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::SetConnect</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Call this member function to set the querydef object's connection string.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>A string that contains a connection string for the associated <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>The connection string is used to pass additional information to ODBC and certain ISAM drivers as needed.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>It is not used for Microsoft Jet (.MDB) databases.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The preferred way to work with ODBC tables is to attach them to an .MDB database.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Before executing a querydef that represents a SQL pass-through query to an ODBC data source, set the connection string with <ph id="ph1">`SetConnect`</ph> and call <bpt id="p1">[</bpt>SetReturnsRecords<ept id="p1">](#cdaoquerydef__setreturnsrecords)</ept> to specify whether the query returns records.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>For more information about the connection string's structure and examples of connection string components, see the topic "Connect Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__setname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::SetName</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Call this member function if you want to change the name of a querydef that is not temporary.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>A string that contains the new name for a nontemporary query in the associated <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Querydef names are unique, user-defined names.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`SetName`</ph> before the querydef object is appended to the QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__setodbctimeout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::SetODBCTimeout</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Call this member function to set the time limit before a query to an ODBC data source times out.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nODBCTimeout<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The number of seconds before a query times out.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>This member function lets you override the default number of seconds before subsequent operations on the connected data source "time out."</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>An operation might time out due to network access problems, excessive query processing time, and so on.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`SetODBCTimeout`</ph> prior to executing a query with this querydef if you want to change the query timeout value.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>(As ODBC reuses connections, the timeout value is the same for all clients on the same connection.)</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The default value for query timeouts is 60 seconds.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__setparamvalue"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::SetParamValue</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Call this member function to set the value of a parameter in the querydef at run time.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The name of the parameter whose value you want to set.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The value to set; see Remarks.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The ordinal position of the parameter in the querydef's Parameters collection.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>You can obtain this value with calls to <bpt id="p1">[</bpt>GetParameterCount<ept id="p1">](#cdaoquerydef__getparametercount)</ept> and <bpt id="p2">[</bpt>GetParameterInfo<ept id="p2">](#cdaoquerydef__getparameterinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The parameter must already have been established as part of the querydef's SQL string.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>You can access the parameter either by name or by its ordinal position in the collection.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Specify the value to set as a <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>For information about setting the desired value and type in your <ph id="ph1">`COleVariant`</ph> object, see class <bpt id="p1">[</bpt>COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__setreturnsrecords"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::SetReturnsRecords</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Call this member function as part of the process of setting up a SQL pass-through query to an external database.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bReturnsRecords<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the query on an external database returns records; otherwise, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>In such a case, you must create the querydef and set its properties using other <ph id="ph1">`CDaoQueryDef`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>For a description of external databases, see <bpt id="p1">[</bpt>SetConnect<ept id="p1">](#cdaoquerydef__setconnect)</ept>.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdaoquerydef__setsql"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDaoQueryDef::SetSQL</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Call this member function to set the SQL statement that the querydef executes.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>A string containing a complete SQL statement, suitable for execution.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The syntax of this string depends on the DBMS that your query targets.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>For a discussion of syntax used in the Microsoft Jet database engine, see the topic "Building SQL Statements in Code" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>A typical use of <ph id="ph1">`SetSQL`</ph> is setting up a querydef object for use in a SQL pass-through query.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>(For the syntax of SQL pass-through queries on your target DBMS, see the documentation for your DBMS.)</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject Class<ept id="p1">](../../mfc/reference/cobject-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDaoRecordset Class<ept id="p1">](../../mfc/reference/cdaorecordset-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDaoDatabase Class<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDaoTableDef Class<ept id="p1">](../../mfc/reference/cdaotabledef-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDaoException Class<ept id="p1">](../../mfc/reference/cdaoexception-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>