<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae8f5df6cf27fb3b1ec70041de356ed67ef5557a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\gslice-array-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2190be9f8b110ebfccac92f00c265c092d7cb953</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae702d0ccb1d59fcd35b770393960d89bf134040</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>gslice_array Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>gslice_array Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An internal, auxiliary template class that supports general slice objects by providing operations between subset arrays defined by the general slice of a valarray.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The class describes an object that stores a reference to an object <bpt id="p1">**</bpt>va<ept id="p1">**</ept> of class <bpt id="p2">[</bpt>valarray<ept id="p2">](../standard-library/valarray-class.md)</ept><bpt id="p3">**</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p3">**</ept>, along with an object <bpt id="p4">**</bpt>gs<ept id="p4">**</ept> of class <bpt id="p5">[</bpt>gslice<ept id="p5">](../standard-library/gslice-class.md)</ept> which describes the sequence of elements to select from the <bpt id="p6">**</bpt>valarray<ph id="ph2">\&lt;</ph>Type&gt;<ept id="p6">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You construct a <bpt id="p1">**</bpt>gslice_array<ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">**</ept> object only by writing an expression of the form <bpt id="p2">[</bpt>va&amp;#91;gs&amp;#93;<ept id="p2">](../standard-library/valarray-class.md#valarray__operator_at)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The member functions of class gslice_array then behave like the corresponding function signatures defined for <bpt id="p1">**</bpt>valarray<ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">**</ept>, except that only the sequence of selected elements is affected.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The template class is created indirectly by certain valarray operations and cannot be used directly in the program.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An internal auxiliary template class instead is used by the slice subscript operator:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`gslice_array`</ph><ph id="ph2">\&lt;</ph> <bpt id="p1">**</bpt>Type<ept id="p1">**</ept><ph id="ph3">&gt; </ph><ph id="ph4">`valarray`</ph><ph id="ph5">\&lt;</ph> <bpt id="p2">**</bpt>Type<ept id="p2">**</ept>&gt;:: <ph id="ph6">`operator[]`</ph> ( <bpt id="p3">**</bpt>constgslice&amp;<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You construct a <bpt id="p1">**</bpt>gslice_array<ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">**</ept> object only by writing an expression of the form <bpt id="p2">**</bpt>va[gsl]<ept id="p2">**</ept>, for a slice <bpt id="p3">**</bpt>gsl<ept id="p3">**</ept> of valarray <bpt id="p4">**</bpt>va<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The member functions of class gslice_array then behave like the corresponding function signatures defined for <bpt id="p1">**</bpt>valarray<ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">**</ept>, except that only the sequence of selected elements is affected.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The sequence controlled by the gslice_array is defined by the three parameters of the slice constructor, the index of the first element in the first slice, the number of elements in each slice, and the distance between the elements in each slice.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the following example:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The indices must be valid for the procedure to be valid.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>gslice::gslice<ept id="p1">](../standard-library/gslice-class.md#gslice__gslice)</ept> for an example of how to declare and use a slice_array.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>valarray&gt;</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>