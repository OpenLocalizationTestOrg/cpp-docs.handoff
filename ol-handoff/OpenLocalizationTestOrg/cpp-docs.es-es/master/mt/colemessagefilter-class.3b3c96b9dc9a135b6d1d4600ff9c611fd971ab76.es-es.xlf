<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">550dc5f94527a0b43e65d205041565d12632e9c5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\colemessagefilter-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1dbbe4b67368ab52e2417449c8c855ee0119a320</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e53ce5ed5b32f9881bf35d7da768273cb84b71de</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>COleMessageFilter Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>COleMessageFilter Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Manages the concurrency required by the interaction of OLE applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleMessageFilter::COleMessageFilter<ept id="p1">](#colemessagefilter__colemessagefilter)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`COleMessageFilter`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleMessageFilter::BeginBusyState<ept id="p1">](#colemessagefilter__beginbusystate)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Puts the application in the busy state.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleMessageFilter::EnableBusyDialog<ept id="p1">](#colemessagefilter__enablebusydialog)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Enables and disables the dialog box that appears when a called application is busy.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleMessageFilter::EnableNotRespondingDialog<ept id="p1">](#colemessagefilter__enablenotrespondingdialog)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Enables and disables the dialog box that appears when a called application is not responding.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleMessageFilter::EndBusyState<ept id="p1">](#colemessagefilter__endbusystate)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Terminates the application's busy state.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleMessageFilter::OnMessagePending<ept id="p1">](#colemessagefilter__onmessagepending)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Called by the framework to process messages while an OLE call is in progress.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleMessageFilter::Register<ept id="p1">](#colemessagefilter__register)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Registers the message filter with the OLE system DLLs.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleMessageFilter::Revoke<ept id="p1">](#colemessagefilter__revoke)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Revokes the message filter's registration with the OLE system DLLs.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleMessageFilter::SetBusyReply<ept id="p1">](#colemessagefilter__setbusyreply)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Determines the busy application's reply to an OLE call.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleMessageFilter::SetMessagePendingDelay<ept id="p1">](#colemessagefilter__setmessagependingdelay)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Determines how long the application waits for a response to an OLE call.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleMessageFilter::SetRetryReply<ept id="p1">](#colemessagefilter__setretryreply)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Determines the calling application's reply to a busy application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COleMessageFilter`</ph> class is useful in visual editing server and container applications, as well as OLE automation applications.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For server applications that are being called, this class can be used to make the application "busy" so that incoming calls from other container applications are either canceled or retried later.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This class can also be used to determine the action to be taken by a calling application when the called application is busy.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Common usage is for a server application to call <bpt id="p1">[</bpt>BeginBusyState<ept id="p1">](#colemessagefilter__beginbusystate)</ept> and <bpt id="p2">[</bpt>EndBusyState<ept id="p2">](#colemessagefilter__endbusystate)</ept> when it would be dangerous for a document or other OLE accessible object to be destroyed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>These calls are made in <bpt id="p1">[</bpt>CWinApp::OnIdle<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__onidle)</ept> during user-interface updates.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>By default, a <ph id="ph1">`COleMessageFilter`</ph> object is allocated when the application is initialized.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It can be retrieved with <bpt id="p1">[</bpt>AfxOleGetMessageFilter<ept id="p1">](application-control.md#afxolegetmessagefilter)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is an advanced class; you seldom need to work with it directly.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Servers: Implementing a Server<ept id="p1">](../../mfc/servers-implementing-a-server.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxole.h</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colemessagefilter__beginbusystate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleMessageFilter::BeginBusyState</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Call this function to begin a busy state.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It works in conjunction with <bpt id="p1">[</bpt>EndBusyState<ept id="p1">](#colemessagefilter__endbusystate)</ept> to control the application's busy state.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The function <bpt id="p1">[</bpt>SetBusyReply<ept id="p1">](#colemessagefilter__setbusyreply)</ept> determines the application's reply to calling applications when it is busy.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BeginBusyState`</ph> and <ph id="ph2">`EndBusyState`</ph> calls increment and decrement, respectively, a counter that determines whether the application is busy.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, two calls to <ph id="ph1">`BeginBusyState`</ph> and one call to <ph id="ph2">`EndBusyState`</ph> still result in a busy state.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To cancel a busy state it is necessary to call <ph id="ph1">`EndBusyState`</ph> the same number of times <ph id="ph2">`BeginBusyState`</ph> has been called.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>By default, the framework enters the busy state during idle processing, which is performed by <bpt id="p1">[</bpt>CWinApp::OnIdle<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__onidle)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>While the application is handling <bpt id="p1">**</bpt>ON_COMMANDUPDATEUI<ept id="p1">**</ept> notifications, incoming calls are handled later, after idle processing is complete.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colemessagefilter__colemessagefilter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleMessageFilter::COleMessageFilter</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`COleMessageFilter`</ph> object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colemessagefilter__enablebusydialog"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleMessageFilter::EnableBusyDialog</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Enables and disables the busy dialog box, which is displayed when the message-pending delay expires (see <bpt id="p1">[</bpt>SetRetryReply<ept id="p1">](#colemessagefilter__setretryreply)</ept>) during an OLE call.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bEnableBusy<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Specifies whether the "busy" dialog box is enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colemessagefilter__enablenotrespondingdialog"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleMessageFilter::EnableNotRespondingDialog</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Enables and disables the "not responding" dialog box, which is displayed if a keyboard or mouse message is pending during an OLE call and the call has timed out.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bEnableNotResponding<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Specifies whether the "not responding" dialog box is enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colemessagefilter__endbusystate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleMessageFilter::EndBusyState</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Call this function to end a busy state.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It works in conjunction with <bpt id="p1">[</bpt>BeginBusyState<ept id="p1">](#colemessagefilter__beginbusystate)</ept> to control the application's busy state.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The function <bpt id="p1">[</bpt>SetBusyReply<ept id="p1">](#colemessagefilter__setbusyreply)</ept> determines the application's reply to calling applications when it is busy.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BeginBusyState`</ph> and <ph id="ph2">`EndBusyState`</ph> calls increment and decrement, respectively, a counter that determines whether the application is busy.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, two calls to <ph id="ph1">`BeginBusyState`</ph> and one call to <ph id="ph2">`EndBusyState`</ph> still result in a busy state.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To cancel a busy state it is necessary to call <ph id="ph1">`EndBusyState`</ph> the same number of times <ph id="ph2">`BeginBusyState`</ph> has been called.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>By default, the framework enters the busy state during idle processing, which is performed by <bpt id="p1">[</bpt>CWinApp::OnIdle<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__onidle)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>While the application is handling <ph id="ph1">`ON_UPDATE_COMMAND_UI`</ph> notifications, incoming calls are handled after idle processing is complete.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colemessagefilter__onmessagepending"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleMessageFilter::OnMessagePending</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Called by the framework to process messages while an OLE call is in progress.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Pointer to the pending message.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Nonzero on success; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>When a calling application is waiting for a call to be completed, the framework calls <ph id="ph1">`OnMessagePending`</ph> with a pointer to the pending message.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>By default, the framework dispatches <ph id="ph1">`WM_PAINT`</ph> messages, so that window updates can occur during a call that is taking a long time.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You must register your message filter by means of a call to <bpt id="p1">[</bpt>Register<ept id="p1">](#colemessagefilter__register)</ept> before it can become active.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colemessagefilter__register"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleMessageFilter::Register</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Registers the message filter with the OLE system DLLs.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Nonzero on success; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A message filter has no effect unless it is registered with the system DLLs.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Usually your application's initialization code registers the application's message filter.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Any other message filter registered by your application should be revoked before the program terminates by a call to <bpt id="p1">[</bpt>Revoke<ept id="p1">](#colemessagefilter__revoke)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The framework's default message filter is automatically registered during initialization and revoked at termination.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colemessagefilter__revoke"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleMessageFilter::Revoke</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Revokes a previous registration performed by a call to <bpt id="p1">[</bpt>Register<ept id="p1">](#colemessagefilter__register)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A message filter should be revoked before the program terminates.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The default message filter, which is created and registered automatically by the framework, is also automatically revoked.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colemessagefilter__setbusyreply"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleMessageFilter::SetBusyReply</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This function sets the application's "busy reply."</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nBusyReply<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A value from the <ph id="ph1">`SERVERCALL`</ph> enumeration, which is defined in COMPOBJ.H.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>It can have any one of the following values:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SERVERCALL_ISHANDLED<ept id="p1">**</ept> The application can accept calls but may fail in processing a particular call.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SERVERCALL_REJECTED<ept id="p1">**</ept> The application probably will never be able to process a call.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SERVERCALL_RETRYLATER<ept id="p1">**</ept> The application is temporarily in a state in which it cannot process a call.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>BeginBusyState<ept id="p1">](#colemessagefilter__beginbusystate)</ept> and <bpt id="p2">[</bpt>EndBusyState<ept id="p2">](#colemessagefilter__endbusystate)</ept> functions control the application's busy state.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>When an application has been made busy with a call to <ph id="ph1">`BeginBusyState`</ph>, it responds to calls from the OLE system DLLs with a value determined by the last setting of <ph id="ph2">`SetBusyReply`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The calling application uses this busy reply to determine what action to take.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>By default, the busy reply is <bpt id="p1">**</bpt>SERVERCALL_RETRYLATER<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This reply causes the calling application to retry the call as soon as possible.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colemessagefilter__setmessagependingdelay"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleMessageFilter::SetMessagePendingDelay</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Determines how long the calling application waits for a response from the called application before taking further action.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Number of milliseconds for the message-pending delay.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This function works in concert with <bpt id="p1">[</bpt>SetRetryReply<ept id="p1">](#colemessagefilter__setretryreply)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="colemessagefilter__setretryreply"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleMessageFilter::SetRetryReply</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Determines the calling application's action when it receives a busy response from a called application.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Number of milliseconds between retries.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When a called application indicates that it is busy, the calling application may decide to wait until the server is no longer busy, to retry right away, or to retry after a specified interval.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>It may also decide to cancel the call altogether.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The caller's response is controlled by the functions <ph id="ph1">`SetRetryReply`</ph> and <bpt id="p1">[</bpt>SetMessagePendingDelay<ept id="p1">](#colemessagefilter__setmessagependingdelay)</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetRetryReply`</ph> determines how long the calling application should wait between retries for a given call.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetMessagePendingDelay`</ph> determines how long the calling application waits for a response from the server before taking further action.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Usually the defaults are acceptable and do not need to be changed.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The framework retries the call every <ph id="ph1">`nRetryReply`</ph> milliseconds until the call goes through or the message-pending delay has expired.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A value of 0 for <ph id="ph1">`nRetryReply`</ph> specifies an immediate retry, and – 1 specifies cancellation of the call.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>When the message-pending delay has expired, the OLE "busy dialog box" (see <bpt id="p1">[</bpt>COleBusyDialog<ept id="p1">](../../mfc/reference/colebusydialog-class.md)</ept>) is displayed so that the user can choose to cancel or retry the call.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>EnableBusyDialog<ept id="p1">](#colemessagefilter__enablebusydialog)</ept> to enable or disable this dialog box.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>When a keyboard or mouse message is pending during a call and the call has timed out (exceeded the message-pending delay), the "not responding" dialog box is displayed.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>EnableNotRespondingDialog<ept id="p1">](#colemessagefilter__enablenotrespondingdialog)</ept> to enable or disable this dialog box.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Usually this state of affairs indicates that something has gone wrong and the user is getting impatient.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>When the dialogs are disabled, the current "retry reply" is always used for calls to busy applications.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget Class<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CCmdTarget Class<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>