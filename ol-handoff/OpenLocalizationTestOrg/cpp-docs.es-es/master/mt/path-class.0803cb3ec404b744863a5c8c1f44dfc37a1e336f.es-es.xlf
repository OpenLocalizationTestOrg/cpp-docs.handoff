<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">31afbf5ec6706ff58614ec8b97e5f4a0c158e57d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\path-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f289e5e0eec8e1c5ce0db73351d7174edabe3e4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a60ddf6f13844c4db6b932e2229858da16e548a8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>path Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>path Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>path<ept id="p1">**</ept> class stores an object of type string_type, called myname here for the purposes of exposition, suitable for use as a pathname.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>string_type is a synonym for basic_string&lt;value_type&gt;, where value_type is a synonym for char under Windows or wchar_t under Posix.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, and code examples, see <bpt id="p1">[</bpt>File System Navigation (C++)<ept id="p1">](../standard-library/file-system-navigation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>path::append</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The member functions append the specified sequence to mypath, converted and inserting a preferred_separator as needed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>path::assign</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The member functions replace mypath with the specified sequence, converted as needed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>path::begin</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Returns a path::iterator designating the first path element in the pathname, if present.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>path::c_str</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the first character in mypath.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>path::clear</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The member function executes mypath.clear()</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>path::compare</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first function returns mypath.compare(pval.native()).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The second function returns mypath.compare(str).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The third function returns mypath.compare(ptr).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>path::concat</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The member functions append the specified sequence to mypath, converted (but not inserting a separator) as needed.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>path::const_iterator</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The type is a synonym for iterator.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>path::empty</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns mypath.empty().</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>path::end</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns an end-of-sequence iterator of type iterator.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>path::extension</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns the suffix of filename() X such that:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If X == path(".") &amp;#124;&amp;#124; X == path("..") or if X contains no dot, the suffix is empty.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Otherwise, the suffix begins with (and includes) the rightmost dot.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>path::filename</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns the root directory component of myname, specifically <ph id="ph1">`empty()  path() : *--end()`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The component may be empty.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>path::generic_string</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`this-&gt;string&lt;Elem, Traits, Alloc&gt;(_Al)`</ph> with (under Windows) any backslash converted to a forward slash.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>path::generic_u16string</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns u16string() with (under Windows) any backslash converted to a forward slash.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>path::generic_u32string</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns u32string() with (under Windows) any backslash converted to a forward slash.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>path::generic_u8string</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns u8string() with (under Windows) any backslash converted to a forward slash.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>path::generic_wstring</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns wstring() with (under Windows) any backslash converted to a forward slash.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>path::has_extension</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns !extension().empty().</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>path::has_filename</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns !filename().empty().</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>path::has_parent_path</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns !parent_path().empty().</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>path::has_relative_path</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns !relative_path().empty().</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>path::has_root_directory</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns !root_directory().empty().</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>path::has_root_name</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns !root_name().empty().</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>path::has_root_path</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns !root_path().empty().</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>path::has_stem</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns !stem().empty().</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>path::is_absolute</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For Windows, the function returns has_root_name() &amp;&amp; has_root_directory().</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For Posix, the function returns has_root_directory().</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>path::is_relative</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Returns !is_absolute().</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>path::iterator</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>class iterator</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>{// bidirectional iterator for path</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>typedef bidirectional_iterator_tag iterator_category;</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>typedef path_type value_type;</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>typedef ptrdiff_t difference_type;</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>typedef const value_type *pointer;</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>typedef const value_type&amp; reference;</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>.....</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>};</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The class describes a bidirectional constant iterator that designates the path components of myname in the sequence:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>the root name, if present</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>the root directory, if present</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>the remaining directory elements of the parent path, if present, ending withthe filename, if present</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For pval an object of type path:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>path::iterator X = pval.begin() designates the first path element in the pathname, if present.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>X == pval.end() is true when X points just past the end of the sequence of components.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>*X returns a string that matches the current component</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>++X designates the next component in the sequence, if present.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>--X designates the preceding component in the sequence, if present.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Altering myname invalidates all iterators designating elements in myname.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>path::make_preferred</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The member function converts each separator to a preferred_separator as needed.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>path::native</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns myname.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>path::operator=</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The first member operator copies right.myname to myname.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The second member operator moves right.myname to myname.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The third member operator behaves the same as *this = path(source).</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>path::operator+=</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The member functions behave the same as the following corresponding expressions:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>concat(right);</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>concat(path(str));</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>concat(ptr);</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>concat(string_type(1, elem));</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>concat(source);</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>concat(path(basic_string<ph id="ph1">\&lt;</ph>Elem&gt;(1, elem)));</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>path::operator/=</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The member functions behave the same as the following corresponding expressions:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>append(right);</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>append(source);</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>path::operator string_type</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>```  operator string_type() const;</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>path parent_path() const;</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>path();</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>path(const path&amp; right);</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>path(path&amp;&amp; right) noexcept;</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>template <ph id="ph1">&lt;class Source&gt;</ph></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>path(const Source&amp; source);</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>template <ph id="ph1">&lt;class Source&gt;</ph></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>path(const Source&amp; source, const locale&amp; loc);</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>template <ph id="ph1">&lt;class InIt&gt;</ph></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>path(InIt first, InIt last);</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>template <ph id="ph1">&lt;class InIt&gt;</ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>path(InIt first, InIt last, const locale&amp; loc);</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>if _WIN32_C_LIB</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>static constexpr value_type preferred_separator == L'<ph id="ph1">\\</ph>';</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>else // assume Posix</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>static constexpr value_type preferred_separator == '/';</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>endif // filesystem model now defined</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>path relative_path() const;</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>path&amp; remove_filename();</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>path&amp; replace_extension(const path&amp; newext = path());</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>path&amp; replace_filename(const path&amp; pval);</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>remove_filename();</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>this /= pval; return (<ept id="p1">*</ept>this);</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>path root_directory() const;</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>path root_name() const;</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>path root_path() const;</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>path stem() const;</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>template &lt;class Elem, class Traits = char_traits<ph id="ph1">&lt;Elem&gt;</ph>, class Alloc = allocator<ph id="ph2">&lt;Elem&gt;</ph><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>basic_string&lt;Elem, Traits, Alloc&gt; string(const Alloc&amp; al = Alloc()) const; string string() const;</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>typedef basic_string&lt;value_type&gt; string_type;</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>void swap(path&amp; right) noexcept;</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>u16string u16string() const;</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>u32string u32string() const;</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>string u8string() const;</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>if _WIN32_C_LIB</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>typedef wchar_t value_type;</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>else // assume Posix</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>typedef char value_type;</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>endif // filesystem model now defined</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>wstring wstring() const;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>