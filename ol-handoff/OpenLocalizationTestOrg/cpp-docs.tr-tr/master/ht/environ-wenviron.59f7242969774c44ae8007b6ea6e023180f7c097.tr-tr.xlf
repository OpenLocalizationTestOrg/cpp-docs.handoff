<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a36e166b6d468ee60883f9d64d38a391febac2ee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\environ-wenviron.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5689fc831d9b9ec307bd267d1b5ff3e4a6a5529</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc87f6b26ae65313b6477516f859da390c887030</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_environ, _wenviron | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_environ, _wenviron</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_environ`</ph> variable is a pointer to an array of pointers to the multibyte-character strings that constitute the process environment.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This global variable has been deprecated for the more secure functional versions <bpt id="p1">[</bpt>getenv_s, _wgetenv_s<ept id="p1">](../c-runtime-library/reference/getenv-s-wgetenv-s.md)</ept> and <bpt id="p2">[</bpt>_putenv_s, _wputenv_s<ept id="p2">](../c-runtime-library/reference/putenv-s-wputenv-s.md)</ept>, which should be used in place of the global variable.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>is declared in Stdlib.h.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This API cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CRT functions not supported with /ZW<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In a program that uses the <ph id="ph1">`main`</ph> function, <ph id="ph2">`_environ`</ph> is initialized at program startup according to settings taken from the operating-system environment.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The environment consists of one or more entries of the form</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`putenv_s`</ph> use the <ph id="ph2">`_environ`</ph> variable to access and modify the environment table.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`_putenv`</ph> is called to add or delete environment settings, the environment table changes size.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Its location in memory may also change, depending on the program's memory requirements.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`_environ`</ph> is automatically adjusted accordingly.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_wenviron`</ph> variable, declared in Stdlib.h as:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>is a wide-character version of <ph id="ph1">`_environ`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In a program that uses the <ph id="ph1">`wmain`</ph> function, <ph id="ph2">`_wenviron`</ph> is initialized at program startup according to settings taken from the operating-system environment.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In a program that uses <ph id="ph1">`main`</ph>, <ph id="ph2">`_wenviron`</ph> is initially <ph id="ph3">`NULL`</ph> because the environment is composed of multibyte-character strings.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>On the first call to <ph id="ph1">`_wgetenv`</ph> or <ph id="ph2">`_wputenv`</ph>, a corresponding wide-character string environment is created and is pointed to by <ph id="ph3">`_wenviron`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Similarly, in a program that uses <ph id="ph1">`wmain`</ph>, <ph id="ph2">`_environ`</ph> is initially <ph id="ph3">`NULL`</ph> because the environment is composed of wide-character strings.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>On the first call to <ph id="ph1">`_getenv`</ph> or <ph id="ph2">`_putenv`</ph>, a corresponding multibyte-character string environment is created and is pointed to by <ph id="ph3">`_environ`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When two copies of the environment (MBCS and Unicode) exist simultaneously in a program, the run-time system must maintain both copies, resulting in slower execution time.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, whenever you call <ph id="ph1">`_putenv`</ph>, a call to <ph id="ph2">`_wputenv`</ph> is also executed automatically, so that the two environment strings correspond.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In rare instances, when the run-time system is maintaining both a Unicode version and a multibyte version of the environment, these two environment versions might not correspond exactly.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is because, although any unique multibyte-character string maps to a unique Unicode string, the mapping from a unique Unicode string to a multibyte-character string is not necessarily unique.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Therefore, two distinct Unicode strings might map to the same multibyte string.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Polling <ph id="ph1">`_environ`</ph> in a Unicode context is meaningless when <bpt id="p1">[</bpt>/MD<ept id="p1">](../build/reference/md-mt-ld-use-run-time-library.md)</ept> or <ph id="ph2">`/MDd`</ph> linkage is used.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For the CRT DLL, the type (wide or multibyte) of the program is unknown.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Only the multibyte type is created because that is the most likely scenario.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following pseudo-code illustrates how this can happen.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the notation used for this example, the character strings are not C string literals; rather, they are placeholders that represent Unicode environment string literals in the <ph id="ph1">`_wputenv`</ph> call and multibyte environment strings in the <ph id="ph2">`putenv`</ph> call.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The character placeholders '<ph id="ph1">`x`</ph>' and '<ph id="ph2">`y`</ph>' in the two distinct Unicode environment strings do not map uniquely to characters in the current MBCS.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Instead, both map to some MBCS character '<ph id="ph1">`z`</ph>' that is the default result of the attempt to convert the strings.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Thus, in the multibyte environment, the value of "<ph id="ph1">`env_var_z`</ph>" after the first implicit call to <ph id="ph2">`putenv`</ph> would be "<ph id="ph3">`string1`</ph>", but this value would be overwritten on the second implicit call to <ph id="ph4">`putenv`</ph>, when the value of "<ph id="ph5">`env_var_z`</ph>" is set to "<ph id="ph6">`string2`</ph>".</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Unicode environment (in <ph id="ph1">`_wenviron`</ph>) and the multibyte environment (in <ph id="ph2">`_environ`</ph>) would therefore differ following this series of calls.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Global Variables</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>getenv, _wgetenv</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>getenv_s, _wgetenv_s</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>_putenv, _wputenv</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>_putenv_s, _wputenv_s</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>