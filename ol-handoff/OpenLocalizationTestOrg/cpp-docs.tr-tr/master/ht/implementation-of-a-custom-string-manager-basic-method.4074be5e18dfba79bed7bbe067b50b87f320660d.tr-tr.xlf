<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e5c0165253c5c9e70b71734a1c93880221daa3e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\implementation-of-a-custom-string-manager-basic-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff788854877e5204ce76475f29347e658e29ae4c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee9f566e6c70382e14bb870b973cc4078b692b7c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implementation of a Custom String Manager (Basic Method) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implementation of a Custom String Manager (Basic Method)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The easiest way to customize the memory allocation scheme for string data is to use the ATL-provided <bpt id="p1">**</bpt>CAtlStringMgr<ept id="p1">**</ept> class but provide your own memory allocation routines.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The constructor for <bpt id="p1">**</bpt>CAtlStringMgr<ept id="p1">**</ept> takes a single parameter: a pointer to an <ph id="ph1">`IAtlMemMgr`</ph> object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>is an abstract base class that provides a generic interface to a heap.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`IAtlMemMgr`</ph> interface, the <bpt id="p1">**</bpt>CAtlStringMgr<ept id="p1">**</ept> allocates, reallocates, and frees the memory used to store string data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can either implement the <ph id="ph1">`IAtlMemMgr`</ph> interface yourself, or use one of the five ATL-provided memory manager classes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The ATL-provided memory managers simply wrap existing memory allocation facilities:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCRTHeap<ept id="p1">](../atl/reference/ccrtheap-class.md)</ept> Wraps the standard CRT heap functions (<bpt id="p2">[</bpt>malloc<ept id="p2">](../c-runtime-library/reference/malloc.md)</ept>, <bpt id="p3">[</bpt>free<ept id="p3">](../c-runtime-library/reference/free.md)</ept>, and <bpt id="p4">[</bpt>realloc<ept id="p4">](../c-runtime-library/reference/realloc.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWin32Heap<ept id="p1">](../atl/reference/cwin32heap-class.md)</ept> Wraps a Win32 heap handle, using <bpt id="p2">[</bpt>HeapAlloc<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/aa366597)</ept>, <bpt id="p3">[</bpt>HeapFree<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/aa366701)</ept>, and <bpt id="p4">[</bpt>HeapRealloc<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/aa366704)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLocalHeap<ept id="p1">](../atl/reference/clocalheap-class.md)</ept> Wraps the Win32 APIs: <bpt id="p2">[</bpt>LocalAlloc<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/aa366723)</ept>, <bpt id="p3">[</bpt>LocalFree<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/aa366730)</ept>, and <bpt id="p4">[</bpt>LocalRealloc<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/aa366742)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CGlobalHeap<ept id="p1">](../atl/reference/cglobalheap-class.md)</ept> Wraps the Win32 APIs: <bpt id="p2">[</bpt>GlobalAlloc<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/aa366574)</ept>, <bpt id="p3">[</bpt>GlobalFree<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/aa366579)</ept>, and <bpt id="p4">[</bpt>GlobalRealloc<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/aa366590)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComHeap<ept id="p1">](../atl/reference/ccomheap-class.md)</ept> Wraps the COM Task Allocator APIs: <bpt id="p2">[</bpt>CoTaskMemAlloc<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms692727)</ept>, <bpt id="p3">[</bpt>CoTaskMemFree<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms680722)</ept>, and <bpt id="p4">[</bpt>CoTaskMemRealloc<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/ms687280)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For the purpose of string memory management, the most useful class is <ph id="ph1">`CWin32Heap`</ph> because it allows you to create multiple independent heaps.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to use a separate heap just for strings, you could do the following:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#180</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To use this private string manager to manage memory for a <ph id="ph1">`CString`</ph> variable, pass a pointer to the manager as a parameter to the <ph id="ph2">`CString`</ph> variable's constructor:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#181</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Memory Management with CStringT</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>