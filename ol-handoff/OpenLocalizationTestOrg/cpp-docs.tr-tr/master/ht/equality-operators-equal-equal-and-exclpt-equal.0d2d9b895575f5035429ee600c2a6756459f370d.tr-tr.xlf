<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28abda8bf3c11ec804984f53f9f926b6d764d6a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\equality-operators-equal-equal-and-exclpt-equal.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8621214a338ece0a6abea2c6582daf1c432cec8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6edb5e4a8431646e9ecc58d666c450ee78a1b1e2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Equality Operators: == and != | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Equality Operators: == and !=</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The binary equality operators compare their operands for strict equality or inequality.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The equality operators, equal to (<ph id="ph1">`==`</ph>) and not equal to (<ph id="ph2">`!=`</ph>), have lower precedence than the relational operators, but they behave similarly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The result type for these operators is <ph id="ph1">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The equal-to operator (<ph id="ph1">`==`</ph>) returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> (1) if both operands have the same value; otherwise, it returns <bpt id="p2">**</bpt>false<ept id="p2">**</ept> (0).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The not-equal-to operator (<ph id="ph1">`!=`</ph>) returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the operands do not have the same value; otherwise, it returns <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Operator Keyword for !=</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`not_eq`</ph> operator is the text equivalent of <ph id="ph2">`!=`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>There are two ways to access the <ph id="ph1">`not_eq`</ph> operator in your programs: include the header file <ph id="ph2">`iso646.h`</ph>, or compile with the <bpt id="p1">[</bpt>/Za<ept id="p1">](../build/reference/za-ze-disable-language-extensions.md)</ept> (Disable language extensions) compiler option.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Equality operators can compare pointers to members of the same type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In such a comparison, pointer-to-member conversions are performed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Pointers to members can also be compared to a constant expression that evaluates to 0.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Expressions with Binary Operators</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>C++ Built-in Operators, Precedence and Associativity</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>C Relational and Equality Operators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>