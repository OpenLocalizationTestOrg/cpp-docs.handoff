<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbca3755c21e88b22a2c6b584e8f90015445f3ac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\zc-implicitnoexcept-implicit-exception-specifiers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d00854a3b76cd0ea41d4781c8e6113e6f55151a4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98164775033730c5f59e275f3f5c68b7ae70aa53</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>-Zc:implicitNoexcept (Implicit Exception Specifiers) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/Zc:implicitNoexcept (Implicit Exception Specifiers)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When the <bpt id="p1">**</bpt>/Zc:implicitNoexcept<ept id="p1">**</ept> option is specified, the compiler adds an implicit <bpt id="p2">[</bpt>noexcept<ept id="p2">](../../cpp/noexcept-cpp.md)</ept> exception specifier to compiler-defined special member functions and to user-defined destructors and deallocators.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>/Zc:implicitNoexcept<ept id="p1">**</ept> is enabled to conform to the ISO C++11 standard.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Turning this option off disables implicit <ph id="ph1">`noexcept`</ph> on user-defined destructors and dealloacators and compiler-defined special member functions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By default, and if <bpt id="p1">**</bpt>/Zc:implicitNoexcept<ept id="p1">**</ept> is specified, the compiler follows section 15.4 of the ISO C++11 standard and implicitly adds a <ph id="ph1">`noexcept`</ph> exception specifier to each implicitly-declared or explicitly defaulted special member function—the default constructor, copy constructor, move constructor, destructor, copy assignment operator, or move assignment operator—and each user-defined destructor or deallocator function.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A user-defined deallocator has an implicit <ph id="ph1">`noexcept(true)`</ph> exception specifier.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For user-defined destructors, the implicit exception specifier is <ph id="ph1">`noexcept(true)`</ph> unless a contained member class or base class has a destructor that is not <ph id="ph2">`noexcept(true)`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For compiler-generated special member functions, if any function directly invoked by this function is effectively <ph id="ph1">`noexcept(false)`</ph>, the implicit exception specifier is <ph id="ph2">`noexcept(false)`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Otherwise, the implicit exception specifier is <ph id="ph1">`noexcept(true)`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The compiler does not generate an implicit exception specifier for functions declared by using explicit <ph id="ph1">`noexcept`</ph> or <ph id="ph2">`throw`</ph> specifiers or a <ph id="ph3">`__declspec(nothrow)`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the option is disabled by specifying <bpt id="p1">**</bpt>/Zc:implicitNoexcept-<ept id="p1">**</ept>, no implicit exception specifiers are generated by the compiler.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This behavior is the same as Visual Studio 2013, where destructors and deallocators that did not have exception specifiers could have <ph id="ph1">`throw`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default, and when <bpt id="p1">**</bpt>/Zc:implicitNoexcept<ept id="p1">**</ept> is specified, if a <ph id="ph1">`throw`</ph> statement is encountered at run time in a function with an implicit <ph id="ph2">`noexcept(true)`</ph> specifier, it causes an immediate invocation of <ph id="ph3">`std::terminate`</ph>, and normal unwinding behavior for exception handlers is not guaranteed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To help identify this situation, the compiler generates <bpt id="p1">[</bpt>Compiler Warning (level 1) C4297<ept id="p1">](../../error-messages/compiler-warnings/compiler-warning-level-1-c4297.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`throw`</ph> is intentional, we recommend you change your function declaration to have an explicit <ph id="ph2">`noexcept(false)`</ph> specifier instead of using <bpt id="p1">**</bpt>/Zc:implicitNoexcept-<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This sample shows how a user-defined destructor that has no explicit exception specifier behaves when the <bpt id="p1">**</bpt>/Zc:implicitNoexcept<ept id="p1">**</ept> option is set or disabled.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To show the behavior when set, compile by using <ph id="ph1">`cl /EHsc /W4 implicitNoexcept.cpp`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To show the behavior when disabled, compile by using <ph id="ph1">`cl /EHsc /W4 /Zc:implicitNoexcept- implicitNoexcept.cpp`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When compiled by using the default setting <bpt id="p1">**</bpt>/Zc:implicitNoexcept<ept id="p1">**</ept>, the sample generates this output:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When compiled by using the setting <bpt id="p1">**</bpt>/Zc:implicitNoexcept-<ept id="p1">**</ept>, the sample generates this output:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information about conformance issues in Visual C++, see <bpt id="p1">[</bpt>Nonstandard Behavior<ept id="p1">](../../cpp/nonstandard-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To set this compiler option in the Visual Studio development environment</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Open the project's <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Working with Project Properties<ept id="p1">](../../ide/working-with-project-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>C/C++<ept id="p1">**</ept> folder.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Command Line<ept id="p1">**</ept> property page.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Modify the <bpt id="p1">**</bpt>Additional Options<ept id="p1">**</ept> property to include <bpt id="p2">**</bpt>/Zc:implicitNoexcept<ept id="p2">**</ept> or <bpt id="p3">**</bpt>/Zc:implicitNoexcept-<ept id="p3">**</ept> and then choose <bpt id="p4">**</bpt>OK<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>/Zc (Conformance)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>noexcept</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Exception Specifications (throw)</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>terminate</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>