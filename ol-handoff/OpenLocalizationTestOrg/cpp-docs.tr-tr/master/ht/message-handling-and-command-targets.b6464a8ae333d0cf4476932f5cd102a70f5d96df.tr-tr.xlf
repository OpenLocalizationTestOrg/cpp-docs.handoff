<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4927a5c72b3a3609ed7fe22cccbe8709b703d0aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\message-handling-and-command-targets.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b3c6b45bdab0db84f325b386343a56aa94492af8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b66f0ed9af4a0282aa02e0c151b8014a09fca927</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Message Handling and Command Targets | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Message Handling and Command Targets</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The command dispatch interface <ph id="ph1">`IOleCommandTarget`</ph> defines a simple and extensible mechanism to query and execute commands.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This mechanism is simpler than Automation's <ph id="ph1">`IDispatch`</ph> because it relies entirely on a standard set of commands; commands rarely have arguments, and no type information is involved (type safety is diminished for command arguments as well).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the command dispatch interface design, each command belongs to a "command group" which is itself identified with a <bpt id="p1">**</bpt>GUID<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Therefore, anyone can define a new group and define all the commands within that group without any need to coordinate with Microsoft or any other vendor.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>(This is essentially the same means of definition as a <bpt id="p1">**</bpt>dispinterface<ept id="p1">**</ept> plus <bpt id="p2">**</bpt>dispIDs<ept id="p2">**</ept> in Automation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There is overlap here, although this command routing mechanism is only for command routing and not for scripting/programmability on a large scale as Automation handles.)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>handles the following scenarios:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When an object is in-place activated, only the object's toolbars are typically displayed and the object's toolbars may have buttons for some of the container commands like <bpt id="p1">**</bpt>Print<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Print Preview<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>, <ph id="ph1">`New`</ph>, <bpt id="p4">**</bpt>Zoom<ept id="p4">**</ept>, and others.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>(In-place activation standards recommend that objects remove such buttons from their toolbars, or at least disable them.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This design allows those commands to be enabled and yet routed to the right handler.) Currently, there is no mechanism for the object to dispatch these commands to the container.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When an active document is embedded in an active document container (such as Office Binder), the container may need to send commands such <bpt id="p1">**</bpt>Print<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Page Setup<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Properties<ept id="p3">**</ept>, and others to the contained active document.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This simple command routing could be handled through existing Automation standards and <ph id="ph1">`IDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, the overhead involved with <ph id="ph1">`IDispatch`</ph> is more than is necessary here, so <ph id="ph2">`IOleCommandTarget`</ph> provides a simpler means to achieve the same ends:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`QueryStatus`</ph> method here tests whether a particular set of commands, the set being identified with a <bpt id="p1">**</bpt>GUID<ept id="p1">**</ept>, is supported.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This call fills an array of <bpt id="p1">**</bpt>OLECMD<ept id="p1">**</ept> values (structures) with the supported list of commands as well as returning text describing the name of a command and/or status information.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When the caller wishes to invoke a command, it can pass the command (and the set <bpt id="p1">**</bpt>GUID<ept id="p1">**</ept>) to <bpt id="p2">**</bpt>Exec<ept id="p2">**</ept> along with options and arguments, getting back a return value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Active Document Containers</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>