<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a62a0d181106d3c1386bce3114e54deb8a2ba8b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\crecordview-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93217fa6c9d2659c16e8aaad4776106561303580</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">498a88fb0a1b16303fdecba0613c8938b6a4516a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CRecordView Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CRecordView Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A view that displays database records in controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Protected Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CRecordView::CRecordView</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CRecordView`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CRecordView::IsOnFirstRecord</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the current record is the first record in the associated recordset.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CRecordView::IsOnLastRecord</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the current record is the last record in the associated recordset.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CRecordView::OnGetRecordset</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Returns a pointer to an object of a class derived from <ph id="ph1">`CRecordset`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>ClassWizard overrides this function for you and creates the recordset if necessary.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CRecordView::OnMove</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CRecordView::OnMove</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the current record has changed, updates it on the data source, then moves to the specified record (next, previous, first, or last).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The view is a form view directly connected to a <ph id="ph1">`CRecordset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The view is created from a dialog template resource and displays the fields of the <ph id="ph1">`CRecordset`</ph> object in the dialog template's controls.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CRecordView`</ph> object uses dialog data exchange (DDX) and record field exchange (RFX) to automate the movement of data between the controls on the form and the fields of the recordset.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>also supplies a default implementation for moving to the first, next, previous, or last record and an interface for updating the record currently on view.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you are working with the Data Access Objects (DAO) classes rather than the Open Database Connectivity (ODBC) classes, use class <bpt id="p1">[</bpt>CDaoRecordView<ept id="p1">](../../mfc/reference/cdaorecordview-class.md)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Overview: Database Programming<ept id="p1">](../../data/data-access-programming-mfc-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The most common way to create your record view is with the Application Wizard.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Tge Application Wizard creates both the record view class and its associated recordset class as part of your skeleton starter application.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you don't create the record view class with the Application Wizard, you can create it later with ClassWizard.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you simply need a single form, the Application Wizard approach is easier.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>ClassWizard lets you decide to use a record view later in the development process.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Using ClassWizard to create a record view and a recordset separately and then connect them is the most flexible approach because it gives you more control in naming the recordset class and its .H/.CPP files.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This approach also lets you have multiple record views on the same recordset class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To make it easy for end-users to move from record to record in the record view, the Application Wizard creates menu (and optionally toolbar) resources for moving to the first, next, previous, or last record.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you create a record view class with ClassWizard, you need to create these resources yourself with the menu and bitmap editors.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For information about the default implementation for moving from record to record, see <ph id="ph1">`IsOnFirstRecord`</ph> and <ph id="ph2">`IsOnLastRecord`</ph> and the article <bpt id="p1">[</bpt>Using a Record View<ept id="p1">](../../data/using-a-record-view-mfc-data-access.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>keeps track of the user's position in the recordset so that the record view can update the user interface.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When the user moves to either end of the recordset, the record view disables user interface objects — such as menu items or toolbar buttons — for moving further in the same direction.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about declaring and using your record view and recordset classes, see "Designing and Creating a Record View" in the article <bpt id="p1">[</bpt>Record Views<ept id="p1">](../../data/record-views-mfc-data-access.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about how record views work and how to use them, see the article <bpt id="p1">[</bpt>Using a Record View<ept id="p1">](../../data/using-a-record-view-mfc-data-access.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CView</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CScrollView</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CFormView</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdb.h</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CRecordView::CRecordView</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you create an object of a type derived from <ph id="ph1">`CRecordView`</ph>, call either form of the constructor to initialize the view object and identify the dialog resource on which the view is based.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Contains a null-terminated string that is the name of a dialog template resource.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Contains the ID number of a dialog template resource.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can either identify the resource by name (pass a string as the argument to the constructor) or by its ID (pass an unsigned integer as the argument).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Using a resource ID is recommended.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Your derived class <bpt id="p1">*</bpt>must<ept id="p1">*</ept> supply its own constructor.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the constructor of your derived class, call the constructor <ph id="ph1">`CRecordView::CRecordView`</ph> with the resource name or ID as an argument, as shown in the example below.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CRecordView::OnInitialUpdate<ept id="p1">**</ept> calls <ph id="ph1">`UpdateData`</ph>, which calls <ph id="ph2">`DoDataExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This initial call to <ph id="ph1">`DoDataExchange`</ph> connects <ph id="ph2">`CRecordView`</ph> controls (indirectly) to <ph id="ph3">`CRecordset`</ph> field data members created by ClassWizard.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>These data members cannot be used until after you call the base class <bpt id="p1">**</bpt>CFormView::OnInitialUpdate<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you use ClassWizard, the wizard defines an <ph id="ph1">`enum`</ph> value <ph id="ph2">`CRecordView::IDD`</ph>, specifies it in the class declaration, and uses it in the member initialization list for the constructor.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#32</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CRecordView::IsOnFirstRecord</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the current record is the first record in the recordset object associated with this record view.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Nonzero if the current record is the first record in the recordset; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This function is useful for writing your own implementations of default command update handlers written by ClassWizard.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the user moves to the first record, the framework disables any user interface objects you have for moving to the first or the previous record.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CRecordView::IsOnLastRecord</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the current record is the last record in the recordset object associated with this record view.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Nonzero if the current record is the last record in the recordset; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This function is useful for writing your own implementations of the default command update handlers that ClassWizard writes to support a user interface for moving from record to record.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The result of this function is reliable except that the view cannot detect the end of the recordset until the user has moved past it.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The user must move beyond the last record before the record view can tell that it must disable any user interface objects for moving to the next or last record.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If the user moves past the last record and then moves back to the last record (or before it), the record view can track the user's position in the recordset and disable user interface objects correctly.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>is also unreliable after a call to the implementation function <bpt id="p1">**</bpt>OnRecordLast<ept id="p1">**</ept>, which handles the <ph id="ph1">`ID_RECORD_LAST`</ph> command, or <ph id="ph2">`CRecordset::MoveLast`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CRecordView::OnGetRecordset</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <ph id="ph1">`CRecordset`</ph>-derived object associated with the record view.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CRecordset`</ph>-derived object if the object was successfully created; otherwise a <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You must override this member function to construct or obtain a recordset object and return a pointer to it.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If you declare your record view class with ClassWizard, the wizard writes a default override for you.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>ClassWizard's default implementation returns the recordset pointer stored in the record view if one exists.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If not, it constructs a recordset object of the type you specified with ClassWizard and calls its <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> member function to open the table or run the query, and then returns a pointer to the object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information and examples, see the article <bpt id="p1">[</bpt>Record Views: Using a Record View<ept id="p1">](../../data/using-a-record-view-mfc-data-access.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CRecordView::OnMove</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Call this member function to move to a different record in the recordset and display its fields in the controls of the record view.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>One of the following standard command ID values:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Move to the first record in the recordset.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Move to the last record in the recordset.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Move to the next record in the recordset.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Move to the previous record in the recordset.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Nonzero if the move was successful; otherwise 0 if the move request was denied.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The default implementation calls the appropriate <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> member function of the <ph id="ph1">`CRecordset`</ph> object associated with the record view.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`OnMove`</ph> updates the current record on the data source if the user has changed it in the record view.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The Application Wizard creates a menu resource with First Record, Last Record, Next Record, and Previous Record menu items.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If you select the Dockable Toolbar option, the Application Wizard also creates a toolbar with buttons corresponding to these commands.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If you move past the last record in the recordset, the record view continues to display the last record.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If you move backward past the first record, the record view continues to display the first record.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`OnMove`</ph> throws an exception if the recordset has no records.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Call the appropriate user interface update handler function — <bpt id="p1">**</bpt>OnUpdateRecordFirst<ept id="p1">**</ept>, <bpt id="p2">**</bpt>OnUpdateRecordLast<ept id="p2">**</ept>, <bpt id="p3">**</bpt>OnUpdateRecordNext<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>OnUpdateRecordPrev<ept id="p4">**</ept> — before the corresponding move operation to determine whether the recordset has any records.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>CFormView Class</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CRecordset Class</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CFormView Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>