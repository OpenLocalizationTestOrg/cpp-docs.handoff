<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37543250aa147172df97f9a89eff8abe8dbd2428</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn065-dual-interface-support-for-ole-automation-servers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29073704c641e527504028c04388df346c57c915</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc4f994dac502fa3633294d9f6974c865f791567</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN065: Dual-Interface Support for OLE Automation Servers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN065: Dual-Interface Support for OLE Automation Servers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following technical note has not been updated since it was first included in the online documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, some procedures and topics might be out of date or incorrect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the latest information, it is recommended that you search for the topic of interest in the online documentation index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This note discusses how to add dual-interface support to an MFC-based OLE Automation server application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ACDUAL<ept id="p1">](../visual-cpp-samples.md)</ept> sample illustrates dual-interface support, and the example code in this note is taken from ACDUAL.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The macros described in this note, such as <ph id="ph1">`DECLARE_DUAL_ERRORINFO`</ph>, <ph id="ph2">`DUAL_ERRORINFO_PART`</ph>, and <ph id="ph3">`IMPLEMENT_DUAL_ERRORINFO`</ph>, are part of the ACDUAL sample and can be found in MFCDUAL.H.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Dual Interfaces</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Although OLE Automation allows you to implement an <ph id="ph1">`IDispatch`</ph> interface, a VTBL interface, or a dual interface (which encompasses both), Microsoft strongly recommends that you implement dual interfaces for all exposed OLE Automation objects.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Dual interfaces have significant advantages over <ph id="ph1">`IDispatch`</ph>-only or VTBL-only interfaces:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Binding can take place at compile time through the VTBL interface, or at run time through <ph id="ph1">`IDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>OLE Automation controllers that can use the VTBL interface may benefit from improved performance.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Existing OLE Automation controllers that use the <ph id="ph1">`IDispatch`</ph> interface will continue to work.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The VTBL interface is easier to call from C++.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Dual interfaces are required for compatibility with Visual Basic object support features.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Adding Dual-Interface Support to a CCmdTarget-Based Class</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A dual interface is really just a custom interface derived from <ph id="ph1">`IDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The most straightforward way to implement dual-interface support in a <ph id="ph1">`CCmdTarget`</ph>-based class is to first implement the normal dispatch interface on your class using MFC and ClassWizard, then add the custom interface later.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For the most part, your custom interface implementation will simply delegate back to the MFC <ph id="ph1">`IDispatch`</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>First, modify the ODL file for your server to define dual interfaces for your objects.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To define a dual interface, you must use an interface statement, instead of the <ph id="ph1">`DISPINTERFACE`</ph> statement that the Visual C++ wizards generate.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Rather than removing the existing <ph id="ph1">`DISPINTERFACE`</ph> statement, add a new interface statement.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>By retaining the <ph id="ph1">`DISPINTERFACE`</ph> form, you can continue to use ClassWizard to add properties and methods to your object, but you must add the equivalent properties and methods to your interface statement.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An interface statement for a dual interface must have the <bpt id="p1">**</bpt>OLEAUTOMATION<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DUAL<ept id="p2">**</ept> attributes, and the interface must be derived from <ph id="ph1">`IDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>GUIDGEN<ept id="p1">](../visual-cpp-samples.md)</ept> sample to create a <bpt id="p2">**</bpt>IID<ept id="p2">**</ept> for the dual interface:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Once you have the interface statement in place, start adding entries for the methods and properties.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For dual interfaces, you need to rearrange the parameter lists so that your methods and property accessor functions in the dual interface return an <ph id="ph1">`HRESULT`</ph> and pass their return values as parameters with the attributes <ph id="ph2">`[retval,out]`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Remember that for properties, you will need to add both a read (<ph id="ph1">`propget`</ph>) and write (<ph id="ph2">`propput`</ph>) access function with the same id.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After your methods and properties are defined, you need to add a reference to the interface statement in your coclass statement.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Once your ODL file has been updated, use MFC's interface map mechanism to define an implementation class for the dual interface in your object class and make the corresponding entries in MFC's <ph id="ph1">`QueryInterface`</ph> mechanism.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You need one entry in the <ph id="ph1">`INTERFACE_PART`</ph> block for each entry in the interface statement of the ODL, plus the entries for a dispatch interface.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Each ODL entry with the <bpt id="p1">**</bpt>propput<ept id="p1">**</ept> attribute needs a function named <ph id="ph1">`put_propertyname`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each entry with the <bpt id="p1">**</bpt>propget<ept id="p1">**</ept> attribute needs a function named <ph id="ph1">`get_propertyname`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To define an implementation class for your dual interface, add a <ph id="ph1">`DUAL_INTERFACE_PART`</ph> block to your object class definition.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To connect the dual interface to MFC's <bpt id="p1">[</bpt>QueryInterface<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms687230)</ept> mechanism, add an <ph id="ph1">`INTERFACE_PART`</ph> entry to the interface map:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Next, you need to fill in the implementation of the interface.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For the most part, you will be able to delegate to the existing MFC <ph id="ph1">`IDispatch`</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For your object's methods and property accessor functions, you need to fill in the implementation.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Your method and property functions can generally delegate back to the methods generated using ClassWizard.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>However, if you set up properties to access variables directly, you need to write the code to get/put the value into the variable.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Passing Dual-Interface Pointers</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Passing your dual-interface pointer isn't straightforward, especially if you need to call <ph id="ph1">`CCmdTarget::FromIDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>only works on MFC's <ph id="ph1">`IDispatch`</ph> pointers.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>One way to work around this is to query for the original <ph id="ph1">`IDispatch`</ph> pointer set up by MFC and pass that pointer to functions that need it.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Before passing a pointer back through the dual-interface method, you might need to convert it from the MFC <ph id="ph1">`IDispatch`</ph> pointer to your dual-interface pointer.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Registering the Application's Type Library</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>AppWizard does not generate code to register an OLE Automation server application's type library with the system.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>While there are other ways to register the type library, it is convenient to have the application register the type library when it is updating its OLE type information, that is, whenever the application is run stand-alone.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To register the application's type library whenever the application is run stand alone:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Include AFXCTL.H in your standard includes header file, STDAFX.H, to access the definition of the <ph id="ph1">`AfxOleRegisterTypeLib`</ph> function.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In your application's <ph id="ph1">`InitInstance`</ph> function, locate the call to <ph id="ph2">`COleObjectFactory::UpdateRegistryAll`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Following this call, add a call to <ph id="ph1">`AfxOleRegisterTypeLib`</ph>, specifying the <bpt id="p1">**</bpt>LIBID<ept id="p1">**</ept> corresponding to your type library, along with the name of your type library:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>// When a server application is launched stand-alone, it is a good idea <ept id="p1">*</ept>// to update the system registry in case it has been damaged.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>m_server.UpdateRegistry(OAT_DISPATCH_OBJECT);</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>COleObjectFactory::UpdateRegistryAll(); <bpt id="p1">*</bpt>// DUAL_SUPPORT_START <ept id="p1">*</ept>// Make sure the type library is registered or dual interface won't work.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>AfxOleRegisterTypeLib(AfxGetInstanceHandle(), LIBID_ACDual, _T("AutoClik.TLB")); *// DUAL_SUPPORT_END</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>// initIIDs.c: defines IIDs for dual interfaces</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>// This must not be built with precompiled header.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>include &lt;ole2.h&gt;</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>include &lt;initguid.h&gt;</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>include "acdual.h"</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>STDMETHODIMP CAutoClickDoc::XDualAClick::put_text(BSTR newText)</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>{</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>METHOD_PROLOGUE(CAutoClickDoc, DualAClick)</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>TRY_DUAL(IID_IDualAClick) { <bpt id="p1">*</bpt>// MFC automatically converts from Unicode BSTR to <ept id="p1">*</ept>// Ansi CString, if necessary...</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>pThis-&gt;m_str = newText;</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>return NOERROR;</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>}</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CATCH_ALL_DUAL }</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>(e-&gt;m_wCode + 0x200));</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>STDMETHODIMP_(ULONG) CAutoClickDoc::XSupportErrorInfo::AddRef()</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>{</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>METHOD_PROLOGUE(CAutoClickDoc, SupportErrorInfo)</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>return pThis-&gt;ExternalAddRef();</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>}</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>STDMETHODIMP_(ULONG) CAutoClickDoc::XSupportErrorInfo::Release()</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>{</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>METHOD_PROLOGUE(CAutoClickDoc, SupportErrorInfo)</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>return pThis-&gt;ExternalRelease();</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>}</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>STDMETHODIMP CAutoClickDoc::XSupportErrorInfo::QueryInterface( REFIID iid, LPVOID* ppvObj)</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>{</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>METHOD_PROLOGUE(CAutoClickDoc, SupportErrorInfo)</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>return pThis-&gt;ExternalQueryInterface(&amp;iid, ppvObj);</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>}</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>STDMETHODIMP CAutoClickDoc::XSupportErrorInfo::InterfaceSupportsErrorInfo( REFIID iid)</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>{</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>METHOD_PROLOGUE(CAutoClickDoc, SupportErrorInfo)</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>return (iid == IID_IDualAClick) S_OK : S_FALSE;</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>}</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>