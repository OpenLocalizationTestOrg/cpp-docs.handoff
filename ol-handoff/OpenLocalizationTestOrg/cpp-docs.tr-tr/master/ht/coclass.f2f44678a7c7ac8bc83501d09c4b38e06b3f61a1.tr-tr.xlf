<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17b16f4498b7473a893fee53065e0610b9c5b05f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\coclass.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bb2f5226e3202f95fa86351ac93f90c624c67b3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4798f30c4e3bc590765e0b48c0874f36b730d118</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>coclass | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>coclass</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creates a COM object, which can implement a COM interface.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>coclass<ept id="p1">**</ept> C++ attribute places a coclass construct in the generated .idl file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When defining a coclass, you can also specify the <bpt id="p1">[</bpt>uuid<ept id="p1">](../windows/uuid-cpp-attributes.md)</ept>, <bpt id="p2">[</bpt>version<ept id="p2">](../windows/version-cpp.md)</ept>, <bpt id="p3">[</bpt>threading<ept id="p3">](../windows/threading-cpp.md)</ept>, <bpt id="p4">[</bpt>vi_progid<ept id="p4">](../windows/vi-progid.md)</ept>, and <bpt id="p5">[</bpt>progid<ept id="p5">](../windows/progid.md)</ept> attributes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If any one of them is not specified, it will be generated.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If two header files contain classes with the <bpt id="p1">**</bpt>coclass<ept id="p1">**</ept> attribute and don't specify a GUID, the compiler will use the same GUID for both classes, and that will result in a MIDL error.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Therefore, you should use the <ph id="ph1">`uuid`</ph> attribute when you use <bpt id="p1">**</bpt>coclass<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>ATL Projects</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When this attribute precedes a class or structure definition in an ATL project, it:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Injects code or data to support auto registration for the object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Injects code or data to support a COM class factory for the object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Injects code or data to implement <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> and make the object a COM-creatable object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Specifically, the following base classes are added to the target object:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCoClass Class<ept id="p1">](../atl/reference/ccomcoclass-class.md)</ept> provides the default class factory and aggregation model for the object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComObjectRootEx Class<ept id="p1">](../atl/reference/ccomobjectrootex-class.md)</ept> has a template based on the threading model class specified by the <bpt id="p2">[</bpt>threading<ept id="p2">](../windows/threading-cpp.md)</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>threading<ept id="p1">**</ept> attribute is not specified, the default threading model is apartment.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IProvideClassInfo2Impl<ept id="p1">](../atl/reference/iprovideclassinfo2impl-class.md)</ept> is added if the <bpt id="p2">[</bpt>noncreatable<ept id="p2">](../windows/noncreatable.md)</ept> attribute is not specified for the target object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Finally, any dual interface that is not defined using embedded IDL is replaced with the corresponding <bpt id="p1">[</bpt>IDispatchImpl<ept id="p1">](../atl/reference/idispatchimpl-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the dual interface is defined in embedded IDL, the particular interface in the base list is not modified.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>coclass<ept id="p1">**</ept> attribute also makes the following functions available via injected code, or in the case of <ph id="ph1">`GetObjectCLSID`</ph>, as a static method in the base class <ph id="ph2">`CComCoClass`</ph>:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>registers the class factories of the target class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>, which is related to registration, can also be used to obtain the CLSID of the target class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetObjectFriendlyName<ept id="p1">**</ept> by default returns a string of the format "<ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>target class name<ept id="p2">*</ept><ph id="ph2">&gt; `Object`</ph>".</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If this function is already present, it is not added.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Add this function to the target class to return a friendlier name than the one automatically generated.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetProgID<ept id="p1">**</ept>, which is related to registration, returns the string specified with the <bpt id="p2">[</bpt>progid<ept id="p2">](../windows/progid.md)</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetVersionIndependentProgID<ept id="p1">**</ept> has the same functionality as <bpt id="p2">**</bpt>GetProgID<ept id="p2">**</ept>, but it returns the string specified with <bpt id="p3">[</bpt>vi_progid<ept id="p3">](../windows/vi-progid.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following changes, which are related to the COM map, are made to the target class:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A COM map is added with entries for all interfaces the target class derives from and all entries specified by the <bpt id="p1">[</bpt>COM Interface Entry Points<ept id="p1">](../mfc/com-interface-entry-points.md)</ept> attribute or those required by the <bpt id="p2">[</bpt>aggregates<ept id="p2">](../windows/aggregates.md)</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>OBJECT_ENTRY_AUTO<ept id="p1">](http://msdn.microsoft.com/Library/5a0f4fa5-0905-43d2-b337-e22f979c9e4c)</ept> macro is inserted into the COM map.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This macro is similar to <bpt id="p1">[</bpt>OBJECT_ENTRY<ept id="p1">](http://msdn.microsoft.com/en-us/abd10ee2-54f0-4f94-9ec2-ddf8f4c8c8cd)</ept> in terms of functionality but does not need to be part of the COM map of the target class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The name of the coclass generated in the .idl file for the class will have the same name as the class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, and referring to the following sample, to access the class ID for a coclass CMyClass, in a client through the MIDL-generated header file, use CLSID_CMyClass.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following code shows how to use the <bpt id="p1">**</bpt>coclass<ept id="p1">**</ept> attribute:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following sample shows how to override the default implementation of a function that appears in the code injected by the <bpt id="p1">**</bpt>coclass<ept id="p1">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>/Fx<ept id="p1">](../build/reference/fx-merge-injected-code.md)</ept> for more information on viewing injected code.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Any base classes or interfaces that you use for a class will be appear in the injected code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Further, if a class is included by default in the injected code and you explicitly specify that class as a base for your coclass, the attribute provider will use the form specified in your code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Attribute Context</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Applies to</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>class<ept id="p1">**</ept>,</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Repeatable</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Required attributes</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Invalid attributes</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information about the attribute contexts, see <bpt id="p1">[</bpt>Attribute Contexts<ept id="p1">](../windows/attribute-contexts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>IDL Attributes</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>COM Attributes</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Class Attributes</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Typedef, Enum, Union, and Struct Attributes</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>appobject</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>