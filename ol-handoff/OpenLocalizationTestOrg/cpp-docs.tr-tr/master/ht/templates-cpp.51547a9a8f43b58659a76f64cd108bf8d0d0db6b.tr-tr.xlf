<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">581eae8ed36b5b5b5ef701feab07f5d1dddf5c41</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\templates-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd0ebd8a5ba4aeae931efbb8649b53a9408b84bd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8199f2e5def609fc12b16b6bcf8308c99cf96c7b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Templates (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Templates (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Templates are the basis for generic programming in C++.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a strongly-typed language, C++ requires all variables to have a specific type, either explicitly declared by the programmer or deduced by the compiler.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, many data structures and algorithms look the same no matter what type they are operating on.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Templates enable you to define the operations of a class or function, and let the user specify what concrete types those operations should work on.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Defining and using templates</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A template is a construct that generates an ordinary type or function at compile time based on arguments the user supplies for the template parameters.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, you can define a function template like this:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The above code describes a template for a generic function with a single type parameter <ph id="ph1">`T`</ph>, whose return value and call parameters (lhs and rhs) are all of this type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can name a type parameter anything you like, but by convention single upper case letters are most commonly used.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>is a template parameter; the <ph id="ph1">`typename`</ph> keyword says that this parameter is a placeholder for a type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When the function is called, the compiler will replace every instance of <ph id="ph1">`T`</ph> with the concrete type argument that is either specified by the user or deduced by the compiler.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The process in which the compiler generates a class or function from a template is referred to as  <bpt id="p1">*</bpt>template instantiation<ept id="p1">*</ept>;   <ph id="ph1">`minimum&lt;int&gt;`</ph> is an instantiation of the template <ph id="ph2">`minimum&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Elsewhere, a user can declare an instance of the template  that is specialized for int.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Assume that get_a() and get_b() are functions that return an int:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, because this is a function template and the compiler can deduce the type of <ph id="ph1">`T`</ph> from the arguments <ph id="ph2">`a`</ph> and <ph id="ph3">`b`</ph>, you can call it just like an ordinary function:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When the compiler encounters that last statement, it generates a new function in which every occurrence of <bpt id="p1">*</bpt>T<ept id="p1">*</ept> in the template is replaced with <ph id="ph1">`int`</ph>:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The rules for how the compiler performs type deduction in function templates are based on the rules for ordinary functions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Overload Resolution of Function Template Calls<ept id="p1">](../cpp/overload-resolution-of-function-template-calls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Type parameters</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`minimum`</ph> template above, note that the type parameter <ph id="ph2">`T`</ph> is not qualified in any way until it is used in the function call parameters, where the const and reference qualifiers are added.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There is no practical limit to the number of type parameters.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Separate multiple parameters by commas:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The keyword <ph id="ph1">`class`</ph> is equivalent to <ph id="ph2">`typename`</ph> in this context.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can express the previous example as:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can use the ellipses operator (...) to define a template that takes an arbitrary number of zero or more type parameters:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Any built-in or user-defined type can be used as a type argument.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, you can use std::vector in the Standard Library to store ints, doubles, strings, MyClass, const MyClass*, MyClass&amp;.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The primary restriction when using templates is that a type argument must support any operations that are applied to the type parameters.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, if we call minimum using MyClass as in this example:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A compiler error will be generated because MyClass does not provide an overload for the &lt; operator.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>There is no inherent requirement that the type arguments for any particular template all belong to the same object hierarchy, although you can define a template that enforces such a restriction.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can combine object-oriented techniques with templates; for example, you can store a Derived* in a vector<ph id="ph1">\&lt;</ph>Base<ph id="ph2">\*</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Note that the arguments must be pointers</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The basic requirements that vector and other standard library containers impose on elements of <ph id="ph1">`T`</ph> is that <ph id="ph2">`T`</ph> be copy-assignable and copy-constructible.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Non-type parameters</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unlike generic types in other languages such as C# and Java, C++ templates support non-type parameters, also called value parameters.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, you can provide a constant integral value to specify the length of an array, as with this example that is similar to the std::array class in the Standard Library:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Note the syntax in the template declaration.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The size_t value is passed in as a template argument at compile time and must be constant or a constexpr expression.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You use it like this:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Other kinds of values including pointers and references can be passed in as non-type parameters.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, you can pass in a pointer to a function or function object to customize some operation inside the template code.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Templates as template parameters</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A template can be a template parameter.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this example, MyClass2 has two template parameters: a typename parameter <ph id="ph1">`T`</ph> and a template parameter <ph id="ph2">`Arr`</ph>:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`Arr`</ph> parameter itself has no body, its parameter names are not needed.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In fact, it is an error to refer to <ph id="ph1">`Arr`</ph>'s typename or class parameter names from within the body of <ph id="ph2">`MyClass2`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For this reason,  <ph id="ph1">`Arr`</ph>'s type parameter names can be omitted, as shown in this example:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Default template arguments</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Class and function templates can have default arguments.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When a template has a default argument you can leave it unspecified when you use it.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, the std::vector template has a default argument for the allocator:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In most cases the default std::allocator class is acceptable, so you use a vector like this:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>But if necessary you can specify a custom allocator like this:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For multiple template arguments, all arguments after the first default argument must have default arguments.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When using a template whose parameters are all defaulted, use empty angle brackets:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Template specialization</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In some cases, it isn’t possible or desirable for a template to define exactly the same code for any type.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, you might wish to define a code path to be executed only if the type argument is a pointer, or a std::wstring, or a type derived from a particular base class.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In such cases you can define a <bpt id="p1">*</bpt>specialization<ept id="p1">*</ept> of the template for that particular type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When a user instantiates the template with that type, the compiler uses the specialization to generate the class, and for all other types, the compiler chooses the more general template.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specializations in which all parameters are specialized are <bpt id="p1">*</bpt>complete specializations<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If only some of the parameters are specialized, it is called a <bpt id="p1">*</bpt>partial specialization<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A template can have any number of specializations as long as each specialized type parameter is unique.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Only class templates may be partially specialized.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>All complete and partial specializations of a template must be declared in the same namespace as the original template.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Template Specialization<ept id="p1">](../cpp/template-specialization-cpp.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>