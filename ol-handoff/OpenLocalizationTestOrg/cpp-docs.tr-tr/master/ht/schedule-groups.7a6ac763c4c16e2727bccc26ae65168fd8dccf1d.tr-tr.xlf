<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">18e729b23456232cc49c6e373e5f394a428e0648</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\schedule-groups.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">644d4ad7f62e8acb7aefd7e2200999268635132a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b784baca3ad061ff46a1c8ed293530425e04563a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Schedule Groups | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Schedule Groups</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document describes the role of schedule groups in the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>schedule group<ept id="p1">*</ept> affinitizes, or groups, related tasks together.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Every scheduler has one or more schedule groups.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use schedule groups when you require a high degree of locality among tasks, for example, when a group of related tasks benefit from executing on the same processor node.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Conversely, use scheduler instances when your application has specific quality requirements, for example, when you want to limit the amount of processing resources that are allocated to a set of tasks.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about scheduler instances, see <bpt id="p1">[</bpt>Scheduler Instances<ept id="p1">](../../parallel/concrt/scheduler-instances.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the <bpt id="p1">[</bpt>Parallel Patterns Library (PPL)<ept id="p1">](../../parallel/concrt/parallel-patterns-library-ppl.md)</ept> or the <bpt id="p2">[</bpt>Asynchronous Agents Library<ept id="p2">](../../parallel/concrt/asynchronous-agents-library.md)</ept> if you are new to the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Every <ph id="ph1">`Scheduler`</ph> object has a default schedule group for every scheduling node.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>scheduling node<ept id="p1">*</ept> maps to the underlying system topology.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The runtime creates one scheduling node for every processor package or Non-Uniform Memory Architecture (NUMA) node, whichever number is larger.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you do not explicitly associate a task with a schedule group, the scheduler chooses which group to add the task to.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SchedulingProtocol`</ph> scheduler policy influences the order in which the scheduler executes the tasks in each schedule group.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`SchedulingProtocol`</ph> is set to <ph id="ph2">`EnhanceScheduleGroupLocality`</ph> (which is the default), the Task Scheduler chooses the next task from the schedule group that it is working on when the current task finishes or cooperatively yields.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Task Scheduler searches the current schedule group for work before it moves to the next available group.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Conversely, when <ph id="ph1">`SchedulingProtocol`</ph> is set to <ph id="ph2">`EnhanceForwardProgress`</ph>, the scheduler moves to the next schedule group after each task finishes or yields.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For an example that compares these policies, see <bpt id="p1">[</bpt>How to: Use Schedule Groups to Influence Order of Execution<ept id="p1">](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The runtime uses the <bpt id="p1">[</bpt>concurrency::ScheduleGroup<ept id="p1">](../../parallel/concrt/reference/schedulegroup-class.md)</ept> class to represent schedule groups.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To create a <ph id="ph1">`ScheduleGroup`</ph> object, call the <bpt id="p1">[</bpt>concurrency::CurrentScheduler::CreateScheduleGroup<ept id="p1">](reference/currentscheduler-class.md#createschedulegroup)</ept> or <bpt id="p2">[</bpt>concurrency::Scheduler::CreateScheduleGroup<ept id="p2">](reference/scheduler-class.md#createschedulegroup)</ept> method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The runtime uses a reference-counting mechanism to control the lifetime of <ph id="ph1">`ScheduleGroup`</ph> objects, just as it does with <ph id="ph2">`Scheduler`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When you create a <ph id="ph1">`ScheduleGroup`</ph> object, the runtime sets the reference counter to one.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::ScheduleGroup::Reference<ept id="p1">](reference/schedulegroup-class.md#reference)</ept> method increments the reference counter by one.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::ScheduleGroup::Release<ept id="p1">](reference/schedulegroup-class.md#release)</ept> method decrements the reference counter by one.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Many types in the Concurrency Runtime let you associate an object together with a schedule group.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>concurrency::agent<ept id="p1">](../../parallel/concrt/reference/agent-class.md)</ept> class and message block classes such as <bpt id="p2">[</bpt>concurrency::unbounded_buffer<ept id="p2">](reference/unbounded-buffer-class.md)</ept>, <bpt id="p3">[</bpt>concurrency::join<ept id="p3">](../../parallel/concrt/reference/join-class.md)</ept>, and concurrency::<bpt id="p4">[</bpt>timer<ept id="p4">](reference/timer-class.md)</ept>, provide overloaded versions of the constructor that take a <ph id="ph1">`ScheduleGroup`</ph> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The runtime uses the <ph id="ph1">`Scheduler`</ph> object that is associated with this <ph id="ph2">`ScheduleGroup`</ph> object to schedule the task.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">[</bpt>concurrency::ScheduleGroup::ScheduleTask<ept id="p1">](reference/schedulegroup-class.md#scheduletask)</ept> method to schedule a lightweight task.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about lightweight tasks, see <bpt id="p1">[</bpt>Lightweight Tasks<ept id="p1">](../../parallel/concrt/lightweight-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For an example that uses schedule groups to control the order of task execution, see <bpt id="p1">[</bpt>How to: Use Schedule Groups to Influence Order of Execution<ept id="p1">](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Task Scheduler</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Scheduler Instances</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>How to: Use Schedule Groups to Influence Order of Execution</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>