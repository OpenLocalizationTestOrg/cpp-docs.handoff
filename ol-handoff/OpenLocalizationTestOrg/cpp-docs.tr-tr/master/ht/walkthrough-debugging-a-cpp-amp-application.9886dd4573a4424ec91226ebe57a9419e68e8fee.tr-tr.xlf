<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9b22c5b87c1e1928865f95fec479c5cfe3e7d76</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\amp\walkthrough-debugging-a-cpp-amp-application.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7da4ba4ee133fb75f4c927edb44a164b82271cc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">67a6167c7815a3c7481549fddfd1ce757b3a309e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Debugging a C++ AMP Application | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Debugging a C++ AMP Application</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic demonstrates how to debug an application that uses C++ Accelerated Massive Parallelism (C++ AMP) to take advantage of the graphics processing unit (GPU).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It uses a parallel-reduction program that sums up a large array of integers.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This walkthrough illustrates the following tasks:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Launching the GPU debugger.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Inspecting GPU threads in the GPU Threads window.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using the Parallel Stacks window to simultaneously observe the call stacks of multiple GPU threads.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using the Parallel Watch window to inspect values of a single expression across multiple threads at the same time.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Flagging, freezing, thawing, and grouping GPU threads.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Executing all the threads of a tile to a specific location in code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Before you start this walkthrough:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Read <bpt id="p1">[</bpt>C++ AMP Overview<ept id="p1">](../../parallel/amp/cpp-amp-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Make sure that line numbers are displayed in the text editor.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Display Line Numbers in the Editor<ept id="p1">](http://msdn.microsoft.com/library/40b38559-b8de-4041-91f2-68986767c976)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Make sure you are running <ph id="ph1">[!INCLUDE[win8](../../build/reference/includes/win8_md.md)]</ph> or <ph id="ph2">[!INCLUDE[winserver8](../../build/reference/includes/winserver8_md.md)]</ph> to support debugging on the software emulator.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To create the sample project</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Installed<ept id="p1">**</ept> in the templates pane, choose <bpt id="p2">**</bpt>Visual C++<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>Win32 Console Application<ept id="p1">**</ept>, type <ph id="ph1">`AMPMapReduce`</ph> in the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> box, and then choose the <bpt id="p3">**</bpt>OK<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Next<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Clear the <bpt id="p1">**</bpt>Precompiled header<ept id="p1">**</ept> check box, and then choose the <bpt id="p2">**</bpt>Finish<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, delete stdafx.h, targetver.h, and stdafx.cpp from the project.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Open AMPMapReduce.cpp and replace its content with the following code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Save All<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for <bpt id="p2">**</bpt>AMPMapReduce<ept id="p2">**</ept>, and then choose <bpt id="p3">**</bpt>Properties<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box, under <bpt id="p2">**</bpt>Configuration Properties<ept id="p2">**</ept>, choose <bpt id="p3">**</bpt>C/C++<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Precompiled Headers<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For the <bpt id="p1">**</bpt>Precompiled Header<ept id="p1">**</ept> property, select <bpt id="p2">**</bpt>Not Using Precompiled Headers<ept id="p2">**</ept>, and then choose the <bpt id="p3">**</bpt>OK<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Build<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Debugging the CPU Code</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this procedure, you will use the Local Windows Debugger to make sure that the CPU code in this application is correct.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The segment of the CPU code in this application that is especially interesting is the <ph id="ph1">`for`</ph> loop in the <ph id="ph2">`reduction_sum_gpu_kernel`</ph> function.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It controls the tree-based parallel reduction that is run on the GPU.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To debug the CPU code</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for <bpt id="p2">**</bpt>AMPMapReduce<ept id="p2">**</ept>, and then choose <bpt id="p3">**</bpt>Properties<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box, under <bpt id="p2">**</bpt>Configuration Properties<ept id="p2">**</ept>, choose <bpt id="p3">**</bpt>Debugging<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Verify that <bpt id="p1">**</bpt>Local Windows Debugger<ept id="p1">**</ept> is selected in the <bpt id="p2">**</bpt>Debugger to launch<ept id="p2">**</ept> list.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Return to the Code Editor.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Set breakpoints on the lines of code shown in the following illustration (approximately lines 67 line 70).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CPU breakpoints</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CPU breakpoints</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Start Debugging<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Locals<ept id="p1">**</ept> window, observe the value for <ph id="ph1">`stride_size`</ph> until the breakpoint at line 70 is reached.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Stop Debugging<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Debugging the GPU Code</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This section shows how to debug the GPU code, which is the code contained in the <ph id="ph1">`sum_kernel_tiled`</ph> function.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The GPU code computes the sum of integers for each "block" in parallel.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To debug the GPU code</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for <bpt id="p2">**</bpt>AMPMapReduce<ept id="p2">**</ept>, and then choose <bpt id="p3">**</bpt>Properties<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box, under <bpt id="p2">**</bpt>Configuration Properties<ept id="p2">**</ept>, choose <bpt id="p3">**</bpt>Debugging<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Debugger to launch<ept id="p1">**</ept> list, select <bpt id="p2">**</bpt>Local Windows Debugger<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Debugger Type<ept id="p1">**</ept> list, select <bpt id="p2">**</bpt>GPU Only<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at line 30, as shown in the following illustration.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>GPU breakpoints</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>GPU breakpoint</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Start Debugging<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The breakpoints in the CPU code at lines 67 and 70 are not executed during GPU debugging because those lines of code are executed on the CPU.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To use the GPU Threads window</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To open the GPU Threads window, on the menu bar, choose <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>GPU Threads<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can inspect the state the GPU threads in the GPU Threads window that appears.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Dock the GPU Threads window at the bottom of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Expand Thread Switch<ept id="p1">**</ept> button to display the tile and thread text boxes.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The GPU Threads window shows the total number of active and blocked GPU threads, as shown in the following illustration.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>GPU Threads window with 4 active threads</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>GPU Threads window</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>There are 313 tiles allocated for this computation.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Each tile contains 32 threads.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Because local GPU debugging occurs on a software emulator, there are four active GPU threads.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The four threads execute the instructions simultaneously and then move on together to the next instruction.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In the GPU threads window, there are four GPU threads active and 28 GPU threads blocked at the <bpt id="p1">[</bpt>tile_barrier::wait<ept id="p1">](reference/tile-barrier-class.md#wait)</ept> statement defined at about line 21 (<ph id="ph1">`t_idx.barrier.wait();`</ph>).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>All 32 GPU threads belong to the first tile, <ph id="ph1">`tile[0]`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An arrow points to the row that includes the current thread.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To switch to a different thread, use one of the following methods:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the row for the thread to switch to in the GPU Threads window, open the shortcut menu and choose <bpt id="p1">**</bpt>Switch To Thread<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the row represents more than one thread, you will switch to the first thread according to the thread coordinates.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Enter the tile and thread values of the thread in the corresponding text boxes and then choose the <bpt id="p1">**</bpt>Switch Thread<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The Call Stack window displays the call stack of the current GPU thread.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To use the Parallel Stacks window</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To open the Parallel Stacks window, on the menu bar, choose <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Parallel Stacks<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can use the Parallel Stacks window to simultaneously inspect the stack frames of multiple GPU threads.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Dock the Parallel Stacks window at the bottom of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Make sure that <bpt id="p1">**</bpt>Threads<ept id="p1">**</ept> is selected in the list in the upper-left corner.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In the following illustration, the Parallel Stacks window shows a call-stack focused view of the GPU threads that you saw in the GPU Threads window.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parallel Stacks window with 4 active threads</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Parallel Stacks window</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>32 threads went from <ph id="ph1">`_kernel_stub`</ph> to the lambda statement in the <ph id="ph2">`parallel_for_each`</ph> function call and then to the <ph id="ph3">`sum_kernel_tiled`</ph> function, where the parallel reduction occurs.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>28 out of the 32 threads have progressed to the <bpt id="p1">[</bpt>tile_barrier::wait<ept id="p1">](reference/tile-barrier-class.md#wait)</ept> statement and remain blocked at line 22, whereas the other 4 threads remain active in the <ph id="ph1">`sum_kernel_tiled`</ph> function at line 30.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can inspect the properties of a GPU thread that are available in the GPU Threads window in the rich DataTip of the Parallel Stacks window.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To do this, rest the mouse pointer on the stack frame of <bpt id="p1">**</bpt>sum_kernel_tiled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following illustration shows the DataTip.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>DataTip for Parallel Stacks window</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>GPU thread DataTip</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For more information about the Parallel Stacks window, see <bpt id="p1">[</bpt>Using the Parallel Stacks Window<ept id="p1">](/visualstudio/debugger/using-the-parallel-stacks-window)</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To use the Parallel Watch window</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To open the Parallel Watch window, on the menu bar, choose <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Parallel Watch<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Parallel Watch 1<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can use the Parallel Watch window to inspect the values of an expression across multiple threads.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Dock the Parallel Watch 1 window to the bottom of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>There are 32 rows in the table of the Parallel Watch window.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Each corresponds to a GPU thread that appeared in both the GPU Threads window and the Parallel Stacks window.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Now, you can enter expressions whose values you want to inspect across all 32 GPU threads.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Add Watch<ept id="p1">**</ept> column header, enter <ph id="ph1">`localIdx`</ph>, and then choose the Enter key.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Add Watch<ept id="p1">**</ept> column header again, type <ph id="ph1">`globalIdx`</ph>, and then choose the Enter key.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Add Watch<ept id="p1">**</ept> column header again, type <ph id="ph1">`localA[localIdx[0]]`</ph>, and then choose the Enter key.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You can sort by a specified expression by selecting its corresponding column header.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>localA[localIdx[0]]<ept id="p1">**</ept> column header to sort the column.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The following illustration shows the results of sorting by <bpt id="p1">**</bpt>localA[localIdx[0]]<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Parallel Watch window with sorted results</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Results of sort</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You can export the content in the Parallel Watch window to Excel by choosing the Excel button and then choosing <bpt id="p1">**</bpt>Open in Excel<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If you have Excel installed on your development computer, this opens an Excel worksheet that contains the content.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In the upper-right corner of the Parallel Watch window, there's a filter control that you can use to filter the content by using Boolean expressions.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Enter <ph id="ph1">`localA[localIdx[0]] &gt; 20000`</ph> in the filter control text box and then choose the Enter key.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The window now contains only threads on which the <ph id="ph1">`localA[localIdx[0]]`</ph> value is greater than 20000.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The content is still sorted by the <ph id="ph1">`localA[localIdx[0]]`</ph> column, which is the sorting action you performed earlier.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Flagging GPU Threads</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You can mark specific GPU threads by flagging them in the GPU Threads window, the Parallel Watch window, or the DataTip in the Parallel Stacks window.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If a row in the GPU Threads window contains more than one thread, flagging that row flags all threads that are contained in the row.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>To flag GPU threads</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>[Thread]<ept id="p1">**</ept> column header in the Parallel Watch 1 window to sort by tile index and thread index.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Continue<ept id="p2">**</ept>, which causes the four threads that were active to progress to the next barrier (defined at line 32 of AMPMapReduce.cpp).</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Choose the flag symbol on the left side of the row that contains the four threads that are now active.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following illustration shows the four active flagged threads in the GPU Threads window.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>GPU Threads window with flagged threads</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Active threads in the GPU Threads window</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The Parallel Watch window and the DataTip of the Parallel stacks window both indicate the flagged threads.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>If you want to focus on the four threads that you flagged, you can choose to show, in the GPU Threads, Parallel Watch, and Parallel Stacks windows, only the flagged threads.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Choose the Show Flagged Only button on any of the windows or on the <bpt id="p1">**</bpt>Debug Location<ept id="p1">**</ept> toolbar.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The following illustration shows the Show Flagged Only button on the <bpt id="p1">**</bpt>Debug Location<ept id="p1">**</ept> toolbar.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Debug Location toolbar with Show Only Flagged icon</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Show Flagged Only button</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Now the GPU Threads, Parallel Watch, and Parallel Stacks windows display only the flagged threads.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Freezing and Thawing GPU Threads</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You can freeze (suspend) and thaw (resume) GPU threads from either the GPU Threads window or the Parallel Watch window.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>You can freeze and thaw CPU threads the same way; for information, see <bpt id="p1">[</bpt>How to: Use the Threads Window<ept id="p1">](http://msdn.microsoft.com/library/adfbe002-3d7b-42a9-b42a-5ac0903dfc25)</ept>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>To freeze and thaw GPU threads</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Show Flagged Only<ept id="p1">**</ept> button to display all the threads.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Continue<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Open the shortcut menu for the active row and then choose <bpt id="p1">**</bpt>Freeze<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The following illustration of the GPU Threads window shows that all four threads are frozen.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>GPU Threads windows showing frozen threads</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Frozen threads in the GPU Threads window</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Similarly, the Parallel Watch window shows that all four threads are frozen.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Continue<ept id="p2">**</ept> to allow the next four GPU threads to progress past the barrier at line 22 and to reach the breakpoint at line 30.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The GPU Threads window shows that the four previously frozen threads remain frozen and in the active state.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Continue<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>From the Parallel Watch window, you can also thaw individual or multiple GPU threads.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>To group GPU threads</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>On the shortcut menu for one of the threads in the <bpt id="p1">**</bpt>GPU Threads<ept id="p1">**</ept> window, choose <bpt id="p2">**</bpt>Group By<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Address<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The threads in the GPU Threads window are grouped by address.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The address corresponds to the instruction in disassembly where each group of threads is located.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>24 threads are at line 22 where the <bpt id="p1">[</bpt>tile_barrier::wait Method<ept id="p1">](reference/tile-barrier-class.md#wait)</ept> is executed.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>12 threads are at the instruction for the barrier at line 32.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Four of these threads are flagged.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Eight threads are at the breakpoint at line 30.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Four of these threads are frozen.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The following illustration shows the grouped threads in the GPU Threads window.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>GPU Threads window with threads grouped by Address</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Grouped threads in the GPU Threads window</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>You can also perform the <bpt id="p1">**</bpt>Group By<ept id="p1">**</ept> operation by opening the shortcut menu for the data grid of the Parallel Watch window, choosing <bpt id="p2">**</bpt>Group By<ept id="p2">**</ept>, and then choosing the menu item that corresponds to how you want to group the threads.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Running All Threads to a Specific Location in Code</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>You run all the threads in a given tile to the line that contains the cursor by using <bpt id="p1">**</bpt>Run Current Tile To Cursor<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>To run all threads to the location marked by the cursor</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>On the shortcut menu for the frozen threads, choose <bpt id="p1">**</bpt>Thaw<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>In the Code Editor, put the cursor in line 30.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>On the shortcut menu for the Code Editor, choose <bpt id="p1">**</bpt>Run Current Tile To Cursor<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The 24 threads that were previously blocked at the barrier at line 21 have progressed to line 32.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>This is shown in the <bpt id="p1">**</bpt>GPU Threads<ept id="p1">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>C++ AMP Overview</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Debugging GPU Code</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>How to: Use the GPU Threads Window</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>How to: Use the Parallel Watch Window</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Analyzing C++ AMP Code with the Concurrency Visualizer</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>