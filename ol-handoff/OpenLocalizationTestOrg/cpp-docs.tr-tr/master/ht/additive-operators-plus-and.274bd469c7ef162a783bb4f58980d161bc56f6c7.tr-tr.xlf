<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b58e8ffc0c0bd0794ab293253037826e2253abf9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\additive-operators-plus-and.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e691cb5eaca259548377d797010dddcfe36ac71</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed04cc171437e518a8830b1c63a63b0b63168304</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Additive Operators: + and - | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Additive Operators: + and -</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The additive operators are:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Addition (<bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Subtraction (<bpt id="p1">**</bpt>–<ept id="p1">**</ept>)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These binary operators have left-to-right associativity.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The additive operators take operands of arithmetic or pointer types.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The result of the addition (<bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>) operator is the sum of the operands.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The result of the subtraction (<bpt id="p1">**</bpt>–<ept id="p1">**</ept>) operator is the difference between the operands.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If one or both of the operands are pointers, they must be pointers to objects, not to functions.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If both operands are pointers, the results are not meaningful unless both are pointers to objects in the same array.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Additive operators take operands of <bpt id="p1">*</bpt>arithmetic<ept id="p1">*</ept>, <bpt id="p2">*</bpt>integral<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>scalar<ept id="p3">*</ept> types.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These are defined in the following table.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Types Used with Additive Operators</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>arithmetic</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Integral and floating types are collectively called "arithmetic" types.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>integral</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Types char and int of all sizes (long, short) and enumerations are "integral" types.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>scalar</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Scalar operands are operands of either arithmetic or pointer type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The legal combinations for these operators are:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>arithmetic<ept id="p1">*</ept><ph id="ph1"> + </ph><bpt id="p2">*</bpt>arithmetic<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>scalar<ept id="p1">*</ept><ph id="ph1"> + </ph><bpt id="p2">*</bpt>integral<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>integral<ept id="p1">*</ept><ph id="ph1"> + </ph><bpt id="p2">*</bpt>scalar<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>arithmetic<ept id="p1">*</ept> – <bpt id="p2">*</bpt>arithmetic<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>scalar<ept id="p1">*</ept> – <bpt id="p2">*</bpt>scalar<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Note that addition and subtraction are not equivalent operations.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If both operands are of arithmetic type, the conversions covered in <bpt id="p1">[</bpt>Standard Conversions<ept id="p1">](standard-conversions.md)</ept> are applied to the operands, and the result is of the converted type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Pointer addition</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If one of the operands in an addition operation is a pointer to an array of objects, the other must be of integral type.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The result is a pointer that is of the same type as the original pointer and that points to another array element.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following code fragment illustrates this concept:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Although the integral value 1 is added to <ph id="ph1">`pIntArray`</ph>, it does not mean "add 1 to the address"; rather it means "adjust the pointer to point to the next object in the array" that happens to be 2 bytes (or <ph id="ph2">`sizeof( int )`</ph>) away.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Code of the form <ph id="ph1">`pIntArray = pIntArray + 1`</ph> is rarely found in C++ programs; to perform an increment, these forms are preferable: <ph id="ph2">`pIntArray++`</ph> or <ph id="ph3">`pIntArray += 1`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Pointer subtraction</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If both operands are pointers, the result of subtraction is the difference (in array elements) between the operands.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The subtraction expression yields a signed integral result of type ptrdiff_t (defined in the standard include file STDDEF.H).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>One of the operands can be of integral type, as long as it is the second operand.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The result of the subtraction is of the same type as the original pointer.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The value of the subtraction is a pointer to the (<bpt id="p1">*</bpt>n<ept id="p1">*</ept> – <bpt id="p2">*</bpt>i<ept id="p2">*</ept>)th array element, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is the element pointed to by the original pointer and <bpt id="p4">*</bpt>i<ept id="p4">*</ept> is the integral value of the second operand.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Expressions with Binary Operators</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>C++ Built-in Operators, Precedence and Associativity</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>C Additive Operators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>