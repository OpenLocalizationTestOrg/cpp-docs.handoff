<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55594fa30b6f867c40495ce75aeb6549d1bf9c25</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\ccomvariant-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfeaaf767f52c06776db6d78406fd75c26dbceee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7be8e2cee917dd6af7f610d8aee12e953c61b46</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CComVariant Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CComVariant Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class wraps the <ph id="ph1">`VARIANT`</ph> type, providing a member indicating the type of data stored.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CComVariant::CComVariant</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>CComVariant::~CComVariant</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CComVariant::Attach</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Attaches a <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> to the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CComVariant::ChangeType</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Converts the <ph id="ph1">`CComVariant`</ph> object to a new type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CComVariant::Clear</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Clears the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CComVariant::Copy</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Copies a <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> to the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CComVariant::CopyTo</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Copies the contents of the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CComVariant::Detach</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Detaches the underlying <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> from the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CComVariant::GetSize</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns the size in number of bytes of the contents of the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CComVariant::ReadFromStream</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Loads a <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> from a stream.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CComVariant::SetByRef</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">`CComVariant`</ph> object and sets the <bpt id="p1">**</bpt>vt<ept id="p1">**</ept> member to <bpt id="p2">**</bpt>VT_BYREF<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CComVariant::WriteToStream</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Saves the underlying <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> to a stream.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CComVariant::operator &lt;</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">`CComVariant`</ph> object is less than the specified <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CComVariant::operator &gt;</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">`CComVariant`</ph> object is greater than the specified <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>operator !=</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">`CComVariant`</ph> object does not equal the specified <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>operator =</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Assigns a value to the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>operator ==</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">`CComVariant`</ph> object equals the specified <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>wraps the <ph id="ph1">`VARIANT and VARIANTARG`</ph> type, which consists of a union and a member indicating the type of the data stored in the union.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>s are typically used in Automation.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>derives from the <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> type so it can be used wherever a <bpt id="p2">**</bpt>VARIANT<ept id="p2">**</ept> can be used.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can, for example, use the <bpt id="p1">**</bpt>V_VT<ept id="p1">**</ept> macro to extract the type of a <ph id="ph1">`CComVariant`</ph> or you can access the <bpt id="p2">**</bpt>vt<ept id="p2">**</ept> member directly just as you can with a <bpt id="p3">**</bpt>VARIANT<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlcomcli.h</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CComVariant::Attach</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Safely clears the current contents of the <ph id="ph1">`CComVariant`</ph> object, copies the contents of <ph id="ph2">`pSrc`</ph> into this object, then sets the variant type of <ph id="ph3">`pSrc`</ph> to <ph id="ph4">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>[in] Points to the <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> to be attached to the object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Ownership of the data held by <ph id="ph1">`pSrc`</ph> is transferred to the <ph id="ph2">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CComVariant::CComVariant</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Each constructor handles the safe initialization of the <ph id="ph1">`CComVariant`</ph> object by calling the <ph id="ph2">`VariantInit`</ph> Win32 function or by setting the object's value and type according to the parameters passed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>varSrc</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`CComVariant`</ph> or <ph id="ph2">`VARIANT`</ph> used to initialize the <ph id="ph3">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The contents of the source variant are copied to the destination without conversion.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>[in] The character string used to initialize the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can pass a zero-terminated wide (Unicode) character string to the <bpt id="p1">**</bpt>LPCOLESTR<ept id="p1">**</ept> version of the constructor or an ANSI string to the <ph id="ph1">`LPCSTR`</ph> version.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In either case the string is converted to a Unicode <ph id="ph1">`BSTR`</ph> allocated using <bpt id="p1">**</bpt>SysAllocString<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_BSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`bool`</ph> used to initialize the <ph id="ph2">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bool`</ph> argument is converted to a <bpt id="p1">**</bpt>VARIANT_BOOL<ept id="p1">**</ept> before being stored.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_BOOL`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`int`</ph>, <bpt id="p1">**</bpt>BYTE<ept id="p1">**</ept>, <bpt id="p2">**</bpt>short<ept id="p2">**</ept>, <bpt id="p3">**</bpt>long<ept id="p3">**</ept>, <bpt id="p4">**</bpt>LONGLONG<ept id="p4">**</ept>, <bpt id="p5">**</bpt>ULONGLONG<ept id="p5">**</ept>, <bpt id="p6">**</bpt>unsigned short<ept id="p6">**</ept>, <ph id="ph2">`unsigned long`</ph>, or <ph id="ph3">`unsigned int`</ph> used to initialize the <ph id="ph4">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_I4`</ph>, <ph id="ph3">`VT_UI1`</ph>, <ph id="ph4">`VT_I2`</ph>, <ph id="ph5">`VT_I4`</ph>, <bpt id="p1">**</bpt>VT_I8<ept id="p1">**</ept>, <bpt id="p2">**</bpt>VT_UI8<ept id="p2">**</ept>, <bpt id="p3">**</bpt>VT_UI2<ept id="p3">**</ept>, <bpt id="p4">**</bpt>VT_UI4<ept id="p4">**</ept>, or <bpt id="p5">**</bpt>VT_UI4<ept id="p5">**</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>[in] The type of the variant.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When the first parameter is <ph id="ph1">`int`</ph>, valid types are <ph id="ph2">`VT_I4`</ph> and <bpt id="p1">**</bpt>VT_INT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When the first parameter is <bpt id="p1">**</bpt>long<ept id="p1">**</ept>, valid types are <ph id="ph1">`VT_I4`</ph> and <ph id="ph2">`VT_ERROR`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When the first parameter is <bpt id="p1">**</bpt>double<ept id="p1">**</ept>, valid types are <ph id="ph1">`VT_R8`</ph> and <ph id="ph2">`VT_DATE`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When the first parameter is <ph id="ph1">`unsigned int`</ph>, valid types are <bpt id="p1">**</bpt>VT_UI4<ept id="p1">**</ept> and <bpt id="p2">**</bpt>VT_UINT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>[in] The <bpt id="p1">**</bpt>float<ept id="p1">**</ept> used to initialize the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_R4`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>[in] The <bpt id="p1">**</bpt>double<ept id="p1">**</ept> used to initialize the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_R8`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>[in] The <bpt id="p1">**</bpt>CY<ept id="p1">**</ept> used to initialize the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_CY`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`IDispatch`</ph> or <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer used to initialize the <ph id="ph2">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>will be called on the interface pointer.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <bpt id="p1">**</bpt>VT_DISPATCH<ept id="p1">**</ept> or <bpt id="p2">**</bpt>VT_UNKNOWN<ept id="p2">**</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Or, the <bpt id="p1">**</bpt>SAFERRAY<ept id="p1">**</ept> pointer used to initialize the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A copy of the <bpt id="p1">**</bpt>SAFEARRAY<ept id="p1">**</ept> is stored in the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be a combination of the original type of the <bpt id="p1">**</bpt>SAFEARRAY<ept id="p1">**</ept> and <bpt id="p2">**</bpt>VT_ARRAY<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`char`</ph> used to initialize the <ph id="ph2">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <bpt id="p1">**</bpt>VT_I1<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>[in] The BSTR used to initialize the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_BSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The destructor manages cleanup by calling <bpt id="p1">[</bpt>CComVariant::Clear<ept id="p1">](#ccomvariant__clear)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>CComVariant::~CComVariant</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This method manages cleanup by calling <bpt id="p1">[</bpt>CComVariant::Clear<ept id="p1">](#ccomvariant__clear)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CComVariant::ChangeType</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Converts the <ph id="ph1">`CComVariant`</ph> object to a new type.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>[in] The new type for the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the <ph id="ph1">`VARIANT`</ph> whose value will be converted to the new type.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, meaning the <ph id="ph1">`CComVariant`</ph> object will be converted in place.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If you pass a value for <ph id="ph1">`pSrc`</ph>, <ph id="ph2">`ChangeType`</ph> will use this <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> as the source for the conversion.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Otherwise, the <ph id="ph1">`CComVariant`</ph> object will be the source.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>CComVariant::Clear</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Clears the <ph id="ph1">`CComVariant`</ph> object by calling the <ph id="ph2">`VariantClear`</ph> Win32 function.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The destructor automatically calls <bpt id="p1">**</bpt>Clear<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CComVariant::Copy</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Frees the <ph id="ph1">`CComVariant`</ph> object and then assigns it a copy of the specified <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> to be copied.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>CComVariant::CopyTo</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Copies the contents of the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>pstrDest</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`BSTR`</ph> that will receive a copy of the contents of the <ph id="ph2">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CComVariant<ept id="p1">**</ept> object must be of type <ph id="ph1">`VT_BSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CComVariant::Detach</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Detaches the underlying <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> from the <ph id="ph1">`CComVariant`</ph> object and sets the object's type to <ph id="ph2">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>[out] Returns the underlying <ph id="ph1">`VARIANT`</ph> value of the object.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Note that the contents of the <ph id="ph1">`VARIANT`</ph> referenced by <ph id="ph2">`pDest`</ph> will automatically be cleared before being assigned the value and type of the calling <bpt id="p1">**</bpt>CComVariant<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>CComVariant::GetSize</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For simple-fixed size <ph id="ph1">`VARIANT`</ph>s, this method returns the <ph id="ph2">`sizeof`</ph> the underlying data type plus <ph id="ph3">`sizeof(VARTYPE)`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The size in bytes of the current contents of the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`VARIANT`</ph> contains an interface pointer, <ph id="ph2">`GetSize`</ph> queries for <ph id="ph3">`IPersistStream`</ph> or <ph id="ph4">`IPersistStreamInit`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If successful, the return value is the low-order 32 bits of the value returned by <ph id="ph1">`GetSizeMax`</ph> plus the <ph id="ph2">`sizeof`</ph> a <ph id="ph3">`CLSID`</ph> and <ph id="ph4">`sizeof(VARTYPE)`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>If the interface pointer is <ph id="ph1">`NULL`</ph>, <ph id="ph2">`GetSize`</ph> returns the <ph id="ph3">`sizeof`</ph> a <ph id="ph4">`CLSID`</ph> plus <ph id="ph5">`sizeof(VARTYPE)`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If the total size is larger than <ph id="ph1">`ULONG_MAX`</ph>, <ph id="ph2">`GetSize`</ph> returns <ph id="ph3">`sizeof(VARTYPE)`</ph> which indicates an error.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In all other cases, a temporary <ph id="ph1">`VARIANT`</ph> of type <ph id="ph2">`VT_BSTR`</ph> is coerced from the current <ph id="ph3">`VARIANT`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The length of this <ph id="ph1">`BSTR`</ph> is calculated as the size of the length of the string plus the length of the string itself plus the size of the null character plus <ph id="ph2">`sizeof(VARTYPE)`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`VARIANT`</ph> cannot be coerced to a <ph id="ph2">`VARIANT`</ph> of type <ph id="ph3">`VT_BSTR`</ph>, <ph id="ph4">`GetSize`</ph> returns <ph id="ph5">`sizeof(VARTYPE)`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The size returned by this method matches the number of bytes used by <bpt id="p1">[</bpt>CComVariant::WriteToStream<ept id="p1">](#ccomvariant__writetostream)</ept> under successful conditions.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>CComVariant::operator =</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Assigns a value and corresponding type to the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>varSrc</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`CComVariant`</ph> or <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> to be assigned to the <ph id="ph2">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The contents of the source variant are copied to the destination without conversion.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>[in] The BSTR to be assigned to the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_BSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>[in] The character string to be assigned to the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>You can pass a zero-terminated wide (Unicode) character string to the <bpt id="p1">**</bpt>LPCOLESTR<ept id="p1">**</ept> version of the operator or an ANSI string to the <ph id="ph1">`LPCSTR`</ph> version.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>In either case, the string is converted to a Unicode <ph id="ph1">`BSTR`</ph> allocated using <bpt id="p1">**</bpt>SysAllocString<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_BSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`bool`</ph> to be assigned to the <ph id="ph2">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bool`</ph> argument is converted to a <bpt id="p1">**</bpt>VARIANT_BOOL<ept id="p1">**</ept> before being stored.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_BOOL`</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`int`</ph>, <bpt id="p1">**</bpt>BYTE<ept id="p1">**</ept>, <bpt id="p2">**</bpt>short<ept id="p2">**</ept>, <bpt id="p3">**</bpt>long<ept id="p3">**</ept>, <bpt id="p4">**</bpt>LONGLONG<ept id="p4">**</ept>, <bpt id="p5">**</bpt>ULONGLONG<ept id="p5">**</ept>, <bpt id="p6">**</bpt>unsigned short<ept id="p6">**</ept>, <ph id="ph2">`unsigned long`</ph>, or <ph id="ph3">`unsigned int`</ph> to be assigned to the <ph id="ph4">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_I4`</ph>, <ph id="ph3">`VT_UI1`</ph>, <ph id="ph4">`VT_I2`</ph>, <ph id="ph5">`VT_I4`</ph>, <bpt id="p1">**</bpt>VT_I8<ept id="p1">**</ept>, <bpt id="p2">**</bpt>VT_UI8<ept id="p2">**</ept>, <bpt id="p3">**</bpt>VT_UI2<ept id="p3">**</ept>, <bpt id="p4">**</bpt>VT_UI4<ept id="p4">**</ept>, or <bpt id="p5">**</bpt>VT_UI4<ept id="p5">**</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>[in] The <bpt id="p1">**</bpt>float<ept id="p1">**</ept> to be assigned to the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_R4`</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>[in] The <bpt id="p1">**</bpt>double<ept id="p1">**</ept> to be assigned to the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_R8`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>[in] The <bpt id="p1">**</bpt>CY<ept id="p1">**</ept> to be assigned to the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <ph id="ph2">`VT_CY`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`IDispatch`</ph> or <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer to be assigned to the <ph id="ph2">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>will be called on the interface pointer.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <bpt id="p1">**</bpt>VT_DISPATCH<ept id="p1">**</ept> or <bpt id="p2">**</bpt>VT_UNKNOWN<ept id="p2">**</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Or, a <bpt id="p1">**</bpt>SAFEARRAY<ept id="p1">**</ept> pointer to be assigned to the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A copy of the <bpt id="p1">**</bpt>SAFEARRAY<ept id="p1">**</ept> is stored in the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be a combination of the original type of the <bpt id="p1">**</bpt>SAFEARRAY<ept id="p1">**</ept> and <bpt id="p2">**</bpt>VT_ARRAY<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>[in] The char to be assigned to the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`CComVariant`</ph> object will be <bpt id="p1">**</bpt>VT_I1<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>CComVariant::operator ==</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">`CComVariant`</ph> object equals the specified <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the value and type of <bpt id="p2">*</bpt>varSrc<ept id="p2">*</ept> are equal to the value and type, respectively, of the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">**</bpt>false<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The operator uses the user's default locale to perform the comparison.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The operator compares only the value of the variant types.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>It compares strings, integers, and floating points, but not arrays or records.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>CComVariant::operator !=</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">`CComVariant`</ph> object does not equal the specified <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if either the value or type of <bpt id="p2">*</bpt>varSrc<ept id="p2">*</ept> is not equal to the value or type, respectively, of the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">**</bpt>false<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The operator uses the user's default locale to perform the comparison.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The operator compares only the value of the variant types.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>It compares strings, integers, and floating points, but not arrays or records.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>CComVariant::operator</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">`CComVariant`</ph> object is less than the specified <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the value of the <ph id="ph1">`CComVariant`</ph> object is less than the value of <bpt id="p2">*</bpt>varSrc<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">**</bpt>false<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The operator uses the user's default locale to perform the comparison.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>CComVariant::operator</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">`CComVariant`</ph> object is greater than the specified <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the value of the <ph id="ph1">`CComVariant`</ph> object is greater than the value of <bpt id="p2">*</bpt>varSrc<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">**</bpt>false<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The operator uses the user's default locale to perform the comparison.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>CComVariant::ReadFromStream</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Sets the underlying <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> to the <bpt id="p2">**</bpt>VARIANT<ept id="p2">**</ept> contained in the specified stream.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the <bpt id="p1">[</bpt>IStream<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa380034)</ept> interface on the stream containing the data.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ReadToStream<ept id="p1">**</ept> requires a previous call to <bpt id="p2">[</bpt>WriteToStream<ept id="p2">](#ccomvariant__writetostream)</ept>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>CComVariant::SetByRef</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">`CComVariant`</ph> object and sets the <bpt id="p1">**</bpt>vt<ept id="p1">**</ept> member to <bpt id="p2">**</bpt>VT_BYREF<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The type of <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>, for example, <ph id="ph1">`BSTR`</ph>, <ph id="ph2">`int`</ph>, or <ph id="ph3">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>pT</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The pointer used to initialize the <ph id="ph1">`CComVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>is a function template that initializes the <ph id="ph1">`CComVariant`</ph> object to the pointer <bpt id="p1">*</bpt>pT<ept id="p1">*</ept> and sets the <bpt id="p2">**</bpt>vt<ept id="p2">**</ept> member to <bpt id="p3">**</bpt>VT_BYREF<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#76</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>CComVariant::WriteToStream</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Saves the underlying <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> to a stream.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the <bpt id="p1">[</bpt>IStream<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa380034)</ept> interface on a stream.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>