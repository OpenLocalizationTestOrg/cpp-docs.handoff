<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">851756e97906fe6077873ae6c32f6eaa8a3baa83</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\convert-an-openmp-loop-that-uses-a-reduction-variable.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37842b8297888c13f96c071428657fe84a60ce1d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c51ccaf254506b46c2865cb362dac27cd895b03</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Convert an OpenMP Loop that Uses a Reduction Variable to Use the Concurrency Runtime | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Convert an OpenMP Loop that Uses a Reduction Variable to Use the Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to convert an OpenMP <bpt id="p1">[</bpt>parallel<ept id="p1">](../../parallel/concrt/how-to-use-parallel-invoke-to-write-a-parallel-sort-routine.md#parallel)</ept><bpt id="p2">[</bpt>for<ept id="p2">](../../parallel/openmp/reference/for-openmp.md)</ept> loop that uses the <bpt id="p3">[</bpt>reduction<ept id="p3">](../../parallel/openmp/reference/reduction.md)</ept> clause to use the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The OpenMP <ph id="ph1">`reduction`</ph> clause lets you specify one or more thread-private variables that are subject to a reduction operation at the end of the parallel region.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>OpenMP predefines a set of reduction operators.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each reduction variable must be a scalar (for example, <ph id="ph1">`int`</ph>, <ph id="ph2">`long`</ph>, and <ph id="ph3">`float`</ph>).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>OpenMP also defines several restrictions on how reduction variables are used in a parallel region.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Parallel Patterns Library (PPL) provides the <bpt id="p1">[</bpt>concurrency::combinable<ept id="p1">](../../parallel/concrt/reference/combinable-class.md)</ept> class, which provides reusable, thread-local storage that lets you perform fine-grained computations and then merge those computations into a final result.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`combinable`</ph> class is a template that acts on both scalar and complex types.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To use the <ph id="ph1">`combinable`</ph> class, perform sub-computations in the body of a parallel construct and then call the <bpt id="p1">[</bpt>concurrency::combinable::combine<ept id="p1">](reference/combinable-class.md#combine)</ept> or <bpt id="p2">[</bpt>concurrency::combinable::combine_each<ept id="p2">](reference/combinable-class.md#combine_each)</ept> method to produce the final result.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`combine`</ph> and <ph id="ph2">`combine_each`</ph> methods each take a <bpt id="p1">*</bpt>combine function<ept id="p1">*</ept> that specifies how to combine each pair of elements.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`combinable`</ph> class is not restricted to a fixed set of reduction operators.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This example uses both OpenMP and the Concurrency Runtime to compute the sum of the first 35 Fibonacci numbers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>concrt-openmp#7</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example produces the following output.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`combinable`</ph> class, see <bpt id="p1">[</bpt>Parallel Containers and Objects<ept id="p1">](../../parallel/concrt/parallel-containers-and-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`concrt-omp-fibonacci-reduction.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc /openmp concrt-omp-fibonacci-reduction.cpp</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Migrating from OpenMP to the Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Parallel Containers and Objects</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>