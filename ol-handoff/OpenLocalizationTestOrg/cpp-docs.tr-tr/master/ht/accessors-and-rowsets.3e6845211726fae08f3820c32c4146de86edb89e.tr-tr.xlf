<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa7dae56af966ae5d26803eedd13e69b3d32a284</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\accessors-and-rowsets.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b3a105fd220ab0ae953bfce804672e6286626c9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfd8eabd4b0a38fb697f0d31008c829910968dfe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Accessors and Rowsets | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Accessors and Rowsets</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To set and retrieve data, OLE DB Templates use an accessor and a rowset through the <bpt id="p1">[</bpt>CAccessorRowset<ept id="p1">](../../data/oledb/caccessorrowset-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class can handle multiple accessors of different types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Accessor Types</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>All accessors derive from <bpt id="p1">[</bpt>CAccessorBase<ept id="p1">](../../data/oledb/caccessorbase-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>provides both parameter and column binding.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following figure shows the accessor types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Accessor types</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Accessor Classes</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAccessor<ept id="p1">](../../data/oledb/caccessor-class.md)</ept> Use this accessor when you know the structure of the database source at design time.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>statically binds a database record, which contains the buffer, to the data source.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDynamicAccessor<ept id="p1">](../../data/oledb/cdynamicaccessor-class.md)</ept> Use this accessor when you do not know the structure of the database at design time.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>calls <ph id="ph1">`IColumnsInfo::GetColumnInfo`</ph> to get the database column information.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It creates and manages an accessor and the buffer.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDynamicParameterAccessor<ept id="p1">](../../data/oledb/cdynamicparameteraccessor-class.md)</ept> Use this accessor to handle unknown command types.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When you prepare the commands, <ph id="ph1">`CDynamicParameterAccessor`</ph> can get parameter information from the <ph id="ph2">`ICommandWithParameters`</ph> interface, if the provider supports <ph id="ph3">`ICommandWithParameters`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDynamicStringAccessor<ept id="p1">](../../data/oledb/cdynamicstringaccessor-class.md)</ept>, <bpt id="p2">[</bpt>CDynamicStringAccessorA<ept id="p2">](../../data/oledb/cdynamicstringaccessora-class.md)</ept>, and <bpt id="p3">[</bpt>CDynamicStringAccessorW<ept id="p3">](../../data/oledb/cdynamicstringaccessorw-class.md)</ept> Use these classes when you have no knowledge of the database schema.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>retrieves data as ANSI strings; <ph id="ph1">`CDynamicStringAccessorW`</ph> retrieves data as Unicode strings.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CManualAccessor<ept id="p1">](../../data/oledb/cmanualaccessor-class.md)</ept> With this class, you can use whatever data types you want if the provider can convert the type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It handles both result columns and command parameters.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following table summarizes the support in the OLE DB Template accessor types.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Accessor type</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Dynamic</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Handles params</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Buffer</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Multiple accessors</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>User</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>OLE DB Templates</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>OLE DB Templates</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>OLE DB Templates</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>User</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Rowset Types</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The OLE DB Templates support three kinds of rowsets (see the preceding figure): single rowsets (implemented by <bpt id="p1">[</bpt>CRowset<ept id="p1">](../../data/oledb/crowset-class.md)</ept>), bulk rowsets (implemented by <bpt id="p2">[</bpt>CBulkRowset<ept id="p2">](../../data/oledb/cbulkrowset-class.md)</ept>), and array rowsets (implemented by <bpt id="p3">[</bpt>CArrayRowset<ept id="p3">](../../data/oledb/carrayrowset-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Single rowsets fetch a single row handle when <ph id="ph1">`MoveNext`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Bulk rowsets can fetch multiple row handles.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Array rowsets are rowsets that can be accessed using array syntax.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following figure shows the rowset types.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>RowsetType graphic</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Rowset Classes</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Schema rowsets<ept id="p1">](../../data/oledb/obtaining-metadata-with-schema-rowsets.md)</ept> do not access data in the data store but instead access information about the data store, called metadata.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Schema rowsets are typically used in situations in which the database structure is not known at compile time and must be obtained at run time.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>OLE DB Consumer Templates</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>