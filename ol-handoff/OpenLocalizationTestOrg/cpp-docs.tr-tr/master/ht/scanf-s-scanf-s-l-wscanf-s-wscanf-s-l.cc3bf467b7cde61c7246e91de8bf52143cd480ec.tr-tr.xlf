<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">600cabdaa813d76c7c7433c01c29e93642ed7f87</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2140d43568e369c4040f6774ceebace29754eb38</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbf6878514b02e5086b2fcfad47ec00e31d73cd3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Reads formatted data from the standard input stream.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These versions of <bpt id="p1">[</bpt>scanf, _scanf_l, wscanf, _wscanf_l<ept id="p1">](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept> have security enhancements, as described in <bpt id="p2">[</bpt>Security Features in the CRT<ept id="p2">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Format control string.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional arguments.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The locale to use.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Returns the number of fields successfully converted and assigned; the return value does not include fields that were read but not assigned.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A return value of 0 indicates that no fields were assigned.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The return value is <ph id="ph1">`EOF`</ph> for an error, or if the end-of-file character or the end-of-string character is encountered in the first attempt to read a character.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`format`</ph> is a <ph id="ph2">`NULL`</ph> pointer, the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, <ph id="ph1">`scanf_s`</ph> and <ph id="ph2">`wscanf_s`</ph> return <ph id="ph3">`EOF`</ph> and set <ph id="ph4">`errno`</ph> to <ph id="ph5">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For information about these and other error codes, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`scanf_s`</ph> function reads data from the standard input stream <ph id="ph2">`stdin`</ph> and writes the data into the location that's given by <ph id="ph3">`argument`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`argument`</ph> must be a pointer to a variable of a type that corresponds to a type specifier in <ph id="ph2">`format`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If copying occurs between strings that overlap, the behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>is a wide-character version of <ph id="ph1">`scanf_s`</ph>; the <ph id="ph2">`format`</ph> argument to <ph id="ph3">`wscanf_s`</ph> is a wide-character string.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`scanf_s`</ph> behave identically if the stream is opened in ANSI mode.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>doesn't currently support input from a UNICODE stream.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The versions of these functions that have the <ph id="ph1">`_l`</ph> suffix are identical except that they use the locale parameter that's passed in instead of the current thread locale.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Unlike <ph id="ph1">`scanf`</ph> and <ph id="ph2">`wscanf`</ph>, <ph id="ph3">`scanf_s`</ph> and <ph id="ph4">`wscanf_s`</ph> require the buffer size to be specified for all input parameters of type <ph id="ph5">`c`</ph>, <ph id="ph6">`C`</ph>, <ph id="ph7">`s`</ph>, <ph id="ph8">`S`</ph>, or string control sets that are enclosed in <ph id="ph9">`[]`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The buffer size in characters is passed as an additional parameter immediately following the pointer to the buffer or variable.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, if you are reading a string, the buffer size for that string is passed as follows:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The buffer size includes the terminating null.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can use a width specification field to ensure that the token that's read in will fit into the buffer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If no width specification field is used, and the token read in is too big to fit in the buffer, nothing is written to that buffer.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The size parameter is of type <ph id="ph1">`unsigned`</ph>, not <ph id="ph2">`size_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use a static cast to convert a <ph id="ph1">`size_t`</ph> value to <ph id="ph2">`unsigned`</ph> for 64-bit build configurations.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example shows that the buffer size parameter describes the maximum number of characters, not bytes.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the call to <ph id="ph1">`wscanf_s`</ph>, the character width that is indicated by the buffer type does not match the character width that is indicated by the format specifier.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`S`</ph> format specifier indicates the use of the character width that is "opposite" the default width that is supported by the function.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The character width is single-byte, but the function supports double-byte characters.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This example reads in a string of up to 9 single-byte-wide characters and puts them in a double-byte-wide character buffer.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The characters are treated as single-byte values; the first two characters are stored in <ph id="ph1">`ws[0]`</ph>, the second two are stored in <ph id="ph2">`ws[1]`</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the case of characters, a single character may be read as follows:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When multiple characters for non-null terminated strings are read, integers are used as the width specification and the buffer size.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>scanf Width Specification<ept id="p1">](../../c-runtime-library/scanf-width-specification.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Format Specification Fields: scanf and wscanf Functions<ept id="p1">](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>stdio.h&gt;</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>stdio.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The console is not supported in <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The standard stream handles that are associated with the console—<ph id="ph1">`stdin`</ph>, <ph id="ph2">`stdout`</ph>, and <ph id="ph3">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id="ph4">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This program produces the following output when given this input:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>System::Console::Read</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>System::Console::ReadLine</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See also <ph id="ph1">`Parse`</ph> methods, such as <bpt id="p1">[</bpt>System::Double::Parse<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Floating-Point Support</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Stream I/O</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Locale</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>fscanf, _fscanf_l, fwscanf, _fwscanf_l</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>printf, _printf_l, wprintf, _wprintf_l</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id="ph1">\_</ph>_swprintf_l</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>sscanf, _sscanf_l, swscanf, _swscanf_l</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>