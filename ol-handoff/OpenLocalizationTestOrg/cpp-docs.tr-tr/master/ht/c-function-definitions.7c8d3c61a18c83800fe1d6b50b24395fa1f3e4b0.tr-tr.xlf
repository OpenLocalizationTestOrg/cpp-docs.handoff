<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">683d2d1098c253d83a5654e22ed2ad9e933d52aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-function-definitions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3c21b055c76f5687e9e254009a36c745ad13c4f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c4b575435832a417f5a69339de2c29af5994297</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Function Definitions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Function Definitions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A function definition specifies the name of the function, the types and number of parameters it expects to receive, and its return type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A function definition also includes a function body with the declarations of its local variables, and the statements that determine what the function does.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>translation-unit<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>external-declaration</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>translation-unit external-declaration</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>external-declaration<ept id="p1">*</ept>: /<ph id="ph1">\*</ph> Allowed only at external (file) scope</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>function-definition</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>function-definition<ept id="p1">*</ept>: /<ph id="ph1">\*</ph> Declarator here is the function declarator</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>declaration-specifiers<ept id="p1">*</ept> opt<bpt id="p2">*</bpt>attribute-seq<ept id="p2">*</ept> opt<bpt id="p3">*</bpt>declarator declaration-list<ept id="p3">*</ept> opt<bpt id="p4">*</bpt>compound-statement<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>attribute-seq<ept id="p1">*</ept> is Microsoft Specific */</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Prototype parameters are:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declaration-specifiers<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>storage-class-specifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-specifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-qualifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declaration-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>declaration</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>declaration-list declaration</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>pointer<ept id="p1">*</ept> opt<bpt id="p2">*</bpt>direct-declarator<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>: /<ph id="ph1">\*</ph> A function declarator</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>(<ept id="p2">**</ept>  <bpt id="p3">*</bpt>parameter-type-list<ept id="p3">*</ept>  <bpt id="p4">**</bpt>)<ept id="p4">**</ept> /* New-style declarator</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>(<ept id="p2">**</ept>  <bpt id="p3">*</bpt>identifier-list<ept id="p3">*</ept> opt<bpt id="p4">**</bpt>)<ept id="p4">**</ept> /* Obsolete-style declarator</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The parameter list in a definition uses this syntax:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>parameter-type-list<ept id="p1">*</ept>: /<ph id="ph1">\*</ph> The parameter list</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>parameter-list</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>parameter-list<ept id="p1">*</ept> <bpt id="p2">**</bpt>, ...<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>parameter-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>parameter-declaration</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>parameter-list<ept id="p1">*</ept> <bpt id="p2">**</bpt>,<ept id="p2">**</ept>  <bpt id="p3">*</bpt>parameter-declaration<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>parameter-declaration<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>declaration-specifiers declarator</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declaration-specifiers abstract declarator<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The parameter list in an old-style function definition uses this syntax:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>identifier-list<ept id="p1">*</ept>: /<ph id="ph1">\*</ph> Used in obsolete-style function definitions and declarations</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>identifier</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>identifier-list<ept id="p1">*</ept> <bpt id="p2">**</bpt>,<ept id="p2">**</ept>  <bpt id="p3">*</bpt>identifier<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The syntax for the function body is:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>compound-statement<ept id="p1">*</ept>: /<ph id="ph1">\*</ph> The function body</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>{<ept id="p1">**</ept>  <ph id="ph1">`declaration`-</ph><bpt id="p2">*</bpt>list<ept id="p2">*</ept> opt<bpt id="p3">*</bpt>statement-list<ept id="p3">*</ept> opt<bpt id="p4">**</bpt>}<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The only storage-class specifiers that can modify a function declaration are <ph id="ph1">`extern`</ph> and <bpt id="p1">**</bpt>static<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`extern`</ph> specifier signifies that the function can be referenced from other files; that is, the function name is exported to the linker.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>static<ept id="p1">**</ept> specifier signifies that the function cannot be referenced from other files; that is, the name is not exported by the linker.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If no storage class appears in a function definition, <ph id="ph1">`extern`</ph> is assumed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In any case, the function is always visible from the definition point to the end of the file.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The optional <bpt id="p1">*</bpt>declaration-specifiers<ept id="p1">*</ept> and mandatory <ph id="ph1">`declarator`</ph> together specify the function's return type and name.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`declarator`</ph> is a combination of the identifier that names the function and the parentheses following the function name.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The optional <bpt id="p1">*</bpt>attribute-seq<ept id="p1">*</ept> nonterminal is a Microsoft-specific feature defined in <bpt id="p2">[</bpt>Function Attributes<ept id="p2">](../c-language/function-attributes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept> (in the <ph id="ph1">`declarator`</ph> syntax) specifies the name of the function being defined and the identifiers of its parameters.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept> includes a <bpt id="p2">*</bpt>parameter-type-list<ept id="p2">*</ept>, the list specifies the types of all the parameters.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Such a declarator also serves as a function prototype for later calls to the function.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`declaration`</ph> in the <bpt id="p1">*</bpt>declaration-list<ept id="p1">*</ept> in function definitions cannot contain a <bpt id="p2">*</bpt>storage-class-specifier<ept id="p2">*</ept> other than <bpt id="p3">**</bpt>register<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept> in the <bpt id="p2">*</bpt>declaration-specifiers<ept id="p2">*</ept> syntax can be omitted only if the <bpt id="p3">**</bpt>register<ept id="p3">**</ept> storage class is specified for a value of <ph id="ph1">`int`</ph> type.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>compound-statement<ept id="p1">*</ept> is the function body containing local variable declarations, references to externally declared items, and statements.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The sections <bpt id="p1">[</bpt>Function Attributes<ept id="p1">](../c-language/function-attributes.md)</ept>, <bpt id="p2">[</bpt>Storage Class<ept id="p2">](../c-language/storage-class.md)</ept>, <bpt id="p3">[</bpt>Return Type<ept id="p3">](../c-language/return-type.md)</ept>, <bpt id="p4">[</bpt>Parameters<ept id="p4">](../c-language/parameters.md)</ept>, and <bpt id="p5">[</bpt>Function Body<ept id="p5">](../c-language/function-body.md)</ept> describe the components of the function definition in detail.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>