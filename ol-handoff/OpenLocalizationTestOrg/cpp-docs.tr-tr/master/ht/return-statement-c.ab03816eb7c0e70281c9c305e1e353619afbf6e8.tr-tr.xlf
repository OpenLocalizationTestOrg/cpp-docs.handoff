<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">733605ff82048d9e9b64e1d2b9ff0f3b728de1f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\return-statement-c.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9f121adff7ce514d2f9d5b8acddf1f4e33aa49a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa1fde4207c3f0efddb5cca8688f7af2397bdadd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>return Statement (C) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>return Statement (C)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`return`</ph> statement terminates the execution of a function and returns control to the calling function.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Execution resumes in the calling function at the point immediately following the call.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`return`</ph> statement can also return a value to the calling function.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Return Type<ept id="p1">](../c-language/return-type.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>jump-statement<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>return<ept id="p1">**</ept>  <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> opt<bpt id="p3">**</bpt>;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The value of <bpt id="p1">*</bpt>expression<ept id="p1">*</ept>, if present, is returned to the calling function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is omitted, the return value of the function is undefined.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The expression, if present, is evaluated and then converted to the type returned by the function.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the function was declared with return type <ph id="ph1">`void`</ph>, a <ph id="ph2">`return`</ph> statement containing an expression generates a warning and the expression is not evaluated.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`return`</ph> statement appears in a function definition, control automatically returns to the calling function after the last statement of the called function is executed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this case, the return value of the called function is undefined.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If a return value is not required, declare the function to have <ph id="ph1">`void`</ph> return type; otherwise, the default return type is <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Many programmers use parentheses to enclose the <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> argument of the <ph id="ph1">`return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, C does not require the parentheses.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This example demonstrates the <ph id="ph1">`return`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`main`</ph> function calls two functions: <ph id="ph2">`sq`</ph> and <ph id="ph3">`draw`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`sq`</ph> function returns the value of <ph id="ph2">`x * x`</ph> to <ph id="ph3">`main`</ph>, where the return value is assigned to <ph id="ph4">`y`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The parentheses around the return expression in <ph id="ph1">`sq`</ph> are evaluated as part of the expression, and are not required by the return statement.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Since the return expression is evaluated before it is converted to the return type, <ph id="ph1">`sq`</ph> forces the expression type to be the return type with a cast to prevent a possible integer overflow, which could lead to unexpected results.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`draw`</ph> function is declared as a <ph id="ph2">`void`</ph> function.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It prints the values of its parameters and then the empty return statement ends the function and does not return a value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An attempt to assign the return value of <ph id="ph1">`draw`</ph> would cause a diagnostic message to be issued.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`main`</ph> function then returns the value of <ph id="ph2">`x`</ph> to the operating system.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The output of the example looks like this:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Statements</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>