<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48fb90e872b16b527de0cc142258225ddf30bf04</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdaorecordset-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">878454170a5017f31ea8e19bd634ca58605d9f6b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3692c39253cb039139fc189e97653ed9d38858f9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDaoRecordset Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDaoRecordset Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a set of records selected from a data source.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CDaoRecordset</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDaoRecordset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::AddNew</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Prepares for adding a new record.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>Update<ept id="p1">](#cdaorecordset__update)</ept> to complete the addition.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanAppend</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Returns nonzero if new records can be added to the recordset via the <bpt id="p1">[</bpt>AddNew<ept id="p1">](#cdaorecordset__addnew)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanBookmark</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the recordset supports bookmarks.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CancelUpdate</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Cancels any pending updates due to an <bpt id="p1">[</bpt>Edit<ept id="p1">](#cdaorecordset__edit)</ept> or <bpt id="p2">[</bpt>AddNew<ept id="p2">](#cdaorecordset__addnew)</ept> operation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanRestart</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns nonzero if <bpt id="p1">[</bpt>Requery<ept id="p1">](#cdaorecordset__requery)</ept> can be called to run the recordset's query again.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanScroll</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns nonzero if you can scroll through the records.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanTransact</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the data source supports transactions.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanUpdate</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the recordset can be updated (you can add, update, or delete records).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Close</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Closes the recordset.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Delete</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Deletes the current record from the recordset.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You must explicitly scroll to another record after the deletion.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::DoFieldExchange</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Called to exchange data (in both directions) between the field data members of the recordset and the corresponding record on the data source.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Implements DAO record field exchange (DFX).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Edit</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Prepares for changes to the current record.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> to complete the edit.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::FillCache</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Fills all or a part of a local cache for a recordset object that contains data from an ODBC data source.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Find</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Locates the first, next, previous, or last location of a particular string in a dynaset-type recordset that satisfies the specified criteria and makes that record the current record.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::FindFirst</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Locates the first record in a dynaset-type or snapshot-type recordset that satisfies the specified criteria and makes that record the current record.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::FindLast</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Locates the last record in a dynaset-type or snapshot-type recordset that satisfies the specified criteria and makes that record the current record.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::FindNext</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Locates the next record in a dynaset-type or snapshot-type recordset that satisfies the specified criteria and makes that record the current record.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::FindPrev</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Locates the previous record in a dynaset-type or snapshot-type recordset that satisfies the specified criteria and makes that record the current record.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetAbsolutePosition</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns the record number of a recordset object's current record.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetBookmark</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns a value that represents the bookmark on a record.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetCacheSize</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns a value that specifies the number of records in a dynaset-type recordset containing data to be locally cached from an ODBC data source.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetCacheStart</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns a value that specifies the bookmark of the first record in the recordset to be cached.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetCurrentIndex</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CString`</ph> containing the name of the index most recently used on an indexed, table-type <ph id="ph2">`CDaoRecordset`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetDateCreated</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns the date and time the base table underlying a <ph id="ph1">`CDaoRecordset`</ph> object was created</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetDateLastUpdated</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns the date and time of the most recent change made to the design of a base table underlying a <ph id="ph1">`CDaoRecordset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetDefaultDBName</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns the name of the default data source.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetDefaultSQL</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Called to get the default SQL string to execute.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetEditMode</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates the state of editing for the current record.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetFieldCount</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Returns a value that represents the number of fields in a recordset.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetFieldInfo</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Returns specific kinds of information about the fields in the recordset.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetFieldValue</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns the value of a field in a recordset.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetIndexCount</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Retrieves the number of indexes in a table underlying a recordset.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetIndexInfo</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Returns various kinds of information about an index.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetLastModifiedBookmark</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Used to determine the most recently added or updated record.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetLockingMode</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates the type of locking that is in effect during editing.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetName</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CString`</ph> containing the name of the recordset.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetParamValue</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Retrieves the current value of the specified parameter stored in the underlying DAOParameter object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetPercentPosition</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Returns the position of the current record as a percentage of the total number of records.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetRecordCount</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returns the number of records accessed in a recordset object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetSQL</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Gets the SQL string used to select records for the recordset.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetType</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Called to determine the type of a recordset: table-type, dynaset-type, or snapshot-type.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetValidationRule</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CString`</ph> containing the value that validates data as it is entered into a field.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetValidationText</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Retrieves the text that is displayed when a validation rule is not satisfied.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsBOF</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the recordset has been positioned before the first record.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>There is no current record.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsDeleted</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the recordset is positioned on a deleted record.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsEOF</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the recordset has been positioned after the last record.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>There is no current record.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsFieldDirty</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the specified field in the current record has been changed.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsFieldNull</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the specified field in the current record is Null (having no value).</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsFieldNullable</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the specified field in the current record can be set to Null (having no value).</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsOpen</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Returns nonzero if <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaorecordset__open)</ept> has been called previously.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Move</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Positions the recordset to a specified number of records from the current record in either direction.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::MoveFirst</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Positions the current record on the first record in the recordset.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::MoveLast</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Positions the current record on the last record in the recordset.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::MoveNext</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Positions the current record on the next record in the recordset .</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::MovePrev</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Positions the current record on the previous record in the recordset.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Open</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Creates a new recordset from a table, dynaset, or snapshot.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Requery</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Runs the recordset's query again to refresh the selected records.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Seek</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Locates the record in an indexed table-type recordset object that satisfies the specified criteria for the current index and makes that record the current record.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetAbsolutePosition</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Sets the record number of a recordset object's current record.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetBookmark</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Positions the recordset on a record containing the specified bookmark.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetCacheSize</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Sets a value that specifies the number of records in a dynaset-type recordset containing data to be locally cached from an ODBC data source.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetCacheStart</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Sets a value that specifies the bookmark of the first record in the recordset to be cached.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetCurrentIndex</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Called to set an index on a table-type recordset.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetFieldDirty</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Marks the specified field in the current record as changed.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetFieldNull</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Sets the value of the specified field in the current record to Null (having no value).</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetFieldValue</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Sets the value of a field in a recordset.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetFieldValueNull</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Sets the value of a field in a recordset to Null.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>(having no value).</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetLockingMode</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Sets a value that indicates the type of locking to put into effect during editing.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetParamValue</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Sets the current value of the specified parameter stored in the underlying DAOParameter object</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetParamValueNull</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Sets the current value of the specified parameter to Null (having no value).</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetPercentPosition</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Sets the position of the current record to a location corresponding to a percentage of the total number of records in a recordset.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Update</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Completes an <ph id="ph1">`AddNew`</ph> or <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> operation by saving the new or edited data on the data source.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_bCheckCacheForDirtyFields</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Contains a flag indicating whether fields are automatically marked as changed.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_nFields</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Contains the number of field data members in the recordset class and the number of columns selected by the recordset from the data source.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_nParams</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Contains the number of parameter data members in the recordset class — the number of parameters passed with the recordset's query</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_pDAORecordset</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A pointer to the DAO interface underlying the recordset object.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_pDatabase</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Source database for this result set.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Contains a pointer to a <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_strFilter</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Contains a string used to construct a SQL <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_strSort</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Contains a string used to construct a SQL <bpt id="p1">**</bpt>ORDER BY<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Known as "recordsets," <ph id="ph1">`CDaoRecordset`</ph> objects are available in the following three forms:</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Table-type recordsets represent a base table that you can use to examine, add, change, or delete records from a single database table.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Dynaset-type recordsets are the result of a query that can have updateable records.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>These recordsets are a set of records that you can use to examine, add, change, or delete records from an underlying database table or tables.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Dynaset-type recordsets can contain fields from one or more tables in a database.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Snapshot-type recordsets are a static copy of a set of records that you can use to find data or generate reports.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>These recordsets can contain fields from one or more tables in a database but cannot be updated.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Each form of recordset represents a set of records fixed at the time the recordset is opened.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>When you scroll to a record in a table-type recordset or a dynaset-type recordset, it reflects changes made to the record after the recordset is opened, either by other users or by other recordsets in your application.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>(A snapshot-type recordset cannot be updated.) You can use <ph id="ph1">`CDaoRecordset`</ph> directly or derive an application-specific recordset class from <ph id="ph2">`CDaoRecordset`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>You can then:</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Scroll through the records.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Set an index and quickly look for records using <bpt id="p1">[</bpt>Seek<ept id="p1">](#cdaorecordset__seek)</ept> (table-type recordsets only).</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Find records based on a string comparison: "&lt;", "<ph id="ph1">\&lt;</ph>=", "=", "&gt;=", or "&gt;" (dynaset-type and snapshot-type recordsets).</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Update the records and specify a locking mode (except snapshot-type recordsets).</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Filter the recordset to constrain which records it selects from those available on the data source.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Sort the recordset.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Parameterize the recordset to customize its selection with information not known until run time.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`CDaoRecordset`</ph> supplies an interface similar to that of class <ph id="ph2">`CRecordset`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The main difference is that class <ph id="ph1">`CDaoRecordset`</ph> accesses data through a Data Access Object (DAO) based on OLE.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`CRecordset`</ph> accesses the DBMS through Open Database Connectivity (ODBC) and an ODBC driver for that DBMS.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The DAO database classes are distinct from the MFC database classes based on Open Database Connectivity (ODBC).</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>All DAO database class names have the "CDao" prefix.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>You can still access ODBC data sources with the DAO classes; the DAO classes generally offer superior capabilities because they are specific to the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>You can either use <ph id="ph1">`CDaoRecordset`</ph> directly or derive a class from <ph id="ph2">`CDaoRecordset`</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>To use a recordset class in either case, open a database and construct a recordset object, passing the constructor a pointer to your <ph id="ph1">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>You can also construct a <ph id="ph1">`CDaoRecordset`</ph> object and let MFC create a temporary <ph id="ph2">`CDaoDatabase`</ph> object for you.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Then call the recordset's <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaorecordset__open)</ept> member function, specifying whether the object is a table-type recordset, a dynaset-type recordset, or a snapshot-type recordset.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> selects data from the database and retrieves the first record.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Use the object's member functions and data members to scroll through the records and operate on them.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The operations available depend on whether the object is a table-type recordset, a dynaset-type recordset, or a snapshot-type recordset, and whether it is updateable or read-only — this depends on the capability of the database or Open Database Connectivity (ODBC) data source.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>To refresh records that may have been changed or added since the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> call, call the object's <bpt id="p2">[</bpt>Requery<ept id="p2">](#cdaorecordset__requery)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Call the object's <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> member function and destroy the object when you finish with it.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>uses DAO record field exchange (DFX) to support reading and updating of record fields through type-safe C++ members of your <ph id="ph1">`CDaoRecordset`</ph> or <ph id="ph2">`CDaoRecordset`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>You can also implement dynamic binding of columns in a database without using the DFX mechanism using <bpt id="p1">[</bpt>GetFieldValue<ept id="p1">](#cdaorecordset__getfieldvalue)</ept> and <bpt id="p2">[</bpt>SetFieldValue<ept id="p2">](#cdaorecordset__setfieldvalue)</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Recordset Object" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdao.h</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::AddNew</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Call this member function to add a new record to a table-type or dynaset-type recordset.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The record's fields are initially Null.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>(In database terminology, Null means "having no value" and is not the same as <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> in C++.) To complete the operation, you must call the <bpt id="p2">[</bpt>Update<ept id="p2">](#cdaorecordset__update)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Update<ept id="p1">**</ept> saves your changes to the data source.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>If you edit a record and then scroll to another record without calling <bpt id="p1">**</bpt>Update<ept id="p1">**</ept>, your changes are lost without warning.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>If you add a record to a dynaset-type recordset by calling <bpt id="p1">[</bpt>AddNew<ept id="p1">](#cdaorecordset__addnew)</ept>, the record is visible in the recordset and included in the underlying table where it becomes visible to any new <ph id="ph1">`CDaoRecordset`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The position of the new record depends on the type of recordset:</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>In a dynaset-type recordset, where the new record is inserted is not guaranteed.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>This behavior changed with Microsoft Jet 3.0 for reasons of performance and concurrency.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>If your goal is to make the newly added record the current record, get the bookmark of the last modified record and move to that bookmark:</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#1</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>In a table-type recordset for which an index has been specified, records are returned in their proper place in the sort order.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>If no index has been specified, new records are returned at the end of the recordset.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The record that was current before you used <ph id="ph1">`AddNew`</ph> remains current.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>If you want to make the new record current and the recordset supports bookmarks, call <bpt id="p1">[</bpt>SetBookmark<ept id="p1">](#cdaorecordset__setbookmark)</ept> to the bookmark identified by the LastModified property setting of the underlying DAO recordset object.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Doing so is useful for determining the value for counter (auto-increment) fields in an added record.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>GetLastModifiedBookmark<ept id="p1">](#cdaorecordset__getlastmodifiedbookmark)</ept>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If the database supports transactions, you can make your <ph id="ph1">`AddNew`</ph> call part of a transaction.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>For more information about transactions, see class <bpt id="p1">[</bpt>CDaoWorkspace<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Note that you should call <bpt id="p1">[</bpt>CDaoWorkspace::BeginTrans<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md#cdaoworkspace__begintrans)</ept> before calling <ph id="ph1">`AddNew`</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>It is illegal to call <ph id="ph1">`AddNew`</ph> for a recordset whose <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaorecordset__open)</ept> member function has not been called.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CDaoException`</ph> is thrown if you call <ph id="ph2">`AddNew`</ph> for a recordset that cannot be appended.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>You can determine whether the recordset is updateable by calling <bpt id="p1">[</bpt>CanAppend<ept id="p1">](#cdaorecordset__canappend)</ept>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The framework marks changed field data members to ensure they will be written to the record on the data source by the DAO record field exchange (DFX) mechanism.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Changing the value of a field generally sets the field dirty automatically, so you will seldom need to call <bpt id="p1">[</bpt>SetFieldDirty<ept id="p1">](#cdaorecordset__setfielddirty)</ept> yourself, but you might sometimes want to ensure that columns will be explicitly updated or inserted regardless of what value is in the field data member.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The DFX mechanism also employs the use of <bpt id="p1">**</bpt>PSEUDO NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDaoFieldExchange::m_nOperation<ept id="p1">](../../mfc/reference/cdaofieldexchange-class.md#cdaofieldexchange__m_noperation)</ept>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>If the double-buffering mechanism is not being used, then changing the value of the field does not automatically set the field as dirty.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>In this case, it will be necessary to explicitly set the field dirty.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The flag contained in <bpt id="p1">[</bpt>m_bCheckCacheForDirtyFields<ept id="p1">](#cdaorecordset__m_bcheckcachefordirtyfields)</ept> controls this automatic field checking.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>If records are double-buffered (that is, automatic field checking is enabled), calling <ph id="ph1">`CancelUpdate`</ph> will restore the member variables to the values they had before <ph id="ph2">`AddNew`</ph> or <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> was called.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "AddNew Method", "CancelUpdate Method", "LastModified Property", and "EditMode Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanAppend</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the previously opened recordset allows you to add new records by calling the <bpt id="p1">[</bpt>AddNew<ept id="p1">](#cdaorecordset__addnew)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Nonzero if the recordset allows adding new records; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>will return 0 if you opened the recordset as read-only.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Append Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanBookmark</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the previously opened recordset allows you to individually mark records using bookmarks.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Nonzero if the recordset supports bookmarks, otherwise 0.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>If you are using recordsets based entirely on Microsoft Jet database engine tables, bookmarks can be used except on snapshot-type recordsets flagged as forward-only scrolling recordsets.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Other database products (external ODBC data sources) may not support bookmarks.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Bookmarkable Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CancelUpdate</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CancelUpdate`</ph> member function cancels any pending updates due to an <bpt id="p1">[</bpt>Edit<ept id="p1">](#cdaorecordset__edit)</ept> or <bpt id="p2">[</bpt>AddNew<ept id="p2">](#cdaorecordset__addnew)</ept> operation.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>For example, if an application calls the <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> or <ph id="ph1">`AddNew`</ph> member function and has not called <bpt id="p2">[</bpt>Update<ept id="p2">](#cdaorecordset__update)</ept>, <ph id="ph2">`CancelUpdate`</ph> cancels any changes made after <bpt id="p3">**</bpt>Edit<ept id="p3">**</ept> or <ph id="ph3">`AddNew`</ph> was called.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>If records are double-buffered (that is, automatic field checking is enabled), calling <ph id="ph1">`CancelUpdate`</ph> will restore the member variables to the values they had before <ph id="ph2">`AddNew`</ph> or <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> was called.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>If there is no <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> or <ph id="ph1">`AddNew`</ph> operation pending, <ph id="ph2">`CancelUpdate`</ph> causes MFC to throw an exception.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>GetEditMode<ept id="p1">](#cdaorecordset__geteditmode)</ept> member function to determine if there is a pending operation that can be canceled.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "CancelUpdate Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanRestart</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the recordset allows restarting its query (to refresh its records) by calling the <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Nonzero if <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> can be called to run the recordset's query again, otherwise 0.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Table-type recordsets do not support <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> is not supported, call <bpt id="p2">[</bpt>Close<ept id="p2">](#cdaorecordset__close)</ept> then <bpt id="p3">[</bpt>Open<ept id="p3">](#cdaorecordset__open)</ept> to refresh the data.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> to update a recordset object's underlying parameter query after the parameter values have been changed.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Restartable Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanScroll</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the recordset allows scrolling.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Nonzero if you can scroll through the records, otherwise 0.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaorecordset__open)</ept> with <bpt id="p2">**</bpt>dbForwardOnly<ept id="p2">**</ept>, the recordset can only scroll forward.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Positioning the Current Record Pointer with DAO" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanTransact</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the recordset allows transactions.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Nonzero if the underlying data source supports transactions, otherwise 0.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Transactions Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CanUpdate</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the recordset can be updated.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Nonzero if the recordset can be updated (add, update, and delete records), otherwise 0.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>A recordset might be read-only if the underlying data source is read-only or if you specified <bpt id="p1">**</bpt>dbReadOnly<ept id="p1">**</ept> for <ph id="ph1">`nOptions`</ph> when you called <bpt id="p2">[</bpt>Open<ept id="p2">](#cdaorecordset__open)</ept> for the recordset.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "AddNew Method", "Edit Method", "Delete Method", "Update Method", and "Updatable Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::CDaoRecordset</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDaoRecordset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Contains a pointer to a <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object or the value <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>If not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> and the <ph id="ph1">`CDaoDatabase`</ph> object's <bpt id="p2">**</bpt>Open<ept id="p2">**</ept> member function has not been called to connect it to the data source, the recordset attempts to open it for you during its own <bpt id="p3">[</bpt>Open<ept id="p3">](#cdaorecordset__open)</ept> call.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>If you pass <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, a <ph id="ph1">`CDaoDatabase`</ph> object is constructed and connected for you using the data source information you specified if you derived your recordset class from <ph id="ph2">`CDaoRecordset`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>You can either use <ph id="ph1">`CDaoRecordset`</ph> directly or derive an application-specific class from <ph id="ph2">`CDaoRecordset`</ph>.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>You can use ClassWizard to derive your recordset classes.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>If you derive a <ph id="ph1">`CDaoRecordset`</ph> class, your derived class must supply its own constructor.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>In the constructor of your derived class, call the constructor <ph id="ph1">`CDaoRecordset::CDaoRecordset`</ph>, passing the appropriate parameters along to it.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> to your recordset constructor to have a <ph id="ph1">`CDaoDatabase`</ph> object constructed and connected for you automatically.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>This is a useful shortcut that does not require you to construct and connect a <ph id="ph1">`CDaoDatabase`</ph> object prior to constructing your recordset.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CDaoDatabase`</ph> object is not open, a <bpt id="p1">[</bpt>CDaoWorkspace<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md)</ept> object will also be created for you that uses the default workspace.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDaoDatabase::CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md#cdaodatabase__cdaodatabase)</ept>.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Close</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Closing a <ph id="ph1">`CDaoRecordset`</ph> object removes it from the collection of open recordsets in the associated database.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> does not destroy the <ph id="ph1">`CDaoRecordset`</ph> object, you can reuse the object by calling <bpt id="p2">**</bpt>Open<ept id="p2">**</ept> on the same data source or a different data source.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>All pending <bpt id="p1">[</bpt>AddNew<ept id="p1">](#cdaorecordset__addnew)</ept> or <bpt id="p2">[</bpt>Edit<ept id="p2">](#cdaorecordset__edit)</ept> statements are canceled, and all pending transactions are rolled back.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>If you want to preserve pending additions or edits, call <bpt id="p1">[</bpt>Update<ept id="p1">](#cdaorecordset__update)</ept> before you call <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> for each recordset.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> again after calling <bpt id="p2">**</bpt>Close<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>This lets you reuse the recordset object.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>A better alternative is to call <bpt id="p1">[</bpt>Requery<ept id="p1">](#cdaorecordset__requery)</ept>, if possible.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Close Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Delete</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Call this member function to delete the current record in an open dynaset-type or table-type recordset object.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>After a successful deletion, the recordset's field data members are set to a Null value, and you must explicitly call one of the recordset navigation member functions ( <bpt id="p1">[</bpt>Move<ept id="p1">](#cdaorecordset__move)</ept>, <bpt id="p2">[</bpt>Seek<ept id="p2">](#cdaorecordset__seek)</ept>, <bpt id="p3">[</bpt>SetBookmark<ept id="p3">](#cdaorecordset__setbookmark)</ept>, and so on) in order to move off the deleted record.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>When you delete records from a recordset, there must be a current record in the recordset before you call <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept>; otherwise, MFC throws an exception.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> removes the current record and makes it inaccessible.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Although you cannot edit or use the deleted record, it remains current.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Once you move to another record, however, you cannot make the deleted record current again.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The recordset must be updatable and there must be a valid record current in the recordset when you call <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>For example, if you delete a record but do not scroll to a new record before you call <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> again, <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept> throws a <bpt id="p3">[</bpt>CDaoException<ept id="p3">](../../mfc/reference/cdaoexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>You can undelete a record if you use transactions and you call the <bpt id="p1">[</bpt>CDaoWorkspace::Rollback<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md#cdaoworkspace__rollback)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>If the base table is the primary table in a cascade delete relationship, deleting the current record may also delete one or more records in a foreign table.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>For more information, see the definition "cascade delete" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Unlike <ph id="ph1">`AddNew`</ph> and <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, a call to <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept> is not followed by a call to <bpt id="p3">**</bpt>Update<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "AddNew Method", "Edit Method", "Delete Method", "Update Method", and "Updatable Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::DoFieldExchange</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to automatically exchange data between the field data members of your recordset object and the corresponding columns of the current record on the data source.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Contains a pointer to a <ph id="ph1">`CDaoFieldExchange`</ph> object.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The framework will already have set up this object to specify a context for the field exchange operation.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>It also binds your parameter data members, if any, to parameter placeholders in the SQL statement string for the recordset's selection.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The exchange of field data, called DAO record field exchange (DFX), works in both directions: from the recordset object's field data members to the fields of the record on the data source, and from the record on the data source to the recordset object.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>If you are binding columns dynamically, you are not required to implement <ph id="ph1">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The only action you must normally take to implement <ph id="ph1">`DoFieldExchange`</ph> for your derived recordset class is to create the class with ClassWizard and specify the names and data types of the field data members.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>You might also add code to what ClassWizard writes to specify parameter data members.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>If all fields are to be bound dynamically, this function will be inactive unless you specify parameter data members.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>When you declare your derived recordset class with ClassWizard, the wizard writes an override of <ph id="ph1">`DoFieldExchange`</ph> for you, which resembles the following example:</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#2</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Edit</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Call this member function to allow changes to the current record.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Once you call the <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> member function, changes made to the current record's fields are copied to the copy buffer.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>After you make the desired changes to the record, call <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> to save your changes.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> saves the values of the recordset's data members.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, make changes, then call <bpt id="p2">**</bpt>Edit<ept id="p2">**</ept> again, the record's values are restored to what they were before the first <bpt id="p3">**</bpt>Edit<ept id="p3">**</ept> call.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>If you edit a record and then perform any operation that moves to another record without first calling <bpt id="p1">**</bpt>Update<ept id="p1">**</ept>, your changes are lost without warning.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>In addition, if you close the recordset or the parent database, your edited record is discarded without warning.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to update a column by making it Null (containing no data).</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>To do so, call <ph id="ph1">`SetFieldNull`</ph> with a parameter of <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to mark the field Null; this also causes the column to be updated.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>If you want a field to be written to the data source even though its value has not changed, call <ph id="ph1">`SetFieldDirty`</ph> with a parameter of <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>This works even if the field had the value Null.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The framework marks changed field data members to ensure they will be written to the record on the data source by the DAO record field exchange (DFX) mechanism.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Changing the value of a field generally sets the field dirty automatically, so you will seldom need to call <bpt id="p1">[</bpt>SetFieldDirty<ept id="p1">](#cdaorecordset__setfielddirty)</ept> yourself, but you might sometimes want to ensure that columns will be explicitly updated or inserted regardless of what value is in the field data member.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The DFX mechanism also employs the use of <bpt id="p1">**</bpt>PSEUDO NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDaoFieldExchange::m_nOperation<ept id="p1">](../../mfc/reference/cdaofieldexchange-class.md#cdaofieldexchange__m_noperation)</ept>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>If the double-buffering mechanism is not being used, then changing the value of the field does not automatically set the field as dirty.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>In this case, it will be necessary to explicitly set the field dirty.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The flag contained in <bpt id="p1">[</bpt>m_bCheckCacheForDirtyFields<ept id="p1">](#cdaorecordset__m_bcheckcachefordirtyfields)</ept> controls this automatic field checking.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>When the recordset object is pessimistically locked in a multiuser environment, the record remains locked from the time <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> is used until the updating is complete.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>If the recordset is optimistically locked, the record is locked and compared with the pre-edited record just before it is updated in the database.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>If the record has changed since you called <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, the <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> operation fails and MFC throws an exception.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>You can change the locking mode with <ph id="ph1">`SetLockingMode`</ph>.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Optimistic locking is always used on external database formats, such as ODBC and installable ISAM.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The current record remains current after you call <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>To call <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, there must be a current record.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>If there is no current record or if the recordset does not refer to an open table-type or dynaset-type recordset object, an exception occurs.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> causes a <ph id="ph1">`CDaoException`</ph> to be thrown under the following conditions:</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>There is no current record.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The database or recordset is read-only.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>No fields in the record are updatable.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>The database or recordset was opened for exclusive use by another user.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Another user has locked the page containing your record.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>If the data source supports transactions, you can make the <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> call part of a transaction.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Note that you should call <ph id="ph1">`CDaoWorkspace::BeginTrans`</ph> before calling <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> and after the recordset has been opened.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Also note that calling <ph id="ph1">`CDaoWorkspace::CommitTrans`</ph> is not a substitute for calling <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> to complete the <bpt id="p2">**</bpt>Edit<ept id="p2">**</ept> operation.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>For more information about transactions, see class <ph id="ph1">`CDaoWorkspace`</ph>.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "AddNew Method", "Edit Method", "Delete Method", "Update Method", and "Updatable Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::FillCache</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Call this member function to cache a specified number of records from the recordset.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Specifies the number of rows to fill in the cache.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>If you omit this parameter, the value is determined by the CacheSize property setting of the underlying DAO object.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md)</ept> specifying a bookmark.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>The cache is filled starting from the record indicated by this bookmark.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>If you omit this parameter, the cache is filled starting from the record indicated by the CacheStart property of the underlying DAO object.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Caching improves the performance of an application that retrieves, or fetches, data from a remote server.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>A cache is space in local memory that holds the data most recently fetched from the server on the assumption that the data will probably be requested again while the application is running.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>When data is requested, the Microsoft Jet database engine checks the cache for the data first rather than fetching it from the server, which takes more time.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Using data caching on non-ODBC data sources has no effect as the data is not saved in the cache.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Rather than waiting for the cache to be filled with records as they are fetched, you can explicitly fill the cache at any time by calling the <ph id="ph1">`FillCache`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>This is a faster way to fill the cache because <ph id="ph1">`FillCache`</ph> fetches several records at once instead of one at a time.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>For example, while each screenful of records is being displayed, you can have your application call <ph id="ph1">`FillCache`</ph> to fetch the next screenful of records.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Any ODBC database accessed with recordset objects can have a local cache.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>To create the cache, open a recordset object from the remote data source, and then call the <ph id="ph1">`SetCacheSize`</ph> and <ph id="ph2">`SetCacheStart`</ph> member functions of the recordset.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lSize`</ph> and <bpt id="p1">*</bpt>lBookmark<ept id="p1">*</ept> create a range that is partly or wholly outside the range specified by <ph id="ph2">`SetCacheSize`</ph> and <ph id="ph3">`SetCacheStart`</ph>, the portion of the recordset outside this range is ignored and is not loaded into the cache.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`FillCache`</ph> requests more records than remain in the remote data source, only the remaining records are fetched, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Records fetched from the cache do not reflect changes made concurrently to the source data by other users.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>fetches only records not already cached.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>To force an update of all the cached data, call the <ph id="ph1">`SetCacheSize`</ph> member function with an <ph id="ph2">`lSize`</ph> parameter equal to 0, call <ph id="ph3">`SetCacheSize`</ph> again with the <ph id="ph4">`lSize`</ph> parameter equal to the size of the cache you originally requested, and then call <ph id="ph5">`FillCache`</ph>.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "FillCache Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Find</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Call this member function to locate a particular string in a dynaset- or snapshot-type recordset using a comparison operator.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>lFindType</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>A value indicating the type of Find operation desired.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The possible values are:</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AFX_DAO_NEXT<ept id="p1">**</ept> Find the next location of a matching string.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AFX_DAO_PREV<ept id="p1">**</ept> Find the previous location of a matching string.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AFX_DAO_FIRST<ept id="p1">**</ept> Find the first location of a matching string.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AFX_DAO_LAST<ept id="p1">**</ept> Find the last location of a matching string.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>A string expression (like the <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause in a SQL statement without the word <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept>) used to locate the record.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#3</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Nonzero if matching records are found, otherwise 0.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>You can find the first, next, previous, or last instance of the string.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Find<ept id="p1">**</ept> is a virtual function, so you can override it and add your own implementation.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FindFirst`</ph>, <ph id="ph2">`FindLast`</ph>, <ph id="ph3">`FindNext`</ph>, and <ph id="ph4">`FindPrev`</ph> member functions call the <bpt id="p1">**</bpt>Find<ept id="p1">**</ept> member function, so you can use <bpt id="p2">**</bpt>Find<ept id="p2">**</ept> to control the behavior of all Find operations.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>To locate a record in a table-type recordset, call the <bpt id="p1">[</bpt>Seek<ept id="p1">](#cdaorecordset__seek)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The smaller the set of records you have, the more effective <bpt id="p1">**</bpt>Find<ept id="p1">**</ept> will be.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>In general, and especially with ODBC data, it is better to create a new query that retrieves just the records you want.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "FindFirst, FindLast, FindNext, FindPrevious Methods" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::FindFirst</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Call this member function to find the first record that matches a specified condition.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>A string expression (like the <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause in a SQL statement without the word <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept>) used to locate the record.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Nonzero if matching records are found, otherwise 0.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FindFirst`</ph> member function begins its search from the beginning of the recordset and searches to the end of the recordset.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>If you want to include all the records in your search (not just those that meet a specific condition) use one of the Move operations to move from record to record.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>To locate a record in a table-type recordset, call the <ph id="ph1">`Seek`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>If a record matching the criteria is not located, the current record pointer is undetermined, and <ph id="ph1">`FindFirst`</ph> returns zero.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>If the recordset contains more than one record that satisfies the criteria, <ph id="ph1">`FindFirst`</ph> locates the first occurrence, <ph id="ph2">`FindNext`</ph> locates the next occurrence, and so on.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>If you edit the current record, be sure to save the changes by calling the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> member function before you move to another record.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>If you move to another record without updating, your changes are lost without warning.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Find<ept id="p1">**</ept> member functions search from the location and in the direction specified in the following table:</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Find operations</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Begin</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Search direction</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Beginning of recordset</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>End of recordset</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>End of recordset</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Beginning of recordset</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Current record</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>End of recordset</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>FindPrevious</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Current record</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Beginning of recordset</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>When you call <ph id="ph1">`FindLast`</ph>, the Microsoft Jet database engine fully populates your recordset before beginning the search, if this has not already been done.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>The first search may take longer than subsequent searches.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Using one of the Find operations is not the same as calling <bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept> or <ph id="ph1">`MoveNext`</ph>, however, which simply makes the first or next record current without specifying a condition.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>You can follow a Find operation with a Move operation.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Keep the following in mind when using the Find operations:</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>Find<ept id="p1">**</ept> returns nonzero, the current record is not defined.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>In this case, you must position the current record pointer back to a valid record.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>You cannot use a Find operation with a forward-only scrolling snapshot-type recordset.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>You should use the U.S. date format (month-day-year) when you search for fields containing dates, even if you are not using the U.S. version of the Microsoft Jet database engine; otherwise, matching records may not be found.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>When working with ODBC databases and large dynasets, you may discover that using the Find operations is slow, especially when working with large recordsets.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>You can improve performance by using SQL queries with customized <bpt id="p1">**</bpt>ORDERBY<ept id="p1">**</ept> or <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept> clauses, parameter queries, or <bpt id="p3">**</bpt>CDaoQuerydef<ept id="p3">**</ept> objects that retrieve specific indexed records.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "FindFirst, FindLast, FindNext, FindPrevious Methods" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::FindLast</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Call this member function to find the last record that matches a specified condition.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>A string expression (like the <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause in a SQL statement without the word <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept>) used to locate the record.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Nonzero if matching records are found, otherwise 0.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FindLast`</ph> member function begins its search at the end of the recordset and searches backward towards the beginning of the recordset.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>If you want to include all the records in your search (not just those that meet a specific condition) use one of the Move operations to move from record to record.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>To locate a record in a table-type recordset, call the <ph id="ph1">`Seek`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>If a record matching the criteria is not located, the current record pointer is undetermined, and <ph id="ph1">`FindLast`</ph> returns zero.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>If the recordset contains more than one record that satisfies the criteria, <ph id="ph1">`FindFirst`</ph> locates the first occurrence, <ph id="ph2">`FindNext`</ph> locates the next occurrence after the first occurrence, and so on.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>If you edit the current record, be sure you save the changes by calling the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> member function before you move to another record.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>If you move to another record without updating, your changes are lost without warning.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Using one of the Find operations is not the same as calling <bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept> or <ph id="ph1">`MoveNext`</ph>, however, which simply makes the first or next record current without specifying a condition.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>You can follow a Find operation with a Move operation.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Keep the following in mind when using the Find operations:</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>Find<ept id="p1">**</ept> returns nonzero, the current record is not defined.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>In this case, you must position the current record pointer back to a valid record.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>You cannot use a Find operation with a forward-only scrolling snapshot-type recordset.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>You should use the U.S. date format (month-day-year) when you search for fields containing dates, even if you are not using the U.S. version of the Microsoft Jet database engine; otherwise, matching records may not be found.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>When working with ODBC databases and large dynasets, you may discover that using the Find operations is slow, especially when working with large recordsets.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>You can improve performance by using SQL queries with customized <bpt id="p1">**</bpt>ORDERBY<ept id="p1">**</ept> or <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept> clauses, parameter queries, or <bpt id="p3">**</bpt>CDaoQuerydef<ept id="p3">**</ept> objects that retrieve specific indexed records.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "FindFirst, FindLast, FindNext, FindPrevious Methods" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::FindNext</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Call this member function to find the next record that matches a specified condition.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>A string expression (like the <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause in a SQL statement without the word <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept>) used to locate the record.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Nonzero if matching records are found, otherwise 0.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FindNext`</ph> member function begins its search at the current record and searches to the end of the recordset.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>If you want to include all the records in your search (not just those that meet a specific condition) use one of the Move operations to move from record to record.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>To locate a record in a table-type recordset, call the <ph id="ph1">`Seek`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>If a record matching the criteria is not located, the current record pointer is undetermined, and <ph id="ph1">`FindNext`</ph> returns zero.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>If the recordset contains more than one record that satisfies the criteria, <ph id="ph1">`FindFirst`</ph> locates the first occurrence, <ph id="ph2">`FindNext`</ph> locates the next occurrence, and so on.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>If you edit the current record, be sure you save the changes by calling the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> member function before you move to another record.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>If you move to another record without updating, your changes are lost without warning.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Using one of the Find operations is not the same as calling <bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept> or <ph id="ph1">`MoveNext`</ph>, however, which simply makes the first or next record current without specifying a condition.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>You can follow a Find operation with a Move operation.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Keep the following in mind when using the Find operations:</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>Find<ept id="p1">**</ept> returns nonzero, the current record is not defined.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>In this case, you must position the current record pointer back to a valid record.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>You cannot use a Find operation with a forward-only scrolling snapshot-type recordset.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>You should use the U.S. date format (month-day-year) when you search for fields containing dates, even if you are not using the U.S. version of the Microsoft Jet database engine; otherwise, matching records may not be found.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>When working with ODBC databases and large dynasets, you may discover that using the Find operations is slow, especially when working with large recordsets.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>You can improve performance by using SQL queries with customized <bpt id="p1">**</bpt>ORDERBY<ept id="p1">**</ept> or <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept> clauses, parameter queries, or <bpt id="p3">**</bpt>CDaoQuerydef<ept id="p3">**</ept> objects that retrieve specific indexed records.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "FindFirst, FindLast, FindNext, FindPrevious Methods" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::FindPrev</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Call this member function to find the previous record that matches a specified condition.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>A string expression (like the <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause in a SQL statement without the word <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept>) used to locate the record.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Nonzero if matching records are found, otherwise 0.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FindPrev`</ph> member function begins its search at the current record and searches backward towards the beginning of the recordset.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>If you want to include all the records in your search (not just those that meet a specific condition) use one of the Move operations to move from record to record.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>To locate a record in a table-type recordset, call the <ph id="ph1">`Seek`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>If a record matching the criteria is not located, the current record pointer is undetermined, and <ph id="ph1">`FindPrev`</ph> returns zero.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>If the recordset contains more than one record that satisfies the criteria, <ph id="ph1">`FindFirst`</ph> locates the first occurrence, <ph id="ph2">`FindNext`</ph> locates the next occurrence, and so on.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>If you edit the current record, be sure you save the changes by calling the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> member function before you move to another record.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>If you move to another record without updating, your changes are lost without warning.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Using one of the Find operations is not the same as calling <bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept> or <ph id="ph1">`MoveNext`</ph>, however, which simply makes the first or next record current without specifying a condition.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>You can follow a Find operation with a Move operation.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Keep the following in mind when using the Find operations:</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>Find<ept id="p1">**</ept> returns nonzero, the current record is not defined.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>In this case, you must position the current record pointer back to a valid record.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>You cannot use a Find operation with a forward-only scrolling snapshot-type recordset.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>You should use the U.S. date format (month-day-year) when you search for fields containing dates, even if you are not using the U.S. version of the Microsoft Jet database engine; otherwise, matching records may not be found.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>When working with ODBC databases and large dynasets, you may discover that using the Find operations is slow, especially when working with large recordsets.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>You can improve performance by using SQL queries with customized <bpt id="p1">**</bpt>ORDERBY<ept id="p1">**</ept> or <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept> clauses, parameter queries, or <bpt id="p3">**</bpt>CDaoQuerydef<ept id="p3">**</ept> objects that retrieve specific indexed records.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "FindFirst, FindLast, FindNext, FindPrevious Methods" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetAbsolutePosition</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Returns the record number of a recordset object's current record.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>An integer from 0 to the number of records in the recordset.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Corresponds to the ordinal position of the current record in the recordset.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>The AbsolutePosition property value of the underlying DAO object is zero-based; a setting of 0 refers to the first record in the recordset.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>You can determine the number of populated records in the recordset by calling <bpt id="p1">[</bpt>GetRecordCount<ept id="p1">](#cdaorecordset__getrecordcount)</ept>.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`GetRecordCount`</ph> may take some time because it must access all records to determine the count.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>If there is no current record, as when there are no records in the recordset, – 1 is returned.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>If the current record is deleted, the AbsolutePosition property value is not defined, and MFC throws an exception if it is referenced.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>For dynaset-type recordsets, new records are added to the end of the sequence.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>This property is not intended to be used as a surrogate record number.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Bookmarks are still the recommended way of retaining and returning to a given position and are the only way to position the current record across all types of recordset objects.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>In particular, the position of a given record changes when record(s) preceding it are deleted.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>There is also no assurance that a given record will have the same absolute position if the recordset is re-created again because the order of individual records within a recordset is not guaranteed unless it is created with a SQL statement using an <bpt id="p1">**</bpt>ORDERBY<ept id="p1">**</ept> clause.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>This member function is valid only for dynaset-type and snapshot-type recordsets.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "AbsolutePosition Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetBookmark</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain the bookmark value in a particular record.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Returns a value representing the bookmark on the current record.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>When a recordset object is created or opened, each of its records already has a unique bookmark if it supports them.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`CanBookmark`</ph> to determine whether a recordset supports bookmarks.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>You can save the bookmark for the current record by assigning the value of the bookmark to a <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>To quickly return to that record at any time after moving to a different record, call <ph id="ph1">`SetBookmark`</ph> with a parameter corresponding to the value of that <ph id="ph2">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">[</bpt>Requery<ept id="p1">](#cdaorecordset__requery)</ept> changes DAO bookmarks.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Bookmark Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetCacheSize</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain the number of records cached.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>A value that specifies the number of records in a dynaset-type recordset containing data to be locally cached from an ODBC data source.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Data caching improves the performance of an application that retrieves data from a remote server through dynaset-type recordset objects.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>A cache is a space in local memory that holds the data most recently retrieved from the server in the event that the data will be requested again while the application is running.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>When data is requested, the Microsoft Jet database engine checks the cache for the requested data first rather than retrieving it from the server, which takes more time.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Data that does not come from an ODBC data source is not saved in the cache.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Any ODBC data source, such as an attached table, can have a local cache.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "CacheSize, CacheStart Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetCacheStart</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain the bookmark value of the first record in the recordset to be cached.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`COleVariant`</ph> that specifies the bookmark of the first record in the recordset to be cached.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>The Microsoft Jet database engine requests records within the cache range from the cache, and it requests records outside the cache range from the server.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Records retrieved from the cache do not reflect changes made concurrently to the source data by other users.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "CacheSize, CacheStart Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetCurrentIndex</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Call this member function to determine the index currently in use in an indexed table-type <ph id="ph1">`CDaoRecordset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> containing the name of the index currently in use with a table-type recordset.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Returns an empty string if no index has been set.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>This index is the basis for ordering records in a table-type recordset, and is used by the <bpt id="p1">[</bpt>Seek<ept id="p1">](#cdaorecordset__seek)</ept> member function to locate records.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CDaoRecordset`</ph> object can have more than one index but can use only one index at a time (although a <bpt id="p1">[</bpt>CDaoTableDef<ept id="p1">](../../mfc/reference/cdaotabledef-class.md)</ept> object may have several indexes defined on it).</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Index Object" and the definition "current index" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetDateCreated</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the date and time a base table was created.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>COleDateTime<ept id="p1">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept> object containing the date and time the base table was created.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Date and time settings are derived from the computer on which the base table was created.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "DateCreated, LastUpdated Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetDateLastUpdated</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the date and time the schema was last updated.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>COleDateTime<ept id="p1">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept> object containing the date and time the base table structure (schema) was last updated.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Date and time settings are derived from the computer on which the base table structure (schema) was last updated.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "DateCreated, LastUpdated Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetDefaultDBName</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Call this member function to determine the name of the database for this recordset.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> that contains the path and name of the database from which this recordset is derived.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>If a recordset is created without a pointer to a <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept>, then this path is used by the recordset to open the default database.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>By default, this function returns an empty string.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>When ClassWizard derives a new recordset from <ph id="ph1">`CDaoRecordset`</ph>, it will create this function for you.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of the double backslash (<ph id="ph1">\\\\</ph>) in the string, as is required for the string to be interpreted correctly.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#4</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetDefaultSQL</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to get the default SQL statement on which the recordset is based.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> that contains the default SQL statement.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>This might be a table name or a SQL <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>You indirectly define the default SQL statement by declaring your recordset class with ClassWizard, and ClassWizard performs this task for you.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>If you pass a null SQL string to <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaorecordset__open)</ept>, then this function is called to determine the table name or SQL for your recordset.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetEditMode</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>Call this member function to determine the state of editing, which is one of the following values:</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates the state of editing for the current record.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>dbEditNone</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>No editing operation is in progress.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>dbEditInProgress</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> has been called.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>dbEditAdd</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>has been called.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "EditMode Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetFieldCount</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the number of fields (columns) defined in the recordset.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>The number of fields in the recordset.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Count Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetFieldInfo</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain information about the fields in a recordset.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>The zero-based index of the predefined field in the recordset's Fields collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CDaoFieldInfo<ept id="p1">](../../mfc/reference/cdaofieldinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Options that specify which information about the recordset to retrieve.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>The available options are listed here along with what they cause the function to return.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>For best performance, retrieve only the level of information you need:</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>(Default) Name, Type, Size, Attributes</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Primary information, plus: Ordinal Position, Required, Allow Zero Length, Collating Order, Foreign Name, Source Field, Source Table</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Primary and secondary information, plus: Default Value, Validation Rule, Validation Text</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>The name of the field.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>One version of the function lets you look up a field by index.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>The other version lets you look up a field by name.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>For a description of the information returned, see the <bpt id="p1">[</bpt>CDaoFieldInfo<ept id="p1">](../../mfc/reference/cdaofieldinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>This structure has members that correspond to the items of information listed above in the description of <ph id="ph1">`dwInfoOptions`</ph>.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>When you request information at one level, you get information for any prior levels as well.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Attributes Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetFieldValue</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve data in a recordset.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>A pointer to a string that contains the name of a field.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`COleVariant`</ph> object that will store the value of a field.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>A zero-based index of the field in the recordset's Fields collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>The two versions of <ph id="ph1">`GetFieldValue`</ph> that return a value return a <bpt id="p1">[</bpt>COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md)</ept> object that contains the value of a field.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>You can look up a field by name or by ordinal position.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>It is more efficient to call one of the versions of this member function that takes a <ph id="ph1">`COleVariant`</ph> object reference as a parameter, rather than calling a version that returns a <ph id="ph2">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>The latter versions of this function are kept for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`GetFieldValue`</ph> and <bpt id="p1">[</bpt>SetFieldValue<ept id="p1">](#cdaorecordset__setfieldvalue)</ept> to dynamically bind fields at run time rather than statically binding columns using the <bpt id="p2">[</bpt>DoFieldExchange<ept id="p2">](#cdaorecordset__dofieldexchange)</ept> mechanism.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>and the <ph id="ph1">`DoFieldExchange`</ph> mechanism can be combined to improve performance.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>For example, use <ph id="ph1">`GetFieldValue`</ph> to retrieve a value that you need only on demand, and assign that call to a "More Information" button in the interface.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "Field Object" and "Value Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetIndexCount</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Call this member function to determine the number of indexes available on the table-type recordset.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>The number of indexes in the table-type recordset.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>is useful for looping through all indexes in the recordset.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>For that purpose, use <ph id="ph1">`GetIndexCount`</ph> in conjunction with <bpt id="p1">[</bpt>GetIndexInfo<ept id="p1">](#cdaorecordset__getindexinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>If you call this member function on dynaset-type or snapshot-type recordsets, MFC throws an exception.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Attributes Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetIndexInfo</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain various kinds of information about an index defined in the base table underlying a recordset.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>The zero-based index in the table's Indexes collection, for lookup by numerical position.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CDaoIndexInfo<ept id="p1">](../../mfc/reference/cdaoindexinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Options that specify which information about the index to retrieve.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>The available options are listed here along with what they cause the function to return.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>For best performance, retrieve only the level of information you need:</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>(Default) Name, Field Info, Fields</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Primary information, plus: Primary, Unique, Clustered, IgnoreNulls, Required, Foreign</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Primary and secondary information, plus: Distinct Count</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>A pointer to the name of the index object, for lookup by name.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>One version of the function lets you look up a index by its position in the collection.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>The other version lets you look up an index by name.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>For a description of the information returned, see the <bpt id="p1">[</bpt>CDaoIndexInfo<ept id="p1">](../../mfc/reference/cdaoindexinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>This structure has members that correspond to the items of information listed above in the description of <ph id="ph1">`dwInfoOptions`</ph>.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>When you request information at one level, you get information for any prior levels as well.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Attributes Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetLastModifiedBookmark</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the bookmark of the most recently added or updated record.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`COleVariant`</ph> containing a bookmark that indicates the most recently added or changed record.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>When a recordset object is created or opened, each of its records already has a unique bookmark if it supports them.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>GetBookmark<ept id="p1">](#cdaorecordset__getbookmark)</ept> to determine if the recordset supports bookmarks.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>If the recordset does not support bookmarks, a <ph id="ph1">`CDaoException`</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>When you add a record, it appears at the end of the recordset, and is not the current record.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>To make the new record current, call <ph id="ph1">`GetLastModifiedBookmark`</ph> and then call <ph id="ph2">`SetBookmark`</ph> to return to the newly added record.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "LastModified Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetLockingMode</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>Call this member function to determine the type of locking in effect for the recordset.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Nonzero if the type of locking is pessimistic, otherwise 0 for optimistic record locking.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>When pessimistic locking is in effect, the data page containing the record you are editing is locked as soon as you call the <bpt id="p1">[</bpt>Edit<ept id="p1">](#cdaorecordset__edit)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>The page is unlocked when you call the <bpt id="p1">[</bpt>Update<ept id="p1">](#cdaorecordset__update)</ept> or <bpt id="p2">[</bpt>Close<ept id="p2">](#cdaorecordset__close)</ept> member function or any of the Move or Find operations.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>When optimistic locking is in effect, the data page containing the record is locked only while the record is being updated with the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>When working with ODBC data sources, the locking mode is always optimistic.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "LockEdits Property" and "Locking Behavior in Multiuser Applications" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetName</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the name of the recordset.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> containing the name of the recordset.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>The name of the recordset must start with a letter and can contain a maximum of 40 characters.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>It can include numbers and underscore characters but can't include punctuation or spaces.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Name Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetParamValue</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the current value of the specified parameter stored in the underlying DAOParameter object.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The numerical position of the parameter in the underlying DAOParameter object.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>The name of the parameter whose value you want.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>An object of class <bpt id="p1">[</bpt>COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md)</ept> that contains the parameter's value.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>You can access the parameter either by name or by its numerical position in the collection.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Parameter Object" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetPercentPosition</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>When working with a dynaset-type or snapshot-type recordset, if you call <ph id="ph1">`GetPercentPosition`</ph> before fully populating the recordset, the amount of movement is relative to the number of records accessed as indicated by calling <bpt id="p1">[</bpt>GetRecordCount<ept id="p1">](#cdaorecordset__getrecordcount)</ept>.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>A number between 0 and 100 that indicates the approximate location of the current record in the recordset object based on a percentage of the records in the recordset.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>You can move to the last record by calling <bpt id="p1">[</bpt>MoveLast<ept id="p1">](#cdaorecordset__movelast)</ept> to complete the population of all recordsets, but this may take a significant amount of time.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`GetPercentPosition`</ph> on all three types of recordset objects, including tables without indexes.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>However, you cannot call <ph id="ph1">`GetPercentPosition`</ph> on forward-only scrolling snapshots, or on a recordset opened from a pass-through query against an external database.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>If there is no current record, or he current record has been deleted, a <ph id="ph1">`CDaoException`</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "PercentPosition Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetRecordCount</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Call this member function to find out how many records in a recordset have been accessed.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Returns the number of records accessed in a recordset object.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>does not indicate how many records are contained in a dynaset-type or snapshot-type recordset until all records have been accessed.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>This member function call may take a significant amount of time to complete.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Once the last record has been accessed, the return value indicates the total number of undeleted records in the recordset.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>To force the last record to be accessed, call the <ph id="ph1">`MoveLast`</ph> or <ph id="ph2">`FindLast`</ph> member function for the recordset.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>You can also use a SQL Count to determine the approximate number of records your query will return.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>As your application deletes records in a dynaset-type recordset, the return value of <ph id="ph1">`GetRecordCount`</ph> decreases.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>However, records deleted by other users are not reflected by <ph id="ph1">`GetRecordCount`</ph> until the current record is positioned to a deleted record.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>If you execute a transaction that affects the record count and subsequently roll back the transaction, <ph id="ph1">`GetRecordCount`</ph> will not reflect the actual number of remaining records.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`GetRecordCount`</ph> from a snapshot-type recordset is not affected by changes in the underlying tables.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`GetRecordCount`</ph> from a table-type recordset reflects the approximate number of records in the table and is affected immediately as table records are added and deleted.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>A recordset with no records returns a value of 0.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>When working with attached tables or ODBC databases, <ph id="ph1">`GetRecordCount`</ph> always returns – 1.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>Calling the <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> member function on a recordset resets the value of <ph id="ph1">`GetRecordCount`</ph> just as if the query were re-executed.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "RecordCount Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetSQL</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Call this member function to get the SQL statement that was used to select the recordset's records when it was opened.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> that contains the SQL statement.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>This will generally be a SQL <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>The string returned by <ph id="ph1">`GetSQL`</ph> is typically different from any string you may have passed to the recordset in the <ph id="ph2">`lpszSQL`</ph> parameter to the <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaorecordset__open)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>This is because the recordset constructs a full SQL statement based on what you passed to <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, what you specified with ClassWizard, and what you may have specified in the <bpt id="p2">[</bpt>m_strFilter<ept id="p2">](#cdaorecordset__m_strfilter)</ept> and <bpt id="p3">[</bpt>m_strSort<ept id="p3">](#cdaorecordset__m_strsort)</ept> data members.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Call this member function only after calling <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "SQL Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetType</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>Call this member function after opening the recordset to determine the type of the recordset object.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>One of the following values that indicates the type of a recordset:</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbOpenTable<ept id="p1">**</ept> Table-type recordset</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbOpenDynaset<ept id="p1">**</ept> Dynaset-type recordset</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbOpenSnapshot<ept id="p1">**</ept> Snapshot-type recordset</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Type Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetValidationRule</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>Call this member function to determine the rule used to validate data.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object containing a value that validates the data in a record as it is changed or added to a table.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>This rule is text-based, and is applied each time the underlying table is changed.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>If the data is not legal, MFC throws an exception.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>The returned error message is the text of the ValidationText property of the underlying field object, if specified, or the text of the expression specified by the ValidationRule property of the underlying field object.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>GetValidationText<ept id="p1">](#cdaorecordset__getvalidationtext)</ept> to obtain the text of the error message.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>For example, a field in a record that requires the day of the month might have a validation rule such as "DAY BETWEEN 1 AND 31."</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "ValidationRule Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::GetValidationText</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the text of the ValidationText property of the underlying field object.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object containing the text of the message that is displayed if the value of a field does not satisfy the validation rule of the underlying field object.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "ValidationText Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsBOF</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Call this member function before you scroll from record to record to learn whether you have gone before the first record of the recordset.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>Nonzero if the recordset contains no records or if you have scrolled backward before the first record; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>You can also call <ph id="ph1">`IsBOF`</ph> along with <ph id="ph2">`IsEOF`</ph> to determine whether the recordset contains any records or is empty.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>Immediately after you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, if the recordset contains no records, <ph id="ph1">`IsBOF`</ph> returns nonzero.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>When you open a recordset that has at least one record, the first record is the current record and <ph id="ph1">`IsBOF`</ph> returns 0.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>If the first record is the current record and you call <ph id="ph1">`MovePrev`</ph>, <ph id="ph2">`IsBOF`</ph> will subsequently return nonzero.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`IsBOF`</ph> returns nonzero and you call <ph id="ph2">`MovePrev`</ph>, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`IsBOF`</ph> returns nonzero, the current record is undefined, and any action that requires a current record will result in an exception.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>Effect of specific methods on <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> settings:</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> internally makes the first record in the recordset the current record by calling <bpt id="p2">**</bpt>MoveFirst<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>Therefore, calling <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> on an empty set of records causes <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> to return nonzero.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>(See the following table for the behavior of a failed <bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept> or <ph id="ph1">`MoveLast`</ph> call.)</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>All Move operations that successfully locate a record cause both <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> to return 0.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`AddNew`</ph> call followed by an <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> call that successfully inserts a new record will cause <ph id="ph2">`IsBOF`</ph> to return 0, but only if <ph id="ph3">`IsEOF`</ph> is already nonzero.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>The state of <ph id="ph1">`IsEOF`</ph> will always remain unchanged.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>As defined by the Microsoft Jet database engine, the current record pointer of an empty recordset is at the end of a file, so any new record is inserted after the current record.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>Any <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> call, even if it removes the only remaining record from a recordset, will not change the value of <ph id="ph1">`IsBOF`</ph> or <ph id="ph2">`IsEOF`</ph>.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>This table shows which Move operations are allowed with different combinations of <ph id="ph1">`IsBOF`/ `IsEOF`</ph>.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>MoveFirst, MoveLast</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>MovePrev,</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>Move &lt; 0</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>Move 0</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>MoveNext,</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>Move &gt; 0</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>=nonzero,</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>=0</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>=0,</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>=nonzero</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Both nonzero</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Both 0</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>Allowing a Move operation does not mean that the operation will successfully locate a record.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>It merely indicates that an attempt to perform the specified Move operation is allowed and will not generate an exception.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> member functions may change as a result of the attempted move.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>The effect of Move operations that do not locate a record on the value of <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> settings is shown in the following table.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>IsBOF</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>IsEOF</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept>,</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>Nonzero</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>Nonzero</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Move<ept id="p1">**</ept> 0</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>No change</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>No change</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>, <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> &lt; 0</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>Nonzero</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>No change</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>, <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> &gt; 0</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>No change</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>Nonzero</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "BOF, EOF Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsDeleted</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the current record has been deleted.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Nonzero if the recordset is positioned on a deleted record; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>If you scroll to a record and <ph id="ph1">`IsDeleted`</ph> returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> (nonzero), then you must scroll to another record before you can perform any other recordset operations.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>You don't need to check the deleted status for records in a snapshot or table-type recordset.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>Because records cannot be deleted from a snapshot, there is no need to call <ph id="ph1">`IsDeleted`</ph>.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>For table-type recordsets, deleted records are actually removed from the recordset.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>Once a record has been deleted, either by you, another user, or in another recordset, you cannot scroll back to that record.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>Therefore, there is no need to call <ph id="ph1">`IsDeleted`</ph>.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>When you delete a record from a dynaset, it is removed from the recordset and you cannot scroll back to that record.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>However, if a record in a dynaset is deleted either by another user or in another recordset based on the same table, <ph id="ph1">`IsDeleted`</ph> will return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> when you later scroll to that record.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "Delete Method", "LastModified Property", and "EditMode Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsEOF</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>Call this member function as you scroll from record to record to learn whether you have gone beyond the last record of the recordset.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>Nonzero if the recordset contains no records or if you have scrolled beyond the last record; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>You can also call <ph id="ph1">`IsEOF`</ph> to determine whether the recordset contains any records or is empty.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>Immediately after you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, if the recordset contains no records, <ph id="ph1">`IsEOF`</ph> returns nonzero.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>When you open a recordset that has at least one record, the first record is the current record and <ph id="ph1">`IsEOF`</ph> returns 0.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>If the last record is the current record when you call <ph id="ph1">`MoveNext`</ph>, <ph id="ph2">`IsEOF`</ph> will subsequently return nonzero.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`IsEOF`</ph> returns nonzero and you call <ph id="ph2">`MoveNext`</ph>, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`IsEOF`</ph> returns nonzero, the current record is undefined, and any action that requires a current record will result in an exception.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>Effect of specific methods on <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> settings:</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> internally makes the first record in the recordset the current record by calling <bpt id="p2">**</bpt>MoveFirst<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>Therefore, calling <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> on an empty set of records causes <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> to return nonzero.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>(See the following table for the behavior of a failed <bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept> call.)</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>All Move operations that successfully locate a record cause both <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> to return 0.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`AddNew`</ph> call followed by an <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> call that successfully inserts a new record will cause <ph id="ph2">`IsBOF`</ph> to return 0, but only if <ph id="ph3">`IsEOF`</ph> is already nonzero.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>The state of <ph id="ph1">`IsEOF`</ph> will always remain unchanged.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>As defined by the Microsoft Jet database engine, the current record pointer of an empty recordset is at the end of a file, so any new record is inserted after the current record.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>Any <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> call, even if it removes the only remaining record from a recordset, will not change the value of <ph id="ph1">`IsBOF`</ph> or <ph id="ph2">`IsEOF`</ph>.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>This table shows which Move operations are allowed with different combinations of <ph id="ph1">`IsBOF`/ `IsEOF`</ph>.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>MoveFirst, MoveLast</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>MovePrev,</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>Move &lt; 0</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>Move 0</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>MoveNext,</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>Move &gt; 0</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>=nonzero,</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>=0</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>=0,</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>=nonzero</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>Both nonzero</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>Exception</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>Both 0</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>Allowing a Move operation does not mean that the operation will successfully locate a record.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>It merely indicates that an attempt to perform the specified Move operation is allowed and will not generate an exception.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> member functions may change as a result of the attempted Move.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>The effect of Move operations that do not locate a record on the value of <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> settings is shown in the following table.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>IsBOF</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>IsEOF</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept>,</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Nonzero</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>Nonzero</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Move<ept id="p1">**</ept> 0</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>No change</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>No change</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>, <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> &lt; 0</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>Nonzero</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>No change</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>, <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> &gt; 0</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>No change</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>Nonzero</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "BOF, EOF Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsFieldDirty</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the specified field data member of a dynaset has been flagged as "dirty" (changed).</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>A pointer to the field data member whose status you want to check, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> to determine if any of the fields are dirty.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>Nonzero if the specified field data member is flagged as dirty; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>The data in all dirty field data members will be transferred to the record on the data source when the current record is updated by a call to the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> member function of <ph id="ph1">`CDaoRecordset`</ph> (following a call to <bpt id="p2">**</bpt>Edit<ept id="p2">**</ept> or <ph id="ph2">`AddNew`</ph>).</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>With this knowledge, you can take further steps, such as unflagging the field data member to mark the column so it will not be written to the data source.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>is implemented through <ph id="ph1">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsFieldNull</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the specified field data member of a recordset has been flagged as Null.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>A pointer to the field data member whose status you want to check, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> to determine if any of the fields are Null.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>Nonzero if the specified field data member is flagged as Null; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>(In database terminology, Null means "having no value" and is not the same as <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> in C++.) If a field data member is flagged as Null, it is interpreted as a column of the current record for which there is no value.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>In certain situations, using <ph id="ph1">`IsFieldNull`</ph> can be inefficient, as the following code example illustrates:</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#5</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>If you are using dynamic record binding, without deriving from <ph id="ph1">`CDaoRecordset`</ph>, be sure to use <bpt id="p1">**</bpt>VT_NULL<ept id="p1">**</ept> as shown in the example.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsFieldNullable</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the specified field data member is "nullable" (can be set to a Null value; C++ <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is not the same as Null, which, in database terminology, means "having no value").</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>A pointer to the field data member whose status you want to check, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> to determine if any of the fields are Null.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>Nonzero if the specified field data member can be made Null; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>A field that cannot be Null must have a value.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>If you attempt to set such a field to Null when adding or updating a record, the data source rejects the addition or update, and <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> will throw an exception.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>The exception occurs when you call <bpt id="p1">**</bpt>Update<ept id="p1">**</ept>, not when you call <ph id="ph1">`SetFieldNull`</ph>.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::IsOpen</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>Call this member function to determine if the recordset is open.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>Nonzero if the recordset object's <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Requery<ept id="p2">**</ept> member function has previously been called and the recordset has not been closed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_bCheckCacheForDirtyFields</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>Contains a flag indicating whether cached fields are automatically marked as dirty (changed) and Null.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>The flag defaults to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>The setting in this data member controls the entire double-buffering mechanism.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>If you set the flag to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, you can turn off the caching on a field-by-field basis using the DFX mechanism.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>If you set the flag to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, you must call <ph id="ph1">`SetFieldDirty`</ph> and <ph id="ph2">`SetFieldNull`</ph> yourself.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>Set this data member before calling <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>This mechanism is primarily for ease-of-use.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>Performance may be slower because of the double-buffering of fields as changes are made.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_nFields</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>Contains the number of field data members in the recordset class and the number of columns selected by the recordset from the data source.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>The constructor for the recordset class must initialize <ph id="ph1">`m_nFields`</ph> with the correct number of statically bound fields.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>ClassWizard writes this initialization for you when you use it to declare your recordset class.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>You can also write it manually.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>The framework uses this number to manage interaction between the field data members and the corresponding columns of the current record on the data source.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>This number must correspond to the number of output columns registered in <ph id="ph1">`DoFieldExchange`</ph> after a call to <ph id="ph2">`SetFieldType`</ph> with the parameter <bpt id="p1">**</bpt>CDaoFieldExchange::outputColumn<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>You can bind columns dynamically by way of <ph id="ph1">`CDaoRecordset::GetFieldValue`</ph> and <ph id="ph2">`CDaoRecordset::SetFieldValue`</ph>.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>If you do so, you do not need to increment the count in <ph id="ph1">`m_nFields`</ph> to reflect the number of DFX function calls in your <ph id="ph2">`DoFieldExchange`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_nParams</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>Contains the number of parameter data members in the recordset class — the number of parameters passed with the recordset's query.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>If your recordset class has any parameter data members, the constructor for the class must initialize <ph id="ph1">`m_nParams`</ph> with the correct number.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`m_nParams`</ph> defaults to 0.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>If you add parameter data members — which you must do manually — you must also manually add an initialization in the class constructor to reflect the number of parameters (which must be at least as large as the number of '' placeholders in your <bpt id="p1">**</bpt>m_strFilter<ept id="p1">**</ept> or <ph id="ph1">`m_strSort`</ph> string).</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>The framework uses this number when it parameterizes the recordset's query.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>This number must correspond to the number of "params" registered in <ph id="ph1">`DoFieldExchange`</ph> after a call to <ph id="ph2">`SetFieldType`</ph> with the parameter <bpt id="p1">**</bpt>CFieldExchange::param<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Parameter Object" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_pDAORecordset</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the OLE interface for the DAO recordset object underlying the <ph id="ph1">`CDaoRecordset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>Use this pointer if you need to access the DAO interface directly.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Recordset Object" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_pDatabase</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the <ph id="ph1">`CDaoDatabase`</ph> object through which the recordset is connected to a data source.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>This variable is set in two ways.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>Typically, you pass a pointer to an already open <ph id="ph1">`CDaoDatabase`</ph> object when you construct the recordset object.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>If you pass <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> instead, <bpt id="p2">**</bpt>CDaoRecordset<ept id="p2">**</ept> creates a <ph id="ph1">`CDaoDatabase`</ph> object for you and opens it.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>In either case, <ph id="ph1">`CDaoRecordset`</ph> stores the pointer in this variable.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>Normally you will not directly need to use the pointer stored in <bpt id="p1">**</bpt>m_pDatabase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>If you write your own extensions to <ph id="ph1">`CDaoRecordset`</ph>, however, you might need to use the pointer.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>For example, you might need the pointer if you throw your own <ph id="ph1">`CDaoException`</ph>(s).</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Database Object" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_strFilter</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>Contains a string that is used to construct the <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause of a SQL statement.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>It does not include the reserved word <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> to filter the recordset.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>The use of this data member is not applicable to table-type recordsets.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>The use of <bpt id="p1">**</bpt>m_strFilter<ept id="p1">**</ept> has no effect when opening a recordset using a <ph id="ph1">`CDaoQueryDef`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>Use the U.S. date format (month-day-year) when you filter fields containing dates, even if you are not using the U.S. version of the Microsoft Jet database engine; otherwise, the data may not be filtered as you expect.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Filter Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::m_strSort</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>Contains a string containing the <bpt id="p1">**</bpt>ORDERBY<ept id="p1">**</ept> clause of a SQL statement without the reserved words <bpt id="p2">**</bpt>ORDERBY<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>You can sort on dynaset- and snapshot-type recordset objects.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>You cannot sort table-type recordset objects.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>To determine the sort order of a table-type recordset, call <bpt id="p1">[</bpt>SetCurrentIndex<ept id="p1">](#cdaorecordset__setcurrentindex)</ept>.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>The use of <ph id="ph1">`m_strSort`</ph> has no effect when opening a recordset using a <ph id="ph2">`CDaoQueryDef`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Sort Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Move</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>Call this member function to position the recordset <ph id="ph1">`lRows`</ph> records from the current record.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>The number of records to move forward or backward.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>Positive values move forward, toward the end of the recordset.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>Negative values move backward, toward the beginning.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>You can move forward or backward.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>is equivalent to <ph id="ph1">`MoveNext`</ph>, and <ph id="ph2">`Move( -1 )`</ph> is equivalent to <ph id="ph3">`MovePrev`</ph>.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>Calling any of the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions throws an exception if the recordset has no records.</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>In general, call both <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> before a Move operation to determine whether the recordset has any records.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>After you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Requery<ept id="p2">**</ept>, call either <ph id="ph1">`IsBOF`</ph> or <ph id="ph2">`IsEOF`</ph>.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>If you have scrolled past the beginning or end of the recordset ( <ph id="ph1">`IsBOF`</ph> or <ph id="ph2">`IsEOF`</ph> returns nonzero), a call to <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> throws a <ph id="ph3">`CDaoException`</ph>.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>If you call any of the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions while the current record is being updated or added, the updates are lost without warning.</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>When you call <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> on a forward-only scrolling snapshot, the <ph id="ph1">`lRows`</ph> parameter must be a positive integer and bookmarks are not allowed, so you can move forward only.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>To make the first, last, next, or previous record in a recordset the current record, call the <bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept>, <ph id="ph1">`MoveLast`</ph>, <ph id="ph2">`MoveNext`</ph>, or <ph id="ph3">`MovePrev`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "Move Method" and "MoveFirst, MoveLast, MoveNext, MovePrevious Methods" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::MoveFirst</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>Call this member function to make the first record in the recordset (if any) the current record.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>You do not have to call <bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept> immediately after you open the recordset.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>At that time, the first record (if any) is automatically the current record.</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>Calling any of the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions throws an exception if the recordset has no records.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>In general, call both <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> before a Move operation to determine whether the recordset has any records.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>After you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Requery<ept id="p2">**</ept>, call either <ph id="ph1">`IsBOF`</ph> or <ph id="ph2">`IsEOF`</ph>.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>If you call any of the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions while the current record is being updated or added, the updates are lost without warning.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions to move from record to record without applying a condition.</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>Use the Find operations to locate records in a dynaset-type or snapshot-type recordset object that satisfy a certain condition.</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>To locate a record in a table-type recordset object, call <ph id="ph1">`Seek`</ph>.</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>If the recordset refers to a table-type recordset, movement follows the table's current index.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>You can set the current index by using the Index property of the underlying DAO object.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>If you do not set the current index, the order of returned records is undefined.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`MoveLast`</ph> on a recordset object based on a SQL query or querydef, the query is forced to completion and the recordset object is fully populated.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>You cannot call the <bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept> or <ph id="ph1">`MovePrev`</ph> member function with a forward-only scrolling snapshot.</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>To move the position of the current record in a recordset object a specific number of records forward or backward, call <bpt id="p1">**</bpt>Move<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "Move Method" and "MoveFirst, MoveLast, MoveNext, MovePrevious Methods" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::MoveLast</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>Call this member function to make the last record (if any) in the recordset the current record.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Calling any of the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions throws an exception if the recordset has no records.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>In general, call both <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> before a Move operation to determine whether the recordset has any records.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>After you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Requery<ept id="p2">**</ept>, call either <ph id="ph1">`IsBOF`</ph> or <ph id="ph2">`IsEOF`</ph>.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>If you call any of the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions while the current record is being updated or added, the updates are lost without warning.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions to move from record to record without applying a condition.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>Use the Find operations to locate records in a dynaset-type or snapshot-type recordset object that satisfy a certain condition.</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>To locate a record in a table-type recordset object, call <ph id="ph1">`Seek`</ph>.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>If the recordset refers to a table-type recordset, movement follows the table's current index.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>You can set the current index by using the Index property of the underlying DAO object.</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source>If you do not set the current index, the order of returned records is undefined.</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`MoveLast`</ph> on a recordset object based on a SQL query or querydef, the query is forced to completion and the recordset object is fully populated.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>To move the position of the current record in a recordset object a specific number of records forward or backward, call <bpt id="p1">**</bpt>Move<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "Move Method" and "MoveFirst, MoveLast, MoveNext, MovePrevious Methods" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::MoveNext</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>Call this member function to make the next record in the recordset the current record.</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>It is recommended that you call <ph id="ph1">`IsBOF`</ph> before you attempt to move to the previous record.</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">`MovePrev`</ph> will throw a <ph id="ph2">`CDaoException`</ph> if <ph id="ph3">`IsBOF`</ph> returns nonzero, indicating either that you have already scrolled before the first record or that no records were selected by the recordset.</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>Calling any of the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions throws an exception if the recordset has no records.</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source>In general, call both <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> before a Move operation to determine whether the recordset has any records.</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source>After you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Requery<ept id="p2">**</ept>, call either <ph id="ph1">`IsBOF`</ph> or <ph id="ph2">`IsEOF`</ph>.</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source>If you call any of the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions while the current record is being updated or added, the updates are lost without warning.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions to move from record to record without applying a condition.</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>Use the Find operations to locate records in a dynaset-type or snapshot-type recordset object that satisfy a certain condition.</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>To locate a record in a table-type recordset object, call <ph id="ph1">`Seek`</ph>.</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>If the recordset refers to a table-type recordset, movement follows the table's current index.</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>You can set the current index by using the Index property of the underlying DAO object.</source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>If you do not set the current index, the order of returned records is undefined.</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source>To move the position of the current record in a recordset object a specific number of records forward or backward, call <bpt id="p1">**</bpt>Move<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "Move Method" and "MoveFirst, MoveLast, MoveNext, MovePrevious Methods" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::MovePrev</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source>Call this member function to make the previous record in the recordset the current record.</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>It is recommended that you call <ph id="ph1">`IsBOF`</ph> before you attempt to move to the previous record.</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">`MovePrev`</ph> will throw a <ph id="ph2">`CDaoException`</ph> if <ph id="ph3">`IsBOF`</ph> returns nonzero, indicating either that you have already scrolled before the first record or that no records were selected by the recordset.</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>Calling any of the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions throws an exception if the recordset has no records.</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>In general, call both <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> before a Move operation to determine whether the recordset has any records.</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>After you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Requery<ept id="p2">**</ept>, call either <ph id="ph1">`IsBOF`</ph> or <ph id="ph2">`IsEOF`</ph>.</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>If you call any of the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions while the current record is being updated or added, the updates are lost without warning.</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> functions to move from record to record without applying a condition.</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>Use the Find operations to locate records in a dynaset-type or snapshot-type recordset object that satisfy a certain condition.</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>To locate a record in a table-type recordset object, call <ph id="ph1">`Seek`</ph>.</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>If the recordset refers to a table-type recordset, movement follows the table's current index.</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>You can set the current index by using the Index property of the underlying DAO object.</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>If you do not set the current index, the order of returned records is undefined.</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve">
          <source>You cannot call the <bpt id="p1">**</bpt>MoveFirst<ept id="p1">**</ept> or <ph id="ph1">`MovePrev`</ph> member function with a forward-only scrolling snapshot.</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve">
          <source>To move the position of the current record in a recordset object a specific number of records forward or backward, call <bpt id="p1">**</bpt>Move<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "Move Method" and "MoveFirst, MoveLast, MoveNext, MovePrevious Methods" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Open</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>You must call this member function to retrieve the records for the recordset.</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>One of the following values:</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbOpenDynaset<ept id="p1">**</ept> A dynaset-type recordset with bidirectional scrolling.</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source>This is the default.</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbOpenTable<ept id="p1">**</ept> A table-type recordset with bidirectional scrolling.</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbOpenSnapshot<ept id="p1">**</ept> A snapshot-type recordset with bidirectional scrolling.</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>A string pointer containing one of the following:</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>The name of one or more tabledefs and/or querydefs (comma-separated).</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source>A SQL <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement (optionally with a SQL <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept> or <bpt id="p3">**</bpt>ORDERBY<ept id="p3">**</ept> clause).</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>A pass-through query.</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve">
          <source>One or more of the options listed below.</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source>The default value is 0.</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve">
          <source>Possible values are as follows:</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbAppendOnly<ept id="p1">**</ept> You can only append new records (dynaset-type recordset only).</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve">
          <source>This option means literally that records may only be appended.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve">
          <source>The MFC ODBC database classes have an append-only option that allows records to be retrieved and appended.</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbForwardOnly<ept id="p1">**</ept> The recordset is a forward-only scrolling snapshot.</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbSeeChanges<ept id="p1">**</ept> Generate an exception if another user is changing data you are editing.</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbDenyWrite<ept id="p1">**</ept> Other users cannot modify or add records.</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbDenyRead<ept id="p1">**</ept> Other users cannot view records (table-type recordset only).</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbReadOnly<ept id="p1">**</ept> You can only view records; other users can modify them.</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbInconsistent<ept id="p1">**</ept> Inconsistent updates are allowed (dynaset-type recordset only).</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbConsistent<ept id="p1">**</ept> Only consistent updates are allowed (dynaset-type recordset only).</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>The constants <bpt id="p1">**</bpt>dbConsistent<ept id="p1">**</ept> and <bpt id="p2">**</bpt>dbInconsistent<ept id="p2">**</ept> are mutually exclusive.</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>You can use one or the other, but not both in a given instance of <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>pTableDef</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CDaoTableDef<ept id="p1">](../../mfc/reference/cdaotabledef-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>This version is valid only for table-type recordsets.</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>When using this option, the <ph id="ph1">`CDaoDatabase`</ph> pointer used to construct the <ph id="ph2">`CDaoRecordset`</ph> is not used; rather, the database in which the tabledef resides is used.</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>pQueryDef</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CDaoQueryDef<ept id="p1">](../../mfc/reference/cdaoquerydef-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve">
          <source>This version is valid only for dynaset-type and snapshot-type recordsets.</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>When using this option, the <ph id="ph1">`CDaoDatabase`</ph> pointer used to construct the <ph id="ph2">`CDaoRecordset`</ph> is not used; rather, the database in which the querydef resides is used.</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve">
          <source>Before calling <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, you must construct the recordset object.</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>There are several ways to do this:</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>When you construct the recordset object, pass a pointer to a <ph id="ph1">`CDaoDatabase`</ph> object that is already open.</source>
        </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve">
          <source>When you construct the recordset object, pass a pointer to a <ph id="ph1">`CDaoDatabase`</ph> object that is not open.</source>
        </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve">
          <source>The recordset opens a <ph id="ph1">`CDaoDatabase`</ph> object, but will not close it when the recordset object closes.</source>
        </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve">
          <source>When you construct the recordset object, pass a <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve">
          <source>The recordset object calls <ph id="ph1">`GetDefaultDBName`</ph> to get the name of the Microsoft Access .MDB file to open.</source>
        </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve">
          <source>The recordset then opens a <ph id="ph1">`CDaoDatabase`</ph> object and keeps it open as long as the recordset is open.</source>
        </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve">
          <source>When you call <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> on the recordset, the <ph id="ph1">`CDaoDatabase`</ph> object is also closed.</source>
        </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve">
          <source>When the recordset opens the <ph id="ph1">`CDaoDatabase`</ph> object, it opens the data source with nonexclusive access.</source>
        </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve">
          <source>For the version of <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> that uses the <ph id="ph1">`lpszSQL`</ph> parameter, once the recordset is open you can retrieve records in one of several ways.</source>
        </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source>The first option is to have DFX functions in your <ph id="ph1">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source>The second option is to use dynamic binding by calling the <ph id="ph1">`GetFieldValue`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source>These options can be implemented separately or in combination.</source>
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>If they are combined, you will have to pass in the SQL statement yourself on the call to <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>When you use the second version of <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> where you pass in a <ph id="ph1">`CDaoTableDef`</ph> object, the resulting columns will be available for you to bind via <ph id="ph2">`DoFieldExchange`</ph> and the DFX mechanism, and/or bind dynamically via <ph id="ph3">`GetFieldValue`</ph>.</source>
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve">
          <source>You can only call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> using a <ph id="ph1">`CDaoTableDef`</ph> object for table-type recordsets.</source>
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source>When you use the third version of <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> where you pass in a <ph id="ph1">`CDaoQueryDef`</ph> object, that query will be executed, and the resulting columns will be available for you to bind via <ph id="ph2">`DoFieldExchange`</ph> and the DFX mechanism, and/or bind dynamically via <ph id="ph3">`GetFieldValue`</ph>.</source>
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source>You can only call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> using a <ph id="ph1">`CDaoQueryDef`</ph> object for dynaset-type and snapshot-type recordsets.</source>
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>For the first version of <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> that uses the <ph id="ph1">`lpszSQL`</ph> parameter, records are selected based on criteria shown in the following table.</source>
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>Value of the <ph id="ph1">`lpszSQL`</ph> parameter</source>
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>Records selected are determined by</source>
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>NULL</source>
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source>The string returned by <ph id="ph1">`GetDefaultSQL`</ph>.</source>
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>A comma-separated list of one or more tabledefs and/or querydef names.</source>
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source>All columns represented in the <ph id="ph1">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> column-list <bpt id="p2">**</bpt>FROM<ept id="p2">**</ept> table-list</source>
        </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source>The specified columns from the specified tabledef(s) and/or querydef(s).</source>
        </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve">
          <source>The usual procedure is to pass <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>; in that case, <bpt id="p3">**</bpt>Open<ept id="p3">**</ept> calls <ph id="ph1">`GetDefaultSQL`</ph>, an overridable member function that ClassWizard generates when creating a <ph id="ph2">`CDaoRecordset`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve">
          <source>This value gives the tabledef(s) and/or querydef name(s) you specified in ClassWizard.</source>
        </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve">
          <source>You can instead specify other information in the <ph id="ph1">`lpszSQL`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve">
          <source>Whatever you pass, <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> constructs a final SQL string for the query (the string may have SQL <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept> and <bpt id="p3">**</bpt>ORDERBY<ept id="p3">**</ept> clauses appended to the <ph id="ph1">`lpszSQL`</ph> string you passed) and then executes the query.</source>
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve">
          <source>You can examine the constructed string by calling <ph id="ph1">`GetSQL`</ph> after calling <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve">
          <source>The field data members of your recordset class are bound to the columns of the data selected.</source>
        </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve">
          <source>If any records are returned, the first record becomes the current record.</source>
        </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve">
          <source>If you want to set options for the recordset, such as a filter or sort, set <ph id="ph1">`m_strSort`</ph> or <bpt id="p1">**</bpt>m_strFilter<ept id="p1">**</ept> after you construct the recordset object but before you call <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve">
          <source>If you want to refresh the records in the recordset after the recordset is already open, call <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> on a dynaset-type or snapshot-type recordset, or if the data source refers to a SQL statement or a tabledef that represents an attached table, you cannot use <bpt id="p2">**</bpt>dbOpenTable<ept id="p2">**</ept> for the type argument; if you do, MFC throws an exception.</source>
        </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source>To determine whether a tabledef object represents an attached table, create a <bpt id="p1">[</bpt>CDaoTableDef<ept id="p1">](../../mfc/reference/cdaotabledef-class.md)</ept> object and call its <bpt id="p2">[</bpt>GetConnect<ept id="p2">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__getconnect)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>dbSeeChanges<ept id="p1">**</ept> flag if you wish to trap changes made by another user or another program on your machine when you are editing or deleting the same record.</source>
        </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source>For example, if two users start editing the same record, the first user to call the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> member function succeeds.</source>
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> is called by the second user, a <ph id="ph1">`CDaoException`</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source>Similarly, if the second user tries to call <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> to delete the record, and it has already been changed by the first user, a <ph id="ph1">`CDaoException`</ph> occurs.</source>
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source>Typically, if the user gets this <ph id="ph1">`CDaoException`</ph> while updating, your code should refresh the contents of the fields and retrieve the newly modified values.</source>
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source>If the exception occurs in the process of deleting, your code could display the new record data to the user and a message indicating that the data has recently changed.</source>
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>At this point, your code can request a confirmation that the user still wants to delete the record.</source>
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source>Use the forward-only scrolling option ( <bpt id="p1">**</bpt>dbForwardOnly<ept id="p1">**</ept>) to improve performance when your application makes a single pass through a recordset opened from an ODBC data source.</source>
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "OpenRecordset Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Requery</source>
        </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source>Call this member function to rebuild (refresh) a recordset.</source>
        </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve">
          <source>If any records are returned, the first record becomes the current record.</source>
        </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve">
          <source>In order for the recordset to reflect the additions and deletions that you or other users are making to the data source, you must rebuild the recordset by calling <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>If the recordset is a dynaset, it automatically reflects updates that you or other users make to its existing records (but not additions).</source>
        </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>If the recordset is a snapshot, you must call <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> to reflect edits by other users as well as additions and deletions.</source>
        </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source>For either a dynaset or a snapshot, call <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> any time you want to rebuild the recordset using parameter values.</source>
        </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source>Set the new filter or sort by setting <bpt id="p1">[</bpt>m_strFilter<ept id="p1">](#cdaorecordset__m_strfilter)</ept> and <bpt id="p2">[</bpt>m_strSort<ept id="p2">](#cdaorecordset__m_strsort)</ept> before calling <bpt id="p3">**</bpt>Requery<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source>Set new parameters by assigning new values to parameter data members before calling <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source>If the attempt to rebuild the recordset fails, the recordset is closed.</source>
        </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source>Before you call <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept>, you can determine whether the recordset can be requeried by calling the <bpt id="p2">[</bpt>CanRestart<ept id="p2">](#cdaorecordset__canrestart)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>does not guarantee that <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> will succeed.</source>
        </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> only after you have called <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">[</bpt>Requery<ept id="p1">](#cdaorecordset__requery)</ept> changes DAO bookmarks.</source>
        </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve">
          <source>You can't call <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> on a dynaset-type or snapshot-type recordset if calling <ph id="ph1">`CanRestart`</ph> returns 0, nor can you use it on a table-type recordset.</source>
        </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve">
          <source>If both <ph id="ph1">`IsBOF`</ph> and <ph id="ph2">`IsEOF`</ph> return nonzero after you call <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept>, the query didn't return any records and the recordset will contain no data.</source>
        </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Requery Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Seek</source>
        </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve">
          <source>Call this member function to locate the record in an indexed table-type recordset object that satisfies the specified criteria for the current index and make that record the current record.</source>
        </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>One of the following string expressions: "&lt;", "<ph id="ph1">\&lt;</ph>=", "=", "&gt;=", or "&gt;".</source>
        </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md)</ept> whose value corresponds to the first field in the index.</source>
        </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source>pKey2</source>
        </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`COleVariant`</ph> whose value corresponds to the second field in the index, if any.</source>
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve">
          <source>Defaults to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve">
          <source>pKey3</source>
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`COleVariant`</ph> whose value corresponds to the third field in the index, if any.</source>
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source>Defaults to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve">
          <source>pKeyArray</source>
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve">
          <source>A pointer to an array of variants.</source>
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve">
          <source>The array size corresponds to the number of fields in the index.</source>
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve">
          <source>nKeys</source>
        </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve">
          <source>An integer corresponding to the size of the array, which is the number of fields in the index.</source>
        </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve">
          <source>Do not specify wildcards in the keys.</source>
        </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve">
          <source>Wildcards will cause <ph id="ph1">`Seek`</ph> to return no matching records.</source>
        </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve">
          <source>Nonzero if matching records are found, otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source>Use the second (array) version of <ph id="ph1">`Seek`</ph> to handle indexes of four fields or more.</source>
        </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>enables high-performance index searching on table-type recordsets.</source>
        </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>You must set the current index by calling <ph id="ph1">`SetCurrentIndex`</ph> before calling <ph id="ph2">`Seek`</ph>.</source>
        </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source>If the index identifies a nonunique key field or fields, <ph id="ph1">`Seek`</ph> locates the first record that satisfies the criteria.</source>
        </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source>If you do not set an index, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source>Note that if you are not creating a UNICODE recordset, the <ph id="ph1">`COleVariant`</ph> objects must be explicitly declared ANSI.</source>
        </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source>This can be done by using the <bpt id="p1">[</bpt>COleVariant::COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md#colevariant__colevariant)</ept><bpt id="p2">**</bpt>(<ept id="p2">**</ept> <ph id="ph1">`lpszSrc`</ph><bpt id="p3">**</bpt>,<ept id="p3">**</ept> <ph id="ph2">`vtSrc`</ph> <bpt id="p4">**</bpt>)<ept id="p4">**</ept> form of constructor with <ph id="ph3">`vtSrc`</ph> set to <ph id="ph4">`VT_BSTRT`</ph> (ANSI) or by using the <bpt id="p5">**</bpt>COleVariant<ept id="p5">**</ept> function <bpt id="p6">[</bpt>SetString<ept id="p6">](../../mfc/reference/colevariant-class.md#colevariant__setstring)</ept><bpt id="p7">**</bpt>(<ept id="p7">**</ept> <ph id="ph5">`lpszSrc`</ph><bpt id="p8">**</bpt>,<ept id="p8">**</ept> <ph id="ph6">`vtSrc`</ph> <bpt id="p9">**</bpt>)<ept id="p9">**</ept> with <ph id="ph7">`vtSrc`</ph> set to <ph id="ph8">`VT_BSTRT`</ph>.</source>
        </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source>When you call <ph id="ph1">`Seek`</ph>, you pass one or more key values and a comparison operator ("&lt;", "<ph id="ph2">\&lt;</ph>=", "=", "&gt;=", or "&gt;").</source>
        </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve">
          <source>searches through the specified key fields and locates the first record that satisfies the criteria specified by <ph id="ph1">`lpszComparison`</ph> and <ph id="ph2">`pKey1`</ph>.</source>
        </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve">
          <source>Once found, <ph id="ph1">`Seek`</ph> returns nonzero, and makes that record current.</source>
        </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Seek`</ph> fails to locate a match, <ph id="ph2">`Seek`</ph> returns zero, and the current record is undefined.</source>
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source>When using DAO directly, you must explicitly check the NoMatch property.</source>
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpszComparison`</ph> is "=", "&gt;=", or "&gt;", <ph id="ph2">`Seek`</ph> starts at the beginning of the index.</source>
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpszComparison`</ph> is "&lt;" or "&lt;=", <ph id="ph2">`Seek`</ph> starts at the end of the index and searches backward unless there are duplicate index entries at the end.</source>
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`Seek`</ph> starts at an arbitrary entry among the duplicate index entries at the end of the index.</source>
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve">
          <source>There does not have to be a current record when you use <ph id="ph1">`Seek`</ph>.</source>
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source>To locate a record in a dynaset-type or snapshot-type recordset that satisfies a specific condition, use the Find operations.</source>
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source>To include all records, not just those that satisfy a specific condition, use the Move operations to move from record to record.</source>
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>You cannot call <ph id="ph1">`Seek`</ph> on an attached table of any type because attached tables must be opened as dynaset-type or snapshot-type recordsets.</source>
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>However, if you call <ph id="ph1">`CDaoDatabase::Open`</ph> to directly open an installable ISAM database, you can call <ph id="ph2">`Seek`</ph> on tables in that database, although the performance may be slow.</source>
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Seek Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetAbsolutePosition</source>
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source>Sets the relative record number of a recordset object's current record.</source>
        </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>lPosition</source>
        </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>Corresponds to the ordinal position of the current record in the recordset.</source>
        </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`SetAbsolutePosition`</ph> enables you to position the current record pointer to a specific record based on its ordinal position in a dynaset-type or snapshot-type recordset.</source>
        </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve">
          <source>You can also determine the current record number by calling <bpt id="p1">[</bpt>GetAbsolutePosition<ept id="p1">](#cdaorecordset__getabsoluteposition)</ept>.</source>
        </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve">
          <source>This member function is valid only for dynaset-type and snapshot-type recordsets.</source>
        </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve">
          <source>The AbsolutePosition property value of the underlying DAO object is zero-based; a setting of 0 refers to the first record in the recordset.</source>
        </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>Setting a value greater than the number of populated records causes MFC to throw an exception.</source>
        </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve">
          <source>You can determine the number of populated records in the recordset by calling the <ph id="ph1">`GetRecordCount`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve">
          <source>If the current record is deleted, the AbsolutePosition property value is not defined, and MFC throws an exception if it is referenced.</source>
        </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve">
          <source>New records are added to the end of the sequence.</source>
        </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source>This property is not intended to be used as a surrogate record number.</source>
        </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source>Bookmarks are still the recommended way of retaining and returning to a given position and are the only way to position the current record across all types of recordset objects that support bookmarks.</source>
        </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>In particular, the position of a given record changes when record(s) preceding it are deleted.</source>
        </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>There is also no assurance that a given record will have the same absolute position if the recordset is re-created again because the order of individual records within a recordset is not guaranteed unless it is created with a SQL statement using an <bpt id="p1">**</bpt>ORDERBY<ept id="p1">**</ept> clause.</source>
        </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "AbsolutePosition Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetBookmark</source>
        </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve">
          <source>Call this member function to position the recordset on the record containing the specified bookmark.</source>
        </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md)</ept> object containing the bookmark value for a specific record.</source>
        </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>When a recordset object is created or opened, each of its records already has a unique bookmark.</source>
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>You can retrieve the bookmark for the current record by calling <ph id="ph1">`GetBookmark`</ph> and saving the value to a <ph id="ph2">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>You can later return to that record by calling <ph id="ph1">`SetBookmark`</ph> using the saved bookmark value.</source>
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">[</bpt>Requery<ept id="p1">](#cdaorecordset__requery)</ept> changes DAO bookmarks.</source>
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>Note that if you are not creating a UNICODE recordset, the <ph id="ph1">`COleVariant`</ph> object must be explicitly declared ANSI.</source>
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source>This can be done by using the <bpt id="p1">[</bpt>COleVariant::COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md#colevariant__colevariant)</ept><bpt id="p2">**</bpt>(<ept id="p2">**</ept> <ph id="ph1">`lpszSrc`</ph><bpt id="p3">**</bpt>,<ept id="p3">**</ept> <ph id="ph2">`vtSrc`</ph> <bpt id="p4">**</bpt>)<ept id="p4">**</ept> form of constructor with <ph id="ph3">`vtSrc`</ph> set to <ph id="ph4">`VT_BSTRT`</ph> (ANSI) or by using the <bpt id="p5">**</bpt>COleVariant<ept id="p5">**</ept> function <bpt id="p6">[</bpt>SetString<ept id="p6">](../../mfc/reference/colevariant-class.md#colevariant__setstring)</ept><bpt id="p7">**</bpt>(<ept id="p7">**</ept> <ph id="ph5">`lpszSrc`</ph><bpt id="p8">**</bpt>,<ept id="p8">**</ept> <ph id="ph6">`vtSrc`</ph> <bpt id="p9">**</bpt>)<ept id="p9">**</ept> with <ph id="ph7">`vtSrc`</ph> set to <ph id="ph8">`VT_BSTRT`</ph>.</source>
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "Bookmark Property" and Bookmarkable Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetCacheSize</source>
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>Call this member function to set the number of records to be cached.</source>
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>Specifies the number of records.</source>
        </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>A typical value is 100.</source>
        </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve">
          <source>A setting of 0 turns off caching.</source>
        </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve">
          <source>The setting must be between 5 and 1200 records.</source>
        </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve">
          <source>The cache may use a considerable amount of memory.</source>
        </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source>A cache is a space in local memory that holds the data most recently retrieved from the server in the event that the data will be requested again while the application is running.</source>
        </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>Data caching improves the performance of an application that retrieves data from a remote server through dynaset-type recordset objects.</source>
        </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>When data is requested, the Microsoft Jet database engine checks the cache for the requested data first rather than retrieving it from the server, which takes more time.</source>
        </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>Data that does not come from an ODBC data source is not saved in the cache.</source>
        </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source>Any ODBC data source, such as an attached table, can have a local cache.</source>
        </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source>To create the cache, open a recordset object from the remote data source, call the <ph id="ph1">`SetCacheSize`</ph> and <ph id="ph2">`SetCacheStart`</ph> member functions, and then call the <ph id="ph3">`FillCache`</ph> member function or step through the records by using one of the Move operations.</source>
        </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lSize`</ph> parameter of the <ph id="ph2">`SetCacheSize`</ph> member function can be based on the number of records your application can work with at one time.</source>
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve">
          <source>For example, if you are using a recordset as the source of the data to be displayed on screen, you could pass the <ph id="ph1">`SetCacheSize``lSize`</ph> parameter as 20 to display 20 records at one time.</source>
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "CacheSize, CacheStart Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetCacheStart</source>
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source>Call this member function to specify the bookmark of the first record in the recordset to be cached.</source>
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md)</ept> that specifies the bookmark of the first record in the recordset to be cached.</source>
        </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>You can use the bookmark value of any record for the <ph id="ph1">`varBookmark`</ph> parameter of the <ph id="ph2">`SetCacheStart`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>Make the record you want to start the cache with the current record, establish a bookmark for that record using <bpt id="p1">[</bpt>SetBookmark<ept id="p1">](#cdaorecordset__setbookmark)</ept>, and pass the bookmark value as the parameter for the <ph id="ph1">`SetCacheStart`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>The Microsoft Jet database engine requests records within the cache range from the cache, and it requests records outside the cache range from the server.</source>
        </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source>Records retrieved from the cache do not reflect changes made concurrently to the source data by other users.</source>
        </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>To force an update of all the cached data, pass the <ph id="ph1">`lSize`</ph> parameter of <ph id="ph2">`SetCacheSize`</ph> as 0, call <ph id="ph3">`SetCacheSize`</ph> again with the size of the cache you originally requested, and then call the <ph id="ph4">`FillCache`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve">
          <source>Note that if you are not creating a UNICODE recordset, the <ph id="ph1">`COleVariant`</ph> object must be explicitly declared ANSI.</source>
        </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve">
          <source>This can be done by using the <bpt id="p1">[</bpt>COleVariant::COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md#colevariant__colevariant)</ept><bpt id="p2">**</bpt>(<ept id="p2">**</ept> <ph id="ph1">`lpszSrc`</ph><bpt id="p3">**</bpt>,<ept id="p3">**</ept> <ph id="ph2">`vtSrc`</ph> <bpt id="p4">**</bpt>)<ept id="p4">**</ept> form of constructor with <ph id="ph3">`vtSrc`</ph> set to <ph id="ph4">`VT_BSTRT`</ph> (ANSI) or by using the <bpt id="p5">**</bpt>COleVariant<ept id="p5">**</ept> function <bpt id="p6">[</bpt>SetString<ept id="p6">](../../mfc/reference/colevariant-class.md#colevariant__setstring)</ept><bpt id="p7">**</bpt>(<ept id="p7">**</ept> <ph id="ph5">`lpszSrc`</ph><bpt id="p8">**</bpt>,<ept id="p8">**</ept> <ph id="ph6">`vtSrc`</ph> <bpt id="p9">**</bpt>)<ept id="p9">**</ept> with <ph id="ph7">`vtSrc`</ph> set to <ph id="ph8">`VT_BSTRT`</ph>.</source>
        </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve">
          <source>For related information, see the topic CacheSize, CacheStart Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetCurrentIndex</source>
        </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve">
          <source>Call this member function to set an index on a table-type recordset.</source>
        </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source>A pointer containing the name of the index to be set.</source>
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>Records in base tables are not stored in any particular order.</source>
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source>Setting an index changes the order of records returned from the database, but it does not affect the order in which the records are stored.</source>
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>The specified index must already be defined.</source>
        </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source>If you try to use an index object that does not exist, or if the index is not set when you call <bpt id="p1">[</bpt>Seek<ept id="p1">](#cdaorecordset__seek)</ept>, MFC throws an exception.</source>
        </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>You can create a new index for the table by calling <bpt id="p1">[</bpt>CDaoTableDef::CreateIndex<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__createindex)</ept> and appending the new index to the Indexes collection of the underlying tabledef by calling <bpt id="p2">[</bpt>CDaoTableDef::Append<ept id="p2">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__append)</ept>, and then reopening the recordset.</source>
        </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source>Records returned from a table-type recordset can be ordered only by the indexes defined for the underlying tabledef.</source>
        </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>To sort records in some other order, you can open a dynaset-type or snapshot-type recordset using a SQL <bpt id="p1">**</bpt>ORDERBY<ept id="p1">**</ept> clause stored in <bpt id="p2">[</bpt>CDaoRecordset::m_strSort<ept id="p2">](#cdaorecordset__m_strsort)</ept>.</source>
        </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Index Object" and the definition "current index" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetFieldDirty</source>
        </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve">
          <source>Call this member function to flag a field data member of the recordset as changed or as unchanged.</source>
        </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve">
          <source>Contains the address of a field data member in the recordset or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, all field data members in the recordset are flagged.</source>
        </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve">
          <source>(C++ <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is not the same as Null in database terminology, which means "having no value.")</source>
        </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> if the field data member is to be flagged as "dirty" (changed).</source>
        </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve">
          <source>Otherwise <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> if the field data member is to be flagged as "clean" (unchanged).</source>
        </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve">
          <source>Marking fields as unchanged ensures the field is not updated.</source>
        </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve">
          <source>The framework marks changed field data members to ensure they will be written to the record on the data source by the DAO record field exchange (DFX) mechanism.</source>
        </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve">
          <source>Changing the value of a field generally sets the field dirty automatically, so you will seldom need to call <ph id="ph1">`SetFieldDirty`</ph> yourself, but you might sometimes want to ensure that columns will be explicitly updated or inserted regardless of what value is in the field data member.</source>
        </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>The DFX mechanism also employs the use of <bpt id="p1">**</bpt>PSEUDONULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDaoFieldExchange::m_nOperation<ept id="p1">](../../mfc/reference/cdaofieldexchange-class.md#cdaofieldexchange__m_noperation)</ept>.</source>
        </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve">
          <source>If the double-buffering mechanism is not being used, then changing the value of the field does not automatically set the field as dirty.</source>
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source>In this case, it will be necessary to explicitly set the field as dirty.</source>
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source>The flag contained in <bpt id="p1">[</bpt>m_bCheckCacheForDirtyFields<ept id="p1">](#cdaorecordset__m_bcheckcachefordirtyfields)</ept> controls this automatic field checking.</source>
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve">
          <source>Call this member function only after you have called <bpt id="p1">[</bpt>Edit<ept id="p1">](#cdaorecordset__edit)</ept> or <bpt id="p2">[</bpt>AddNew<ept id="p2">](#cdaorecordset__addnew)</ept>.</source>
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> for the first argument of the function will apply the function to all <bpt id="p2">**</bpt>outputColumn<ept id="p2">**</ept> fields, not <bpt id="p3">**</bpt>param<ept id="p3">**</ept> fields in <ph id="ph1">`CDaoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source>For instance, the call</source>
        </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#6</source>
        </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve">
          <source>will set only <bpt id="p1">**</bpt>outputColumn<ept id="p1">**</ept> fields to <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>; <bpt id="p3">**</bpt>param<ept id="p3">**</ept> fields will be unaffected.</source>
        </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve">
          <source>To work on a <bpt id="p1">**</bpt>param<ept id="p1">**</ept>, you must supply the actual address of the individual <bpt id="p2">**</bpt>param<ept id="p2">**</ept> you want to work on, such as:</source>
        </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#7</source>
        </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve">
          <source>This means you cannot set all <bpt id="p1">**</bpt>param<ept id="p1">**</ept> fields to <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>, as you can with <bpt id="p3">**</bpt>outputColumn<ept id="p3">**</ept> fields.</source>
        </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve">
          <source>is implemented through <ph id="ph1">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetFieldNull</source>
        </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve">
          <source>Call this member function to flag a field data member of the recordset as Null (specifically having no value) or as non-Null.</source>
        </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve">
          <source>Contains the address of a field data member in the recordset or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, all field data members in the recordset are flagged.</source>
        </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source>(C++ <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is not the same as Null in database terminology, which means "having no value.")</source>
        </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source>Nonzero if the field data member is to be flagged as having no value (Null).</source>
        </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve">
          <source>Otherwise 0 if the field data member is to be flagged as non-Null.</source>
        </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>is used for fields bound in the <ph id="ph1">`DoFieldExchange`</ph> mechanism.</source>
        </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve">
          <source>When you add a new record to a recordset, all field data members are initially set to a Null value and flagged as "dirty" (changed).</source>
        </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve">
          <source>When you retrieve a record from a data source, its columns either already have values or are Null.</source>
        </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve">
          <source>If it is not appropriate to make a field Null, a <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../../mfc/reference/cdaoexception-class.md)</ept> is thrown.</source>
        </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve">
          <source>If you are using the double-buffering mechanism, for example, if you specifically wish to designate a field of the current record as not having a value, call <ph id="ph1">`SetFieldNull`</ph> with <ph id="ph2">`bNull`</ph> set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to flag it as Null.</source>
        </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve">
          <source>If a field was previously marked Null and you now want to give it a value, simply set its new value.</source>
        </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve">
          <source>You do not have to remove the Null flag with <ph id="ph1">`SetFieldNull`</ph>.</source>
        </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve">
          <source>To determine whether the field is allowed to be Null, call <bpt id="p1">[</bpt>IsFieldNullable<ept id="p1">](#cdaorecordset__isfieldnullable)</ept>.</source>
        </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve">
          <source>If you are not using the double-buffering mechanism, then changing the value of the field does not automatically set the field as dirty and non-Null.</source>
        </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>You must specifically set the fields dirty and non-Null.</source>
        </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>The flag contained in <bpt id="p1">[</bpt>m_bCheckCacheForDirtyFields<ept id="p1">](#cdaorecordset__m_bcheckcachefordirtyfields)</ept> controls this automatic field checking.</source>
        </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>The DFX mechanism employs the use of <bpt id="p1">**</bpt>PSEUDONULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDaoFieldExchange::m_nOperation<ept id="p1">](../../mfc/reference/cdaofieldexchange-class.md#cdaofieldexchange__m_noperation)</ept>.</source>
        </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve">
          <source>Call this member function only after you have called <bpt id="p1">[</bpt>Edit<ept id="p1">](#cdaorecordset__edit)</ept> or <bpt id="p2">[</bpt>AddNew<ept id="p2">](#cdaorecordset__addnew)</ept>.</source>
        </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> for the first argument of the function will apply the function only to <bpt id="p2">**</bpt>outputColumn<ept id="p2">**</ept> fields, not <bpt id="p3">**</bpt>param<ept id="p3">**</ept> fields in <ph id="ph1">`CDaoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve">
          <source>For instance, the call</source>
        </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#8</source>
        </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve">
          <source>will set only <bpt id="p1">**</bpt>outputColumn<ept id="p1">**</ept> fields to <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>; <bpt id="p3">**</bpt>param<ept id="p3">**</ept> fields will be unaffected.</source>
        </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetFieldValue</source>
        </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>Call this member function to set the value of a field, either by ordinal position or by changing the value of the string.</source>
        </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the name of a field.</source>
        </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md)</ept> object containing the value of the field's contents.</source>
        </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve">
          <source>An integer that represents the ordinal position of the field in the recordset's Fields collection (zero-based).</source>
        </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the value of the field's contents.</source>
        </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`SetFieldValue`</ph> and <bpt id="p1">[</bpt>GetFieldValue<ept id="p1">](#cdaorecordset__getfieldvalue)</ept> to dynamically bind fields at run time rather than statically binding columns using the <bpt id="p2">[</bpt>DoFieldExchange<ept id="p2">](#cdaorecordset__dofieldexchange)</ept> mechanism.</source>
        </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve">
          <source>Note that if you are not creating a UNICODE recordset, you must either use a form of <ph id="ph1">`SetFieldValue`</ph> that does not contain a <ph id="ph2">`COleVariant`</ph> parameter, or the <ph id="ph3">`COleVariant`</ph> object must be explicitly declared ANSI.</source>
        </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve">
          <source>This can be done by using the <bpt id="p1">[</bpt>COleVariant::COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md#colevariant__colevariant)</ept><bpt id="p2">**</bpt>(<ept id="p2">**</ept> <ph id="ph1">`lpszSrc`</ph><bpt id="p3">**</bpt>,<ept id="p3">**</ept> <ph id="ph2">`vtSrc`</ph> <bpt id="p4">**</bpt>)<ept id="p4">**</ept> form of constructor with <ph id="ph3">`vtSrc`</ph> set to <ph id="ph4">`VT_BSTRT`</ph> (ANSI) or by using the <bpt id="p5">**</bpt>COleVariant<ept id="p5">**</ept> function <bpt id="p6">[</bpt>SetString<ept id="p6">](../../mfc/reference/colevariant-class.md#colevariant__setstring)</ept><bpt id="p7">**</bpt>(<ept id="p7">**</ept> <ph id="ph5">`lpszSrc`</ph><bpt id="p8">**</bpt>,<ept id="p8">**</ept> <ph id="ph6">`vtSrc`</ph> <bpt id="p9">**</bpt>)<ept id="p9">**</ept> with <ph id="ph7">`vtSrc`</ph> set to <ph id="ph8">`VT_BSTRT`</ph>.</source>
        </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "Field Object" and "Value Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetFieldValueNull</source>
        </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source>Call this member function to set the field to a Null value.</source>
        </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve">
          <source>The index of the field in the recordset, for lookup by zero-based index.</source>
        </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve">
          <source>The name of the field in the recordset, for lookup by name.</source>
        </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve">
          <source>C++ <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is not the same as Null, which, in database terminology, means "having no value."</source>
        </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "Field Object" and "Value Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetLockingMode</source>
        </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source>Call this member function to set the type of locking for the recordset.</source>
        </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source>bPessimistic</source>
        </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>A flag that indicates the type of locking.</source>
        </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve">
          <source>When pessimistic locking is in effect, the 2K page containing the record you are editing is locked as soon as you call the <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve">
          <source>The page is unlocked when you call the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> member function or any of the Move or Find operations.</source>
        </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve">
          <source>When optimistic locking is in effect, the 2K page containing the record is locked only while the record is being updated with the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve">
          <source>If a page is locked, no other user can edit records on the same page.</source>
        </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`SetLockingMode`</ph> and pass a nonzero value and another user already has the page locked, an exception is thrown when you call <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve">
          <source>Other users can read data from locked pages.</source>
        </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`SetLockingMode`</ph> with a zero value and later call <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> while the page is locked by another user, an exception occurs.</source>
        </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve">
          <source>To see the changes made to your record by another user (and lose your changes), call the <ph id="ph1">`SetBookmark`</ph> member function with the bookmark value of the current record.</source>
        </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve">
          <source>When working with ODBC data sources, the locking mode is always optimistic.</source>
        </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetParamValue</source>
        </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve">
          <source>Call this member function to set the value of a parameter in the recordset at run time.</source>
        </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>The numerical position of the parameter in the querydef's Parameters collection.</source>
        </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve">
          <source>The value to set; see Remarks.</source>
        </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve">
          <source>The name of the parameter whose value you want to set.</source>
        </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>The parameter must already have been established as part of the recordset's SQL string.</source>
        </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source>You can access the parameter either by name or by its index position in the collection.</source>
        </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve">
          <source>Specify the value to set as a <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source>For information about setting the desired value and type in your <ph id="ph1">`COleVariant`</ph> object, see class <bpt id="p1">[</bpt>COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve">
          <source>Note that if you are not creating a UNICODE recordset, the <ph id="ph1">`COleVariant`</ph> object must be explicitly declared ANSI.</source>
        </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve">
          <source>This can be done by using the <bpt id="p1">[</bpt>COleVariant::COleVariant<ept id="p1">](../../mfc/reference/colevariant-class.md#colevariant__colevariant)</ept><bpt id="p2">**</bpt>(<ept id="p2">**</ept> <ph id="ph1">`lpszSrc`</ph><bpt id="p3">**</bpt>,<ept id="p3">**</ept> <ph id="ph2">`vtSrc`</ph> <bpt id="p4">**</bpt>)<ept id="p4">**</ept> form of constructor with <ph id="ph3">`vtSrc`</ph> set to <ph id="ph4">`VT_BSTRT`</ph> (ANSI) or by using the <bpt id="p5">**</bpt>COleVariant<ept id="p5">**</ept> function <bpt id="p6">[</bpt>SetString<ept id="p6">](../../mfc/reference/colevariant-class.md#colevariant__setstring)</ept><bpt id="p7">**</bpt>(<ept id="p7">**</ept> <ph id="ph5">`lpszSrc`</ph><bpt id="p8">**</bpt>,<ept id="p8">**</ept> <ph id="ph6">`vtSrc`</ph> <bpt id="p9">**</bpt>)<ept id="p9">**</ept> with <ph id="ph7">`vtSrc`</ph> set to <ph id="ph8">`VT_BSTRT`</ph>.</source>
        </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetParamValueNull</source>
        </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve">
          <source>Call this member function to set the parameter to a Null value.</source>
        </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve">
          <source>The index of the field in the recordset, for lookup by zero-based index.</source>
        </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve">
          <source>The name of the field in the recordset, for lookup by name.</source>
        </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve">
          <source>C++ <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is not the same as Null, which, in database terminology, means "having no value."</source>
        </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::SetPercentPosition</source>
        </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>Call this member function to set a value that changes the approximate location of the current record in the recordset object based on a percentage of the records in the recordset.</source>
        </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>fPosition</source>
        </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source>A number between 0 and 100.</source>
        </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve">
          <source>When working with a dynaset-type or snapshot-type recordset, first populate the recordset by moving to the last record before you call <ph id="ph1">`SetPercentPosition`</ph>.</source>
        </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`SetPercentPosition`</ph> before fully populating the recordset, the amount of movement is relative to the number of records accessed as indicated by the value of <bpt id="p1">[</bpt>GetRecordCount<ept id="p1">](#cdaorecordset__getrecordcount)</ept>.</source>
        </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve">
          <source>You can move to the last record by calling <ph id="ph1">`MoveLast`</ph>.</source>
        </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve">
          <source>Once you call <ph id="ph1">`SetPercentPosition`</ph>, the record at the approximate position corresponding to that value becomes current.</source>
        </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`SetPercentPosition`</ph> to move the current record to a specific record in a recordset is not recommended.</source>
        </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>SetBookmark<ept id="p1">](#cdaorecordset__setbookmark)</ept> member function instead.</source>
        </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "PercentPosition Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve">
          <source>CDaoRecordset::Update</source>
        </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve">
          <source>Call this member function after a call to the <ph id="ph1">`AddNew`</ph> or <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>This call is required to complete the <ph id="ph1">`AddNew`</ph> or <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> operation.</source>
        </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">`AddNew`</ph> and <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> prepare an edit buffer in which the added or edited data is placed for saving to the data source.</source>
        </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Update<ept id="p1">**</ept> saves the data.</source>
        </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve">
          <source>Only those fields marked or detected as changed are updated.</source>
        </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source>If the data source supports transactions, you can make the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> call (and its corresponding <ph id="ph1">`AddNew`</ph> or <bpt id="p2">**</bpt>Edit<ept id="p2">**</ept> call) part of a transaction.</source>
        </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> without first calling either <ph id="ph1">`AddNew`</ph> or <bpt id="p2">**</bpt>Edit<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Update<ept id="p3">**</ept> throws a <ph id="ph2">`CDaoException`</ph>.</source>
        </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`AddNew`</ph> or <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, you must call <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> before you call <bpt id="p3">[</bpt>MoveNext<ept id="p3">](#cdaorecordset__movenext)</ept> or close either the recordset or the data source connection.</source>
        </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve">
          <source>Otherwise, your changes are lost without notification.</source>
        </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve">
          <source>When the recordset object is pessimistically locked in a multiuser environment, the record remains locked from the time <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> is used until the updating is complete.</source>
        </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve">
          <source>If the recordset is optimistically locked, the record is locked and compared with the pre-edited record just before it is updated in the database.</source>
        </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>If the record has changed since you called <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, the <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> operation fails and MFC throws an exception.</source>
        </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source>You can change the locking mode with <ph id="ph1">`SetLockingMode`</ph>.</source>
        </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve">
          <source>Optimistic locking is always used on external database formats, such as ODBC and installable ISAM.</source>
        </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve">
          <source>For related information, see the topics "AddNew Method", "CancelUpdate Method", "Delete Method", "LastModified Property", "Update Method", and "EditMode Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source>CDaoTableDef Class</source>
        </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve">
          <source>CDaoWorkspace Class</source>
        </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve">
          <source>CDaoDatabase Class</source>
        </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve">
          <source>CDaoQueryDef Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>