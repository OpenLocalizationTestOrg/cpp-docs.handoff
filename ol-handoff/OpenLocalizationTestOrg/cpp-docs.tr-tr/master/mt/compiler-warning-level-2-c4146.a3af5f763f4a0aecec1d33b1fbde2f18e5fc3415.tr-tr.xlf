<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bf2a66c5f21ea6149160fa1aeaf13f42bfa7a92</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-warnings\compiler-warning-level-2-c4146.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56796d16a85d5a5568f732b0b10b02db4daa3632</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e058c320c5dadebfb4ec8d64ba3ae5e349d40dc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4146 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4146</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>unary minus operator applied to unsigned type, result still unsigned</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unsigned types can hold only non-negative values, so unary minus (negation) does not usually make sense when applied to an unsigned type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Both the operand and the result are non-negative.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Practically, this occurs when the programmer is trying to express the minimum integer value, which is -2147483648.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This value cannot be written as -2147483648 because the expression is processed in two stages:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The number 2147483648 is evaluated.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because it is greater than the maximum integer value of 2147483647, the type of 2147483648 is not <bpt id="p1">[</bpt>int<ept id="p1">](../../c-language/integer-types.md)</ept>, but <ph id="ph1">`unsigned int`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Unary minus is applied to the value, with an unsigned result, which also happens to be 2147483648.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The unsigned type of the result can cause unexpected behavior.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the result is used in a comparison, then an unsigned comparison might be used, for example, when the other operand is an <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This explains why the example program below prints just one line.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The expected second line, <ph id="ph1">`1 is greater than the most negative int`</ph>, is not printed because <ph id="ph2">`((unsigned int)1) &gt; 2147483648`</ph> is false.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can avoid C4146 by using INT_MIN from limits.h, which has the type <bpt id="p1">**</bpt>signed int<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following sample generates C4146:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>