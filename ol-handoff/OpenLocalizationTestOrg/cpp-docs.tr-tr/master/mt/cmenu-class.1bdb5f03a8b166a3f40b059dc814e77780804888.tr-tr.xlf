<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d8710b6fc123a7419373a80358fdd084df91eb8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmenu-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea8b0f9e647c392b5e1d3f0d7b3e56672a83e134</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">faa4f3c3b266a5f136fcb5f9f9dcc5eb6c16bce4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMenu Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMenu Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An encapsulation of the Windows <ph id="ph1">`HMENU`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::CMenu<ept id="p1">](#cmenu__cmenu)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::AppendMenu<ept id="p1">](#cmenu__appendmenu)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Appends a new item to the end of this menu.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::Attach<ept id="p1">](#cmenu__attach)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Attaches a Windows menu handle to a <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::CheckMenuItem<ept id="p1">](#cmenu__checkmenuitem)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Places a check mark next to or removes a check mark from a menu item in the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::CheckMenuRadioItem<ept id="p1">](#cmenu__checkmenuradioitem)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Places a radio button next to a menu item and removes the radio button from all of the other menu items in the group.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::CreateMenu<ept id="p1">](#cmenu__createmenu)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates an empty menu and attaches it to a <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::CreatePopupMenu<ept id="p1">](#cmenu__createpopupmenu)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creates an empty pop-up menu and attaches it to a <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::DeleteMenu<ept id="p1">](#cmenu__deletemenu)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Deletes a specified item from the menu.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the menu item has an associated pop-up menu, destroys the handle to the pop-up menu and frees the memory used by it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::DeleteTempMap<ept id="p1">](#cmenu__deletetempmap)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Deletes any temporary <ph id="ph1">`CMenu`</ph> objects created by the <ph id="ph2">`FromHandle`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::DestroyMenu<ept id="p1">](#cmenu__destroymenu)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Destroys the menu attached to a <ph id="ph1">`CMenu`</ph> object and frees any memory that the menu occupied.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::Detach<ept id="p1">](#cmenu__detach)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Detaches a Windows menu handle from a <ph id="ph1">`CMenu`</ph> object and returns the handle.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::DrawItem<ept id="p1">](#cmenu__drawitem)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Called by the framework when a visual aspect of an owner-drawn menu changes.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::EnableMenuItem<ept id="p1">](#cmenu__enablemenuitem)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Enables, disables, or dims (grays) a menu item.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::FromHandle<ept id="p1">](#cmenu__fromhandle)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CMenu`</ph> object given a Windows menu handle.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::GetDefaultItem<ept id="p1">](#cmenu__getdefaultitem)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Determines the default menu item on the specified menu.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::GetMenuContextHelpId<ept id="p1">](#cmenu__getmenucontexthelpid)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Retrieves the help context ID associated with the menu.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::GetMenuInfo<ept id="p1">](#cmenu__getmenuinfo)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Retrieves information on a specific menu.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::GetMenuItemCount<ept id="p1">](#cmenu__getmenuitemcount)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Determines the number of items in a pop-up or top-level menu.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::GetMenuItemID<ept id="p1">](#cmenu__getmenuitemid)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Obtains the menu-item identifier for a menu item located at the specified position.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::GetMenuItemInfo<ept id="p1">](#cmenu__getmenuiteminfo)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Retrieves information about a menu item.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::GetMenuState<ept id="p1">](#cmenu__getmenustate)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Returns the status of the specified menu item or the number of items in a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::GetMenuString<ept id="p1">](#cmenu__getmenustring)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Retrieves the label of the specified menu item.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::GetSafeHmenu<ept id="p1">](#cmenu__getsafehmenu)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">`m_hMenu`</ph> wrapped by this <ph id="ph2">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::GetSubMenu<ept id="p1">](#cmenu__getsubmenu)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::InsertMenu<ept id="p1">](#cmenu__insertmenu)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Inserts a new menu item at the specified position, moving other items down the menu.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::InsertMenuItem<ept id="p1">](#cmenu__insertmenuitem)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Inserts a new menu item at the specified position in a menu.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::LoadMenu<ept id="p1">](#cmenu__loadmenu)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Loads a menu resource from the executable file and attaches it to a <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::LoadMenuIndirect<ept id="p1">](#cmenu__loadmenuindirect)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Loads a menu from a menu template in memory and attaches it to a <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::MeasureItem<ept id="p1">](#cmenu__measureitem)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine menu dimensions when an owner-drawn menu is created.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::ModifyMenu<ept id="p1">](#cmenu__modifymenu)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Changes an existing menu item at the specified position.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::RemoveMenu<ept id="p1">](#cmenu__removemenu)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Deletes a menu item with an associated pop-up menu from the specified menu.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::SetDefaultItem<ept id="p1">](#cmenu__setdefaultitem)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Sets the default menu item for the specified menu.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::SetMenuContextHelpId<ept id="p1">](#cmenu__setmenucontexthelpid)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Sets the help context ID to be associated with the menu.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::SetMenuInfo<ept id="p1">](#cmenu__setmenuinfo)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Sets information on a specific menu.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::SetMenuItemBitmaps<ept id="p1">](#cmenu__setmenuitembitmaps)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Associates the specified check-mark bitmaps with a menu item.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::SetMenuItemInfo<ept id="p1">](#cmenu__setmenuiteminfo)</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Changes information about a menu item.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::TrackPopupMenu<ept id="p1">](#cmenu__trackpopupmenu)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::TrackPopupMenuEx<ept id="p1">](#cmenu__trackpopupmenuex)</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::operator HMENU<ept id="p1">](#cmenu__operator_hmenu)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the menu object.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::operator !=<ept id="p1">](#cmenu__operator__neq)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Determines if two menu objects are not equal.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::operator ==<ept id="p1">](#cmenu__operator__eq_eq)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Determines if two menu objects are equal.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMenu::m_hMenu<ept id="p1">](#cmenu__m_hmenu)</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Specifies the handle to the Windows menu attached to the <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It provides member functions for creating, tracking, updating, and destroying a menu.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`CMenu`</ph> object on the stack frame as a local, then call <ph id="ph2">`CMenu`</ph>'s member functions to manipulate the new menu as needed.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Next, call <bpt id="p1">[</bpt>CWnd::SetMenu<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__setmenu)</ept> to set the menu to a window, followed immediately by a call to the <ph id="ph1">`CMenu`</ph> object's <bpt id="p2">[</bpt>Detach<ept id="p2">](#cmenu__detach)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd::SetMenu`</ph> member function sets the window's menu to the new menu, causes the window to be redrawn to reflect the menu change, and also passes ownership of the menu to the window.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The call to <bpt id="p1">**</bpt>Detach<ept id="p1">**</ept> detaches the <ph id="ph1">`HMENU`</ph> from the <ph id="ph2">`CMenu`</ph> object, so that when the local <ph id="ph3">`CMenu`</ph> variable passes out of scope, the <ph id="ph4">`CMenu`</ph> object destructor does not attempt to destroy a menu it no longer owns.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The menu itself is automatically destroyed when the window is destroyed.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>LoadMenuIndirect<ept id="p1">](#cmenu__loadmenuindirect)</ept> member function to create a menu from a template in memory, but a menu created from a resource by a call to <bpt id="p2">[</bpt>LoadMenu<ept id="p2">](#cmenu__loadmenu)</ept> is more easily maintained, and the menu resource itself can be created and modified by the menu editor.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__appendmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::AppendMenu</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Appends a new item to the end of a menu.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Specifies information about the state of the new menu item when it is added to the menu.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>It consists of one or more of the values listed in the Remarks section.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Specifies either the command ID of the new menu item or, if <ph id="ph1">`nFlags`</ph> is set to <bpt id="p1">**</bpt>MF_POPUP<ept id="p1">**</ept>, the menu handle ( <ph id="ph2">`HMENU`</ph>) of a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nIDNewItem`</ph> parameter is ignored (not needed) if <ph id="ph2">`nFlags`</ph> is set to <bpt id="p1">**</bpt>MF_SEPARATOR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Specifies the content of the new menu item.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter is used to interpret <ph id="ph2">`lpszNewItem`</ph> in the following way:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>nFlags</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Interpretation of lpszNewItem</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Contains an application-supplied 32-bit value that the application can use to maintain additional data associated with the menu item.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This 32-bit value is available to the application when it processes <ph id="ph1">`WM_MEASUREITEM`</ph> and <ph id="ph2">`WM_DRAWITEM`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The value is stored in the <bpt id="p1">**</bpt>itemData<ept id="p1">**</ept> member of the structure supplied with those messages.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_STRING<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Contains a pointer to a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This is the default interpretation.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_SEPARATOR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszNewItem`</ph> parameter is ignored (not needed).</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pBmp<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CBitmap`</ph> object that will be used as the menu item.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The application can specify the state of the menu item by setting values in <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`nIDNewItem`</ph> specifies a pop-up menu, it becomes part of the menu to which it is appended.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If that menu is destroyed, the appended menu will also be destroyed.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>An appended menu should be detached from a <ph id="ph1">`CMenu`</ph> object to avoid conflict.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>MF_STRING<ept id="p1">**</ept> and <ph id="ph1">`MF_OWNERDRAW`</ph> are not valid for the bitmap version of <ph id="ph2">`AppendMenu`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following list describes the flags that may be set in <ph id="ph1">`nFlags`</ph>:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_CHECKED<ept id="p1">**</ept> Acts as a toggle with <bpt id="p2">**</bpt>MF_UNCHECKED<ept id="p2">**</ept> to place the default check mark next to the item.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>When the application supplies check-mark bitmaps (see the <bpt id="p1">[</bpt>SetMenuItemBitmaps<ept id="p1">](#cmenu__setmenuitembitmaps)</ept> member function), the "check mark on" bitmap is displayed.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_UNCHECKED<ept id="p1">**</ept> Acts as a toggle with <bpt id="p2">**</bpt>MF_CHECKED<ept id="p2">**</ept> to remove a check mark next to the item.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>When the application supplies check-mark bitmaps (see the <ph id="ph1">`SetMenuItemBitmaps`</ph> member function), the "check mark off" bitmap is displayed.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_DISABLED<ept id="p1">**</ept> Disables the menu item so that it cannot be selected but does not dim it.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MF_ENABLED`</ph> Enables the menu item so that it can be selected and restores it from its dimmed state.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_GRAYED<ept id="p1">**</ept> Disables the menu item so that it cannot be selected and dims it.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_MENUBARBREAK<ept id="p1">**</ept> Places the item on a new line in static menus or in a new column in pop-up menus.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The new pop-up menu column will be separated from the old column by a vertical dividing line.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_MENUBREAK<ept id="p1">**</ept> Places the item on a new line in static menus or in a new column in pop-up menus.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>No dividing line is placed between the columns.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MF_OWNERDRAW`</ph> Specifies that the item is an owner-draw item.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>When the menu is displayed for the first time, the window that owns the menu receives a <ph id="ph1">`WM_MEASUREITEM`</ph> message, which retrieves the height and width of the menu item.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WM_DRAWITEM`</ph> message is the one sent whenever the owner must update the visual appearance of the menu item.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This option is not valid for a top-level menu item.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_POPUP<ept id="p1">**</ept> Specifies that the menu item has a pop-up menu associated with it.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The ID parameter specifies a handle to a pop-up menu that is to be associated with the item.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This is used for adding either a top-level pop-up menu or a hierarchical pop-up menu to a pop-up menu item.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_SEPARATOR<ept id="p1">**</ept> Draws a horizontal dividing line.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Can only be used in a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This line cannot be dimmed, disabled, or highlighted.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Other parameters are ignored.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_STRING<ept id="p1">**</ept> Specifies that the menu item is a character string.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Each of the following groups lists flags that are mutually exclusive and cannot be used together:</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_DISABLED<ept id="p1">**</ept>, <ph id="ph1">`MF_ENABLED`</ph>, and <bpt id="p2">**</bpt>MF_GRAYED<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_STRING<ept id="p1">**</ept>, <ph id="ph1">`MF_OWNERDRAW`</ph>, <bpt id="p2">**</bpt>MF_SEPARATOR<ept id="p2">**</ept>, and the bitmap version</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_MENUBARBREAK<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MF_MENUBREAK<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_CHECKED<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MF_UNCHECKED<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call <bpt id="p1">[</bpt>CWnd::DrawMenuBar<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__drawmenubar)</ept>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::CreateMenu<ept id="p1">](#cmenu__createmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__attach"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::Attach</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Attaches an existing Windows menu to a <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Specifies a handle to a Windows menu.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Nonzero if the operation was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This function should not be called if a menu is already attached to the <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The menu handle is stored in the <ph id="ph1">`m_hMenu`</ph> data member.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If the menu you want to manipulate is already associated with a window, you can use the <bpt id="p1">[</bpt>CWnd::GetMenu<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__getmenu)</ept> function to get a handle to the menu.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#21<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__checkmenuitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::CheckMenuItem</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Adds check marks to or removes check marks from menu items in the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Specifies the menu item to be checked, as determined by <ph id="ph1">`nCheck`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Specifies how to check the menu item and how to determine the item's position in the menu.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nCheck`</ph> parameter can be a combination of <bpt id="p1">**</bpt>MF_CHECKED<ept id="p1">**</ept> or <bpt id="p2">**</bpt>MF_UNCHECKED<ept id="p2">**</ept> with <bpt id="p3">**</bpt>MF_BYPOSITION<ept id="p3">**</ept> or <bpt id="p4">**</bpt>MF_BYCOMMAND<ept id="p4">**</ept> flags.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>These flags can be combined by using the bitwise OR operator.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>They have the following meanings:</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> Specifies that the parameter gives the command ID of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This is the default.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept> Specifies that the parameter gives the position of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The first item is at position 0.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_CHECKED<ept id="p1">**</ept> Acts as a toggle with <bpt id="p2">**</bpt>MF_UNCHECKED<ept id="p2">**</ept> to place the default check mark next to the item.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_UNCHECKED<ept id="p1">**</ept> Acts as a toggle with <bpt id="p2">**</bpt>MF_CHECKED<ept id="p2">**</ept> to remove a check mark next to the item.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The previous state of the item: <bpt id="p1">**</bpt>MF_CHECKED<ept id="p1">**</ept> or <bpt id="p2">**</bpt>MF_UNCHECKED<ept id="p2">**</ept>, or 0xFFFFFFFF if the menu item did not exist.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nIDCheckItem`</ph> parameter specifies the item to be modified.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nIDCheckItem`</ph> parameter may identify a pop-up menu item as well as a menu item.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>No special steps are required to check a pop-up menu item.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Top-level menu items cannot be checked.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>A pop-up menu item must be checked by position since it does not have a menu-item identifier associated with it.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::GetMenuState<ept id="p1">](#cmenu__getmenustate)</ept>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__checkmenuradioitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::CheckMenuRadioItem</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Checks a specified menu item and makes it a radio item.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Specifies (as an ID or offset, depending on the value of <ph id="ph1">`nFlags`</ph>) the first menu item in the radio button group.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Specifies (as an ID or offset, depending on the value of <ph id="ph1">`nFlags`</ph>) the last menu item in the radio button group.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Specifies (as an ID or offset, depending on the value of <ph id="ph1">`nFlags`</ph>) the item in the group which will be checked with a radio button.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Specifies interpretation of <ph id="ph1">`nIDFirst`</ph>, <ph id="ph2">`nIDLast`</ph>, and <ph id="ph3">`nIDItem`</ph> in the following way:</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>nFlags</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Interpretation</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the command ID of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This is the default if neither <bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> nor <bpt id="p2">**</bpt>MF_BYPOSITION<ept id="p2">**</ept> is set.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the position of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The first item is at position 0.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>At the same time, the function unchecks all other menu items in the associated group and clears the radio-item type flag for those items.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The checked item is displayed using a radio button (or bullet) bitmap instead of a check mark bitmap.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>ON_COMMAND_RANGE<ept id="p1">](http://msdn.microsoft.com/library/c52719fc-dd6e-48c9-af79-383f48d608e0)</ept>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__cmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::CMenu</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Creates an empty menu and attaches it to a <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The menu is not created until you call one of the create or load member functions of <bpt id="p1">**</bpt>CMenu:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CreateMenu<ept id="p1">](#cmenu__createmenu)</ept></source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CreatePopupMenu<ept id="p1">](#cmenu__createpopupmenu)</ept></source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LoadMenu<ept id="p1">](#cmenu__loadmenu)</ept></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LoadMenuIndirect<ept id="p1">](#cmenu__loadmenuindirect)</ept></source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attach<ept id="p1">](#cmenu__attach)</ept></source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__createmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::CreateMenu</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Creates a menu and attaches it to the <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Nonzero if the menu was created successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The menu is initially empty.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Menu items can be added by using the <ph id="ph1">`AppendMenu`</ph> or <ph id="ph2">`InsertMenu`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>If the menu is assigned to a window, it is automatically destroyed when the window is destroyed.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Before exiting, an application must free system resources associated with a menu if the menu is not assigned to a window.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>An application frees a menu by calling the <bpt id="p1">[</bpt>DestroyMenu<ept id="p1">](#cmenu__destroymenu)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#22<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__createpopupmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::CreatePopupMenu</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Creates a pop-up menu and attaches it to the <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Nonzero if the pop-up menu was successfully created; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The menu is initially empty.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Menu items can be added by using the <ph id="ph1">`AppendMenu`</ph> or <ph id="ph2">`InsertMenu`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The application can add the pop-up menu to an existing menu or pop-up menu.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TrackPopupMenu`</ph> member function may be used to display this menu as a floating pop-up menu and to track selections on the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>If the menu is assigned to a window, it is automatically destroyed when the window is destroyed.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If the menu is added to an existing menu, it is automatically destroyed when that menu is destroyed.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Before exiting, an application must free system resources associated with a pop-up menu if the menu is not assigned to a window.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>An application frees a menu by calling the <bpt id="p1">[</bpt>DestroyMenu<ept id="p1">](#cmenu__destroymenu)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::CreateMenu<ept id="p1">](#cmenu__createmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__deletemenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::DeleteMenu</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Deletes an item from the menu.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Specifies the menu item that is to be deleted, as determined by <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Is used to interpret <ph id="ph1">`nPosition`</ph> in the following way:</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>nFlags</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Interpretation of nPosition</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the command ID of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>This is the default if neither <bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> nor <bpt id="p2">**</bpt>MF_BYPOSITION<ept id="p2">**</ept> is set.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the position of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The first item is at position 0.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>If the menu item has an associated pop-up menu, <ph id="ph1">`DeleteMenu`</ph> destroys the handle to the pop-up menu and frees the memory used by the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application must call <bpt id="p1">[</bpt>CWnd::DrawMenuBar<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__drawmenubar)</ept>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::GetMenu<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__getmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__deletetempmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::DeleteTempMap</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Called automatically by the <ph id="ph1">`CWinApp`</ph> idle-time handler, deletes any temporary <ph id="ph2">`CMenu`</ph> objects created by the <bpt id="p1">[</bpt>FromHandle<ept id="p1">](#cmenu__fromhandle)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DeleteTempMap`</ph> detaches the Windows menu object attached to a temporary <ph id="ph2">`CMenu`</ph> object before deleting the <ph id="ph3">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#23<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__destroymenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::DestroyMenu</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Destroys the menu and any Windows resources that were used.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Nonzero if the menu is destroyed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The menu is detached from the <ph id="ph1">`CMenu`</ph> object before it is destroyed.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The Windows <ph id="ph1">`DestroyMenu`</ph> function is automatically called in the <ph id="ph2">`CMenu`</ph> destructor.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::CreateMenu<ept id="p1">](#cmenu__createmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__detach"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::Detach</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Detaches a Windows menu from a <ph id="ph1">`CMenu`</ph> object and returns the handle.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The handle, of type <ph id="ph1">`HMENU`</ph>, to a Windows menu, if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_hMenu`</ph> data member is set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#21<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__drawitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::DrawItem</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Called by the framework when a visual aspect of an owner-drawn menu changes.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>DRAWITEMSTRUCT<ept id="p1">](../../mfc/reference/drawitemstruct-structure.md)</ept> structure that contains information about the type of drawing required.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`itemAction`</ph> member of the <ph id="ph2">`DRAWITEMSTRUCT`</ph> structure defines the drawing action that is to be performed.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Override this member function to implement drawing for an owner-draw <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The application should restore all graphics device interface (GDI) objects selected for the display context supplied in <ph id="ph1">`lpDrawItemStruct`</ph> before the termination of this member function.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWnd::OnDrawItem<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem)</ept> for a description of the <ph id="ph1">`DRAWITEMSTRUCT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The following code is from the MFC <bpt id="p1">[</bpt>CTRLTEST<ept id="p1">](../../visual-cpp-samples.md)</ept> sample:</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#24<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__enablemenuitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::EnableMenuItem</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Enables, disables, or dims a menu item.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nIDEnableItem<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Specifies the menu item to be enabled, as determined by <ph id="ph1">`nEnable`</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>This parameter can specify pop-up menu items as well as standard menu items.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Specifies the action to take.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>It can be a combination of <bpt id="p1">**</bpt>MF_DISABLED<ept id="p1">**</ept>, <ph id="ph1">`MF_ENABLED`</ph>, or <bpt id="p2">**</bpt>MF_GRAYED<ept id="p2">**</ept>, with <bpt id="p3">**</bpt>MF_BYCOMMAND<ept id="p3">**</ept> or <bpt id="p4">**</bpt>MF_BYPOSITION<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>These values can be combined by using the bitwise OR operator.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>These values have the following meanings:</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> Specifies that the parameter gives the command ID of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>This is the default.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept> Specifies that the parameter gives the position of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>The first item is at position 0.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_DISABLED<ept id="p1">**</ept> Disables the menu item so that it cannot be selected but does not dim it.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MF_ENABLED`</ph> Enables the menu item so that it can be selected and restores it from its dimmed state.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_GRAYED<ept id="p1">**</ept> Disables the menu item so that it cannot be selected and dims it.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Previous state ( <bpt id="p1">**</bpt>MF_DISABLED<ept id="p1">**</ept>, <ph id="ph1">`MF_ENABLED`</ph>, or <bpt id="p2">**</bpt>MF_GRAYED<ept id="p2">**</ept>) or –1 if not valid.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CreateMenu<ept id="p1">](#cmenu__createmenu)</ept>, <bpt id="p2">[</bpt>InsertMenu<ept id="p2">](#cmenu__insertmenu)</ept>, <bpt id="p3">[</bpt>ModifyMenu<ept id="p3">](#cmenu__modifymenu)</ept>, and <bpt id="p4">[</bpt>LoadMenuIndirect<ept id="p4">](#cmenu__loadmenuindirect)</ept> member functions can also set the state (enabled, disabled, or dimmed) of a menu item.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept> value requires an application to use the correct <ph id="ph1">`CMenu`</ph>.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CMenu`</ph> of the menu bar is used, a top-level menu item (an item in the menu bar) is affected.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>To set the state of an item in a pop-up or nested pop-up menu by position, an application must specify the <ph id="ph1">`CMenu`</ph> of the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>When an application specifies the <bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> flag, Windows checks all pop-up menu items that are subordinate to the <ph id="ph1">`CMenu`</ph>; therefore, unless duplicate menu items are present, using the <ph id="ph2">`CMenu`</ph> of the menu bar is sufficient.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#25<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__fromhandle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::FromHandle</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CMenu`</ph> object given a Windows handle to a menu.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>A Windows handle to a menu.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CMenu`</ph> that may be temporary or permanent.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CMenu`</ph> object is not already attached to the Windows menu object, a temporary <ph id="ph2">`CMenu`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>This temporary <ph id="ph1">`CMenu`</ph> object is only valid until the next time the application has idle time in its event loop, at which time all temporary objects are deleted.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::CreateMenu<ept id="p1">](#cmenu__createmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__getdefaultitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::GetDefaultItem</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Determines the default menu item on the specified menu.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>gmdiFlags<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Value specifying how the function searches for menu items.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>This parameter can be none, one, or a combination of the following values:</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GMDI_GOINTOPOPUPS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Specifies that, if the default item is one that opens a submenu, the function is to search in the corresponding submenu recursively.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>If the submenu has no default item, the return value identifies the item that opens the submenu.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>By default, the function returns the first default item on the specified menu, regardless of whether it is an item that opens a submenu.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GMDI_USEDISABLED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Specifies that the function is to return a default item, even if it is disabled.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>By default, the function skips disabled or grayed items.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Value specifying whether to retrieve the menu item's identifier or its position.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the identifier is returned.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Otherwise, the position is returned.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is the identifier or position of the menu item.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is - 1.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 function <bpt id="p1">[</bpt>GetMenuDefaultItem<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647976)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::InsertMenu<ept id="p1">](#cmenu__insertmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__getmenucontexthelpid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::GetMenuContextHelpId</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Retrieves the context help ID associated with <ph id="ph1">`CMenu`</ph>.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The context help ID currently associated with <ph id="ph1">`CMenu`</ph> if it has one; zero otherwise.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::InsertMenu<ept id="p1">](#cmenu__insertmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__getmenuinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::GetMenuInfo</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Retrieves information for a menu.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>MENUINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647575)</ept> structure containing information for the menu.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is nonzero; otherwise, the return value is zero.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve information about the menu.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__getmenuitemcount"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::GetMenuItemCount</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Determines the number of items in a pop-up or top-level menu.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The number of items in the menu if the function is successful; otherwise –1.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::GetMenu<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__getmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__getmenuitemid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::GetMenuItemID</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Obtains the menu-item identifier for a menu item located at the position defined by <ph id="ph1">`nPos`</ph>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Specifies the position (zero-based) of the menu item whose ID is being retrieved.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The item ID for the specified item in a pop-up menu if the function is successful.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>If the specified item is a pop-up menu (as opposed to an item within the pop-up menu), the return value is –1.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nPos`</ph> corresponds to a <bpt id="p1">**</bpt>SEPARATOR<ept id="p1">**</ept> menu item, the return value is 0.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::InsertMenu<ept id="p1">](#cmenu__insertmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__getmenuiteminfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::GetMenuItemInfo</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Retrieves information about a menu item.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Identifier or position of the menu item to get information about.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The meaning of this parameter depends on the value of <ph id="ph1">`ByPos`</ph>.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>MENUITEMINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647578)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>, that contains information about the menu.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Value specifying the meaning of <ph id="ph1">`nIDItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`ByPos`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, which indicates that uItem is a menu item identifier.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`ByPos`</ph> is not set to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, it indicates a menu item position.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is nonzero.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is zero.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>To get extended error information, use the Win32 function <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the of the Win32 function <bpt id="p1">[</bpt>GetMenuItemInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647980)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Note that in the MFC implementation of <ph id="ph1">`GetMenuItemInfo`</ph>, you do not use a handle to a menu.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#26<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__getmenustate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::GetMenuState</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Returns the status of the specified menu item or the number of items in a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Specifies the menu item ID, as determined by <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Specifies the nature of <ph id="ph1">`nID`</ph>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>It can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> Specifies that the parameter gives the command ID of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>This is the default.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept> Specifies that the parameter gives the position of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>The first item is at position 0.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The value 0xFFFFFFFF if the specified item does not exist.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>nId<ept id="p1">*</ept> identifies a pop-up menu, the high-order byte contains the number of items in the pop-up menu and the low-order byte contains the menu flags associated with the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Otherwise the return value is a mask (Boolean OR) of the values from the following list (this mask describes the status of the menu item that <bpt id="p1">*</bpt>nId<ept id="p1">*</ept> identifies):</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_CHECKED<ept id="p1">**</ept> Acts as a toggle with <bpt id="p2">**</bpt>MF_UNCHECKED<ept id="p2">**</ept> to place the default check mark next to the item.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>When the application supplies check-mark bitmaps (see the <ph id="ph1">`SetMenuItemBitmaps`</ph> member function), the "check mark on" bitmap is displayed.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_DISABLED<ept id="p1">**</ept> Disables the menu item so that it cannot be selected but does not dim it.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MF_ENABLED`</ph> Enables the menu item so that it can be selected and restores it from its dimmed state.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Note that the value of this constant is 0; an application should not test against 0 for failure when using this value.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_GRAYED<ept id="p1">**</ept> Disables the menu item so that it cannot be selected and dims it.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_MENUBARBREAK<ept id="p1">**</ept> Places the item on a new line in static menus or in a new column in pop-up menus.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The new pop-up menu column will be separated from the old column by a vertical dividing line.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_MENUBREAK<ept id="p1">**</ept> Places the item on a new line in static menus or in a new column in pop-up menus.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>No dividing line is placed between the columns.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_SEPARATOR<ept id="p1">**</ept> Draws a horizontal dividing line.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Can only be used in a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>This line cannot be dimmed, disabled, or highlighted.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Other parameters are ignored.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_UNCHECKED<ept id="p1">**</ept> Acts as a toggle with <bpt id="p2">**</bpt>MF_CHECKED<ept id="p2">**</ept> to remove a check mark next to the item.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>When the application supplies check-mark bitmaps (see the <ph id="ph1">`SetMenuItemBitmaps`</ph> member function), the "check mark off" bitmap is displayed.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Note that the value of this constant is 0; an application should not test against 0 for failure when using this value.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#27<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__getmenustring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::GetMenuString</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Copies the label of the specified menu item to the specified buffer.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Specifies the integer identifier of the menu item or the offset of the menu item in the menu, depending on the value of <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Points to the buffer that is to receive the label.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CString`</ph> object that is to receive the copied menu string.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Specifies the maximum length (in characters) of the label to be copied.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>If the label is longer than the maximum specified in <ph id="ph1">`nMaxCount`</ph>, the extra characters are truncated.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Specifies the interpretation of the <ph id="ph1">`nIDItem`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>It can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>nFlags</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Interpretation of nIDItem</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the command ID of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>This is the default if neither <bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> nor <bpt id="p2">**</bpt>MF_BYPOSITION<ept id="p2">**</ept> is set.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the position of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>The first item is at position 0.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Specifies the actual number of characters copied to the buffer, not including the null terminator.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nMaxCount`</ph> parameter should be one larger than the number of characters in the label to accommodate the null character that terminates a string.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::InsertMenu<ept id="p1">](#cmenu__insertmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__getsafehmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::GetSafeHmenu</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">`HMENU`</ph> wrapped by this <ph id="ph2">`CMenu`</ph> object, or a <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept><ph id="ph3">`CMenu`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::LoadMenu<ept id="p1">](#cmenu__loadmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__getsubmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::GetSubMenu</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Retrieves the <ph id="ph1">`CMenu`</ph> object of a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Specifies the position of the pop-up menu contained in the menu.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Position values start at 0 for the first menu item.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>The pop-up menu's identifier cannot be used in this function.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CMenu`</ph> object whose <ph id="ph2">`m_hMenu`</ph> member contains a handle to the pop-up menu if a pop-up menu exists at the given position; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CMenu`</ph> object does not exist, then a temporary one is created.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMenu`</ph> pointer returned should not be stored.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::TrackPopupMenu<ept id="p1">](#cmenu__trackpopupmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__insertmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::InsertMenu</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Inserts a new menu item at the position specified by <ph id="ph1">`nPosition`</ph> and moves other items down the menu.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Specifies the menu item before which the new menu item is to be inserted.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter can be used to interpret <ph id="ph2">`nPosition`</ph> in the following ways:</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>nFlags</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Interpretation of nPosition</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the command ID of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>This is the default if neither <bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> nor <bpt id="p2">**</bpt>MF_BYPOSITION<ept id="p2">**</ept> is set.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the position of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>The first item is at position 0.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nPosition`</ph> is –1, the new menu item is appended to the end of the menu.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Specifies how <ph id="ph1">`nPosition`</ph> is interpreted and specifies information about the state of the new menu item when it is added to the menu.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>For a list of the flags that may be set, see the <bpt id="p1">[</bpt>AppendMenu<ept id="p1">](#cmenu__appendmenu)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>To specify more than one value, use the bitwise OR operator to combine them with the <bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> or <bpt id="p2">**</bpt>MF_BYPOSITION<ept id="p2">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Specifies either the command ID of the new menu item or, if <ph id="ph1">`nFlags`</ph> is set to <bpt id="p1">**</bpt>MF_POPUP<ept id="p1">**</ept>, the menu handle ( <ph id="ph2">`HMENU`</ph>) of the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nIDNewItem`</ph> parameter is ignored (not needed) if <ph id="ph2">`nFlags`</ph> is set to <bpt id="p1">**</bpt>MF_SEPARATOR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Specifies the content of the new menu item.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`nFlags`</ph> can be used to interpret <ph id="ph2">`lpszNewItem`</ph> in the following ways:</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>nFlags</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Interpretation of lpszNewItem</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Contains an application-supplied 32-bit value that the application can use to maintain additional data associated with the menu item.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>This 32-bit value is available to the application in the <bpt id="p1">**</bpt>itemData<ept id="p1">**</ept> member of the structure supplied by the <bpt id="p2">[</bpt>WM_MEASUREITEM<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775925)</ept> and <bpt id="p3">[</bpt>WM_DRAWITEM<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/bb775923)</ept> messages.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>These messages are sent when the menu item is initially displayed or is changed.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_STRING<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Contains a long pointer to a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>This is the default interpretation.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_SEPARATOR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszNewItem`</ph> parameter is ignored (not needed).</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pBmp<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CBitmap`</ph> object that will be used as the menu item.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The application can specify the state of the menu item by setting values in <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call <ph id="ph1">`CWnd::DrawMenuBar`</ph>.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`nIDNewItem`</ph> specifies a pop-up menu, it becomes part of the menu in which it is inserted.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>If that menu is destroyed, the inserted menu will also be destroyed.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>An inserted menu should be detached from a <ph id="ph1">`CMenu`</ph> object to avoid conflict.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>If the active multiple document interface (MDI) child window is maximized and an application inserts a pop-up menu into the MDI application's menu by calling this function and specifying the <bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept> flag, the menu is inserted one position farther left than expected.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>This happens because the Control menu of the active MDI child window is inserted into the first position of the MDI frame window's menu bar.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>To position the menu properly, the application must add 1 to the position value that would otherwise be used.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>An application can use the <bpt id="p1">**</bpt>WM_MDIGETACTIVE<ept id="p1">**</ept> message to determine whether the currently active child window is maximized.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#28<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_8.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__insertmenuitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::InsertMenuItem</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Inserts a new menu item at the specified position in a menu.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>See description of <ph id="ph1">`uItem`</ph> in <bpt id="p1">[</bpt>InsertMenuItem<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647988)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>See description of <ph id="ph1">`lpmii`</ph> in <bpt id="p1">**</bpt>InsertMenuItem<ept id="p1">**</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>See description of <ph id="ph1">`fByPosition`</ph> in <bpt id="p1">**</bpt>InsertMenuItem<ept id="p1">**</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>This function wraps <bpt id="p1">[</bpt>InsertMenuItem<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647988)</ept>, described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__loadmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::LoadMenu</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Loads a menu resource from the application's executable file and attaches it to the <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the name of the menu resource to load.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Specifies the menu ID of the menu resource to load.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Nonzero if the menu resource was loaded successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Before exiting, an application must free system resources associated with a menu if the menu is not assigned to a window.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>An application frees a menu by calling the <bpt id="p1">[</bpt>DestroyMenu<ept id="p1">](#cmenu__destroymenu)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#29<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_9.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__loadmenuindirect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::LoadMenuIndirect</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Loads a resource from a menu template in memory and attaches it to the <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpMenuTemplate<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Points to a menu template (which is a single <bpt id="p1">[</bpt>MENUITEMTEMPLATEHEADER<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647583)</ept> structure and a collection of one or more <bpt id="p2">[</bpt>MENUITEMTEMPLATE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms647581)</ept> structures).</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>For more information on these two structures, see the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Nonzero if the menu resource was loaded successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>A menu template is a header followed by a collection of one or more <bpt id="p1">[</bpt>MENUITEMTEMPLATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647581)</ept> structures, each of which may contain one or more menu items and pop-up menus.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>The version number should be 0.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>mtOption<ept id="p1">**</ept> flags should include <bpt id="p2">**</bpt>MF_END<ept id="p2">**</ept> for the last item in a pop-up list and for the last item in the main list.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`AppendMenu`</ph> member function for other flags.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>mtId<ept id="p1">**</ept> member must be omitted from the <bpt id="p2">**</bpt>MENUITEMTEMPLATE<ept id="p2">**</ept> structure when <bpt id="p3">**</bpt>MF_POPUP<ept id="p3">**</ept> is specified in <bpt id="p4">**</bpt>mtOption<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>The space allocated for the <bpt id="p1">**</bpt>MENUITEMTEMPLATE<ept id="p1">**</ept> structure must be large enough for <bpt id="p2">**</bpt>mtString<ept id="p2">**</ept> to contain the name of the menu item as a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Before exiting, an application must free system resources associated with a menu if the menu is not assigned to a window.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>An application frees a menu by calling the <bpt id="p1">[</bpt>DestroyMenu<ept id="p1">](#cmenu__destroymenu)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#30<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_10.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__m_hmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::m_hMenu</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`HMENU`</ph> handle of the Windows menu attached to the <ph id="ph2">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::LoadMenu<ept id="p1">](#cmenu__loadmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__measureitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::MeasureItem</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Called by the framework when a menu with the owner-draw style is created.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`MEASUREITEMSTRUCT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>By default, this member function does nothing.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Override this member function and fill in the <ph id="ph1">`MEASUREITEMSTRUCT`</ph> structure to inform Windows of the menu's dimensions.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWnd::OnMeasureItem<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem)</ept> for a description of the <ph id="ph1">`MEASUREITEMSTRUCT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>The following code is from the MFC <bpt id="p1">[</bpt>CTRLTEST<ept id="p1">](../../visual-cpp-samples.md)</ept> sample:</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#31<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_11.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__modifymenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::ModifyMenu</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Changes an existing menu item at the position specified by <ph id="ph1">`nPosition`</ph>.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Specifies the menu item to be changed.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter can be used to interpret <ph id="ph2">`nPosition`</ph> in the following ways:</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>nFlags</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Interpretation of nPosition</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the command ID of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>This is the default if neither <bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> nor <bpt id="p2">**</bpt>MF_BYPOSITION<ept id="p2">**</ept> is set.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the position of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>The first item is at position 0.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Specifies how <ph id="ph1">`nPosition`</ph> is interpreted and gives information about the changes to be made to the menu item.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>For a list of flags that may be set, see the <bpt id="p1">[</bpt>AppendMenu<ept id="p1">](#cmenu__appendmenu)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Specifies either the command ID of the modified menu item or, if <ph id="ph1">`nFlags`</ph> is set to <bpt id="p1">**</bpt>MF_POPUP<ept id="p1">**</ept>, the menu handle ( <ph id="ph2">`HMENU`</ph>) of a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nIDNewItem`</ph> parameter is ignored (not needed) if <ph id="ph2">`nFlags`</ph> is set to <bpt id="p1">**</bpt>MF_SEPARATOR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Specifies the content of the new menu item.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter can be used to interpret <ph id="ph2">`lpszNewItem`</ph> in the following ways:</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>nFlags</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Interpretation of lpszNewItem</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Contains an application-supplied 32-bit value that the application can use to maintain additional data associated with the menu item.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>This 32-bit value is available to the application when it processes <bpt id="p1">**</bpt>MF_MEASUREITEM<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MF_DRAWITEM<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_STRING<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Contains a long pointer to a null-terminated string or to a <ph id="ph1">`CString`</ph>.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_SEPARATOR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszNewItem`</ph> parameter is ignored (not needed).</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pBmp<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CBitmap`</ph> object that will be used as the menu item.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>The application specifies the new state of the menu item by setting values in <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>If this function replaces a pop-up menu associated with the menu item, it destroys the old pop-up menu and frees the memory used by the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`nIDNewItem`</ph> specifies a pop-up menu, it becomes part of the menu in which it is inserted.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>If that menu is destroyed, the inserted menu will also be destroyed.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>An inserted menu should be detached from a <ph id="ph1">`CMenu`</ph> object to avoid conflict.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call <ph id="ph1">`CWnd::DrawMenuBar`</ph>.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>To change the attributes of existing menu items, it is much faster to use the <ph id="ph1">`CheckMenuItem`</ph> and <ph id="ph2">`EnableMenuItem`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::InsertMenu<ept id="p1">](#cmenu__insertmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__operator_hmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::operator HMENU</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Use this operator to retrieve the handle of the <ph id="ph1">`CMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>If successful, the handle of the <ph id="ph1">`CMenu`</ph> object; otherwise, <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>You can use the handle to call Windows APIs directly.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__operator__neq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::operator !=</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Determines if two menus are logically not equal.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CMenu`</ph> object for comparison.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Tests if a menu object on the left side is not equal to a menu object on the right side.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__operator__eq_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::operator ==</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Determines if two menus are logically equal.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CMenu`</ph> object for comparison.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Tests if a menu object on the left side is equal (in terms of the <ph id="ph1">`HMENU`</ph> value) to a menu object on the right side.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__removemenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::RemoveMenu</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Deletes a menu item with an associated pop-up menu from the menu.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Specifies the menu item to be removed.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter can be used to interpret <ph id="ph2">`nPosition`</ph> in the following ways:</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>nFlags</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Interpretation of nPosition</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the command ID of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>This is the default if neither <bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> nor <bpt id="p2">**</bpt>MF_BYPOSITION<ept id="p2">**</ept> is set.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the position of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>The first item is at position 0.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Specifies how <ph id="ph1">`nPosition`</ph> is interpreted.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>It does not destroy the handle for a pop-up menu, so the menu can be reused.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Before calling this function, the application may call the <ph id="ph1">`GetSubMenu`</ph> member function to retrieve the pop-up <ph id="ph2">`CMenu`</ph> object for reuse.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application must call <ph id="ph1">`CWnd::DrawMenuBar`</ph>.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::InsertMenu<ept id="p1">](#cmenu__insertmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__setdefaultitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::SetDefaultItem</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Sets the default menu item for the specified menu.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Identifier or position of the new default menu item or - 1 for no default item.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>The meaning of this parameter depends on the value of <ph id="ph1">`fByPos`</ph>.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>Value specifying the meaning of <ph id="ph1">`uItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, <ph id="ph1">`uItem`</ph> is a menu item identifier.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Otherwise, it is a menu item position.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is nonzero.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is zero.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>To get extended error information, use the Win32 function <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 function <bpt id="p1">[</bpt>SetMenuDefaultItem<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647996)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::InsertMenu<ept id="p1">](#cmenu__insertmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__setmenucontexthelpid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::SetMenuContextHelpId</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Associates a context help ID with <ph id="ph1">`CMenu`</ph>.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Context help ID to associate with <ph id="ph1">`CMenu`</ph>.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>All items in the menu share this identifier — it is not possible to attach a help context identifier to the individual menu items.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::InsertMenu<ept id="p1">](#cmenu__insertmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__setmenuinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::SetMenuInfo</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Sets information for a menu.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>MENUINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647575)</ept> structure containing information for the menu.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is nonzero; otherwise, the return value is zero.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Call this function to set specific information about the menu.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__setmenuitembitmaps"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::SetMenuItemBitmaps</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Associates the specified bitmaps with a menu item.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Specifies the menu item to be changed.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter can be used to interpret <ph id="ph2">`nPosition`</ph> in the following ways:</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>nFlags</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Interpretation of nPosition</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the command ID of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>This is the default if neither <bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> nor <bpt id="p2">**</bpt>MF_BYPOSITION<ept id="p2">**</ept> is set.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter gives the position of the existing menu item.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>The first item is at position 0.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Specifies how <ph id="ph1">`nPosition`</ph> is interpreted.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Specifies the bitmap to use for menu items that are not checked.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Specifies the bitmap to use for menu items that are checked.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Whether the menu item is checked or unchecked, Windows displays the appropriate bitmap next to the menu item.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>If either <ph id="ph1">`pBmpUnchecked`</ph> or <ph id="ph2">`pBmpChecked`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, then Windows displays nothing next to the menu item for the corresponding attribute.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>If both parameters are <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, Windows uses the default check mark when the item is checked and removes the check mark when the item is unchecked.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>When the menu is destroyed, these bitmaps are not destroyed; the application must destroy them.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>The Windows <bpt id="p1">**</bpt>GetMenuCheckMarkDimensions<ept id="p1">**</ept> function retrieves the dimensions of the default check mark used for menu items.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>The application uses these values to determine the appropriate size for the bitmaps supplied with this function.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Get the size, create your bitmaps, and then set them.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#32<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_12.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#33<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_13.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__setmenuiteminfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::SetMenuItemInfo</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>Changes information about a menu item.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>See description of <ph id="ph1">`uItem`</ph> in <bpt id="p1">[</bpt>SetMenuItemInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms648001)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>See description of <ph id="ph1">`lpmii`</ph> in <bpt id="p1">**</bpt>SetMenuItemInfo<ept id="p1">**</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>See description of <ph id="ph1">`fByPosition`</ph> in <bpt id="p1">**</bpt>SetMenuItemInfo<ept id="p1">**</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>This function wraps <bpt id="p1">[</bpt>SetMenuItemInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms648001)</ept>, described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__trackpopupmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::TrackPopupMenu</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>Specifies screen-position and mouse-position flags.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>TrackPopupMenu<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms648002)</ept> for a list of available flags.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Specifies the horizontal position in screen coordinates of the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Depending on the value of the <ph id="ph1">`nFlags`</ph> parameter, the menu can be left-aligned, right-aligned, or centered relative to this position.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>Specifies the vertical position in screen coordinates of the top of the menu on the screen.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Identifies the window that owns the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>This parameter cannot be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, even if the <bpt id="p2">**</bpt>TPM_NONOTIFY<ept id="p2">**</ept> flag is specified.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>This window receives all <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> messages from the menu.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>In Windows versions 3.1 and later, the window does not receive <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> messages until <ph id="ph1">`TrackPopupMenu`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>In Windows 3.0, the window receives <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> messages before <ph id="ph1">`TrackPopupMenu`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>This method returns the result of calling <bpt id="p1">[</bpt>TrackPopupMenu<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms648002)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>A floating pop-up menu can appear anywhere on the screen.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#34<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmenu-class_14.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmenu__trackpopupmenuex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMenu::TrackPopupMenuEx</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Specifies various functions for the extended menu.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>For a listing of all values and their meaning, see <bpt id="p1">[</bpt>TrackPopupMenuEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms648003)</ept>.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Specifies the horizontal position in screen coordinates of the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Specifies the vertical position in screen coordinates of the top of the menu on the screen.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>A pointer to the window owning the pop-up menu and receiving the messages from the created menu.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>This window can be any window from the current application but cannot be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>TPM_NONOTIFY<ept id="p1">**</ept> in the <ph id="ph1">`fuFlags`</ph> parameter, the function does not send any messages to <ph id="ph2">`pWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>The function must return for the window pointed to by <ph id="ph1">`pWnd`</ph> to receive the <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lptpm<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>TPMPARAMS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647586)</ept> structure that specifies an area of the screen the menu should not overlap.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>TPM_RETURNCMD<ept id="p1">**</ept> in the <ph id="ph1">`fuFlags`</ph> parameter, the return value is the menu-item identifier of the item that the user selected.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>If the user cancels the menu without making a selection, or if an error occurs, then the return value is 0.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>TPM_RETURNCMD<ept id="p1">**</ept> in the <ph id="ph1">`fuFlags`</ph> parameter, the return value is nonzero if the function succeeds and 0 if it fails.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>To get extended error information, call <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>A floating pop-up menu can appear anywhere on the screen.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>For more information on handling errors when creating the pop-up menu, see <bpt id="p1">[</bpt>TrackPopupMenuEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms648003)</ept>.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFC Sample CTRLTEST<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MFC Sample DYNAMENU<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CObject Class<ept id="p1">](../../mfc/reference/cobject-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CObject Class<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>