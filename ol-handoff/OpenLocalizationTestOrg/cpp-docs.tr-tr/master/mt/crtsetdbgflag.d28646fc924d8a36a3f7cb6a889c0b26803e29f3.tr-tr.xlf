<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ebf26cde165dcd82a19e6dbe258785c8ec34852</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\crtsetdbgflag.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11edb91ae366ee21c97a2787ed27b2fa31a44195</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e5308cd88d7e0e1d9ee4c4347ad1bb7e7eec707</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_CrtSetDbgFlag | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_CrtSetDbgFlag</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Retrieves or modifies the state of the <bpt id="p1">**</bpt>_crtDbgFlag<ept id="p1">**</ept> flag to control the allocation behavior of the debug heap manager (debug version only).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>New state for <bpt id="p1">**</bpt>_crtDbgFlag<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Returns the previous state of <bpt id="p1">**</bpt>_crtDbgFlag<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_CrtSetDbgFlag`</ph> function allows the application to control how the debug heap manager tracks memory allocations by modifying the bit fields of the <bpt id="p1">**</bpt>_crtDbgFlag<ept id="p1">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By setting the bits (turning on), the application can instruct the debug heap manager to perform special debugging operations, including checking for memory leaks when the application exits and reporting if any are found, simulating low-memory conditions by specifying that freed memory blocks should remain in the heap's linked list, and verifying the integrity of the heap by inspecting each memory block at every allocation request.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">[</bpt>_DEBUG<ept id="p1">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id="ph1">`_CrtSetDbgFlag`</ph> are removed during preprocessing.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following table lists the bit fields for <bpt id="p1">**</bpt>_crtDbgFlag<ept id="p1">**</ept> and describes their behavior.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because setting the bits results in increased diagnostic output and reduced program execution speed, these bits are not set (turned off) by default.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about these bit fields, see <bpt id="p1">[</bpt>Heap State Reporting Functions<ept id="p1">](/visualstudio/debugger/crt-debug-heap-details)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Bit field</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Default</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_CRTDBG_ALLOC_MEM_DF<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>ON</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>ON: Enable debug heap allocations and use of memory block type identifiers, such as <ph id="ph1">`_CLIENT_BLOCK`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>OFF: Add new allocations to heap's linked list, but set block type to <bpt id="p1">**</bpt>_IGNORE_BLOCK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Can also be combined with any of the heap-frequency check macros.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_CRTDBG_CHECK_ALWAYS_DF<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>OFF</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>ON: Call <bpt id="p1">[</bpt>_CrtCheckMemory<ept id="p1">](../../c-runtime-library/reference/crtcheckmemory.md)</ept> at every allocation and deallocation request.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>OFF: <ph id="ph1">`_CrtCheckMemory`</ph> must be called explicitly.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Heap-frequency check macros have no effect when this flag is set.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>OFF</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>ON: Include <ph id="ph1">`_CRT_BLOCK`</ph> types in leak detection and memory state difference operations.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>OFF: Memory used internally by the run-time library is ignored by these operations.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Can also be combined with any of the heap-frequency check macros.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_CRTDBG_DELAY_FREE_MEM_DF<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>OFF</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>ON: Keep freed memory blocks in the heap's linked list, assign them the <bpt id="p1">**</bpt>_FREE_BLOCK<ept id="p1">**</ept> type, and fill them with the byte value 0xDD.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>OFF: Do not keep freed blocks in the heap's linked list.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Can also be combined with any of the heap-frequency check macros.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>OFF</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>ON: Perform automatic leak checking at program exit through a call to <bpt id="p1">[</bpt>_CrtDumpMemoryLeaks<ept id="p1">](../../c-runtime-library/reference/crtdumpmemoryleaks.md)</ept> and generate an error report if the application failed to free all the memory it allocated.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>OFF: Do not automatically perform leak checking at program exit.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Can also be combined with any of the heap-frequency check macros.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Heap-Check Frequency Macros<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can specify how often the C run-time library performs validation of the debug heap (<ph id="ph1">`_CrtCheckMemory`</ph>) based on the number of calls to <ph id="ph2">`malloc`</ph>, <ph id="ph3">`realloc`</ph>, <bpt id="p1">**</bpt>free<ept id="p1">**</ept>, and <ph id="ph4">`_msize`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_CrtSetDbgFlag`</ph> then inspects the upper 16 bits of the <ph id="ph2">`newFlag`</ph> parameter for a value.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The value specified is the number of <ph id="ph1">`malloc`</ph>, <ph id="ph2">`realloc`</ph>, <bpt id="p1">**</bpt>free<ept id="p1">**</ept>, and <ph id="ph3">`_msize`</ph> calls between <ph id="ph4">`_CrtCheckMemory`</ph> calls.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Four predefined macros are provided for this purpose.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Macro</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Number of malloc, realloc, free, and _msize calls between calls to _CrtCheckMemory</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>_CRTDBG_CHECK_EVERY_16_DF</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>16</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>_CRTDBG_CHECK_EVERY_128_DF</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>128</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>_CRTDBG_CHECK_EVERY_1024_DF</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>1024</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>_CRTDBG_CHECK_DEFAULT_DF</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>0 (by default, no heap checks)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`_CrtCheckMemory`</ph> is called once every 1,024 times you call <ph id="ph2">`malloc`</ph>, <ph id="ph3">`realloc`</ph>, <bpt id="p1">**</bpt>free<ept id="p1">**</ept>, and <ph id="ph4">`_msize`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, you could specify a heap check every 16 <ph id="ph1">`malloc`</ph>, <ph id="ph2">`realloc`</ph>, <bpt id="p1">**</bpt>free<ept id="p1">**</ept>, and <ph id="ph3">`_msize`</ph> operations with the following code:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The upper 16 bits of the <ph id="ph1">`newFlag`</ph> parameter are ignored when _CRTDBG_CHECK_ALWAYS_DF is specified.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`_CrtCheckMemory`</ph> is called each time you call <ph id="ph2">`malloc`</ph>, <ph id="ph3">`realloc`</ph>, <bpt id="p1">**</bpt>free<ept id="p1">**</ept>, and <ph id="ph4">`_msize`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`newFlag`</ph> is the new state to apply to the <bpt id="p1">**</bpt>_crtDbgFlag<ept id="p1">**</ept> and is a combination of the values for each of the bit fields.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To change one or more of these bit fields and create a new state for the flag</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`_CrtSetDbgFlag`</ph> with <ph id="ph2">`newFlag`</ph> equal to <ph id="ph3">`_CRTDBG_REPORT_FLAG`</ph> to obtain the current <bpt id="p1">**</bpt>_crtDbgFlag<ept id="p1">**</ept> state and store the returned value in a temporary variable.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Turn on any bits by <ph id="ph1">`OR`</ph>-ing the temporary variable with the corresponding bitmasks (represented in the application code by manifest constants).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Turn off the other bits by <bpt id="p1">**</bpt>AND<ept id="p1">**</ept>-ing the variable with a bitwise <bpt id="p2">**</bpt>NOT<ept id="p2">**</ept> of the appropriate bitmasks.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`_CrtSetDbgFlag`</ph> with <ph id="ph2">`newFlag`</ph> equal to the value stored in the temporary variable to set the new state for <bpt id="p1">**</bpt>_crtDbgFlag<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following code demonstrates how to simulate low-memory conditions by keeping freed memory blocks in the heap's linked list and prevent <ph id="ph1">`_CrtCheckMemory`</ph> from being called at every allocation request:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For an overview of memory management and the debug heap, see <bpt id="p1">[</bpt>CRT Debug Heap Details<ept id="p1">](/visualstudio/debugger/crt-debug-heap-details)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To disable a flag with the <ph id="ph1">`_CrtSetDbgFlag`</ph> function, you should <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> the variable with the bitwise <bpt id="p2">**</bpt>NOT<ept id="p2">**</ept> of the bitmask.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`newFlag`</ph> is not a valid value, this function invokes the invalid parameter handler, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, this function sets <ph id="ph1">`errno`</ph> to <ph id="ph2">`EINVAL`</ph> and returns the previous state of <ph id="ph3">`_crtDbgFlag`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Debug versions of <bpt id="p1">[</bpt>C run-time libraries<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept> only.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debug Routines<ept id="p1">](../../c-runtime-library/debug-routines.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_crtDbgFlag<ept id="p1">](../../c-runtime-library/crtdbgflag.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_CrtCheckMemory<ept id="p1">](../../c-runtime-library/reference/crtcheckmemory.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>