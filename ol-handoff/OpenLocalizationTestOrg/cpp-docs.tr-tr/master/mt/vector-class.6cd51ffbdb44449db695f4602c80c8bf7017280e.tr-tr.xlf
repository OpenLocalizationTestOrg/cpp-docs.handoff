<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b92f8769115310d6e767ce3a89a6f13aa104810</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\vector-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0572158e1c7d8559d906835f2666ad2300b2de9d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e61f6e488258040eadf403a00badc69520080298</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>vector Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>vector Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The STL vector class is a template class of sequence containers that arrange elements of a given type in a linear arrangement and allow fast random access to any element.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>They should be the preferred container for a sequence when random-access performance is at a premium.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Type<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The element data type to be stored in the vector</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The type that represents the stored allocator object that encapsulates details about the vector's allocation and deallocation of memory.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This argument is optional and the default value is <bpt id="p1">**</bpt>allocator<ept id="p1">**</ept><bpt id="p2">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;.<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Vectors allow constant time insertions and deletions at the end of the sequence.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Inserting or deleting elements in the middle of a vector requires linear time.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The performance of the <bpt id="p1">[</bpt>deque Class<ept id="p1">](../standard-library/deque-class.md)</ept> container is superior with respect to insertions and deletions at the beginning and end of a sequence.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>list Class<ept id="p1">](../standard-library/list-class.md)</ept> container is superior with respect to insertions and deletions at any location within a sequence.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Vector reallocation occurs when a member function must increase the sequence contained in the vector object beyond its current storage capacity.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Other insertions and erasures may alter various storage addresses within the sequence.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In all such cases, iterators or references that point at altered portions of the sequence become invalid.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If no reallocation happens, only iterators and references before the insertion/deletion point remain valid.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>vector<ph id="ph1">\&lt;</ph>bool&gt; Class<ept id="p1">](../standard-library/vector-bool-class.md)</ept> is a full specialization of the template class vector for elements of type bool with an allocator for the underlying type used by the specialization.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>vector<ph id="ph1">\&lt;</ph>bool&gt; reference Class<ept id="p1">](../standard-library/vector-bool-class.md#vector_lt_bool_gt___reference_class)</ept> is a nested class whose objects are able to provide references to elements (single bits) within a vector<ph id="ph2">\&lt;</ph>bool&gt; object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>vector<ept id="p1">](#vector__vector)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Constructs a vector of a specific size or with elements of a specific value or with a specific <ph id="ph1">`allocator`</ph> or as a copy of some other vector.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>allocator_type<ept id="p1">](#vector__allocator_type)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A type that represents the <ph id="ph1">`allocator`</ph> class for the vector object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const_iterator<ept id="p1">](#vector__const_iterator)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read a <ph id="ph1">`const`</ph> element in a vector.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const_pointer<ept id="p1">](#vector__const_pointer)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to a <ph id="ph1">`const`</ph> element in a vector.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const_reference<ept id="p1">](#vector__const_reference)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to a <ph id="ph1">`const`</ph> element stored in a vector for reading and performing <ph id="ph2">`const`</ph> operations.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const_reverse_iterator<ept id="p1">](#vector__const_reverse_iterator)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read any <ph id="ph1">`const`</ph> element in the vector.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>difference_type<ept id="p1">](#vector__difference_type)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A type that provides the difference between the addresses of two elements in a vector.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>iterator<ept id="p1">](#vector__iterator)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read or modify any element in a vector.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pointer<ept id="p1">](#vector__pointer)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to an element in a vector.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>reference<ept id="p1">](#vector__reference)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element stored in a vector.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>reverse_iterator<ept id="p1">](#vector__reverse_iterator)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read or modify any element in a reversed vector.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>size_type<ept id="p1">](#vector__size_type)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A type that counts the number of elements in a vector.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>value_type<ept id="p1">](#vector__value_type)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A type that represents the data type stored in a vector.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>assign<ept id="p1">](#vector__assign)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Erases a vector and copies the specified elements to the empty vector.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>at<ept id="p1">](#vector__at)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns a reference to the element at a specified location in the vector.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>back<ept id="p1">](#vector__back)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns a reference to the last element of the vector.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>begin<ept id="p1">](#vector__begin)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns a random-access iterator to the first element in the vector.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>capacity<ept id="p1">](#vector__capacity)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns the number of elements that the vector could contain without allocating more storage.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cbegin<ept id="p1">](#vector__cbegin)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Returns a random-access const iterator to the first element in the vector.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cend<ept id="p1">](#vector__cend)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns a random-access const iterator that points just beyond the end of the vector.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>crbegin<ept id="p1">](#vector__crbegin)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns a const iterator to the first element in a reversed vector.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>crend<ept id="p1">](#vector__crend)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns a const iterator to the end of a reversed vector.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>clear<ept id="p1">](#vector__clear)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Erases the elements of the vector.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>data<ept id="p1">](#vector__data)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the first element in the vector.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>emplace<ept id="p1">](#vector__emplace)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place into the vector at a specified position.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>emplace_back<ept id="p1">](#vector__emplace_back)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Adds an element constructed in place to the end of the vector.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>empty<ept id="p1">](#vector__empty)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Tests if the vector container is empty.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>end<ept id="p1">](#vector__end)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Returns a random-access iterator that points to the end of the vector.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>erase<ept id="p1">](#vector__erase)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Removes an element or a range of elements in a vector from specified positions.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>front<ept id="p1">](#vector__front)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Returns a reference to the first element in a vector.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>get_allocator<ept id="p1">](#vector__get_allocator)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Returns an object to the <ph id="ph1">`allocator`</ph> class used by a vector.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>insert<ept id="p1">](#vector__insert)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Inserts an element or a number of elements into the vector at a specified position.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>max_size<ept id="p1">](#vector__max_size)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns the maximum length of the vector.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pop_back<ept id="p1">](#vector__pop_back)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Deletes the element at the end of the vector.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>push_back<ept id="p1">](#vector__push_back)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Add an element to the end of the vector.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>rbegin<ept id="p1">](#vector__rbegin)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a reversed vector.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>rend<ept id="p1">](#vector__rend)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the end of a reversed vector.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>reserve<ept id="p1">](#vector__reserve)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Reserves a minimum length of storage for a vector object.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>resize<ept id="p1">](#vector__resize)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Specifies a new size for a vector.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>shrink_to_fit<ept id="p1">](#vector__shrink_to_fit)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Discards excess capacity.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>size<ept id="p1">](#vector__size)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the vector.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>swap<ept id="p1">](#vector__swap)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two vectors.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&amp;#91;&amp;#93;<ept id="p1">](#vector__operator_at)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Returns a reference to the vector element at a specified position.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator=<ept id="p1">](#vector__operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Replaces the elements of the vector with a copy of another vector.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>vector&gt;</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__allocator_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::allocator_type</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A type that represents the allocator class for the vector object.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`allocator_type`</ph> is a synonym for the template parameter <bpt id="p1">**</bpt>Allocator.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>get_allocator<ept id="p1">](#vector__get_allocator)</ept> for an example that uses <ph id="ph1">`allocator_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__assign"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::assign</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Erases a vector and copies the specified elements to the empty vector.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Position of the first element in the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Position of the first element beyond the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The number of copies of an element being inserted into the vector.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The value of the element being inserted into the vector.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The initializer_list containing the elements to insert.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>After erasing any existing elements in a vector, assign either inserts a specified range of elements from the original vector into a vector or inserts copies of a new element of a specified value into a vector.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__at"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::at</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Returns a reference to the element at a specified location in the vector.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The subscript or position number of the element to reference in the vector.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A reference to the element subscripted in the argument.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Off`</ph> is greater than the size of the vector, <bpt id="p1">**</bpt>at<ept id="p1">**</ept> throws an exception.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>at<ept id="p1">**</ept> is assigned to a <ph id="ph1">`const_reference`</ph>, the vector object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>at<ept id="p1">**</ept> is assigned to a <bpt id="p2">**</bpt>reference<ept id="p2">**</ept>, the vector object can be modified.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__back"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::back</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Returns a reference to the last element of the vector.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The last element of the vector.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If the vector is empty, the return value is undefined.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>back<ept id="p1">**</ept> is assigned to a <ph id="ph1">`const_reference`</ph>, the vector object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>back<ept id="p1">**</ept> is assigned to a <bpt id="p2">**</bpt>reference<ept id="p2">**</ept>, the vector object can be modified.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element in an empty vector.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__begin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::begin</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Returns a random-access iterator to the first element in the vector.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A random-access iterator addressing the first element in the <ph id="ph1">`vector`</ph> or to the location succeeding an empty <ph id="ph2">`vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>You should always compare the value returned with <bpt id="p1">[</bpt>vector::end<ept id="p1">](#vector__end)</ept> to ensure it is valid.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`begin`</ph> is assigned to a <bpt id="p1">[</bpt>vector::const_iterator<ept id="p1">](#vector__const_iterator)</ept>, the <ph id="ph2">`vector`</ph> object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`begin`</ph> is assigned to an <bpt id="p1">[</bpt>vector::iterator<ept id="p1">](#vector__iterator)</ept>, the <ph id="ph2">`vector`</ph> object can be modified.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__capacity"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::capacity</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Returns the number of elements that the vector could contain without allocating more storage.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The current length of storage allocated for the vector.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The member function <bpt id="p1">[</bpt>resize<ept id="p1">](#vector__resize)</ept> will be more efficient if sufficient memory is allocated to accommodate it.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Use the member function <bpt id="p1">[</bpt>reserve<ept id="p1">](#vector__reserve)</ept> to specify the amount of memory allocated.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__cbegin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::cbegin</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`const`</ph> iterator that addresses the first element in the range.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> random-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, <ph id="ph2">`cbegin() == cend()`</ph>).</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`cbegin`</ph>, the elements in the range cannot be modified.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>You can use this member function in place of the <ph id="ph1">`begin()`</ph> member function to guarantee that the return value is <ph id="ph2">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Typically, it's used in conjunction with the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In the example, consider <ph id="ph1">`Container`</ph> to be a modifiable (non- <ph id="ph2">`const`</ph>) container of any kind that supports <ph id="ph3">`begin()`</ph> and <ph id="ph4">`cbegin()`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__cend"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::cend</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`const`</ph> iterator that addresses the location just beyond the last element in a range.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> random-access iterator that points just beyond the end of the range.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`cend`</ph> is used to test whether an iterator has passed the end of its range.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>You can use this member function in place of the <ph id="ph1">`end()`</ph> member function to guarantee that the return value is <ph id="ph2">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Typically, it's used in conjunction with the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>In the example, consider <ph id="ph1">`Container`</ph> to be a modifiable (non- <ph id="ph2">`const`</ph>) container of any kind that supports <ph id="ph3">`end()`</ph> and <ph id="ph4">`cend()`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`cend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__clear"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::clear</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Erases the elements of the vector.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__const_iterator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::const_iterator</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in a vector.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_iterator`</ph> cannot be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>back<ept id="p1">](#vector__back)</ept> for an example that uses <ph id="ph1">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__const_pointer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::const_pointer</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in a vector.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_pointer`</ph> cannot be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>iterator<ept id="p1">](#vector__iterator)</ept> is more commonly used to access a vector element.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__const_reference"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::const_reference</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element stored in a vector for reading and performing <bpt id="p2">**</bpt>const<ept id="p2">**</ept> operations.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_reference`</ph> cannot be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__const_reverse_iterator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::const_reverse_iterator</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read any <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in the vector.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_reverse_iterator`</ph> cannot modify the value of an element and is used to iterate through the vector in reverse.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>rbegin<ept id="p1">](#vector__rbegin)</ept> for an example of how to declare and use an iterator.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__crbegin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::crbegin</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Returns a const iterator to the first element in a reversed vector.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A const reverse random-access iterator addressing the first element in a reversed <bpt id="p1">[</bpt>vector<ept id="p1">](../standard-library/vector-class.md)</ept> or addressing what had been the last element in the unreversed <ph id="ph1">`vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`crbegin`</ph>, the <ph id="ph2">`vector`</ph> object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__crend"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::crend</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the location succeeding the last element in a reversed vector.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A const reverse random-access iterator that addresses the location succeeding the last element in a reversed <bpt id="p1">[</bpt>vector<ept id="p1">](../standard-library/vector-class.md)</ept> (the location that had preceded the first element in the unreversed <ph id="ph1">`vector`</ph>).</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`crend`</ph> is used with a reversed <ph id="ph2">`vector`</ph> just as <bpt id="p1">[</bpt>vector::cend<ept id="p1">](#vector__cend)</ept> is used with a <ph id="ph3">`vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`crend`</ph> (suitably decremented), the <ph id="ph2">`vector`</ph> object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`crend`</ph> can be used to test to whether a reverse iterator has reached the end of its <ph id="ph2">`vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`crend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__data"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::data</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the first element in the vector.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A pointer to the first element in the <bpt id="p1">[</bpt>vector<ept id="p1">](../standard-library/vector-class.md)</ept> or to the location succeeding an empty <ph id="ph1">`vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__difference_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::difference_type</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A type that provides the difference between two iterators that refer to elements within the same vector.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`difference_type`</ph> can also be described as the number of elements between two pointers, because a pointer to an element contains its address.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>iterator<ept id="p1">](#vector__iterator)</ept> is more commonly used to access a vector element.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__emplace"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::emplace</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place into the vector at a specified position.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The position in the <bpt id="p1">[</bpt>vector<ept id="p1">](../standard-library/vector-class.md)</ept> where the first element is inserted.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The value of the element being inserted into the <ph id="ph1">`vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The function returns an iterator that points to the position where the new element was inserted into the <ph id="ph1">`vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Any insertion operation can be expensive, see <bpt id="p1">[</bpt>vector Class<ept id="p1">](../standard-library/vector-class.md)</ept> for a discussion of <ph id="ph1">`vector`</ph> performance.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__emplace_back"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::emplace_back</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Adds an element constructed in place to the end of the vector.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Constructor arguments.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The function infers which constructor overload to invoke based on the arguments provided.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__empty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::empty</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Tests if the vector is empty.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the vector is empty; <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if the vector is not empty.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__end"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::end</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Returns the past-the-end iterator.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The past-the-end iterator for the vector.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>If the vector is empty, <ph id="ph1">`vector::end() == vector::begin()`</ph>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>end<ept id="p1">**</ept> is assigned to a variable of type <ph id="ph1">`const_iterator`</ph>, the vector object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>end<ept id="p1">**</ept> is assigned to a variable of type <bpt id="p2">**</bpt>iterator<ept id="p2">**</ept>, the vector object can be modified.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__erase"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::erase</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Removes an element or a range of elements in a vector from specified positions.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Position of the element to be removed from the vector.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Position of the first element removed from the vector.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Position just beyond the last element removed from the vector.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>An iterator that designates the first element remaining beyond any elements removed, or a pointer to the end of the vector if no such element exists.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__front"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::front</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Returns a reference to the first element in a vector.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>A reference to the first element in the vector object.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>If the vector is empty, the return is undefined.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`front`</ph> is assigned to a <ph id="ph2">`const_reference`</ph>, the vector object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`front`</ph> is assigned to a <bpt id="p1">**</bpt>reference<ept id="p1">**</ept>, the vector object can be modified.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element in an empty vector.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__get_allocator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::get_allocator</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Returns a copy of the allocator object used to construct the vector.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The allocator used by the vector.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Allocators for the vector class specify how the class manages storage.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The default allocators supplied with STL container classes are sufficient for most programming needs.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Writing and using your own allocator class is an advanced C++ topic.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__insert"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::insert</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Inserts an element or a number of elements or a range of elements into the vector at a specified position.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The position in the vector where the first element is inserted.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The value of the element being inserted into the vector.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The number of elements being inserted into the vector.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The position of the first element in the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The position of the first element beyond the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The first two <ph id="ph1">`insert`</ph> functions return an iterator that points to the position where the new element was inserted into the vector.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Any insertion operation can be expensive, see <bpt id="p1">[</bpt>vector Class<ept id="p1">](../standard-library/vector-class.md)</ept> for a discussion of <ph id="ph1">`vector`</ph> performance.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__iterator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::iterator</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read or modify any element in a vector.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>A type <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept> can be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>begin<ept id="p1">](#vector__begin)</ept>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__max_size"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::max_size</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Returns the maximum length of the vector.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The maximum possible length of the vector.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__operator_at"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::operator[]</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Returns a reference to the vector element at a specified position.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The position of the vector element.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>If the position specified is greater than or equal to the size of the container, the result is undefined.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`operator[]`</ph> is assigned to a <ph id="ph2">`const_reference`</ph>, the vector object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`operator[]`</ph> is assigned to a reference, the vector object can be modified.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>When compiling with _SECURE_SCL 1 (controlled with <bpt id="p1">[</bpt>_ITERATOR_DEBUG_LEVEL<ept id="p1">](../standard-library/iterator-debug-level.md)</ept>), a runtime error will occur if you attempt to access an element outside the bounds of the vector.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::operator=</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Replaces the elements of the vector with a copy of another vector.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>vector<ept id="p1">](../standard-library/vector-class.md)</ept> being copied into the <ph id="ph1">`vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>After erasing any existing elements in a <ph id="ph1">`vector`</ph>, <ph id="ph2">`operator=`</ph> either copies or moves the contents of <ph id="ph3">` right`</ph> into the <ph id="ph4">`vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__pointer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::pointer</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to an element in a vector.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>A type <bpt id="p1">**</bpt>pointer<ept id="p1">**</ept> can be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__pop_back"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::pop_back</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Deletes the element at the end of the vector.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>For a code example, see <bpt id="p1">[</bpt>vector::push_back()<ept id="p1">](#vector__push_back)</ept>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__push_back"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::push_back</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Adds an element to the end of the vector.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The value to assign to the element added to the end of the vector.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__rbegin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::rbegin</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a reversed vector.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>A reverse random-access iterator addressing the first element in a reversed vector or addressing what had been the last element in the unreversed vector.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rbegin`</ph> is assigned to a <ph id="ph2">`const_reverse_iterator`</ph>, the vector object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rbegin`</ph> is assigned to a <ph id="ph2">`reverse_iterator`</ph>, the vector object can be modified.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__reference"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::reference</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element stored in a vector.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>at<ept id="p1">](#vector__at)</ept> for an example of how to use <bpt id="p2">**</bpt>reference<ept id="p2">**</ept> in the vector class.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__rend"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::rend</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Returns an iterator that addresses the location succeeding the last element in a reversed vector.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>A reverse random-access iterator that addresses the location succeeding the last element in a reversed vector (the location that had preceded the first element in the unreversed vector).</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`rend`</ph> is used with a reversed vector just as <bpt id="p1">[</bpt>end<ept id="p1">](#vector__end)</ept> is used with a vector.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rend`</ph> is assigned to a <ph id="ph2">`const_reverse_iterator`</ph>, then the vector object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rend`</ph> is assigned to a <ph id="ph2">`reverse_iterator`</ph>, then the vector object can be modified.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`rend`</ph> can be used to test to whether a reverse iterator has reached the end of its vector.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`rend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__reserve"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::reserve</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Reserves a minimum length of storage for a vector object, allocating space if necessary.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The minimum length of storage to be allocated for the vector.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__resize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::resize</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Specifies a new size for a vector.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The new size of the vector.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The initialization value of new elements added to the vector if the new size is larger that the original size.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>If the value is omitted, the new objects use their default constructor.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>If the container's size is less than the requested size, <ph id="ph1">`Newsize`</ph>, elements are added to the vector until it reaches the requested size.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>If the container's size is larger than the requested size, the elements closest to the end of the container are deleted until the container reaches the size <ph id="ph1">`Newsize`</ph>.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>If the present size of the container is the same as the requested size, no action is taken.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>size<ept id="p1">](#vector__size)</ept> reflects the current size of the vector.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__reverse_iterator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::reverse_iterator</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read or modify any element in a reversed vector.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`reverse_iterator`</ph> is used to iterate through the vector in reverse.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>rbegin<ept id="p1">](#vector__rbegin)</ept>.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__shrink_to_fit"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::shrink_to_fit</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Discards excess capacity.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__size"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::size</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the vector.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The current length of the vector.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__size_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::size_type</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>A type that counts the number of elements in a vector.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>capacity<ept id="p1">](#vector__capacity)</ept>.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__swap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::swap</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two vectors.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>A vector providing the elements to be swapped, or a vector whose elements are to be exchanged with those of the vector <ph id="ph1">` left`</ph>.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>A vector whose elements are to be exchanged with those of the vector <ph id="ph1">` right`</ph>.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__value_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::value_type</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>A type that represents the data type stored in a vector.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`value_type`</ph> is a synonym for the template parameter <bpt id="p1">**</bpt>Type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vector__vector"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  vector::vector</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Constructs a vector of a specific size or with elements of a specific value or with a specific allocator or as a copy of all or part of some other vector.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The allocator class to use with this object.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>get_allocator<ept id="p1">](#vector__get_allocator)</ept> returns the allocator class for the object.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The number of elements in the constructed vector.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>The value of the elements in the constructed vector.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The vector of which the constructed vector is to be a copy.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Position of the first element in the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Position of the first element beyond the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>The initializer_list containing the elmeents to copy.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>All constructors store an allocator object ( <ph id="ph1">`Al`</ph>) and initialize the vector.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The first two constructors specify an empty initial vector.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>The second explicitly specifies the allocator type ( <ph id="ph1">`Al`</ph>) to be used.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>The third constructor specifies a repetition of a specified number ( <ph id="ph1">`Count`</ph>) of elements of the default value for class <ph id="ph2">`Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The fourth and fifth constructors specify a repetition of ( <ph id="ph1">`Count`</ph>) elements of value <ph id="ph2">`Val`</ph>.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>The sixth constructor specifies a copy of the vector <ph id="ph1">`Right`</ph>.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The seventh constructor moves the vector <ph id="ph1">`Right`</ph>.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>The eighth constructor uses an initializer_list to specify the elements.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>The ninth and tenth constructors copy the range [ <ph id="ph1">`First`</ph>, <ph id="ph2">`Last`</ph>) of a vector.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C++ Standard Library Reference<ept id="p1">](../standard-library/cpp-standard-library-reference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>