<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">582daa56734fdcb2ed90702e4410349ac8d0ff22</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\exception-typedefs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">31c18b306f266765f8d9b910c0b06f4dfb437f39</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7182f219b505561cb2bfbbbac0f89b8424c9d86a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>exception<ph id="ph2">&amp;gt;</ph> typedefs | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>exception<ph id="ph2">&amp;gt;</ph> typedefs</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>exception_ptr<ept id="p1">](#exception_ptr)</ept></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>terminate_handler<ept id="p1">](#terminate_handler)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unexpected_handler<ept id="p1">](#unexpected_handler)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="exception_ptr"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  exception_ptr</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A type that describes a pointer to an exception.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An unspecified internal class that is used to implement the <ph id="ph1">`exception_ptr`</ph> type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Use an <ph id="ph1">`exception_ptr`</ph> object to reference the current exception or an instance of a user-specified exception.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the Microsoft implementation, an exception is represented by an <bpt id="p1">[</bpt>EXCEPTION_RECORD<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa363082)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`exception_ptr`</ph> object includes an exception reference field that points to a copy of the <ph id="ph2">`EXCEPTION_RECORD`</ph> structure that represents the exception.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you declare an <ph id="ph1">`exception_ptr`</ph> variable, the variable is not associated with any exception.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>That is, its exception reference field is NULL.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Such an <ph id="ph1">`exception_ptr`</ph> object is called a <bpt id="p1">*</bpt>null exception_ptr<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`current_exception`</ph> or <ph id="ph2">`make_exception_ptr`</ph> function to assign an exception to an <ph id="ph3">`exception_ptr`</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When you assign an exception to an <ph id="ph1">`exception_ptr`</ph> variable, the variable's exception reference field points to a copy of the exception.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If there is insufficient memory to copy the exception, the exception reference field points to a copy of a <bpt id="p1">[</bpt>std::bad_alloc<ept id="p1">](../standard-library/bad-alloc-class.md)</ept> exception.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`current_exception`</ph> or <ph id="ph2">`make_exception_ptr`</ph> function cannot copy the exception for any other reason, the function calls the <bpt id="p1">**</bpt>terminate<ept id="p1">**</ept> CRT function to exit the current process.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Despite its name, an <ph id="ph1">`exception_ptr`</ph> object is not itself a pointer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It does not obey pointer semantics and cannot be used with the pointer member access ( <ph id="ph1">`-&gt;`</ph>) or indirection (*) operators.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`exception_ptr`</ph> object has no public data members or member functions.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Comparisons:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can use the equal ( <ph id="ph1">`==`</ph>) and not-equal ( <ph id="ph2">`!=`</ph>) operators to compare two <ph id="ph3">`exception_ptr`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The operators do not compare the binary value (bit pattern) of the <ph id="ph1">`EXCEPTION_RECORD`</ph> structures that represent the exceptions.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Instead, the operators compare the addresses in the exception reference field of the <ph id="ph1">`exception_ptr`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Consequently, a null <ph id="ph1">`exception_ptr`</ph> and the NULL value compare as equal.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="terminate_handler"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  terminate_handler</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The type describes a pointer to a function suitable for use as a <ph id="ph1">`terminate_handler`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The type describes a pointer to a function suitable for use as a terminate handler.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>set_terminate<ept id="p1">](../standard-library/exception-functions.md#set_terminate)</ept> for an example of the use of <ph id="ph1">`terminate_handler`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="unexpected_handler"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  unexpected_handler</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The type describes a pointer to a function suitable for use as an <ph id="ph1">`unexpected_handler`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>set_unexpected<ept id="p1">](../standard-library/exception-functions.md#set_unexpected)</ept> for an example of the use of <ph id="ph1">`unexpected_handler`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>exception&gt;<ept id="p1">](../standard-library/exception.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>