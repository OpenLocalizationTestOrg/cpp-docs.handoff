<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">227a0aee69a7510f0f25069c6a08882205ab84ae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmfctoolbarmenubutton-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de980592da27fe6996a83ee356f61edc89895f16</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6547038f7d829c3a43aa229905fa4fb8f7cac24b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMFCToolBarMenuButton Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMFCToolBarMenuButton Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A toolbar button that contains a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::CMFCToolBarMenuButton<ept id="p1">](#cmfctoolbarmenubutton__cmfctoolbarmenubutton)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CMFCToolBarMenuButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::CompareWith<ept id="p1">](#cmfctoolbarmenubutton__comparewith)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Compares this instance with the provided <ph id="ph1">`CMFCToolBarButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::CompareWith<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__comparewith)</ept>.)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::CopyFrom<ept id="p1">](#cmfctoolbarmenubutton__copyfrom)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Copies the properties of another toolbar button to the current button.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::CopyFrom<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom)</ept>.)</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::CreateFromMenu<ept id="p1">](#cmfctoolbarmenubutton__createfrommenu)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes the toolbar menu from a Windows menu handle.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::CreateMenu<ept id="p1">](#cmfctoolbarmenubutton__createmenu)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates a Windows menu that consists of the commands in the toolbar menu.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns a handle to the Windows menu.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::CreatePopupMenu<ept id="p1">](#cmfctoolbarmenubutton__createpopupmenu)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Creates a pop-up menu object ( <bpt id="p1">[</bpt>CMFCPopupMenu Class<ept id="p1">](../../mfc/reference/cmfcpopupmenu-class.md)</ept>) to display the toolbar menu.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::EnableQuickCustomize<ept id="p1">](#cmfctoolbarmenubutton__enablequickcustomize)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::GetCommands<ept id="p1">](#cmfctoolbarmenubutton__getcommands)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gives read-only access to the list of commands in the toolbar menu.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::GetImageRect<ept id="p1">](#cmfctoolbarmenubutton__getimagerect)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle for the button image.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::GetPaletteRows<ept id="p1">](#cmfctoolbarmenubutton__getpaletterows)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns the number of rows in the pop-up menu when the menu is in palette mode.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::GetPopupMenu<ept id="p1">](#cmfctoolbarmenubutton__getpopupmenu)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the pop-up menu object that is associated with the button.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::HasButton<ept id="p1">](#cmfctoolbarmenubutton__hasbutton)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::HaveHotBorder<ept id="p1">](#cmfctoolbarmenubutton__havehotborder)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Determines whether a border of the button is displayed when a user selects the button.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::HaveHotBorder<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder)</ept>.)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::IsBorder<ept id="p1">](#cmfctoolbarmenubutton__isborder)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::IsClickedOnMenu<ept id="p1">](#cmfctoolbarmenubutton__isclickedonmenu)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::IsDroppedDown<ept id="p1">](#cmfctoolbarmenubutton__isdroppeddown)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Determines whether the pop-up menu is displayed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::IsEmptyMenuAllowed<ept id="p1">](#cmfctoolbarmenubutton__isemptymenuallowed)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine whether a user can open a submenu from the selected menu item.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::IsExclusive<ept id="p1">](#cmfctoolbarmenubutton__isexclusive)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Determines whether the button is in exclusive mode, that is, whether the pop-up menu remains open even when the user moves the pointer over another toolbar or button.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::IsMenuPaletteMode<ept id="p1">](#cmfctoolbarmenubutton__ismenupalettemode)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Determines whether the pop-up menu is in palette mode.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::IsQuickMode<ept id="p1">](#cmfctoolbarmenubutton__isquickmode)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::IsTearOffMenu<ept id="p1">](#cmfctoolbarmenubutton__istearoffmenu)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Determines whether the pop-up menu has a tear-off bar.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::OnAfterCreatePopupMenu<ept id="p1">](#cmfctoolbarmenubutton__onaftercreatepopupmenu)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::OnBeforeDrag<ept id="p1">](#cmfctoolbarmenubutton__onbeforedrag)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Specifies whether the button can be dragged.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnBeforeDrag<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onbeforedrag)</ept>.)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::OnCalculateSize<ept id="p1">](#cmfctoolbarmenubutton__oncalculatesize)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Called by the framework to calculate the size of the button for the specified device context and docking state.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnCalculateSize<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncalculatesize)</ept>.)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::OnCancelMode<ept id="p1">](#cmfctoolbarmenubutton__oncancelmode)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Called by the framework to handle the <bpt id="p1">[</bpt>WM_CANCELMODE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632615)</ept> message.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnCancelMode<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncancelmode)</ept>.)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::OnChangeParentWnd<ept id="p1">](#cmfctoolbarmenubutton__onchangeparentwnd)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button is inserted into a new toolbar.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id="p1">](cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd)</ept>.)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::OnClick<ept id="p1">](#cmfctoolbarmenubutton__onclick)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user clicks the mouse button.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnClick<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick)</ept>.)</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::OnClickMenuItem<ept id="p1">](#cmfctoolbarmenubutton__onclickmenuitem)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user selects an item in the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::OnContextHelp<ept id="p1">](#cmfctoolbarmenubutton__oncontexthelp)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar handles a <ph id="ph1">`WM_HELPHITTEST`</ph> message.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnContextHelp<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncontexthelp)</ept>.)</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::OnDraw<ept id="p1">](#cmfctoolbarmenubutton__ondraw)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Called by the framework to draw the button by using the specified styles and options.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnDraw<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondraw)</ept>.)</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::OnDrawOnCustomizeList<ept id="p1">](#cmfctoolbarmenubutton__ondrawoncustomizelist)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Called by the framework to draw the button in the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> pane of the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnDrawOnCustomizeList<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondrawoncustomizelist)</ept>.)</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::OpenPopupMenu<ept id="p1">](#cmfctoolbarmenubutton__openpopupmenu)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user opens the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::ResetImageToDefault<ept id="p1">](#cmfctoolbarmenubutton__resetimagetodefault)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Sets to the default value the image that is associated with the button.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::ResetImageToDefault<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__resetimagetodefault)</ept>.)</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::SaveBarState<ept id="p1">](#cmfctoolbarmenubutton__savebarstate)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Saves the state of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::SaveBarState<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__savebarstate)</ept>.)</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::Serialize<ept id="p1">](#cmfctoolbarmenubutton__serialize)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Reads this object from an archive or writes it to an archive.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::Serialize<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__serialize)</ept>.)</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::SetACCData<ept id="p1">](#cmfctoolbarmenubutton__setaccdata)</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Populates the provided <ph id="ph1">`CAccessibilityData`</ph> object with accessibility data from the toolbar button.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::SetACCData<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setaccdata)</ept>.)</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::SetMenuOnly<ept id="p1">](#cmfctoolbarmenubutton__setmenuonly)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Specifies whether the button can be added to a toolbar.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::SetMenuPaletteMode<ept id="p1">](#cmfctoolbarmenubutton__setmenupalettemode)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Specifies whether the pop-up menu is in palette mode.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::SetMessageWnd<ept id="p1">](#cmfctoolbarmenubutton__setmessagewnd)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::SetRadio<ept id="p1">](#cmfctoolbarmenubutton__setradio)</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Forces the toolbar menu button to display an icon indicating that it is selected.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::SetTearOff<ept id="p1">](#cmfctoolbarmenubutton__settearoff)</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Specifies a tear-off bar ID for the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::DrawDocumentIcon<ept id="p1">](#cmfctoolbarmenubutton__drawdocumenticon)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Draws an icon on the menu button.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Data Members</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton::m_bAlwaysCallOwnerDraw<ept id="p1">](#cmfctoolbarmenubutton__m_balwayscallownerdraw)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, the framework always calls <bpt id="p1">[</bpt>CFrameWndEx::OnDrawMenuImage<ept id="p1">](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage)</ept> when a button is drawn.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CMFCToolBarMenuButton`</ph> can appear as a menu, a menu item that has a sub-menu, a button that either executes a command or displays a menu, or a button that displays only a menu.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You determine the behavior and appearance of the menu button by specifying parameters such as the image, text, menu handle, and command ID that is associated with the button in the constructor <ph id="ph1">`CMFCToolbarMenuButton::CMFCToolbarMenuButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A custom class derived from the <ph id="ph1">`CMFCToolbarMenuButton`</ph> class must use the <bpt id="p1">[</bpt>DECLARE_SERIAL<ept id="p1">](run-time-object-model-services.md#declare_serial)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DECLARE_DYNCREATE<ept id="p1">](run-time-object-model-services.md#declare_dyncreate)</ept> macro generates an error when the application closes.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to configure a <ph id="ph1">`CMFCToolBarMenuButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The code illustrates how to specify that the drop-down menu is in palette mode, and specify the ID for the tear-off bar that is created when the user drags the menu button off of a menu bar.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>Word Pad sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_WordPad#10<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmfctoolbarmenubutton-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarMenuButton<ept id="p1">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxtoolbarmenubutton.h</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__cmfctoolbarmenubutton"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CMFCToolBarMenuButton</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CMFCToolBarMenuButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`src`</ph></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>An existing <ph id="ph1">`CMFCToolBarMenuButton`</ph> object to be copied into this <ph id="ph2">`CMFCToolBarMenuButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`uiID`</ph></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The ID of the command to execute when a user clicks the button; or ( <ph id="ph1">`UINT`</ph>)-1 for a menu button that does not directly execute a command.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`hMenu`</ph></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A handle to a menu; or <ph id="ph1">`NULL`</ph> if the button does not have a menu.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iImage`</ph></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Index of the image for the button; or -1 if this button does not have an icon or uses the icon for the command specified by <ph id="ph1">`uiID`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The index is the same for each <ph id="ph1">`CMFCToolBarImages`</ph> object in your application.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszText`</ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The text of the toolbar menu button.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bUserButton`</ph></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> if the button displays a user-defined image; <ph id="ph2">`FALSE`</ph> if the button displays a predefined image associated with the command specified by <ph id="ph3">`uiID`</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`uiID`</ph> is a valid command ID, the button performs that command when the user clicks it.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`hMenu`</ph> is a valid menu handle, the button provides a drop-down menu when it appears in a toolbar or a submenu when it appears in a menu.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If both <ph id="ph1">`uiID`</ph> and <ph id="ph2">`hMenu`</ph> are valid, the button is a split-button with a portion that will perform the command when the user clicks on it and a portion with a down arrow that will drop-down a menu when the user clicks on it.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>However, if <ph id="ph1">`hMenu`</ph> is valid, a user will not be able to click the button to perform a command when the button is inserted into a menu.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to construct an object of the <ph id="ph1">`CMFCToolBarMenuButton`</ph> class.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>Word Pad sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_WordPad#9<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmfctoolbarmenubutton-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__comparewith"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CompareWith</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`other`</ph></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__copyfrom"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CopyFrom</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`src`</ph></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__createfrommenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CreateFromMenu</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Initializes the toolbar menu from a Windows menu handle.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`hMenu`</ph></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>A handle to a menu.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A toolbar menu button can display a drop-down submenu.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The framework calls this method to initialize the commands in the submenu from a menu.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__createmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CreateMenu</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Creates a menu that consists of the commands in the toolbar menu.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Returns a handle to the menu.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A handle to the menu if success.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NULL`</ph> if the list of commands associated with the toolbar menu button is empty.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>You can override this method in a derived class to customize the way the menu is generated.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__createpopupmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CreatePopupMenu</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CMFCPopupMenu`</ph> object to display the toolbar menu.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CMFCPopupMenu`</ph> object that displays the drop-down menu associated with the toolbar menu button.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>This method is called by the framework to prepare the display of the drop-down menu associated with the button.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The default implementation just constructs and returns a new <ph id="ph1">`CMFCPopupMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Override this method if you want to use a derived type of <bpt id="p1">[</bpt>CMFCPopupMenu Class<ept id="p1">](cmfcpopupmenu-class.md)</ept> or to perform additional initialization.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__drawdocumenticon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::DrawDocumentIcon</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Draws a document icon on the menu button.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDC`</ph></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A pointer to the device context.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rectImage`</ph></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Coordinates of the image bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`hIcon`</ph></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A handle to the icon.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This method takes a document icon and draws it on the menu button, centered in the area specified by <ph id="ph1">`rectImage`</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__enablequickcustomize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::EnableQuickCustomize</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__hasbutton"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::HasButton</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__havehotborder"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::HaveHotBorder</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__isborder"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsBorder</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__isclickedonmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsClickedOnMenu</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__isquickmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsQuickMode</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__getcommands"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::GetCommands</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Gives read-only access to the list of commands in the toolbar menu.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>A const reference to a <bpt id="p1">[</bpt>CObList Class<ept id="p1">](../../mfc/reference/coblist-class.md)</ept> object, which contains a collection of <bpt id="p2">[</bpt>CMFCToolBarButton Class<ept id="p2">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>A toolbar menu button can display a submenu.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>You can provide the list of commands in the submenu in the constructor or in <bpt id="p1">[</bpt>CMFCToolBarMenuButton::CreateFromMenu<ept id="p1">](#cmfctoolbarmenubutton__createfrommenu)</ept> as a handle to a menu ( <ph id="ph1">`HMENU`</ph>).</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The menu is converted to a list of objects that are derived from <bpt id="p1">[</bpt>CMFCToolBarButton Class<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> and stored in the internal <ph id="ph1">`CObList`</ph> object.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>You can access this list by calling this method.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__getimagerect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::GetImageRect</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle for the button image.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`rectImage`</ph></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CRect`</ph> object that receives the coordinates of the image bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__getpaletterows"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::GetPaletteRows</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Returns the number of rows in the drop-down menu when the menu is in palette mode.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The number of rows in the palette.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>When the menu button is set to palette mode, menu items will appear in multiple columns with only a limited number of rows.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Call this method to obtain the number of rows.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>You can enable or disable palette mode and specify the number of rows using <bpt id="p1">[</bpt>CMFCToolBarMenuButton::SetMenuPaletteMode<ept id="p1">](#cmfctoolbarmenubutton__setmenupalettemode)</ept>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__getpopupmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::GetPopupMenu</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">[</bpt>CMFCPopupMenu Class<ept id="p1">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object that represents the drop-down menu of the button.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CMFCPopupMenu Class<ept id="p1">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object that was created when the framework drew the submenu of the toolbar menu button; <ph id="ph1">`NULL`</ph> if no submenu is displayed.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>When a toolbar menu button displays a drop-down menu, the button creates a <bpt id="p1">[</bpt>CMFCPopupMenu Class<ept id="p1">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object to represent the menu.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Call this method to obtain a pointer to the <ph id="ph1">`CMFCPopupMenu`</ph> object.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>You should not store the returned pointer, because it is temporary and becomes invalid when the user closes the drop-down menu.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__isdroppeddown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsDroppedDown</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Indicates whether the pop-up menu is currently displayed.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the toolbar menu button displays its submenu; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__isemptymenuallowed"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsEmptyMenuAllowed</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Specifies whether menu items shows empty submenus.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the framework opens a submenu from the currently selected menu item even when the submenu is empty; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a user tries to open the submenu from the currently selected menu item.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>If the submenu is empty and <ph id="ph1">`IsEmptyMenuAllowed`</ph> returns <ph id="ph2">`FALSE`</ph>, the submenu will not open.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Override this method to customize this behavior.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__isexclusive"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsExclusive</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Indicates whether the button is in exclusive mode.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the button is working in exclusive mode; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>When a user opens a popup menu for a button and then moves the mouse pointer over another toolbar or menu button, the popup menu closes unless the button is in exclusive mode.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The default implementation always returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class if you want to turn on exclusive mode.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__ismenupalettemode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsMenuPaletteMode</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Determines whether the drop-down menu is in palette mode.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the palette mode is enabled, otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>When the menu button is set to palette mode, menu items appear in multiple columns with only a limited number of rows.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Call this method to obtain the number of rows.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>You can enable or disable the palette mode by calling <bpt id="p1">[</bpt>CMFCToolBarMenuButton::SetMenuPaletteMode<ept id="p1">](#cmfctoolbarmenubutton__setmenupalettemode)</ept>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__istearoffmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsTearOffMenu</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Indicates whether the drop-down menu has a tear-off bar.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the toolbar menu button has a tear-off bar; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>To enable the tear-off feature and set the tear-off bar ID, call <bpt id="p1">[</bpt>CMFCToolBarMenuButton::SetTearOff<ept id="p1">](#cmfctoolbarmenubutton__settearoff)</ept>.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__m_balwayscallownerdraw"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::m_bAlwaysCallOwnerDraw</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Specifies whether the framework always calls <bpt id="p1">[</bpt>CFrameWndEx::OnDrawMenuImage<ept id="p1">](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage)</ept> when a button is drawn.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>When this member variable is set to <ph id="ph1">`TRUE`</ph>, the button always calls <bpt id="p1">[</bpt>CFrameWndEx::OnDrawMenuImage<ept id="p1">](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage)</ept> method to display the image on the button.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`m_bAlwaysCallOwnerDraw`</ph> is <ph id="ph2">`FALSE`</ph>, the button itself draws the image if the image is predefined.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Otherwise, it calls <ph id="ph1">`OnDrawMenuImage`</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__onaftercreatepopupmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnAfterCreatePopupMenu</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__onbeforedrag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnBeforeDrag</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__oncalculatesize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnCalculateSize</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDC`</ph></source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`sizeDefault`</ph></source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHorz`</ph></source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__oncancelmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnCancelMode</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__onchangeparentwnd"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnChangeParentWnd</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWndParent`</ph></source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__onclick"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnClick</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWnd`</ph></source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDelay`</ph></source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__onclickmenuitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnClickMenuItem</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user selects an item in the drop-down menu.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FALSE`</ph> if the framework should continue the default menu item processing; otherwise <ph id="ph2">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The default implementation always returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>When the user clicks a menu item, the framework executes a command that is associated with that item.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>To customize the menu item processing, override <ph id="ph1">`OnClickMenuItem`</ph> in a class derived from <ph id="ph2">`CMFCToolBarMenuButton`</ph> class.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>You must also override <bpt id="p1">[</bpt>CFrameWndEx::OnShowPopupMenu<ept id="p1">](../../mfc/reference/cframewndex-class.md#cframewndex__onshowpopupmenu)</ept> and replace the menu buttons that require special processing with instances of the derived class.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__oncontexthelp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnContextHelp</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWnd`</ph></source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__ondraw"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnDraw</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDC`</ph></source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rect`</ph></source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pImages`</ph></source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHorz`</ph></source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bCustomizeMode`</ph></source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHighlight`</ph></source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDrawBorder`</ph></source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bGrayDisabledButtons`</ph></source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__ondrawoncustomizelist"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnDrawOnCustomizeList</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDC`</ph></source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rect`</ph></source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bSelected`</ph></source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__openpopupmenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OpenPopupMenu</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user opens the drop-down menu of a toolbar menu button.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWnd`</ph></source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Specifies the window that receives the drop-down menu commands.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>It can be <ph id="ph1">`NULL`</ph> only if the toolbar menu button has a parent window.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> when a <bpt id="p1">[</bpt>CMFCPopupMenu Class<ept id="p1">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object was created and opened successfully; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>This function is called by the framework when the user opens a drop-down menu from a toolbar menu button.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__resetimagetodefault"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::ResetImageToDefault</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__savebarstate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SaveBarState</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it creates a toolbar button as the result of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>This method calls the <bpt id="p1">[</bpt>CMFCPopupMenu::SaveState<ept id="p1">](../../mfc/reference/cmfcpopupmenu-class.md#cmfcpopupmenu__savestate)</ept> method of the top-level pop-up menu, which causes the parent button of the pop-up menu to recreate its menu.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__serialize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::Serialize</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`ar`</ph></source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__setaccdata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetACCData</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Sets the accessibility data for the ribbon element.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The parent window for the ribbon element.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The accessibility data for the ribbon element.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Always returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>By default this method sets the accessibility data for the ribbon element and always returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Override this method to set the accessibility data and return a value that indicates success or failure.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__setmenuonly"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetMenuOnly</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Specifies whether the button is drawn as a menu button or a split button when it has both a valid command ID and a submenu.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bMenuOnly`</ph></source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to show this button as a menu button when it has both a valid command ID and a submenu, <ph id="ph2">`FALSE`</ph> to show this button as a split button when it has both a valid command ID and a submenu.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Typically, when a toolbar menu button has both a submenu and a command ID, the menu appears to be a split button that has a main button and an attached down arrow button.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>If you call this method and <ph id="ph1">`bMenuOnly`</ph> is <ph id="ph2">`TRUE`</ph>, the button instead appears to be a single menu button with a down arrow in the button.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>When the user clicks the arrow in either mode, the submenu opens, and when the user clicks the non-arrow part of the button in either mode the framework executes the command .</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__setmenupalettemode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetMenuPaletteMode</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Specifies whether the drop-down menu is in palette mode.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bMenuPaletteMode`</ph></source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Specifies whether the drop-down menu is in palette mode.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nPaletteRows`</ph></source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Number of rows in palette.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>In the palette mode, all menu items are displayed as a multicolumn palette.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>You specify the number of rows by using <ph id="ph1">`nPaletteRows`</ph>.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__setmessagewnd"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetMessageWnd</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWndMessage`</ph></source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__setradio"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetRadio</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Sets the toolbar menu button to display a radio button style icon when it is checked.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>When the menu button is drawn while it is checked, it calls <bpt id="p1">[</bpt>CMFCVisualManager::OnDrawMenuCheck<ept id="p1">](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondrawmenucheck)</ept> to draw a checkmark icon.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`OnDrawMenuCheck`</ph> requests that the current visual manager draws a checkbox style checkmark on the menu button.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>After you call this method, the current visual manager instead draws a radio button style checkmark on the menu button.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>This change cannot be undone.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>When you call this method and the menu button is currently being displayed, it will refresh.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarmenubutton__settearoff"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetTearOff</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Specifies the ID of the tear-off bar for the drop-down menu.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`uiBarID`</ph></source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Specifies a new tear-off bar ID.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Call this method to specify the ID for the tear-off bar that is created when the user drags the menu button off of a menu bar.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`uiBarID`</ph> parameter is 0, the user cannot tear off the menu button.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CWinAppEx::EnableTearOffMenus<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__enabletearoffmenus)</ept> to enable the tear-off menu feature in your application.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Classes<ept id="p1">](../../mfc/reference/mfc-classes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMFCToolBarButton Class<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMFCToolBar Class<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMFCPopupMenu Class<ept id="p1">](../../mfc/reference/cmfcpopupmenu-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>