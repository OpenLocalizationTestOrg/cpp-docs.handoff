<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d13a70af4b1bea9309995eb84c4cc3ac2a2de26</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\caxwindow2t-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d0c5f0fa991445e39441cec440ca8e876ee73b6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ca969beef7c6d9cb019c95901bd504de770b924</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CAxWindow2T Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CAxWindow2T Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class provides methods for manipulating a window that hosts an ActiveX control, and also has support for hosting licensed ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>TBase<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The class from which <ph id="ph1">`CAxWindowT`</ph> derives.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAxWindow2T::CAxWindow2T<ept id="p1">](#caxwindow2t__caxwindow2t)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CAxWindow2T`</ph> object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAxWindow2T::Create<ept id="p1">](#caxwindow2t__create)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creates a host window.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAxWindow2T::CreateControlLic<ept id="p1">](#caxwindow2t__createcontrollic)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Creates a licensed ActiveX control, initializes it, and hosts it in the specified window.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAxWindow2T::CreateControlLicEx<ept id="p1">](#caxwindow2t__createcontrollicex)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates a licensed ActiveX control, initializes it, hosts it in the specified window, and retrieves an interface pointer (or pointers) from the control.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAxWindow2T::GetWndClassName<ept id="p1">](#caxwindow2t__getwndclassname)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Static method that retrieves the name of the window class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAxWindow2T::operator =<ept id="p1">](#caxwindow2t__operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Assigns an <ph id="ph1">`HWND`</ph> to an existing <ph id="ph2">`CAxWindow2T`</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CAxWindow2T`</ph> provides methods for manipulating a window that hosts an ActiveX control.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CAxWindow2T`</ph> also has support for hosting licensed ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The hosting is provided by " <bpt id="p1">**</bpt>AtlAxWinLic80<ept id="p1">**</ept>", which is wrapped by <ph id="ph1">`CAxWindow2T`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`CAxWindow2`</ph> is implemented as a specialization of the <ph id="ph2">`CAxWindow2T`</ph> class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This specialization is declared as:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CAxWindowT`</ph> members are documented under <bpt id="p1">[</bpt>CAxWindow<ept id="p1">](../../atl/reference/caxwindow-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id="p1">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample that uses the members of this class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlwin.h</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="caxwindow2t__caxwindow2t"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAxWindow2T::CAxWindow2T</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CAxWindow2T`</ph> object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A handle of an existing window.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="caxwindow2t__create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAxWindow2T::Create</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Creates a host window.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CAxWindow2T::Create`</ph> calls <bpt id="p1">[</bpt>CWindow::Create<ept id="p1">](../../atl/reference/cwindow-class.md#cwindow__create)</ept> with the <ph id="ph2">`LPCTSTR``lpstrWndClass`</ph> parameter set to the window class that provides control hosting ( <bpt id="p2">**</bpt>AtlAxWinLic80<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`CWindow::Create`</ph> for a description of the parameters and return value.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> If 0 is used as the value for the <ph id="ph1">`MenuOrID`</ph> parameter, it must be specified as 0U (the default value) to avoid a compiler error.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id="p1">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample that uses <ph id="ph1">`CAxWindow2T::Create`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="caxwindow2t__createcontrollic"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAxWindow2T::CreateControlLic</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Creates a licensed ActiveX control, initializes it, and hosts it in the specified window.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The license key for the control; NULL if creating a nonlicensed control.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CAxWindow::CreateControl<ept id="p1">](../../atl/reference/caxwindow-class.md#caxwindow__createcontrol)</ept> for a description of the remaining parameters and return value.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id="p1">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample that uses <ph id="ph1">`CAxWindow2T::CreateControlLic`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="caxwindow2t__createcontrollicex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAxWindow2T::CreateControlLicEx</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Creates a licensed ActiveX control, initializes it, hosts it in the specified window, and retrieves an interface pointer (or pointers) from the control.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The license key for the control; NULL if creating a nonlicensed control.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CAxWindow::CreateControlEx<ept id="p1">](../../atl/reference/caxwindow-class.md#caxwindow__createcontrolex)</ept> for a description of the remaining parameters and return value.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id="p1">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample that uses <ph id="ph1">`CAxWindow2T::CreateControlLicEx`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="caxwindow2t__getwndclassname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAxWindow2T::GetWndClassName</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Retrieves the name of the window class.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the name of the window class ( <bpt id="p1">**</bpt>AtlAxWinLic80<ept id="p1">**</ept>) that can host licensed and nonlicensed ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="caxwindow2t__operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAxWindow2T::operator =</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Assigns an <ph id="ph1">`HWND`</ph> to an existing <ph id="ph2">`CAxWindow2T`</ph> object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A handle of an existing window.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Class Overview<ept id="p1">](../../atl/atl-class-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Control Containment FAQ<ept id="p1">](../../atl/atl-control-containment-faq.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>