<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d06d755f09e402a13e1c056af607479bb08573ac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\ccontainedwindowt-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9ea4aa20b878e1bb41a2fb4d481d43bb355eb61</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66becc6939df70db6973b8a0ca871949c14f72ca</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CContainedWindowT Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CContainedWindowT Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class implements a window contained within another object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>TBase<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The base class of your new class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The default base class is <ph id="ph1">`CWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A traits class that defines styles for your window.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`CControlWinTraits`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindow<ept id="p1">](ccontainedwindowt-class.md)</ept> is a specialization of <ph id="ph1">`CContainedWindowT`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you want to change the base class or traits, use <ph id="ph1">`CContainedWindowT`</ph> directly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::CContainedWindowT<ept id="p1">](#ccontainedwindowt__ccontainedwindowt)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Constructor.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes data members to specify which message map will process the contained window's messages.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::Create<ept id="p1">](#ccontainedwindowt__create)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creates a window.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::DefWindowProc<ept id="p1">](#ccontainedwindowt__defwindowproc)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Provides default message processing.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::GetCurrentMessage<ept id="p1">](#ccontainedwindowt__getcurrentmessage)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns the current message.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::RegisterWndSuperclass<ept id="p1">](#ccontainedwindowt__registerwndsuperclass)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Registers the window class of the contained window.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::SubclassWindow<ept id="p1">](#ccontainedwindowt__subclasswindow)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Subclasses a window.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::SwitchMessageMap<ept id="p1">](#ccontainedwindowt__switchmessagemap)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Changes which message map is used to process the contained window's messages.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::UnsubclassWindow<ept id="p1">](#ccontainedwindowt__unsubclasswindow)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Restores a previously subclassed window.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::WindowProc<ept id="p1">](#ccontainedwindowt__windowproc)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(Static) Processes messages sent to the contained window.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::m_dwMsgMapID<ept id="p1">](#ccontainedwindowt__m_dwmsgmapid)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Identifies which message map will process the contained window's messages.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::m_lpszClassName<ept id="p1">](#ccontainedwindowt__m_lpszclassname)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Specifies the name of an existing window class on which a new window class will be based.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::m_pfnSuperWindowProc<ept id="p1">](#ccontainedwindowt__m_pfnsuperwindowproc)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Points to the window class's original window procedure.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindowT::m_pObject<ept id="p1">](#ccontainedwindowt__m_pobject)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Points to the containing object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CContainedWindowT`</ph> implements a window contained within another object.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CContainedWindowT`</ph>'s window procedure uses a message map in the containing object to direct messages to the appropriate handlers.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When constructing a <ph id="ph1">`CContainedWindowT`</ph> object, you specify which message map should be used.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CContainedWindowT`</ph> allows you to create a new window by superclassing an existing window class.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> method first registers a window class that is based on an existing class but uses <ph id="ph1">`CContainedWindowT::WindowProc`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create<ept id="p1">**</ept> then creates a window based on this new window class.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Each instance of <ph id="ph1">`CContainedWindowT`</ph> can superclass a different window class.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CContainedWindowT`</ph> also supports window subclassing.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SubclassWindow`</ph> method attaches an existing window to the <ph id="ph2">`CContainedWindowT`</ph> object and changes the window procedure to <ph id="ph3">`CContainedWindowT::WindowProc`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Each instance of <ph id="ph1">`CContainedWindowT`</ph> can subclass a different window.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For any given <ph id="ph1">`CContainedWindowT`</ph> object, call either <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> or <ph id="ph2">`SubclassWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You should not invoke both methods on the same object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When you use the <bpt id="p1">**</bpt>Add control based on<ept id="p1">**</ept> option in the ATL Project Wizard, the wizard will automatically add a <ph id="ph1">`CContainedWindowT`</ph> data member to the class implementing the control.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following example shows how the contained window is declared:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Windowing#38<ept id="p2">](../../atl/codesnippet/cpp/ccontainedwindowt-class_1.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Windowing#39<ept id="p2">](../../atl/codesnippet/cpp/ccontainedwindowt-class_2.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Windowing#40<ept id="p2">](../../atl/codesnippet/cpp/ccontainedwindowt-class_3.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information about</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>See</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Creating controls</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ATL Tutorial<ept id="p1">](../../atl/active-template-library-atl-tutorial.md)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Using windows in ATL</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ATL Window Classes<ept id="p1">](../../atl/atl-window-classes.md)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>ATL Project Wizard</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating an ATL Project<ept id="p1">](../../atl/reference/creating-an-atl-project.md)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Windows</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632595)</ept> and subsequent topics in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlwin.h</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__ccontainedwindowt"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::CContainedWindowT</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The constructor initializes data members.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>[in] The name of an existing window class on which the contained window will be based.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the containing object that declares the message map.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This object's class must derive from <bpt id="p1">[</bpt>CMessageMap<ept id="p1">](../../atl/reference/cmessagemap-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>[in] Identifies the message map that will process the contained window's messages.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The default value, 0, specifies the default message map declared with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>To use an alternate message map declared with <bpt id="p1">[</bpt>ALT_MSG_MAP(msgMapID)<ept id="p1">](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8)</ept>, pass <ph id="ph1">`msgMapID`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you want to create a new window through <bpt id="p1">[</bpt>Create<ept id="p1">](#ccontainedwindowt__create)</ept>, you must pass the name of an existing window class for the <ph id="ph1">`lpszClassName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>CContainedWindow<ept id="p1">](../../atl/reference/ccontainedwindowt-class.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>There are three constructors:</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The constructor with three arguments is the one typically called.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The constructor with two arguments uses the class name from <bpt id="p1">**</bpt>TBase::GetWndClassName<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The constructor with no arguments is used if you want to supply the arguments later.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You must supply the window class name, message map object, and message map ID when you later call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If you subclass an existing window through <bpt id="p1">[</bpt>SubclassWindow<ept id="p1">](#ccontainedwindowt__subclasswindow)</ept>, the <ph id="ph1">`lpszClassName`</ph> value will not be used; therefore, you can pass <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> for this parameter.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::Create</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>RegisterWndSuperclass<ept id="p1">](#ccontainedwindowt__registerwndsuperclass)</ept> to register a window class that is based on an existing class but uses <bpt id="p2">[</bpt>CContainedWindowT::WindowProc<ept id="p2">](#ccontainedwindowt__windowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>[in] The name of an existing window class on which the contained window will be based.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the containing object that declares the message map.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This object's class must derive from <bpt id="p1">[</bpt>CMessageMap<ept id="p1">](../../atl/reference/cmessagemap-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>[in] Identifies the message map that will process the contained window's messages.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The default value, 0, specifies the default message map declared with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To use an alternate message map declared with <bpt id="p1">[</bpt>ALT_MSG_MAP(msgMapID)<ept id="p1">](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8)</ept>, pass <ph id="ph1">`msgMapID`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>[in] The handle to the parent or owner window.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>[in] A <bpt id="p1">[</bpt>RECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure specifying the position of the window.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RECT`</ph> can be passed by pointer or by reference.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>[in] Specifies the name of the window.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>[in] The style of the window.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>WS_CHILD &amp;#124; WS_VISIBLE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <bpt id="p1">[</bpt>CreateWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>[in] The extended window style.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The default value is 0, meaning no extended style.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>[in] For a child window, the window identifier.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For a top-level window, a menu handle for the window.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>0U<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>[in] A pointer to window-creation data.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For a full description, see the description for the final parameter to <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If successful, the handle to the newly created window; otherwise, <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The existing window class name is saved in <bpt id="p1">[</bpt>m_lpszClassName<ept id="p1">](#ccontainedwindowt__m_lpszclassname)</ept>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create<ept id="p1">**</ept> then creates a window based on this new class.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The newly created window is automatically attached to the <ph id="ph1">`CContainedWindowT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Do not call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> if you have already called <bpt id="p2">[</bpt>SubclassWindow<ept id="p2">](#ccontainedwindowt__subclasswindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If 0 is used as the value for the <ph id="ph1">`MenuOrID`</ph> parameter, it must be specified as 0U (the default value) to avoid a compiler error.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__defwindowproc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::DefWindowProc</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Called by <bpt id="p1">[</bpt>WindowProc<ept id="p1">](#ccontainedwindowt__windowproc)</ept> to process messages not handled by the message map.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>[in] The message sent to the window.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>[in] Additional message-specific information.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>[in] Additional message-specific information.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The result of the message processing.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`DefWindowProc`</ph> calls the <bpt id="p1">[</bpt>CallWindowProc<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633571)</ept> Win32 function to send the message information to the window procedure specified in <bpt id="p2">[</bpt>m_pfnSuperWindowProc<ept id="p2">](#ccontainedwindowt__m_pfnsuperwindowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__getcurrentmessage"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::GetCurrentMessage</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Returns the current message ( <bpt id="p1">**</bpt>m_pCurrentMsg<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The current message, packaged in the <ph id="ph1">`MSG`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__m_dwmsgmapid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::m_dwMsgMapID</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Holds the identifier of the message map currently being used for the contained window.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This message map must be declared in the containing object.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The default message map, declared with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)</ept>, is always identified by zero.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>An alternate message map, declared with <bpt id="p1">[</bpt>ALT_MSG_MAP(msgMapID)<ept id="p1">](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8)</ept>, is identified by <ph id="ph1">`msgMapID`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`m_dwMsgMapID`</ph> is first initialized by the constructor and can be changed by calling <bpt id="p1">[</bpt>SwitchMessageMap<ept id="p1">](#ccontainedwindowt__switchmessagemap)</ept>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>CContainedWindowT Overview<ept id="p1">](../../atl/reference/ccontainedwindowt-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__m_lpszclassname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::m_lpszClassName</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Specifies the name of an existing window class.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>When you create a window, <bpt id="p1">[</bpt>Create<ept id="p1">](#ccontainedwindowt__create)</ept> registers a new window class that is based on this existing class but uses <bpt id="p2">[</bpt>CContainedWindowT::WindowProc<ept id="p2">](#ccontainedwindowt__windowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`m_lpszClassName`</ph> is initialized by the constructor.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>CContainedWindowT<ept id="p1">](../../atl/reference/ccontainedwindowt-class.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__m_pfnsuperwindowproc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::m_pfnSuperWindowProc</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If the contained window is subclassed, <ph id="ph1">`m_pfnSuperWindowProc`</ph> points to the original window procedure of the window class.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If the contained window is superclassed, meaning it is based on a window class that modifies an existing class, <ph id="ph1">`m_pfnSuperWindowProc`</ph> points to the existing window class's window procedure.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DefWindowProc<ept id="p1">](#ccontainedwindowt__defwindowproc)</ept> method sends message information to the window procedure saved in <ph id="ph1">`m_pfnSuperWindowProc`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__m_pobject"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::m_pObject</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Points to the object containing the <ph id="ph1">`CContainedWindowT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>This container, whose class must derive from <bpt id="p1">[</bpt>CMessageMap<ept id="p1">](../../atl/reference/cmessagemap-class.md)</ept>, declares the message map used by the contained window.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`m_pObject`</ph> is initialized by the constructor.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>CContainedWindowT<ept id="p1">](../../atl/reference/ccontainedwindowt-class.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__registerwndsuperclass"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::RegisterWndSuperclass</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Called by <bpt id="p1">[</bpt>Create<ept id="p1">](#ccontainedwindowt__create)</ept> to register the window class of the contained window.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If successful, an atom that uniquely identifies the window class being registered; otherwise, zero.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This window class is based on an existing class but uses <bpt id="p1">[</bpt>CContainedWindowT::WindowProc<ept id="p1">](#ccontainedwindowt__windowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The existing window class's name and window procedure are saved in <bpt id="p1">[</bpt>m_lpszClassName<ept id="p1">](#ccontainedwindowt__m_lpszclassname)</ept> and <bpt id="p2">[</bpt>m_pfnSuperWindowProc<ept id="p2">](#ccontainedwindowt__m_pfnsuperwindowproc)</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__subclasswindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::SubclassWindow</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Subclasses the window identified by <ph id="ph1">`hWnd`</ph> and attaches it to the <ph id="ph2">`CContainedWindowT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>[in] The handle to the window being subclassed.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the window is successfully subclassed; otherwise, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The subclassed window now uses <bpt id="p1">[</bpt>CContainedWindowT::WindowProc<ept id="p1">](#ccontainedwindowt__windowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The original window procedure is saved in <bpt id="p1">[</bpt>m_pfnSuperWindowProc<ept id="p1">](#ccontainedwindowt__m_pfnsuperwindowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Do not call <ph id="ph1">`SubclassWindow`</ph> if you have already called <bpt id="p1">[</bpt>Create<ept id="p1">](#ccontainedwindowt__create)</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__switchmessagemap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::SwitchMessageMap</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Changes which message map will be used to process the contained window's messages.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>[in] The message map identifier.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>To use the default message map declared with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)</ept>, pass zero.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>To use an alternate message map declared with <bpt id="p1">[</bpt>ALT_MSG_MAP(msgMapID)<ept id="p1">](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8)</ept>, pass <ph id="ph1">`msgMapID`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The message map must be defined in the containing object.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>You initially specify the message map identifier in the constructor.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__unsubclasswindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::UnsubclassWindow</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Detaches the subclassed window from the <ph id="ph1">`CContainedWindowT`</ph> object and restores the original window procedure, saved in <bpt id="p1">[</bpt>m_pfnSuperWindowProc<ept id="p1">](#ccontainedwindowt__m_pfnsuperwindowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>[in] Set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to force the original window procedure to be restored even if the window procedure for this <ph id="ph1">`CContainedWindowT`</ph> object is not currently active.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bForce`</ph> is set to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> and the window procedure for this <ph id="ph2">`CContainedWindowT`</ph> object is not currently active, the original window procedure will not be restored.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The handle to the window previously subclassed.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bForce`</ph> is set to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> and the window procedure for this <ph id="ph2">`CContainedWindowT`</ph> object is not currently active, returns <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Use this method only if you want to restore the original window procedure before the window is destroyed.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">[</bpt>WindowProc<ept id="p1">](#ccontainedwindowt__windowproc)</ept> will automatically do this when the window is destroyed.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccontainedwindowt__windowproc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CContainedWindowT::WindowProc</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>This static method implements the window procedure.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>[in] The handle to the window.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>[in] The message sent to the window.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>[in] Additional message-specific information.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>[in] Additional message-specific information.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The result of the message processing.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WindowProc`</ph> directs messages to the message map identified by <bpt id="p1">[</bpt>m_dwMsgMapID<ept id="p1">](#ccontainedwindowt__m_dwmsgmapid)</ept>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If necessary, <ph id="ph1">`WindowProc`</ph> calls <bpt id="p1">[</bpt>DefWindowProc<ept id="p1">](#ccontainedwindowt__defwindowproc)</ept> for additional message processing.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWindow Class<ept id="p1">](../../atl/reference/cwindow-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWindowImpl Class<ept id="p1">](../../atl/reference/cwindowimpl-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMessageMap Class<ept id="p1">](../../atl/reference/cmessagemap-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>BEGIN_MSG_MAP<ept id="p1">](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ALT_MSG_MAP<ept id="p1">](http://msdn.microsoft.com/library/2c8871bf-abc0-4d52-bcf7-6b2ab9eb5af8)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Class Overview<ept id="p1">](../../atl/atl-class-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>