<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb2b30dc58b7ba65dd13a07cec8456ea4adeb5e1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\set-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">558a3bd8323f091ad8b857d87bb30d24ea8ee0de</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df4379aa4e708f885103229c65fb8530a0d1812a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>set<ph id="ph2">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>set<ph id="ph2">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>swap (map)<ept id="p1">](#swap)</ept></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>swap (multiset)<ept id="p1">](#swap_multiset)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="swap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  swap  (map)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two sets.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The set providing the elements to be swapped, or the set whose elements are to be exchanged with those of the set <ph id="ph1">`left`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The set whose elements are to be exchanged with those of the set <ph id="ph1">`right`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The template function is an algorithm specialized on the container class set to execute the member function <ph id="ph1">`left``.`</ph><bpt id="p1">[</bpt>swap<ept id="p1">](../standard-library/set-class.md#set__swap)</ept>( <ph id="ph2">`right`</ph>).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is an instance of the partial ordering of function templates by the compiler.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The general version of the template function</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`template`</ph> <ph id="ph2">\&lt;</ph> <bpt id="p1">**</bpt>classT<ept id="p1">**</ept><ph id="ph3">&gt; </ph><bpt id="p2">**</bpt>void swap<ept id="p2">**</ept>( <bpt id="p3">**</bpt>T&amp;<ept id="p3">**</ept>, <bpt id="p4">**</bpt>T&amp;<ept id="p4">**</ept>)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>in the algorithm class works by assignment and is a slow operation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The specialized version in each container is much faster as it can work with the internal representation of the container class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See the code example for the member class <bpt id="p1">[</bpt>set::swap<ept id="p1">](../standard-library/set-class.md#set__swap)</ept> for an example of the use of the template version of <ph id="ph1">`swap`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="swap_multiset"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  swap  (multiset)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two multisets.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The multiset providing the elements to be swapped, or the multiset whose elements are to be exchanged with those of the multiset <ph id="ph1">`left`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The multiset whose elements are to be exchanged with those of the multiset <ph id="ph1">`right`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The template function is an algorithm specialized on the container class multiset to execute the member function <ph id="ph1">`left``.`</ph><bpt id="p1">[</bpt>swap<ept id="p1">](../standard-library/multiset-class.md#multiset__swap)</ept>( <ph id="ph2">`right`</ph>).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This is an instance of the partial ordering of function templates by the compiler.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The general version of the template function</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`template`</ph> <ph id="ph2">\&lt;</ph> <bpt id="p1">**</bpt>classT<ept id="p1">**</ept><ph id="ph3">&gt; </ph><bpt id="p2">**</bpt>void swap<ept id="p2">**</ept>( <bpt id="p3">**</bpt>T&amp;<ept id="p3">**</ept>, <bpt id="p4">**</bpt>T&amp;<ept id="p4">**</ept>)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>in the algorithm class works by assignment and is a slow operation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The specialized version in each container is much faster as it can work with the internal representation of the container class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See the code example for the member class <bpt id="p1">[</bpt>multiset::swap<ept id="p1">](../standard-library/multiset-class.md#multiset__swap)</ept>for an example of the use of the template version of <ph id="ph1">`swap`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>set&gt;<ept id="p1">](../standard-library/set.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>