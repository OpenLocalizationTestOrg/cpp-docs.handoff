<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">445ba6bcc59c1f0d223ad5f4788dc63d8ecc811a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\coledispatchdriver-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1869d76b530e3bb57d41e3a655a8766a7697d6c7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1979942d2da588192b6cad922c576c481eeba06c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>COleDispatchDriver Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>COleDispatchDriver Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Implements the client side of OLE automation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::COleDispatchDriver<ept id="p1">](#coledispatchdriver__coledispatchdriver)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::AttachDispatch<ept id="p1">](#coledispatchdriver__attachdispatch)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Attaches an <ph id="ph1">`IDispatch`</ph> connection to the <ph id="ph2">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::CreateDispatch<ept id="p1">](#coledispatchdriver__createdispatch)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">`IDispatch`</ph> connection and attaches it to the <ph id="ph2">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::DetachDispatch<ept id="p1">](#coledispatchdriver__detachdispatch)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Detaches an <ph id="ph1">`IDispatch`</ph> connection, without releasing it.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::GetProperty<ept id="p1">](#coledispatchdriver__getproperty)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets an automation property.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::InvokeHelper<ept id="p1">](#coledispatchdriver__invokehelper)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Helper for calling automation methods.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::ReleaseDispatch<ept id="p1">](#coledispatchdriver__releasedispatch)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Releases an <ph id="ph1">`IDispatch`</ph> connection.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::SetProperty<ept id="p1">](#coledispatchdriver__setproperty)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Sets an automation property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::operator =<ept id="p1">](#coledispatchdriver__operator__eq)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Copies the source value into the <ph id="ph1">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::operator LPDISPATCH<ept id="p1">](#coledispatchdriver__operator_lpdispatch)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Accesses the underlying <ph id="ph1">`IDispatch`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::m_bAutoRelease<ept id="p1">](#coledispatchdriver__m_bautorelease)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Specifies whether to release the <ph id="ph1">`IDispatch`</ph> during <ph id="ph2">`ReleaseDispatch`</ph> or object destruction.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleDispatchDriver::m_lpDispatch<ept id="p1">](#coledispatchdriver__m_lpdispatch)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Indicates the pointer to the <ph id="ph1">`IDispatch`</ph> interface attached to this <ph id="ph2">`COleDispatchDriver`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`COleDispatchDriver`</ph> does not have a base class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>OLE dispatch interfaces provide access to an object's methods and properties.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Member functions of <ph id="ph1">`COleDispatchDriver`</ph> attach, detach, create, and release a dispatch connection of type <ph id="ph2">`IDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Other member functions use variable argument lists to simplify calling <bpt id="p1">**</bpt>IDispatch::Invoke<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This class can be used directly, but it is generally used only by classes created by the Add Class wizard.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you create new C++ classes by importing a type library, the new classes are derived from <ph id="ph1">`COleDispatchDriver`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`COleDispatchDriver`</ph>, see the following articles:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Automation Clients<ept id="p1">](../../mfc/automation-clients.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Automation Servers<ept id="p1">](../../mfc/automation-servers.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdisp.h</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__attachdispatch"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::AttachDispatch</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`AttachDispatch`</ph> member function to attach an <ph id="ph2">`IDispatch`</ph> pointer to the <ph id="ph3">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing the IDispatch Interface<ept id="p1">](http://msdn.microsoft.com/en-us/0e171f7f-0022-4e9b-ac8e-98192828e945)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Pointer to an OLE <ph id="ph1">`IDispatch`</ph> object to be attached to the <ph id="ph2">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Specifies whether the dispatch is to be released when this object goes out of scope.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This function releases any <ph id="ph1">`IDispatch`</ph> pointer that is already attached to the <ph id="ph2">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCOleContainer#3<ept id="p2">](../../mfc/codesnippet/cpp/coledispatchdriver-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__coledispatchdriver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::COleDispatchDriver</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Pointer to an OLE <ph id="ph1">`IDispatch`</ph> object to be attached to the <ph id="ph2">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Specifies whether the dispatch is to be released when this object goes out of scope.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Reference to an existing <ph id="ph1">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The form <ph id="ph1">`COleDispatchDriver`</ph>( <ph id="ph2">`LPDISPATCH``lpDispatch`</ph>, <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept><ph id="ph3">`bAutoRelease`</ph><ph id="ph4"> = </ph><bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>) connects the <bpt id="p3">[</bpt>IDispatch<ept id="p3">](http://msdn.microsoft.com/en-us/0e171f7f-0022-4e9b-ac8e-98192828e945)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The form <ph id="ph1">`COleDispatchDriver`</ph>( <bpt id="p1">**</bpt>const<ept id="p1">**</ept><ph id="ph2">`COleDispatchDriver`</ph><ph id="ph3">&amp; </ph><ph id="ph4">`dispatchSrc`</ph>) copies an existing <ph id="ph5">`COleDispatchDriver`</ph> object and increments the reference count.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The form <ph id="ph1">`COleDispatchDriver`</ph>( ) creates a <ph id="ph2">`COleDispatchDriver`</ph> object but does not connect the <ph id="ph3">`IDispatch`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Before using <ph id="ph1">`COleDispatchDriver`</ph>( ) without arguments, you should connect an <ph id="ph2">`IDispatch`</ph> to it using either <bpt id="p1">[</bpt>COleDispatchDriver::CreateDispatch<ept id="p1">](#coledispatchdriver__createdispatch)</ept> or <bpt id="p2">[</bpt>COleDispatchDriver::AttachDispatch<ept id="p2">](#coledispatchdriver__attachdispatch)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing the IDispatch Interface<ept id="p1">](http://msdn.microsoft.com/en-us/0e171f7f-0022-4e9b-ac8e-98192828e945)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>COleDispatchDriver::CreateDispatch<ept id="p1">](#coledispatchdriver__createdispatch)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__createdispatch"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::CreateDispatch</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Creates an <bpt id="p1">[</bpt>IDispatch<ept id="p1">](http://msdn.microsoft.com/en-us/0e171f7f-0022-4e9b-ac8e-98192828e945)</ept> interface object and attaches it to the <ph id="ph1">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Class ID of the <ph id="ph1">`IDispatch`</ph> connection object to be created.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Pointer to an OLE exception object, which will hold the status code resulting from the creation.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Pointer to the programmatic identifier, such as "Excel.Document.5", of the automation object for which the dispatch object is to be created.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Nonzero on success; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCOleContainer#4<ept id="p2">](../../mfc/codesnippet/cpp/coledispatchdriver-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__detachdispatch"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::DetachDispatch</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Detaches the current <ph id="ph1">`IDispatch`</ph> connection from this object.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A pointer to the previously attached OLE <ph id="ph1">`IDispatch`</ph> object.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IDispatch`</ph> is not released.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`LPDISPATCH`</ph> type, see <bpt id="p1">[</bpt>Implementing the IDispatch Interface<ept id="p1">](http://msdn.microsoft.com/en-us/0e171f7f-0022-4e9b-ac8e-98192828e945)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCOleContainer#5<ept id="p2">](../../mfc/codesnippet/cpp/coledispatchdriver-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__getproperty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::GetProperty</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Gets the object property specified by <ph id="ph1">`dwDispID`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Identifies the property to be retrieved.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Specifies the property to be retrieved.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For possible values, see the Remarks section for <bpt id="p1">[</bpt>COleDispatchDriver::InvokeHelper<ept id="p1">](#coledispatchdriver__invokehelper)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Address of the variable that will receive the property value.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>It must match the type specified by <ph id="ph1">`vtProp`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCOleContainer#6<ept id="p2">](../../mfc/codesnippet/cpp/coledispatchdriver-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__invokehelper"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::InvokeHelper</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Calls the object method or property specified by <ph id="ph1">`dwDispID`</ph>, in the context specified by <ph id="ph2">`wFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Identifies the method or property to be invoked.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Flags describing the context of the call to <bpt id="p1">**</bpt>IDispatch::Invoke<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see the <ph id="ph1">`wFlags`</ph> parameter in <bpt id="p1">[</bpt>IDispatch::Invoke<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms221479\(v=vs.85\).aspx)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Specifies the type of the return value.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For possible values, see the Remarks section.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Address of the variable that will receive the property value or return value.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>It must match the type specified by <ph id="ph1">`vtRet`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string of bytes specifying the types of the parameters following <ph id="ph1">`pbParamInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>...<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Variable list of parameters, of types specified in <ph id="ph1">`pbParamInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pbParamInfo`</ph> parameter specifies the types of the parameters passed to the method or property.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The variable list of arguments is represented by <bpt id="p1">**</bpt>...<ept id="p1">**</ept> in the syntax declaration.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Possible values for the <ph id="ph1">`vtRet`</ph> argument are taken from the <ph id="ph2">`VARENUM`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Possible values are as follows:</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Symbol</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Return Type</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>short<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>long<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>float<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>double<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CY<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DATE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_DISPATCH<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_VARIANT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UNKNOWN<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pbParamInfo`</ph> argument is a space-separated list of <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>One or more of these values, separated by spaces (not commas), specifies the function's parameter list.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Possible values are listed with the <bpt id="p1">[</bpt>EVENT_CUSTOM<ept id="p1">](event-maps.md#event_custom)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This function converts the parameters to <bpt id="p1">**</bpt>VARIANTARG<ept id="p1">**</ept> values, then invokes the <bpt id="p2">[</bpt>IDispatch::Invoke<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms221479\(v=vs.85\).aspx)</ept> method.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If the call to <ph id="ph1">`Invoke`</ph> fails, this function will throw an exception.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`SCODE`</ph> (status code) returned by <bpt id="p1">**</bpt>IDispatch::Invoke<ept id="p1">**</ept> is <ph id="ph2">`DISP_E_EXCEPTION`</ph>, this function throws a <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept> object; otherwise it throws a <bpt id="p3">[</bpt>COleDispatchException<ept id="p3">](../../mfc/reference/coledispatchexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>VARIANTARG<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept>, <bpt id="p2">[</bpt>Implementing the IDispatch Interface<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms221037\(v=vs.85\).aspx)</ept>, <bpt id="p3">[</bpt>IDispatch::Invoke<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms221479\(v=vs.85\).aspx)</ept>, and <bpt id="p4">[</bpt>Structure of COM Error Codes<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/ms690088)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>COleDispatchDriver::CreateDispatch<ept id="p1">](#coledispatchdriver__createdispatch)</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__m_bautorelease"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::m_bAutoRelease</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the COM object accessed by <bpt id="p2">[</bpt>m_lpDispatch<ept id="p2">](#coledispatchdriver__m_lpdispatch)</ept> will be automatically released when <bpt id="p3">[</bpt>ReleaseDispatch<ept id="p3">](#coledispatchdriver__releasedispatch)</ept> is called or when this <ph id="ph1">`COleDispatchDriver`</ph> object is destroyed.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`m_bAutoRelease`</ph> is set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> in the constructor.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>For more information on releasing COM objects, see <bpt id="p1">[</bpt>Implementing Reference Counting<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms693431)</ept> and <bpt id="p2">[</bpt>IUnknown::Release<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms682317)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCOleContainer#9<ept id="p2">](../../mfc/codesnippet/cpp/coledispatchdriver-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__m_lpdispatch"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::m_lpDispatch</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The pointer to the <ph id="ph1">`IDispatch`</ph> interface attached to this <ph id="ph2">`COleDispatchDriver`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_lpDispatch`</ph> data member is a public variable of type <ph id="ph2">`LPDISPATCH`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IDispatch<ept id="p1">](http://msdn.microsoft.com/en-us/0e171f7f-0022-4e9b-ac8e-98192828e945)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>COleDispatchDriver::AttachDispatch<ept id="p1">](#coledispatchdriver__attachdispatch)</ept>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__operator__eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::operator =</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Copies the source value into the <ph id="ph1">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A pointer to an existing <ph id="ph1">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__operator_lpdispatch"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::operator LPDISPATCH</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Accesses the underlying <ph id="ph1">`IDispatch`</ph> pointer of the <ph id="ph2">`COleDispatchDriver`</ph> object.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCOleContainer#8<ept id="p2">](../../mfc/codesnippet/cpp/coledispatchdriver-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__releasedispatch"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::ReleaseDispatch</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Releases the <ph id="ph1">`IDispatch`</ph> connection.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing the IDispatch Interface<ept id="p1">](http://msdn.microsoft.com/en-us/0e171f7f-0022-4e9b-ac8e-98192828e945)</ept></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If auto release has been set for this connection, this function calls <bpt id="p1">**</bpt>IDispatch::Release<ept id="p1">**</ept> before releasing the interface.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>COleDispatchDriver::AttachDispatch<ept id="p1">](#coledispatchdriver__attachdispatch)</ept>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coledispatchdriver__setproperty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  COleDispatchDriver::SetProperty</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Sets the OLE object property specified by <ph id="ph1">`dwDispID`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Identifies the property to be set.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Specifies the type of the property to be set.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>For possible values, see the Remarks section for <bpt id="p1">[</bpt>COleDispatchDriver::InvokeHelper<ept id="p1">](#coledispatchdriver__invokehelper)</ept>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>...<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A single parameter of the type specified by <ph id="ph1">`vtProp`</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCOleContainer#7<ept id="p2">](../../mfc/codesnippet/cpp/coledispatchdriver-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFC Sample CALCDRIV<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MFC Sample ACDUAL<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CCmdTarget Class<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>