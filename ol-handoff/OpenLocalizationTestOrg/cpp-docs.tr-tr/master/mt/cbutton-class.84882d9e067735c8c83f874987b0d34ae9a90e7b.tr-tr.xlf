<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a76955105b5a743ec2155d2c54cf954610561ad9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cbutton-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5d3d165249e4a23364cedef6c9aaec39d5d13ee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">895164a45e65f5678e6e586ec1d195cf4a99ef4e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CButton Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CButton Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the functionality of Windows button controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::CButton<ept id="p1">](#cbutton__cbutton)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::Create<ept id="p1">](#cbutton__create)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creates the Windows button control and attaches it to the <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::DrawItem<ept id="p1">](#cbutton__drawitem)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Override to draw an owner-drawn <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetBitmap<ept id="p1">](#cbutton__getbitmap)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the bitmap previously set with <bpt id="p1">[</bpt>SetBitmap<ept id="p1">](#cbutton__setbitmap)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetButtonStyle<ept id="p1">](#cbutton__getbuttonstyle)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Retrieves information about the button control style.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetCheck<ept id="p1">](#cbutton__getcheck)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieves the check state of a button control.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetCursor<ept id="p1">](#cbutton__getcursor)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the cursor image previously set with <bpt id="p1">[</bpt>SetCursor<ept id="p1">](#cbutton__setcursor)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetIcon<ept id="p1">](#cbutton__geticon)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the icon previously set with <bpt id="p1">[</bpt>SetIcon<ept id="p1">](#cbutton__seticon)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetIdealSize<ept id="p1">](#cbutton__getidealsize)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Retrieves the ideal size of the button control.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetImageList<ept id="p1">](#cbutton__getimagelist)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Retrieves the image list of the button control.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetNote<ept id="p1">](#cbutton__getnote)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Retrieves the note component of the current command link control.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetNoteLength<ept id="p1">](#cbutton__getnotelength)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Retrieves the length of the note text for the current command link control.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetSplitGlyph<ept id="p1">](#cbutton__getsplitglyph)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Retrieves the glyph associated with the current split button control.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetSplitImageList<ept id="p1">](#cbutton__getsplitimagelist)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Retrieves the image list for the current split button control.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetSplitInfo<ept id="p1">](#cbutton__getsplitinfo)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Retrieves information that defines the current split button control.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetSplitSize<ept id="p1">](#cbutton__getsplitsize)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle of the drop-down component of the current split button control.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetSplitStyle<ept id="p1">](#cbutton__getsplitstyle)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Retrieves the split button styles that define the current split button control.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetState<ept id="p1">](#cbutton__getstate)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Retrieves the check state, highlight state, and focus state of a button control.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::GetTextMargin<ept id="p1">](#cbutton__gettextmargin)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Retrieves the text margin of the button control.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetBitmap<ept id="p1">](#cbutton__setbitmap)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Specifies a bitmap to be displayed on the button.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetButtonStyle<ept id="p1">](#cbutton__setbuttonstyle)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Changes the style of a button.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetCheck<ept id="p1">](#cbutton__setcheck)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Sets the check state of a button control.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetCursor<ept id="p1">](#cbutton__setcursor)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Specifies a cursor image to be displayed on the button.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetDropDownState<ept id="p1">](#cbutton__setdropdownstate)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Sets the drop-down state of the current split button control.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetIcon<ept id="p1">](#cbutton__seticon)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Specifies an icon to be displayed on the button.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetImageList<ept id="p1">](#cbutton__setimagelist)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Sets the image list of the button control.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetNote<ept id="p1">](#cbutton__setnote)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Sets the note on the current command link control.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetSplitGlyph<ept id="p1">](#cbutton__setsplitglyph)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Associates a specified glyph with the current split button control.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetSplitImageList<ept id="p1">](#cbutton__setsplitimagelist)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Associates an image list with the current split button control.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetSplitInfo<ept id="p1">](#cbutton__setsplitinfo)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Specifies information that defines the current split button control.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetSplitSize<ept id="p1">](#cbutton__setsplitsize)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Sets the bounding rectangle of the drop-down component of the current split button control.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetSplitStyle<ept id="p1">](#cbutton__setsplitstyle)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Sets the style of the current split button control.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetState<ept id="p1">](#cbutton__setstate)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Sets the highlighting state of a button control.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CButton::SetTextMargin<ept id="p1">](#cbutton__settextmargin)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Sets the text margin of the button control.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A button control is a small, rectangular child window that can be clicked on and off.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Buttons can be used alone or in groups and can either be labeled or appear without text.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A button typically changes appearance when the user clicks it.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Typical buttons are the check box, radio button, and pushbutton.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CButton`</ph> object can become any of these, according to the <bpt id="p1">[</bpt>button style<ept id="p1">](../../mfc/reference/button-styles.md)</ept> specified at its initialization by the <bpt id="p2">[</bpt>Create<ept id="p2">](#cbutton__create)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In addition, the <bpt id="p1">[</bpt>CBitmapButton<ept id="p1">](../../mfc/reference/cbitmapbutton-class.md)</ept> class derived from <ph id="ph1">`CButton`</ph> supports creation of button controls labeled with bitmap images instead of text.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CBitmapButton`</ph> can have separate bitmaps for a button's up, down, focused, and disabled states.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can create a button control either from a dialog template or directly in your code.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In both cases, first call the constructor <ph id="ph1">`CButton`</ph> to construct the <ph id="ph2">`CButton`</ph> object; then call the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function to create the Windows button control and attach it to the <ph id="ph3">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Construction can be a one-step process in a class derived from <ph id="ph1">`CButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Write a constructor for the derived class and call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> from within the constructor.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you want to handle Windows notification messages sent by a button control to its parent (usually a class derived from <bpt id="p1">[</bpt>CDialog<ept id="p1">](../../mfc/reference/cdialog-class.md)</ept>), add a message-map entry and message-handler member function to the parent class for each message.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Each message-map entry takes the following form:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_<ept id="p1">**</ept>Notification <bpt id="p2">**</bpt>(<ept id="p2">**</ept><ph id="ph1">`id`</ph>, <ph id="ph2">`memberFxn`</ph><bpt id="p3">**</bpt>)<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`id`</ph> specifies the child window ID of the control sending the notification and <ph id="ph2">`memberFxn`</ph> is the name of the parent member function you have written to handle the notification.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The parent's function prototype is as follows:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg<ept id="p1">**</ept> <ph id="ph1">`void`</ph> <ph id="ph2">`memberFxn`</ph> <bpt id="p2">**</bpt>( );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Potential message-map entries are as follows:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Map entry</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Sent to parent when...</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_BN_CLICKED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The user clicks a button.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_BN_DOUBLECLICKED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The user double-clicks a button.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If you create a <ph id="ph1">`CButton`</ph> object from a dialog resource, the <ph id="ph2">`CButton`</ph> object is automatically destroyed when the user closes the dialog box.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If you create a <ph id="ph1">`CButton`</ph> object within a window, you may need to destroy it.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you create the <ph id="ph1">`CButton`</ph> object on the heap by using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> function, you must call <bpt id="p2">**</bpt>delete<ept id="p2">**</ept> on the object to destroy it when the user closes the Windows button control.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If you create the <ph id="ph1">`CButton`</ph> object on the stack, or it is embedded in the parent dialog object, it is destroyed automatically.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__cbutton"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::CButton</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#1<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::Create</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Creates the Windows button control and attaches it to the <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Specifies the button control's text.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Specifies the button control's style.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Apply any combination of <bpt id="p1">[</bpt>button styles<ept id="p1">](../../mfc/reference/button-styles.md)</ept> to the button.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Specifies the button control's size and position.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>It can be either a <ph id="ph1">`CRect`</ph> object or a <ph id="ph2">`RECT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Specifies the button control's parent window, usually a <ph id="ph1">`CDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>It must not be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Specifies the button control's ID.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You construct a <ph id="ph1">`CButton`</ph> object in two steps.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>First, call the constructor and then call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, which creates the Windows button control and attaches it to the <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> style is given, Windows sends the button control all the messages required to activate and show the button.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Apply the following <bpt id="p1">[</bpt>window styles<ept id="p1">](../../mfc/reference/window-styles.md)</ept> to a button control:</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_CHILD<ept id="p1">**</ept> Always</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> Usually</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_DISABLED<ept id="p1">**</ept> Rarely</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_GROUP<ept id="p1">**</ept> To group controls</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_TABSTOP<ept id="p1">**</ept> To include the button in the tabbing order</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#2<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__drawitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::DrawItem</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Called by the framework when a visual aspect of an owner-drawn button has changed.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A long pointer to a <bpt id="p1">[</bpt>DRAWITEMSTRUCT<ept id="p1">](../../mfc/reference/drawitemstruct-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The structure contains information about the item to be drawn and the type of drawing required.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>An owner-drawn button has the <bpt id="p1">**</bpt>BS_OWNERDRAW<ept id="p1">**</ept> style set.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Override this member function to implement drawing for an owner-drawn <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The application should restore all graphics device interface (GDI) objects selected for the display context supplied in <ph id="ph1">`lpDrawItemStruct`</ph> before the member function terminates.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Also see the <bpt id="p1">[</bpt>BS_<ept id="p1">](../../mfc/reference/button-styles.md)</ept> style values.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#3<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getbitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetBitmap</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Call this member function to get the handle of a bitmap, previously set with <bpt id="p1">[</bpt>SetBitmap<ept id="p1">](#cbutton__setbitmap)</ept>, that is associated with a button.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A handle to a bitmap.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no bitmap is previously specified.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#4<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getbuttonstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetButtonStyle</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Retrieves information about the button control style.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Returns the button styles for this <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This function returns only the <bpt id="p1">[</bpt>BS_<ept id="p1">](../../mfc/reference/button-styles.md)</ept> style values, not any of the other window styles.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#5<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getcheck"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetCheck</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Retrieves the check state of a radio button or check box.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The return value from a button control created with the <bpt id="p1">**</bpt>BS_AUTOCHECKBOX<ept id="p1">**</ept>, <bpt id="p2">**</bpt>BS_AUTORADIOBUTTON<ept id="p2">**</ept>, <bpt id="p3">**</bpt>BS_AUTO3STATE<ept id="p3">**</ept>, <bpt id="p4">**</bpt>BS_CHECKBOX<ept id="p4">**</ept>, <bpt id="p5">**</bpt>BS_RADIOBUTTON<ept id="p5">**</ept>, or <bpt id="p6">**</bpt>BS_3STATE<ept id="p6">**</ept> style is one of the following values:</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BST_UNCHECKED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Button state is unchecked.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BST_CHECKED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Button state is checked.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BST_INDETERMINATE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Button state is indeterminate (applies only if the button has the <bpt id="p1">**</bpt>BS_3STATE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>BS_AUTO3STATE<ept id="p2">**</ept> style).</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If the button has any other style, the return value is <bpt id="p1">**</bpt>BST_UNCHECKED<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#6<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getcursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetCursor</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Call this member function to get the handle of a cursor, previously set with <bpt id="p1">[</bpt>SetCursor<ept id="p1">](#cbutton__setcursor)</ept>, that is associated with a button.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A handle to a cursor image.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no cursor is previously specified.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#7<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__geticon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetIcon</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Call this member function to get the handle of an icon, previously set with <bpt id="p1">[</bpt>SetIcon<ept id="p1">](#cbutton__seticon)</ept>, that is associated with a button.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A handle to an icon.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no icon is previously specified.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#8<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_8.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getidealsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetIdealSize</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Retrieves the ideal size for the button control.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>psize<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A pointer to the current size of the button.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">**</bpt>BCM_GETIDEALSIZE<ept id="p1">**</ept> message, as described in the <bpt id="p2">[</bpt>Buttons<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775943)</ept> section of the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getimagelist"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetImageList</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Call this method to get the image list from the button control.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A pointer to the image list of the <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">**</bpt>BCM_GETIMAGELIST<ept id="p1">**</ept> message, as described in the <bpt id="p2">[</bpt>Buttons<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775943)</ept> section of the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getnote"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetNote</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Retrieves the note text associated with the current command link control.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`lpszNote`</ph></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Pointer to a buffer, which the caller is responsible for allocating and deallocating.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>If the return value is <ph id="ph1">`true`</ph>, the buffer contains the note text that is associated with the current command link control; otherwise, the buffer is unchanged.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>[in, out] <ph id="ph1">`cchNote`</ph></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A pointer to an unsigned integer variable.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>When this method is called, the variable contains the size of the buffer specified by the <ph id="ph1">`lpszNote`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>When this method returns, if the return value is <ph id="ph1">`true`</ph> the variable contains the size of the note associated with the current command link control.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If the return value is <ph id="ph1">`false`</ph>, the variable contains the buffer size required to contain the note.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>In the first overload, a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/using-cstring.md)</ept> object that contains the note text associated with the current command link control.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>In the second overload, <ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_COMMANDLINK`</ph> or <ph id="ph2">`BS_DEFCOMMANDLINK`</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>BCM_GETNOTE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775965)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getnotelength"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetNoteLength</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Retrieves the length of the note text for the current command link control.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The length of the note text, in 16-bit Unicode characters, for the current command link control.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_COMMANDLINK`</ph> or <ph id="ph2">`BS_DEFCOMMANDLINK`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>BCM_GETNOTELENGTH<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775967)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getsplitglyph"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetSplitGlyph</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Retrieves the glyph associated with the current split button control.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The glyph character associated with the current split button control.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A glyph is the physical representation of a character in a particular font.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>For example, a split button control might be decorated with the glyph of the Unicode check mark character (U+2713).</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_SPLITBUTTON`</ph> or <ph id="ph2">`BS_DEFSPLITBUTTON`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>This method initializes the <ph id="ph1">`mask`</ph> member of a <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id="ph2">`BCSIF_GLYPH`</ph> flag, and then sends that structure in the <bpt id="p2">[</bpt>BCM_GETSPLITINFO<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id="ph3">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>When the message function returns, this method retrieves the glyph from the <ph id="ph1">`himlGlyph`</ph> member of the structure.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getsplitimagelist"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetSplitImageList</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Retrieves the <bpt id="p1">[</bpt>image list<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> for the current split button control.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_SPLITBUTTON`</ph> or <ph id="ph2">`BS_DEFSPLITBUTTON`</ph>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>This method initializes the <ph id="ph1">`mask`</ph> member of a <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id="ph2">`BCSIF_IMAGE`</ph> flag, and then sends that structure in the <bpt id="p2">[</bpt>BCM_GETSPLITINFO<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id="ph3">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>When the message function returns, this method retrieves the image list from the <ph id="ph1">`himlGlyph`</ph> member of the structure.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getsplitinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetSplitInfo</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Retrieves parameters that determine how Windows draws the current split button control.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`pInfo`</ph></source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure that receives information about the current split button control.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The caller is responsible for allocating the structure.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_SPLITBUTTON`</ph> or <ph id="ph2">`BS_DEFSPLITBUTTON`</ph>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>BCM_GETSPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getsplitsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetSplitSize</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle of the drop-down component of the current split button control.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`pSize`</ph></source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure that receives the description of a rectangle.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_SPLITBUTTON`</ph> or <ph id="ph2">`BS_DEFSPLITBUTTON`</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>When the split button control is expanded, it can display a drop-down component such as a list control or pager control.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>This method retrieves the bounding rectangle that contains the drop-down component.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>This method initializes the <ph id="ph1">`mask`</ph> member of a <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id="ph2">`BCSIF_SIZE`</ph> flag, and then sends that structure in the <bpt id="p2">[</bpt>BCM_GETSPLITINFO<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id="ph3">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>When the message function returns, this method retrieves the bounding rectangle from the <ph id="ph1">`size`</ph> member of the structure.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getsplitstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetSplitStyle</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Retrieves the split button styles that define the current split button control.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>A bitwise combination of split button styles.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`uSplitStyle`</ph> member of the <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_SPLITBUTTON`</ph> or <ph id="ph2">`BS_DEFSPLITBUTTON`</ph>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The split button styles specify the alignment, aspect ratio, and graphical format with which Windows draws a split button icon.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>This method initializes the <ph id="ph1">`mask`</ph> member of a <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id="ph2">`BCSIF_STYLE`</ph> flag, and then sends that structure in the <bpt id="p2">[</bpt>BCM_GETSPLITINFO<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id="ph3">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>When the message function returns, this method retrieves the split button styles from the <ph id="ph1">`uSplitStyle`</ph> member of the structure.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__getstate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetState</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Retrieves the state of a button control.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>A bit field that contains the combination of values that indicate the current state of a button control.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The following table lists possible values.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Button State</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>0x0000</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The initial state.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>0x0001</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The button control is checked.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>0x0002</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The state is indeterminate (only possible when the button control has three states).</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>0x0004</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The button control is pressed.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>0x0008</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The button control has the focus.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>A button control with the <ph id="ph1">`BS_3STATE`</ph> or <ph id="ph2">`BS_AUTO3STATE`</ph> button style creates a check box that has a third state that is named the indeterminate state.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The indeterminate state indicates that the check box is neither checked nor unchecked.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#9<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_9.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__gettextmargin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::GetTextMargin</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Call this method to get the text margin of the <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>A pointer to the text margin of the <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Returns the text margin.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">**</bpt>BCM_GETTEXTMARGIN<ept id="p1">**</ept> message, as described in the <bpt id="p2">[</bpt>Buttons<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775943)</ept> section of the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setbitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetBitmap</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Call this member function to associate a new bitmap with the button.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The handle of a bitmap.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The handle of a bitmap previously associated with the button.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The bitmap will be automatically placed on the face of the button, centered by default.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>If the bitmap is too large for the button, it will be clipped on either side.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>You can choose other alignment options, including the following:</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_TOP<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_LEFT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_RIGHT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_CENTER<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_BOTTOM<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_VCENTER<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">[</bpt>CBitmapButton<ept id="p1">](../../mfc/reference/cbitmapbutton-class.md)</ept>, which uses four bitmaps per button, <ph id="ph1">`SetBitmap`</ph> uses only one bitmap per the button.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>When the button is pressed, the bitmap appears to shift down and to the right.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>You are responsible for releasing the bitmap when you are done with it.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#4<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setbuttonstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetButtonStyle</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Changes the style of a button.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>button style<ept id="p1">](../../mfc/reference/button-styles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Specifies whether the button is to be redrawn.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>A nonzero value redraws the button.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>A 0 value does not redraw the button.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The button is redrawn by default.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`GetButtonStyle`</ph> member function to retrieve the button style.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The low-order word of the complete button style is the button-specific style.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#5<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setcheck"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetCheck</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Sets or resets the check state of a radio button or check box.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Specifies the check state.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>This parameter can be one of the following:</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BST_UNCHECKED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Set the button state to unchecked.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BST_CHECKED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Set the button state to checked.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BST_INDETERMINATE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Set the button state to indeterminate.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>This value can be used only if the button has the <bpt id="p1">**</bpt>BS_3STATE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>BS_AUTO3STATE<ept id="p2">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>This member function has no effect on a pushbutton.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#6<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setcursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetCursor</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Call this member function to associate a new cursor with the button.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The handle of a cursor.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The handle of a cursor previously associated with the button.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The cursor will be automatically placed on the face of the button, centered by default.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>If the cursor is too large for the button, it will be clipped on either side.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>You can choose other alignment options, including the following:</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_TOP<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_LEFT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_RIGHT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_CENTER<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_BOTTOM<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_VCENTER<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">[</bpt>CBitmapButton<ept id="p1">](../../mfc/reference/cbitmapbutton-class.md)</ept>, which uses four bitmaps per button, <ph id="ph1">`SetCursor`</ph> uses only one cursor per the button.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>When the button is pressed, the cursor appears to shift down and to the right.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#7<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setdropdownstate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetDropDownState</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Sets the drop-down state of the current split button control.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`fDropDown`</ph></source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to set <ph id="ph2">`BST_DROPDOWNPUSHED`</ph> state; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>A split button control has a style of <ph id="ph1">`BS_SPLITBUTTON`</ph> or <ph id="ph2">`BS_DEFSPLITBUTTON`</ph> and consists of a button and a drop-down arrow to its right.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Button Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775951)</ept>.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Usually, the drop-down state is set when the user clicks the drop-down arrow.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Use this method to programmatically set the drop-down state of the control.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The drop-down arrow is drawn shaded to indicate the state.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>BCM_SETDROPDOWNSTATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775973)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The following code example defines the variable, <ph id="ph1">`m_splitButton`</ph>, that is used to programmatically access the split button control.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>This variable is used in the following example.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton_s1#1<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_10.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The following code example sets the state of the split button control to indicate that the drop-down arrow is pushed.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton_s1#6<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_11.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setelevationrequired"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetElevationRequired</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Sets the state of the current button control to <ph id="ph1">`elevation required`</ph>, which is necessary for the control to display an elevated security icon.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`fElevationRequired`</ph></source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to set <ph id="ph2">`elevation required`</ph> state; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>If a button or command link control requires elevated security permission to perform an action, set the control to <ph id="ph1">`elevation required`</ph> state.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Subsequently, Windows displays the User Account Control (UAC) shield icon on the control.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>For more information, see "User Account Control" at <bpt id="p1">[</bpt>MSDN<ept id="p1">](http://go.microsoft.com/fwlink/linkid=18507)</ept>.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>BCM_SETSHIELD<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775979)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__seticon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetIcon</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Call this member function to associate a new icon with the button.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>The handle of an icon.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The handle of an icon previously associated with the button.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The icon will be automatically placed on the face of the button, centered by default.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>If the icon is too large for the button, it will be clipped on either side.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>You can choose other alignment options, including the following:</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_TOP<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_LEFT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_RIGHT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_CENTER<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_BOTTOM<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BS_VCENTER<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">[</bpt>CBitmapButton<ept id="p1">](../../mfc/reference/cbitmapbutton-class.md)</ept>, which uses four bitmaps per button, <ph id="ph1">`SetIcon`</ph> uses only one icon per the button.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>When the button is pressed, the icon appears to shift down and to the right.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#8<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_8.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setimagelist"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetImageList</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Call this method to set the image list of the <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>A pointer to the new image list.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> on success, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> on failure.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">**</bpt>BCM_SETIMAGELIST<ept id="p1">**</ept> message, as described in the <bpt id="p2">[</bpt>Buttons<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775943)</ept> section of the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setnote"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetNote</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Sets the note text for the current command link control.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszNote`</ph></source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Pointer to a Unicode string that is set as the note text for the command link control.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_COMMANDLINK`</ph> or <ph id="ph2">`BS_DEFCOMMANDLINK`</ph>.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>BCM_SETNOTE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775977)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>The following code example defines the variable, <ph id="ph1">`m_cmdLink`</ph>, that is used to programmatically access the command link control.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>This variable is used in the following example.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton_s1#1<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_10.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>The following code example sets the note text for the command link control.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton_s1#7<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_12.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setsplitglyph"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetSplitGlyph</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Associates a specified glyph with the current split button control.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`chGlyph`</ph></source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>A character that specifies the glyph to use as the split button drop-down arrow.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Use this method only with controls that have the button style <ph id="ph1">`BS_SPLITBUTTON`</ph> or <ph id="ph2">`BS_DEFSPLITBUTTON`</ph>.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>A glyph is the physical representation of a character in a particular font.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`chGlyph`</ph>parameter is not used as the glyph, but is instead used to select a glyph from a set of system-defined glyphs.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The default drop-down arrow glyph is specified by a character '6', and resembles the Unicode character BLACK DOWN-POINTING TRIANGLE (U+25BC).</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>This method initializes the <ph id="ph1">`mask`</ph> member of a <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id="ph2">`BCSIF_GLYPH`</ph> flag and the <ph id="ph3">`himlGlyph`</ph> member with the <ph id="ph4">`chGlyph`</ph> parameter, and then sends that structure in the <bpt id="p2">[</bpt>BCM_GETSPLITINFO<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id="ph5">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setsplitimagelist"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetSplitImageList</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Associates an <bpt id="p1">[</bpt>image list<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> with the current split button control.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pSplitImageList`</ph></source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> object to assign to the current split button control.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_SPLITBUTTON`</ph> or <ph id="ph2">`BS_DEFSPLITBUTTON`</ph>.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>This method initializes the <ph id="ph1">`mask`</ph> member of a <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id="ph2">`BCSIF_IMAGE`</ph> flag and the <ph id="ph3">`himlGlyph`</ph> member with the <ph id="ph4">`pSplitImageList`</ph> parameter, and then sends that structure in the <bpt id="p2">[</bpt>BCM_GETSPLITINFO<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id="ph5">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setsplitinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetSplitInfo</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Specifies parameters that determine how Windows draws the current split button control.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pInfo`</ph></source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure that defines the current split button control.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_SPLITBUTTON`</ph> or <ph id="ph2">`BS_DEFSPLITBUTTON`</ph>.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>BCM_SETSPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775981)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>The following code example defines the variable, <ph id="ph1">`m_splitButton`</ph>, that is used to programmatically access the split button control.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton_s1#1<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_10.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>The following code example changes the glyph that is used for the split button drop-down arrow.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>The example substitutes an up-pointing triangle glyph for the default down-pointing triangle glyph.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>The glyph that is displayed depends on the character that you specify in the <ph id="ph1">`himlGlyph`</ph> member of the <ph id="ph2">`BUTTON_SPLITINFO`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>The down-pointing triangle glyph is specified by a character '6' and the up-pointing triangle glyph is specified by a character '5'.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>For comparison, see the convenience method, <bpt id="p1">[</bpt>CButton::SetSplitGlyph<ept id="p1">](#cbutton__setsplitglyph)</ept>.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton_s1#4<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_13.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setsplitsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetSplitSize</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Sets the bounding rectangle of the drop-down component of the current split button control.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pSize`</ph></source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure that describes a bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_SPLITBUTTON`</ph> or <ph id="ph2">`BS_DEFSPLITBUTTON`</ph>.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>When the split button control is expanded, it can display a drop-down component such as a list control or pager control.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>This method specifies the size of the bounding rectangle that contains the drop-down component.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>This method initializes the <ph id="ph1">`mask`</ph> member of a <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id="ph2">`BCSIF_SIZE`</ph> flag and the <ph id="ph3">`size`</ph> member with the <ph id="ph4">`pSize`</ph> parameter, and then sends that structure in the <bpt id="p2">[</bpt>BCM_GETSPLITINFO<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id="ph5">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The following code example defines the variable, <ph id="ph1">`m_splitButton`</ph>, that is used to programmatically access the split button control.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>This variable is used in the following example.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton_s1#1<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_10.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>The following code example doubles the size of the split button drop-down arrow.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton_s1#5<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_14.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setsplitstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetSplitStyle</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Sets the style of the current split button control.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`uSplitStyle`</ph></source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>A bitwise combination of split button styles.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`uSplitStyle`</ph> member of the <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Use this method only with controls whose button style is <ph id="ph1">`BS_SPLITBUTTON`</ph> or <ph id="ph2">`BS_DEFSPLITBUTTON`</ph>.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>The split button styles specify the alignment, aspect ratio, and graphical format with which Windows draws a split button icon.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`uSplitStyle`</ph> member of the <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>This method initializes the <ph id="ph1">`mask`</ph> member of a <bpt id="p1">[</bpt>BUTTON_SPLITINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id="ph2">`BCSIF_STYLE`</ph> flag and the <ph id="ph3">`uSplitStyle`</ph> member with the <ph id="ph4">`uSplitStyle`</ph> parameter, and then sends that structure in the <bpt id="p2">[</bpt>BCM_GETSPLITINFO<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id="ph5">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>The following code example defines the variable, <ph id="ph1">`m_splitButton`</ph>, that is used to programmatically access the split button control.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton_s1#1<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_10.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>The following code example sets the style of the split button drop-down arrow.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BCSS_ALIGNLEFT`</ph> style displays the arrow on the left side of the button, and the <ph id="ph2">`BCSS_STRETCH`</ph> style retains the drop-down arrow's proportions when you resize the button.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton_s1#3<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_15.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__setstate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetState</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Sets whether a button control is highlighted or not.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bHighlight<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Specifies whether the button is to be highlighted.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>A nonzero value highlights the button; a 0 value removes any highlighting.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Highlighting affects the exterior of a button control.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>It has no effect on the check state of a radio button or check box.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>A button control is automatically highlighted when the user clicks and holds the left mouse button.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>The highlighting is removed when the user releases the mouse button.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CButton#9<ept id="p2">](../../mfc/reference/codesnippet/cpp/cbutton-class_9.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbutton__settextmargin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CButton::SetTextMargin</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Call this method to set the text margin of the <ph id="ph1">`CButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>A pointer to the new text margin.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Returns TRUE on success, FALSE on failure.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">**</bpt>BCM_SETTEXTMARGIN<ept id="p1">**</ept> message, as described in the <bpt id="p2">[</bpt>Buttons<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775943)</ept> section of the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd Class<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWnd Class<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CComboBox Class<ept id="p1">](../../mfc/reference/ccombobox-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CEdit Class<ept id="p1">](../../mfc/reference/cedit-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CListBox Class<ept id="p1">](../../mfc/reference/clistbox-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CScrollBar Class<ept id="p1">](../../mfc/reference/cscrollbar-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CStatic Class<ept id="p1">](../../mfc/reference/cstatic-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CBitmapButton Class<ept id="p1">](../../mfc/reference/cbitmapbutton-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDialog Class<ept id="p1">](../../mfc/reference/cdialog-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>