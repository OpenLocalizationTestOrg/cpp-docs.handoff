<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e514a0c271f494fdedda1c35156771a99d5986d4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\support-for-cpp11-14-17-features-modern-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e8dc6134079be865826891428487fae2c589b4b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8f7e69ddc1f79b98897cee83f9fdf5292b9e24c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Support For C++11-14-17 Features (Modern C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Support For C++11/14/17 Features (Modern C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes C++11/14/17 features in Visual C++.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>C++11Feature List</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Visual C++ implements the vast majority of features in the <bpt id="p1">[</bpt>C++11 core language specification<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235092)</ept>, as well as many C++14 Library features and some features proposed for C++17.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table lists C++11/14/17 core language features and their implementation status in Visual C++ in Visual Studio 2010, <ph id="ph1">[!INCLUDE[cpp_dev11_long](../build/includes/cpp_dev11_long_md.md)]</ph>, and <ph id="ph2">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph>, and Visual Studio 2015.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>C++11 Core Language Features Table</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>C++11 Core Language Features</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Visual Studio 2010</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Visual Studio 2012</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Rvalue references <bpt id="p1">[</bpt>v0.1<ept id="p1">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1610.html)</ept>, <bpt id="p2">[</bpt>v1.0<ept id="p2">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2118.html)</ept>, <bpt id="p3">[</bpt>v2.0<ept id="p3">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2844.html)</ept>, <bpt id="p4">[</bpt>v2.1<ept id="p4">](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html)</ept>, <bpt id="p5">[</bpt>v3.0<ept id="p5">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3053.html)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>v2.0</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>v2.1*</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>v2.1*</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>v3.0</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>ref-qualifiers</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Non-static data member initializers</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Variadic templates <bpt id="p1">[</bpt>v0.9<ept id="p1">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2242.pdf)</ept>, <bpt id="p2">[</bpt>v1.0<ept id="p2">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2555.pdf)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initializer lists</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>static_assert</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>auto <bpt id="p1">[</bpt>v0.9<ept id="p1">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1984.pdf)</ept>, <bpt id="p2">[</bpt>v1.0<ept id="p2">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2546.htm)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>v1.0</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>v1.0</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>v1.0</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Trailing return types</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Lambdas <bpt id="p1">[</bpt>v0.9<ept id="p1">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2550.pdf)</ept>, <bpt id="p2">[</bpt>v1.0<ept id="p2">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2658.pdf)</ept>, <bpt id="p3">[</bpt>v1.1<ept id="p3">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2927.pdf)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>v1.0</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>v1.1</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>v1.1</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>decltype <bpt id="p1">[</bpt>v1.0<ept id="p1">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2343.pdf)</ept>, <bpt id="p2">[</bpt>v1.1<ept id="p2">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>v1.0</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>v1.1**</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>v1.1</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Right angle brackets</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Default template arguments for function templates</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Expression SFINAE</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Alias templates</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Extern templates</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>nullptr</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Strongly typed enums</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Forward declared enums</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Attributes</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>constexpr</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Alignment</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>TR1</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Delegating constructors</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Inheriting constructors</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Explicit conversion operators</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>char16_t/char32_t</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Unicode string literals</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Raw string literals</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Universal character names in literals</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>User-defined literals</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Standard-layout and trivial types</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Defaulted and deleted functions</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Yes*</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Extended friend declarations</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Extended sizeof</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Inline namespaces</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Unrestricted unions</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Local and unnamed types as template arguments</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Range-based for-loop</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>override and final <bpt id="p1">[</bpt>v0.8<ept id="p1">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2928.htm)</ept>, <bpt id="p2">[</bpt>v0.9<ept id="p2">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm)</ept>, <bpt id="p3">[</bpt>v1.0<ept id="p3">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm)</ept></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Minimal GC support</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>noexcept</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>C++11 Core Language Features Table: Concurrency</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>C++11 Core Language Features: Concurrency</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Visual Studio 2010</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Visual Studio 2012</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Reworded sequence points</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>N/A</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>N/A</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>N/A</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Atomics</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Strong compare and exchange</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Bidirectional fences</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Memory model</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>N/A</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>N/A</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>N/A</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Data-dependency ordering</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Data-dependency ordering: function annotation</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>exception_ptr</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>quick_exit</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Atomics in signal handlers</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Thread-local storage</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Magic statics</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>C++11 Core Language Features: C99</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>C++11 Core Language Features: C99</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Visual Studio 2010</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Visual Studio 2012</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>__func</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>C99 preprocessor</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>long long</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Extended integer types</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>N/A</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>N/A</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>N/A</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>N/A</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>C++ 14 Core Language Features</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Feature</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Visual Studio 2013</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Tweaked wording for contextual conversions</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Binary literals</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>auto and decltype(auto) return types</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>init-captures</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Generic lambdas</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Variable templates</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Extended constexpr</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>NSDMIs for aggregates</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Avoiding/fusing allocations</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>[[deprecated]] attributes</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Sized allocation</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Digit separators</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>C++17 Proposed Core Language Features</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Feature</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Visual Studio 2013</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>New rules for auto with braced-init-lists</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Terse static assert</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>typename in template template-parameters</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Removing trigraphs</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Nested namespace definitions</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>N4259 std::uncaught_exceptions()</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>N4261 Fixing qualification conversions</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>N4266 Attributes for namespaces and enumerators</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>N4267 u8 character literals</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>N4268 Allowing more non-type template args</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>N4295 Fold expressions</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>await/resume</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Guide to the Feature Tables</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Rvalue References</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The version designations (v0.1, v1.0, v2.0, v2.1, v3.0) in the following descriptions are invented just to show the evolution of C++11.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The standard itself does not use them.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>N1610 "Clarification of Initialization of Class Objects by rvalues"<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235093)</ept> was an early attempt to enable move semantics without rvalue references.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>For the sake of this discussion, let’s call it "rvalue references v0.1".</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>It was superseded by "rvalue references <bpt id="p1">[</bpt>v1.0<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235094)</ept>."</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>"Rvalue references <bpt id="p1">[</bpt>v2.0<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235095)</ept>", which is what the work in Visual C++ in Visual Studio 2010 was based on, prohibits rvalue references from binding to lvalues and thereby fixes a major safety problem.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>"Rvalue references <bpt id="p1">[</bpt>v2.1<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235096)</ept>" refines this rule.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Consider <ph id="ph1">`vector&lt;string&gt;::push_back()`</ph>, which has the overloads <ph id="ph2">`push_back(const string&amp;)`</ph> and <ph id="ph3">`push_back(string&amp;&amp;)`</ph>, and the call <ph id="ph4">`v.push_back("strval")`</ph>.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The expression <ph id="ph1">`"strval"`</ph> is a string literal, and is an lvalue.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>(Other literals—for example, the integer 1729—are rvalues, but string literals are special because they are arrays.)  The "rvalue references v2.0" rules said that <ph id="ph1">`string&amp;&amp;`</ph> cannot bind to <ph id="ph2">`"strval"`</ph> because <ph id="ph3">`"strval"`</ph> is an lvalue and therefore, <ph id="ph4">`push_back(const string&amp;)`</ph> is the only viable overload.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>This would create a temporary <ph id="ph1">`std::string`</ph>, copy it into the vector, and then destroy the temporary <ph id="ph2">`std::string`</ph>, which wasn’t very efficient.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The "rvalue references v2.1" rules recognize that binding <ph id="ph1">`string&amp;&amp;`</ph> to <ph id="ph2">`"strval"`</ph> would create a temporary <ph id="ph3">`std::string`</ph>, and that temporary is an rvalue.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Therefore, both <ph id="ph1">`push_back(const string&amp;)`</ph> and <ph id="ph2">`push_back(string&amp;&amp;)`</ph> are viable, and <ph id="ph3">`push_back(string&amp;&amp;)`</ph> is preferred.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>A temporary <ph id="ph1">`std::string`</ph> is constructed, and then moved into the vector.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>This is more efficient.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>"Rvalue references <bpt id="p1">[</bpt>v3.0<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235097)</ept>" adds new rules to automatically generate move constructors and move assignment operators under certain conditions.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>This is implemented in Visual Studio 2015.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Lambdas</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>After <bpt id="p1">[</bpt>lambda functions<ept id="p1">](../cpp/lambda-expressions-in-cpp.md)</ept> were voted into the Working Paper (<bpt id="p2">[</bpt>version "0.9"<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkID=235098)</ept>) and mutable lambdas were added (<bpt id="p3">[</bpt>version "1.0"<ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkID=235099)</ept>), the Standardization Committee overhauled the wording.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>This produced lambdas  <bpt id="p1">[</bpt>version "1.1"<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235100)</ept>, which is now fully supported.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The lambdas v1.1 wording clarifies what should occur in corner cases like referring to static members or nested lambdas.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>This fixes problems that are triggered by complex lambdas.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Additionally, stateless lambdas are now convertible to function pointers.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>This is not in the N2927 wording, but it is counted as part of lambdas v1.1 anyway.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C++11<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235092)</ept><bpt id="p2">**</bpt>5.1.2 [expr.prim.lambda]/6<ept id="p2">**</ept> has this description: "The closure type for a <ph id="ph1">`lambda-expression`</ph> with no <ph id="ph2">`lambda-capture`</ph> has a public non-virtual non-explicit const conversion function to pointer to function having the same parameter and return types as the closure type’s function call operator.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The value returned by this conversion function shall be the address of a function that, when invoked, has the same eﬀect as invoking the closure type’s function call operator."</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>(The <ph id="ph1">[!INCLUDE[cpp_dev11_long](../build/includes/cpp_dev11_long_md.md)]</ph> implementation is even better than that, because it makes stateless lambdas convertible to function pointers that have arbitrary calling conventions.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>This is important when you are using APIs that expect things like <ph id="ph1">`__stdcall`</ph> function pointers.)</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>decltype</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>After decltype was voted into the Working Paper (<bpt id="p1">[</bpt>version 1.0<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235101)</ept>), it received a small but important fix at the last minute (<bpt id="p2">[</bpt>version 1.1<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkID=235102)</ept>).</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>This is of great interest to programmers who work on the STL and Boost.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Strongly Typed/Forward Declared enums</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Strongly typed enums<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235103)</ept> were partially supported in Visual C++ in Visual Studio 2010 (specifically, the part about explicitly specified underlying types).</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>These are now fully implemented in Visual Studio, and the C++11 semantics for <bpt id="p1">[</bpt>forward declared enums<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235104)</ept> are also fully implemented.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Alignment</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The Core Language keywords <ph id="ph1">`alignas`/`alignof`</ph> from the <bpt id="p1">[</bpt>alignment proposal<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235105)</ept> that was voted into the Working Paper are implemented in Visual Studio 2015.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Visual C++ in Visual Studio 2010 had <ph id="ph1">`aligned_storage`</ph> from TR1.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>added <ph id="ph1">`aligned_union`</ph> and <ph id="ph2">`std::align()`</ph> to the Standard Library and significant issues were fixed in <ph id="ph3">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Standard-Layout and Trivial Types</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The exposed changes from <bpt id="p1">[</bpt>N2342 "POD's Revisited; Resolving Core Issue 568 (Revision 5)"<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235106)</ept> are the additions of <ph id="ph1">`is_trivial`</ph> and <ph id="ph2">`is_standard_layout`</ph> to the Standard Template Library's <ph id="ph3">`&lt;type_traits&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>(N2342 reworked a lot of the Core Language wording, but no compiler changes were required.)  These type traits were available in Visual C++ in Visual Studio 2010, but they just duplicated <ph id="ph1">`is_pod`</ph>.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Therefore, the table earlier in this document said "No" support.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>They are now powered by compiler hooks that are designed to give accurate answers.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The STL's <bpt id="p1">[</bpt>common_type&lt;&gt;<ept id="p1">](../standard-library/common-type-class.md)</ept> received a much-needed fix in <ph id="ph1">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The C++11 specification for <ph id="ph1">`common_type&lt;&gt;`</ph> had unexpected and undesired consequences; in particular, it makes <ph id="ph2">`common_type&lt;int, int&gt;::type`</ph> return <ph id="ph3">`int&amp;&amp;`</ph>.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph> implements the <bpt id="p1">[</bpt>Proposed Resolution for Library Working Group issue 2141<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=320075)</ept>, which makes <ph id="ph2">`common_type&lt;int, int&gt;::type`</ph> return <ph id="ph3">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>As a side-effect of this change, the identity case no longer works (<ph id="ph1">`common_type&lt;T&gt;`</ph> does not always result in type <ph id="ph2">`T`</ph>).</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>This complies with the Proposed Resolution, but it breaks any code that relied on the previous behavior.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>If you require an identity type trait, don't use the non-standard <ph id="ph1">`std::identity`</ph> that's defined in <ph id="ph2">`&lt;type_traits&gt;`</ph> because it won't work for <ph id="ph3">`&lt;void&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Instead, implement your own identity type trait to suit your needs.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Here's an example:</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>For other breaking changes, see <bpt id="p1">[</bpt>Visual C++ change history 2003 - 2015<ept id="p1">](../porting/visual-cpp-change-history-2003-2015.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Defaulted and Deleted Functions</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>These are now supported, but with this exception: For defaulted functions, the use of <ph id="ph1">`=default`</ph> to request member-wise move constructors and move assignment operators is not supported.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The copies and moves don't interact precisely like the Standard says they should—for example, deletion of moves is specified to also suppress copies, but <ph id="ph1">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph> does not.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>For information about how to use defaulted and deleted functions, see <bpt id="p1">[</bpt>Functions<ept id="p1">](../cpp/functions-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>override and final</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>This went through a short but complicated evolution.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Originally, in <bpt id="p1">[</bpt>version 0.8<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235108)</ept>, there were [[<ph id="ph1">`override`</ph>]], [[<ph id="ph2">`hiding`</ph>]], and [[<ph id="ph3">`base_check`</ph>]] attributes.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Then in <bpt id="p1">[</bpt>version 0.9<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235109)</ept>, the attributes were eliminated and replaced with contextual keywords.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Finally, in <bpt id="p1">[</bpt>version 1.0<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235110)</ept>, they were reduced to "<ph id="ph1">`final`</ph>" on classes, and "<ph id="ph2">`override`</ph>" and "<ph id="ph3">`final`</ph>" on functions.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>This makes it an Ascended Extension because Visual C++ in Visual Studio 2010 already supported this "<ph id="ph1">`override`</ph>" syntax on functions, and had semantics reasonably close to those in C++11.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>"<ph id="ph1">`final`</ph>" was also supported, but under the different spelling "sealed".</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The Standard spelling and semantics of "<ph id="ph1">`override`</ph>" and "<ph id="ph2">`final`</ph>" are now completely supported.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>override Specifier<ept id="p1">](../cpp/override-specifier.md)</ept> and <bpt id="p2">[</bpt>final Specifier<ept id="p2">](../cpp/final-specifier.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Atomics, and More</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Atomics<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235111)</ept>, <bpt id="p2">[</bpt>strong compare and exchange<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkID=235112)</ept>, <bpt id="p3">[</bpt>bidirectional fences<ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkID=235113)</ept>, and <bpt id="p4">[</bpt>data-dependency ordering<ept id="p4">](http://go.microsoft.com/fwlink/p/?LinkID=235114)</ept> specify Standard Library machinery, which are now implemented.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Related STL headers:<ept id="p1">**</ept> <bpt id="p2">[</bpt><ph id="ph1">\&lt;</ph>atomic&gt;<ept id="p2">](../standard-library/atomic.md)</ept>, <bpt id="p3">[</bpt><ph id="ph2">\&lt;</ph>chrono&gt;<ept id="p3">](../standard-library/chrono.md)</ept>, <bpt id="p4">[</bpt>&lt;condition_variable&gt;<ept id="p4">](../standard-library/condition-variable.md)</ept>, <bpt id="p5">[</bpt><ph id="ph3">\&lt;</ph>future&gt;<ept id="p5">](../standard-library/future.md)</ept>, <bpt id="p6">[</bpt><ph id="ph4">\&lt;</ph>mutex&gt;<ept id="p6">](../standard-library/mutex.md)</ept>, <bpt id="p7">[</bpt><ph id="ph5">\&lt;</ph>ratio&gt;<ept id="p7">](../standard-library/ratio.md)</ept>, <bpt id="p8">[</bpt>&lt;scoped_allocator&gt;<ept id="p8">](../standard-library/scoped-allocator.md)</ept>, and <bpt id="p9">[</bpt><ph id="ph6">\&lt;</ph>thread&gt;<ept id="p9">](../standard-library/thread.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>C99 __func<ph id="ph1">\_\_</ph> and Preprocessor Rules</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>The table <bpt id="p1">[</bpt>C++11 Core Language Features: C99<ept id="p1">](#c99table)</ept> lists "Partial" implementation for two items.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>For the pre-defined identifier <ph id="ph1">`__func__`</ph>, "Partial" is listed because support is provided for the non-Standard extensions <ph id="ph2">`__FUNCDNAME__`</ph>, <ph id="ph3">`__FUNCSIG__`</ph>, and <ph id="ph4">`__FUNCTION__`</ph>.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Predefined Macros<ept id="p1">](../preprocessor/predefined-macros.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>For C99 preprocessor rules, "Partial" is listed because <bpt id="p1">*</bpt>variadic macros<ept id="p1">*</ept> are supported.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Variadic Macros<ept id="p1">](../preprocessor/variadic-macros.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Standard Library Features</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>That covers the Core Language.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>As for the C++11 Standard Library, we don't have a pretty comparison table of features, but <ph id="ph1">[!INCLUDE[cpp_dev11_long](../build/includes/cpp_dev11_long_md.md)]</ph> implemented it, with two exceptions.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>First, when a library feature depended on functionality that was missing in the compiler, it was either simulated—for example, simulated variadic templates for <ph id="ph1">`make_shared&lt;T&gt;()`</ph>—or it wasn't implemented.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>(There were only a few cases—most notably, <ph id="ph1">`&lt;initializer_list&gt;`</ph>—which were fully implemented in <ph id="ph2">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph>.)  With very few exceptions, C99 was implemented in <ph id="ph3">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph> and C++ wrapper headers provided.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>C99 library support in Visual Studio 2013<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=321308)</ept>.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Here's a partial list of the changes in <ph id="ph1">[!INCLUDE[cpp_dev11_long](../build/includes/cpp_dev11_long_md.md)]</ph> and <ph id="ph2">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Emplacement:<ept id="p1">**</ept> As required by C++11, <ph id="ph1">`emplace()`/`emplace_front()`/`emplace_back()`/`emplace_hint()`/`emplace_after()`</ph> are implemented in all containers for "arbitrary" numbers of arguments (see the "Simulated variadics" section).</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`vector&lt;T&gt;`</ph> has "<ph id="ph2">`template &lt;typename... Args&gt; void emplace_back(Args&amp;&amp;... args)`</ph>", which directly constructs an element of type T at the back of the vector from an arbitrary number of arbitrary arguments, perfectly forwarded.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>This can be more efficient than <ph id="ph1">`push_back(T&amp;&amp;)`</ph>, which would involve an extra move construction and destruction.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Variadics:<ept id="p1">**</ept> <ph id="ph1">[!INCLUDE[cpp_dev11_long](../build/includes/cpp_dev11_long_md.md)]</ph> had a scheme for simulating variadic templates.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph>, the simulations are gone and <bpt id="p1">**</bpt>variadics are fully implemented<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>If your code relies on the old simulated variadics behavior, you have to fix it.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>However, the switch to real variadic templates has <bpt id="p1">**</bpt>improved compile times<ept id="p1">**</ept> and <bpt id="p2">**</bpt>reduced compiler memory consumption<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Explicit conversion operators:<ept id="p1">**</ept> In the Core Language, explicit conversion operators are a general feature—for example, you can have <ph id="ph1">`explicit operator MyClass()`</ph>.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>However, the Standard Library currently uses only one form: <ph id="ph1">`explicit operator bool()`</ph>, which makes classes safely Boolean-testable.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>(Plain "<ph id="ph1">`operator bool()`</ph>" is notoriously dangerous.) Previously, Visual C++ simulated <ph id="ph2">`explicit operator bool()`</ph> with <ph id="ph3">`operator pointer-to-member()`</ph>, which led to various headaches and slight inefficiencies.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Now, this "fake bool" workaround is completely removed.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Randomness:<ept id="p1">**</ept> <ph id="ph1">`uniform_int_distribution`</ph> is now perfectly unbiased, and <ph id="ph2">`shuffle()`</ph> is implemented in <ph id="ph3">`&lt;algorithm&gt;`</ph>, which directly accepts Uniform Random Number Generators like <ph id="ph4">`mersenne_twister`</ph>.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Resistance to overloaded address-of operators:<ept id="p1">**</ept> C++98/03 prohibited an element of an STL container from overloading its address-of operator.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>This is what classes like <ph id="ph1">`CComPtr`</ph> do, so that helper classes like <ph id="ph2">`CAdapt`</ph> were required to shield the STL from such overloads.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>During the development of Visual C++ in Visual Studio 2010, STL changes made it reject overloaded address-of operators in even more situations.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>C++11 changed the requirements to make overloaded address-of operators acceptable.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>C++11, and Visual C++ in Visual Studio 2010, provide the helper function <ph id="ph1">`std::addressof()`</ph>, which can get the true address of an object regardless of operator overloading.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Before Visual C++ in Visual Studio 2010 was released, we attempted to replace occurrences of "<ph id="ph1">`&amp;elem`</ph>" with "<ph id="ph2">`std::addressof(elem)`</ph>", which is appropriately resistant.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>went further, so that classes that overload their address-of operator should be usable throughout the STL.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>went beyond C++11 in several ways:</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SCARY iterators:<ept id="p1">**</ept> As permitted but not required by the C++11 Standard, SCARY iterators have been implemented, as described by <bpt id="p2">[</bpt>N2911 "Minimizing Dependencies within Generic Classes for Faster and Smaller Programs"<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkID=235115)</ept> and <bpt id="p3">[</bpt>N2980 "SCARY Iterator Assignment and Initialization, Revision 1"<ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkID=235116)</ept>.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Filesystem:<ept id="p1">**</ept> The <ph id="ph1">`&lt;filesystem&gt;`</ph> header from <bpt id="p2">[</bpt>the TR2 proposal<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkID=235117)</ept> has been added.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>It offers <ph id="ph1">`recursive_directory_iterator`</ph> and other interesting features.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Before work on TR2 was frozen because C++0x was running very late and was changing to C++11, the 2006 proposal was derived from <bpt id="p1">[</bpt>Boost.Filesystem V2<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=235118)</ept>.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>It later evolved into Boost.Filesystem V3, which is implemented in Visual Studio 2015.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>And a major optimization!</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>All of our containers are now optimally small given their current representations.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>This refers to the container objects themselves, not to their pointed-to contents.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`std::vector`</ph> contains three raw pointers.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>In Visual C++ in Visual Studio 2010, x86 release mode, <ph id="ph1">`std::vector`</ph> was 16 bytes.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[cpp_dev11_long](../build/includes/cpp_dev11_long_md.md)]</ph>, it is 12 bytes, which is optimally small.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>This is a big deal—if you have 100,000 vectors in your program, <ph id="ph1">[!INCLUDE[cpp_dev11_long](../build/includes/cpp_dev11_long_md.md)]</ph> saves you 400,000 bytes.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Decreased memory usage saves both space and time.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>This was achieved by avoiding the storage of empty allocators and comparators, because <ph id="ph1">`std::allocator`</ph> and <ph id="ph2">`std::less`</ph> are stateless.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>(These optimizations are enabled for custom allocators/comparators too, as long as they are stateless.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Obviously, storage of stateful allocators/comparators cannot be avoided, but those are very rare.)</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>implemented some key C++14 library features:</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>"Transparent operator functors" <ph id="ph1">`less&lt;&gt;`</ph>, <ph id="ph2">`greater&lt;&gt;`</ph>, <ph id="ph3">`plus&lt;&gt;`</ph>, <ph id="ph4">`multiplies&lt;&gt;`</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>and</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`rbegin()`/`rend()`</ph>, and <ph id="ph2">`crbegin()`/`crend()`</ph> non-member functions.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Welcome Back to C++</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>C++ Language Reference</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Range-based for Statement (C++)</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Visual C++ Team Blog</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>What's New for Visual C++</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Visual C++ change history 2003 - 2015</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>