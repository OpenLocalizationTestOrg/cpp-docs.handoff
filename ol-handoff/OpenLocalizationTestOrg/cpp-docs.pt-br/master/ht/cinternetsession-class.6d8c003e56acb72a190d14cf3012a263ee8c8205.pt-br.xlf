<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dcefe64c88dc4f09f9435691ed19f9aa23304b4a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cinternetsession-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d13fc260fc9c80c753cfd8d4a3707e2b59a7da67</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7683c5cdd20ab281a9651d86023c2137d839555</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CInternetSession Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CInternetSession Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creates and initializes a single or several simultaneous Internet sessions and, if necessary, describes your connection to a proxy server.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CInternetSession::CInternetSession</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CInternetSession`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CInternetSession::Close</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Closes the Internet connection when the Internet session is terminated.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CInternetSession::EnableStatusCallback</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Establishes a status callback routine.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetContext</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Closes the Internet connection when the Internet session is terminated.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetCookie</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns cookies for the specified URL and all its parent URLs.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetCookieLength</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieves the variable specifying the length of the cookie stored in the buffer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetFtpConnection</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Opens an FTP session with a server.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Logs on the user.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetGopherConnection</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Opens a gopher server for an application that is trying to open a connection.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetHttpConnection</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Opens an HTTP server for an application that is trying to open a connection.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CInternetSession::OnStatusCallback</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Updates the status of an operation when status callback is enabled.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CInternetSession::OpenURL</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Parses and opens a URL.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CInternetSession::SetCookie</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Sets a cookie for the specified URL.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CInternetSession::SetOption</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Sets options for the Internet session.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CInternetSession::operator HINTERNET</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A handle to the current Internet session.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If your Internet connection must be maintained for the duration of an application, you can create a <ph id="ph1">`CInternetSession`</ph> member of the class <bpt id="p1">[</bpt>CWinApp<ept id="p1">](../../mfc/reference/cwinapp-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Once you have established an Internet session, you can call <bpt id="p1">[</bpt>OpenURL<ept id="p1">](#cinternetsession__openurl)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>then parses the URL for you by calling the global function <bpt id="p1">[</bpt>AfxParseURL<ept id="p1">](http://msdn.microsoft.com/library/505c717e-aa52-4106-8522-eedff3d9bbae)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Regardless of its protocol type, <ph id="ph1">`CInternetSession`</ph> interprets the URL and manages it for you.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It can handle requests for local files identified with the URL resource "file://".</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>will return a pointer to a <bpt id="p1">[</bpt>CStdioFile<ept id="p1">](../../mfc/reference/cstdiofile-class.md)</ept> object if the name you pass it is a local file.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you open a URL on an Internet server using <ph id="ph1">`OpenURL`</ph>, you can read information from the site.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you want to perform service-specific (for example, HTTP, FTP, or gopher) actions on files located on a server, you must establish the appropriate connection with that server.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To open a particular kind of connection directly to a particular service, use one of the following member functions:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetGopherConnection<ept id="p1">](#cinternetsession__getgopherconnection)</ept> to open a connection to a gopher service.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetHttpConnection<ept id="p1">](#cinternetsession__gethttpconnection)</ept> to open a connection to an HTTP service.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetFtpConnection<ept id="p1">](#cinternetsession__getftpconnection)</ept> to open a connection to an FTP service.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SetOption<ept id="p1">](#cinternetsession__setoption)</ept> allows you to set the query options of your session, such as time-out values, number of retries, and so on.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>member functions <bpt id="p1">[</bpt>SetCookie<ept id="p1">](#cinternetsession__setcookie)</ept>, <bpt id="p2">[</bpt>GetCookie<ept id="p2">](#cinternetsession__getcookie)</ept>, and <bpt id="p3">[</bpt>GetCookieLength<ept id="p3">](#cinternetsession__getcookielength)</ept> provide the means to manage a Win32 cookie database, through which servers and scripts maintain state information about the client workstation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information about basic Internet programming tasks, see the article <bpt id="p1">[</bpt>Internet First Steps: WinInet<ept id="p1">](../../mfc/wininet-basics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For general information about using the MFC WinInet classes, see the article <bpt id="p1">[</bpt>Internet Programming with WinInet<ept id="p1">](../../mfc/win32-internet-extensions-wininet.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>will throw an <bpt id="p1">[</bpt>AfxThrowNotSupportedException<ept id="p1">](exception-processing.md#afxthrownotsupportedexception)</ept> for unsupported service types.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Only the following service types are currently supported: FTP, HTTP, gopher, and file.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxinet.h</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CInternetSession::CInternetSession</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This member function is called when a <ph id="ph1">`CInternetSession`</ph> object is created.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A pointer to a string that identifies the name of the application or entity calling the Internet functions (for example, "Microsoft Internet Browser").</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pstrAgent`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> (the default), the framework calls the global function <bpt id="p2">[</bpt>AfxGetAppName<ept id="p2">](application-information-and-management.md#afxgetappname)</ept>, which returns a null-terminated string containing an application's name.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Some protocols use this string to identify your application to the server.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The context identifier for the operation.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>identifies the operation's status information returned by <bpt id="p1">[</bpt>CInternetSession::OnStatusCallback<ept id="p1">](#cinternetsession__onstatuscallback)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The default is set to 1; however, you can explicitly assign a specific context ID for the operation.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The object and any work it does will be associated with that context ID.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The type of access required.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following are valid values, exactly one of which may be supplied:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INTERNET_OPEN_TYPE_PRECONFIG<ept id="p1">**</ept> Connect using preconfigured settings in the registry.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This access type is set as the default.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To connect through a TIS proxy, set <ph id="ph1">`dwAccessType`</ph> to this value; you then set the registry appropriately.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Connect directly to Internet.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Connect through a CERN proxy.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For information on connecting with different types of proxies, see <bpt id="p1">[</bpt>Steps in a Typical FTP Client Application<ept id="p1">](../../mfc/steps-in-a-typical-ftp-client-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>pstrProxyName</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The name of the preferred CERN proxy if <ph id="ph1">`dwAccessType`</ph> is set as <ph id="ph2">`INTERNET_OPEN_TYPE_PROXY`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>pstrProxyBypass</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing an optional list of server addresses.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>These addresses may be bypassed when using proxy access.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> value is supplied, the bypass list will be read from the registry.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This parameter is meaningful only if <ph id="ph1">`dwAccessType`</ph> is set to <ph id="ph2">`INTERNET_OPEN_TYPE_PROXY`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Indicates various caching options.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The default is set to 0.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The possible values include:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Do not cache the data, either locally or in any gateway servers.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Download operations are satisfied through the persistent cache only.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If the item does not exist in the cache, an appropriate error code is returned.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This flag may be combined with the bitwise <ph id="ph1">`OR`</ph> ( <bpt id="p1">**</bpt>&amp;#124;<ept id="p1">**</ept>) operator.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CInternetSession<ept id="p1">**</ept> is the first Internet function called by an application.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>It initializes internal data structures and prepares for future calls from the application.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If no Internet connection can be opened, <ph id="ph1">`CInternetSession`</ph> throws an <bpt id="p1">[</bpt>AfxThrowInternetException<ept id="p1">](http://msdn.microsoft.com/library/c9645b10-9541-48b2-8b0c-94ca33fed3cb)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFtpFileFind<ept id="p1">](../../mfc/reference/cftpfilefind-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>CInternetSession::Close</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Call this member function when your application has finished using the <ph id="ph1">`CInternetSession`</ph> object.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFtpFileFind<ept id="p1">](../../mfc/reference/cftpfilefind-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CInternetSession::EnableStatusCallback</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Call this member function to enable status callback.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Specifies whether callback is enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If the call fails, determine the cause of the failure by examining the thrown <bpt id="p1">[</bpt>CInternetException<ept id="p1">](../../mfc/reference/cinternetexception-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>When handling status callback, you can provide status about the progress of the operation (such as resolving name, connecting to server, and so on) in the status bar of the application.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Displaying operation status is especially desirable during a long-term operation.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Because callbacks occur during the request's processing, the application should spend as little time as possible in the callback to prevent degradation of data throughput to the network.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For example, putting up a dialog box in a callback may be such a lengthy operation that the server terminates the request.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The status callback cannot be removed as long as any callbacks are pending.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>To handle any operations asynchronously, you must either create your own thread or use the WinInet functions without MFC.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetContext</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Call this member function to get the context value for a particular application session.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The application-defined context Identifier.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>OnStatusCallback<ept id="p1">](#cinternetsession__onstatuscallback)</ept> uses the context ID returned by <bpt id="p2">**</bpt>GetContext<ept id="p2">**</ept> to report the status of a particular application.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For example, when a user activates an Internet request that involves returning status information, the status callback uses the context ID to report status on that particular request.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If the user activates two separate Internet requests that both involve returning status information, <ph id="ph1">`OnStatusCallback`</ph> uses the context identifiers to return status about their corresponding requests.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Consequently, the context identifier is used for all status callback operations, and it is associated with the session until the session is ended.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For more information about asynchronous operations, see the article <bpt id="p1">[</bpt>Internet First Steps: WinInet<ept id="p1">](../../mfc/wininet-basics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetCookie</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 function <bpt id="p1">[</bpt>InternetGetCookie<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa384710)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the URL.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the name of the cookie to get for the specified URL.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In the first overload, a pointer to a string containing the address of the buffer that receives the cookie data.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This value can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In the second overload, a reference to a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object to receive the cookie data.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The variable specifying the size of the <ph id="ph1">`pstrCookieData`</ph> buffer.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the buffer receives the amount of data copied to the <ph id="ph1">`pstrCookieData`</ph> buffer.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pstrCookieData`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, this parameter receives a value that specifies the size of the buffer necessary to copy all the cookie data.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if successful, or <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If the call fails, call the Win32 function <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept> to determine the cause of the error.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The following error values apply:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR_NO_MORE_ITEMS<ept id="p1">**</ept> There is no cookie for the specified URL and all its parents.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR_INSUFFICIENT_BUFFER<ept id="p1">**</ept> The value passed in <ph id="ph1">`dwBufLen`</ph> is insufficient to copy all the cookie data.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The value returned in <ph id="ph1">`dwBufLen`</ph> is the size of the buffer necessary to get all the data.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In the second overload, MFC retrieves the cookie data into the supplied <ph id="ph1">`CString`</ph> object.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetCookieLength</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Call this member function to get the length of the cookie stored in the buffer.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the URL</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the name of the cookie.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DWORD`</ph> value indicating the length of the cookie, stored in the buffer.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Zero if no cookie with the name indicated by <ph id="ph1">`pstrCookieName`</ph> exists.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This value is used by <bpt id="p1">[</bpt>GetCookie<ept id="p1">](#cinternetsession__getcookie)</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetFtpConnection</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Call this member function to establish an FTP connection and get a pointer to a <ph id="ph1">`CFtpConnection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the FTP server name.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string that specifies the name of the user to log in.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the default is anonymous.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string that specifies the password to use to log in.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If both <ph id="ph1">`pstrPassword`</ph> and <ph id="ph2">`pstrUserName`</ph> are <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the default anonymous password is the user's email name.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pstrPassword`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> (or an empty string) but <ph id="ph2">`pstrUserName`</ph> is not <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>, a blank password is used.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The following table describes the behavior for the four possible settings of <ph id="ph1">`pstrUserName`</ph> and <ph id="ph2">`pstrPassword`</ph>:</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Username sent to FTP server</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Password sent to FTP server</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> or " "</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> or " "</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>"anonymous"</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>User's email name</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Non- <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> String</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> or " "</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>" "</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> Non- <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> String</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>ERROR</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>ERROR</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Non- <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> String</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Non- <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> String</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>A number that identifies the TCP/IP port to use on the server.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Specifies passive or active mode for this FTP session.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, it sets the Win32 API <ph id="ph1">`dwFlag`</ph> to <bpt id="p2">**</bpt>INTERNET_FLAG_PASSIVE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CFtpConnection<ept id="p1">](../../mfc/reference/cftpconnection-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>If the call fails, determine the cause of the failure by examining the thrown <bpt id="p1">[</bpt>CInternetException<ept id="p1">](../../mfc/reference/cinternetexception-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>connects to an FTP server, and creates and returns a pointer to a <bpt id="p1">**</bpt>CFTPConnection<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>It does not perform any specific operation on the server.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>If you intend to read or write to files, for example, you must perform those operations as separate steps.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>See the classes <bpt id="p1">[</bpt>CFtpConnection<ept id="p1">](../../mfc/reference/cftpconnection-class.md)</ept> and <bpt id="p2">[</bpt>CFtpFileFind<ept id="p2">](../../mfc/reference/cftpfilefind-class.md)</ept> for information about searching for files, opening files, and reading or writing to files.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>See the article <bpt id="p1">[</bpt>Internet Programming with WinInet<ept id="p1">](../../mfc/win32-internet-extensions-wininet.md)</ept> for steps in performing common FTP connection tasks.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFtpFileFind<ept id="p1">](../../mfc/reference/cftpfilefind-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetGopherConnection</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Call this member function to establish a new gopher connection and get a pointer to a <ph id="ph1">`CGopherConnection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the gopher server name.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the user name.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the access password.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>A number that identifies the TCP/IP port to use on the server.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CGopherConnection<ept id="p1">](../../mfc/reference/cgopherconnection-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>If the call fails, determine the cause of the failure by examining the thrown <bpt id="p1">[</bpt>CInternetException<ept id="p1">](../../mfc/reference/cinternetexception-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>connects to a gopher server, and creates and returns a pointer to a <ph id="ph1">`CGopherConnection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>It does not perform any specific operation on the server.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>If you intend to read or write data, for example, you must perform those operations as separate steps.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>See the classes <bpt id="p1">[</bpt>CGopherConnection<ept id="p1">](../../mfc/reference/cgopherconnection-class.md)</ept>, <bpt id="p2">[</bpt>CGopherFile<ept id="p2">](../../mfc/reference/cgopherfile-class.md)</ept>, and <bpt id="p3">[</bpt>CGopherFileFind<ept id="p3">](../../mfc/reference/cgopherfilefind-class.md)</ept> for information about searching for files, opening files, and reading or writing to files.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For information about browsing an FTP site, see the member function <bpt id="p1">[</bpt>OpenURL<ept id="p1">](#cinternetsession__openurl)</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>See the article <bpt id="p1">[</bpt>Internet Programming with WinInet<ept id="p1">](../../mfc/win32-internet-extensions-wininet.md)</ept> for steps in performing common gopher connection tasks.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>CInternetSession::GetHttpConnection</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Call this member function to establish an HTTP connection and get a pointer to a <ph id="ph1">`CHttpConnection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the HTTP server name.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A number that identifies the TCP/IP port to use on the server.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the user name.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the access password.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>dwflags</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Any combination of the <bpt id="p1">**</bpt>INTERNET_ FLAG_<ph id="ph1">\*</ph><ept id="p1">**</ept> flags.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>See the table in the <bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept> section of <bpt id="p2">[</bpt>CHttpConnection::OpenRequest<ept id="p2">](../../mfc/reference/chttpconnection-class.md#chttpconnection__openrequest)</ept> for a description of <ph id="ph1">`dwFlags`</ph> values.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CHttpConnection<ept id="p1">](../../mfc/reference/chttpconnection-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>If the call fails, determine the cause of the failure by examining the thrown <bpt id="p1">[</bpt>CInternetException<ept id="p1">](../../mfc/reference/cinternetexception-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>connects to an HTTP server, and creates and returns a pointer to a <ph id="ph1">`CHttpConnection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>It does not perform any specific operation on the server.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>If you intend to query an HTTP header, for example, you must perform this operation as a separate step.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>See the classes <bpt id="p1">[</bpt>CHttpConnection<ept id="p1">](../../mfc/reference/chttpconnection-class.md)</ept> and <bpt id="p2">[</bpt>CHttpFile<ept id="p2">](../../mfc/reference/chttpfile-class.md)</ept> for information about operations you can perform by using a connection to an HTTP server.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>For information about browsing an HTTP site, see the member function <bpt id="p1">[</bpt>OpenURL<ept id="p1">](#cinternetsession__openurl)</ept>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>See the article <bpt id="p1">[</bpt>Internet Programming with WinInet<ept id="p1">](../../mfc/win32-internet-extensions-wininet.md)</ept> for steps in performing common HTTP connection tasks.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>CInternetSession::OnStatusCallback</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to update the status when status callback is enabled and an operation is pending.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The context value supplied by the application.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>A status code which indicates why the callback is being made.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept> for a table of possible values.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>A pointer to a buffer containing information pertinent to this callback.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The size of <ph id="ph1">`lpvStatusInformation`</ph>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>You must first call <bpt id="p1">[</bpt>EnableStatusCallback<ept id="p1">](#cinternetsession__enablestatuscallback)</ept> to take advantage of status callback.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dwInternetStatus`</ph> parameter indicates the operation being performed and determines what the contents of <ph id="ph2">`lpvStatusInformation`</ph> will be.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>indicates the length of the data included in <ph id="ph1">`lpvStatusInformation`</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The following status values for <ph id="ph1">`dwInternetStatus`</ph> are defined as follows:</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Looking up the IP address of the name contained in <ph id="ph1">`lpvStatusInformation`</ph>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Successfully found the IP address of the name contained in <ph id="ph1">`lpvStatusInformation`</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Connecting to the socket address ( <bpt id="p1">[</bpt>SOCKADDR<ept id="p1">](../../mfc/reference/sockaddr-structure.md)</ept>) pointed to by <ph id="ph1">`lpvStatusInformation`</ph>.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Successfully connected to the socket address ( <ph id="ph1">`SOCKADDR`</ph>) pointed to by <ph id="ph2">`lpvStatusInformation`</ph>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Sending the information request to the server.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpvStatusInformation`</ph> parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>INTERNET_STATUS_ REQUEST_SENT</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Successfully sent the information request to the server.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpvStatusInformation`</ph> parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Waiting for the server to respond to a request.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpvStatusInformation`</ph> parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Successfully received a response from the server.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpvStatusInformation`</ph> parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Closing the connection to the server.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpvStatusInformation`</ph> parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Successfully closed the connection to the server.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpvStatusInformation`</ph> parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Used by the Win32 API function <bpt id="p1">[</bpt>InternetConnect<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa384363)</ept> to indicate that it has created the new handle.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>This lets the application call the Win32 function <bpt id="p1">[</bpt>InternetCloseHandle<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa384350)</ept> from another thread if the connect is taking too long.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>for more information about these functions.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Successfully terminated this handle value.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Override this member function to require some action before a status callback routine is performed.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Status callbacks need thread-state protection.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>If you are using MFC in a shared library, add the following line to the beginning of your override:</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>NVC_MFCHtmlHttp#8</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For more information about asynchronous operations, see the article <bpt id="p1">[</bpt>Internet First Steps: WinInet<ept id="p1">](../../mfc/wininet-basics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>CInternetSession::OpenURL</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Call this member function to send the specified request to the HTTP server and allow the client to specify additional RFC822, MIME, or HTTP headers to send along with the request.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>pstrURL</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>A pointer to the name of the URL to begin reading.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Only URLs beginning with file:, ftp:, gopher:, or http: are supported.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ASSERTS<ept id="p1">**</ept> if <bpt id="p2">*</bpt>pszURL<ept id="p2">*</ept> is <bpt id="p3">**</bpt>NULL<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>An application-defined value passed with the returned handle in callback.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The flags describing how to handle this connection.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept> for more information about the valid flags.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The valid flags are:</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INTERNET_FLAG_TRANSFER_ASCII<ept id="p1">**</ept> The default.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Transfer the file as ASCII text.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INTERNET_FLAG_TRANSFER_BINARY<ept id="p1">**</ept> Transfer the file as a binary file.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Get the data from the wire even if it is locally cached.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Do not cache the data, either locally or in any gateways.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>This flag is applicable to HTTP requests only.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>It requests secure transactions on the wire with Secure Sockets Layer or PCT.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INTERNET_OPEN_FLAG_USE_EXISTING_CONNECT<ept id="p1">**</ept> If possible, reuse the existing connections to the server for new requests generated by <bpt id="p2">**</bpt>OpenUrl<ept id="p2">**</ept> instead of creating a new session for each connection request.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INTERNET_FLAG_PASSIVE<ept id="p1">**</ept> Used for an FTP site.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Uses passive FTP semantics.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Used with <bpt id="p1">[</bpt>CInternetConnection<ept id="p1">](../../mfc/reference/cinternetconnection-class.md)</ept> of <ph id="ph1">`OpenURL`</ph>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the headers to be sent to the HTTP server.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>dwHeadersLength</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The length, in characters, of the additional headers.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>If this is -1L and <ph id="ph1">`pstrHeaders`</ph> is non- <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, then <ph id="ph2">`pstrHeaders`</ph> is assumed to be zero terminated and the length is calculated.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Returns a file handle for FTP, GOPHER, HTTP, and FILE-type Internet services only.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if parsing was unsuccessful.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The pointer that <ph id="ph1">`OpenURL`</ph> returns depends on <bpt id="p1">*</bpt>pszURL<ept id="p1">*</ept>'s type of service.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The table below illustrates the possible pointers <ph id="ph1">`OpenURL`</ph> can return.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>URL type</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Returns</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>file://</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>CStdioFile</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>http://</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>CHttpFile</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>gopher://</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>CGopherFile</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>ftp://</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>CInternetFile</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`dwFlags`</ph> must include either <bpt id="p1">**</bpt>INTERNET_FLAG_TRANSFER_ASCII<ept id="p1">**</ept> or <bpt id="p2">**</bpt>INTERNET_FLAG_TRANSFER_BINARY<ept id="p2">**</ept>, but not both.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The remaining flags can be combined with the bitwise <ph id="ph1">`OR`</ph> operator ( <bpt id="p1">**</bpt>&amp;#124;<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>, which wraps the Win32 function <bpt id="p1">**</bpt>InternetOpenURL<ept id="p1">**</ept>, allows only downloading, retrieving, and reading the data from an Internet server.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>allows no file manipulation on a remote location, so it requires no <bpt id="p1">[</bpt>CInternetConnection<ept id="p1">](../../mfc/reference/cinternetconnection-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>To use connection-specific (that is, protocol-specific) functions, such as writing to a file, you must open a session, then open a particular kind of connection, then use that connection to open a file in the desired mode.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`CInternetConnection`</ph> for more information about connection-specific functions.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>CInternetSession::operator HINTERNET</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Use this operator to get the Windows handle for the current Internet session.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>CInternetSession::SetCookie</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Sets a cookie for the specified URL.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string that specifies the URL for which the cookie should be set.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the name of the cookie.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the actual string data to associate with the URL.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if successful, or <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>To get the specific error code, call <bpt id="p1">**</bpt>GetLastError.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>InternetSetCookie<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa385107)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>CInternetSession::SetOption</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Call this member function to set options for the Internet session.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The Internet option to set.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Option Flags<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa385328)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>for a list of the possible options.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>A buffer that contains the option setting.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>dwBufferLength</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The length of <ph id="ph1">`lpBuffer`</ph> or the size of <ph id="ph2">`dwValue`</ph>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DWORD`</ph> that contains the option setting.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Indicates various caching options.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The default is set to 0.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The possible values include:</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Do not cache the data, either locally or in any gateway servers.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Download operations are satisfied through the persistent cache only.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>If the item does not exist in the cache, an appropriate error code is returned.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>This flag may be combined with the bitwise <ph id="ph1">`OR`</ph> ( <bpt id="p1">**</bpt>&amp;#124;<ept id="p1">**</ept>) operator.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>If the operation was successful, a value of <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> is returned.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>If an error occurred, a value of <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> is returned.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>If the call fails, the Win32 function <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept> may be called to determine the cause of the error.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>CInternetConnection Class</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>CHttpConnection Class</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>CFtpConnection Class</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>CGopherConnection Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>