<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f3cb06f179a22156a62e842338633b11dc1d3d0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\recalloc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">42fed7b0d73d6152675d1b00d2e742be7d82c7d3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c069fcd79110b5f97a055118e528e7aa901fe4a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_recalloc | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_recalloc</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A combination of <ph id="ph1">`realloc`</ph> and <ph id="ph2">`calloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Reallocates an array in memory and initializes its elements to 0.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Pointer to previously allocated memory block.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Number of elements.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Length in bytes of each element.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>returns a <ph id="ph1">`void`</ph> pointer to the reallocated (and possibly moved) memory block.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If there is not enough available memory to expand the block to the given size, the original block is left unchanged, and <ph id="ph1">`NULL`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the requested size is zero, then the block pointed to by <ph id="ph1">`memblock`</ph> is freed; the return value is <ph id="ph2">`NULL`</ph>, and <ph id="ph3">`memblock`</ph> is left pointing at a freed block.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The return value points to a storage space that is guaranteed to be suitably aligned for storage of any type of object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To get a pointer to a type other than <ph id="ph1">`void`</ph>, use a type cast on the return value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The _<ph id="ph1">`recalloc`</ph> function changes the size of an allocated memory block.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`memblock`</ph> argument points to the beginning of the memory block.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`memblock`</ph> is <ph id="ph2">`NULL`</ph>, <ph id="ph3">\_`recalloc`</ph> behaves the same way as <bpt id="p1">[</bpt>calloc<ept id="p1">](../../c-runtime-library/reference/calloc.md)</ept> and allocates a new block of <ph id="ph4">`num` * `size`</ph> bytes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Each element is initialized to 0.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`memblock`</ph> is not <ph id="ph2">`NULL`</ph>, it should be a pointer returned by a previous call to <ph id="ph3">`calloc`</ph>, <bpt id="p1">[</bpt>malloc<ept id="p1">](../../c-runtime-library/reference/malloc.md)</ept>, or <bpt id="p2">[</bpt>realloc<ept id="p2">](../../c-runtime-library/reference/realloc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Because the new block can be in a new memory location, the pointer returned by _<ph id="ph1">`recalloc`</ph> is not guaranteed to be the pointer passed through the <ph id="ph2">`memblock`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>sets <ph id="ph1">`errno`</ph> to <ph id="ph2">`ENOMEM`</ph> if the memory allocation fails or if the amount of memory requested exceeds <ph id="ph3">`_HEAP_MAXREQ`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For information on this and other error codes, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>calls <ph id="ph1">`realloc`</ph> in order to use the C++ <bpt id="p1">[</bpt>_set_new_mode<ept id="p1">](../../c-runtime-library/reference/set-new-mode.md)</ept> function to set the new handler mode.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The new handler mode indicates whether, on failure, <ph id="ph1">`realloc`</ph> is to call the new handler routine as set by <bpt id="p1">[</bpt>_set_new_handler<ept id="p1">](../../c-runtime-library/reference/set-new-handler.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`realloc`</ph> does not call the new handler routine on failure to allocate memory.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can override this default behavior so that, when _<ph id="ph1">`recalloc`</ph> fails to allocate memory, <ph id="ph2">`realloc`</ph> calls the new handler routine in the same way that the <ph id="ph3">`new`</ph> operator does when it fails for the same reason.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To override the default, call</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>early in the program, or link with NEWMODE.OBJ.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When the application is linked with a debug version of the C run-time libraries, _<ph id="ph1">`recalloc`</ph> resolves to <bpt id="p1">[</bpt>_recalloc_dbg<ept id="p1">](../../c-runtime-library/reference/recalloc-dbg.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about how the heap is managed during the debugging process, see <bpt id="p1">[</bpt>The CRT Debug Heap<ept id="p1">](/visualstudio/debugger/crt-debug-heap-details)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>is marked <ph id="ph1">`__declspec(noalias)`</ph> and <ph id="ph2">`__declspec(restrict)`</ph>, meaning that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>noalias<ept id="p1">](../../cpp/noalias.md)</ept> and <bpt id="p2">[</bpt>restrict<ept id="p2">](../../cpp/restrict.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>stdlib.h&gt; and <ph id="ph1">\&lt;</ph>malloc.h&gt;</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Memory Allocation</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>_recalloc_dbg</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>_aligned_recalloc</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>_aligned_offset_recalloc</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>free</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Link Options</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>