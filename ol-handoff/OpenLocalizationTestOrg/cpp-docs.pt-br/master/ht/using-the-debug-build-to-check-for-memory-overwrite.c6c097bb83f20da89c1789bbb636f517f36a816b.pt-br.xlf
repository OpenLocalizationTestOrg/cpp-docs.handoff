<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb593ed9d4d2841a05183e6cdaebc634e0757b70</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\using-the-debug-build-to-check-for-memory-overwrite.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">664ea18e2d19e848a4653ff3ce8e7b91af45c8dc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06ae5afbe6c1cf9b3859d3cf5743d666a36e6a24</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using the Debug Build to Check for Memory Overwrite | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using the Debug Build to Check for Memory Overwrite</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To use the debug build to check for memory overwrite, you must first rebuild your project for debug.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Then, go to the very beginning of your application's <ph id="ph1">`InitInstance`</ph> function and add the following line:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The debug memory allocator puts guard bytes around all memory allocations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, these guard bytes don't do any good unless you check whether they have been changed (which would indicate a memory overwrite).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Otherwise, this just provides a buffer that might, in fact, allow you to get away with a memory overwrite.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>By turning on the <ph id="ph1">`checkAlwaysMemDF`</ph>, you will force MFC to make a call to the <ph id="ph2">`AfxCheckMemory`</ph> function every time a call to <bpt id="p1">**</bpt>new<ept id="p1">**</ept> or <bpt id="p2">**</bpt>delete<ept id="p2">**</ept> is made.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a memory overwrite was detected, it will generate a TRACE message that looks similar to the following:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you see one of these messages, you need to step through your code to determine where the damage occurred.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To isolate more precisely where the memory overwrite occurred, you can make explicit calls to <ph id="ph1">`AfxCheckMemory`</ph> yourself.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the first ASSERT succeeds and the second one fails, it means that the memory overwrite must have occurred in the function between the two calls.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Depending on the nature of your application, you may find that <ph id="ph1">`afxMemDF`</ph> causes your program to run too slowly to even test.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`afxMemDF`</ph> variable causes <ph id="ph2">`AfxCheckMemory`</ph> to be called for every call to new and delete.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In that case, you should scatter your own calls to <ph id="ph1">`AfxCheckMemory`</ph>( ) as shown above, and try to isolate the memory overwrite that way.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Fixing Release Build Problems</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>