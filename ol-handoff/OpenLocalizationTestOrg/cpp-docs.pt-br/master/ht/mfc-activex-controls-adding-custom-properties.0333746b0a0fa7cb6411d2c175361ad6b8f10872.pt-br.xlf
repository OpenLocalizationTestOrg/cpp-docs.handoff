<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7316fd852d59a2ac4b35fa486658771f10267928</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\mfc-activex-controls-adding-custom-properties.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e55984b8dccdfc72d9bc3e59b64bc02d33a2856</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e00528100fcf8993e6bdb9881eb3c72dfcdf3d4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Adding Custom Properties | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Adding Custom Properties</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Custom properties differ from stock properties in that custom properties are not already implemented by the <ph id="ph1">`COleControl`</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A custom property is used to expose a certain state or appearance of an ActiveX control to a programmer using the control.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article describes how to add a custom property to the ActiveX control using the Add Property Wizard and explains the resulting code modifications.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Topics include:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using the Add Property Wizard to add a custom property</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Add Property Wizard changes for custom properties</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Custom properties come in four varieties of implementation: Member Variable, Member Variable with Notification, Get/Set Methods, and Parameterized.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Member Variable Implementation</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This implementation represents the property's state as a member variable in the control class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use the Member Variable implementation when it is not important to know when the property value changes.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Of the three types, this implementation creates the least amount of support code for the property.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The dispatch map entry macro for member variable implementation is <bpt id="p1">[</bpt>DISP_PROPERTY<ept id="p1">](../mfc/reference/dispatch-maps.md#disp_property)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Member Variable with Notification Implementation</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This implementation consists of a member variable and a notification function created by the Add Property Wizard.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The notification function is automatically called by the framework after the property value changes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use the Member Variable with Notification implementation when you need to be notified after a property value has changed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This implementation requires more time because it requires a function call.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The dispatch map entry macro for this implementation is <bpt id="p1">[</bpt>DISP_PROPERTY_NOTIFY<ept id="p1">](../mfc/reference/dispatch-maps.md#disp_property_notify)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Get/Set Methods Implementation</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This implementation consists of a pair of member functions in the control class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The Get/Set Methods implementation automatically calls the Get member function when the control's user requests the current value of the property and the Set member function when the control's user requests that the property be changed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use this implementation when you need to compute the value of a property during run time, validate a value passed by the control's user before changing the actual property, or implement a read- or write-only property type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The dispatch map entry macro for this implementation is <bpt id="p1">[</bpt>DISP_PROPERTY_EX<ept id="p1">](../mfc/reference/dispatch-maps.md#disp_property_ex)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following section, <bpt id="p1">[</bpt>Using the Add Property Wizard to Add a Custom Property<ept id="p1">](#_core_using_classwizard_to_add_a_custom_property)</ept>, uses the CircleOffset custom property to demonstrate this implementation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Parameterized Implementation</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Parameterized implementation is supported by the Add Property Wizard.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A parameterized property (sometimes called a property array) can be used to access a set of values through a single property of your control.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The dispatch map entry macro for this implementation is <ph id="ph1">`DISP_PROPERTY_PARAM`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information on implementing this type, see <bpt id="p1">[</bpt>Implementing a Parameterized Property<ept id="p1">](../mfc/mfc-activex-controls-advanced-topics.md)</ept> in the article ActiveX Controls: Advanced Topics.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Using the Add Property Wizard to Add a Custom Property</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following procedure demonstrates adding a custom property, CircleOffset, which uses the Get/Set Methods implementation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The CircleOffset custom property allows the control's user to offset the circle from the center of the control's bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The procedure for adding custom properties with an implementation other than Get/Set Methods is very similar.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This same procedure can also be used to add other custom properties you want.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Substitute your custom property name for the CircleOffset property name and parameters.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To add the CircleOffset custom property using the Add Property Wizard</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Load your control's project.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In Class View, expand the library node of your control.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Right-click the interface node for your control (the second node of the library node) to open the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>From the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and then click <bpt id="p2">**</bpt>Add Property<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This opens the <bpt id="p1">[</bpt>Add Property Wizard<ept id="p1">](../ide/names-add-property-wizard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Name<ept id="p1">**</ept> box, type <ph id="ph1">`CircleOffset`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Implementation Type<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Get/Set Methods<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Type<ept id="p1">**</ept> box, select <bpt id="p2">**</bpt>short<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Type unique names for your Get and Set Functions, or accept the default names.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Add Property Wizard Changes for Custom Properties</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When you add the CircleOffset custom property, the Add Property Wizard makes changes to the header (.H) and the implementation (.CPP) files of the control class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following lines are added to the .H file to declare two functions called <ph id="ph1">`GetCircleOffset`</ph> and <ph id="ph2">`SetCircleOffset`</ph>:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#25</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following line is added to your control's .IDL file:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#26</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This line assigns the CircleOffset property a specific ID number, taken from the method's position in the methods and properties list of the Add Property Wizard.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In addition, the following line is added to the dispatch map (in the .CPP file of the control class) to map the CircleOffset property to the control's two handler functions:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#27</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Finally, the implementations of the <ph id="ph1">`GetCircleOffset`</ph> and <ph id="ph2">`SetCircleOffset`</ph> functions are added to the end of the control's .CPP file.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In most cases, you will modify the Get function to return the value of the property.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The Set function will usually contain code that should be executed either before or after the property changes.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#28</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Note that the Add Property Wizard automatically adds a call, to <bpt id="p1">[</bpt>SetModifiedFlag<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__setmodifiedflag)</ept>, to the body of the Set function.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Calling this function marks the control as modified.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If a control has been modified, its new state will be saved when the container is saved.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This function should be called whenever a property, saved as part of the control's persistent state, changes value.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Properties</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Methods</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>COleControl Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>